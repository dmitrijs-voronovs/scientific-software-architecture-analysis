quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,filename,wiki,url,total_similar,target_keywords,target_matched_words
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » About Project Founders. Rene Brun ; ; Rene, a lifetime developer of ROOT. He joined CERN in 1973. While working with C. Rubbia at the ISR he developped the HBOOK package still in use today. In 1975 he followed Rubbia in the NA4 deep inelastic muon scattering experiment at the SPS where he was in charge of the simulation and reconstruction softwar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/project-founders.html:1204,guid,guidelines,1204,d/project-founders.html,https://root.cern,https://root.cern/d/project-founders.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » About Team. . Axel Naumann ; ; Starting off as a physicist, Axel studied physics and math in Muenster, Germany. In 2000, he got a Ph.D. position for high energy physics in Nijmegen, The Netherlands. They sent him to Fermilab at Chicago, where he worked with the DØ experiment - which also meant writing software from PCI drivers to data analysis co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/team.html:1192,guid,guidelines,1192,d/team.html,https://root.cern,https://root.cern/d/team.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Blogs » Axel Naumann's blog Do we need yet another custom C++ interpreter?. Axel Naumann on Thu, 12/22/2011 - 22:13 . Hi,; ""A ROOT User"" asks ""Is it really necessary to replace CINT dictionary with cling?"", bringing up very reasonable concerns and arguments against re-implementing CINT. I will try to answer his comments to clarify why we do it, a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/blog/do-we-need-yet-another-custom-c-interpreter.html:1234,guid,guidelines,1234,d/blog/do-we-need-yet-another-custom-c-interpreter.html,https://root.cern,https://root.cern/d/blog/do-we-need-yet-another-custom-c-interpreter.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Contribute Collaborate With Us. We warmly welcome external contributions to the ROOT! By providing code, you agree to transfer your copyright on the code to the ""ROOT project"". Of course you will be duly credited and your name will appear on the contributors page and in the CREDITS file shipped with every binary and source distribution. The copyr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/collaborate-with-us.html:1207,guid,guidelines,1207,d/collaborate-with-us.html,https://root.cern,https://root.cern/d/collaborate-with-us.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development Code Owners. ROOT consists of several loosely coupled but consistently designed parts. The ""code owners"" of these parts are experts that review pull requests and guide these packages over a couple of years.; An up-to-date, detailed mapping of code versus owners can be found at https://github.com/root-project/root/blob/master/.github/C",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/code-owners.html:1199,guid,guidelines,1199,d/code-owners.html,https://root.cern,https://root.cern/d/code-owners.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development Coding Conventions. Naming conventions; Class definition conventions. Inline; Declaration Order. Avoid raw C types; Exception handling; Namespaces; Using comments to document the code; Source file layout. Header file layout; Implementation file layout. Preferred Coding Style. Indentation; Placing Braces and Spaces. ClangFormat; Astyle",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/coding-conventions.html:1206,guid,guidelines,1206,d/coding-conventions.html,https://root.cern,https://root.cern/d/coding-conventions.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development Formatting Comments for Doxygen. The ROOT team has adopted Doxygen for generating the reference manual. Here you will find a number of conventions and tips for converting the existing source code to generate proper documentation.; How to generate the doxygen documentation; Developers may generate the documentation by hand to see the r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/formatting-comments-doxygen.html:1219,guid,guidelines,1219,d/formatting-comments-doxygen.html,https://root.cern,https://root.cern/d/formatting-comments-doxygen.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development Git Primer. These links collect the minimal amount of knowledge about git a ROOT contributor needs to know:. Git How Tos; NoSY Workflow; Git Tips and Tricks; Creating a Pull Request. Quick Links; Jenkins Service; Jenkins How To; CDash; Coverity; Github; GitWeb; LXR; Jira; Conventions Violations; ROOT Logos; Upgrade of ROOTbinder. Site",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/git-primer.html:1198,guid,guidelines,1198,d/git-primer.html,https://root.cern,https://root.cern/d/git-primer.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development How to setup ROOT externals from AFS/CVMFS. The following instructions are useful for setting up an environment with all the required ROOT externals coming from the central installations inAFS or CVMFS. This is exactly the same scripts used by the continuous integration system (Jenkins).; For slc and centos systems using the gcc compi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/how-setup-root-externals-afscvmfs.html:1230,guid,guidelines,1230,d/how-setup-root-externals-afscvmfs.html,https://root.cern,https://root.cern/d/how-setup-root-externals-afscvmfs.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development How to use the ROOT Jenkins. The ROOT project uses a Jenkins instance to schedule a number of software development procedures (nightly builds, production of releases, documentation generation, etc.). Practical information about the service can be found here. The purpose of this page is to document the different existing procedures for",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/how-use-root-jenkins.html:1215,guid,guidelines,1215,d/how-use-root-jenkins.html,https://root.cern,https://root.cern/d/how-use-root-jenkins.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development Meetings. All ROOT-related meetings ca be found in ROOT's Indico category; the upcoming ones can be seen here to the right.; Weekly Developers Meetings; Developers get together on a weekly basis to discuss the plans and review the progress on Monday's at 16:00 CET. Indico category; Vidyo ROOT Team meeting. Experiments Planning Meeting",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/meetings.html:1196,guid,guidelines,1196,d/meetings.html,https://root.cern,https://root.cern/d/meetings.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development Program of Work. The program of work is guided by the project vision laid out here, and documented for the relevant years in the following documents:; 2019. Presentation. 2018. Presentation. 2017. Presentation at the ROOT planning meeting, Jan 11 2017; JIRA items. 2016. Presentation at the EP-SFT group meeting. 2015. Presentation at t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/program-work.html:1203,guid,guidelines,1203,d/program-work.html,https://root.cern,https://root.cern/d/program-work.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development ROOT 7. For the first time since 20 year (i.e. ever), the ROOT team plans to break backward compatibility for crucial interfaces - once.; This new major version of ROOT will make ROOT much simpler and safer to use: we want to increase clarity and usability.; If you are a physicist, please read on - this is about your ROOT.; The ROOT t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/root-7.html:1194,guid,guidelines,1194,d/root-7.html,https://root.cern,https://root.cern/d/root-7.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development Release Checklist. Steps to be followed to produce a new ROOT release are:; Prerequisites. Get the 'green' light from all main developers; Check that all the Jenkins builds / CDash builds are green; Verify that no performance regressions exist in the benchmark system; Update versions in JIRA. 'Release' the version in the project confi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/release-checklist.html:1205,guid,guidelines,1205,d/release-checklist.html,https://root.cern,https://root.cern/d/release-checklist.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development Run the tests. Running the ROOT battery of tests; Running all ROOT tests on at least a platform before sending a PR or before pushing anything to the ROOT repository is mandatory.; The ROOT continuous integration infrastructure allows to automatically check the PR also on a battery of platform, for example including macos and linux bo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/run-tests.html:1201,guid,guidelines,1201,d/run-tests.html,https://root.cern,https://root.cern/d/run-tests.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development Shifter's Instructions. These are the aspects the shifter shall keep under control; The shifter summarises the events of the week during the ROOT meeting. The hand-over to the next shifter must be carefully handled.; Forum Posts; All forum posts have to be followed up. Some hours can be given to the community to discuss the questions ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/shifters-instructions.html:1210,guid,guidelines,1210,d/shifters-instructions.html,https://root.cern,https://root.cern/d/shifters-instructions.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development » Git Primer A suggested work flow for distributed projects: NoSY. Overview; Building on the tips and other points explained elsewhere, this workflow has the following advantages relative to always working on the master branch:; It is easy to keep track of upstream changes even when working on a protracted task.; The change tree remai",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/suggested-work-flow-distributed-projects-nosy.html:1240,guid,guidelines,1240,d/suggested-work-flow-distributed-projects-nosy.html,https://root.cern,https://root.cern/d/suggested-work-flow-distributed-projects-nosy.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development » Git Primer Creating a Pull Request. Prerequisites. You have set up git on our system; You have registered a GitHub account and forked the ROOT repository; You have cloned your forked ROOT repository using git clone https://github.com/<your GitHub username>/root. After you have cloned the repository, you will be on the master branch.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/creating-pull-request.html:1211,guid,guidelines,1211,d/creating-pull-request.html,https://root.cern,https://root.cern/d/creating-pull-request.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development » Git Primer Git How Tos. Overview; Building on the tips and other points explained elsewhere, this workflow has the following advantages relative to always working on the master branch:. It is easy to keep track of upstream changes even when working on a protracted task.; The change tree remains simple, easy to understand at a glance",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/git-how-tos.html:1199,guid,guidelines,1199,d/git-how-tos.html,https://root.cern,https://root.cern/d/git-how-tos.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development » Git Primer Git Tips and Tricks. Overview; This page gives some helpful hints and tricks on using git, along with a suggested work-flow, with an explanation of its motivation and details.; Some pertinent Git details; It is assumed at this point that you have a passing familiarity with CVS and/or Subversion; and that you have at least",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/git-tips-and-tricks.html:1207,guid,guidelines,1207,d/git-tips-and-tricks.html,https://root.cern,https://root.cern/d/git-tips-and-tricks.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development » Git Primer Github ssh key. Using Github with ssh keys is preferred, as it's much easier to use. Here is how to set it up:; 1. Create an ssh key; Run; ssh-keygen -t rsa -b 4096 -C ""your_email@example.com"" -f ~/.ssh/github_id_rsa. The email address is for your convenience, it doesn't really matter what you put there; you can even use ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/github-ssh-key.html:1202,guid,guidelines,1202,d/github-ssh-key.html,https://root.cern,https://root.cern/d/github-ssh-key.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation Building ROOT. Introduction; ROOT uses the CMake cross-platform build-generator tool as a primary build system. CMake does not build the project, it generates the files needed by your build tool (GNU make, Ninja, Visual Studio, etc) for building ROOT. The classic build with configure/make is is still available but it will not be evo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/building-root.html:1201,guid,guidelines,1201,d/building-root.html,https://root.cern,https://root.cern/d/building-root.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation Courses. This page lists a number of ROOT tutorials and courses. Some are made by third parties others by the ROOT team.; Basic. ROOT Basic Course (CERN Technical Training: register here) ; CERN Summer Students' Introductory Tutorial (2018 2017, 2016, 2015 ); First Steps With ROOT; Introductory Tutorials (approx 2 hours); Lectures a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/courses.html:1195,guid,guidelines,1195,d/courses.html,https://root.cern,https://root.cern/d/courses.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation Frequently Asked Questions; [expand all][collapse all]. How to generate a dictionary . A dictionary is a source file that once compiled, linked into a library or executable and loaded into a process will give to CINT all the information its need about a type or variable. A dictionary is essential for a C++ to entity to useable from ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/faq-page.html:1214,guid,guidelines,1214,d/faq-page.html,https://root.cern,https://root.cern/d/faq-page.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation How To. Developer's Tips . Graphics and GUI . Histograms . Input/Output . Jupyter Notebooks . Language Bindings . Legacy . Linear Algebra . Multicore . Trees . Type System . Virtual Monte Carlo . Writing a Graphical User Interface . Language Bindings. How To Call CERNLIB Routines from CINT? . How to inherit a C++ class from Python? ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/howtos.html:1194,guid,guidelines,1194,d/howtos.html,https://root.cern,https://root.cern/d/howtos.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation Interfacing ROOT and Spark. Presently two ways are available to exploit the widely adopted Spark technology for carrying out ROOT based data analysis:. PyROOTSpark : offers the possibility to use a simple map reduce interface to run existing root code with a few changes on Spark resources. The key is to use the PyROOT inteface in co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/interfacing-root-and-spark.html:1214,guid,guidelines,1214,d/interfacing-root-and-spark.html,https://root.cern,https://root.cern/d/interfacing-root-and-spark.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation Publications. In case you want to cite ROOT in your own publications, this is the preferred reference. Rene Brun and Fons Rademakers,; ROOT - An Object Oriented Data Analysis Framework,; Proceedings AIHENP'96 Workshop, Lausanne, Sep. 1996, Nucl. Inst. & Meth. in Phys. Res. A 389 (1997) 81-86. See also http://root.cern.ch/. The most ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/publications.html:1200,guid,guidelines,1200,d/publications.html,https://root.cern,https://root.cern/d/publications.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation ROOT User Guides and Manuals. ROOT Guides. Title; Quick Link; All Links. Reference Guide; head / 6.08; all releases. User's Guide; 6 Series (html); all formats and series. ROOT Primer - Notebook Version (beta); html pdf GitHub / SWAN; *. ROOT Primer; 6 Series (html); all formats and series. ROOT Primer 5; 5 Series (pdf). Topical Man",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/root-user-guides-and-manuals.html:1216,guid,guidelines,1216,d/root-user-guides-and-manuals.html,https://root.cern,https://root.cern/d/root-user-guides-and-manuals.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation Reference Guide. The Reference Guide is available for all major ROOT releases, and for the current HEAD of the git master:. HEAD of the git master - browse; 6.20 - browse | download; 6.18 - browse | download; 6.16 - browse | download; 6.14 - browse | download; 6.12 - browse | download; 6.10 - browse | download; 6.08 - browse | downl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/guides/reference-guide.html:1203,guid,guidelines,1203,d/guides/reference-guide.html,https://root.cern,https://root.cern/d/guides/reference-guide.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation Tutorials. ROOT offers a rich set of code examples that allow you to see ROOT's building blocks ""in action"", as part of more complex programs. They are separated in two categories: C++ or python scripts and Jupyter notebooks.; The tutorials are available for all major ROOT releases. These are the links for the latest git snapshot. A",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/tutorials.html:1197,guid,guidelines,1197,d/tutorials.html,https://root.cern,https://root.cern/d/tutorials.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation » Courses Introductory Tutorials. Overview; The goal of this tutorial session is to learn how to read a tree from a ROOT file, extract some data from it, display a histogram and then fit it.;  ; Information about the ROOT classes can be found on the ROOT reference guide, and there is also a web based documentation and the Root prime",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/introductory-tutorials-1.html:1210,guid,guidelines,1210,d/introductory-tutorials-1.html,https://root.cern,https://root.cern/d/introductory-tutorials-1.html,2,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation » Courses » Introductory Tutorials Accessing a TTree With a TBrowser. Now, with the TFile still open, let's do some interactive work. Start the ROOT Browser by typing:; root[1] new TBrowser(). Something like this should appear:. Figure 2: Example of TBrowser at start-up time; On the left, in the ""ROOT Files"" folder, you can find the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/accessing-ttree-tbrowser.html:1221,guid,guidelines,1221,d/accessing-ttree-tbrowser.html,https://root.cern,https://root.cern/d/accessing-ttree-tbrowser.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation » Courses » Introductory Tutorials Accessing a TTree With a TSelector. What is a Selector?; To benefit from many ROOT features (e.g. PROOF and PROOF-lite) you should use a class deriving from the TSelector to analyze a TTree. The selector's code will be used by calling TTree::Process().; We provide a TSelector derived class in a sim",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/accessing-ttree-tselector.html:1222,guid,guidelines,1222,d/accessing-ttree-tselector.html,https://root.cern,https://root.cern/d/accessing-ttree-tselector.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation » Courses » Introductory Tutorials Compiling Your Code (also known as ACLiC). You can run your code as compiled code instead of interpreted. This makes it possible to debug your code, and might give slightly faster code.; Wherever you would specify MyCode.C you can simply specify MyCode.C+ (note the trailing ""+"") and ROOT will start",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/compiling-your-code-also-known-aclic.html:1229,guid,guidelines,1229,d/compiling-your-code-also-known-aclic.html,https://root.cern,https://root.cern/d/compiling-your-code-also-known-aclic.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation » Courses » Introductory Tutorials Fit Panel. As you can see, the fit (solid line) doesn't really describe the data: a polynomial is nowhere close to most data points. So from the Canvas, start the fit panel and use a gaussian (""gaus"") instead of a ""pol2"" to perform the fit. (You don't know what a Gaussian is? see http://en.wikipedi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/fit-panel.html:1197,guid,guidelines,1197,d/fit-panel.html,https://root.cern,https://root.cern/d/fit-panel.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation » Courses » Introductory Tutorials Histogramming in a Selector. Preparation; As previously, we provide a ready-made TSelector derived class in a simple source file. So please download also the following source file and save it where you can find it: EventDataSelector.C (or wget http://root-mirror.github.io/training/intro/EventDataSe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/histogramming-selector.html:1215,guid,guidelines,1215,d/histogramming-selector.html,https://root.cern,https://root.cern/d/histogramming-selector.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation » Courses » Introductory Tutorials Histogramming. Preparation; Start from the previously used macro (AnalyzeTree.C).; Adding a Variable; Just like for the sum of event sizes, you need to add a variable in your macro. We want to histogram the particles' fPosX; the type of the data member should thus be TH1F *. TH1F is a 1 dimensional",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/histogramming.html:1201,guid,guidelines,1201,d/histogramming.html,https://root.cern,https://root.cern/d/histogramming.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation » Courses » Introductory Tutorials Meet a TTree. We have created an example ROOT file containing a TTree: a typical data container used e.g. by all LHC experiments.; Start ROOT (it will reply with root[0]) and open the file located at http://root.cern/files/introtutorials/eventdata.root; To do so, just copy and paste:; TFile::Open(""",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/meet-ttree.html:1200,guid,guidelines,1200,d/meet-ttree.html,https://root.cern,https://root.cern/d/meet-ttree.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation » Courses » Introductory Tutorials TTree and Its Data. TTree; A TTree is a large, structured chunk of data on disk. The trick is that only selected parts of it are in memory at any given time. Here, with the help of some illustrations by our colleague Ioannis, we see how to extract these parts. Sit back and enjoy - in this step ther",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/ttree-and-its-data.html:1206,guid,guidelines,1206,d/ttree-and-its-data.html,https://root.cern,https://root.cern/d/ttree-and-its-data.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation » Courses » Introductory Tutorials The End. You are done - that was the introductory tutorial!. Image by Tangopaso; If you want to go on, have a look at the ROOT Courses section!; . ‹ Using a TSelector with PROOF; up. Navigate through this book; Meet a TTree; Accessing a TTree With a TBrowser; Using TTree::Draw() to access a TTree; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/end.html:1195,guid,guidelines,1195,d/end.html,https://root.cern,https://root.cern/d/end.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation » Courses » Introductory Tutorials Using TTree::Draw() to access a TTree. Now close the browser, quit and restart ROOT (to make sure everybody starts from the same point). Then open the file again:; root[0] TFile::Open(""http://root.cern/files/introtutorials/eventdata.root"");. For this exercise, you will probably need the TTree::Draw",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/using-ttreedraw-access-ttree.html:1225,guid,guidelines,1225,d/using-ttreedraw-access-ttree.html,https://root.cern,https://root.cern/d/using-ttreedraw-access-ttree.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation » Courses » Introductory Tutorials Using a Macro to Read a TTree. Why using a macro?; As real analyses don't fit into simple TTree::Draw() invocations, and as it is quite cumbersome to type the same lines again and again in the Root prompt, simply create macros for commonly used code. A macro is a file that is interpreted by ROOT.; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/using-macro-read-ttree.html:1217,guid,guidelines,1217,d/using-macro-read-ttree.html,https://root.cern,https://root.cern/d/using-macro-read-ttree.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation » Courses » Introductory Tutorials Using a TSelector with PROOF. For people having a multi (e.g. dual) core computer, it is possible to exploit all the available CPUs by using PROOF-Lite. N.B. PROOF-Lite doesn't work on Windows yet and it requires to use a selector composed of a source file and a header file. You can download both f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/using-tselector-proof.html:1216,guid,guidelines,1216,d/using-tselector-proof.html,https://root.cern,https://root.cern/d/using-tselector-proof.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Download Downloading ROOT. We are developing ROOT according to the principle of Release early and release often. However, since a very large portion of the user base requires a stable product we generally keep at least three versions of the system available for download. The development, production and old versions.; Production release; This is a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/downloading-root.html:1204,guid,guidelines,1204,d/downloading-root.html,https://root.cern,https://root.cern/d/downloading-root.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Download Releases. ; Pro ; Release 6.20/04 - 2020-04-01 ; . Old ; Release 6.18/04 - 2019-09-11 ; ; ; . Version 6 ; ; Release 6.20/06 - 2020-06-10. Release 6.20/02 - 2020-03-15. Release 6.20/00 - 2020-02-26. Release 6.19/02 - 2020-01-10. Release 6.19/01 - 2019-05-29. Release 6.18/02 - 2019-08-23. Release 6.18/00 - 2019-06-25. Release 6.16/00 - 201",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/releases.html:1196,guid,guidelines,1196,d/releases.html,https://root.cern,https://root.cern/d/releases.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » First Steps With ROOT Processing data with ROOT. The ROOT framework consists of many classes, grouped into several categories. Finally, the latter are grouped into few top-level categories. Each top-level category comes with a basic description of the framework design and of the purpose of its categories, which also have more detailed documentati",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/processing-data-root.html:1213,guid,guidelines,1213,d/processing-data-root.html,https://root.cern,https://root.cern/d/processing-data-root.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » First Steps With ROOT ROOT I/O. The ROOT framework consists of many classes, grouped into several categories. Finally, the latter are grouped into few top-level categories. Each top-level category comes with a basic description of the framework design and of the purpose of its categories, which also have more detailed documentation about their us",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/root-io.html:1196,guid,guidelines,1196,d/root-io.html,https://root.cern,https://root.cern/d/root-io.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » First Steps With ROOT Showing results with ROOT. The ROOT framework consists of many classes, grouped into several categories. Finally, the latter are grouped into few top-level categories. Each top-level category comes with a basic description of the framework design and of the purpose of its categories, which also have more detailed documentati",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/showing-results-root.html:1213,guid,guidelines,1213,d/showing-results-root.html,https://root.cern,https://root.cern/d/showing-results-root.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » First Steps With ROOT Simulation in ROOT. The ROOT framework consists of many classes, grouped into several categories. Finally, the latter are grouped into few top-level categories. Each top-level category comes with a basic description of the framework design and of the purpose of its categories, which also have more detailed documentation abou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/simulation-root.html:1206,guid,guidelines,1206,d/simulation-root.html,https://root.cern,https://root.cern/d/simulation-root.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » News Blog. ROOT::RWhy! ; ## Background. ROOT is implementing new interfaces following new interface styles. We follow [C++ Core Guidelines](https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md) where reasonable in our context. Most noticeably this means. - use of references as parameters instead... more . The status of ref",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/blog.html:1192,guid,guidelines,1192,d/blog.html,https://root.cern,https://root.cern/d/blog.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » News Workshops. Here the list with ROOT workshops:. ROOT 2018 ; ROOT 2015 ; ROOT 2013 (slides); ROOT 2007 (slides); ROOT 2005 (slides); ROOT 2007; ROOT 2002 (slides); ROOT 2001 (slides); ROOT 2000 (slides); ROOT 1999 slides ; And PROOF workshops:; PROOF 2007 (slides). Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; Us",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/workshops.html:1197,guid,guidelines,1197,d/workshops.html,https://root.cern,https://root.cern/d/workshops.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » ROOT 6 Analysis Workshop 0. Setting up ROOT. Downloading; If you don't have ROOT yet, download it! We have binaries but you can also build it yourself.; Environment Variables; ROOT expects ROOTSYS, PATH and LD_LIBRARY_PATH to be set correctly. If which root does not show anything then use the script that does all of that:; source wherever/root/is",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/0-setting-root.html:1206,guid,guidelines,1206,d/0-setting-root.html,https://root.cern,https://root.cern/d/0-setting-root.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » ROOT 6 Analysis Workshop 1. Extracting an object from a TFile. File can be local on your disk or remote accessible for instance through http:; root [0] TFile* file = TFile::Open(""http://someserver/somefile.root"");. You can list the objects inside the file using .ls:; root [1] .ls; TFile** hsimple.root Demo ROOT file with histograms; TFile* hsimpl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/1-extracting-object-tfile.html:1224,guid,guidelines,1224,d/1-extracting-object-tfile.html,https://root.cern,https://root.cern/d/1-extracting-object-tfile.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » ROOT 6 Analysis Workshop 10. Go Parallel!. Why you care; Number crunching takes time. If you look at top (open a terminal, type top) in Linux or your activity monitor on MacOS you will see that one core is really really busy with root. But only one core - and you have two or four or if you're lucky even more. What about getting much more data cru",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/10-go-parallel.html:1204,guid,guidelines,1204,d/10-go-parallel.html,https://root.cern,https://root.cern/d/10-go-parallel.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » ROOT 6 Analysis Workshop 11. Done!. Congratulations for finishing the tutorials! Here are a few relevant pointers on where to go from here:; The forum; Bug reports - also for bugs in this workshop!; The ROOT's tutorials - you find them in $ROOTSYS/tutorials; We hope to hear from you!; Your ROOT team. . ‹ TutorialSelector.C; up. Navigate through t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/11-done.html:1197,guid,guidelines,1197,d/11-done.html,https://root.cern,https://root.cern/d/11-done.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » ROOT 6 Analysis Workshop 2. Running code in ROOT. Interpreting; ROOT executes your C++ code. There are two ways: loading it into the interpreter or compiling it as a shared library. Either way, it's easiest to provide a function that has the same name as the file. For instance you could have a file printTree.C containing; int printTree(TFile* fil",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/2-running-code-root.html:1211,guid,guidelines,1211,d/2-running-code-root.html,https://root.cern,https://root.cern/d/2-running-code-root.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » ROOT 6 Analysis Workshop 3. Examining a TTree's data. The TTree; A TTree is a collection of similar data. It is the collection used by basically all High Energy Physics data. Traditionally, each entry in a TTree corresponds to a collision event. (Notable exceptions at the LHC are ALICE and LHCb which have a different mapping of TTree entries.); T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/3-examining-ttrees-data.html:1215,guid,guidelines,1215,d/3-examining-ttrees-data.html,https://root.cern,https://root.cern/d/3-examining-ttrees-data.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » ROOT 6 Analysis Workshop 4. Histogramming. What is a histogram?; Our TTree contains for instance the energy of all electrons. What we usually care about is its distribution - for instance by counting how often electrons have an energy within a certain range. Such a range is called ""bin"". Let's look at an example: draw the histogram of the momentu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/4-histogramming.html:1204,guid,guidelines,1204,d/4-histogramming.html,https://root.cern,https://root.cern/d/4-histogramming.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » ROOT 6 Analysis Workshop 5. Fitting. Distributions; Some analyses want to check theory predictions that exist as a function definition. Others want to use a distribution from a histogram in another step of the analysis. But histograms have bin steps by nature instead of being smooth, and they have bumps / fluctuations due to limited statistics (i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/5-fitting.html:1198,guid,guidelines,1198,d/5-fitting.html,https://root.cern,https://root.cern/d/5-fitting.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » ROOT 6 Analysis Workshop 6. Multivariate Analysis. Multiple Variables; The muon trigger should fire more likely for higher muon momenta - let's check that!; For that we need to draw two variables: how many were fired and ho many were not, against the momentum of the muon. We could put the fired / not fired on the y-axis, and the muon momentum on ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/6-multivariate-analysis.html:1212,guid,guidelines,1212,d/6-multivariate-analysis.html,https://root.cern,https://root.cern/d/6-multivariate-analysis.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » ROOT 6 Analysis Workshop 7. Using the TTreeReader. Accessing Value from a TTree; Up to now we have used TTree's ability to parse TTree::Draw() expressions and the TBrowser interface. Sometimes it's better to access the values in a script, one by one. There is a traditional way of doing this (TTree::SetBranchAddress() etc) and a new, recommended o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/7-using-ttreereader.html:1212,guid,guidelines,1212,d/7-using-ttreereader.html,https://root.cern,https://root.cern/d/7-using-ttreereader.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » ROOT 6 Analysis Workshop 8. Efficiency Calculation. Efficiency; Basically all analyses involve selections on parameters - as an example we will use the trigger selecting muons above a certain pT. Ideally, these selections suppress all events that have no muon above this pT, and include all events with at least one muon that has more than the cut ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/8-efficiency-calculation.html:1213,guid,guidelines,1213,d/8-efficiency-calculation.html,https://root.cern,https://root.cern/d/8-efficiency-calculation.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » ROOT 6 Analysis Workshop 9. Fitting By Coding. TF1; In ROOT you can fit histograms (or TEfficiency objects) using formulas that you provide, and that have free parameters. For an efficiency curve a TMath::Erf() is usually a good fit function. But you can't really use it as is. Let's see what it looks like:; // This lambda defines the values of th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/9-fitting-coding.html:1208,guid,guidelines,1208,d/9-fitting-coding.html,https://root.cern,https://root.cern/d/9-fitting-coding.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » ROOT 6 Analysis Workshop TutorialSelector.C. // This class is derived from the ROOT class TSelector to demonstrate; // the use of PROOF with the ROOT 6 Analysis Workshop from; // http://root.cern.ch/drupal/content/root-6-analysis-workshop; //; // For more information on the TSelector framework see; // $ROOTSYS/README/README.SELECTOR or the ROOT U",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/tutorialselectorc.html:1206,guid,guidelines,1206,d/tutorialselectorc.html,https://root.cern,https://root.cern/d/tutorialselectorc.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Support Guidelines for submitting a bug. Introduction; The RootTalk mailing list and forum can be used to pass information of general interest to the ROOT user community or to submit problems that you cannot solve with the information provided in the Documentation. Several thousands users read the list and forum and my provide you with solutions ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/guidelines-submitting-bug.html:1219,guid,guidelines,1219,d/guidelines-submitting-bug.html,https://root.cern,https://root.cern/d/guidelines-submitting-bug.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Support Mailing List mode on Discourse. Here is how to enable the ""mailing list mode"" feature on our Discourse forum. If you visit your profile, in Preferences - Emails, you will see:. By ticking ""Enable mailing list mode"", you will automatically receive an email every time a post is made on the forum.; Note: You can reply by email, and you can a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/mailing-list-mode-discourse.html:1218,guid,guidelines,1218,d/mailing-list-mode-discourse.html,https://root.cern,https://root.cern/d/mailing-list-mode-discourse.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Support RootTalk Digest. This mailing list is used to keep you up to date about important ROOT events (new releases, urgent bug fixes, etc.). This list is also used to discuss anything concerning ROOT with your fellow ROOT users and with the developers.; Currently available digests:; All articles of 2012 on the new e-groups mailing list; All arti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/roottalk-digest.html:1203,guid,guidelines,1203,d/roottalk-digest.html,https://root.cern,https://root.cern/d/roottalk-digest.html,1,['guid'],['guidelines']
Usability,"ROOT headers needed by the proxy\n"");; 1746 fprintf(hf,""#include <TROOT.h>\n"");; 1747 fprintf(hf,""#include <TChain.h>\n"");; 1748 fprintf(hf,""#include <TFile.h>\n"");; 1749 fprintf(hf,""#include <TPad.h>\n"");; 1750 fprintf(hf,""#include <TH1.h>\n"");; 1751 fprintf(hf,""#include <TSelector.h>\n"");; 1752 fprintf(hf,""#include <TBranchProxy.h>\n"");; 1753 fprintf(hf,""#include <TBranchProxyDirector.h>\n"");; 1754 fprintf(hf,""#include <TBranchProxyTemplate.h>\n"");; 1755 fprintf(hf,""#include <TFriendProxy.h>\n"");; 1756 fprintf(hf,""using namespace ROOT::Internal;\n""); // questionable; 1757 fprintf(hf,""using ROOT::Detail::TBranchProxy;\n""); // questionable; 1758 fprintf(hf,""\n"");; 1759 ; 1760 fprintf(hf,""// forward declarations needed by this particular proxy\n"");; 1761 TIter next( &fListOfForwards );; 1762 TObject *current;; 1763 while ( (current=next()) ) {; 1764 if (strstr(current->GetTitle(),""::"")==nullptr) {; 1765 // We can not forward declared nested classes (well we might be able to do so for; 1766 // the one nested in a namespace but it is not clear yet if we can really reliably; 1767 // find this information); 1768 fprintf(hf,""%s"",current->GetTitle());; 1769 }; 1770 }; 1771 ; 1772 fprintf(hf,""\n\n"");; 1773 fprintf(hf,""// Header needed by this particular proxy\n"");; 1774 next = &fListOfHeaders;; 1775 TObject *header;; 1776 while ( (header = next()) ) {; 1777 fprintf(hf,""%s"",header->GetTitle());; 1778 }; 1779 fprintf(hf,""\n\n"");; 1780 ; 1781 fprintf(hf,""class %s_Interface {\n"", scriptfunc.Data());; 1782 fprintf(hf,"" // This class defines the list of methods that are directly used by %s,\n"",classname.Data());; 1783 fprintf(hf,"" // and that can be overloaded in the user's script\n"");; 1784 fprintf(hf,""public:\n"");; 1785 fprintf(hf,"" void %s_Begin(TTree*) {}\n"",scriptfunc.Data());; 1786 fprintf(hf,"" void %s_SlaveBegin(TTree*) {}\n"",scriptfunc.Data());; 1787 fprintf(hf,"" bool %s_Notify() { return true; }\n"",scriptfunc.Data());; 1788 fprintf(hf,"" bool %s_Process(Long64_t) { return",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTreeProxyGenerator_8cxx_source.html:66588,clear,clear,66588,doc/master/TTreeProxyGenerator_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTreeProxyGenerator_8cxx_source.html,1,['clear'],['clear']
Usability,"ROOT/RDF/RDatasetSpec.hxx""; 15#include ""ROOT/RDF/RInterface.hxx""; 16#include ""ROOT/RDF/RLoopManager.hxx""; 17#include ""ROOT/RDF/Utils.hxx""; 18#include <string_view>; 19#include ""TChain.h""; 20#include ""TDirectory.h""; 21#include ""RtypesCore.h"" // for ULong64_t; 22#include ""TTree.h""; 23 ; 24#include <fstream> // std::ifstream; 25#include <nlohmann/json.hpp> // nlohmann::json::parse; 26#include <memory> // for make_shared, allocator, shared_ptr; 27#include <ostream> // ostringstream; 28#include <stdexcept>; 29#include <string>; 30#include <vector>; 31 ; 32// clang-format off; 33/**; 34* \class ROOT::RDataFrame; 35* \ingroup dataframe; 36* \brief ROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree , CSV and other data formats, in C++ or Python.; 37 ; 38In addition, multi-threading and other low-level optimisations allow users to exploit all the resources available; 39on their machines completely transparently.<br>; 40Skip to the [class reference](#reference) or keep reading for the user guide.; 41 ; 42In a nutshell:; 43~~~{.cpp}; 44ROOT::EnableImplicitMT(); // Tell ROOT you want to go parallel; 45ROOT::RDataFrame d(""myTree"", ""file_*.root""); // Interface to TTree and TChain; 46auto myHisto = d.Histo1D(""Branch_A""); // This books the (lazy) filling of a histogram; 47myHisto->Draw(); // Event loop is run here, upon first access to a result; 48~~~; 49 ; 50Calculations are expressed in terms of a type-safe *functional chain of actions and transformations*, RDataFrame takes; 51care of their execution. The implementation automatically puts in place several low level optimisations such as; 52multi-thread parallelization and caching.; 53 ; 54\htmlonly; 55<a href=""https://doi.org/10.5281/zenodo.260230""><img src=""https://zenodo.org/badge/DOI/10.5281/zenodo.260230.svg""; 56alt=""DOI""></a>; 57\endhtmlonly; 58 ; 59## For the impatient user; 60You can directly see RDataFrame in action in our [tutorials](https://root.cern/doc/master/group__tutorial__d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RDataFrame_8cxx_source.html:1785,guid,guide,1785,doc/master/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RDataFrame_8cxx_source.html,2,['guid'],['guide']
Usability,"ROOT::EExecutionPolicy ExecPolicyDefinition Foption.h:52; Foption_t::StoreResultint StoreResultDefinition Foption.h:49; Foption_t::Nochisqint NochisqDefinition Foption.h:45; Foption_t::Robustint RobustDefinition Foption.h:48; Foption_t::hRobustdouble hRobustDefinition Foption.h:51; Foption_t::Plusint PlusDefinition Foption.h:43; Foption_t::Integralint IntegralDefinition Foption.h:44; Foption_t::Boundint BoundDefinition Foption.h:31; Foption_t::Nostoreint NostoreDefinition Foption.h:41; Foption_t::Moreint MoreDefinition Foption.h:38; Foption_t::PChi2int PChi2Definition Foption.h:33; Foption_t::Chi2int Chi2Definition Foption.h:32; Foption_t::Minuitint MinuitDefinition Foption.h:46; Foption_t::Errorsint ErrorsDefinition Foption.h:37; Foption_t::NoErrXint NoErrXDefinition Foption.h:47; Foption_t::Verboseint VerboseDefinition Foption.h:30; Foption_t::Userint UserDefinition Foption.h:35; Foption_t::BinVolumeint BinVolumeDefinition Foption.h:50; ROOT::Fit::DataOptionsDataOptions : simple structure holding the options on how the data are filled.Definition DataOptions.h:28; ROOT::Fit::DataOptions::fErrors1bool fErrors1use all errors equal to 1, i.e. fit without errors (default is false)Definition DataOptions.h:52; ROOT::Fit::DataOptions::fNormBinVolumebool fNormBinVolumenormalize data by a normalized the bin volume (bin volume divided by a reference value)Definition DataOptions.h:49; ROOT::Fit::DataOptions::fUseRangebool fUseRangeuse the function range when creating the fit data (default is false)Definition DataOptions.h:51; ROOT::Fit::DataOptions::fUseEmptybool fUseEmptyuse empty bins (default is false) with a fixed error of 1Definition DataOptions.h:50; ROOT::Fit::DataOptions::fIntegralbool fIntegraluse integral of bin content instead of bin center (default is false)Definition DataOptions.h:47; ROOT::Fit::DataOptions::fExpErrorsbool fExpErrorsuse expected errors from the function and not from the dataDefinition DataOptions.h:53; ROOT::Fit::DataOptions::fBinVolumebool fBinV",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/HFitImpl_8cxx_source.html:64607,simpl,simple,64607,doc/master/HFitImpl_8cxx_source.html,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html,1,['simpl'],['simple']
Usability,"ROOT::EExecutionPolicy::kSequential, . unsigned ; nChunks = 0 . ). evaluate the Chi2 gradient given a model function and the data at the point p. ; return also nPoints as the effective number of used points in the Chi2 evaluation . ◆ EvaluateChi2Residual(). double ROOT::Fit::FitUtil::EvaluateChi2Residual ; (; const IModelFunction & ; func, . const BinData & ; data, . const double * ; p, . unsigned int ; i, . double * ; g = nullptr, . double * ; h = nullptr, . bool ; hasGrad = false, . bool ; useFullHessian = false . ). evaluate the residual contribution to the Chi2 given a model function and the BinPoint data and if the pointer g is not null evaluate also the gradient of the residual. ; evaluate the chi2 contribution (residual term) only for data with no coord-errors This function is used in the specialized least square algorithms like FUMILI or L.M.; If the function provides parameter derivatives they are used otherwise a simple derivative calculation is used; if we have error on the coordinates the residual weight depends on the function value and the approximation used by Fumili and Levenberg-Marquardt cannot be used. Also the expected error and bin integral options should not be used in this case ; Definition at line 545 of file FitUtil.cxx. ◆ EvaluateLogL(). double ROOT::Fit::FitUtil::EvaluateLogL ; (; const IModelFunction & ; func, . const UnBinData & ; data, . const double * ; p, . int ; iWeight, . bool ; extended, . unsigned int & ; nPoints, . ::ROOT::EExecutionPolicy ; executionPolicy, . unsigned ; nChunks = 0 . ). evaluate the LogL given a model function and the data at the point x. ; return also nPoints as the effective number of used points in the LogL evaluation . ◆ EvaluateLogLGradient(). void ROOT::Fit::FitUtil::EvaluateLogLGradient ; (; const IModelFunction & ; func, . const UnBinData & ; data, . const double * ; p, . double * ; grad, . unsigned int & ; nPoints, . ::ROOT::EExecutionPolicy ; executionPolicy = ::ROOT::EExecutionPolicy::kSequential, . u",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html:7723,simpl,simple,7723,doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html,1,['simpl'],['simple']
Usability,"ROOT::Math::Minimizer::fValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). private:. vector<double>fCovarvector storing the covariance matrix; unsigned intfDim; vector<double>fErrorsvector of output errors; boolfMinosRun; TMinuit*fMinuit; vector<double>fParamsvector of output values; ROOT::Minuit::EMinimizerTypefType; boolfUsed; static ROOT::Math::IBaseFunctionMultiDim*fgFunc; static TMinuit*fgMinuit; static boolfgUseStaticMinuitflag to control if using global TMInuit instance (gMinuit); static boolfgUsedflag to control if static instance has done minimization. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TMinuitMinimizer(ROOT::Minuit::EMinimizerType type = ROOT::Minuit::kMigrad, unsigned int ndim = 0); Constructor for TMinuitMinimier class via an enumeration specifying the minimization; algorithm type. Supported types are : kMigrad, kSimplex, kCombined (a combined; Migrad + Simplex minimization) and kMigradImproved (a Migrad mininimization folloed by an; improved search for global minima). The default type is Migrad (kMigrad). TMinuitMinimizer(const char* type, unsigned int ndim = 0); constructor from a char * for the algorithm type, used by the plug-in manager; The names supported (case unsensitive) are:; Migrad (default), Simplex, Minimize (for the combined Migrad+ Simplex) and Migrad_imp. ~TMinuitMinimizer(); Destructor implementation. TMinuitMinimizer(const TMinuitMinimizer& ); Implementation of copy constructor (it is private). bool UseStaticMinuit(bool on = true); static method to control usage of global TMinuit instance. void InitTMinuit(int ndim). void SetFunction(const ROOT::Math::IMultiGenFunction & func); Set the objective function to be minimized, by passing a function object implement the; basic multi-dim Function interface. In this case the derivatives will be; calculated by Minuit; Here a TMinuit instance is created since only at this point we know the number of",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMinuitMinimizer.html:6366,Simpl,Simplex,6366,root/html534/TMinuitMinimizer.html,https://root.cern,https://root.cern/root/html534/TMinuitMinimizer.html,1,['Simpl'],['Simplex']
Usability,"ROOT::TThreadExecutorThis class provides a simple interface to execute the same task multiple times in parallel threads,...Definition TThreadExecutor.hxx:41; ROOT::TThreadExecutor::Foreachvoid Foreach(F func, unsigned nTimes, unsigned nChunks=0)Execute a function without arguments several times in parallel, dividing the execution in nChunks.Definition TThreadExecutor.hxx:146; TStopwatchStopwatch class.Definition TStopwatch.h:28; TStopwatch::RealTimeDouble_t RealTime()Stop the stopwatch (if it is running) and return the realtime (in seconds) passed between the start a...Definition TStopwatch.cxx:110; TStopwatch::Startvoid Start(Bool_t reset=kTRUE)Start the stopwatch.Definition TStopwatch.cxx:58; TStopwatch::CpuTimeDouble_t CpuTime()Stop the stopwatch (if it is running) and return the cputime (in seconds) passed between the start an...Definition TStopwatch.cxx:125; TStopwatch::Stopvoid Stop()Stop the stopwatch.Definition TStopwatch.cxx:77; TTreeReaderA simple, robust and fast interface to read values from ROOT columnar datasets such as TTree,...Definition TTreeReader.h:46; double; int; ROOT::Detail::RDF::RDFLogChannelROOT::Experimental::RLogChannel & RDFLogChannel()Definition RDFUtils.cxx:37; ROOT::Experimental::Internal::GetChannelOrManagerRLogChannel & GetChannelOrManager()Definition RLogger.hxx:302; ROOT::Experimental::ELogLevel::kDebug@ kDebugDebug information; only useful for developers; can have added verbosity up to 255-kDebug.; ROOT::Experimental::ELogLevel::kError@ kErrorAn error.; ROOT::RDF::Experimental::VariationsForRResultMap< T > VariationsFor(RResultPtr< T > resPtr)Produce all required systematic variations for the given result.Definition RDFHelpers.hxx:219; ROOT::RDF::Experimental::AddProgressBarvoid AddProgressBar(ROOT::RDF::RNode df)Add ProgressBar to a ROOT::RDF::RNode.Definition RDFHelpers.cxx:373; ROOT::RDF::RunGraphsunsigned int RunGraphs(std::vector< RResultHandle > handles)Trigger the event loop of multiple RDataFrames concurrently.Definition RD",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RDFHelpers_8cxx_source.html:22084,simpl,simple,22084,doc/master/RDFHelpers_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RDFHelpers_8cxx_source.html,1,['simpl'],['simple']
Usability,"ROOT::option::Arg::Nonestatic ArgStatus None(const Option &, bool)For options that don't take an argument: Returns ARG_NONE.Definition OptionParser.h:907. Definition at line 544 of file OptionParser.h. ◆ untag(). static Option * ROOT::option::Option::untag ; (; Option * ; ptr). inlinestaticprivate . Definition at line 839 of file OptionParser.h. Member Data Documentation. ◆ arg. const char* ROOT::option::Option::arg. Pointer to this Option's argument (if any). ; NULL if this option has no argument. Do not confuse this with the empty string which is a valid argument. ; Definition at line 500 of file OptionParser.h. ◆ desc. const Descriptor* ROOT::option::Option::desc. Pointer to this Option's Descriptor. ; Remember that the first dummy descriptor (see Descriptor::longopt) is used for unknown options.; Attentiondesc==NULL signals that this Option is unused. This is the default state of elements in the result array. You don't need to test desc explicitly. You can simply write something like this: if (options[CREATE]); {; ...; }; This works because of operator const Option*() . ; Definition at line 476 of file OptionParser.h. ◆ name. const char* ROOT::option::Option::name. The name of the option as used on the command line. ; The main purpose of this string is to be presented to the user in messages.; In the case of a long option, this is the actual argv pointer, i.e. the first character is a '-'. In the case of a short option this points to the option character within the argv string.; Note that in the case of a short option group or an attached option argument, this string will contain additional characters following the actual name. Use namelen to filter out the actual option name only. ; Definition at line 492 of file OptionParser.h. ◆ namelen. int ROOT::option::Option::namelen. The length of the option name. ; Because name points into the actual argv string, the option name may be followed by more characters (e.g. other short options in the same short option group).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1option_1_1Option.html:13706,simpl,simply,13706,doc/v632/classROOT_1_1option_1_1Option.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1option_1_1Option.html,2,['simpl'],['simply']
Usability,"RUE, Int_t nrays = 10000, const Double_t* vertex = __null); Geometry checking method (see: TGeoManager::CheckGeometry()). void CheckGeometry(Int_t nrays, Double_t startx, Double_t starty, Double_t startz) const; Geometry checking method (see TGeoChecker). void CheckOverlaps(const TGeoVolume* vol, Double_t ovlp = 0.10000000000000001, Option_t* option = """") const; Check overlaps for the top volume of the geometry, within a limit OVLP. void CheckPoint(Double_t x = 0, Double_t y = 0, Double_t z = 0, Option_t* option = """"); check current point in the geometry. void CheckShape(TGeoShape* shape, Int_t testNo, Int_t nsamples, Option_t* option); Test for shape navigation methods. Summary for test numbers:; 1: DistFromInside/Outside. Sample points inside the shape. Generate; directions randomly in cos(theta). Compute DistFromInside and move the; point with bigger distance. Compute DistFromOutside back from new point.; Plot d-(d1+d2). void ClearVisibleVolumes(); Clear the list of visible volumes; reset the kVisOnScreen bit for volumes previously in the list. void DefineColors() const; Define 100 colors with increasing light intensities for each basic color (1-7); Register these colors at indexes starting with 1000. Int_t GetColor(Int_t base, Float_t light) const; Get index of a base color with given light intensity (0,1). TGeoVolume * GetDrawnVolume() const; Get currently drawn volume. Int_t DistanceToPrimitiveVol(TGeoVolume* vol, Int_t px, Int_t py); compute the closest distance of approach from point px,py to a volume. void DefaultAngles(); Set default angles for the current view. void DefaultColors(); Set default volume colors according to tracking media. Int_t CountNodes(TGeoVolume* vol, Int_t level) const; Count number of visible nodes down to a given level. Int_t CountVisibleNodes(); Count total number of visible nodes. void CheckEdit(); Check if Ged library is loaded and load geometry editor classe. void EditGeometry(Option_t* option = """"); Start the geometry editor. vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoPainter.html:15799,Clear,ClearVisibleVolumes,15799,root/html602/TGeoPainter.html,https://root.cern,https://root.cern/root/html602/TGeoPainter.html,4,['Clear'],"['Clear', 'ClearVisibleVolumes']"
Usability,"RangeName = 0); virtual voidShowMembers(TMemberInspector& insp, char* parent); voidRooCacheManager<RooAbsCacheElement>::sterilize(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; protected:. Bool_t_clearOnRedirect; Int_tRooCacheManager<RooAbsCacheElement>::_lastIndexLast slot accessed; Int_tRooCacheManager<RooAbsCacheElement>::_maxSizeMaximum size; RooNormSetCache*RooCacheManager<RooAbsCacheElement>::_nsetCache! Normalization/Integration set manager; RooAbsCacheElement**RooCacheManager<RooAbsCacheElement>::_object! Payload; Bool_t_optCacheModeSeen; list<RooArgSet*>_optCacheObsList! list of all optCacheObservables owned; RooArgSet*_optCacheObservables! current optCacheObservables ; RooAbsArg*RooAbsCache::_ownerPointer to owning RooAbsArg; Int_tRooCacheManager<RooAbsCacheElement>::_sizeActual use. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooObjCacheManager(RooAbsArg* owner = 0, Int_t maxSize = 10, Bool_t clearCacheOnServerRedirect = kTRUE); Constructor of object cache manager for given owner. If clearCacheOnServerRedirect is true; all cache elements will be cleared when a server redirect is intercepted by the cache manager.; This is the default strategy and should only be overridden when you really understand; what you're doing as properly implementing server redirect in cache elements can get very; complicated, especially if there are (cyclical) reference back to the owning object. RooObjCacheManager(const RooObjCacheManager& other, RooAbsArg* owner = 0); Copy constructor. ~RooObjCacheManager(); Destructor. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ); Intercept server redirect calls. If clearOnRedirect was set, sterilize; the cache (i.e. keep the structure but delete all contents). If not; forward serverRedirect to cache elements. void operModeHook(); Intercept changes to cache operation mode and forward to cache elements. void optimizeCacheMode(c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooObjCacheManager.html:3631,clear,clearCacheOnServerRedirect,3631,root/html526/RooObjCacheManager.html,https://root.cern,https://root.cern/root/html526/RooObjCacheManager.html,1,['clear'],['clearCacheOnServerRedirect']
Usability,"Rate, settings.optimizerParams[""ADAM_beta1""],; 1365 settings.optimizerParams[""ADAM_beta2""], settings.optimizerParams[""ADAM_eps""]));; 1366 break;; 1367 }; 1368 ; 1369 case EOptimizer::kAdagrad:; 1370 optimizer = std::unique_ptr<DNN::TAdagrad<Architecture_t, Layer_t, DeepNet_t>>(; 1371 new DNN::TAdagrad<Architecture_t, Layer_t, DeepNet_t>(deepNet, settings.learningRate,; 1372 settings.optimizerParams[""ADAGRAD_eps""]));; 1373 break;; 1374 ; 1375 case EOptimizer::kRMSProp:; 1376 optimizer = std::unique_ptr<DNN::TRMSProp<Architecture_t, Layer_t, DeepNet_t>>(; 1377 new DNN::TRMSProp<Architecture_t, Layer_t, DeepNet_t>(deepNet, settings.learningRate, settings.momentum,; 1378 settings.optimizerParams[""RMSPROP_rho""],; 1379 settings.optimizerParams[""RMSPROP_eps""]));; 1380 break;; 1381 ; 1382 case EOptimizer::kAdadelta:; 1383 optimizer = std::unique_ptr<DNN::TAdadelta<Architecture_t, Layer_t, DeepNet_t>>(; 1384 new DNN::TAdadelta<Architecture_t, Layer_t, DeepNet_t>(deepNet, settings.learningRate,; 1385 settings.optimizerParams[""ADADELTA_rho""],; 1386 settings.optimizerParams[""ADADELTA_eps""]));; 1387 break;; 1388 }; 1389 ; 1390 ; 1391 // Initialize the vector of batches, one batch for one slave network; 1392 std::vector<TTensorBatch<Architecture_t>> batches{};; 1393 ; 1394 bool converged = false;; 1395 size_t convergenceCount = 0;; 1396 size_t batchesInEpoch = nTrainingSamples / deepNet.GetBatchSize();; 1397 ; 1398 // start measuring; 1399 std::chrono::time_point<std::chrono::system_clock> tstart, tend;; 1400 tstart = std::chrono::system_clock::now();; 1401 ; 1402 // function building string with optimizer parameters values for logging; 1403 auto optimParametersString = [&]() {; 1404 TString optimParameters;; 1405 for ( auto & element : settings.optimizerParams) {; 1406 TString key = element.first;; 1407 key.ReplaceAll(settings.optimizerName + ""_"", """"); // strip optimizerName_; 1408 double value = element.second;; 1409 if (!optimParameters.IsNull()); 1410 optimParameters += "","";; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDL_8cxx_source.html:55004,learn,learningRate,55004,doc/master/MethodDL_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDL_8cxx_source.html,1,['learn'],['learningRate']
Usability,"ReadStreamerInfo(). void TFile::ReadStreamerInfo ; (; ). virtual . Read the list of StreamerInfo from this file. ; The key with name holding the list of TStreamerInfo objects is read. The corresponding TClass objects are updated. Note that this function is not called if the static member fgReadInfo is false. (see TFile::SetReadStreamerInfo) ; Definition at line 3605 of file TFile.cxx. ◆ Recover(). Int_t TFile::Recover ; (; ). virtual . Attempt to recover file if not correctly closed. ; The function returns the number of keys that have been recovered. If no keys can be recovered, the file will be declared Zombie by the calling function. This function is automatically called when opening a file. If the file is open in read only mode, the file is not modified. If open in update mode and the function finds something to recover, a new directory header is written to the file. When opening the file gain no message from Recover will be reported. If keys have been recovered, the file is usable and you can safely read the corresponding objects. If the file is not usable (a zombie), you can test for this case with code like:; TFile f(""myfile.root"");; if (f.IsZombie()) {<actions to take if file is unusable>}; If the file has been recovered, the bit kRecovered is set in the TFile object in memory. You can test if the file has been recovered with if (f.TestBit(TFile::kRecovered)) {... the file has been recovered}; When writing TTrees to a file, it is important to save the Tree header at regular intervals (see TTree::AutoSave). If a file containing a Tree is recovered, the last Tree header written to the file will be used. In this case all the entries in all the branches written before writing the header are valid entries. One can disable the automatic recovery procedure by setting TFile.Recover 0; in the system.rootrc file. ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 2048 of file TFile.cxx. ◆ ReOpen(). Int_t TFile::ReOpen ; (; Option_t * ; mode). virtual . Reope",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTFile.html:89314,usab,usable,89314,doc/v632/classTFile.html,https://root.cern,https://root.cern/doc/v632/classTFile.html,2,['usab'],['usable']
Usability,"Real::binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tcanBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidclearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg&",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsPdf.html:6565,clear,clearValueAndShapeDirty,6565,root/html532/RooAbsPdf.html,https://root.cern,https://root.cern/root/html532/RooAbsPdf.html,1,['clear'],['clearValueAndShapeDirty']
Usability,"Real::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; virtual RooAbsGenContext*RooAbsPdf::binnedGenContext(const RooArgSet& vars, Bool_t verbose = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooCFunction1PdfBinding_double_double_.html:3209,clear,clearEvalError,3209,root/html534/RooCFunction1PdfBinding_double_double_.html,https://root.cern,https://root.cern/root/html534/RooCFunction1PdfBinding_double_double_.html,64,['clear'],['clearEvalError']
Usability,"Real::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidclearConvolutionWindow(); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); RooNumIntConfig&convIntConfig(); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooNumConvPdf.html:5030,clear,clearShapeDirty,5030,root/html534/RooNumConvPdf.html,https://root.cern,https://root.cern/root/html534/RooNumConvPdf.html,6,['clear'],['clearShapeDirty']
Usability,"RealVar& var2, Double_t n1 = 1, Double_t n2 = 2, Double_t n3 = 0, Double_t n4 = 0, Double_t n5 = 0, Double_t n6 = 0); Create and draw a TH2 with the error contours in parameters var1 and v2 at up to 6 'sigma' settings; where 'sigma' is calculated as n*n*errorLevel. Bool_t setLogFile(const char* logfile = 0); Change the file name for logging of a RooMinuit of all MINUIT steppings; through the parameter space. If inLogfile is null, the current log file; is closed and logging is stopped. Double_t getPdfParamVal(Int_t index); Access PDF parameter value by ordinal index (needed by MINUIT). Double_t getPdfParamErr(Int_t index); Access PDF parameter error by ordinal index (needed by MINUIT). Bool_t setPdfParamVal(Int_t index, Double_t value, Bool_t verbose = kFALSE); Modify PDF parameter value by ordinal index (needed by MINUIT). void setPdfParamErr(Int_t index, Double_t value); Modify PDF parameter error by ordinal index (needed by MINUIT). void clearPdfParamAsymErr(Int_t index); Modify PDF parameter error by ordinal index (needed by MINUIT). void setPdfParamErr(Int_t index, Double_t loVal, Double_t hiVal); Modify PDF parameter error by ordinal index (needed by MINUIT). void profileStart(); Start profiling timer. void profileStop(); Stop profiling timer and report results of last session. void backProp(); Transfer MINUIT fit results back into RooFit objects. void applyCovarianceMatrix(TMatrixDSym& V); Apply results of given external covariance matrix. i.e. propagate its errors; to all RRV parameter representations and give this matrix instead of the; HESSE matrix at the next save() call. RooMinuit(RooAbsReal& function). void setEvalErrorWall(Bool_t flag); { _doEvalErrorWall = flag ; }. void setPrintEvalErrors(Int_t numEvalErrors); { _printEvalErrors = numEvalErrors ; }. void setVerbose(Bool_t flag = kTRUE); { _verbose = flag ; }. void setProfile(Bool_t flag = kTRUE); { _profile = flag ; }. Int_t evalCounter() const; { return _evalCounter ; }. void zeroEvalCount(); { _eval",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooMinuit.html:13134,clear,clearPdfParamAsymErr,13134,root/html530/RooMinuit.html,https://root.cern,https://root.cern/root/html530/RooMinuit.html,1,['clear'],['clearPdfParamAsymErr']
Usability,"RealVar& var2, Double_t n1 = 1, Double_t n2 = 2, Double_t n3 = 0, Double_t n4 = 0, Double_t n5 = 0, Double_t n6 = 0); Create and draw a TH2 with the error contours in parameters var1 and v2 at up to 6 'sigma' settings; where 'sigma' is calculated as n*n*errorLevel. Bool_t setLogFile(const char* logfile = 0); Change the file name for logging of a RooMinuit of all MINUIT steppings; through the parameter space. If inLogfile is null, the current log file; is closed and logging is stopped. Double_t getPdfParamVal(Int_t index); Access PDF parameter value by ordinal index (needed by MINUIT). Double_t getPdfParamErr(Int_t index); Access PDF parameter error by ordinal index (needed by MINUIT). Bool_t setPdfParamVal(Int_t index, Double_t value, Bool_t verbose = kFALSE); Modify PDF parameter value by ordinal index (needed by MINUIT). void setPdfParamErr(Int_t index, Double_t value); Modify PDF parameter error by ordinal index (needed by MINUIT). void clearPdfParamAsymErr(Int_t index); Modify PDF parameter error by ordinal index (needed by MINUIT). void setPdfParamErr(Int_t index, Double_t loVal, Double_t hiVal); Modify PDF parameter error by ordinal index (needed by MINUIT). void profileStart(); Start profiling timer. void profileStop(); Stop profiling timer and report results of last session. void backProp(); Transfer MINUIT fit results back into RooFit objects. void applyCovarianceMatrix(TMatrixDSym& V); Apply results of given external covariance matrix. i.e. propagate its errors; to all RRV parameter representations and give this matrix instead of the; HESSE matrix at the next save() call. RooMinuit(RooAbsReal& function). void setEvalErrorWall(Bool_t flag); { _doEvalErrorWall = flag ; }. void setPrintEvalErrors(Int_t numEvalErrors); { _printEvalErrors = numEvalErrors ; }. void setVerbose(Bool_t flag = kTRUE); { _verbose = flag ; }. void setProfile(Bool_t flag = kTRUE); { _profile = flag ; }. Int_t getNPar() const; { return _nPar ; }. ofstream* logfile() const; { return _log",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooMinuit.html:13013,clear,clearPdfParamAsymErr,13013,root/html526/RooMinuit.html,https://root.cern,https://root.cern/root/html526/RooMinuit.html,2,['clear'],['clearPdfParamAsymErr']
Usability,"RealVar& var2, Double_t n1 = 1, Double_t n2 = 2, Double_t n3 = 0, Double_t n4 = 0, Double_t n5 = 0, Double_t n6 = 0); Create and draw a TH2 with the error contours in parameters var1 and v2 at up to 6 'sigma' settings; where 'sigma' is calculated as n*n*errorLevel. Bool_t setLogFile(const char* logfile = 0); Change the file name for logging of a RooMinuit of all MINUIT steppings; through the parameter space. If inLogfile is null, the current log file; is closed and logging is stopped. Double_t getPdfParamVal(Int_t index); Access PDF parameter value by ordinal index (needed by MINUIT). Double_t getPdfParamErr(Int_t index); Access PDF parameter error by ordinal index (needed by MINUIT). Bool_t setPdfParamVal(Int_t index, Double_t value, Bool_t verbose = kFALSE); Modify PDF parameter value by ordinal index (needed by MINUIT). void setPdfParamErr(Int_t index, Double_t value); Modify PDF parameter error by ordinal index (needed by MINUIT). void clearPdfParamAsymErr(Int_t index); Modify PDF parameter error by ordinal index (needed by MINUIT). void setPdfParamErr(Int_t index, Double_t loVal, Double_t hiVal); Modify PDF parameter error by ordinal index (needed by MINUIT). void profileStart(); Start profiling timer. void profileStop(); Stop profiling timer and report results of last session. void backProp(); Transfer MINUIT fit results back into RooFit objects. void applyCovarianceMatrix(TMatrixDSym& V); Apply results of given external covariance matrix. i.e. propagate its errors; to all RRV parameter representations and give this matrix instead of the; HESSE matrix at the next save() call. RooMinuit(RooAbsReal& function). void setEvalErrorWall(Bool_t flag); { _doEvalErrorWall = flag ; }. void setPrintEvalErrors(Int_t numEvalErrors); { _printEvalErrors = numEvalErrors ; }. void setVerbose(Bool_t flag = kTRUE); { _verbose = flag ; }. void setProfile(Bool_t flag = kTRUE); { _profile = flag ; }. void setMaxEvalMultiplier(Int_t n); { _maxEvalMult = n ; }. Int_t evalCounter() con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooMinuit.html:13285,clear,clearPdfParamAsymErr,13285,root/html532/RooMinuit.html,https://root.cern,https://root.cern/root/html532/RooMinuit.html,2,['clear'],['clearPdfParamAsymErr']
Usability,"RealVar& var2, Double_t n1 = 1, Double_t n2 = 2, Double_t n3 = 0, Double_t n4 = 0, Double_t n5 = 0, Double_t n6 = 0); Create and draw a TH2 with the error contours in parameters var1 and v2 at up to 6 'sigma' settings; where 'sigma' is calculated as n*n*errorLevel. Bool_t setLogFile(const char* logfile = 0); Change the file name for logging of a RooMinuit of all MINUIT steppings; through the parameter space. If inLogfile is null, the current log file; is closed and logging is stopped. Double_t getPdfParamVal(Int_t index); Access PDF parameter value by ordinal index (needed by MINUIT). Double_t getPdfParamErr(Int_t index); Access PDF parameter error by ordinal index (needed by MINUIT). Bool_t setPdfParamVal(Int_t index, Double_t value, Bool_t verbose = kFALSE); Modify PDF parameter value by ordinal index (needed by MINUIT). void setPdfParamErr(Int_t index, Double_t value); Modify PDF parameter error by ordinal index (needed by MINUIT). void clearPdfParamAsymErr(Int_t index); Modify PDF parameter error by ordinal index (needed by MINUIT). void setPdfParamErr(Int_t index, Double_t loVal, Double_t hiVal); Modify PDF parameter error by ordinal index (needed by MINUIT). void profileStart(); Start profiling timer. void profileStop(); Stop profiling timer and report results of last session. void backProp(); Transfer MINUIT fit results back into RooFit objects. void updateFloatVec(). void applyCovarianceMatrix(TMatrixDSym& V); Apply results of given external covariance matrix. i.e. propagate its errors; to all RRV parameter representations and give this matrix instead of the; HESSE matrix at the next save() call. RooMinuit(RooAbsReal& function). void setEvalErrorWall(Bool_t flag); { _doEvalErrorWall = flag ; }. void setPrintEvalErrors(Int_t numEvalErrors); { _printEvalErrors = numEvalErrors ; }. void setVerbose(Bool_t flag = kTRUE); { _verbose = flag ; }. void setProfile(Bool_t flag = kTRUE); { _profile = flag ; }. void setMaxEvalMultiplier(Int_t n); { _maxEvalMult = n ; }. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooMinuit.html:13495,clear,clearPdfParamAsymErr,13495,root/html534/RooMinuit.html,https://root.cern,https://root.cern/root/html534/RooMinuit.html,6,['clear'],['clearPdfParamAsymErr']
Usability,"RealVar&basisConvVar() const; virtual list<Double_t>*RooAbsReal::binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidcleanup(); virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual RooResolutionModel*convolution(RooFormulaVar* basis, RooAbsArg* owner) const; RooRealVar&convVar() const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooResolutionModel.html:4410,Clear,Clear,4410,root/html602/RooResolutionModel.html,https://root.cern,https://root.cern/root/html602/RooResolutionModel.html,1,['Clear'],['Clear']
Usability,"Receive a pasted object. ; TEveViewer only accepts objects of class TEveScene. Virtual from TEveElement. ; Reimplemented from TEveElement.; Definition at line 309 of file TEveViewer.cxx. ◆ InitInternal(). void TEveViewer::InitInternal ; (; ). staticprotected . Initialize static data-members according to running conditions. ; Definition at line 92 of file TEveViewer.cxx. ◆ IsA(). TClass * TEveViewer::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TEveElementList.; Definition at line 71 of file TEveViewer.h. ◆ operator=(). TEveViewer & TEveViewer::operator= ; (; const TEveViewer & ; ). private . ◆ PostDock(). void TEveViewer::PostDock ; (; ). overridevirtual . Virtual function called after a window is docked. ; On mac we have to force recreation of gl-context. ; Reimplemented from TEveWindow.; Definition at line 123 of file TEveViewer.cxx. ◆ PreUndock(). void TEveViewer::PreUndock ; (; ). overridevirtual . Virtual function called before a window is undocked. ; On mac we have to force recreation of gl-context. ; Reimplemented from TEveWindow.; Definition at line 105 of file TEveViewer.cxx. ◆ Redraw(). void TEveViewer::Redraw ; (; Bool_t ; resetCameras = kFALSE). Redraw viewer immediately. ; Definition at line 222 of file TEveViewer.cxx. ◆ RemoveElementLocal(). void TEveViewer::RemoveElementLocal ; (; TEveElement * ; el). overridevirtual . Remove element 'el' from the list of children and also remove appropriate GLScene from GLViewer's list of scenes. ; Virtual from TEveElement. ; Reimplemented from TEveElement.; Definition at line 279 of file TEveViewer.cxx. ◆ RemoveElementsLocal(). void TEveViewer::RemoveElementsLocal ; (; ). overridevirtual . Remove all children, forwarded to GLViewer. ; Virtual from TEveElement. ; Reimplemented from TEveElement.; Definition at line 288 of file TEveViewer.cxx. ◆ SetGLViewer(). void TEveViewer::SetGLViewer ; (; TGLViewer * ; viewer, . TGFrame * ; frame . ). Set TGLViewer that is ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveViewer.html:42721,undo,undocked,42721,doc/master/classTEveViewer.html,https://root.cern,https://root.cern/doc/master/classTEveViewer.html,1,['undo'],['undocked']
Usability,"RefStrong is; true). void DestroyPhysicals(); Destroy all physicals attached to this logical. UInt_t UnrefFirstPhysical(); Unreference first physical in the list, returning its id and; making it fit for destruction somewhere else.; Returns 0 if there are no replicas attached. void UpdateBoundingBoxesOfPhysicals(); Update bounding-boxed of all dependent physicals. Bool_t SetDLCache(Bool_t cached); Modify capture of draws into display list cache kTRUE - capture,; kFALSE direct draw. Return kTRUE is state changed, kFALSE if not. Bool_t ShouldDLCache(const TGLRnrCtx& rnrCtx) const; Returns kTRUE if draws should be display list cached; kFALSE otherwise. Here we check that:; a) fScene is set (Scene manages link to GL-context);; b) secondary selection is not in progress as different; render-path is usually taken in this case. Otherwise we return internal bool. Override this in sub-class if different behaviour is required. void DLCacheClear(); Clear all entries for all LODs for this drawable from the; display list cache but keeping the reserved ids from GL context. void DLCacheDrop(); Drop all entries for all LODs for this drawable from the display; list cache, WITHOUT returning the reserved ids to GL context. This is called by scene if it realized that the GL context was; destroyed. void DLCachePurge(); Purge all entries for all LODs for this drawable from the; display list cache, returning the reserved ids to GL context. If you override this function:; 1. call the base-class version from it;; 2. call it from the destructor of the derived class!. void PurgeDLRange(UInt_t base, Int_t size) const; Purge given display-list range.; Utility function. Short_t QuantizeShapeLOD(Short_t shapeLOD, Short_t combiLOD) const; Logical shapes usually support only discreet LOD values,; especially in view of display-list caching.; This function should be overriden to perform the desired quantization.; See TGLSphere. void Draw(TGLRnrCtx& rnrCtx) const; Draw the GL drawable, using draw flags. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGLLogicalShape.html:5818,Clear,Clear,5818,root/html532/TGLLogicalShape.html,https://root.cern,https://root.cern/root/html532/TGLLogicalShape.html,4,['Clear'],['Clear']
Usability,"Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation » Courses Introductory Tutorials. Overview; The goal of this tutorial session is to learn how to read a tree from a ROOT file, extract some data from it, display a histogram and then fit it.;  ; Information about the ROOT classes can be found on the ROOT reference guide, and there is also a web based documentation and the Root primer and other manuals available to download.; . Meet a TTree ›. Navigate through this book; Meet a TTree; Accessing a TTree With a TBrowser; Using TTree::Draw() to access a TTree; TTree and Its Data; Using a Macro to Read a TTree; Histogramming; Fit Panel; Compiling Your Code (also known as ACLiC); Accessing a TTree With a TSelector; Histogramming in a Selector; Using a TSelector with PROOF; The End. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developer",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/introductory-tutorials-1.html:1957,learn,learn,1957,d/introductory-tutorials-1.html,https://root.cern,https://root.cern/d/introductory-tutorials-1.html,2,['learn'],['learn']
Usability,"Reference. . Definition at line 377 of file TSessionViewer.h. Public Member Functions;  TSessionQueryFrame (TGWindow *parent, Int_t w, Int_t h);  Constructor. ;  ;  ~TSessionQueryFrame () override;  Destructor. ;  ; void Build (TSessionViewer *gui);  Build query information frame. ;  ; void Feedback (TList *objs);  Feedback function connected to Feedback signal. ;  ; TEditQueryFrame * GetQueryEditFrame () const;  ; TCanvas * GetStatsCanvas () const;  ; TGTab * GetTab () const;  ; void IndicateStop (Bool_t aborted);  Indicate that Cancel or Stop was clicked. ;  ; TClass * IsA () const override;  ; void Modified (Bool_t mod=kTRUE);  Notify changes in query editor settings. ;  ; void OnBtnAbort ();  Abort processing query. ;  ; void OnBtnFinalize ();  Finalize query. ;  ; void OnBtnRetrieve ();  Retrieve query. ;  ; void OnBtnShowLog ();  Show query log. ;  ; void OnBtnStop ();  Stop processing query. ;  ; void OnBtnSubmit ();  Submit query. ;  ; void Progress (Long64_t total, Long64_t processed);  Update progress bar and status labels. ;  ; void Progress (Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti);  ; void Progress (Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses);  New version of Progress (just forward to the old version for the time being). ;  ; void ProgressLocal (Long64_t total, Long64_t processed);  Update progress bar and status labels. ;  ; void ResetProgressDialog (const char *selec, Int_t files, Long64_t first, Long64_t entries);  Reset progress frame information fields. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateButtons (TQueryDescription *desc);  Update buttons state for the current query status. ;  ; void UpdateHistos (TList *objs);  Update feedback histog",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSessionQueryFrame.html:1313,progress bar,progress bar,1313,doc/master/classTSessionQueryFrame.html,https://root.cern,https://root.cern/doc/master/classTSessionQueryFrame.html,1,['progress bar'],['progress bar']
Usability,"Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooFunctorBinding Class ReferenceRooFit » RooFit. ; RooFunctorBinding makes math functions from ROOT usable in RooFit. ; It takes a ROOT::Math::IBaseFunctionMultiDim, and binds the variables of this function to the RooFit variables passed in the constructor.; Instances of function binding classes are fully functional RooFit function objects with one exception: if the bound function is not a standard TMath or MathMore function the class cannot be persisted in a RooWorkspace without registering the function pointer first using RooCFunction1Binding<T1,T2>::register(). ; Definition at line 31 of file RooFunctorBinding.h. Public Member Functions;  RooFunctorBinding ()=default;  ;  RooFunctorBinding (const char *name, const char *title, const ROOT::Math::IBaseFunctionMultiDim &ftor, const RooArgList &vars);  Create a RooFit function that makes ftor usable in RooFit. ;  ;  RooFunctorBinding (const RooFunctorBinding &other, const char *name=nullptr);  ;  ~RooFunctorBinding () override;  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const cha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFunctorBinding.html:1139,usab,usable,1139,doc/master/classRooFunctorBinding.html,https://root.cern,https://root.cern/doc/master/classRooFunctorBinding.html,1,['usab'],['usable']
Usability,"Referenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TSpectrum2Painter (TH2 *h2, Int_t bs);  TSpectrum2Painter normal constructor. ;  ;  ~TSpectrum2Painter () override;  TSpectrum2Painter destructor. ;  ; void GetAngles (Int_t &alpha, Int_t &beta, Int_t &view);  Gets angles of the view: ;  ; void GetBezier (Int_t &bezier);  Gets Bezier smoothing switch: ;  ; void GetChanGrid (Int_t &enable, Int_t &color);  This function gets attributes for drawing channel: ;  ; void GetChanMarks (Int_t &enable, Int_t &color, Int_t &width, Int_t &height, Int_t &style);  Gets drawing attributes for channel marks: ;  ; void GetColorAlgorithm (Int_t &colorAlgorithm);  Gets shading color algorithm: ;  ; void GetColorIncrements (Double_t &r, Double_t &g, Double_t &b);  Gets color increments between two color levels for r, g, b components: ;  ; void GetContourWidth (Int_t &width);  Gets width between horizontal slices: ;  ; void GetDisplayMode (Int_t &modeGroup, Int_t &displayMode);  Gets display group mode and display mode: -modeGroup - the following group modes might have been set: simple modes-kPicture2ModeGroupSimple, modes with shading according to light-kPicture2ModeGroupLight, modes with shading according to channels counts-kPicture2ModeGroupHeight, modes of combination of shading according to light and to channels counts-kPicture2ModeGroupLightHeight -displayMode - display modes that might have been set: points, grid, contours, bars, x_lines, y_lines, bars_x, bars_y, needles, surface, triangles. ;  ; void GetLightHeightWeight (Double_t &weight);  Gets weight between shading according to fictive light source and according to channels counts: ;  ; void GetLightPosition (Int_t &x, Int_t &y, Int_t &z);  Gets position of fictive light source in 3D space: ;  ; void GetNodes (Int_t &nodesx, Int_t &nodesy);  Gets nodes in both directions: ;  ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2Painter.html:4322,simpl,simple,4322,doc/master/classTSpectrum2Painter.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2Painter.html,1,['simpl'],['simple']
Usability,"Requests are; saved in a special dataset repository and must be honored by the endpoint.; This is the special PROOF-Lite re-implementation of the TProof function; and includes code originally implemented in TProofServ. Bool_t CancelStagingDataSet(const char* dataset); Cancels a dataset staging request. Returns kTRUE on success, kFALSE on; failure. Dataset not found equals to a failure. PROOF-Lite; re-implementation of the equivalent function in TProofServ. TFileCollection * GetStagingStatusDataSet(const char* dataset); Obtains a TFileCollection showing the staging status of the specified; dataset. A valid dataset manager and dataset staging requests repository; must be present on the endpoint. PROOF-Lite version of the equivalent; function from TProofServ. Int_t VerifyDataSet(const char* uri, const char* = 0); Verify if all files in the specified dataset are available.; Print a list and return the number of missing files. void ClearDataSetCache(const char* dataset = 0); Clear the content of the dataset cache, if any (matching 'dataset', if defined). void ShowDataSetCache(const char* dataset = 0); Display the content of the dataset cache, if any (matching 'dataset', if defined). void SendInputDataFile(); Make sure that the input data objects are available to the workers in a; dedicated file in the cache; the objects are taken from the dedicated list; and / or the specified file.; If the fInputData is empty the specified file is sent over.; If there is no specified file, a file named ""inputdata.root"" is created locally; with the content of fInputData and sent over to the master.; If both fInputData and the specified file are not empty, a copy of the file; is made locally and augmented with the content of fInputData. Int_t Remove(const char* ref, Bool_t all); Handle remove request. TTree * GetTreeHeader(TDSet* tdset); Creates a tree header (a tree with nonexisting files) object for; the DataSet. void FindUniqueSlaves(); Add to the fUniqueSlave list the active slaves th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofLite.html:35111,Clear,ClearDataSetCache,35111,root/html534/TProofLite.html,https://root.cern,https://root.cern/root/html534/TProofLite.html,6,['Clear'],"['Clear', 'ClearDataSetCache']"
Usability,"Result*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidclearConvolutionWindow(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); RooNumIntConfig&convIntConfig(); const RooNumIntConfig&convIntConfig() const; virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg ar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooNumConvolution.html:5379,clear,clearShapeDirty,5379,root/html526/RooNumConvolution.html,https://root.cern,https://root.cern/root/html526/RooNumConvolution.html,2,['clear'],['clearShapeDirty']
Usability,"Returns the previous block status. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Connect (const char *sender_class, const char *signal, const char *receiver_class, void *receiver, const char *slot);  This method allows to make a connection from any object of the same class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  . Protected Member Functions; void DoRedraw () override;  Draw vertical progress bar. ;  ;  Protected Member Functions inherited from TGFrame; virtual void Draw3dRectangle (UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h);  Draw 3D rectangle on the frame border. ;  ; TString GetOptionString () const;  Returns a frame option string - used in SavePrimitive(). ;  ; const TGResourcePool * GetResourcePool () const;  ; void * GetSender () override;  ; virtual void StartGuiBuilding (Bool_t on=kTRUE);  Go into GUI building mode. ;  ;  Protected Member Functions inherited from TGWindow;  TGWindow (const TGWindow &tgw);  ;  TGWindow (Window_t id);  ; TGWindow & operator= (const TGWindow &tgw);  ;  Protected Member Functions inherited from TGObject; TGObject & operator= (const TGObject &tgo);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inheri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGVProgressBar.html:23748,progress bar,progress bar,23748,doc/master/classTGVProgressBar.html,https://root.cern,https://root.cern/doc/master/classTGVProgressBar.html,1,['progress bar'],['progress bar']
Usability,"RooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tcanBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidclearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsPdf.html:6430,clear,clearShapeDirty,6430,root/html528/RooAbsPdf.html,https://root.cern,https://root.cern/root/html528/RooAbsPdf.html,2,['clear'],['clearShapeDirty']
Usability,"RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Int_tcalculateBandWidth(Int_t kernel = -999); Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::non",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/Roo2DKeysPdf.html:2721,clear,clearShapeDirty,2721,root/html532/Roo2DKeysPdf.html,https://root.cern,https://root.cern/root/html532/Roo2DKeysPdf.html,1,['clear'],['clearShapeDirty']
Usability,"RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Int_tcalculateBandWidth(Int_t kernel = -999); Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), const RooCmdArg arg5 = RooCmdArg::none(), const RooCmdArg arg6 = RooCmdArg::none(), const RooCmdArg arg7 = Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/Roo2DKeysPdf.html:2721,clear,clearShapeDirty,2721,root/html528/Roo2DKeysPdf.html,https://root.cern,https://root.cern/root/html528/Roo2DKeysPdf.html,1,['clear'],['clearShapeDirty']
Usability,"RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Int_tcalculateBandWidth(Int_t kernel = -999); Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/Roo2DKeysPdf.html:2721,clear,clearShapeDirty,2721,root/html530/Roo2DKeysPdf.html,https://root.cern,https://root.cern/root/html530/Roo2DKeysPdf.html,1,['clear'],['clearShapeDirty']
Usability,"RooAbsCategory.cxx. ◆ attachToVStore(). void RooAbsCategory::attachToVStore ; (; RooVectorDataStore & ; vstore). overrideprotectedvirtual . Attach the category index and label to as branches to the given vector store. ; Implements RooAbsArg.; Definition at line 436 of file RooAbsCategory.cxx. ◆ begin(). std::map< std::string, value_type >::const_iterator RooAbsCategory::begin ; (; ); const. inline . Iterator for category state names. Points to pairs of index and name. ; Definition at line 91 of file RooAbsCategory.h. ◆ Class(). static TClass * RooAbsCategory::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooAbsCategory::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooAbsCategory::Class_Version ; (; ). inlinestaticconstexpr . A buffer for reading values from trees. ; ReturnsVersion of this class ; Definition at line 226 of file RooAbsCategory.h. ◆ clearTypes(). void RooAbsCategory::clearTypes ; (; ). protected . Delete all currently defined states. ; Definition at line 277 of file RooAbsCategory.cxx. ◆ copyCache(). void RooAbsCategory::copyCache ; (; const RooAbsArg * ; source, . bool ; valueOnly = false, . bool ; setValDirty = true . ). overrideprotectedvirtual . Copy the cached value from given source and raise dirty flag. ; It is the callers responsibility to ensure that the sources cache is clean(valid) before this function is called, e.g. by calling syncCache() on the source. ; Implements RooAbsArg.; Reimplemented in RooAbsCategoryLValue.; Definition at line 560 of file RooAbsCategory.cxx. ◆ createFundamental(). RooFit::OwningPtr< RooAbsArg > RooAbsCategory::createFundamental ; (; const char * ; newname = nullptr); const. overridevirtual . Create a RooCategory fundamental object with our properties. ; Implements RooAbsArg.; Definition at line 642 of file RooAbsCategory.cxx. ◆ createTable(). Roo1DTable * RooAbsCategory::createTable ; (; const char * ; label",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsCategory.html:47998,clear,clearTypes,47998,doc/master/classRooAbsCategory.html,https://root.cern,https://root.cern/doc/master/classRooAbsCategory.html,1,['clear'],['clearTypes']
Usability,"RooAbsCollection::snapshot(RooAbsCollection& output, Bool_t deepCopy = kTRUE) const; voidsort(Bool_t reverse = kFALSE); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; voidRooAbsCollection::takeOwnership(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidwriteToStream(ostream& os, Bool_t compact). protected:. Bool_tRooAbsCollection::addServerClonesToList(const RooAbsArg& var); voidRooAbsCollection::clearStructureTags(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidRooAbsCollection::makeStructureTag(); voidRooAbsCollection::makeTypedStructureTag(); voidTObject::MakeZombie(); voidRooAbsCollection::safeDeleteList(); TNamed*RooAbsCollection::structureTag(); TNamed*RooAbsCollection::typedStructureTag(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };; enum RooPrintable::ContentsOption { kName; kClassName; kValue; kArgs; kExtras; kAddress; kTitle; kCollectionHeader; };; enum RooPrintable::StyleOption { kInline; kSingleLine; kStandard; kVerbose; kTreeStructure; };. protected:. Bool_tRooAbsCollection::_allRRVAll contents are RRV; RooLinkedListRooAbsCollection::_listActual object store; TStringRooAbsCollection::_nameOur name.; static Int_tRooPrintable::_nameLength; Bool_tRooAbsCollection::_ownContFlag to identify a list that owns its contents",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooArgList.html:11874,clear,clearStructureTags,11874,root/html534/RooArgList.html,https://root.cern,https://root.cern/root/html534/RooArgList.html,2,['clear'],['clearStructureTags']
Usability,"RooAbsCollection::snapshot(RooAbsCollection& output, Bool_t deepCopy = kTRUE) const; voidsort(Bool_t reverse = kFALSE); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; voidRooAbsCollection::takeOwnership(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidwriteToStream(ostream& os, Bool_t compact). protected:. Bool_tRooAbsCollection::addServerClonesToList(const RooAbsArg& var); voidRooAbsCollection::clearStructureTags(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidRooAbsCollection::makeStructureTag(); voidRooAbsCollection::makeTypedStructureTag(); voidTObject::MakeZombie(); voidRooAbsCollection::safeDeleteList(); TNamed*RooAbsCollection::structureTag(); TNamed*RooAbsCollection::typedStructureTag(). Data Members; public:. static RooPrintable::ContentsOptionRooPrintable::kAddress; static RooPrintable::ContentsOptionRooPrintable::kArgs; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static RooPrintable::ContentsOptionRooPrintable::kClassName; static RooPrintable::ContentsOptionRooPrintable::kCollectionHeader; static RooPrintable::ContentsOptionRooPrintable::kExtras; static TObject::EStatusBitsTObject::kHasUUID; static RooPrintable::StyleOptionRooPrintable::kInline; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; sta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooArgList.html:11857,clear,clearStructureTags,11857,root/html602/RooArgList.html,https://root.cern,https://root.cern/root/html602/RooArgList.html,4,['clear'],['clearStructureTags']
Usability,"RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsSelfCachedPdf.html:3176,clear,clearShapeDirty,3176,root/html532/RooAbsSelfCachedPdf.html,https://root.cern,https://root.cern/root/html532/RooAbsSelfCachedPdf.html,1,['clear'],['clearShapeDirty']
Usability,"RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tRooAbsAnaConvPdf::coefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*RooAbsAnaConvPdf::coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooDecay.html:2665,clear,clearShapeDirty,2665,root/html532/RooDecay.html,https://root.cern,https://root.cern/root/html532/RooDecay.html,2,['clear'],['clearShapeDirty']
Usability,"RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcoefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*RooAbsAnaConvPdf::coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooBCPEffDecay.html:2967,clear,clearShapeDirty,2967,root/html532/RooBCPEffDecay.html,https://root.cern,https://root.cern/root/html532/RooBCPEffDecay.html,5,['clear'],['clearShapeDirty']
Usability,"RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcoefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCm",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooBDecay.html:2865,clear,clearShapeDirty,2865,root/html532/RooBDecay.html,https://root.cern,https://root.cern/root/html532/RooBDecay.html,1,['clear'],['clearShapeDirty']
Usability,"RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::non",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooArgusBG.html:2689,clear,clearShapeDirty,2689,root/html532/RooArgusBG.html,https://root.cern,https://root.cern/root/html532/RooArgusBG.html,74,['clear'],['clearShapeDirty']
Usability,"RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcoefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsAnaConvPdf.html:4161,clear,clearShapeDirty,4161,root/html528/RooAbsAnaConvPdf.html,https://root.cern,https://root.cern/root/html528/RooAbsAnaConvPdf.html,1,['clear'],['clearShapeDirty']
Usability,"RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcoefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooAbsAnaConvPdf.html:4161,clear,clearShapeDirty,4161,root/html530/RooAbsAnaConvPdf.html,https://root.cern,https://root.cern/root/html530/RooAbsAnaConvPdf.html,1,['clear'],['clearShapeDirty']
Usability,"RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), const RooCmdArg arg5 = RooCmdArg::none(), const RooCmdArg arg6 = RooCmdArg::none(), const RooCmdArg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsCachedPdf.html:3261,clear,clearShapeDirty,3261,root/html528/RooAbsCachedPdf.html,https://root.cern,https://root.cern/root/html528/RooAbsCachedPdf.html,2,['clear'],['clearShapeDirty']
Usability,"RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooAbsCachedPdf.html:3261,clear,clearShapeDirty,3261,root/html530/RooAbsCachedPdf.html,https://root.cern,https://root.cern/root/html530/RooAbsCachedPdf.html,2,['clear'],['clearShapeDirty']
Usability,"RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tRooAbsAnaConvPdf::coefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*RooAbsAnaConvPdf::coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooDecay.html:2665,clear,clearShapeDirty,2665,root/html528/RooDecay.html,https://root.cern,https://root.cern/root/html528/RooDecay.html,1,['clear'],['clearShapeDirty']
Usability,"RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tRooAbsAnaConvPdf::coefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*RooAbsAnaConvPdf::coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooDecay.html:2665,clear,clearShapeDirty,2665,root/html530/RooDecay.html,https://root.cern,https://root.cern/root/html530/RooDecay.html,1,['clear'],['clearShapeDirty']
Usability,"RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcoefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*RooAbsAnaConvPdf::coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooBCPEffDecay.html:2967,clear,clearShapeDirty,2967,root/html528/RooBCPEffDecay.html,https://root.cern,https://root.cern/root/html528/RooBCPEffDecay.html,8,['clear'],['clearShapeDirty']
Usability,"RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcoefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::non",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooBDecay.html:2865,clear,clearShapeDirty,2865,root/html528/RooBDecay.html,https://root.cern,https://root.cern/root/html528/RooBDecay.html,1,['clear'],['clearShapeDirty']
Usability,"RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcoefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooBDecay.html:2865,clear,clearShapeDirty,2865,root/html530/RooBDecay.html,https://root.cern,https://root.cern/root/html530/RooBDecay.html,1,['clear'],['clearShapeDirty']
Usability,"RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), const RooCmdArg arg5 = RooCmdArg::none(), const RooCmdArg arg6 = RooCmdArg::none(), const RooCmdArg arg7 = Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooArgusBG.html:2689,clear,clearShapeDirty,2689,root/html528/RooArgusBG.html,https://root.cern,https://root.cern/root/html528/RooArgusBG.html,46,['clear'],['clearShapeDirty']
Usability,"RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooExtendPdf.html:3214,clear,clearShapeDirty,3214,root/html528/RooExtendPdf.html,https://root.cern,https://root.cern/root/html528/RooExtendPdf.html,60,['clear'],['clearShapeDirty']
Usability,"RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tcheckObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; const RooArgList&coefList() const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdAr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAddPdf.html:4062,clear,clearValueDirty,4062,root/html532/RooAddPdf.html,https://root.cern,https://root.cern/root/html532/RooAddPdf.html,3,['clear'],['clearValueDirty']
Usability,"RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tcheckObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooProdPdf.html:4508,clear,clearValueDirty,4508,root/html532/RooProdPdf.html,https://root.cern,https://root.cern/root/html532/RooProdPdf.html,2,['clear'],['clearValueDirty']
Usability,"RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tcheckObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooProdPdf.html:4508,clear,clearValueDirty,4508,root/html534/RooProdPdf.html,https://root.cern,https://root.cern/root/html534/RooProdPdf.html,6,['clear'],['clearValueDirty']
Usability,"RooAbsPdf, the base class of all PDFs; 23 ; 24RooAbsPdf is the base class for all probability density; 25functions (PDFs). The class provides hybrid analytical/numerical; 26normalization for its implementations, error tracing, and a Monte Carlo; 27generator interface.; 28 ; 29### A Minimal PDF Implementation; 30 ; 31A minimal implementation of a PDF class derived from RooAbsPdf; 32should override the `evaluate()` function. This function should; 33return the PDF's value (which does not need to be normalised).; 34 ; 35 ; 36#### Normalization/Integration; 37 ; 38Although the normalization of a PDF is an integral part of a; 39probability density function, normalization is treated separately; 40in RooAbsPdf. The reason is that a RooAbsPdf object is more than a; 41PDF: it can be a building block for a more complex composite PDF; 42if any of its variables are functions instead of variables. In; 43such cases, the normalization of the composite PDF may not simply be; 44integral over the dependents of the top-level PDF: these are; 45functions with potentially non-trivial Jacobian terms themselves.; 46\note Therefore, no explicit attempt should be made to normalize the; 47function output in evaluate(). In particular, normalisation constants; 48can be omitted to speed up the function evaluations, and included later; 49in the integration of the PDF (see below), which is rarely called in; 50comparison to the `evaluate()` function.; 51 ; 52In addition, RooAbsPdf objects do not have a static concept of what; 53variables are parameters, and what variables are dependents (which; 54need to be integrated over for a correct PDF normalization).; 55Instead, the choice of normalization is always specified each time a; 56normalized value is requested from the PDF via the getVal(); 57method.; 58 ; 59RooAbsPdf manages the entire normalization logic of each PDF with; 60the help of a RooRealIntegral object, which coordinates the integration; 61of a given choice of normalization. By default, Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:2097,simpl,simply,2097,doc/master/RooAbsPdf_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html,1,['simpl'],['simply']
Usability,"RooAbsReal::binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; virtual RooAbsGenContext*binnedGenContext(const RooArgSet& vars, Bool_t verbose = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tcanBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidclearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname = 0) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsPdf.html:6782,Clear,Clear,6782,root/html534/RooAbsPdf.html,https://root.cern,https://root.cern/root/html534/RooAbsPdf.html,2,['Clear'],['Clear']
Usability,"RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; static voidblockDecompose(const TMatrixD& input, const vector<int>& map1, const vector<int>& map2, TMatrixDSym& S11, TMatrixD& S12, TMatrixD& S21, TMatrixDSym& S22); voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; const TMatrixDSym&covarianceMatrix() const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmd",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooMultiVarGaussian.html:3216,clear,clearEvalError,3216,root/html532/RooMultiVarGaussian.html,https://root.cern,https://root.cern/root/html532/RooMultiVarGaussian.html,2,['clear'],['clearEvalError']
Usability,"RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; static voidblockDecompose(const TMatrixD& input, const vector<int>& map1, const vector<int>& map2, TMatrixDSym& S11, TMatrixD& S12, TMatrixD& S21, TMatrixDSym& S22); voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); const TMatrixDSym&covarianceMatrix() const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdAr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooMultiVarGaussian.html:3085,clear,clearEvalError,3085,root/html528/RooMultiVarGaussian.html,https://root.cern,https://root.cern/root/html528/RooMultiVarGaussian.html,1,['clear'],['clearEvalError']
Usability,"RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; static voidblockDecompose(const TMatrixD& input, const vector<int>& map1, const vector<int>& map2, TMatrixDSym& S11, TMatrixD& S12, TMatrixD& S21, TMatrixDSym& S22); voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); const TMatrixDSym&covarianceMatrix() const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooMultiVarGaussian.html:3085,clear,clearEvalError,3085,root/html530/RooMultiVarGaussian.html,https://root.cern,https://root.cern/root/html530/RooMultiVarGaussian.html,1,['clear'],['clearEvalError']
Usability,"RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcoefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCm",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsAnaConvPdf.html:4344,clear,clearValueDirty,4344,root/html532/RooAbsAnaConvPdf.html,https://root.cern,https://root.cern/root/html532/RooAbsAnaConvPdf.html,1,['clear'],['clearValueDirty']
Usability,"RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooAbsReal*RooAbsPdf",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsSelfCachedPdf.html:3264,clear,clearValueDirty,3264,root/html532/RooAbsSelfCachedPdf.html,https://root.cern,https://root.cern/root/html532/RooAbsSelfCachedPdf.html,1,['clear'],['clearValueDirty']
Usability,"RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::non",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsCachedPdf.html:3444,clear,clearValueDirty,3444,root/html532/RooAbsCachedPdf.html,https://root.cern,https://root.cern/root/html532/RooAbsCachedPdf.html,1,['clear'],['clearValueDirty']
Usability,"RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tRooAbsAnaConvPdf::coefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*RooAbsAnaConvPdf::coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooDecay.html:2753,clear,clearValueDirty,2753,root/html532/RooDecay.html,https://root.cern,https://root.cern/root/html532/RooDecay.html,2,['clear'],['clearValueDirty']
Usability,"RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcoefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*RooAbsAnaConvPdf::coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::non",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooBCPEffDecay.html:3055,clear,clearValueDirty,3055,root/html532/RooBCPEffDecay.html,https://root.cern,https://root.cern/root/html532/RooBCPEffDecay.html,5,['clear'],['clearValueDirty']
Usability,"RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcoefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooBDecay.html:2953,clear,clearValueDirty,2953,root/html532/RooBDecay.html,https://root.cern,https://root.cern/root/html532/RooBDecay.html,1,['clear'],['clearValueDirty']
Usability,"RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooAbsReal*RooAbsPdf::createChi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooArgusBG.html:2777,clear,clearValueDirty,2777,root/html532/RooArgusBG.html,https://root.cern,https://root.cern/root/html532/RooArgusBG.html,74,['clear'],['clearValueDirty']
Usability,"RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooEffProd.html:3045,clear,clearValueDirty,3045,root/html532/RooEffProd.html,https://root.cern,https://root.cern/root/html532/RooEffProd.html,8,['clear'],['clearValueDirty']
Usability,"RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidclearAbsMin(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooProfileLL.html:3934,clear,clearShapeDirty,3934,root/html532/RooProfileLL.html,https://root.cern,https://root.cern/root/html532/RooProfileLL.html,2,['clear'],['clearShapeDirty']
Usability,"RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidclearAbsMin(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooProfileLL.html:4093,clear,clearShapeDirty,4093,root/html534/RooProfileLL.html,https://root.cern,https://root.cern/root/html534/RooProfileLL.html,6,['clear'],['clearShapeDirty']
Usability,"RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidclearAbsMin(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooProfileLL.html:3934,clear,clearShapeDirty,3934,root/html528/RooProfileLL.html,https://root.cern,https://root.cern/root/html528/RooProfileLL.html,2,['clear'],['clearShapeDirty']
Usability,"RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tcanBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidclearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname = 0) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsPdf.html:6584,clear,clearShapeDirty,6584,root/html602/RooAbsPdf.html,https://root.cern,https://root.cern/root/html602/RooAbsPdf.html,2,['clear'],['clearShapeDirty']
Usability,"RooArgSet& vars, const char* newname = 0); RooCompositeDataStore(const char* name, const char* title, const RooArgSet& vars, RooCategory& indexCat, map<std::string,RooAbsDataStore*> inputData); virtual~RooCompositeDataStore(); voidTObject::AbstractMethod(const char* method) const; virtual RooAbsArg*addColumn(RooAbsArg& var, Bool_t adjustRange = kTRUE); virtual RooArgSet*addColumns(const RooArgList& varList); virtual voidappend(RooAbsDataStore& other); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidattachBuffers(const RooArgSet& extObs); virtual voidTObject::Browse(TBrowser* b); virtual voidcacheArgs(const RooAbsArg* owner, RooArgSet& varSet, const RooArgSet* nset = 0); const RooArgSet&RooAbsDataStore::cachedVars() const; virtual const RooAbsArg*cacheOwner(); virtual Bool_tchangeObservableName(const char* from, const char* to); virtual voidRooAbsDataStore::checkInit() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual RooAbsDataStore*clone(const char* newname = 0) const; virtual TObject*TNamed::Clone(const char* newname = """") const; virtual RooAbsDataStore*clone(const RooArgSet& vars, const char* newname = 0) const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Int_tRooAbsDataStore::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsDataStore::dirtyProp() const; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voiddump(); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooCompositeDataStore.html:1667,Clear,Clear,1667,root/html532/RooCompositeDataStore.html,https://root.cern,https://root.cern/root/html532/RooCompositeDataStore.html,1,['Clear'],['Clear']
Usability,"RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidclearConvolutionWindow(); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); RooNumIntConfig&convIntConfig(); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooNumConvPdf.html:5070,clear,clearValueAndShapeDirty,5070,root/html534/RooNumConvPdf.html,https://root.cern,https://root.cern/root/html534/RooNumConvPdf.html,6,['clear'],['clearValueAndShapeDirty']
Usability,"RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidclearAbsMin(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCm",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooProfileLL.html:3731,clear,clearValueDirty,3731,root/html526/RooProfileLL.html,https://root.cern,https://root.cern/root/html526/RooProfileLL.html,1,['clear'],['clearValueDirty']
Usability,"RooFit » RooFit Core. ; Abstract interface for all probability density functions. . RooAbsPdf, the base class of all PDFs; RooAbsPdf is the base class for all probability density functions (PDFs). The class provides hybrid analytical/numerical normalization for its implementations, error tracing, and a Monte Carlo generator interface. A Minimal PDF Implementation; A minimal implementation of a PDF class derived from RooAbsPdf should override the evaluate() function. This function should return the PDF's value (which does not need to be normalised).; Normalization/Integration; Although the normalization of a PDF is an integral part of a probability density function, normalization is treated separately in RooAbsPdf. The reason is that a RooAbsPdf object is more than a PDF: it can be a building block for a more complex composite PDF if any of its variables are functions instead of variables. In such cases, the normalization of the composite PDF may not simply be integral over the dependents of the top-level PDF: these are functions with potentially non-trivial Jacobian terms themselves. NoteTherefore, no explicit attempt should be made to normalize the function output in evaluate(). In particular, normalisation constants can be omitted to speed up the function evaluations, and included later in the integration of the PDF (see below), which is rarely called in comparison to the evaluate() function.; In addition, RooAbsPdf objects do not have a static concept of what variables are parameters, and what variables are dependents (which need to be integrated over for a correct PDF normalization). Instead, the choice of normalization is always specified each time a normalized value is requested from the PDF via the getVal() method.; RooAbsPdf manages the entire normalization logic of each PDF with the help of a RooRealIntegral object, which coordinates the integration of a given choice of normalization. By default, RooRealIntegral will perform an entirely numeric integration o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsPdf.html:1384,simpl,simply,1384,doc/master/classRooAbsPdf.html,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html,1,['simpl'],['simply']
Usability,"RooProfileLL() [3/3]. RooProfileLL::RooProfileLL ; (; const RooProfileLL & ; other, . const char * ; name = nullptr . ). Copy constructor. ; Definition at line 73 of file RooProfileLL.cxx. Member Function Documentation. ◆ alwaysStartFromMin(). bool RooProfileLL::alwaysStartFromMin ; (; ); const. inline . Definition at line 31 of file RooProfileLL.h. ◆ bestFitObs(). const RooArgSet & RooProfileLL::bestFitObs ; (; ); const. Definition at line 98 of file RooProfileLL.cxx. ◆ bestFitParams(). const RooArgSet & RooProfileLL::bestFitParams ; (; ); const. Definition at line 89 of file RooProfileLL.cxx. ◆ Class(). static TClass * RooProfileLL::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooProfileLL::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooProfileLL::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 70 of file RooProfileLL.h. ◆ clearAbsMin(). void RooProfileLL::clearAbsMin ; (; ). inline . Definition at line 42 of file RooProfileLL.h. ◆ clone(). TObject * RooProfileLL::clone ; (; const char * ; newname); const. inlineoverridevirtual . Implements RooAbsArg.; Definition at line 28 of file RooProfileLL.h. ◆ createProfile(). RooFit::OwningPtr< RooAbsReal > RooProfileLL::createProfile ; (; const RooArgSet & ; paramsOfInterest). overridevirtual . Optimized implementation of createProfile for profile likelihoods. ; Return profile of original function in terms of stated parameters of interest rather than profiling recursively. ; Reimplemented from RooAbsReal.; Definition at line 112 of file RooProfileLL.cxx. ◆ DeclFileName(). static const char * RooProfileLL::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 70 of file RooProfileLL.h. ◆ evaluate(). double RooProfileLL::evaluate ; (; ); const. overrideprotectedvirtual . Evaluate profile likelihood by minimizing",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooProfileLL.html:63000,clear,clearAbsMin,63000,doc/master/classRooProfileLL.html,https://root.cern,https://root.cern/doc/master/classRooProfileLL.html,1,['clear'],['clearAbsMin']
Usability,"RooRealSumFunc, and RooRealSumPdf.; Definition at line 384 of file RooAbsArg.h. ◆ changeServer(). void RooAbsArg::changeServer ; (; RooAbsArg & ; server, . bool ; valueProp, . bool ; shapeProp . ). Change dirty flag propagation mask for specified server. ; Definition at line 438 of file RooAbsArg.cxx. ◆ checkObservables(). bool RooAbsArg::checkObservables ; (; const RooArgSet * ; nset); const. virtual . Overloadable function in which derived classes can implement consistency checks of the variables. ; If this function returns true, indicating an error, the fitter or generator will abort. ; Reimplemented in RooLagrangianMorphFunc, RooAddModel, RooAddPdf, RooRealSumFunc, and RooRealSumPdf.; Definition at line 817 of file RooAbsArg.cxx. ◆ cleanBranchName(). TString RooAbsArg::cleanBranchName ; (; ); const. protected . Construct a mangled name from the actual name that is free of any math symbols that might be interpreted by TTree. ; Definition at line 2075 of file RooAbsArg.cxx. ◆ clearShapeDirty(). void RooAbsArg::clearShapeDirty ; (; ); const. inlineprotected . Definition at line 579 of file RooAbsArg.h. ◆ clearValueAndShapeDirty(). void RooAbsArg::clearValueAndShapeDirty ; (; ); const. inlineprotected . Definition at line 571 of file RooAbsArg.h. ◆ clearValueDirty(). void RooAbsArg::clearValueDirty ; (; ); const. inlineprotected . Definition at line 576 of file RooAbsArg.h. ◆ clients(). const RefCountList_t & RooAbsArg::clients ; (; ); const. inline . List of all clients of this object. ; Definition at line 166 of file RooAbsArg.h. ◆ clone(). virtual TObject * RooAbsArg::clone ; (; const char * ; newname = nullptr); const. pure virtual . Implemented in RooStats::HistFactory::FlexibleInterpVar, RooStats::HistFactory::LinInterpVar, ParamHistFunc, PiecewiseInterpolation, RooStats::HistFactory::RooBarlowBeestonLL, Roo2DKeysPdf, RooArgusBG, RooBCPEffDecay, RooBCPGenDecay, RooBDecay, RooBernstein, RooBifurGauss, RooBMixDecay, RooBreitWigner, RooBukinPdf, RooCBShape, RooCFu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsArg.html:50523,clear,clearShapeDirty,50523,doc/master/classRooAbsArg.html,https://root.cern,https://root.cern/doc/master/classRooAbsArg.html,1,['clear'],['clearShapeDirty']
Usability,"RooStats::TestStatisticRooStats::TestStatistic::TestStatistic(); RooStats::TestStatisticRooStats::TestStatistic::TestStatistic(const RooStats::TestStatistic&). Data Members; private:. RooArgSet*fAltParameters; RooAbsPdf*fAltPdf; RooArgSetfConditionalObs; RooArgSet*fDetailedOutput!; boolfDetailedOutputEnabled; boolfFirstEval; RooAbsReal*fNllAlt! transient copy of the alt NLL; RooAbsReal*fNllNull! transient copy of the null NLL; RooArgSet*fNullParameters; RooAbsPdf*fNullPdf; Bool_tfReuseNll; static Bool_tfgAlwaysReuseNll. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetAlwaysReuseNLL(Bool_t flag); { fgAlwaysReuseNll = flag ; }. Double_t Evaluate(RooAbsData& data, RooArgSet& nullPOI). SimpleLikelihoodRatioTestStat(). SimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf). SimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf, const RooArgSet& nullParameters, const RooArgSet& altParameters). virtual ~SimpleLikelihoodRatioTestStat(). void SetReuseNLL(Bool_t flag); { fReuseNll = flag ; }. void SetNullParameters(const RooArgSet& nullParameters). void SetAltParameters(const RooArgSet& altParameters). bool ParamsAreEqual(). void SetConditionalObservables(const RooArgSet& set); set the conditional observables which will be used when creating the NLL; so the pdf's will not be normalized on the conditional observables when computing the NLL. {fConditionalObs.removeAll(); fConditionalObs.add(set);}. void EnableDetailedOutput(bool e = true); { fDetailedOutputEnabled = e; fDetailedOutput = NULL; }. const RooArgSet* GetDetailedOutput(void); { return fDetailedOutput; }. const TString GetVarName() const. » Author: Kyle Cranmer and Sven Kreiss June 2010 » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id$ » Last generated: 2015-06-30 14:37; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__SimpleLikelihoodRatioTestStat.html:2772,Simpl,SimpleLikelihoodRatioTestStat,2772,root/html602/RooStats__SimpleLikelihoodRatioTestStat.html,https://root.cern,https://root.cern/root/html602/RooStats__SimpleLikelihoodRatioTestStat.html,1,['Simpl'],['SimpleLikelihoodRatioTestStat']
Usability,"RooStats::TestStatisticRooStats::TestStatistic::TestStatistic(); RooStats::TestStatisticRooStats::TestStatistic::TestStatistic(const RooStats::TestStatistic&). Data Members; private:. RooArgSet*fAltParameters; RooAbsPdf*fAltPdf; RooArgSetfConditionalObs; RooArgSet*fDetailedOutput!; boolfDetailedOutputEnabled; boolfFirstEval; RooAbsReal*fNllAlt! transient copy of the alt NLL; RooAbsReal*fNllNull! transient copy of the null NLL; RooArgSet*fNullParameters; RooAbsPdf*fNullPdf; Bool_tfReuseNll; static Bool_tfgAlwaysReuseNll. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetAlwaysReuseNLL(Bool_t flag); { fgAlwaysReuseNll = flag ; }. Double_t Evaluate(RooAbsData& data, RooArgSet& nullPOI). SimpleLikelihoodRatioTestStat(). SimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf). SimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf, const RooArgSet& nullParameters, const RooArgSet& altParameters). virtual ~SimpleLikelihoodRatioTestStat(). void SetReuseNLL(Bool_t flag); { fReuseNll = flag ; }. void SetNullParameters(const RooArgSet& nullParameters). void SetAltParameters(const RooArgSet& altParameters). bool ParamsAreEqual(). void SetConditionalObservables(const RooArgSet& set); set the conditional observables which will be used when creating the NLL; so the pdf's will not be normalized on the conditional observables when computing the NLL. {fConditionalObs.removeAll(); fConditionalObs.add(set);}. void EnableDetailedOutput(bool e = true); { fDetailedOutputEnabled = e; fDetailedOutput = NULL; }. const RooArgSet* GetDetailedOutput(void); { return fDetailedOutput; }. const TString GetVarName() const. » Author: Kyle Cranmer and Sven Kreiss June 2010 » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id$ » Last generated: 2015-09-08 17:42; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooStats__SimpleLikelihoodRatioTestStat.html:2772,Simpl,SimpleLikelihoodRatioTestStat,2772,root/html604/RooStats__SimpleLikelihoodRatioTestStat.html,https://root.cern,https://root.cern/root/html604/RooStats__SimpleLikelihoodRatioTestStat.html,1,['Simpl'],['SimpleLikelihoodRatioTestStat']
Usability,"RotateYEulerAngles ; (; Double_t ; phi, . Double_t ; theta, . Double_t ; psi . ). Rotate using the y-convention. ; Definition at line 526 of file TRotation.cxx. ◆ RotateZ(). TRotation & TRotation::RotateZ ; (; Double_t ; a). Rotate around z. ; Definition at line 378 of file TRotation.cxx. ◆ SetToIdentity(). TRotation & TRotation::SetToIdentity ; (; ). inline . Definition at line 251 of file TRotation.h. ◆ SetXAxis() [1/2]. TRotation & TRotation::SetXAxis ; (; const TVector3 & ; axis). Set X axis. ; Definition at line 713 of file TRotation.cxx. ◆ SetXAxis() [2/2]. TRotation & TRotation::SetXAxis ; (; const TVector3 & ; axis, . const TVector3 & ; xyPlane . ). Set X axis. ; Definition at line 698 of file TRotation.cxx. ◆ SetXEulerAngles(). TRotation & TRotation::SetXEulerAngles ; (; Double_t ; phi, . Double_t ; theta, . Double_t ; psi . ). Rotate using the x-convention (Landau and Lifshitz, Goldstein, &c) by doing the explicit rotations. ; This is slightly less efficient than directly applying the rotation, but makes the code much clearer. My presumption is that this code is not going to be a speed bottle neck. ; Definition at line 488 of file TRotation.cxx. ◆ SetXPhi(). void TRotation::SetXPhi ; (; Double_t ; phi). Set XPhi. ; Definition at line 537 of file TRotation.cxx. ◆ SetXPsi(). void TRotation::SetXPsi ; (; Double_t ; psi). Set XPsi. ; Definition at line 551 of file TRotation.cxx. ◆ SetXTheta(). void TRotation::SetXTheta ; (; Double_t ; theta). Set XTheta. ; Definition at line 544 of file TRotation.cxx. ◆ SetYAxis() [1/2]. TRotation & TRotation::SetYAxis ; (; const TVector3 & ; axis). Set Y axis. ; Definition at line 736 of file TRotation.cxx. ◆ SetYAxis() [2/2]. TRotation & TRotation::SetYAxis ; (; const TVector3 & ; axis, . const TVector3 & ; yzPlane . ). Set Y axis. ; Definition at line 721 of file TRotation.cxx. ◆ SetYEulerAngles(). TRotation & TRotation::SetYEulerAngles ; (; Double_t ; phi, . Double_t ; theta, . Double_t ; psi . ). Rotate using the y-conven",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRotation.html:26536,clear,clearer,26536,doc/master/classTRotation.html,https://root.cern,https://root.cern/doc/master/classTRotation.html,1,['clear'],['clearer']
Usability,"RotationMatrix[5] * fRotationMatrix[7] * fRotationMatrix[0] -; 1371 fRotationMatrix[8] * fRotationMatrix[1] * fRotationMatrix[3];; 1372 return det;; 1373}; 1374 ; 1375////////////////////////////////////////////////////////////////////////////////; 1376/// performes an orthogonality check and finds if the matrix is a reflection; 1377/// Warning(""CheckMatrix"", ""orthogonality check not performed yet"");; 1378 ; 1379void TGeoRotation::CheckMatrix(); 1380{; 1381 if (Determinant() < 0); 1382 SetBit(kGeoReflection);; 1383 Double_t dd = fRotationMatrix[0] + fRotationMatrix[4] + fRotationMatrix[8] - 3.;; 1384 if (TMath::Abs(dd) < 1.E-12); 1385 ResetBit(kGeoRotation);; 1386 else; 1387 SetBit(kGeoRotation);; 1388}; 1389 ; 1390////////////////////////////////////////////////////////////////////////////////; 1391/// Get the inverse rotation matrix (which is simply the transpose); 1392 ; 1393void TGeoRotation::GetInverse(Double_t *invmat) const; 1394{; 1395 if (!invmat) {; 1396 Error(""GetInverse"", ""no place to store the inverse matrix"");; 1397 return;; 1398 }; 1399 for (Int_t i = 0; i < 3; i++) {; 1400 for (Int_t j = 0; j < 3; j++) {; 1401 invmat[3 * i + j] = fRotationMatrix[3 * j + i];; 1402 }; 1403 }; 1404}; 1405 ; 1406////////////////////////////////////////////////////////////////////////////////; 1407/// Multiply this rotation with the one specified by ROT.; 1408/// - after=TRUE (default): THIS*ROT; 1409/// - after=FALSE : ROT*THIS; 1410 ; 1411void TGeoRotation::MultiplyBy(const TGeoRotation *rot, Bool_t after); 1412{; 1413 const Double_t *matleft, *matright;; 1414 SetBit(kGeoRotation);; 1415 Double_t newmat[9] = {0};; 1416 if (after) {; 1417 matleft = &fRotationMatrix[0];; 1418 matright = rot->GetRotationMatrix();; 1419 } else {; 1420 matleft = rot->GetRotationMatrix();; 1421 matright = &fRotationMatrix[0];; 1422 }; 1423 for (Int_t i = 0; i < 3; i++) {; 1424 for (Int_t j = 0; j < 3; j++) {; 1425 for (Int_t k = 0; k < 3; k++) {; 1426 newmat[3 * i + j] += matleft[3 * i + k] * ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoMatrix_8cxx_source.html:50173,simpl,simply,50173,doc/master/TGeoMatrix_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoMatrix_8cxx_source.html,1,['simpl'],['simply']
Usability,"S . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation » Courses » Introductory Tutorials Fit Panel. As you can see, the fit (solid line) doesn't really describe the data: a polynomial is nowhere close to most data points. So from the Canvas, start the fit panel and use a gaussian (""gaus"") instead of a ""pol2"" to perform the fit. (You don't know what a Gaussian is? see http://en.wikipedia.org/wiki/Gaussian_function). Figure 7: How to open the fit panel from the Canvas ""Tools"" menu; Here is what the fit panel looks like:. Figure 8: Fit Panel. Using this fit panel allows you to change the fit function and see the result after pressing ""Fit"". Now you should see the difference:. Figure 9: Distribution of ""fPosX"" leaf values, fitted with a Gaussian; The solid line is now passing through every data point. It fits (almost) perfectly the data!; . ‹ Histogramming; up; Compiling Your Code (also known as ACLiC) ›. Navigate through this book; Meet a TTree; Accessing a TTree With a TBrowser; Using TTree::Draw() to access a TTree; TTree and Its Data; Using a Macro to Read a TTree; Histogramming; Fit Panel; Compiling Your Code (also known as ACLiC); Accessing a TTree With a TSelector; Histogramming in a Selector; Using a TSelector with PROOF; The End. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/fit-panel.html:3297,guid,guidelines,3297,d/fit-panel.html,https://root.cern,https://root.cern/d/fit-panel.html,1,['guid'],['guidelines']
Usability,"SE); voidAddRoot(const char* string)MENU ; virtual voidAdjustPosition(); voidAdjustPosition(TGListTreeItem* item); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual voidTGContainer::Associate(const TGWindow* w); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); voidCheckAllChildren(TGListTreeItem* item, Bool_t state); virtual voidChecked(TObject* obj, Bool_t check)SIGNAL ; voidCheckItem(TGListTreeItem* item, Bool_t check = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); voidClearHighlighted(); virtual voidTGContainer::ClearViewPort(); virtual voidClicked(TGListTreeItem* entry, Int_t btn)SIGNAL ; virtual voidClicked(TGListTreeItem* entry, Int_t btn, Int_t x, Int_t y)SIGNAL ; virtual voidClicked(TGListTreeItem* entry, Int_t btn, UInt_t mask, Int_t x, Int_t y)SIGNAL ; virtual TObject*TObject::Clone(const char* newname = """") const; voidCloseItem(TGListTreeItem* item); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGListTree.html:2615,Clear,Clear,2615,root/html532/TGListTree.html,https://root.cern,https://root.cern/root/html532/TGListTree.html,4,['Clear'],['Clear']
Usability,"SFT,; Jonas Rembser, CERN/SFT,; Andrea Sciandra, SCIPP-UCSC/Atlas,; Oksana Shadura, UNL/CMS,; Enric Tejedor Saavedra, CERN/SFT,; Christian Tacke, GSI,; Matevz Tadel, UCSD/CMS,; Vassil Vassilev, Princeton/CMS,; Wouter Verkerke, NIKHEF/Atlas,; Stefan Wunsch, CERN/SFT; General; Deprecation and Removal. RooAbsReal::evaluateBatch() has been removed in favour of the faster evaluateSpan(). See section “RooFit Libraries” for instructions on how to use RooAbsReal::evaluateSpan().; TTreeProcessorMT::SetMaxTasksPerFilePerWorker has been deprecated in favour of TTreeProcessorMT::SetTasksPerWorkerHint. Header Dependency Reduction; As always, ROOT tries to reduce the amount of code exposed through its headers. To that end, #includes were replaced by forward declarations in several headers. This might cause compilation errors (“missing definition of type…”) in your code, if that code was relying on indirect includes, instead of including the required headers itself. Please correct that simply by including the required header directly.; Core Libraries; Due to internal changes required to comply with the deprecation of Intel TBB’s task_scheduler_init and related interfaces in recent TBB versions, as of v6.24 ROOT will not honor a maximum concurrency level set with tbb::task_scheduler_init but will require instead the usage of tbb::global_control:; //tbb::task_scheduler_init init(2); // does not affect the number of threads ROOT will use anymore. tbb::global_control c(tbb::global_control::max_allowed_parallelism, 2);; ROOT::TThreadExecutor p1; // will use 2 threads; ROOT::TThreadExecutor p2(/*nThreads=*/8); // will still use 2 threads; Note that the preferred way to steer ROOT’s concurrency level is still through ROOT::EnableImplicitMT or by passing the appropriate parameter to executors’ constructors, as in TThreadExecutor::TThreadExecutor.; See the discussion at ROOT-11014 for more context.; Dynamic Path: ROOT_LIBRARY_PATH; A new way to set ROOT’s “Dynamic Path” was added: the envi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v624/release-notes.html:3272,simpl,simply,3272,doc/v624/release-notes.html,https://root.cern,https://root.cern/doc/v624/release-notes.html,1,['simpl'],['simply']
Usability,"SIGNAL ; virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTGTextButton::DoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); virtual voidTGButton::EmitSignals(Bool_t wasUp); static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; const TGResourcePool*TGFrame::GetResourcePool() const; virtual void*TGFrame::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidTGTextButton::Init(); voidTObject::MakeZombie(); Int_tTGWidget::SetFlags(Int_t flags); virtual voidTGButton::SetToggleButton(Bool_t); virtual voidTGFrame::StartGuiBuilding(Bool_t on = kTRUE). private:. TEveGedNameTextButton(const TEveGedNameTextButton&); TEveGedNameTextButton&operator=(const TEveGedNameTextButton&). Data Members; public:. enum TGFrame::[unnamed] { kDeleteWindowCalled; };; enum TGWindow::EEditMode { kEditEnable; kEditDisable; kEditDisableEvents; kEditDisableGrab; kEditDisableLayout; kEditDisableResize; kEditDisableHeight; kEditDisableWidth; kEditDisableBtnEnable; kEditDisableKeyEnable; };; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TEveGedNameTextButton.html:16480,Clear,ClearFlags,16480,root/html532/TEveGedNameTextButton.html,https://root.cern,https://root.cern/root/html532/TEveGedNameTextButton.html,2,['Clear'],['ClearFlags']
Usability,"STool.cxx. ◆ autoClassNamePostFix(). const char * RooFactoryWSTool::autoClassNamePostFix ; (; ); const. inline . Definition at line 155 of file RooFactoryWSTool.h. ◆ checkIndex(). void RooFactoryWSTool::checkIndex ; (; UInt_t ; index). staticprotected . Definition at line 1516 of file RooFactoryWSTool.cxx. ◆ checkSyntax(). bool RooFactoryWSTool::checkSyntax ; (; const char * ; arg). protected . Perform basic syntax on given factory expression. ; If function returns true syntax errors are found. ; Definition at line 1481 of file RooFactoryWSTool.cxx. ◆ Class(). static TClass * RooFactoryWSTool::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooFactoryWSTool::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooFactoryWSTool::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 199 of file RooFactoryWSTool.h. ◆ clearError(). void RooFactoryWSTool::clearError ; (; ). inlineprotected . Associated workspace. ; Definition at line 192 of file RooFactoryWSTool.h. ◆ createArg(). RooAbsArg * RooFactoryWSTool::createArg ; (; const char * ; className, . const char * ; objName, . const char * ; varList . ). Low-level factory interface for creating a RooAbsPdf of a given class with a given list of input variables The variable list varList should be of the form ""a,b,c"" where the interpretation of the argument is dependent on the pdf. ; Set and List arguments can be passed by substituting a single argument with the form (a,b,c), i.e. one can set varList to ""x,(a0,a1,a2)"" to pass a RooAbsReal and a RooArgSet as arguments. ; Definition at line 280 of file RooFactoryWSTool.cxx. ◆ createCategory(). RooCategory * RooFactoryWSTool::createCategory ; (; const char * ; name, . const char * ; stateNameList = nullptr . ). Low-level factory interface for creating a RooCategory with a given list of state names. ; The State name list can be of the form ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFactoryWSTool.html:30180,clear,clearError,30180,doc/master/classRooFactoryWSTool.html,https://root.cern,https://root.cern/doc/master/classRooFactoryWSTool.html,1,['clear'],['clearError']
Usability,"STool::MultiBuildConfig Build configuration object for RooSimWSTool with multiple prototype p.d.f.; RooSimWSTool::ObjBuildConfig Validated RooSimWSTool build configuration; RooSimWSTool::ObjSplitRule Validated RooSimWSTool split rule; RooSimWSTool::SplitRule Split rule specification for prototype p.d.f; RooSimultaneous Simultaneous operator p.d.f, functions like C++ 'switch()' on input p.d.fs operating on index category5A; RooSpHarmonic SpHarmonic polynomial; RooStats ; RooStats::AcceptanceRegion A simple class for acceptance regions used for ConfidenceBelt; RooStats::AsymptoticCalculator ; RooStats::BayesianCalculator BayesianCalculator class; RooStats::BernsteinCorrection A utility to add polynomial corrrection terms to a model to improve the description of data.; RooStats::CombinedCalculator A base class that is for tools that can be both HypoTestCalculators and IntervalCalculators; RooStats::ConfInterval Interface for Confidence Intervals; RooStats::ConfidenceBelt A confidence belt for the Neyman Construction; RooStats::DebuggingSampler A simple implementation of the DistributionCreator interface; RooStats::DebuggingTestStat A concrete implementation of the TestStatistic interface, useful for debugging.; RooStats::DetailedOutputAggregator ; RooStats::FeldmanCousins Interface for tools setting limits (producing confidence intervals); RooStats::FrequentistCalculator ; RooStats::HLFactory The high Level Model Factory to create models from datacards; RooStats::Heaviside Your description goes here...; RooStats::HistFactory ; RooStats::HistFactory::Asimov ; RooStats::HistFactory::Channel ; RooStats::HistFactory::ConfigParser ; RooStats::HistFactory::Constraint ; RooStats::HistFactory::Data ; RooStats::HistFactory::EstimateSummary ; RooStats::HistFactory::FlexibleInterpVar flexible interpolation; RooStats::HistFactory::HistFactoryNavigation ; RooStats::HistFactory::HistFactorySimultaneous Simultaneous operator p.d.f, functions like C++ 'switch()' on input p.d.fs operati",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ClassIndex.html:45347,simpl,simple,45347,root/html534/ClassIndex.html,https://root.cern,https://root.cern/root/html534/ClassIndex.html,2,['simpl'],['simple']
Usability,"STool::MultiBuildConfig Build configuration object for RooSimWSTool with multiple prototype p.d.f.; RooSimWSTool::ObjBuildConfig Validated RooSimWSTool build configuration; RooSimWSTool::ObjSplitRule Validated RooSimWSTool split rule; RooSimWSTool::SplitRule Split rule specification for prototype p.d.f; RooSimultaneous Simultaneous operator p.d.f, functions like C++ 'switch()' on input p.d.fs operating on index category5A; RooSpHarmonic SpHarmonic polynomial; RooStats ; RooStats::AcceptanceRegion A simple class for acceptance regions used for ConfidenceBelt; RooStats::AsymptoticCalculator ; RooStats::BayesianCalculator BayesianCalculator class; RooStats::BernsteinCorrection A utility to add polynomial corrrection terms to a model to improve the description of data.; RooStats::CombinedCalculator A base class that is for tools that can be both HypoTestCalculators and IntervalCalculators; RooStats::ConfInterval Interface for Confidence Intervals; RooStats::ConfidenceBelt A confidence belt for the Neyman Construction; RooStats::DebuggingSampler A simple implementation of the DistributionCreator interface; RooStats::DebuggingTestStat A concrete implementation of the TestStatistic interface, useful for debugging.; RooStats::DetailedOutputAggregator ; RooStats::FeldmanCousins Interface for tools setting limits (producing confidence intervals); RooStats::FrequentistCalculator ; RooStats::HLFactory The high Level Model Factory to create models from datacards; RooStats::Heaviside Your description goes here...; RooStats::HistFactory ; RooStats::HistFactory::Asimov ; RooStats::HistFactory::Channel ; RooStats::HistFactory::ConfigParser ; RooStats::HistFactory::Data ; RooStats::HistFactory::EstimateSummary ; RooStats::HistFactory::FlexibleInterpVar flexible interpolation; RooStats::HistFactory::HistFactoryNavigation ; RooStats::HistFactory::HistFactorySimultaneous Simultaneous operator p.d.f, functions like C++ 'switch()' on input p.d.fs operating on index category5A; RooStats::Hi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ClassIndex.html:42319,simpl,simple,42319,root/html602/ClassIndex.html,https://root.cern,https://root.cern/root/html602/ClassIndex.html,4,['simpl'],['simple']
Usability,"STool::MultiBuildConfig Build configuration object for RooSimWSTool with multiple prototype p.d.f.; RooSimWSTool::ObjBuildConfig Validated RooSimWSTool build configuration; RooSimWSTool::ObjSplitRule Validated RooSimWSTool split rule; RooSimWSTool::SplitRule Split rule specification for prototype p.d.f; RooSimultaneous Simultaneous operator p.d.f, functions like C++ 'switch()' on input p.d.fs operating on index category5A; RooSpHarmonic SpHarmonic polynomial; RooStats ; RooStats::AcceptanceRegion A simple class for acceptance regions used for ConfidenceBelt; RooStats::AsymptoticCalculator ; RooStats::BayesianCalculator BayesianCalculator class; RooStats::BernsteinCorrection A utility to add polynomial corrrection terms to a model to improve the description of data.; RooStats::CombinedCalculator A base class that is for tools that can be both HypoTestCalculators and IntervalCalculators; RooStats::ConfInterval Interface for Confidence Intervals; RooStats::ConfidenceBelt A confidence belt for the Neyman Construction; RooStats::DebuggingSampler A simple implementation of the DistributionCreator interface; RooStats::DebuggingTestStat A concrete implementation of the TestStatistic interface, useful for debugging.; RooStats::FeldmanCousins Interface for tools setting limits (producing confidence intervals); RooStats::FrequentistCalculator ; RooStats::HLFactory The high Level Model Factory to create models from datacards; RooStats::Heaviside Your description goes here...; RooStats::HistFactory::EstimateSummary ; RooStats::HistFactory::FlexibleInterpVar flexible interpolation; RooStats::HistFactory::HistoToWorkspaceFactory ; RooStats::HistFactory::HistoToWorkspaceFactoryFast ; RooStats::HistFactory::LinInterpVar Piecewise linear interpolation; RooStats::HybridCalculator ; RooStats::HybridCalculatorOriginal Hypothesis test calculator using a Bayesian-frequentist hybrid method; RooStats::HybridPlot Provides the plots for an HybridResult; RooStats::HybridResult Class containing ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ClassIndex.html:44581,simpl,simple,44581,root/html532/ClassIndex.html,https://root.cern,https://root.cern/root/html532/ClassIndex.html,1,['simpl'],['simple']
Usability,"SYS/etc/system.rootrc) and the prefix is the name of your script.; The default behavior of rootcling is to not link in (i.e. generate the dictionary for) any of the symbols. In particular, this means that the following lines are, in the general case, unnecessary.; #pragma link off all globals;; #pragma link off all classes;; #pragma link off all functions;; This also means that linking the instantiation of a class template:; #pragma link C++ class mytemplate<int>;; ONLY links this specific class. You need to request the generation of the iterators explicitly.; See the documentation of rootcling for details how pragma can be used.; NOTE: You should not call ACLiC with a script that has a function called main().; 7.4.4 Intermediate Steps and Files; ACLiC executes two steps and a third one if needed. These are:. Calling rootcling to create a dictionary using rootcling.; Calling the compiler to build the shared library from the script.; If there are errors, it calls the compiler to build a dummy executable to clearly report unresolved symbols. ACLiC makes a shared library with a dictionary containing the classes and functions declared in the script. It also adds the classes and functions declared in included files with the same name as the script file and any of the following extensions: .h, .hh, .hpp, .hxx, .hPP, .hXX. This means that, by default, you cannot combine scripts from different files into one library by using #include statements; you will need to compile each script separately. In a future release, we plan to add the global variables declared in the script to the dictionary also. If you are curious about the specific calls, you can raise the ROOT debug level: gDebug=3 and ACLiC will print these steps. If you need to keep the intermediate files around, for example when debugging the script using gdb, use gDebug=7.; 7.4.5 Moving between Interpreter and Compiler; The best way to develop portable scripts is to make sure you can always run them with both, the int",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:275205,clear,clearly,275205,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['clear'],['clearly']
Usability,"SamplingDistribution*GetUpperLimitDistribution() const; doubleGetXValue(int index) const; doubleGetYError(int index) const; doubleGetYValue(int index) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; RooStats::HypoTestInverterResultHypoTestInverterResult(const char* name = 0); RooStats::HypoTestInverterResultHypoTestInverterResult(const RooStats::HypoTestInverterResult& other, const char* name); RooStats::HypoTestInverterResultHypoTestInverterResult(const char* name, const RooRealVar& scannedVariable, double cl); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tRooStats::SimpleInterval::IsInInterval(const RooArgSet&) const; boolIsOneSided() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; boolIsTwoSided() const; Bool_tTObject::IsZombie() const; virtual Double_tLowerLimit(); Double_tLowerLimitEstimatedError(); virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooStats::HypoTestInverterResult&operator=(const RooStats::HypoTestInverterResult& other); virtual v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HypoTestInverterResult.html:4756,Simpl,SimpleInterval,4756,root/html534/RooStats__HypoTestInverterResult.html,https://root.cern,https://root.cern/root/html534/RooStats__HypoTestInverterResult.html,1,['Simpl'],['SimpleInterval']
Usability,"Seg(); TGeoTubeSeg(Double_t* params); TGeoTubeSeg(const TGeoTubeSeg&); TGeoTubeSeg(Double_t rmin, Double_t rmax, Double_t dz, Double_t phi1, Double_t phi2); TGeoTubeSeg(const char* name, Double_t rmin, Double_t rmax, Double_t dz, Double_t phi1, Double_t phi2); virtual~TGeoTubeSeg(); voidTObject::AbstractMethod(const char* method) const; virtual voidAfterStreamer(); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTGeoBBox::AreOverlapping(const TGeoBBox* box1, const TGeoMatrix* mat1, const TGeoBBox* box2, const TGeoMatrix* mat2); static Double_tTGeoShape::Big(); virtual voidTObject::Browse(TBrowser* b); virtual Double_tCapacity() const; static Double_tCapacity(Double_t rmin, Double_t rmax, Double_t dz, Double_t phi1, Double_t phi2); voidTGeoShape::CheckShape(Int_t testNo, Int_t nsamples = 10000, Option_t* option = """"); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTGeoShape::ClearThreadData() const; virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidComputeBBox(); static Double_tTGeoShape::ComputeEpsMch(); virtual voidComputeNormal(const Double_t* point, const Double_t* dir, Double_t* norm); virtual voidComputeNormal_v(const Double_t* points, const Double_t* dirs, Double_t* norms, Int_t vecsize); static voidComputeNormalS(const Double_t* point, const Double_t* dir, Double_t* norm, Double_t rmin, Double_t rmax, Double_t dz, Double_t c1, Double_t s1, Double_t c2, Double_t s2); virtual Bool_tContains(const Double_t* point) const; virtual voidContains_v(const Double_t* points, Bool_t* inside, Int_t vecsize) const; virtual voidTNamed::Copy(TObject& named) const; virtual Bool_tTGeoBBox::CouldBeCrossed(const Double_t* point, const Double_t* dir) const; virtual voidTGeoShape::CreateThreadData(Int_t); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDistancetoPrimitive(Int_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoTubeSeg.html:2039,Clear,ClearThreadData,2039,root/html534/TGeoTubeSeg.html,https://root.cern,https://root.cern/root/html534/TGeoTubeSeg.html,1,['Clear'],['ClearThreadData']
Usability,"Seg(Double_t* params); TGeoConeSeg(const TGeoConeSeg&); TGeoConeSeg(Double_t dz, Double_t rmin1, Double_t rmax1, Double_t rmin2, Double_t rmax2, Double_t phi1, Double_t phi2); TGeoConeSeg(const char* name, Double_t dz, Double_t rmin1, Double_t rmax1, Double_t rmin2, Double_t rmax2, Double_t phi1, Double_t phi2); virtual~TGeoConeSeg(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTGeoBBox::AreOverlapping(const TGeoBBox* box1, const TGeoMatrix* mat1, const TGeoBBox* box2, const TGeoMatrix* mat2); static Double_tTGeoShape::Big(); virtual voidTObject::Browse(TBrowser* b); virtual Double_tCapacity() const; static Double_tCapacity(Double_t dz, Double_t rmin1, Double_t rmax1, Double_t rmin2, Double_t rmax2, Double_t phi1, Double_t phi2); voidTGeoShape::CheckShape(Int_t testNo, Int_t nsamples = 10000, Option_t* option = """"); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTGeoShape::ClearThreadData() const; virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidComputeBBox(); static Double_tTGeoShape::ComputeEpsMch(); virtual voidComputeNormal(Double_t* point, Double_t* dir, Double_t* norm); static voidComputeNormalS(Double_t* point, Double_t* dir, Double_t* norm, Double_t dz, Double_t rmin1, Double_t rmax1, Double_t rmin2, Double_t rmax2, Double_t c1, Double_t s1, Double_t c2, Double_t s2); virtual Bool_tContains(Double_t* point) const; virtual voidTNamed::Copy(TObject& named) const; virtual Bool_tTGeoBBox::CouldBeCrossed(Double_t* point, Double_t* dir) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual Double_tDistFromInside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; static Double_tDistFromInsideS(Do",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoConeSeg.html:1557,Clear,Clear,1557,root/html532/TGeoConeSeg.html,https://root.cern,https://root.cern/root/html532/TGeoConeSeg.html,1,['Clear'],['Clear']
Usability,"SelectPointer to selection formula; TStringfSelection; TStatus*fStatus; Long64_tTSelector::fStatusSelector status; TTree*fTree; TTreeDrawArgsParserfTreeDrawArgsParser; TTreeFormula*fVar[4]Pointer to variable formula; Double_tfWeightGlobal weight for fill actions. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TProofDraw(); Destructor. void Init(TTree* ); Init the tree. Bool_t Notify(); Called when a new tree is loaded. void Begin(TTree* ); Executed by the client before processing. void SlaveBegin(TTree* ); Executed by each slave before processing. void FillWeight(); Get weight from input list, if any. Bool_t ProcessSingle(Long64_t , Int_t ); Processes a single variable from an entry. Bool_t Process(Long64_t ); Executed for each entry. void SlaveTerminate(void); Executed by each slave after the processing has finished,; before returning the results to the client. void Terminate(void); Executed by the client after getting the processing retults. void ClearFormula(); Delete internal buffers. void SetCanvas(const char* objname); Move to a canvas named <name>_canvas; create the canvas if not existing.; Used to avoid screwing up existing plots when non default names are used; for the final objects. void SetDrawAtt(TObject* o); Set the drawing attributes from the input list. void SetError(const char* sub, const char* mesg); Sets the error status. Bool_t CompileVariables(); Compiles each variable from fTreeDrawArgsParser for the tree fTree.; Return kFALSE if any of the variable is not compilable. void DoFill(Long64_t entry, Double_t w, const Double_t* v). void DefVar(). int Version() const; { return 1; }. » Author: Maarten Ballintijn 24/09/2003 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; » Last changed: root/proofplayer:$Id$ » Last generated: 2015-06-04 16:54; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofDraw.html:8221,Clear,ClearFormula,8221,root/html534/TProofDraw.html,https://root.cern,https://root.cern/root/html534/TProofDraw.html,1,['Clear'],['ClearFormula']
Usability,"SelectSearch(Bool_t value) const; voidSetSearchMethod(); voidSetSimpleArray(Int_t arraySize, Int_t firstRow, Int_t numberRows). private:. TTableSorter(const TTableSorter&); TTableSorter&operator=(const TTableSorter&). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Int_tfColDimensionsThe number of the dimensions for array (=-1 means it is a ""simple"" array); TStringfColName; Int_tfColOffset; Int_tfColSizeThe size of the selected column in bytes; TTable::EColumnTypefColTypedata type of the selected column; COMPAREMETHODfCompareMethodFunction to sort the original array; const char*fFirstParentRow! pointer to the internal array of TTable object;; Int_tfFirstRowfirst row of the table to be sorted; Int_t*fIndexArray""parsed"" indecis; Int_tfLastFoundThe index of the last found index within fSortIndex; TStringTNamed::fNameobject identifier; Int_tfNumberOfRowsnumber of rows of the table to be sorted; Long_tfParentRowSizeTo be filled from TTable::GetRowSize() method; const TTable*fParentTable!- the back pointer to the sorted table; SEARCHMETHODfSearchMethodFunction selected to search values; void**fSortIndexArray of pointers to columns of the sorted table; TStringTNamed::fTitleobject title; const Char_t*fsimpleArrayPointer to the ""simple"" array;. private:. TTableSorter::fValue. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TTableSorter(); default ctor for RootCint dictionary. TTableSorter(const TTable& table, TString& colName, Int_t firstRow = 0, Int_t numbeRows = 0). TTableSorter ctor sorts the input table along its column defined with colName. - colName - may be followed by the square brackets with integer number inside,; if that columm is an array (for example ""phys[3]"").; NO expression inside ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTableSorter.html:11921,simpl,simple,11921,root/html534/TTableSorter.html,https://root.cern,https://root.cern/root/html534/TTableSorter.html,4,['simpl'],['simple']
Usability,"ServerRedirect is true; all cache elements will be cleared when a server redirect is intercepted by the cache manager.; This is the default strategy and should only be overridden when you really understand; what you're doing as properly implementing server redirect in cache elements can get very; complicated, especially if there are (cyclical) reference back to the owning object. RooObjCacheManager(const RooObjCacheManager& other, RooAbsArg* owner = 0); Copy constructor. ~RooObjCacheManager(); Destructor. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ); Intercept server redirect calls. If clearOnRedirect was set, sterilize; the cache (i.e. keep the structure but delete all contents). If not; forward serverRedirect to cache elements. void operModeHook(); Intercept changes to cache operation mode and forward to cache elements. void optimizeCacheMode(const RooArgSet& , RooArgSet& , RooLinkedList& ); Intercept calls to perform automatic optimization of cache mode operation.; Forward calls to existing cache elements and save configuration of; cache mode optimization so that it can be applied on new cache elements; upon insertion. void sterilize(). void insertObjectHook(RooAbsCacheElement& ); Set owner link on all object inserted into cache.; Also if cache mode optimization was requested, apply; it now to cache element being inserted. void printCompactTreeHook(ostream& , const char* ); Add details on cache contents when printing in tree mode. void findConstantNodes(const RooArgSet& , RooArgSet& , RooLinkedList& ); If clearOnRedirect is false, forward constant term optimization calls to; cache elements. void doClearObsList(Bool_t flag); { _clearObsList = flag ; }. Bool_t clearObsList(); { return _clearObsList ; }. » Last changed: Fri Dec 2 14:26:56 2011 » Last generated: 2011-12-02 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooObjCacheManager.html:5724,clear,clearOnRedirect,5724,root/html532/RooObjCacheManager.html,https://root.cern,https://root.cern/root/html532/RooObjCacheManager.html,4,['clear'],"['clearObsList', 'clearOnRedirect']"
Usability,"ServerRedirect is true; all cache elements will be cleared when a server redirect is intercepted by the cache manager.; This is the default strategy and should only be overridden when you really understand; what you're doing as properly implementing server redirect in cache elements can get very; complicated, especially if there are (cyclical) reference back to the owning object. RooObjCacheManager(const RooObjCacheManager& other, RooAbsArg* owner = 0); Copy constructor. ~RooObjCacheManager(); Destructor. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ); Intercept server redirect calls. If clearOnRedirect was set, sterilize; the cache (i.e. keep the structure but delete all contents). If not; forward serverRedirect to cache elements. void operModeHook(); Intercept changes to cache operation mode and forward to cache elements. void optimizeCacheMode(const RooArgSet& , RooArgSet& , RooLinkedList& ); Intercept calls to perform automatic optimization of cache mode operation.; Forward calls to existing cache elements and save configuration of; cache mode optimization so that it can be applied on new cache elements; upon insertion. void sterilize(). void insertObjectHook(RooAbsCacheElement& ); Set owner link on all object inserted into cache.; Also if cache mode optimization was requested, apply; it now to cache element being inserted. void printCompactTreeHook(ostream& , const char* ); Add details on cache contents when printing in tree mode. void findConstantNodes(const RooArgSet& , RooArgSet& , RooLinkedList& ); If clearOnRedirect is false, forward constant term optimization calls to; cache elements. void doClearObsList(Bool_t flag); { _clearObsList = flag ; }. Bool_t clearObsList(); { return _clearObsList ; }. » Last changed: Mon Jul 4 15:23:37 2011 » Last generated: 2011-07-04 15:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooObjCacheManager.html:5388,clear,clearOnRedirect,5388,root/html530/RooObjCacheManager.html,https://root.cern,https://root.cern/root/html530/RooObjCacheManager.html,2,['clear'],"['clearObsList', 'clearOnRedirect']"
Usability,"Session(); Reset Proof session. void DeleteQuery(); Delete query from list tree and ask user if they want to delete it also; from server. void EditQuery(); Edit currently selected query. void StartViewer(); Start TreeViewer from selected TChain. void ShowPackages(); Query the list of uploaded packages from proof and display it; into a new text window. void UpdateListOfPackages(); Update the list of packages. void ShowEnabledPackages(); Query list of enabled packages from proof and display it; into a new text window. void ShowLog(const char* queryref); Display the content of the temporary log file for queryref; into a new text window. void ShowInfo(const char* txt); Display text in status bar. void ShowStatus(); Retrieve and display Proof status. void StartupMessage(char* msg, Bool_t stat, Int_t curr, Int_t total); Handle startup message (connection progress) coming from Proof session. void MyHandleMenu(Int_t ); Handle session viewer custom popup menus. void OnCascadeMenu(); Handle feedback histograms configuration menu. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t ); Handle messages send to the TSessionViewer object. E.g. all menu entries; messages. TSessionViewer(const char* title = ""ROOT Session Viewer"", UInt_t w = 550, UInt_t h = 320). TSessionServerFrame * GetServerFrame() const; { return fServerFrame; }. TSessionFrame * GetSessionFrame() const; { return fSessionFrame; }. TSessionQueryFrame * GetQueryFrame() const; { return fQueryFrame; }. TSessionOutputFrame * GetOutputFrame() const; { return fOutputFrame; }. TSessionInputFrame * GetInputFrame() const; { return fInputFrame; }. TSessionDescription * GetActDesc() const; { return fActDesc; }. TList * GetSessions() const; { return fSessions; }. TGListTree * GetSessionHierarchy() const; { return fSessionHierarchy; }. TGListTreeItem * GetSessionItem() const; { return fSessionItem; }. const TGPicture * GetLocalPict() const; { return fLocal; }. const TGPicture * GetProofConPict() const; { return fProofCon; }. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSessionViewer.html:29156,feedback,feedback,29156,root/html602/TSessionViewer.html,https://root.cern,https://root.cern/root/html602/TSessionViewer.html,4,['feedback'],['feedback']
Usability,"Set& vars, Bool_t verbose = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooCFunction1PdfBinding_double_double_.html:3374,clear,clearValueDirty,3374,root/html534/RooCFunction1PdfBinding_double_double_.html,https://root.cern,https://root.cern/root/html534/RooCFunction1PdfBinding_double_double_.html,64,['clear'],['clearValueDirty']
Usability,"Set& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Double_tbufferFraction() const; RooFFTConvPdf::BufStratbufferStrategy() const; const RooArgSet&cacheObservables() const; virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::non",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooFFTConvPdf.html:7324,clear,clearShapeDirty,7324,root/html532/RooFFTConvPdf.html,https://root.cern,https://root.cern/root/html532/RooFFTConvPdf.html,2,['clear'],['clearShapeDirty']
Usability,"Set& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Double_tbufferFraction() const; RooFFTConvPdf::BufStratbufferStrategy() const; const RooArgSet&cacheObservables() const; virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), const RooCmdArg arg5 = RooCmdArg::none(), const RooCmdArg arg6 = RooCmdArg::none(), const RooCmdArg arg7 = Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooFFTConvPdf.html:7324,clear,clearShapeDirty,7324,root/html528/RooFFTConvPdf.html,https://root.cern,https://root.cern/root/html528/RooFFTConvPdf.html,1,['clear'],['clearShapeDirty']
Usability,"Set& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Double_tbufferFraction() const; RooFFTConvPdf::BufStratbufferStrategy() const; const RooArgSet&cacheObservables() const; virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooFFTConvPdf.html:7324,clear,clearShapeDirty,7324,root/html530/RooFFTConvPdf.html,https://root.cern,https://root.cern/root/html530/RooFFTConvPdf.html,1,['clear'],['clearShapeDirty']
Usability,SetMatrixTransform(Bool_t on = kTRUE); {fMatrixTransform = on;}. void SetMatrixReflection(Bool_t flag = kTRUE); {fMatrixReflection = flag;}. void SetStep(Double_t step); {GetCurrentNavigator()->SetStep(step);}. Bool_t IsCurrentOverlapping() const; {return GetCurrentNavigator()->IsCurrentOverlapping();}. Bool_t IsEntering() const; {return GetCurrentNavigator()->IsEntering();}. Bool_t IsExiting() const; {return GetCurrentNavigator()->IsExiting();}. Bool_t IsStepEntering() const; {return GetCurrentNavigator()->IsStepEntering();}. Bool_t IsStepExiting() const; {return GetCurrentNavigator()->IsStepExiting();}. Bool_t IsOutside() const; {return GetCurrentNavigator()->IsOutside();}. Bool_t IsOnBoundary() const; {return GetCurrentNavigator()->IsOnBoundary();}. Bool_t IsNullStep() const; {return GetCurrentNavigator()->IsNullStep();}. Bool_t IsActivityEnabled() const; {return fActivity;}. void SetOutside(Bool_t flag = kTRUE); {GetCurrentNavigator()->SetOutside(flag);}. void ClearTracks(); {fTracks->Delete(); fNtracks=0;}. UChar_t * GetBits(); {return fBits;}. Int_t GetMaxThreads() const; {return fMaxThreads-1;}. void SetMultiThread(Bool_t flag = kTRUE); {fMultiThread = flag;}. Bool_t IsMultiThread() const; {return fMultiThread;}. Bool_t IsStreamingVoxels() const; {return fStreamVoxels;}. Bool_t IsCleaning() const; {return fIsGeomCleaning;}. TObjArray * GetListOfNodes(); --- list getters. {return fNodes;}. TObjArray * GetListOfPhysicalNodes(); {return fPhysicalNodes;}. TObjArray * GetListOfOverlaps(); {return fOverlaps;}. TObjArray * GetListOfMatrices() const; {return fMatrices;}. TList * GetListOfMaterials() const; {return fMaterials;}. TList * GetListOfMedia() const; {return fMedia;}. TObjArray * GetListOfVolumes() const; {return fVolumes;}. TObjArray * GetListOfGVolumes() const; {return fGVolumes;}. TObjArray * GetListOfShapes() const; {return fShapes;}. TObjArray * GetListOfGShapes() const; {return fGShapes;}. TObjArray * GetListOfUVolumes() const; {return fUniqueVolumes;},MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoManager.html:76533,Clear,ClearTracks,76533,root/html534/TGeoManager.html,https://root.cern,https://root.cern/root/html534/TGeoManager.html,3,['Clear'],['ClearTracks']
Usability,SetMatrixTransform(Bool_t on = kTRUE); {fMatrixTransform = on;}. void SetMatrixReflection(Bool_t flag = kTRUE); {fMatrixReflection = flag;}. void SetStep(Double_t step); {GetCurrentNavigator()->SetStep(step);}. Bool_t IsCurrentOverlapping() const; {return GetCurrentNavigator()->IsCurrentOverlapping();}. Bool_t IsEntering() const; {return GetCurrentNavigator()->IsEntering();}. Bool_t IsExiting() const; {return GetCurrentNavigator()->IsExiting();}. Bool_t IsStepEntering() const; {return GetCurrentNavigator()->IsStepEntering();}. Bool_t IsStepExiting() const; {return GetCurrentNavigator()->IsStepExiting();}. Bool_t IsOutside() const; {return GetCurrentNavigator()->IsOutside();}. Bool_t IsOnBoundary() const; {return GetCurrentNavigator()->IsOnBoundary();}. Bool_t IsNullStep() const; {return GetCurrentNavigator()->IsNullStep();}. Bool_t IsActivityEnabled() const; {return fActivity;}. void SetOutside(Bool_t flag = kTRUE); {GetCurrentNavigator()->SetOutside(flag);}. void ClearTracks(); {fTracks->Delete(); fNtracks=0;}. UChar_t * GetBits(); {return fBits;}. void SetMultiThread(Bool_t flag = kTRUE); {fMultiThread = flag;}. Bool_t IsMultiThread() const; {return fMultiThread;}. void SetNavigatorsLock(Bool_t flag); {fgLockNavigators = flag;}. Int_t GetNumThreads(); {return fgNumThreads;}. Bool_t IsStreamingVoxels() const; {return fStreamVoxels;}. TObjArray * GetListOfNodes(); --- list getters. {return fNodes;}. TObjArray * GetListOfPhysicalNodes(); {return fPhysicalNodes;}. TObjArray * GetListOfOverlaps(); {return fOverlaps;}. TObjArray * GetListOfMatrices() const; {return fMatrices;}. TList * GetListOfMaterials() const; {return fMaterials;}. TList * GetListOfMedia() const; {return fMedia;}. TObjArray * GetListOfVolumes() const; {return fVolumes;}. TObjArray * GetListOfGVolumes() const; {return fGVolumes;}. TObjArray * GetListOfShapes() const; {return fShapes;}. TObjArray * GetListOfGShapes() const; {return fGShapes;}. TObjArray * GetListOfUVolumes() const; {return fUniqueVolum,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoManager.html:74560,Clear,ClearTracks,74560,root/html532/TGeoManager.html,https://root.cern,https://root.cern/root/html532/TGeoManager.html,1,['Clear'],['ClearTracks']
Usability,"SetName (const char *name) override;  Change the name of this tree. ;  ; virtual void SetNotify (TObject *obj);  Sets the address of the object to be notified when the tree is loaded. ;  ; virtual void SetObject (const char *name, const char *title);  Change the name and title of this tree. ;  ; virtual void SetParallelUnzip (bool opt=true, Float_t RelSize=-1);  Enable or disable parallel unzipping of Tree buffers. ;  ; virtual void SetPerfStats (TVirtualPerfStats *perf);  Set perf stats. ;  ; virtual void SetScanField (Int_t n=50);  ; void SetTargetMemoryRatio (Float_t ratio);  ; virtual void SetTimerInterval (Int_t msec=333);  ; virtual void SetTreeIndex (TVirtualIndex *index);  The current TreeIndex is replaced by the new index. ;  ; virtual void SetUpdate (Int_t freq=0);  ; virtual void Show (Long64_t entry=-1, Int_t lenmax=20);  Print values of all active leaves for entry. ;  ; virtual void StartViewer ();  Start the TTreeViewer on this tree. ;  ; virtual Int_t StopCacheLearningPhase ();  Stop the cache learning phase. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual Int_t UnbinnedFit (const char *funcname, const char *varexp, const char *selection="""", Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0);  Unbinned fit of one or more variable(s) from a tree. ;  ; void UseCurrentStyle () override;  Replace current attributes by current style. ;  ; Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const override;  Write this object to the current directory. ;  ; Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) override;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTChain.html:27962,learn,learning,27962,doc/v632/classTChain.html,https://root.cern,https://root.cern/doc/v632/classTChain.html,1,['learn'],['learning']
Usability,"SetNpx(Int_t npx=100)Set the number of points used to draw the function.Definition TF1.cxx:3433; TF1::SetParametersvirtual void SetParameters(const Double_t *params)Definition TF1.h:677; TF2A 2-Dim function with parameters.Definition TF2.h:29; TF2::SetContourvirtual void SetContour(Int_t nlevels=20, const Double_t *levels=nullptr)Set the number and values of contour levels.Definition TF2.cxx:892; TF2::SetNpyvirtual void SetNpy(Int_t npy=100)Set the number of points used to draw the function.Definition TF2.cxx:927; TF2::Drawvoid Draw(Option_t *option="""") overrideDraw this function with its current attributes.Definition TF2.cxx:259; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; TLatexTo draw Mathematical Formula.Definition TLatex.h:18; TLatex::DrawLatexTLatex * DrawLatex(Double_t x, Double_t y, const char *text)Make a copy of this object with the new parameters And copy object attributes.Definition TLatex.cxx:1943; TLineUse the TLine constructor to create a simple line.Definition TLine.h:22; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; TPadThe most important graphics class in the ROOT system.Definition TPad.h:28; TPad::Rangevoid Range(Double_t x1, Double_t y1, Double_t x2, Double_t y2) overrideSet world coordinate system for the pad.Definition TPad.cxx:5331; TPad::cdTVirtualPad * cd(Int_t subpadnumber=0) overrideSet Current pad.Definition TPad.cxx:693; TPad::Drawvoid Draw(Option_t *option="""") overrideDraw Pad in Current pad (re-parent pad if necessary).Definition TPad.cxx:1364; TStyle::SetPalettevoid SetPalette(Int_t ncolors=kBird, Int_t *colors=nullptr, Float_t alpha=1.)See TColor::SetPalette.Definition TStyle.cxx:1888; lineTLine * lineDefinition entrylistblock_figure1.C:235; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; TMath::PowerLongDouble_t Power(LongDouble_t x, LongDouble_t y)Returns x raised to the power y.Definit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/waves_8C.html:6708,simpl,simple,6708,doc/master/waves_8C.html,https://root.cern,https://root.cern/doc/master/waves_8C.html,1,['simpl'],['simple']
Usability,"SetSize(UInt_t size, Int_t column); {((tableDescriptor_st *)At(column))->fSize = size; }. void SetTypeSize(UInt_t size, Int_t column); {((tableDescriptor_st *)At(column))->fTypeSize = size; }. void SetDimensions(UInt_t dim, Int_t column); {((tableDescriptor_st *)At(column))->fDimensions = dim; }. void SetColumnType(TTable::EColumnType type, Int_t column); {((tableDescriptor_st *)At(column))->fType = type; }. TTableDescriptor & operator=(const TTableDescriptor& dsc). void Init(TClass* classPtr). void SetCommentsSetName(const char* name = "".comments""). TTableDescriptor(const TTable* parentTable). TTableDescriptor(TClass* classPtr). TTableDescriptor(const TTableDescriptor& dsc); {}. virtual ~TTableDescriptor(). Int_t AddAt(const void* c). void AddAt(const void* c, Int_t i). void AddAt(const tableDescriptor_st& element, const char* comment, Int_t indx). void AddAt(TDataSet* dataset, Int_t idx = 0). TString CreateLeafList() const. void LearnTable(const TTable* parentTable). void LearnTable(TClass* classPtr). Int_t ColumnByName(const Char_t* columnName = 0) const. UInt_t Offset(Int_t column) const. UInt_t ColumnSize(Int_t column) const. UInt_t TypeSize(Int_t column) const. UInt_t Dimensions(Int_t column) const. Int_t Sizeof() const. Int_t UpdateOffsets(const TTableDescriptor* newDesciptor). TTableDescriptor * MakeDescriptor(const char* structName). TDataSet * MakeCommentField(Bool_t createFlag = kTRUE). TTableDescriptor * GetDescriptorPointer() const. void SetDescriptorPointer(TTableDescriptor* list). TTableDescriptor(); {SetType(""tableDescriptor_st"");}. TTableDescriptor(const char* name); {SetType(""tableDescriptor_st"");}. TTableDescriptor(Int_t n); {SetType(""tableDescriptor_st"");}. TTableDescriptor(const char* name, Int_t n); {SetType(""tableDescriptor_st"");}. tableDescriptor_st * GetTable(Int_t i = 0) const; { return ((tableDescriptor_st *)GetArray())+i;}. tableDescriptor_st & operator[](Int_t i); { assert(i>=0 && i < GetNRows()); return *GetTable(i); }. const tableDescri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTableDescriptor.html:17591,Learn,LearnTable,17591,root/html534/TTableDescriptor.html,https://root.cern,https://root.cern/root/html534/TTableDescriptor.html,1,['Learn'],['LearnTable']
Usability,"Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development Shifter's Instructions. These are the aspects the shifter shall keep under control; The shifter summarises the events of the week during the ROOT meeting. The hand-over to the next shifter must be carefully handled.; Forum Posts; All forum posts have to be followed up. Some hours can be given to the community to discuss the questions but an answer from the ROOT team must be given within 24 hours. It is responsibility of the shifter to make sure this happens, either answering or involving the relevant expert.; Failing tests; The shifter has the responsibility to ""keep the builds green"". She needs to fix the broken tests in the incremental and nightly builds and/or involve the relevant experts to make that happen.; Open pull requests; The shifter has the responsibility to follow up PRs if the relevant expert did not either interacting with the contributor or involving the relevant expert. Again, feedback needs to be given within 24 hours after the PR submission. Simple PRs should be reviewed. For simple PRs submitted by a contributor, the shifter should merge them immediately if they are acceptable (i.e. passing continuous integration and shifter's review). Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/shifters-instructions.html:2778,feedback,feedback,2778,d/shifters-instructions.html,https://root.cern,https://root.cern/d/shifters-instructions.html,3,"['feedback', 'guid', 'simpl']","['feedback', 'guidelines', 'simple']"
Usability,"Setvoid CleanRangeSet(unsigned int icoord, double xmin, double xmax)internal function to remove all the existing ranges between xmin and xmax called when a new range is ...Definition DataRange.cxx:165; ROOT::Fit::DataRange::IsInsidebool IsInside(double x, unsigned int icoord=0) constcheck if a point is inside the range for the given coordinateDefinition DataRange.cxx:146; ROOT::Fit::DataRange::GetRangevoid GetRange(double &xmin, double &xmax, unsigned int irange=0) constget first range for the x - coordinateDefinition DataRange.h:125; ROOT::Fit::DataRange::Rangesconst RangeSet & Ranges(unsigned int icoord=0) constreturn the vector of ranges for the coordinate icoordDefinition DataRange.h:89; ROOT::Fit::DataRange::IsSetbool IsSet() constreturn true if a range has been set in any of the coordinates i.e.Definition DataRange.h:80; ROOT::Fit::DataRange::NDimunsigned int NDim() constget range dimensionDefinition DataRange.h:65; ROOT::Fit::DataRange::Clearvoid Clear(unsigned int icoord=0)clear all ranges in one coordinate (is now -inf, +inf)Definition DataRange.cxx:158; ROOT::Fit::DataRange::AddRangevoid AddRange(unsigned int icoord, double xmin, double xmax)add a range [xmin,xmax] for the new coordinate icoord Adding a range does not delete existing one,...Definition DataRange.cxx:94; ROOT::Fit::DataRange::DataRangeDataRange(unsigned int dim=1)Default constructor (infinite range)Definition DataRange.h:45; ROOT::Fit::DataRange::Sizeunsigned int Size(unsigned int icoord=0) constreturn range size for coordinate icoord (starts from zero) Size == 0 indicates no range is present [-...Definition DataRange.h:71; ROOT::Fit::DataRange::GetRangevoid GetRange(double *xmin, double *xmax, unsigned int irange=0) constget range for coordinates and fill the vectorDefinition DataRange.h:141; ROOT::Fit::DataRange::GetRangevoid GetRange(unsigned int icoord, double &xmin, double &xmax) constget the first range for given coordinate.Definition DataRange.h:115; ROOT::Fit::DataRange::operator()std",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataRange_8h_source.html:11383,clear,clear,11383,doc/master/DataRange_8h_source.html,https://root.cern,https://root.cern/doc/master/DataRange_8h_source.html,1,['clear'],['clear']
Usability,"ShadowsPainted. Default values:. shading = kShaded; shadow = kShadowsNotPainted. Light modes group, display mode = surface, 64 x 64 channels, not shaded. Light modes group, display mode = surface, 64 x 64 channels, shaded, with; shadow.; Function:; TSpectrum2Painter::SetBezier(Int_t bezier); For kModeGroupSimple display modes group and for kDisplayModeGrid,; kDisplayModeLinesX >and kDisplayModeLinesY display modes one; can smooth data using Bezier smoothing algorithm. The function does not apply; for other display modes groups and display modes. Possible values are:. kNoBezierInterpol; kBezierInterpol. Default value is:. bezier = kNoBezierInterpol. Simple modes group, display mode = linesX, 64 x 64 channels with Bezier; smoothing.; Function:; TSpectrum2Painter::SetContourWidth(Int_t width); This function applies only for kDisplayModeContours display mode.; One can change the width between horizontal slices and thus their density.; Default value: width=50. Simple modes group, display mode = contours, 64 x 64 channels. Width between; slices was set to 30.; Function:; TSpectrum2Painter::SetLightHeightWeight(Double_t weight); For kModeGroupLightHeight display modes group one can change the; weight between both shading algorithm. The function does not apply for other; display modes groups. Default value is: weight=0.5. Light - height modes group, display mode = surface, 64 x 64 channels.; The weight between both shading algorithms is set to 0.7.; Function:; TSpectrum2Painter::SetChanMarks(Int_t enable,Int_t color,Int_t width,Int_t height,Int_t style); In addition to the surface drawn using any above given algorithm one can display; channel marks. One can control the color as well as the width, height; (in pixels) and the style of the marks. The parameter enable can be set to:. kChannelMarksNotDrawn; kChannelMarksDrawn. The possible styles can be chosen from the set:. kChannelMarksStyleDot; kChannelMarksStyleCross; kChannelMarksStyleStar; kChannelMarksStyleRectangle; kChan",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TSpectrum2Painter.html:25571,Simpl,Simple,25571,root/html532/TSpectrum2Painter.html,https://root.cern,https://root.cern/root/html532/TSpectrum2Painter.html,4,['Simpl'],['Simple']
Usability,"Short_t align); Delegate to gVirtualX. void SetTextAngle(Float_t tangle); Delegate to gVirtualX. void SetTextColor(Color_t tcolor); Delegate to gVirtualX. void SetTextFont(Font_t tfont); Delegate to gVirtualX. void SetTextSize(Float_t tsize); Delegate to gVirtualX. void SetTextSizePixels(Int_t npixels); Delegate to gVirtualX. Int_t CreateDrawable(UInt_t w, UInt_t h); Create a gVirtualX Pixmap. void ClearDrawable(); Clear the current gVirtualX window. void CopyDrawable(Int_t id, Int_t px, Int_t py); Copy a gVirtualX pixmap. void DestroyDrawable(); Close the current gVirtualX pixmap. void SelectDrawable(Int_t device); Select the window in which the graphics will go. void DrawPixels(const unsigned char* pixelData, UInt_t width, UInt_t height, Int_t dstX, Int_t dstY, Bool_t enableBlending); Noop, for non-gl pad TASImage calls gVirtualX->CopyArea. void DrawLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2); Paint a simple line. void DrawLineNDC(Double_t u1, Double_t v1, Double_t u2, Double_t v2); Paint a simple line in normalized coordinates. void DrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2, TVirtualPadPainter::EBoxMode mode); Paint a simple box. void DrawFillArea(Int_t n, const Double_t* x, const Double_t* y); Paint filled area. void DrawFillArea(Int_t n, const Float_t* x, const Float_t* y); Paint filled area. void DrawPolyLine(Int_t n, const Double_t* x, const Double_t* y). void DrawPolyLine(Int_t n, const Float_t* x, const Float_t* y); Paint polyline. void DrawPolyLineNDC(Int_t n, const Double_t* u, const Double_t* v); Paint polyline in normalized coordinates. void DrawPolyMarker(Int_t n, const Double_t* x, const Double_t* y); Paint polymarker. void DrawPolyMarker(Int_t n, const Float_t* x, const Float_t* y); Paint polymarker. void DrawText(Double_t x, Double_t y, const char* text, TVirtualPadPainter::ETextMode mode); Paint text. void DrawText(Double_t x, Double_t y, const wchar_t* text, TVirtualPadPainter::ETextMode mode); That's a special version",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TPadPainter.html:5748,simpl,simple,5748,root/html534/TPadPainter.html,https://root.cern,https://root.cern/root/html534/TPadPainter.html,2,['simpl'],['simple']
Usability,"Short_tTGLSceneInfo::fStyleOptional override of scene style; TGLBoundingBoxTGLSceneInfo::fTransformedBBox; Bool_tTGLSceneInfo::fUpdateTimeoutedSet if update was interrupted.; Bool_tTGLSceneInfo::fViewCheckViewer side check if render is necessary.; TGLViewerBase*TGLSceneInfo::fViewer; Float_tTGLSceneInfo::fWFLineWOptional override of scene wire-frame line-width. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSceneInfo(TGLViewerBase* view = 0, TGLScene* scene = 0); Constructor. ~TSceneInfo(); Destructor. void ClearDrawElementVec(TGLScene::DrawElementVec_t& vec, Int_t maxSize); Clear given vec and if it grew too large compared to the size of; shape-of-interest also resize it. void ClearDrawElementPtrVec(TGLScene::DrawElementPtrVec_t& vec, Int_t maxSize); Clear given vec and if it grew too large compared to the size of; shape-of-interest also resize it. void ClearAfterRebuild(); Clear DrawElementVector fVisibleElement and optionally resize it; so that it doesn't take more space then required by all the; elements in the scene's draw-list. void ClearAfterUpdate(); Clear DrawElementPtrVectors and optionally resize them so that; they don't take more space then required by all the elements in; the scene's draw-list. void Lodify(TGLRnrCtx& ctx); Quantize LODs for gice render-context. void PreDraw(); Prepare for drawing - fill DrawElementPtrVectors from the; contents of fVisibleElements if there was some change. void PostDraw(); Clean-up after drawing, nothing to be done here. void ResetDrawStats(); Reset draw statistics. void UpdateDrawStats(const TGLPhysicalShape& shape, Short_t lod); Update draw stats, for newly drawn 'shape'. void DumpDrawStats(); Output draw stats to Info stream. TGLScene& operator=(const TGLScene::TSceneInfo& ). Bool_t CmpDrawElements(const TGLScene::DrawElement_t& de1, const TGLScene::DrawElement_t& de2). TSceneInfo(TGLViewerBase* view = 0, TGLScene* scene = 0). » Author: Matevz Tadel, Feb 2007 » Copyright (C",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLScene__TSceneInfo.html:6615,Clear,ClearAfterRebuild,6615,root/html602/TGLScene__TSceneInfo.html,https://root.cern,https://root.cern/root/html602/TGLScene__TSceneInfo.html,4,['Clear'],"['Clear', 'ClearAfterRebuild']"
Usability,"SignalHandler(TSignalHandler* sh); virtual voidTSystem::AddStdExceptionHandler(TStdExceptionHandler* eh); virtual voidAddTimer(TTimer* ti); virtual intAnnounceTcpService(int port, Bool_t reuse, int backlog, int tcpwindowsize = -1); virtual intAnnounceUdpService(int port, int backlog); virtual intAnnounceUnixService(int port, int backlog); virtual intAnnounceUnixService(const char* sockpath, int backlog); virtual voidTObject::AppendPad(Option_t* option = """"); virtual const char*TSystem::BaseName(const char* pathname); voidTSystem::Beep(Int_t freq = -1, Int_t duration = -1, Bool_t setDefault = kFALSE); virtual voidTObject::Browse(TBrowser* b); Bool_tTSystem::cd(const char* path); virtual Bool_tChangeDirectory(const char* path); voidCheckChilds(); Bool_tCheckDescriptors(); Bool_tCheckSignals(Bool_t sync); virtual intChmod(const char* file, UInt_t mode); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTSystem::CleanCompiledMacros(); virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidCloseConnection(int sock, Bool_t force = kFALSE); virtual voidCloselog(); virtual intClosePipe(FILE* pipe); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual intTSystem::CompileMacro(const char* filename, Option_t* opt = """", const char* library_name = """", const char* build_dir = """", UInt_t dirmode = 0); virtual char*TSystem::ConcatFileName(const char* dir, const char* name); intConnectService(const char* server, int port, int tcpwindowsize, const char* protocol = ""tcp""); virtual voidTNamed::Copy(TObject& named) const; virtual intCopyFile(const char* from, const char* to, Bool_t overwrite = kFALSE); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual const char*TSystem::DirName(const char* pathname); virtual voidDispatchOneEvent(Bool_t pendingOnly = kFALSE); voidDispatchSignals(ESignals sig); Bool_tDispatchTimers(Bool_t mode); virtual Int_tTObject::DistancetoP",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TUnixSystem.html:1872,Clear,Clear,1872,root/html532/TUnixSystem.html,https://root.cern,https://root.cern/root/html532/TUnixSystem.html,4,['Clear'],['Clear']
Usability,"SingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringfGetterName! buffer for name of getter method; TStringfSetterName! buffer for name of setter method; TXMLSetupfXmlSetup! buffer for xml names convertion. Class Charts. Inheritance Chart:. TObject. ←; TXMLPlayer. Function documentation; TXMLPlayer(); default constructor. ~TXMLPlayer(); destructor of TXMLPlayer object. TString GetStreamerName(TClass* cl); returns streamer function name for given class. Bool_t ProduceCode(TList* cllist, const char* filename); Produce streamers for provide class list; TList should include list of classes, for which code should be generated.; filename specify name of file (without extension), where streamers should be; created. Function produces two files: header file and source file.; For instance, if filename is ""streamers"", files ""streamers.h"" and ""streamers.cxx""; will be created. TString GetMemberTypeName(TDataMember* member); returns name of simple data type for given data member. TString GetBasicTypeName(TStreamerElement* el); return simple data types for given TStreamerElement object. TString GetBasicTypeReaderMethodName(Int_t type, const char* realname); return functions name to read simple data type from xml file. const char* ElementGetter(TClass* cl, const char* membername, int specials = 0); produce code to access member of given class.; Parameter specials has following meaning:; 0 - nothing special; 1 - cast to data type; 2 - produce pointer on given member; 3 - skip casting when produce pointer by buf.P() function. const char* ElementSetter(TClass* cl, const char* membername, char* endch); Produce code to set value to given data member.; endch should be output after value is specified. void ProduceStreamerSource(ostream& fs, TClass* cl, TList* cllist); Produce source code of streamer function for specified class. void ReadSTLarg(ostream& fs, TString& argname, int argtyp, Bool_t isargptr, TClass* argcl,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TXMLPlayer.html:10812,simpl,simple,10812,root/html602/TXMLPlayer.html,https://root.cern,https://root.cern/root/html602/TXMLPlayer.html,4,['simpl'],['simple']
Usability,"Size() const. protected:. ROOT::Math::BaseIntegratorOptionsBaseIntegratorOptions(); voidClearExtra(). Data Members; protected:. doublefAbsToleranceabsolute tolerance; ROOT::Math::IOptions*fExtraOptionsextra options; intfIntegTypeIntegrator type (value converted from enum); unsigned intfNCalls(max) funxtion calls; doublefRelTolerancerelative tolerance; unsigned intfWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions(); protected constructor to avoid user creating this class. BaseIntegratorOptions(const ROOT::Math::BaseIntegratorOptions& opt); copy constructor. BaseIntegratorOptions & operator=(const ROOT::Math::BaseIntegratorOptions& opt); assignment operators. virtual ~BaseIntegratorOptions(); protected constructor to avoid user creating this class. { ClearExtra(); }. std::string Integrator() const; name of 1D integrator. double AbsTolerance() const; non-static methods for retrivieng options ; absolute tolerance. { return fAbsTolerance; }. double RelTolerance() const; absolute tolerance. { return fRelTolerance; }. unsigned int WKSize() const; size of the workspace. { return fWKSize; }. IOptions * ExtraOptions() const; return extra options. { return fExtraOptions; }. void SetAbsTolerance(double tol); non-static methods for setting options ; set the abs tolerance. { fAbsTolerance = tol; }. void SetRelTolerance(double tol); set the relative tolerance. { fRelTolerance = tol; }. void SetWKSize(unsigned int size); set workspace size. { fWKSize = size; }. void SetExtraOptions(const ROOT::Math::IOptions& opt); set extra options (in this case pointer is cloned). void ClearExtra(). » Author: L. Moneta Fri Aug 15 2008 » Copyright (c) 2008 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__BaseIntegratorOptions.html:2867,Clear,ClearExtra,2867,root/html602/ROOT__Math__BaseIntegratorOptions.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__BaseIntegratorOptions.html,1,['Clear'],['ClearExtra']
Usability,"Size() const. protected:. ROOT::Math::BaseIntegratorOptionsBaseIntegratorOptions(); voidClearExtra(). Data Members; protected:. doublefAbsToleranceabsolute tolerance; ROOT::Math::IOptions*fExtraOptionsextra options; intfIntegTypeIntegrator type (value converted from enum); unsigned intfNCalls(max) funxtion calls; doublefRelTolerancerelative tolerance; unsigned intfWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions(); protected constructor to avoid user creating this class. BaseIntegratorOptions(const ROOT::Math::BaseIntegratorOptions& opt); copy constructor. BaseIntegratorOptions & operator=(const ROOT::Math::BaseIntegratorOptions& opt); assignment operators. virtual ~BaseIntegratorOptions(); protected constructor to avoid user creating this class. { ClearExtra(); }. std::string Integrator() const; name of 1D integrator. double AbsTolerance() const; non-static methods for retrivieng options ; absolute tolerance. { return fAbsTolerance; }. double RelTolerance() const; absolute tolerance. { return fRelTolerance; }. unsigned int WKSize() const; size of the workspace. { return fWKSize; }. IOptions * ExtraOptions() const; return extra options. { return fExtraOptions; }. void SetAbsTolerance(double tol); non-static methods for setting options ; set the abs tolerance. { fAbsTolerance = tol; }. void SetRelTolerance(double tol); set the relative tolerance. { fRelTolerance = tol; }. void SetWKSize(unsigned int size); set workspace size. { fWKSize = size; }. void SetExtraOptions(const ROOT::Math::IOptions& opt); set extra options (in this case pointer is cloned). void ClearExtra(). » Author: L. Moneta Fri Aug 15 2008 » Copyright (c) 2008 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Math__BaseIntegratorOptions.html:2867,Clear,ClearExtra,2867,root/html604/ROOT__Math__BaseIntegratorOptions.html,https://root.cern,https://root.cern/root/html604/ROOT__Math__BaseIntegratorOptions.html,1,['Clear'],['ClearExtra']
Usability,"Slave (TSocket *socket=0);  ; void HandleGetTreeHeader (TMessage *mess) override;  Handle tree header request. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TProofPlayer;  TProofPlayer (TProof *proof=0);  Default ctor. ;  ;  ~TProofPlayer () override;  Destructor. ;  ; void AddEventsProcessed (Long64_t ev) override;  ; void AddInput (TObject *inp) override;  Add object to input list. ;  ; void AddOutput (TList *out) override;  Incorporate output list (may not be used in this class). ;  ; Int_t AddOutputObject (TObject *obj) override;  Incorporate output object (may not be used in this class). ;  ; void AddQueryResult (TQueryResult *q) override;  Add query result to the list, making sure that there are no duplicates. ;  ; void ClearInput () override;  Clear input list. ;  ; TDrawFeedback * CreateDrawFeedback (TProof *p) override;  Draw feedback creation proxy. ;  ; void DeleteDrawFeedback (TDrawFeedback *f) override;  Delete draw feedback object. ;  ; Long64_t DrawSelect (TDSet *set, const char *varexp, const char *selection, Option_t *option="""", Long64_t nentries=-1, Long64_t firstentry=0) override;  Draw (may not be used in this class). ;  ; void Feedback (TList *objs) override;  Set feedback list (may not be used in this class). ;  ; void FeedBackCanvas (const char *name, Bool_t create);  Create/destroy a named canvas for feedback. ;  ; Long64_t Finalize (Bool_t force=kFALSE, Bool_t sync=kFALSE) override;  Finalize query (may not be used in this class). ;  ; Long64_t Finalize (TQueryResult *qr) override;  Finalize query (may not be used in this class). ;  ; Long64_t GetCacheSize () override;  Return the size in bytes of the cache. ;  ; TQueryResult * GetCurrentQuery () const override;  ; Int_t GetDrawArgs (const char *var, const char *sel, Option_t *opt, TString &selector, TString &objname) o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayerSlave.html:1455,feedback,feedback,1455,doc/master/classTProofPlayerSlave.html,https://root.cern,https://root.cern/doc/master/classTProofPlayerSlave.html,1,['feedback'],['feedback']
Usability,"SlaveBegin(TTree*); virtual voidTProofDraw::SlaveTerminate(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTerminate(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual intTProofDraw::Version() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidBegin1D(TTree* t); virtual voidBegin2D(TTree* t); virtual voidBegin3D(TTree* t); virtual voidTProofDraw::ClearFormula(); virtual Bool_tTProofDraw::CompileVariables(); virtual voidDefVar(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidDoFill(Long64_t entry, Double_t w, const Double_t* v); voidTProofDraw::FillWeight(); voidTObject::MakeZombie(); virtual Bool_tTProofDraw::ProcessSingle(Long64_t, Int_t); voidTProofDraw::SetCanvas(const char* objname); voidTProofDraw::SetDrawAtt(TObject* o); voidTProofDraw::SetError(const char* sub, const char* mesg). private:. voidDefVar1D(); voidDefVar2D(); voidDefVar3D(). Data Members; public:. enum TProofDraw::[unnamed] { kWarn; };; enum TSelector::EAbort { kContinue; kAbortProcess; kAbortFile; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TSelector::EAbortTSelector::fAbortAbort status; Int_tTProofDraw::fDimensionDimension of the current expression; TH1*fHistogram; TStringTProofDraw::fInitialExp; TList*TSelector::fInputList of objects available during processing; TTr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofDrawHist.html:5875,Clear,ClearFormula,5875,root/html534/TProofDrawHist.html,https://root.cern,https://root.cern/root/html534/TProofDrawHist.html,1,['Clear'],['ClearFormula']
Usability,"Sparse * GetSummedErrorMatrixYY(void). TMatrixDSparse * GetSummedErrorMatrixXX(void). Double_t GetChi2Sys(void); calculate total chi**2 including systematic errors. void GetRhoItotal(TH1* rhoi, const Int_t* binMap = 0, TH2* invEmat = 0); get global correlation coefficients including systematic,statistical,background,tau errors; rhoi: output histogram; binMap: for each global bin, indicate in which histogram bin; to store its content; invEmat: output histogram for inverse of error matrix; (pointer may zero if inverse is not requested). TUnfoldSys(const TUnfoldSys& ). TMatrixDSparse * PrepareUncorrEmat(const TMatrixDSparse* m1, const TMatrixDSparse* m2). TMatrixDSparse * PrepareCorrEmat(const TMatrixDSparse* m1, const TMatrixDSparse* m2, const TMatrixDSparse* dsys). void ScaleColumnsByVector(TMatrixDSparse* m, const TMatrixTBase<Double_t>* v) const. void VectorMapToHist(TH1* hist_delta, const TMatrixDSparse* delta, const Int_t* binMap). void GetEmatrixFromVyy(const TMatrixDSparse* vyy, TH2* ematrix, const Int_t* binMap, Bool_t clearEmat). TUnfoldSys(const TH2* hist_A, TUnfold::EHistMap histmap, TUnfold::ERegMode regmode = kRegModeSize, TUnfold::EConstraint constraint = kEConstraintArea). void AddSysError(const TH2* sysError, const char* name, TUnfold::EHistMap histmap, TUnfoldSys::ESysErrMode mode). void SubtractBackground(const TH1* hist_bgr, const char* name, Double_t scale = 1., Double_t scale_error = 0.). Bool_t GetDeltaSysBackgroundScale(TH1* delta, const char* source, const Int_t* binMap = 0). void GetEmatrixSysUncorr(TH2* ematrix, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE). void GetEmatrixSysSource(TH2* ematrix, const char* source, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE). void GetEmatrixSysBackgroundScale(TH2* ematrix, const char* source, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE). void GetEmatrixInput(TH2* ematrix, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE). » Last changed: Tue Jun 2 14:10:12 2015 » Last generated: 2015-06-02",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TUnfoldSys.html:20687,clear,clearEmat,20687,root/html602/TUnfoldSys.html,https://root.cern,https://root.cern/root/html602/TUnfoldSys.html,2,['clear'],['clearEmat']
Usability,"Sparse * GetSummedErrorMatrixYY(void). TMatrixDSparse * GetSummedErrorMatrixXX(void). Double_t GetChi2Sys(void); calculate total chi**2 including systematic errors. void GetRhoItotal(TH1* rhoi, const Int_t* binMap = 0, TH2* invEmat = 0); get global correlation coefficients including systematic,statistical,background,tau errors; rhoi: output histogram; binMap: for each global bin, indicate in which histogram bin; to store its content; invEmat: output histogram for inverse of error matrix; (pointer may zero if inverse is not requested). TUnfoldSys(const TUnfoldSys& ). TMatrixDSparse * PrepareUncorrEmat(const TMatrixDSparse* m1, const TMatrixDSparse* m2). TMatrixDSparse * PrepareCorrEmat(const TMatrixDSparse* m1, const TMatrixDSparse* m2, const TMatrixDSparse* dsys). void ScaleColumnsByVector(TMatrixDSparse* m, const TMatrixTBase<Double_t>* v) const. void VectorMapToHist(TH1* hist_delta, const TMatrixDSparse* delta, const Int_t* binMap). void GetEmatrixFromVyy(const TMatrixDSparse* vyy, TH2* ematrix, const Int_t* binMap, Bool_t clearEmat). TUnfoldSys(const TH2* hist_A, TUnfold::EHistMap histmap, TUnfold::ERegMode regmode = kRegModeSize, TUnfold::EConstraint constraint = kEConstraintArea). void AddSysError(const TH2* sysError, const char* name, TUnfold::EHistMap histmap, TUnfoldSys::ESysErrMode mode). void SubtractBackground(const TH1* hist_bgr, const char* name, Double_t scale = 1., Double_t scale_error = 0.). Bool_t GetDeltaSysBackgroundScale(TH1* delta, const char* source, const Int_t* binMap = 0). void GetEmatrixSysUncorr(TH2* ematrix, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE). void GetEmatrixSysSource(TH2* ematrix, const char* source, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE). void GetEmatrixSysBackgroundScale(TH2* ematrix, const char* source, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE). void GetEmatrixInput(TH2* ematrix, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE). » Last changed: Tue Jun 2 16:35:15 2015 » Last generated: 2015-06-02",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TUnfoldSys.html:20687,clear,clearEmat,20687,root/html604/TUnfoldSys.html,https://root.cern,https://root.cern/root/html604/TUnfoldSys.html,2,['clear'],['clearEmat']
Usability,"Sparse * GetSummedErrorMatrixYY(void). TMatrixDSparse * GetSummedErrorMatrixXX(void). Double_t GetChi2Sys(void); calculate total chi**2 including systematic errors. void GetRhoItotal(TH1* rhoi, const Int_t* binMap = 0, TH2* invEmat = 0); get global correlation coefficients including systematic,statistical,background,tau errors; rhoi: output histogram; binMap: for each global bin, indicate in which histogram bin; to store its content; invEmat: output histogram for inverse of error matrix; (pointer may zero if inverse is not requested). TUnfoldSys(const TUnfoldSys& ). TMatrixDSparse * PrepareUncorrEmat(const TMatrixDSparse* m1, const TMatrixDSparse* m2). TMatrixDSparse * PrepareCorrEmat(const TMatrixDSparse* m1, const TMatrixDSparse* m2, const TMatrixDSparse* dsys). void ScaleColumnsByVector(TMatrixDSparse* m, const TMatrixTBase<Double_t>* v) const. void VectorMapToHist(TH1* hist_delta, const TMatrixDSparse* delta, const Int_t* binMap). void GetEmatrixFromVyy(const TMatrixDSparse* vyy, TH2* ematrix, const Int_t* binMap, Bool_t clearEmat). TUnfoldSys(const TH2* hist_A, TUnfold::EHistMap histmap, TUnfold::ERegMode regmode = kRegModeSize, TUnfold::EConstraint constraint = kEConstraintArea). void AddSysError(const TH2* sysError, const char* name, TUnfold::EHistMap histmap, TUnfoldSys::ESysErrMode mode). void SubtractBackground(const TH1* hist_bgr, const char* name, Double_t scale = 1.0, Double_t scale_error = 0.0). Bool_t GetDeltaSysBackgroundScale(TH1* delta, const char* source, const Int_t* binMap = 0). void GetEmatrixSysUncorr(TH2* ematrix, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE). void GetEmatrixSysSource(TH2* ematrix, const char* source, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE). void GetEmatrixSysBackgroundScale(TH2* ematrix, const char* source, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE). void GetEmatrixInput(TH2* ematrix, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE). » Last changed: Sun Mar 15 16:40:30 2015 » Last generated: 2015-03",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TUnfoldSys.html:19911,clear,clearEmat,19911,root/html534/TUnfoldSys.html,https://root.cern,https://root.cern/root/html534/TUnfoldSys.html,2,['clear'],['clearEmat']
Usability,"Start the TTreeViewer on this tree.; 9456///; 9457/// - ww is the width of the canvas in pixels; 9458/// - wh is the height of the canvas in pixels; 9459 ; 9460void TTree::StartViewer(); 9461{; 9462 GetPlayer();; 9463 if (fPlayer) {; 9464 fPlayer->StartViewer(600, 400);; 9465 }; 9466}; 9467 ; 9468////////////////////////////////////////////////////////////////////////////////; 9469/// Stop the cache learning phase; 9470///; 9471/// Returns:; 9472/// - 0 learning phase stopped or not active; 9473/// - -1 on error; 9474 ; 9475Int_t TTree::StopCacheLearningPhase(); 9476{; 9477 if (!GetTree()) {; 9478 if (LoadTree(0)<0) {; 9479 Error(""StopCacheLearningPhase"",""Could not load a tree"");; 9480 return -1;; 9481 }; 9482 }; 9483 if (GetTree()) {; 9484 if (GetTree() != this) {; 9485 return GetTree()->StopCacheLearningPhase();; 9486 }; 9487 } else {; 9488 Error(""StopCacheLearningPhase"", ""No tree is available. Could not stop cache learning phase"");; 9489 return -1;; 9490 }; 9491 ; 9492 TFile *f = GetCurrentFile();; 9493 if (!f) {; 9494 Error(""StopCacheLearningPhase"", ""No file is available. Could not stop cache learning phase"");; 9495 return -1;; 9496 }; 9497 TTreeCache *tc = GetReadCache(f,true);; 9498 if (!tc) {; 9499 Error(""StopCacheLearningPhase"", ""No cache is available. Could not stop learning phase"");; 9500 return -1;; 9501 }; 9502 tc->StopLearningPhase();; 9503 return 0;; 9504}; 9505 ; 9506////////////////////////////////////////////////////////////////////////////////; 9507/// Set the fTree member for all branches and sub branches.; 9508 ; 9509static void TBranch__SetTree(TTree *tree, TObjArray &branches); 9510{; 9511 Int_t nb = branches.GetEntriesFast();; 9512 for (Int_t i = 0; i < nb; ++i) {; 9513 TBranch* br = (TBranch*) branches.UncheckedAt(i);; 9514 br->SetTree(tree);; 9515 ; 9516 Int_t writeBasket = br->GetWriteBasket();; 9517 for (Int_t j = writeBasket; j >= 0; --j) {; 9518 TBasket *bk = (TBasket*)br->GetListOfBaskets()->UncheckedAt(j);; 9519 if (bk) {; 9520 tree->In",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:365027,learn,learning,365027,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['learn'],['learning']
Usability,"StatXvoid SetStatX(Float_t x=0)Definition TStyle.h:397; TStyle::SetLabelFontvoid SetLabelFont(Style_t font=62, Option_t *axis=""X"")Set font number used to draw axis labels.Definition TStyle.cxx:1413; TStyle::SetLabelOffsetvoid SetLabelOffset(Float_t offset=0.005, Option_t *axis=""X"")Set offset between axis and axis labels.Definition TStyle.cxx:1429; TStyle::SetStatWvoid SetStatW(Float_t w=0.19)Definition TStyle.h:399; Note that when an object is created, its attributes are taken from the current style. For example, you may have created an histogram in a previous session, saved it in a file. Meanwhile, if you have changed the style, the histogram will be drawn with the old attributes. You can force the current style attributes to be set when you read an object from a file by calling:; gROOT->ForceStyle();; before reading the objects from the file.; Let's assume you have a canvas or pad with your histogram or any other object, you can force these objects to get the attributes of the current style via:; canvas->UseCurrentStyle();; The description of the style functions should be clear from the name of the TStyle Setters or Getters. Some functions have an extended description, in particular:. TStyle:SetLabelFont.; TStyle:SetLineStyleString, to set the format of dashed lines.; TStyle:SetOptStat.; TStyle:SetPalette to change the colors palette.; TStyle:SetTitleOffset. . Definition at line 29 of file TStyle.h. Public Types; enum  EPaperSize { kA4; , kUSLetter; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStyle.html:3621,clear,clear,3621,doc/master/classTStyle.html,https://root.cern,https://root.cern/doc/master/classTStyle.html,1,['clear'],['clear']
Usability,"State(TGLClipSet::kClipPlane, planeEq);; As with cameras, any clip can be configured at any time, but you must set the clip current to see the effect.; 9.13.2.6 Manipulators; Manipulators are GUI ‘widgets’ or controls attached to a 3D object in the viewer, allowing a direct manipulation of the object’s geometry. There are three manipulators for the three basic geometries transformations. In each case, the manipulator consists of three components, one for each local axis of the object, shown in standard colors: red (X), green (Y) and blue (Z). GL Viewer object manipulators. Activate the manipulator by moving the mouse over one of these components (which turns yellow to indicate active state). Click with left mouse and drag this active component to perform the manipulation. Toggle between the manipulator types using the ‘x’, ‘c’, ‘v’ keys while the mouse cursor is above the manipulator. Note: Manipulators cannot be controlled via the API at present.; 9.13.2.7 Guides; Guides are visual aids drawn into the viewer world. Controls for these are under the “Guides” tab:; Viewer Controls Pane Guides Tab; Axes show the world (global) frame coordinatedirections: X (red), Y (green) and Z (blue). The negative portion of the axis line is shown in dark color, the positive in bright. The axis name and minimum / maximum values are labeled in the same color. There are three options for axes drawing - selected by radio buttons:. None - not drawn (default).; Edge - draw axes on the (minimum) edge of the scene extents box.; Origin - drawn axes through the origin. For edge axes, the zero value for each axis is marked on the axis line with a colored sphere. For origin axes, a single white sphere is shown at the origin.; Edge axes are depth clipped - i.e. are obscured by 3D objects in front of them. Origin axes (which generally pass through the middle of the 3D scene) are not depth clipped - so always visible.; A single orange sphere of fixed view port (window) size can be shown at any arbi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:396642,Guid,Guides,396642,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['Guid'],['Guides']
Usability,"StreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); voidSubtractBackground(const TH1* hist_bgr, const char* name, Double_t scale = 1.0, Double_t scale_error = 0.0); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. TUnfoldSys(); voidTUnfold::AddMSparse(TMatrixDSparse* dest, Double_t f, const TMatrixDSparse* src) const; Bool_tTUnfold::AddRegularisationCondition(Int_t nEle, const Int_t* indices, const Double_t* rowData); Bool_tTUnfold::AddRegularisationCondition(Int_t i0, Double_t f0, Int_t i1 = -1, Double_t f1 = 0., Int_t i2 = -1, Double_t f2 = 0.); voidTUnfold::ClearHistogram(TH1* h, Double_t x = 0.) const; virtual voidClearResults(); TMatrixDSparse*TUnfold::CreateSparseMatrix(Int_t nrow, Int_t ncol, Int_t nele, Int_t* row, Int_t* col, Double_t* data) const; static voidTUnfold::DeleteMatrix(TMatrixD** m); static voidTUnfold::DeleteMatrix(TMatrixDSparse** m); voidDoBackgroundSubtraction(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual Double_tTUnfold::DoUnfold(); voidTUnfold::ErrorMatrixToHist(TH2* ematrix, const TMatrixDSparse* emat, const Int_t* binMap, Bool_t doClear) const; const TMatrixDSparse*TUnfold::GetAx() const; Int_tTUnfold::GetBinFromRow(int ix) const; const TMatrixDSparse*TUnfold::GetDXDAM(int i) const; const TMatrixDSparse*TUnfold::GetDXDAZ(int i) const; const TMatrixDSparse*TUnfold::GetDXDtauSquared() const; const TMatrixDSparse*TUnfold::GetDXDY() const; const TMatrixDSparse*TUnfold::GetE() const; const TMatrixDSparse*TUnfold::GetEinv() const; voidGetEmatrixFromVyy(const TMatrixDS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TUnfoldSys.html:11974,Clear,ClearHistogram,11974,root/html534/TUnfoldSys.html,https://root.cern,https://root.cern/root/html534/TUnfoldSys.html,1,['Clear'],['ClearHistogram']
Usability,"Streaming mechanism ensures that only one copy of each object in the tree/graph is written to the output buffer to avoid circular dependencies.; However if the object event is split into several files or into several branches of one or more Trees, normal C++ pointers cannot be used because each I/O operation will write the referenced objects.; When a TRef is used to point to a TObject *robj, for example in a class with TRef fRef;; TRefPersistent Reference link to a TObject A TRef is a lightweight object pointing to any TObject.Definition TRef.h:32; one can do: fRef = robj; //to set the pointer; This TRef and robj can be written with two different I/O calls in the same or different files, in the same or different branches of a Tree.; If the TRef is read and the referenced object has not yet been read, the TRef will return a null pointer. As soon as the referenced object will be read, the TRef will point to it. If the referenced object is contained in a TTree it can be auto-loaded using the TBranchRef mechanism, which is set up by simply calling TTree::BranchRef().; TRef also supports the complex situation where a TFile is updated multiple times on the same machine or a different machine. How does it work; A TRef is itself a TObject with an additional transient pointer fPID. When the statement fRef = robj is executed, the following actions happen:. The pointer fPID is set to the current TProcessID.; The current ObjectNumber (see below) is incremented by one.; robj::fUniqueID is set to ObjectNumber.; In the fPID object, the element fObjects[ObjectNumber] is set to robj; ref::fUniqueID is also set to ObjectNumber. After having set fRef, one can immediately return the value of robj using fRef.GetObject(). This function returns directly fObjects[fUniqueID] from the fPID object.; When the TRef is written, the process id number pidf of fPID is written in addition to the TObject part of TRef (fBits,fUniqueID).; When the TRef is read, its pointer fPID is set to the value store",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRef.html:1785,simpl,simply,1785,doc/master/classTRef.html,https://root.cern,https://root.cern/doc/master/classTRef.html,1,['simpl'],['simply']
Usability,"String &jobName, const TString &methodTitle, DataSetInfo &theData, const TString &theOption);  Constructor. ;  ;  MethodDL (DataSetInfo &theData, const TString &theWeightFile);  Constructor. ;  ; virtual ~MethodDL ();  Virtual Destructor. ;  ; void AddWeightsXMLTo (void *parent) const;  ; const Ranking * CreateRanking ();  ; TString GetArchitectureString () const;  ; size_t GetBatchDepth () const;  ; size_t GetBatchHeight () const;  ; TString GetBatchLayoutString () const;  ; size_t GetBatchSize () const;  ; size_t GetBatchWidth () const;  ; const DeepNetImpl_t & GetDeepNet () const;  ; TString GetErrorStrategyString () const;  ; size_t GetInputDepth () const;  ; size_t GetInputDim () const;  ; size_t GetInputHeight () const;  ; TString GetInputLayoutString () const;  ; std::vector< size_t > GetInputShape () const;  ; size_t GetInputWidth () const;  ; KeyValueVector_t & GetKeyValueSettings ();  ; const KeyValueVector_t & GetKeyValueSettings () const;  ; TString GetLayoutString () const;  ; DNN::ELossFunction GetLossFunction () const;  ; virtual const std::vector< Float_t > & GetMulticlassValues ();  ; Double_t GetMvaValue (Double_t *err=nullptr, Double_t *errUpper=nullptr);  ; DNN::EOutputFunction GetOutputFunction () const;  ; virtual const std::vector< Float_t > & GetRegressionValues ();  ; std::vector< TTrainingSettings > & GetTrainingSettings ();  ; const std::vector< TTrainingSettings > & GetTrainingSettings () const;  ; TString GetTrainingStrategyString () const;  ; DNN::EInitialization GetWeightInitialization () const;  ; TString GetWeightInitializationString () const;  ; Bool_t HasAnalysisType (Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets);  Check the type of analysis the deep learning network can do. ;  ; virtual TClass * IsA () const;  ; KeyValueVector_t ParseKeyValueString (TString parseString, TString blockDelim, TString tokenDelim);  Function for parsing the training settings, provided as a string in a key-value form. ;  ; void R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodDL.html:2182,learn,learning,2182,doc/master/classTMVA_1_1MethodDL.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodDL.html,1,['learn'],['learning']
Usability,"String attributes; Bool_t_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_t_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~RooAbsArg(); Destructor. void setDirtyInhibit(Bool_t flag); Control global dirty inhibit mode. When set to true no value or shape dirty; flags are propagated and cache is always considered to be dirty. void setACleanADirty(Bool_t flag); This global switch changes the cache mode of all objects marked as 'always clean'; to 'always dirty'. For internal use in RooRealIntegral. void verboseDirty(Bool_t flag); Activate verbose messaging related to dirty flag propagation. Bool_t isCloneOf(const RooAbsArg& other) const; Check if this object was created as a clone of 'other'. void setAttribute(const Text_t* name, Bool_t value = kTRUE); Set (default) or clear a named boolean attribute of this object. Bool_t getAttribute(const Text_t* name) const; Check if a named attribute is set. By default, all attributes are unset. void setStringAttribute(const Text_t* key, const Text_t* value); Associate string 'value' to this object under key 'key'. const Text_t* getStringAttribute(const Text_t* key) const; Get string attribute mapped under key 'key'. Returns null pointer; if no attribute exists under that key. void setTransientAttribute(const Text_t* name, Bool_t value = kTRUE); Set (default) or clear a named boolean attribute of this object. Bool_t getTransientAttribute(const Text_t* name) const; Check if a named attribute is set. By default, all attributes; are unset. void addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); Register another RooAbsArg as a server to us, ie, declare that; we depend on it. In addition to the basic client-server relationship,; we can declare dependence on the server's",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsArg.html:18091,clear,clear,18091,root/html526/RooAbsArg.html,https://root.cern,https://root.cern/root/html526/RooAbsArg.html,3,['clear'],['clear']
Usability,"String& colName, Int_t firstRow, Int_t numberRows). BuildSorter backs TTableSorter ctor. - colName - may be followed by the square brackets with integer number inside,; if that columm is an array (for example ""phys[3]"").; NO expression inside of [], only a single integer number allowed !; - firstRow - the first table row to sort from (=0 by default); - numberRows - the number of the table rows to sort (=0 by default); = 0 means sort all rows from the ""firstRow"" by the end of table. TTableSorter(const Float_t* simpleArray, Int_t arraySize, Int_t firstRow = 0, Int_t numberRows = 0). TTableSorter ctor sort the input ""simpleArray"". - arraySize - the size of the full array; - firstRow - the first table row to sort from (=0 by default); - numberRows - the number of the table rows to sort (=0 by default); = 0 means sort all rows from the ""firstRow"" by the end of table. TTableSorter(const Double_t* simpleArray, Int_t arraySize, Int_t firstRow = 0, Int_t numberRows = 0). TTableSorter ctor sort the input ""simpleArray"". - arraySize - the size of the full array; - firstRow - the first table row to sort from (=0 by default); - numberRows - the number of the table rows to sort (=0 by default); = 0 means sort all rows from the ""firstRow"" by the end of table. TTableSorter(const Long_t* simpleArray, Int_t arraySize, Int_t firstRow = 0, Int_t numberRows = 0). TTableSorter ctor sort the input ""simpleArray"". - arraySize - the sie of the full array; - firstRow - the first table row to sort from (=0 by default); - numberRows - the number of the table rows to sort (=0 by default); = 0 means sort all rows from the ""firstRow"" by the end of table. void SetSimpleArray(Int_t arraySize, Int_t firstRow, Int_t numberRows); Set some common parameteres for the ""simple"" arrays. ~TTableSorter(); to be documented. Int_t BSearch(valuetype value). Int_t SelectSearch(valuetype value). Int_t BSearch(const void* value) const; to be documented. Int_t GetIndex(UInt_t sortedIndex) const; returns the original ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTableSorter.html:16787,simpl,simpleArray,16787,root/html528/TTableSorter.html,https://root.cern,https://root.cern/root/html528/TTableSorter.html,10,['simpl'],['simpleArray']
Usability,"String& fallback_tag = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElementList*TEveElementList::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* send",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TEveSelection.html:2479,Clear,Clear,2479,root/html532/TEveSelection.html,https://root.cern,https://root.cern/root/html532/TEveSelection.html,8,['Clear'],['Clear']
Usability,"StringLong(); TStringLong(Ssiz_t ic); TStringLong(const TString& s); TStringLong(const char* s); TStringLong(char c); TStringLong(const TSubString& sub); TStringLong(const TStringLong&); TStringLong(const char* s, Ssiz_t n); TStringLong(char c, Ssiz_t s); virtual~TStringLong(); TString&TString::Append(const char* cs); TString&TString::Append(const TString& s); TString&TString::Append(const char* cs, Ssiz_t n); TString&TString::Append(const TString& s, Ssiz_t n); TString&TString::Append(char c, Ssiz_t rep = 1); Double_tTString::Atof() const; Int_tTString::Atoi() const; Long64_tTString::Atoll() const; static TStringTString::BaseConvert(const TString& s_in, Int_t base_in, Int_t base_out); Bool_tTString::BeginsWith(const char* s, TString::ECaseCompare cmp = kExact) const; Bool_tTString::BeginsWith(const TString& pat, TString::ECaseCompare cmp = kExact) const; Ssiz_tTString::Capacity() const; Ssiz_tTString::Capacity(Ssiz_t n); TString&TString::Chop(); static TClass*Class(); voidTString::Clear(); intTString::CompareTo(const char* cs, TString::ECaseCompare cmp = kExact) const; intTString::CompareTo(const TString& st, TString::ECaseCompare cmp = kExact) const; Bool_tTString::Contains(const TRegexp& pat) const; Bool_tTString::Contains(TPRegexp& pat) const; Bool_tTString::Contains(const char* s, TString::ECaseCompare cmp = kExact) const; Bool_tTString::Contains(const TString& pat, TString::ECaseCompare cmp = kExact) const; TStringTString::Copy() const; Int_tTString::CountChar(Int_t c) const; const char*TString::Data() const; Bool_tTString::EndsWith(const char* pat, TString::ECaseCompare cmp = kExact) const; Bool_tTString::EqualTo(const char* cs, TString::ECaseCompare cmp = kExact) const; Bool_tTString::EqualTo(const TString& st, TString::ECaseCompare cmp = kExact) const; virtual voidFillBuffer(char*& buffer) const; Ssiz_tTString::First(char c) const; Ssiz_tTString::First(const char* cs) const; voidTString::Form(const char* fmt); static TStringTString::Format(const char* fmt);",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TStringLong.html:1621,Clear,Clear,1621,root/html534/TStringLong.html,https://root.cern,https://root.cern/root/html534/TStringLong.html,1,['Clear'],['Clear']
Usability,"Style_t lstyle); Set the line style. void SetLineWidth(Width_t lwidth); Set the line width. TGeoNode * GetNode(const char* name) const; get the pointer to a daughter node. Int_t GetByteCount() const; get the total size in bytes for this volume. void FindOverlaps() const; loop all nodes marked as overlaps and find overlaping brothers. void RemoveNode(TGeoNode* node); Remove an existing daughter. TGeoNode * ReplaceNode(TGeoNode* nodeorig, TGeoShape* newshape = 0, TGeoMatrix* newpos = 0, TGeoMedium* newmed = 0); Replace an existing daughter with a new volume having the same name but; possibly a new shape, position or medium. Not allowed for positioned assemblies.; For division cells, the new shape/matrix are ignored. void SelectVolume(Bool_t clear = kFALSE); Select this volume as matching an arbitrary criteria. The volume is added to; a static list and the flag TGeoVolume::kVolumeSelected is set. All flags need; to be reset at the end by calling the method with CLEAR=true. This will also clear; the list. void SetVisibility(Bool_t vis = kTRUE); set visibility of this volume. void SetVisContainers(Bool_t flag = kTRUE); Set visibility for containers. void SetVisLeaves(Bool_t flag = kTRUE); Set visibility for leaves. void SetVisOnly(Bool_t flag = kTRUE); Set visibility for leaves. Bool_t Valid() const; Check if the shape of this volume is valid. Bool_t FindMatrixOfDaughterVolume(TGeoVolume* vol) const; Find a daughter node having VOL as volume and fill TGeoManager::fHMatrix; with its global matrix. void VisibleDaughters(Bool_t vis = kTRUE); set visibility for daughters. void Voxelize(Option_t* option); build the voxels for this volume. Double_t Weight(Double_t precision = 0.01, Option_t* option = ""va""); Estimate the weight of a volume (in kg) with SIGMA(M)/M better than PRECISION.; Option can contain : v - verbose, a - analytical (default). Double_t WeightA() const; Analytical computation of the weight. Int_t GetNdaughters() const; {if (!fNodes) return 0; return (fNodes->G",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoVolume.html:30906,clear,clear,30906,root/html528/TGeoVolume.html,https://root.cern,https://root.cern/root/html528/TGeoVolume.html,10,['clear'],['clear']
Usability,"Support usage of minimized versions of .js and .css files. Minimized scripts used by default on web servers.; Implement JSROOT.extend instead of jQuery.extend, reduce usage of jquery.js in core JSROOT classes; Implement main graphics without jquery at all, such mode used in nobrowser mode.; Provide optional latex drawing with MathJax SVG. TMathText always drawn with MathJax, other classes require mathjax option in URL; Improve drawing of different text classes, correctly handle their alignment and scaling, special handling for IE. TTree Libraries; TTree Behavior change.; Merging.; Added fast cloning support to TTree::MergeTrees and TTree::Merge(TCollection,Option_t).; TTreeCache; The TTreeCache is now enabled by default. The default size of the TTreeCache is the estimated size of a cluster size for the TTree. The TTreeCache prefilling is also enabled by default; when in learning phase rather than reading each requested branch individually, the TTreeCache will read all the branches thus trading off the latencies inherent to multiple small reads for the potential of requesting more data than needed by read from the disk or server the baskets for too many branches.; The default behavior can be changed by either updating one of the rootrc files or by setting environment variables. The rootrc files, both the global and the local ones, now support the following the resource variable TTreeCache.Size which set the default size factor for auto sizing TTreeCache for TTrees. The estimated cluster size for the TTree and this factor is used to give the cache size. If option is set to zero auto cache creation is disabled and the default cache size is the historical one (equivalent to factor 1.0). If set to non zero auto cache creation is enabled and both auto created and default sized caches will use the configured factor: 0.0 no automatic cache and greater than 0.0 to enable cache. This value can be overridden by the environment variable ROOT_TTREECACHE_SIZE.; The resource varia",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v604/release-notes.html:12002,learn,learning,12002,doc/v604/release-notes.html,https://root.cern,https://root.cern/doc/v604/release-notes.html,1,['learn'],['learning']
Usability,"SysError(const char* method, const char* msgfmt) const; voidRooAbsCollection::takeOwnership(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidRooArgSet::writeToFile(const char* fileName) const; virtual voidRooArgSet::writeToStream(ostream& os, Bool_t compact, const char* section = 0) const. protected:. Bool_tRooAbsCollection::addServerClonesToList(const RooAbsArg& var); virtual voidRooAbsProxy::changeNormSet(const RooArgSet* newNormSet); virtual Bool_tchangePointer(const RooAbsCollection& newServerSet, Bool_t nameChange = kFALSE, Bool_t factoryInitMode = kFALSE); Bool_tRooArgSet::checkForDup(const RooAbsArg& arg, Bool_t silent) const; voidRooAbsCollection::clearStructureTags(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidRooAbsCollection::makeStructureTag(); voidRooAbsCollection::makeTypedStructureTag(); voidTObject::MakeZombie(); voidRooAbsCollection::safeDeleteList(); TNamed*RooAbsCollection::structureTag(); TNamed*RooAbsCollection::typedStructureTag(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };; enum RooPrintable::ContentsOption { kName; kClassName; kValue; kArgs; kExtras; kAddress; kTitle; kCollectionHeader; };; enum RooPrintable::StyleOption { kInline; kSingleLine; kStandard; kVerbose; kTreeStructure; };. protected:. Bool_tRooAbsCollection::_allRRVAll contents are RRV; Bool_t_defShapeServer; Bool_t_defValueServer; TIterator*_iter! do not persist; R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooSetProxy.html:11690,clear,clearStructureTags,11690,root/html534/RooSetProxy.html,https://root.cern,https://root.cern/root/html534/RooSetProxy.html,2,['clear'],['clearStructureTags']
Usability,"SysError(const char* method, const char* msgfmt) const; voidRooAbsCollection::takeOwnership(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidRooArgSet::writeToFile(const char* fileName) const; virtual voidRooArgSet::writeToStream(ostream& os, Bool_t compact, const char* section = 0) const. protected:. Bool_tRooAbsCollection::addServerClonesToList(const RooAbsArg& var); virtual voidRooAbsProxy::changeNormSet(const RooArgSet* newNormSet); virtual Bool_tchangePointer(const RooAbsCollection& newServerSet, Bool_t nameChange = kFALSE, Bool_t factoryInitMode = kFALSE); Bool_tRooArgSet::checkForDup(const RooAbsArg& arg, Bool_t silent) const; voidRooAbsCollection::clearStructureTags(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidRooAbsCollection::makeStructureTag(); voidRooAbsCollection::makeTypedStructureTag(); voidTObject::MakeZombie(); voidRooAbsCollection::safeDeleteList(); TNamed*RooAbsCollection::structureTag(); TNamed*RooAbsCollection::typedStructureTag(). Data Members; public:. static RooPrintable::ContentsOptionRooPrintable::kAddress; static RooPrintable::ContentsOptionRooPrintable::kArgs; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static RooPrintable::ContentsOptionRooPrintable::kClassName; static RooPrintable::ContentsOptionRooPrintable::kCollectionHeader; static RooPrintable::ContentsOptionRooPrintable::kExtras; static TObject::EStatusBitsTObject::kHasUUID; static RooPrintable::StyleOptionRooPrintable::kInline; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooSetProxy.html:11680,clear,clearStructureTags,11680,root/html602/RooSetProxy.html,https://root.cern,https://root.cern/root/html602/RooSetProxy.html,4,['clear'],['clearStructureTags']
Usability,"SysTau() (c); GetEmatrixSysBackgroundUncorr() (d); GetEmatrixSysBackgroundScale() (e); GetEmatrixInput() (i); GetEmatrix() (i)+(d)+(e); GetEmatrixTotal() (i)+(a)+(b)+(c)+(d)+(e). Error matrices can be added to existing histograms.; This is useful to retreive the sum of several error matrices.; If the last argument of the GetEmatrixXXX() methods is set to kFALSE,; the histogram is not cleared, but the error matrix is simply added to the; existing histogram. Function Members (Methods); public:. TUnfoldSys(const TUnfoldSys&); TUnfoldSys(const TH2* hist_A, TUnfold::EHistMap histmap, TUnfold::ERegMode regmode = kRegModeSize, TUnfold::EConstraint constraint = kEConstraintArea); virtual~TUnfoldSys(); voidTObject::AbstractMethod(const char* method) const; voidAddSysError(const TH2* sysError, const char* name, TUnfold::EHistMap histmap, TUnfoldSys::ESysErrMode mode); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual Double_tTUnfold::DoUnfold(Double_t tau); Double_tTUnfold::DoUnfold(Double_t tau, const TH1* hist_y, Double_t scaleBias = 0.0); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t ev",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TUnfoldSys.html:4010,Clear,Clear,4010,root/html534/TUnfoldSys.html,https://root.cern,https://root.cern/root/html534/TUnfoldSys.html,1,['Clear'],['Clear']
Usability,"T &Elt)Definition RVec.hxx:804; ROOT::Detail::VecOps::RVecImpl::pop_back_valT pop_back_val()Definition RVec.hxx:641; ROOT::Detail::VecOps::RVecImpl::~RVecImpl~RVecImpl()Definition RVec.hxx:577; ROOT::Detail::VecOps::RVecImpl::operator=RVecImpl & operator=(const RVecImpl &RHS)Definition RVec.hxx:995; ROOT::Detail::VecOps::RVecImpl::eraseiterator erase(const_iterator CS, const_iterator CE)Definition RVec.hxx:721; ROOT::Detail::VecOps::RVecImpl::referencetypename SuperClass::reference referenceDefinition RVec.hxx:567; ROOT::Detail::VecOps::RVecImpl::appendvoid append(size_type NumInputs, const T &Elt)Append NumInputs copies of Elt to the end.Definition RVec.hxx:665; ROOT::Detail::VecOps::RVecImpl::eraseiterator erase(const_iterator CI)Definition RVec.hxx:704; ROOT::Detail::VecOps::RVecImpl::operator=RVecImpl & operator=(RVecImpl &&RHS)Definition RVec.hxx:1048; ROOT::Detail::VecOps::RVecImpl::pop_back_nvoid pop_back_n(size_type NumItems)Definition RVec.hxx:631; ROOT::Detail::VecOps::RVecImpl::clearvoid clear()Definition RVec.hxx:586; ROOT::Detail::VecOps::RVecImpl::RVecImplRVecImpl(const RVecImpl &)=delete; ROOT::Detail::VecOps::RVecImpl::appendvoid append(std::initializer_list< T > IL)Definition RVec.hxx:674; ROOT::Detail::VecOps::RVecImpl::insertvoid insert(iterator I, std::initializer_list< T > IL)Definition RVec.hxx:917; ROOT::Internal::VecOps::SmallVectorBaseThis is all the stuff common to all SmallVectors.Definition RVec.hxx:138; ROOT::Internal::VecOps::SmallVectorBase::SmallVectorBaseSmallVectorBase()=delete; ROOT::Internal::VecOps::SmallVectorBase::SmallVectorBaseSmallVectorBase(void *FirstEl, size_t TotalCapacity)Definition RVec.hxx:156; ROOT::Internal::VecOps::SmallVectorBase::SizeTypeMaxstatic constexpr size_t SizeTypeMax()The maximum value of the Size_T used.Definition RVec.hxx:153; ROOT::Internal::VecOps::SmallVectorBase::fCapacitySize_T fCapacityAlways >= -1. fCapacity == -1 indicates the RVec is in ""memory adoption"" mode.Definition RVec.hxx:150; ROOT::Int",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RVec_8hxx_source.html:134106,clear,clearvoid,134106,doc/master/RVec_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RVec_8hxx_source.html,4,['clear'],"['clear', 'clearvoid']"
Usability,"T 6.10/01 http://root.cern.ch |; | (c) 1995-2017, The ROOT Team |; | Built for macosx64 |; | From heads/v6-10-00-patches@v6-10-00-25-g9f78c3a, Jul 03 2017, 11:39:44 |; | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |; -------------------------------------------------------------------------. root [0] .x hsimple.C; Now execute demos.C, which brings up the button bar shown on the left. You can click on any button to execute another example. To see the source, open the corresponding source file (for example fit1.C). Once you are done, and want to quit the ROOT session, you can do so by typing .q.; root[] .x demos.C; root[] .q; 20.2 $ROOTSYS/test; The test directory contains a set of examples that represent all areas of the framework. When a new release is cut, the examples in this directory are compiled and run to test the new release’s backward compatibility.; We see these source files:. Makefile; Makefile to build all test programs. hsimple.cxx; Simple test program that creates and saves some histograms. MainEvent.cxx; Simple test program that creates a ROOT Tree object and fills it with some simple structures but also with complete histograms. This program uses the files Event.cxx, EventCint.cxx and Event.h. An example of a procedure to link this program is in bind_Event. Note that the Makefile invokes the rootcling utility to generate the Cling interface EventCint.cxx. Event.cxx; Implementation for classes Event and Track. minexam.cxx; Simple test program for data fitting. tcollex.cxx; Example usage of the ROOT collection classes. tcollbm.cxx; Benchmarks of ROOT collection classes. ctorture.cxx; Test program for the class TComplex. tstring.cxx; Example usage of the ROOT string class. vmatrix.cxx; Verification program for the TMatrix class. vvector.cxx; Verification program for the TVectorclass. vlazy.cxx; Verification program for lazy matrices. hworld.cxx; Small program showing basic graphics. guitest.cxx; Example usage of the ROOT GUI classes. gui vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1075479,Simpl,Simple,1075479,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['Simpl'],['Simple']
Usability,"T > ; Int_t SetBranchAddress (const char *bname, T **add, TBranch **ptr=nullptr);  ; template<class T > ; Int_t SetBranchAddress (const char *bname, T *add, TBranch **ptr=nullptr);  ; virtual Int_t SetBranchAddress (const char *bname, void *add, TBranch **ptr, TClass *realClass, EDataType datatype, bool isptr);  Verify the validity of the type of addr before calling SetBranchAddress. ;  ; virtual Int_t SetBranchAddress (const char *bname, void *add, TBranch **ptr=nullptr);  Change branch address, dealing with clone trees properly. ;  ; virtual Int_t SetBranchAddress (const char *bname, void *add, TClass *realClass, EDataType datatype, bool isptr);  Verify the validity of the type of addr before calling SetBranchAddress. ;  ; virtual void SetBranchStatus (const char *bname, bool status=true, UInt_t *found=nullptr);  Set branch status to Process or DoNotProcess. ;  ; virtual Int_t SetCacheEntryRange (Long64_t first, Long64_t last);  interface to TTreeCache to set the cache entry range ;  ; virtual void SetCacheLearnEntries (Int_t n=10);  Interface to TTreeCache to set the number of entries for the learning phase. ;  ; virtual Int_t SetCacheSize (Long64_t cachesize=-1);  Set maximum size of the file cache . ;  ; virtual void SetChainOffset (Long64_t offset=0);  ; virtual void SetCircular (Long64_t maxEntries);  Enable/Disable circularity for this tree. ;  ; virtual void SetClusterPrefetch (bool enabled);  ; virtual void SetDebug (Int_t level=1, Long64_t min=0, Long64_t max=9999999);  Set the debug level and the debug range. ;  ; virtual void SetDefaultEntryOffsetLen (Int_t newdefault, bool updateExisting=false);  Update the default value for the branch's fEntryOffsetLen. ;  ; virtual void SetDirectory (TDirectory *dir);  Change the tree's directory. ;  ; virtual Long64_t SetEntries (Long64_t n=-1);  Change number of entries in the tree. ;  ; virtual void SetEntryList (TEntryList *list, Option_t *opt="""");  Set an EntryList. ;  ; virtual void SetEstimate (Long64_t nentri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTree.html:38811,learn,learning,38811,doc/v632/classTTree.html,https://root.cern,https://root.cern/doc/v632/classTTree.html,5,['learn'],['learning']
Usability,"T > ; Int_t SetBranchAddress (const char *bname, T **add, TBranch **ptr=nullptr);  ; template<class T > ; Int_t SetBranchAddress (const char *bname, T *add, TBranch **ptr=nullptr);  ; virtual Int_t SetBranchAddress (const char *bname, void *add, TBranch **ptr, TClass *realClass, EDataType datatype, bool isptr);  Verify the validity of the type of addr before calling SetBranchAddress. ;  ; virtual Int_t SetBranchAddress (const char *bname, void *add, TBranch **ptr=nullptr);  Change branch address, dealing with clone trees properly. ;  ; virtual Int_t SetBranchAddress (const char *bname, void *add, TClass *realClass, EDataType datatype, bool isptr);  Verify the validity of the type of addr before calling SetBranchAddress. ;  ; virtual void SetBranchStatus (const char *bname, bool status=true, UInt_t *found=nullptr);  Set branch status to Process or DoNotProcess. ;  ; virtual Int_t SetCacheEntryRange (Long64_t first, Long64_t last);  interface to TTreeCache to set the cache entry range ;  ; virtual void SetCacheLearnEntries (Int_t n=10);  Interface to TTreeCache to set the number of entries for the learning phase. ;  ; virtual Int_t SetCacheSize (Long64_t cachesize=-1);  Set maximum size of the file cache . ;  ; virtual void SetChainOffset (Long64_t offset=0);  ; virtual void SetCircular (Long64_t maxEntries);  Enable/Disable circularity for this tree. ;  ; virtual void SetClusterPrefetch (bool enabled);  ; virtual void SetDebug (Int_t level=1, Long64_t min=0, Long64_t max=9999999);  Set the debug level and the debug range. ;  ; virtual void SetDefaultEntryOffsetLen (Int_t newdefault, bool updateExisting=false);  Update the default value for the branch's fEntryOffsetLen. ;  ; virtual void SetDirectory (TDirectory *dir);  Change the tree's directory. ;  ; virtual void SetEntryList (TEntryList *list, Option_t *opt="""");  Set an EntryList. ;  ; virtual void SetEstimate (Long64_t nentries=1000000);  Set number of entries to estimate variable limits. ;  ; virtual void SetEve",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHbookTree.html:21414,learn,learning,21414,doc/master/classTHbookTree.html,https://root.cern,https://root.cern/doc/master/classTHbookTree.html,1,['learn'],['learning']
Usability,"T Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » RECORDER; » TRecorderRecording. class TRecorderRecording: public TRecorderState. Represents state of TRecorder when recording events. Function Members (Methods); public:. TRecorderRecording(const TRecorderRecording&); static TClass*Class(); voidFilterEventPave(); virtual TRecorder::ERecorderStateGetState() const; virtual TClass*IsA() const; virtual voidTRecorderState::ListCmd(const char*); virtual voidTRecorderState::ListGui(const char*); TRecorderRecording&operator=(const TRecorderRecording&); virtual voidTRecorderState::Pause(TRecorder*); virtual voidTRecorderState::PrevCanvases(const char*, Option_t*); voidRecordCmdEvent(const char* line); voidRecordExtraEvent(TString line, TTime extTime); voidRecordGuiBldEvent(Event_t* e); voidRecordGuiCNEvent(Event_t* e); voidRecordGuiEvent(Event_t* e, Window_t wid); voidRecordMousePosition(); voidRecordPave(const TObject* obj); voidRecordText(const TObject* obj); voidRegisterWindow(Window_t w); virtual Bool_tTRecorderState::Replay(TRecorder*, const char*, Bool_t, TRecorder::EReplayModes); virtual voidTRecorderState::ReplayStop(TRecorder*); virtual voidTRecorderState::Resume(TRecorder*); virtual voidShowMembers(TMemberInspector& insp); virtual voidTRecorderState::Start(TRecorder*, const char*, Option_t*, Window_t*, Int_t); voidStartEditing(); virtual voidStop(TRecorder* r, Bool_t guiCommand); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. TRecorderRecording(TRecorder* r, const char* filename, Option_t* option, Window_t* w, Int_t winCount); voidTRecorderState::ChangeState(TRecorder* r, TRecorderState* s, Bool_t deletePreviousState); Bool_tStartRecording(). private:. (unknown)(); voidCopyEvent(Event_t* e, Window_t wid); Bool_tIsFiltered(Window_t id); voidSetTypeOfConfigureNotify(Event_t* e). Data",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TRecorderRecording.html:772,Pause,Pause,772,root/html532/TRecorderRecording.html,https://root.cern,https://root.cern/root/html532/TRecorderRecording.html,2,"['Pause', 'Resume']","['Pause', 'Resume']"
Usability,"T(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539; Calculations are expressed in terms of a type-safe functional chain of actions and transformations, RDataFrame takes care of their execution. The implementation automatically puts in place several low level optimisations such as multi-thread parallelization and caching. For the impatient user; You can directly see RDataFrame in action in our tutorials, in C++ or Python. Table of Contents. Cheat sheet; Introduction; Crash course; Working with collections; Transformations: manipulating data; Actions: getting results; Distributed execution in Python; Performance tips and parallel execution; More features; Systematic variations; RDataFrame objects as function arguments and return values; Storing RDataFrame objects in collections; Executing callbacks every N events; Default column lists; Special helper columns: `rdfentry_` and `rdfslot_`; Just-in-time compilation: column type inference and explicit declaration of column types; User-defined custom actions; Dataset joins with friend trees; Reading data formats other than ROOT trees; Computation graphs (storing and reusing sets of transformations); Visualizing the computation graph; Activating RDataFrame execution logs; Creating an RDataFrame from a dataset specification file; Adding a progress bar; Working with missing values in the dataset. Efficient analysis in Python; Class reference. Cheat sheet; These are the operations which can be performed with RDataFrame. Transformations; Transformations are a way to manipulate the data. Transformation Description . Alias() Introduce an alias for a particular column name. . DefaultValueFor() If the value of the input column is missing, provide a default value instead. . Define() Create a new column in the dataset. Example usages include adding a column that contains the invariant mass of a particle, or a selection of elements of an",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDataFrame.html:2569,progress bar,progress bar,2569,doc/master/classROOT_1_1RDataFrame.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html,1,['progress bar'],['progress bar']
Usability,"T, you can do so by following the instructions in the appendix, or on the ROOT web site: http://root.cern.ch/root/Availability.html; 2.1 Setting the Environment Variables; Before you can run ROOT you need to set the environment variable ROOTSYS and change your path to include root/bin and library path variables to include root/lib. Please note: the syntax is for bash, if you are running tcsh you will have to use setenv instead of export. Define the variable $ROOTSYS to the directory where you unpacked the ROOT:. $ export ROOTSYS=$HOME/root. Add ROOTSYS/bin to your PATH:. $ export PATH=$PATH:$ROOTSYS/bin. Setting the Library Path. On HP-UX, before executing the interactive module, you must set the library path:; $ export SHLIB_PATH=$SHLIB_PATH:$ROOTSYS/lib; On AIX, before executing the interactive module, you must set the library path:; $ [ -z ""$LIBPATH"" ] && export LIBPATH=/lib:/usr/lib; $ export LIBPATH=$LIBPATH:$ROOTSYS/lib; On Linux, Solaris, Alpha OSF and SGI, before executing the interactive module, you must set the library path:; $ export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$ROOTSYS/lib; On Solaris, in case your LD_LIBRARY_PATH is empty, you should set it:; $ export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$ROOTSYS/lib:/usr/dt/lib; If you use the afs version you should set (vers = version number, arch = architecture):; $ export ROOTSYS=/afs/cern.ch/sw/lcg/external/root/vers/arch/root; If ROOT was installed in $HOME/myroot directory on a local machine, one can do:; cd $HOME/myroot; . bin/thisroot.sh // or source bin/thisroot.sh; The new $ROOTSYS/bin/thisroot.[c]sh scripts will set correctly the ROOTSYS, LD_LIBRARY_PATH or other paths depending on the platform and the MANPATH. To run the program just type: root.; 2.2 Start and Quit a ROOT Session; $ root; -------------------------------------------------------------------------; | Welcome to ROOT 6.10/01 http://root.cern.ch |; | (c) 1995-2017, The ROOT Team |; | Built for macosx64 |; | From heads/v6-10-00-patches@v6-10-00-",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:31017,UX,UX,31017,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['UX'],['UX']
Usability,"T-latest/x86_64-slc6-gcc49-opt/setup.sh ; # on CVMFS; source /cvmfs/sft.cern.ch/lcg/views/ROOT-latest/x86_64-slc6-gcc49-opt/setup.csh. For all the other compilers (icc, clang,...) and systems; In this case we can use the script that is used by jenkins. The script expects 4 arguments:. LABEL is system OS and version. E.g. 'slc6', 'centos7', 'fedora14', 'mac1012', etc.; COMPILER is the compiler and version. E.g. 'icc16', 'clang37', 'native' (for the native compiler), etc.; BUILDTYPE is the type of the build. E.g. Release, Debug; EXTERNALS is the label for the set of versions of the externals. Typically 'ROOT-date', but 'ROOT-latest' is a safe bet. . git clone http://root.cern.ch/git/rootspi.git ; source rootspi/jenkins/jk-setup.sh slc6 icc14 Release ROOT-latest. Debugging an existing nightly build; Often when a build has failed in the nightlies we are required to debug it. The following are the instructions to get the correct environment for starting the debug session. As input you need to know the node name and the working directory in the build node (and the password of the sftnight account). You can get this information from the logs in Jenkins or CDash.; $ ssh sftnight@<node-name>; $ cd <work-directory>; $ source setup.sh; $ cd build; $ ctest -V -R <failing test>; or; $ make <failing target>. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/how-setup-root-externals-afscvmfs.html:4025,guid,guidelines,4025,d/how-setup-root-externals-afscvmfs.html,https://root.cern,https://root.cern/d/how-setup-root-externals-afscvmfs.html,1,['guid'],['guidelines']
Usability,"T::Math::bigaussian_pdf (x,y,[SigmaX],[SigmaY],[Rho],[MeanX],[MeanY])`, a 2d gaussian including a correlation parameter.; 179 3. Three Dimensional functions:; 180 - `xyzgaus` is for a 3d Gaussians without correlations:; 181 `[Constant]*exp(-0.5*pow(((x-[MeanX])/[SigmaX]),2 )- 0.5*pow(((y-[MeanY])/[SigmaY]),2 )- 0.5*pow(((z-[MeanZ])/[SigmaZ]),2))`; 182 ; 183 ; 184 ### An expanded note on variables and parameters; 185 ; 186 In a TFormula, a variable is a defined by a name `x`, `y`, `z` or `t` or an; 187 index like `x[0]`, `x[1]`, `x[2]`; that is `x[N]` where N is an integer.; 188 ; 189 ```; 190 TFormula("""", ""x[0] * x[1] + 10""); 191 ```; 192 ; 193 Parameters are similar and can take any name. It is specified using brackets; 194 e.g. `[expected_mass]` or `[0]`.; 195 ; 196 ```; 197 TFormula("""", ""exp([expected_mass])-1""); 198 ```; 199 ; 200 Variables and parameters can be combined in the same TFormula. Here we consider; 201 a very simple case where we have an exponential decay after some time t and a; 202 number of events with timestamps for which we want to evaluate this function.; 203 ; 204 ```; 205 TFormula tf ("""", ""[0]*exp(-[1]*t)"");; 206 tf.SetParameter(0, 1);; 207 tf.SetParameter(1, 0.5);; 208 ; 209 for (auto & event : events) {; 210 tf.Eval(event.t);; 211 }; 212 ```; 213 ; 214 The distinction between variables and parameters arose from the TFormula's; 215 application in fitting. There parameters are fitted to the data provided; 216 through variables. In other applications this distinction can go away.; 217 ; 218 Parameter values can be provided dynamically using `TFormula::EvalPar`; 219 instead of `TFormula::Eval`. In this way parameters can be used identically; 220 to variables. See below for an example that uses only parameters to model a; 221 function.; 222 ; 223 ```; 224 Int_t params[2] = {1, 2}; // {vel_x, vel_y}; 225 TFormula tf ("""", ""[vel_x]/sqrt(([vel_x + vel_y])**2)"");; 226 ; 227 tf.EvalPar(nullptr, params);; 228 ```; 229 ; 230 ### A note on operators; 231 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFormula_8cxx_source.html:7841,simpl,simple,7841,doc/master/TFormula_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFormula_8cxx_source.html,1,['simpl'],['simple']
Usability,"T::TThreadExecutor never deletes what it returns, it simply forgets it.; Parameters. funca callable object, such as a lambda expression, an std::function, a functor object or a function that takes zero arguments (for the first signature) or one (for the second signature). ; argsa standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature. An integer only for the first. . Note: in cases where the function to be executed takes more than zero/one argument but all are fixed except zero/one, the function can be wrapped in a lambda or via std::bind to give it the right signature.; Return value:; An std::vector. The elements in the container will be the objects returned by func.; Examples:; root[] ROOT::TThreadExecutor pool; auto hists = pool.Map(CreateHisto, 10);; root[] ROOT::TThreadExecutor pool(2); auto squares = pool.Map([](int a) { return a*a; }, {1,2,3});; a#define a(i)Definition RSha256.hxx:99; ROOT::TThreadExecutorThis class provides a simple interface to execute the same task multiple times in parallel threads,...Definition TThreadExecutor.hxx:41; ROOT::TThreadExecutor::Mapauto Map(F func, unsigned nTimes, R redfunc, unsigned nChunks) -> std::vector< InvokeResult_t< F > >Execute a function nTimes in parallel, dividing the execution in nChunks and providing a result per c...Definition TThreadExecutor.hxx:289. ROOT::TThreadExecutor::MapReduce; This set of methods behaves exactly like Map, but takes an additional function as a third argument. This function is applied to the set of objects returned by the corresponding Map execution to ""squash"" them into a single object. This function should be independent of the size of the vector returned by Map due to optimization of the number of chunks.; If this function is a binary operator, the ""squashing"" will be performed in parallel. This is exclusive to ROOT::TThreadExecutor and not any other ROOT::TExecutorCRTP-derived classes.; An integer can be passed as the fourth argument indicating t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TThreadExecutor.html:2488,simpl,simple,2488,doc/v632/classROOT_1_1TThreadExecutor.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TThreadExecutor.html,2,['simpl'],['simple']
Usability,"T; » CORE; » BASE; » TTask. class TTask: public TNamed. TTask is a base class that can be used to build a complex tree of Tasks.; Each TTask derived class may contain other TTasks that can be executed; recursively, such that a complex program can be dynamically built and executed; by invoking the services of the top level Task or one of its subtasks. Use the TTask::Add function to add a subtask to an existing TTask.; To execute a TTask, one calls the ExecuteTask function. ExecuteTask will; call recursively:; - the TTask::Exec function of the derived class; - TTask::ExecuteTasks to execute for each task the list of its subtasks.; If the top level task (see example below) is added to the list of Root; browsable objects, the tree of tasks can be visualized by the Root browser.; The browser can be used to start a task, set break points at the beginning; of a task or when the task has completed. At a breakpoint, data structures; generated by the execution up this point may be inspected asyncronously; and then the execution can be resumed by selecting the ""Continue"" function; of a task. A Task may be active or inactive (controlled by TTask::SetActive).; When a task is not active, its sub tasks are not executed. A TTask tree may be made persistent, saving the status of all the tasks. The picture in the Root browser below has been generated by executing; the following script:. { //------------------script tasks.C---------------------------; TTask *aliroot = new TTask(""aliroot"",""ALICE reconstruction main task"");; TTask *geominit = new TTask(""geomInit"",""Initialize ALICE geometry"");; TTask *matinit = new TTask(""matInit"",""Initialize ALICE materials"");; TTask *physinit = new TTask(""physInit"",""Initialize Physics processes"");; TTask *tracker = new TTask(""tracker"",""Track reconstruction manager"");; TTask *tpcrec = new TTask(""tpcrec"",""TPC reconstruction"");; TTask *itsrec = new TTask(""itsrec"",""ITS reconstruction"");; TTask *muonrec = new TTask(""muonRec"",""Muon Reconstruction"");; TTask *",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTask.html:1260,resume,resumed,1260,root/html528/TTask.html,https://root.cern,https://root.cern/root/html528/TTask.html,10,['resume'],['resumed']
Usability,"TArrowDraw all kinds of Arrows.Definition TArrow.h:29; TArrow::DrawArrowvirtual TArrow * DrawArrow(Double_t x1, Double_t y1, Double_t x2, Double_t y2, Float_t arrowsize=0, Option_t *option="""")Draw this arrow with new coordinates.Definition TArrow.cxx:135; TArrow::Drawvoid Draw(Option_t *option="""") overrideDraw this arrow with its current attributes.Definition TArrow.cxx:120; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TAttText::SetTextAlignvirtual void SetTextAlign(Short_t align=11)Set the text alignment.Definition TAttText.h:42; TAttText::SetTextColorvirtual void SetTextColor(Color_t tcolor=1)Set the text color.Definition TAttText.h:44; TAttText::SetTextFontvirtual void SetTextFont(Font_t tfont=62)Set the text font.Definition TAttText.h:46; TAttText::SetTextSizevirtual void SetTextSize(Float_t tsize=1)Set the text size.Definition TAttText.h:47; TCanvasThe Canvas class.Definition TCanvas.h:23; TLineUse the TLine constructor to create a simple line.Definition TLine.h:22; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; TPaveLabelA Pave (see TPave) with a text centered in the Pave.Definition TPaveLabel.h:20; TPaveLabel::Drawvoid Draw(Option_t *option="""") overrideDraw this pavelabel with its current attributes.Definition TPaveLabel.cxx:88; TPaveTextA Pave (see TPave) with text, lines or/and boxes inside.Definition TPaveText.h:21; TPaveText::AddTextvirtual TText * AddText(Double_t x1, Double_t y1, const char *label)Add a new Text line to this pavetext at given coordinates.Definition TPaveText.cxx:191; TPaveText::Drawvoid Draw(Option_t *option="""") overrideDraw this pavetext with its current attributes.Definition TPaveText.cxx:242; TTextBase class for several text objects.Definition TText.h:22; TText::DrawTextvirtual TText * DrawText(Double_t x, Double_t y, const char *text)Draw this text with new coordinates.Definition TText.cxx:176; c1ret",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/analyze_8C.html:5327,simpl,simple,5327,doc/master/analyze_8C.html,https://root.cern,https://root.cern/doc/master/analyze_8C.html,1,['simpl'],['simple']
Usability,"TAxis*TGLPlotPainter::fZAxis; vector<Double_t>TGLPlotPainter::fZLevels. private:. Int_tfColorScheme; TGLParametricEquation*fEquation; TGL2DArray<TGLParametricPlot::Vertex_t>fMesh; Int_tfMeshSize; Bool_tfShowMesh. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLParametricPlot(TGLParametricEquation* equation, TGLPlotCamera* camera); Constructor. Bool_t InitGeometry(); Build mesh. The surface is 'immutable':; the only reason to rebuild it - the change in size or; if one of equations contain reference to TF2 function, whose; parameters were changed. void StartPan(Int_t px, Int_t py); User clicks right mouse button (in a pad). void Pan(Int_t px, Int_t py); User's moving mouse cursor, with middle mouse button pressed (for pad).; Calculate 3d shift related to 2d mouse movement. char * GetPlotInfo(Int_t px, Int_t py); No object info yet. void AddOption(const TString& option); No additional options for parametric surfaces. void ProcessEvent(Int_t event, Int_t px, Int_t py); Change color/mesh size or switch on/off mesh/box cut.; Left double click - remove box cut. void InitGL() const; Initialize gl state. void DeInitGL() const; Initialize gl state. void DrawPlot() const; Draw parametric surface. void InitColors(); Calculate colors for vertices,; using one of 20 color themes.; -1 simple 'metal' surface. void DrawSectionXOZ() const; No such sections. void DrawSectionYOZ() const; No such sections. void DrawSectionXOY() const; No such sections. void SetSurfaceColor() const; Set material properties. TGLParametricPlot(TGLParametricEquation* equation, TGLPlotCamera* camera). » Author: Timur Pocheptsov 26/01/2007 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id: TGLParametric.h 28464 2009-05-06 12:37:21Z brun $ » Last generated: 2010-09-23 20:06; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLParametricPlot.html:5167,simpl,simple,5167,root/html528/TGLParametricPlot.html,https://root.cern,https://root.cern/root/html528/TGLParametricPlot.html,1,['simpl'],['simple']
Usability,"TAxis*TGLPlotPainter::fZAxis; vector<Double_t>TGLPlotPainter::fZLevels. private:. Int_tfColorScheme; TGLParametricEquation*fEquation; TGL2DArray<TGLParametricPlot::Vertex_t>fMesh; Int_tfMeshSize; Bool_tfShowMesh. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLParametricPlot(TGLParametricEquation* equation, TGLPlotCamera* camera); Constructor. Bool_t InitGeometry(); Build mesh. The surface is 'immutable':; the only reason to rebuild it - the change in size or; if one of equations contain reference to TF2 function, whose; parameters were changed. void StartPan(Int_t px, Int_t py); User clicks right mouse button (in a pad). void Pan(Int_t px, Int_t py); User's moving mouse cursor, with middle mouse button pressed (for pad).; Calculate 3d shift related to 2d mouse movement. char * GetPlotInfo(Int_t px, Int_t py); No object info yet. void AddOption(const TString& option); No additional options for parametric surfaces. void ProcessEvent(Int_t event, Int_t px, Int_t py); Change color/mesh size or switch on/off mesh/box cut.; Left double click - remove box cut. void InitGL() const; Initialize gl state. void DeInitGL() const; Initialize gl state. void DrawPlot() const; Draw parametric surface. void InitColors(); Calculate colors for vertices,; using one of 20 color themes.; -1 simple 'metal' surface. void DrawSectionXOZ() const; No such sections. void DrawSectionYOZ() const; No such sections. void DrawSectionXOY() const; No such sections. void SetSurfaceColor() const; Set material properties. TGLParametricPlot(TGLParametricEquation* equation, TGLPlotCamera* camera). » Author: Timur Pocheptsov 26/01/2007 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id: TGLParametric.h 28464 2009-05-06 12:37:21Z brun $ » Last generated: 2011-07-04 15:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGLParametricPlot.html:5282,simpl,simple,5282,root/html530/TGLParametricPlot.html,https://root.cern,https://root.cern/root/html530/TGLParametricPlot.html,1,['simpl'],['simple']
Usability,"TAxis*TGLPlotPainter::fZAxis; vector<Double_t>TGLPlotPainter::fZLevels. private:. Int_tfColorScheme; TGLParametricEquation*fEquation; TGL2DArray<TGLParametricPlot::Vertex_t>fMesh; Int_tfMeshSize; Bool_tfShowMesh. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLParametricPlot(TGLParametricEquation* equation, TGLPlotCamera* camera); Constructor. Bool_t InitGeometry(); Build mesh. The surface is 'immutable':; the only reason to rebuild it - the change in size or; if one of equations contain reference to TF2 function, whose; parameters were changed. void StartPan(Int_t px, Int_t py); User clicks right mouse button (in a pad). void Pan(Int_t px, Int_t py); User's moving mouse cursor, with middle mouse button pressed (for pad).; Calculate 3d shift related to 2d mouse movement. char * GetPlotInfo(Int_t px, Int_t py); No object info yet. void AddOption(const TString& option); No additional options for parametric surfaces. void ProcessEvent(Int_t event, Int_t px, Int_t py); Change color/mesh size or switch on/off mesh/box cut.; Left double click - remove box cut. void InitGL() const; Initialize gl state. void DeInitGL() const; Initialize gl state. void DrawPlot() const; Draw parametric surface. void InitColors(); Calculate colors for vertices,; using one of 20 color themes.; -1 simple 'metal' surface. void DrawSectionXOZ() const; No such sections. void DrawSectionYOZ() const; No such sections. void DrawSectionXOY() const; No such sections. void SetSurfaceColor() const; Set material properties. TGLParametricPlot(TGLParametricEquation* equation, TGLPlotCamera* camera). » Author: Timur Pocheptsov 26/01/2007 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id: TGLParametric.h 28464 2009-05-06 12:37:21Z brun $ » Last generated: 2011-11-03 20:14; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGLParametricPlot.html:5463,simpl,simple,5463,root/html532/TGLParametricPlot.html,https://root.cern,https://root.cern/root/html532/TGLParametricPlot.html,2,['simpl'],['simple']
Usability,"TBranchElement::SetTargetClassvirtual void SetTargetClass(const char *name)Set the name of the class of the in-memory object into which the data will loaded.Definition TBranchElement.cxx:5855; TBranchElement::GetCheckSumUInt_t GetCheckSum()Definition TBranchElement.h:185; TBranchElement::SetObjectvoid SetObject(void *objadd) overrideSet object this branch is pointing to.Definition TBranchElement.cxx:5575; TBranchObjectA Branch for the case of an object.Definition TBranchObject.h:26; TBranchRefA branch containing and managing a TRefTable for TRef autoloading.Definition TBranchRef.h:34; TBranchRef::Resetvoid Reset(Option_t *option="""") overrideDefinition TBranchRef.cxx:187; TBranchRef::Printvoid Print(Option_t *option="""") const overridePrint the TRefTable branch.Definition TBranchRef.cxx:159; TBranchRef::Clearvoid Clear(Option_t *option="""") overrideClear entries in the TRefTable.Definition TBranchRef.cxx:95; TBranchRef::ResetAfterMergevoid ResetAfterMerge(TFileMergeInfo *) overrideReset a Branch after a Merge operation (drop data but keep customizations) TRefTable is cleared.Definition TBranchRef.cxx:198; TBranchSTLA Branch handling STL collection of pointers (vectors, lists, queues, sets and multisets) while stori...Definition TBranchSTL.h:22; TBranchA TTree is a list of TBranches.Definition TBranch.h:93; TBranch::GetLeafvirtual TLeaf * GetLeaf(const char *name) constReturn pointer to the 1st Leaf named name in thisBranch.Definition TBranch.cxx:2055; TBranch::GetMakeClassvirtual bool GetMakeClass() constReturn whether this branch is in a mode where the object are decomposed or not (Also known as MakeCla...Definition TBranch.cxx:2117; TBranch::SetupAddressesvirtual void SetupAddresses()If the branch address is not set, we set all addresses starting with the top level parent branch.Definition TBranch.cxx:3294; TBranch::ResetAddressvirtual void ResetAddress()Reset the address of the branch.Definition TBranch.cxx:2651; TBranch::GetBasketSeekvirtual Long64_t GetBasketSeek(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:393778,clear,cleared,393778,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['clear'],['cleared']
Usability,"TBrowser *) overrideTChainvirtual; BuildIndex(const char *majorname, const char *minorname=""0"")TTreevirtual; BuildStreamerInfo(TClass *cl, void *pointer=nullptr, bool canOptimize=true)TTree; CanDeleteRefs(bool flag=true)TChainvirtual; ChangeFile(TFile *file)TTreevirtual; CheckBranchAddressType(TBranch *branch, TClass *ptrClass, EDataType datatype, bool ptr)TTreeprotectedvirtual; CheckedHash()TObjectinline; Class()TChainstatic; Class_Name()TChainstatic; Class_Version()TChaininlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTNamedvirtual; Clone(const char *newname="""") const overrideTNamedvirtual; CloneTree(Long64_t nentries=-1, Option_t *option="""")TTreevirtual; Compare(const TObject *obj) const overrideTNamedvirtual; TNamed::Copy(TObject &named) const overrideTNamedvirtual; TAttLine::Copy(TAttLine &attline) constTAttLine; TAttFill::Copy(TAttFill &attfill) constTAttFill; TAttMarker::Copy(TAttMarker &attmarker) constTAttMarker; CopyAddresses(TTree *, bool undo=false)TTreevirtual; CopyEntries(TTree *tree, Long64_t nentries=-1, Option_t *option="""", bool needCopyAddresses=false)TTreevirtual; CopyTree(const char *selection, Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0)TTreevirtual; CreateBasket(TBranch *)TTreevirtual; CreatePackets()TChainvirtual; Debug() constTTreeinline; DeclFileName()TChaininlinestatic; Delete(Option_t *option="""") overrideTTreevirtual; DirectoryAutoAdd(TDirectory *) overrideTChainvirtual; DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2)TAttLine; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(const char *varexp, const TCut &selection, Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0) overrideTChainvirtual; Draw(const char *varexp, const char *selection, Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firste",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTChain-members.html:4579,undo,undo,4579,doc/master/classTChain-members.html,https://root.cern,https://root.cern/doc/master/classTChain-members.html,1,['undo'],['undo']
Usability,"TBuffer &buf, ULong64_t l){ buf.WriteULong64(l);return buf; }; 372inline TBuffer &operator<<(TBuffer &buf, Float_t f) { buf.WriteFloat(f); return buf; }; 373inline TBuffer &operator<<(TBuffer &buf, Double_t d) { buf.WriteDouble(d); return buf; }; 374inline TBuffer &operator<<(TBuffer &buf, const Char_t *c) { buf.WriteCharP(c); return buf; }; 375inline TBuffer &operator<<(TBuffer &buf, const TString &s) { buf.WriteTString(s);return buf; }; 376 ; 377#if defined(R__SOLARIS) && defined(R__GNU); 378#include <typeinfo>; 379#endif; 380 ; 381template <class Tmpl> TBuffer &operator>>(TBuffer &buf, Tmpl *&obj); 382{; 383 // Read TObject derived classes from a TBuffer. Need to provide; 384 // custom version for non-TObject derived classes.; 385 ; 386 // This operator has to be a templated and/or automatically; 387 // generated if we want to be able to check the type of the; 388 // incoming object. I.e. a operator>>(TBuffer &buf, TObject *&); 389 // would not be sufficient to pass the information 'which class do we want'; 390 // since the pointer could be zero (so typeid(*obj) is not usable).; 391 ; 392 auto cl = TClass::GetClass<Tmpl>();; 393 obj = (Tmpl *) ( (void*) buf.ReadObjectAny(cl) );; 394 return buf;; 395}; 396 ; 397template <class Tmpl> TBuffer &operator<<(TBuffer &buf, const Tmpl *obj); 398{; 399 auto cl = (obj) ? TClass::GetClass<Tmpl>() : nullptr;; 400 buf.WriteObjectAny(obj, cl);; 401 return buf;; 402}; 403 ; 404template <class T>; 405inline Int_t TBuffer::WriteObject(const T *objptr, Bool_t cacheReuse); 406{; 407 auto cl = (objptr) ? TClass::GetClass<T>() : nullptr;; 408 return WriteObjectAny(objptr, cl, cacheReuse);; 409}; 410 ; 411#endif // ROOT_TBuffer; Bytes.h; d#define d(i)Definition RSha256.hxx:102; b#define b(i)Definition RSha256.hxx:100; f#define f(i)Definition RSha256.hxx:104; c#define c(i)Definition RSha256.hxx:101; a#define a(i)Definition RSha256.hxx:99; h#define h(i)Definition RSha256.hxx:106; Bool_tbool Bool_tDefinition RtypesCore.h:63; UShort_tunsign",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBuffer_8h_source.html:21487,usab,usable,21487,doc/master/TBuffer_8h_source.html,https://root.cern,https://root.cern/doc/master/TBuffer_8h_source.html,1,['usab'],['usable']
Usability,"TChain.h:33; TFileCollectionClass that contains a list of TFileInfo's and accumulated meta data information about its entries.Definition TFileCollection.h:39; TFileInfoClass describing a generic file including meta information.Definition TFileInfo.h:39; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; For legacy, the following signature is also supported:; Process(<dataset>, TSelector& selector, const std::string& treeName, ULong64_t nToProcess): where selector is a TSelector derived class describing the analysis and the other arguments have the same meaning as above. For either set of signatures, the processing function is executed as many times as needed by a pool of fNWorkers workers; the number of workers can be passed to the constructor or set via SetNWorkers. It defaults to the number of cores.; A collection containing the result of each execution is returned.; Note: the user is responsible for the deletion of any object that might be created upon execution of func, returned objects included: ROOT::TTreeProcessorMP never deletes what it returns, it simply forgets it.; Note: that the usage of ROOT::TTreeProcessorMP::Process is indicated only when the task to be executed takes more than a few seconds, otherwise the overhead introduced by Process will outrun the benefits of parallel execution on most machines.; Parameters. funca lambda expression, an std::function, a loaded macro, a functor class or a function that takes zero arguments (for the first signature) or one (for the second signature). ; argsa standard container (vector, list, deque), an initializer list or a pointer to a TCollection (TList*, TObjArray*, ...). . Note: the version of ROOT::TTreeProcessorMP::Process that takes a TFileCollection* as argument incurs in the overhead of copying data from the TCollection to an STL container. Only use it when absolutely necessary.; Note: in cases where the function to be executed takes more than zero/one argument but all are fixed except zero/on",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TTreeProcessorMP.html:2259,simpl,simply,2259,doc/v632/classROOT_1_1TTreeProcessorMP.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TTreeProcessorMP.html,2,['simpl'],['simply']
Usability,"TColor, gradients can be placed; inside gROOT's list of colors and use it in all TAttXXX descendants; without modifying any existing code.; Shadow, of course, is not a property of any color, and gradient is; not, but this is the best way to add new attributes to filled area; without re-writing all the graphics code. Function Members (Methods); public:. TLinearGradient(); TLinearGradient(const TLinearGradient&); TLinearGradient(Color_t newColor, UInt_t nPoints, const Double_t* points, const Color_t* colorIndices, TColorGradient::ECoordinateMode mode = kObjectBoundingMode); TLinearGradient(Color_t newColor, UInt_t nPoints, const Double_t* points, const Double_t* colors, TColorGradient::ECoordinateMode mode = kObjectBoundingMode); ~TLinearGradient(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); const char*TColor::AsHexString() const; virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTColor::Copy(TObject& color) const; static voidTColor::CreateColorsCircle(Int_t offset, const char* name, UChar_t* rgb); static voidTColor::CreateColorsGray(); static voidTColor::CreateColorsRectangle(Int_t offset, const char* name, UChar_t* rgb); static voidTColor::CreateColorWheel(); static Int_tTColor::CreateGradientColorTable(UInt_t Number, Double_t* Stops, Double_t* Red, Double_t* Green, Double_t* Blue, UInt_t NColors, Float_t alpha = 1.); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TLinearGradient.html:1511,Clear,Clear,1511,root/html534/TLinearGradient.html,https://root.cern,https://root.cern/root/html534/TLinearGradient.html,1,['Clear'],['Clear']
Usability,"TColor, gradients can be placed; inside gROOT's list of colors and use it in all TAttXXX descendants; without modifying any existing code.; Shadow, of course, is not a property of any color, and gradient is; not, but this is the best way to add new attributes to filled area; without re-writing all the graphics code. Function Members (Methods); public:. TRadialGradient(); TRadialGradient(const TRadialGradient&); TRadialGradient(Color_t newColor, UInt_t nPoints, const Double_t* points, const Color_t* colorIndices, TColorGradient::ECoordinateMode mode = kObjectBoundingMode); TRadialGradient(Color_t newColor, UInt_t nPoints, const Double_t* points, const Double_t* colors, TColorGradient::ECoordinateMode mode = kObjectBoundingMode); ~TRadialGradient(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); const char*TColor::AsHexString() const; virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTColor::Copy(TObject& color) const; static voidTColor::CreateColorsCircle(Int_t offset, const char* name, UChar_t* rgb); static voidTColor::CreateColorsGray(); static voidTColor::CreateColorsRectangle(Int_t offset, const char* name, UChar_t* rgb); static voidTColor::CreateColorWheel(); static Int_tTColor::CreateGradientColorTable(UInt_t Number, Double_t* Stops, Double_t* Red, Double_t* Green, Double_t* Blue, UInt_t NColors, Float_t alpha = 1.); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TRadialGradient.html:1511,Clear,Clear,1511,root/html534/TRadialGradient.html,https://root.cern,https://root.cern/root/html534/TRadialGradient.html,1,['Clear'],['Clear']
Usability,"TDirectory::fContext!Pointer to a list of TContext object pointing to this TDirectory; TDatimeTDirectoryFile::fDatimeCDate and time when directory is created; TDatimeTDirectoryFile::fDatimeMDate and time of last modification; TFile*TDirectoryFile::fFilepointer to current file in memory; TList*TDirectoryFile::fKeysPointer to keys list in memory; TList*TDirectory::fListList of objects in memory; Bool_tTDirectoryFile::fModifiedtrue if directory has been modified; TObject*TDirectory::fMotherpointer to mother of the directory; TStringTNamed::fNameobject identifier; Int_tTDirectoryFile::fNbytesKeysNumber of bytes for the keys; Int_tTDirectoryFile::fNbytesNameNumber of bytes in TNamed at creation time; TStringTDirectory::fPathBuffer!Buffer for GetPath() function; Long64_tTDirectoryFile::fSeekDirLocation of directory on file; Long64_tTDirectoryFile::fSeekKeysLocation of Keys record on file; Long64_tTDirectoryFile::fSeekParentLocation of parent directory on file; TStringTNamed::fTitleobject title; TUUIDTDirectory::fUUIDUnique identifier; Bool_tTDirectoryFile::fWritabletrue if directory is writable; static Bool_tTDirectory::fgAddDirectory!flag to add histograms, graphs,etc to the directory. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void InternalAppend(TObject* obj); Internal access to TDirectory append method. void Add(TObject* obj); Overload TDirectory interface method to prohibit insertion of objects in read-only directory workspace representation. void Append(TObject* obj); Overload TDirectory interface method to prohibit insertion of objects in read-only directory workspace representation. WSDir(const char* name, const char* title, RooWorkspace* wspace). virtual ~WSDir(); { Clear(""nodelete"") ; }. » Last changed: Thu Nov 3 20:10:09 2011 » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooWorkspace__WSDir.html:13248,Clear,Clear,13248,root/html532/RooWorkspace__WSDir.html,https://root.cern,https://root.cern/root/html532/RooWorkspace__WSDir.html,1,['Clear'],['Clear']
Usability,"TEXTnn Option; The CONTour options. The LIST option. The LEGO options; The ""SURFace"" options; Cylindrical, Polar, Spherical and PseudoRapidity/Phi options; Base line for bar-charts and lego plots; TH2Poly Drawing; The SPEC option; Option ""Z"" : Adding the color palette on the right side of the pad; Setting the color palette; Drawing a sub-range of a 2-D histogram; the [cutg] option; Drawing options for 3D histograms; Drawing option for histograms' stacks; Drawing of 3D implicit functions; Associated functions drawing; Drawing using OpenGL. General information: plot types and supported options; TH3 as boxes (spheres); TH3 as iso-surface(s); TF3 (implicit function); Parametric surfaces; Interaction with the plots; Selectable parts; Rotation and zooming; Panning; Box cut; Plot specific interactions (dynamic slicing etc.); Surface with option ""GLSURF""; TF3; Box; Iso; Parametric plot. Introduction; Histograms are drawn via the THistPainter class. Each histogram has a; pointer to its own painter (to be usable in a multithreaded program). When the; canvas has to be redrawn, the Paint function of each objects in the; pad is called. In case of histograms, TH1::Paint invokes directly; THistPainter::Paint.; To draw a histogram ""h"" is enough to do:. h->Draw();. ""h"" can be of any kind: 1D, 2D or 3D. To choose how the histogram will; be drawn, the Draw() method can be invoked with an option. For instance; to draw a 2D histogram as a lego plot it is enough to do:. h->Draw(""lego"");. THistPainter offers many options to paint 1D, 2D and 3D histograms.; When the Draw() method of a histogram is called for the first time; (TH1::Draw), it creates a THistPainter object and saves a; pointer to this ""painter"" as a data member of the histogram. The; THistPainter class specializes in the drawing of histograms. It is; separated from the histogram so that one can have histograms without the; graphics overhead, for example in a batch program. Each histogram have its own; painter rather than a cen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/THistPainter.html:2085,usab,usable,2085,root/html528/THistPainter.html,https://root.cern,https://root.cern/root/html528/THistPainter.html,4,['usab'],['usable']
Usability,"TEveElement::Annihilate(); virtual voidTEveElement::AnnihilateElements(); virtual voidTEveProjectable::AnnihilateProjecteds(); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidClearNewEventCommands(); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElementList*TEveElementList::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidClose(); virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTEveElement::CopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); voidTEveElement::CSCApplyMainColorToAllChildren(); voidTEveElement::CSCApplyMainColorToMatchingChildren(); voidTEveElement::CSCApplyMa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TEveEventManager.html:2295,Clear,Clear,2295,root/html532/TEveEventManager.html,https://root.cern,https://root.cern/root/html532/TEveEventManager.html,4,['Clear'],['Clear']
Usability,"TEveElement::Annihilate(); virtual voidTEveElement::AnnihilateElements(); virtual voidTEveProjectable::AnnihilateProjecteds(); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElementList*CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTEveElement::CopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); voidTEveElement::CSCApplyMainColorToAllChildren(); voidTEveElement::CSCApplyMainColorToMatchingChildren(); voidTEveElement::CSCApplyMainTransparencyToAllChildren(); voidTEveElement::CSCApplyMainTransparencyToM",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TEveElementList.html:2358,Clear,Clear,2358,root/html532/TEveElementList.html,https://root.cern,https://root.cern/root/html532/TEveElementList.html,4,['Clear'],['Clear']
Usability,"TEveElement::Annihilate(); virtual voidTEveElement::AnnihilateElements(); virtual voidTEveProjectable::AnnihilateProjecteds(); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElementList*TEveElementList::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidConnect(); virtual voidTNamed::Copy(TObject& named) const; virtual voidTEveElement::CopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); voidTEveElement::CSCApplyMainColorToAllChildren(); voidTEveElement::CSCApplyMainColorToMatchingChildren(); voidTEveElement::CSCApplyMainTransparencyToAllChildren(); void",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TEveViewerList.html:2188,Clear,Clear,2188,root/html532/TEveViewerList.html,https://root.cern,https://root.cern/root/html532/TEveViewerList.html,4,['Clear'],['Clear']
Usability,"TEveElement::Annihilate(); virtual voidTEveElement::AnnihilateElements(); virtual voidTEveProjectable::AnnihilateProjecteds(); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElementList*TEveElementList::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidCopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); voidTEveElement::CSCApplyMainColorToAllChildren(); voidTEveElement::CSCApplyMainColorToMatchingChildren(); voidTEveElement::CSCApplyMainTransparencyToAllChildren(); voidTEveElement::CSCApplyMainTransparenc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TEveTrackList.html:2300,Clear,Clear,2300,root/html532/TEveTrackList.html,https://root.cern,https://root.cern/root/html532/TEveTrackList.html,4,['Clear'],['Clear']
Usability,"TEveElement::Annihilate(); virtual voidTEveElement::AnnihilateElements(); virtual voidTEveProjectable::AnnihilateProjecteds(); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElementList*TEveElementList::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTEveElement::CopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); voidTEveElement::CSCApplyMainColorToAllChildren(); voidTEveElement::CSCApplyMainColorToMatchingChildren(); voidTEveElement::CSCApplyMainTransparencyToAllChildren(); voidTEveElement::CSCApplyMa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TEveElementListProjected.html:2247,Clear,Clear,2247,root/html532/TEveElementListProjected.html,https://root.cern,https://root.cern/root/html532/TEveElementListProjected.html,12,['Clear'],['Clear']
Usability,"TEveElement::Annihilate(); virtual voidTEveElement::AnnihilateElements(); virtual voidTEveProjectable::AnnihilateProjecteds(); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElementList*TEveElementList::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTEveTrackList::CopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); voidTEveElement::CSCApplyMainColorToAllChildren(); voidTEveElement::CSCApplyMainColorToMatchingChildren(); voidTEveElement::CSCApplyMainTransparencyToAllChildren(); voidTEveElement::CSCApply",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TEveTrackListProjected.html:2210,Clear,Clear,2210,root/html532/TEveTrackListProjected.html,https://root.cern,https://root.cern/root/html532/TEveTrackListProjected.html,4,['Clear'],['Clear']
Usability,"TEveElement::Annihilate(); virtual voidTEveElement::AnnihilateElements(); virtual voidTEveProjectable::AnnihilateProjecteds(); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElementList*TEveElementList::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; voidCloseCompound(); virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTEveElement::CopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); voidTEveElement::CSCApplyMainColorToAllChildren(); voidTEveElement::CSCApplyMainColorToMatchingChildren(); voidTEveElement::CSCApplyMainTransparencyToAllChildren(); voidTE",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TEveCompound.html:2190,Clear,Clear,2190,root/html532/TEveCompound.html,https://root.cern,https://root.cern/root/html532/TEveCompound.html,4,['Clear'],['Clear']
Usability,"TEveElement::Annihilate(); virtual voidTEveElement::AnnihilateElements(); virtual voidTEveProjectable::AnnihilateProjecteds(); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElementList*TEveElementList::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; voidTEveCompound::CloseCompound(); virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTEveElement::CopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); voidTEveElement::CSCApplyMainColorToAllChildren(); voidTEveElement::CSCApplyMainColorToMatchingChildren(); voidTEveElement::CSCApplyMainTransparencyToAllChil",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TEveCompoundProjected.html:2171,Clear,Clear,2171,root/html532/TEveCompoundProjected.html,https://root.cern,https://root.cern/root/html532/TEveCompoundProjected.html,4,['Clear'],['Clear']
Usability,"TEveElement::AnnihilateElements(); virtual voidTEveProjectable::AnnihilateProjecteds(); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual Bool_tCanMakeNewSlots() const; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidClearEveFrame(); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElementList*TEveElementList::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTEveElement::CopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); static TEveWindowSlot*CreateDefaultWindowSlot(); static TEveWindowSlot*CreateWindowInTab(TGTab* tab, TEveWindow* eve_parent = 0); static TEveWindowSlot*CreateWindowMainFra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TEveWindow.html:2338,Clear,Clear,2338,root/html532/TEveWindow.html,https://root.cern,https://root.cern/root/html532/TEveWindow.html,4,['Clear'],['Clear']
Usability,"TEveElement::AnnihilateElements(); virtual voidTEveProjectable::AnnihilateProjecteds(); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual Bool_tCanMakeNewSlots() const; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidTEveWindow::ClearEveFrame(); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElementList*TEveElementList::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTEveElement::CopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); static TEveWindowSlot*TEveWindow::CreateDefaultWindowSlot(); static TEveWindowSlot*TEveWindow::CreateWindowInTab(TGTab* tab, TEveWindow* eve_parent = 0); stati",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TEveWindowPack.html:2253,Clear,Clear,2253,root/html532/TEveWindowPack.html,https://root.cern,https://root.cern/root/html532/TEveWindowPack.html,8,['Clear'],['Clear']
Usability,"TEveElement::SetUserData(void* ud); voidTEveElement::SetVizModel(TEveElement* model); voidTEveElement::SetVizTag(const TString& tag); virtual voidShowMembers(TMemberInspector& insp) const; virtual Bool_tTEveElement::SingleRnrState() const; virtual Int_tTNamed::Sizeof() const; voidTEveElement::SpawnEditor()MENU ; TGLEmbeddedViewer*SpawnGLEmbeddedViewer(TGedEditor* ged = 0, Int_t border = 0); TGLSAViewer*SpawnGLViewer(TGedEditor* ged = 0, Bool_t stereo = kFALSE, Bool_t quad_buf = kTRUE); voidTEveElement::StampColorSelection(); voidTEveElement::StampObjProps(); voidTEveElement::StampTransBBox(); voidTEveElement::StampVisibility(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); voidTEveWindow::SwapWindow(TEveWindow* w); static voidTEveWindow::SwapWindows(TEveWindow* w1, TEveWindow* w2); voidTEveWindow::SwapWindowWithCurrent()MENU ; voidSwitchStereo(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTEveElement::TestCSCBits(UChar_t f) const; TEveViewer(const char* n = ""TEveViewer"", const char* t = """"); voidTEveWindow::TitleBarClicked(); voidTEveWindow::UndockWindow()MENU ; voidTEveWindow::UndockWindowDestroySlot()MENU ; virtual voidTEveElement::UnHighlighted(); virtual voidTEveElement::UnSelected(); virtual voidTObject::UseCurrentStyle(); voidTEveElement::VizDB_Apply(const char* tag)MENU ; voidTEveElement::VizDB_Insert(const char* tag, Bool_t replace = kTRUE, Bool_t update = kTRUE)MENU ; voidTEveElement::VizDB_Reapply()MENU ; voidTEveElement::VizDB_UpdateModel(Bool_t update = kTRUE)MENU ; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTEveElement::WriteVizParams(ostream& out, const TString& var).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TEveViewer.html:17945,Undo,UndockWindow,17945,root/html604/TEveViewer.html,https://root.cern,https://root.cern/root/html604/TEveViewer.html,2,['Undo'],"['UndockWindow', 'UndockWindowDestroySlot']"
Usability,"TEventList* test, TNeuron::ENeuronType type = TNeuron::kSigmoid, const char* extF = """", const char* extD = """"); The network is described by a simple string:; The input/output layers are defined by giving; the branch names separated by comas.; Hidden layers are just described by the number of neurons.; The layers are separated by colons.; Ex: ""x,y:10:5:f""; The output can be prepended by '@' if the variable has to be; normalized.; The output can be followed by '!' to use Softmax neurons for the; output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument.; training and test are the two TEventLists defining events; to be used during the neural net training.; Both the TTree and the TEventLists can be defined in the constructor,; or later with the suited setter method. TMultiLayerPerceptron(const char* layout, TTree* data = 0, const char* training = ""Entry$%2==0"", const char* test = """", TNeuron::ENeuronType type = TNeuron::kSigmoid, const char* extF = """", const char* extD = """"); The network is described by a simple string:; The input/output layers are defined by giving; the branch names separated by comas.; Hidden layers are just described by the number of neurons.; The layers are separated by colons.; Ex: ""x,y:10:5:f""; The output can be prepended by '@' if the variable has to be; normalized.; The output can be followed by '!' to use Softmax neurons for the; output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument.; training and test are two cuts (see TTreeFormula) defining events; to be used during the neural net training and testing.; Example: ""Entry$%2"", ""(Entry$+1)%2"".; Both the TTree and the cut can be defined in the constructor,; or later with the suited setter method. TMultiLayerPerceptron(const char* layout, const char* weight, TTree* data = 0, const char* training = ""Entry$%2==0"", const char* test = """", TNeuron::ENeuronType type = TNeuron::kSigmoid, con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMultiLayerPerceptron.html:20878,simpl,simple,20878,root/html528/TMultiLayerPerceptron.html,https://root.cern,https://root.cern/root/html528/TMultiLayerPerceptron.html,10,['simpl'],['simple']
Usability,"TFileCacheRead::fSeekSizeAllocated size of fSeek; Long64_t*TFileCacheRead::fSeekSort[fNseek] Position on file of buffers to be prefetched (sorted); Int_t*TFileCacheRead::fSeekSortLen[fNseek] Length of buffers to be prefetched (sorted); Long64_tfTotalUnzipBytes! The total sum of the currently unzipped blks; TTree*TTreeCache::fTree! pointer to the current Tree; Long64_tfUnzipBufferSize! Max Size for the ready unzipped blocks (default is 2*fBufferSize); char**fUnzipChunks! [fNseek] Individual unzipped chunks. Their summed size is kept under control.; TCondition*fUnzipDoneConditionUsed to wait for an unzip tour to finish. Gives the Async feel.; Int_t*fUnzipLen! [fNseek] Length of the unzipped buffers; TCondition*fUnzipStartConditionUsed to signal the threads to start.; Byte_t*fUnzipStatus! [fNSeek] For each blk, tells us if it's unzipped or pending; TThread*fUnzipThread[10]; Long64_tTTreeCache::fZipBytes! Total compressed size of branches in cache; static Int_tTTreeCache::fgLearnEntriesNumber of entries used for learning mode; static TTreeCacheUnzip::EParUnzipModefgParallelIndicate if we want to activate the parallelism; static Double_tfgRelBuffSizeThis is the percentage of the TTreeCacheUnzip that will be used. private:. char*fCompBuffer; Int_tfCompBufferSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TTreeCacheUnzip(); Default Constructor. TTreeCacheUnzip(TTree* tree, Int_t buffersize = 0); Constructor. void Init(); Initialization procedure common to all the constructors. ~TTreeCacheUnzip(); destructor. (in general called by the TFile destructor; destructor. (in general called by the TFile destructor). void AddBranch(TBranch* b, Bool_t subbranches = kFALSE); add a branch to the list of branches to be stored in the cache; this function is called by TBranch::GetBasket. void AddBranch(const char* branch, Bool_t subbranches = kFALSE); add a branch to the list of branches to be stored in the cache; this function is called by ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTreeCacheUnzip.html:11681,learn,learning,11681,root/html528/TTreeCacheUnzip.html,https://root.cern,https://root.cern/root/html528/TTreeCacheUnzip.html,1,['learn'],['learning']
Usability,"TGDMLParse. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GEOM; » GDML; » TGDMLParse. class TGDMLParse: public TObject. Function Members (Methods); public:. virtual~TGDMLParse(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TGeoVolume*GDMLReadFile(const char* filename = ""test.gdml""); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGDMLParse.html:593,Clear,Clear,593,root/html602/TGDMLParse.html,https://root.cern,https://root.cern/root/html602/TGDMLParse.html,2,['Clear'],['Clear']
Usability,"TGFont*TGProgressBar::fgDefaultFont; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGGC*TGProgressBar::fgDefaultGC; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGHProgressBar(const TGWindow* p = 0, UInt_t w = 4, UInt_t h = kProgressBarTextWidth, Pixel_t back = GetWhitePixel(), Pixel_t barcolor = GetDefaultSelectedBackground(), GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t options = kDoubleBorder|kSunkenFrame); Horizontal progress bar constructor. TGHProgressBar(const TGWindow* p, TGProgressBar::EBarType type, UInt_t w); Simple constructor allow you to create either a standard progress; bar, or a more fancy progress bar (fancy means: double sized border,; white background and a bit wider to allow for text to be printed; in the bar. void ShowPosition(Bool_t set = kTRUE, Bool_t percent = kTRUE, const char* format = ""%.2f""); Show postion text, either in percent or formatted according format. void DoRedraw(); Draw horizontal progress bar. void SavePrimitive(ostream& out, Option_t* option = """"); Save a horizontal progress bar as a C++ statement(s) on output stream out. virtual ~TGHProgressBar(); { }. TGDimension GetDefaultSize() const; { return TGDimension(fWidth, fBarWidth); }. » Author: Fons Rademakers 10/10/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id: TGProgressBar.h 23115 2008-04-10 13:35:37Z rdm $ » Last generated: 2010-09-23 20:06; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGHProgressBar.html:20599,progress bar,progress bar,20599,root/html528/TGHProgressBar.html,https://root.cern,https://root.cern/root/html528/TGHProgressBar.html,3,['progress bar'],['progress bar']
Usability,"TGFont*TGProgressBar::fgDefaultFont; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGGC*TGProgressBar::fgDefaultGC; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGHProgressBar(const TGWindow* p = 0, UInt_t w = 4, UInt_t h = kProgressBarTextWidth, Pixel_t back = GetWhitePixel(), Pixel_t barcolor = GetDefaultSelectedBackground(), GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t options = kDoubleBorder|kSunkenFrame); Horizontal progress bar constructor. TGHProgressBar(const TGWindow* p, TGProgressBar::EBarType type, UInt_t w); Simple constructor allow you to create either a standard progress; bar, or a more fancy progress bar (fancy means: double sized border,; white background and a bit wider to allow for text to be printed; in the bar. void ShowPosition(Bool_t set = kTRUE, Bool_t percent = kTRUE, const char* format = ""%.2f""); Show postion text, either in percent or formatted according format. void DoRedraw(); Draw horizontal progress bar. void SavePrimitive(ostream& out, Option_t* option = """"); Save a horizontal progress bar as a C++ statement(s) on output stream out. virtual ~TGHProgressBar(); { }. TGDimension GetDefaultSize() const; { return TGDimension(fWidth, fBarWidth); }. » Author: Fons Rademakers 10/10/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id: TGProgressBar.h 23115 2008-04-10 13:35:37Z rdm $ » Last generated: 2011-07-04 15:28; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGHProgressBar.html:20699,progress bar,progress bar,20699,root/html530/TGHProgressBar.html,https://root.cern,https://root.cern/root/html530/TGHProgressBar.html,3,['progress bar'],['progress bar']
Usability,"TGFont*TGProgressBar::fgDefaultFont; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGGC*TGProgressBar::fgDefaultGC; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGHProgressBar(const TGWindow* p = 0, UInt_t w = 4, UInt_t h = kProgressBarTextWidth, Pixel_t back = GetWhitePixel(), Pixel_t barcolor = GetDefaultSelectedBackground(), GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t options = kDoubleBorder|kSunkenFrame); Horizontal progress bar constructor. TGHProgressBar(const TGWindow* p, TGProgressBar::EBarType type, UInt_t w); Simple constructor allow you to create either a standard progress; bar, or a more fancy progress bar (fancy means: double sized border,; white background and a bit wider to allow for text to be printed; in the bar. void ShowPosition(Bool_t set = kTRUE, Bool_t percent = kTRUE, const char* format = ""%.2f""); Show postion text, either in percent or formatted according format. void DoRedraw(); Draw horizontal progress bar. void SavePrimitive(ostream& out, Option_t* option = """"); Save a horizontal progress bar as a C++ statement(s) on output stream out. virtual ~TGHProgressBar(); { }. TGDimension GetDefaultSize() const; { return TGDimension(fWidth, fBarWidth); }. » Author: Fons Rademakers 10/10/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id: TGProgressBar.h 23115 2008-04-10 13:35:37Z rdm $ » Last generated: 2011-11-03 20:14; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGHProgressBar.html:20699,progress bar,progress bar,20699,root/html532/TGHProgressBar.html,https://root.cern,https://root.cern/root/html532/TGHProgressBar.html,7,"['Simpl', 'progress bar']","['Simple', 'progress bar']"
Usability,"TGFrame::Activate(Bool_t); virtual voidAddEntry(TGString* s, Int_t id); virtual voidAddEntry(const char* s, Int_t id); virtual voidAddEntry(TGLBEntry* lbe, TGLayoutHints* lhints); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual voidTGWidget::Associate(const TGWindow* w); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(); Bool_tTQObject::Disconnect(const char* signal = 0, void* receive",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGComboBox.html:2384,Clear,Clear,2384,root/html532/TGComboBox.html,https://root.cern,https://root.cern/root/html532/TGComboBox.html,4,['Clear'],['Clear']
Usability,"TGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidBindKeys(Bool_t on = kTRUE); voidBindMenuKeys(Bool_t on = kTRUE); static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidDoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); virtual voidTGButton::EmitSignals(Bool_t wasUp); static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; const TGResourcePool*TGFrame::GetResourcePool() const; virtual void*TGFrame::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidInit(); voidTObject::MakeZombie(); Int_tTGWidget::SetFlags(Int_t flags); virtual voidTGButton::SetToggleButton(Bool_t); virtual voidTGFrame::StartGuiBuilding(Bool_t on = kTRUE). private:. TGSplitButton(const TGSplitButton&); voidCalcSize(); voidDrawTriangle(const GContext_t gc, Int_t x, Int_t y); Bool_tHandleSButton(Event_t* event); Bool_tHandleSCrossing(Event_t* event); Bool_tHandleSKey(Event_t* event); TGSplitButton&operator=(const TGSplitButton&); voidSetMenuState(Bool_t state). Data Members; public:. enum TGFrame::[unnamed] { kDeleteWindowCalled; };; enum TGWindow::EE",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGSplitButton.html:19426,Clear,ClearFlags,19426,root/html532/TGSplitButton.html,https://root.cern,https://root.cern/root/html532/TGSplitButton.html,2,['Clear'],['ClearFlags']
Usability,"TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGTextEdit(const TGWindow* parent = 0, UInt_t w = 1, UInt_t h = 1, Int_t id = -1, UInt_t sboptions = 0, Pixel_t back = GetWhitePixel()); Create a text edit widget. TGTextEdit(const TGWindow* parent, UInt_t w, UInt_t h, TGText* text, Int_t id = -1, UInt_t sboptions = 0, Pixel_t back = GetWhitePixel()); Create a text edit widget. Initialize it with the specified text buffer. TGTextEdit(const TGWindow* parent, UInt_t w, UInt_t h, const char* string, Int_t id = -1, UInt_t sboptions = 0, Pixel_t back = GetWhitePixel()); Create a text edit widget. Initialize it with the specified string. ~TGTextEdit(); Cleanup text edit widget. void Init(); Initiliaze a text edit widget. void SetMenuState(); Enable/disable menu items in function of what is possible. Long_t ReturnLongestLineWidth(); Return width of longest line in widget. void Clear(Option_t* = """"); Clear text edit widget. Bool_t SaveFile(const char* fname, Bool_t saveas = kFALSE); Save file. If filename==0 ask user via dialog for a filename, if in; addition saveas==kTRUE always ask for new filename. Returns; kTRUE if file was correctly saved, kFALSE otherwise. Bool_t Copy(); Copy text. Bool_t Cut(); Cut text. Bool_t Paste(); Paste text into widget. void Print(Option_t* = """") const; Send current buffer to printer. void Delete(Option_t* = """"); Delete selection. Bool_t Search(const char* string, Bool_t direction = kTRUE, Bool_t caseSensitive = kFALSE); Search for string in the specified direction. If direction is true; the search will be in forward direction. Bool_t Replace(TGLongPosition pos, const char* oldText, const char* newText, Bool_t direction, Bool_t caseSensitive); Replace text starting at textPos. Bool_t Goto(Long_t line, Long_t column = 0); Goto the specified line. void SetInsertMode(TGTextEdit::EInsertMode mode = kInsert); Sets the mode how characters are entered. vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGTextEdit.html:28066,Clear,Clear,28066,root/html532/TGTextEdit.html,https://root.cern,https://root.cern/root/html532/TGTextEdit.html,4,['Clear'],['Clear']
Usability,"TGFrameElement* el); virtual voidAddEntry(TGLBEntry* lbe, TGLayoutHints* lhints); virtual voidAddEntrySort(TGLBEntry* lbe, TGLayoutHints* lhints); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTGContainer::AdjustPosition(); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual voidAssociate(const TGWindow* w); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual voidTGContainer::ClearViewPort(); virtual voidTGContainer::Clicked(TGFrame* f, Int_t btn)SIGNAL ; virtual voidTGContainer::Clicked(TGFrame* f, Int_t btn, Int_t x, Int_t y)SIGNAL ; virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGContainer::CurrentChanged(TGFrame* f)SIGNAL ; virtual voidTGContaine",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGLBContainer.html:2242,Clear,Clear,2242,root/html532/TGLBContainer.html,https://root.cern,https://root.cern/root/html532/TGLBContainer.html,4,['Clear'],['Clear']
Usability,"TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. private:. TGTextButton*fCloseOK button; TGLayoutHints*fL1layout of TGTextEdit; TGLayoutHints*fL2layout of OK button; TGTextView*fTextViewText view widget; TSessionViewer*fViewerpointer on main viewer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSessionLogView(TSessionViewer* viewer, UInt_t w, UInt_t h); Create an editor in a dialog. ~TSessionLogView(). void SetTitle(); Set title in editor window. void Popup(); Show editor. void AddBuffer(const char* buffer); Load a text buffer in the editor. void ClearLogView(); Clear log window. void LoadBuffer(const char* buffer); Load a text buffer in the editor. void LoadFile(const char* file); Load a file in the editor. void CloseWindow(); Called when closed via window manager action. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process OK button. » Author: Bertrand Bellenot, Gerri Ganis 15/09/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id: TSessionLogView.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TSessionLogView.html:22407,Clear,ClearLogView,22407,root/html532/TSessionLogView.html,https://root.cern,https://root.cern/root/html532/TSessionLogView.html,2,['Clear'],"['Clear', 'ClearLogView']"
Usability,"TGLayoutHints* lhints); virtual voidAddEntrySort(TGString* s, Int_t id); virtual voidAddEntrySort(const char* s, Int_t id); virtual voidAddEntrySort(TGLBEntry* lbe, TGLayoutHints* lhints); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual voidTGWidget::Associate(const TGWindow* w); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(); Bool_tTQObject::Disconnect(const char* signal = 0, void* receive",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGListBox.html:2337,Clear,Clear,2337,root/html532/TGListBox.html,https://root.cern,https://root.cern/root/html532/TGListBox.html,4,['Clear'],['Clear']
Usability,"TGMdiFrame(TGMdiMainFrame* main, Int_t w, Int_t h, UInt_t options = 0, Pixel_t back = GetDefaultFrameBackground()); virtual~TGMdiFrame(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Bool_tCloseWindow()SIGNAL ; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(); Bool_tTQObject::Disconnect(c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGMdiFrame.html:1385,Clear,Clear,1385,root/html532/TGMdiFrame.html,https://root.cern,https://root.cern/root/html532/TGMdiFrame.html,2,['Clear'],['Clear']
Usability,"TGNumberEntry*fPointSizeScale; TGCheckButton*fPointSmooth; TGGroupFrame*fRefContainer; TGCheckButton*fReferenceOn; TGNumberEntry*fReferencePosX; TGNumberEntry*fReferencePosY; TGNumberEntry*fReferencePosZ; TGCheckButton*fResetCamerasOnUpdate; TGCheckButton*fRotateSceneOn; TGNumberEntry*fSceneRotDt; TGNumberEntry*fStereoEyeOffsetFac; TGCompositeFrame*fStereoFrame; TGNumberEntry*fStereoFrustumAsymFac; TGNumberEntry*fStereoZeroParallax; TGTextButton*fUpdateScene; TGLViewer*fViewer; TGNumberEntry*fWFLineWidth. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLViewerEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor. ~TGLViewerEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void ViewerRedraw(); Initiate redraw of the viewer. void SetModel(TObject* obj); Sets model or disables/hides viewer. void DoClearColor(Pixel_t color); Clear-color was changed. void DoIgnoreSizesOnUpdate(); ResetCamerasOnUpdate was toggled. void DoResetCamerasOnUpdate(); ResetCamerasOnUpdate was toggled. void DoUpdateScene(); UpdateScene was clicked. void DoCameraHome(); CameraHome was clicked. void UpdateMaxDrawTimes(); Slot for fMaxSceneDrawTimeHQ and fMaxSceneDrawTimeLQ. void UpdatePointLineStuff(); Slot for point-sizes and line-widths. void DoCameraOverlay(); Update viewer with GUI state. void DoCameraCenterExt(); Set external camera center. void DoCaptureCenter(); Capture camera-center via picking. void DoDrawCameraCenter(); Draw camera center. void UpdateCameraCenter(); Update current camera with GUI state. void DoAnnotation(); Create annotation via picking. void UpdateViewerAxes(Int_t id); Update viewer with GUI state. void UpdateViewerReference(); Update viewer with GUI state. TGNumberEntry* MakeLabeledNEntry(TGCompositeFrame* p, const char* name, Int_t labelw, Int_t nd = 7, Int_t s = 5); Helper function to create fixed w",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGLViewerEditor.html:22701,Clear,Clear-color,22701,root/html534/TGLViewerEditor.html,https://root.cern,https://root.cern/root/html534/TGLViewerEditor.html,3,['Clear'],['Clear-color']
Usability,"TGNumberEntryLayout Layout manager for number entry widget; TGNumberFormat Class defining namespace for several enums used by TGNumberEntry; TGObject ROOT GUI base class; TGPack Horizontal or vertical stack of frames.; TGPasswdDialog Dialog for entering passwords; TGPicture Pictures and icons used by the GUI classes; TGPictureButton A picture button widget; TGPicturePool Picture and icon cache; TGPopupMenu Popup menu; TGPosition Position object (x and y are Int_t); TGPrintDialog Print dialog used by TGTextEdit widget; TGProgressBar Progress bar abstract base class; TGQt Interface to Qt GUI; TGRadioButton A radio button widget; TGRecorder GUI class of the event recorder.; TGRectMap Rectangle used in TMap; TGRectangle Rectangle object; TGRedirectOutputGuard Exception safe output redirection; TGRegion Describes a region; TGRegionWithId Region with id, tooltip text and popup menu; TGResourcePool Graphics resource pool; TGRowLayout Row layout manager; TGScrollBar Scrollbar widget; TGScrollBarElement Scrollbar element (head, tail, slider); TGSearchDialog Text search dialog used by TGTextEdit widget; TGSearchType ; TGSelectedPicture Selected looking picture; TGShapedFrame Shaped composite frame; TGShutter Shutter widget; TGShutterItem Shutter widget item; TGSimpleTable A simple table that owns it's interface.; TGSimpleTableInterface Interface to data in a 2D array of Double_t; TGSlider Slider widget abstract base class; TGSpeedo Base class for analog meter widget; TGSplitButton a split button widget; TGSplitFrame Splittable composite frame; TGSplitTool Split frame tool utility; TGSplitter A frame splitter abstract base class; TGStatusBar Status bar widget; TGString Graphics string; TGTRA GTRA shape; TGTab Tab widget; TGTabElement Little tab on tab widget; TGTabLayout Layout manager for TGTab widget; TGTable A table used to visualize data from diffent sources.; TGTableCell A single cell in a TGTable.; TGTableFrame A frame used internally by TGTable.; TGTableHeader Header for",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ClassIndex.html:83144,simpl,simple,83144,root/html528/ClassIndex.html,https://root.cern,https://root.cern/root/html528/ClassIndex.html,1,['simpl'],['simple']
Usability,"TGProgressBar.cxx. ◆ SetBarType(). void TGProgressBar::SetBarType ; (; EBarType ; type). Set bar type. ; Definition at line 146 of file TGProgressBar.cxx. ◆ SetFillType(). void TGProgressBar::SetFillType ; (; EFillType ; type). Set fill type. ; Definition at line 136 of file TGProgressBar.cxx. ◆ SetForegroundColor(). void TGProgressBar::SetForegroundColor ; (; Pixel_t ; pixel). overridevirtual . Change text color drawing. ; Reimplemented from TGFrame.; Definition at line 207 of file TGProgressBar.cxx. ◆ SetMax(). void TGProgressBar::SetMax ; (; Float_t ; max). inline . Definition at line 82 of file TGProgressBar.h. ◆ SetMin(). void TGProgressBar::SetMin ; (; Float_t ; min). inline . Definition at line 81 of file TGProgressBar.h. ◆ SetPosition(). void TGProgressBar::SetPosition ; (; Float_t ; pos). Set progress position between [min,max]. ; Definition at line 92 of file TGProgressBar.cxx. ◆ SetRange(). void TGProgressBar::SetRange ; (; Float_t ; min, . Float_t ; max . ). Set min and max of progress bar. ; Definition at line 66 of file TGProgressBar.cxx. ◆ ShowPos(). virtual void TGProgressBar::ShowPos ; (; Bool_t ; on). inlinevirtual . Reimplemented in TGVProgressBar.; Definition at line 79 of file TGProgressBar.h. ◆ Streamer(). void TGProgressBar::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGFrame.; Reimplemented in TGVProgressBar. ◆ StreamerNVirtual(). void TGProgressBar::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 90 of file TGProgressBar.h. ◆ UsePercent(). Bool_t TGProgressBar::UsePercent ; (; ); const. inline . Definition at line 68 of file TGProgressBar.h. Member Data Documentation. ◆ fBarColorGC. TGGC TGProgressBar::fBarColorGC. protected . progress bar drawing context ; Definition at line 39 of file TGProgressBar.h. ◆ fBarType. EBarType TGProgressBar::fBarType. protected . OPTION={GetMethod=""GetBarType"";SetMethod=""SetBarType"";Items=(kStandard=""Standa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGProgressBar.html:36267,progress bar,progress bar,36267,doc/master/classTGProgressBar.html,https://root.cern,https://root.cern/doc/master/classTGProgressBar.html,1,['progress bar'],['progress bar']
Usability,"TGTextButton*fUndoUndo-Button; UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoEltuEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for para editor. ~TGeoEltuEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the selected object. void DoName(); Slot for name. Bool_t IsDelayed() const; Check if shape drawing is delayed. void DoApply(); Slot for applying current settings. void DoModified(); Slot for notifying modifications. void DoUndo(); Slot for undoing last operation. void DoA(); Slot for A. void DoB(); Slot for B. void DoDz(); Slot for Z. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id$ » Last generated: 2015-03-14 16:39; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoEltuEditor.html:21262,undo,undoing,21262,root/html534/TGeoEltuEditor.html,https://root.cern,https://root.cern/root/html534/TGeoEltuEditor.html,2,['undo'],['undoing']
Usability,"TGWindow* p = 0, UInt_t w = 1, UInt_t h = 1, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); ~TGHeaderFrame(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(); Bool_tTQObject::Disconnect(const char* signal = 0, void* receive",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGHeaderFrame.html:2473,Clear,Clear,2473,root/html532/TGHeaderFrame.html,https://root.cern,https://root.cern/root/html532/TGHeaderFrame.html,2,['Clear'],['Clear']
Usability,"TGWindow* p, const TGWindow* m, UInt_t w, UInt_t h, UInt_t options = 0, Pixel_t back = GetDefaultFrameBackground()); virtual~TGedPopup(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(); Bool_tTQObject::Disconnect(const char* signal = 0, void* receive",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGedPopup.html:2068,Clear,Clear,2068,root/html532/TGedPopup.html,https://root.cern,https://root.cern/root/html532/TGedPopup.html,2,['Clear'],['Clear']
Usability,"TGeoCtub(); TGeoCtub(Double_t* params); TGeoCtub(const TGeoCtub&); TGeoCtub(Double_t rmin, Double_t rmax, Double_t dz, Double_t phi1, Double_t phi2, Double_t lx, Double_t ly, Double_t lz, Double_t tx, Double_t ty, Double_t tz); TGeoCtub(const char* name, Double_t rmin, Double_t rmax, Double_t dz, Double_t phi1, Double_t phi2, Double_t lx, Double_t ly, Double_t lz, Double_t tx, Double_t ty, Double_t tz); virtual~TGeoCtub(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGeoTubeSeg::AfterStreamer(); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTGeoBBox::AreOverlapping(const TGeoBBox* box1, const TGeoMatrix* mat1, const TGeoBBox* box2, const TGeoMatrix* mat2); static Double_tTGeoShape::Big(); virtual voidTObject::Browse(TBrowser* b); virtual Double_tCapacity() const; voidTGeoShape::CheckShape(Int_t testNo, Int_t nsamples = 10000, Option_t* option = """"); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTGeoShape::ClearThreadData() const; virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidComputeBBox(); static Double_tTGeoShape::ComputeEpsMch(); virtual voidComputeNormal(const Double_t* point, const Double_t* dir, Double_t* norm); virtual voidComputeNormal_v(const Double_t* points, const Double_t* dirs, Double_t* norms, Int_t vecsize); static voidTGeoTubeSeg::ComputeNormalS(const Double_t* point, const Double_t* dir, Double_t* norm, Double_t rmin, Double_t rmax, Double_t dz, Double_t c1, Double_t s1, Double_t c2, Double_t s2); virtual Bool_tContains(const Double_t* point) const; virtual voidContains_v(const Double_t* points, Bool_t* inside, Int_t vecsize) const; virtual voidTNamed::Copy(TObject& named) const; virtual Bool_tTGeoBBox::CouldBeCrossed(const Double_t* point, const Double_t* dir) const; virtual voidTGeoShape::CreateThreadData(Int_t); virtual voidTObject::De",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoCtub.html:2030,Clear,Clear,2030,root/html534/TGeoCtub.html,https://root.cern,https://root.cern/root/html534/TGeoCtub.html,1,['Clear'],['Clear']
Usability,"TIME; 335 void AddAllocationTime(ULong64_t time) { fAllocationTime += time; }; 336#endif; 337 void AddAllocationCount(UInt_t count) { fAllocationCount += count; }; 338 virtual Long64_t AutoSave(Option_t* option = """");; 339 ; 340 /// Add a new branch, and infer the data type from the type of `obj` being passed.; 341 ///; 342 /// \note This and the next overload should cover most cases for creating a branch. Try to use these two whenever; 343 /// possible, unless e.g. type conversions are needed.; 344 ///; 345 /// \param[in] name Name of the branch to be created.; 346 /// \param[in] obj Address of the object to be added. Make sure to pass a pointer to the actual type/class that; 347 /// should be stored in the tree (no pointers to base classes). When calling Fill(), the current value of the type/object will be saved.; 348 /// \param[in] bufsize The buffer size in bytes for this branch. When the buffer is full, it is compressed and written to disc.; 349 /// The default value of 32000 bytes and should be ok for most simple types. Larger buffers (e.g. 256000) if your Tree is not split and each entry is large (Megabytes).; 350 /// A small value for bufsize is beneficial if entries in the Tree are accessed randomly and the Tree is in split mode.; 351 /// \param[in] splitlevel If T is a class or struct and splitlevel > 0, the members of the object are serialised as separate branches.; 352 /// \return Pointer to the TBranch that was created. The branch is owned by the tree.; 353 template <class T> TBranch *Branch(const char* name, T* obj, Int_t bufsize = 32000, Int_t splitlevel = 99); 354 {; 355 return BranchImpRef(name, TClass::GetClass<T>(), TDataType::GetType(typeid(T)), obj, bufsize, splitlevel);; 356 }; 357 ; 358 /// Add a new branch, and infer the data type from the array `addobj` being passed.; 359 ///; 360 /// \note This and the previous overload should cover most cases for creating a branch. Try to use these two whenever; 361 /// possible, unless e.g. type conversio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8h_source.html:16765,simpl,simple,16765,doc/master/TTree_8h_source.html,https://root.cern,https://root.cern/doc/master/TTree_8h_source.html,1,['simpl'],['simple']
Usability,"TList::fFirst! pointer to first entry in linked list; TObjLink*TList::fLast! pointer to last entry in linked list; UInt_tfLimitmaximum number of commands can be located in stack; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; TList*fLogBooklisting of all actions during execution; Bool_tfLoggingkTRUE if logging is ON; Int_tTQCommand::fNRargsnumber of redo arguments; Int_tTQCommand::fNUargsnumber of undo arguments; TStringTQCommand::fNamecommand name. Default is ""ClassName::RedoName(args)""; TStringTCollection::fNamename of the collection; Bool_tTQCommand::fNewDeletekTRUE if Redo/Undo methods are new/delete; void*TQCommand::fObjectobject to which undo/redo actions applied; TQConnection*TQCommand::fRedodo/redo action; Long_t*TQCommand::fRedoArgsredo values; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Int_tTCollection::fSizenumber of elements in collection; Bool_tTSeqCollection::fSortedtrue if collection has been sorted; Int_tTQCommand::fState-1 undoing on, 1 redoing on, 0 nothing in progress; Int_tTQCommand::fStatusfStatus++ after Redo(), fStatus-- after Undo(); TStringTQCommand::fTitlecommand description; TQConnection*TQCommand::fUndoundo action; Long_t*TQCommand::fUndoArgsundo values; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TCollection::(anonymous)TCollection::kIsOwner. Class Charts. Inheritance Chart:. TObject. ←; TCollection. ←; TSeqCollection. ←; TList. TQObject. ←; TQCommand. ←; TQUndoManager. Function documentation; TQUndoManager(); Constructor. ~TQUndoManager(); Destructor. void ls(Option_t* option = """") const; Lists all commands in stack. void PrintCollectionEntry(TObject* entry, Option_t* option, Int_t recurse) const; Print collection entry. void SetLogging(Bool_t on = kTRUE); Start logging. Delete all previous log records; Note: logging is not implemented yet. void Add(TObject* obj, Option_t* o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TQUndoManager.html:18588,undo,undo,18588,root/html602/TQUndoManager.html,https://root.cern,https://root.cern/root/html602/TQUndoManager.html,12,"['Undo', 'undo']","['Undo', 'undo', 'undoing']"
Usability,"TMVA::MethodBase::fAnalysisTypemethod-mode : true --> regression, false --> classification; UInt_tTMVA::MethodBase::fBackgroundClassindex of the Background-class; vector<TString>*TMVA::MethodBase::fInputVarsvector of input variables used in MVA; vector<Float_t>*TMVA::MethodBase::fMulticlassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase::fNbinsnumber of bins in representative histograms; Int_tTMVA::MethodBase::fNbinsHnumber of bins in evaluation histograms; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. TStringfHiddenLayerstring containig the hidden layer structure; TStringfLayerSpecLayer specification option; TStringfLearningMethodthe learning method (given via option string); TTree*fLocalTrainingTreelocal copy of training tree; TMultiLayerPerceptron*fMLPthe TMLP; TStringfMLPBuildOptionsoption string to build the mlp; Int_tfNcyclesnumber of training cylcles; Double_tfValidationFractionfraction of events in training tree used for cross validation. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodTMlpANN(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = ""3000:N-1:N-2"", TDirectory* theTargetDir = 0); standard constructor. MethodTMlpANN(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir = NULL); constructor from weight file. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); TMlpANN can handle classification with 2 classes. void Init( void ); default initialisations. ~MethodTMlpANN( void ); destructor. void CreateMLPOptions(TString ); translates options from option string into TMlpANN language. void DeclareOptions(); define t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodTMlpANN.html:15851,learn,learning,15851,root/html528/TMVA__MethodTMlpANN.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodTMlpANN.html,1,['learn'],['learning']
Usability,"TMVA::RuleEnsemble::SetModelFull ; (; ). inline . Definition at line 96 of file RuleEnsemble.h. ◆ SetModelLinear(). void TMVA::RuleEnsemble::SetModelLinear ; (; ). inline . Definition at line 90 of file RuleEnsemble.h. ◆ SetModelRules(). void TMVA::RuleEnsemble::SetModelRules ; (; ). inline . Definition at line 93 of file RuleEnsemble.h. ◆ SetMsgType(). void TMVA::RuleEnsemble::SetMsgType ; (; EMsgType ; t). Definition at line 154 of file RuleEnsemble.cxx. ◆ SetOffset(). void TMVA::RuleEnsemble::SetOffset ; (; Double_t ; v = 0.0). inline . Definition at line 108 of file RuleEnsemble.h. ◆ SetRuleFit(). void TMVA::RuleEnsemble::SetRuleFit ; (; const RuleFit * ; rf). inline . Definition at line 102 of file RuleEnsemble.h. ◆ SetRuleMinDist(). void TMVA::RuleEnsemble::SetRuleMinDist ; (; Double_t ; d). inline . Definition at line 124 of file RuleEnsemble.h. ◆ SetRules(). void TMVA::RuleEnsemble::SetRules ; (; const std::vector< TMVA::Rule * > & ; rules). set rules ; first clear all ; Definition at line 531 of file RuleEnsemble.cxx. ◆ UpdateEventVal(). void TMVA::RuleEnsemble::UpdateEventVal ; (; ). inline . Definition at line 387 of file RuleEnsemble.h. Friends And Related Symbol Documentation. ◆ operator<<. std::ostream & operator<< ; (; std::ostream & ; os, . const RuleEnsemble & ; rules . ). friend . Member Data Documentation. ◆ fAverageRuleSigma. Double_t TMVA::RuleEnsemble::fAverageRuleSigma. private . average rule sigma ; Definition at line 353 of file RuleEnsemble.h. ◆ fAverageSupport. Double_t TMVA::RuleEnsemble::fAverageSupport. private . average support (over all rules) ; Definition at line 352 of file RuleEnsemble.h. ◆ fEvent. const Event* TMVA::RuleEnsemble::fEvent. private . current event. ; Definition at line 368 of file RuleEnsemble.h. ◆ fEventCacheOK. Bool_t TMVA::RuleEnsemble::fEventCacheOK. private . true if rule/linear respons are updated ; Definition at line 369 of file RuleEnsemble.h. ◆ fEventLinearVal. std::vector<Double_t> TMVA::RuleEnsemble::fEvent",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1RuleEnsemble.html:32333,clear,clear,32333,doc/master/classTMVA_1_1RuleEnsemble.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1RuleEnsemble.html,1,['clear'],['clear']
Usability,"TNet< Architecture_t, Layer_t > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Attributes |; List of all members ; TMVA::DNN::TNet< Architecture_t, Layer_t > Class Template Reference. ; template<typename Architecture_t, typename Layer_t = TLayer<Architecture_t>>; class TMVA::DNN::TNet< Architecture_t, Layer_t >Generic neural network class. ; This generic neural network class represents a concrete neural network through a vector of layers and coordinates the forward and backward propagation through the net.; The net takes as input a batch from the training data given in matrix form, with each row corresponding to a certain training event.; On construction, the neural network allocates all the memory required for the training of the neural net and keeps it until its destruction.; The Architecture type argument simply holds the architecture-specific data types, which are just the matrix type Matrix_t and the used scalar type Scalar_t.; Template Parameters. ArchitectureThe Architecture type that holds the ; Layer_tThe type used for the layers. Can be either Layer<Architecture> or SharedWeightLayer<Architecture>. datatypes for a given architecture. . Definition at line 49 of file Net.h. Public Types; using LayerIterator_t = typename std::vector< Layer_t >::iterator;  ; using Matrix_t = typename Architecture_t::Matrix_t;  ; using Scalar_t = typename Architecture_t::Scalar_t;  . Public Member Functions;  TNet ();  ;  TNet (const TNet &other);  ; template<typename OtherArchitecture_t > ;  TNet (size_t batchSize, const TNet< OtherArchitecture_t > &);  ;  TNet (size_t batchSize, size_t inputWidth, ELossFunction fJ, ERegularization fR=ERegularization::kNone, Scalar_t fWeightDecay=0.0);  Construct a neural net for a given batch size with given output function * and regularization. ;  ; template<typename SharedLayer > ; void AddLayer (SharedLayer ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TNet.html:973,simpl,simply,973,doc/master/classTMVA_1_1DNN_1_1TNet.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TNet.html,1,['simpl'],['simply']
Usability,"TObjLink*TList::NewLink(TObject* obj, TObjLink* prev = NULL); virtual TObjLink*TList::NewOptLink(TObject* obj, Option_t* opt, TObjLink* prev = NULL); virtual voidTCollection::PrintCollectionEntry(TObject* entry, Option_t* option, Int_t recurse) const; virtual voidPrintCollectionHeader(Option_t* option) const. private:. TQCommand&operator=(const TQCommand&). Data Members; public:. enum TCollection::[unnamed] { kIsOwner; kInitCapacity; kInitHashTableCapacity; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Bool_tTList::fAscending! sorting order (when calling Sort() or for TSortedList); TObjLink*TList::fCache! cache to speedup sequential calling of Before() and After() functions; TObjLink*TList::fFirst! pointer to first entry in linked list; TObjLink*TList::fLast! pointer to last entry in linked list; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Int_tfNRargsnumber of redo arguments; Int_tfNUargsnumber of undo arguments; TStringfNamecommand name. Default is ""ClassName::RedoName(args)""; TStringTCollection::fNamename of the collection; Bool_tfNewDeletekTRUE if Redo/Undo methods are new/delete; void*fObjectobject to which undo/redo actions applied; TQConnection*fRedodo/redo action; Long_t*fRedoArgsredo values; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Int_tTCollection::fSizenumber of elements in collection; Bool_tTSeqCollection::fSortedtrue if collection has been sorted; Int_tfState-1 undoing on, 1 redoing on, 0 nothing in progress; Int_tfStatusfStatus++ after Redo(), fStatus-- after Undo(); TStringfTitlecommand description; TQConnection*fUndoundo action; Long_t*fUndoArgsundo values; static Bool_tTQObject::fgAllSignalsBlockedflag used f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TQCommand.html:17016,undo,undo,17016,root/html534/TQCommand.html,https://root.cern,https://root.cern/root/html534/TQCommand.html,2,['undo'],['undo']
Usability,"TObject * ; obj, . Bool_t ; check . ). virtual . Emits signal when double clicking on icon. ; Definition at line 2562 of file TRootBrowserLite.cxx. ◆ CheckObjectItem(). void TRootBrowserLite::CheckObjectItem ; (; TObject * ; obj, . Bool_t ; check = kFALSE . ). overridevirtual . Check / uncheck the TGListTreeItem corresponding to this object and add a checkmark on TGLVEntry if check = kTRUE. ; Reimplemented from TBrowserImp.; Definition at line 1347 of file TRootBrowserLite.cxx. ◆ Class(). static TClass * TRootBrowserLite::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TRootBrowserLite::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TRootBrowserLite::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 165 of file TRootBrowserLite.h. ◆ ClearHistory(). void TRootBrowserLite::ClearHistory ; (; ). private . clear navigation history ; Definition at line 2301 of file TRootBrowserLite.cxx. ◆ CloseTabs(). void TRootBrowserLite::CloseTabs ; (; ). inlineoverridevirtual . Reimplemented from TBrowserImp.; Definition at line 131 of file TRootBrowserLite.h. ◆ CloseWindow(). void TRootBrowserLite::CloseWindow ; (; ). overridevirtual . In case window is closed via WM we get here. ; Reimplemented from TGMainFrame.; Definition at line 1578 of file TRootBrowserLite.cxx. ◆ CreateBrowser(). void TRootBrowserLite::CreateBrowser ; (; const char * ; name). private . Create the actual browser. ; Definition at line 977 of file TRootBrowserLite.cxx. ◆ DeclFileName(). static const char * TRootBrowserLite::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 165 of file TRootBrowserLite.h. ◆ DeleteListTreeItem(). void TRootBrowserLite::DeleteListTreeItem ; (; TGListTreeItem * ; item). private . delete list tree item, remove it from history ; Definition at line 2385 of file TRootBrowserLite.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRootBrowserLite.html:46674,clear,clear,46674,doc/master/classTRootBrowserLite.html,https://root.cern,https://root.cern/doc/master/classTRootBrowserLite.html,1,['clear'],['clear']
Usability,"TObject* after, TObject* obj); virtual voidAddAfter(TObjLink* after, TObject* obj); virtual voidTCollection::AddAll(const TCollection* col); virtual voidAddAt(TObject* obj, Int_t idx); virtual voidAddBefore(const TObject* before, TObject* obj); virtual voidAddBefore(TObjLink* before, TObject* obj); virtual voidAddFirst(TObject* obj); virtual voidAddFirst(TObject* obj, Option_t* opt); virtual voidAddLast(TObject* obj); virtual voidAddLast(TObject* obj, Option_t* opt); voidTCollection::AddVector(TObject* obj1); virtual TObject*TList::After(const TObject* obj) const; virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTCollection::AssertClass(TClass* cl) const; virtual TObject*TList::At(Int_t idx) const; Float_tTHashList::AverageCollisions() const; virtual TObject*TList::Before(const TObject* obj) const; virtual voidTCollection::Browse(TBrowser* b); Int_tTCollection::Capacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTHashList::Clear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; virtual Int_tTCollection::Compare(const TObject* obj) const; Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTHashList::Delete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTCollection::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTCollection::Dump() const; static voidTCollection::EmptyGarbageCollection(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TSelectorList.html:1825,Clear,Clear,1825,root/html534/TSelectorList.html,https://root.cern,https://root.cern/root/html534/TSelectorList.html,1,['Clear'],['Clear']
Usability,"TObject::AppendPad(Option_t* option = """"); Int_tTProof::Archive(Int_t query, const char* url); Int_tTProof::Archive(const char* queryref, const char* url = 0); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTProof::Browse(TBrowser* b); virtual Bool_tCancelStagingDataSet(const char* dataset); voidTProof::cd(Int_t id = -1); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; Int_tTProof::CleanupSession(const char* sessiontag); virtual voidTNamed::Clear(Option_t* option = """"); virtual voidClearCache(const char* file = 0); voidTProof::ClearData(UInt_t what = kUnregistered, const char* dsname = 0); virtual voidClearDataSetCache(const char* dataset = 0); voidTProof::ClearFeedback(); voidTProof::ClearInput(); voidTProof::ClearInputData(TObject* obj = 0); voidTProof::ClearInputData(const char* name); Int_tTProof::ClearPackage(const char* package); Int_tTProof::ClearPackages(); virtual TObject*TNamed::Clone(const char* newname = """") const; voidTProof::Close(Option_t* option = """"); voidTProof::CloseProgressDialog()SIGNAL ; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTNamed::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidTNamed::Copy(TObject& named) const; TDrawFeedback*TProof::CreateDrawFeedback(); voidTProof::DataSetStatus(const char* msg, Bool_t status, Int_t done, Int_t total)SIGNAL ; Int_tTProof::Deactiv",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofLite.html:2395,Clear,ClearInputData,2395,root/html534/TProofLite.html,https://root.cern,https://root.cern/root/html534/TProofLite.html,3,['Clear'],['ClearInputData']
Usability,"TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. boolIncludeStatErrorFlag to implement Statistical errors for this sample; Double_tRelErrorThresholdThe minimum relative uncertainty for a bin to use stat errors; RooStats::HistFactory::EstimateSummary::ConstraintTypeStatConstraintTypeThe type of constraint binwise stat errors; stringchannel; pair<double,double>dummyForRoot; vector<TH1*>highHistsx pb per jet bin for + variations over list of systematics; vector<TH1*>lowHistsx pb per jet bin for - variations over list of systematics; stringname; TH1*nominalx pb per jet bin. all histograms need index of binning to be consistent; vector<NormFactor>normFactor; stringnormName; map<std::string,std::pair<double,double> >overallSyst""acceptance""->(0.8,1.2); TH1*relStatErrorAn (optional) externally provided shape for this error; stringshapeFactorName; vector<ShapeSys>shapeSysts; vector<std::string>systSourceForHist. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; EstimateSummary(). ~EstimateSummary(); {}. void Print(const char* opt = 0) const. void AddSyst(const string& sname, TH1* low, TH1* high). bool operator==(const RooStats::HistFactory::EstimateSummary& other) const; Comparator for two Estimate summary objects. Useful to make sure two analyses are the same. bool CompareHisto(const TH1* one, const TH1* two) const. EstimateSummary(); simple structure to hold necessary information about each channel. » Author: Kyle Cranmer, Akira Shibata » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: cranmer $ » Last generated: 2011-12-02 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooStats__HistFactory__EstimateSummary.html:6842,simpl,simple,6842,root/html532/RooStats__HistFactory__EstimateSummary.html,https://root.cern,https://root.cern/root/html532/RooStats__HistFactory__EstimateSummary.html,2,['simpl'],['simple']
Usability,"TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. boolIncludeStatErrorFlag to implement Statistical errors for this sample; Double_tRelErrorThresholdThe minimum relative uncertainty for a bin to use stat errors; RooStats::HistFactory::EstimateSummary::ConstraintTypeStatConstraintTypeThe type of constraint binwise stat errors; stringchannel; pair<double,double>dummyForRoot; vector<TH1*>highHistsx pb per jet bin for + variations over list of systematics; vector<TH1*>lowHistsx pb per jet bin for - variations over list of systematics; stringname; TH1*nominalx pb per jet bin. all histograms need index of binning to be consistent; vector<NormFactor>normFactor; stringnormName; map<std::string,std::pair<double,double> >overallSyst""acceptance""->(0.8,1.2); TH1*relStatErrorAn (optional) externally provided shape for this error; stringshapeFactorName; vector<ShapeSys>shapeSysts; vector<std::string>systSourceForHist. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; EstimateSummary(). ~EstimateSummary(); {}. void Print(const char* opt = 0) const. void AddSyst(const string& sname, TH1* low, TH1* high). bool operator==(const RooStats::HistFactory::EstimateSummary& other) const; Comparator for two Estimate summary objects. Useful to make sure two analyses are the same. bool CompareHisto(const TH1* one, const TH1* two) const. EstimateSummary(); simple structure to hold necessary information about each channel. » Author: Kyle Cranmer, Akira Shibata » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: cranmer $ » Last generated: 2015-03-10 17:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HistFactory__EstimateSummary.html:6861,simpl,simple,6861,root/html534/RooStats__HistFactory__EstimateSummary.html,https://root.cern,https://root.cern/root/html534/RooStats__HistFactory__EstimateSummary.html,2,['simpl'],['simple']
Usability,"TObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetCLsCleanupThreshold(Double_t th); virtual voidSetConfidenceLevel(Double_t cl); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetInterpolationOption(RooStats::HypoTestInverterResult::InterpolOption_t opt); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetTestSize(Double_t size); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; RooStats::SimpleIntervalRooStats::SimpleInterval::SimpleInterval(const char* name = 0); RooStats::SimpleIntervalRooStats::SimpleInterval::SimpleInterval(const RooStats::SimpleInterval&); RooStats::SimpleIntervalRooStats::SimpleInterval::SimpleInterval(const RooStats::SimpleInterval& other, const char* name); RooStats::SimpleIntervalRooStats::SimpleInterval::SimpleInterval(const char* name, const RooRealVar& var, Double_t lower, Double_t upper, Double_t cl); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Double_tUpperLimit(); Double_tUpperLimitEstimatedError(); voidUseCLs(bool on = true); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__HypoTestInverterResult.html:7183,Simpl,SimpleInterval,7183,root/html602/RooStats__HypoTestInverterResult.html,https://root.cern,https://root.cern/root/html602/RooStats__HypoTestInverterResult.html,2,['Simpl'],['SimpleInterval']
Usability,"TObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidDoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); voidDrawTriangle(GContext_t gc, Int_t x, Int_t y); virtual voidTGCheckButton::EmitSignals(Bool_t wasUp = kTRUE); static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; const TGResourcePool*TGFrame::GetResourcePool() const; virtual void*TGFrame::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidTGCheckButton::Init(); voidTObject::MakeZombie(); voidTGCheckButton::PSetState(EButtonState state, Bool_t emit); Int_tTGWidget::SetFlags(Int_t flags); virtual voidTGButton::SetToggleButton(Bool_t); virtual voidTGFrame::StartGuiBuilding(Bool_t on = kTRUE). private:. TGColorSelect(const TGColorSelect&); TGColorSelect&operator=(const TGColorSelect&). Data Members; public:. enum TGFrame::[unnamed] { kDeleteWindowCalled; };; enum TGWindow::EEditMode { kEditEnable; kEditDisable; kEditDisableEvents; kEditDisableGrab; kEditDisableLayout; kEditDisableResize; kEditDisableHeight; kEditDisableWidth; kEditDisableBtnEnable; kE",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGColorSelect.html:17375,Clear,ClearFlags,17375,root/html532/TGColorSelect.html,https://root.cern,https://root.cern/root/html532/TGColorSelect.html,2,['Clear'],['ClearFlags']
Usability,"TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SimpleInterval(const char* name = 0); Default constructor. SimpleInterval(const RooStats::SimpleInterval& other, const char* name); fParameters.add( other.fParameters );. operator=(const RooStats::SimpleInterval& other). SimpleInterval(const char* name, const RooRealVar& var, Double_t lower, Double_t upper, Double_t cl); Alternate constructor. ~SimpleInterval(); Destructor. Bool_t IsInInterval(const RooArgSet& ) const. RooArgSet* GetParameters() const; return cloned list of parameters. Bool_t CheckParameters(const RooArgSet& ) const. explicit SimpleInterval(const char* name = 0); default constructors. void SetConfidenceLevel(Double_t ); set the confidence level for the interval. Simple interval is defined at construction time so this function; has no effect. {}. Double_t ConfidenceLevel() const; return the confidence interval. {return fConfidenceLevel;}. Double_t LowerLimit(); return the interval lower limit. {return fLowerLimit;}. Double_t UpperLimit(); return the interval upper limit. {return fUpperLimit;}. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id$ » Last generated: 2015-06-02 15:35; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooStats__SimpleInterval.html:7586,Simpl,SimpleInterval,7586,root/html604/RooStats__SimpleInterval.html,https://root.cern,https://root.cern/root/html604/RooStats__SimpleInterval.html,1,['Simpl'],['SimpleInterval']
Usability,"TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SimpleInterval(const char* name = 0); Default constructor. SimpleInterval(const RooStats::SimpleInterval& other, const char* name); fParameters.add( other.fParameters );. operator=(const RooStats::SimpleInterval& other). SimpleInterval(const char* name, const RooRealVar& var, Double_t lower, Double_t upper, Double_t cl); Alternate constructor. ~SimpleInterval(); Destructor. Bool_t IsInInterval(const RooArgSet& ) const. RooArgSet* GetParameters() const; return cloned list of parameters. Bool_t CheckParameters(const RooArgSet& ) const. explicit SimpleInterval(const char* name = 0); default constructors. void SetConfidenceLevel(Double_t ); set the confidence level for the interval. Simple interval is defined at construction time so this function; has no effect. {}. Double_t ConfidenceLevel() const; return the confidence interval. {return fConfidenceLevel;}. Double_t LowerLimit(); return the interval lower limit. {return fLowerLimit;}. Double_t UpperLimit(); return the interval upper limit. {return fUpperLimit;}. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id$ » Last generated: 2015-06-30 14:37; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__SimpleInterval.html:7586,Simpl,SimpleInterval,7586,root/html602/RooStats__SimpleInterval.html,https://root.cern,https://root.cern/root/html602/RooStats__SimpleInterval.html,1,['Simpl'],['SimpleInterval']
Usability,"TPythia8 Interface class of Pythia8; TPythia8Decayer Particle Decayer using Pythia8; TPython Access to the python interpreter; TQClass Class with connections; TQCommand encapsulates the information for undo/redo a single action.; TQConnection Internal class used in the object communication mechanism; TQObjSender Used to ""delegate"" TQObject functionality; TQObject Base class for object communication mechanism; TQUndoManager recorder of operations for undo and redo; TQpDataBase Qp Base Data class; TQpDataDens Qp Data class for Dens formulation; TQpDataSparse Qp Data class for Sparse formulation; TQpLinSolverBase Qp linear solver base class; TQpLinSolverDens Qp linear solver class for Dens formulation; TQpLinSolverSparse Qp linear solver class for Sparse formulation; TQpProbBase Qp problem formulation base class; TQpProbDens Qp dens problem formulation class; TQpProbSparse Qp sparse problem formulation class; TQpResidual Qp Residual class; TQpSolverBase Qp Solver class; TQpVar Qp Variables class; TQuaternion a quaternion class; TQueryDescription Query description; TQueryResult Class describing a query; TQueryResultManager PROOF query result manager; TRFIOFile A ROOT file that reads/writes via a rfiod server; TRFIOSystem Directory handler for RFIO; TROOT Top level (or root) structure for all classes; TRWLock Reader/writer lock; TRandom Simple Random number generator (periodicity = 10**9); TRandom1 Ranlux Random number generators with periodicity > 10**14; TRandom2 Random number generator with periodicity of 10**26; TRandom3 Random number generator: Mersenne Twistor; TRealData Description of persistent data members; TRecCmdEvent Class stores information about 1 commandline event (= 1 command typed by user in commandline); TRecEvent Abstract class. Defines basic interface for storing information about ROOT events; TRecExtraEvent Class stores information about extra events; TRecGuiEvent Class stores information about 1 GUI event in ROOT; TRecWinPair Class used for storing ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ClassIndex.html:118981,undo,undo,118981,root/html530/ClassIndex.html,https://root.cern,https://root.cern/root/html530/ClassIndex.html,1,['undo'],['undo']
Usability,"TQObject::fSignalsBlocked! flag used for suppression of signals; TRefTEveElement::fSourceExternal object that is represented by this element.; TStringTNamed::fTitleobject title; Int_tTEveElement::fTopItemCnt! Counter for top-level list-tree items that prevent automatic destruction.; void*TEveElement::fUserData! Externally assigned and controlled user data.; TEveElement*TEveElement::fVizModel! Element used as model from VizDB.; TStringTEveElement::fVizTagTag used to query VizDB for model element.; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveSelection(const char* n = ""TEveSelection"", const char* t = """"); Constructor. void SetHighlightMode(); Set to 'highlight' mode. void DoElementSelect(TEveSelection::SelMap_i entry); Select element indicated by the entry and fill its; implied-selected set. void DoElementUnselect(TEveSelection::SelMap_i entry); Deselect element indicated by the entry and clear its; implied-selected set. Bool_t AcceptElement(TEveElement* el); Pre-addition check. Deny addition if el is already selected.; Virtual from TEveElement. void AddElement(TEveElement* el); Add an element into selection, virtual from TEveElement. void RemoveElement(TEveElement* el); Add an element into selection, virtual from TEveElement.; Overriden here just so that a signal can be emitted. void RemoveElementLocal(TEveElement* el); Virtual from TEveElement. void RemoveElements(); Add an element into selection, virtual from TEveElement.; Overriden here just so that a signal can be emitted. void RemoveElementsLocal(); Virtual from TEveElement. void RemoveImpliedSelected(TEveElement* el); Remove element from all implied-selected sets. This is called as part of the element destruction from; TEveManager::PreDeleteElement() and should not be called; directly. void RecheckImpliedSet(TEveSelection::SelMap_i smi); Recalculate implied-selected state for giv",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveSelection.html:24313,clear,clear,24313,root/html528/TEveSelection.html,https://root.cern,https://root.cern/root/html528/TEveSelection.html,6,['clear'],['clear']
Usability,"TSGD< Architecture_t, Layer_t, DeepNet_t >Stochastic Batch Gradient Descent Optimizer class. ; This class represents the Stochastic Batch Gradient Descent Optimizer with options for applying momentum and nesterov momentum. ; Definition at line 46 of file SGD.h. Public Types; using Matrix_t = typename Architecture_t::Matrix_t;  ; using Scalar_t = typename Architecture_t::Scalar_t;  ;  Public Types inherited from TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >; using Matrix_t = typename Architecture_t::Matrix_t;  ; using Scalar_t = typename Architecture_t::Scalar_t;  . Public Member Functions;  TSGD (Scalar_t learningRate, DeepNet_t &deepNet, Scalar_t momentum);  Constructor. ;  ;  ~TSGD ()=default;  Destructor. ;  ; Scalar_t GetMomentum () const;  Getters. ;  ; std::vector< std::vector< Matrix_t > > & GetPastBiasGradients ();  ; std::vector< Matrix_t > & GetPastBiasGradientsAt (size_t i);  ; std::vector< std::vector< Matrix_t > > & GetPastWeightGradients ();  ; std::vector< Matrix_t > & GetPastWeightGradientsAt (size_t i);  ;  Public Member Functions inherited from TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >;  VOptimizer (Scalar_t learningRate, DeepNet_t &deepNet);  Constructor. ;  ; virtual ~VOptimizer ()=default;  Virtual Destructor. ;  ; size_t GetGlobalStep () const;  ; Layer_t * GetLayerAt (size_t i);  ; std::vector< Layer_t * > & GetLayers ();  ; Scalar_t GetLearningRate () const;  Getters. ;  ; void IncrementGlobalStep ();  Increments the global step. ;  ; void SetLearningRate (size_t learningRate);  Setters. ;  ; void Step ();  Performs one step of optimization. ;  . Protected Member Functions; void UpdateBiases (size_t layerIndex, std::vector< Matrix_t > &biases, const std::vector< Matrix_t > &biasGradients);  Update the biases, given the current bias gradients. ;  ; void UpdateWeights (size_t layerIndex, std::vector< Matrix_t > &weights, const std::vector< Matrix_t > &weightGradients);  Update the weights, given the current weight",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TSGD.html:1727,learn,learningRate,1727,doc/master/classTMVA_1_1DNN_1_1TSGD.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TSGD.html,1,['learn'],['learningRate']
Usability,"TSYS/etc/system.rootrc; Root.TMemStat.system gnubuiltin; Root.TMemStat.buffersize 100000; Root.TMemStat.maxcalls 5000000. TMemStat::Show creates 3 canvases.; -In canvas1 it displays a dynamic histogram showing for pages (10 kbytes by default); the percentage of the page used.; A summary pave shows the total memory still in use when the TMemStat object; goes out of scope and the average occupancy of the pages.; The average occupancy gives a good indication of the memory fragmentation.; When moving the mouse on this canvas, a tooltip shows the backtrace for the allocations; at the address at the mouse position. -In canvas2 it displays the histogram of memory leaks in decreasing order.; when moving the mouse on this canvas, a tooltip shows the backtrace for the leak; in the bin below the mouse. -In canvas3 it displays the histogram of the nbigleaks largest leaks (default is 20); for each leak, the number of allocs and average alloc size is shown. Simply do:; root > TMemStat::Show(); or specifying arguments; root > TMemStat::Show(0.1,20,""mydir/mymemstat.root"");. The first argument to Show is the percentage of the time of the original job; that produced the file after which the display is updated. By default update=0.1,; ie 10 time intervals will be shown.; The second argument is nbigleaks. if <=0 canvas2 and canvas3 are not shown; The third argument is the imput file name (result of TMemStat).; If this argument is omitted, Show will take the most recent file; generated by TMemStat. You can restrict the address range to be analyzed via TMemStatShow::SetAddressRange; You can restrict the entry range to be analyzed via TMemStatShow::SetEntryRange. Author: Rene Brun 7 July 2010. Function Members (Methods); public:. virtual~TMemStatShow(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObjec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMemStatShow.html:3026,Simpl,Simply,3026,root/html602/TMemStatShow.html,https://root.cern,https://root.cern/root/html602/TMemStatShow.html,2,['Simpl'],['Simply']
Usability,"TString& ) const; check if verbosity ""V"" set in option. void UsefulSortDescending(vector<Double_t>& ); sort vector. void UsefulSortAscending(vector<Double_t>& ); sort vector. Int_t GetIndexMaxElement(vector<Double_t>& ); find index of maximum entry in vector. Int_t GetIndexMinElement(vector<Double_t>& ); find index of minimum entry in vector. Bool_t ContainsRegularExpression(const TString& s); check if regular expression; helper function to search for ""$!%^&()'<>?= "" in a string. TString ReplaceRegularExpressions(const TString& s, const TString& replace = ""+""); replace regular expressions; helper function to remove all occurences ""$!%^&()'<>?= "" from a string; and replace all ::,$,*,/,+,- with _M_,_S_,_T_,_D_,_P_,_M_ respectively. const TString& Color(const TString& ); human readable color strings. void FormattedOutput(const vector<Double_t>& , const vector<TString>& , const TString titleVars, const TString titleValues, TMVA::MsgLogger& logger, TString format = ""%+1.3f""); formatted output of simple table. void FormattedOutput(const TMatrixD& , const vector<TString>& , TMVA::MsgLogger& logger); formatted output of matrix (with labels). void FormattedOutput(const TMatrixD& , const vector<TString>& vert, const vector<TString>& horiz, TMVA::MsgLogger& logger); formatted output of matrix (with labels). TString GetXTitleWithUnit(const TString& title, const TString& unit); histogramming utility. TString GetYTitleWithUnit(const TH1& h, const TString& unit, Bool_t normalised); histogramming utility. void WriteFloatArbitraryPrecision(Float_t val, ostream& os); writes a float value with the available precision to a stream. void ReadFloatArbitraryPrecision(Float_t& val, istream& is); reads a float value with the available precision from a stream. Bool_t HasAttr(void* node, const char* attrname); add attribute from xml. void ReadAttr(void* node, const char* attrname, TString& value); add attribute from xml. void AddAttr(void* node, const char* attrname, const char* value); add at",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__Tools.html:9339,simpl,simple,9339,root/html528/TMVA__Tools.html,https://root.cern,https://root.cern/root/html528/TMVA__Tools.html,10,['simpl'],['simple']
Usability,"TString() : gTools().Color(""reset"");; 1485 ; 1486 Log() << Endl;; 1487 Log() << col << ""--- Short description:"" << colres << Endl;; 1488 Log() << Endl;; 1489 Log() << ""The DNN neural network is a feedforward"" << Endl;; 1490 Log() << ""multilayer perceptron implementation. The DNN has a user-"" << Endl;; 1491 Log() << ""defined hidden layer architecture, where the number of input (output)"" << Endl;; 1492 Log() << ""nodes is determined by the input variables (output classes, i.e., "" << Endl;; 1493 Log() << ""signal and one background, regression or multiclass). "" << Endl;; 1494 Log() << Endl;; 1495 Log() << col << ""--- Performance optimisation:"" << colres << Endl;; 1496 Log() << Endl;; 1497 ; 1498 const char* txt = ""The DNN supports various options to improve performance in terms of training speed and \n \; 1499reduction of overfitting: \n \; 1500\n \; 1501 - different training settings can be stacked. Such that the initial training \n\; 1502 is done with a large learning rate and a large drop out fraction whilst \n \; 1503 in a later stage learning rate and drop out can be reduced. \n \; 1504 - drop out \n \; 1505 [recommended: \n \; 1506 initial training stage: 0.0 for the first layer, 0.5 for later layers. \n \; 1507 later training stage: 0.1 or 0.0 for all layers \n \; 1508 final training stage: 0.0] \n \; 1509 Drop out is a technique where a at each training cycle a fraction of arbitrary \n \; 1510 nodes is disabled. This reduces co-adaptation of weights and thus reduces overfitting. \n \; 1511 - L1 and L2 regularization are available \n \; 1512 - Minibatches \n \; 1513 [recommended 10 - 150] \n \; 1514 Arbitrary mini-batch sizes can be chosen. \n \; 1515 - Multithreading \n \; 1516 [recommended: True] \n \; 1517 Multithreading can be turned on. The minibatches are distributed to the available \n \; 1518 cores. The algorithm is lock-free (\""Hogwild!\""-style) for each cycle. \n \; 1519 \n \; 1520 Options: \n \; 1521 \""Layout\"": \n \; 1522 - example: \""TANH|(N+30)*2,TAN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDNN_8cxx_source.html:54668,learn,learning,54668,doc/master/MethodDNN_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDNN_8cxx_source.html,2,['learn'],['learning']
Usability,"TTreeCache::SetCacheSize. Only the baskets for the requested entry range are put in the cache. For each Tree being processed a TTreeCache object is created.; This object is automatically deleted when the Tree is deleted or; when the file is deleted. -Special case of a TChain; Once the training is done on the first Tree, the list of branches; in the cache is kept for the following files. -Special case of a TEventlist; if the Tree or TChain has a TEventlist, only the buffers; referenced by the list are put in the cache. The learning period is started or restarted when:; - A TTree automatically creates a cache; - TTree::SetCacheSize is called for the first time.; - TTree::SetCacheSize is called a second time with a different size.; - TTreeCache::StartLearningPhase is called.; - TTree[Cache]::SetEntryRange is called; * and the learning is not yet finished; * and has not been set to manual; * and the new minimun entry is different. The learning period is stopped (and prefetching is actually started) when:; - TTree[Cache]::StopLearningPhase is called.; - An entry outside the 'learning' range is requested; The 'learning range is from fEntryMin (default to 0) to; fEntryMin + fgLearnEntries (default to 100).; - A 'cached' TChain switches over to a new file. WHY DO WE NEED the TreeCache when doing data analysis?. When writing a TTree, the branch buffers are kept in memory.; A typical branch buffersize (before compression) is typically 32 KBytes.; After compression, the zipped buffer may be just a few Kbytes.; The branch buffers cannot be much larger in case of Trees with several; hundred or thousand branches.; When writing, this does not generate a performance problem because branch; buffers are always written sequentially and the OS is in general clever enough; to flush the data to the output file when a few MBytes of data have to be written.; When reading at the contrary, one may hit a performance problem when reading; across a network (LAN or WAN) and the network latency is",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTreeCache.html:1782,learn,learning,1782,root/html534/TTreeCache.html,https://root.cern,https://root.cern/root/html534/TTreeCache.html,4,['learn'],['learning']
Usability,"TUnfoldDensity and TUnfoldBinning ;  testUnfold7b.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  testUnfold7c.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  ► unuran;  unuranDemo.CExample macro to show unuran capabilities The results are compared with what is obtained using TRandom or TF1::GetRandom The macro is divided in 3 parts: ;  unuranFoamTest.CThis program must be compiled and executed with Aclic as follows ;  ► v7;  concurrentfill.cxx;  draw.cxx;  draw_subpads.cxx;  draw_th1.cxxThis macro generates a small V7 TH1D, fills it and draw it in a V7 canvas ;  draw_v6.cxx;  fitpanel.cxx;  histops.cxx;  line.cxx;  lineStyle.cxx;  lineWidth.cxx;  markerStyle.cxx;  pad.cxx;  perf.cxx;  perfcomp.cxx;  simple.cxx;  text.cxx;  ► vecops;  vo001_AdoptOrOwnMemory.C In this tutorial we learn how the RVec class can be used to adopt existing memory or allocate some ;  vo001_AdoptOrOwnMemory.py In this tutorial we learn how the RVec class can be used to adopt existing memory or allocate some ;  vo002_VectorCalculations.C In this tutorial we learn how the RVec class can be used to express easily mathematical operations involving arrays and scalars ;  vo003_LogicalOperations.C In this tutorial we learn how the RVec class can be used to express logical operations ;  ► xml;  DOMParsePerson.C ROOT implementation of a XML DOM Parser ;  DOMRecursive.C ROOT implementation of a XML DOM Parser ;  SAXHandler.C ROOT implementation of a simple SAX Handler ;  xmlmodifyfile.C Example to read, modify and store xml file, using TXMLEngine class The input file, produced by xmlnewfile.C macro is used If you need full xml syntax support, use TXMLParser instead ;  xmlnewfile.C Example to create a new xml file with the TXMLEngine class ;  xmlreadfile.C Example to read and parse any xml file, supported by TXMLEngine class The input file, produced by xmlnewfile.C macro is used If you need full xml syntax support, use TXMLParser instead ;  benchmarks.CThis macro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v614/files.html:165268,learn,learn,165268,doc/v614/files.html,https://root.cern,https://root.cern/doc/v614/files.html,1,['learn'],['learn']
Usability,T_Load; static TTabCom::EContext_tkSYS_EnvVar; static TTabCom::EContext_tkSYS_FileName; static TTabCom::EContext_tkSYS_UserName; static TTabCom::EContext_tkUNKNOWN_CONTEXT. private:. char*fBufinitialized by Hook(); Int_tfLastIterfrodo: iteration counter for recursive MakeClassFromVarName; Pattern_tfPat[25][1024]array of patterns; ULong64_tfPrevInterpMarker; const char*fRegExp[25]corresponding regular expression plain text; Bool_tfVarIsPointerfrodo: pointer or not flag; TSeqCollection*fpClasses; TSeqCollection*fpDirectives; TSeqCollection*fpEnvVars; TSeqCollection*fpFiles; TSeqCollection*fpGlobals; int*fpLocinitialized by Hook(); TSeqCollection*fpPragmas; TSeqCollection*fpSysIncFiles; TSeqCollection*fpUsers. Class Charts. Inheritance Chart:. TTabCom. Function documentation; TTabCom(); Default constructor. ~TTabCom(); Destructor. void ClearClasses(); Clear classes and namespace collections. void ClearCppDirectives(); Forget all Cpp directives seen so far. void ClearEnvVars(); Forget all environment variables seen so far. void ClearFiles(); Close all files. void ClearGlobalFunctions(); Forget all global functions seen so far.; Not needed anymore. Use gROOT->GetListOfGlobalFunctions(). void ClearGlobals(); Forget all global variables seen so far.; With teh new implamentation the list is gROOT->GetListOfGlobals(true). void ClearPragmas(); Forget all pragmas seen so far. void ClearSysIncFiles(); Close system files. void ClearUsers(); Forget all user seen so far. void ClearAll(); clears all lists; except for user names and system include files. void RehashClasses(); Do the class rehash. void RehashCppDirectives(); Cpp rehashing. void RehashEnvVars(); Environemnt variables rehashing. void RehashFiles(); Close files. void RehashGlobalFunctions(); Reload global functions. void RehashGlobals(); Reload globals. void RehashPragmas(); Reload pragmas. void RehashSysIncFiles(); Reload system include files. void RehashUsers(); Reload users. void RehashAll(); clears and then rebuilds ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTabCom.html:7726,Clear,ClearEnvVars,7726,root/html602/TTabCom.html,https://root.cern,https://root.cern/root/html602/TTabCom.html,2,['Clear'],['ClearEnvVars']
Usability,"T_TTREECACHE_SIZE.; The resource variable TTreeCache.Prefill sets the default TTreeCache prefilling type. The prefill type may be: 0 for no prefilling and 1 to prefill all the branches. It can be overridden by the environment variable ROOT_TTREECACHE_PREFILL; In particular the default can be set back to the same as in version 5 by setting TTreeCache.Size (or ROOT_TTREECACHE_SIZE) and TTreeCache.Prefill (or ROOT_TTREECACHE_PREFILL) both to zero.; TTree methods which are expected to modify a cache, like AddBranchToCache, will attempt to setup a cache of default size if one does not exist, irrespective of whether the auto cache creation is enabled. Additionally several methods giving control of the cache have changed return type from void to Int_t, to be able to return a code to indicate if there was an error.; Usually TTree::SetCacheSize will no longer reset the list of branches to be cached (either set or previously learnt) nor restart the learning phase. The learning phase is restarted when a new cache is created, e.g. after having removed a cache with SetCacheSize(0).; TSelectorDraw; The axis titles in case of a x:y:z plot with the option COLZ were not correct.; TParallelCoordVar; Change the format used to print the variables limit for ||-Coord to %g. It was %6.4f before.; Histogram Libraries; TFormula. New version of the TFormula class based on Cling. Formula expressions are now used to create functions which are passed to Cling to be Just In Time compiled. The expression is therefore compiled using Clang/LLVVM which will give execution time as compiled code and in addition correctness of the result obtained.; This class is not 100% backward compatible with the old TFormula class, which is still available in ROOT as =ROOT::v5::TFormula=. Some of the TFormula member funtions available in version 5, such as =Analyze= and =AnalyzeFunction= are not available in the new TFormula class. On the other hand formula expressions which were valid in version 5 are still valid ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v604/release-notes.html:14054,learn,learning,14054,doc/v604/release-notes.html,https://root.cern,https://root.cern/doc/v604/release-notes.html,1,['learn'],['learning']
Usability,"TabMgrtab manager corresponding to ged-editor; TGTextButton*TGeoConeEditor::fUndoUndo-Button; UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoConeSegEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for cone segment editor. ~TGeoConeSegEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the selected object. void DoPhi1(); Slot for Phi1. void DoPhi2(); Slot for Phi2. void DoPhi(); Slot for Phi. void DoApply(); Slot for applying current parameters. void DoUndo(); Slot for undoing last operation. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id: TGeoConeEditor.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2010-09-23 20:09; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoConeSegEditor.html:22143,undo,undoing,22143,root/html528/TGeoConeSegEditor.html,https://root.cern,https://root.cern/root/html528/TGeoConeSegEditor.html,1,['undo'],['undoing']
Usability,"TabMgrtab manager corresponding to ged-editor; TGTextButton*TGeoConeEditor::fUndoUndo-Button; UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoConeSegEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for cone segment editor. ~TGeoConeSegEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the selected object. void DoPhi1(); Slot for Phi1. void DoPhi2(); Slot for Phi2. void DoPhi(); Slot for Phi. void DoApply(); Slot for applying current parameters. void DoUndo(); Slot for undoing last operation. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id: TGeoConeEditor.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-07-04 15:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGeoConeSegEditor.html:22243,undo,undoing,22243,root/html530/TGeoConeSegEditor.html,https://root.cern,https://root.cern/root/html530/TGeoConeSegEditor.html,1,['undo'],['undoing']
Usability,"TabMgrtab manager corresponding to ged-editor; TGTextButton*TGeoConeEditor::fUndoUndo-Button; UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoConeSegEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for cone segment editor. ~TGeoConeSegEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the selected object. void DoPhi1(); Slot for Phi1. void DoPhi2(); Slot for Phi2. void DoPhi(); Slot for Phi. void DoApply(); Slot for applying current parameters. void DoUndo(); Slot for undoing last operation. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id: TGeoConeEditor.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:16; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoConeSegEditor.html:22243,undo,undoing,22243,root/html532/TGeoConeSegEditor.html,https://root.cern,https://root.cern/root/html532/TGeoConeSegEditor.html,2,['undo'],['undoing']
Usability,"Table objects are the category equivalent of RooPlot objects; (which are used for real-valued objects); . Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~RooTable(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Int_tRooPrintable::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidfill(RooAbsCategory& cat, Double_t weight = 1.); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooTable.html:904,Clear,Clear,904,root/html602/RooTable.html,https://root.cern,https://root.cern/root/html602/RooTable.html,2,['Clear'],['Clear']
Usability,"Table objects are the category equivalent of RooPlot objects; (which are used for real-valued objects); . Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~RooTable(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Int_tRooPrintable::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidfill(RooAbsCategory& cat, Double_t weight = 1.0); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooTable.html:904,Clear,Clear,904,root/html532/RooTable.html,https://root.cern,https://root.cern/root/html532/RooTable.html,2,['Clear'],['Clear']
Usability,"Tag(const TString& tag, const TString& fallback_tag = """"); Float_t*TAttBBox::AssertBBox(); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; static voidCheckAndFixBoxOrientationEv(TEveVector* box); static voidCheckAndFixBoxOrientationFv(Float_t** box); virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElementList*TEveElementList::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTAttBBox::ComputeBBox(); virtual voidTNamed::Copy(TObject& named) const; virtual voidCopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); voidTEveElement::CSCApplyMainColorToAllChildren(); voidTEveElement::CSCApplyMainColorToMatchingChildren(); voidTEveElement::CSCApplyMainTransparencyToAllChildren(); voidTEveElement::CSCApplyMainTransparencyToMatchingChildren(); voidTE",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TEveShape.html:2682,Clear,ClearProjectedList,2682,root/html532/TEveShape.html,https://root.cern,https://root.cern/root/html532/TEveShape.html,2,['Clear'],['ClearProjectedList']
Usability,"TargetFile : output ROOT file; the test tree and all evaluation plots; 110/// will be stored here; 111/// - theOption : option string; currently: ""V"" for verbose; 112 ; 113TMVA::Factory::Factory(TString jobName, TFile *theTargetFile, TString theOption); 114 : Configurable(theOption), fTransformations(""I""), fVerbose(kFALSE), fVerboseLevel(kINFO), fCorrelations(kFALSE),; 115 fROC(kTRUE), fSilentFile(theTargetFile == nullptr), fJobName(jobName), fAnalysisType(Types::kClassification),; 116 fModelPersistence(kTRUE); 117{; 118 fName = ""Factory"";; 119 fgTargetFile = theTargetFile;; 120 fLogger->SetSource(fName.Data());; 121 ; 122 // render silent; 123 if (gTools().CheckForSilentOption(GetOptions())); 124 Log().InhibitOutput(); // make sure is silent if wanted to; 125 ; 126 // init configurable; 127 SetConfigDescription(""Configuration options for Factory running"");; 128 SetConfigName(GetName());; 129 ; 130 // histograms are not automatically associated with the current; 131 // directory and hence don't go out of scope when closing the file; 132 // TH1::AddDirectory(kFALSE);; 133 Bool_t silent = kFALSE;; 134#ifdef WIN32; 135 // under Windows, switch progress bar and color off by default, as the typical windows shell doesn't handle these; 136 // (would need different sequences..); 137 Bool_t color = kFALSE;; 138 Bool_t drawProgressBar = kFALSE;; 139#else; 140 Bool_t color = !gROOT->IsBatch();; 141 Bool_t drawProgressBar = kTRUE;; 142#endif; 143 DeclareOptionRef(fVerbose, ""V"", ""Verbose flag"");; 144 DeclareOptionRef(fVerboseLevel = TString(""Info""), ""VerboseLevel"", ""VerboseLevel (Debug/Verbose/Info)"");; 145 AddPreDefVal(TString(""Debug""));; 146 AddPreDefVal(TString(""Verbose""));; 147 AddPreDefVal(TString(""Info""));; 148 DeclareOptionRef(color, ""Color"", ""Flag for coloured screen output (default: True, if in batch mode: False)"");; 149 DeclareOptionRef(; 150 fTransformations, ""Transformations"",; 151 ""List of transformations to test; formatting example: \""Transformations=I;D;P;U;G,D\"", ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:4950,progress bar,progress bar,4950,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,1,['progress bar'],['progress bar']
Usability,"Terminate(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTerminate(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofDrawGraph(); TProofDrawGraph(TProofDrawGraph&&); TProofDrawGraph(const TProofDrawGraph&); virtual voidTObject::UseCurrentStyle(); virtual intTProofDraw::Version() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTProofDraw::ClearFormula(); virtual Bool_tTProofDraw::CompileVariables(); virtual voidDefVar(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidDoFill(Long64_t entry, Double_t w, const Double_t* v); voidTProofDraw::FillWeight(); voidTObject::MakeZombie(); virtual Bool_tTProofDraw::ProcessSingle(Long64_t, Int_t); voidTProofDraw::SetCanvas(const char* objname); voidTProofDraw::SetDrawAtt(TObject* o); voidTProofDraw::SetError(const char* sub, const char* mesg). Data Members; public:. static TSelector::EAbortTSelector::kAbortFile; static TSelector::EAbortTSelector::kAbortProcess; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TSelector::EAbortTSelector::kContinue; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofDrawGraph.html:5918,Clear,ClearFormula,5918,root/html602/TProofDrawGraph.html,https://root.cern,https://root.cern/root/html602/TProofDrawGraph.html,2,['Clear'],['ClearFormula']
Usability,"Test program for the classes TUnfoldDensity and TUnfoldBinning ;  testUnfold5d.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  testUnfold6.C Test program for the class TUnfoldBinning ;  testUnfold7a.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  testUnfold7b.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  testUnfold7c.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  ► unuran;  unuranDemo.CExample macro to show unuran capabilities The results are compared with what is obtained using TRandom or TF1::GetRandom The macro is divided in 3 parts: ;  unuranFoamTest.CThis program must be compiled and executed with Aclic as follows ;  ► v7;  concurrentfill.cxx;  draw.cxx;  draw_subpads.cxx;  draw_th1.cxxThis macro generates a small V7 TH1D, fills it and draw it in a V7 canvas ;  draw_v6.cxx;  fitpanel.cxx;  histops.cxx;  line.cxx;  lineStyle.cxx;  lineWidth.cxx;  markerStyle.cxx;  pad.cxx;  perf.cxx;  perfcomp.cxx;  simple.cxx;  text.cxx;  ► vecops;  vo001_AdoptOrOwnMemory.C In this tutorial we learn how the RVec class can be used to adopt existing memory or allocate some ;  vo001_AdoptOrOwnMemory.py In this tutorial we learn how the RVec class can be used to adopt existing memory or allocate some ;  vo002_VectorCalculations.C In this tutorial we learn how the RVec class can be used to express easily mathematical operations involving arrays and scalars ;  vo003_LogicalOperations.C In this tutorial we learn how the RVec class can be used to express logical operations ;  ► xml;  DOMParsePerson.C ROOT implementation of a XML DOM Parser ;  DOMRecursive.C ROOT implementation of a XML DOM Parser ;  SAXHandler.C ROOT implementation of a simple SAX Handler ;  xmlmodifyfile.C Example to read, modify and store xml file, using TXMLEngine class The input file, produced by xmlnewfile.C macro is used If you need full xml syntax support, use TXMLParser instead ;  xmlnewfile.C Example to create a new xml file with",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v614/files.html:165060,simpl,simple,165060,doc/v614/files.html,https://root.cern,https://root.cern/doc/v614/files.html,1,['simpl'],['simple']
Usability,"The algorithm is modified/protected for the case; when a TProfile3D is projected (ProjectionX). The previous algorithm; generated a N^2 problem when projecting a TProfile3D with a large number of; bins (eg 100000).; - in version 3.10/02, a new static function TProfile::Approximate; is introduced to enable or disable (default) the approximation.; (see also comments in TProfile::GetBinError). Option_t * GetErrorOption() const; -*-*Return option to compute profile2D errors; *-* =========================================. void GetStats(Double_t* stats) const; fill the array stats from the contents of this profile; The array stats must be correctly dimensionned in the calling program.; stats[0] = sumw; stats[1] = sumw2; stats[2] = sumwx; stats[3] = sumwx2; stats[4] = sumwy; stats[5] = sumwy2; stats[6] = sumwxy; stats[7] = sumwz; stats[8] = sumwz2; stats[9] = sumwxz; stats[10]= sumwyz; stats[11]= sumwt; stats[12]= sumwt2. If no axis-subrange is specified (via TAxis::SetRange), the array stats; is simply a copy of the statistics quantities computed at filling time.; If a sub-range is specified, the function recomputes these quantities; from the bin contents in the current axis range. Long64_t Merge(TCollection* list); Merge all histograms in the collection in this histogram.; This function computes the min/max for the axes,; compute a new number of bins, if necessary,; add bin contents, errors and statistics.; If overflows are present and limits are different the function will fail.; The function returns the total number of entries in the result histogram; if the merge is successfull, -1 otherwise. IMPORTANT remark. The 2 axis x and y may have different number; of bins and different limits, BUT the largest bin width must be; a multiple of the smallest bin width and the upper limit must also; be a multiple of the bin width. Bool_t Multiply(TF1* h1, Double_t c1 = 1); Performs the operation: this = this*c1*f1. Bool_t Multiply(const TH1* h1); Multiply this profile2D by h1*-; *-*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProfile3D.html:37899,simpl,simply,37899,root/html534/TProfile3D.html,https://root.cern,https://root.cern/root/html534/TProfile3D.html,6,['simpl'],['simply']
Usability,"The algorithm is modified/protected for the case; when a TProfile3D is projected (ProjectionX). The previous algorithm; generated a N^2 problem when projecting a TProfile3D with a large number of; bins (eg 100000).; - in version 3.10/02, a new static function TProfile::Approximate; is introduced to enable or disable (default) the approximation.; (see also comments in TProfile::GetBinError). Option_t * GetErrorOption() const; -*-*Return option to compute profile2D errors; *-* =========================================. void GetStats(Double_t* stats) const; fill the array stats from the contents of this profile; The array stats must be correctly dimensionned in the calling program.; stats[0] = sumw; stats[1] = sumw2; stats[2] = sumwx; stats[3] = sumwx2; stats[4] = sumwy; stats[5] = sumwy2; stats[6] = sumwxy; stats[7] = sumwz; stats[8] = sumwz2; stats[9] = sumwxz; stats[10]= sumwyz; stats[11]= sumwt; stats[12]= sumwt2. If no axis-subrange is specified (via TAxis::SetRange), the array stats; is simply a copy of the statistics quantities computed at filling time.; If a sub-range is specified, the function recomputes these quantities; from the bin contents in the current axis range. Long64_t Merge(TCollection* list); Merge all histograms in the collection in this histogram.; This function computes the min/max for the axes,; compute a new number of bins, if necessary,; add bin contents, errors and statistics.; If overflows are present and limits are different the function will fail.; The function returns the total number of entries in the result histogram; if the merge is successfull, -1 otherwise. IMPORTANT remark. The 2 axis x and y may have different number; of bins and different limits, BUT the largest bin width must be; a multiple of the smallest bin width and the upper limit must also; be a multiple of the bin width. void Multiply(TF1* h1, Double_t c1 = 1); Performs the operation: this = this*c1*f1. void Multiply(const TH1* h1); Multiply this profile2D by h1*-; *-* ===",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProfile3D.html:36799,simpl,simply,36799,root/html528/TProfile3D.html,https://root.cern,https://root.cern/root/html528/TProfile3D.html,4,['simpl'],['simply']
Usability,"The classifier is trained to discriminate between the reference and target distribution. We see how the neural networks generalize to unknown mean values.; We compare the approach of using the likelihood ratio trick to morphing.; An introduction of SBI can be found in https://arxiv.org/pdf/2010.06439.; A short recap: The idea of SBI is to fit a surrogate model to the data, in order to really learn the likelihood function instead of calculating it. Therefore, a classifier is trained to discriminate between samples from a target distribution (here the Gaussian) $$x\sim p(x|\theta)$$ and a reference distribution (here the Uniform) $$x\sim p_{ref}(x|\theta)$$.; The output of the classifier $$\hat{s}(\theta)$$ is a monotonic function of the likelihood ration and can be turned into an estimate of the likelihood ratio via $$\hat{r}(\theta)=\frac{1-\hat{s}(\theta)}{\hat{s}(\theta)}.$$ This is called the likelihood ratio trick.; In the end we compare the negative logarithmic likelihoods of the learned, morphed and analytical likelihood with minuit and as a plot. ; import ROOT; import numpy as np; from sklearn.neural_network import MLPClassifier; ; # The samples used for training the classifier in this tutorial / rescale for more accuracy; n_samples = 10000; ; # Kills warning messages; ROOT.RooMsgService.instance().setGlobalKillBelow(ROOT.RooFit.WARNING); ; ; # Morphing as a baseline; def morphing(setting):; ; # Define binning for morphing; grid = ROOT.RooMomentMorphFuncND.Grid(ROOT.RooBinning(4, 0.0, 4.0)); x_var.setBins(50); ; # Number of 'sampled' gaussians, if you change it, adjust the binning properly; n_grid = 5; ; for i in range(n_grid):; # Define the sampled gausians; mu_help = ROOT.RooRealVar(f""mu{i}"", f""mu{i}"", i); help = ROOT.RooGaussian(f""g{i}"", f""g{i}"", x_var, mu_help, sigma); workspace.Import(help, Silence=True); ; # Fill the histograms; hist = workspace[f""g{i}""].generateBinned([x_var], n_samples); ; # Make sure that every bin is filled and we don't get zero prob",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf615__simulation__based__inference_8py.html:1511,learn,learned,1511,doc/master/rf615__simulation__based__inference_8py.html,https://root.cern,https://root.cern/doc/master/rf615__simulation__based__inference_8py.html,1,['learn'],['learned']
Usability,"The documentation is; parsed by TDocParser and then passed to TClassDocOutput to generate; the class doc header, the class description, members overview, and method; documentation. All generic output functionality is in TDocOutput; it is; re-used in this derived class. You usually do not use this class yourself; it is invoked indirectly by; THtml. Customization of the output should happen via the interfaces defined; by THtml. Function Members (Methods); public:. TClassDocOutput(const TClassDocOutput&); TClassDocOutput(THtml& html, TClass* cl, TList* typedefs); virtual~TClassDocOutput(); voidTObject::AbstractMethod(const char* method) const; virtual voidTDocOutput::AdjustSourcePath(TString& line, const char* relpath = ""../""); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); voidClass2Html(Bool_t force = kFALSE); Bool_tClassDotCharts(ostream& out); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; voidTDocOutput::Convert(istream& in, const char* infilename, const char* outfilename, const char* title, const char* relpath = ""../"", Int_t includeOutput = 0, const char* context = """", TGClient* gclient = 0); virtual voidTObject::Copy(TObject& object) const; Bool_tTDocOutput::CopyHtmlFile(const char* sourceName, const char* destName = """"); voidCreateClassHierarchy(ostream& out, const char* docFileName); virtual voidTDocOutput::CreateClassIndex(); virtual voidTDocOutput::CreateClassTypeDefs(); virtual voidTDocOutput::CreateHierarchy(); virtual voidTDocOutput::CreateModuleIndex(); virtual voidTDocOutput::CreateProductIndex(); virtual voidTDocOutput::CreateTypeIndex(); virtual voidTDocOutput::DecorateEntityBegin(TString& str, Ssiz_t& pos, TDocParser::EParseContext type); virtual voidTDocOutput::DecorateEntityEnd(TString& str, Ssiz_t& pos, TDocParser:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TClassDocOutput.html:1349,Clear,Clear,1349,root/html532/TClassDocOutput.html,https://root.cern,https://root.cern/root/html532/TClassDocOutput.html,2,['Clear'],['Clear']
Usability,"The result of the minimization is transformed into the user representable format by M . For more explanations see [api:state].; 4.3 Input to M; The following input combinations to M are possible:. \(\mbox{FCN}\) + parameters + uncertainties; \(\mbox{FCN}\) with gradient + parameters + uncertainties; \(\mbox{FCN}\) + parameters + covariance; \(\mbox{FCN}\) with gradient + parameters + covariance. For each of these combinations the user can chose between a minimal required interface (using std::vector containers) for the parameters and uncertainties or a more functional one provided by M . If the user wants to interact with the parameters before minimization (fixing, adding/removing limits), the minimal required interface cannot be used.; 4.3.1 What the user must supply; The user must supply to M. a valid implementation of the FCNBase base class; parameters with their starting values; expected uncertainties on the parameters. The input parameters can be simply defined via an std::vector\(<\)double\(>\), which means that all parameters are variables. If the user wants fix a parameter or put limits on it before minimization, he has to instantiate a MnUserParameters object and then add parameters one by one, giving them a name, value, uncertainty. Once all parameters are added to MnUserParameters, he can fix a parameter or put limits on another one before handing them over to Minit for minimization.; 4.3.2 What the user can supply; Optionally the user can supply his own gradient calculator by implementing the FCNGradientBase interface or supply a full covariance matrix for input if one is available. The covariance matrix can be supplied in form of a std::vector\(<\)double\(>\) in packed storage format (upper triangular), or in a more user-friendly way by using the interface provided by the MnUserCovariance.; 4.4 Running a M minimization; Two use cases are addressed for minimization:. The user just wants the function to be minimized in one go.; The user wants to minimize ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:37818,simpl,simply,37818,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,2,['simpl'],['simply']
Usability,"The result of the minimization is transformed into the user representable format by M . For more explanations see [api:state].; 4.3 Input to M; The following input combinations to M are possible:. \(\mbox{FCN}\) + parameters + uncertainties; \(\mbox{FCN}\) with gradient + parameters + uncertainties; \(\mbox{FCN}\) + parameters + covariance; \(\mbox{FCN}\) with gradient + parameters + covariance. For each of these combinations the user can chose between a minimal required interface (using std::vector containers) for the parameters and uncertainties or a more functional one provided by M . If the user wants to interact with the parameters before minimization (fixing, adding/removing limits), the minimal required interface cannot be used.; 4.3.1 What the user must supply; The user must supply to M. a valid implementation of the FCNBase base class; parameters with their starting values; expected uncertainties on the parameters. The input parameters can be simply defined via an std::vector\(<\)double\(>\), which means that all parameters are variables. If the user wants fix a parameter or put limits on it before minimization, they have to instantiate a MnUserParameters object and then add parameters one by one, giving them a name, value, uncertainty. Once all parameters are added to MnUserParameters, they can fix a parameter or put limits on another one before handing them over to Minuit for minimization.; 4.3.2 What the user can supply; Optionally the user can supply their own gradient calculator by implementing the FCNGradientBase interface or supply a full covariance matrix for input if one is available. The covariance matrix can be supplied in form of a std::vector\(<\)double\(>\) in packed storage format (upper triangular), or in a more user-friendly way by using the interface provided by the MnUserCovariance.; 4.4 Running a M minimization; Two use cases are addressed for minimization:. The user just wants the function to be minimized in one go.; The user wants to m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/minuit2/Minuit2.html:33802,simpl,simply,33802,root/htmldoc/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/htmldoc/guides/minuit2/Minuit2.html,2,['simpl'],['simply']
Usability,"The separator from the next option is either a ' ' or a ';'. All recognized settings are removed from the input string opt.; If action == 0, set up the output file accordingly, if action == 1 clean related; output file settings.; If the final target file is local then 'target' is set to the final local path; when action == 0 and used to retrieve the file with TFile::Cp when action == 1. Output file settings are in the form. <previous_option>of=name <next_option>; <previous_option>outfile=name,...;<next_option>. The separator from the next option is either a ' ' or a ';'; Called interanally by TProof::Process. Returns 0 on success, -1 on error. void SetFeedback(TString& opt, TString& optfb, Int_t action); Extract from opt in optfb information about wanted feedback settings.; Feedback are removed from the input string opt.; If action == 0, set up feedback accordingly, if action == 1 clean related; feedback settings (using info in optfb, if available, or reparsing opt). Feedback requirements are in the form. <previous_option>fb=name1,name2,name3,... <next_option>; <previous_option>feedback=name1,name2,name3,...;<next_option>. The special name 'stats' triggers feedback about events and packets.; The separator from the next option is either a ' ' or a ';'.; Called interanally by TProof::Process. Long64_t Process(TDSet* dset, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Process a data set (TDSet) using the specified selector (.C) file or; Tselector object; Entry- or event-lists should be set in the data set object using; TDSet::SetEntryList.; The return value is -1 in case of error and TSelector::GetStatus() in; in case of success. Long64_t Process(TFileCollection* fc, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Process a data set (TFileCollection) using the specified selector (.C) file; or TSelector object.; The default tree is analyzed (i.e. the first one found). To speci",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProof.html:51188,Feedback,Feedback,51188,root/html534/TProof.html,https://root.cern,https://root.cern/root/html534/TProof.html,3,['Feedback'],['Feedback']
Usability,"This allows to; set and fix parameter values, and set step sizes directly. Restricting the fit range. The fit range can be restricted through; fit->SetRangeX(first bin #, last bin #);; and freed using; fit->ReleaseRangeX();; For 2D histograms the Y range can be similarly restricted using; fit->SetRangeY(first bin #, last bin #);; fit->ReleaseRangeY();; and for 3D histograms also; fit->SetRangeZ(first bin #, last bin #);; fit->ReleaseRangeZ();. Weights histograms. Weights histograms (for a motivation see the above publication) can be specified; for the individual MC sources through; fit->SetWeight(parameter #, pointer to weights histogram);; and unset by specifying a null pointer. Obtaining fit results. The fit is carried out through; Int_t status = fit->Fit();; where status is the code returned from the ""MINIMIZE"" command. For fits; that converged, parameter values and errors can be obtained through; fit->GetResult(parameter #, value, error);; and the histogram corresponding to the total Monte Carlo prediction (which; is not the same as a simple weighted sum of the input Monte Carlo distributions); can be obtained by; TH1* result = fit->GetPlot();. Using different histograms. It is possible to change the histogram being fitted through; fit->SetData(TH1* data);; and to change the template histogram for a given parameter number through; fit->SetMC(parameter #, TH1* MC);; This can speed up code in case of multiple data or template histograms;; however, it should be done with care as any settings are taken over from; the previous fit. In addition, neither the dimensionality nor the numbers of; bins of the histograms should change (in that case it is better to instantiate; a new TFractionFitter object). Errors. Any serious inconsistency results in an error. Function Members (Methods); public:. TFractionFitter(); TFractionFitter(TH1* data, TObjArray* MCs); virtual~TFractionFitter(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Opti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFractionFitter.html:4375,simpl,simple,4375,root/html528/TFractionFitter.html,https://root.cern,https://root.cern/root/html528/TFractionFitter.html,1,['simpl'],['simple']
Usability,"This is accomplished by ""positioning"" some volumes ""inside"" others. Any volume is an un-positioned object in the sense that it defines only a ""local frame"" (matching the one of its ""shape""). In order to fully define the mother-daughter relationship between two volumes one has to specify how the daughter will be positioned inside. This is accomplished by defining a ""local geometrical transformation"" of the daughter with respect to the mother coordinate system. These transformations will be subsequently used in the example.; Q: ""I see the lines defining the top level volume as in the previous example,; but what about the other volumes named REPLICA and ROOT?""; A: You will also notice that several other volumes are created by using lines like:; TGeoVolume *someVolume = gGeoManager->MakeXXX(""someName"",; ptrMedium, /* parameters coresponding to XXX ...*/); In the method above XXX represent some shape name (Box, Tube, etc.). This is just a simple way of creating a volume having a given shape in one-step (see also section: ""Creating and Positioning; Volumes""). As for REPLICA and ROOT volumes, they are just some ""virtual volumes"" used for grouping and positioning together other ""real volumes"". See ""Positioned Volumes (Nodes)"". The same structure represented by (a real or) a virtual volume can be ""replicated"" several times in the geometry.; Q: ""Fine, so probably the real volumes are the ones composing the letters R,; O and T. Why one have to define so many volumes to make an R?""; A: Well, in real life some objects have much more complex shapes that an ""R"". The modeller cannot just know all of them; the idea is to make a complex object by using elementary building blocks that have known shapes (called ""primitive shapes""). Gluing these together in the appropriate way is the user responsibility.; Q: ""I am getting the global picture but not making much out of it... There; are also a lot of calls to TGeoVolume::AddNode() that I do not understand.""; A: A volume is positioned inside",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Geometry.html:9457,simpl,simple,9457,doc/master/group__Geometry.html,https://root.cern,https://root.cern/doc/master/group__Geometry.html,1,['simpl'],['simple']
Usability,"This is intended to be used as part of a generate Selector class; which will hold the directory and its associate. Function Members (Methods); public:. ~TBranchProxyDirector(); voidAttach(ROOT::TBranchProxy* p); voidAttach(ROOT::TFriendProxy* f); TH1F*CreateHistogram(const char* options); Long64_tGetReadEntry() const; TTree*GetTree() const; voidSetReadEntry(Long64_t entry); TTree*SetTree(TTree* newtree); ROOT::TBranchProxyDirectorTBranchProxyDirector(TTree* tree, Long64_t i); ROOT::TBranchProxyDirectorTBranchProxyDirector(TTree* tree, Int_t i). private:. ROOT::TBranchProxyDirector&operator=(const ROOT::TBranchProxyDirector&); ROOT::TBranchProxyDirectorTBranchProxyDirector(const ROOT::TBranchProxyDirector&). Data Members; private:. list<TBranchProxy*>fDirected; Long64_tfEntryEntry currently being read.; list<TFriendProxy*>fFriends; TTree*fTreeTTree we are currently looking at. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TBranchProxyDirector(TTree* tree, Long64_t i); Simple constructor. TBranchProxyDirector(TTree* tree, Int_t i); cint has a problem casting int to long long; Simple constructor. void Attach(TBranchProxy* p). void Attach(TFriendProxy* p). TH1F* CreateHistogram(const char* options); Create a temporary 1D histogram. void SetReadEntry(Long64_t entry). TTree* SetTree(TTree* newtree). TBranchProxyDirector(const ROOT::TBranchProxyDirector& ); {;}. TBranchProxyDirector& operator=(const ROOT::TBranchProxyDirector& ); {return *this;}. Long64_t GetReadEntry() const; { return fEntry; }. TTree* GetTree() const; void Print();. { return fTree; }. » Author: Philippe Canal 13/05/2003 » Copyright (C) 1995-2004, Rene Brun, Fons Rademakers and al. *; » Last changed: root/base:$Id: TBranchProxyDirector.h 34913 2010-08-20 19:18:35Z pcanal $ » Last generated: 2011-11-03 20:06; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__TBranchProxyDirector.html:1515,Simpl,Simple,1515,root/html532/ROOT__TBranchProxyDirector.html,https://root.cern,https://root.cern/root/html532/ROOT__TBranchProxyDirector.html,2,['Simpl'],['Simple']
Usability,TmpCoordErrorVector ); 657 {; 658 delete[] fpTmpCoordErrorVector;; 659 fpTmpCoordErrorVector = nullptr;; 660 }; 661 ; 662 if ( kNoError == fErrorType ); 663 {; 664 fCoordErrors.clear();; 665 fCoordErrorsPtr.clear();; 666 ; 667 fDataErrorHigh.clear();; 668 fDataErrorHighPtr = nullptr;; 669 ; 670 fDataErrorLow.clear();; 671 fDataErrorLowPtr = nullptr;; 672 ; 673 fDataError.clear();; 674 fDataErrorPtr = nullptr;; 675 ; 676 return;; 677 }; 678 ; 679 if ( kCoordError == fErrorType || kAsymError == fErrorType ); 680 {; 681 fCoordErrorsPtr.resize( fDim );; 682 fCoordErrors.resize( fDim );; 683 for( unsigned int i=0; i < fDim; i++ ); 684 {; 685 fCoordErrors[i].resize(fMaxPoints + FitData::VectorPadding(fMaxPoints));; 686 ; 687 fCoordErrorsPtr[i] = fCoordErrors[i].empty() ? nullptr : &fCoordErrors[i].front();; 688 }; 689 ; 690 fpTmpCoordErrorVector = new double[fDim];; 691 }; 692 else; 693 {; 694 fCoordErrors.clear();; 695 fCoordErrorsPtr.clear();; 696 }; 697 ; 698 if ( kValueError == fErrorType || kCoordError == fErrorType ); 699 {; 700 fDataError.resize(fMaxPoints + FitData::VectorPadding(fMaxPoints));; 701 fDataErrorPtr = fDataError.empty() ? nullptr : &fDataError.front();; 702 ; 703 fDataErrorHigh.clear();; 704 fDataErrorHighPtr = nullptr;; 705 fDataErrorLow.clear();; 706 fDataErrorLowPtr = nullptr;; 707 }; 708 else if ( fErrorType == kAsymError ); 709 {; 710 fDataErrorHigh.resize(fMaxPoints + FitData::VectorPadding(fMaxPoints));; 711 fDataErrorHighPtr = fDataErrorHigh.empty() ? nullptr : &fDataErrorHigh.front();; 712 ; 713 fDataErrorLow.resize(fMaxPoints + FitData::VectorPadding(fMaxPoints));; 714 fDataErrorLowPtr = fDataErrorLow.empty() ? nullptr : &fDataErrorLow.front();; 715 ; 716 fDataError.clear();; 717 fDataErrorPtr = nullptr;; 718 }; 719 else; 720 {; 721 assert(false);; 722 }; 723 }; 724 ; 725 void BinData::InitBinEdge(); 726 {; 727 fBinEdge.resize( fDim );; 728 ; 729 for( unsigned int i=0; i<fDim; i++ ); 730 {; 731 fBinEdge[i].reserve(fMaxPoints + FitData::Vecto,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BinData_8cxx_source.html:21198,clear,clear,21198,doc/master/BinData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/BinData_8cxx_source.html,1,['clear'],['clear']
Usability,"ToMatchingChildren; static TEveElement::ECompoundSelectionColorBitsTEveElement::kCSCBApplyMainTransparencyToAllChildren; static TEveElement::ECompoundSelectionColorBitsTEveElement::kCSCBApplyMainTransparencyToMatchingChildren; static TEveElement::ECompoundSelectionColorBitsTEveElement::kCSCBImplySelectAllChildren; static TEveElement::ECompoundSelectionColorBitsTEveElement::kCSCBTakeAnyParentAsMaster; static TEveElement::EDestructTEveElement::kNone; static TEveElement::EDestructTEveElement::kStandard. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveWindow(const char* n = ""TEveWindow"", const char* t = """"); Constructor. ~TEveWindow(); Destructor. void PreDeleteElement(); Called before the element is deleted, thus offering the last chance; to detach from acquired resources and from the framework itself.; Here the request is just passed to TEveManager.; If you override it, make sure to call base-class version. void PreUndock(); Virtual function called before a window is undocked. void PostDock(); Virtual function called after a window is docked. void NameTitleChanged(); Name or title of the window changed - propagate to frames.; Virtual from TEveElement. void PopulateEmptyFrame(TEveCompositeFrame* ef); Populate given frame-slot - intended for initial population; of a new slot or low-level window-swapping.; No layout or window-mapping is done. void SwapWindow(TEveWindow* w); Swap frames with the given window. void SwapWindowWithCurrent(); Swap frames with the current window. void UndockWindow(); Undock the window - put it into a dedicated main-frame. void UndockWindowDestroySlot(); Undock the window - put it into a dedicated main-frame.; The old window slot is destroyed. void ReplaceWindow(TEveWindow* w); Replace this window with the passed one.; Eve parentship is properly handled.; This will most likely lead to the destruction of this window.; Layout is called on the frame. void DestroyWindow(); Destroy eve-window - replace i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveWindow.html:22659,undo,undocked,22659,root/html602/TEveWindow.html,https://root.cern,https://root.cern/root/html602/TEveWindow.html,4,['undo'],['undocked']
Usability,"Tool::BuildConfig Build configuration object for RooSimWSTool; RooSimWSTool::MultiBuildConfig Build configuration object for RooSimWSTool with multiple prototype p.d.f.; RooSimWSTool::ObjBuildConfig Validated RooSimWSTool build configuration; RooSimWSTool::ObjSplitRule Validated RooSimWSTool split rule; RooSimWSTool::SplitRule Split rule specification for prototype p.d.f; RooSimultaneous Simultaneous operator p.d.f, functions like C++ 'switch()' on input p.d.fs operating on index category5A; RooStats ; RooStats::AcceptanceRegion A simple class for acceptance regions used for ConfidenceBelt; RooStats::BayesianCalculator BayesianCalculator class; RooStats::BernsteinCorrection A utility to add polynomial corrrection terms to a model to improve the description of data.; RooStats::CombinedCalculator A base class that is for tools that can be both HypoTestCalculators and IntervalCalculators; RooStats::ConfInterval Interface for Confidence Intervals; RooStats::ConfidenceBelt A confidence belt for the Neyman Construction; RooStats::DebuggingSampler A simple implementation of the DistributionCreator interface; RooStats::DebuggingTestStat A concrete implementation of the TestStatistic interface, useful for debugging.; RooStats::FeldmanCousins Interface for tools setting limits (producing confidence intervals); RooStats::HLFactory The high Level Model Factory to create models from datacards; RooStats::Heavyside Your description goes here...; RooStats::HybridCalculator Hypothesis test calculator using a Bayesian-frequentist hybrid method; RooStats::HybridPlot Provides the plots for an HybridResult; RooStats::HybridResult Class containing the results of the HybridCalculator; RooStats::HypoTestCalculator Interface for tools doing hypothesis tests; RooStats::HypoTestInverter HypoTestInverter class; RooStats::HypoTestInverterPlot HypoTestInverterPlot class; RooStats::HypoTestInverterResult HypoTestInverterResult class ; RooStats::HypoTestResult Base class to represent results of a h",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ClassIndex.html:42604,simpl,simple,42604,root/html526/ClassIndex.html,https://root.cern,https://root.cern/root/html526/ClassIndex.html,1,['simpl'],['simple']
Usability,"Total number of bytes in all leaves after compression; static Int_tTBranch::fgCount! branch counter. private:. Long64_tfRequestedEntry! Cursor indicating which entry is being requested. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TBranchRef(); Default constructor. TBranchRef(TTree* tree); Main constructor called by TTree::BranchRef. ~TBranchRef(); Typical destructor. void Clear(Option_t* option = """"); Clear entries in the TRefTable. Int_t Fill(); Fill the branch basket with the referenced objects parent numbers. Bool_t Notify(); This function is called by TRefTable::Notify, itself called by; TRef::GetObject.; The function reads the branch containing the object referenced; by the TRef. void Print(Option_t* option = """") const; Print the TRefTable branch. void ReadLeavesImpl(TBuffer& b); This function called by TBranch::GetEntry overloads TBranch::ReadLeaves. void FillLeavesImpl(TBuffer& b); This function called by TBranch::Fill overloads TBranch::FillLeaves. void Reset(Option_t* option = """"); Existing buffers are deleted; Entries, max and min are reset; TRefTable is cleared. void ResetAfterMerge(TFileMergeInfo* ); Reset a Branch after a Merge operation (drop data but keep customizations); TRefTable is cleared. Int_t SetParent(const TObject* obj, Int_t branchID); -- Set the current parent branch. This function is called by TBranchElement::GetEntry(); and TBranchElement::Fill() when reading or writing; branches that may contain referenced objects. TRefTable * GetRefTable() const; {return fRefTable;}. void SetRequestedEntry(Long64_t entry); {fRequestedEntry = entry;}. » Author: Rene Brun 19/08/2004 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id: TBranchRef.h 40872 2011-09-13 21:33:33Z pcanal $ » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TBranchRef.html:14845,clear,cleared,14845,root/html532/TBranchRef.html,https://root.cern,https://root.cern/root/html532/TBranchRef.html,4,['clear'],['cleared']
Usability,"TransMatrix(Double_t* carr); virtual voidTEveElement::SetTransMatrix(const TGeoMatrix& mat); virtual voidTObject::SetUniqueID(UInt_t uid); voidTEveElement::SetUserData(void* ud); voidSetVertical(Bool_t x = kTRUE); voidTEveElement::SetVizModel(TEveElement* model); voidTEveElement::SetVizTag(const TString& tag); virtual voidShowMembers(TMemberInspector& insp) const; virtual Bool_tTEveElement::SingleRnrState() const; virtual Int_tTNamed::Sizeof() const; voidTEveElement::SpawnEditor()MENU ; voidTEveElement::StampColorSelection(); voidTEveElement::StampObjProps(); voidTEveElement::StampTransBBox(); voidTEveElement::StampVisibility(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); voidTEveWindow::SwapWindow(TEveWindow* w); static voidTEveWindow::SwapWindows(TEveWindow* w1, TEveWindow* w2); voidTEveWindow::SwapWindowWithCurrent()MENU ; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTEveElement::TestCSCBits(UChar_t f) const; TEveWindowPack(TGPack* p, const char* n = ""TEveWindowPack"", const char* t = """"); voidTEveWindow::TitleBarClicked(); voidTEveWindow::UndockWindow()MENU ; voidTEveWindow::UndockWindowDestroySlot()MENU ; virtual voidTEveElement::UnHighlighted(); virtual voidTEveElement::UnSelected(); virtual voidTObject::UseCurrentStyle(); voidTEveElement::VizDB_Apply(const char* tag)MENU ; voidTEveElement::VizDB_Insert(const char* tag, Bool_t replace = kTRUE, Bool_t update = kTRUE)MENU ; voidTEveElement::VizDB_Reapply()MENU ; voidTEveElement::VizDB_UpdateModel(Bool_t update = kTRUE)MENU ; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTEveElement::WriteVizParams(ostream& out, const TString& var).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveWindowPack.html:17271,Undo,UndockWindow,17271,root/html602/TEveWindowPack.html,https://root.cern,https://root.cern/root/html602/TEveWindowPack.html,4,['Undo'],"['UndockWindow', 'UndockWindowDestroySlot']"
Usability,"Tree::FlushBaskets is called and all the current basket are closed-out and written to disk individually.; By default the previous header is deleted after having written the new header. if option contains ""Overwrite"", the previous Tree header is deleted before written the new header. This option is slightly faster, but the default option is safer in case of a problem (disk quota exceeded) when writing the new header.; The function returns the number of bytes written to the file. if the number of bytes is null, an error has occurred while writing the header to the file. How to write a Tree in one process and view it from another process; The following two scripts illustrate how to do this. The script treew.C is executed by process1, treer.C by process2; script treew.C: void treew() {; TFile f(""test.root"",""recreate"");; TNtuple *ntuple = new TNtuple(""ntuple"",""Demo"",""px:py:pz:random:i"");; Float_t px, py, pz;; for ( Int_t i=0; i<10000000; i++) {; gRandom->Rannor(px,py);; pz = px*px + py*py;; Float_t random = gRandom->Rndm(1);; ntuple->Fill(px,py,pz,random,i);; if (i%1000 == 1) ntuple->AutoSave(""SaveSelf"");; }; }; TNtupleA simple TTree restricted to a list of float variables only.Definition TNtuple.h:28; TNtuple::FillInt_t Fill() overrideFill a Ntuple with current values in fArgs.Definition TNtuple.cxx:169; TRandom::RndmDouble_t Rndm() overrideMachine independent random number generator.Definition TRandom.cxx:559; TTree::AutoSavevirtual Long64_t AutoSave(Option_t *option="""")AutoSave tree header every fAutoSave bytes.Definition TTree.cxx:1500; int; script treer.C: void treer() {; TFile f(""test.root"");; TTree *ntuple = (TTree*)f.Get(""ntuple"");; TCanvas c1;; Int_t first = 0;; while(1) {; if (first == 0) ntuple->Draw(""px>>hpx"", """","""",10000000,first);; else ntuple->Draw(""px>>+hpx"","""","""",10000000,first);; first = (Int_t)ntuple->GetEntries();; c1.Update();; gSystem->Sleep(1000); //sleep 1 second; ntuple->Refresh();; }; }; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:555",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTree.html:76913,simpl,simple,76913,doc/v632/classTTree.html,https://root.cern,https://root.cern/doc/v632/classTTree.html,1,['simpl'],['simple']
Usability,"Tree::FlushBaskets is called and all the current basket are closed-out and written to disk individually.; By default the previous header is deleted after having written the new header. if option contains ""Overwrite"", the previous Tree header is deleted before written the new header. This option is slightly faster, but the default option is safer in case of a problem (disk quota exceeded) when writing the new header.; The function returns the number of bytes written to the file. if the number of bytes is null, an error has occurred while writing the header to the file. How to write a Tree in one process and view it from another process; The following two scripts illustrate how to do this. The script treew.C is executed by process1, treer.C by process2; script treew.C: void treew() {; TFile f(""test.root"",""recreate"");; TNtuple *ntuple = new TNtuple(""ntuple"",""Demo"",""px:py:pz:random:i"");; Float_t px, py, pz;; for ( Int_t i=0; i<10000000; i++) {; gRandom->Rannor(px,py);; pz = px*px + py*py;; Float_t random = gRandom->Rndm(1);; ntuple->Fill(px,py,pz,random,i);; if (i%1000 == 1) ntuple->AutoSave(""SaveSelf"");; }; }; TNtupleA simple TTree restricted to a list of float variables only.Definition TNtuple.h:28; TNtuple::FillInt_t Fill() overrideFill a Ntuple with current values in fArgs.Definition TNtuple.cxx:169; TRandom::RndmDouble_t Rndm() overrideMachine independent random number generator.Definition TRandom.cxx:559; TTree::AutoSavevirtual Long64_t AutoSave(Option_t *option="""")AutoSave tree header every fAutoSave bytes.Definition TTree.cxx:1500; int; script treer.C: void treer() {; TFile f(""test.root"");; TTree *ntuple = (TTree*)f.Get(""ntuple"");; TCanvas c1;; Int_t first = 0;; while(1) {; if (first == 0) ntuple->Draw(""px>>hpx"", """","""",10000000,first);; else ntuple->Draw(""px>>+hpx"","""","""",10000000,first);; first = (Int_t)ntuple->GetEntries();; c1.Update();; gSystem->Sleep(1000); //sleep 1 second; ntuple->Refresh();; }; }; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:561",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTree.html:77086,simpl,simple,77086,doc/master/classTTree.html,https://root.cern,https://root.cern/doc/master/classTTree.html,1,['simpl'],['simple']
Usability,"Tree::MakeClass. The TTree::Draw method is convenient and easy to use; however it falls short if you need to do some programming with the variable.; For example, for plotting the masses of all oppositely changed pairs of tracks, you would need to write a program that loops over all events, finds all pairs of tracks, and calculates the required quantities. We have shown how to retrieve the data arrays from the branches of the tree in the previous section, and you could just write that program from scratch. Since this is a very common task, ROOT provides a utility that generates a skeleton class designed to loop over the entries of the tree.; This is the TTree::MakeClass method. We will now go through the steps of using MakeClass with a simplified example. The methods used here obviously work for complex event loop calculations.; These are our assumptions: we would like to do selective plotting and loop through each entry of the tree and tracks. We chose a simple example: we want to plot fPx of the first 100 tracks of each entry. We have a ROOT tree with a branch for each data member in the “Event” object. To build this file and tree follow the instructions on how to build the examples in $ROOTSYS/test. Execute Event and instruct it to split the object with this command (from the UNIX command line).; > $ROOTSYS/test/Event 400 1 2 1; This creates an Event.root file with 400 events, compressed, split, and filled.; See $ROOTSYS/test/MainEvent.cxx for more info.; The person who designed the tree makes a shared library available to you, which defines the classes needed. In this case, the classes are Event, EventHeader, and Track and they are defined in the shared library libEvent.so. The designer also gives you the Event.h file to see the definition of the classes. You can locate Event.h in $ROOTSYS/test, and if you have not yet built libEvent.so, please see the instructions of how to build it (typing make in $ROOTSYS/test is enough). If you have already built it, you can ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:634649,simpl,simple,634649,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['simpl'],['simple']
Usability,"UE, Bool_t shapeProp = kFALSE); Bool_taddThreshold(Double_t upperLimit, const char* catName, Int_t catIdx = -99999); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual voidTObject::AppendPad(Option_t* option = """"); voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsArg*RooAbsCategory::createFundamental(const char* newname = 0) const; Roo1DTable*RooAbsCategory::createTable(const char* label) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooThresholdCategory.html:2156,Clear,Clear,2156,root/html534/RooThresholdCategory.html,https://root.cern,https://root.cern/root/html534/RooThresholdCategory.html,1,['Clear'],['Clear']
Usability,"UID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. Bool_tfColourfulOutputflag for use of colors; TMVA::MsgLogger*fLoggerthe output logger; Int_tfNcountsreference number of ""counts"" ; TStringfPrefixprefix for outputs; static const TStringfgClassNameused for output; static const Int_tfgNbinsnumber of bins in progress bar. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Timer(const char* prefix = """", Bool_t colourfulOutput = kTRUE); constructor. Timer(Int_t ncounts, const char* prefix = """", Bool_t colourfulOutput = kTRUE); standard constructor: ncounts gives the total number of counts that; the loop will iterate through. At each call of the timer, the current; number of counts is provided by the user, so that the timer can obtain; the due time from linearly interpolating the spent time. ~Timer( void ); destructor. void Init(Int_t ncounts); timer initialisation. void Reset( void ); resets timer. Double_t ElapsedSeconds( void ); computes elapsed tim in seconds. TString GetElapsedTime(Bool_t Scientific = kTRUE); returns pretty string with elaplsed time. TString GetLeftTime(Int_t icounts); returns pretty string with time left. void DrawProgressBar(); draws the progressbar. void DrawProgressBar(TString ); draws a string in the progress bar. void DrawProgressBar(Int_t , const TString& comment = """"); draws progress bar in color or B&W; caution:. TString SecToText(Double_t , Bool_t ) const; pretty string output. Timer(const char* prefix = """", Bool_t colourfulOutput = kTRUE). » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss » Copyright (c) 2006: *; » Last changed: root/tmva $Id: Timer.h 39395 2011-05-26 10:05:54Z moneta $ » Last generated: 2011-07-04 15:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__Timer.html:7607,progress bar,progress bar,7607,root/html530/TMVA__Timer.html,https://root.cern,https://root.cern/root/html530/TMVA__Timer.html,2,['progress bar'],['progress bar']
Usability,"UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTRootBrowser::BrowseObj(TObject* obj)SIGNAL ; TBrowser*TBrowserImp::Browser() const; virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); virtual voidTRootBrowser::Checked(TObject* obj, Bool_t check)SIGNAL ; virtual voidTBrowserImp::CheckObjectItem(TObject*, Bool_t = kFALSE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTRootBrowser::CloneBrowser(); virtual voidCloseTab(Int_t id); virtual voidTRootBrowser::CloseTabs(); virtual voidCloseWindow(); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; voidTRootBrowser::CreateBrowser(const char* name); virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveBrowser.html:1770,Clear,Clear,1770,root/html534/TEveBrowser.html,https://root.cern,https://root.cern/root/html534/TEveBrowser.html,3,['Clear'],['Clear']
Usability,"UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTRootBrowser::BrowseObj(TObject* obj)SIGNAL ; TBrowser*TBrowserImp::Browser() const; virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); virtual voidTRootBrowser::Checked(TObject* obj, Bool_t check)SIGNAL ; virtual voidTBrowserImp::CheckObjectItem(TObject*, Bool_t = kFALSE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTRootBrowser::CloneBrowser(); voidTRootBrowser::CloseTab(Int_t id); virtual voidTRootBrowser::CloseTabs(); virtual voidTRootBrowser::CloseWindow(); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; voidTRootBrowser::CreateBrowser(const char* name); virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TEveBrowser.html:1770,Clear,Clear,1770,root/html532/TEveBrowser.html,https://root.cern,https://root.cern/root/html532/TEveBrowser.html,1,['Clear'],['Clear']
Usability,"UInt_t f) const; virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidChangeCursor(Event_t* event); static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTGFrame::DoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); static voidFixBounds(Float_t& min, Float_t& max); static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; const TGResourcePool*TGFrame::GetResourcePool() const; virtual void*TGFrame::GetSender(); virtual const char*TQObject::GetSenderClassName() const; TStringGetSString() const; voidTObject::MakeZombie(); Int_tTGWidget::SetFlags(Int_t flags); virtual voidTGFrame::StartGuiBuilding(Bool_t on = kTRUE). private:. TGDoubleSlider&operator=(const TGDoubleSlider&). Data Members; public:. enum TGFrame::[unnamed] { kDeleteWindowCalled; };; enum TGWindow::EEditMode { kEditEnable; kEditDisable; kEditDisableEvents; kEditDisableGrab; kEditDisableLayout; kEditDisableResize; kEditDisableHeight; kEditDisableWidth; kEditDisableBtnEnable; kEditDisableKeyEnable; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsRefe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGDoubleSlider.html:15362,Clear,ClearFlags,15362,root/html532/TGDoubleSlider.html,https://root.cern,https://root.cern/root/html532/TGDoubleSlider.html,2,['Clear'],['ClearFlags']
Usability,"UInt_t h); virtual Bool_tTGX11::AllocColor(Colormap_t cmap, ColorStruct_t& color); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTGX11::Bell(Int_t percent); virtual voidTObject::Browse(TBrowser* b); virtual voidTGX11::ChangeActivePointerGrab(Window_t, UInt_t, Cursor_t); virtual voidTGX11::ChangeGC(GContext_t gc, GCValues_t* gval); virtual voidTGX11::ChangeProperties(Window_t id, Atom_t property, Atom_t type, Int_t format, UChar_t* data, Int_t len); virtual voidTGX11::ChangeProperty(Window_t id, Atom_t property, Atom_t type, UChar_t* data, Int_t len); virtual voidTGX11::ChangeWindowAttributes(Window_t id, SetWindowAttributes_t* attr); virtual Bool_tTGX11::CheckEvent(Window_t id, EGEventType type, Event_t& ev); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTGX11::ClearArea(Window_t id, Int_t x, Int_t y, UInt_t w, UInt_t h); virtual voidTGX11::ClearWindow(); virtual voidTGX11::ClearWindow(Window_t id); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTGX11::CloseDisplay(); virtual voidTGX11::ClosePixmap(); virtual voidTGX11::CloseWindow(); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTGX11::ConvertPrimarySelection(Window_t id, Atom_t clipboard, Time_t when); virtual voidTGX11::ConvertSelection(Window_t, Atom_t&, Atom_t&, Atom_t&, Time_t&); virtual voidTNamed::Copy(TObject& named) const; virtual voidTGX11::CopyArea(Drawable_t src, Drawable_t dest, GContext_t gc, Int_t src_x, Int_t src_y, UInt_t width, UInt_t height, Int_t dest_x, Int_t dest_y); virtual voidTGX11::CopyGC(GContext_t org, GContext_t dest, Mask_t mask); virtual voidTGX11::CopyPixmap(Int_t wid, Int_t xpos, Int_t ypos); virtual Pixmap_tTGX11::CreateBitmap(Drawable_t id, const char* bitmap, UInt_t width, UInt_t height); virtual Cursor_tTGX11::CreateCursor(ECursor cursor); virtual GContext_tTGX11::CreateGC(Drawable_t id, GCValues_t* gval); virtual Drawable_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGX11TTF.html:1908,Clear,ClearWindow,1908,root/html532/TGX11TTF.html,https://root.cern,https://root.cern/root/html532/TGX11TTF.html,1,['Clear'],['ClearWindow']
Usability,"UInt_t height, ULong_t forecolor, ULong_t backcolor, Int_t depth). Pixmap_t CreateBitmap(Drawable_t id, const char* bitmap, UInt_t width, UInt_t height). Bool_t CreatePictureFromFile(Drawable_t id, const char* filename, Pixmap_t& pict, Pixmap_t& pict_mask, PictureAttributes_t& attr). Bool_t ReadPictureDataFromFile(const char* filename, char*** ret_data). void DeletePictureData(void* data). void SetDashes(GContext_t gc, Int_t offset, const char* dash_list, Int_t n). Bool_t ParseColor(Colormap_t cmap, const char* cname, ColorStruct_t& color). void QueryColor(Colormap_t cmap, ColorStruct_t& color). void FreeColor(Colormap_t cmap, ULong_t pixel). Int_t EventsPending(). void NextEvent(Event_t& event). void Bell(Int_t percent). void CopyArea(Drawable_t src, Drawable_t dest, GContext_t gc, Int_t src_x, Int_t src_y, UInt_t width, UInt_t height, Int_t dest_x, Int_t dest_y). void ChangeProperty(Window_t id, Atom_t property, Atom_t type, UChar_t* data, Int_t len). void ClearArea(Window_t id, Int_t x, Int_t y, UInt_t w, UInt_t h). Bool_t CheckEvent(Window_t id, EGEventType type, Event_t& ev). void SendEvent(Window_t id, Event_t* ev). void WMDeleteNotify(Window_t id). void SetKeyAutoRepeat(Bool_t on = kTRUE). void GrabKey(Window_t id, Int_t keycode, UInt_t modifier, Bool_t grab = kTRUE). void GrabButton(Window_t id, EMouseButton button, UInt_t modifier, UInt_t evmask, Window_t confine, Cursor_t cursor, Bool_t grab = kTRUE). void SetWindowName(Window_t id, char* name). void SetIconName(Window_t id, char* name). void SetIconPixmap(Window_t id, Pixmap_t pic). void SetClassHints(Window_t id, char* className, char* resourceName). void SetMWMHints(Window_t id, UInt_t value, UInt_t funcs, UInt_t input). void SetWMPosition(Window_t id, Int_t x, Int_t y). void SetWMSize(Window_t id, UInt_t w, UInt_t h). void SetWMSizeHints(Window_t id, UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc). void SetWMTransientHint(Window_t id, Window_t main_id). void DrawString(Draw",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGX11.html:42628,Clear,ClearArea,42628,root/html532/TGX11.html,https://root.cern,https://root.cern/root/html532/TGX11.html,4,['Clear'],['ClearArea']
Usability,"UInt_t nrows = 6, ncolumns = 5;; Double_t** data = new Double_t*[nrows];; for (i = 0; i < nrows; i++) {; data[i] = new Double_t[ncolumns];; for (j = 0; j < ncolumns; j++) {; data[i][j] = 10 * i + j;; }; }. // Create a main frame to contain the table; TGMainFrame* mainframe = new TGMainFrame(0, 400, 200);; mainframe->SetCleanup(kDeepCleanup) ;. // Create an interface; TGSimpleTableInterface *iface = new TGSimpleTableInterface(data, 6, 5);. // Create the table; TGTable *table = new TGTable(mainframe, 999, iface);. // Add the table to the main frame; mainframe->AddFrame(table, new TGLayoutHints(kLHintsExpandX | kLHintsExpandY));. //Update data; data[5][1] = 3.01;; //update the table view; table->Update();. // Layout and map the main frame; mainframe->SetWindowName(""Tree Table Test"") ;; mainframe->MapSubwindows() ;; mainframe->Layout();; mainframe->Resize() ;; mainframe->MapWindow() ;. return mainframe;; }; It is also possible to visualise data from a tree. A simple macro; showing the use of a TTreeTableInterface follows. Picture; Source. {; // Open a root file.; TFile *file = new TFile(""$ROOTSYS/tutorials/hsimple.root"");; // Load a tree from the file; TNtuple *ntuple = (TNtuple *)file->Get(""ntuple"");. // Create an interface; TTreeTableInterface *iface = new TTreeTableInterface(ntuple);. // Create a main frame to contain the table; TGMainFrame* mainframe = new TGMainFrame(0, 400, 200);; mainframe->SetCleanup(kDeepCleanup) ;. // Create the table; TGTable *table = new TGTable(mainframe, 999, iface, 10, 6);. // Add the table to the main frame; mainframe->AddFrame(table, new TGLayoutHints(kLHintsExpandX | kLHintsExpandY));. // Set a selection; iface->SetSelection(""px > 0."");; // Add a column; iface->AddColumn(""(px+py)/(px-py)"", 0);; //update the table view; table->Update();. // Layout and map the main frame; mainframe->SetWindowName(""Tree Table Test"") ;; mainframe->MapSubwindows() ;; mainframe->Layout();; mainframe->Resize() ;; mainframe->MapWindow() ;. return mainframe;; }",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGTable.html:2601,simpl,simple,2601,root/html602/TGTable.html,https://root.cern,https://root.cern/root/html602/TGTable.html,8,['simpl'],['simple']
Usability,"UInt_t options = 0, Pixel_t back = GetDefaultFrameBackground()); virtual~TGPack(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidAddFrame(TGFrame* f, TGLayoutHints* l = 0); virtual voidAddFrameWithWeight(TGFrame* f, TGLayoutHints* l, Float_t w); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); virtual voidDeleteFrame(TGFrame* f); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(); Bool_tTQObject::Disconnect(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGPack.html:1781,Clear,Clear,1781,root/html532/TGPack.html,https://root.cern,https://root.cern/root/html532/TGPack.html,2,['Clear'],['Clear']
Usability,"UInt_tfNvarsnumber of variables used to separate S and B; TMVA::DecisionTree::EPruneMethodfPruneMethodmethod used for prunig ; Double_tfPruneStrengtha parameter to set the ""amount"" of pruning..needs to be adjusted ; Bool_tfRandomisedTreechoose at each node splitting a random set of variables ; TMVA::RegressionVariance*fRegTypethe separation crition used in Regression; TMVA::SeparationBase*fSepTypethe separation crition; UInt_tfSigClassclass which is treated as signal when building the tree; Int_tfTreeIDjust an ID number given to the tree.. makes debugging easier as tree knows who he is.; Bool_tfUseExclusiveVarsindividual variables already used in fisher criterium are not anymore analysed individually for node splitting; Bool_tfUseFisherCutsuse multivariate splits using the Fisher criterium; Int_tfUseNvarsthe number of variables used in randomised trees;; Bool_tfUsePoissonNvarsuse ""fUseNvars"" not as fixed number but as mean of a possion distr. in each split; Bool_tfUseSearchTreecut scan done with binary trees or simple event loop.; vector<Double_t>fVariableImportancethe relative importance of the different variables ; static const Int_tfgDebugLeveldebug level determining some printout/control plots etc.; static const Int_tfgRandomSeedset nonzero for debugging and zero for random seeds. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; DecisionTree(); default constructor using the GiniIndex as separation criterion,; no restrictions on minium number of events in a leave note or the; separation gain in the node splitting. DecisionTree(TMVA::SeparationBase* sepType, Float_t minSize, Int_t nCuts, TMVA::DataSetInfo* = NULL, UInt_t cls = 0, Bool_t randomisedTree = kFALSE, Int_t useNvars = 0, Bool_t usePoissonNvars = kFALSE, UInt_t nMaxDepth = 9999999, Int_t iSeed = fgRandomSeed, Float_t purityLimit = 0.5, Int_t treeID = 0); constructor specifying the separation type, the min number of; events in a no that is still subjected to further",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__DecisionTree.html:8235,simpl,simple,8235,root/html534/TMVA__DecisionTree.html,https://root.cern,https://root.cern/root/html534/TMVA__DecisionTree.html,2,['simpl'],['simple']
Usability,"UTC = kTRUE, Int_t secOffset = 0) const; static time_tMktimeFromUTC(tm_t* tmstruct); doubleoperator double() const; TTimeStamp&operator=(const TTimeStamp&); voidPrint(Option_t* option = """") const; voidSet(); voidSet(UInt_t tloc, Bool_t isUTC, Int_t secOffset, Bool_t dosDate); voidSet(Int_t date, Int_t time, Int_t nsec, Bool_t isUTC, Int_t secOffset); voidSet(Int_t year, Int_t month, Int_t day, Int_t hour, Int_t min, Int_t sec, Int_t nsec, Bool_t isUTC, Int_t secOffset); voidSetNanoSec(Int_t nsec); voidSetSec(Int_t sec); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). private:. voidNormalizeNanoSec(). Data Members; private:. Int_tfNanoSecnanoseconds; Int_tfSecseconds. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TTimeStamp(); Default ctor. Create a TTimeStamp and set it to the current time; (as best possible). The nanosecond part is faked so that subsequenct; calls simply add 1 to ensure that sequential calls are distinct; (and sortable). TTimeStamp(UInt_t year, UInt_t month, UInt_t day, UInt_t hour, UInt_t min, UInt_t sec, UInt_t nsec = 0, Bool_t isUTC = kTRUE, Int_t secOffset = 0); Create a TTimeStamp and set it to the specified year, month,; day, time, hour, minute, second and nanosec.; If !isUTC then it is assumed to be the standard local time zone. If local time is PST then one can use; TTimeStamp(year,month,day,hour,min,sec,nsec,kFALSE,0);; or; Int_t secOffset = 8*60*60;; TTimeStamp(year,month,day,hour,min,sec,nsec,kTRUE,8*60*60);. TTimeStamp(UInt_t date, UInt_t time, UInt_t nsec, Bool_t isUTC = kTRUE, Int_t secOffset = 0); Create a TTimeStamp and set it to the specified date, time, nanosec.; If !isUTC then it is assumed to be the standard local time zone. TTimeStamp(UInt_t tloc, Bool_t isUTC = kTRUE, Int_t secOffset = 0, Bool_t dosDate = kFALSE); Create a TTimeStamp and set it to tloc which must be a time_t value; returned by time(). This value is ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTimeStamp.html:3662,simpl,simply,3662,root/html528/TTimeStamp.html,https://root.cern,https://root.cern/root/html528/TTimeStamp.html,4,['simpl'],['simply']
Usability,"UUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TTUBS.h>. Inheritance diagram for TTUBS:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TTUBS() [1/3]. TTUBS::TTUBS ; (; ). TUBS shape default constructor. ; Definition at line 46 of file TTUBS.cxx. ◆ TTUBS() [2/3]. TTUBS::TTUBS ; (; const char * ; name, . const char * ; title, . const char * ; material, . Float_t ; rmin, . Float_t ; rmax, . Float_t ; dz, . Float_t ; phi1, . Float_t ; phi2 . ). TUBS shape normal constructor. ; Definition at line 55 of file TTUBS.cxx. ◆ TTUBS() [3/3]. TTUBS::TTUBS ; (; const char * ; name, . const char * ; title, . const char * ; material, . Float_t ; rmax, . Float_t ; dz, . Float_t ; phi1, . Float_t ; phi2 . ). TUBS shape ""simplified"" constructor. ; Definition at line 67 of file TTUBS.cxx. ◆ ~TTUBS(). TTUBS::~TTUBS ; (; ). override . TUBS shape default destructor. ; Definition at line 115 of file TTUBS.cxx. Member Function Documentation. ◆ Class(). static TClass * TTUBS::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TTUBS::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TTUBS::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 51 of file TTUBS.h. ◆ DeclFileName(). static const char * TTUBS::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 51 of file TTUBS.h. ◆ DistancetoPrimitive(). Int_t TTUBS::DistancetoPrimitive ; (; Int_t ; px, . Int_t ; py . ). overridevirtual . Compute distance from point px,py to a TUBE. ; Compute the closest distance of approach from point px,py to each computed outline poin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTUBS.html:19845,simpl,simplified,19845,doc/master/classTTUBS.html,https://root.cern,https://root.cern/doc/master/classTTUBS.html,1,['simpl'],['simplified']
Usability,"UUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TGLLockable::ELockTGLLockable::kModifyLock; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TGLViewer::ESecSelTypekOnKeyMod1; static TGLViewer::ESecSelTypekOnRequest; static TObject::(anonymous)TObject::kOverwrite; static TGLViewer::EPushActionkPushAnnotate; static TGLViewer::EPushActionkPushCamCenter; static TGLViewer::EPushActionkPushStd; static TGLLockable::ELockTGLLockable::kSelectLock; static TObject::(anonymous)TObject::kSingleKey; static TGLLockable::ELockTGLLockable::kUnlocked; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TGLAutoRotator*fAutoRotator!; Bool_tfAxesDepthTest! remove guides hidden-lines; Int_tfAxesType! axes type; TGLCamera*TGLViewerBase::fCameraCamera for rendering.; TGLCameraOverlay*fCameraOverlay! markup size of viewport in scene units; Bool_tTGLViewerBase::fChangedChange requiring redraw is pending.; TGLClip*TGLViewerBase::fClipViewer clipping-plane.; TGLClipSet*fClipSet!; TContextMenu*fContextMenu!; TGLCamera*fCurrentCamera!; TGLOverlayElement*fCurrentOvlElm! current overlay element; TGLSelectRecordfCurrentSelRec! select record in use as selected; TGLColorSetfDarkColorSet! color-set with dark background; Bool_tfDebugMode! debug mode (forced rebuild + draw scene/frustum/interest boxes); TGLViewer::EDragActionfDragAction; Bool_tfDrawCameraCenter! reference marker on?; TGEventHandler*fEventHandler! event handler; Float_tfFader! fade the view (0 - no fade/default, 1 - full fade/no rendering done); TGLContextIdentity*fGLCtxId!for embedded gl viewer; Int_tfGLDevice!for embedded gl viewer; TGLWidget*fGLWidget; TGedEditor*fGedEditor! GED editor; Bool_tfIgnoreSizesOnUpdate",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLViewer.html:20215,guid,guides,20215,root/html602/TGLViewer.html,https://root.cern,https://root.cern/root/html602/TGLViewer.html,4,['guid'],['guides']
Usability,"UnSelected(); Virtual function called when both fSelected is false and; fImpliedSelected is 0.; Nothing is done in this base-class version. void HighlightElement(Bool_t state); Set element's highlight state. Stamp appropriately. void IncImpliedHighlighted(); Increase element's implied-highlight count. Stamp appropriately. void DecImpliedHighlighted(); Decrease element's implied-highlight count. Stamp appropriately. void UnHighlighted(); Virtual function called when both fHighlighted is false and; fImpliedHighlighted is 0.; Nothing is done in this base-class version. void FillImpliedSelectedSet(TEveElement::Set_t& impSelSet); Populate set impSelSet with derived / dependant elements. If this is a TEveProjectable, the projected replicas are added; to the set. Thus it does not have to be reimplemented for each; sub-class of TEveProjected. Note that this also takes care of projections of TEveCompound; class, which is also a projectable. UChar_t GetSelectedLevel() const; Get selection level, needed for rendering selection and; highlight feedback.; This should go to TAtt3D. void RecheckImpliedSelections(); Call this if it is possible that implied-selection or highlight; has changed for this element or for implied-selection this; element is member of and you want to maintain consistent; selection state.; This can happen if you add elements into compounds in response; to user-interaction. void AddStamp(UChar_t bits); Add (bitwise or) given stamps to fChangeBits.; Register this element to gEve as stamped.; This method is virtual so that sub-classes can add additional; actions. The base-class method should still be called (or replicated). const TGPicture* GetListTreeIcon(Bool_t open = kFALSE); Returns pointer to first listtreeicon. const TGPicture* GetListTreeCheckBoxIcon(); Returns list-tree-item check-box picture appropriate for given; rendering state. const char* ToString(Bool_t b); Convert Bool_t to string - kTRUE or kFALSE.; Needed in WriteVizParams(). TEveElement& operato",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveElement.html:31379,feedback,feedback,31379,root/html528/TEveElement.html,https://root.cern,https://root.cern/root/html528/TEveElement.html,10,['feedback'],['feedback']
Usability,"Unfold(Double_t tau, const TH1* hist_y, Double_t scaleBias = 0.0); Do unfolding of an input histogram; tau_reg: regularisation parameter; input: input distribution with errors; scaleBias: scale factor applied to the bias; Data members required:; fA, fX0, fLsquared; Data members modified:; those documented in SetInput(); and those documented in DoUnfold(Double_t); Return value:; maximum global correlation coefficient; NOTE!!! return value >=1.0 means error, and the result is junk. Overflow bins of the input distribution are ignored!. Int_t SetInput(const TH1* hist_y, Double_t scaleBias = 0.0, Double_t oneOverZeroError = 0.0); Define the input data for subsequent calls to DoUnfold(Double_t); input: input distribution with errors; scaleBias: scale factor applied to the bias; oneOverZeroError: for bins with zero error, this number defines 1/error.; Return value: number of bins with bad error; +10000*number of unconstrained output bins; Note: return values>=10000 are fatal errors,; for the given input, the unfolding can not be done!; Data members modified:; fY, fVyy, fVyyinv, fBiasScale, fNdf; Data members cleared; see ClearResults. Double_t DoUnfold(Double_t tau); Unfold with given value of regularisation parameter tau; tau: new tau parameter; required data members:; fA: matrix to relate x and y; fY: measured data points; fX0: bias on x; fBiasScale: scale factor for fX0; fV: inverse of covariance matrix for y; fLsquared: regularisation conditions; modified data members:; fTauSquared and those documented in DoUnfold(void). Int_t ScanLcurve(Int_t nPoint, Double_t tauMin, Double_t tauMax, TGraph** lCurve, TSpline** logTauX = 0, TSpline** logTauY = 0); scan the L curve; nPoint: number of points on the resulting curve; tauMin: smallest tau value to study; tauMax: largest tau value to study; lCurve: the L curve as graph; logTauX: output spline of x-coordinates vs tau for the L curve; logTauY: output spline of y-coordinates vs tau for the L curve; return value: the coordinate ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TUnfold.html:28062,clear,cleared,28062,root/html528/TUnfold.html,https://root.cern,https://root.cern/root/html528/TUnfold.html,5,"['Clear', 'clear']","['ClearResults', 'cleared']"
Usability,"Unfold::SetInput. void SubtractBackground(const TH1* hist_bgr, const char* name, Double_t scale = 1.0, Double_t scale_error = 0.0); Store background source; bgr: background distribution with uncorrelated errors; name: name of this background source; scale: scale factor applied to the background; scaleError: error on scale factor (correlated error). Data members modified:; fBgrIn,fBgrErrUncorrIn,fBgrErrCorrIn; and those modified by DoBackgroundSubtraction(); save background source. void InitTUnfoldSys(void); initialize pointers and TMaps. ~TUnfoldSys(void); delete all data members. void ClearResults(void); clear all data members which depend on the unfolding results. void PrepareSysError(void); calculations required for syst.error; data members modified; fEmatUncorrX, fEmatUncorrAx, fDeltaCorrX, fDeltaCorrAx. void GetEmatrixSysUncorr(TH2* ematrix, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE); get output error contribution from statistical fluctuations in A; ematrix: output error matrix histogram; binMap: see method GetEmatrix(); clearEmat: set kTRUE to clear the histogram prior to adding the errors; data members modified:; fVYAx, fESparse, fEAtV, fErrorAStat. TMatrixDSparse * PrepareUncorrEmat(const TMatrixDSparse* m1, const TMatrixDSparse* m2); propagate uncorrelated systematic errors to a covariance matrix; m0,m1 : coefficients (matrices) for propagating the errors. the error matrix is calculated by standard error propagation, where the; derivative of the result vector X wrt the matrix A is given by. dX_k / dA_ij = M0_kj * Z0_i - M1_ki * Z1_j. where:; the matrices M0 and M1 are arguments to this function; the vectors Z0, Z1 : GetDXDAZ(). The matrix A is calculated from a matrix B as. A_ij = B_ij / sum_k B_kj. where k runs over additional indices of B, not present in A.; (underflow and overflow bins, used for efficiency corrections). define: Norm_j = sum_k B_kj (data member fSumOverY). the derivative of A wrt this input matrix B is given by:. dA_ij / dB_kj = ( ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TUnfoldSys.html:21004,clear,clearEmat,21004,root/html528/TUnfoldSys.html,https://root.cern,https://root.cern/root/html528/TUnfoldSys.html,12,['clear'],"['clear', 'clearEmat']"
Usability,"UniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidSlaveBegin(TTree*); virtual voidSlaveTerminate(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTerminate(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual intTProofDraw::Version() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTProofDraw::ClearFormula(); virtual Bool_tTProofDraw::CompileVariables(); virtual voidDefVar(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidDoFill(Long64_t entry, Double_t w, const Double_t* v); voidTProofDraw::FillWeight(); voidTObject::MakeZombie(); virtual Bool_tTProofDraw::ProcessSingle(Long64_t, Int_t); voidTProofDraw::SetCanvas(const char* objname); voidTProofDraw::SetDrawAtt(TObject* o); voidTProofDraw::SetError(const char* sub, const char* mesg). Data Members; public:. enum TProofDraw::[unnamed] { kWarn; };; enum TSelector::EAbort { kContinue; kAbortProcess; kAbortFile; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TSelector::EAbortTSelector::fAbortabort status; Int_tTProofDraw::fDimensionDimension of the current expression; TEntryList*fElist; TStringTProofDraw::fInitialExp; TList*TSelector::fInputlist of objects available during processing; TTreeFormulaManager*TProofDraw::fManager; Int_tTProofDraw::fMultiplicityIndicator of the variability of t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TProofDrawEntryList.html:5746,Clear,ClearFormula,5746,root/html532/TProofDrawEntryList.html,https://root.cern,https://root.cern/root/html532/TProofDrawEntryList.html,1,['Clear'],['ClearFormula']
Usability,"UniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidSlaveBegin(TTree*); virtual voidSlaveTerminate(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTerminate(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual intTProofDraw::Version() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTProofDraw::ClearFormula(); virtual Bool_tTProofDraw::CompileVariables(); virtual voidDefVar(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidDoFill(Long64_t entry, Double_t w, const Double_t* v); voidTProofDraw::FillWeight(); voidTObject::MakeZombie(); virtual Bool_tTProofDraw::ProcessSingle(Long64_t, Int_t); voidTProofDraw::SetCanvas(const char* objname); voidTProofDraw::SetDrawAtt(TObject* o); voidTProofDraw::SetError(const char* sub, const char* mesg). Data Members; public:. enum TProofDraw::[unnamed] { kWarn; };; enum TSelector::EAbort { kContinue; kAbortProcess; kAbortFile; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TSelector::EAbortTSelector::fAbortabort status; Int_tTProofDraw::fDimensionDimension of the current expression; TEventList*fElistevent list; TList*fEventListsa list of EventLists; TStringTProofDraw::fInitialExp; TList*TSelector::fInputlist of objects available during processing; TTreeFormulaManager*TProofDraw::fManager; Int_tTProofDra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TProofDrawEventList.html:5746,Clear,ClearFormula,5746,root/html532/TProofDrawEventList.html,https://root.cern,https://root.cern/root/html532/TProofDrawEventList.html,1,['Clear'],['ClearFormula']
Usability,"UnmapWindow(); virtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static TStringTQObject::CompressName(const char* method_name); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidCreateDisabledPicture(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidDoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); virtual voidTGButton::EmitSignals(Bool_t wasUp); static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; const TGResourcePool*TGFrame::GetResourcePool() const; virtual void*TGFrame::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidTObject::MakeZombie(); Int_tTGWidget::SetFlags(Int_t flags); virtual voidTGButton::SetToggleButton(Bool_t); virtual voidTGFrame::StartGuiBuilding(Bool_t on = kTRUE). private:. TGPictureButton&operator=(const TGPictureButton&); TGPictureButton(const TGPictureButton&). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TGWindow::EEditModeTGWindow::kEditDisable; static TGWindow::EEditModeTGWindow::kEditDisableBtnEnable; static TGWindo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGPictureButton.html:18195,Clear,ClearFlags,18195,root/html602/TGPictureButton.html,https://root.cern,https://root.cern/root/html602/TGPictureButton.html,2,['Clear'],['ClearFlags']
Usability,"V(y-Ax); TMatrixDSparse*fDXDAM[2]Result: part of derivative dx_k/dA_ij; TMatrixDSparse*fDXDAZ[2]Result: part of derivative dx_k/dA_ij; TMatrixDSparse*fDXDYResult: derivative dx/dy; TMatrixDSparse*fDXDtauSquaredResult: derivative dx/dtau; TMatrixDSparse*fEResult: matrix E; TMatrixDSparse*fEinvResult: matrix E^(-1); Double_tfLXsquaredResult: chi**2 contribution from (x-s*x0)Lsquared(x-s*x0); Int_tfNdfResult: number of degrees of freedom; Double_tfRhoAvgResult: average global correlation; Double_tfRhoMaxResult: maximum global correlation; TMatrixDSparse*fVxxResult: covariance matrix on x; TMatrixDSparse*fVxxInvResult: inverse of covariance matrix on x; TMatrixD*fXResult: x. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const char * GetTUnfoldVersion(void). void InitTUnfold(void); reset all data members. void DeleteMatrix(TMatrixD** m). void DeleteMatrix(TMatrixDSparse** m). void ClearResults(void); delete old results (if any); this function is virtual, so derived classes may flag their results; ad non-valid as well. TUnfold(const TUnfold& ); set all matrix pointers to zero. Double_t DoUnfold(Double_t tau); main unfolding algorithm. Declared virtual, because other algorithms; could be implemented. Purpose: unfold y -> x; Data members required:; fA: matrix to relate x and y; fY: measured data points; fX0: bias on x; fBiasScale: scale factor for fX0; fVyy: covariance matrix for y; fLsquared: regularisation conditions; fTauSquared: regularisation strength; fConstraint: whether the constraint is applied; Data members modified:; fEinv: inverse of the covariance matrix of x; fE: covariance matrix of x; fX: unfolded data points; fDXDY: derivative of x wrt y (for error propagation); fVxx: error matrix (covariance matrix) on x; fAx: estimate of distribution y from unfolded data; fChi2A: contribution to chi**2 from y-Ax; fChi2L: contribution to chi**2 from L*(x-x0); fDXDtauSquared: derivative of x wrt tau; fDXDAM[0,1]: matrix parts of d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TUnfold.html:21050,Clear,ClearResults,21050,root/html532/TUnfold.html,https://root.cern,https://root.cern/root/html532/TUnfold.html,1,['Clear'],['ClearResults']
Usability,"VA PyTorch Interface, a method to use PyTorch internally with TMVA for deep learning. This can be used as an alternative to PyKeras Interface for complex models providing more flexibility and power.; Add support in the TMVA Keras interface for Tensorflow.Keras (the version embedded in Tensorflow) and for standalone Keras versions up to it latest 2.3. For using Tensorflow.Keras one needs to use the booking option tf.keras=True.; Update the TMVA Keras tutorials to use now tensorflow.keras.; Deprecate the MethodDNN in favour of MethodDL supporting both CNN and RNN; Add possibility to customize all relevant minimizer parameters used for training in MethodDL; Add support in MethodDL for the Cudnn version 8 when using the Cuda implementation for CNN and RNN Minuit2; Implement the missing support for MethodCategory for multiclass classifiers.; Add possibility to retrieve a ROC curve made with the training dataset instead of the default test dataset. RooFit Libraries. Extension / updates of the doxygen reference guide.; Allow for removing RooPlot from global directory management, see RooPlot::AddDirectory and RooPlot::SetDirectory; Hash-assisted finding of elements in RooWorkspace. Large RooWorkspace objects were slow in finding elements. This was improved using a hash map.; Stabilise RooStats::HypoTestInverter. It can now tolerate a few failed fits when conducting hypothesis tests. This is relevant when a few points in a parameter scan don’t converge due to numerical or model instabilities. These points will be skipped, and HypoTestInverter can continue.; Tweak pull / residual plots. ROOT automatically zoomed out a bit when a pull / residual plot is created. Now, the axis range of the original plot is transferred to the residual plot, so the pulls can be drawn below the main plot.; Improve plotting of RooBinSamplingPdf; Print a Warning message when the RooAddPdf is evaluated without passing a normalization set and the class has not a normalization set defined. Without a no",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v624/release-notes.html:16348,guid,guide,16348,doc/v624/release-notes.html,https://root.cern,https://root.cern/doc/v624/release-notes.html,1,['guid'],['guide']
Usability,"VA::Node* p, char pos); constructor of a daughter node as a daughter of 'p'. DecisionTreeNode(const TMVA::DecisionTreeNode& n, TMVA::DecisionTreeNode* parent = __null); copy constructor of a node. It will result in an explicit copy of; the node and recursively all it's daughters. ~DecisionTreeNode(); destructor. Bool_t GoesRight(const TMVA::Event& ) const; test event if it decends the tree at this node to the right. Bool_t GoesLeft(const TMVA::Event& ) const; test event if it decends the tree at this node to the left. void SetPurity( void ); return the S/(S+B) (purity) for the node; REM: even if nodes with purity 0.01 are very PURE background nodes, they still; get a small value of the purity. void Print(ostream& os) const; print the node. void PrintRec(ostream& os) const; recursively print the node and its daughters (--> print the 'tree'). Bool_t ReadDataRecord(istream& is, UInt_t tmva_Version_Code = 262656); Read the data block. void ClearNodeAndAllDaughters(); clear the nodes (their S/N, Nevents etc), just keep the structure of the tree. void ResetValidationData(); temporary stored node values (number of events, etc.) that originate; not from the training but from the validation data (used in pruning). void PrintPrune(ostream& os) const; printout of the node (can be read in with ReadDataRecord). void PrintRecPrune(ostream& os) const; recursive printout of the node and its daughters. void SetCC(Double_t cc). Float_t GetSampleMin(UInt_t ivar) const; return the minimum of variable ivar from the training sample; that pass/end up in this node. Float_t GetSampleMax(UInt_t ivar) const; return the maximum of variable ivar from the training sample; that pass/end up in this node. void SetSampleMin(UInt_t ivar, Float_t xmin); set the minimum of variable ivar from the training sample; that pass/end up in this node. void SetSampleMax(UInt_t ivar, Float_t xmax); set the maximum of variable ivar from the training sample; that pass/end up in this node. void ReadAttributes(void* ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__DecisionTreeNode.html:7522,clear,clear,7522,root/html602/TMVA__DecisionTreeNode.html,https://root.cern,https://root.cern/root/html602/TMVA__DecisionTreeNode.html,3,"['Clear', 'clear']","['ClearNodeAndAllDaughters', 'clear']"
Usability,"VA::Node* p, char pos); constructor of a daughter node as a daughter of 'p'. DecisionTreeNode(const TMVA::DecisionTreeNode& n, TMVA::DecisionTreeNode* parent = __null); copy constructor of a node. It will result in an explicit copy of; the node and recursively all it's daughters. ~DecisionTreeNode(); destructor. Bool_t GoesRight(const TMVA::Event& ) const; test event if it decends the tree at this node to the right. Bool_t GoesLeft(const TMVA::Event& ) const; test event if it decends the tree at this node to the left. void SetPurity( void ); return the S/(S+B) (purity) for the node; REM: even if nodes with purity 0.01 are very PURE background nodes, they still; get a small value of the purity. void Print(ostream& os) const; print the node. void PrintRec(ostream& os) const; recursively print the node and its daughters (--> print the 'tree'). Bool_t ReadDataRecord(istream& is, UInt_t tmva_Version_Code = 262657); Read the data block. void ClearNodeAndAllDaughters(); clear the nodes (their S/N, Nevents etc), just keep the structure of the tree. void ResetValidationData(); temporary stored node values (number of events, etc.) that originate; not from the training but from the validation data (used in pruning). void PrintPrune(ostream& os) const; printout of the node (can be read in with ReadDataRecord). void PrintRecPrune(ostream& os) const; recursive printout of the node and its daughters. void SetCC(Double_t cc). Float_t GetSampleMin(UInt_t ivar) const; return the minimum of variable ivar from the training sample; that pass/end up in this node. Float_t GetSampleMax(UInt_t ivar) const; return the maximum of variable ivar from the training sample; that pass/end up in this node. void SetSampleMin(UInt_t ivar, Float_t xmin); set the minimum of variable ivar from the training sample; that pass/end up in this node. void SetSampleMax(UInt_t ivar, Float_t xmax); set the maximum of variable ivar from the training sample; that pass/end up in this node. void ReadAttributes(void* ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__DecisionTreeNode.html:7530,clear,clear,7530,root/html604/TMVA__DecisionTreeNode.html,https://root.cern,https://root.cern/root/html604/TMVA__DecisionTreeNode.html,3,"['Clear', 'clear']","['ClearNodeAndAllDaughters', 'clear']"
Usability,"VA::gConfig().SetDrawProgressBar(true);; ; TMVA::Timer timer( Nloops, ""MyClassName"" );; for (Int_t i=0; i<Nloops; i++) {; ... // some code; ; // now, print progress bar:; timer.DrawProgressBar( i );; ; // **OR** text output of left time (never both !); fLogger << "" time left: "" << timer.GetLeftTime( i ) << Endl;; ; }; fLogger << ""MyClassName"" << "": elapsed time: "" << timer.GetElapsedTime(); << Endl;; TMVA::Config::SetDrawProgressBarvoid SetDrawProgressBar(Bool_t d)Definition Config.h:69; TMVA::TimerTiming information for training and evaluation of MVA methods.Definition Timer.h:58; TMVA::Timer::fLoggerMsgLogger * fLogger! the output loggerDefinition Timer.h:96; int; TMVA::gConfigConfig & gConfig(); TMVA::EndlMsgLogger & Endl(MsgLogger &ml)Definition MsgLogger.h:148; Remark: in batch mode, the progress bar is quite ugly; you may want to use the text output then; Note that by default in TMVA::Config the drawing of the progress bar is switched off. To have the progress bar visible you need to enable it by calling TMVA::gConfig().SetDrawProgressBar(true) ; Definition at line 58 of file Timer.h. Public Member Functions;  Timer (const char *prefix="""", Bool_t colourfulOutput=kTRUE);  constructor ;  ;  Timer (Int_t ncounts, const char *prefix="""", Bool_t colourfulOutput=kTRUE);  standard constructor: ncounts gives the total number of counts that the loop will iterate through. ;  ; virtual ~Timer (void);  destructor ;  ; void DrawProgressBar (Int_t, const TString &comment="""");  draws progress bar in color or B&W caution: ;  ; void DrawProgressBar (TString);  draws a string in the progress bar ;  ; void DrawProgressBar (void);  draws the progressbar ;  ; Double_t ElapsedSeconds (void);  computes elapsed tim in seconds ;  ; TString GetElapsedTime (Bool_t Scientific=kTRUE);  returns pretty string with elapsed time ;  ; TString GetLeftTime (Int_t icounts);  returns pretty string with time left ;  ; void Init (Int_t ncounts);  ; virtual TClass * IsA () const;  ; void Reset (void); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Timer.html:1385,progress bar,progress bar,1385,doc/master/classTMVA_1_1Timer.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Timer.html,1,['progress bar'],['progress bar']
Usability,"Value&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModecanNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tcheckObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; const RooArgList&coefList() const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAddPdf.html:4027,clear,clearShapeDirty,4027,root/html534/RooAddPdf.html,https://root.cern,https://root.cern/root/html534/RooAddPdf.html,12,['clear'],['clearShapeDirty']
Usability,"Values(const double* x); intROOT::Math::Minimizer::Status() const; intROOT::Math::Minimizer::Strategy() const; doubleROOT::Math::Minimizer::Tolerance() const; virtual intROOT::Math::Minimizer::VariableIndex(const string& name) const; virtual stringROOT::Math::Minimizer::VariableName(unsigned int ivar) const; virtual const double*X() const. protected:. voidGetGeneticOptions(ROOT::Math::MinimizerOptions& opt) const. Data Members; protected:. TMVA::IFitterTarget*fFitness; doublefMinValue; ROOT::Math::MinimizerOptionsROOT::Math::Minimizer::fOptionsminimizer options; ROOT::Math::GeneticMinimizerParametersfParameters; vector<TMVA::Interval*>fRanges; vector<double>fResult; intROOT::Math::Minimizer::fStatusstatus of minimizer; boolROOT::Math::Minimizer::fValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GeneticMinimizer(int i = 0). ~GeneticMinimizer(). void Clear(). void SetFunction(const ROOT::Math::IMultiGenFunction& func). bool SetLimitedVariable(unsigned int , const string& , double , double , double , double ). bool SetVariable(unsigned int ivar, const string& name, double val, double step); It does nothing! As there is no variable if it has no limits!. bool SetFixedVariable(unsigned int ivar, const string& name, double val); set a fixed variable. void SetParameters(const ROOT::Math::GeneticMinimizerParameters& params). ROOT::Math::MinimizerOptions Options() const. void GetGeneticOptions(ROOT::Math::MinimizerOptions& opt) const; get the genetic options of the class and return them in the MinimizerOptions class. void SetOptions(const ROOT::Math::MinimizerOptions& opt). bool Minimize(). double MinValue() const. const double * X() const. unsigned int NCalls() const. unsigned int NDim() const. unsigned int NFree() const. const double * MinGradient() const; { return 0; }. bool ProvidesError() const; { return false; }. const double * Errors",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__GeneticMinimizer.html:5631,Clear,Clear,5631,root/html602/ROOT__Math__GeneticMinimizer.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__GeneticMinimizer.html,2,['Clear'],['Clear']
Usability,"Var&RooResolutionModel::basisConvVar() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tcheckObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidRooResolutionModel::cleanup(); virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; const RooArgList&coefList() const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual RooResolutionModel*convolution(RooFormulaVar* basis, RooAbsArg* owner) const; RooRealVar&RooResolutionModel::convVar() const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAddModel.html:3627,clear,clearShapeDirty,3627,root/html532/RooAddModel.html,https://root.cern,https://root.cern/root/html532/RooAddModel.html,1,['clear'],['clearShapeDirty']
Usability,"Var&RooResolutionModel::basisConvVar() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tcheckObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidRooResolutionModel::cleanup(); virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; const RooArgList&coefList() const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual RooResolutionModel*convolution(RooFormulaVar* basis, RooAbsArg* owner) const; RooRealVar&RooResolutionModel::convVar() const; virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAddModel.html:3627,clear,clearShapeDirty,3627,root/html528/RooAddModel.html,https://root.cern,https://root.cern/root/html528/RooAddModel.html,2,['clear'],['clearShapeDirty']
Usability,"Vars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Double_tbufferFraction() const; RooFFTConvPdf::BufStratbufferStrategy() const; const RooArgSet&cacheObservables() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), const RooCmdArg arg5 = RooCmdArg::none(), const RooCmdArg arg6 = RooCmdArg::none(), const RooCmdArg arg7 = RooCmdArg::none(), const RooCmdArg arg8 = R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooFFTConvPdf.html:7249,clear,clearValueDirty,7249,root/html526/RooFFTConvPdf.html,https://root.cern,https://root.cern/root/html526/RooFFTConvPdf.html,1,['clear'],['clearValueDirty']
Usability,"Version,fOptimized,CanOptimize(),TestBit(kCannotOptimize));; 2981 ; 2982 // if (IsCompiled() && (!fOptimized || (CanOptimize() && !TestBit(kCannotOptimize)))) return;; 2983 fOptimized = kFALSE;; 2984 fNdata = 0;; 2985 fNfulldata = 0;; 2986 ; 2987 TObjArray* infos = (TObjArray*) gROOT->GetListOfStreamerInfo();; 2988 if (fNumber < 0) {; 2989 ++fgCount;; 2990 fNumber = fgCount;; 2991 }; 2992 if (fNumber >= infos->GetSize()) {; 2993 infos->AddAtAndExpand(this, fNumber);; 2994 } else {; 2995 if (!infos->At(fNumber)) {; 2996 infos->AddAt(this, fNumber);; 2997 }; 2998 }; 2999 ; 3000 assert(fComp == 0 && fCompFull == 0 && fCompOpt == 0);; 3001 ; 3002 ; 3003 Int_t ndata = fElements->GetEntriesFast();; 3004 ; 3005 ; 3006 if (fReadObjectWise) fReadObjectWise->fActions.clear();; 3007 else fReadObjectWise = new TStreamerInfoActions::TActionSequence(this,ndata);; 3008 ; 3009 if (fWriteObjectWise) fWriteObjectWise->fActions.clear();; 3010 else fWriteObjectWise = new TStreamerInfoActions::TActionSequence(this,ndata);; 3011 ; 3012 if (fReadMemberWise) fReadMemberWise->fActions.clear();; 3013 else fReadMemberWise = new TStreamerInfoActions::TActionSequence(this,ndata);; 3014 ; 3015 if (fReadText) fReadText->fActions.clear();; 3016 else fReadText = new TStreamerInfoActions::TActionSequence(this,ndata);; 3017 ; 3018 if (fWriteMemberWise) fWriteMemberWise->fActions.clear();; 3019 else fWriteMemberWise = new TStreamerInfoActions::TActionSequence(this,ndata);; 3020 ; 3021 if (fReadMemberWiseVecPtr) fReadMemberWiseVecPtr->fActions.clear();; 3022 else fReadMemberWiseVecPtr = new TStreamerInfoActions::TActionSequence(this, ndata, kTRUE);; 3023 ; 3024 if (fWriteMemberWiseVecPtr) fWriteMemberWiseVecPtr->fActions.clear();; 3025 else fWriteMemberWiseVecPtr = new TStreamerInfoActions::TActionSequence(this, ndata, kTRUE);; 3026 ; 3027 if (fWriteText) fWriteText->fActions.clear();; 3028 else fWriteText = new TStreamerInfoActions::TActionSequence(this,ndata);; 3029 ; 3030 if (!ndata) {; 3031 // This",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html:131776,clear,clear,131776,doc/master/TStreamerInfoActions_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html,1,['clear'],['clear']
Usability,"VerticalFrame Composite frame with vertical child layout; TGVerticalLayout Vertical layout manager; TGView View widget base class; TGViewFrame Frame containing the actual text; TGViewPort Viewport through which to look at a container frame; TGWidget Widget base class; TGWindow GUI Window base class; TGX11 Interface to X11; TGX11TTF Interface to X11 + TTF font handling; TGXYLayout X / Y - layout manager; TGXYLayoutHints Hits for the X / Y - layout manager; TGaxis Graphics axis; TGedEditor ROOT graphics editor; TGedFrame base editor's frame; TGedMarkerPopup marker select popup; TGedMarkerSelect Marker selection button; TGedNameFrame frame showing the selected object name; TGedPatternFrame pattern frame; TGedPatternPopup Color selector popup; TGedPatternSelect pattern selection check-button; TGedPatternSelector select pattern frame; TGedPopup popup window; TGedSelect selection check-button; TGenCollectionProxy ; TGenCollectionProxy::Method ; TGenCollectionProxy::Value ; TGenPhaseSpace Simple Phase Space Generator; TGenerator Event generator interface abstract baseclass; TGenericTable Generic array of C-structure (a'la STL vector); TGenericTable::iterator ; TGeoArb8 arbitrary trapezoid with 8 vertices; TGeoAtt class for visibility, activity and optimization attributes for volumes/nodes; TGeoBBox box primitive; TGeoBBoxEditor TGeoBBox editor; TGeoBatemanSol Solution for the Bateman equation; TGeoBoolNode a boolean node; TGeoBranchArray ; TGeoBuilder geometry builder singleton; TGeoCacheState class storing the cache state; TGeoChecker a simple geometry checker; TGeoCombiTrans rotation + translation; TGeoCombiTransEditor TGeoCombiTrans editor; TGeoCompositeShape boolean composite shape; TGeoCone conical tube class; TGeoConeEditor TGeoCone editor; TGeoConeSeg conical tube segment class ; TGeoConeSegEditor TGeoConeSeg editor; TGeoCtub cut tube segment class ; TGeoCtubEditor TGeoCtub editor; TGeoDecayChannel Decay channel for Elements; TGeoElemIter Iterator for radionuclide ch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ClassIndex.html:90620,Simpl,Simple,90620,root/html534/ClassIndex.html,https://root.cern,https://root.cern/root/html534/ClassIndex.html,1,['Simpl'],['Simple']
Usability,"VerticalFrame Composite frame with vertical child layout; TGVerticalLayout Vertical layout manager; TGView View widget base class; TGViewFrame Frame containing the actual text; TGViewPort Viewport through which to look at a container frame; TGWidget Widget base class; TGWindow GUI Window base class; TGX11 Interface to X11; TGX11TTF Interface to X11 + TTF font handling; TGXYLayout X / Y - layout manager; TGXYLayoutHints Hits for the X / Y - layout manager; TGaxis Graphics axis; TGedEditor ROOT graphics editor; TGedFrame base editor's frame; TGedMarkerPopup marker select popup; TGedMarkerSelect Marker selection button; TGedNameFrame frame showing the selected object name; TGedPatternFrame pattern frame; TGedPatternPopup Color selector popup; TGedPatternSelect pattern selection check-button; TGedPatternSelector select pattern frame; TGedPopup popup window; TGedSelect selection check-button; TGenCollectionProxy ; TGenCollectionProxy::Method ; TGenCollectionProxy::Value ; TGenPhaseSpace Simple Phase Space Generator; TGenerator Event generator interface abstract baseclass; TGenericTable Generic array of C-structure (a'la STL vector); TGenericTable::iterator ; TGeoArb8 arbitrary trapezoid with 8 vertices; TGeoAtt class for visibility, activity and optimization attributes for volumes/nodes; TGeoBBox box primitive; TGeoBBoxEditor TGeoBBox editor; TGeoBatemanSol Solution for the Bateman equation; TGeoBoolNode a boolean node; TGeoBranchArray ; TGeoBuilder geometry builder singleton; TGeoCacheState class storing the cache state; TGeoChecker a simple geometry checker; TGeoCombiTrans rotation + translation; TGeoCombiTransEditor TGeoCombiTrans editor; TGeoCompositeShape boolean composite shape; TGeoCone conical tube class; TGeoConeEditor TGeoCone editor; TGeoConeSeg conical tube segment class; TGeoConeSegEditor TGeoConeSeg editor; TGeoCtub cut tube segment class; TGeoCtubEditor TGeoCtub editor; TGeoDecayChannel Decay channel for Elements; TGeoElemIter Iterator for radionuclide chai",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ClassIndex.html:86371,Simpl,Simple,86371,root/html602/ClassIndex.html,https://root.cern,https://root.cern/root/html602/ClassIndex.html,2,['Simpl'],['Simple']
Usability,"View menu, selecting the Colors item.; 9.3.1.1 Finding an Object in a Pad; Now that we have a pointer to the active pad, gPad and that we know this pad contains some objects, it is sometimes interesting to access one of those objects. The method GetPrimitive() of TPad, i.e. TPad::GetPrimitive(const char* name) does exactly this. Since most of the objects that a pad contains derive from TObject, they have a name. The following statement will return a pointer to the object myobjectname and put that pointer into the variable obj. As you can see, the type of returned pointer is TObject*.; root[] obj = gPad->GetPrimitive(""myobjectname""); (class TObject*)0x1063cba8; Even if your object is something more complicated, like a histogram TH1F, this is normal. A function cannot return more than one type. So the one chosen was the lowest common denominator to all possible classes, the class from which everything derives, TObject. How do we get the right pointer then? Simply do a cast of the function output that will transform the output (pointer) into the right type. For example if the object is a TPaveLabel:; root[] obj = (TPaveLabel*)(gPad->GetPrimitive(""myobjectname"")); (class TPaveLabel*)0x1063cba8; This works for all objects deriving from TObject. However, a question remains. An object has a name if it derives from TNamed, not from TObject. For example, an arrow (TArrow) doesn’t have a name. In that case, the “name” is the name of the class. To know the name of an object, just click with the right button on it. The name appears at the top of the context menu. In case of multiple unnamed objects, a call to GetPrimitive(""className"") returns the instance of the class that was first created. To retrieve a later instance you can use GetListOfPrimitives(), which returns a list of all the objects on the pad. From the list you can select the object you need.; 9.3.1.2 Hiding an Object; Hiding an object in a pad can be made by removing it from the list of objects owned by that pad. T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:305714,Simpl,Simply,305714,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['Simpl'],['Simply']
Usability,"View*fInfoTextViewsummary on current query; TGLabel*fLabInfosinfos on current process; TGLabel*fLabStatusactual process status; Bool_tfModifiedkTRUE if settings have changed; Long64_tfPrevProcessedused for progress bar; Long64_tfPrevTotalused for progress bar; TGLabel*fRaterate of process in events/sec; TCanvas*fStatsCanvasnode statistics canvas; TSessionQueryFrame::EQueryStatusfStatusstatus of actual query; TGTab*fTabmain tab frame; TGLabel*fTotaltotal progress info; TSessionViewer*fViewerpointer on main viewer; TGHProgressBar*frmProgcurrent process progress bar. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionQueryFrame(); Destructor. void Build(TSessionViewer* gui); Build query informations frame. void Modified(Bool_t mod = kTRUE); Notify changes in query editor settings. void Feedback(TList* objs); Feedback function connected to Feedback signal.; Used to update feedback histograms. void UpdateHistos(TList* objs); Update feedback histograms. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti); New version of Progress (just forward to the old version; for the time being). void ProgressLocal(Long64_t total, Long64_t processed); Update progress bar and status labels. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void ResetProgressDialog(const char* selec, Int_t files, Long64_t first, Long64_t entries); Reset progress frame information fields. void OnBtnFinalize(); Finalize query. void OnBtnStop(); Stop processing query. void OnBtnShowLog(); Show query log. void OnBtnRetrieve(); Retrieve query. void OnBtnAbort(); Abort processing query. void OnBtnSubmit(); Submit query. void UpdateButtons(TQueryDescription* desc); Update buttons state for the curr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSessionQueryFrame.html:21042,feedback,feedback,21042,root/html528/TSessionQueryFrame.html,https://root.cern,https://root.cern/root/html528/TSessionQueryFrame.html,2,['feedback'],['feedback']
Usability,"View*fInfoTextViewsummary on current query; TGLabel*fLabInfosinfos on current process; TGLabel*fLabStatusactual process status; Bool_tfModifiedkTRUE if settings have changed; Long64_tfPrevProcessedused for progress bar; Long64_tfPrevTotalused for progress bar; TGLabel*fRaterate of process in events/sec; TCanvas*fStatsCanvasnode statistics canvas; TSessionQueryFrame::EQueryStatusfStatusstatus of actual query; TGTab*fTabmain tab frame; TGLabel*fTotaltotal progress info; TSessionViewer*fViewerpointer on main viewer; TGHProgressBar*frmProgcurrent process progress bar. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionQueryFrame(); Destructor. void Build(TSessionViewer* gui); Build query informations frame. void Modified(Bool_t mod = kTRUE); Notify changes in query editor settings. void Feedback(TList* objs); Feedback function connected to Feedback signal.; Used to update feedback histograms. void UpdateHistos(TList* objs); Update feedback histograms. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); New version of Progress (just forward to the old version; for the time being). void ProgressLocal(Long64_t total, Long64_t processed); Update progress bar and status labels. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void ResetProgressDialog(const char* selec, Int_t files, Long64_t first, Long64_t entries); Reset progress frame information fields. void OnBtnFinalize(); Finalize query. void OnBtnStop(); Stop processing query. void OnBtnShowLog(); Show query log. void OnBtnRetrieve(); Retrieve query. void OnBtnAbort(); Abort processing query. void OnBtnSubmit(); Submit query. void UpdateButtons(TQueryDescription* de",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TSessionQueryFrame.html:21317,feedback,feedback,21317,root/html532/TSessionQueryFrame.html,https://root.cern,https://root.cern/root/html532/TSessionQueryFrame.html,2,['feedback'],['feedback']
Usability,"Virtual function for retrieving name of the element. ;  ; virtual const char * GetElementTitle () const;  Virtual function for retrieving title of the render-element. ;  ; virtual TString GetHighlightTooltip ();  ; virtual const TGPicture * GetListTreeCheckBoxIcon ();  Returns list-tree-item check-box picture appropriate for given rendering state. ;  ; virtual Color_t GetMainColor () const;  ; Color_t * GetMainColorPtr () const;  ; virtual Char_t GetMainTransparency () const;  ; TEveElement * GetMaster ();  Returns the master element - that is: ;  ; virtual Int_t GetNItems () const;  ; virtual TObject * GetObject (const TEveException &eh) const;  Get a TObject associated with this render-element. ;  ; Int_t GetParentIgnoreCnt () const;  Get number of parents that should be ignored in doing reference-counting. ;  ; virtual TObject * GetRenderObject (const TEveException &eh) const;  ; virtual Bool_t GetRnrAnything () const;  ; virtual Bool_t GetRnrChildren () const;  ; virtual Bool_t GetRnrSelf () const;  ; virtual Bool_t GetRnrState () const;  ; virtual UChar_t GetSelectedLevel () const;  Get selection level, needed for rendering selection and highlight feedback. ;  ; TRef & GetSource ();  ; TObject * GetSourceObject () const;  ; void * GetUserData () const;  ; TEveElement * GetVizModel () const;  ; const TString & GetVizTag () const;  ; virtual Bool_t HandleElementPaste (TEveElement *el);  React to element being pasted or dnd-ed. ;  ; Bool_t HasChild (TEveElement *el);  Check if element el is a child of this element. ;  ; Bool_t HasChildren () const;  ; virtual Bool_t HasMainColor () const;  ; virtual Bool_t HasMainTrans () const;  ; Bool_t HasParents () const;  ; virtual void HighlightElement (Bool_t state);  Set element's highlight state. Stamp appropriately. ;  ; void IncDenyDestroy ();  Increases the deny-destroy count of the element. ;  ; virtual void IncImpliedHighlighted ();  Increase element's implied-highlight count. Stamp appropriately. ;  ; virtual void I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveProjectionAxes.html:11185,feedback,feedback,11185,doc/master/classTEveProjectionAxes.html,https://root.cern,https://root.cern/doc/master/classTEveProjectionAxes.html,2,['feedback'],['feedback']
Usability,"VirtualPadPainter.; Definition at line 81 of file TWebPadPainter.h. ◆ CopyDrawable(). void TWebPadPainter::CopyDrawable ; (; Int_t ; , . Int_t ; , . Int_t ;  . ). inlineoverridevirtual . Implements TVirtualPadPainter.; Definition at line 82 of file TWebPadPainter.h. ◆ CreateDrawable(). Int_t TWebPadPainter::CreateDrawable ; (; UInt_t ; , . UInt_t ;  . ). inlineoverridevirtual . Implements TVirtualPadPainter.; Definition at line 80 of file TWebPadPainter.h. ◆ DeclFileName(). static const char * TWebPadPainter::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 122 of file TWebPadPainter.h. ◆ DestroyDrawable(). void TWebPadPainter::DestroyDrawable ; (; Int_t ; ). inlineoverridevirtual . Implements TVirtualPadPainter.; Definition at line 83 of file TWebPadPainter.h. ◆ DrawBox(). void TWebPadPainter::DrawBox ; (; Double_t ; x1, . Double_t ; y1, . Double_t ; x2, . Double_t ; y2, . EBoxMode ; mode . ). overridevirtual . Paint a simple box. ; Implements TVirtualPadPainter.; Definition at line 102 of file TWebPadPainter.cxx. ◆ DrawFillArea() [1/2]. void TWebPadPainter::DrawFillArea ; (; Int_t ; n, . const Double_t * ; x, . const Double_t * ; y . ). overridevirtual . Paint filled area. ; Implements TVirtualPadPainter.; Definition at line 124 of file TWebPadPainter.cxx. ◆ DrawFillArea() [2/2]. void TWebPadPainter::DrawFillArea ; (; Int_t ; n, . const Float_t * ; x, . const Float_t * ; y . ). overridevirtual . Paint filled area. ; Implements TVirtualPadPainter.; Definition at line 140 of file TWebPadPainter.cxx. ◆ DrawLine(). void TWebPadPainter::DrawLine ; (; Double_t ; x1, . Double_t ; y1, . Double_t ; x2, . Double_t ; y2 . ). overridevirtual . Paint a simple line. ; Implements TVirtualPadPainter.; Definition at line 65 of file TWebPadPainter.cxx. ◆ DrawLineNDC(). void TWebPadPainter::DrawLineNDC ; (; Double_t ; u1, . Double_t ; v1, . Double_t ; u2, . Double_t ; v2 . ). overridevirtual . Paint a simple line in no",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWebPadPainter.html:14579,simpl,simple,14579,doc/master/classTWebPadPainter.html,https://root.cern,https://root.cern/doc/master/classTWebPadPainter.html,1,['simpl'],['simple']
Usability,"Virtual_b);  ;  Public Member Functions inherited from RooAbsLValue; virtual ~RooAbsLValue ()=default;  ; virtual std::list< std::string > getBinningNames () const =0;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static TH1 * createHistogram (const char *name, RooArgList &vars, const char *tAxisLabel, const RooAbsBinning **bins);  Create a 1,2, or 3D-histogram with appropriate scale and labels. ;  ; static TH1 * createHistogram (const char *name, RooArgList &vars, const char *tAxisLabel, double *xlo, double *xhi, Int_t *nBins);  Create 1-, 2- or 3-d ROOT histogram with labels taken from the variables in 'vars' and the with range and binning specified in xlo,xhi and nBins. ;  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsRealLValue.html:52943,clear,clearEvalErrorLog,52943,doc/master/classRooAbsRealLValue.html,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html,1,['clear'],['clearEvalErrorLog']
Usability,"Warning(const char* method, const char* msgfmt) const; virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTSeqCollection::Changed(); static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); static TStringTQObject::CompressName(const char* method_name); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTList::DeleteLink(TObjLink* lnk); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; TObjLink**TList::DoSort(TObjLink** head, Int_t n); TObjLink*TList::FindLink(const TObject* obj, Int_t& idx) const; virtual const char*TCollection::GetCollectionEntryName(TObject* entry) const; virtual void*TQObject::GetSender(); virtual const char*TQObject::GetSenderClassName() const; virtual voidTQCommand::Init(const char* cl, void* object, const char* redo, const char* undo); TObjLink*TList::LinkAt(Int_t idx) const; Bool_tTList::LnkCompare(TObjLink* l1, TObjLink* l2); voidTObject::MakeZombie(); virtual TObjLink*TList::NewLink(TObject* obj, TObjLink* prev = __null); virtual TObjLink*TList::NewOptLink(TObject* obj, Option_t* opt, TObjLink* prev = __null); virtual voidPrintCollectionEntry(TObject* entry, Option_t* option, Int_t recurse) const; virtual voidTQCommand::PrintCollectionHeader(Option_t* option) const. Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TCollection::(anonymous)TCollection:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TQUndoManager.html:16220,undo,undo,16220,root/html602/TQUndoManager.html,https://root.cern,https://root.cern/root/html602/TQUndoManager.html,4,['undo'],['undo']
Usability,"Widget(Int_t id); virtual~TGWidget(); virtual voidAssociate(const TGWindow* w); static TClass*Class(); const char*GetCommand() const; Bool_tHasFocus() const; virtual TClass*IsA() const; Bool_tIsEnabled() const; virtual voidSetCommand(const char* command); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); Bool_tWantFocus() const; Int_tWidgetId() const. protected:. TGWidget(const TGWidget& tgw); Int_tClearFlags(Int_t flags); TGWidget&operator=(const TGWidget& tgw); Int_tSetFlags(Int_t flags). Data Members; protected:. TStringfCommandcommand to be executed; const TGWindow*fMsgWindowwindow which handles widget events; Int_tfWidgetFlagswidget status flags (OR of EWidgetStatus); Int_tfWidgetIdthe widget id (used for event processing). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGWidget(const TGWidget& tgw); { }. TGWidget& operator=(const TGWidget& tgw). Int_t SetFlags(Int_t flags); { return fWidgetFlags |= flags; }. Int_t ClearFlags(Int_t flags); { return fWidgetFlags &= ~flags; }. TGWidget(); { }. TGWidget(Int_t id); { }. virtual ~TGWidget(); { }. Int_t WidgetId() const; { return fWidgetId; }. Bool_t IsEnabled() const; { return (Bool_t)((fWidgetFlags & kWidgetIsEnabled) != 0); }. Bool_t HasFocus() const; { return (Bool_t)((fWidgetFlags & kWidgetHasFocus) != 0); }. Bool_t WantFocus() const; { return (Bool_t)((fWidgetFlags & kWidgetWantFocus) != 0); }. void Associate(const TGWindow* w); { fMsgWindow = w; }. void SetCommand(const char* command); { fCommand = command; }. const char * GetCommand() const; { return fCommand.Data(); }. » Author: Fons Rademakers 05/01/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-03-14 16:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGWidget.html:1556,Clear,ClearFlags,1556,root/html534/TGWidget.html,https://root.cern,https://root.cern/root/html534/TGWidget.html,1,['Clear'],['ClearFlags']
Usability,"Widget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); voidTGTextEntry::CopyText() const; virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTGTextEntry::DoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); Int_tTGTextEntry::GetCharacterIndex(Int_t xcoord); static const TGGC&TGTextEntry::GetDefaultSelectedBackgroundGC(); static const TGGC&TGTextEntry::GetDefaultSelectedGC(); static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; const TGResourcePool*TGFrame::GetResourcePool() const; virtual void*TGFrame::GetSender(); virtual const char*TQObject::GetSenderClassName() const; virtual voidTGTextEntry::Init(); virtual Bool_tTGTextEntry::IsCursorOutOfFrame(); voidTObject::MakeZombie(); TGWindow&TGWindow::operator=(const TGWindow& tgw); voidTGTextEntry::Paste(); virtual voidTGTextEntry::PastePrimary(Window_t wid, Atom_t property, Bool_t del); virtual voidTGTextEntry::ScrollByChar(); Int_tTGWidget::SetFlags(Int_t flags); virtual voidTGFrame::StartGuiBuilding(Bool_t on = kTRUE); virtual voidTGTextEntry::UpdateOffset(). Data Members; public:. enum TGTextEntry::EEchoMode { kNormal; kNoEcho; kPassword; };; enum TGTextEntry::EInsertMode { kInsert; kReplace; };; enum TGFrame::[unnamed] { kDeleteWindowCalled; };; enum TGWindow::EEditMode {",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGNumberEntryField.html:21164,Clear,ClearFlags,21164,root/html532/TGNumberEntryField.html,https://root.cern,https://root.cern/root/html532/TGNumberEntryField.html,2,['Clear'],['ClearFlags']
Usability,"Window &tgw);  ;  Protected Member Functions inherited from TGObject; TGObject & operator= (const TGObject &tgo);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  . Protected Attributes; TGGC fBarColorGC;  progress bar drawing context ;  ; EBarType fBarType;  OPTION={GetMethod=""GetBarType"";SetMethod=""SetBarType"";Items=(kStandard=""Standard"",kFancy=""Fancy"")} ;  ; Int_t fBarWidth;  progress bar width ;  ; Bool_t fDrawBar;  if true draw only bar in DoRedraw() ;  ; EFillType fFillType;  OPTION={GetMethod=""GetFillType"";SetMethod=""SetFillType"";Items=(kSolidFill=Solid"",kBlockFill=""Block"")} ;  ; FontStruct_t fFontStruct;  font used to draw position text ;  ; TString fFormat;  format used to show position not in percent ;  ; Float_t fMax;  logical maximum value (default 100) ;  ; Float_t fMin;  logical minimum value (default 0) ;  ; GContext_t fNormGC;  text drawing graphics context ;  ; Bool_t fPercent;  show position in percent (default true) ;  ; Float_t fPos;  logical position [fMin,fMax] ;  ; Int_t fPosPix;  position of progress bar in pixel coordinates ;  ; Bool_t fShowPos;  show position value (default false) ;  ;  Protected Attributes inherited from TGFrame; Pixel_t fBackground;  frame background color ;  ; Int_t fBorderWidth;  frame border width ;  ; Int_t fDNDState;  EDNDFlags. ;  ; UInt_t fEventMask;  currently active event mask ;  ; TGFrameElement * fFE;  pointer to frame element ;  ; UInt_t fHeight;  frame height ;  ; UInt_t fMaxHeight;  maximal frame height ;  ; UInt_t fMaxWidth;  maximal frame width ;  ; UInt_t fMinHeight;  minimal frame height ;  ; UInt_t fMinWidth;  minimal frame width ;  ; UInt_t fOptions;  frame options ;  ; UInt_t fWidth;  frame width ;  ; Int_t fX;  frame x position ;  ; Int",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGProgressBar.html:25633,progress bar,progress bar,25633,doc/master/classTGProgressBar.html,https://root.cern,https://root.cern/doc/master/classTGProgressBar.html,3,['progress bar'],['progress bar']
Usability,"Window* p = 0, UInt_t w = 1, UInt_t h = 1, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); ~TGVerticalFrame(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(); Bool_tTQObject::Disconnect(const char* signal = 0, void* receive",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGVerticalFrame.html:2482,Clear,Clear,2482,root/html532/TGVerticalFrame.html,https://root.cern,https://root.cern/root/html532/TGVerticalFrame.html,2,['Clear'],['Clear']
Usability,"Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static const TGFont*fgDefaultFont; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGGC*fgDefaultGC; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGProgressBar(const TGWindow* p, UInt_t w, UInt_t h, Pixel_t back = GetWhitePixel(), Pixel_t barcolor = GetDefaultSelectedBackground(), GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t options = kDoubleBorder | kSunkenFrame); Create progress bar. void SetRange(Float_t min, Float_t max); Set min and max of progress bar. void SetPosition(Float_t pos); Set progress position between [min,max]. void Increment(Float_t inc); Increment progress position. void Reset(); Reset progress bar (i.e. set pos to 0). void SetFillType(TGProgressBar::EFillType type); Set fill type. void SetBarType(TGProgressBar::EBarType type); Set bar type. void SetBarColor(ULong_t color); Set progress bar color. void SetBarColor(const char* color = ""blue""); Set progress bar color. void Format(const char* format = ""%.2f""); Set format for displaying a value. FontStruct_t GetDefaultFontStruct(); Return default font structure in use. const TGGC & GetDefaultGC(); Return default graphics context in use. void SetForegroundColor(Pixel_t pixel); Change text color drawing. void SavePrimitive(ostream& out, Option_t* option = """"); Save progress bar parameters as a C++ statement(s) on output stream out. Bool_t fDrawBar; // if true draw only bar in DoRedraw(). TGProgressBar(const TGWindow* p, UInt_t w, UInt_t h",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGProgressBar.html:20843,progress bar,progress bar,20843,root/html602/TGProgressBar.html,https://root.cern,https://root.cern/root/html602/TGProgressBar.html,4,['progress bar'],['progress bar']
Usability,"Wise = new TStreamerInfoActions::TActionSequence(this,ndata);; 3011 ; 3012 if (fReadMemberWise) fReadMemberWise->fActions.clear();; 3013 else fReadMemberWise = new TStreamerInfoActions::TActionSequence(this,ndata);; 3014 ; 3015 if (fReadText) fReadText->fActions.clear();; 3016 else fReadText = new TStreamerInfoActions::TActionSequence(this,ndata);; 3017 ; 3018 if (fWriteMemberWise) fWriteMemberWise->fActions.clear();; 3019 else fWriteMemberWise = new TStreamerInfoActions::TActionSequence(this,ndata);; 3020 ; 3021 if (fReadMemberWiseVecPtr) fReadMemberWiseVecPtr->fActions.clear();; 3022 else fReadMemberWiseVecPtr = new TStreamerInfoActions::TActionSequence(this, ndata, kTRUE);; 3023 ; 3024 if (fWriteMemberWiseVecPtr) fWriteMemberWiseVecPtr->fActions.clear();; 3025 else fWriteMemberWiseVecPtr = new TStreamerInfoActions::TActionSequence(this, ndata, kTRUE);; 3026 ; 3027 if (fWriteText) fWriteText->fActions.clear();; 3028 else fWriteText = new TStreamerInfoActions::TActionSequence(this,ndata);; 3029 ; 3030 if (!ndata) {; 3031 // This may be the case for empty classes (e.g., TAtt3D).; 3032 // We still need to properly set the size of emulated classes (i.e. add the virtual table); 3033 if (fClass->GetState() == TClass::kEmulated && fNVirtualInfoLoc!=0) {; 3034 fSize = sizeof(TStreamerInfo*);; 3035 }; 3036 fComp = new TCompInfo[1];; 3037 fCompFull = new TCompInfo*[1];; 3038 fCompOpt = new TCompInfo*[1];; 3039 fCompOpt[0] = fCompFull[0] = &(fComp[0]);; 3040 SetIsCompiled();; 3041 return;; 3042 }; 3043 ; 3044 // At most half of the elements can be used to hold optimized versions.; 3045 // We use the bottom to hold the optimized-into elements and the non-optimized elements; 3046 // and the top to hold the original copy of the optimized out elements.; 3047 fNslots = ndata + ndata/2 + 1;; 3048 Int_t optiOut = 0;; 3049 ; 3050 fComp = new TCompInfo[fNslots];; 3051 fCompFull = new TCompInfo*[ndata];; 3052 fCompOpt = new TCompInfo*[ndata];; 3053 ; 3054 TStreamerElement* element;; 3",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html:132725,clear,clear,132725,doc/master/TStreamerInfoActions_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html,1,['clear'],['clear']
Usability,"Workspace.cxx. ◆ cat(). RooCategory * RooWorkspace::cat ; (; RooStringView ; name); const. Retrieve discrete variable (RooCategory) with given name. A null pointer is returned if not found. ; Definition at line 1241 of file RooWorkspace.cxx. ◆ catfunc(). RooAbsCategory * RooWorkspace::catfunc ; (; RooStringView ; name); const. Retrieve discrete function (RooAbsCategory) with given name. A null pointer is returned if not found. ; Definition at line 1250 of file RooWorkspace.cxx. ◆ cd(). bool RooWorkspace::cd ; (; const char * ; path = nullptr). Definition at line 2044 of file RooWorkspace.cxx. ◆ Class(). static TClass * RooWorkspace::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooWorkspace::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooWorkspace::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 282 of file RooWorkspace.h. ◆ clearStudies(). void RooWorkspace::clearStudies ; (; ). Remove all RooStudyManager modules. ; Definition at line 1996 of file RooWorkspace.cxx. ◆ Clone(). TObject * RooWorkspace::Clone ; (; const char * ; newname = """"); const. overridevirtual . TObject::Clone() needs to be overridden. ; Reimplemented from TObject.; Definition at line 233 of file RooWorkspace.cxx. ◆ commitTransaction(). bool RooWorkspace::commitTransaction ; (; ). Definition at line 1068 of file RooWorkspace.cxx. ◆ components(). const RooArgSet & RooWorkspace::components ; (; ); const. inline . Definition at line 115 of file RooWorkspace.h. ◆ data(). RooAbsData * RooWorkspace::data ; (; RooStringView ; name); const. Retrieve dataset (binned or unbinned) with given name. A null pointer is returned if not found. ; Definition at line 1309 of file RooWorkspace.cxx. ◆ DeclFileName(). static const char * RooWorkspace::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 2",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooWorkspace.html:28077,clear,clearStudies,28077,doc/master/classRooWorkspace.html,https://root.cern,https://root.cern/doc/master/classRooWorkspace.html,1,['clear'],['clearStudies']
Usability,"X11 system. Returns kFALSE in case of failure. Bool_t AllocColor(unsigned long cmap, XColor* color); Allocate color in colormap. If we are on an <= 8 plane machine; we will use XAllocColor. If we are on a >= 15 (15, 16 or 24) plane; true color machine we will calculate the pixel value using:; for 15 and 16 bit true colors have 6 bits precision per color however; only the 5 most significant bits are used in the color index.; Except for 16 bits where green uses all 6 bits. I.e.:; 15 bits = rrrrrgggggbbbbb; 16 bits = rrrrrggggggbbbbb; for 24 bits each r, g and b are represented by 8 bits. Since all colors are set with a max of 65535 (16 bits) per r, g, b; we just right shift them by 10, 11 and 10 bits for 16 planes, and; (10, 10, 10 for 15 planes) and by 8 bits for 24 planes.; Returns kFALSE in case color allocation failed. void QueryColors(unsigned long cmap, XColor* colors, Int_t ncolors); Returns the current RGB value for the pixel in the XColor structure. void ClearPixmap(unsigned long* pix); Clear the pixmap pix. void ClearWindow(); Clear current window. void ClosePixmap(); Delete current pixmap. void CloseWindow(); Delete current window. void CloseWindow1(); Delete current window. void CopyPixmap(Int_t wid, Int_t xpos, Int_t ypos); Copy the pixmap wid at the position xpos, ypos in the current window. void CopyWindowtoPixmap(unsigned long* pix, Int_t xpos, Int_t ypos); Copy area of current window in the pixmap pix. void DrawBox(Int_t x1, Int_t y1, Int_t x2, Int_t y2, TVirtualX::EBoxMode mode); Draw a box.; mode=0 hollow (kHollow); mode=1 solid (kSolid). void DrawCellArray(Int_t x1, Int_t y1, Int_t x2, Int_t y2, Int_t nx, Int_t ny, Int_t* ic); Draw a cell array.; x1,y1 : left down corner; x2,y2 : right up corner; nx,ny : array size; ic : array. Draw a cell array. The drawing is done with the pixel presicion; if (X2-X1)/NX (or Y) is not a exact pixel number the position of; the top rigth corner may be wrong. void DrawFillArea(Int_t n, TPoint* xy); Fill area describe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGX11.html:25744,Clear,ClearPixmap,25744,root/html532/TGX11.html,https://root.cern,https://root.cern/root/html532/TGX11.html,4,['Clear'],"['Clear', 'ClearPixmap']"
Usability,"X11::AddPixmap(ULong_t pixid, UInt_t w, UInt_t h); virtual Int_tTGX11::AddWindow(ULong_t qwid, UInt_t w, UInt_t h); virtual Bool_tTGX11::AllocColor(Colormap_t cmap, ColorStruct_t& color); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTVirtualX::BeginModalSessionFor(Window_t window); virtual voidTGX11::Bell(Int_t percent); virtual voidTObject::Browse(TBrowser* b); virtual voidTGX11::ChangeActivePointerGrab(Window_t, UInt_t, Cursor_t); virtual voidTGX11::ChangeGC(GContext_t gc, GCValues_t* gval); virtual voidTGX11::ChangeProperties(Window_t id, Atom_t property, Atom_t type, Int_t format, UChar_t* data, Int_t len); virtual voidTGX11::ChangeProperty(Window_t id, Atom_t property, Atom_t type, UChar_t* data, Int_t len); virtual voidTGX11::ChangeWindowAttributes(Window_t id, SetWindowAttributes_t* attr); virtual Bool_tTGX11::CheckEvent(Window_t id, EGEventType type, Event_t& ev); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTGX11::ClearArea(Window_t id, Int_t x, Int_t y, UInt_t w, UInt_t h); virtual voidTGX11::ClearWindow(); virtual voidTGX11::ClearWindow(Window_t id); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTGX11::CloseDisplay(); virtual voidTGX11::ClosePixmap(); virtual voidTGX11::CloseWindow(); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTGX11::ConvertPrimarySelection(Window_t id, Atom_t clipboard, Time_t when); virtual voidTGX11::ConvertSelection(Window_t, Atom_t&, Atom_t&, Atom_t&, Time_t&); virtual voidTNamed::Copy(TObject& named) const; virtual voidTGX11::CopyArea(Drawable_t src, Drawable_t dest, GContext_t gc, Int_t src_x, Int_t src_y, UInt_t width, UInt_t height, Int_t dest_x, Int_t dest_y); virtual voidTGX11::CopyGC(GContext_t org, GContext_t dest, Mask_t mask); virtual voidTGX11::CopyPixmap(Int_t wid, Int_t xpos, Int_t ypos); virtual Pixmap_tTGX11::CreateBitmap(Drawable_t id, const char* bitmap, UI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGX11TTF.html:1806,Clear,Clear,1806,root/html534/TGX11TTF.html,https://root.cern,https://root.cern/root/html534/TGX11TTF.html,3,['Clear'],['Clear']
Usability,"XDump Class ReferenceGraphics » 2D Graphics » Graphics file output. ; Interface to TeX. ; This class allow to generate PGF/TikZ vector graphics output which can be included in TeX and LaTeX documents.; PGF is a TeX macro package for generating graphics. It is platform and format-independent and works together with the most important TeX backend drivers, including pdftex and dvips. It comes with a user-friendly syntax layer called TikZ.; To generate a such file it is enough to do: gStyle->SetPaperSize(10.,10.);; hpx->Draw();; gPad->Print(""hpx.tex"");; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; gPad#define gPadDefinition TVirtualPad.h:308; TStyle::SetPaperSizevoid SetPaperSize(EPaperSize size)Set paper size for PostScript output.Definition TStyle.cxx:1704; Then, the generated file (hpx.tex) can be included in a LaTeX document (simple.tex) in the following way: \documentclass{article}; \usepackage{tikz}; \usetikzlibrary{patterns}; \usetikzlibrary{plotmarks}; \title{A simple LaTeX example}; \date{July 2013}; \begin{document}; \maketitle; The following image as been generated using the TTeXDump class:; \par; \input{hpx.tex}; \end{document}; TTeXDumpInterface to TeX.Definition TTeXDump.h:20; Rcpp::asTString as(SEXP s)Definition RExports.h:86; TMVA_SOFIE_GNN.endendDefinition TMVA_SOFIE_GNN.py:207; Note the three directives needed at the top of the LaTeX file: \usepackage{tikz}; \usetikzlibrary{patterns}; \usetikzlibrary{plotmarks}; Then including the picture in the document is done with the \input directive.; The command pdflatex simple.tex will generate the corresponding pdf file simple.pdf. ; Definition at line 20 of file TTeXDump.h. Public Member Functions;  TTeXDump ();  Default TeX constructor. ;  ;  TTeXDump (const char *filename, Int_t type=-113);  Initialize the TeX interface. ;  ;  ~TTeXDump () override;  Default TeX destructor. ;  ; void CellArrayBegin (Int_t W, Int_t H, Double_t x1, Double_t x2, Double_t y1, Double_t y2) override;  Begin the Cell Arr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTeXDump.html:1239,simpl,simple,1239,doc/master/classTTeXDump.html,https://root.cern,https://root.cern/doc/master/classTTeXDump.html,1,['simpl'],['simple']
Usability,"XMLSetupfXmlSetup! buffer for xml names convertion. Class Charts. Inheritance Chart:. TObject. ←; TXMLPlayer. Function documentation; TXMLPlayer(); default constructor. ~TXMLPlayer(); destructor of TXMLPlayer object. TString GetStreamerName(TClass* cl); returns streamer function name for given class. Bool_t ProduceCode(TList* cllist, const char* filename); Produce streamers for provide class list; TList should include list of classes, for which code should be generated.; filename specify name of file (without extension), where streamers should be; created. Function produces two files: header file and source file.; For instance, if filename is ""streamers"", files ""streamers.h"" and ""streamers.cxx""; will be created. TString GetMemberTypeName(TDataMember* member); returns name of simple data type for given data member. TString GetBasicTypeName(TStreamerElement* el); return simple data types for given TStreamerElement object. TString GetBasicTypeReaderMethodName(Int_t type, const char* realname); return functions name to read simple data type from xml file. const char* ElementGetter(TClass* cl, const char* membername, int specials = 0); produce code to access member of given class.; Parameter specials has following meaning:; 0 - nothing special; 1 - cast to data type; 2 - produce pointer on given member; 3 - skip casting when produce pointer by buf.P() function. const char* ElementSetter(TClass* cl, const char* membername, char* endch); Produce code to set value to given data member.; endch should be output after value is specified. void ProduceStreamerSource(ostream& fs, TClass* cl, TList* cllist); Produce source code of streamer function for specified class. void ReadSTLarg(ostream& fs, TString& argname, int argtyp, Bool_t isargptr, TClass* argcl, TString& tname, TString& ifcond); Produce code to read argument of stl container from xml file. void WriteSTLarg(ostream& fs, const char* accname, int argtyp, Bool_t isargptr, TClass* argcl); Produce code to write argument of ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TXMLPlayer.html:11062,simpl,simple,11062,root/html602/TXMLPlayer.html,https://root.cern,https://root.cern/root/html602/TXMLPlayer.html,4,['simpl'],['simple']
Usability,"XmlSetup! buffer for xml names convertion. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TXMLPlayer(); default constructor. ~TXMLPlayer(); destructor of TXMLPlayer object. TString GetStreamerName(TClass* cl); returns streamer function name for given class. Bool_t ProduceCode(TList* cllist, const char* filename); Produce streamers for provide class list; TList should include list of classes, for which code should be generated.; filename specify name of file (without extension), where streamers should be; created. Function produces two files: header file and source file.; For instance, if filename is ""streamers"", files ""streamers.h"" and ""streamers.cxx""; will be created. TString GetMemberTypeName(TDataMember* member); returns name of simple data type for given data member. TString GetBasicTypeName(TStreamerElement* el); return simple data types for given TStreamerElement object. TString GetBasicTypeReaderMethodName(Int_t type, const char* realname); return functions name to read simple data type from xml file. const char* ElementGetter(TClass* cl, const char* membername, int specials = 0); produce code to access member of given class.; Parameter specials has following meaning:; 0 - nothing special; 1 - cast to data type; 2 - produce pointer on given member; 3 - skip casting when produce pointer by buf.P() function. const char* ElementSetter(TClass* cl, const char* membername, char* endch); Produce code to set value to given data member.; endch should be output after value is specified. void ProduceStreamerSource(ostream& fs, TClass* cl, TList* cllist); Produce source code of streamer function for specified class. void ReadSTLarg(ostream& fs, TString& argname, int argtyp, Bool_t isargptr, TClass* argcl, TString& tname, TString& ifcond); Produce code to read argument of stl container from xml file. void WriteSTLarg(ostream& fs, const char* accname, int argtyp, Bool_t isargptr, TClass* argcl); Produce code to write argument of ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TXMLPlayer.html:10497,simpl,simple,10497,root/html528/TXMLPlayer.html,https://root.cern,https://root.cern/root/html528/TXMLPlayer.html,6,['simpl'],['simple']
Usability,"[0m; : ; : This method uses a collection of so called rules to create a; : discriminating scoring function. Each rule consists of a series; : of cuts in parameter space. The ensemble of rules are created; : from a forest of decision trees, trained using the training data.; : Each node (apart from the root) corresponds to one rule.; : The scoring function is then obtained by linearly combining; : the rules. A fitting procedure is applied to find the optimum; : set of coefficients. The goal is to find a model with few rules; : but with a strong discriminating power.; : ; : ␛[1m--- Performance optimisation:␛[0m; : ; : There are two important considerations to make when optimising:; : ; : 1. Topology of the decision tree forest; : 2. Fitting of the coefficients; : ; : The maximum complexity of the rules is defined by the size of; : the trees. Large trees will yield many complex rules and capture; : higher order correlations. On the other hand, small trees will; : lead to a smaller ensemble with simple rules, only capable of; : modeling simple structures.; : Several parameters exists for controlling the complexity of the; : rule ensemble.; : ; : The fitting procedure searches for a minimum using a gradient; : directed path. Apart from step size and number of steps, the; : evolution of the path is defined by a cut-off parameter, tau.; : This parameter is unknown and depends on the training data.; : A large value will tend to give large weights to a few rules.; : Similarly, a small value will lead to a large set of rules; : with similar weights.; : ; : A final point is the model used; rules and/or linear terms.; : For a given training sample, the result may improve by adding; : linear terms. If best performance is obtained using only linear; : terms, it is very likely that the Fisher discriminant would be; : a better choice. Ideally the fitting procedure should be able to; : make this choice by giving appropriate weights for either terms.; : ; : ␛[1m--- Performance tuning ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C.html:53143,simpl,simple,53143,doc/master/TMVAClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C.html,2,['simpl'],['simple']
Usability,"[2/2]. RooExpensiveObjectCache::RooExpensiveObjectCache ; (; const RooExpensiveObjectCache & ; other). inline . Definition at line 28 of file RooExpensiveObjectCache.h. ◆ ~RooExpensiveObjectCache(). RooExpensiveObjectCache::~RooExpensiveObjectCache ; (; ). override . Destructor. ; Definition at line 45 of file RooExpensiveObjectCache.cxx. Member Function Documentation. ◆ Class(). static TClass * RooExpensiveObjectCache::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooExpensiveObjectCache::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooExpensiveObjectCache::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 81 of file RooExpensiveObjectCache.h. ◆ clearAll(). void RooExpensiveObjectCache::clearAll ; (; ). Clear all cache elements. ; Definition at line 164 of file RooExpensiveObjectCache.cxx. ◆ clearObj(). bool RooExpensiveObjectCache::clearObj ; (; Int_t ; uniqueID). Clear cache element with given unique ID Retrieve payload object of cache element with given unique ID. ; Definition at line 131 of file RooExpensiveObjectCache.cxx. ◆ DeclFileName(). static const char * RooExpensiveObjectCache::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 81 of file RooExpensiveObjectCache.h. ◆ empty(). bool RooExpensiveObjectCache::empty ; (; ); const. inline . Definition at line 44 of file RooExpensiveObjectCache.h. ◆ getObj(). const TObject * RooExpensiveObjectCache::getObj ; (; Int_t ; uniqueID). Retrieve payload object of cache element with given unique ID. ; Definition at line 115 of file RooExpensiveObjectCache.cxx. ◆ importCacheObjects(). void RooExpensiveObjectCache::importCacheObjects ; (; RooExpensiveObjectCache & ; other, . const char * ; ownerName, . bool ; verbose = false . ). Definition at line 296 of file RooExpensiveObjectCache.cxx. ◆ instance(). RooEx",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooExpensiveObjectCache.html:12985,clear,clearObj,12985,doc/master/classRooExpensiveObjectCache.html,https://root.cern,https://root.cern/doc/master/classRooExpensiveObjectCache.html,1,['clear'],['clearObj']
Usability,"[Introduction](\ref GrP0); 60- [Graphs' plotting options](\ref GrP1); 61- [Exclusion graphs](\ref GrP2); 62- [Graphs with error bars](\ref GrP3); 63 - [TGraphErrors](\ref GrP3a); 64 - [TGraphAsymmErrors](\ref GrP3b); 65 - [TGraphBentErrors](\ref GrP3c); 66 - [TGraphMultiErrors](\ref GrP3d); 67- [TGraphPolar options](\ref GrP4); 68- [Colors automatically picked in palette](\ref GrP5); 69- [Reverse graphs' axis](\ref GrP6); 70- [Graphs in logarithmic scale](\ref GrP7); 71- [Highlight mode for graph](\ref GrP8); 72 ; 73 ; 74\anchor GrP0; 75### Introduction; 76 ; 77Graphs are drawn via the painter `TGraphPainter` class. This class; 78implements techniques needed to display the various kind of; 79graphs i.e.: `TGraph`, `TGraphErrors`, `TGraphBentErrors` and `TGraphAsymmErrors`.; 80 ; 81To draw a graph `graph` it's enough to do:; 82 ; 83 graph->Draw(""AL"");; 84 ; 85The option `AL` in the `Draw()` method means:; 86 ; 871. The axis should be drawn (option `A`),; 882. The graph should be drawn as a simple line (option `L`).; 89 ; 90 By default a graph is drawn in the current pad in the current coordinate system.; 91To define a suitable coordinate system and draw the axis the option; 92`A` must be specified.; 93 ; 94`TGraphPainter` offers many options to paint the various kind of graphs.; 95 ; 96It is separated from the graph classes so that one can have graphs without the; 97graphics overhead, for example in a batch program.; 98 ; 99When a displayed graph is modified, there is no need to call `Draw()` again; the; 100image will be refreshed the next time the pad will be updated. A pad is updated; 101after one of these three actions:; 102 ; 1031. a carriage return on the ROOT command line,; 1042. a click inside the pad,; 1053. a call to `TPad::Update`.; 106 ; 107\anchor GrP1; 108### Graphs' plotting options; 109Graphs can be drawn with the following options:; 110 ; 111| Option | Description |; 112|----------|-------------------------------------------------------------------|; 1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphPainter_8cxx_source.html:3017,simpl,simple,3017,doc/master/TGraphPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphPainter_8cxx_source.html,1,['simpl'],['simple']
Usability,"[] T->Print();; From the output of print we can see that the tree has one branch for each data member of Event, Track, and EventHeader. Now we can use TTree::MakeClass on our tree “T”. MakeClass takes one parameter, a string containing the name of the class to be made. In the command below, the name of our class will be “MyClass”.; root[] T->MakeClass(""MyClass""); Files: MyClass.h and MyClass.C generated from Tree: T; Cling informs us that it has created two files. MyClass.h contains the class definition and MyClass.C contains the MyClass::Loop() method. MyClass has more methods than just Loop(). The other methods are a constructor, a destructor, GetEntry(), LoadTree(), Notify(), Cut() and Show(). The implementations of these methods are in the .h file. This division of methods was done intentionally. The .C file is kept as short as possible, and contains only code that is intended for you to customize. The .h file contains all the other methods. It is clear that you want to be as independent as possible of the header file (i.e. MyClass.h) generated by MakeClass. The solution is to implement a derived class, for example MyRealClass deriving from MyClass such that a change in your Treeor regeneration of MyClass.h does not force you to change MyRealClass.h. You can imagine deriving several classes from MyClass.h, each with a specific algorithm. To understand both files, let’s start with MyClass.h and the class declaration:; 12.21.2 MyClass.h; class MyClass {; public :; // Pointer to the analyzed TTree or TChain; TTree *fChain;; // Current Tree number in a TChain; Int_t fCurrent;; // Declaration of leaves types; UInt_t fUniqueID;; UInt_t fBits;; Char_t fType[20];; Int_t fNtrack;; Int_t fNseg;; Int_t fNvertex;; UInt_t fFlag;; Float_t fTemperature;; Int_t fEvtHdr_fEvtNum;; // List of branches; TBranch *b_fUniqueID;; TBranch *b_fBits;; TBranch *b_fType;; TBranch *b_fNtrack;; TBranch *b_fNseg;; TBranch *b_fNvertex;; TBranch *b_fFlag;; TBranch *b_fTemperature;; TBranch *b_fE",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:637190,clear,clear,637190,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['clear'],['clear']
Usability,"[i-1] = grdnew;; 4265 if (fGstep[i-1] > 0) fGstep[i-1] = TMath::Abs(d);; 4266 else fGstep[i-1] = -TMath::Abs(d);; 4267// decrease step until first derivative changes by <5%; 4268 if (change < .05) goto L60;; 4269 if (TMath::Abs(grdold - grdnew) < dgmin) goto L60;; 4270 if (d < dmin_) {; 4271 mnwarn(""D"", ""MNHES1"", ""Step size too small for 1st drv."");; 4272 goto L60;; 4273 }; 4274 d *= .2;; 4275 }; 4276// loop satisfied = too many iter; 4277 mnwarn(""D"", ""MNHES1"", TString::Format(""Too many iterations on D1.%g%g"",grdold,grdnew));; 4278L60:; 4279 fDgrd[i-1] = TMath::Max(dgmin,TMath::Abs(grdold - grdnew));; 4280 }; 4281// end of first deriv. loop; 4282 mninex(fX);; 4283}; 4284 ; 4285////////////////////////////////////////////////////////////////////////////////; 4286/// Attempts to improve on a good local minimum; 4287///; 4288/// Attempts to improve on a good local minimum by finding a; 4289/// better one. The quadratic part of FCN is removed by MNCALF; 4290/// and this transformed function is minimised using the simplex; 4291/// method from several random starting points.; 4292///; 4293/// ref. -- Goldstein and Price, Math.Comp. 25, 569 (1971); 4294 ; 4295void TMinuit::mnimpr(); 4296{; 4297 /* Initialized data */; 4298 ; 4299 Double_t rnum = 0;; 4300 ; 4301 /* Local variables */; 4302 Double_t amax, ycalf, ystar, ystst;; 4303 Double_t pb, ep, wg, xi, sigsav, reg, sig2;; 4304 Int_t npfn, ndex, loop=0, i, j, ifail, iseed=0;; 4305 Int_t jhold, nloop, nparx, nparp1, jh, jl, iswtr;; 4306 ; 4307 if (fNpar <= 0) return;; 4308 if (fAmin == fUndefi) mnamin();; 4309 fCstatu = ""UNCHANGED "";; 4310 fItaur = 1;; 4311 fEpsi = fUp*.1;; 4312 npfn = fNfcn;; 4313 nloop = Int_t(fWord7[1]);; 4314 if (nloop <= 0) nloop = fNpar + 4;; 4315 nparx = fNpar;; 4316 nparp1 = fNpar + 1;; 4317 wg = 1 / Double_t(fNpar);; 4318 sigsav = fEDM;; 4319 fApsi = fAmin;; 4320 iswtr = fISW[4] - 2*fItaur;; 4321 for (i = 1; i <= fNpar; ++i) {; 4322 fXt[i-1] = fX[i-1];; 4323 fIMPRdsav[i-1] = fWerr[i-1];; 4324 for ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMinuit_8cxx_source.html:143887,simpl,simplex,143887,doc/master/TMinuit_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMinuit_8cxx_source.html,1,['simpl'],['simplex']
Usability,"[type] syntax, all variables are assumed to be of type ""F"".; If the filename ends with extensions .csv or .CSV and a delimiter is; not specified (besides ' '), the delimiter is automatically set to ','. Lines in the input file starting with ""#"" are ignored.; This function will read and ignore any whitespace characters; (this includes blank spaces and the newline and tab characters).; Handles newlines specified with '\n', '\r', or ""\r\n"". A TBranch object is created for each variable in the expression.; The total number of rows read from the file is returned. FILLING a TTree WITH MULTIPLE INPUT TEXT FILES. To fill a TTree with multiple input text files, proceed as indicated above; for the first input file and omit the second argument for subsequent calls; T.ReadFile(""file1.dat"",""branch descriptor"");; T.ReadFile(""file2.dat"");. char GetNewlineValue(istream& inputStream); Determine which newline this file is using. Long64_t ReadStream(istream& inputStream, const char* branchDescriptor = """", char delimiter = ' '); Create or simply read branches from an input stream. See reference information for TTree::ReadFile. void RecursiveRemove(TObject* obj); Make sure that obj (which is being deleted or will soon be) is no; longer referenced by this TTree. void Refresh(); Refresh contents of this tree and its branches from the current status on disk. One can call this function in case the tree file is being; updated by another process. void RemoveFriend(TTree* ); Remove a friend from the list of friends. void Reset(Option_t* option = """"); Reset baskets, buffers and entries count in all branches and leaves. void ResetAfterMerge(TFileMergeInfo* ); Resets the state of this TTree after a merge (keep the customization but; forget the data). void ResetBranchAddress(TBranch* ); Tell all of our branches to set their addresses to zero. Note: If any of our branches own any objects, they are deleted. void ResetBranchAddresses(); Tell all of our branches to drop their current objects and alloca",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TTree.html:118847,simpl,simply,118847,root/html532/TTree.html,https://root.cern,https://root.cern/root/html532/TTree.html,2,['simpl'],['simply']
Usability,"[type] syntax, all variables are assumed to be of type ""F"".; If the filename ends with extensions .csv or .CSV and a delimiter is; not specified (besides ' '), the delimiter is automatically set to ','. Lines in the input file starting with ""#"" are ignored.; This function will read and ignore any whitespace characters; (this includes blank spaces and the newline and tab characters).; Handles newlines specified with '\n', '\r', or ""\r\n"". A TBranch object is created for each variable in the expression.; The total number of rows read from the file is returned. FILLING a TTree WITH MULTIPLE INPUT TEXT FILES. To fill a TTree with multiple input text files, proceed as indicated above; for the first input file and omit the second argument for subsequent calls; T.ReadFile(""file1.dat"",""branch descriptor"");; T.ReadFile(""file2.dat"");. char GetNewlineValue(istream& inputStream); Determine which newline this file is using. Long64_t ReadStream(istream& inputStream, const char* branchDescriptor = """", char delimiter = ' '); Create or simply read branches from an input stream. See reference information for TTree::ReadFile. void RecursiveRemove(TObject* obj); Make sure that obj (which is being deleted or will soon be) is no; longer referenced by this TTree. void Refresh(); Refresh contents of this tree and its branches from the current status on disk. One can call this function in case the tree file is being; updated by another process. void RemoveFriend(TTree* ); Remove a friend from the list of friends. void Reset(Option_t* option = """"); Reset baskets, buffers and entries count in all branches and leaves. void ResetBranchAddress(TBranch* ); Tell all of our branches to set their addresses to zero. Note: If any of our branches own any objects, they are deleted. void ResetBranchAddresses(); Tell all of our branches to drop their current objects and allocate new ones. Long64_t Scan(const char* varexp = """", const char* selection = """", Option_t* option = """", Long64_t nentries = 100000000",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TTree.html:116842,simpl,simply,116842,root/html530/TTree.html,https://root.cern,https://root.cern/root/html530/TTree.html,1,['simpl'],['simply']
Usability,"[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringfGetterName! buffer for name of getter method; TStringfSetterName! buffer for name of setter method; TXMLSetupfXmlSetup! buffer for xml names convertion. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TXMLPlayer(); default constructor. ~TXMLPlayer(); destructor of TXMLPlayer object. TString GetStreamerName(TClass* cl); returns streamer function name for given class. Bool_t ProduceCode(TList* cllist, const char* filename); Produce streamers for provide class list; TList should include list of classes, for which code should be generated.; filename specify name of file (without extension), where streamers should be; created. Function produces two files: header file and source file.; For instance, if filename is ""streamers"", files ""streamers.h"" and ""streamers.cxx""; will be created. TString GetMemberTypeName(TDataMember* member); returns name of simple data type for given data member. TString GetBasicTypeName(TStreamerElement* el); return simple data types for given TStreamerElement object. TString GetBasicTypeReaderMethodName(Int_t type, const char* realname); return functions name to read simple data type from xml file. const char* ElementGetter(TClass* cl, const char* membername, int specials = 0); produce code to access member of given class.; Parameter specials has following meaning:; 0 - nothing special; 1 - cast to data type; 2 - produce pointer on given member; 3 - skip casting when produce pointer by buf.P() function. const char* ElementSetter(TClass* cl, const char* membername, char* endch); Produce code to set value to given data member.; endch should be output after value is specified. void ProduceStreamerSource(ostream& fs, TClass* cl, TList* cllist); Produce source code of streamer function for specified class. void ReadSTLarg(ostream& fs, TString& argname, int argtyp, Bool_t isargptr, TClass* argcl,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TXMLPlayer.html:10247,simpl,simple,10247,root/html528/TXMLPlayer.html,https://root.cern,https://root.cern/root/html528/TXMLPlayer.html,6,['simpl'],['simple']
Usability,"\f]; 367 with \f$\lambda = (x-x_0)/\xi\f$. For a detailed description see; 368 K.S. K&ouml;lbig and B. Schorr, A program package for the Landau distribution,; 369 <A HREF=""http://dx.doi.org/10.1016/0010-4655(84)90085-7"">Computer Phys. Comm. 31 (1984) 97-111</A>; 370 <A HREF=""http://dx.doi.org/10.1016/j.cpc.2008.03.002"">[Erratum-ibid. 178 (2008) 972]</A>.; 371 The same algorithms as in; 372 <A HREF=""https://cern-tex.web.cern.ch/cern-tex/shortwrupsdir/g110/top.html"">; 373 CERNLIB</A> (DISLAN) is used.; 374 ; 375 @param x The argument \f$x\f$; 376 @param xi The width parameter \f$\xi\f$; 377 @param x0 The location parameter \f$x_0\f$; 378 ; 379 @ingroup ProbFunc; 380 ; 381 */; 382 ; 383 double landau_cdf(double x, double xi = 1, double x0 = 0);; 384 ; 385 /**; 386 ; 387 Complement of the distribution function of the Landau; 388 distribution (upper tail).; 389 ; 390 \f[ D(x) = \int_{x}^{+\infty} p(x) dx \f]; 391 ; 392 where p(x) is the Landau probability density function.; 393 It is implemented simply as 1. - #landau_cdf; 394 ; 395 @param x The argument \f$x\f$; 396 @param xi The width parameter \f$\xi\f$; 397 @param x0 The location parameter \f$x_0\f$; 398 ; 399 @ingroup ProbFunc; 400 ; 401 */; 402 inline double landau_cdf_c(double x, double xi = 1, double x0 = 0) {; 403 return 1. - landau_cdf(x,xi,x0);; 404 }; 405 ; 406 /**; 407 ; 408 Complement of the cumulative distribution function of the lognormal distribution; 409 (upper tail).; 410 ; 411 \f[ D(x) = \int_{x}^{+\infty} {1 \over x' \sqrt{2 \pi s^2} } e^{-(\ln{x'} - m)^2/2 s^2} dx' \f]; 412 ; 413 For detailed description see; 414 <A HREF=""http://mathworld.wolfram.com/LogNormalDistribution.html"">; 415 Mathworld</A>.; 416 ; 417 @ingroup ProbFunc; 418 ; 419 */; 420 ; 421 double lognormal_cdf_c(double x, double m, double s, double x0 = 0);; 422 ; 423 ; 424 ; 425 ; 426 /**; 427 ; 428 Cumulative distribution function of the lognormal distribution; 429 (lower tail).; 430 ; 431 \f[ D(x) = \int_{-\infty}^{x} {1 \over x' \sqr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/ProbFuncMathCore_8h_source.html:12078,simpl,simply,12078,doc/master/ProbFuncMathCore_8h_source.html,https://root.cern,https://root.cern/doc/master/ProbFuncMathCore_8h_source.html,1,['simpl'],['simply']
Usability,"\theta_i^{min}\le\theta_i\le\theta^{max}_i\]; They form parallelepiped \(P\) (\(P_0\) may be deformed by \(P\)). Very similar step formulae are used in FUMILI for negative logarithm of the likelihood function with the same idea - linearization of function argument.; 5.12 Neural Networks; 5.12.1 Introduction; Neural Networks are used in various fields for data analysis and classification, both for research and commercial institutions. Some randomly chosen examples are image analysis, financial movements’ predictions and analysis, or sales forecast and product shipping optimization. In particles physics neural networks are mainly used for classification tasks (signal over background discrimination). A vast majority of commonly used neural networks are multilayer perceptrons. This implementation of multilayer perceptrons is inspired from the MLPfit package, which remains one of the fastest tools for neural networks studies.; 5.12.2 The MLP; The multilayer perceptron is a simple feed-forward network with the following structure showed on the left. It is made of neurons characterized by a bias and weighted links in between - let’s call those links synapses. The input neurons receive the inputs, normalize them and forward them to the first hidden layer. Each neuron in any subsequent layer first computes a linear combination of the outputs of the previous layer. The output of the neuron is then function of that combination with f being linear for output neurons or a sigmoid for hidden layers.; Such a structure is very useful because of two theorems:; 1- A linear combination of sigmoids can approximate any continuous function.; 2- Trained with output=1 for the signal and 0 for the background, the approximated function of inputs X is the probability of signal, knowing X.; 5.12.3 Learning Methods; The aim of all learning methods is to minimize the total error on a set of weighted examples. The error is defined as the sum in quadrate, divided by two, of the error on each indiv",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:231019,simpl,simple,231019,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['simpl'],['simple']
Usability,"] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~TVirtualProofPlayer(); { }. Long64_t Process(TDSet* set, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0). Long64_t Finalize(TQueryResult* qr). Long64_t DrawSelect(TDSet* set, const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0). void HandleGetTreeHeader(TMessage* mess). void HandleRecvHisto(TMessage* mess). void StopProcess(Bool_t abort, Int_t timeout = -1). void AddInput(TObject* inp). void ClearInput(). TObject * GetOutput(const char* name) const. TList * GetOutputList() const. TList * GetInputList() const. TList * GetListOfResults() const. void AddQueryResult(TQueryResult* q). TQueryResult * GetCurrentQuery() const. TQueryResult * GetQueryResult(const char* ref). void RemoveQueryResult(const char* ref). void SetCurrentQuery(TQueryResult* q). void SetMaxDrawQueries(Int_t max). void RestorePreviousQuery(). Int_t AddOutputObject(TObject* obj). void AddOutput(TList* out). void StoreOutput(TList* out). void StoreFeedback(TObject* slave, TList* out). void Progress(Long64_t total, Long64_t processed). void Progress(TSlave* , Long64_t total, Long64_t processed). void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti). void Progress(TProofProgressInfo* ). void Progress(TSlave* , TProofProgressInfo* ). void Feedback(TList* objs). TDrawFeedback * CreateDrawFeedback(TProof* p). void SetDrawFeedbackOption(T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TVirtualProofPlayer.html:12565,Clear,ClearInput,12565,root/html532/TVirtualProofPlayer.html,https://root.cern,https://root.cern/root/html532/TVirtualProofPlayer.html,1,['Clear'],['ClearInput']
Usability,"]. Int_t TProof::Remove ; (; Int_t ; query, . Bool_t ; all = kFALSE . ). Send remove request for the qry-th query in fQueries. ; Definition at line 6013 of file TProof.cxx. ◆ RemoveChain(). void TProof::RemoveChain ; (; TChain * ; chain). Remove chain from data set. ; Definition at line 10231 of file TProof.cxx. ◆ RemoveDataSet(). Int_t TProof::RemoveDataSet ; (; const char * ; uri, . const char * ; optStr = """" . ). virtual . Remove the specified dataset from the PROOF cluster. ; Files are not deleted. ; Reimplemented in TProofLite.; Definition at line 10991 of file TProof.cxx. ◆ RemoveDynamicPath(). Int_t TProof::RemoveDynamicPath ; (; const char * ; libpath, . Bool_t ; onClient = kFALSE . ). Remove 'libpath' from the lib path search. ; Multiple paths can be specified at once separating them with a comma or a blank. Return 0 on success, -1 otherwise ; Definition at line 8933 of file TProof.cxx. ◆ RemoveFeedback(). void TProof::RemoveFeedback ; (; const char * ; name). Remove object from feedback list. ; Definition at line 10000 of file TProof.cxx. ◆ RemoveIncludePath(). Int_t TProof::RemoveIncludePath ; (; const char * ; incpath, . Bool_t ; onClient = kFALSE . ). Remove 'incpath' from the inc path search. ; Multiple paths can be specified at once separating them with a comma or a blank. Return 0 on success, -1 otherwise ; Definition at line 8967 of file TProof.cxx. ◆ RemoveWorkers(). Int_t TProof::RemoveWorkers ; (; TList * ; workerList). protected . Used for shuting down the workres after a query is finished. ; Sends each of the workers from the workerList, a kPROOF_STOP message. If the workerList == 0, shutdown all the workers. ; Definition at line 1597 of file TProof.cxx. ◆ RequestStagingDataSet(). Bool_t TProof::RequestStagingDataSet ; (; const char * ; dataset). virtual . Allows users to request staging of a particular dataset. ; Requests are saved in a special dataset repository and must be honored by the endpoint. ; Reimplemented in TProofLite.; Definition a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:132727,feedback,feedback,132727,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['feedback'],['feedback']
Usability,"];; 3515 if (evalErrorList.second.size() >= 2048) {; 3516 // avoid overflowing the error list, so if there are very many, print; 3517 // the oldest one first, and pop it off the list; 3518 const EvalError& oee = evalErrorList.second.front();; 3519 // print to debug stream, since these would normally be suppressed, and; 3520 // we do not want to increase the error count in the message service...; 3521 ccoutD(Eval) << ""RooAbsReal::logEvalError("" << GetName(); 3522 << "") delayed evaluation error, "" << std::endl; 3523 << "" origin : "" << oss2.str() << std::endl; 3524 << "" message : "" << oee._msg << std::endl; 3525 << "" server values: "" << oee._srvval << std::endl ;; 3526 evalErrorList.second.pop_front();; 3527 }; 3528 evalErrorList.first = oss2.str() ;; 3529 evalErrorList.second.push_back(ee) ;; 3530 }; 3531 ; 3532 inLogEvalError = false ;; 3533 //coutE(Tracing) << ""RooAbsReal::logEvalError("" << GetName() << "") message = "" << message << std::endl ;; 3534}; 3535 ; 3536 ; 3537 ; 3538 ; 3539////////////////////////////////////////////////////////////////////////////////; 3540/// Clear the stack of evaluation error messages; 3541 ; 3542void RooAbsReal::clearEvalErrorLog(); 3543{; 3544 if (evalErrorData().mode == PrintErrors) {; 3545 return ;; 3546 } else if (evalErrorData().mode == CollectErrors) {; 3547 evalErrorData().errorList.clear() ;; 3548 } else {; 3549 evalErrorData().count = 0 ;; 3550 }; 3551}; 3552 ; 3553 ; 3554////////////////////////////////////////////////////////////////////////////////; 3555/// Retrieve bin boundaries if this distribution is binned in `obs`.; 3556/// \param[in] obs Observable to retrieve boundaries for.; 3557/// \param[in] xlo Beginning of range.; 3558/// \param[in] xhi End of range.; 3559/// \return The caller owns the returned std::list.; 3560std::list<double>* RooAbsReal::binBoundaries(RooAbsRealLValue& /*obs*/, double /*xlo*/, double /*xhi*/) const {; 3561 return nullptr;; 3562}; 3563 ; 3564 ; 3565//////////////////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:151428,clear,clearEvalErrorLog,151428,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,1,['clear'],['clearEvalErrorLog']
Usability,"]ematrixoutput histogram ; [in]sourceidentifier of the background source ; [in]binMap(default=nullptr) remapping of histogram bins ; [in]clearEmat(default=true) if true, clear the histogram. this method returns the covariance contributions to the unfolding result arising from the background source source and the uncorrelated (background histogram uncertainties). Also see method SubtractBackground() ; the array binMap is explained with the method GetOutput(). The flag clearEmat may be used to add covariance matrices from several uncertainty sources. ; Definition at line 1229 of file TUnfoldSys.cxx. ◆ GetEmatrixSysSource(). void TUnfoldSys::GetEmatrixSysSource ; (; TH2 * ; ematrix, . const char * ; name, . const Int_t * ; binMap = nullptr, . Bool_t ; clearEmat = kTRUE . ). covariance contribution from a systematic variation of the response matrix ; Parameters. [in,out]ematrixcovariance matrix histogram ; [in]nameidentifier of the systematic variation ; [in]binMap(default=nullptr) remapping of histogram bins ; [in]clearEmat(default=true) if true, clear the histogram prior to adding the covariance matrix contribution. Returns the covariance matrix contribution from shifting the given uncertainty source within one sigma ; the array binMap is explained with the method GetOutput(). The flag clearEmat may be used to add covariance matrices from several uncertainty sources. ; Definition at line 1113 of file TUnfoldSys.cxx. ◆ GetEmatrixSysTau(). void TUnfoldSys::GetEmatrixSysTau ; (; TH2 * ; ematrix, . const Int_t * ; binMap = nullptr, . Bool_t ; clearEmat = kTRUE . ). covariance matrix contribution from error on regularisation parameter ; Parameters. [in,out]ematrixoutput histogram ; [in]binMap(default=nullptr) remapping of histogram bins ; [in]clearEmat(default=true) if true, clear the histogram. this method returns the covariance contributions to the unfolding result from the assigned uncertainty on the parameter tau, see method SetTauError(). ; the array binMap is explaine",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfoldSys.html:40522,clear,clearEmat,40522,doc/master/classTUnfoldSys.html,https://root.cern,https://root.cern/doc/master/classTUnfoldSys.html,2,['clear'],"['clear', 'clearEmat']"
Usability,_BATCH = kFALSE. staticprivate . debug flags ; Definition at line 217 of file MethodMLP.h. ◆ fgPRINT_ESTIMATOR_INC. const Int_t TMVA::MethodMLP::fgPRINT_ESTIMATOR_INC = 10. staticprivate . debug flags ; Definition at line 215 of file MethodMLP.h. ◆ fgPRINT_SEQ. const Bool_t TMVA::MethodMLP::fgPRINT_SEQ = kFALSE. staticprivate . debug flags ; Definition at line 216 of file MethodMLP.h. ◆ fLastAlpha. Double_t TMVA::MethodMLP::fLastAlpha. private . line search variable ; Definition at line 183 of file MethodMLP.h. ◆ fLearnRate. Double_t TMVA::MethodMLP::fLearnRate. private . learning rate for synapse weight adjustments ; Definition at line 188 of file MethodMLP.h. ◆ fPrior. Double_t TMVA::MethodMLP::fPrior. private . zjh ; Definition at line 166 of file MethodMLP.h. ◆ fPriorDev. std::vector<Double_t> TMVA::MethodMLP::fPriorDev. private . zjh ; Definition at line 167 of file MethodMLP.h. ◆ fResetStep. Int_t TMVA::MethodMLP::fResetStep. private . reset time (how often we clear hessian matrix) ; Definition at line 185 of file MethodMLP.h. ◆ fSamplingEpoch. Float_t TMVA::MethodMLP::fSamplingEpoch. private . fraction of epochs where sampling is used ; Definition at line 177 of file MethodMLP.h. ◆ fSamplingFraction. Float_t TMVA::MethodMLP::fSamplingFraction. private . fraction of events which is sampled for training ; Definition at line 176 of file MethodMLP.h. ◆ fSamplingTesting. Bool_t TMVA::MethodMLP::fSamplingTesting. private . The testing sample is sampled. ; Definition at line 180 of file MethodMLP.h. ◆ fSamplingTraining. Bool_t TMVA::MethodMLP::fSamplingTraining. private . The training sample is sampled. ; Definition at line 179 of file MethodMLP.h. ◆ fSamplingWeight. Float_t TMVA::MethodMLP::fSamplingWeight. private . changing factor for event weights when sampling is turned on ; Definition at line 178 of file MethodMLP.h. ◆ fTau. Double_t TMVA::MethodMLP::fTau. private . line search variable ; Definition at line 184 of file MethodMLP.h. ◆ fTestRate. Int_t TMVA::Meth,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodMLP.html:52620,clear,clear,52620,doc/master/classTMVA_1_1MethodMLP.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodMLP.html,1,['clear'],['clear']
Usability,"_M_insert<const void *>(const void* __v); basic_ostream<char,char_traits<char> >::__ostream_type&basic_ostream<char,char_traits<char> >::_M_insert<double>(double __v); basic_ostream<char,char_traits<char> >::__ostream_type&basic_ostream<char,char_traits<char> >::_M_insert<long double>(long double __v); basic_ostream<char,char_traits<char> >::__ostream_type&basic_ostream<char,char_traits<char> >::_M_insert<long long>(Long64_t __v); basic_ostream<char,char_traits<char> >::__ostream_type&basic_ostream<char,char_traits<char> >::_M_insert<long>(long __v); basic_ostream<char,char_traits<char> >::__ostream_type&basic_ostream<char,char_traits<char> >::_M_insert<unsigned long long>(ULong64_t __v); basic_ostream<char,char_traits<char> >::__ostream_type&basic_ostream<char,char_traits<char> >::_M_insert<unsigned long>(unsigned long __v); static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static TStringTQObject::CompressName(const char* method_name); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTGTextView::Copy(TObject&) const; virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTGView::DoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); virtual voidTGTextView::DrawRegion(Int_t x, Int_t y, UInt_t w, UInt_t h); static FontStruct_tTGTextView::GetDefaultFontStruct(); static const TGGC&TGTextView::GetDefaultGC(); static const TGGC&TGTextView::GetDefaultSelectedBackgroundGC(); static const TGGC&TGTextView::GetDefaultSelectedGC(); static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGTextViewostream.html:25657,Clear,ClearFlags,25657,root/html604/TGTextViewostream.html,https://root.cern,https://root.cern/root/html604/TGTextViewostream.html,1,['Clear'],['ClearFlags']
Usability,_Version ();  ; static const char * DeclFileName ();  ; static EParUnzipMode GetParallelUnzip ();  Static function that returns the parallel option (to indicate an additional thread) ;  ; static bool IsParallelUnzip ();  Static function that tells wether the multithreading unzipping is activated. ;  ; static Int_t SetParallelUnzip (TTreeCacheUnzip::EParUnzipMode option=TTreeCacheUnzip::kEnable);  Static function that (de)activates multithreading unzipping. ;  ; static void SetUnzipRelBufferSize (Float_t relbufferSize);  static function: Sets the unzip relative buffer size ;  ;  Static Public Member Functions inherited from TTreeCache; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Int_t GetLearnEntries ();  Static function returning the number of entries used to train the cache see SetLearnEntries. ;  ; static void SetLearnEntries (Int_t n=10);  Static function to set the number of entries to be used in learning mode The default value for n is 10. ;  ;  Static Public Member Functions inherited from TFileCacheRead; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Types; typedef struct UnzipState UnzipState_t;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . Protected Attributes; bool fAsyncR,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTreeCacheUnzip.html:18116,learn,learning,18116,doc/v632/classTTreeCacheUnzip.html,https://root.cern,https://root.cern/doc/v632/classTTreeCacheUnzip.html,2,['learn'],['learning']
Usability,"______________________________________________________________________________________________; 437template <typename Architecture_t>; 438auto VGeneralLayer<Architecture_t>::UpdateWeightGradients(const std::vector<Matrix_t> &weightGradients,; 439 const Scalar_t learningRate) -> void; 440{; 441 for (size_t i = 0; i < fWeightGradients.size(); i++) {; 442 Architecture_t::ScaleAdd(fWeightGradients[i], weightGradients[i], -learningRate);; 443 }; 444}; 445 ; 446//_________________________________________________________________________________________________; 447template <typename Architecture_t>; 448auto VGeneralLayer<Architecture_t>::UpdateBiasGradients(const std::vector<Matrix_t> &biasGradients,; 449 const Scalar_t learningRate) -> void; 450{; 451 for (size_t i = 0; i < fBiasGradients.size(); i++) {; 452 Architecture_t::ScaleAdd(fBiasGradients[i], biasGradients[i], -learningRate);; 453 }; 454}; 455 ; 456//_________________________________________________________________________________________________; 457template <typename Architecture_t>; 458auto VGeneralLayer<Architecture_t>::CopyWeights(const std::vector<Matrix_t> &otherWeights) -> void; 459{; 460 ; 461 for (size_t i = 0; i < fWeights.size(); i++) {; 462 Architecture_t::Copy(fWeights[i], otherWeights[i]);; 463 }; 464}; 465 ; 466//_________________________________________________________________________________________________; 467template <typename Architecture_t>; 468auto VGeneralLayer<Architecture_t>::CopyBiases(const std::vector<Matrix_t> &otherBiases) -> void; 469{; 470 for (size_t i = 0; i < fBiases.size(); i++) {; 471 Architecture_t::Copy(fBiases[i], otherBiases[i]);; 472 }; 473}; 474 ; 475//_________________________________________________________________________________________________; 476template <typename Architecture_t>; 477template <typename Arch>; 478void VGeneralLayer<Architecture_t>::CopyParameters(const VGeneralLayer<Arch> &layer); 479{; 480 //assert(!std::is_same<Arch, Architecture_t>::value);; 4",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GeneralLayer_8h_source.html:20673,learn,learningRate,20673,doc/master/GeneralLayer_8h_source.html,https://root.cern,https://root.cern/doc/master/GeneralLayer_8h_source.html,1,['learn'],['learningRate']
Usability,"________________________________________________________________________________________________; 427template <typename Architecture_t>; 428auto VGeneralLayer<Architecture_t>::UpdateBiases(const std::vector<Matrix_t> &biasGradients,; 429 const Scalar_t learningRate) -> void; 430{; 431 for (size_t i = 0; i < fBiases.size(); i++) {; 432 Architecture_t::ScaleAdd(fBiases[i], biasGradients[i], -learningRate);; 433 }; 434}; 435 ; 436//_________________________________________________________________________________________________; 437template <typename Architecture_t>; 438auto VGeneralLayer<Architecture_t>::UpdateWeightGradients(const std::vector<Matrix_t> &weightGradients,; 439 const Scalar_t learningRate) -> void; 440{; 441 for (size_t i = 0; i < fWeightGradients.size(); i++) {; 442 Architecture_t::ScaleAdd(fWeightGradients[i], weightGradients[i], -learningRate);; 443 }; 444}; 445 ; 446//_________________________________________________________________________________________________; 447template <typename Architecture_t>; 448auto VGeneralLayer<Architecture_t>::UpdateBiasGradients(const std::vector<Matrix_t> &biasGradients,; 449 const Scalar_t learningRate) -> void; 450{; 451 for (size_t i = 0; i < fBiasGradients.size(); i++) {; 452 Architecture_t::ScaleAdd(fBiasGradients[i], biasGradients[i], -learningRate);; 453 }; 454}; 455 ; 456//_________________________________________________________________________________________________; 457template <typename Architecture_t>; 458auto VGeneralLayer<Architecture_t>::CopyWeights(const std::vector<Matrix_t> &otherWeights) -> void; 459{; 460 ; 461 for (size_t i = 0; i < fWeights.size(); i++) {; 462 Architecture_t::Copy(fWeights[i], otherWeights[i]);; 463 }; 464}; 465 ; 466//_________________________________________________________________________________________________; 467template <typename Architecture_t>; 468auto VGeneralLayer<Architecture_t>::CopyBiases(const std::vector<Matrix_t> &otherBiases) -> void; 469{; 470 for (size_t i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GeneralLayer_8h_source.html:20218,learn,learningRate,20218,doc/master/GeneralLayer_8h_source.html,https://root.cern,https://root.cern/doc/master/GeneralLayer_8h_source.html,2,['learn'],['learningRate']
Usability,"_eMinimizerType=MinimizerType::fSteepest, double _learningRate=1e-5, double _momentum=0.3, int _repetitions=3, bool _multithreading=true);  c'tor ;  ; virtual ~Settings ();  d'tor ;  ; void addPoint (std::string histoName, double x);  for monitoring ;  ; void addPoint (std::string histoName, double x, double y);  for monitoring ;  ; size_t batchSize () const;  mini-batch size ;  ; void clear (std::string histoName);  for monitoring ;  ; virtual void computeResult (const Net &, std::vector< double > &);  callback for monitoring and logging ;  ; size_t convergenceCount () const;  returns the current convergence count ;  ; size_t convergenceSteps () const;  how many steps until training is deemed to have converged ;  ; void create (std::string histoName, int bins, double min, double max);  for monitoring ;  ; void create (std::string histoName, int bins, double min, double max, int bins2, double min2, double max2);  for monitoring ;  ; virtual void cycle (double progress, TString text);  ; virtual void drawSample (const std::vector< double > &, const std::vector< double > &, const std::vector< double > &, double);  callback for monitoring and logging ;  ; const std::vector< double > & dropFractions () const;  ; size_t dropRepetitions () const;  ; virtual void endTestCycle ();  callback for monitoring and loggging ;  ; virtual void endTrainCycle (double);  callback for monitoring and logging ;  ; bool exists (std::string histoName);  for monitoring ;  ; double factorWeightDecay () const;  get the weight-decay factor ;  ; virtual bool hasConverged (double testError);  has this training converged already? ;  ; double learningRate () const;  get the learning rate ;  ; size_t maxConvergenceCount () const;  returns the max convergence count so far ;  ; size_t minError () const;  returns the smallest error so far ;  ; MinimizerType minimizerType () const;  which minimizer shall be used (e.g. SGD) ;  ; double momentum () const;  get the momentum (e.g. for SGD) ;  ; void pads (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Settings.html:1019,clear,clear,1019,doc/master/classTMVA_1_1DNN_1_1Settings.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Settings.html,3,"['clear', 'learn']","['clear', 'learning', 'learningRate']"
Usability,"_t *);  Search along the line defined by direction. ;  ; void MLP_Batch (Double_t *);  One step for the batch (stochastic) method. ;  ; void MLP_Stochastic (Double_t *);  One step for the stochastic method buffer should contain the previous dw vector and will be updated. ;  ; void SetGammaDelta (TMatrixD &, TMatrixD &, Double_t *);  Sets the gamma \((g_{(t+1)}-g_{(t)})\) and delta \((w_{(t+1)}-w_{(t)})\) vectors Gamma is computed here, so ComputeDEDw cannot have been called before, and delta is a direct translation of buffer into a TMatrixD. ;  ; void SteepestDir (Double_t *);  Sets the search direction to steepest descent. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Private Member Functions;  TMultiLayerPerceptron (const TMultiLayerPerceptron &);  ; void BuildFirstLayer (TString &);  Instantiates the neurons in input Inputs are normalised and the type is set to kOff (simple forward of the formula value) ;  ; void BuildHiddenLayers (TString &);  Builds hidden layers. ;  ; void BuildLastLayer (TString &, Int_t);  Builds the output layer Neurons are linear combinations of input, by default. ;  ; void BuildOneHiddenLayer (const TString &sNumNodes, Int_t &layer, Int_t &prevStart, Int_t &prevStop, Bool_t lastLayer);  Builds a hidden layer, updates the number of layers. ;  ; void ExpandStructure ();  Expand the structure of the first layer. ;  ; void MLP_Line (Double_t *, Double_t *, Double_t);  Sets the weights to a point along a line Weights are set to [origin + (dist * dir)]. ;  ; TMultiLayerPerceptron & operator= (const TMultiLayerPerceptron &);  ; void Shuffle (Int_t *, Int_t) const;  Shuffle the Int_t index[n] in input. ;  . Private Attributes; Int_t fCurrentTree;  ! index of the current tree in a chain ;  ; Double_t fCurrentTreeWeight;  ! weight of the current tree in a chain ;  ; TTree * fData; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiLayerPerceptron.html:25293,simpl,simple,25293,doc/master/classTMultiLayerPerceptron.html,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html,1,['simpl'],['simple']
Usability,"_t > * ; l = nullptr, . std::vector< Double_t > * ; u = nullptr . ). constructor specifying the volume by std::vectors of doubles ; Definition at line 47 of file Volume.cxx. ◆ Volume() [3/7]. TMVA::Volume::Volume ; (; Volume & ; V). copy constructor ; Definition at line 125 of file Volume.cxx. ◆ Volume() [4/7]. TMVA::Volume::Volume ; (; Float_t * ; l, . Float_t * ; u, . Int_t ; nvar . ). constructor specifying the volume by c-style arrays of floats ; Definition at line 86 of file Volume.cxx. ◆ Volume() [5/7]. TMVA::Volume::Volume ; (; Double_t * ; l, . Double_t * ; u, . Int_t ; nvar . ). constructor specifying the volume by c-style arrays of doubles ; Definition at line 71 of file Volume.cxx. ◆ Volume() [6/7]. TMVA::Volume::Volume ; (; Float_t ; l, . Float_t ; u . ). simple constructors for 1 dimensional values (float) ; Definition at line 113 of file Volume.cxx. ◆ Volume() [7/7]. TMVA::Volume::Volume ; (; Double_t ; l, . Double_t ; u . ). simple constructors for 1 dimensional values (double) ; Definition at line 101 of file Volume.cxx. ◆ ~Volume(). TMVA::Volume::~Volume ; (; void ; ). virtual . destructor ; Definition at line 153 of file Volume.cxx. Member Function Documentation. ◆ Delete(). void TMVA::Volume::Delete ; (; void ; ). delete array of volume bondaries ; Definition at line 162 of file Volume.cxx. ◆ operator=(). TMVA::Volume & TMVA::Volume::operator= ; (; const Volume & ; V). assignment operator ; Definition at line 135 of file Volume.cxx. ◆ Print(). void TMVA::Volume::Print ; (; void ; ); const. printout of the volume boundaries ; Definition at line 193 of file Volume.cxx. ◆ Scale(). void TMVA::Volume::Scale ; (; Double_t ; f). ""scale"" the volume by multiplying each upper and lower boundary by ""f"" ; Definition at line 171 of file Volume.cxx. ◆ ScaleInterval(). void TMVA::Volume::ScaleInterval ; (; Double_t ; f). ""scale"" the volume by symmetrically blowing up the interval in each dimension ; Definition at line 180 of file Volume.cxx. Member Data Documenta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Volume.html:3236,simpl,simple,3236,doc/master/classTMVA_1_1Volume.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Volume.html,1,['simpl'],['simple']
Usability,"_t AllocColor(unsigned long cmap, XColor* color); Allocate color in colormap. If we are on an <= 8 plane machine; we will use XAllocColor. If we are on a >= 15 (15, 16 or 24) plane; true color machine we will calculate the pixel value using:; for 15 and 16 bit true colors have 6 bits precision per color however; only the 5 most significant bits are used in the color index.; Except for 16 bits where green uses all 6 bits. I.e.:; 15 bits = rrrrrgggggbbbbb; 16 bits = rrrrrggggggbbbbb; for 24 bits each r, g and b are represented by 8 bits. Since all colors are set with a max of 65535 (16 bits) per r, g, b; we just right shift them by 10, 11 and 10 bits for 16 planes, and; (10, 10, 10 for 15 planes) and by 8 bits for 24 planes.; Returns kFALSE in case color allocation failed. void QueryColors(unsigned long cmap, XColor* colors, Int_t ncolors); Returns the current RGB value for the pixel in the XColor structure. void ClearPixmap(unsigned long* pix); Clear the pixmap pix. void ClearWindow(); Clear current window. void ClosePixmap(); Delete current pixmap. void CloseWindow(); Delete current window. void CloseWindow1(); Delete current window. void CopyPixmap(Int_t wid, Int_t xpos, Int_t ypos); Copy the pixmap wid at the position xpos, ypos in the current window. void CopyWindowtoPixmap(unsigned long* pix, Int_t xpos, Int_t ypos); Copy area of current window in the pixmap pix. void DrawBox(Int_t x1, Int_t y1, Int_t x2, Int_t y2, TVirtualX::EBoxMode mode); Draw a box.; mode=0 hollow (kHollow); mode=1 solid (kSolid). void DrawCellArray(Int_t x1, Int_t y1, Int_t x2, Int_t y2, Int_t nx, Int_t ny, Int_t* ic); Draw a cell array.; x1,y1 : left down corner; x2,y2 : right up corner; nx,ny : array size; ic : array. Draw a cell array. The drawing is done with the pixel presicion; if (X2-X1)/NX (or Y) is not a exact pixel number the position of; the top rigth corner may be wrong. void DrawFillArea(Int_t n, TPoint* xy); Fill area described by polygon.; n : number of points; xy(2,n) : list",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGX11.html:25804,Clear,ClearWindow,25804,root/html532/TGX11.html,https://root.cern,https://root.cern/root/html532/TGX11.html,4,['Clear'],"['Clear', 'ClearWindow']"
Usability,"_t Incorporate(TObject* obj, TList* out, Bool_t& merged); Incorporate object 'newobj' in the list 'outlist'.; The object is merged with an object of the same name already existing in; the list, or just added.; The boolean merged is set to kFALSE when the object is just added to 'outlist';; this happens if the Merge() method does not exist or if a object named as 'obj'; is not already in the list. If the obj is not 'merged' than it should not be; deleted, unless outlist is not owner of its objects.; Return 0 on success, -1 on error. TObject * HandleHistogram(TObject* obj); Low statistic histograms need a special treatment when using autobin. void StoreOutput(TList* out); Store received output list. TList * MergeFeedback(); Merge feedback lists. void StoreFeedback(TObject* slave, TList* out); Store feedback results from the specified slave. void SetupFeedback(); Setup reporting of feedback objects. void StopFeedback(); Stop reporting of feedback objects. Bool_t HandleTimer(TTimer* timer); Send feedback objects to client. TDSetElement * GetNextPacket(TSlave* slave, TMessage* r); Get next packet for specified slave. Bool_t IsClient() const; Is the player running on the client?. Long64_t DrawSelect(TDSet* set, const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Draw (support for TChain::Draw()).; Returns -1 in case of error or number of selected events in case of success. void SetInitTime(); Set init time. TVirtualPacketizer * GetPacketizer() const; { return 0; }. void Progress(Long64_t total, Long64_t processed). void Progress(TSlave* , Long64_t total, Long64_t processed); { Progress(total, processed); }. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti). TProof * GetProof() const; { return fProof; }. TProofPlayerRemote(TProof* proof = 0); { fProgressStatus = new TProofProgressStatus(); }. » Author: Maarten Ballintijn 07/",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofPlayerRemote.html:19041,feedback,feedback,19041,root/html528/TProofPlayerRemote.html,https://root.cern,https://root.cern/root/html528/TProofPlayerRemote.html,1,['feedback'],['feedback']
Usability,"_t SupportAlpha()Static function returning ""true"" if transparency is supported.Definition TCanvas.cxx:2476; TCanvas::fBatchBool_t fBatch! True when in batchmodeDefinition TCanvas.h:59; TCanvas::fUseGLBool_t fUseGL! True when rendering is with GLDefinition TCanvas.h:62; TCanvas::fEventXInt_t fEventX! Last X mouse position in canvasDefinition TCanvas.h:46; TCanvas::IsBatchBool_t IsBatch() const overrideDefinition TCanvas.h:171; TCanvas::DrawCloneTObject * DrawClone(Option_t *option="""") const overrideDraw a clone of this canvas A new canvas is created that is a clone of this canvas.Definition TCanvas.cxx:907; TCanvas::fXsizeRealSize_t fXsizeRealCurrent size of canvas along X in CM.Definition TCanvas.h:35; TCanvas::HasMenuBarBool_t HasMenuBar() constDefinition TCanvas.h:168; TCanvas::GetCanvasPainterTVirtualPadPainter * GetCanvasPainter()Access and (probably) creation of pad painter.Definition TCanvas.cxx:2616; TCanvas::HighlightConnectvirtual void HighlightConnect(const char *slot)This is ""simplification"" for function TCanvas::Connect with Highlighted signal for specific slot.Definition TCanvas.cxx:1631; TCanvas::PickTPad * Pick(Int_t px, Int_t py, TObjLink *&pickobj) overrideSearch for an object at pixel position px,py.Definition TCanvas.h:183; TCanvas::Closevoid Close(Option_t *option="""") overrideClose canvas.Definition TCanvas.cxx:788; TCanvas::SetFixedAspectRatiovoid SetFixedAspectRatio(Bool_t fixed=kTRUE) overrideFix canvas aspect ratio to current value if fixed is true.Definition TCanvas.cxx:2016; TCanvas::Resizevirtual void Resize(Option_t *option="""")Recompute canvas parameters following a X11 Resize.Definition TCanvas.cxx:1668; TCanvas::GetHighLightColorColor_t GetHighLightColor() const overrideDefinition TCanvas.h:138; TCanvas::GetShowToolBarBool_t GetShowToolBar() constDefinition TCanvas.h:149; TCanvas::DrawEventStatusvoid DrawEventStatus(Int_t event, Int_t x, Int_t y, TObject *selected)Report name and title of primitive below the cursor.Definition TCanvas.cxx",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCanvas_8cxx_source.html:105570,simpl,simplification,105570,doc/master/TCanvas_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCanvas_8cxx_source.html,1,['simpl'],['simplification']
Usability,"_t add = kTRUE); static Bool_tTH1::AddDirectoryStatus(); voidTArrayD::Adopt(Int_t n, Double_t* array); virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Option_t* option = """") const; virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Double_t& advalue) const; virtual voidTObject::AppendPad(Option_t* option = """"); static voidApproximate(Bool_t approx = kTRUE); Double_tTArrayD::At(Int_t i) const; virtual voidTH1::Browse(TBrowser* b); virtual Int_tBufferEmpty(Int_t action = 0); voidBuildOptions(Double_t tmin, Double_t tmax, Option_t* option); virtual Bool_tTH1::CanExtendAllAxes() const; virtual Double_tTH1::Chi2Test(const TH1* h2, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chi2TestX(const TH1* h2, Double_t& chi2, Int_t& ndf, Int_t& igood, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chisquare(TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTH1::ClearUnderflowAndOverflow(); virtual TObject*TH1::Clone(const char* newname = 0) const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tTH1::ComputeIntegral(Bool_t onlyPositive = false); virtual voidCopy(TObject& hnew) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTH1::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTH1::DistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tDivide(const TH1* h1); virtual Bool_tDivide(TF1* h1, Double_t c1 = 1); virtual Bool_tDivide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """")MENU ; virtual voidTH1::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TH1*TH1::DrawCopy(Option_t* option = """", const char* name_postfix =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProfile3D.html:3532,Clear,Clear,3532,root/html602/TProfile3D.html,https://root.cern,https://root.cern/root/html602/TProfile3D.html,2,['Clear'],['Clear']
Usability,"_t add = kTRUE); static Bool_tTH1::AddDirectoryStatus(); voidTArrayD::Adopt(Int_t n, Double_t* array); virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Option_t* option = """") const; virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Double_t& advalue) const; virtual voidTObject::AppendPad(Option_t* option = """"); static voidApproximate(Bool_t approx = kTRUE); Double_tTArrayD::At(Int_t i) const; virtual voidTH1::Browse(TBrowser* b); virtual Int_tBufferEmpty(Int_t action = 0); voidBuildOptions(Double_t ymin, Double_t ymax, Option_t* option); virtual Bool_tTH1::CanExtendAllAxes() const; virtual Double_tTH1::Chi2Test(const TH1* h2, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chi2TestX(const TH1* h2, Double_t& chi2, Int_t& ndf, Int_t& igood, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chisquare(TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTH1::ClearUnderflowAndOverflow(); virtual TObject*TH1::Clone(const char* newname = 0) const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tTH1::ComputeIntegral(Bool_t onlyPositive = false); virtual voidCopy(TObject& hnew) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTH1::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTH1::DistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tDivide(const TH1* h1); virtual Bool_tDivide(TF1* h1, Double_t c1 = 1); virtual Bool_tDivide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """")MENU ; virtual voidTH1::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TH1*TH1::DrawCopy(Option_t* option = """", const char* name_postfix =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProfile.html:3917,Clear,Clear,3917,root/html602/TProfile.html,https://root.cern,https://root.cern/root/html602/TProfile.html,2,['Clear'],['Clear']
Usability,"_t add = kTRUE); static Bool_tTH1::AddDirectoryStatus(); voidTArrayD::Adopt(Int_t n, Double_t* array); virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Option_t* option = """") const; virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Double_t& advalue) const; virtual voidTObject::AppendPad(Option_t* option = """"); static voidApproximate(Bool_t approx = kTRUE); Double_tTArrayD::At(Int_t i) const; virtual voidTH1::Browse(TBrowser* b); virtual Int_tBufferEmpty(Int_t action = 0); voidBuildOptions(Double_t zmin, Double_t zmax, Option_t* option); virtual Bool_tTH1::CanExtendAllAxes() const; virtual Double_tTH1::Chi2Test(const TH1* h2, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chi2TestX(const TH1* h2, Double_t& chi2, Int_t& ndf, Int_t& igood, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chisquare(TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTH1::ClearUnderflowAndOverflow(); virtual TObject*TH1::Clone(const char* newname = 0) const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tTH1::ComputeIntegral(Bool_t onlyPositive = false); virtual voidCopy(TObject& hnew) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTH1::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTH1::DistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tDivide(const TH1* h1); virtual Bool_tDivide(TF1* h1, Double_t c1 = 1); virtual Bool_tDivide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """")MENU ; virtual voidTH1::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TH1*TH1::DrawCopy(Option_t* option = """", const char* name_postfix =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProfile2D.html:3462,Clear,Clear,3462,root/html602/TProfile2D.html,https://root.cern,https://root.cern/root/html602/TProfile2D.html,2,['Clear'],['Clear']
Usability,"_t align); Delegate to gVirtualX. void SetTextAngle(Float_t tangle); Delegate to gVirtualX. void SetTextColor(Color_t tcolor); Delegate to gVirtualX. void SetTextFont(Font_t tfont); Delegate to gVirtualX. void SetTextSize(Float_t tsize); Delegate to gVirtualX. void SetTextSizePixels(Int_t npixels); Delegate to gVirtualX. Int_t CreateDrawable(UInt_t w, UInt_t h); Create a gVirtualX Pixmap. void ClearDrawable(); Clear the current gVirtualX window. void CopyDrawable(Int_t id, Int_t px, Int_t py); Copy a gVirtualX pixmap. void DestroyDrawable(); Close the current gVirtualX pixmap. void SelectDrawable(Int_t device); Select the window in which the graphics will go. void DrawPixels(const unsigned char* pixelData, UInt_t width, UInt_t height, Int_t dstX, Int_t dstY, Bool_t enableAlphaBlending); Noop, for non-gl pad TASImage calls gVirtualX->CopyArea. void DrawLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2); Paint a simple line. void DrawLineNDC(Double_t u1, Double_t v1, Double_t u2, Double_t v2); Paint a simple line in normalized coordinates. void DrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2, TVirtualPadPainter::EBoxMode mode); Paint a simple box. void DrawFillArea(Int_t n, const Double_t* x, const Double_t* y); Paint filled area. void DrawFillArea(Int_t n, const Float_t* x, const Float_t* y); Paint filled area. void DrawPolyLine(Int_t n, const Double_t* x, const Double_t* y). void DrawPolyLine(Int_t n, const Float_t* x, const Float_t* y); Paint polyline. void DrawPolyLineNDC(Int_t n, const Double_t* u, const Double_t* v); Paint polyline in normalized coordinates. void DrawPolyMarker(Int_t n, const Double_t* x, const Double_t* y); Paint polymarker. void DrawPolyMarker(Int_t n, const Float_t* x, const Float_t* y); Paint polymarker. void DrawText(Double_t x, Double_t y, const char* text, TVirtualPadPainter::ETextMode mode); Paint text. void DrawText(Double_t x, Double_t y, const wchar_t* text, TVirtualPadPainter::ETextMode mode); That's a special version",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TPadPainter.html:5991,simpl,simple,5991,root/html602/TPadPainter.html,https://root.cern,https://root.cern/root/html602/TPadPainter.html,2,['simpl'],['simple']
Usability,"_t align); Delegate to gVirtualX. void SetTextAngle(Float_t tangle); Delegate to gVirtualX. void SetTextColor(Color_t tcolor); Delegate to gVirtualX. void SetTextFont(Font_t tfont); Delegate to gVirtualX. void SetTextSize(Float_t tsize); Delegate to gVirtualX. void SetTextSizePixels(Int_t npixels); Delegate to gVirtualX. Int_t CreateDrawable(UInt_t w, UInt_t h); Create a gVirtualX Pixmap. void ClearDrawable(); Clear the current gVirtualX window. void CopyDrawable(Int_t id, Int_t px, Int_t py); Copy a gVirtualX pixmap. void DestroyDrawable(); Close the current gVirtualX pixmap. void SelectDrawable(Int_t device); Select the window in which the graphics will go. void DrawPixels(const unsigned char* pixelData, UInt_t width, UInt_t height, Int_t dstX, Int_t dstY, Bool_t enableAlphaBlending); Noop, for non-gl pad TASImage calls gVirtualX->CopyArea. void DrawLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2); Paint a simple line. void DrawLineNDC(Double_t u1, Double_t v1, Double_t u2, Double_t v2); Paint a simple line in normalized coordinates. void DrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2, TVirtualPadPainter::EBoxMode mode); Paint a simple box. void DrawFillArea(Int_t n, const Double_t* x, const Double_t* y); Paint filled area. void DrawFillArea(Int_t n, const Float_t* x, const Float_t* y); Paint filled area. void DrawPolyLine(Int_t n, const Double_t* x, const Double_t* y); Paint Polyline. void DrawPolyLine(Int_t n, const Float_t* x, const Float_t* y); Paint polyline. void DrawPolyLineNDC(Int_t n, const Double_t* u, const Double_t* v); Paint polyline in normalized coordinates. void DrawPolyMarker(Int_t n, const Double_t* x, const Double_t* y); Paint polymarker. void DrawPolyMarker(Int_t n, const Float_t* x, const Float_t* y); Paint polymarker. void DrawText(Double_t x, Double_t y, const char* text, TVirtualPadPainter::ETextMode mode); Paint text. void DrawText(Double_t x, Double_t y, const wchar_t* text, TVirtualPadPainter::ETextMode mode); Special ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TPadPainter.html:5991,simpl,simple,5991,root/html604/TPadPainter.html,https://root.cern,https://root.cern/root/html604/TPadPainter.html,2,['simpl'],['simple']
Usability,"_t align=11)Set the text alignment.Definition TAttText.h:42; TBenchmark::GetBenchInt_t GetBench(const char *name) constReturns index of Benchmark name.Definition TBenchmark.cxx:106; TBenchmark::Startvirtual void Start(const char *name)Starts Benchmark with the specified name.Definition TBenchmark.cxx:172; TBenchmark::Showvirtual void Show(const char *name)Stops Benchmark name and Prints results.Definition TBenchmark.cxx:155; TCanvasThe Canvas class.Definition TCanvas.h:23; TF11-Dim function classDefinition TF1.h:233; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TH1::Fitvirtual TFitResultPtr Fit(const char *formula, Option_t *option="""", Option_t *goption="""", Double_t xmin=0, Double_t xmax=0)Fit histogram with function fname.Definition TH1.cxx:3898; TH1::GetFunctionvirtual TF1 * GetFunction(const char *name) constReturn pointer to function with name.Definition TH1.cxx:9051; TNtupleA simple TTree restricted to a list of float variables only.Definition TNtuple.h:28; TPadThe most important graphics class in the ROOT system.Definition TPad.h:28; TPad::SetGridvoid SetGrid(Int_t valuex=1, Int_t valuey=1) overrideDefinition TPad.h:335; TPad::SetLogyvoid SetLogy(Int_t value=1) overrideSet Lin/Log scale for Y.Definition TPad.cxx:6100; TPad::RedrawAxisvoid RedrawAxis(Option_t *option="""") overrideRedraw the frame axis.Definition TPad.cxx:5450; TPad::cdTVirtualPad * cd(Int_t subpadnumber=0) overrideSet Current pad.Definition TPad.cxx:693; TPad::GetFrameTFrame * GetFrame() overrideGet frame.Definition TPad.cxx:2955; TPad::Drawvoid Draw(Option_t *option="""") overrideDraw Pad in Current pad (re-parent pad if necessary).Definition TPad.cxx:1364; TPaveTextA Pave (see TPave) with text, lines or/and boxes inside.Definition TPaveText.h:21; TPaveText::AddTextvirtual TText * AddText(Double_t x1, Double_t y1, const char *label)Add a new Text line to this pavetext at given coordinates.Definition TPaveText.cx",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/ntuple1_8C.html:5919,simpl,simple,5919,doc/master/ntuple1_8C.html,https://root.cern,https://root.cern/doc/master/ntuple1_8C.html,1,['simpl'],['simple']
Usability,"_t bits); virtual voidTEveElement::Annihilate(); virtual voidTEveElement::AnnihilateElements(); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidCellSelectionChanged(); virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElement*TEveElement::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTEveElement::CopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); voidTEveElement::CSCApplyMainColorToAllChildren(); voidTEveElement::CSCApplyMainColorToMatchingChildren(); voidTEveElement::CSCApplyMainTransparencyToAllChildren(); voidTEveElement::CSCApplyMainTransparencyToMatchingChildren(); voidTEveElement::CSCImplySelectAllChildren(); voidTEveElement::CSCTakeAnyParentAs",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TEveCaloData.html:2142,Clear,ClearStamps,2142,root/html532/TEveCaloData.html,https://root.cern,https://root.cern/root/html532/TEveCaloData.html,4,['Clear'],['ClearStamps']
Usability,"_t bufsize = 32000, Int_t splitlevel = 99); TBranch*TTree::Branch<const char>(const char* name, const char* classname, const char* obj, Int_t bufsize = 32000, Int_t splitlevel = 99); TBranch*TTree::Branch<void>(const char* name, void* obj, Int_t bufsize = 32000, Int_t splitlevel = 99); virtual TBranch*TTree::BranchOld(const char* name, const char* classname, void* addobj, Int_t bufsize = 32000, Int_t splitlevel = 1); virtual TBranch*TTree::BranchRef(); virtual TBranch*TTree::Bronch(const char* name, const char* classname, void* addobj, Int_t bufsize = 32000, Int_t splitlevel = 99); virtual voidBrowse(TBrowser* b); virtual Int_tTTree::BuildIndex(const char* majorname, const char* minorname = ""0""); TStreamerInfo*TTree::BuildStreamerInfo(TClass* cl, void* pointer = 0, Bool_t canOptimize = kTRUE); virtual voidTChain::CanDeleteRefs(Bool_t flag = kTRUE); virtual TFile*TTree::ChangeFile(TFile* file); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual TTree*TTree::CloneTree(Long64_t nentries = -1, Option_t* option = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidConnectProof(); virtual voidTNamed::Copy(TObject& named) const; virtual voidTTree::CopyAddresses(TTree*, Bool_t undo = kFALSE); virtual Long64_tTTree::CopyEntries(TTree* tree, Long64_t nentries = -1, Option_t* option = """"); virtual TTree*TTree::CopyTree(const char* selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); virtual TBasket*TTree::CreateBasket(TBranch*); virtual voidTChain::CreatePackets(); Int_tDebug() const; virtual voidTTree::Delete(Option_t* option = """")MENU ; virtual voidTChain::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofChain.html:3230,Clear,Clear,3230,root/html602/TProofChain.html,https://root.cern,https://root.cern/root/html602/TProofChain.html,2,['Clear'],['Clear']
Usability,"_t clipInvalid = kFALSE) const; virtual RooAbsGenContext*RooAbsPdf::binnedGenContext(const RooArgSet& vars, Bool_t verbose = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; virtual voidchangeBasis(RooFormulaVar* basis); voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidcleanup(); virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual RooResolutionModel*convolution(RooFormulaVar* basis, RooAbsArg* owner) const; RooRealVar&convVar() const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooResolutionModel.html:4847,clear,clearEvalError,4847,root/html534/RooResolutionModel.html,https://root.cern,https://root.cern/root/html534/RooResolutionModel.html,4,['clear'],['clearEvalError']
Usability,"_t col_upb,; Int_t nr_nonzeros=-1); change matrix shape to; row_lwb:row_upb x col_lwb:col_upb. SetRowIndexArray (Int_t *data); for sparse matrices, set the row index. The array data should contains at leastfNrows+1 entries column lower-bound index. SetColIndexArray (Int_t *data); for sparse matrices, set the column index. The array data should contains at least fNelems entries. SetSparseIndex (Int_t nelems new); allocate memory for a sparse map of nelems_new elements and copy (if exists) at most nelems_new matrix elements over to the new structure. SetSparseIndex (const TMatrixDBase &a); copy the sparse map from matrix a Note that this can be a dense matrix!. SetSparseIndexAB (const TMatrixDSparse &a, const TMatrixDSparse &b); set the sparse map to the same of the map of matrix a and b. The second half of the table is only relevant for sparse matrices. These methods define the sparse structure. It should be clear that a call to any of these methods has to be followed by a SetMatrixArray (…) which will supply the matrix data, see the next chapter “Creating and Filling a Matrix”.; 14.3 Creating and Filling a Matrix; The matrix constructors are listed in the next table. In the simplest ones, only the number of rows and columns is given. In a slightly more elaborate version, one can define the row and column index range. Finally, one can also define the matrix data in the constructor. In Matrix Operators and Methods we will encounter more fancy constructors that will allow arithmetic operations. TMatrixD(Int_t nrows,Int_t ncols); TMatrixD(Int_t row_lwb,Int_t row_upb,Int_t col_lwb,Int_t col_upb); TMatrixD(Int_t nrows,Int_t ncols,const Double_t *data, Option_t option= """"); TMatrixD(Int_t row_lwb,Int_t row_upb,Int_t col_lwb,Int_t col_upb,; const Double_t *data,Option_t *option=""""). TMatrixDSym(Int_t nrows); TMatrixDSym(Int_t row_lwb,Int_t row_upb); TMatrixDSym(Int_t nrows,const Double_t *data,Option_t *option=""""); TMatrixDSym(Int_t row_lwb,Int_t row_upb,const Double_t *data",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:774768,clear,clear,774768,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['clear'],['clear']
Usability,"_t compress = 1); virtual~TDCacheFile(); voidTObject::AbstractMethod(const char* method) const; virtual voidTDirectoryFile::Add(TObject* obj, Bool_t replace = kFALSE); static voidTDirectory::AddDirectory(Bool_t add = kTRUE); static Bool_tTDirectory::AddDirectoryStatus(); virtual voidTDirectoryFile::Append(TObject* obj, Bool_t replace = kFALSE); virtual Int_tTDirectoryFile::AppendKey(TKey* key); virtual voidTObject::AppendPad(Option_t* option = """"); static TFileOpenHandle*TFile::AsyncOpen(const char* name, Option_t* option = """", const char* ftitle = """", Int_t compress = 1, Int_t netopt = 0); virtual voidTDirectoryFile::Browse(TBrowser* b); virtual voidTDirectoryFile::Build(TFile* motherFile = 0, TDirectory* motherDir = 0); virtual Bool_tTDirectoryFile::cd(const char* path = 0); static Bool_tTDirectory::Cd(const char* path); static Bool_tCheckFile(const char* path, const char* location = 0); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTDirectory::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual TObject*TDirectoryFile::CloneObject(const TObject* obj, Bool_t autoadd = kTRUE); virtual voidTFile::Close(Option_t* option = """")MENU ; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTFile::Copy(TObject&) const; virtual Bool_tTFile::Cp(const char* dst, Bool_t progressbar = kTRUE, UInt_t buffersize = 1000000); static Bool_tTFile::Cp(const char* src, const char* dst, Bool_t progressbar = kTRUE, UInt_t buffersize = 1000000); virtual TKey*TFile::CreateKey(TDirectory* mother, const TObject* obj, const char* name, Int_t bufsize); virtual TKey*TFile::CreateKey(TDirectory* mother, const void* obj, const TClass* cl, const char* name, Int_t bufsize); static TDirectory*&TDirectory::CurrentDirectory(); static TFile*&TFile::CurrentFile(); static voidTDirectory::DecodeNameCycle(const char* namecycle, char* name, Short_t& cycle); virtual voidTFile::Delete(const char* namecycle = """"); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TDCacheFile.html:1702,Clear,Clear,1702,root/html532/TDCacheFile.html,https://root.cern,https://root.cern/root/html532/TDCacheFile.html,1,['Clear'],['Clear']
Usability,"_t ctxt_cursor = strlen(context->GetName());; 1542 for (size_t level = 0; ctxt_cursor != 0; --ctxt_cursor) {; 1543 switch (context->GetName()[ctxt_cursor]) {; 1544 case '<': --level; break;; 1545 case '>': ++level; break;; 1546 case ':': if (level == 0) {; 1547 // we encountered a scope not within a template; 1548 // parameter.; 1549 alternate.clear();; 1550 alternate.append(context->GetName(),ctxt_cursor+1);; 1551 alternate.append(name);; 1552 altcl = TClass::GetClass(alternate.c_str(),/*load=*/ false,true);; 1553 if (altcl) {; 1554 newName.append(altcl->GetName());; 1555 newName.append(suffix);; 1556 return altcl;; 1557 }; 1558 }; 1559 }; 1560 }; 1561 newName.clear();; 1562 return 0;; 1563 }; 1564 ; 1565 TClass *FixCollectionV5(TClass *context, TClass *oldClass, TClass *newClass); 1566 {; 1567 assert(oldClass->GetCollectionProxy() && newClass->GetCollectionProxy());; 1568 ; 1569 TVirtualCollectionProxy *old = oldClass->GetCollectionProxy();; 1570 TVirtualCollectionProxy *current = newClass->GetCollectionProxy();; 1571 Int_t stlkind = old->GetCollectionType();; 1572 ; 1573 if (stlkind == ROOT::kSTLmap || stlkind == ROOT::kSTLmultimap) {; 1574 ; 1575 if (current->GetValueClass() == nullptr) {; 1576 // This should really never happen (the content of map should always; 1577 // be a pair and thus have a TClass ... so let's just give up ...; 1578 // It actually happens in the case where one of the member is an; 1579 // enum that is part of dictionary payload that is not yet; 1580 // auto-loaded.; 1581 return nullptr;; 1582 }; 1583 TVirtualStreamerInfo *info = current->GetValueClass()->GetStreamerInfo();; 1584 if (info->GetElements()->GetEntriesFast() != 2) {; 1585 return oldClass;; 1586 }; 1587 TStreamerElement *f = (TStreamerElement*) info->GetElements()->At(0);; 1588 TStreamerElement *s = (TStreamerElement*) info->GetElements()->At(1);; 1589 ; 1590 // Since we do not create TClass for pair of unknown types, old->GetValueClass can; 1591 // be nullptr even-though the ty",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html:59781,clear,clear,59781,doc/master/TStreamerInfo_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html,1,['clear'],['clear']
Usability,"_t dz, Double_t theta, Double_t phi, Double_t h1, Double_t bl1, Double_t tl1, Double_t alpha1, Double_t h2, Double_t bl2, Double_t tl2, Double_t alpha2); TGeoTrap(const char* name, Double_t dz, Double_t theta, Double_t phi, Double_t h1, Double_t bl1, Double_t tl1, Double_t alpha1, Double_t h2, Double_t bl2, Double_t tl2, Double_t alpha2); virtual~TGeoTrap(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGeoShape::AfterStreamer(); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTGeoBBox::AreOverlapping(const TGeoBBox* box1, const TGeoMatrix* mat1, const TGeoBBox* box2, const TGeoMatrix* mat2); static Double_tTGeoShape::Big(); virtual voidTObject::Browse(TBrowser* b); virtual Double_tTGeoArb8::Capacity() const; voidTGeoShape::CheckShape(Int_t testNo, Int_t nsamples = 10000, Option_t* option = """"); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTGeoShape::ClearThreadData() const; virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTGeoArb8::ComputeBBox(); static Double_tTGeoShape::ComputeEpsMch(); virtual voidTGeoArb8::ComputeNormal(const Double_t* point, const Double_t* dir, Double_t* norm); virtual voidTGeoArb8::ComputeNormal_v(const Double_t* points, const Double_t* dirs, Double_t* norms, Int_t vecsize); voidTGeoArb8::ComputeTwist(); virtual Bool_tTGeoArb8::Contains(const Double_t* point) const; virtual voidTGeoArb8::Contains_v(const Double_t* points, Bool_t* inside, Int_t vecsize) const; virtual voidTNamed::Copy(TObject& named) const; virtual Bool_tTGeoBBox::CouldBeCrossed(const Double_t* point, const Double_t* dir) const; virtual voidTGeoShape::CreateThreadData(Int_t); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTGeoBBox::DistancetoPrimitive(Int_t px, Int_t py); virtual Double_tDistFromInside(const Double_t* point, const Double_t* dir, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoTrap.html:2334,Clear,ClearThreadData,2334,root/html534/TGeoTrap.html,https://root.cern,https://root.cern/root/html534/TGeoTrap.html,1,['Clear'],['ClearThreadData']
Usability,"_t force = kFALSE); Interface function used by test statistics to freeze choice of range; for interpretation of conditional product terms. void fixRefRange(const char* rangeName). std::list<Double_t>* plotSamplingHint(RooAbsRealLValue& obs, Double_t xlo, Double_t xhi) const; Forward the plot sampling hint from the p.d.f. that defines the observable obs. Bool_t isBinnedDistribution(const RooArgSet& obs) const; If all components that depend on obs are binned that so is the product. std::list<Double_t>* binBoundaries(RooAbsRealLValue& , Double_t , Double_t ) const; Forward the plot sampling hint from the p.d.f. that defines the observable obs. void setCacheAndTrackHints(RooArgSet& ); Label OK'ed components of a RooProdPdf with cache-and-track, _and_ label all RooProdPdf; descendants with extra informationa about (conditional) normalization, needed to be able; to Cache-And-Track them outside the RooprodPdf context. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooProdPdf to more intuitively reflect the contents of the; product operator construction. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ); Implement support for node removal. TObject* clone(const char* newname) const; { return new RooProdPdf(*this,newname) ; }. Bool_t selfNormalized() const; { return _selfNorm ; }. Double_t expectedEvents(const RooArgSet* nset) const. const RooArgList& pdfList() const; { return _pdfList ; }. void setSelfNormalized(Bool_t flag); { _selfNorm = flag ; }. void setDefNormSet(const RooArgSet& nset); { _defNormSet.removeAll() ; _defNormSet.addClone(nset) ; }. CacheMode canNodeBeCached() const; { return RooAbsArg::NotAdvised ; }. void useDefaultGen(Bool_t flag = kTRUE); { _useDefaultGen = flag ; }. » Last changed: Tue Jun 2 15:33:05 2015 » Last generated: 2015-06-02 15:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooProdPdf.html:61060,intuit,intuitively,61060,root/html604/RooProdPdf.html,https://root.cern,https://root.cern/root/html604/RooProdPdf.html,2,['intuit'],['intuitively']
Usability,"_t frac); Change the size of the buffer on either side of the observable range to frac times the; size of the range of the convolution observable. void setBufferStrategy(RooFFTConvPdf::BufStrat bs); Change strategy to fill the overflow buffer on either side of the convolution observable range. 'Extend' means is that the input p.d.f convolution observable range is widened to include the buffer range; 'Flat' means that the buffer is filled with the p.d.f. value at the boundary of the observable range; 'Mirror' means that the buffer is filled with a ,irror image of the p.d.f. around the convolution observable boundary. The default strategy is extend. If one of the input p.d.f.s is a RooAddPdf, it is configured so that the interpretation; range of the fraction coefficients is kept at the nominal convolutions observable range (instead of interpreting coefficients; in the widened range including the buffer). void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooNumConvPdf to more intuitively reflect the contents of the; product operator construction. void calcParams(); (Re)calculate effective parameters of this p.d.f. Bool_t redirectServersHook(const RooAbsCollection& newServerList, Bool_t mustReplaceAll, Bool_t nameChange, Bool_t isRecursive); calcParams() ;. RooFFTConvPdf(); coverity[UNINIT_CTOR]. TObject* clone(const char* newname) const; { return new RooFFTConvPdf(*this,newname); }. void setShift(Double_t val1, Double_t val2); { _shift1 = val1 ; _shift2 = val2 ; }. void setCacheObservables(const RooArgSet& obs); { _cacheObs.removeAll() ; _cacheObs.add(obs) ; }. const RooArgSet& cacheObservables() const; { return _cacheObs ; }. Double_t bufferFraction() const; Return value of buffer fraction applied in FFT calculation array beyond either; end of the observable domain to reduce cyclical effects. BufStrat bufferStrategy() const; Return the strategy currently used to fill the buffer:; 'Extend' means is that the input p.d.f convolution observable r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooFFTConvPdf.html:51557,intuit,intuitively,51557,root/html528/RooFFTConvPdf.html,https://root.cern,https://root.cern/root/html528/RooFFTConvPdf.html,10,['intuit'],['intuitively']
Usability,"_t frac); Change the size of the buffer on either side of the observable range to frac times the; size of the range of the convolution observable. void setBufferStrategy(RooFFTConvPdf::BufStrat bs); Change strategy to fill the overflow buffer on either side of the convolution observable range. 'Extend' means is that the input p.d.f convolution observable range is widened to include the buffer range; 'Flat' means that the buffer is filled with the p.d.f. value at the boundary of the observable range; 'Mirror' means that the buffer is filled with a ,irror image of the p.d.f. around the convolution observable boundary. The default strategy is extend. If one of the input p.d.f.s is a RooAddPdf, it is configured so that the interpretation; range of the fraction coefficients is kept at the nominal convolutions observable range (instead of interpreting coefficients; in the widened range including the buffer). void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooNumConvPdf to more intuitively reflect the contents of the; product operator construction. void calcParams(); (Re)calculate effective parameters of this p.d.f. Bool_t redirectServersHook(const RooAbsCollection& newServerList, Bool_t mustReplaceAll, Bool_t nameChange, Bool_t isRecursive); calcParams() ;. RooFFTConvPdf(); {}. TObject* clone(const char* newname) const; { return new RooFFTConvPdf(*this,newname); }. void setShift(Double_t val1, Double_t val2); { _shift1 = val1 ; _shift2 = val2 ; }. void setCacheObservables(const RooArgSet& obs); { _cacheObs.removeAll() ; _cacheObs.add(obs) ; }. const RooArgSet& cacheObservables() const; { return _cacheObs ; }. Double_t bufferFraction() const; Return value of buffer fraction applied in FFT calculation array beyond either; end of the observable domain to reduce cyclical effects. BufStrat bufferStrategy() const; Return the strategy currently used to fill the buffer:; 'Extend' means is that the input p.d.f convolution observable range is widened to ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooFFTConvPdf.html:51016,intuit,intuitively,51016,root/html526/RooFFTConvPdf.html,https://root.cern,https://root.cern/root/html526/RooFFTConvPdf.html,1,['intuit'],['intuitively']
Usability,"_t length); char*GetWord(ULong_t pos); voidInsChar(ULong_t pos, char character); voidInsText(ULong_t pos, const char* text); virtual TClass*IsA() const; virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). protected:. TGTextLine(const TGTextLine&); TGTextLine&operator=(const TGTextLine&). Data Members; protected:. ULong_tfLengthlength of line; TGTextLine*fNextnext line; TGTextLine*fPrevprevious line; char*fStringline of text. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGTextLine(); Create empty line of text (default ctor). TGTextLine(TGTextLine* line); Initialize line of text with other line of text (not copy ctor). TGTextLine(const char* string); Initialize line of text with a const char*. TGTextLine(const TGTextLine& ); copy constructor. TGTextLine& operator=(const TGTextLine& ); assignment operator. ~TGTextLine(); Delete a line of text. void Clear(); Clear a line of text. void DelText(ULong_t pos, ULong_t length); Delete length chars from line starting at position pos. void InsText(ULong_t pos, const char* text); Insert text in line starting at position pos. char * GetText(ULong_t pos, ULong_t length); Get length characters from line starting at pos. Returns 0; in case pos and length are out of range. The returned string; must be freed by the user. char * GetWord(ULong_t pos); Get word at position. Returned string must be deleted. void DelChar(ULong_t pos); Delete a character from the line. void InsChar(ULong_t pos, char character); Insert a character at the specified position. char GetChar(ULong_t pos); Get a character at the specified position from the line.; Returns -1 if pos is out of range. ULong_t GetLineLength(); { return fLength; }. char * GetText(ULong_t pos, ULong_t length). » Author: Fons Rademakers 26/04/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-03-",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGTextLine.html:1830,Clear,Clear,1830,root/html534/TGTextLine.html,https://root.cern,https://root.cern/root/html534/TGTextLine.html,2,['Clear'],['Clear']
Usability,"_t nrows = 6, ncolumns = 5;; Double_t** data = new Double_t*[nrows];; for (i = 0; i < nrows; i++) {; data[i] = new Double_t[ncolumns];; for (j = 0; j < ncolumns; j++) {; data[i][j] = 10 * i + j;; }; }. // Create a main frame to contain the table; TGMainFrame* mainframe = new TGMainFrame(0, 400, 200);; mainframe->SetCleanup(kDeepCleanup) ;. // Create an interface; TGSimpleTableInterface *iface = new TGSimpleTableInterface(data, 6, 5); . // Create the table; TGTable *table = new TGTable(mainframe, 999, iface); . // Add the table to the main frame; mainframe->AddFrame(table, new TGLayoutHints(kLHintsExpandX | kLHintsExpandY));. //Update data; data[5][1] = 3.01; ; //update the table view; table->Update(); . // Layout and map the main frame; mainframe->SetWindowName(""Tree Table Test"") ;; mainframe->MapSubwindows() ;; mainframe->Layout();; mainframe->Resize() ;; mainframe->MapWindow() ;. return mainframe;; }; It is also possible to visualise data from a tree. A simple macro; showing the use of a TTreeTableInterface follows. Picture; Source. {; // Open a root file.; TFile *file = new TFile(""$ROOTSYS/tutorials/hsimple.root"");; // Load a tree from the file; TNtuple *ntuple = (TNtuple *)file.Get(""ntuple"");. // Create an interface; TTreeTableInterface *iface = new TTreeTableInterface(ntuple); . // Create a main frame to contain the table; TGMainFrame* mainframe = new TGMainFrame(0, 400, 200);; mainframe->SetCleanup(kDeepCleanup) ;. // Create the table; TGTable *table = new TGTable(mainframe, 999, iface, 10, 6); . // Add the table to the main frame; mainframe->AddFrame(table, new TGLayoutHints(kLHintsExpandX | kLHintsExpandY));. // Set a selection; iface->SetSelection(""px > 0."");; // Add a column; iface->AddColumn(""(px+py)/(px-py)"", 0);; //update the table view; table->Update(); . // Layout and map the main frame; mainframe->SetWindowName(""Tree Table Test"") ;; mainframe->MapSubwindows() ;; mainframe->Layout();; mainframe->Resize() ;; mainframe->MapWindow() ;. return mainframe;;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGTable.html:2621,simpl,simple,2621,root/html528/TGTable.html,https://root.cern,https://root.cern/root/html528/TGTable.html,8,['simpl'],['simple']
Usability,"_t onClient = kFALSE, TList* wrks = 0, Bool_t doCollect = kTRUE); static voidAddEnvVar(const char* name, const char* value); voidAddFeedback(const char* name); Int_tAddIncludePath(const char* incpath, Bool_t onClient = kFALSE, TList* wrks = 0, Bool_t doCollect = kTRUE); voidAddInput(TObject* obj); voidAddInputData(TObject* obj, Bool_t push = kFALSE); virtual voidTObject::AppendPad(Option_t* option = """"); Int_tArchive(Int_t query, const char* url); Int_tArchive(const char* queryref, const char* url = 0); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidBrowse(TBrowser* b); virtual Bool_tCancelStagingDataSet(const char* dataset); voidcd(Int_t id = -1); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; Int_tCleanupSession(const char* sessiontag); virtual voidTNamed::Clear(Option_t* option = """"); virtual voidClearCache(const char* file = 0); voidClearData(UInt_t what = kUnregistered, const char* dsname = 0); virtual voidClearDataSetCache(const char* dataset = 0); voidClearFeedback(); voidClearInput(); voidClearInputData(TObject* obj = 0); voidClearInputData(const char* name); Int_tClearPackage(const char* package); Int_tClearPackages(); virtual TObject*TNamed::Clone(const char* newname = """") const; voidClose(Option_t* option = """"); voidCloseProgressDialog()SIGNAL ; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTNamed::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* sl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProof.html:1970,Clear,Clear,1970,root/html534/TProof.html,https://root.cern,https://root.cern/root/html534/TProof.html,3,['Clear'],['Clear']
Usability,"_t rmin1, Double_t rmax1, Double_t rmin2, Double_t rmax2, Double_t phi1, Double_t phi2); TGeoConeSeg(const char* name, Double_t dz, Double_t rmin1, Double_t rmax1, Double_t rmin2, Double_t rmax2, Double_t phi1, Double_t phi2); virtual~TGeoConeSeg(); voidTObject::AbstractMethod(const char* method) const; virtual voidAfterStreamer(); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTGeoBBox::AreOverlapping(const TGeoBBox* box1, const TGeoMatrix* mat1, const TGeoBBox* box2, const TGeoMatrix* mat2); static Double_tTGeoShape::Big(); virtual voidTObject::Browse(TBrowser* b); virtual Double_tCapacity() const; static Double_tCapacity(Double_t dz, Double_t rmin1, Double_t rmax1, Double_t rmin2, Double_t rmax2, Double_t phi1, Double_t phi2); voidTGeoShape::CheckShape(Int_t testNo, Int_t nsamples = 10000, Option_t* option = """"); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTGeoShape::ClearThreadData() const; virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidComputeBBox(); static Double_tTGeoShape::ComputeEpsMch(); virtual voidComputeNormal(const Double_t* point, const Double_t* dir, Double_t* norm); virtual voidComputeNormal_v(const Double_t* points, const Double_t* dirs, Double_t* norms, Int_t vecsize); static voidComputeNormalS(const Double_t* point, const Double_t* dir, Double_t* norm, Double_t dz, Double_t rmin1, Double_t rmax1, Double_t rmin2, Double_t rmax2, Double_t c1, Double_t s1, Double_t c2, Double_t s2); virtual Bool_tContains(const Double_t* point) const; virtual voidContains_v(const Double_t* points, Bool_t* inside, Int_t vecsize) const; virtual voidTNamed::Copy(TObject& named) const; virtual Bool_tTGeoBBox::CouldBeCrossed(const Double_t* point, const Double_t* dir) const; virtual voidTGeoShape::CreateThreadData(Int_t); virtual voidTObject::Delete(Option_t* option = """")MENU ; vir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoConeSeg.html:1639,Clear,ClearThreadData,1639,root/html534/TGeoConeSeg.html,https://root.cern,https://root.cern/root/html534/TGeoConeSeg.html,1,['Clear'],['ClearThreadData']
Usability,"_t startz = 0)MENU ; voidRaytrace(Bool_t flag = kTRUE)TOGGLE GETTER ; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidRegisterYourself(Option_t* option = """"); voidRemoveNode(TGeoNode* node); TGeoNode*ReplaceNode(TGeoNode* nodeorig, TGeoShape* newshape = 0, TGeoMatrix* newpos = 0, TGeoMedium* newmed = 0); voidReplayCreation(const TGeoVolume* other); voidTGeoAtt::ResetAttBit(UInt_t f); virtual voidTAttFill::ResetAttFill(Option_t* option = """"); virtual voidTAttLine::ResetAttLine(Option_t* option = """"); voidTObject::ResetBit(UInt_t f); virtual voidSaveAs(const char* filename, Option_t* option = """") constMENU ; virtual voidTAttFill::SaveFillAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1001); virtual voidTAttLine::SaveLineAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1, Int_t widdef = 1); virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidSelectVolume(Bool_t clear = kFALSE); voidSetActiveDaughters(Bool_t flag = kTRUE); voidSetActivity(Bool_t flag = kTRUE); voidSetAdded(); voidSetAsTopVolume()TOGGLE GETTER ; voidTGeoAtt::SetAttBit(UInt_t f); voidTGeoAtt::SetAttBit(UInt_t f, Bool_t set); voidSetAttVisibility(Bool_t vis); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetCurrentPoint(Double_t x, Double_t y, Double_t z); voidSetCylVoxels(Bool_t flag = kTRUE); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetField(TObject* field); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillStyle(Style_t fstyle); voidSetFinder(TGeoPatternFinder* finder); voidSetInvisible(); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidSetLineColor(Color_t lcolor); virtual voidSetLineStyle(Style_t lstyle); virtual voidSetLineWidth(Width_t lwidth); virtual voidSetMedium(TGeoMedium* medium)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoVolume.html:16364,clear,clear,16364,root/html528/TGeoVolume.html,https://root.cern,https://root.cern/root/html528/TGeoVolume.html,4,['clear'],['clear']
Usability,"_t theta, Double_t phi); TGeoTrap(Double_t dz, Double_t theta, Double_t phi, Double_t h1, Double_t bl1, Double_t tl1, Double_t alpha1, Double_t h2, Double_t bl2, Double_t tl2, Double_t alpha2); TGeoTrap(const char* name, Double_t dz, Double_t theta, Double_t phi, Double_t h1, Double_t bl1, Double_t tl1, Double_t alpha1, Double_t h2, Double_t bl2, Double_t tl2, Double_t alpha2); virtual~TGeoTrap(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTGeoBBox::AreOverlapping(const TGeoBBox* box1, const TGeoMatrix* mat1, const TGeoBBox* box2, const TGeoMatrix* mat2); static Double_tTGeoShape::Big(); virtual voidTObject::Browse(TBrowser* b); virtual Double_tTGeoArb8::Capacity() const; voidTGeoShape::CheckShape(Int_t testNo, Int_t nsamples = 10000, Option_t* option = """"); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTGeoShape::ClearThreadData() const; virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTGeoArb8::ComputeBBox(); static Double_tTGeoShape::ComputeEpsMch(); virtual voidTGeoArb8::ComputeNormal(Double_t* point, Double_t* dir, Double_t* norm); voidTGeoArb8::ComputeTwist(); virtual Bool_tTGeoArb8::Contains(Double_t* point) const; virtual voidTNamed::Copy(TObject& named) const; virtual Bool_tTGeoBBox::CouldBeCrossed(Double_t* point, Double_t* dir) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTGeoBBox::DistancetoPrimitive(Int_t px, Int_t py); virtual Double_tDistFromInside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; virtual Double_tDistFromOutside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; static Double_tTGeoShape::DistToPhiMin(Double_t* point, Double_t* dir, Double_t s1, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoTrap.html:2294,Clear,ClearThreadData,2294,root/html532/TGeoTrap.html,https://root.cern,https://root.cern/root/html532/TGeoTrap.html,1,['Clear'],['ClearThreadData']
Usability,"_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); virtual voidConnectSignals2Slots(); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTGFrame::DoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; const TGResourcePool*TGFrame::GetResourcePool() const; virtual void*TGFrame::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidTObject::MakeZombie(); TGWindow&TGWindow::operator=(const TGWindow& tgw); Int_tTGWidget::SetFlags(Int_t flags); virtual voidTGFrame::StartGuiBuilding(Bool_t on = kTRUE). Data Members; public:. enum TGFrame::[unnamed] { kDeleteWindowCalled; };; enum TGWindow::EEditMode { kEditEnable; kEditDisable; kEditDisableEvents; kEditDisableGrab; kEditDisableLayout; kEditDisableResize; kEditDisableHeight; kEditDisableWidth; kEditDisableBtnEnable; kEditDisableKeyEnable; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoPconSection.html:15356,Clear,ClearFlags,15356,root/html532/TGeoPconSection.html,https://root.cern,https://root.cern/root/html532/TGeoPconSection.html,2,['Clear'],['ClearFlags']
Usability,"_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidcleanup(); virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual RooResolutionModel*convolution(RooFormulaVar* basis, RooAbsArg* owner) const; RooRealVar&convVar() const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooResolutionModel.html:4520,clear,clearValueAndShapeDirty,4520,root/html532/RooResolutionModel.html,https://root.cern,https://root.cern/root/html532/RooResolutionModel.html,2,['clear'],['clearValueAndShapeDirty']
Usability,"_t)""; ""SetFillColor(Color_t)"");. 1st parameter - the name of class; 2nd parameter - object; 3rd parameter - the name of do/redo method; 4th parameter - the name of undo method. Since redo,undo methods are the same, undo name can be omitted, e.g. TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");. For objects derived from TObject class name can be omitted, e.g. TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");. 2. Setting undo, redo parameters. Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);. 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values. Since the number of undo,redo parameters is the same one can use. com->SetArgs(1, new_color, old_color);. 3. Undo, redo method execution. com->Redo(); // execute redo method; com->Undo(); // execute undo method. 4. Merged commands. It possible to group several commands together so an end user; can undo and redo them with one command. TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);. 5. Macro commands. ""Merging"" allows to create macro commands, e.g. TQCommand *macro = new TQCommand(""my macro"");; macro->Add(com1);; macro->Add(com2);. During Redo operation commands composing macro command are executed; sequentially in direct order (first in first out). During Undo,; they are executed in reverse order (last in first out). 6. Undo manager. TQUndoManager is recorder of undo and redo operations. This is; command history list which can be traversed backwards and upwards; performing undo and redo operations.; To register command TQUndoManager::Add(TObject*) method is used. TQUndoManager *history = new TQUndoManager();; history->Add(com);. TQUndoManager::Add automatically invokes execution of command's; Redo method. Use TQUndoManager::Undo to undo commands in history list.; Redo is Undo for undo action. Use TQUndoManager::Redo method for that. Func",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TQCommand.html:2139,undo,undo,2139,root/html528/TQCommand.html,https://root.cern,https://root.cern/root/html528/TQCommand.html,20,['undo'],['undo']
Usability,"_t*fUndoArgsundo values; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TCollection::(anonymous)TCollection::kIsOwner. Class Charts. Inheritance Chart:. TObject. ←; TCollection. ←; TSeqCollection. ←; TList. TQObject. ←; TQCommand. ←. TQUndoManager. Function documentation; void Init(const char* cl, void* object, const char* redo, const char* undo); common protected method used in several constructors. TQCommand(const char* cl = 0, void* object = 0, const char* redo = 0, const char* undo = 0); Constructor. Input parameters:; 1. clname - class name.; 2. obj - an object; 3. redo - method or function to do/redo operation; 4. undo - method or function to undo operation. Comments:; - if either clname or obj is NULL that means that redo/undo is function; - to specify default arguments for redo/undo method/function; '=' must precede to argument value. Example:; TQCommand(""TPad"", gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");. - undo method can be same as redo one. In that case undo parameter; can be omitted. Example:; TQCommand(""TPad"", gPad, ""SetFillStyle(Style_t)"");. TQCommand(TObject* obj, const char* redo = 0, const char* undo = 0); Constructor. Input parameters:; 1. obj - an object; 2. redo - method or function to do/redo operation; 3. undo - method or function to undo operation. Comments:; - to specify default arguments for redo/undo method/function; '=' must precede to argument value. Example:; TQCommand(gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");. - undo method can be same as redo one. In that case ""undo""; can parameter be omitted. Example:; TQCommand(gPad, ""SetFillStyle(Style_t)"");. TQCommand(const TQCommand& com); Copy constructor. ~TQCommand(); dtor. TQCommand * GetCommand(); Return a command which is doing redo/undo action. This static method allows to set undo parameters dynamically, i.e.; during execution of Redo function. Example:; For redo actions like TGTextEdit::DelChar() it is not possible to; know",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TQCommand.html:19316,undo,undo,19316,root/html602/TQCommand.html,https://root.cern,https://root.cern/root/html602/TQCommand.html,4,['undo'],['undo']
Usability,"_t, DeepNet_t >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ Matrix_t. template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . using TMVA::DNN::TAdagrad< Architecture_t, Layer_t, DeepNet_t >::Matrix_t = typename Architecture_t::Matrix_t. Definition at line 47 of file Adagrad.h. ◆ Scalar_t. template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . using TMVA::DNN::TAdagrad< Architecture_t, Layer_t, DeepNet_t >::Scalar_t = typename Architecture_t::Scalar_t. Definition at line 48 of file Adagrad.h. Constructor & Destructor Documentation. ◆ TAdagrad(). template<typename Architecture_t , typename Layer_t , typename DeepNet_t > . TMVA::DNN::TAdagrad< Architecture_t, Layer_t, DeepNet_t >::TAdagrad ; (; DeepNet_t & ; deepNet, . Scalar_t ; learningRate = 0.01, . Scalar_t ; epsilon = 1e-8 . ). Constructor. ; Definition at line 90 of file Adagrad.h. ◆ ~TAdagrad(). template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . TMVA::DNN::TAdagrad< Architecture_t, Layer_t, DeepNet_t >::~TAdagrad ; (; ). default . Destructor. . Member Function Documentation. ◆ GetEpsilon(). template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . Scalar_t TMVA::DNN::TAdagrad< Architecture_t, Layer_t, DeepNet_t >::GetEpsilon ; (; ); const. inline . Getters. ; Definition at line 76 of file Adagrad.h. ◆ GetPastSquaredBiasGradients(). template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . std::vector< std::vector< Matrix_t > > & TMVA::DNN::TAdagrad< Architecture_t, Layer_t, DeepNet_t >::GetPastSquare",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TAdagrad.html:4589,learn,learningRate,4589,doc/master/classTMVA_1_1DNN_1_1TAdagrad.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TAdagrad.html,1,['learn'],['learningRate']
Usability,"_t, DeepNet_t >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ Matrix_t. template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . using TMVA::DNN::TRMSProp< Architecture_t, Layer_t, DeepNet_t >::Matrix_t = typename Architecture_t::Matrix_t. Definition at line 47 of file RMSProp.h. ◆ Scalar_t. template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . using TMVA::DNN::TRMSProp< Architecture_t, Layer_t, DeepNet_t >::Scalar_t = typename Architecture_t::Scalar_t. Definition at line 48 of file RMSProp.h. Constructor & Destructor Documentation. ◆ TRMSProp(). template<typename Architecture_t , typename Layer_t , typename DeepNet_t > . TMVA::DNN::TRMSProp< Architecture_t, Layer_t, DeepNet_t >::TRMSProp ; (; DeepNet_t & ; deepNet, . Scalar_t ; learningRate = 0.001, . Scalar_t ; momentum = 0.0, . Scalar_t ; rho = 0.9, . Scalar_t ; epsilon = 1e-7 . ). Constructor. ; Definition at line 107 of file RMSProp.h. ◆ ~TRMSProp(). template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . TMVA::DNN::TRMSProp< Architecture_t, Layer_t, DeepNet_t >::~TRMSProp ; (; ). default . Destructor. . Member Function Documentation. ◆ GetBiasUpdates(). template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . std::vector< std::vector< Matrix_t > > & TMVA::DNN::TRMSProp< Architecture_t, Layer_t, DeepNet_t >::GetBiasUpdates ; (; ). inline . Definition at line 98 of file RMSProp.h. ◆ GetBiasUpdatesAt(). template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . std::vector< Matrix_t > & TMVA::DNN::TRMSProp< ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TRMSProp.html:5612,learn,learningRate,5612,doc/master/classTMVA_1_1DNN_1_1TRMSProp.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TRMSProp.html,1,['learn'],['learningRate']
Usability,"_t>& Buffer). void ComputeDEDw(). void SimulateEvent(const TMVA::Event* ev). void SteepestDir(TMatrixD& Dir). Bool_t GetHessian(TMatrixD& Hessian, TMatrixD& Gamma, TMatrixD& Delta). void SetDir(TMatrixD& Hessian, TMatrixD& Dir). Double_t DerivDir(TMatrixD& Dir). Bool_t LineSearch(TMatrixD& Dir, vector<Double_t>& Buffer, Double_t* dError = 0). void SetDirWeights(vector<Double_t>& Origin, TMatrixD& Dir, Double_t alpha). Double_t GetError(). Double_t GetMSEErr(const TMVA::Event* ev, UInt_t index = 0). Double_t GetCEErr(const TMVA::Event* ev, UInt_t index = 0). void BackPropagationMinimize(Int_t nEpochs); minimize estimator / train network with backpropagation algorithm. void TrainOneEpoch(); train network over a single epoch/cyle of events. void Shuffle(Int_t* index, Int_t n); Input:; index: the array to shuffle; n: the size of the array; Output:; index: the shuffled indexes; This method is used for sequential training. void DecaySynapseWeights(Bool_t lateEpoch); decay synapse weights; in last 10 epochs, lower learning rate even more to find a good minimum. void TrainOneEventFast(Int_t ievt, Float_t*& branchVar, Int_t& type); fast per-event training. void TrainOneEvent(Int_t ievt); train network over a single event; this uses the new event model. Double_t GetDesiredOutput(const TMVA::Event* ev); get the desired output of this event. void UpdateNetwork(Double_t desired, Double_t eventWeight = 1.); update the network based on how closely; the output matched the desired output. void UpdateNetwork(const vector<Float_t>& desired, Double_t eventWeight = 1.); update the network based on how closely; the output matched the desired output. void CalculateNeuronDeltas(); have each neuron calculate its delta by backpropagation. void GeneticMinimize(); create genetics class similar to GeneticCut; give it vector of parameter ranges (parameters = weights); link fitness function of this class to ComputeEstimator; instantiate GA (see MethodCuts); run it; then this should exist for GA, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MethodMLP.html:28042,learn,learning,28042,root/html602/TMVA__MethodMLP.html,https://root.cern,https://root.cern/root/html602/TMVA__MethodMLP.html,4,['learn'],['learning']
Usability,"_t>& Buffer). void ComputeDEDw(). void SimulateEvent(const TMVA::Event* ev). void SteepestDir(TMatrixD& Dir). Bool_t GetHessian(TMatrixD& Hessian, TMatrixD& Gamma, TMatrixD& Delta). void SetDir(TMatrixD& Hessian, TMatrixD& Dir). Double_t DerivDir(TMatrixD& Dir). Bool_t LineSearch(TMatrixD& Dir, vector<Double_t>& Buffer, Double_t* dError = 0). void SetDirWeights(vector<Double_t>& Origin, TMatrixD& Dir, Double_t alpha). Double_t GetError(). Double_t GetMSEErr(const TMVA::Event* ev, UInt_t index = 0). Double_t GetCEErr(const TMVA::Event* ev, UInt_t index = 0). void BackPropagationMinimize(Int_t nEpochs); minimize estimator / train network with backpropagation algorithm. void TrainOneEpoch(); train network over a single epoch/cyle of events. void Shuffle(Int_t* index, Int_t n); Input:; index: the array to shuffle; n: the size of the array; Output:; index: the shuffled indexes; This method is used for sequential training. void DecaySynapseWeights(Bool_t lateEpoch); decay synapse weights; in last 10 epochs, lower learning rate even more to find a good minimum. void TrainOneEventFast(Int_t ievt, Float_t*& branchVar, Int_t& type); fast per-event training. void TrainOneEvent(Int_t ievt); train network over a single event; this uses the new event model. Double_t GetDesiredOutput(const TMVA::Event* ev); get the desired output of this event. void UpdateNetwork(Double_t desired, Double_t eventWeight = 1.0); update the network based on how closely; the output matched the desired output. void UpdateNetwork(const vector<Float_t>& desired, Double_t eventWeight = 1.0); update the network based on how closely; the output matched the desired output. void CalculateNeuronDeltas(); have each neuron calculate its delta by backpropagation. void GeneticMinimize(); create genetics class similar to GeneticCut; give it vector of parameter ranges (parameters = weights); link fitness function of this class to ComputeEstimator; instantiate GA (see MethodCuts); run it; then this should exist for GA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__MethodMLP.html:25345,learn,learning,25345,root/html534/TMVA__MethodMLP.html,https://root.cern,https://root.cern/root/html534/TMVA__MethodMLP.html,2,['learn'],['learning']
Usability,"_t>& Buffer). void ComputeDEDw(). void SimulateEvent(const TMVA::Event* ev). void SteepestDir(TMatrixD& Dir). Bool_t GetHessian(TMatrixD& Hessian, TMatrixD& Gamma, TMatrixD& Delta). void SetDir(TMatrixD& Hessian, TMatrixD& Dir). Double_t DerivDir(TMatrixD& Dir). Bool_t LineSearch(TMatrixD& Dir, vector<Double_t>& Buffer, Double_t* dError = 0). void SetDirWeights(vector<Double_t>& Origin, TMatrixD& Dir, Double_t alpha). Double_t GetError(). Double_t GetMSEErr(const TMVA::Event* ev, UInt_t index = 0). Double_t GetCEErr(const TMVA::Event* ev, UInt_t index = 0). void BackPropagationMinimize(Int_t nEpochs); minimize estimator / train network with backpropagation algorithm. void TrainOneEpoch(); train network over a single epoch/cyle of events. void Shuffle(Int_t* index, Int_t n); Input:; index: the array to shuffle; n: the size of the array; Output:; index: the shuffled indexes; This method is used for sequential training. void DecaySynapseWeights(Bool_t lateEpoch); decay synapse weights; in last 10 epochs, lower learning rate even more to find a good minimum. void TrainOneEventFast(Int_t ievt, Float_t*& branchVar, Int_t& type); fast per-event training. void TrainOneEvent(Int_t ievt); train network over a single event; this uses the new event model. Double_t GetDesiredOutput(const TMVA::Event* ev); get the desired output of this event. void UpdateNetwork(Double_t desired, Double_t eventWeight = 1.0); update the network based on how closely; the output matched the desired output. void UpdateNetwork(vector<Float_t>& desired, Double_t eventWeight = 1.0); update the network based on how closely; the output matched the desired output. void CalculateNeuronDeltas(); have each neuron calculate its delta by backpropagation. void GeneticMinimize(); create genetics class similar to GeneticCut; give it vector of parameter ranges (parameters = weights); link fitness function of this class to ComputeEstimator; instantiate GA (see MethodCuts); run it; then this should exist for GA, Minu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodMLP.html:24444,learn,learning,24444,root/html528/TMVA__MethodMLP.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodMLP.html,4,['learn'],['learning']
Usability,"_tActivateWorker(const char* ord); voidAddChain(TChain* chain); Int_tAddDynamicPath(const char* libpath, Bool_t onClient = kFALSE, TList* wrks = 0); static voidAddEnvVar(const char* name, const char* value); voidAddFeedback(const char* name); Int_tAddIncludePath(const char* incpath, Bool_t onClient = kFALSE, TList* wrks = 0); voidAddInput(TObject* obj); voidAddInputData(TObject* obj, Bool_t push = kFALSE); virtual voidTObject::AppendPad(Option_t* option = """"); Int_tArchive(Int_t query, const char* url); Int_tArchive(const char* queryref, const char* url = 0); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidBrowse(TBrowser* b); voidcd(Int_t id = -1); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; Int_tCleanupSession(const char* sessiontag); virtual voidTNamed::Clear(Option_t* option = """"); virtual voidClearCache(const char* file = 0); voidClearData(UInt_t what = kUnregistered, const char* dsname = 0); virtual voidClearDataSetCache(const char* dataset = 0); voidClearFeedback(); voidClearInput(); voidClearInputData(TObject* obj = 0); voidClearInputData(const char* name); Int_tClearPackage(const char* package); Int_tClearPackages(); virtual TObject*TNamed::Clone(const char* newname = """") const; voidClose(Option_t* option = """"); voidCloseProgressDialog()SIGNAL ; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTNamed::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* sl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TProof.html:1840,Clear,Clear,1840,root/html532/TProof.html,https://root.cern,https://root.cern/root/html532/TProof.html,1,['Clear'],['Clear']
Usability,"_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoTrd2Editor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for trd2 editor. ~TGeoTrd2Editor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the selected object. Bool_t IsDelayed() const; Check if shape drawing is delayed. void DoName(); Perform name change. void DoApply(); Slot for applying modifications. void DoModified(); Slot for signaling modifications. void DoUndo(); Slot for undoing last operation. void DoDx1(); Slot for dx1. void DoDx2(); Slot for dx2. void DoDy1(); Slot for dy1. void DoDy2(); Slot for dy2. void DoDz(); Slot for dz. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id$ » Last generated: 2015-03-14 16:40; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoTrd2Editor.html:21370,undo,undoing,21370,root/html534/TGeoTrd2Editor.html,https://root.cern,https://root.cern/root/html534/TGeoTrd2Editor.html,2,['undo'],['undoing']
Usability,"_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. private:. TGTextButton*fAddButtonAdd >> button; TGCheckButton*fAppendFilesappend files; TGTextButton*fBrowseButtonBrowse... button; TGTextButton*fClearButtonClear button; TGTextButton*fCloseDlgButtonClose Dialog button; TGTextEntry*fDSetNamedataset name text entry; TGTextEntry*fDestinationURLdestination URL text entry; TGLVContainer*fLVContainerand its container; TGListView*fListViewdataset files list view; TGTextEntry*fLocationURLlocation URL text entry; TGCheckButton*fOverwriteDSetoverwrite DataSet; TGCheckButton*fOverwriteFilesoverwrite All Files; TGTextButton*fRemoveButtonRemove button; TList*fSkippedFilesList of skipped files; TGTextButton*fUploadButtonUpload button; Bool_tfUploading; TSessionViewer*fViewerpointer on main viewer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2). void CloseWindow(). TUploadDataSetDlg(TSessionViewer* gui, Int_t w, Int_t h). virtual ~TUploadDataSetDlg(). void AddFiles(const char* fileName). void AddFiles(TList* fileList). void BrowseFiles(). void ClearFiles(). void RemoveFile(). void UploadDataSet(). void OnOverwriteDataset(Bool_t on). void OnOverwriteFiles(Bool_t on). void OnAppendFiles(Bool_t on). » Author: Marek Biskup, Jakub Madejczyk, Bertrand Bellenot 10/08/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id: TSessionDialogs.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TUploadDataSetDlg.html:23103,Clear,ClearFiles,23103,root/html532/TUploadDataSetDlg.html,https://root.cern,https://root.cern/root/html532/TUploadDataSetDlg.html,1,['Clear'],['ClearFiles']
Usability,"_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static TGGC*TGContainer::fgLineGC; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. private:. Cursor_tfCursorcurrent cursor; Cursor_tfDefaultCursordefault cursor; TList*fExpressionListlist of user defined expression widgets; TGListView*fListViewassociated list view; TTreeViewer*fViewerpointer to tree viewer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TTVLVContainer(const TGWindow* p, UInt_t w, UInt_t h, UInt_t options = kSunkenFrame); TGLVContainer constructor. ~TTVLVContainer(); TGLVContainer destructor. const char* Cut(); return the cut entry. TTVLVEntry * ExpressionItem(Int_t index); return the expression item at specific position. TList* ExpressionList(); return the list of user-defined expressions. const char* Ex(); return the expression on X. const char* Ey(); return the expression on Y. const char* Ez(); return the expression on Z. const char* ScanList(); return the cut entry. Bool_t HandleButton(Event_t* event); Handle mouse button event in container. Bool_t HandleMotion(Event_t* event); Handle mouse motion events. void EmptyAll(); Clear all names and aliases for expression type items. void RemoveNonStatic(); remove all non-static items from the list view, except expressions. void SelectItem(const char* name); select an item. void AddThisItem(TTVLVEntry* item); { AddFrame(item, fItemLayout); item->SetColumns(fCpos, fJmode); }. TTreeViewer * GetViewer(); {return fViewer;}. void SetListView(TGListView* lv); {fListView = lv;}. void SetViewer(TTreeViewer* viewer); {fViewer = viewer;}. » Last changed: root/treeviewer:$Id: TTVLVContainer.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TTVLVContainer.html:26076,Clear,Clear,26076,root/html532/TTVLVContainer.html,https://root.cern,https://root.cern/root/html532/TTVLVContainer.html,1,['Clear'],['Clear']
Usability,"_tTProof::Archive(Int_t query, const char* url); Int_tTProof::Archive(const char* queryref, const char* url = 0); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTProof::Browse(TBrowser* b); virtual Bool_tCancelStagingDataSet(const char* dataset); voidTProof::cd(Int_t id = -1); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; Int_tTProof::CleanupSession(const char* sessiontag); virtual voidTNamed::Clear(Option_t* option = """"); virtual voidClearCache(const char* file = 0); voidTProof::ClearData(UInt_t what = kUnregistered, const char* dsname = 0); virtual voidClearDataSetCache(const char* dataset = 0); voidTProof::ClearFeedback(); voidTProof::ClearInput(); voidTProof::ClearInputData(TObject* obj = 0); voidTProof::ClearInputData(const char* name); Int_tTProof::ClearPackage(const char* package); Int_tTProof::ClearPackages(); virtual TObject*TNamed::Clone(const char* newname = """") const; voidTProof::Close(Option_t* option = """"); voidTProof::CloseProgressDialog()SIGNAL ; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTNamed::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidTNamed::Copy(TObject& named) const; TDrawFeedback*TProof::CreateDrawFeedback(); voidTProof::DataSetStatus(const char* msg, Bool_t status, Int_t done, Int_t total)SIGNAL ; Int_tTProof::DeactivateWorker(const char* ord, Bool_t save = kTRUE",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofLite.html:2442,Clear,ClearPackage,2442,root/html534/TProofLite.html,https://root.cern,https://root.cern/root/html534/TProofLite.html,3,['Clear'],['ClearPackage']
Usability,"_tTQObject::AreSignalsBlocked() const; Float_t*TAttBBox::AssertBBox(); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); Float_tTEveLine::CalculateLineLength() const; virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidTPointSet3D::ClearIds(); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEvePointSet*TEvePointSet::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEvePointSet::ClonePoints(const TEvePointSet& e); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidComputeBBox(); Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveTrack.html:2916,Clear,Clear,2916,root/html534/TEveTrack.html,https://root.cern,https://root.cern/root/html534/TEveTrack.html,3,['Clear'],['Clear']
Usability,"_tTQObject::AreSignalsBlocked() const; Float_t*TAttBBox::AssertBBox(); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); Float_tTEveLine::CalculateLineLength() const; virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidTPointSet3D::ClearIds(); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEvePointSet*TEvePointSet::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEvePointSet::ClonePoints(const TEvePointSet& e); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTEveTrack::ComputeBBox(); Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveTrackProjected.html:2565,Clear,Clear,2565,root/html534/TEveTrackProjected.html,https://root.cern,https://root.cern/root/html534/TEveTrackProjected.html,3,['Clear'],['Clear']
Usability,"_tTQObject::AreSignalsBlocked() const; Float_t*TAttBBox::AssertBBox(); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); Float_tTEveLine::CalculateLineLength() const; virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidTPointSet3D::ClearIds(); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEvePointSet*TEvePointSet::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEvePointSet::ClonePoints(const TEvePointSet& e); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTPointSet3D::ComputeBBox(); Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveLineProjected.html:2453,Clear,Clear,2453,root/html534/TEveLineProjected.html,https://root.cern,https://root.cern/root/html534/TEveLineProjected.html,3,['Clear'],['Clear']
Usability,"_tTSelector::fStatusSelector status; TTree*fTree; TTreeDrawArgsParserfTreeDrawArgsParser; TTreeFormula*fVar[4]Pointer to variable formula; Double_tfWeightGlobal weight for fill actions; static TProofDraw::(anonymous)kWarn. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofDraw(); Constructor. ~TProofDraw(); Destructor. void Init(TTree* ); Init the tree. Bool_t Notify(); Called when a new tree is loaded. void Begin(TTree* ); Executed by the client before processing. void SlaveBegin(TTree* ); Executed by each slave before processing. void FillWeight(); Get weight from input list, if any. Bool_t ProcessSingle(Long64_t , Int_t ); Processes a single variable from an entry. Bool_t Process(Long64_t ); Executed for each entry. void SlaveTerminate(void); Executed by each slave after the processing has finished,; before returning the results to the client. void Terminate(void); Executed by the client after getting the processing retults. void ClearFormula(); Delete internal buffers. void SetCanvas(const char* objname); Move to a canvas named <name>_canvas; create the canvas if not existing.; Used to avoid screwing up existing plots when non default names are used; for the final objects. void SetDrawAtt(TObject* o); Set the drawing attributes from the input list. void SetError(const char* sub, const char* mesg); Sets the error status. Bool_t CompileVariables(); Compiles each variable from fTreeDrawArgsParser for the tree fTree.; Return kFALSE if any of the variable is not compilable. void DoFill(Long64_t entry, Double_t w, const Double_t* v). void DefVar(). TProofDraw(). int Version() const; { return 1; }. » Author: Maarten Ballintijn 24/09/2003 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; » Last changed: root/proofplayer:$Id$ » Last generated: 2015-06-03 17:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TProofDraw.html:8842,Clear,ClearFormula,8842,root/html604/TProofDraw.html,https://root.cern,https://root.cern/root/html604/TProofDraw.html,1,['Clear'],['ClearFormula']
Usability,"_tTSelector::fStatusSelector status; TTree*fTree; TTreeDrawArgsParserfTreeDrawArgsParser; TTreeFormula*fVar[4]Pointer to variable formula; Double_tfWeightGlobal weight for fill actions; static TProofDraw::(anonymous)kWarn. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofDraw(); Constructor. ~TProofDraw(); Destructor. void Init(TTree* ); Init the tree. Bool_t Notify(); Called when a new tree is loaded. void Begin(TTree* ); Executed by the client before processing. void SlaveBegin(TTree* ); Executed by each slave before processing. void FillWeight(); Get weight from input list, if any. Bool_t ProcessSingle(Long64_t , Int_t ); Processes a single variable from an entry. Bool_t Process(Long64_t ); Executed for each entry. void SlaveTerminate(void); Executed by each slave after the processing has finished,; before returning the results to the client. void Terminate(void); Executed by the client after getting the processing retults. void ClearFormula(); Delete internal buffers. void SetCanvas(const char* objname); Move to a canvas named <name>_canvas; create the canvas if not existing.; Used to avoid screwing up existing plots when non default names are used; for the final objects. void SetDrawAtt(TObject* o); Set the drawing attributes from the input list. void SetError(const char* sub, const char* mesg); Sets the error status. Bool_t CompileVariables(); Compiles each variable from fTreeDrawArgsParser for the tree fTree.; Return kFALSE if any of the variable is not compilable. void DoFill(Long64_t entry, Double_t w, const Double_t* v). void DefVar(). TProofDraw(). int Version() const; { return 1; }. » Author: Maarten Ballintijn 24/09/2003 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; » Last changed: root/proofplayer:$Id$ » Last generated: 2015-06-30 15:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofDraw.html:8842,Clear,ClearFormula,8842,root/html602/TProofDraw.html,https://root.cern,https://root.cern/root/html602/TProofDraw.html,1,['Clear'],['ClearFormula']
Usability,"_t_shapeDirtyFlag set if value needs recalculating because input shapes modified; map<std::string,std::string>_stringAttribString attributes; Bool_t_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_t_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bool_t inhibitDirty(); { return _inhibitDirty ; }. ~RooAbsArg(); Destructor. void setDirtyInhibit(Bool_t flag); Control global dirty inhibit mode. When set to true no value or shape dirty; flags are propagated and cache is always considered to be dirty. void verboseDirty(Bool_t flag); Activate verbose messaging related to dirty flag propagation. Bool_t isCloneOf(const RooAbsArg& other) const; Check if this object was created as a clone of 'other'. void setAttribute(const Text_t* name, Bool_t value = kTRUE); Set (default) or clear a named boolean attribute of this object. Bool_t getAttribute(const Text_t* name) const; Check if a named attribute is set. By default, all attributes are unset. void setStringAttribute(const Text_t* key, const Text_t* value); Associate string 'value' to this object under key 'key'. const Text_t* getStringAttribute(const Text_t* key) const; Get string attribute mapped under key 'key'. Returns null pointer; if no attribute exists under that key. void setTransientAttribute(const Text_t* name, Bool_t value = kTRUE); Set (default) or clear a named boolean attribute of this object. Bool_t getTransientAttribute(const Text_t* name) const; Check if a named attribute is set. By default, all attributes; are unset. void addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); Register another RooAbsArg as a server to us, ie, declare that; we depend on it. In addition to the basic client-server relationship,; we can declare dependence on the server's",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsArg.html:18534,clear,clear,18534,root/html532/RooAbsArg.html,https://root.cern,https://root.cern/root/html532/RooAbsArg.html,1,['clear'],['clear']
Usability,"_tag = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; Float_t*TAttBBox::AssertBBox(); TEveRGBAPalette*TEveDigitSet::AssertPalette(); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElement*TEveElement::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidComputeBBox(); Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TEveBoxSet.html:3440,Clear,Clear,3440,root/html532/TEveBoxSet.html,https://root.cern,https://root.cern/root/html532/TEveBoxSet.html,8,['Clear'],['Clear']
Usability,"_tfNReadPrefNumber of blocks that were prefetched; Int_tTFileCacheRead::fNbNumber of long buffers; Int_tfNbranches! Number of branches in the cache; Int_tTFileCacheRead::fNseekNumber of blocks to be prefetched; Int_tTFileCacheRead::fNtotTotal size of prefetched blocks; Bool_tfOneTime! used in the learning phase ; TTree*fOwner! pointer to the owner Tree/chain; Long64_t*TFileCacheRead::fPos[fNb] start of long buffers; TFilePrefetch*TFileCacheRead::fPrefetch!Object that does the asynchronous reading in another thread; Long64_tTFileCacheRead::fPrefetchedBlocksNumber of blocks prefetched.; Bool_tfReadDirectionSet! read direction established; Bool_tfReverseRead! reading in reverse mode ; Long64_t*TFileCacheRead::fSeek[fNseek] Position on file of buffers to be prefetched; Int_t*TFileCacheRead::fSeekIndex[fNseek] sorted index table of fSeek; Int_t*TFileCacheRead::fSeekLen[fNseek] Length of buffers to be prefetched; Int_t*TFileCacheRead::fSeekPos[fNseek] Position of sorted blocks in fBuffer; Int_tTFileCacheRead::fSeekSizeAllocated size of fSeek; Long64_t*TFileCacheRead::fSeekSort[fNseek] Position on file of buffers to be prefetched (sorted); Int_t*TFileCacheRead::fSeekSortLen[fNseek] Length of buffers to be prefetched (sorted); TTree*fTree! pointer to the current Tree; Long64_tfZipBytes! Total compressed size of branches in cache; static Int_tfgLearnEntriesnumber of entries used for learning mode. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TTreeCache(); Default Constructor. TTreeCache(TTree* tree, Int_t buffersize = 0); Constructor. ~TTreeCache(); destructor. (in general called by the TFile destructor. void AddBranch(TBranch* b, Bool_t subbranches = kFALSE); add a branch to the list of branches to be stored in the cache; this function is called by TBranch::GetBasket. void AddBranch(const char* branch, Bool_t subbranches = kFALSE); Add a branch to the list of branches to be stored in the cache; this is to be used by user (thats w",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TTreeCache.html:18969,learn,learning,18969,root/html530/TTreeCache.html,https://root.cern,https://root.cern/root/html530/TTreeCache.html,1,['learn'],['learning']
Usability,"_t CanUndo () const;  Returns kTRUE if Undo action is possible, kFALSE if it's not. ;  ; virtual void Compress (TQCommand *c);  Compress command. ;  ; void Delete (Option_t *option="""") override;  If ""opt"" is not zero delete every merged command which option string is equal to ""opt"". ;  ; const char * GetName () const override;  Returns the command name. ;  ; Int_t GetNRargs () const;  Returns a number of redo arguments. ;  ; Int_t GetNUargs () const;  Returns a number of undo arguments. ;  ; void * GetObject () const;  Returns an object for which undo redo actions are applied. ;  ; TQConnection * GetRedo () const;  ; Long_t * GetRedoArgs () const;  Returns a pointer to array of redo arguments. ;  ; const char * GetRedoName () const;  Returns the name of redo command. ;  ; Int_t GetStatus () const;  Returns a number of sequential undo or redo operations. ;  ; const char * GetTitle () const override;  Returns command description. ;  ; TQConnection * GetUndo () const;  ; Long_t * GetUndoArgs () const;  Returns a pointer to array of undo arguments. ;  ; const char * GetUndoName () const;  Returns the name of undo command. ;  ; TClass * IsA () const override;  ; Bool_t IsEqual (const TObject *obj) const override;  Equal comparison. ;  ; Bool_t IsExecuting () const;  Returns kTRUE if command execution is in progress. ;  ; Bool_t IsMacro () const;  Returns kTRUE if neither redo nor undo action specified. ;  ; Bool_t IsRedoing () const;  Redo action is in progress. ;  ; virtual Bool_t IsSetter () const;  Returns kTRUE is command if Redo is the same as Undo function and is the setter action. ;  ; Bool_t IsUndoing () const;  Undo action is in progress. ;  ; void ls (Option_t *option="""") const override;  ls this command and merged commands ;  ; virtual Long64_t Merge (TCollection *, TFileMergeInfo *);  Merge a collection of TQCommand. ;  ; virtual void Merge (TQCommand *c);  Add command to the list of merged commands. ;  ; virtual void Redo (Option_t *option="""");  Execute comma",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQCommand.html:6571,undo,undo,6571,doc/master/classTQCommand.html,https://root.cern,https://root.cern/doc/master/classTQCommand.html,1,['undo'],['undo']
Usability,"_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  . Protected Attributes; TGSplitFrame * fFirst;  Pointer to the first child (if any) ;  ; TGFrame * fFrame;  Pointer to the embedded frame (if any) ;  ; Float_t fHRatio;  Height ratio between the first child and this. ;  ; TGSplitFrame * fSecond;  Pointer to the second child (if any) ;  ; TGSplitter * fSplitter;  Pointer to the (H/V) Splitter (if any) ;  ; TGSplitTool * fSplitTool;  SplitFrame Tool. ;  ; TGTransientFrame * fUndocked;  Main frame used when ""undocking"" frame. ;  ; Float_t fWRatio;  Width ratio between the first child and this. ;  ;  Protected Attributes inherited from TGCompositeFrame; Bool_t fLayoutBroken;  no layout manager is used ;  ; TGLayoutManager * fLayoutManager;  layout manager ;  ; TList * fList;  container of frame elements ;  ; Bool_t fMapSubwindows;  kTRUE - map subwindows ;  ; Int_t fMustCleanup;  cleanup mode (see EFrameCleanup) ;  ;  Protected Attributes inherited from TGFrame; Pixel_t fBackground;  frame background color ;  ; Int_t fBorderWidth;  frame border width ;  ; Int_t fDNDState;  EDNDFlags. ;  ; UInt_t fEventMask;  currently active event mask ;  ; TGFrameElement * fFE;  pointer to frame element ;  ; UInt_t fHeight;  frame height ;  ; UInt_t fMaxHeight;  maximal frame height ;  ; UInt_t fMaxWidth;  maximal frame width ;  ; UInt_t fMinHeight;  minimal frame height ;  ; UInt_t fMinWidth;  minimal frame width ;  ; UInt_t fOptions;  frame options ;  ; UInt_t fWidth;  frame width ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGSplitFrame.html:26900,undo,undocking,26900,doc/master/classTGSplitFrame.html,https://root.cern,https://root.cern/doc/master/classTGSplitFrame.html,1,['undo'],['undocking']
Usability,"_t Echo (const char *str);  Sends a string to master and workers and expect them to echo it back to the client via a message. ;  ; virtual Int_t Echo (const TObject *obj);  Sends an object to master and workers and expect them to send back a message with the output of its TObject::Print(). ;  ; Int_t EnablePackage (const char *package, Bool_t notOnClient=kFALSE, TList *workers=0);  Enable specified package. ;  ; Int_t EnablePackage (const char *package, const char *loadopts, Bool_t notOnClient=kFALSE, TList *workers=0);  Enable specified package. ;  ; Int_t EnablePackage (const char *package, TList *loadopts, Bool_t notOnClient=kFALSE, TList *workers=0);  Enable specified package. ;  ; Int_t Exec (const char *cmd, Bool_t plusMaster=kFALSE);  Send command to be executed on the PROOF master and/or slaves. ;  ; Int_t Exec (const char *cmd, const char *ord, Bool_t logtomacro=kFALSE);  Send command to be executed on node of ordinal 'ord' (use ""0"" for master). ;  ; void Feedback (TList *objs);  Get list of feedback objects. ;  ; Long64_t Finalize (const char *queryref, Bool_t force=kFALSE);  Finalize query with reference ref. ;  ; Long64_t Finalize (Int_t query=-1, Bool_t force=kFALSE);  Finalize the qry-th query in fQueries. ;  ; TList * FindDataSets (const char *searchString, const char *optStr="""");  Find datasets, returns in a TList all found datasets. ;  ; Long64_t GetBytesRead () const;  ; Int_t GetClientProtocol () const;  ; const char * GetConfDir () const;  ; const char * GetConfFile () const;  ; Float_t GetCpuTime () const;  ; const char * GetDataPoolUrl () const;  ; TMap * GetDataSetQuota (const char *optStr="""");  returns a map of the quotas of all groups ;  ; TString Getenv (const char *env, const char *ord=""0"");  Get value of environment variable 'env' on node 'ord'. ;  ; TList * GetFeedbackList () const;  Return feedback list. ;  ; const char * GetGroup () const;  ; const char * GetImage () const;  ; TList * GetInputList ();  Get input list. ;  ; TMacro * GetL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofLite.html:10062,feedback,feedback,10062,doc/master/classTProofLite.html,https://root.cern,https://root.cern/doc/master/classTProofLite.html,1,['feedback'],['feedback']
Usability,"_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual StyleOption defaultPrintStyle (Option_t *opt) const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAbsReal.html:48442,clear,clearEvalErrorLog,48442,doc/v632/classRooAbsReal.html,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html,1,['clear'],['clearEvalErrorLog']
Usability,"_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual StyleOption defaultPrintStyle (Option_t *opt) const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsReal.html:47127,clear,clearEvalErrorLog,47127,doc/master/classRooAbsReal.html,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html,1,['clear'],['clearEvalErrorLog']
Usability,"a 1-D, 2-D, etc.,; 7495/// projection of the tree will be filled in histogram hname.; 7496/// Note that the dimension of hname must match with the dimension of varexp.; 7497///; 7498 ; 7499Long64_t TTree::Project(const char* hname, const char* varexp, const char* selection, Option_t* option, Long64_t nentries, Long64_t firstentry); 7500{; 7501 TString var;; 7502 var.Form(""%s>>%s"", varexp, hname);; 7503 TString opt(""goff"");; 7504 if (option) {; 7505 opt.Form(""%sgoff"", option);; 7506 }; 7507 Long64_t nsel = Draw(var, selection, opt, nentries, firstentry);; 7508 return nsel;; 7509}; 7510 ; 7511////////////////////////////////////////////////////////////////////////////////; 7512/// Loop over entries and return a TSQLResult object containing entries following selection.; 7513 ; 7514TSQLResult* TTree::Query(const char* varexp, const char* selection, Option_t* option, Long64_t nentries, Long64_t firstentry); 7515{; 7516 GetPlayer();; 7517 if (fPlayer) {; 7518 return fPlayer->Query(varexp, selection, option, nentries, firstentry);; 7519 }; 7520 return nullptr;; 7521}; 7522 ; 7523////////////////////////////////////////////////////////////////////////////////; 7524/// Create or simply read branches from filename.; 7525///; 7526/// if branchDescriptor = """" (default), it is assumed that the Tree descriptor; 7527/// is given in the first line of the file with a syntax like; 7528/// ~~~ {.cpp}; 7529/// A/D:Table[2]/F:Ntracks/I:astring/C; 7530/// ~~~; 7531/// otherwise branchDescriptor must be specified with the above syntax.; 7532///; 7533/// - If the type of the first variable is not specified, it is assumed to be ""/F""; 7534/// - If the type of any other variable is not specified, the type of the previous; 7535/// variable is assumed. eg; 7536/// - `x:y:z` (all variables are assumed of type ""F""); 7537/// - `x/D:y:z` (all variables are of type ""D""); 7538/// - `x:y/D:z` (x is type ""F"", y and z of type ""D""); 7539///; 7540/// delimiter allows for the use of another delimiter besid",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:295964,simpl,simply,295964,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['simpl'],['simply']
Usability,"a TClonesArray, the special Tree constructor for TClonesArray is called. The collection itself cannot be a TClonesArray. If name is given, all branch names will be prefixed with name_.; IMPORTANT NOTE1: This function should not be called if splitlevel<1. IMPORTANT NOTE2: The branches created by this function will have names corresponding to the collection or object names. It is important to give names to collections to avoid misleading branch names or identical branch names. By default collections have a name equal to the corresponding class name, e.g. the default name of TList is “TList”.; 12.13 Examples for Writing and Reading Trees; The following sections are examples of writing and reading trees increasing in complexity from a simple tree with a few variables to a tree containing folders and complex Event objects. Each example has a named script in the $ROOTSYS/tutorials/tree directory. They are called tree1.C to tree4.C. The examples are:. tree1.C: a tree with several simple (integers and floating point) variables.; tree2.C: a tree built from a C structure (struct). This example uses the Geant3 C wrapper as an example of a FORTRAN common block ported to C with a C structure.; tree3.C: in this example, we will show how to extend a tree with a branch from another tree with the Friends feature. These trees have branches with variable length arrays. Each entry has a variable number of tracks, and each track has several variables.; tree4.C: a tree with a class (Event). The class Event is defined in $ROOTSYS/test. In this example we first encounter the impact of splitting a branch. Each script contains the main function, with the same name as the file (i.e. tree1), the function to write - tree1w, and the function to read - tree1r. If the script is not run in batch mode, it displays the tree in the browser and tree viewer. To study the example scripts, you can either execute the main script, or load the script and execute a specific function. For example:; // execute ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:551105,simpl,simple,551105,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['simpl'],['simple']
Usability,"a background-like (left) sample. Two new nodes are then created for each of the two sub-samples and they are constructed using the same mechanism as described for the root node. The devision is stopped once a certain node has reached either a minimum number of events, or a minimum or maximum signal purity. These leave nodes are then called ""signal"" or ""background"" if they contain more signal respective background events from the training sample. Boosting:; the idea behind the boosting is, that signal events from the training sample, that *end up in a background node (and vice versa) are given a larger weight than events that are in the correct leave node. This results in a re-weighed training event sample, with which then a new decision tree can be developed. The boosting can be applied several times (typically 100-500 times) and one ends up with a set of decision trees (a forest). Bagging:; In this particular variant of the Boosted Decision Trees the boosting is not done on the basis of previous training results, but by a simple stochastic re-sampling of the initial training event sample. Analysis:; applying an individual decision tree to a test event results in a classification of the event as either signal or background. For the boosted decision tree selection, an event is successively subjected to the whole set of decision trees and depending on how often it is classified as signal, a ""likelihood"" estimator is constructed for the event being signal or background. The value of this estimator is the one which is then used to select the events from an event sample, and the cut value on this estimator defines the efficiency and purity of the selection. ; Definition at line 49 of file MethodDT.h. Public Member Functions;  MethodDT (const TString &jobName, const TString &methodTitle, DataSetInfo &theData, const TString &theOption="""");  the standard constructor for just an ordinar ""decision trees"" ;  ;  MethodDT (DataSetInfo &dsi, const TString &theWeightFile);  constr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodDT.html:2708,simpl,simple,2708,doc/master/classTMVA_1_1MethodDT.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodDT.html,1,['simpl'],['simple']
Usability,"a callback mechanism to inform interested parties when it switches to a new sub-tree. ; Reimplemented from TObject.; Reimplemented in TSelEvent, TSelVerifyDataSet, TSelEventGen, TSelHandleDataSet, TSelectorDraw, and TSelectorEntries.; Definition at line 56 of file TSelector.h. ◆ operator=(). TSelector & TSelector::operator= ; (; const TSelector & ; ). private . ◆ Process(). bool TSelector::Process ; (; Long64_t ; ). virtual . The Process() function is called for each entry in the tree (or possibly keyed object in the case of PROOF) to be processed. ; The entry argument specifies which entry in the currently loaded tree is to be processed. It can be passed to either t01::GetEntry() or TBranch::GetEntry() to read either all or the required parts of the data. When processing keyed objects with PROOF, the object is already loaded and is available via the fObject pointer.; This function should contain the ""body"" of the analysis. It can contain simple or elaborate selection criteria, run algorithms on the data of the event and typically fill histograms.; The processing can be stopped by calling Abort().; Use fStatus to set the return value of TTree::Process().; The return value is currently not used.; WARNING when a selector is used with a TChain, you must use the pointer to the current TTree to call GetEntry(entry). The entry is always the local entry number in the current tree. Assuming that fChain is the pointer to the TChain being processed, use: fChain->GetTree()->GetEntry(entry). ; Reimplemented in TSelEvent, TEveSelectorToEventList, ROOT::Experimental::REveSelectorToEventList, TSelVerifyDataSet, TSelEventGen, TSelHandleDataSet, TSelHist, RooProofDriverSelector, TSelectorEntries, h1analysis, h1analysisTreeReader, TProofDraw, and TSelectorDraw.; Definition at line 360 of file TSelector.cxx. ◆ ProcessCut(). bool TSelector::ProcessCut ; (; Long64_t ; ). virtual . This method is called before processing entry. ; It is the user's responsibility to read the corresponding ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSelector.html:21695,simpl,simple,21695,doc/master/classTSelector.html,https://root.cern,https://root.cern/doc/master/classTSelector.html,1,['simpl'],['simple']
Usability,"a friend from the list of friends.Definition TTree.cxx:7977; TTree::Browsevoid Browse(TBrowser *) overrideBrowse content of the TTree.Definition TTree.cxx:2609; TTree::LoadTreeFriendvirtual Long64_t LoadTreeFriend(Long64_t entry, TTree *T)Load entry on behalf of our master tree, we may use an index.Definition TTree.cxx:6557; TTree::WriteInt_t Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0) overrideWrite this object to the current directory.Definition TTree.cxx:9753; TTree::fNotifyTObject * fNotifyObject to be notified when loading a Tree.Definition TTree.h:120; TTree::GetListOfClonesvirtual TList * GetListOfClones()Definition TTree.h:527; TTree::fCacheSizeLong64_t fCacheSize! Maximum size of file buffersDefinition TTree.h:105; TTree::fClonesTList * fClones! List of cloned trees which share our addressesDefinition TTree.h:135; TTree::Classstatic TClass * Class(); TTree::kLoadTree@ kLoadTreeDefinition TTree.h:221; TTree::CopyAddressesvirtual void CopyAddresses(TTree *, bool undo=false)Set branch addresses of passed tree equal to ours.Definition TTree.cxx:3299; TTree::GetListOfFriendsvirtual TList * GetListOfFriends() constDefinition TTree.h:530; TTree::fReadEntryLong64_t fReadEntry! Number of the entry being processedDefinition TTree.h:107; TTree::GetNbranchesvirtual Int_t GetNbranches()Definition TTree.h:542; TTree::FindLeafvirtual TLeaf * FindLeaf(const char *name)Find leaf..Definition TTree.cxx:4916; TTree::fDirectoryTDirectory * fDirectory! Pointer to directory holding this treeDefinition TTree.h:121; TTree::kNeedEnableDecomposedObj@ kNeedEnableDecomposedObjDefinition TTree.h:244; TTree::kNoCheck@ kNoCheckDefinition TTree.h:243; TTree::kMissingBranch@ kMissingBranchDefinition TTree.h:233; TTree::ResetBranchAddressesvirtual void ResetBranchAddresses()Tell all of our branches to drop their current objects and allocate new ones.Definition TTree.cxx:8075; TTree::SetNamevoid SetName(const char *name) overrideChange the name of this tree.Definition TTree",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TChain_8cxx_source.html:151330,undo,undo,151330,doc/master/TChain_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TChain_8cxx_source.html,1,['undo'],['undo']
Usability,"a members; class charts. ROOT; » HIST; » HIST; » THnT<double>. class THnT<double>: public THn. Helper struct to hold one dimension's bin range for THnBinIter. Function Members (Methods); public:. virtual~THnT<double>(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c = 1.); voidTHn::AddBinContent(const Int_t* idx, Double_t v = 1.); virtual voidTHn::AddBinContent(Long64_t bin, Double_t v = 1.); virtual voidTHn::AddBinError2(Long64_t bin, Double_t e2); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTHnBase::Browse(TBrowser* b); voidTHnBase::CalculateErrors(Bool_t calc = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THn*THn::CreateHn(const char* name, const char* title, const TH1* h1); static THn*THn::CreateHn(const char* name, const char* title, const THnBase* hn); virtual ROOT::THnBaseBinIter*THn::CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/THnT_double_.html:996,Clear,Clear,996,root/html602/THnT_double_.html,https://root.cern,https://root.cern/root/html602/THnT_double_.html,2,['Clear'],['Clear']
Usability,"a rotated pad (X vertical, Y horizontal) ;  ; virtual void PaintBoxes (Option_t *option);  Control function to draw a 2D histogram as a box plot ;  ; virtual void PaintCandlePlot (Option_t *option);  Control function to draw a 2D histogram as a candle (box) plot or violin plot ;  ; virtual void PaintColorLevels (Option_t *option);  Control function to draw a 2D histogram as a color plot. ;  ; virtual void PaintColorLevelsFast (Option_t *option);  [Rendering scheme for the COL2 and COLZ2 options] (HP14) ;  ; virtual void PaintContour (Option_t *option);  Control function to draw a 2D histogram as a contour plot. ;  ; virtual Int_t PaintContourLine (Double_t elev1, Int_t icont1, Double_t x1, Double_t y1, Double_t elev2, Int_t icont2, Double_t x2, Double_t y2, Double_t *xarr, Double_t *yarr, Int_t *itarr, Double_t *levels);  Fill the matrix xarr and yarr for Contour Plot. ;  ; virtual void PaintErrors (Option_t *option);  Draw 1D histograms error bars. ;  ; virtual void PaintFrame ();  Calculate range and clear pad (canvas). ;  ; virtual void PaintFunction (Option_t *option);  [Paint functions associated to an histogram.](HP28"") ;  ; virtual void PaintH3 (Option_t *option="""");  Control function to draw a 3D histograms. ;  ; virtual void PaintH3Box (Int_t iopt);  Control function to draw a 3D histogram with boxes. ;  ; virtual void PaintH3BoxRaster ();  Control function to draw a 3D histogram with boxes. ;  ; virtual void PaintH3Iso ();  Control function to draw a 3D histogram with Iso Surfaces. ;  ; virtual void PaintHighlightBin (Option_t *option="""");  Paint highlight bin as TBox object. ;  ; virtual void PaintHist (Option_t *option);  Control routine to draw 1D histograms ;  ; virtual Int_t PaintInit ();  Compute histogram parameters used by the drawing routines. ;  ; virtual Int_t PaintInitH ();  Compute histogram parameters used by the drawing routines for a rotated pad. ;  ; virtual void PaintLego (Option_t *option);  Control function to draw a 2D histogram as a l",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHistPainter.html:135287,clear,clear,135287,doc/master/classTHistPainter.html,https://root.cern,https://root.cern/doc/master/classTHistPainter.html,1,['clear'],['clear']
Usability,"a separate ROOT module -; ""padpainter"" (the same as ""histpainter""). But now, it's directly in a; gpad dir, so, in case of default painter, no *.so should be loaded,; no need in plugin managers.; May change in future. TVirtualPadPainter * GetCanvasPainter(); Access and (probably) creation of pad painter. void DeleteCanvasPainter(); assert on IsBatch() == false?. TCanvas(const TCanvas& canvas). TCanvas & operator=(const TCanvas& rhs). void Delete(Option_t* = """"); { MayNotUse(""Delete()""); }. void ForceUpdate(); { fCanvasImp->ForceUpdate(); }. const char * GetDISPLAY() const; {return fDISPLAY.Data();}. TContextMenu * GetContextMenu() const; {return fContextMenu;}. Int_t GetDoubleBuffer() const; {return fDoubleBuffer;}. Int_t GetEvent() const; { return fEvent; }. Int_t GetEventX() const; { return fEventX; }. Int_t GetEventY() const; { return fEventY; }. Color_t GetHighLightColor() const; { return fHighLightColor; }. TVirtualPad * GetPadSave() const; { return fPadSave; }. void ClearPadSave(); { fPadSave = 0; }. TObject * GetSelected() const; {return fSelected;}. TObject * GetClickSelected() const; {return fClickSelected;}. Int_t GetSelectedX() const; {return fSelectedX;}. Int_t GetSelectedY() const; {return fSelectedY;}. Option_t * GetSelectedOpt() const; {return fSelectedOpt.Data();}. TVirtualPad * GetSelectedPad() const; { return fSelectedPad; }. TVirtualPad * GetClickSelectedPad() const; { return fClickSelectedPad; }. Bool_t GetShowEventStatus() const; { return TestBit(kShowEventStatus); }. Bool_t GetShowToolBar() const; { return TestBit(kShowToolBar); }. Bool_t GetShowEditor() const; { return TestBit(kShowEditor); }. Bool_t GetShowToolTips() const; { return TestBit(kShowToolTips); }. Bool_t GetAutoExec() const; { return TestBit(kAutoExec); }. Size_t GetXsizeUser() const; {return fXsizeUser;}. Size_t GetYsizeUser() const; {return fYsizeUser;}. Size_t GetXsizeReal() const; {return fXsizeReal;}. Size_t GetYsizeReal() const; {return fYsizeReal;}. Int_t GetCanvasID() const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TCanvas.html:47031,Clear,ClearPadSave,47031,root/html534/TCanvas.html,https://root.cern,https://root.cern/root/html534/TCanvas.html,3,['Clear'],['ClearPadSave']
Usability,"a simple box. ; Implements TVirtualPadPainter.; Definition at line 102 of file TWebPadPainter.cxx. ◆ DrawFillArea() [1/2]. void TWebPadPainter::DrawFillArea ; (; Int_t ; n, . const Double_t * ; x, . const Double_t * ; y . ). overridevirtual . Paint filled area. ; Implements TVirtualPadPainter.; Definition at line 124 of file TWebPadPainter.cxx. ◆ DrawFillArea() [2/2]. void TWebPadPainter::DrawFillArea ; (; Int_t ; n, . const Float_t * ; x, . const Float_t * ; y . ). overridevirtual . Paint filled area. ; Implements TVirtualPadPainter.; Definition at line 140 of file TWebPadPainter.cxx. ◆ DrawLine(). void TWebPadPainter::DrawLine ; (; Double_t ; x1, . Double_t ; y1, . Double_t ; x2, . Double_t ; y2 . ). overridevirtual . Paint a simple line. ; Implements TVirtualPadPainter.; Definition at line 65 of file TWebPadPainter.cxx. ◆ DrawLineNDC(). void TWebPadPainter::DrawLineNDC ; (; Double_t ; u1, . Double_t ; v1, . Double_t ; u2, . Double_t ; v2 . ). overridevirtual . Paint a simple line in normalized coordinates. ; Implements TVirtualPadPainter.; Definition at line 83 of file TWebPadPainter.cxx. ◆ DrawPixels(). void TWebPadPainter::DrawPixels ; (; const unsigned char * ; pixelData, . UInt_t ; width, . UInt_t ; height, . Int_t ; dstX, . Int_t ; dstY, . Bool_t ; enableAlphaBlending . ). overridevirtual . Noop, for non-gl pad TASImage calls gVirtualX->CopyArea. ; Implements TVirtualPadPainter.; Definition at line 55 of file TWebPadPainter.cxx. ◆ DrawPolyLine() [1/2]. void TWebPadPainter::DrawPolyLine ; (; Int_t ; n, . const Double_t * ; x, . const Double_t * ; y . ). overridevirtual . Paint Polyline. ; Implements TVirtualPadPainter.; Definition at line 156 of file TWebPadPainter.cxx. ◆ DrawPolyLine() [2/2]. void TWebPadPainter::DrawPolyLine ; (; Int_t ; n, . const Float_t * ; x, . const Float_t * ; y . ). overridevirtual . Paint polyline. ; Implements TVirtualPadPainter.; Definition at line 172 of file TWebPadPainter.cxx. ◆ DrawPolyLineNDC(). void TWebPadPainter::DrawPolyLi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWebPadPainter.html:15563,simpl,simple,15563,doc/master/classTWebPadPainter.html,https://root.cern,https://root.cern/doc/master/classTWebPadPainter.html,1,['simpl'],['simple']
Usability,"a simple line in normalized coordinates. void DrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2, TVirtualPadPainter::EBoxMode mode); Paint a simple box. void DrawFillArea(Int_t n, const Double_t* x, const Double_t* y); Paint filled area. void DrawFillArea(Int_t n, const Float_t* x, const Float_t* y); Paint filled area. void DrawPolyLine(Int_t n, const Double_t* x, const Double_t* y); Paint Polyline. void DrawPolyLine(Int_t n, const Float_t* x, const Float_t* y); Paint polyline. void DrawPolyLineNDC(Int_t n, const Double_t* u, const Double_t* v); Paint polyline in normalized coordinates. void DrawPolyMarker(Int_t n, const Double_t* x, const Double_t* y); Paint polymarker. void DrawPolyMarker(Int_t n, const Float_t* x, const Float_t* y); Paint polymarker. void DrawText(Double_t x, Double_t y, const char* text, TVirtualPadPainter::ETextMode mode); Paint text. void DrawText(Double_t x, Double_t y, const wchar_t* text, TVirtualPadPainter::ETextMode mode); Special version working with wchar_t and required by TMathText. void DrawTextNDC(Double_t u, Double_t v, const char* text, TVirtualPadPainter::ETextMode mode); Paint text in normalized coordinates. void SaveImage(TVirtualPad* pad, const char* fileName, Int_t type) const; Save the image displayed in the canvas pointed by ""pad"" into a binary file. void DrawTextNDC(Double_t u, Double_t v, const wchar_t* text, TVirtualPadPainter::ETextMode mode); Paint text in normalized coordinates. TPadPainter(); Final overriders for TVirtualPadPainter pure virtual functions.; 1. Part, which simply delegates to TVirtualX.; Line attributes. TPadPainter(const TPadPainter& rhs); Let's make this clear:. » Author: Olivier Couet, Timur Pocheptsov 06/05/2009 » Copyright (C) 1995-2009, Rene Brun and Fons Rademakers. *; » Last changed: root/gpad:$Id$ » Last generated: 2015-06-02 16:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TPadPainter.html:7543,simpl,simply,7543,root/html604/TPadPainter.html,https://root.cern,https://root.cern/root/html604/TPadPainter.html,4,"['clear', 'simpl']","['clear', 'simply']"
Usability,"a special way. Do not delay the parsing.; 2033 bool hasHeaderParsingOnDemand = fHeaderParsingOnDemand;; 2034 bool isACLiC = strstr(modulename, ""_ACLiC_dict"") != nullptr;; 2035 if (hasHeaderParsingOnDemand && isACLiC) {; 2036 if (gDebug>1); 2037 Info(""TCling::RegisterModule"",; 2038 ""Header parsing on demand is active but this is an Aclic library. Disabling it for this library."");; 2039 hasHeaderParsingOnDemand = false;; 2040 }; 2041 ; 2042 ; 2043 // Make sure we relookup symbols that were search for before we loaded; 2044 // their autoparse information. We could be more subtil and remove only; 2045 // the failed one or only the one in this module, but for now this is; 2046 // better than nothing.; 2047 fLookedUpClasses.clear();; 2048 ; 2049 // Make sure we do not set off AutoLoading or autoparsing during the; 2050 // module registration!; 2051 SuspendAutoLoadingRAII autoLoadOff(this);; 2052 ; 2053 for (const char** inclPath = includePaths; *inclPath; ++inclPath) {; 2054 TCling::AddIncludePath(*inclPath);; 2055 }; 2056 cling::Transaction* T = nullptr;; 2057 // Put the template decls and the number of arguments to skip in the TNormalizedCtxt; 2058 for (auto& fwdDeclArgToSkipPair : fwdDeclsArgToSkip){; 2059 const std::string& fwdDecl = fwdDeclArgToSkipPair.first;; 2060 const int nArgsToSkip = fwdDeclArgToSkipPair.second;; 2061 auto compRes = fInterpreter->declare(fwdDecl.c_str(), &T);; 2062 assert(cling::Interpreter::kSuccess == compRes &&; 2063 ""A fwd declaration could not be compiled"");; 2064 if (compRes!=cling::Interpreter::kSuccess){; 2065 Warning(""TCling::RegisterModule"",; 2066 ""Problems in declaring string '%s' were encountered."",; 2067 fwdDecl.c_str()) ;; 2068 continue;; 2069 }; 2070 ; 2071 // Drill through namespaces recursively until the template is found; 2072 if(ClassTemplateDecl* TD = FindTemplateInNamespace(T->getFirstDecl().getSingleDecl())){; 2073 fNormalizedCtxt->AddTemplAndNargsToKeep(TD->getCanonicalDecl(), nArgsToSkip);; 2074 }; 2075 ; 2076 }; 2077 ; 2",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:78104,clear,clear,78104,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['clear'],['clear']
Usability,"a state with given name, the lowest available; positive integer is assigned as index. Category; state labels may not contain semicolons.; Error status is return if state with given name; is already defined. Bool_t defineType(const char* label, Int_t index); Define a state with given name and index. Category; state labels may not contain semicolons; Error status is return if state with given name; or index is already defined. Bool_t readFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); Read object contents from given stream. void writeToStream(ostream& os, Bool_t compact) const; compact only at the moment. void clearRange(const char* name, Bool_t silent); Check that both input arguments are not null pointers. void setRange(const char* rangeName, const char* stateNameList). void addToRange(const char* rangeName, const char* stateNameList); Check that both input arguments are not null pointers. Bool_t isStateInRange(const char* rangeName, const char* stateName) const; If no range is specified [ i.e. the default range ] all category states are in range. void Streamer(TBuffer& ). TObject* clone(const char* newname) const; { return new RooCategory(*this,newname); }. Int_t getIndex() const; Value modifiers. const char* getLabel() const. Bool_t isFundamental() const; We implement a fundamental type of AbsArg that can be stored in a dataset. Bool_t isDerived() const; Does value or shape of this arg depend on any other arg?. void clearTypes(); { RooAbsCategory::clearTypes() ; }. Bool_t inRange(const char* rangeName) const; Returns true of current value of category is inside given range. Bool_t hasRange(const char* rangeName) const; Returns true if category has range with given name. RooCatType evaluate() const; Dummy implementation. » Last changed: Tue Jun 2 15:29:49 2015 » Last generated: 2015-06-02 15:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooCategory.html:27512,clear,clearTypes,27512,root/html604/RooCategory.html,https://root.cern,https://root.cern/root/html604/RooCategory.html,4,['clear'],['clearTypes']
Usability,"a used.; TGLClip*TGLSceneInfo::fLastClipLast combined viewer/scene clip (set in scene::update); Short_tTGLSceneInfo::fLastLODLast combined viewer/scene lod (set in scene::lodify-scene-info).; Float_tTGLSceneInfo::fLastOLLineWLast combined viewer/scene outline line-width (set in scene::pre-draw).; Short_tTGLSceneInfo::fLastStyleLast combined viewer/scene style (set in scene::pre-draw).; Float_tTGLSceneInfo::fLastWFLineWLast combined viewer/scene wire-frame line-width (set in scene::pre-draw).; Float_tTGLSceneInfo::fOLLineWOptional override of scene outline line-width; TGLSceneBase*TGLSceneInfo::fScene; UInt_tTGLSceneInfo::fSceneStampScene's time-stamp on last update.; Short_tTGLSceneInfo::fStyleOptional override of scene style; TGLBoundingBoxTGLSceneInfo::fTransformedBBox; Bool_tTGLSceneInfo::fUpdateTimeoutedSet if update was interrupted.; Bool_tTGLSceneInfo::fViewCheckViewer side check if render is necessary.; TGLViewerBase*TGLSceneInfo::fViewer; Float_tTGLSceneInfo::fWFLineWOptional override of scene wire-frame line-width. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bool_t CmpDrawElements(const TGLScene::DrawElement_t& de1, const TGLScene::DrawElement_t& de2). void ClearDrawElementVec(TGLScene::DrawElementVec_t& vec, Int_t maxSize). void ClearDrawElementPtrVec(TGLScene::DrawElementPtrVec_t& vec, Int_t maxSize). TSceneInfo(TGLViewerBase* view = 0, TGLScene* scene = 0). virtual ~TSceneInfo(). void ClearAfterRebuild(). void ClearAfterUpdate(). void Lodify(TGLRnrCtx& ctx). void PreDraw(). void PostDraw(). void ResetDrawStats(). void UpdateDrawStats(const TGLPhysicalShape& shape, Short_t lod). void DumpDrawStats(). » Author: Matevz Tadel, Feb 2007 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGLScene__TSceneInfo.html:6030,Clear,ClearDrawElementVec,6030,root/html534/TGLScene__TSceneInfo.html,https://root.cern,https://root.cern/root/html534/TGLScene__TSceneInfo.html,4,['Clear'],"['ClearAfterRebuild', 'ClearAfterUpdate', 'ClearDrawElementPtrVec', 'ClearDrawElementVec']"
Usability,"a valid pct-encoded string. ; Definition at line 1086 of file TUri.cxx. ◆ PctDecodeUnreserved(). TString const TUri::PctDecodeUnreserved ; (; const TString & ; source). static . Percent-decode the given string according to chapter 2.1 we assume a valid pct-encoded string. ; Definition at line 1012 of file TUri.cxx. ◆ PctEncode(). const TString TUri::PctEncode ; (; const TString & ; source). static . Percent-encode and return the given string according to RFC 3986 in principle, this function cannot fail or produce an error. ; Definition at line 815 of file TUri.cxx. ◆ PctNormalise(). TString const TUri::PctNormalise ; (; const TString & ; source). static . Normalise the percent-encoded parts of the string i.e. ; uppercase the hexadecimal digits %[:alpha:][:alpha:] -> %[:ALPHA:][:ALPHA:] ; Definition at line 1057 of file TUri.cxx. ◆ Print(). void TUri::Print ; (; Option_t * ; option = """"); const. overridevirtual . Display function,. . option ""d"" .. debug output; anything else .. simply print URI. . Reimplemented from TObject.; Definition at line 528 of file TUri.cxx. ◆ RemoveDotSegments(). const TString TUri::RemoveDotSegments ; (; const TString & ; inp). static . This functions implements the ""remove_dot_segments"" routine of chapter 5.2.4 ""for interpreting and removing the special '. ; ' and '..' complete path segments from a referenced path"". ; Definition at line 159 of file TUri.cxx. ◆ Reset(). void TUri::Reset ; (; ). Initialize this URI object. ; Set all TString members to empty string, set all Bool_t members to kFALSE. ; Definition at line 571 of file TUri.cxx. ◆ SetAuthority(). Bool_t TUri::SetAuthority ; (; const TString & ; authority). Set authority part of URI: ; authority = [ userinfo ""@"" ] host [ "":"" port ]; Split into components {userinfo@, host, :port}, remember that according to the RFC, it is necessary to distinguish between missing component (no delimiter) and empty component (delimiter present). ; Definition at line 338 of file TUri.cxx. ◆ SetFragmen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUri.html:28846,simpl,simply,28846,doc/master/classTUri.html,https://root.cern,https://root.cern/doc/master/classTUri.html,1,['simpl'],['simply']
Usability,"a& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Int_tcalculateBandWidth(Int_t kernel = -999); Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), const RooCmdArg arg5 = RooCmdArg::none(), const RooCmdArg arg6 = RooCmdArg:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/Roo2DKeysPdf.html:2570,clear,clearEvalErrorLog,2570,root/html526/Roo2DKeysPdf.html,https://root.cern,https://root.cern/root/html526/Roo2DKeysPdf.html,1,['clear'],['clearEvalErrorLog']
Usability,"a& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tcheckObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; const RooArgList&coefList() const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), const RooCmdArg arg5 = RooCmdArg::none()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooRealSumPdf.html:3183,clear,clearEvalErrorLog,3183,root/html528/RooRealSumPdf.html,https://root.cern,https://root.cern/root/html528/RooRealSumPdf.html,1,['clear'],['clearEvalErrorLog']
Usability,"a& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tcheckObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; const RooArgList&coefList() const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAddPdf.html:3855,clear,clearEvalErrorLog,3855,root/html528/RooAddPdf.html,https://root.cern,https://root.cern/root/html528/RooAddPdf.html,3,['clear'],['clearEvalErrorLog']
Usability,"a& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tcheckObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooProdPdf.html:4301,clear,clearEvalErrorLog,4301,root/html528/RooProdPdf.html,https://root.cern,https://root.cern/root/html528/RooProdPdf.html,2,['clear'],['clearEvalErrorLog']
Usability,"a());; 3455 } else {; 3456 return (TDataMember *)((TClass*)this)->GetListOfDataMembers(kFALSE)->FindObject(start_name);; 3457 }; 3458}; 3459 ; 3460////////////////////////////////////////////////////////////////////////////////; 3461/// Return name of the file containing the declaration of this class.; 3462 ; 3463const char *TClass::GetDeclFileName() const; 3464{; 3465 if (fDeclFileName == kUndeterminedClassInfoName); 3466 return gInterpreter->ClassInfo_FileName( fClassInfo );; 3467 return fDeclFileName;; 3468}; 3469 ; 3470////////////////////////////////////////////////////////////////////////////////; 3471/// return offset for member name. name can be a data member in; 3472/// the class itself, one of its base classes, or one member in; 3473/// one of the aggregated classes.; 3474///; 3475/// In case of an emulated class, the list of emulated TRealData is built; 3476 ; 3477Longptr_t TClass::GetDataMemberOffset(const char *name) const; 3478{; 3479 TRealData *rd = GetRealData(name);; 3480 if (rd) return rd->GetThisOffset();; 3481 if (strchr(name,'[')==nullptr) {; 3482 // If this is a simple name there is a chance to find it in the; 3483 // StreamerInfo even if we did not find it in the RealData.; 3484 // For example an array name would be fArray[3] in RealData but; 3485 // just fArray in the streamerInfo.; 3486 TVirtualStreamerInfo *info = const_cast<TClass*>(this)->GetCurrentStreamerInfo();; 3487 if (info) {; 3488 return info->GetOffset(name);; 3489 }; 3490 }; 3491 return 0;; 3492}; 3493 ; 3494////////////////////////////////////////////////////////////////////////////////; 3495/// Return pointer to TRealData element with name ""name"".; 3496///; 3497/// Name can be a data member in the class itself,; 3498/// one of its base classes, or a member in; 3499/// one of the aggregated classes.; 3500///; 3501/// In case of an emulated class, the list of emulated TRealData is built.; 3502 ; 3503TRealData* TClass::GetRealData(const char* name) const; 3504{; 3505 if (!fRealData",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:132531,simpl,simple,132531,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,1,['simpl'],['simple']
Usability,"a());; 3522 } else {; 3523 return (TDataMember *)((TClass*)this)->GetListOfDataMembers(kFALSE)->FindObject(start_name);; 3524 }; 3525}; 3526 ; 3527////////////////////////////////////////////////////////////////////////////////; 3528/// Return name of the file containing the declaration of this class.; 3529 ; 3530const char *TClass::GetDeclFileName() const; 3531{; 3532 if (fDeclFileName == kUndeterminedClassInfoName); 3533 return gInterpreter->ClassInfo_FileName( fClassInfo );; 3534 return fDeclFileName;; 3535}; 3536 ; 3537////////////////////////////////////////////////////////////////////////////////; 3538/// return offset for member name. name can be a data member in; 3539/// the class itself, one of its base classes, or one member in; 3540/// one of the aggregated classes.; 3541///; 3542/// In case of an emulated class, the list of emulated TRealData is built; 3543 ; 3544Longptr_t TClass::GetDataMemberOffset(const char *name) const; 3545{; 3546 TRealData *rd = GetRealData(name);; 3547 if (rd) return rd->GetThisOffset();; 3548 if (strchr(name,'[')==nullptr) {; 3549 // If this is a simple name there is a chance to find it in the; 3550 // StreamerInfo even if we did not find it in the RealData.; 3551 // For example an array name would be fArray[3] in RealData but; 3552 // just fArray in the streamerInfo.; 3553 TVirtualStreamerInfo *info = const_cast<TClass*>(this)->GetCurrentStreamerInfo();; 3554 if (info) {; 3555 return info->GetOffset(name);; 3556 }; 3557 }; 3558 return 0;; 3559}; 3560 ; 3561////////////////////////////////////////////////////////////////////////////////; 3562/// Return pointer to TRealData element with name ""name"".; 3563///; 3564/// Name can be a data member in the class itself,; 3565/// one of its base classes, or a member in; 3566/// one of the aggregated classes.; 3567///; 3568/// In case of an emulated class, the list of emulated TRealData is built.; 3569 ; 3570TRealData* TClass::GetRealData(const char* name) const; 3571{; 3572 if (!fRealData",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:135282,simpl,simple,135282,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,1,['simpl'],['simple']
Usability,"a(Double_t dz, Double_t theta, Double_t phi, Double_t twist, Double_t h1, Double_t bl1, Double_t tl1, Double_t alpha1, Double_t h2, Double_t bl2, Double_t tl2, Double_t alpha2); TGeoGtra(const char* name, Double_t dz, Double_t theta, Double_t phi, Double_t twist, Double_t h1, Double_t bl1, Double_t tl1, Double_t alpha1, Double_t h2, Double_t bl2, Double_t tl2, Double_t alpha2); virtual~TGeoGtra(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTGeoBBox::AreOverlapping(const TGeoBBox* box1, const TGeoMatrix* mat1, const TGeoBBox* box2, const TGeoMatrix* mat2); static Double_tTGeoShape::Big(); virtual voidTObject::Browse(TBrowser* b); virtual Double_tTGeoArb8::Capacity() const; voidTGeoShape::CheckShape(Int_t testNo, Int_t nsamples = 10000, Option_t* option = """"); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTGeoShape::ClearThreadData() const; virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTGeoArb8::ComputeBBox(); static Double_tTGeoShape::ComputeEpsMch(); virtual voidTGeoArb8::ComputeNormal(Double_t* point, Double_t* dir, Double_t* norm); voidTGeoArb8::ComputeTwist(); virtual Bool_tTGeoArb8::Contains(Double_t* point) const; virtual voidTNamed::Copy(TObject& named) const; virtual Bool_tTGeoBBox::CouldBeCrossed(Double_t* point, Double_t* dir) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTGeoBBox::DistancetoPrimitive(Int_t px, Int_t py); virtual Double_tDistFromInside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; virtual Double_tDistFromOutside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; static Double_tTGeoShape::DistToPhiMin(Double_t* point, Double_t* dir, Double_t s1, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoGtra.html:2273,Clear,ClearThreadData,2273,root/html532/TGeoGtra.html,https://root.cern,https://root.cern/root/html532/TGeoGtra.html,1,['Clear'],['ClearThreadData']
Usability,"a); voidTQObject::EmitVA<>(const char* signal_name, Int_t); Int_tTProof::EnablePackage(const char* package, Bool_t notOnClient = kFALSE, TList* workers = 0); Int_tTProof::EnablePackage(const char* package, const char* loadopts, Bool_t notOnClient = kFALSE, TList* workers = 0); Int_tTProof::EnablePackage(const char* package, TList* loadopts, Bool_t notOnClient = kFALSE, TList* workers = 0); virtual voidTObject::Error(const char* method, const char* msgfmt) const; Int_tTProof::Exec(const char* cmd, Bool_t plusMaster = kFALSE); Int_tTProof::Exec(const char* cmd, const char* ord, Bool_t logtomacro = kFALSE); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual Bool_tTProof::ExistsDataSet(const char* dataset); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTProof::Feedback(TList* objs)SIGNAL ; virtual voidTNamed::FillBuffer(char*& buffer); Long64_tTProof::Finalize(Int_t query = -1, Bool_t force = kFALSE); Long64_tTProof::Finalize(const char* queryref, Bool_t force = kFALSE); TList*TProof::FindDataSets(const char* searchString, const char* optStr = """"); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Long64_tTProof::GetBytesRead() const; Int_tTProof::GetClientProtocol() const; const char*TProof::GetConfDir() const; const char*TProof::GetConfFile() const; Float_tTProof::GetCpuTime() const; const char*TProof::GetDataPoolUrl() const; virtual TFileCollection*TProof::GetDataSet(const char* dataset, const char* optStr = """"); TMap*TProof::GetDataSetQuota(const char* optStr = """"); virtual TMap*TProof::GetDataSets(const char* uri = """", const char* optStr = """"); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TStringTProof::Getenv(const char* env, c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofCondor.html:6726,Feedback,Feedback,6726,root/html602/TProofCondor.html,https://root.cern,https://root.cern/root/html602/TProofCondor.html,4,['Feedback'],['Feedback']
Usability,"a, const RooLinkedList& cmdList); virtual RooFitResult*chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidclearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname = 0) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsReal*createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsReal.html:3726,clear,clearShapeDirty,3726,root/html534/RooAbsReal.html,https://root.cern,https://root.cern/root/html534/RooAbsReal.html,6,['clear'],['clearShapeDirty']
Usability,"a, const RooLinkedList& cmdList); virtual RooFitResult*chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidclearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsReal*createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(),",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsReal.html:3662,clear,clearShapeDirty,3662,root/html532/RooAbsReal.html,https://root.cern,https://root.cern/root/html532/RooAbsReal.html,1,['clear'],['clearShapeDirty']
Usability,"a, const RooLinkedList& cmdList); virtual RooFitResult*chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidclearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsReal*createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsReal.html:3579,clear,clearShapeDirty,3579,root/html528/RooAbsReal.html,https://root.cern,https://root.cern/root/html528/RooAbsReal.html,2,['clear'],['clearShapeDirty']
Usability,"a, const RooLinkedList& cmdList); virtual RooFitResult*chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidclearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname = 0) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsReal*createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*createChi2(RooDataHist& data, const Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsReal.html:3649,Clear,Clear,3649,root/html534/RooAbsReal.html,https://root.cern,https://root.cern/root/html534/RooAbsReal.html,3,['Clear'],['Clear']
Usability,"a0; // c0 - 2 * c1 + c2; 69 return (a2 * xScaled + a1) * xScaled + a0;; 70 }; 71 ; 72 double t = xScaled;; 73 double s = 1. - xScaled;; 74 ; 75 double result = coefs[0] * s;; 76 for (int i = 1; i < degree; i++) {; 77 result = (result + t * binomial(degree, i) * coefs[i]) * s;; 78 t *= xScaled;; 79 }; 80 result += t * coefs[degree];; 81 ; 82 return result;; 83}; 84 ; 85/// @brief Function to evaluate an un-normalized RooGaussian.; 86inline double gaussian(double x, double mean, double sigma); 87{; 88 const double arg = x - mean;; 89 const double sig = sigma;; 90 return std::exp(-0.5 * arg * arg / (sig * sig));; 91}; 92 ; 93inline double product(double const *factors, std::size_t nFactors); 94{; 95 double out = 1.0;; 96 for (std::size_t i = 0; i < nFactors; ++i) {; 97 out *= factors[i];; 98 }; 99 return out;; 100}; 101 ; 102// RooRatio evaluate function.; 103inline double ratio(double numerator, double denominator); 104{; 105 return numerator / denominator;; 106}; 107 ; 108inline double bifurGauss(double x, double mean, double sigmaL, double sigmaR); 109{; 110 // Note: this simplification does not work with Clad as of v1.1!; 111 // return gaussian(x, mean, x < mean ? sigmaL : sigmaR);; 112 if (x < mean); 113 return gaussian(x, mean, sigmaL);; 114 return gaussian(x, mean, sigmaR);; 115}; 116 ; 117inline double efficiency(double effFuncVal, int catIndex, int sigCatIndex); 118{; 119 // Truncate efficiency function in range 0.0-1.0; 120 effFuncVal = std::clamp(effFuncVal, 0.0, 1.0);; 121 ; 122 if (catIndex == sigCatIndex); 123 return effFuncVal; // Accept case; 124 else; 125 return 1 - effFuncVal; // Reject case; 126}; 127 ; 128/// In pdfMode, a coefficient for the constant term of 1.0 is implied if lowestOrder > 0.; 129template <bool pdfMode = false>; 130inline double polynomial(double const *coeffs, int nCoeffs, int lowestOrder, double x); 131{; 132 double retVal = coeffs[nCoeffs - 1];; 133 for (int i = nCoeffs - 2; i >= 0; i--); 134 retVal = coeffs[i] + x * retVal;; 135",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MathFuncs_8h_source.html:3119,simpl,simplification,3119,doc/master/MathFuncs_8h_source.html,https://root.cern,https://root.cern/doc/master/MathFuncs_8h_source.html,1,['simpl'],['simplification']
Usability,"aFrame.; // `h` can be used just like a pointer to TH1D but it is actually a TResultProxy<TH1D>, a smart object that triggers; // an event-loop to fill the pointee histogram if needed.; auto h = df.Histo1D<double>({""browserHisto"", """", 100, -2., 2.}, ""x"");; ; // ## Use the callback mechanism to draw the histogram on a TBrowser while it is being filled; // So far we have registered a column ""x"" to a data-frame with `nEvents` events and we registered the filling of a; // histogram with the values of column ""x"".; // In the following we will register three functions for execution during the event-loop:; // - one is to be executed once just before the loop and adds a partially-filled histogram to a TBrowser; // - the next is executed every 50 events and draws the partial histogram on the TBrowser's TPad; // - another callback is responsible of updating a simple progress bar from multiple threads; ; // First off we create a TBrowser that contains a ""RDFResults"" directory; auto dfDirectory = new TMemFile(""RDFResults"", ""RECREATE"");; auto browser = new TBrowser(""b"", dfDirectory);; // The global pad should now be set to the TBrowser's canvas, let's store its value in a local variable; auto browserPad = gPad;; ; // A useful feature of `TResultProxy` is its `OnPartialResult` method: it allows us to register a callback that is; // executed once per specified number of events during the event-loop, on ""partial"" versions of the result objects; // contained in the `TResultProxy`. In this case, the partial result is going to be a histogram filled with an; // increasing number of events.; // Instead of requesting the callback to be executed every N entries, this time we use the special value `kOnce` to; // request that it is executed once right before starting the event-loop.; // The callback is a C++11 lambda that registers the partial result object in `dfDirectory`.; h.OnPartialResult(h.kOnce, [dfDirectory](TH1D &h_) { dfDirectory->Add(&h_); });; // Note that we called `OnPartialRes",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df013__InspectAnalysis_8C.html:2227,simpl,simple,2227,doc/master/df013__InspectAnalysis_8C.html,https://root.cern,https://root.cern/doc/master/df013__InspectAnalysis_8C.html,2,"['progress bar', 'simpl']","['progress bar', 'simple']"
Usability,"aInterest. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveBoxSetGL(); Default constructor. ~TEveBoxSetGL(); Destructor. Int_t PrimitiveType() const; Return GL primitive used to render the boxes, based on the; render-mode specified in the model object. void MakeOriginBox(Float_t[8][3] p, Float_t dx, Float_t dy, Float_t dz) const; Fill array p to represent a box (0,0,0) - (dx,dy,dz). void RenderBoxStdNorm(const Float_t[8][3] p) const; Render a box specified by points in array p with standard; axis-aligned normals. void RenderBoxAutoNorm(const Float_t[8][3] p) const; Render box, calculate normals on the fly from first three points. void MakeDisplayList() const; Create a display-list for rendering a single box, based on the; current box-type.; Some box-types don't benefit from the display-list rendering and; so display-list is not created. Bool_t ShouldDLCache(const TGLRnrCtx& rnrCtx) const; Determines if display-list will be used for rendering.; Virtual from TGLLogicalShape. void DLCacheDrop(); Called when display lists have been destroyed externally and the; internal display-list data needs to be cleare.; Virtual from TGLLogicalShape. void DLCachePurge(); Called when display-lists need to be returned to the system.; Virtual from TGLLogicalShape. Bool_t SetModel(TObject* obj, const Option_t* opt = 0); Set model object.; Virtual from TGLObject. void RenderBoxes(TGLRnrCtx& rnrCtx) const; GL rendering for all box-types. void DirectDraw(TGLRnrCtx& rnrCtx) const; Actual rendering code.; Virtual from TGLLogicalShape. void Render(TGLRnrCtx& rnrCtx); Interface for direct rendering from classes that include TEveBoxSet; as a member. TEveBoxSetGL(const TEveBoxSetGL& ). TEveBoxSetGL& operator=(const TEveBoxSetGL& ). » Last changed: root/eve:$Id$ » Last generated: 2015-06-02 15:42; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TEveBoxSetGL.html:5964,clear,cleare,5964,root/html604/TEveBoxSetGL.html,https://root.cern,https://root.cern/root/html604/TEveBoxSetGL.html,2,['clear'],['cleare']
Usability,"aInterest. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveBoxSetGL(); Default constructor. ~TEveBoxSetGL(); Destructor. Int_t PrimitiveType() const; Return GL primitive used to render the boxes, based on the; render-mode specified in the model object. void MakeOriginBox(Float_t[8][3] p, Float_t dx, Float_t dy, Float_t dz) const; Fill array p to represent a box (0,0,0) - (dx,dy,dz). void RenderBoxStdNorm(const Float_t[8][3] p) const; Render a box specified by points in array p with standard; axis-aligned normals. void RenderBoxAutoNorm(const Float_t[8][3] p) const; Render box, calculate normals on the fly from first three points. void MakeDisplayList() const; Create a display-list for rendering a single box, based on the; current box-type.; Some box-types don't benefit from the display-list rendering and; so display-list is not created. Bool_t ShouldDLCache(const TGLRnrCtx& rnrCtx) const; Determines if display-list will be used for rendering.; Virtual from TGLLogicalShape. void DLCacheDrop(); Called when display lists have been destroyed externally and the; internal display-list data needs to be cleare.; Virtual from TGLLogicalShape. void DLCachePurge(); Called when display-lists need to be returned to the system.; Virtual from TGLLogicalShape. Bool_t SetModel(TObject* obj, const Option_t* opt = 0); Set model object.; Virtual from TGLObject. void RenderBoxes(TGLRnrCtx& rnrCtx) const; GL rendering for all box-types. void DirectDraw(TGLRnrCtx& rnrCtx) const; Actual rendering code.; Virtual from TGLLogicalShape. void Render(TGLRnrCtx& rnrCtx); Interface for direct rendering from classes that include TEveBoxSet; as a member. TEveBoxSetGL(const TEveBoxSetGL& ). TEveBoxSetGL& operator=(const TEveBoxSetGL& ). » Last changed: root/eve:$Id$ » Last generated: 2015-06-30 14:43; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveBoxSetGL.html:5964,clear,cleare,5964,root/html602/TEveBoxSetGL.html,https://root.cern,https://root.cern/root/html602/TEveBoxSetGL.html,2,['clear'],['cleare']
Usability,aInverse.cxx;  LaOuterProduct.cxx;  LaSumOfElements.cxx;  LaVtMVSimilarity.cxx;  MinimumBuilder.cxx;  Minuit2Minimizer.cxx;  MnApplication.cxx;  mnbins.cxx;  MnContours.cxx;  MnCovarianceSqueeze.cxx;  mndasum.cxx;  mndaxpy.cxx;  mnddot.cxx;  mndscal.cxx;  mndspmv.cxx;  mndspr.cxx;  MnEigen.cxx;  MnFcn.cxx;  MnFumiliMinimize.cxx;  MnFunctionCross.cxx;  MnGlobalCorrelationCoeff.cxx;  MnHesse.cxx;  MnLineSearch.cxx;  mnlsame.cxx;  MnMachinePrecision.cxx;  MnMinos.cxx;  MnParabolaFactory.cxx;  MnParameterScan.cxx;  MnPlot.cxx;  MnPosDef.cxx;  MnPrint.cxx;  MnScan.cxx;  MnSeedGenerator.cxx;  MnStrategy.cxx;  mnteigen.cxx;  MnTiny.cxx;  mntplot.cxx;  MnTraceObject.cxx;  MnUserFcn.cxx;  MnUserParameters.cxx;  MnUserParameterState.cxx;  MnUserTransformation.cxx;  mnvert.cxx;  mnxerbla.cxx;  ModularFunctionMinimizer.cxx;  MPIProcess.cxx;  NegativeG2LineSearch.cxx;  Numerical2PGradientCalculator.cxx;  ParametricFunction.cxx;  ScanBuilder.cxx;  SimplexBuilder.cxx;  SimplexParameters.cxx;  SimplexSeedGenerator.cxx;  SinParameterTransformation.cxx;  SqrtLowParameterTransformation.cxx;  SqrtUpParameterTransformation.cxx;  TMinuit2TraceObject.cxx;  VariableMetricBuilder.cxx;  VariableMetricEDMEstimator.cxx;  ► test;  ► MnSim;  DemoFumili.cxx;  DemoGaussSim.cxx;  demoMinimizer.cxx;  FlatRandomGen.h;  GaussDataGen.cxx;  GaussDataGen.h;  GaussFcn.cxx;  GaussFcn.h;  GaussFcn2.cxx;  GaussFcn2.h;  GaussFunction.h;  GaussianModelFunction.h;  GaussRandomGen.h;  ParallelTest.cxx;  PaulTest.cxx;  PaulTest2.cxx;  PaulTest3.cxx;  PaulTest4.cxx;  ReneTest.cxx;  ► MnTutorial;  Quad12F.h;  Quad12FMain.cxx;  Quad1F.h;  Quad1FMain.cxx;  Quad4F.h;  Quad4FMain.cxx;  Quad8F.h;  Quad8FMain.cxx;  testMinimizer.cxx;  testNdimFit.cxx;  testUnbinGausFit.cxx;  testUserFunc.cxx;  ► mlp;  ► inc;  LinkDef.h;  TMLPAnalyzer.h;  TMultiLayerPerceptron.h;  TNeuron.h;  TSynapse.h;  ► src;  TMLPAnalyzer.cxx;  TMultiLayerPerceptron.cxx;  TNeuron.cxx;  TSynapse.cxx;  ► physics;  ► inc;  LinkDef.h;  TFeldmanCousins.h;  ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html606/files.html:54252,Simpl,SimplexSeedGenerator,54252,root/html606/files.html,https://root.cern,https://root.cern/root/html606/files.html,1,['Simpl'],['SimplexSeedGenerator']
Usability,"aRules(ROOT::TSchemaRuleSet* rules); voidTClass::AdoptStreamer(TClassStreamer* strm); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Int_tTClass::AutoBrowse(TObject* obj, TBrowser* browser); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTClass::Browse(TBrowser* b); Int_tTClass::Browse(void* obj, TBrowser* b) const; voidTClass::BuildEmulatedRealData(const char* name, Long_t offset, TClass* cl); voidTClass::BuildRealData(void* pointer = 0, Bool_t isTransient = kFALSE); voidTClass::CalculateStreamerOffset() const; Bool_tTClass::CallShowMembers(void* obj, TMemberInspector& insp, Int_t isATObject = -1) const; Bool_tTClass::CanIgnoreTObjectStreamer(); Bool_tTClass::CanSplit() const; virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TClass::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTNamed::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidTNamed::Copy(TObject& named) const; voidTClass::CopyCollectionProxy(const TVirtualCollectionProxy&); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTClass::DeleteArray(void* ary, Bool_t dtorOnly = kFALSE); virtual voidTQObject::Destroyed()SIGNAL ; voidTClass::Destructor(void* obj, Bool_t dtorOnly = kFALSE); Bool_tTQObject::Disconnect(co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TQClass.html:3011,Clear,Clear,3011,root/html532/TQClass.html,https://root.cern,https://root.cern/root/html532/TQClass.html,1,['Clear'],['Clear']
Usability,"aRules(ROOT::TSchemaRuleSet* rules); voidTClass::AdoptStreamer(TClassStreamer* strm); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Int_tTClass::AutoBrowse(TObject* obj, TBrowser* browser); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTClass::Browse(TBrowser* b); Int_tTClass::Browse(void* obj, TBrowser* b) const; voidTClass::BuildEmulatedRealData(const char* name, Long_t offset, TClass* cl); voidTClass::BuildRealData(void* pointer = 0, Bool_t isTransient = kFALSE); voidTClass::CalculateStreamerOffset() const; Bool_tTClass::CallShowMembers(void* obj, TMemberInspector& insp, Int_t isATObject = -1) const; Bool_tTClass::CanIgnoreTObjectStreamer(); Bool_tTClass::CanSplit() const; virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TClass::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTNamed::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidTNamed::Copy(TObject& named) const; voidTClass::CopyCollectionProxy(const TVirtualCollectionProxy&); voidTDictionary::CreateAttributeMap(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTClass::DeleteArray(void* ary, Bool_t dtorOnly = kFALSE); virtual voidTQObject::Destroyed()SIGNAL ; voidTClass::Destructor(void* obj, Bool_t dtorOnly =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TQClass.html:2975,Clear,Clear,2975,root/html534/TQClass.html,https://root.cern,https://root.cern/root/html534/TQClass.html,1,['Clear'],['Clear']
Usability,aScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development Git Primer. These links collect the minimal amount of knowledge about git a ROOT contributor needs to know:. Git How Tos; NoSY Workflow; Git Tips and Tricks; Creating a Pull Request. Quick Links; Jenkins Service; Jenkins How To; CDash; Coverity; Github; GitWeb; LXR; Jira; Conventions Violations; ROOT Logos; Upgrade of ROOTbinder. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/git-primer.html:2427,guid,guidelines,2427,d/git-primer.html,https://root.cern,https://root.cern/d/git-primer.html,1,['guid'],['guidelines']
Usability,"aSet(TEventList* test); Sets the Test dataset.; Those events will not be used for the minimization but for control. void SetTrainingDataSet(const char* train); Sets the Training dataset.; Those events will be used for the minimization.; Note that the tree must be already defined. void SetTestDataSet(const char* test); Sets the Test dataset.; Those events will not be used for the minimization but for control.; Note that the tree must be already defined. void SetLearningMethod(TMultiLayerPerceptron::ELearningMethod method); Sets the learning method.; Available methods are: kStochastic, kBatch,; kSteepestDescent, kRibierePolak, kFletcherReeves and kBFGS.; (look at the constructor for the complete description; of learning methods and parameters). void SetEta(Double_t eta); Sets Eta - used in stochastic minimisation; (look at the constructor for the complete description; of learning methods and parameters). void SetEpsilon(Double_t eps); Sets Epsilon - used in stochastic minimisation; (look at the constructor for the complete description; of learning methods and parameters). void SetDelta(Double_t delta); Sets Delta - used in stochastic minimisation; (look at the constructor for the complete description; of learning methods and parameters). void SetEtaDecay(Double_t ed); Sets EtaDecay - Eta *= EtaDecay at each epoch; (look at the constructor for the complete description; of learning methods and parameters). void SetTau(Double_t tau); Sets Tau - used in line search; (look at the constructor for the complete description; of learning methods and parameters). void SetReset(Int_t reset); Sets number of epochs between two resets of the; search direction to the steepest descent.; (look at the constructor for the complete description; of learning methods and parameters). void GetEntry(Int_t ) const; Load an entry into the network. void Train(Int_t nEpoch, Option_t* option = ""text"", Double_t minE = 0); Train the network.; nEpoch is the number of iterations.; option can contain:; -",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMultiLayerPerceptron.html:23943,learn,learning,23943,root/html528/TMultiLayerPerceptron.html,https://root.cern,https://root.cern/root/html528/TMultiLayerPerceptron.html,10,['learn'],['learning']
Usability,"aSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Bool_tcacheAlpha() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), const RooCmdArg arg5 = RooCmdArg::none(), const RooCmdArg arg6 = RooCmdArg:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooIntegralMorph.html:6341,clear,clearEvalErrorLog,6341,root/html526/RooIntegralMorph.html,https://root.cern,https://root.cern/root/html526/RooIntegralMorph.html,1,['clear'],['clearEvalErrorLog']
Usability,"aStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Bool_tcacheAlpha() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), const RooCmdArg arg5 = RooCmdArg::none(), const RooCmdArg arg6 = RooCmdArg::none(), const RooCmdArg arg7 = RooCmdArg::none(), const RooCmdArg arg8 = R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooIntegralMorph.html:6417,clear,clearValueDirty,6417,root/html526/RooIntegralMorph.html,https://root.cern,https://root.cern/root/html526/RooIntegralMorph.html,1,['clear'],['clearValueDirty']
Usability,"aStore& set); const set<std::string>&RooAbsArg::attributes() const; const RooFormulaVar&basis() const; virtual Int_tbasisCode(const char* name) const; const RooRealVar&basisConvVar() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidcleanup(); virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual RooResolutionModel*convolution(RooFormulaVar* basis, RooAbsArg* owner) const; RooRealVar&convVar() const; virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooResolutionModel.html:4193,clear,clearEvalError,4193,root/html526/RooResolutionModel.html,https://root.cern,https://root.cern/root/html526/RooResolutionModel.html,1,['clear'],['clearEvalError']
Usability,"aStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Double_tbufferFraction() const; RooFFTConvPdf::BufStratbufferStrategy() const; const RooArgSet&cacheObservables() const; virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooFFTConvPdf.html:7195,Clear,Clear,7195,root/html532/RooFFTConvPdf.html,https://root.cern,https://root.cern/root/html532/RooFFTConvPdf.html,1,['Clear'],['Clear']
Usability,"aTeX documents. PGF is a TeX macro package for generating graphics. It is platform; and format-independent and works together with the most important TeX; backend drivers, including pdftex and dvips. It comes with a; user-friendly syntax layer called TikZ. To generate a such file it is enough to do:. gStyle->SetPaperSize(10.,10.);; hpx->Draw();; gPad->Print(""hpx.tex"");. Then, the generated file (hpx.tex) can be included in a; LaTeX document (simple.tex) in the following way:. \documentclass{article}; \usepackage{tikz}; \usetikzlibrary{patterns}; \usetikzlibrary{plotmarks}; \title{A simple LaTeX example}; \date{July 2013}; \begin{document}; \maketitle; The following image as been generated using the TTeXDump class:; \par; \input{hpx.tex}; \end{document}. Note the three directives needed at the top of the LaTeX file:. \usepackage{tikz}; \usetikzlibrary{patterns}; \usetikzlibrary{plotmarks}. Then including the picture in the document is done with the; \input<\tt> directive.; The command pdflatex simple.tex will generate the; corresponding pdf file simple.pdf.; . Function Members (Methods); public:. TTeXDump(); TTeXDump(const char* filename, Int_t type = -113); virtual~TTeXDump(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual voidCellArrayBegin(Int_t W, Int_t H, Double_t x1, Double_t x2, Double_t y1, Double_t y2); virtual voidCellArrayEnd(); virtual voidCellArrayFill(Int_t r, Int_t g, Int_t b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidClose(Option_t* opt = """"); Int_tCMtoTeX(Double_t u); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; voidDefineMarkers(); virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, In",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTeXDump.html:1437,simpl,simple,1437,root/html534/TTeXDump.html,https://root.cern,https://root.cern/root/html534/TTeXDump.html,2,['simpl'],['simple']
Usability,"aTeX documents. PGF is a TeX macro package for generating graphics. It is platform; and format-independent and works together with the most important TeX; backend drivers, including pdftex and dvips. It comes with a; user-friendly syntax layer called TikZ. To generate a such file it is enough to do:. gStyle->SetPaperSize(10.,10.);; hpx->Draw();; gPad->Print(""hpx.tex"");. Then, the generated file (hpx.tex) can be included in a; LaTeX document (simple.tex) in the following way:. \documentclass{article}; \usepackage{tikz}; \usetikzlibrary{patterns}; \usetikzlibrary{plotmarks}; \title{A simple LaTeX example}; \date{July 2013}; \begin{document}; \maketitle; The following image as been generated using the TTeXDump class:; \par; \input{hpx.tex}; \end{document}. Note the three directives needed at the top of the LaTeX file:. \usepackage{tikz}; \usetikzlibrary{patterns}; \usetikzlibrary{plotmarks}. Then including the picture in the document is done with the; \input<\tt> directive.; The command pdflatex simple.tex will generate the; corresponding pdf file simple.pdf.; . Function Members (Methods); public:. virtual~TTeXDump(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual voidCellArrayBegin(Int_t W, Int_t H, Double_t x1, Double_t x2, Double_t y1, Double_t y2); virtual voidCellArrayEnd(); virtual voidCellArrayFill(Int_t r, Int_t g, Int_t b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidClose(Option_t* opt = """"); Int_tCMtoTeX(Double_t u); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; voidDefineMarkers(); virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTeXDump.html:1461,simpl,simple,1461,root/html602/TTeXDump.html,https://root.cern,https://root.cern/root/html602/TTeXDump.html,4,['simpl'],['simple']
Usability,"aWriter;  CTMonitor;  CTMPClientBase class for multiprocess applications' clients ;  CTMPWorkerThis class works in conjuction with TMPClient, reacting to messages received from it as specified by the Notify and HandleInput methods ;  CTMultiDimFitMultidimensional Fits in ROOT ;  CTMultiGraphA TMultiGraph is a collection of TGraph (or derived) objects ;  CTMultiLayerPerceptron;  CTMutex;  CTMutexImp;  CTMySQLResult;  CTMySQLRow;  CTMySQLServer;  ►CTMySQLStatement;  CTParamData;  CTNamedBase class for all named ROOT classes ;  CTNDArray;  CTNDArrayRef;  CTNDArrayT;  CTNetFile;  CTNetFileStager;  CTNetSystem;  CTNetXNGFile;  CTNetXNGFileStager;  CTNetXNGSystem;  CTNeuron;  CTNewChainDlg;  CTNewQueryDlg;  CTNodeTNode description ;  CTNodeDivDescription of parameters to divide a 3-D geometry object ;  CTNonCopyable;  CTNonSplitBrowsableAllows a TBrowser to browse non-split branches as if they were split ;  CTNtupleA simple TTree restricted to a list of float variables only ;  CTNtupleDA simple TTree restricted to a list of double variables only ;  CTObjArrayAn array of TObjects ;  CTObjArrayIterIterator of object array ;  CTObjectMother of all ROOT objects ;  CTObjectRefSpy;  CTObjectSet;  CTObjectSpyMonitors objects for deletion and reflects the deletion by reverting the internal pointer to zero ;  CTObjectTableThis class registers all instances of TObject and its derived classes in a hash table ;  CTObjLinkWrapper around a TObject so it can be stored in a TList ;  CTObjOptLink;  CTObjStringCollectable string class ;  CTOCCToStep;  CTODBCResult;  CTODBCRow;  CTODBCServer;  ►CTODBCStatement;  CODBCBufferRec_t;  CToolBarData_t;  CTOptionListItem;  CTOracleResult;  CTOracleRow;  CTOracleServer;  ►CTOracleStatement;  CTBufferRec;  CTOrdCollectionOrdered collection ;  CTOrdCollectionIterIterator of ordered collection ;  CTOutputListSelectorDataMap;  CTPackageDescription;  CTPacketizer;  CTPacketizerAdaptive;  CTPacketizerFile;  CTPacketizerMulti;  CTPacketizerUnit;  CTPadThe ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html606/annotated.html:144378,simpl,simple,144378,root/html606/annotated.html,https://root.cern,https://root.cern/root/html606/annotated.html,2,['simpl'],['simple']
Usability,"able rows to sort (=0 by default); = 0 means sort all rows from the ""firstRow"" by the end of table. TTableSorter(const Float_t* simpleArray, Int_t arraySize, Int_t firstRow = 0, Int_t numberRows = 0). TTableSorter ctor sort the input ""simpleArray"". - arraySize - the size of the full array; - firstRow - the first table row to sort from (=0 by default); - numberRows - the number of the table rows to sort (=0 by default); = 0 means sort all rows from the ""firstRow"" by the end of table. TTableSorter(const Double_t* simpleArray, Int_t arraySize, Int_t firstRow = 0, Int_t numberRows = 0). TTableSorter ctor sort the input ""simpleArray"". - arraySize - the size of the full array; - firstRow - the first table row to sort from (=0 by default); - numberRows - the number of the table rows to sort (=0 by default); = 0 means sort all rows from the ""firstRow"" by the end of table. TTableSorter(const Long_t* simpleArray, Int_t arraySize, Int_t firstRow = 0, Int_t numberRows = 0). TTableSorter ctor sort the input ""simpleArray"". - arraySize - the sie of the full array; - firstRow - the first table row to sort from (=0 by default); - numberRows - the number of the table rows to sort (=0 by default); = 0 means sort all rows from the ""firstRow"" by the end of table. void SetSimpleArray(Int_t arraySize, Int_t firstRow, Int_t numberRows); Set some common parameteres for the ""simple"" arrays. ~TTableSorter(); to be documented. Int_t BSearch(valuetype value). Int_t SelectSearch(valuetype value). Int_t BSearch(const void* value) const; to be documented. Int_t GetIndex(UInt_t sortedIndex) const; returns the original index of the row by its sorted index. Int_t CountKey(const void* key, Int_t firstIndx = 0, Bool_t bSearch = kTRUE, Int_t* firstRow = 0) const. CountKey counts the number of rows with the key value equal ""key"". key - it is a POINTER to the key value; fistIndx - the first index within sorted array to star search; = 0 by default; bSearch = kTRUE - binary search (by default) is used other",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTableSorter.html:17174,simpl,simpleArray,17174,root/html528/TTableSorter.html,https://root.cern,https://root.cern/root/html528/TTableSorter.html,10,['simpl'],['simpleArray']
Usability,"able::AnnihilateProjecteds(); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); Float_t*TAttBBox::AssertBBox(); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElementList*TEveElementList::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidComputeBBox(); virtual voidTNamed::Copy(TObject& named) const; virtual voidTEveElement::CopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); voidTEveElement::CSCApplyMainColorToAllChildren(); voidTEveElement::CSCApplyMainColorToMatchingChildren(); voidTEveElement::CSCApplyMainTransparencyToAllChildren(); voidTEveElement::CSCApplyMainTransparencyToMatchingChildren(); voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TEveProjectionManager.html:2564,Clear,ClearProjectedList,2564,root/html532/TEveProjectionManager.html,https://root.cern,https://root.cern/root/html532/TEveProjectionManager.html,4,['Clear'],['ClearProjectedList']
Usability,ableFrame::fContainer. protected . container containing dockable frame ; Definition at line 96 of file TGDockableFrame.h. ◆ fDeleted. Bool_t TGDockableFrame::fDeleted. protected . kTRUE if it is being deleted ; Definition at line 93 of file TGDockableFrame.h. ◆ fDockButton. TGDockButton* TGDockableFrame::fDockButton. protected . dock button ; Definition at line 98 of file TGDockableFrame.h. ◆ fDockName. TString TGDockableFrame::fDockName. protected . name of frame ; Definition at line 95 of file TGDockableFrame.h. ◆ fEnableHide. Bool_t TGDockableFrame::fEnableHide. protected . if frame can be hidden ; Definition at line 91 of file TGDockableFrame.h. ◆ fEnableUndock. Bool_t TGDockableFrame::fEnableUndock. protected . if frame can be undocked ; Definition at line 92 of file TGDockableFrame.h. ◆ fFixedSize. Bool_t TGDockableFrame::fFixedSize. protected . kTRUE if fixed size when undocked ; Definition at line 94 of file TGDockableFrame.h. ◆ fFrame. TGUndockedFrame* TGDockableFrame::fFrame. protected . undocked frame ; Definition at line 100 of file TGDockableFrame.h. ◆ fHidden. Bool_t TGDockableFrame::fHidden. protected . if frame is hidden ; Definition at line 90 of file TGDockableFrame.h. ◆ fHideButton. TGDockHideButton* TGDockableFrame::fHideButton. protected . hide button ; Definition at line 99 of file TGDockableFrame.h. ◆ fHints. TGLayoutHints* TGDockableFrame::fHints. protected . layout hints ; Definition at line 101 of file TGDockableFrame.h. ◆ fLb. TGLayoutHints* TGDockableFrame::fLb. protected . Definition at line 102 of file TGDockableFrame.h. ◆ fLc. TGLayoutHints * TGDockableFrame::fLc. protected . layout hints ; Definition at line 102 of file TGDockableFrame.h. Libraries for TGDockableFrame:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGDockableFrame.h; gui/gui/src/TGDockableFrame.cxx. TGDockableFrame. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:58 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGDockableFrame.html:40395,undo,undocked,40395,doc/master/classTGDockableFrame.html,https://root.cern,https://root.cern/doc/master/classTGDockableFrame.html,1,['undo'],['undocked']
Usability,"abled); are partially visible. void DrawSphere(const TGLVertex3& position, Double_t radius, const UChar_t* rgba); Draw sphere, centered on vertex 'position', with radius 'radius',; color 'rgba'. void DrawLine(const TGLLine3& line, TGLUtil::ELineHeadShape head, Double_t size, const UChar_t* rgba); Draw thick line (tube) defined by 'line', with head at end shape; 'head' - box/arrow/none, (head) size 'size', color 'rgba'. void DrawLine(const TGLVertex3& start, const TGLVector3& vector, TGLUtil::ELineHeadShape head, Double_t size, const UChar_t* rgba); Draw thick line (tube) running from 'start', length 'vector',; with head at end of shape 'head' - box/arrow/none,; (head) size 'size', color 'rgba'. void DrawRing(const TGLVertex3& center, const TGLVector3& normal, Double_t radius, const UChar_t* rgba); Draw ring, centered on 'center', lying on plane defined by 'center' & 'normal'; of outer radius 'radius', color 'rgba'. void DrawReferenceMarker(const TGLCamera& camera, const TGLVertex3& pos, Float_t radius = 3, const UChar_t* rgba = 0); Draw a sphere- marker on world-coordinate 'pos' with pixel; radius 'radius'. Color argument is optional. void DrawSimpleAxes(const TGLCamera& camera, const TGLBoundingBox& bbox, Int_t axesType); Draw simple xyz-axes for given bounding-box. void DrawNumber(const TString& num, const TGLVertex3& pos, Bool_t center = kFALSE); Draw number in string 'num' via internal 8x8-pixel bitmap on; vertex 'pos'. If 'center' is true, the number is centered on 'pos'.; Only numbers, '.', '-' and ' ' are supported. TGLColor& operator=(const TGLUtil& ). TGLUtil(const TGLUtil& ). virtual ~TGLUtil(); {}. » Author: Richard Maunder 25/05/2005 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id: TGLUtil.h 36560 2010-11-09 15:26:23Z couet $ » Last generated: 2010-11-09 17:12; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLUtil.html:10097,simpl,simple,10097,root/html528/TGLUtil.html,https://root.cern,https://root.cern/root/html528/TGLUtil.html,1,['simpl'],['simple']
Usability,"abled); are partially visible. void DrawSphere(const TGLVertex3& position, Double_t radius, const UChar_t* rgba); Draw sphere, centered on vertex 'position', with radius 'radius',; color 'rgba'. void DrawLine(const TGLLine3& line, TGLUtil::ELineHeadShape head, Double_t size, const UChar_t* rgba); Draw thick line (tube) defined by 'line', with head at end shape; 'head' - box/arrow/none, (head) size 'size', color 'rgba'. void DrawLine(const TGLVertex3& start, const TGLVector3& vector, TGLUtil::ELineHeadShape head, Double_t size, const UChar_t* rgba); Draw thick line (tube) running from 'start', length 'vector',; with head at end of shape 'head' - box/arrow/none,; (head) size 'size', color 'rgba'. void DrawRing(const TGLVertex3& center, const TGLVector3& normal, Double_t radius, const UChar_t* rgba); Draw ring, centered on 'center', lying on plane defined by 'center' & 'normal'; of outer radius 'radius', color 'rgba'. void DrawReferenceMarker(const TGLCamera& camera, const TGLVertex3& pos, Float_t radius = 3, const UChar_t* rgba = 0); Draw a sphere- marker on world-coordinate 'pos' with pixel; radius 'radius'. Color argument is optional. void DrawSimpleAxes(const TGLCamera& camera, const TGLBoundingBox& bbox, Int_t axesType); Draw simple xyz-axes for given bounding-box. void DrawNumber(const TString& num, const TGLVertex3& pos, Bool_t center = kFALSE); Draw number in string 'num' via internal 8x8-pixel bitmap on; vertex 'pos'. If 'center' is true, the number is centered on 'pos'.; Only numbers, '.', '-' and ' ' are supported. TGLColor& operator=(const TGLUtil& ). TGLUtil(const TGLUtil& ). virtual ~TGLUtil(); {}. » Author: Richard Maunder 25/05/2005 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id: TGLUtil.h 38817 2011-04-13 09:32:44Z couet $ » Last generated: 2011-07-04 15:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGLUtil.html:11016,simpl,simple,11016,root/html530/TGLUtil.html,https://root.cern,https://root.cern/root/html530/TGLUtil.html,1,['simpl'],['simple']
Usability,"abled); are partially visible. void DrawSphere(const TGLVertex3& position, Double_t radius, const UChar_t* rgba); Draw sphere, centered on vertex 'position', with radius 'radius',; color 'rgba'. void DrawLine(const TGLLine3& line, TGLUtil::ELineHeadShape head, Double_t size, const UChar_t* rgba); Draw thick line (tube) defined by 'line', with head at end shape; 'head' - box/arrow/none, (head) size 'size', color 'rgba'. void DrawLine(const TGLVertex3& start, const TGLVector3& vector, TGLUtil::ELineHeadShape head, Double_t size, const UChar_t* rgba); Draw thick line (tube) running from 'start', length 'vector',; with head at end of shape 'head' - box/arrow/none,; (head) size 'size', color 'rgba'. void DrawRing(const TGLVertex3& center, const TGLVector3& normal, Double_t radius, const UChar_t* rgba); Draw ring, centered on 'center', lying on plane defined by 'center' & 'normal'; of outer radius 'radius', color 'rgba'. void DrawReferenceMarker(const TGLCamera& camera, const TGLVertex3& pos, Float_t radius = 3, const UChar_t* rgba = 0); Draw a sphere- marker on world-coordinate 'pos' with pixel; radius 'radius'. Color argument is optional. void DrawSimpleAxes(const TGLCamera& camera, const TGLBoundingBox& bbox, Int_t axesType); Draw simple xyz-axes for given bounding-box. void DrawNumber(const TString& num, const TGLVertex3& pos, Bool_t center = kFALSE); Draw number in string 'num' via internal 8x8-pixel bitmap on; vertex 'pos'. If 'center' is true, the number is centered on 'pos'.; Only numbers, '.', '-' and ' ' are supported. TGLColor& operator=(const TGLUtil& ). TGLUtil(const TGLUtil& ). virtual ~TGLUtil(); {}. » Author: Richard Maunder 25/05/2005 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id: TGLUtil.h 38817 2011-04-13 09:32:44Z couet $ » Last generated: 2011-12-02 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGLUtil.html:11016,simpl,simple,11016,root/html532/TGLUtil.html,https://root.cern,https://root.cern/root/html532/TGLUtil.html,2,['simpl'],['simple']
Usability,"ace is ready for use. This way after a click on ‘axis’—the axis editor is active; a click on a ‘pad’ activates the pad editor, etc.; The algorithm in use is simple and is based on the object-oriented relationship and communication. When the user activates the editor, according to the selected object <obj> in the canvas it looks for a class name <obj>Editor. For that reason, the correct naming is very important. If a class with this name is found, the editor verifies that this class derives from the base editor class TGedFrame. If all checks are satisfied, the editor makes an instance of the object editor. Then, it scans all object base classes searching the corresponding object editors. When it finds one, it makes an instance of the base class editor too.; Once the object editor is in place, it sets the user interface elements according to the object’s status. After that, it is ready to interact with the object following the user actions.; The graphics editor gives an intuitive way to edit objects in a canvas with immediate feedback. Complexity of some object editors is reduced by hiding GUI elements and revealing them only on users’ requests.; An object in the canvas is selected by clicking on it with the left mouse button. Its name is displayed on the top of the editor frame in red color. If the editor frame needs more space than the canvas window, a vertical scroll bar appears for easy navigation. Histogram, pad and axis editors. 25.9.2 Editor Design Elements; The next rules describe the path to follow when creating your own object editor that will be recognized and loaded by the graphics editor in ROOT, i.e. it will be included as a part of it. Derive the code of your object editor from the base editor class TGedFrame.; Keep the correct naming convention: the name of the object editor should be the object class name concatenated with the word ‘Editor'.; Provide a default constructor.; Use the signals/slots communication mechanism for event processing.; Implement ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1223019,intuit,intuitive,1223019,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,4,"['feedback', 'intuit']","['feedback', 'intuitive']"
Usability,"aced by '->'; and. Branch_Name[index1].Leaf_Name[index2]; Leaf_name[index].Action().OtherAction(param); Leaf_name[index].Action()[val].OtherAction(param). The expected returned values are; -2 : the name has been recognized but won't be usable; -1 : the name has not been recognized, or is too long, or tree does not exist.; >=0 : the name has been recognized, return the internal code for this name. . Reimplemented from ROOT::v5::TFormula.; Definition at line 2698 of file TTreeFormula.cxx. ◆ EvalClass() [1/2]. TClass * TTreeFormula::EvalClass ; (; ); const. virtual . Evaluate the class of this treeformula. ; If the 'value' of this formula is a simple pointer to an object, this function returns the TClass corresponding to its type. ; Definition at line 3597 of file TTreeFormula.cxx. ◆ EvalClass() [2/2]. TClass * TTreeFormula::EvalClass ; (; Int_t ; oper); const. protectedvirtual . Evaluate the class of the operation oper. ; If the 'value' in the requested operation is a simple pointer to an object, this function returns the TClass corresponding to its type. ; Definition at line 3610 of file TTreeFormula.cxx. ◆ EvalInstance() [1/2]. template<typename T > . T TTreeFormula::EvalInstance ; (; Int_t ; instance = 0, . const char * ; stringStackArg[] = nullptr . ). Evaluate this treeformula. ; Template Parameters. TThe type used to interpret the numbers then used for the operations . Parameters. instanceiteration instance ; stringStackArgformula as string . Returnsthe result of the evaluation ; Definition at line 3977 of file TTreeFormula.cxx. ◆ EvalInstance() [2/2]. virtual Double_t TTreeFormula::EvalInstance ; (; Int_t ; i = 0, . const char * ; stringStack[] = nullptr . ). inlinevirtual . Double_t template specialization of EvalInstance. ; Definition at line 182 of file TTreeFormula.h. ◆ EvalInstance64(). virtual Long64_t TTreeFormula::EvalInstance64 ; (; Int_t ; i = 0, . const char * ; stringStack[] = nullptr . ). inlinevirtual . Long64_t template specialization of EvalInst",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeFormula.html:37088,simpl,simple,37088,doc/master/classTTreeFormula.html,https://root.cern,https://root.cern/doc/master/classTTreeFormula.html,1,['simpl'],['simple']
Usability,"ache of another RooAbsArg to our cache. void printMultiline(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; Structure printing. void randomize(const char* rangeName); Set a new value sampled from a uniform distribution over the fit range.; Prints a warning and does nothing if the fit range is not finite. void setBin(Int_t ibin, const char* rangeName); Set value to center of bin 'ibin' of binning 'rangeName' (or of; default binning if no range is specified). void setBin(Int_t ibin, const RooAbsBinning& binning); Set value to center of bin 'ibin' of binning 'binning'. void randomize(const RooAbsBinning& binning); Set a new value sampled from a uniform distribution over the fit range.; Prints a warning and does nothing if the fit range is not finite. void setBinFast(Int_t ibin, const RooAbsBinning& binning); Set value to center of bin 'ibin' of binning 'rangeName' (or of; default binning if no range is specified). Bool_t fitRangeOKForPlotting() const; Check if fit range is usable as plot range, i.e. it is neither; open ended, nor empty. Bool_t inRange(const char* name) const; Check if current value is inside range with given name. TH1* createHistogram(const char* name, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()) const; Create an empty ROOT histogram TH1,TH2 or TH3 suitabe to store information represent by the RooAbsRealLValue. This function accepts the following arguments. name -- Name of the ROOT histogram. Binning(const char* name) -- Apply binning with given name to x axis of histogram; Binning(RooAbsBinning& binning) -- Apply specified binning to x axis of histogram; Binning(int_t nbins) -- Apply specified binning to x axis of histogram; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsRealLValue.html:40724,usab,usable,40724,root/html526/RooAbsRealLValue.html,https://root.cern,https://root.cern/root/html526/RooAbsRealLValue.html,1,['usab'],['usable']
Usability,"ack. ;  ;  Public Member Functions inherited from TQCommand;  TQCommand (const char *cl=nullptr, void *object=nullptr, const char *redo=nullptr, const char *undo=nullptr);  Constructor. ;  ;  TQCommand (const TQCommand &com);  Copy constructor. ;  ;  TQCommand (TObject *obj, const char *redo=nullptr, const char *undo=nullptr);  Constructor. ;  ; virtual ~TQCommand ();  dtor. ;  ; virtual Bool_t CanCompress (TQCommand *c) const;  By default, commands can be compressed if they are: ;  ; virtual Bool_t CanMerge (TQCommand *c) const;  Two commands can be merged if they can be composed into a single command (Macro command). ;  ; virtual void Compress (TQCommand *c);  Compress command. ;  ; void Delete (Option_t *option="""") override;  If ""opt"" is not zero delete every merged command which option string is equal to ""opt"". ;  ; const char * GetName () const override;  Returns the command name. ;  ; Int_t GetNRargs () const;  Returns a number of redo arguments. ;  ; Int_t GetNUargs () const;  Returns a number of undo arguments. ;  ; void * GetObject () const;  Returns an object for which undo redo actions are applied. ;  ; TQConnection * GetRedo () const;  ; Long_t * GetRedoArgs () const;  Returns a pointer to array of redo arguments. ;  ; const char * GetRedoName () const;  Returns the name of redo command. ;  ; Int_t GetStatus () const;  Returns a number of sequential undo or redo operations. ;  ; const char * GetTitle () const override;  Returns command description. ;  ; TQConnection * GetUndo () const;  ; Long_t * GetUndoArgs () const;  Returns a pointer to array of undo arguments. ;  ; const char * GetUndoName () const;  Returns the name of undo command. ;  ; Bool_t IsEqual (const TObject *obj) const override;  Equal comparison. ;  ; Bool_t IsExecuting () const;  Returns kTRUE if command execution is in progress. ;  ; Bool_t IsMacro () const;  Returns kTRUE if neither redo nor undo action specified. ;  ; Bool_t IsRedoing () const;  Redo action is in progress. ;  ; virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQUndoManager.html:2926,undo,undo,2926,doc/master/classTQUndoManager.html,https://root.cern,https://root.cern/doc/master/classTQUndoManager.html,1,['undo'],['undo']
Usability,"ack< Internal::TStdBitsetHelper< Bitset_t > >;  CPushback< std::vector< bool > >;  CPushfront;  CSfinaeHelper;  CType;  ►CType< Internal::TStdBitsetHelper< Bitset_t > >;  ►CIterators;  CPtrSize_t;  ►CType< std::vector< Bool_t > >;  CIterators;  CTHistImpl;  CTHistImplBaseInterface class for THistImpl ;  CTHistImplPrecisionAgnosticBaseBase class for THistImplBase that abstracts out the histogram's PRECISION ;  ►CTSchemaRuleSet;  CTMatches;  ►NFitNamespace for the fitting classes ;  CBasicFCNBasicFCN class: base class for the objective functions used in the fits It has a reference to the data and th emodel function used in the fit ;  CBinDataClass describing the binned data sets : vectors of x coordinates, y values and optionally error on y values and error on coordinates The dimension of the coordinate is free There are 4 different options: ;  CBinPointObsolete class, no more in use ;  CChi2FCNChi2FCN class for binnned fits using the least square methods ;  CDataOptionsDataOptions : simple structure holding the options on how the data are filled ;  CDataRangeClass describing the range in the coordinates it supports multiple range in a coordinate ;  CDataVectorClass holding the fit data points ;  CDataWrapperClass maintaining a pointer to external data Using this class avoids copying the data when performing a fit NOTE: this class is not thread-safe and should not be used in parallel fits ;  CDummyDeleter;  CFcnAdapter;  CFitConfigClass describing the configuration of the fit, options and parameter settings using the ROOT::Fit::ParameterSettings class ;  CFitDataBase class for all the fit data types ;  CFitResultClass containg the result of the fit and all the related information (fitted parameter values, error, covariance matrix and minimizer result information) Contains a pointer also to the fitted (model) function, modified with the fit parameter values ;  CFitterFitter class, entry point for performing all type of fits ;  CLogLikelihoodFCNLogLikelihoodFCN class for",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html606/annotated.html:11763,simpl,simple,11763,root/html606/annotated.html,https://root.cern,https://root.cern/root/html606/annotated.html,2,['simpl'],['simple']
Usability,"ackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoMediumEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for medium editor. ~TGeoMediumEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the selected object. void DoEditMaterial(); Edit selected material. void DoMedName(); Slot for medium name. void DoMedId(); Slot for medium id. void DoSelectMaterial(); Select the material component. void DoToggleSensitive(); Slot for sensitivity. void DoMagfldSelect(Int_t ientry); Slot for mag. field. void DoFieldm(); Slot for max field. void DoTmaxfd(); Slot for tmaxfd. void DoStemax(); Slot for the max allowed step. void DoDeemax(); Slot for the maximum allowed dedx. void DoEpsil(); Slot for tracking precision. void DoStmin(); Slot for min. step. void DoApply(); Slot for applying modifications. void DoUndo(); Slot for undoing last operation. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id$ » Last generated: 2015-03-14 16:39; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoMediumEditor.html:22153,undo,undoing,22153,root/html534/TGeoMediumEditor.html,https://root.cern,https://root.cern/root/html534/TGeoMediumEditor.html,2,['undo'],['undoing']
Usability,"ack_tag = """"); Float_t*TAttBBox::AssertBBox(); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; static voidCheckAndFixBoxOrientationEv(TEveVector* box); static voidCheckAndFixBoxOrientationFv(Float_t** box); virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElementList*TEveElementList::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTAttBBox::ComputeBBox(); virtual voidTNamed::Copy(TObject& named) const; virtual voidCopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); voidTEveElement::CSCApplyMainColorToAllChildren(); voidTEveElement::CSCApplyMainColorToMatchingChildren(); voidTEveElement::CSCApplyMainTransparencyToAllChildren(); voidTEveElement::CSCApplyMainTransparencyToMatchingChildren(); voidTEveElement::CSCImplySelectAllChildren(); voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TEveShape.html:2729,Clear,ClearStamps,2729,root/html532/TEveShape.html,https://root.cern,https://root.cern/root/html532/TEveShape.html,2,['Clear'],['ClearStamps']
Usability,"ackages needed for your platform.; ; . How to use ROOT libraries in Xcode on Mac OS X? . The easiest way is to use cmake and let it create the Xcode project, this has the advantage that the dictionaries are created automatically. The CMakeLists.txt file will define the libraries and executables to be added to the Xcode project. An example from the ROOT Event example (found in root/test) can be downloaded here. Just un-tar the attached file and run. cd event/build; cmake -G Xcode ..; xcodebuild. This will create an Xcode project event.xcodeproj which can be opened and used by Xcode. ; . How to check if a file is already open? . if (gROOT->GetListOfFiles()->FindObject(filename) ) {; // do not open the file; } else {; // open the file; }; ; . Some or all windows don't get displayed when ROOT is running on a remote computer. . You probably used ssh to connect to the remote computer. You need to specify the option ""-Y"" which turns on trusted X11 forwarding.Some or all windows don't get displayed when ROOT is running on a remote computer. ; . How to change the automatic plot title produced when a tree is drawn? . It is enough to change the title of the histogram htemp: ; tree.Draw(""x:y"");; htemp.SetTitle(""New Title"");; ; . How to draw several TGraph in one common axis system? . Use TMultiGraph. ; ; . Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/faq-page.html:8387,guid,guidelines,8387,d/faq-page.html,https://root.cern,https://root.cern/d/faq-page.html,1,['guid'],['guidelines']
Usability,"acks.reserve(nPart);; for (int j = 0; j < nPart; ++j) {; const auto px = R.Gaus(0, 10);; const auto py = R.Gaus(0, 10);; const auto pt = sqrt(px * px + py * py);; const auto eta = R.Uniform(-3, 3);; const auto phi = R.Uniform(0.0, 2 * TMath::Pi());; CylFourVector vcyl(pt, eta, phi);; // set energy; auto E = sqrt(vcyl.R() * vcyl.R() + M * M);; // fill track vector; tracks.emplace_back(vcyl.X(), vcyl.Y(), vcyl.Z(), E);; }; return tracks;; };; ; ROOT::RDataFrame d(64);; d.Define(""tracks"", genTracks).Snapshot<FourVectorVec>(treeName, filename, {""tracks""});; }; '''; ; # We prepare an input tree to run on; fileName = ""df002_dataModel_py.root""; treeName = ""myTree""; ROOT.gInterpreter.Declare(fill_tree_code); ROOT.fill_tree(fileName, treeName); ; # We read the tree from the file and create a RDataFrame, a class that; # allows us to interact with the data contained in the tree.; d = ROOT.RDataFrame(treeName, fileName); ; # Operating on branches which are collections of objects; # Here we deal with the simplest of the cuts: we decide to accept the event; # only if the number of tracks is greater than 8.; n_cut = 'tracks.size() > 8'; nentries = d.Filter(n_cut).Count();; ; print(""%s events passed all filters"" % nentries.GetValue()); ; # Another possibility consists in creating a new column containing the; # quantity we are interested in.; # In this example, we will cut on the number of tracks and plot their; # transverse momentum.; ; getPt_code ='''; using namespace ROOT::VecOps;; ROOT::RVecD getPt(const RVec<FourVector> &tracks); {; auto pt = [](const FourVector &v) { return v.pt(); };; return Map(tracks, pt);; }; '''; ROOT.gInterpreter.Declare(getPt_code); ; getPtWeights_code ='''; using namespace ROOT::VecOps;; ROOT::RVecD getPtWeights(const RVec<FourVector> &tracks); {; auto ptWeight = [](const FourVector &v) { return 1. / v.Pt(); };; return Map(tracks, ptWeight);; };; '''; ROOT.gInterpreter.Declare(getPtWeights_code); ; augmented_d = d.Define('tracks_n', '(int)tracks.size()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df002__dataModel_8py.html:2006,simpl,simplest,2006,doc/master/df002__dataModel_8py.html,https://root.cern,https://root.cern/doc/master/df002__dataModel_8py.html,1,['simpl'],['simplest']
Usability,"actly one StreamerInfo record, which is written to disk automatically when a new or modified file is closed.; The StreamerInfo record is a list (ROOTIO class TList) of ""StreamerInfo"" objects (ROOTIO class TStreamerInfo). There is one StreamerInfo object in the list for every class used in the file in a data record, other than a core layer record. There is no streamerinfo object for a class used in a core layer record unless the class is also used elsewhere in a data record. When reading a self-identifying object from a file, the system uses the StreamerInfo list to decompose the object recursively into its simple data members.; Each streamerinfo object is an array of ""streamer element"" objects, each of which describes a base class of the object or a (non-static and non-transient) data member of the object. If the base class or data member is itself a class, then there will also be a streamerinfo object in the record for that class. In this way, each class is recursively decomposed into its atomic elements, each of which is a simple type (e.g. ""int""). A ""long"" or ""unsigned long"" member is always written as an 8 byte quantity, even if it occupies only 4 bytes in memory.; A data member of a class is marked transient on the line of its declaration by a comment beginning with ""//!"". Such members are not written to disk, nor is there any streamerinfo for such a member.; A data member that is a C++ pointer (not to be confused with ""pointers to persistent; objects"" described below) is never written to disk as a pointer value. If it is a pointer to an object, the object itself (or 0 (4 bytes) if the pointer value is NULL) is written. If the declaration line has a comment beginning with ""//->"", this indicates that the pointer value will never be null, which allows a performance optimization. Another optimization is that if two or more pointers pointing to the same object are streamed in the same I/O operation, the object is written only once. The remaining pointers reference t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rootio.html:7798,simpl,simple,7798,doc/master/rootio.html,https://root.cern,https://root.cern/doc/master/rootio.html,1,['simpl'],['simple']
Usability,"actory : Training finished; : ; Factory : Train method: MLPBNN for Classification; : ; : ; : ␛[1m================================================================␛[0m; : ␛[1mH e l p f o r M V A m e t h o d [ MLPBNN ] :␛[0m; : ; : ␛[1m--- Short description:␛[0m; : ; : The MLP artificial neural network (ANN) is a traditional feed-; : forward multilayer perceptron implementation. The MLP has a user-; : defined hidden layer architecture, while the number of input (output); : nodes is determined by the input variables (output classes, i.e., ; : signal and one background). ; : ; : ␛[1m--- Performance optimisation:␛[0m; : ; : Neural networks are stable and performing for a large variety of ; : linear and non-linear classification problems. However, in contrast; : to (e.g.) boosted decision trees, the user is advised to reduce the ; : number of input variables that have only little discrimination power. ; : ; : In the tests we have carried out so far, the MLP and ROOT networks; : (TMlpANN, interfaced via TMVA) performed equally well, with however; : a clear speed advantage for the MLP. The Clermont-Ferrand neural ; : net (CFMlpANN) exhibited worse classification performance in these; : tests, which is partly due to the slow convergence of its training; : (at least 10k training cycles are required to achieve approximately; : competitive results).; : ; : ␛[1mOvertraining: ␛[0monly the TMlpANN performs an explicit separation of the; : full training sample into independent training and validation samples.; : We have found that in most high-energy physics applications the ; : available degrees of freedom (training events) are sufficient to ; : constrain the weights of the relatively simple architectures required; : to achieve good performance. Hence no overtraining should occur, and ; : the use of validation samples would only reduce the available training; : information. However, if the performance on the training sample is ; : found to be significantly better than the one found",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C.html:42572,clear,clear,42572,doc/master/TMVAClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C.html,1,['clear'],['clear']
Usability,"ad of being spread; across the file. However it might decrease the performance when; reading more branches (or the full entry). When using SortBasketsByEntry the baskets with the lowest starting; entry are written first. (i.e. the baskets are sorted by the; index/number of the first entry they contain). This means that on; the file the baskets will be in the order in which they will be; needed when reading the whole tree sequentially. For examples of CloneTree, see tutorials:. -- copytree. A macro to copy a subset of a TTree to a new TTree. The input file has been generated by the program in; $ROOTSYS/test/Event with: Event 1000 1 1 1. -- copytree2. A macro to copy a subset of a TTree to a new TTree. One branch of the new Tree is written to a separate file. The input file has been generated by the program in; $ROOTSYS/test/Event with: Event 1000 1 1 1. void CopyAddresses(TTree* , Bool_t undo = kFALSE); Set branch addresses of passed tree equal to ours.; If undo is true, reset the branch address instead of copying them.; This insures 'separation' of a cloned tree from its original. Long64_t CopyEntries(TTree* tree, Long64_t nentries = -1, Option_t* option = """"); Copy nentries from given tree to this tree.; This routines assumes that the branches that intended to be copied are; already connected. The typical case is that this tree was created using; tree->CloneTree(0). By default copy all entries. Returns number of bytes copied to this tree. If 'option' contains the word 'fast' and nentries is -1, the cloning will be; done without unzipping or unstreaming the baskets (i.e., a direct copy of the; raw bytes on disk). When 'fast' is specified, 'option' can also contains a sorting order for the; baskets in the output file. There are currently 3 supported sorting order:; SortBasketsByOffset (the default); SortBasketsByBranch; SortBasketsByEntry. See TTree::CloneTree for a detailed explanation of the semantics of these 3 options. If the tree or any of the underlying tree of",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTree.html:63174,undo,undo,63174,root/html534/TTree.html,https://root.cern,https://root.cern/root/html534/TTree.html,6,['undo'],['undo']
Usability,"ad* pad, TObject* obj); virtual~TFitEditor(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCloseWindow(); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidConnectSlots(); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(); Bool_tTQO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TFitEditor.html:5488,Clear,Clear,5488,root/html532/TFitEditor.html,https://root.cern,https://root.cern/root/html532/TFitEditor.html,2,['Clear'],['Clear']
Usability,"adMemberWise); 782 fReadMemberWise->Clear();; 783 delete fWriteMemberWise;; 784 fWriteMemberWise = nullptr;; 785 if (fConversionReadMemberWise); 786 fConversionReadMemberWise->clear();; 787 return kTRUE;; 788}; 789 ; 790////////////////////////////////////////////////////////////////////////////////; 791/// Check existence of function pointers; 792 ; 793void TGenCollectionProxy::CheckFunctions() const; 794{; 795 if ( 0 == fSize.call ) {; 796 Fatal(""TGenCollectionProxy"",""No 'size' function pointer for class %s present."",fName.c_str());; 797 }; 798 if ( 0 == fResize ) {; 799 Fatal(""TGenCollectionProxy"",""No 'resize' function for class %s present."",fName.c_str());; 800 }; 801 if ( 0 == fNext.call ) {; 802 Fatal(""TGenCollectionProxy"",""No 'next' function for class %s present."",fName.c_str());; 803 }; 804 if ( 0 == fFirst.call ) {; 805 Fatal(""TGenCollectionProxy"",""No 'begin' function for class %s present."",fName.c_str());; 806 }; 807 if ( 0 == fClear.call ) {; 808 Fatal(""TGenCollectionProxy"",""No 'clear' function for class %s present."",fName.c_str());; 809 }; 810 if ( 0 == fConstruct ) {; 811 Fatal(""TGenCollectionProxy"",""No 'block constructor' function for class %s present."",fName.c_str());; 812 }; 813 if ( 0 == fDestruct ) {; 814 Fatal(""TGenCollectionProxy"",""No 'block destructor' function for class %s present."",fName.c_str());; 815 }; 816 if ( 0 == fFeed ) {; 817 Fatal(""TGenCollectionProxy"",""No 'data feed' function for class %s present."",fName.c_str());; 818 }; 819 if ( 0 == fCollect ) {; 820 Fatal(""TGenCollectionProxy"",""No 'data collect' function for class %s present."",fName.c_str());; 821 }; 822 if (0 == fCreateEnv.call ) {; 823 Fatal(""TGenCollectionProxy"",""No 'environment creation' function for class %s present."",fName.c_str());; 824 }; 825}; 826 ; 827////////////////////////////////////////////////////////////////////////////////; 828/// Utility routine to issue a Fatal error is the Value object is not valid; 829 ; 830static TGenCollectionProxy::Value *R__CreateValue(c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html:24902,clear,clear,24902,doc/master/TGenCollectionProxy_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html,1,['clear'],['clear']
Usability,"adNumber of bytes read by basket to fill cached tree; Int_tTFileCacheRead::fNoCacheReadCallsNumber of read calls by basket to fill cached tree; Int_tTFileCacheRead::fNseekNumber of blocks to be prefetched; Int_tTFileCacheRead::fNtotTotal size of prefetched blocks; Bool_tfOneTime! used in the learning phase; Long64_t*TFileCacheRead::fPos[fNb] start of long buffers; TFilePrefetch*TFileCacheRead::fPrefetch! Object that does the asynchronous reading in another thread; Long64_tTFileCacheRead::fPrefetchedBlocksNumber of blocks prefetched.; TTreeCache::EPrefillTypefPrefillTypeWhether a prefilling is enabled (and if applicable which type); Int_tTFileCacheRead::fReadCallsNumber of read calls for this cache; Bool_tfReadDirectionSet! read direction established; Bool_tfReverseRead! reading in reverse mode; Long64_t*TFileCacheRead::fSeek[fNseek] Position on file of buffers to be prefetched; Int_t*TFileCacheRead::fSeekIndex[fNseek] sorted index table of fSeek; Int_t*TFileCacheRead::fSeekLen[fNseek] Length of buffers to be prefetched; Int_t*TFileCacheRead::fSeekPos[fNseek] Position of sorted blocks in fBuffer; Int_tTFileCacheRead::fSeekSizeAllocated size of fSeek; Long64_t*TFileCacheRead::fSeekSort[fNseek] Position on file of buffers to be prefetched (sorted); Int_t*TFileCacheRead::fSeekSortLen[fNseek] Length of buffers to be prefetched (sorted); TTree*fTree! pointer to the current Tree; static Int_tfgLearnEntriesnumber of entries used for learning mode. Class Charts. Inheritance Chart:. TObject. ←; TFileCacheRead. ←; TTreeCache. ←. TTreeCacheUnzip. Function documentation; TTreeCache(); Default Constructor. TTreeCache(TTree* tree, Int_t buffersize = 0); Constructor. ~TTreeCache(); destructor. (in general called by the TFile destructor). Int_t AddBranch(TBranch* b, Bool_t subgbranches = kFALSE); add a branch to the list of branches to be stored in the cache; this function is called by TBranch::GetBasket; Returns 0 branch added or already included; -1 on error. Int_t AddBranch(const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TTreeCache.html:21782,learn,learning,21782,root/html604/TTreeCache.html,https://root.cern,https://root.cern/root/html604/TTreeCache.html,2,['learn'],['learning']
Usability,"adNumber of bytes read by basket to fill cached tree; Int_tTFileCacheRead::fNoCacheReadCallsNumber of read calls by basket to fill cached tree; Int_tTFileCacheRead::fNseekNumber of blocks to be prefetched; Int_tTFileCacheRead::fNtotTotal size of prefetched blocks; Bool_tfOneTime! used in the learning phase; Long64_t*TFileCacheRead::fPos[fNb] start of long buffers; TFilePrefetch*TFileCacheRead::fPrefetch! Object that does the asynchronous reading in another thread; Long64_tTFileCacheRead::fPrefetchedBlocksNumber of blocks prefetched.; TTreeCache::EPrefillTypefPrefillTypeWhether a prefilling is enabled (and if applicable which type); Int_tTFileCacheRead::fReadCallsNumber of read calls for this cache; Bool_tfReadDirectionSet! read direction established; Bool_tfReverseRead! reading in reverse mode; Long64_t*TFileCacheRead::fSeek[fNseek] Position on file of buffers to be prefetched; Int_t*TFileCacheRead::fSeekIndex[fNseek] sorted index table of fSeek; Int_t*TFileCacheRead::fSeekLen[fNseek] Length of buffers to be prefetched; Int_t*TFileCacheRead::fSeekPos[fNseek] Position of sorted blocks in fBuffer; Int_tTFileCacheRead::fSeekSizeAllocated size of fSeek; Long64_t*TFileCacheRead::fSeekSort[fNseek] Position on file of buffers to be prefetched (sorted); Int_t*TFileCacheRead::fSeekSortLen[fNseek] Length of buffers to be prefetched (sorted); TTree*fTree! pointer to the current Tree; static Int_tfgLearnEntriesnumber of entries used for learning mode. Class Charts. Inheritance Chart:. TObject. ←; TFileCacheRead. ←; TTreeCache. ←. TTreeCacheUnzip. Function documentation; TTreeCache(); Default Constructor. TTreeCache(TTree* tree, Int_t buffersize = 0); Constructor. ~TTreeCache(); destructor. (in general called by the TFile destructor). void AddBranch(TBranch* b, Bool_t subgbranches = kFALSE); add a branch to the list of branches to be stored in the cache; this function is called by TBranch::GetBasket. void AddBranch(const char* branch, Bool_t subbranches = kFALSE); Add a branch to",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTreeCache.html:21679,learn,learning,21679,root/html602/TTreeCache.html,https://root.cern,https://root.cern/root/html602/TTreeCache.html,2,['learn'],['learning']
Usability,"addPoint (histoName, x, y); } ///< for monitoring; 823 void plot (std::string histoName, std::string options, int pad, EColor color) { if (fMonitoring) fMonitoring->plot (histoName, options, pad, color); } ///< for monitoring; 824 void clear (std::string histoName) { if (fMonitoring) fMonitoring->clear (histoName); } ///< for monitoring; 825 bool exists (std::string histoName) { if (fMonitoring) return fMonitoring->exists (histoName); return false; } ///< for monitoring; 826 ; 827 size_t convergenceCount () const { return m_convergenceCount; } ///< returns the current convergence count; 828 size_t maxConvergenceCount () const { return m_maxConvergenceCount; } ///< returns the max convergence count so far; 829 size_t minError () const { return m_minError; } ///< returns the smallest error so far; 830 ; 831 public:; 832 Timer m_timer; ///< timer for monitoring; 833 double m_minProgress; ///< current limits for the progress bar; 834 double m_maxProgress; ///< current limits for the progress bar; 835 ; 836 ; 837 size_t m_convergenceSteps; ///< number of steps without improvement to consider the DNN to have converged; 838 size_t m_batchSize; ///< mini-batch size; 839 size_t m_testRepetitions;; 840 double m_factorWeightDecay;; 841 ; 842 size_t count_E;; 843 size_t count_dE;; 844 size_t count_mb_E;; 845 size_t count_mb_dE;; 846 ; 847 EnumRegularization m_regularization;; 848 ; 849 double m_dropRepetitions;; 850 std::vector<double> m_dropOut;; 851 ; 852 double fLearningRate;; 853 double fMomentum;; 854 int fRepetitions;; 855 MinimizerType fMinimizerType;; 856 ; 857 size_t m_convergenceCount;; 858 size_t m_maxConvergenceCount;; 859 double m_minError;; 860 ; 861 ; 862 protected:; 863 bool m_useMultithreading;; 864 ; 865 std::shared_ptr<Monitoring> fMonitoring;; 866 };; 867 ; 868 ; 869 ; 870 ; 871 ; 872 ; 873 ; 874 ; 875 ; 876 ; 877 ; 878 ; 879 ; 880 ; 881 ; 882 ; 883 ; 884 ; 885 ; 886 ; 887 ; 888 ; 889 ; 890 /*! \brief Settings for classification; 891 *; 892 * contains additio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8h_source.html:32133,progress bar,progress bar,32133,doc/master/NeuralNet_8h_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html,1,['progress bar'],['progress bar']
Usability,"additional topics or on the topics that need more documentation. Please send your comments, corrections, questions, and suggestions to the rootdoc list: rootdoc@cern.ch; We attempt to give the user insight into the many capabilities of ROOT. The book begins with the elementary functionality and progresses in complexity reaching the specialized topics at the end. The experienced user looking for special topics may find these chapters useful: see “Networking”, “Writing a Graphical User Interface”, “Threads”, and “PROOF: Parallel Processing”.; 1.3 Conventions Used in This Book; We tried to follow a style convention for the sake of clarity. The styles in used are described below.; To show source code in scripts or source files:; {; cout << "" Hello"" << endl;; float x = 3.;; float y = 5.;; int i = 101;; cout <<"" x = ""<<x<<"" y = ""<<y<<"" i = ""<<i<< endl;; }; To show the ROOT command line, we show the ROOT prompt without numbers. In the interactive system, the ROOT prompt has a line number (root[12]); for the sake of simplicity, the line numbers are left off.; root[] TLine l; root[] l.Print(); TLine X1=0.000000 Y1=0.000000 X2=0.000000 Y2=0.000000; Italic bold monotype font indicates a global variable, for example gDirectory.; When a variable term is used, it is shown between angled brackets. In the example below the variable term <library> can be replaced with any library in the $ROOTSYS directory: $ROOTSYS/<library>/inc.; 1.4 The Framework; ROOT is an object-oriented framework aimed at solving the data analysis challenges of high-energy physics. There are two key words in this definition, object oriented and framework. First, we explain what we mean by a framework and then why it is an object-oriented framework.; 1.4.1 What Is a Framework?; Programming inside a framework is a little like living in a city. Plumbing, electricity, telephone, and transportation are services provided by the city. In your house, you have interfaces to the services such as light switches, electric",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:9861,simpl,simplicity,9861,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['simpl'],['simplicity']
Usability,"ading whitespace; 7781 if (tok.IsNull() && delimiter == ' ') {; 7782 // 1 2 should not be interpreted as 1,,,2 but 1, 2.; 7783 // Thus continue until we have a non-empty token.; 7784 continue;; 7785 }; 7786 ; 7787 if (!remainingLeafLen) {; 7788 // next branch!; 7789 branch = (TBranch*)fBranches.At(iBranch);; 7790 }; 7791 TLeaf *leaf = (TLeaf*)branch->GetListOfLeaves()->At(0);; 7792 if (!remainingLeafLen) {; 7793 remainingLeafLen = leaf->GetLen();; 7794 if (leaf->GetMaximum() > 0) {; 7795 // This is a dynamic leaf length, i.e. most likely a TLeafC's; 7796 // string size. This still translates into one token:; 7797 remainingLeafLen = 1;; 7798 }; 7799 ; 7800 leafData = tok;; 7801 } else {; 7802 // append token to laf data:; 7803 leafData += "" "";; 7804 leafData += tok;; 7805 }; 7806 --remainingLeafLen;; 7807 if (remainingLeafLen) {; 7808 // need more columns for this branch:; 7809 continue;; 7810 }; 7811 ++iBranch;; 7812 ; 7813 // initialize stringstream with token; 7814 sToken.clear();; 7815 sToken.seekp(0, std::ios_base::beg);; 7816 sToken.str(leafData.Data());; 7817 sToken.seekg(0, std::ios_base::beg);; 7818 leaf->ReadValue(sToken, 0 /* 0 = ""all"" */);; 7819 if (gDebug > 3) {; 7820 Info(""ReadStream"", ""%5lld:%3d:%d%d%d%d:%d%d%d%d:%s"",; 7821 nlines, iBranch,; 7822 (int)sToken.good(), (int)sToken.fail(),; 7823 (int)sToken.bad(), (int)sToken.eof(),; 7824 (int)in.good(), (int)in.fail(),; 7825 (int)in.bad(), (int)in.eof(),; 7826 sToken.str().c_str());; 7827 }; 7828 ; 7829 // Error handling; 7830 if (sToken.bad()) {; 7831 // How could that happen for a stringstream?; 7832 Warning(""ReadStream"",; 7833 ""Buffer error while reading data for branch %s on line %lld"",; 7834 branch->GetName(), nlines);; 7835 } else if (!sToken.eof()) {; 7836 if (sToken.fail()) {; 7837 Warning(""ReadStream"",; 7838 ""Couldn't read formatted data in \""%s\"" for branch %s on line %lld; ignoring line"",; 7839 tok.Data(), branch->GetName(), nlines);; 7840 goodLine = false;; 7841 } else {; 7842 std::string rema",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:305865,clear,clear,305865,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['clear'],['clear']
Usability,"ading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; RooProdPdf Class ReferenceRooFit » RooFit Core. ; Efficient implementation of a product of PDFs of the form. . \[ \prod_{i=1}^{N} \mathrm{PDF}_i (x, \ldots) \]. PDFs may share observables. If that is the case any irreducible subset of PDFs that share observables will be normalised with explicit numeric integration as any built-in normalisation will no longer be valid.; Alternatively, products using conditional PDFs can be defined, e.g. \[ F(x|y) \cdot G(y), \]. meaning a PDF \( F(x) \) given \( y \) and a PDF \( G(y) \). In this construction, \( F \) is only normalised w.r.t \( x\), and \( G \) is normalised w.r.t \( y \). The product in this construction is properly normalised.; If exactly one of the component PDFs supports extended likelihood fits, the product will also be usable in extended mode, returning the number of expected events from the extendable component PDF. The extendable component does not have to appear in any specific place in the list. PyROOT; RooProdPdf() constructor takes a RooCmdArg as argument also supports keyword arguments. For example, the following code is equivalent in PyROOT: # Directly passing a RooCmdArg:; model = ROOT.RooProdPdf(; ""model"", ""model"", ROOT.RooArgSet(shapePdf), ROOT.RooFit.Conditional(ROOT.RooArgSet(effPdf), ROOT.RooArgSet(cut)); ); ; # With keyword arguments:; model = ROOT.RooProdPdf(; ""model"", ""model"", ROOT.RooArgSet(shapePdf), Conditional=(ROOT.RooArgSet(effPdf), ROOT.RooArgSet(cut)); ). Definition at line 33 of file RooProdPdf.h. Classes; class  CacheElem;  . Public Member Functions;  RooProdPdf ();  Default constructor. ;  ;  RooProdPdf (const char *name, const char *title, const RooArgList &pdfList, double cutOff=0.0);  Constructor from a list of PDFs. ;  ;  RooProdPdf (const char *name, const char *title",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooProdPdf.html:1081,usab,usable,1081,doc/master/classRooProdPdf.html,https://root.cern,https://root.cern/doc/master/classRooProdPdf.html,1,['usab'],['usable']
Usability,"ading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TTeXDump Class ReferenceGraphics » 2D Graphics » Graphics file output. ; Interface to TeX. ; This class allow to generate PGF/TikZ vector graphics output which can be included in TeX and LaTeX documents.; PGF is a TeX macro package for generating graphics. It is platform and format-independent and works together with the most important TeX backend drivers, including pdftex and dvips. It comes with a user-friendly syntax layer called TikZ.; To generate a such file it is enough to do: gStyle->SetPaperSize(10.,10.);; hpx->Draw();; gPad->Print(""hpx.tex"");; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; gPad#define gPadDefinition TVirtualPad.h:308; TStyle::SetPaperSizevoid SetPaperSize(EPaperSize size)Set paper size for PostScript output.Definition TStyle.cxx:1704; Then, the generated file (hpx.tex) can be included in a LaTeX document (simple.tex) in the following way: \documentclass{article}; \usepackage{tikz}; \usetikzlibrary{patterns}; \usetikzlibrary{plotmarks}; \title{A simple LaTeX example}; \date{July 2013}; \begin{document}; \maketitle; The following image as been generated using the TTeXDump class:; \par; \input{hpx.tex}; \end{document}; TTeXDumpInterface to TeX.Definition TTeXDump.h:20; Rcpp::asTString as(SEXP s)Definition RExports.h:86; TMVA_SOFIE_GNN.endendDefinition TMVA_SOFIE_GNN.py:207; Note the three directives needed at the top of the LaTeX file: \usepackage{tikz}; \usetikzlibrary{patterns}; \usetikzlibrary{plotmarks}; Then including the picture in the document is done with the \input directive.; The command pdflatex simple.tex will generate the corresponding pdf file simple.pdf. ; Definition at line 20 of file TTeXDump.h. Public Member Functions;  TTeXDump ();  Default TeX constructor. ;  ;  TTeXDump (const char *filename, Int_t type=-113);  Initialize the TeX interface. ;  ;  ~TTeX",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTeXDump.html:1097,simpl,simple,1097,doc/master/classTTeXDump.html,https://root.cern,https://root.cern/doc/master/classTTeXDump.html,1,['simpl'],['simple']
Usability,"adowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGSplitFrame(const TGWindow* p = 0, UInt_t w = 1, UInt_t h = 1, UInt_t options = 0); Default constructor. ~TGSplitFrame(); Destructor. Make cleanup. void AddFrame(TGFrame* f, TGLayoutHints* l = 0); Add a frame in the split frame using layout hints l. void RemoveFrame(TGFrame* f); Add a frame in the split frame using layout hints l. void Cleanup(); Recursively cleanup child frames. TGSplitFrame * GetTopFrame(); Return the top level split frame. void Close(); Close (unmap and remove from the list of frames) the frame contained in; this split frame. void CloseAndCollapse(); Close (unmap, remove from the list of frames and destroy) the frame; contained in this split frame. Then unsplit the parent frame. void Docked(TGFrame* frame); Emit Undocked() signal. void ExtractFrame(); Extract the frame contained in this split frame an reparent it in a; transient frame. Keep a pointer on the transient frame to be able to; swallow the child frame back to this. Bool_t HandleConfigureNotify(Event_t* ); Handles resize events for this frame.; This is needed to keep as much as possible the sizes ratio between; all subframes. void HSplit(UInt_t h = 0); Horizontally split the frame. void VSplit(UInt_t w = 0); Vertically split the frame. void MapToSPlitTool(TGSplitFrame* top); Map this split frame in the small overview tooltip. void OnSplitterClicked(Event_t* event); Handle mouse click events on the splitter. void SplitHor(); Horizontally split the frame, and if it contains a child frame, ask; the user where to keep it (top or bottom). This is the method used; via the context menu. void SplitHorizontal(const char* side = ""top""); Horizontally split the frame, and if it contains a child frame, ask; the user where to keep it (top o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGSplitFrame.html:21465,Undo,Undocked,21465,root/html602/TGSplitFrame.html,https://root.cern,https://root.cern/root/html602/TGSplitFrame.html,2,['Undo'],['Undocked']
Usability,"ads) { if (fMonitoring) fMonitoring->pads (numPads); } ///< preparation for monitoring; 819 void create (std::string histoName, int bins, double min, double max) { if (fMonitoring) fMonitoring->create (histoName, bins, min, max); } ///< for monitoring; 820 void create (std::string histoName, int bins, double min, double max, int bins2, double min2, double max2) { if (fMonitoring) fMonitoring->create (histoName, bins, min, max, bins2, min2, max2); } ///< for monitoring; 821 void addPoint (std::string histoName, double x) { if (fMonitoring) fMonitoring->addPoint (histoName, x); } ///< for monitoring; 822 void addPoint (std::string histoName, double x, double y) {if (fMonitoring) fMonitoring->addPoint (histoName, x, y); } ///< for monitoring; 823 void plot (std::string histoName, std::string options, int pad, EColor color) { if (fMonitoring) fMonitoring->plot (histoName, options, pad, color); } ///< for monitoring; 824 void clear (std::string histoName) { if (fMonitoring) fMonitoring->clear (histoName); } ///< for monitoring; 825 bool exists (std::string histoName) { if (fMonitoring) return fMonitoring->exists (histoName); return false; } ///< for monitoring; 826 ; 827 size_t convergenceCount () const { return m_convergenceCount; } ///< returns the current convergence count; 828 size_t maxConvergenceCount () const { return m_maxConvergenceCount; } ///< returns the max convergence count so far; 829 size_t minError () const { return m_minError; } ///< returns the smallest error so far; 830 ; 831 public:; 832 Timer m_timer; ///< timer for monitoring; 833 double m_minProgress; ///< current limits for the progress bar; 834 double m_maxProgress; ///< current limits for the progress bar; 835 ; 836 ; 837 size_t m_convergenceSteps; ///< number of steps without improvement to consider the DNN to have converged; 838 size_t m_batchSize; ///< mini-batch size; 839 size_t m_testRepetitions;; 840 double m_factorWeightDecay;; 841 ; 842 size_t count_E;; 843 size_t count_dE;; 844 size_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8h_source.html:31437,clear,clear,31437,doc/master/NeuralNet_8h_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html,1,['clear'],['clear']
Usability,"advisable however to define these properties just; after the first creation of a volume namespace, since in case of volume families; any new member created by the modeler inherits these properties. In order to provide navigation features, volumes have to be able to find; the proper container of any point defined in the local reference frame. This; can be the volume itself, one of its positioned daughter volumes or none if; the point is actually outside. On the other hand, volumes have to provide also; other navigation methods such as finding the distances to its shape boundaries; or which daughter will be crossed first. The implementation of these features; is done at shape level, but the local mother-daughters management is handled; by volumes that builds additional optimisation structures upon geometry closure.; In order to have navigation features properly working one has to follow the; general rules for building a valid geometry (see TGeoManager class). Now let's make a simple volume representing a copper wire. We suppose that; a medium is already created (see TGeoMedium class on how to create media).; We will create a TUBE shape for our wire, having Rmin=0cm, Rmax=0.01cm; and a half-length dZ=1cm :. TGeoTube *tube = new TGeoTube(""wire_tube"", 0, 0.01, 1);. One may ommit the name for the shape if no retreiving by name is further needed; during geometry building. The same shape can be shared by different volumes; having different names and materials. Now let's make the volume for our wire.; The prototype for volumes constructor looks like :. TGeoVolume::TGeoVolume(const char *name, TGeoShape *shape, TGeoMedium *med). Since TGeoTube derives brom the base shape class, we can provide it to the volume; constructor :. TGeoVolume *wire_co = new TGeoVolume(""WIRE_CO"", tube, ptrCOPPER);. Do not bother to delete neither the media, shapes or volumes that you have; created since all will be automatically cleaned on exit by the manager class.; If we would have taken a look insi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoVolume.html:2731,simpl,simple,2731,root/html528/TGeoVolume.html,https://root.cern,https://root.cern/root/html528/TGeoVolume.html,12,['simpl'],['simple']
Usability,"advisable however to define these properties just; after the first creation of a volume namespace, since in case of volume families; any new member created by the modeler inherits these properties. In order to provide navigation features, volumes have to be able to find; the proper container of any point defined in the local reference frame. This; can be the volume itself, one of its positioned daughter volumes or none if; the point is actually outside. On the other hand, volumes have to provide also; other navigation methods such as finding the distances to its shape boundaries; or which daughter will be crossed first. The implementation of these features; is done at shape level, but the local mother-daughters management is handled; by volumes that builds additional optimisation structures upon geometry closure.; In order to have navigation features properly working one has to follow the; general rules for building a valid geometry (see TGeoManager class). Now let's make a simple volume representing a copper wire. We suppose that; a medium is already created (see TGeoMedium class on how to create media).; We will create a TUBE shape for our wire, having Rmin=0cm, Rmax=0.01cm; and a half-length dZ=1cm :. TGeoTube *tube = new TGeoTube(""wire_tube"", 0, 0.01, 1);. One may ommit the name for the shape if no retreiving by name is further needed; during geometry building. The same shape can be shared by different volumes; having different names and materials. Now let's make the volume for our wire.; The prototype for volumes constructor looks like :. TGeoVolume::TGeoVolume(const char *name, TGeoShape *shape, TGeoMedium *med). Since TGeoTube derives from the base shape class, we can provide it to the volume; constructor :. TGeoVolume *wire_co = new TGeoVolume(""WIRE_CO"", tube, ptrCOPPER);. Do not bother to delete neither the media, shapes or volumes that you have; created since all will be automatically cleaned on exit by the manager class.; If we would have taken a look insi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoVolume.html:2751,simpl,simple,2751,root/html534/TGeoVolume.html,https://root.cern,https://root.cern/root/html534/TGeoVolume.html,18,['simpl'],['simple']
Usability,"ag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoNodeEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for node editor. ~TGeoNodeEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to a editable object. void DoSelectMother(); Select the mother volume. void DoSelectVolume(); Select the volume. void DoSelectMatrix(); Select the matrix. void DoEditMother(); Edit the mother volume. void DoEditVolume(); Edit selected volume. void DoEditMatrix(); Edit selected material. void DoNodeName(); Change node name. void DoNodeNumber(); Change node copy number. void DoApply(); Slot for applying modifications. void DoUndo(); Slot for undoing last operation. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id: TGeoNodeEditor.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2010-09-23 20:09; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoNodeEditor.html:21731,undo,undoing,21731,root/html528/TGeoNodeEditor.html,https://root.cern,https://root.cern/root/html528/TGeoNodeEditor.html,1,['undo'],['undoing']
Usability,"ag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoNodeEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for node editor. ~TGeoNodeEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to a editable object. void DoSelectMother(); Select the mother volume. void DoSelectVolume(); Select the volume. void DoSelectMatrix(); Select the matrix. void DoEditMother(); Edit the mother volume. void DoEditVolume(); Edit selected volume. void DoEditMatrix(); Edit selected material. void DoNodeName(); Change node name. void DoNodeNumber(); Change node copy number. void DoApply(); Slot for applying modifications. void DoUndo(); Slot for undoing last operation. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id: TGeoNodeEditor.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-07-04 15:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGeoNodeEditor.html:21831,undo,undoing,21831,root/html530/TGeoNodeEditor.html,https://root.cern,https://root.cern/root/html530/TGeoNodeEditor.html,1,['undo'],['undoing']
Usability,"ag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoNodeEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for node editor. ~TGeoNodeEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to a editable object. void DoSelectMother(); Select the mother volume. void DoSelectVolume(); Select the volume. void DoSelectMatrix(); Select the matrix. void DoEditMother(); Edit the mother volume. void DoEditVolume(); Edit selected volume. void DoEditMatrix(); Edit selected material. void DoNodeName(); Change node name. void DoNodeNumber(); Change node copy number. void DoApply(); Slot for applying modifications. void DoUndo(); Slot for undoing last operation. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id: TGeoNodeEditor.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoNodeEditor.html:21831,undo,undoing,21831,root/html532/TGeoNodeEditor.html,https://root.cern,https://root.cern/root/html532/TGeoNodeEditor.html,2,['undo'],['undoing']
Usability,"ag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. private:. TGTextButton*fCancelcancel button; TGTextButton*fOkok button; char*fStrcutsaddress to store cuts string; char*fStrvarsaddress to store variables string; TGTextEntry*fTECutstext entry widget for cuts; TGTextEntry*fTEVarstext entry widget for variables. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TGMainFrame. ←; TGTransientFrame. ←; TTreeInput. Function documentation; TTreeInput(const TGWindow* p, const TGWindow* main, char* strvars, char* strcuts); Create simple input dialog. ~TTreeInput(); Cleanup dialog. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t ); Handle button and text enter events. TTreeInput(const TTreeInput& ). TTreeInput & operator=(const TTreeInput& ). » Author: David Gonzalez Maline 21/10/2008 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 16:35; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TTreeInput.html:23639,simpl,simple,23639,root/html604/TTreeInput.html,https://root.cern,https://root.cern/root/html604/TTreeInput.html,2,['simpl'],['simple']
Usability,"ag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. private:. TGTextButton*fCancelcancel button; TGTextButton*fOkok button; char*fStrcutsaddress to store cuts string; char*fStrvarsaddress to store variables string; TGTextEntry*fTECutstext entry widget for cuts; TGTextEntry*fTEVarstext entry widget for variables. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TGMainFrame. ←; TGTransientFrame. ←; TTreeInput. Function documentation; TTreeInput(const TGWindow* p, const TGWindow* main, char* strvars, char* strcuts); Create simple input dialog. ~TTreeInput(); Cleanup dialog. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t ); Handle button and text enter events. TTreeInput(const TTreeInput& ). TTreeInput & operator=(const TTreeInput& ). » Author: David Gonzalez Maline 21/10/2008 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-30 15:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTreeInput.html:23639,simpl,simple,23639,root/html602/TTreeInput.html,https://root.cern,https://root.cern/root/html602/TTreeInput.html,2,['simpl'],['simple']
Usability,"ag, const TString& fallback_tag = """"); Float_t*TAttBBox::AssertBBox(); Bool_tTEveCaloViz::AssertCellIdCache() const; TEveRGBAPalette*TEveCaloViz::AssertPalette(); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; Bool_tTEveCaloViz::CellInEtaPhiRng(TEveCaloData::CellData_t&) const; virtual voidCellSelectionChanged(); virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElement*TEveElement::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidComputeBBox(); virtual voidTNamed::Copy(TObject& named) const; virtual voidTEveElement::CopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); voidTEveElement::CSCApplyMainColorToAllChildren(); voidTEveElement::CSCApplyMainColorToMatchingChildren(); voidTEveElement::CSCApplyMainTransparencyToAllChildren(); voidTEve",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TEveCalo2D.html:2398,Clear,Clear,2398,root/html532/TEveCalo2D.html,https://root.cern,https://root.cern/root/html532/TEveCalo2D.html,4,['Clear'],['Clear']
Usability,"age for ROOT. ;  ; namespace  RDF;  ; namespace  TF1Helper;  ; namespace  TMetaUtils;  ; namespace  TreeUtils;  ; namespace  TThreadedObjectUtils;  ; namespace  TypeTraits;  ROOT type_traits extensions. ;  ; namespace  v5;  ; namespace  VecOps;  . Classes; struct  RCompressionSetting;  The global settings depend on a global variable named R__ZipMode which can be modified by a global function named R__SetZipMode. More...;  ; class  RDataFrame;  ROOT's RDataFrame offers a high level interface for analyses of data stored in TTrees, CSV's and other data formats. More...;  ; class  TExecutor;  This class defines an interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TGenericClassInfo;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TModuleGenerator;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mutexes. More...;  ; class  TThreadedObject;  A wrapper to make object instances thread private, lazily. More...;  ; class  TThreadExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TTreeProcessorMP;  This class provides an interface to process a TTree dataset in parallel with multi-process technology. More...;  ; class  TTreeProcessorMT;  A class to process the entries of a TTree in parall",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v618/namespaceROOT.html:1890,simpl,simple,1890,doc/v618/namespaceROOT.html,https://root.cern,https://root.cern/doc/v618/namespaceROOT.html,2,['simpl'],['simple']
Usability,ain(). void TMVA::MethodTMlpANN::Train ; (; void ; ). virtual . performs TMlpANN training available learning methods: . TMultiLayerPerceptron::kStochastic; TMultiLayerPerceptron::kBatch; TMultiLayerPerceptron::kSteepestDescent; TMultiLayerPerceptron::kRibierePolak; TMultiLayerPerceptron::kFletcherReeves; TMultiLayerPerceptron::kBFGS. TMultiLayerPerceptron wants test and training tree at once so merge the training and testing trees from the MVA factory first: ; Implements TMVA::MethodBase.; Definition at line 260 of file MethodTMlpANN.cxx. Member Data Documentation. ◆ fHiddenLayer. TString TMVA::MethodTMlpANN::fHiddenLayer. private . string containing the hidden layer structure ; Definition at line 111 of file MethodTMlpANN.h. ◆ fLayerSpec. TString TMVA::MethodTMlpANN::fLayerSpec. private . Layer specification option. ; Definition at line 106 of file MethodTMlpANN.h. ◆ fLearningMethod. TString TMVA::MethodTMlpANN::fLearningMethod. private . the learning method (given via option string) ; Definition at line 116 of file MethodTMlpANN.h. ◆ fLocalTrainingTree. TTree* TMVA::MethodTMlpANN::fLocalTrainingTree. private . local copy of training tree ; Definition at line 109 of file MethodTMlpANN.h. ◆ fMLP. TMultiLayerPerceptron* TMVA::MethodTMlpANN::fMLP. private . the TMLP ; Definition at line 108 of file MethodTMlpANN.h. ◆ fMLPBuildOptions. TString TMVA::MethodTMlpANN::fMLPBuildOptions. private . option string to build the mlp ; Definition at line 114 of file MethodTMlpANN.h. ◆ fNcycles. Int_t TMVA::MethodTMlpANN::fNcycles. private . number of training cycles ; Definition at line 112 of file MethodTMlpANN.h. ◆ fValidationFraction. Double_t TMVA::MethodTMlpANN::fValidationFraction. private . fraction of events in training tree used for cross validation ; Definition at line 113 of file MethodTMlpANN.h. Libraries for TMVA::MethodTMlpANN:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/MethodTMlpANN.h; tmva/tmva/src/Method,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodTMlpANN.html:36293,learn,learning,36293,doc/master/classTMVA_1_1MethodTMlpANN.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodTMlpANN.html,1,['learn'],['learning']
Usability,ain.cpp;  ► smatrix;  matrix_op_vec.h;  matrix_util.h;  testKalman.cxx;  testOperations.cxx;  TestTimer.h;  tsc.h;  ► include;  ► Vc;  ► avx;  casts.h;  const.h;  const_data.h;  debug.h;  helperimpl.h;  intrinsics.h;  limits.h;  macros.h;  mask.h;  math.h;  shuffle.h;  sorthelper.h;  types.h;  undomacros.h;  vector.h;  vectorhelper.h;  writemaskedvector.h;  ► common;  aliasingentryhelper.h;  bitscanintrinsics.h;  deinterleave.h;  exponential.h;  fix_clang_emmintrin.h;  iif.h;  interleavedmemory.h;  logarithm.h;  macros.h;  memory.h;  memorybase.h;  memoryfwd.h;  operand.h;  operators.h;  storage.h;  support.h;  trigonometric.h;  types.h;  undomacros.h;  vectortuple.h;  windows_fix_intrin.h;  ► internal;  namespace.h;  ► scalar;  helperimpl.h;  limits.h;  macros.h;  mask.h;  math.h;  types.h;  undomacros.h;  vector.h;  writemaskedvector.h;  ► sse;  casts.h;  const.h;  const_data.h;  debug.h;  helperimpl.h;  intrinsics.h;  limits.h;  macros.h;  mask.h;  math.h;  shuffle.h;  types.h;  undomacros.h;  vector.h;  vectorhelper.h;  cpuid.h;  global.h;  support.h;  vector.h;  version.h;  ► src;  avx_sorthelper.cpp;  const.cpp;  cpuid.cpp;  support.cpp;  trigonometric.cpp;  ► tests;  arithmetics.cpp;  casts.cpp;  const.h;  convert-sincos-reference.cpp;  deinterleave.cpp;  expandandmerge.cpp;  gather.cpp;  implicit_type_conversion.cpp;  implicit_type_conversion_failures.cpp;  linkTest0.cpp;  linkTest1.cpp;  linkTestLib0.cpp;  linkTestLib1.cpp;  linkTestLib2.cpp;  linkTestLib3.cpp;  load.cpp;  mask.cpp;  math.cpp;  memory.cpp;  scalaraccess.cpp;  scatter.cpp;  sse_blend.cpp;  stlcontainer.cpp;  store.cpp;  supportfunctions.cpp;  swizzles.cpp;  ulp.h;  unittest.h;  utils.cpp;  vectormemoryhelper.h;  makeTest.py;  ► vdt;  ► include;  ► vdt;  asin.h;  atan.h;  atan2.h;  cos.h;  exp.h;  inv.h;  log.h;  sin.h;  sincos.h;  sqrt.h;  tan.h;  vdtcore_common.h;  vdtMath.h;  ► tests;  stressVdt.cxx;  ► misc;  ► memstat;  ► inc;  LinkDef.h;  TMemStat.h;  TMemStatBacktrace.h;  TMemStatDef.h;,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html606/files.html:58961,undo,undomacros,58961,root/html606/files.html,https://root.cern,https://root.cern/root/html606/files.html,2,['undo'],['undomacros']
Usability,"ainTransparency(Char_t t, Char_t old_t); virtual voidPropagateRenderState(Bool_t rnr_self, Bool_t rnr_children); virtual voidPropagateVizParams(TEveElement* el = 0); virtual voidRemoveProjected(TEveProjected* p); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TEveProjectable(). private:. TEveProjectable&operator=(const TEveProjectable&); TEveProjectable(const TEveProjectable&). Data Members; protected:. TEveProjectable::ProjList_tfProjectedListreferences to projected instances. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveProjectable(); Constructor. ~TEveProjectable(); Destructor.; Force projected replicas to unreference *this, then destroy them. void AnnihilateProjecteds(); Optimized destroy of projected elements with condition; there is only one parent for projected element. Method is; called from TEveElement::Annihilate(). void ClearProjectedList(). void AddProjectedsToSet(set<TEveElement*>& set); Add the projected elements to the set, dyn-casting them to; TEveElement. void PropagateVizParams(TEveElement* el = 0); Set visualization parameters of projecteds.; Use element el as model. If el == 0 (default), this casted to; TEveElement is used. void PropagateRenderState(Bool_t rnr_self, Bool_t rnr_children); Set render state of projecteds. void PropagateMainColor(Color_t color, Color_t old_color); Set main color of projecteds if their color is the same as old_color. void PropagateMainTransparency(Char_t t, Char_t old_t); Set main transparency of projecteds if their transparecy is the; same as the old one. TEveProjectable(const TEveProjectable& ). TEveProjectable& operator=(const TEveProjectable& ). TClass* ProjectedClass(const TEveProjection* p) const. Bool_t HasProjecteds() const; { return ! fProjectedList.empty(); }. ProjList_i BeginProjecteds(); { return fProjectedList.begin(); }. ProjList_i EndProjecteds(); { return ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveProjectable.html:2333,Clear,ClearProjectedList,2333,root/html602/TEveProjectable.html,https://root.cern,https://root.cern/root/html602/TEveProjectable.html,2,['Clear'],['ClearProjectedList']
Usability,"ainer to match one ore more container limits. Suppose we want to position the same box inside 2 different volumes and we want the Z size to match the one of each container:; TGeoVolume *container1 = gGeoManager->MakeBox(""C1"",imed,10,10,30);; TGeoVolume *container2 = gGeoManager->MakeBox(""C2"",imed,10,10,20);; TGeoVolume *pvol = gGeoManager->MakeBox(""PVOL"",jmed,3,3,-1);; container1->AddNode(pvol,1);; container2->AddNode(pvol,1);; Note that the third parameter of PVOL is negative, which does not make sense as half-length on Z. This is interpreted as: when positioned, create a box replacing all invalid parameters with the corresponding dimensions of the container. This is also internally handled by the TGeoVolumeMulti class, which does not need to be instantiated by users.; 18.4.2.9 Dividing Volumes; Volumes can be divided according a pattern. The simplest division can be done along one axis that can be: X,Y,Z,Phi,Rxy or Rxyz. Let’s take a simple case: we would like to divide a box in N equal slices along X coordinate, representing a new volume family. Supposing we already have created the initial box, this can be done like:; TGeoVolume *slicex = box->Divide(""SLICEX"",1,N);; Here SLICEX is the name of the new family representing all slices and 1 is the slicing axis. The meaning of the axis index is the following: for all volumes having shapes like box, trd1, trd2, trap, gtraorpara -1, 2, 3 mean X, Y, Z; for tube, tubs, cone, cons -1 means Rxy, 2 means phi and 3 means Z; for pcon and pgon - 2 means phi and 3 means Z; for spheres 1 means Rand 2 means phi.; In fact, the division operation has the same effect as positioning volumes in a given order inside the divided container - the advantage being that the navigation in such a structure is much faster. When a volume is divided, a volume family corresponding to the slices is created. In case all slices can be represented by a single shape, only one volume is added to the family and positioned N times inside the divided volum",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:954201,simpl,simple,954201,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['simpl'],['simple']
Usability,"ainerKey (Event_t *ev);  Handle keyboard events in the canvas container. ;  ; Bool_t HandleContainerMotion (Event_t *ev);  Handle mouse motion event in the canvas container. ;  ; Bool_t HandleDNDDrop (TDNDData *data) override;  Handle drop events. ;  ; Atom_t HandleDNDEnter (Atom_t *typelist) override;  Handle drag enter events. ;  ; Bool_t HandleDNDLeave () override;  Handle drag leave events. ;  ; Atom_t HandleDNDPosition (Int_t x, Int_t y, Atom_t action, Int_t xroot, Int_t yroot) override;  Handle dragging position events. ;  ; TRootCanvas & operator= (const TRootCanvas &)=delete;  . Private Attributes; Bool_t fAutoFit;  when true canvas container keeps same size as canvas ;  ; Int_t fButton;  currently pressed button ;  ; TRootContainer * fCanvasContainer;  container in canvas widget ;  ; Int_t fCanvasID;  index in fWindows array of TGX11 ;  ; TGLayoutHints * fCanvasLayout;  layout for canvas widget ;  ; TGCanvas * fCanvasWindow;  canvas widget ;  ; TGLayoutHints * fDockLayout;  layout hints for dockable frame widget ;  ; TGPopupMenu * fEditClearMenu;  clear cascade submenu ;  ; TGPopupMenu * fEditMenu;  edit menu ;  ; TVirtualPadEditor * fEditor;  pointer to currently loaded pad editor ;  ; TGCompositeFrame * fEditorFrame;  side frame for current pad editor ;  ; TGLayoutHints * fEditorLayout;  layout for editor frame ;  ; Bool_t fEmbedded;  true if embedded in any other frame (e.g. in the browser) ;  ; TGPopupMenu * fFileMenu;  file menu ;  ; TGPopupMenu * fFileSaveMenu;  save cascade submenu ;  ; TGPopupMenu * fHelpMenu;  help menu ;  ; TGHorizontal3DLine * fHorizontal1;  toolbar separator ;  ; TGLayoutHints * fHorizontal1Layout;  layout hints for separator ;  ; const TGPicture * fIconPic;  icon picture ;  ; TGCompositeFrame * fMainFrame;  main frame containing canvas and side frame ;  ; TGLayoutHints * fMainFrameLayout;  layout for main frame ;  ; TGMenuBar * fMenuBar;  menubar ;  ; TGLayoutHints * fMenuBarHelpLayout;  layout hint for help menu in menubar ;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRootCanvas.html:32505,clear,clear,32505,doc/master/classTRootCanvas.html,https://root.cern,https://root.cern/doc/master/classTRootCanvas.html,1,['clear'],['clear']
Usability,"ake into account _all_ events we use `OnPartialResultSlot`: when Implicit Multi-Threading is enabled, in fact,; // `OnPartialResult` invokes the callback only in one of the worker threads, and always returns that worker threads'; // partial result. This is useful because it means we don't have to worry about concurrent execution and; // thread-safety of the callbacks if we are happy with just one threads' partial result.; // `OnPartialResultSlot`, on the other hand, invokes the callback in each one of the worker threads, every time a; // thread finishes processing a batch of `everyN` events. This is what we want for the progress bar, but we need to; // take care that two threads will not print to terminal at the same time: we need a std::mutex for synchronization.; std::string progressBar;; std::mutex barMutex; // Only one thread at a time can lock a mutex. Let's use this to avoid concurrent printing.; // Magic numbers that yield good progress bars for nSlots = 1,2,4,8; const auto everyN = nSlots == 8 ? 1000 : 100ull * nSlots;; const auto barWidth = nEvents / everyN;; h.OnPartialResultSlot(everyN, [&barWidth, &progressBar, &barMutex](unsigned int /*slot*/, TH1D & /*partialHist*/) {; std::lock_guard<std::mutex> l(barMutex); // lock_guard locks the mutex at construction, releases it at destruction; progressBar.push_back('#');; // re-print the line with the progress bar; std::cout << ""\r["" << std::left << std::setw(barWidth) << progressBar << ']' << std::flush;; });; ; // ## Running the analysis; // So far we told RDataFrame what we want to happen during the event-loop, but we have not actually run any of those; // actions: the TBrowser is still empty, the progress bar has not been printed even once, and we haven't produced; // a single data-point!; // As usual with RDataFrame, the event-loop is triggered by accessing the contents of a TResultProxy for the first; // time. Let's run!; std::cout << ""Analysis running..."" << std::endl;; h->Draw(); // the final, complete res",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df013__InspectAnalysis_8C.html:5176,progress bar,progress bars,5176,doc/master/df013__InspectAnalysis_8C.html,https://root.cern,https://root.cern/doc/master/df013__InspectAnalysis_8C.html,1,['progress bar'],['progress bars']
Usability,"akes to make a pair of new/delete calls is about 7 s (10-6). If we multiply the number of tracks by 7 s, (1,000,000,000 * 7 * 10-6) we calculate that the time allocating and freeing memory is about 2 hours. This is the chunk of time saved when a TClonesArray is used rather than a TObjArray. If you do not want to wait 2 hours for your tracks (or equivalent objects), be sure to use a TClonesArray for same-class objects arrays. Branches with TClonesArrays use the same method (TTree::Branch) as any other object described above. If splitting is specified the objects in the TClonesArray are split, not the TClonesArray itself.; 12.10.4 Identical Branch Names; When a top-level object (say event), has two data members of the same class the sub branches end up with identical names. To distinguish the sub branch we must associate them with the master branch by including a “.” (a dot) at the end of the master branch name. This will force the name of the sub branch to be master.sub branch instead of simply sub branch. For example, a tree has two branches Trigger and MuonTrigger, each containing an object of the same class (Trigger). To identify uniquely the sub branches we add the dot:; tree->Branch(""Trigger."",""Trigger"",&b1,8000,1);; tree->Branch(""MuonTrigger."",""Trigger"",&b2,8000,1);; If Trigger has three members, T1, T2, T3, the two instructions above will generate sub branches called: Trigger.T1, Trigger.T2, Trigger.T3, MuonTrigger.T1, MuonTrigger.T2, andMuonTrigger.T3.; 12.11 Adding a Branch with a Folder; Use the syntax below to add a branch from a folder:; tree->Branch(""/aFolder"");; This method creates one branch for each element in the folder. The method returns the total number of branches created.; 12.12 Adding a Branch with a Collection; This Branch method creates one branch for each element in the collection.; tree->Branch(*aCollection, 8000, 99);; // Int_t TTree::Branch(TCollection *list, Int_t bufsize,; // Int_t splitlevel, const char *name); The method returns the t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:548466,simpl,simply,548466,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['simpl'],['simply']
Usability,"al . ReturnsTClass describing current object ; Reimplemented from RooAbsPdf.; Definition at line 53 of file RooBernstein.h. ◆ selectNormalizationRange(). void RooBernstein::selectNormalizationRange ; (; const char * ; rangeName = nullptr, . bool ; force = false . ). overridevirtual . Force use of a given normalisation range. ; Needed for functions or PDFs (e.g. RooAddPdf) whose shape depends on the choice of normalisation. ; Reimplemented from RooAbsReal.; Definition at line 61 of file RooBernstein.cxx. ◆ Streamer(). void RooBernstein::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsPdf. ◆ StreamerNVirtual(). void RooBernstein::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 53 of file RooBernstein.h. ◆ translate(). void RooBernstein::translate ; (; RooFit::Detail::CodeSquashContext & ; ctx); const. overridevirtual . This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ; The function adds the code represented by each class as an std::string (that is later concatenated with code strings from translate calls) to form the C++ code that AD tools can understand. Any class that wants to support AD, has to implement this function.; Parameters. [in]ctxAn object to manage auxiliary information for code-squashing. Also takes the code string that this class outputs into the squashed code through the 'addToCodeBody' function. . Reimplemented from RooAbsArg.; Definition at line 84 of file RooBernstein.cxx. ◆ xmax(). double RooBernstein::xmax ; (; ); const. inlineprivate . Definition at line 42 of file RooBernstein.h. ◆ xmin(). double RooBernstein::xmin ; (; ); const. inlineprivate . Definition at line 41 of file RooBernstein.h. Member Data Documentation. ◆ _buffer. std::vector<double> RooBernstein::_buffer. mutableprivate . ! ; Definition at line 47 of file RooBernstein.h. ◆ _coefList. RooListProxy R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBernstein.html:79340,simpl,simple,79340,doc/master/classRooBernstein.html,https://root.cern,https://root.cern/doc/master/classRooBernstein.html,1,['simpl'],['simple']
Usability,"al Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. THashTablefStringPropertyall properties of String type. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TDictAttributeMap(); Default constructor. ~TDictAttributeMap(); Default destructor. void AddProperty(const char* key, const char* value); Add a property with a String value to the TDictAttributeMap.; Parameters: key and char* value of the property. Bool_t HasKey(const char* key) const. const char* GetPropertyAsString(const char* key) const; Access the value of a String property using the key. TString RemovePropertyString(const char* key); Remove a String property from the attribute map specified by the key.; Returns the TString property removed or NULL if the property does not exist. Bool_t RemoveProperty(const char* key); Remove a property from the attribute map specified by the key.; Returns true if property exists and was removed, false if property; does not exist. void Clear(Option_t* option = """"); Deletes all the properties of the class. Int_t GetPropertySize() const; { return fStringProperty.GetSize(); }. » Author: Bianca-Cristina Cristescu 03/07/13 » Copyright (C) 1995-2013, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id$ » Last generated: 2015-03-12 16:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TDictAttributeMap.html:6453,Clear,Clear,6453,root/html534/TDictAttributeMap.html,https://root.cern,https://root.cern/root/html534/TDictAttributeMap.html,1,['Clear'],['Clear']
Usability,"al RooAbsGenContext*RooAbsPdf::binnedGenContext(const RooArgSet& vars, Bool_t verbose = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; virtual Bool_tchangeModel(const RooResolutionModel& newModel); voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname = 0) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcoefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); const RooRealVar*convVar() const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCd",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsAnaConvPdf.html:4680,clear,clearEvalErrorLog,4680,root/html534/RooAbsAnaConvPdf.html,https://root.cern,https://root.cern/root/html534/RooAbsAnaConvPdf.html,4,['clear'],['clearEvalErrorLog']
Usability,"al User Interface and the Spider Plot Editor. The spider plot graphics editor provides two tabs to interact with the spider plots’ output: the tab “Style” defining the spider layout and the tab “Browse” to navigate in the tree.; 12.20.8.2 Parallel Coordinates Plots. The Parallel Coordinates Plots are a common way of studying and visualizing multiple variables data sets. They were proposed by in A.Inselberg in 1981 as a new way to represent multi-dimensional information. In traditional Cartesian coordinates, axes are mutually perpendicular. In Parallel coordinates, all axes are parallel which allows representing data in much more than three dimensions. To show a set of points in Parallel Coordinates, a set of parallel lines is drawn, typically vertical and equally spaced. A point in n-dimensional space is represented as a polyline with vertices on the parallel axes. The position of the vertex on the i-th axis corresponds to the i-th coordinate of the point. The three following figures show some very simple examples:. The Parallel Coordinates representation of the six dimensional point (-5,3,4,2,0,1). The line y = -3x+20 and a circle in Parallel Coordinates. The Parallel Coordinates technique is good at: spotting irregular events, seeing the data trend, finding correlations and clusters. Its main weakness is the cluttering of the output. Because each “point” in the multidimensional space is represented as a line, the output is very quickly opaque and therefore it is difficult to see the data clusters. Most of the work done about Parallel Coordinates is to find techniques to reduce the output’s cluttering. The Parallel Coordinates plots in ROOT have been implemented as a new plotting option “PARA” in the TTree::Draw()method. To demonstrate how the Parallel Coordinates works in ROOT we will use the tree produced by the following “pseudo C++” code:; void parallel_example() {; TNtuple *nt = new TNtuple(""nt"",""Demo ntuple"",""x:y:z:u:v:w:a:b:c"");; for (Int_t i=0; i<3000; i++) ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:610641,simpl,simple,610641,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['simpl'],['simple']
Usability,"al axes widgets - rings drawn from attached physical center, in plane defined by axis ;  CTGLSAFrameStandalone GL Viewer GUI main frame ;  CTGLSAViewerThe top level standalone GL-viewer - created via plugin manager ;  CTGLScaleManipScale manipulator - attaches to physical shape and draws local axes widgets with box heads ;  ►CTGLSceneTGLScene provides management and rendering of ROOT's default 3D /object representation as logical and physical shapes ;  CDrawElement_t;  CTSceneInfo;  CTGLSceneBaseScene base-class – provides basic interface expected by the TGLViewer or its sub-classes: ;  CTGLSceneInfoBase class for extended scene context ;  CTGLScenePadImplements VirtualViewer3D interface and fills the base-class visualization structures from pad contents ;  CTGLSelectBufferEncapsulates OpenGL select buffer ;  CTGLSelectionBuffer;  CTGLSelectRecordStandard selection record including information about containing scene and details ob out selected object (TGLPhysicalShape*, TObject* or simply a void* for foreign scenes) ;  CTGLSelectRecordBase;  CTGLSphereImplements a native ROOT-GL sphere that can be rendered at different levels of detail ;  CTGLStopwatchStopwatch object for timing GL work ;  ►CTGLSurfacePainterImplements painting of TH2 with ""SURF"" option ;  CProjection_t;  CTGLTextGL Text ;  CTGLTF3PainterPlot-painter for TF3 functions ;  CTGLTH3Composition;  CTGLTH3CompositionPainter;  CTGLTH3SliceA slice of a TH3 ;  CTGLTransManipTranslation manipulator - attaches to physical shape and draws local axes widgets with arrow heads ;  ►CTGLUtilWrapper class for various misc static functions - error checking, draw helpers etc ;  CTColorLocker;  CTDrawQualityModifier;  CTDrawQualityScaler;  CTGLVContainer;  CTGLVector33 component (x/y/z) vector class ;  CTGLVEntry;  CTGLVertex33 component (x/y/z) vertex class ;  CTGLViewerBase GL viewer object - used by both standalone and embedded (in pad) GL ;  CTGLViewerBaseBase class for GL viewers ;  CTGLViewerEditorGUI editor for TGL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html606/annotated.html:128801,simpl,simply,128801,root/html606/annotated.html,https://root.cern,https://root.cern/root/html606/annotated.html,2,['simpl'],['simply']
Usability,"al axes widgets - rings drawn from attached physical center, in plane defined by axis ;  CTGLSAFrameStandalone GL Viewer GUI main frame ;  CTGLSAViewerThe top level standalone GL-viewer - created via plugin manager ;  CTGLScaleManipScale manipulator - attaches to physical shape and draws local axes widgets with box heads ;  ►CTGLSceneTGLScene provides management and rendering of ROOT's default 3D /object representation as logical and physical shapes ;  CDrawElement_t;  CTSceneInfo;  CTGLSceneBaseScene base-class – provides basic interface expected by the TGLViewer or its sub-classes: ;  CTGLSceneInfoBase class for extended scene context ;  CTGLScenePadImplements VirtualViewer3D interface and fills the base-class visualization structures from pad contents ;  CTGLSelectBufferEncapsulates OpenGL select buffer ;  CTGLSelectionBuffer;  CTGLSelectRecordStandard selection record including information about containing scene and details ob out selected object (TGLPhysicalShape*, TObject* or simply a void* for foreign scenes) ;  CTGLSelectRecordBaseBase class for select records ;  CTGLSphereImplements a native ROOT-GL sphere that can be rendered at different levels of detail ;  CTGLStopwatchStopwatch object for timing GL work ;  ►CTGLSurfacePainterImplements painting of TH2 with ""SURF"" option ;  CProjection_t;  CTGLTextGL Text ;  CTGLTF3PainterPlot-painter for TF3 functions ;  CTGLTH3Composition;  CTGLTH3CompositionPainter;  CTGLTH3SliceA slice of a TH3 ;  CTGLTransManipTranslation manipulator - attaches to physical shape and draws local axes widgets with arrow heads ;  ►CTGLUtilWrapper class for various misc static functions - error checking, draw helpers etc ;  CTColorLocker;  CTDrawQualityModifier;  CTDrawQualityScaler;  CTGLVContainer;  CTGLVector33 component (x/y/z) vector class ;  CTGLVEntry;  CTGLVertex33 component (x/y/z) vertex class ;  CTGLViewerBase GL viewer object - used by both standalone and embedded (in pad) GL ;  CTGLViewerBaseBase class for GL viewers ;  CTGL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:155205,simpl,simply,155205,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,5,['simpl'],['simply']
Usability,"al const double*X() const. protected:. voidGetGeneticOptions(ROOT::Math::MinimizerOptions& opt) const. Data Members; protected:. intROOT::Math::Minimizer::fDebugprint level; TMVA::IFitterTarget*fFitness; unsigned intROOT::Math::Minimizer::fMaxCallsmax number of function calls ; unsigned intROOT::Math::Minimizer::fMaxItermax number or iterations used to find the minimum; ROOT::Math::GeneticMinimizerParametersfParameters; doubleROOT::Math::Minimizer::fPrecprecision; vector<TMVA::Interval*>fRanges; vector<double>fResult; intROOT::Math::Minimizer::fStatusstatus of minimizer ; intROOT::Math::Minimizer::fStrategyminimizer strategy; doubleROOT::Math::Minimizer::fToltolerance (absolute); doubleROOT::Math::Minimizer::fUperror scale ; boolROOT::Math::Minimizer::fValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GeneticMinimizer(int = 0). virtual ~GeneticMinimizer(). void Clear(). void SetFunction(const ROOT::Math::IMultiGenFunction& func). bool SetLimitedVariable(unsigned int , const string& , double , double , double , double ). bool SetVariable(unsigned int ivar, const string& name, double val, double step). bool Minimize(). double MinValue() const. double Edm() const. const double * X() const. const double * MinGradient() const. unsigned int NCalls() const. unsigned int NDim() const. unsigned int NFree() const. bool ProvidesError() const. const double * Errors() const. double CovMatrix(unsigned int i, unsigned int j) const. void SetParameters(const ROOT::Math::GeneticMinimizerParameters& params). void SetOptions(const ROOT::Math::MinimizerOptions& opt). void GetGeneticOptions(ROOT::Math::MinimizerOptions& opt) const. » Last changed: root/mathcore:$Id » Last generated: 2011-11-03 20:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__GeneticMinimizer.html:4726,Clear,Clear,4726,root/html532/ROOT__Math__GeneticMinimizer.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__GeneticMinimizer.html,1,['Clear'],['Clear']
Usability,"al for a more complete example.; Injecting arbitrary code in the event loop with Foreach() and ForeachSlot(); Foreach() takes a callable (lambda expression, free function, functor...) and a list of columns and executes the callable on the values of those columns for each event that passes all upstream selections. It can be used to perform actions that are not already available in the interface. For example, the following snippet evaluates the root mean square of column ""x"": // Single-thread evaluation of RMS of column ""x"" using Foreach; double sumSq = 0.;; unsigned int n = 0;; df.Foreach([&sumSq, &n](double x) { ++n; sumSq += x*x; }, {""x""});; std::cout << ""rms of x: "" << std::sqrt(sumSq / n) << std::endl;; nconst Int_t nDefinition legend1.C:16; In multi-thread runs, users are responsible for the thread-safety of the expression passed to Foreach(): thread will execute the expression concurrently. The code above would need to employ some resource protection mechanism to ensure non-concurrent writing of rms; but this is probably too much head-scratch for such a simple operation.; ForeachSlot() can help in this situation. It is an alternative version of Foreach() for which the function takes an additional ""processing slot"" parameter besides the columns it should be applied to. RDataFrame guarantees that ForeachSlot() will invoke the user expression with different slot parameters for different concurrent executions (see Special helper columns: rdfentry_ and rdfslot_ for more information on the slot parameter). We can take advantage of ForeachSlot() to evaluate a thread-safe root mean square of column ""x"": // Thread-safe evaluation of RMS of column ""x"" using ForeachSlot; ROOT::EnableImplicitMT();; const unsigned int nSlots = df.GetNSlots();; std::vector<double> sumSqs(nSlots, 0.);; std::vector<unsigned int> ns(nSlots, 0);; ; df.ForeachSlot([&sumSqs, &ns](unsigned int slot, double x) { sumSqs[slot] += x*x; ns[slot] += 1; }, {""x""});; double sumSq = std::accumulate(sumSqs.be",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:68496,simpl,simple,68496,doc/v632/classROOT_1_1RDataFrame.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html,2,['simpl'],['simple']
Usability,"al interval that capture N% of the variations; for each valye of x, where N% is controlled by Z (i.e. Z=1 gives N=68%). The number of sampling curves is chosen to be such; that at least 30 curves are expected to be outside the N% interval, and is minimally 100 (e.g. Z=1->Ncurve=100, Z=2->Ncurve=659, Z=3->Ncurve=11111); Intervals from the sampling method can be asymmetric, and may perform better in the presence of strong correlations. Bool_t plotSanityChecks(RooPlot* frame) const; Utility function for plotOn(), perform general sanity check on frame to ensure safe plotting operations. void makeProjectionSet(const RooAbsArg* plotVar, const RooArgSet* allVars, RooArgSet& projectedVars, Bool_t silent) const; Utility function for plotOn() that constructs the set of; observables to project when plotting ourselves as function of; 'plotVar'. 'allVars' is the list of variables that must be; projected, but may contain variables that we do not depend on. If; 'silent' is cleared, warnings about inconsistent input parameters; will be printed. Bool_t isSelectedComp() const; If true, the current pdf is a selected component (for use in plotting). void globalSelectComp(Bool_t flag); Global switch controlling the activation of the selectComp() functionality. RooAbsFunc * bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; Create an interface adaptor f(vars) that binds us to the specified variables; (in arbitrary order). For example, calling bindVars({x1,x3}) on an object; F(x1,x2,x3,x4) returns an object f(x1,x3) that is evaluated using the; current values of x2 and x4. The caller takes ownership of the returned adaptor. void copyCache(const RooAbsArg* source, Bool_t valueOnly = kFALSE); Copy the cached value of another RooAbsArg to our cache.; Warning: This function copies the cached values of source,; it is the callers responsibility to make sure the cache is clean. void attachToTree(TTree& t, Int_t bufSize = 32000); Attach object to a bran",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsReal.html:54824,clear,cleared,54824,root/html526/RooAbsReal.html,https://root.cern,https://root.cern/root/html526/RooAbsReal.html,3,['clear'],['cleared']
Usability,"al interval that capture N% of the variations; for each valye of x, where N% is controlled by Z (i.e. Z=1 gives N=68%). The number of sampling curves is chosen to be such; that at least 30 curves are expected to be outside the N% interval, and is minimally 100 (e.g. Z=1->Ncurve=100, Z=2->Ncurve=659, Z=3->Ncurve=11111); Intervals from the sampling method can be asymmetric, and may perform better in the presence of strong correlations. Bool_t plotSanityChecks(RooPlot* frame) const; Utility function for plotOn(), perform general sanity check on frame to ensure safe plotting operations. void makeProjectionSet(const RooAbsArg* plotVar, const RooArgSet* allVars, RooArgSet& projectedVars, Bool_t silent) const; Utility function for plotOn() that constructs the set of; observables to project when plotting ourselves as function of; 'plotVar'. 'allVars' is the list of variables that must be; projected, but may contain variables that we do not depend on. If; 'silent' is cleared, warnings about inconsistent input parameters; will be printed. Bool_t isSelectedComp() const; If true, the current pdf is a selected component (for use in plotting). void globalSelectComp(Bool_t flag); Global switch controlling the activation of the selectComp() functionality. RooAbsFunc * bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; Create an interface adaptor f(vars) that binds us to the specified variables; (in arbitrary order). For example, calling bindVars({x1,x3}) on an object; F(x1,x2,x3,x4) returns an object f(x1,x3) that is evaluated using the; current values of x2 and x4. The caller takes ownership of the returned adaptor. void copyCache(const RooAbsArg* source, Bool_t valueOnly = kFALSE, Bool_t setValDirty = kTRUE); Copy the cached value of another RooAbsArg to our cache.; Warning: This function copies the cached values of source,; it is the callers responsibility to make sure the cache is clean. void attachToVStore(RooVectorDataStore& vstore)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsReal.html:56339,clear,cleared,56339,root/html532/RooAbsReal.html,https://root.cern,https://root.cern/root/html532/RooAbsReal.html,7,['clear'],['cleared']
Usability,"al list<Double_t>*RooAbsReal::binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidcleanup(); virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual RooResolutionModel*convolution(RooFormulaVar* basis, RooAbsArg* owner) const; RooRealVar&convVar() const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooResolutionModel.html:4444,clear,clearEvalErrorLog,4444,root/html532/RooResolutionModel.html,https://root.cern,https://root.cern/root/html532/RooResolutionModel.html,2,['clear'],['clearEvalErrorLog']
Usability,"al temporary macros (guitest0xx.C) macros will be saved. ;  ; file  guiWithCLING.C;  A simple example of entering CLING commands and having the CLING output in a ROOT GUI application window. ;  ; file  iconAsXPMData.C;  A simple example of creating icon image from XPM data, included into the code. ;  ; file  listBox.C;  This macro gives an example of how to create a list box and how to set and use its multiple selection feature. ;  ; file  mditest.C;  GUI MDI features. ;  ; file  ntupleTableTest.C;  This TableTest class is a simple example of how to use a TGTable with a TTreeTableInterface. ;  ; file  numberEntry.C;  This macro gives an example of how to create a number entry and how to update a label according to the changed value of this number entry. ;  ; file  simpleTableTest.C;  This TableTest class is a simple example of how to use a TGSimpleTable that creates and owns it's own TGSimpleTableInterface. ;  ; file  Slider3Demo.C;  Simple macro showing capabilities of triple slider. ;  ; file  splitbuttonTest.C;  A simple example that shows the usage of a TGSplitButton. ;  ; file  splitterHorizontal.C;  This macro gives an example of how to create a horizontal splitter. ;  ; file  splitterVertical.C;  This macro gives an example of how to create a vertical splitter. ;  ; file  staffTableTest.C;  This TableTest class is a simple example of how to use a TGTable with a TTreeTableInterface. ;  ; file  statusBar.C;  This macro gives an example of how to create a status bar related to an embedded canvas that shows the info of the selected object, exactly as the status bar of any canvas window. ;  ; file  textEntries.C;  This macro gives an example of how to set/change text entry attributes. ;  ; file  textviewostream.C;  This macro gives an example of how to use the TGTextViewostream widget. ;  ; file  WorldMap.C;  This macro shows how to use a TGImageMap class. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__gui.html:3106,simpl,simple,3106,doc/master/group__tutorial__gui.html,https://root.cern,https://root.cern/doc/master/group__tutorial__gui.html,2,['simpl'],['simple']
Usability,"al voidAssociate(const TGWindow* w); static TClass*Class(); const char*GetCommand() const; Bool_tHasFocus() const; virtual TClass*IsA() const; Bool_tIsEnabled() const; virtual voidSetCommand(const char* command); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGWidget(); TGWidget(Int_t id); Bool_tWantFocus() const; Int_tWidgetId() const. protected:. Int_tClearFlags(Int_t flags); TGWidget&operator=(const TGWidget& tgw); Int_tSetFlags(Int_t flags); TGWidget(const TGWidget& tgw). Data Members; protected:. TStringfCommandcommand to be executed; const TGWindow*fMsgWindowwindow which handles widget events; Int_tfWidgetFlagswidget status flags (OR of EWidgetStatus); Int_tfWidgetIdthe widget id (used for event processing). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGWidget(const TGWidget& tgw); { }. TGWidget& operator=(const TGWidget& tgw). Int_t SetFlags(Int_t flags); { return fWidgetFlags |= flags; }. Int_t ClearFlags(Int_t flags); { return fWidgetFlags &= ~flags; }. TGWidget(); { }. TGWidget(Int_t id); { }. virtual ~TGWidget(); { }. Int_t WidgetId() const; { return fWidgetId; }. Bool_t IsEnabled() const; { return (Bool_t)((fWidgetFlags & kWidgetIsEnabled) != 0); }. Bool_t HasFocus() const; { return (Bool_t)((fWidgetFlags & kWidgetHasFocus) != 0); }. Bool_t WantFocus() const; { return (Bool_t)((fWidgetFlags & kWidgetWantFocus) != 0); }. void Associate(const TGWindow* w); { fMsgWindow = w; }. void SetCommand(const char* command); { fCommand = command; }. const char * GetCommand() const; { return fCommand.Data(); }. » Author: Fons Rademakers 05/01/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 13:36; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGWidget.html:1567,Clear,ClearFlags,1567,root/html602/TGWidget.html,https://root.cern,https://root.cern/root/html602/TGWidget.html,1,['Clear'],['ClearFlags']
Usability,"al voidAssociate(const TGWindow* w); static TClass*Class(); const char*GetCommand() const; Bool_tHasFocus() const; virtual TClass*IsA() const; Bool_tIsEnabled() const; virtual voidSetCommand(const char* command); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGWidget(); TGWidget(Int_t id); Bool_tWantFocus() const; Int_tWidgetId() const. protected:. Int_tClearFlags(Int_t flags); TGWidget&operator=(const TGWidget& tgw); Int_tSetFlags(Int_t flags); TGWidget(const TGWidget& tgw). Data Members; protected:. TStringfCommandcommand to be executed; const TGWindow*fMsgWindowwindow which handles widget events; Int_tfWidgetFlagswidget status flags (OR of EWidgetStatus); Int_tfWidgetIdthe widget id (used for event processing). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGWidget(const TGWidget& tgw); { }. TGWidget& operator=(const TGWidget& tgw). Int_t SetFlags(Int_t flags); { return fWidgetFlags |= flags; }. Int_t ClearFlags(Int_t flags); { return fWidgetFlags &= ~flags; }. TGWidget(); { }. TGWidget(Int_t id); { }. virtual ~TGWidget(); { }. Int_t WidgetId() const; { return fWidgetId; }. Bool_t IsEnabled() const; { return (Bool_t)((fWidgetFlags & kWidgetIsEnabled) != 0); }. Bool_t HasFocus() const; { return (Bool_t)((fWidgetFlags & kWidgetHasFocus) != 0); }. Bool_t WantFocus() const; { return (Bool_t)((fWidgetFlags & kWidgetWantFocus) != 0); }. void Associate(const TGWindow* w); { fMsgWindow = w; }. void SetCommand(const char* command); { fCommand = command; }. const char * GetCommand() const; { return fCommand.Data(); }. » Author: Fons Rademakers 05/01/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 15:58; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGWidget.html:1567,Clear,ClearFlags,1567,root/html604/TGWidget.html,https://root.cern,https://root.cern/root/html604/TGWidget.html,1,['Clear'],['ClearFlags']
Usability,"al voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. static voidInitStatics(). private:. TGLFontManager(const TGLFontManager&); TGLFontManager&operator=(const TGLFontManager&). Data Members; protected:. map<TGLFont,int>fFontMapmap of created fonts; list<const TGLFont*>fFontTrashfonts to purge; static TObjArrayfgFontFileArraymap font-id to ttf-font-file; static vector<int>fgFontSizeArraymap of valid font-size; static Bool_tfgStaticInitDoneglobal initialization flag. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TGLFontManager(); Destructor. void RegisterFont(Int_t size, Int_t file, TGLFont::EMode mode, TGLFont& out); Provide font with given size, file and FTGL class. void RegisterFont(Int_t size, const char* name, TGLFont::EMode mode, TGLFont& out); Get mapping from ttf id to font names. Table taken from TTF.cxx. void ReleaseFont(TGLFont& font); Release font with given attributes. Returns false if font has; not been found in the managers font set. TObjArray* GetFontFileArray(); Get id to file name map. Int_t GetFontSize(Int_t ds); Get availabe font size. Int_t GetFontSize(Int_t ds, Int_t min, Int_t max); Get availabe font size. const char* GetFontNameFromId(Int_t ); Get font name from TAttAxis font id. void InitStatics(); Create a list of available font files and allowed font sizes. void ClearFontTrash(); Delete FTFFont objects registered for destruction. TGLFont& operator=(const TGLFontManager& ). TGLFontManager(const TGLFontManager& ). TGLFontManager(); {}. FontSizeVec_t* GetFontSizeArray(). » Author: Alja Mrak-Tadel 2008 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id: TGLFontManager.h 30425 2009-09-24 19:45:11Z matevz $ » Last generated: 2011-11-03 20:14; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGLFontManager.html:2457,Clear,ClearFontTrash,2457,root/html532/TGLFontManager.html,https://root.cern,https://root.cern/root/html532/TGLFontManager.html,1,['Clear'],['ClearFontTrash']
Usability,"al voidTEveElement::AnnihilateElements(); virtual voidTEveProjectable::AnnihilateProjecteds(); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); Float_t*TAttBBox::AssertBBox(); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElementList*TEveElementList::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidComputeBBox(); virtual voidTNamed::Copy(TObject& named) const; virtual voidTEveElement::CopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); voidTEveElement::CSCApplyMainColorToAllChildren(); voidTEveElement::CSCApplyMainColorToMatchingChildren(); voidTEveElement::CSCApplyMainTransparencyToAllChildren(); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TEveProjectionManager.html:2505,Clear,Clear,2505,root/html532/TEveProjectionManager.html,https://root.cern,https://root.cern/root/html532/TEveProjectionManager.html,4,['Clear'],['Clear']
Usability,"al voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); voidValueSet(Double_t)SIGNAL ; Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. Int_tCalcSliderPos(Float_t v); static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static TStringTQObject::CompressName(const char* method_name); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTGFrame::DoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; const TGResourcePool*TGFrame::GetResourcePool() const; virtual void*TGFrame::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidTObject::MakeZombie(); Int_tTGWidget::SetFlags(Int_t flags); virtual voidTGFrame::StartGuiBuilding(Bool_t on = kTRUE). private:. TEveGValuator&operator=(const TEveGValuator&); TEveGValuator(const TEveGValuator&). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TGWindow::EEditModeTGWindow::kEditDisable; static TGWindow::EEditModeTGWindow::kEditDisableBtnEnable; static TGWindow::EEditModeTGWindow::kEditDisableEvents; static TGWind",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveGValuator.html:16039,Clear,ClearFlags,16039,root/html602/TEveGValuator.html,https://root.cern,https://root.cern/root/html602/TEveGValuator.html,2,['Clear'],['ClearFlags']
Usability,"al voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TTableSorter(); TTableSorter(const TTable& table, TString& colName, Int_t firstRow = 0, Int_t numbeRows = 0); TTableSorter(const TTable* table, TString& colName, Int_t firstRow = 0, Int_t numbeRows = 0); TTableSorter(const Float_t* simpleArray, Int_t arraySize, Int_t firstRow = 0, Int_t numberRows = 0); TTableSorter(const Double_t* simpleArray, Int_t arraySize, Int_t firstRow = 0, Int_t numberRows = 0); TTableSorter(const Long_t* simpleArray, Int_t arraySize, Int_t firstRow = 0, Int_t numberRows = 0); TTableSorter(const TTable& table, SEARCHMETHOD search, COMPAREMETHOD compare, Int_t firstRow = 0, Int_t numbeRows = 0); TTableSorter(const TTable* table, SEARCHMETHOD search, COMPAREMETHOD compare, Int_t firstRow = 0, Int_t numbeRows = 0); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTableSorter.html:8235,simpl,simpleArray,8235,root/html602/TTableSorter.html,https://root.cern,https://root.cern/root/html602/TTableSorter.html,12,['simpl'],['simpleArray']
Usability,"al(TBuffer& b). protected:. TGText(const TGText&); voidInit(); voidLongestLine(); TGText&operator=(const TGText&); Bool_tSetCurrentRow(Long_t row). Data Members; protected:. Long_tfColCountnumber of columns in current line; TGTextLine*fCurrentcurrent line; Long_tfCurrentRowcurrent row number; TStringfFilenamename of opened file ("""" if open buffer); TGTextLine*fFirstfirst line of text; Bool_tfIsSavedfalse if text needs to be saved; Long_tfLongestLinelength of longest line; Long_tfRowCountnumber of rows. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGText(const TGText& ); copy constructor. TGText& operator=(const TGText& ); assignment operator. void Init(); Common initialization method. TGText(); Create default (empty) text buffer. TGText(TGText* text); Create text buffer and initialize with other text buffer. TGText(const char* string); Create text buffer and initialize with single line string. ~TGText(); Destroy text buffer. void Clear(); Clear text buffer. Bool_t Load(const char* fn, Long_t startpos = 0, Long_t length = -1); Load text from file fn. Startpos is the begin from where to; load the file and length is the number of characters to read; from the file. Bool_t LoadBuffer(const char* txtbuf); Load a 0 terminated buffer. Lines will be split at '\n'. Bool_t Save(const char* fn); Save text buffer to file fn. Bool_t Append(const char* fn); Append buffer to file fn. Bool_t DelChar(TGLongPosition pos); Delete character at specified position pos. Bool_t InsChar(TGLongPosition pos, char c); Insert character c at the specified position pos. char GetChar(TGLongPosition pos); Get character a position pos. If charcater not valid return -1. Bool_t DelText(TGLongPosition start, TGLongPosition end); Delete text between start and end positions. Returns false in; case of failure (start and end not being within bounds). Bool_t InsText(TGLongPosition ins_pos, TGText* src, TGLongPosition start_src, TGLongPosition end_src); Insert src ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGText.html:2927,Clear,Clear,2927,root/html532/TGText.html,https://root.cern,https://root.cern/root/html532/TGText.html,2,['Clear'],['Clear']
Usability,"al, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTProofPlayer::Feedback(TList* objs)SIGNAL ; voidTProofPlayer::FeedBackCanvas(const char* name, Bool_t create); virtual Long64_tTProofPlayer::Finalize(TQueryResult* qr); virtual Long64_tTProofPlayer::Finalize(Bool_t force = kFALSE, Bool_t sync = kFALSE); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Long64_tTProofPlayer::GetCacheSize(); virtual TQueryResult*TProofPlayer::GetCurrentQuery() const; virtual Int_tTProofPlayer::GetDrawArgs(const char* var, const char* sel, Option_t* opt, TString& selector, TString& objname); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Long64_tTProofPlayer::GetEventsProcessed() const; virtual TVirtualProofPlayer::EExitStatusTProofPlayer::GetExitStatus() const; virtual const char*TObject::GetIconName() const; virtual TList*TProofPlayer::GetInputList() const; virtual Int_tTProofPlayer::GetLearnEntries(); TList*TQObject::GetListOfClassSignals() con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofPlayerLocal.html:5058,Feedback,Feedback,5058,root/html602/TProofPlayerLocal.html,https://root.cern,https://root.cern/root/html602/TProofPlayerLocal.html,4,['Feedback'],['Feedback']
Usability,"al::RResult<void> ROOT::Experimental::RNTupleImporter::InitDestination(std::string_view destFileName); 131{; 132 fDestFileName = destFileName;; 133 fDestFile = std::unique_ptr<TFile>(TFile::Open(fDestFileName.c_str(), ""UPDATE""));; 134 if (!fDestFile || fDestFile->IsZombie()) {; 135 return R__FAIL(""cannot open dest file "" + std::string(fDestFileName));; 136 }; 137 ; 138 return RResult<void>::Success();; 139}; 140 ; 141void ROOT::Experimental::RNTupleImporter::ReportSchema(); 142{; 143 for (const auto &f : fImportFields) {; 144 std::cout << ""Importing '"" << f.fField->GetFieldName() << ""' ["" << f.fField->GetTypeName() << ""]\n"";; 145 }; 146 for (const auto &f : Internal::GetProjectedFieldsOfModel(*fModel).GetFieldZero().GetSubFields()) {; 147 std::cout << ""Importing (projected) '"" << f->GetFieldName() << ""' ["" << f->GetTypeName() << ""]\n"";; 148 }; 149}; 150 ; 151void ROOT::Experimental::RNTupleImporter::ResetSchema(); 152{; 153 fImportBranches.clear();; 154 fImportFields.clear();; 155 fLeafCountCollections.clear();; 156 fImportTransformations.clear();; 157 fModel = RNTupleModel::CreateBare();; 158 fEntry = nullptr;; 159}; 160 ; 161ROOT::Experimental::RResult<void> ROOT::Experimental::RNTupleImporter::PrepareSchema(); 162{; 163 ResetSchema();; 164 ; 165 // Browse through all branches and their leaves, create corresponding fields and prepare the memory buffers for; 166 // reading and writing. Usually, reading and writing share the same memory buffer, i.e. the object is read from TTree; 167 // and written as-is to the RNTuple. There are exceptions, e.g. for leaf count arrays and C strings.; 168 for (auto b : TRangeDynCast<TBranch>(*fSourceTree->GetListOfBranches())) {; 169 assert(b);; 170 const auto firstLeaf = static_cast<TLeaf *>(b->GetListOfLeaves()->First());; 171 assert(firstLeaf);; 172 ; 173 const bool isLeafList = b->GetNleaves() > 1;; 174 const bool isCountLeaf = firstLeaf->IsRange(); // A leaf storing the number of elements of a leaf count array; 175 const bool is",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RNTupleImporter_8cxx_source.html:6119,clear,clear,6119,doc/master/RNTupleImporter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RNTupleImporter_8cxx_source.html,1,['clear'],['clear']
Usability,"al::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; static voidblockDecompose(const TMatrixD& input, const vector<int>& map1, const vector<int>& map2, TMatrixDSym& S11, TMatrixD& S12, TMatrixD& S21, TMatrixDSym& S22); voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; const TMatrixDSym&covarianceMatrix() const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooMultiVarGaussian.html:3228,Clear,Clear,3228,root/html534/RooMultiVarGaussian.html,https://root.cern,https://root.cern/root/html534/RooMultiVarGaussian.html,3,['Clear'],['Clear']
Usability,al;  ►NMacOSX;  NDetail;  NDetails;  NOpenGL;  NUtil;  ►NX11;  NDetail;  ►NMath;  NBlas;  NBrentMethods;  NCephes;  NChebyshevTemplate recursive functions for defining evaluation of Chebyshev polynomials T_n(x) and the series S(x) = Sum_i c_i* T_i(x) ;  NCholeskyDecompHelpersHelpers for CholeskyDecomp ;  Ndetail;  NGenAlgoOptUtil;  NGenVector;  NGenVector_detail;  NGSLRootHelperHelper functions to test convergence of Root-Finding algorithms ;  NGSLSimAn;  Ngv_detail;  NImpl;  NIntegMultiDim;  NIntegOneDim;  NIntegOptionsUtil;  NIntegration;  NIntegrationMultiDim;  NIntegrationOneDim;  NInterpolation;  NMCIntegration;  NMinim;  NMinim1D;  NRootsRoot-Finding Algorithms ;  NrowOffsetsUtils;  NSampler;  Ntest;  NUtilNamespace defining Utility functions needed by mathcore ;  NVectorUtilGlobal Helper functions for generic Vector classes ;  NMathMore;  ►NMeta;  NSelection;  NMinuit;  NMinuit2;  NQuartz;  NRNamespace associated R package for ROOT ;  NTF1Helper;  ►NTMetaUtils;  NAST2SourceTools;  NpropNames;  NTreeUtils;  Nv5;  ►NVc;  ►NAVX;  NInternal;  NIntrinsics;  ►NCommon;  NInternal;  NError;  NInternal;  NMem;  NReg;  NScalar;  ►NSSE;  NInternal;  NVC__USE_NAMESPACE;  NVectorSpecialInitializerIndexesFromZero;  NVectorSpecialInitializerOne;  NVectorSpecialInitializerZero;  NWarnings;  ▼NROOTaaS;  ►Nhtml;  ►Nexport;  Ncpphighlighter;  ►NiPyROOT;  Ncppcompleter;  Ncppmagic;  Ncpptransformer;  Nutils;  NRootCsgI've modified some very nice bounding box tree code from Gino van der Bergen's Free Solid Library below ;  NROOTwriter;  Nsample_config;  NSelectionRulesUtils;  Nsqlio;  ▼NstdSTL namespace ;  N__ROOT;  Ndetail;  NTClassEdit;  NTCollectionProxyInfo;  Ntest;  NTMath;  NTMatrixTCramerInv;  NTMatrixTSymCramerInv;  ▼NTMVAAbstract ClassifierFactory template that handles arbitrary types ;  NkNN;  NTMVAGlob;  NTStreamerInfoActions;  ▼Nvdt;  Ndetails;  Nwriter;  Nxmlio;  NXPD;  NXrdCl. ROOT 6.06/09 - Reference Guide Generated on Sun Dec 10 2017 22:29:05 using Doxygen 1.8.9. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html606/namespaces.html:3519,Guid,Guide,3519,root/html606/namespaces.html,https://root.cern,https://root.cern/root/html606/namespaces.html,1,['Guid'],['Guide']
Usability,"al_b);  ;  Public Member Functions inherited from TGProgressBar;  TGProgressBar (const TGWindow *p, UInt_t w, UInt_t h, Pixel_t back=GetWhitePixel(), Pixel_t barcolor=GetDefaultSelectedBackground(), GContext_t norm=GetDefaultGC()(), FontStruct_t font=GetDefaultFontStruct(), UInt_t options=kDoubleBorder|kSunkenFrame);  Create progress bar. ;  ;  ~TGProgressBar () override;  ; virtual void Format (const char *format=""%.2f"");  Set format for displaying a value. ;  ; Pixel_t GetBarColor () const;  ; EBarType GetBarType () const;  ; EFillType GetFillType () const;  ; FontStruct_t GetFontStruct () const;  ; TString GetFormat () const;  ; Float_t GetMax () const;  ; Float_t GetMin () const;  ; GContext_t GetNormGC () const;  ; Float_t GetPosition () const;  ; Bool_t GetShowPos () const;  ; const char * GetValueFormat () const;  ; void Increment (Float_t inc);  Increment progress position. ;  ; virtual void Reset ();  Reset progress bar (i.e. set pos to 0). ;  ; void SetBarColor (const char *color=""blue"");  Set progress bar color. ;  ; virtual void SetBarColor (Pixel_t color);  Set progress bar color. ;  ; void SetBarType (EBarType type);  Set bar type. ;  ; void SetFillType (EFillType type);  Set fill type. ;  ; void SetForegroundColor (Pixel_t pixel) override;  Change text color drawing. ;  ; void SetMax (Float_t max);  ; void SetMin (Float_t min);  ; void SetPosition (Float_t pos);  Set progress position between [min,max]. ;  ; void SetRange (Float_t min, Float_t max);  Set min and max of progress bar. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t UsePercent () const;  ;  Public Member Functions inherited from TGFrame;  TGFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a TGFrame object. Options is an OR of the EFrameTypes. ;  ;  TGFrame (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a frame using an externally created window. ;  ;  ~TGFrame ()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGVProgressBar.html:2492,progress bar,progress bar,2492,doc/master/classTGVProgressBar.html,https://root.cern,https://root.cern/doc/master/classTGVProgressBar.html,1,['progress bar'],['progress bar']
Usability,"ale(TH2* ematrix, const char* source, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE); calculate systematic shift from a given background scale error; ematrix: output; source: name of the error source; binMap: see method GetEmatrix(); clearEmat: set kTRUE to clear the histogram prior to adding the errors. void GetEmatrixSysTau(TH2* ematrix, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE); calculate error matrix from error in regularisation parameter; ematrix: output; binMap: see method GetEmatrix(); clearEmat: set kTRUE to clear the histogram prior to adding the errors. void GetEmatrixInput(TH2* ematrix, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE); calculate error matrix from error in input vector alone; ematrix: output; binMap: see method GetEmatrix(); clearEmat: set kTRUE to clear the histogram prior to adding the errors. void GetEmatrixFromVyy(const TMatrixDSparse* vyy, TH2* ematrix, const Int_t* binMap, Bool_t clearEmat); propagate error matrix vyy to the result; vyy: error matrix on input data fY; ematrix: output; binMap: see method GetEmatrix(); clearEmat: set kTRUE to clear the histogram prior to adding the errors. void GetEmatrixTotal(TH2* ematrix, const Int_t* binMap = 0); get total error including statistical error; ematrix: output; binMap: see method GetEmatrix(). Double_t GetChi2Sys(void); calculate total chi**2 including systematic errors. void VectorMapToHist(TH1* hist_delta, const TMatrixDSparse* delta, const Int_t* binMap); sum over bins of *delta, as defined in binMap,fXToHist; hist_delta: histogram to return summed vector; delta: vector to sum and remap. TUnfoldSys(const TUnfoldSys& ). TMatrixDSparse * PrepareCorrEmat(const TMatrixDSparse* m1, const TMatrixDSparse* m2, const TMatrixDSparse* dsys). void ScaleColumnsByVector(TMatrixDSparse* m, const TMatrixTBase<Double_t>* v) const. void GetEmatrixSysBackgroundUncorr(TH2* ematrix, const char* source, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE). » Last changed: root/hist:$Id: TUnfo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TUnfoldSys.html:26298,clear,clearEmat,26298,root/html528/TUnfoldSys.html,https://root.cern,https://root.cern/root/html528/TUnfoldSys.html,12,['clear'],"['clear', 'clearEmat']"
Usability,"alled when system stops idleing.Definition TApplication.cxx:1907; TApplication::EStatusBitsEStatusBitsDefinition TApplication.h:43; TApplication::kProcessRemotely@ kProcessRemotelyDefinition TApplication.h:44; TApplication::kDefaultApplication@ kDefaultApplicationDefinition TApplication.h:45; TApplication::Iconifyvirtual void Iconify()Definition TApplication.h:131; TApplication::ReturnFromRunBool_t ReturnFromRun() constDefinition TApplication.h:153; TApplication::StartIdleingvirtual void StartIdleing()Called when system starts idleing.Definition TApplication.cxx:1896; TApplication::Runvirtual void Run(Bool_t retrn=kFALSE)Main application eventloop. Calls system dependent eventloop via gSystem.Definition TApplication.cxx:1860; TApplication::~TApplicationvirtual ~TApplication()TApplication dtor.Definition TApplication.cxx:210; TApplication::Lowervirtual void Lower()Definition TApplication.h:134; TApplication::OpenReferenceGuideForvoid OpenReferenceGuideFor(const TString &strippedClass)It opens the online reference guide, generated with Doxygen, for the chosen scope (class/namespace/st...Definition TApplication.cxx:1065; TApplication::HandleExceptionvirtual void HandleException(Int_t sig)Handle exceptions (kSigBus, kSigSegmentationViolation, kSigIllegalInstruction and kSigFloatingExcepti...Definition TApplication.cxx:590; TApplication::MakeBatchvirtual void MakeBatch()Switch to batch mode.Definition TApplication.cxx:1395; TApplication::OpenGitHubIssuevoid OpenGitHubIssue(const TString &type)It opens a GitHub issue in a web browser with prefilled ROOT version.Definition TApplication.cxx:1034; TApplication::Hidevirtual void Hide()Definition TApplication.h:130; TApplication::fReturnFromRunBool_t fReturnFromRunDefinition TApplication.h:62; TApplication::Initvirtual void Init()Definition TApplication.h:117; TApplication::fIdleCommandTString fIdleCommandDefinition TApplication.h:68; TApplication::Argvchar ** Argv() constDefinition TApplication.h:141; TApplication::fgGraphNee",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TApplication_8h_source.html:13931,guid,guide,13931,doc/master/TApplication_8h_source.html,https://root.cern,https://root.cern/doc/master/TApplication_8h_source.html,1,['guid'],['guide']
Usability,"allows us to avoid copying them during the grow.; 1024 // From the original LLVM implementation:; 1025 // FIXME: don't do this if they're efficiently moveable.; 1026 if (this->capacity() < RHSSize) {; 1027 if (this->Owns()) {; 1028 // Destroy current elements.; 1029 this->destroy_range(this->begin(), this->end());; 1030 }; 1031 this->set_size(0);; 1032 CurSize = 0;; 1033 this->grow(RHSSize);; 1034 } else if (CurSize) {; 1035 // Otherwise, use assignment for the already-constructed elements.; 1036 std::copy(RHS.begin(), RHS.begin() + CurSize, this->begin());; 1037 }; 1038 ; 1039 // Copy construct the new elements in place.; 1040 this->uninitialized_copy(RHS.begin() + CurSize, RHS.end(), this->begin() + CurSize);; 1041 ; 1042 // Set end.; 1043 this->set_size(RHSSize);; 1044 return *this;; 1045}; 1046 ; 1047template <typename T>; 1048RVecImpl<T> &RVecImpl<T>::operator=(RVecImpl<T> &&RHS); 1049{; 1050 // Avoid self-assignment.; 1051 if (this == &RHS); 1052 return *this;; 1053 ; 1054 // If the RHS isn't small, clear this vector and then steal its buffer.; 1055 if (!RHS.isSmall()) {; 1056 if (this->Owns()) {; 1057 this->destroy_range(this->begin(), this->end());; 1058 if (!this->isSmall()); 1059 free(this->begin());; 1060 }; 1061 this->fBeginX = RHS.fBeginX;; 1062 this->fSize = RHS.fSize;; 1063 this->fCapacity = RHS.fCapacity;; 1064 RHS.resetToSmall();; 1065 return *this;; 1066 }; 1067 ; 1068 // If we already have sufficient space, assign the common elements, then; 1069 // destroy any excess.; 1070 size_t RHSSize = RHS.size();; 1071 size_t CurSize = this->size();; 1072 if (CurSize >= RHSSize) {; 1073 // Assign common elements.; 1074 iterator NewEnd = this->begin();; 1075 if (RHSSize); 1076 NewEnd = std::move(RHS.begin(), RHS.end(), NewEnd);; 1077 ; 1078 // Destroy excess elements and trim the bounds.; 1079 if (this->Owns()); 1080 this->destroy_range(NewEnd, this->end());; 1081 this->set_size(RHSSize);; 1082 ; 1083 // Clear the RHS.; 1084 RHS.clear();; 1085 ; 1086 return *t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RVec_8hxx_source.html:36739,clear,clear,36739,doc/master/RVec_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RVec_8hxx_source.html,2,['clear'],['clear']
Usability,"alog (const char *sel, Int_t sz, Long64_t fst, Long64_t ent);  Reset progress dialog. ;  ; void ResetProgressDialogStatus ();  ; Int_t Retrieve (const char *queryref, const char *path=0);  Send retrieve request for the query specified by ref. ;  ; Int_t Retrieve (Int_t query, const char *path=0);  Send retrieve request for the qry-th query in fQueries. ;  ; Int_t SavePerfTree (const char *pf=0, const char *qref=0);  Save performance information from TPerfStats to file 'pf'. ;  ; void SendDataSetStatus (const char *msg, UInt_t n, UInt_t tot, Bool_t st);  Send or notify data set status. ;  ; Bool_t SendingLogToWindow () const;  ; void SendLogToWindow (Bool_t mode);  ; void SetActive (Bool_t=kTRUE);  ; virtual void SetAlias (const char *alias="""");  Set an alias for this session. ;  ; void SetDataPoolUrl (const char *url);  ; virtual Int_t SetDataSetTreeName (const char *dataset, const char *treename);  Set/Change the name of the default tree. ;  ; void SetDrawFeedbackOption (TDrawFeedback *f, Option_t *opt);  Set draw feedback option. ;  ; void SetInputDataFile (const char *datafile);  Set the file to be used to optimally distribute the input data objects. ;  ; void SetLogLevel (Int_t level, UInt_t mask=TProofDebug::kAll);  Set server logging level. ;  ; void SetManager (TProofMgr *mgr);  Set manager and schedule its destruction after this for clean operations. ;  ; void SetMaxDrawQueries (Int_t max);  Set max number of draw queries whose results are saved. ;  ; Int_t SetParallel (Int_t nodes=-1, Bool_t random=kFALSE);  Tell PROOF how many slaves to use in parallel. ;  ; void SetParameter (const char *par, const char *value);  Set input list parameter. ;  ; void SetParameter (const char *par, Double_t value);  Set an input list parameter. ;  ; void SetParameter (const char *par, Int_t value);  Set an input list parameter. ;  ; void SetParameter (const char *par, Long64_t value);  Set an input list parameter. ;  ; void SetParameter (const char *par, Long_t value);  Set ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:17773,feedback,feedback,17773,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,3,['feedback'],['feedback']
Usability,"already recorded in 2010/2011. Submitted by Anonymous (not verified) on Thu, 07/23/2015 - 21:50 Permalink . Re: Backward Compatibility . Hi ROOT user,; Thanks for your comment! And yes, backward compatibility is key in this area. I will do all I can do reduce the amount of code we need to maintain only for backward compatibility reasons - e.g. Reflex can hopefully be removed instead of being rewired to tap the clang AST (i.e. the cling reflection database). But at the same time we will make sure that all data stored by the experiments remains readable (ideally even from 2001 :-).; This is mostly an issue of type names; CINT has some non-obvious (and non-standard compliant) naming conventions for types, and we must make sure that cling continues to understand them. Or we cannot read an edm::TaggedVector anymore (because CINT would have called it an edm::TaggedVector).; We plan to release a snapshot of ROOT using cling in the third quarter of 2012; we will really appreciate feedback on problems with reading old files - as you correctly pointed out this is one of the most crucial ingredients of this project.; Cheers, Axel. Submitted by Anonymous (not verified) on Thu, 07/23/2015 - 21:50 Permalink . Thank you for clarifying a . Thank you for clarifying a transition plan, it is quite a reasonable approach. I just want to add a personal request to your wish list. Would it be possible to improve IO speed for reading? Very often analysis code is constrained by CPU/disk access limits when reading ntuples. The speed varies from ~100kHz for a tree with few float branches to ~200 Hz for complex data structure. A factor of few improvement for complex data can be a difference between requiring just one machine or a small farm. Submitted by Anonymous (not verified) on Thu, 07/23/2015 - 21:51 Permalink . Re: I/O Performance . Hi ROOT User,; We have dramatically improved the I/O performance over the last two years. If you use the latest production release also for writing data you mi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/blog/do-we-need-yet-another-custom-c-interpreter.html:14341,feedback,feedback,14341,d/blog/do-we-need-yet-another-custom-c-interpreter.html,https://root.cern,https://root.cern/d/blog/do-we-need-yet-another-custom-c-interpreter.html,1,['feedback'],['feedback']
Usability,"already"",name);; 1259 return nullptr;; 1260 }; 1261 }; 1262 TDirectoryFile *newdir = nullptr;; 1263 if (const char *slash = strchr(name,'/')) {; 1264 TString workname(name, Long_t(slash-name));; 1265 TDirectoryFile *tmpdir = nullptr;; 1266 GetObject(workname.Data(), tmpdir);; 1267 if (!tmpdir) {; 1268 tmpdir = (TDirectoryFile*)mkdir(workname.Data(),title);; 1269 if (!tmpdir) return nullptr;; 1270 }; 1271 if (!newdir) newdir = tmpdir;; 1272 tmpdir->mkdir(slash+1);; 1273 return newdir;; 1274 }; 1275 ; 1276 TDirectory::TContext ctxt(this);; 1277 ; 1278 newdir = new TDirectoryFile(name, title, """", this);; 1279 ; 1280 return newdir;; 1281}; 1282 ; 1283////////////////////////////////////////////////////////////////////////////////; 1284/// Purge lowest key cycles in a directory.; 1285///; 1286/// By default, only the highest cycle of a key is kept. Keys for which; 1287/// the ""KEEP"" flag has been set are not removed. See TKey::Keep().; 1288/// NOTE: This does not reduce the size of a TFile--; 1289/// the space is simply freed up to be overwritten.; 1290 ; 1291void TDirectoryFile::Purge(Short_t); 1292{; 1293 if (!IsWritable()) return;; 1294 ; 1295 TDirectory::TContext ctxt(this);; 1296 ; 1297 TKey *key;; 1298 TIter prev(GetListOfKeys(), kIterBackward);; 1299 ; 1300 while ((key = (TKey*)prev())) { // reverse loop on keys; 1301 TKey *keyprev = (TKey*)GetListOfKeys()->Before(key);; 1302 if (!keyprev) break;; 1303 if (key->GetKeep() == 0) {; 1304 if (strcmp(key->GetName(), keyprev->GetName()) == 0) {; 1305 key->Delete(); // Remove from the file.; 1306 delete key; // Remove from memory.; 1307 }; 1308 }; 1309 }; 1310 TFile *f = GetFile();; 1311 if (fModified && f) {; 1312 WriteKeys(); // Write new keys structure; 1313 WriteDirHeader(); // Write new directory header; 1314 f->WriteFree(); // Write new free segments list; 1315 f->WriteHeader(); // Write new file header; 1316 }; 1317}; 1318 ; 1319////////////////////////////////////////////////////////////////////////////////; 1320/",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TDirectoryFile_8cxx_source.html:43769,simpl,simply,43769,doc/master/TDirectoryFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TDirectoryFile_8cxx_source.html,1,['simpl'],['simply']
Usability,"als to calculated transformed fraction coefficients when a frozen reference frame is provided and projection integrals for similar transformations when a frozen reference range is provided. ; Definition at line 308 of file RooAddModel.cxx. ◆ IsA(). TClass * RooAddModel::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsPdf.; Definition at line 131 of file RooAddModel.h. ◆ isDirectGenSafe(). bool RooAddModel::isDirectGenSafe ; (; const RooAbsArg & ; arg); const. overridevirtual . Direct generation is safe if all components say so. ; Reimplemented from RooAbsPdf.; Definition at line 646 of file RooAddModel.cxx. ◆ pdfList(). const RooArgList & RooAddModel::pdfList ; (; ); const. inline . Return list of component p.d.fs. ; Definition at line 66 of file RooAddModel.h. ◆ printMetaArgs(). void RooAddModel::printMetaArgs ; (; std::ostream & ; os); const. overridevirtual . Customized printing of arguments of a RooAddModel to more intuitively reflect the contents of the product operator construction. ; Reimplemented from RooAbsArg.; Definition at line 702 of file RooAddModel.cxx. ◆ resetErrorCounters(). void RooAddModel::resetErrorCounters ; (; Int_t ; resetValue = 10). overridevirtual . Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ; Reimplemented from RooAbsPdf.; Definition at line 420 of file RooAddModel.cxx. ◆ selectNormalization(). void RooAddModel::selectNormalization ; (; const RooArgSet * ; depSet = nullptr, . bool ; force = false . ). overrideprotectedvirtual . Interface function used by test statistics to freeze choice of observables for interpretation of fraction coefficients. ; Reimplemented from RooAbsReal.; Definition at line 599 of file RooAddModel.cxx. ◆ selectNormalizationRange(). void RooAddModel::selectNormalizationRange ; (; const char * ; rangeName = nullptr, . bool ; force = false . ). overrideprotectedvirtual . Interface function u",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAddModel.html:88766,intuit,intuitively,88766,doc/master/classRooAddModel.html,https://root.cern,https://root.cern/doc/master/classRooAddModel.html,1,['intuit'],['intuitively']
Usability,"als; // dictionary context after ResetGlobals().; 113 TString fSharedLibs; // Shared libraries loaded by G__loadfile().; 114 Int_t fGlobalsListSerial;// Last time we refreshed the ROOT list of globals.; 115 TString fIncludePath; // Interpreter include path.; 116 TString fRootmapLoadPath; // Dynamic load path for rootmap files.; 117 TEnv* fMapfile; // Association of classes to libraries.; 118 std::vector<std::string> fAutoLoadLibStorage; // A storage to return a const char* from GetClassSharedLibsForModule.; 119 std::map<size_t,std::vector<const char*>> fClassesHeadersMap; // Map of classes hashes and headers associated; 120 std::map<const cling::Transaction*,size_t> fTransactionHeadersMap; // Map which transaction contains which autoparse.; 121 std::set<size_t> fLookedUpClasses; // Set of classes for which headers were looked up already; 122 std::set<size_t> fPayloads; // Set of payloads; 123 std::set<const char*> fParsedPayloadsAddresses; // Set of payloads which were parsed; 124 std::hash<std::string> fStringHashFunction; // A simple hashing function; 125 std::unordered_set<const clang::NamespaceDecl*> fNSFromRootmaps; // Collection of namespaces fwd declared in the rootmaps; 126 TObjArray* fRootmapFiles; // Loaded rootmap files.; 127 Bool_t fLockProcessLine; // True if ProcessLine should lock gInterpreterMutex.; 128 Bool_t fCxxModulesEnabled;// True if C++ modules was enabled; 129 ; 130 std::unique_ptr<cling::Interpreter> fInterpreter; // The interpreter.; 131 std::unique_ptr<cling::MetaProcessor> fMetaProcessor; // The metaprocessor.; 132 ; 133 std::vector<cling::Value> *fTemporaries; // Stack of temporaries; 134 ROOT::TMetaUtils::TNormalizedCtxt *fNormalizedCtxt; // Which typedef to avoid stripping.; 135 ROOT::TMetaUtils::TClingLookupHelper *fLookupHelper; // lookup helper used by TClassEdit; 136 ; 137 void* fPrevLoadedDynLibInfo; // Internal info to mark the last loaded libray.; 138 std::vector<void*> fRegisterModuleDyLibs; // Stack of libraries currently runn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8h_source.html:4432,simpl,simple,4432,doc/master/TCling_8h_source.html,https://root.cern,https://root.cern/doc/master/TCling_8h_source.html,1,['simpl'],['simple']
Usability,"alue is:; 67\f[{\partial^2\chi^2\over\partial\theta_i\partial\theta_k}\approx; 68Z_{ik}=; 69\sum^n_{j=1}{1\over\sigma^2_j}{\partial f_j\over\theta_i}; 70{\partial f_j\over\theta_k}\tag{5}; 71\f]; 72 ; 73Then the equations for parameter increments are; 74\f[\left(\partial\chi^2\over\partial\theta_i\right)_{\vec\theta={\vec\theta}^0}; 75+\sum_k Z_{ik}\cdot(\theta_k-\theta^0_k) = 0,; 76\qquad i=1\ldots m\tag{6}; 77\f]; 78 ; 79Remarkable feature of algorithm is the technique for step; 80restriction. For an initial value of parameter \f${\vec\theta}^0\f$ a; 81parallelepiped \f$P_0\f$ is built with the center at \f${\vec\theta}^0\f$ and; 82axes parallel to coordinate axes \f$\theta_i\f$. The lengths of; 83parallelepiped sides along i-th axis is \f$2b_i\f$, where \f$b_i\f$ is such a; 84value that the functions \f$f_j(\vec\theta)\f$ are quasi-linear all over; 85the parallelepiped.; 86 ; 87FUMILI takes into account simple linear inequalities in the form:; 88\f[; 89\theta_i^{\rm min}\le\theta_i\le\theta^{\rm max}_i\tag{7}; 90\f]; 91 ; 92They form parallelepiped \f$P\f$ (\f$P_0\f$ may be deformed by \f$P\f$).; 93Very similar step formulae are used in FUMILI for negative logarithm; 94of the likelihood function with the same idea - linearization of; 95function argument.; 96 ; 97*/; 98 ; 99 ; 100#include ""TFumili.h""; 101 ; 102#include <iostream>; 103#include ""TGraphAsymmErrors.h""; 104#include ""TF1.h""; 105#include ""TF2.h""; 106#include ""TF3.h""; 107#include ""TH1.h""; 108#include ""TMath.h""; 109#include ""TROOT.h""; 110#include ""TList.h""; 111#include ""TVirtualFitter.h""; 112 ; 113 ; 114extern void H1FitChisquareFumili(Int_t &npar, Double_t *gin, Double_t &f, Double_t *u, Int_t flag);; 115extern void H1FitLikelihoodFumili(Int_t &npar, Double_t *gin, Double_t &f, Double_t *u, Int_t flag);; 116extern void GraphFitChisquareFumili(Int_t &npar, Double_t *gin, Double_t &f, Double_t *u, Int_t flag);; 117 ; 118 ; 119ClassImp(TFumili);; 120 ; 121TFumili *gFumili=nullptr;; 122// Machine dependent va",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFumili_8cxx_source.html:3480,simpl,simple,3480,doc/master/TFumili_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFumili_8cxx_source.html,1,['simpl'],['simple']
Usability,"alue of fStreamerType.Definition TClass.cxx:6215; TClass::GetSharedLibsconst char * GetSharedLibs()Get the list of shared libraries containing the code for class cls.Definition TClass.cxx:3623; TClass::CalculateStreamerOffsetvoid CalculateStreamerOffset() constCalculate the offset between an object of this class to its base class TObject.Definition TClass.cxx:2183; TClass::GetMissingDictionariesForPairElementsvoid GetMissingDictionariesForPairElements(TCollection &result, TCollection &visited, bool recurse)Definition TClass.cxx:3973; TClass::ReplaceWithvoid ReplaceWith(TClass *newcl) constDefinition TClass.cxx:4142; TClass::RegisterAddressInRepositoryvoid RegisterAddressInRepository(const char *where, void *location, const TClass *what) constDefinition TClass.cxx:290; TClass::PropertyLong_t Property() const overrideReturns the properties of the TClass as a bit field stored as a Long_t value.Definition TClass.cxx:6086; TClass::HasDefaultConstructorBool_t HasDefaultConstructor(Bool_t testio=kFALSE) constReturn true if we have access to a constructor usable for I/O.Definition TClass.cxx:7393; TClass::GetMenuItemsvoid GetMenuItems(TList *listitems)Returns list of methods accessible by context menu.Definition TClass.cxx:3874; TClass::SetNewvoid SetNew(ROOT::NewFunc_t newFunc)Install a new wrapper around 'new'.Definition TClass.cxx:6985; TClass::fIsAMethodstd::atomic< TMethodCall * > fIsAMethodDefinition TClass.h:231; TClass::ReadRulesstatic Int_t ReadRules()Read the class.rules files from the default location:.Definition TClass.cxx:1820; TClass::CanSplitBaseAllowBool_t CanSplitBaseAllow()Pointer to the function implementing streaming for this class.Definition TClass.cxx:2247; TClass::MoveAddressInRepositoryvoid MoveAddressInRepository(const char *where, void *oldadd, void *newadd, const TClass *what) constDefinition TClass.cxx:337; TClass::fStreamerImplstd::atomic< StreamerImpl_t > fStreamerImplDefinition TClass.h:287; TClass::SetContextMenuTitlevoid SetContextMenuTitle(c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:335119,usab,usable,335119,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,2,['usab'],['usable']
Usability,"alue of fStreamerType.Definition TClass.cxx:6282; TClass::GetSharedLibsconst char * GetSharedLibs()Get the list of shared libraries containing the code for class cls.Definition TClass.cxx:3690; TClass::CalculateStreamerOffsetvoid CalculateStreamerOffset() constCalculate the offset between an object of this class to its base class TObject.Definition TClass.cxx:2250; TClass::GetMissingDictionariesForPairElementsvoid GetMissingDictionariesForPairElements(TCollection &result, TCollection &visited, bool recurse)Definition TClass.cxx:4040; TClass::ReplaceWithvoid ReplaceWith(TClass *newcl) constDefinition TClass.cxx:4209; TClass::RegisterAddressInRepositoryvoid RegisterAddressInRepository(const char *where, void *location, const TClass *what) constDefinition TClass.cxx:290; TClass::PropertyLong_t Property() const overrideReturns the properties of the TClass as a bit field stored as a Long_t value.Definition TClass.cxx:6153; TClass::HasDefaultConstructorBool_t HasDefaultConstructor(Bool_t testio=kFALSE) constReturn true if we have access to a constructor usable for I/O.Definition TClass.cxx:7460; TClass::GetMenuItemsvoid GetMenuItems(TList *listitems)Returns list of methods accessible by context menu.Definition TClass.cxx:3941; TClass::SetNewvoid SetNew(ROOT::NewFunc_t newFunc)Install a new wrapper around 'new'.Definition TClass.cxx:7052; TClass::fIsAMethodstd::atomic< TMethodCall * > fIsAMethodDefinition TClass.h:231; TClass::ReadRulesstatic Int_t ReadRules()Read the class.rules files from the default location:.Definition TClass.cxx:1887; TClass::CanSplitBaseAllowBool_t CanSplitBaseAllow()Pointer to the function implementing streaming for this class.Definition TClass.cxx:2314; TClass::MoveAddressInRepositoryvoid MoveAddressInRepository(const char *where, void *oldadd, void *newadd, const TClass *what) constDefinition TClass.cxx:337; TClass::fStreamerImplstd::atomic< StreamerImpl_t > fStreamerImplDefinition TClass.h:287; TClass::SetContextMenuTitlevoid SetContextMenuTitle(c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:337757,usab,usable,337757,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,2,['usab'],['usable']
Usability,"alueProp = kTRUE, Bool_t shapeProp = kFALSE); Bool_taddThreshold(Double_t upperLimit, const char* catName, Int_t catIdx = -99999); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual voidTObject::AppendPad(Option_t* option = """"); voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsArg*RooAbsCategory::createFundamental(const char* newname = 0) const; Roo1DTable*RooAbsCategory::createTable(const char* label) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooThresholdCategory.html:2137,clear,clearShapeDirty,2137,root/html532/RooThresholdCategory.html,https://root.cern,https://root.cern/root/html532/RooThresholdCategory.html,2,['clear'],['clearShapeDirty']
Usability,"alueProp = kTRUE, Bool_t shapeProp = kFALSE); Bool_taddThreshold(Double_t upperLimit, const char* catName, Int_t catIdx = -99999); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual voidTObject::AppendPad(Option_t* option = """"); voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsArg*RooAbsCategory::createFundamental(const char* newname = 0) const; Roo1DTable*RooAbsCategory::createTable(const char* label) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooThresholdCategory.html:2137,clear,clearShapeDirty,2137,root/html528/RooThresholdCategory.html,https://root.cern,https://root.cern/root/html528/RooThresholdCategory.html,2,['clear'],['clearShapeDirty']
Usability,"al~TEveCompositeFrameInPack(); voidTObject::AbstractMethod(const char* method) const; virtual voidTEveCompositeFrame::AcquireEveWindow(TEveWindow* ew); voidTEveCompositeFrame::ActionPressed(); virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidDestroy(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(); Bool_tTQObject::Disconnect(const char* si",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TEveCompositeFrameInPack.html:1533,Clear,Clear,1533,root/html532/TEveCompositeFrameInPack.html,https://root.cern,https://root.cern/root/html532/TEveCompositeFrameInPack.html,4,['Clear'],['Clear']
Usability,"am & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Member Functions; void doEval (RooFit::EvalContext &) const override;  Base function for computing multiple values of a RooAbsReal. ;  ; double evaluate () const override;  Calculate current value of this object. ;  ; RooFormula & formula () const;  ; bool isValidReal (double, bool) const override;  Interface function to check if given value is a valid value for this object. Returns true unless overridden. ;  ; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursive) override;  Propagate server changes to embedded formula object. ;  ; void translate (RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ;  Protected Member Functions inherited from RooAbsPdf;  RooAbsPdf (const RooAbsPdf &other, const char *name=nullptr);  Copy constructor. ;  ; virtual std::unique_ptr< RooAbsReal > createNLLImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the NLL creation routine. ;  ; virtual std::unique_ptr< RooFitResult > fitToImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the likelihood fitting routine. ;  ; bool isActiveNormSet (RooArgSet const *normSet) const;  Checks if normSet is the currently active normalization set of this PDF, meaning is exactly the same object as the one the _normSet member points to (or both are nullptr). ;  ; double normalizeWithNaNPacking (double rawVal, double normVal) const;  ; RooPlot * plotOn (RooPlot *frame, PlotOpt o) const override;  Plot oneself on 'frame'. ;  ; Int_t * randomizeProtoOrd",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooGenericPdf.html:61337,simpl,simple,61337,doc/master/classRooGenericPdf.html,https://root.cern,https://root.cern/doc/master/classRooGenericPdf.html,1,['simpl'],['simple']
Usability,"am ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Private Member Functions; void CreateMLPOptions (TString);  translates options from option string into TMlpANN language ;  ; void DeclareOptions ();  define the options (their key words) that can be set in the option string ;  ; void Init (void);  default initialisations ;  ; void ProcessOptions ();  builds the neural network as specified by the user ;  . Private Attributes; TString fHiddenLayer;  string containing the hidden layer structure ;  ; TString fLayerSpec;  Layer specification option. ;  ; TString fLearningMethod;  the learning method (given via option string) ;  ; TTree * fLocalTrainingTree;  local copy of training tree ;  ; TMultiLayerPerceptron * fMLP;  the TMLP ;  ; TString fMLPBuildOptions;  option string to build the mlp ;  ; Int_t fNcycles;  number of training cycles ;  ; Double_t fValidationFraction;  fraction of events in training tree used for cross validation ;  . Additional Inherited Members;  Public Types inherited from TMVA::MethodBase; enum  EWeightFileType { kROOT =0; , kTEXT; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Attributes inherited from TM",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodTMlpANN.html:26667,learn,learning,26667,doc/master/classTMVA_1_1MethodTMlpANN.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodTMlpANN.html,1,['learn'],['learning']
Usability,"am for the classes TUnfoldDensity and TUnfoldBinning ;  ► unuran;  unuranDemo.CExample macro to show unuran capabilities The results are compared with what is obtained using TRandom or TF1::GetRandom The macro is divided in 3 parts: ;  unuranFoamTest.CThis program must be compiled and executed with Aclic as follows ;  ► v7;  concurrentfill.cxx;  draw.cxx;  draw_subpads.cxx;  draw_th1.cxxThis macro generates a small V7 TH1D, fills it and draw it in a V7 canvas ;  draw_v6.cxx;  fitpanel.cxx;  histops.cxx;  line.cxx;  lineStyle.cxx;  lineWidth.cxx;  markerStyle.cxx;  pad.cxx;  perf.cxx;  perfcomp.cxx;  simple.cxx;  text.cxx;  ► vecops;  vo001_AdoptOrOwnMemory.C In this tutorial we learn how the RVec class can be used to adopt existing memory or allocate some ;  vo001_AdoptOrOwnMemory.py In this tutorial we learn how the RVec class can be used to adopt existing memory or allocate some ;  vo002_VectorCalculations.C In this tutorial we learn how the RVec class can be used to express easily mathematical operations involving arrays and scalars ;  vo003_LogicalOperations.C In this tutorial we learn how the RVec class can be used to express logical operations ;  ► xml;  DOMParsePerson.C ROOT implementation of a XML DOM Parser ;  DOMRecursive.C ROOT implementation of a XML DOM Parser ;  SAXHandler.C ROOT implementation of a simple SAX Handler ;  xmlmodifyfile.C Example to read, modify and store xml file, using TXMLEngine class The input file, produced by xmlnewfile.C macro is used If you need full xml syntax support, use TXMLParser instead ;  xmlnewfile.C Example to create a new xml file with the TXMLEngine class ;  xmlreadfile.C Example to read and parse any xml file, supported by TXMLEngine class The input file, produced by xmlnewfile.C macro is used If you need full xml syntax support, use TXMLParser instead ;  benchmarks.CThis macro run several tests and produces an benchmark report ;  demos.CThis macro shows a control bar to run some of the ROOT tutorials ;  demoshelp.CThi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v614/files.html:165397,learn,learn,165397,doc/v614/files.html,https://root.cern,https://root.cern/doc/v614/files.html,1,['learn'],['learn']
Usability,"am prior to adding the covariance matrix contribution. Returns the covariance matrix contribution from shifting the given uncertainty source within one sigma ; the array binMap is explained with the method GetOutput(). The flag clearEmat may be used to add covariance matrices from several uncertainty sources. ; Definition at line 1113 of file TUnfoldSys.cxx. ◆ GetEmatrixSysTau(). void TUnfoldSys::GetEmatrixSysTau ; (; TH2 * ; ematrix, . const Int_t * ; binMap = nullptr, . Bool_t ; clearEmat = kTRUE . ). covariance matrix contribution from error on regularisation parameter ; Parameters. [in,out]ematrixoutput histogram ; [in]binMap(default=nullptr) remapping of histogram bins ; [in]clearEmat(default=true) if true, clear the histogram. this method returns the covariance contributions to the unfolding result from the assigned uncertainty on the parameter tau, see method SetTauError(). ; the array binMap is explained with the method GetOutput(). The flag clearEmat may be used to add covariance matrices from several uncertainty sources. ; Definition at line 1176 of file TUnfoldSys.cxx. ◆ GetEmatrixSysUncorr(). void TUnfoldSys::GetEmatrixSysUncorr ; (; TH2 * ; ematrix, . const Int_t * ; binMap = nullptr, . Bool_t ; clearEmat = kTRUE . ). Covariance contribution from uncorrelated uncertainties of the response matrix. ; Parameters. [in,out]ematrixcovariance matrix histogram ; [in]binMapmapping of histogram bins ; [in]clearEmatif true, ematrix is cleared prior to adding this covariance matrix contribution. This method propagates the uncertainties of the response matrix histogram, specified with the constructor, to the unfolding result. It is assumed that the entries of that histogram are bin-to-bin uncorrelated. In many cases this corresponds to the ""Monte Carlo statistical uncertainties"". ; The array binMap is explained with the method GetOutput(). The flag clearEmat may be used to add covariance matrices from several uncertainty sources. ; Definition at line 760 of file TUn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfoldSys.html:41536,clear,clearEmat,41536,doc/master/classTUnfoldSys.html,https://root.cern,https://root.cern/doc/master/classTUnfoldSys.html,1,['clear'],['clearEmat']
Usability,"ame = 0); RooCompositeDataStore(const char* name, const char* title, const RooArgSet& vars, RooCategory& indexCat, map<std::string,RooAbsDataStore*> inputData); virtual~RooCompositeDataStore(); voidTObject::AbstractMethod(const char* method) const; virtual RooAbsArg*addColumn(RooAbsArg& var, Bool_t adjustRange = kTRUE); virtual RooArgSet*addColumns(const RooArgList& varList); virtual voidappend(RooAbsDataStore& other); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidattachBuffers(const RooArgSet& extObs); virtual voidTObject::Browse(TBrowser* b); virtual voidcacheArgs(const RooAbsArg* owner, RooArgSet& varSet, const RooArgSet* nset = 0, Bool_t skipZeroWeights = kFALSE); const RooArgSet&RooAbsDataStore::cachedVars() const; virtual const RooAbsArg*cacheOwner(); virtual Bool_tchangeObservableName(const char* from, const char* to); virtual voidRooAbsDataStore::checkInit() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual RooAbsDataStore*clone(const char* newname = 0) const; virtual TObject*TNamed::Clone(const char* newname = """") const; virtual RooAbsDataStore*clone(const RooArgSet& vars, const char* newname = 0) const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Int_tRooAbsDataStore::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsDataStore::dirtyProp() const; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voiddump(); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooCompositeDataStore.html:1700,Clear,Clear,1700,root/html534/RooCompositeDataStore.html,https://root.cern,https://root.cern/root/html534/RooCompositeDataStore.html,1,['Clear'],['Clear']
Usability,"ame behaviour as a TF1. Example of a function. TF2 *f2 = new TF2(""f2"",""sin(x)*sin(y)/(x*y)"",0,5,0,5);; TF12 *f12 = new TF12(""f12"",f2,0.1,""y"");; f12->Draw();. Function Members (Methods); public:. virtual~TF12(); voidTObject::AbstractMethod(const char* method) const; static voidTF1::AbsValue(Bool_t reject = kTRUE); virtual voidTF1::AddParameter(const TString& name, Double_t value); virtual Bool_tTF1::AddToGlobalList(Bool_t on = kTRUE); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTF1::Browse(TBrowser* b); static voidTF1::CalcGaussLegendreSamplingPoints(Int_t num, Double_t* x, Double_t* w, Double_t eps = 3.0E-11); virtual Double_tTF1::CentralMoment(Double_t n, Double_t a, Double_t b, const Double_t* params = 0, Double_t epsilon = 9.9999999999999995E-7); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidCopy(TObject& f12) const; virtual TH1*TF1::CreateHistogram(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Double_tTF1::Derivative(Double_t x, Double_t* params = 0, Double_t epsilon = 0.001) const; virtual Double_tTF1::Derivative2(Double_t x, Double_t* params = 0, Double_t epsilon = 0.001) const; virtual Double_tTF1::Derivative3(Double_t x, Double_t* params = 0, Double_t epsilon = 0.001) const; static Double_tTF1::DerivativeError(); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTF1::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTF1::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TF1*DrawCopy(Option_t* option = """") const; virtual TObject*TF1::DrawDerivative(Option_t* option = ""al"")MENU ; virtual voidTF1::DrawF1(Double_t xmin, Double_t xmax, Option_t* o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TF12.html:1187,Clear,Clear,1187,root/html604/TF12.html,https://root.cern,https://root.cern/root/html604/TF12.html,1,['Clear'],['Clear']
Usability,"ame or title of the window changed - propagate to frames.; Virtual from TEveElement. void PopulateEmptyFrame(TEveCompositeFrame* ef); Populate given frame-slot - intended for initial population; of a new slot or low-level window-swapping.; No layout or window-mapping is done. void SwapWindow(TEveWindow* w); Swap frames with the given window. void SwapWindowWithCurrent(); Swap frames with the current window. void UndockWindow(); Undock the window - put it into a dedicated main-frame. void UndockWindowDestroySlot(); Undock the window - put it into a dedicated main-frame.; The old window slot is destroyed. void ReplaceWindow(TEveWindow* w); Replace this window with the passed one.; Eve parentship is properly handled.; This will most likely lead to the destruction of this window.; Layout is called on the frame. void DestroyWindow(); Destroy eve-window - replace it with an empty frame-slot. void DestroyWindowAndSlot(); Destroy eve-window and its frame-slot. void ClearEveFrame(); Clears eve-frame associated with this window.; This is used in special case when the window is embedded in a foreign; GUI container and gets deleted from this side.; In particular, this happens when TRootBrowser closes a tab. void SetShowTitleBar(Bool_t x); Set display state of the title-bar.; This is forwarded to eve-frame. Bool_t IsCurrent() const; Returns true if this window is the current one. void MakeCurrent(); Make this window current. void SetCurrent(Bool_t curr); Set current state of this eve-window.; Protected method - called by window-manager. Bool_t IsAncestorOf(TEveWindow* win); Returns true if this is an ancestor of win. void TitleBarClicked(); Slot for clicking on the title-bar.; The wish that this window becomes the current one is sent to; the window-manager. TEveWindowSlot* CreateDefaultWindowSlot(); Create a default window slot.; Static helper. TEveWindowSlot* CreateWindowMainFrame(TEveWindow* eve_parent = 0); Create a new main-frame and populate it with a default window-slot.; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TEveWindow.html:22588,Clear,ClearEveFrame,22588,root/html532/TEveWindow.html,https://root.cern,https://root.cern/root/html532/TEveWindow.html,8,['Clear'],"['ClearEveFrame', 'Clears']"
Usability,"ame x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static const TGFont*TGCheckButton::fgDefaultFont; static const TGFont*TGTextButton::fgDefaultFont; static Pixel_tTGFrame::fgDefaultFrameBackground; static const TGGC*TGCheckButton::fgDefaultGC; static const TGGC*TGButton::fgDefaultGC; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGButton::fgHibckgndGC; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static Window_tTGButton::fgReleaseBtnthe last released button; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGedSelect(const TGWindow* p, Int_t id); Create pattern select button. ~TGedSelect(); Destructor of pattern select button. Bool_t HandleButton(Event_t* event); Handle mouse button events in pattern select button. void Enable(); Set widget state flag (kTRUE=enabled, kFALSE=disabled). void Disable(); Clear widget state flag. void DoRedraw(); Draw separator and arrow. void DrawTriangle(GContext_t gc, Int_t x, Int_t y); Draw small triangle. void SetPopup(TGedPopup* p); { fPopup = p; }. » Author: Marek Biskup, Ilka Antcheva 24/07/03 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-03-14 16:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGedSelect.html:23456,Clear,Clear,23456,root/html534/TGedSelect.html,https://root.cern,https://root.cern/root/html534/TGedSelect.html,1,['Clear'],['Clear']
Usability,"ame); Int_tTProof::AddIncludePath(const char* incpath, Bool_t onClient = kFALSE, TList* wrks = 0, Bool_t doCollect = kTRUE); voidTProof::AddInput(TObject* obj); voidTProof::AddInputData(TObject* obj, Bool_t push = kFALSE); virtual voidTObject::AppendPad(Option_t* option = """"); Int_tTProof::Archive(Int_t query, const char* url); Int_tTProof::Archive(const char* queryref, const char* url = 0); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTProof::Browse(TBrowser* b); virtual Bool_tCancelStagingDataSet(const char* dataset); voidTProof::cd(Int_t id = -1); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; Int_tTProof::CleanupSession(const char* sessiontag); virtual voidTNamed::Clear(Option_t* option = """"); virtual voidClearCache(const char* file = 0); voidTProof::ClearData(UInt_t what = kUnregistered, const char* dsname = 0); virtual voidClearDataSetCache(const char* dataset = 0); voidTProof::ClearFeedback(); voidTProof::ClearInput(); voidTProof::ClearInputData(TObject* obj = 0); voidTProof::ClearInputData(const char* name); Int_tTProof::ClearPackage(const char* package); Int_tTProof::ClearPackages(); virtual TObject*TNamed::Clone(const char* newname = """") const; voidTProof::Close(Option_t* option = """"); voidTProof::CloseProgressDialog()SIGNAL ; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTNamed::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofLite.html:2162,Clear,ClearData,2162,root/html534/TProofLite.html,https://root.cern,https://root.cern/root/html534/TProofLite.html,3,['Clear'],['ClearData']
Usability,"ame, '.');; 7579 if(ext && ((strcmp(ext, "".csv"") == 0) || (strcmp(ext, "".CSV"") == 0)) && delimiter == ' ') {; 7580 delimiter = ',';; 7581 }; 7582 return ReadStream(in, branchDescriptor, delimiter);; 7583}; 7584 ; 7585////////////////////////////////////////////////////////////////////////////////; 7586/// Determine which newline this file is using.; 7587/// Return '\\r' for Windows '\\r\\n' as that already terminates.; 7588 ; 7589char TTree::GetNewlineValue(std::istream &inputStream); 7590{; 7591 Long_t inPos = inputStream.tellg();; 7592 char newline = '\n';; 7593 while(true) {; 7594 char c = 0;; 7595 inputStream.get(c);; 7596 if(!inputStream.good()) {; 7597 Error(""ReadStream"",""Error reading stream: no newline found."");; 7598 return 0;; 7599 }; 7600 if(c == newline) break;; 7601 if(c == '\r') {; 7602 newline = '\r';; 7603 break;; 7604 }; 7605 }; 7606 inputStream.clear();; 7607 inputStream.seekg(inPos);; 7608 return newline;; 7609}; 7610 ; 7611////////////////////////////////////////////////////////////////////////////////; 7612/// Create or simply read branches from an input stream.; 7613///; 7614/// \see reference information for TTree::ReadFile; 7615 ; 7616Long64_t TTree::ReadStream(std::istream& inputStream, const char *branchDescriptor, char delimiter); 7617{; 7618 char newline = 0;; 7619 std::stringstream ss;; 7620 std::istream *inTemp;; 7621 Long_t inPos = inputStream.tellg();; 7622 if (!inputStream.good()) {; 7623 Error(""ReadStream"",""Error reading stream"");; 7624 return 0;; 7625 }; 7626 if (inPos == -1) {; 7627 ss << std::cin.rdbuf();; 7628 newline = GetNewlineValue(ss);; 7629 inTemp = &ss;; 7630 } else {; 7631 newline = GetNewlineValue(inputStream);; 7632 inTemp = &inputStream;; 7633 }; 7634 std::istream& in = *inTemp;; 7635 Long64_t nlines = 0;; 7636 ; 7637 TBranch *branch = nullptr;; 7638 Int_t nbranches = fBranches.GetEntries();; 7639 if (nbranches == 0) {; 7640 char *bdname = new char[4000];; 7641 char *bd = new char[100000];; 7642 Int_t nch = 0;; 7643 if",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:299551,simpl,simply,299551,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['simpl'],['simply']
Usability,"ame, const char *title, RooAbsReal &x);  Constructor of flat polynomial function. ;  ;  RooPolyVar (const RooPolyVar &other, const char *name=nullptr);  Copy constructor. ;  ; double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const override;  Calculate and return analytical integral over x. ;  ; std::string buildCallToAnalyticIntegral (Int_t code, const char *rangeName, RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines the analytical integral translation for the class. ;  ; TObject * clone (const char *newname) const override;  ; Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const override;  Advertise that we can internally integrate over x. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void translate (RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 object bound ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooPolyVar.html:1997,simpl,simple,1997,doc/master/classRooPolyVar.html,https://root.cern,https://root.cern/doc/master/classRooPolyVar.html,1,['simpl'],['simple']
Usability,"ame, const char* title, Int_t dim, const Int_t* nbins, const Double_t* xmin = 0, const Double_t* xmax = 0, Int_t chunksize = 1024*16); ~THnSparseT<TArrayC>(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c = 1.); voidTHnSparse::AddBinContent(const Int_t* idx, Double_t v = 1.); virtual voidTHnSparse::AddBinContent(Long64_t bin, Double_t v = 1.); virtual voidTHnSparse::AddBinError2(Long64_t bin, Double_t e2); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTHnBase::Browse(TBrowser* b); voidTHnBase::CalculateErrors(Bool_t calc = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; virtual ROOT::THnBaseBinIter*THnSparse::CreateIter(Bool_t respectAxisRange) const; static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const TH1* h1, Int_t chunkSize = 1024*16); static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const THnBase* hn, Int_t chunkSize = 1024*16); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THnSparseT_TArrayC_.html:2482,Clear,Clear,2482,root/html534/THnSparseT_TArrayC_.html,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayC_.html,1,['Clear'],['Clear']
Usability,"ame, const char* title, Int_t dim, const Int_t* nbins, const Double_t* xmin = 0, const Double_t* xmax = 0, Int_t chunksize = 1024*16); ~THnSparseT<TArrayD>(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c = 1.); voidTHnSparse::AddBinContent(const Int_t* idx, Double_t v = 1.); virtual voidTHnSparse::AddBinContent(Long64_t bin, Double_t v = 1.); virtual voidTHnSparse::AddBinError2(Long64_t bin, Double_t e2); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTHnBase::Browse(TBrowser* b); voidTHnBase::CalculateErrors(Bool_t calc = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; virtual ROOT::THnBaseBinIter*THnSparse::CreateIter(Bool_t respectAxisRange) const; static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const TH1* h1, Int_t chunkSize = 1024*16); static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const THnBase* hn, Int_t chunkSize = 1024*16); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THnSparseT_TArrayD_.html:2482,Clear,Clear,2482,root/html534/THnSparseT_TArrayD_.html,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayD_.html,1,['Clear'],['Clear']
Usability,"ame, const char* title, Int_t dim, const Int_t* nbins, const Double_t* xmin = 0, const Double_t* xmax = 0, Int_t chunksize = 1024*16); ~THnSparseT<TArrayF>(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c = 1.); voidTHnSparse::AddBinContent(const Int_t* idx, Double_t v = 1.); virtual voidTHnSparse::AddBinContent(Long64_t bin, Double_t v = 1.); virtual voidTHnSparse::AddBinError2(Long64_t bin, Double_t e2); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTHnBase::Browse(TBrowser* b); voidTHnBase::CalculateErrors(Bool_t calc = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; virtual ROOT::THnBaseBinIter*THnSparse::CreateIter(Bool_t respectAxisRange) const; static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const TH1* h1, Int_t chunkSize = 1024*16); static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const THnBase* hn, Int_t chunkSize = 1024*16); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THnSparseT_TArrayF_.html:2482,Clear,Clear,2482,root/html534/THnSparseT_TArrayF_.html,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayF_.html,1,['Clear'],['Clear']
Usability,"ame, const char* title, Int_t dim, const Int_t* nbins, const Double_t* xmin = 0, const Double_t* xmax = 0, Int_t chunksize = 1024*16); ~THnSparseT<TArrayI>(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c = 1.); voidTHnSparse::AddBinContent(const Int_t* idx, Double_t v = 1.); virtual voidTHnSparse::AddBinContent(Long64_t bin, Double_t v = 1.); virtual voidTHnSparse::AddBinError2(Long64_t bin, Double_t e2); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTHnBase::Browse(TBrowser* b); voidTHnBase::CalculateErrors(Bool_t calc = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; virtual ROOT::THnBaseBinIter*THnSparse::CreateIter(Bool_t respectAxisRange) const; static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const TH1* h1, Int_t chunkSize = 1024*16); static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const THnBase* hn, Int_t chunkSize = 1024*16); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THnSparseT_TArrayI_.html:2482,Clear,Clear,2482,root/html534/THnSparseT_TArrayI_.html,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayI_.html,1,['Clear'],['Clear']
Usability,"ame, const char* title, Int_t dim, const Int_t* nbins, const Double_t* xmin = 0, const Double_t* xmax = 0, Int_t chunksize = 1024*16); ~THnSparseT<TArrayL>(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c = 1.); voidTHnSparse::AddBinContent(const Int_t* idx, Double_t v = 1.); virtual voidTHnSparse::AddBinContent(Long64_t bin, Double_t v = 1.); virtual voidTHnSparse::AddBinError2(Long64_t bin, Double_t e2); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTHnBase::Browse(TBrowser* b); voidTHnBase::CalculateErrors(Bool_t calc = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; virtual ROOT::THnBaseBinIter*THnSparse::CreateIter(Bool_t respectAxisRange) const; static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const TH1* h1, Int_t chunkSize = 1024*16); static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const THnBase* hn, Int_t chunkSize = 1024*16); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THnSparseT_TArrayL_.html:2482,Clear,Clear,2482,root/html534/THnSparseT_TArrayL_.html,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayL_.html,1,['Clear'],['Clear']
Usability,"ame, const char* title, Int_t dim, const Int_t* nbins, const Double_t* xmin = 0, const Double_t* xmax = 0, Int_t chunksize = 1024*16); ~THnSparseT<TArrayS>(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c = 1.); voidTHnSparse::AddBinContent(const Int_t* idx, Double_t v = 1.); virtual voidTHnSparse::AddBinContent(Long64_t bin, Double_t v = 1.); virtual voidTHnSparse::AddBinError2(Long64_t bin, Double_t e2); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTHnBase::Browse(TBrowser* b); voidTHnBase::CalculateErrors(Bool_t calc = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; virtual ROOT::THnBaseBinIter*THnSparse::CreateIter(Bool_t respectAxisRange) const; static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const TH1* h1, Int_t chunkSize = 1024*16); static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const THnBase* hn, Int_t chunkSize = 1024*16); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THnSparseT_TArrayS_.html:2482,Clear,Clear,2482,root/html534/THnSparseT_TArrayS_.html,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayS_.html,1,['Clear'],['Clear']
Usability,"ame.; 2. obj - an object; 3. redo - method or function to do/redo operation; 4. undo - method or function to undo operation. Comments:; - if either clname or obj is NULL that means that redo/undo is function; - to specify default arguments for redo/undo method/function; '=' must precede to argument value. Example:; TQCommand(""TPad"", gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");. - undo method can be same as redo one. In that case undo parameter; can be omitted. Example:; TQCommand(""TPad"", gPad, ""SetFillStyle(Style_t)"");. TQCommand(TObject* obj, const char* redo = 0, const char* undo = 0); Constructor. Input parameters:; 1. obj - an object; 2. redo - method or function to do/redo operation; 3. undo - method or function to undo operation. Comments:; - to specify default arguments for redo/undo method/function; '=' must precede to argument value. Example:; TQCommand(gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");. - undo method can be same as redo one. In that case ""undo""; can parameter be omitted. Example:; TQCommand(gPad, ""SetFillStyle(Style_t)"");. TQCommand(const TQCommand& com); Copy constructor. ~TQCommand(); dtor. TQCommand * GetCommand(); Return a command which is doing redo/undo action. This static method allows to set undo parameters dynamically, i.e.; during execution of Redo function. Example:; For redo actions like TGTextEdit::DelChar() it is not possible to; know ahead what character will be deleted.; To set arguments for undo action ( e.g. TGTextEdit::InsChar(char)),; one needs to call TQCommand::SetUndoArgs(1, character) from; inside of TGTextEdit::DelChar() method, i.e. TQCommand::GetCommand()->SetUndoArgs(1, somechar);. void Delete(Option_t* option = """"); If ""opt"" is not zero delete every merged command which option string is; equal to ""opt"". If ""opt"" is zero - delete all merged commands. Bool_t CanMerge(TQCommand* c) const; Two commands can be merged if they can be composed into; a single command (Macro command). To allow merging commands",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TQCommand.html:18983,undo,undo,18983,root/html528/TQCommand.html,https://root.cern,https://root.cern/root/html528/TQCommand.html,10,['undo'],['undo']
Usability,"ame::AddInput(UInt_t emask); virtual voidTGTextView::AddLine(const char* string); virtual voidTGTextView::AddLineFast(const char* string); virtual voidTGTextView::AddText(TGText* text); virtual voidTGTextView::AdjustWidth(); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual voidTGWidget::Associate(const TGWindow* w); boolbasic_ios<char,char_traits<char> >::bad() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGView::ChangeBackground(Pixel_t); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); voidbasic_ios<char,char_traits<char> >::clear(ios_base::iostate __state = goodbit); virtual voidTGTextView::Clear(Option_t* = """"); virtual voidTGTextView::Clicked(const char* word)SIGNAL ; virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual Bool_tTGTextView::Copy(); basic_ios<char,char_traits<char> >&basic_ios<char,char_traits<char> >::copyfmt(const basic_ios<char,char_traits<char> >& __rhs); virtual voidTGTextView::DataCha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGTextViewostream.html:2116,clear,clear,2116,root/html604/TGTextViewostream.html,https://root.cern,https://root.cern/root/html604/TGTextViewostream.html,2,['clear'],['clear']
Usability,"ame::AddInput(UInt_t emask); virtual voidTGTextView::AddLine(const char* string); virtual voidTGTextView::AddLineFast(const char* string); virtual voidTGTextView::AddText(TGText* text); virtual voidTGTextView::AdjustWidth(); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual voidTGWidget::Associate(const TGWindow* w); boolbasic_ios<char,char_traits<char> >::bad() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGView::ChangeBackground(Pixel_t); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); voidbasic_ios<char,char_traits<char> >::clear(ios_base::iostate state = goodbit); virtual voidTGTextView::Clear(Option_t* = """"); virtual voidTGTextView::Clicked(const char* word)SIGNAL ; virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual Bool_tTGTextView::Copy(); basic_ios<char,char_traits<char> >&basic_ios<char,char_traits<char> >::copyfmt(const basic_ios<char,char_traits<char> >& rhs); virtual voidTGTextView::DataChanged",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGTextViewostream.html:2238,clear,clear,2238,root/html534/TGTextViewostream.html,https://root.cern,https://root.cern/root/html534/TGTextViewostream.html,2,['clear'],['clear']
Usability,"ame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidDoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); virtual voidTGDockButton::DrawBorder(); virtual voidTGButton::EmitSignals(Bool_t wasUp); static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; const TGResourcePool*TGFrame::GetResourcePool() const; virtual void*TGFrame::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidTObject::MakeZombie(); TGWindow&TGWindow::operator=(const TGWindow& tgw); Int_tTGWidget::SetFlags(Int_t flags); virtual voidTGButton::SetToggleButton(Bool_t); virtual voidTGFrame::StartGuiBuilding(Bool_t on = kTRUE). Data Members; public:. enum TGFrame::[unnamed] { kDeleteWindowCalled; };; enum TGWindow::EEditMode { kEditEnable; kEditDisable; kEditDisableEvents; kEditDisableGrab; kEditDisableLayout; kEditDisableResize; kEditDisableHeight; kEditDisableWidth; kEditDisableBtnEnable; kEditDisableKeyEnable; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotP",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGDockHideButton.html:15368,Clear,ClearFlags,15368,root/html532/TGDockHideButton.html,https://root.cern,https://root.cern/root/html532/TGDockHideButton.html,2,['Clear'],['ClearFlags']
Usability,"ame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static TStringTQObject::CompressName(const char* method_name); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTGFrame::DoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); voidTGMdiWinResizer::DrawBox(Int_t x, Int_t y, UInt_t width, UInt_t height); static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; const TGResourcePool*TGFrame::GetResourcePool() const; virtual void*TGFrame::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidTObject::MakeZombie(); voidTGMdiWinResizer::MoveResizeIt(); Int_tTGWidget::SetFlags(Int_t flags); virtual voidTGFrame::StartGuiBuilding(Bool_t on = kTRUE). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TGWindow::EEditModeTGWindow::kEditDisable; static TGWindow::EEditModeTGWindow::kEditDisableBtnEnable; static TGWindow::EEditModeTGWindow::kEditDisableEvents; static TGWindow::EEditModeTGWindow::kEditDisableGrab; static TGWi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGMdiCornerWinResizer.html:14273,Clear,ClearFlags,14273,root/html602/TGMdiCornerWinResizer.html,https://root.cern,https://root.cern/root/html602/TGMdiCornerWinResizer.html,6,['Clear'],['ClearFlags']
Usability,"ame::fWMYWM y position; UInt_tTGFrame::fWidthframe width; TStringTGMainFrame::fWindowNamewindow name; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. private:. TGTextButton*fCancelcancel button; TGTextButton*fOkok button; char*fStrcutsaddress to store cuts string; char*fStrvarsaddress to store variables string; TGTextEntry*fTECutstext entry widget for cuts; TGTextEntry*fTEVarstext entry widget for variables. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TTreeInput(const TGWindow* p, const TGWindow* main, char* strvars, char* strcuts); Create simple input dialog. ~TTreeInput(); Cleanup dialog. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t ); Handle button and text enter events. TTreeInput(const TTreeInput& ). TTreeInput & operator=(const TTreeInput& ). » Author: David Gonzalez Maline 21/10/2008 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-03-15 16:40; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTreeInput.html:22249,simpl,simple,22249,root/html534/TTreeInput.html,https://root.cern,https://root.cern/root/html534/TTreeInput.html,2,['simpl'],['simple']
Usability,"ame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoSphereEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for sphere editor. ~TGeoSphereEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to a given sphere. Bool_t IsDelayed() const; Check if shape drawing is delayed. void DoName(); Slot for name. void DoApply(); Slot for applying modifications. void DoModified(); Slot for signaling modifications. void DoUndo(); Slot for undoing last operation. void DoRmin(); Slot for Rmin. void DoRmax(); Slot for Rmax. void DoPhi1(); Slot for phi1. void DoPhi2(); Slot for phi2. void DoPhi(); Slot for phi slider. void DoTheta1(); Slot for theta1. void DoTheta2(); Slot for theta2. void DoTheta(); Slot for theta slider. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id: TGeoSphereEditor.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2010-09-23 20:09; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoSphereEditor.html:21590,undo,undoing,21590,root/html528/TGeoSphereEditor.html,https://root.cern,https://root.cern/root/html528/TGeoSphereEditor.html,1,['undo'],['undoing']
Usability,"ame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoSphereEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for sphere editor. ~TGeoSphereEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to a given sphere. Bool_t IsDelayed() const; Check if shape drawing is delayed. void DoName(); Slot for name. void DoApply(); Slot for applying modifications. void DoModified(); Slot for signaling modifications. void DoUndo(); Slot for undoing last operation. void DoRmin(); Slot for Rmin. void DoRmax(); Slot for Rmax. void DoPhi1(); Slot for phi1. void DoPhi2(); Slot for phi2. void DoPhi(); Slot for phi slider. void DoTheta1(); Slot for theta1. void DoTheta2(); Slot for theta2. void DoTheta(); Slot for theta slider. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id: TGeoSphereEditor.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-07-04 15:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGeoSphereEditor.html:21690,undo,undoing,21690,root/html530/TGeoSphereEditor.html,https://root.cern,https://root.cern/root/html530/TGeoSphereEditor.html,1,['undo'],['undoing']
Usability,"ame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoSphereEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for sphere editor. ~TGeoSphereEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to a given sphere. Bool_t IsDelayed() const; Check if shape drawing is delayed. void DoName(); Slot for name. void DoApply(); Slot for applying modifications. void DoModified(); Slot for signaling modifications. void DoUndo(); Slot for undoing last operation. void DoRmin(); Slot for Rmin. void DoRmax(); Slot for Rmax. void DoPhi1(); Slot for phi1. void DoPhi2(); Slot for phi2. void DoPhi(); Slot for phi slider. void DoTheta1(); Slot for theta1. void DoTheta2(); Slot for theta2. void DoTheta(); Slot for theta slider. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id: TGeoSphereEditor.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoSphereEditor.html:21690,undo,undoing,21690,root/html532/TGeoSphereEditor.html,https://root.cern,https://root.cern/root/html532/TGeoSphereEditor.html,2,['undo'],['undoing']
Usability,"ame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoCombiTransEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for combi matrix editor. ~TGeoCombiTransEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the selected combi matrix. void DoName(); Slot for name. void DoRotPhi(); Slot for phi (Euler X convention). void DoRotTheta(); Slot for theta (Euler X convention). void DoRotPsi(); Slot for psi (Euler X convention). void DoRotAngle(); Slot for additional rotation about one axis. Bool_t DoParameters(); Slot for checking parameters. void DoApply(); Slot for applying modifications. void DoCancel(); Slot for cancelling last un-applied operations. void DoModified(); Slot for notifying changes. void DoUndo(); Slot for undoing last changes. void DoDx(); Slot for X. void DoDy(); Slot for Y. void DoDz(); Slot for Z. TGeoCombiTransEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()). » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id$ » Last generated: 2015-06-02 16:00; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGeoCombiTransEditor.html:23181,undo,undoing,23181,root/html604/TGeoCombiTransEditor.html,https://root.cern,https://root.cern/root/html604/TGeoCombiTransEditor.html,2,['undo'],['undoing']
Usability,"ame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoCombiTransEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for combi matrix editor. ~TGeoCombiTransEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the selected combi matrix. void DoName(); Slot for name. void DoRotPhi(); Slot for phi (Euler X convention). void DoRotTheta(); Slot for theta (Euler X convention). void DoRotPsi(); Slot for psi (Euler X convention). void DoRotAngle(); Slot for additional rotation about one axis. Bool_t DoParameters(); Slot for checking parameters. void DoApply(); Slot for applying modifications. void DoCancel(); Slot for cancelling last un-applied operations. void DoModified(); Slot for notifying changes. void DoUndo(); Slot for undoing last changes. void DoDx(); Slot for X. void DoDy(); Slot for Y. void DoDz(); Slot for Z. TGeoCombiTransEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()). » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id$ » Last generated: 2015-06-30 15:00; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoCombiTransEditor.html:23181,undo,undoing,23181,root/html602/TGeoCombiTransEditor.html,https://root.cern,https://root.cern/root/html602/TGeoCombiTransEditor.html,2,['undo'],['undoing']
Usability,"ame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGProgressBar(const TGWindow* p, UInt_t w, UInt_t h, Pixel_t back = GetWhitePixel(), Pixel_t barcolor = GetDefaultSelectedBackground(), GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t options = kDoubleBorder | kSunkenFrame); Create progress bar. void SetRange(Float_t min, Float_t max); Set min and max of progress bar. void SetPosition(Float_t pos); Set progress position between [min,max]. void Increment(Float_t inc); Increment progress position. void Reset(); Reset progress bar (i.e. set pos to 0). void SetFillType(TGProgressBar::EFillType type); Set fill type. void SetBarType(TGProgressBar::EBarType type); Set bar type. void SetBarColor(ULong_t color); Set progress bar color. void SetBarColor(const char* color = ""blue""); Set progress bar color. void Format(const char* format = ""%.2f""); Set format for displaying a value. FontStruct_t GetDefaultFontStruct(); Return default font structure in use. const TGGC & GetDefaultGC(); Return default graphics context in use. void SetForegroundColor(Pixel_t pixel); Change text color drawing. void SavePrimitive(ostream& out, Option_t* option = """"); Save progress bar parameters as a C++ statement(s) on output stream out. Bool_t fDrawBar; // if true draw only bar in DoRedraw(). TGProgressBar(const TGWindow* p, UInt_t w, UInt_t h, Pixel_t back = GetWhitePixel(), Pixel_t barcolor = GetDefaultSelectedBackground(), GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t options = kDoubleBorder | kSunkenFrame); { }. Float_t GetMin() const; { return fMin; }. Float_t GetMax() const; { return fMax; }. Float_t GetPosition() const; { return fPos; }. EFillType GetFillType() const; { return fFillType; }. EBarType GetBarType() const; { retu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGProgressBar.html:21273,progress bar,progress bar,21273,root/html602/TGProgressBar.html,https://root.cern,https://root.cern/root/html602/TGProgressBar.html,4,['progress bar'],['progress bar']
Usability,"ame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. private:. Cursor_tfCursorcurrent cursor; Cursor_tfDefaultCursordefault cursor; TList*fExpressionListlist of user defined expression widgets; TGListView*fListViewassociated list view; TTreeViewer*fViewerpointer to tree viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TGContainer. ←; TGLVContainer. ←; TTVLVContainer. Function documentation; TTVLVContainer(const TGWindow* p, UInt_t w, UInt_t h, UInt_t options = kSunkenFrame); TGLVContainer constructor. ~TTVLVContainer(); TGLVContainer destructor. const char* Cut(); return the cut entry. TTVLVEntry * ExpressionItem(Int_t index); return the expression item at specific position. TList* ExpressionList(); return the list of user-defined expressions. const char* Ex(); return the expression on X. const char* Ey(); return the expression on Y. const char* Ez(); return the expression on Z. const char* ScanList(); return the cut entry. Bool_t HandleButton(Event_t* event); Handle mouse button event in container. Bool_t HandleMotion(Event_t* event); Handle mouse motion events. void EmptyAll(); Clear all names and aliases for expression type items. void RemoveNonStatic(); remove all non-static items from the list view, except expressions. void SelectItem(const char* name); select an item. TTVLVContainer(const TGWindow* p, UInt_t w, UInt_t h, UInt_t options = kSunkenFrame). void AddThisItem(TTVLVEntry* item); { AddFrame(item, fItemLayout); item->SetColumns(fCpos, fJmode); }. TTreeViewer * GetViewer(); {return fViewer;}. void SetListView(TGListView* lv); {fListView = lv;}. void SetViewer(TTreeViewer* viewer); {fViewer = viewer;}. » Last changed: root/treeviewer:$Id$ » Last generated: 2015-06-02 16:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TTVLVContainer.html:27257,Clear,Clear,27257,root/html604/TTVLVContainer.html,https://root.cern,https://root.cern/root/html604/TTVLVContainer.html,1,['Clear'],['Clear']
Usability,"ame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. private:. Cursor_tfCursorcurrent cursor; Cursor_tfDefaultCursordefault cursor; TList*fExpressionListlist of user defined expression widgets; TGListView*fListViewassociated list view; TTreeViewer*fViewerpointer to tree viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TGContainer. ←; TGLVContainer. ←; TTVLVContainer. Function documentation; TTVLVContainer(const TGWindow* p, UInt_t w, UInt_t h, UInt_t options = kSunkenFrame); TGLVContainer constructor. ~TTVLVContainer(); TGLVContainer destructor. const char* Cut(); return the cut entry. TTVLVEntry * ExpressionItem(Int_t index); return the expression item at specific position. TList* ExpressionList(); return the list of user-defined expressions. const char* Ex(); return the expression on X. const char* Ey(); return the expression on Y. const char* Ez(); return the expression on Z. const char* ScanList(); return the cut entry. Bool_t HandleButton(Event_t* event); Handle mouse button event in container. Bool_t HandleMotion(Event_t* event); Handle mouse motion events. void EmptyAll(); Clear all names and aliases for expression type items. void RemoveNonStatic(); remove all non-static items from the list view, except expressions. void SelectItem(const char* name); select an item. TTVLVContainer(const TGWindow* p, UInt_t w, UInt_t h, UInt_t options = kSunkenFrame). void AddThisItem(TTVLVEntry* item); { AddFrame(item, fItemLayout); item->SetColumns(fCpos, fJmode); }. TTreeViewer * GetViewer(); {return fViewer;}. void SetListView(TGListView* lv); {fListView = lv;}. void SetViewer(TTreeViewer* viewer); {fViewer = viewer;}. » Last changed: root/treeviewer:$Id$ » Last generated: 2015-06-30 15:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTVLVContainer.html:27157,Clear,Clear,27157,root/html602/TTVLVContainer.html,https://root.cern,https://root.cern/root/html602/TTVLVContainer.html,1,['Clear'],['Clear']
Usability,"ame; TGLabel*fTotaltotal progress info; TSessionViewer*fViewerpointer on main viewer; TGHProgressBar*frmProgcurrent process progress bar. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionQueryFrame(); Destructor. void Build(TSessionViewer* gui); Build query informations frame. void Modified(Bool_t mod = kTRUE); Notify changes in query editor settings. void Feedback(TList* objs); Feedback function connected to Feedback signal.; Used to update feedback histograms. void UpdateHistos(TList* objs); Update feedback histograms. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti); New version of Progress (just forward to the old version; for the time being). void ProgressLocal(Long64_t total, Long64_t processed); Update progress bar and status labels. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void ResetProgressDialog(const char* selec, Int_t files, Long64_t first, Long64_t entries); Reset progress frame information fields. void OnBtnFinalize(); Finalize query. void OnBtnStop(); Stop processing query. void OnBtnShowLog(); Show query log. void OnBtnRetrieve(); Retrieve query. void OnBtnAbort(); Abort processing query. void OnBtnSubmit(); Submit query. void UpdateButtons(TQueryDescription* desc); Update buttons state for the current query status. void UpdateInfos(); Update query information (header) text view. TGTab * GetTab() const; { return fTab; }. TCanvas * GetStatsCanvas() const; { return fStatsCanvas; }. TEditQueryFrame * GetQueryEditFrame() const; { return fFD; }. » Author: Marek Biskup, Jakub Madejczyk, Bertrand Bellenot 10/08/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id: TSessionViewer.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSessionQueryFrame.html:21493,progress bar,progress bar,21493,root/html528/TSessionQueryFrame.html,https://root.cern,https://root.cern/root/html528/TSessionQueryFrame.html,2,['progress bar'],['progress bar']
Usability,"ameBackground; static TGGC*TGProgressBar::fgDefaultGC; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGVProgressBar(const TGWindow* p = 0, UInt_t w = kProgressBarTextWidth, UInt_t h = 4, Pixel_t back = GetWhitePixel(), Pixel_t barcolor = GetDefaultSelectedBackground(), GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t options = kDoubleBorder | kSunkenFrame); cconstructor. TGVProgressBar(const TGWindow* p, TGProgressBar::EBarType type, UInt_t h); Simple constructor allow you to create either a standard progress; bar, or a more fancy progress bar (fancy means: double sized border,; white background and a bit wider to allow for text to be printed; in the bar. void DoRedraw(); Draw vertical progress bar. void SavePrimitive(ostream& out, Option_t* option = """"); Save a vertical progress bar as a C++ statement(s) on output stream out. void Percent(Bool_t ); { fPercent = on; fClient->NeedRedraw(this); }. void ShowPos(Bool_t ); { fShowPos = on; fClient->NeedRedraw(this); }. TGDimension GetDefaultSize() const; { return TGDimension(fWidth, fBarWidth); }. TGVProgressBar(const TGWindow* p = 0, UInt_t w = kProgressBarTextWidth, UInt_t h = 4, Pixel_t back = GetWhitePixel(), Pixel_t barcolor = GetDefaultSelectedBackground(), GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t options = kDoubleBorder | kSunkenFrame). virtual ~TGVProgressBar(); { }. » Author: Fons Rademakers 10/10/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGVProgressBar.html:21670,progress bar,progress bar,21670,root/html602/TGVProgressBar.html,https://root.cern,https://root.cern/root/html602/TGVProgressBar.html,6,"['Simpl', 'progress bar']","['Simple', 'progress bar']"
Usability,"amed* set2RangeName = 0); voidinitialize(const RooNormSetCache& other); virtual TClass*IsA() const; const RooArgSet*lastSet1() const; const RooArgSet*lastSet2() const; const RooNameSet&nameSet1() const; const RooNameSet&nameSet2() const; RooNormSetCache&operator=(const RooNormSetCache&); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. voidexpand(). Data Members; protected:. RooSetPair*_asArr! do not persist; RooHashTable*_htable! do not persist; RooNameSet_name1!; RooNameSet_name2!; Int_t_nreg; Int_t_regSize; TNamed*_set2RangeName!. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooNormSetCache(Int_t regSize = 64); Construct normalization set manager with given initial size; _htable = regSize>16 ? new RooHashTable(regSize,RooHashTable::Intrinsic) : 0 ;. RooNormSetCache(const RooNormSetCache& other); Copy constructor. ~RooNormSetCache(); Destructor. void clear(); Clear contents. void initialize(const RooNormSetCache& other); Initialize cache from contents of given other cache. void add(const RooArgSet* set1, const RooArgSet* set2 = 0); Add given pair of RooArgSet pointers to our store. void expand(); Expand registry size by doubling capacity. Bool_t autoCache(const RooAbsArg* self, const RooArgSet* set1, const RooArgSet* set2 = 0, const TNamed* set2RangeName = 0, Bool_t autoRefill = kTRUE); If RooArgSets set1 and set2 or sets with similar contents have; been seen by this cache manager before return kFALSE If not,; return kTRUE. If sets have not been seen and doRefill is true,; update cache reference to current input sets. Int_t index(const RooArgSet* set1, const RooArgSet* set2 = 0, const TNamed* set2RangeName = 0). Bool_t contains(const RooArgSet* set1, const RooArgSet* set2 = 0, const TNamed* set2RangeName = 0). Bool_t containsSet1(const RooArgSet* set1). const RooArgSet* lastSet1() const; { return _nreg>0?_asArr[_nreg-1]._set1:0 ; }. const R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooNormSetCache.html:2640,clear,clear,2640,root/html530/RooNormSetCache.html,https://root.cern,https://root.cern/root/html530/RooNormSetCache.html,4,"['Clear', 'clear']","['Clear', 'clear']"
Usability,"ameraYOZ;  ; TString fPictureFileName;  ; Float_t fPointScale;  color-set with light background ;  ; TGLPShapeObj * fPShapeWrap;  GED editor. ;  ; EPushAction fPushAction;  ; TGLRedrawTimer * fRedrawTimer;  ; Bool_t fReferenceOn;  remove guides hidden-lines ;  ; TGLVertex3 fReferencePos;  reference marker on? ;  ; Bool_t fResetCamerasOnNextUpdate;  ; Bool_t fResetCamerasOnUpdate;  ; TGLSelectRecord fSecSelRec;  select record from last select (should go to context) ;  ; TGLManipSet * fSelectedPShapeRef;  select record from last secondary select (should go to context) ;  ; TGLSelectRecord fSelRec;  select record in use as selected ;  ; Bool_t fSmartRefresh;  markup size of viewport in scene units ;  ; Bool_t fSmoothLines;  smooth point edge rendering ;  ; Bool_t fSmoothPoints;  width scale for lines ;  ; Bool_t fStereo;  ; Float_t fStereoEyeOffsetFac;  position of zero-parallax plane: 0 - near clipping plane, 1 - far clipping plane ;  ; Float_t fStereoFrustumAsymFac;  ; Bool_t fStereoQuadBuf;  use stereo rendering ;  ; Float_t fStereoZeroParallax;  draw quad buffer or left/right stereo in left/right half of window ;  ; TGLRect fViewport;  max time for scene rendering at high LOD (in ms) ;  ;  Protected Attributes inherited from TGLViewerBase; TGLCamera * fCamera;  ; Bool_t fChanged;  ; TGLClip * fClip;  ; Short_t fLOD;  ; Float_t fOLLineW;  ; TGLBoundingBox fOverallBoundingBox;  ; OverlayElmVec_t fOverlay;  ; Bool_t fResetSceneInfosOnRender;  ; TGLRnrCtx * fRnrCtx;  ; SceneInfoList_t fScenes;  ; Short_t fStyle;  ; SceneInfoVec_t fVisScenes;  ; Float_t fWFLineW;  ;  Protected Attributes inherited from TGLLockable; ELock fLock;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  . Static Protected Attributes; static Float_t fgAxisLabelScale = 1;  name says it all ;  ; static TGLColorSet fgDefaultColorSet;  fade the vie",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLViewer.html:34180,guid,guides,34180,doc/master/classTGLViewer.html,https://root.cern,https://root.cern/doc/master/classTGLViewer.html,1,['guid'],['guides']
Usability,"amerasOnUpdate was toggled. void DoUpdateScene(); UpdateScene was clicked. void DoCameraHome(); CameraHome was clicked. void UpdateMaxDrawTimes(); Slot for fMaxSceneDrawTimeHQ and fMaxSceneDrawTimeLQ. void UpdatePointLineStuff(); Slot for point-sizes and line-widths. void DoCameraOverlay(); Update viewer with GUI state. void DoCameraCenterExt(); Set external camera center. void DoCaptureCenter(); Capture camera-center via picking. void DoDrawCameraCenter(); Draw camera center. void UpdateCameraCenter(); Update current camera with GUI state. void DoAnnotation(); Create annotation via picking. void UpdateViewerAxes(Int_t id); Update viewer with GUI state. void UpdateViewerReference(); Update viewer with GUI state. TGNumberEntry* MakeLabeledNEntry(TGCompositeFrame* p, const char* name, Int_t labelw, Int_t nd = 7, Int_t s = 5); Helper function to create fixed width TGLabel and TGNumberEntry in same row. void CreateStyleTab(); Creates ""Style"" tab. void CreateGuidesTab(); Create ""Guides"" tab. void CreateClippingTab(); Create GUI controls - clip type (none/plane/box) and plane/box properties. void CreateExtrasTab(); Create Extra Tab controls - camera rotator and stereo. void UpdateReferencePosState(); Enable/disable reference position (x/y/z) number edits based on; reference check box. void SetGuides(); Configuration of guides GUI called from SetModel(). void UpdateRotator(); Update rotator related variables. void DoRotatorStart(); Start auto-rotator. void DoRotatorStop(); Stop auto-rotator. void UpdateStereo(); Update stereo related variables. TGLViewerEditor(const TGLViewerEditor& ). void DetachFromPad(); {fIsInPad = kFALSE;}. » Author: Alja Mrak-Tadel, Matevz Tadel, Timur Pocheptsov 08/03/2006 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id$ » Last generated: 2010-10-20 08:46; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLViewerEditor.html:23767,guid,guides,23767,root/html528/TGLViewerEditor.html,https://root.cern,https://root.cern/root/html528/TGLViewerEditor.html,1,['guid'],['guides']
Usability,"ameter errors it reports should be accurate and very close to those you would have got without limits. In other cases (which should be more common, since otherwise you wouldn’t need limits), the very meaning of parameter errors becomes problematic. Mathematically, since the limit is an absolute constraint on the parameter, a parameter at its limit has no error, at least in one direction. The error matrix, which can assign only symmetric errors, then becomes essentially meaningless. On the other hand, the \(\mbox{MINOS}\) analysis is still meaningful, at least in principle, as long as \(\mbox{MIGRAD}\) (which is called internally by \(\mbox{MINOS}\)) does not get blocked at a limit. Unfortunately, the user has no control over this aspect of the \(\mbox{MINOS}\) calculation, although it is possible to get enough printout from the \(\mbox{MINOS}\) result to be able to determine whether the results are reliable or not.; 6.4 Fixing and releasing parameters; When M needs to be guided to the “right” minimum, often the best way to do this is with the methods e.g. MnMigrad::fix(…) and MnMigrad::release(…). That is, suppose you have a problem with ten free parameters, and when you minimize with respect to all at once, M goes to an unphysical solution characterized by an unphysical or unwanted value of parameter number four. One way to avoid this is to fix parameter four at a “good” value (not necessarily the best, since you presumably don’t know that yet), and minimize with respect to the others. Then release parameter four and minimize again. If the problem admits a “good” physical solution, you will normally find it this way. If it doesn’t work, you may see what is wrong by the following sequence (where \(\mbox{xxx}\) is the expected physical value for parameter four):; MnMigrad migrad(...);; migrad.setValue(4, xxx);; migrad.fix(4);; FunctionMinimum min = migrad();; migrad.release(4);; MnScan scan(...);; std::vector<std::pair<double, double> > points = scan(4);; where \(\mbo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:71624,guid,guided,71624,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,4,['guid'],['guided']
Usability,"ameters and errors; transformation internal <-> external on demand; ;  CMnUserTransformationClass dealing with the transformation between user specified parameters (external) and internal parameters used for minimization ;  CMnVectorTransform;  CModularFunctionMinimizerBase common class providing the API for all the minimizer Various Minimize methods are provided varying on the type of FCN function passesd and on the objects used for the parameters ;  CMPIProcess;  CMPITerminate;  CNegativeG2LineSearchIn case that one of the components of the second derivative g2 calculated by the numerical Gradient calculator is negative, a 1dim line search in the direction of that component is done in order to find a better position where g2 is again positive ;  CNumerical2PGradientCalculatorClass performing the numerical gradient calculation ;  CParametricFunctionFunction which has parameters ;  CQuad12F;  CQuad1F;  CQuad4F;  CQuad4FGrad;  CQuad8F;  CScanBuilderPerforms a minimization using the simplex method of Nelder and Mead (ref ;  CScanMinimizerClass implementing the required methods for a minimization using SCAN API is provided in the upper ROOT::Minuit2::ModularFunctionMinimizer class ;  CSimplexBuilderPerforms a minimization using the simplex method of Nelder and Mead (ref ;  CSimplexMinimizerClass implementing the required methods for a minimization using Simplex ;  CSimplexParametersClass describing the simplex set of points (f(x), x ) which evolve during the minimization iteration process ;  CSimplexSeedGeneratorGenerate Simplex starting point (state) ;  CSinParameterTransformationClass for the transformation for double-limited parameter Using a sin function one goes from a double-limited parameter range to an unlimited one ;  CSqrtLowParameterTransformationTransformation from external to internal Parameter based on sqrt(1 + x**2) ;  CSqrtUpParameterTransformationTransformation from external to internal Parameter based on sqrt(1 + x**2) ;  CStackAllocatorStackAllocator",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:63605,simpl,simplex,63605,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,4,['simpl'],['simplex']
Usability,"amically, i.e.; during execution of Redo function. Example:; For redo actions like TGTextEdit::DelChar() it is not possible to; know ahead what character will be deleted.; To set arguments for undo action ( e.g. TGTextEdit::InsChar(char)),; one needs to call TQCommand::SetUndoArgs(1, character) from; inside of TGTextEdit::DelChar() method, i.e. TQCommand::GetCommand()->SetUndoArgs(1, somechar);. void Delete(Option_t* option = """"); If ""opt"" is not zero delete every merged command which option string is; equal to ""opt"". If ""opt"" is zero - delete all merged commands. Bool_t CanMerge(TQCommand* c) const; Two commands can be merged if they can be composed into; a single command (Macro command). To allow merging commands user might override this function. void Merge(TQCommand* c); Add command to the list of merged commands.; This make it possible to group complex actions together so an end user; can undo and redo them with one command. Execution of TQUndoManager::Undo(),; TQUndoManager::Redo() methods only invokes the top level command as a whole. Merge method is analogous to logical join operation. Note: Merge method invokes redo action. Long64_t Merge(TCollection* , TFileMergeInfo* ); Merge a collection of TQCommand. void Add(TObject* obj, Option_t* opt); Add command to the list of merged commands. Option string can contain substrings:; ""compress"" - try to compress input command; ""radd"" - execute redo action of input command; ""uadd"" - execute undo action of input command. Bool_t CanCompress(TQCommand* c) const; By default, commands can be compressed if they are:. - equal; - setter commands. More complicated commands might want to override this function. void Compress(TQCommand* c); Compress command. Compression is analogous to arithmetic ""addition operation"". Note:; - The compressed command will be deleted.; - Execution Compress method invokes Redo action with new redo arguments; inheritied from compressed command. More complicated commands might want to override this f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TQCommand.html:20413,Undo,Undo,20413,root/html532/TQCommand.html,https://root.cern,https://root.cern/root/html532/TQCommand.html,4,['Undo'],['Undo']
Usability,"ample shows the basic concepts for almost any GUI-application in ROOT and it is important to understand how it is constructed. The example program is written as a named script. See “Cling the C++ Interpreter”. Remember that the named script can be executed via; root[] .x example.C; only if the filename (without extension) and the function entry point are both the same. We need to say a few words about the parent-children relationship between the widgets before going through the real code. The widgets’ behaviors are based on this relationship. Every parent widget is responsible for where the children are and it ensures all properties and behavior for them. For example, if you want to hide several widgets, it will be enough to hide their parent widget. Later you can show the parent and the children will appear too. Writing your code you have to specify the parent-child relationship. Usually in a child constructor the address of the parent is passed as an argument. In general frames are parents of simple widgets. In this example you will see how we organize the parent-children relationship by using frame widgets in addition to the canvas window and button widgets.; Let’s now go through the code of the example.C.; The first lines include ROOT header files. The header file names are almost always as the class names (TApplication, TF1, TCanvas), but there are cases when similar classes are grouped together in one header file: all frames are declared in TGFrame.h, all buttons - in TGButton.h, etc. Our small example is based on an object of the class MyMainFrame.; new MyMainFrame(gClient->GetRoot(),200,200);; The first parameter gClient->GetRoot() makes the initial connection to the window server. It is a pointer to the root window of the screen, which is obtained from gClient. The next two parameters initialize the width and height of the application window in pixels. Let see what MyMainFrame is. The three arguments pass to the TGMainFrame constructor when we create the fMa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1131037,simpl,simple,1131037,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['simpl'],['simple']
Usability,"ample, it can be called at any computational node, such as Filter or Define, not only the head node, with no change to the ProgressBar function itself (please see the Efficient analysis in Python section for appropriate usage in Python): ROOT::RDataFrame df(""tree"", ""file.root"");; auto df_1 = ROOT::RDF::RNode(df.Filter(""x>1""));; ROOT::RDF::Experimental::AddProgressBar(df_1);; ROOT::RDF::RNodeRInterface<::ROOT::Detail::RDF::RNodeBase, void > RNodeDefinition InterfaceUtils.hxx:57; Examples of implemented progress bars can be seen by running Higgs to Four Lepton tutorial and Dimuon tutorial. Efficient analysis in Python; You can use RDataFrame in Python thanks to the dynamic Python/C++ translation of PyROOT. In general, the interface is the same as for C++, a simple example follows.; df = ROOT.RDataFrame(""myTree"", ""myFile.root""); sum = df.Filter(""x > 10"").Sum(""y""); print(sum.GetValue()). User code in the RDataFrame workflow; C++ code; In the simple example that was shown above, a C++ expression is passed to the Filter() operation as a string (""x > 0""), even if we call the method from Python. Indeed, under the hood, the analysis computations run in C++, while Python is just the interface language.; To perform more complex operations that don't fit into a simple expression string, you can just-in-time compile C++ functions - via the C++ interpreter cling - and use those functions in an expression. See the following snippet for an example:; # JIT a C++ function from Python; ROOT.gInterpreter.Declare(""""""; bool myFilter(float x) {; return x > 10;; }; """"""); ; df = ROOT.RDataFrame(""myTree"", ""myFile.root""); # Use the function in an RDF operation; sum = df.Filter(""myFilter(x)"").Sum(""y""); print(sum.GetValue()); To increase the performance even further, you can also pre-compile a C++ library with full code optimizations and load the function into the RDataFrame computation as follows.; ROOT.gSystem.Load(""path/to/myLibrary.so"") # Library with the myFilter function; ROOT.gInterprete",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:80017,simpl,simple,80017,doc/v632/classROOT_1_1RDataFrame.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html,1,['simpl'],['simple']
Usability,"amples”. A sample is a set of values defining the inputs and the corresponding output that the network should ideally provide. In ROOT this is a TTree entry. The first thing to be decided is the network layout. This layout is described in a string where the layers are separated by semicolons. The input/output layers are defined by giving the expression for each neuron, separated by comas. Hidden layers are just described by the number of neurons.; In addition, input and output layer formulas can be preceded by ‘@’ (e.g. “@out”) if one wants to normalize the corresponding value. Also, if the string ends with ‘!’, output neurons are set up for classification, i.e. with a sigmoid (1 neuron) or softmax (more neurons) activation function.; Many questions on the good usage of neural network, including rules of dumb to determine the best network topology are addressed at ftp://ftp.sas.com/pub/neural/FAQ.html; // a simple network: 2 inputs, 10 hidden and 1 normalized; // output neuron; TMultiLayerPerceptron network(""r,z:10:@Br"",tree);; Expressions are evaluated as for TTree::Draw(). Input and outputs are taken from the TTree associated with the network. This TTree can be given as argument of the constructor or defined later with TMultiLayerPerceptron::SetData(). Events can also be weighted. The weight expression can be given in the constructor or set later with the method SetWeight() of the class TMultiLayerPerceptron. Two datasets must be defined before learning the network: a training dataset that is used when minimizing the error, and a test dataset that will avoid bias. Those two datasets can be built aside and then given to the network, or can be built from a standard expression. By default, half of the events are put in both datasets.; // a more complex 4:8:1 network; // the ptsumf branch is used as weigh;; // default event lists are explicit; TMultiLayerPerceptron network(""m,pt,acol,acopl:8:type"",""pt"",tree,; ""Entry$%2"",""Entry$/2"");; The method TMultiLayerPerceptron::S",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:235470,simpl,simple,235470,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['simpl'],['simple']
Usability,"an = false . ). evaluate the pdf contribution to the LogL given a model function and the BinPoint data. ; If the pointer g is not null evaluate also the gradient of the pdf. If the function provides parameter derivatives they are used otherwise a simple derivative calculation is used ; Definition at line 891 of file FitUtil.cxx. ◆ EvaluatePoissonBinPdf(). double ROOT::Fit::FitUtil::EvaluatePoissonBinPdf ; (; const IModelFunction & ; func, . const BinData & ; data, . const double * ; x, . unsigned int ; ipoint, . double * ; g = nullptr, . double * ; h = nullptr, . bool ; hasGrad = false, . bool ; fullHessian = false . ). evaluate the pdf contribution to the Poisson LogL given a model function and the BinPoint data. ; evaluate the pdf (Poisson) contribution to the logl (return actually log of pdf) and its gradient (gradient of log(pdf)); If the pointer g is not null evaluate also the gradient of the Poisson pdf. If the function provides parameter derivatives they are used otherwise a simple derivative calculation is used ; Definition at line 1297 of file FitUtil.cxx. ◆ EvaluatePoissonLogL(). double ROOT::Fit::FitUtil::EvaluatePoissonLogL ; (; const IModelFunction & ; func, . const BinData & ; data, . const double * ; p, . int ; iWeight, . bool ; extended, . unsigned int & ; nPoints, . ::ROOT::EExecutionPolicy ; executionPolicy, . unsigned ; nChunks = 0 . ). evaluate the Poisson LogL given a model function and the data at the point p. ; return also nPoints as the effective number of used points in the LogL evaluation By default is extended, pass extend to false if want to be not extended (MultiNomial) . ◆ EvaluatePoissonLogLGradient(). void ROOT::Fit::FitUtil::EvaluatePoissonLogLGradient ; (; const IModelFunction & ; func, . const BinData & ; data, . const double * ; p, . double * ; grad, . unsigned int & ; nPoints, . ::ROOT::EExecutionPolicy ; executionPolicy = ::ROOT::EExecutionPolicy::kSequential, . unsigned ; nChunks = 0 . ). evaluate the Poisson LogL given a model",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html:10238,simpl,simple,10238,doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html,1,['simpl'],['simple']
Usability,"an act like this, considering a given volume as temporary MARS, but we will describe this feature later on. Let us focus on the biggest pack - it is mandatory to define one. Consider the simplest geometry that is made of a single box. Here is an example on how to build it:. Example 1: Creating the World; We first need to load the geometry library. This is not needed if one does ""make map"" in root folder.; root[] gSystem->Load(""libGeom"");; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:561; TSystem::Loadvirtual int Load(const char *module, const char *entry="""", Bool_t system=kFALSE)Load a shared library.Definition TSystem.cxx:1857; Second, we have to create an instance of the geometry manager class. This takes care of all the modeller components, performing several tasks to insure geometry validity and containing the user interface for building and interacting with the geometry. After its creation, the geometry manager class can be accessed with the global gGeoManager:; root[] new TGeoManager(""world"", ""the simplest geometry"");; TGeoManagerThe manager class for any TGeo geometry.Definition TGeoManager.h:44; We want to create a single volume in our geometry, but since any volume needs to have an associated medium, we will create a dummy one. You can safely ignore the following lines for the time being, since materials and media will be explained in detail later on.; root[] TGeoMaterial *mat = new TGeoMaterial(""Vacuum"",0,0,0);; root[] TGeoMedium *med = new TGeoMedium(""Vacuum"",1,mat);; TGeoMaterialBase class describing materials.Definition TGeoMaterial.h:34; TGeoMediumMedia are used to store properties related to tracking and which are useful only when using geometry ...Definition TGeoMedium.h:23; We can finally make our volume having a box shape. Note that the world volume does not need to be a box - it can be any other shape. Generally, boxes and tubes are the most recommendable shapes for this purpose due to their fast navigation algorithms.; root[] TGeoVolume",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Geometry.html:4683,simpl,simplest,4683,doc/master/group__Geometry.html,https://root.cern,https://root.cern/doc/master/group__Geometry.html,1,['simpl'],['simplest']
Usability,"an associated iterator class that knows how to sequentially retrieve each member in turn. The relationship between a collection and its iterator is very close and may require that the iterator has full access to the collection (i.e. it is a friend class). In general iterator will be used via the TIter wrapper class. For example:. TList TListIter; TMap TMapIter. 16.3 Foundation Classes; All collections are based on the fundamental classes: TCollection and TIterator. They are so generic that it is not possible to create objects from them; they are only used as base classes for other classes (i.e. they are abstract base classes).; The TCollection class provides the basic protocol (i.e. the minimum set of member functions) that all collection classes have to implement. These include:. Add Adds another object to the collection.; GetSize Returns the number of objects in the collection.; Clear Clears out the collection, but does not delete the removed objects.; Delete Clears out the collection and deletes the removed objects. This should only be used if the collection owns its objects (which are not normally the case).; FindObject Finds an object given either its name or address.; MakeIterator Returns an iterator associated with the collection.; Remove Removes an object from the collection. The code example below shows a class containing three lists, where the fTracks list is the owning collection and the other two lists are used to store a sub-set of the track objects. In the destructor of the class, the method Delete is called for the owning collection to delete correctly its entire track objects. To delete the objects in the container use fTrack->Delete(). To delete the container itself, do ’delete fTracks'.; class TEvent : public TObject {; private:; TList *fTracks; //list of all tracks; TList *fVertex1; //subset of tracks part of vertex1; TList *fVertex2; //subset of tracks part of vertex2; };; TEvent::~TEvent(); {; fTracks->Delete();; delete fTracks;; delete fVertex1;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:845495,Clear,Clears,845495,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['Clear'],['Clears']
Usability,"an example of a very simple use of the genetic algorithm of TMVA ;  TMVAGAexample2.C This exectutable gives an example of a very simple use of the genetic algorithm of TMVA ;  TMVAMulticlass.C This macro provides a simple example for the training and testing of the TMVA multiclass classification ;  TMVAMulticlassApplication.C This macro provides a simple example on how to use the trained multiclass classifiers within an analysis module ;  TMVAMultipleBackgroundExample.C This example shows the training of signal with three different backgrounds Then in the application a tree is created with all signal and background events where the true class ID and the three classifier outputs are added finally with the application tree, the significance is maximized with the help of the TMVA genetic algrorithm ;  TMVARegression.C This macro provides examples for the training and testing of the TMVA classifiers ;  TMVARegressionApplication.C This macro provides a simple example on how to use the trained regression MVAs within an analysis module ;  ► tree;  basic.C Read data from an ascii file and create a root file with an histogram and an ntuple ;  basic2.C Create can ntuple reading data from an ascii file ;  bill.C Benchmark comparing row-wise and column-wise storage performance ;  cernbuild.C Read data (CERN staff) from an ascii file and create a root file with a Tree ;  cernstaff.C Playing with a Tree containing variables of type character ;  circular.C Example of a circular Tree ;  clonesA_Event.CExample to write & read a Tree built with a complex class inheritance tree ;  clonesA_Event.cxx;  clonesA_Event.h;  copytree.C Copy a subset of a Tree to a new Tree ;  copytree2.C Copy a subset of a Tree to a new Tree, one branch in a separate file ;  copytree3.C Example of Root macro to copy a subset of a Tree to a new Tree, selecting entries ;  drawsparse.C Convert a THnSparse to a TTree using efficient iteration through the THnSparse and draw a THnSparse using TParallelCoord ;  h1an",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:154567,simpl,simple,154567,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,3,['simpl'],['simple']
Usability,"an use the mouse to click on the contour of; the histogram hpx. When the mouse is clicked, the bin number and its; contents are printed.; Example2 of use of exec1.C. Root > TFile f(""hsimple.root""); Root > hpxpy.Draw(); Root > c1.AddExec(""ex2"","".x exec2.C""); When moving the mouse in the canvas, a second canvas shows the; projection along X of the bin corresponding to the Y position; of the mouse. The resulting histogram is fitted with a gaussian.; A ""dynamic"" line shows the current bin position in Y.; This more elaborated example can be used as a starting point; to develop more powerful interactive applications exploiting CINT; as a development engine. void AutoExec(); Execute the list of Execs when a pad event occurs. void Browse(TBrowser* b); Browse pad. TLegend * BuildLegend(Double_t x1 = 0.5, Double_t y1 = 0.67000000000000004, Double_t x2 = 0.88, Double_t y2 = 0.88, const char* title = """"); Build a legend from the graphical objects in the pad. A simple method to build automatically a TLegend from the; primitives in a TPad. Only those deriving from TAttLine,; TAttMarker and TAttFill are added, excluding TPave and TFrame; derived classes. x1, y1, x2, y2 are the TLegend coordinates.; title is the legend title. By default it is "" "". The caller; program owns the returned TLegend. If the pad contains some TMultiGraph or THStack the individual; graphs or histograms in them are added to the TLegend. TVirtualPad * cd(Int_t subpadnumber = 0); Set Current pad.; When a canvas/pad is divided via TPad::Divide, one can directly; set the current path to one of the subdivisions.; See TPad::Divide for the convention to number subpads.; Returns the new current pad, or 0 in case of failure.; For example:; c1.Divide(2,3); // create 6 pads (2 divisions along x, 3 along y).; To set the current pad to the bottom right pad, do; c1.cd(6);; Note1: c1.cd() is equivalent to c1.cd(0) and sets the current pad; to c1 itself.; Note2: after a statement like c1.cd(6), the global variable gPad; poin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TPad.html:32933,simpl,simple,32933,root/html602/TPad.html,https://root.cern,https://root.cern/root/html602/TPad.html,4,['simpl'],['simple']
Usability,anHist.cxx;  unuranMulti2D.cxx;  unuranMultiDim.cxx;  unuranSimple.cxx;  ► vc;  ► examples;  ► buddhabrot;  main.cpp;  main.h;  ► finitediff;  main.cpp;  ► fit;  GaussFunction.h;  MinimizerTypes.h;  testFitPerf.cxx;  ► genvector;  vectorOperation.cxx;  ► mandelbrot;  main.cpp;  main.h;  mandel.cpp;  mandel.h;  ► matrix;  main.cpp;  ► polarcoord;  main.cpp;  ► smatrix;  matrix_op_vec.h;  matrix_util.h;  testKalman.cxx;  testOperations.cxx;  TestTimer.h;  tsc.h;  ► include;  ► Vc;  ► avx;  casts.h;  const.h;  const_data.h;  debug.h;  helperimpl.h;  intrinsics.h;  limits.h;  macros.h;  mask.h;  math.h;  shuffle.h;  sorthelper.h;  types.h;  undomacros.h;  vector.h;  vectorhelper.h;  writemaskedvector.h;  ► common;  aliasingentryhelper.h;  bitscanintrinsics.h;  deinterleave.h;  exponential.h;  fix_clang_emmintrin.h;  iif.h;  interleavedmemory.h;  logarithm.h;  macros.h;  memory.h;  memorybase.h;  memoryfwd.h;  operand.h;  operators.h;  storage.h;  support.h;  trigonometric.h;  types.h;  undomacros.h;  vectortuple.h;  windows_fix_intrin.h;  ► internal;  namespace.h;  ► scalar;  helperimpl.h;  limits.h;  macros.h;  mask.h;  math.h;  types.h;  undomacros.h;  vector.h;  writemaskedvector.h;  ► sse;  casts.h;  const.h;  const_data.h;  debug.h;  helperimpl.h;  intrinsics.h;  limits.h;  macros.h;  mask.h;  math.h;  shuffle.h;  types.h;  undomacros.h;  vector.h;  vectorhelper.h;  cpuid.h;  global.h;  support.h;  vector.h;  version.h;  ► src;  avx_sorthelper.cpp;  const.cpp;  cpuid.cpp;  support.cpp;  trigonometric.cpp;  ► tests;  arithmetics.cpp;  casts.cpp;  const.h;  convert-sincos-reference.cpp;  deinterleave.cpp;  expandandmerge.cpp;  gather.cpp;  implicit_type_conversion.cpp;  implicit_type_conversion_failures.cpp;  linkTest0.cpp;  linkTest1.cpp;  linkTestLib0.cpp;  linkTestLib1.cpp;  linkTestLib2.cpp;  linkTestLib3.cpp;  load.cpp;  mask.cpp;  math.cpp;  memory.cpp;  scalaraccess.cpp;  scatter.cpp;  sse_blend.cpp;  stlcontainer.cpp;  store.cpp;  supportfunctions.cpp;  swizzl,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html606/files.html:58611,undo,undomacros,58611,root/html606/files.html,https://root.cern,https://root.cern/root/html606/files.html,2,['undo'],['undomacros']
Usability,"ance::GetSeparationGain ; (; const Double_t ; nLeft, . const Double_t ; targetLeft, . const Double_t ; target2Left, . const Double_t ; nTot, . const Double_t ; targetTot, . const Double_t ; target2Tot . ). Separation Gain: the measure of how the quality of separation of the sample increases by splitting the sample e.g. ; into a ""left-node"" and a ""right-node"" (N * Index_parent) - (N_left * Index_left) - (N_right * Index_right) this is then the quality criteria which is optimized for when trying to increase the information in the system for the Regression: as the ""Gain is maximised"", the RMS (sqrt(variance)) which is used as a ""separation"" index should be as small as possible. the ""figure of merit"" here has to be -(rms left+rms-right) or 1/rms... ; Definition at line 69 of file RegressionVariance.cxx. ◆ GetSeparationIndex(). Double_t TMVA::RegressionVariance::GetSeparationIndex ; (; const Double_t ; n, . const Double_t ; target, . const Double_t ; target2 . ). virtual . Separation Index: a simple Variance. ; Definition at line 88 of file RegressionVariance.cxx. ◆ IsA(). virtual TClass * TMVA::RegressionVariance::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Definition at line 94 of file RegressionVariance.h. ◆ Streamer(). virtual void TMVA::RegressionVariance::Streamer ; (; TBuffer & ; ). virtual . ◆ StreamerNVirtual(). void TMVA::RegressionVariance::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 94 of file RegressionVariance.h. Member Data Documentation. ◆ fName. TString TMVA::RegressionVariance::fName. protected . name of the concrete Separation Index implementation ; Definition at line 92 of file RegressionVariance.h. Libraries for TMVA::RegressionVariance:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/RegressionVariance.h; tmva/tmva/src/RegressionVariance.cxx. TMVARegressionVariance. ROOT master - Reference Guide Generated on Tue Nov",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1RegressionVariance.html:4399,simpl,simple,4399,doc/master/classTMVA_1_1RegressionVariance.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1RegressionVariance.html,1,['simpl'],['simple']
Usability,"anch nodes are printed. ;  ; void printDirty (bool depth=true) const;  Print information about current value dirty state information. ;  ; virtual void printMetaArgs (std::ostream &) const;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Implement multi-line detailed printing. ;  ; void printName (std::ostream &os) const override;  Print object name. ;  ; void printTitle (std::ostream &os) const override;  Print object title. ;  ; void printTree (std::ostream &os, TString indent="""") const override;  Print object tree structure. ;  ; virtual bool readFromStream (std::istream &is, bool compact, bool verbose=false)=0;  ; bool recursiveCheckObservables (const RooArgSet *nset) const;  Recursively call checkObservables on all nodes in the expression tree. ;  ; void removeStringAttribute (const Text_t *key);  Delete a string attribute with a given key. ;  ; void resetDataToken ();  ; void setAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setDataToken (std::size_t index);  Sets the token for retrieving results in the BatchMode. For internal use only. ;  ; void setLocalNoDirtyInhibit (bool flag) const;  ; void SetName (const char *name) override;  Set the name of the TNamed. ;  ; void SetNameTitle (const char *name, const char *title) override;  Set all the TNamed parameters (name and title). ;  ; void setProhibitServerRedirect (bool flag);  ; void setStringAttribute (const Text_t *key, const Text_t *value);  Associate string 'value' to this object under key 'key'. ;  ; void setTransientAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setWorkspace (RooWorkspace &ws);  ; const std::map< std::string, std::string > & stringAttributes () const;  ; const std::set< std::string > & transientAttributes () const;  ; virtual void translate (RooFit::Detail::CodeSquashCon",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsArg.html:15099,clear,clear,15099,doc/master/classRooAbsArg.html,https://root.cern,https://root.cern/doc/master/classRooAbsArg.html,1,['clear'],['clear']
Usability,"anch::fgCount! branch counter; static TBranch::EStatusBitsTBranch::kAutoDelete; static TBranch::EStatusBitsTBranch::kDoNotUseBufferMap. private:. Long64_tfRequestedEntry! Cursor indicating which entry is being requested. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TBranchRef(); Default constructor. TBranchRef(TTree* tree); Main constructor called by TTree::BranchRef. ~TBranchRef(); Typical destructor. void Clear(Option_t* option = """"); Clear entries in the TRefTable. Int_t Fill(); Fill the branch basket with the referenced objects parent numbers. Bool_t Notify(); This function is called by TRefTable::Notify, itself called by; TRef::GetObject.; The function reads the branch containing the object referenced; by the TRef. void Print(Option_t* option = """") const; Print the TRefTable branch. void ReadLeavesImpl(TBuffer& b); This function called by TBranch::GetEntry overloads TBranch::ReadLeaves. void FillLeavesImpl(TBuffer& b); This function called by TBranch::Fill overloads TBranch::FillLeaves. void Reset(Option_t* option = """"); Existing buffers are deleted; Entries, max and min are reset; TRefTable is cleared. void ResetAfterMerge(TFileMergeInfo* ); Reset a Branch after a Merge operation (drop data but keep customizations); TRefTable is cleared. Int_t SetParent(const TObject* obj, Int_t branchID); -- Set the current parent branch. This function is called by TBranchElement::GetEntry(); and TBranchElement::Fill() when reading or writing; branches that may contain referenced objects. TBranchRef(). TRefTable * GetRefTable() const; {return fRefTable;}. void SetRequestedEntry(Long64_t entry); {fRequestedEntry = entry;}. » Author: Rene Brun 19/08/2004 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id$ » Last generated: 2015-06-02 15:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TBranchRef.html:15481,clear,cleared,15481,root/html604/TBranchRef.html,https://root.cern,https://root.cern/root/html604/TBranchRef.html,4,['clear'],['cleared']
Usability,"anch::fgCount! branch counter; static TBranch::EStatusBitsTBranch::kAutoDelete; static TBranch::EStatusBitsTBranch::kDoNotUseBufferMap. private:. Long64_tfRequestedEntry! Cursor indicating which entry is being requested. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TBranchRef(); Default constructor. TBranchRef(TTree* tree); Main constructor called by TTree::BranchRef. ~TBranchRef(); Typical destructor. void Clear(Option_t* option = """"); Clear entries in the TRefTable. Int_t Fill(); Fill the branch basket with the referenced objects parent numbers. Bool_t Notify(); This function is called by TRefTable::Notify, itself called by; TRef::GetObject.; The function reads the branch containing the object referenced; by the TRef. void Print(Option_t* option = """") const; Print the TRefTable branch. void ReadLeavesImpl(TBuffer& b); This function called by TBranch::GetEntry overloads TBranch::ReadLeaves. void FillLeavesImpl(TBuffer& b); This function called by TBranch::Fill overloads TBranch::FillLeaves. void Reset(Option_t* option = """"); Existing buffers are deleted; Entries, max and min are reset; TRefTable is cleared. void ResetAfterMerge(TFileMergeInfo* ); Reset a Branch after a Merge operation (drop data but keep customizations); TRefTable is cleared. Int_t SetParent(const TObject* obj, Int_t branchID); -- Set the current parent branch. This function is called by TBranchElement::GetEntry(); and TBranchElement::Fill() when reading or writing; branches that may contain referenced objects. TBranchRef(). TRefTable * GetRefTable() const; {return fRefTable;}. void SetRequestedEntry(Long64_t entry); {fRequestedEntry = entry;}. » Author: Rene Brun 19/08/2004 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id$ » Last generated: 2015-06-30 14:40; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TBranchRef.html:15481,clear,cleared,15481,root/html602/TBranchRef.html,https://root.cern,https://root.cern/root/html602/TBranchRef.html,4,['clear'],['cleared']
Usability,"and histograms in each bin ;  ; const TString & Color (const TString &);  human readable color strings ;  ; void ComputeStat (const std::vector< TMVA::Event * > &, std::vector< Float_t > *, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &, Int_t signalClass, Bool_t norm=kFALSE);  sanity check ;  ; Double_t ComputeVariance (Double_t sumx2, Double_t sumx, Int_t nx);  compute variance from given sums ;  ; Bool_t ContainsRegularExpression (const TString &s);  check if regular expression helper function to search for ""$!%^&()'<>?= "" in a string ;  ; void FormattedOutput (const std::vector< Double_t > &, const std::vector< TString > &, const TString titleVars, const TString titleValues, MsgLogger &logger, TString format=""%+1.3f"");  formatted output of simple table ;  ; void FormattedOutput (const TMatrixD &, const std::vector< TString > &, MsgLogger &logger);  formatted output of matrix (with labels) ;  ; void FormattedOutput (const TMatrixD &, const std::vector< TString > &vert, const std::vector< TString > &horiz, MsgLogger &logger);  formatted output of matrix (with labels) ;  ; void * GetChild (void *parent, const char *childname=nullptr);  get child node ;  ; const char * GetContent (void *node);  XML helpers. ;  ; const TMatrixD * GetCorrelationMatrix (const TMatrixD *covMat);  turns covariance into correlation matrix ;  ; Double_t GetCorrelationRatio (const TH2F &);  Compute Correlation Ratio of 2D histogram to estimate functional dependency between two variables Author: Moritz Backes, Geneva (2009) ;  ; TH1 * GetCumulativeDist (TH1 *h);  get the cumulative distribution of a histogram ;  ; Int_t GetIndexMaxElement (std::vector< Double_t > &);  find index of maximum entry in vector ;  ; Int_t GetIndexMinElement (std::vector< Double_t > &);  find index of minimum entry in vector ;  ; Double_t GetMutualInformation (const TH2F &);  Mutual Information method for non-linear correlations estimates in 2D histogram Author: Moritz Backes, Geneva (2009) ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Tools.html:2779,simpl,simple,2779,doc/master/classTMVA_1_1Tools.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Tools.html,1,['simpl'],['simple']
Usability,"and in turn. It is also; possible to redo a sequence of commands by traversing the command; stack upwards and calling the ""redo"" method of each command. Examples:. 1. Create a new command. TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)""; ""SetFillColor(Color_t)"");. 1st parameter - the name of class; 2nd parameter - object; 3rd parameter - the name of do/redo method; 4th parameter - the name of undo method. Since redo,undo methods are the same, undo name can be omitted, e.g. TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");. For objects derived from TObject class name can be omitted, e.g. TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");. 2. Setting undo, redo parameters. Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);. 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values. Since the number of undo,redo parameters is the same one can use. com->SetArgs(1, new_color, old_color);. 3. Undo, redo method execution. com->Redo(); // execute redo method; com->Undo(); // execute undo method. 4. Merged commands. It possible to group several commands together so an end user; can undo and redo them with one command. TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);. 5. Macro commands. ""Merging"" allows to create macro commands, e.g. TQCommand *macro = new TQCommand(""my macro"");; macro->Add(com1);; macro->Add(com2);. During Redo operation commands composing macro command are executed; sequentially in direct order (first in first out). During Undo,; they are executed in reverse order (last in first out). 6. Undo manager. TQUndoManager is recorder of undo and redo operations. This is; command history list which can be traversed backwards and upwards; performing undo and redo operations.; To register command TQUndoManager::Add(TObject*) method is used. TQUndoManager *history = new",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TQCommand.html:1860,undo,undo,1860,root/html528/TQCommand.html,https://root.cern,https://root.cern/root/html528/TQCommand.html,20,['undo'],['undo']
Usability,"and it is not. Of course, we managed to get rid of the ""unnecessary"" volume C in our geometry, but we end-up with a more flat structure for D,E and F (more daughters inside). This can get much worse when extensively used, as in the case: assemblies of assemblies.; For deciding what to choose between using virtual containers or assemblies for a specific case, one can use for both cases, after the geometry was closed:; gGeoManager->SetTopVolume(ptr_D);; gGeoManager->Test();; gGeoManager->RestoreMasterVolume();; TGeoManager::RestoreMasterVolumevoid RestoreMasterVolume()Restore the master volume of the geometry.Definition TGeoManager.cxx:3118; TGeoManager::Testvoid Test(Int_t npoints=1000000, Option_t *option="""")Check time of finding ""Where am I"" for n points.Definition TGeoManager.cxx:1942; The ptr_D is a pointer to volume D containing the interesting structure. The test will provide the timing for classifying 1 million random points inside D.; Examples of Volume Positioning; Now let us make a simple volume representing a copper wire. We suppose that a medium is already created (see TGeoMedium class on how to create media).; We will create a TUBE shape for our wire, having Rmin=0cm, Rmax=0.01cm and a half-length dZ=1cm:; TGeoTube *tube = new TGeoTube(""wire_tube"",0,0.01,1);; TGeoTubeDefinition TGeoTube.h:17; One may omit the name for the shape wire_tube, if no retrieving by name is further needed during geometry building. Different volumes having different names and materials can share the same shape.; Now let's make the volume for our wire:; TGeoVolume *wire_co = new TGeoVolume(""WIRE_CO"",tube,ptrCOPPER); //(*); (*) Do not bother to delete the media, shapes or volumes that you have created since all will be automatically cleaned on exit by the manager class.; If we would have taken a look inside TGeoManager::MakeTube() method, we would have been able to create our wire with a single line:; TGeoVolume *wire_co = gGeoManager->MakeTube(""WIRE_CO"",ptrCOPPER,0,0.01,1); //(*); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Geometry.html:34709,simpl,simple,34709,doc/master/group__Geometry.html,https://root.cern,https://root.cern/doc/master/group__Geometry.html,1,['simpl'],['simple']
Usability,"and not all columns are equally interesting. Create a TTree to store columnar data. Construct a TTree; Add a column of Fundamental Types and Arrays thereof; Add a column of a STL Collection instances; Add a column holding an object; Add a column holding a TObjectArray; Fill the tree; Add a column to an already existing Tree; An Example. Construct a TTree; TTree tree(name, title); namechar name[80]Definition TGX11.cxx:110; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; Creates a Tree with name and title.; Various kinds of branches can be added to a tree:; Variables representing fundamental types, simple classes/structures or list of variables: for example for C or Fortran structures.; Any C++ object or collection, provided by the STL or ROOT. In the following, the details about the creation of different types of branches are given. Add a column (""branch"") holding fundamental types and arrays thereof; This strategy works also for lists of variables, e.g. to describe simple structures. It is strongly recommended to persistify those as objects rather than lists of leaves.; auto branch = tree.Branch(branchname, address, leaflist, bufsize). address is the address of the first item of a structure; leaflist is the concatenation of all the variable names and types separated by a colon character : The variable name and the variable type are separated by a slash (/). The variable type must be 1 character. (Characters after the first are legal and will be appended to the visible name of the leaf, but have no effect.) If no type is given, the type of the variable is assumed to be the same as the previous variable. If the first variable does not have a type, it is assumed of type F by default. The list of currently supported types is given below:; C : a character string terminated by the 0 character; B : an 8 bit signed integer (Char_t); Treated as a character when in an array.; b : an 8 bit unsigned integer (UChar_t); S : a 16 bit signed integer (Short_t); s : ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTree.html:2379,simpl,simple,2379,doc/v632/classTTree.html,https://root.cern,https://root.cern/doc/v632/classTTree.html,2,['simpl'],['simple']
Usability,"and terminate any interaction in viewer. Bool_t HandleCrossing(Event_t* event); Handle generic Event_t type 'event' - provided to catch focus changes; and terminate any interaction in viewer. Bool_t HandleButton(Event_t* event); Handle mouse button 'event'. Bool_t HandleDoubleClick(Event_t* event); Handle mouse double click 'event'. Bool_t HandleConfigureNotify(Event_t* event); Handle configure notify 'event' - a window resize/movement. Bool_t HandleExpose(Event_t* event); Handle window expose 'event' - show. Bool_t HandleKey(Event_t* event); Handle keyboard 'event'. Bool_t HandleMotion(Event_t* event); Handle mouse motion 'event'. Bool_t Rotate(Int_t xDelta, Int_t yDelta, Bool_t mod1, Bool_t mod2); Method to handle action TGLViewer::kDragCameraRotate. Bool_t HandleTimer(TTimer* t); If mouse delay timer times out emit signal. void StartMouseTimer(); Start mouse timer in single-shot mode. void StopMouseTimer(); Make sure mouse timers are not running. void ClearMouseOver(); Clear mouse-over state and emit mouse-over signals.; Current overlay element is also told the mouse has left. void Repaint(); Handle window expose 'event' - show. void PopupContextMenu(TGLPhysicalShape* pshp, Event_t* event, Int_t gx, Int_t gy); Popup context menu. void TriggerTooltip(const char* text); Trigger display of tooltip. void RemoveTooltip(); Hide the tooltip. void SetMouseOverSelectDelay(Int_t ms); Set delay of mouse-over probe (highlight). void SetMouseOverTooltipDelay(Int_t ms); Set delay of tooltip timer. Int_t ControlValue(Int_t v); { return fViewerCentricControls ? -v : v; }. Int_t GetTooltipPixelTolerance() const; { return fTooltipPixelTolerance; }. void SetTooltipPixelTolerance(Int_t t); { fTooltipPixelTolerance = t; }. Int_t GetSecSelType() const; { return fSecSelType; }. void SetSecSelType(Int_t t); { fSecSelType = t; }. Bool_t GetDoInternalSelection() const; { return fDoInternalSelection; }. void SetDoInternalSelection(Bool_t x); { fDoInternalSelection = x; }. Bool_t GetArcBall(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGLEventHandler.html:13966,Clear,ClearMouseOver,13966,root/html534/TGLEventHandler.html,https://root.cern,https://root.cern/root/html534/TGLEventHandler.html,2,['Clear'],"['Clear', 'ClearMouseOver']"
Usability,"and terminate any interaction in viewer. Bool_t HandleCrossing(Event_t* event); Handle generic Event_t type 'event' - provided to catch focus changes; and terminate any interaction in viewer. Bool_t HandleButton(Event_t* event); Handle mouse button 'event'. Bool_t HandleDoubleClick(Event_t* event); Handle mouse double click 'event'. Bool_t HandleConfigureNotify(Event_t* event); Handle configure notify 'event' - a window resize/movement. Bool_t HandleExpose(Event_t* event); Handle window expose 'event' - show. Bool_t HandleKey(Event_t* event); Handle keyboard 'event'. Bool_t HandleMotion(Event_t* event); Handle mouse motion 'event'. Bool_t Rotate(Int_t xDelta, Int_t yDelta, Bool_t mod1, Bool_t mod2); Method to handle action TGLViewer::kDragCameraRotate. Bool_t HandleTimer(TTimer* t); If mouse delay timer times out emit signal. void StartMouseTimer(); Start mouse timer in single-shot mode. void StopMouseTimer(); Make sure mouse timers are not running. void ClearMouseOver(); Clear mouse-over state and emit mouse-over signals.; Current overlay element is also told the mouse has left. void Repaint(); Handle window expose 'event' - show. void PopupContextMenu(TGLPhysicalShape* pshp, Event_t* event, Int_t gx, Int_t gy); Popup context menu. void TriggerTooltip(const char* text); Trigger display of tooltip. void RemoveTooltip(); Hide the tooltip. void SetMouseOverSelectDelay(Int_t ms); Set delay of mouse-over probe (highlight). void SetMouseOverTooltipDelay(Int_t ms); Set delay of tooltip timer. Int_t ControlValue(Int_t v); { return fViewerCentricControls ? -v : v; }. Int_t GetTooltipPixelTolerance() const; { return fTooltipPixelTolerance; }. void SetTooltipPixelTolerance(Int_t t); { fTooltipPixelTolerance = t; }. Int_t GetSecSelType() const; { return fSecSelType; }. void SetSecSelType(Int_t t); { fSecSelType = t; }. Bool_t GetDoInternalSelection() const; { return fDoInternalSelection; }. void SetDoInternalSelection(Bool_t x); { fDoInternalSelection = x; }. » Author: Bertrand",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGLEventHandler.html:13879,Clear,ClearMouseOver,13879,root/html532/TGLEventHandler.html,https://root.cern,https://root.cern/root/html532/TGLEventHandler.html,2,['Clear'],"['Clear', 'ClearMouseOver']"
Usability,"and terminate any interaction in viewer. Bool_t HandleCrossing(Event_t* event); Handle generic Event_t type 'event' - provided to catch focus changes; and terminate any interaction in viewer. Bool_t HandleButton(Event_t* event); Handle mouse button 'event'. Bool_t HandleDoubleClick(Event_t* event); Handle mouse double click 'event'. Bool_t HandleConfigureNotify(Event_t* event); Handle configure notify 'event' - a window resize/movement. Bool_t HandleExpose(Event_t* event); Handle window expose 'event' - show. Bool_t HandleKey(Event_t* event); Handle keyboard 'event'. Bool_t HandleMotion(Event_t* event); Handle mouse motion 'event'. Bool_t Rotate(Int_t xDelta, Int_t yDelta, Bool_t mod1, Bool_t mod2); Method to handle action TGLViewer::kDragCameraRotate. Bool_t HandleTimer(TTimer* t); If mouse delay timer times out emit signal. void StartMouseTimer(); Start mouse timer in single-shot mode. void StopMouseTimer(); Make sure mouse timers are not running. void ClearMouseOver(); Clear mouse-over state and emit mouse-over signals.; Current overlay element is also told the mouse has left. void Repaint(); Handle window expose 'event' - show. void PopupContextMenu(TGLPhysicalShape* pshp, Event_t* event, Int_t gx, Int_t gy); Popup context menu. void TriggerTooltip(const char* text); Trigger display of tooltip. void RemoveTooltip(); Hide the tooltip. void SetMouseOverSelectDelay(Int_t ms); Set delay of mouse-over probe (highlight). void SetMouseOverTooltipDelay(Int_t ms); Set delay of tooltip timer. Int_t ControlValue(Int_t v); { return fViewerCentricControls ? -v : v; }. TGLEventHandler(TGWindow* w, TObject* obj). Int_t GetTooltipPixelTolerance() const; { return fTooltipPixelTolerance; }. void SetTooltipPixelTolerance(Int_t t); { fTooltipPixelTolerance = t; }. Int_t GetSecSelType() const; { return fSecSelType; }. void SetSecSelType(Int_t t); { fSecSelType = t; }. Bool_t GetDoInternalSelection() const; { return fDoInternalSelection; }. void SetDoInternalSelection(Bool_t x); { fDo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLEventHandler.html:14500,Clear,ClearMouseOver,14500,root/html602/TGLEventHandler.html,https://root.cern,https://root.cern/root/html602/TGLEventHandler.html,4,['Clear'],"['Clear', 'ClearMouseOver']"
Usability,"and the TEventLists can be defined in the constructor, or later with the suited setter method. The lists used for training and test can be defined either explicitly, or via a string containing the formula to be used to define them, exactly as for a TCut.; The learning method is defined using the TMultiLayerPerceptron::SetLearningMethod() . Learning methods are :. TMultiLayerPerceptron::kStochastic,; TMultiLayerPerceptron::kBatch,; TMultiLayerPerceptron::kSteepestDescent,; TMultiLayerPerceptron::kRibierePolak,; TMultiLayerPerceptron::kFletcherReeves,; TMultiLayerPerceptron::kBFGS. A weight can be assigned to events, either in the constructor, either with TMultiLayerPerceptron::SetEventWeight(). In addition, the TTree weight is taken into account.; Finally, one starts the training with TMultiLayerPerceptron::Train(Int_t nepoch, Option_t* options). The first argument is the number of epochs while option is a string that can contain: ""text"" (simple text output) , ""graph"" (evoluting graphical training curves), ""update=X"" (step for the text/graph output update) or ""+"" (will skip the randomisation and start from the previous values). All combinations are available.; Example: net.Train(100,""text, graph, update=10"");; When the neural net is trained, it can be used directly ( TMultiLayerPerceptron::Evaluate() ) or exported to a standalone C++ code ( TMultiLayerPerceptron::Export() ).; Finally, note that even if this implementation is inspired from the mlpfit code, the feature lists are not exactly matching:. mlpfit hybrid learning method is not implemented; output neurons can be normalized, this is not the case for mlpfit; the neural net is exported in C++, FORTRAN or PYTHON; the drawResult() method allows a fast check of the learning procedure. In addition, the paw version of mlpfit had additional limitations on the number of neurons, hidden layers and inputs/outputs that does not apply to TMultiLayerPerceptron. ; Definition at line 26 of file TMultiLayerPerceptron.h. Public ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiLayerPerceptron.html:8121,simpl,simple,8121,doc/master/classTMultiLayerPerceptron.html,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html,1,['simpl'],['simple']
Usability,and worker information; TProofOutputFile Wrapper class to steer the merging of files produced on workers; TProofOutputList Output list specific TList derivation; TProofPerfAnalysis Set of tools to analyse the performance tree; TProofPlayer Basic PROOF player; TProofPlayerLite PROOF player running in PROOF-Lite; TProofPlayerLocal PROOF player running on client; TProofPlayerRemote PROOF player running on master server; TProofPlayerSlave PROOF player running on slave server; TProofPlayerSuperMaster PROOF player running on super master; TProofProgressDialog PROOF progress dialog; TProofProgressInfo Progress information; TProofProgressLog Class implementing a log graphic box; TProofProgressMemoryPlot PROOF progress memory plots; TProofProgressStatus Proof progress status class; TProofQueryResult Class describing a PROOF query; TProofResources Abstract class describing PROOF resources; TProofResourcesStatic Class to handle PROOF static config; TProofServ PROOF Server Application Interface; TProofServLite PROOF-Lite Server Application Interface; TProofSuperMaster PROOF control class for making submasters; TProofVectorContainer<TProofDrawListOfGraphs::Point3D_t> Class describing a vector container; TProofVectorContainer<TProofDrawListOfPolyMarkers3D::Point4D_t> Class describing a vector container; TPyDispatcher Python dispatcher class; TPyMultiGenFunction Python for Math::IMultiGenFunction equivalent; TPyMultiGradFunction Python for Math::IMultiGradFunction equivalent; TPyReturn Python morphing return object; TPySelector Python equivalent base class for PROOF; TPythia8 Interface class of Pythia8; TPythia8Decayer Particle Decayer using Pythia8; TPython Access to the python interpreter; TQApplication creates ROOT environment with the Qt windowing system; TQCanvasImp ABC describing Qt GUI independent main window; TQCanvasMenu interface to Qt based context sensitive popup menus; TQClass Class with connections; TQCommand encapsulates the information for undo/redo a single action.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ClassIndex.html:124868,undo,undo,124868,root/html534/ClassIndex.html,https://root.cern,https://root.cern/root/html534/ClassIndex.html,2,['undo'],['undo']
Usability,"andler*fInputHandler; TXProofServInterruptHandler*fInterruptHandler; TStringfSockPath; Bool_tfTerminatedtrue if Terminate() has been already called. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TXProofServ(Int_t* argc, char** argv, FILE* flog = 0); Main constructor. Int_t CreateServer(); Finalize the server setup. If master, create the TProof instance to talk; the worker or submaster nodes.; Return 0 on success, -1 on error. ~TXProofServ(); Cleanup. Not really necessary since after this dtor there is no; live anyway. void HandleUrgentData(); Handle high priority data sent by the master or client. void HandleSigPipe(); Called when the client is not alive anymore; terminate the session. void HandleTermination(); Called when the client is not alive anymore; terminate the session. Int_t Setup(); Print the ProofServ logo on standard output.; Return 0 on success, -1 on error. TProofServ::EQueryAction GetWorkers(TList* workers, Int_t& prioritychange, Bool_t resume = kFALSE); Get list of workers to be used from now on.; The list must be provided by the caller. Bool_t HandleError(const void* in = 0); Handle error on the input socket. Bool_t HandleInput(const void* in = 0); Handle asynchronous input on the input socket. void DisableTimeout(); Disable read timeout on the underlying socket. void EnableTimeout(); Enable read timeout on the underlying socket. void Terminate(Int_t status); Terminate the proof server. Int_t LockSession(const char* sessiontag, TProofLockPath** lck); Try locking query area of session tagged sessiontag.; The id of the locking file is returned in fid and must be; unlocked via UnlockQueryFile(fid). void ReleaseWorker(const char* ord); Send message to intermediate coordinator to release worker of last ordinal; ord. » Author: G. Ganis Oct 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id$ » Last generated: 2015-03-15 16:41; This page has been automatically genera",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TXProofServ.html:18355,resume,resume,18355,root/html534/TXProofServ.html,https://root.cern,https://root.cern/root/html534/TXProofServ.html,2,['resume'],['resume']
Usability,"andler*fInputHandler; TXProofServInterruptHandler*fInterruptHandler; TStringfSockPath; Bool_tfTerminatedtrue if Terminate() has been already called. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TXProofServ(Int_t* argc, char** argv, FILE* flog = 0); Main constructor. Int_t CreateServer(); Finalize the server setup. If master, create the TProof instance to talk; the worker or submaster nodes.; Return 0 on success, -1 on error. ~TXProofServ(); Cleanup. Not really necessary since after this dtor there is no; live anyway. void HandleUrgentData(); Handle high priority data sent by the master or client. void HandleSigPipe(); Called when the client is not alive anymore; terminate the session. void HandleTermination(); Called when the client is not alive anymore; terminate the session. Int_t Setup(); Print the ProofServ logo on standard output.; Return 0 on success, -1 on error. TProofServ::EQueryAction GetWorkers(TList* workers, Int_t& prioritychange, Bool_t resume = kFALSE); Get list of workers to be used from now on.; The list must be provided by the caller. Bool_t HandleError(const void* in = 0); Handle error on the input socket. Bool_t HandleInput(const void* in = 0); Handle asynchronous input on the input socket. void DisableTimeout(); Disable read timeout on the underlying socket. void EnableTimeout(); Enable read timeout on the underlying socket. void Terminate(Int_t status); Terminate the proof server. Int_t LockSession(const char* sessiontag, TProofLockPath** lck); Try locking query area of session tagged sessiontag.; The id of the locking file is returned in fid and must be; unlocked via UnlockQueryFile(fid). void ReleaseWorker(const char* ord); Send message to intermediate coordinator to release worker of last ordinal; ord. » Author: G. Ganis Oct 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id: TXProofServ.h 29233 2009-06-26 08:07:47Z brun $ » Last generated: 2010-11-1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TXProofServ.html:17608,resume,resume,17608,root/html528/TXProofServ.html,https://root.cern,https://root.cern/root/html528/TXProofServ.html,1,['resume'],['resume']
Usability,"andler*fInputHandler; TXProofServInterruptHandler*fInterruptHandler; TStringfSockPath; Bool_tfTerminatedtrue if Terminate() has been already called. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TXProofServ(Int_t* argc, char** argv, FILE* flog = 0); Main constructor. Int_t CreateServer(); Finalize the server setup. If master, create the TProof instance to talk; the worker or submaster nodes.; Return 0 on success, -1 on error. ~TXProofServ(); Cleanup. Not really necessary since after this dtor there is no; live anyway. void HandleUrgentData(); Handle high priority data sent by the master or client. void HandleSigPipe(); Called when the client is not alive anymore; terminate the session. void HandleTermination(); Called when the client is not alive anymore; terminate the session. Int_t Setup(); Print the ProofServ logo on standard output.; Return 0 on success, -1 on error. TProofServ::EQueryAction GetWorkers(TList* workers, Int_t& prioritychange, Bool_t resume = kFALSE); Get list of workers to be used from now on.; The list must be provided by the caller. Bool_t HandleError(const void* in = 0); Handle error on the input socket. Bool_t HandleInput(const void* in = 0); Handle asynchronous input on the input socket. void DisableTimeout(); Disable read timeout on the underlying socket. void EnableTimeout(); Enable read timeout on the underlying socket. void Terminate(Int_t status); Terminate the proof server. Int_t LockSession(const char* sessiontag, TProofLockPath** lck); Try locking query area of session tagged sessiontag.; The id of the locking file is returned in fid and must be; unlocked via UnlockQueryFile(fid). void ReleaseWorker(const char* ord); Send message to intermediate coordinator to release worker of last ordinal; ord. » Author: G. Ganis Oct 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id: TXProofServ.h 29233 2009-06-26 08:07:47Z brun $ » Last generated: 2011-07-0",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TXProofServ.html:17795,resume,resume,17795,root/html530/TXProofServ.html,https://root.cern,https://root.cern/root/html530/TXProofServ.html,1,['resume'],['resume']
Usability,"andler*fInputHandler; TXProofServInterruptHandler*fInterruptHandler; TStringfSockPath; Bool_tfTerminatedtrue if Terminate() has been already called. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TXProofServ(Int_t* argc, char** argv, FILE* flog = 0); Main constructor. Int_t CreateServer(); Finalize the server setup. If master, create the TProof instance to talk; the worker or submaster nodes.; Return 0 on success, -1 on error. ~TXProofServ(); Cleanup. Not really necessary since after this dtor there is no; live anyway. void HandleUrgentData(); Handle high priority data sent by the master or client. void HandleSigPipe(); Called when the client is not alive anymore; terminate the session. void HandleTermination(); Called when the client is not alive anymore; terminate the session. Int_t Setup(); Print the ProofServ logo on standard output.; Return 0 on success, -1 on error. TProofServ::EQueryAction GetWorkers(TList* workers, Int_t& prioritychange, Bool_t resume = kFALSE); Get list of workers to be used from now on.; The list must be provided by the caller. Bool_t HandleError(const void* in = 0); Handle error on the input socket. Bool_t HandleInput(const void* in = 0); Handle asynchronous input on the input socket. void DisableTimeout(); Disable read timeout on the underlying socket. void EnableTimeout(); Enable read timeout on the underlying socket. void Terminate(Int_t status); Terminate the proof server. Int_t LockSession(const char* sessiontag, TProofLockPath** lck); Try locking query area of session tagged sessiontag.; The id of the locking file is returned in fid and must be; unlocked via UnlockQueryFile(fid). void ReleaseWorker(const char* ord); Send message to intermediate coordinator to release worker of last ordinal; ord. » Author: G. Ganis Oct 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id: TXProofServ.h 29233 2009-06-26 08:07:47Z brun $ » Last generated: 2011-12-0",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TXProofServ.html:17795,resume,resume,17795,root/html532/TXProofServ.html,https://root.cern,https://root.cern/root/html532/TXProofServ.html,2,['resume'],['resume']
Usability,"andom.; The resulting integral is normalized to 1. Double_t * GetIntegral(); Return a pointer to the array of bins integral.; if the pointer fIntegral is null, TH1::ComputeIntegral is called. void Copy(TObject& hnew) const; -*-*-*-*-*Copy this histogram structure to newth1*-*-*-*-*-*-*-*-*-*-*-*. Note that this function does not copy the list of associated functions.; Use TObJect::Clone to make a full copy of an histogram. void DirectoryAutoAdd(TDirectory* ); Perform the automatic addition of the histogram to the given directory. Note this function is called in place when the semantic requires; this object to be added to a directory (I.e. when being read from; a TKey or being Cloned). Int_t DistancetoPrimitive(Int_t px, Int_t py); -*-*-*-*-*-*-*-*-*Compute distance from point px,py to a line*-*-*-*-*-*. Compute the closest distance of approach from point px,py to elements; of an histogram.; The distance is computed in pixels units. Algorithm:; Currently, this simple model computes the distance from the mouse; to the histogram contour only. -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*. void Divide(TF1* f1, Double_t c1 = 1); Performs the operation: this = this/(c1*f1); if errors are defined (see TH1::Sumw2), errors are also recalculated. Only bins inside the function range are recomputed.; IMPORTANT NOTE: If you intend to use the errors of this histogram later; you should call Sumw2 before making this operation.; This is particularly important if you fit the histogram after TH1::Divide. void Divide(const TH1* h1); -*-*-*-*-*-*-*-*-*Divide this histogram by h1*-*-*-*-*-*-*-*-*-*-*-*-*. this = this/h1; if errors are defined (see TH1::Sumw2), errors are also recalculated.; Note that if h1 has Sumw2 set, Sumw2 is automatically called for this; if not already set.; The resulting errors are calculated assuming uncorrelated histograms.; See the other TH1::Divide that gives the possibility to optionaly; compute Binomial errors. IMPORTANT NOTE: If you",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH1.html:57125,simpl,simple,57125,root/html528/TH1.html,https://root.cern,https://root.cern/root/html528/TH1.html,2,['simpl'],['simple']
Usability,"aningful; combinations (denoted by x) are given in the next table. SimpleLightHeightLight-Height. Points XXXX; Grid XXXX; Contours X-X-; Bars X-X-; LinesX XXXX; LinesY XXXX; BarsX X-X-; BarsY X-X-; Needles X---; Surface -XXX; TrianglesXXXX. Function:; void TSpectrum2Painter::SetDisplayMode (Int_t modeGroup, Int_t displayMode). This function controls the display mode group and display mode of the; histogram drawing. To illustrate the possible effects of the various display; modes we introduce a set of examples. Default values:. modeGroup = kModeGroupLightHeight ; displayMode = kDisplayModeSurface . Simple modes group, display mode = points, 256 x 256 channels. Simple modes group, display mode = grid, 64 x 64 channels. Simple modes group, display mode = contours, 64 x 64 channels. Simple modes group, display mode = bars, 64 x 64 channels. Simple modes group, display mode = linesX, 64 x 64 channels. Simple modes group, display mode = linesY, 64 x 64 channels. Simple modes group, display mode = barsX, 64 x 64 channels. Simple modes group, display mode = barsY, 64 x 64 channels. Simple modes group, display mode = needles, 64 x 64 channels. Simple modes group, display mode = triangles, 64 x 64 channels. Light modes group, display mode = points, 256 x 256 channels. Light modes group, display mode = grid, 256 x 256 channels. Light modes group, display mode = surface, 64 x 64 channels. Light modes group, display mode = triangles, 64 x 64 channels. Height modes group, display mode = points, 256 x 256 channels. Height modes group, display mode = grid, 256 x 256 channels. Height modes group, display mode = contours, 64 x 64 channels. Height modes group, display mode = bars, 64 x 64 channels. Height modes group, display mode = surface, 64 x 64 channels. Height modes group, display mode = triangles, 64 x 64 channels. Light - height modes group, display mode = surface, 64 x 64 channels. The weight; between both shading algorithms is set to 0.5. One can observe the influence of; bo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TSpectrum2Painter.html:18195,Simpl,Simple,18195,root/html532/TSpectrum2Painter.html,https://root.cern,https://root.cern/root/html532/TSpectrum2Painter.html,4,['Simpl'],['Simple']
Usability,"annotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie; vector<TH1*>lowHistsx pb per jet bin for - variations over list of systematics; stringname; TH1*nominalx pb per jet bin. all histograms need index of binning to be consistent; vector<RooStats::HistFactory::EstimateSummary::NormFactor>normFactor; stringnormName; map<string,pair<double,double> >overallSyst""acceptance""->(0.8,1.2); TH1*relStatErrorAn (optional) externally provided shape for this error; stringshapeFactorName; vector<RooStats::HistFactory::EstimateSummary::ShapeSys>shapeSysts; vector<string>systSourceForHist. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; EstimateSummary(). ~EstimateSummary(); {}. void Print(const char* opt = 0) const. void AddSyst(const string& sname, TH1* low, TH1* high). bool operator==(const RooStats::HistFactory::EstimateSummary& other) const; Comparator for two Estimate summary objects. Useful to make sure two analyses are the same. bool CompareHisto(const TH1* one, const TH1* two) const. EstimateSummary(); simple structure to hold necessary information about each channel. » Author: Kyle Cranmer, Akira Shibata » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: cranmer $ » Last generated: 2015-06-02 15:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooStats__HistFactory__EstimateSummary.html:7523,simpl,simple,7523,root/html604/RooStats__HistFactory__EstimateSummary.html,https://root.cern,https://root.cern/root/html604/RooStats__HistFactory__EstimateSummary.html,2,['simpl'],['simple']
Usability,"annotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie; vector<TH1*>lowHistsx pb per jet bin for - variations over list of systematics; stringname; TH1*nominalx pb per jet bin. all histograms need index of binning to be consistent; vector<RooStats::HistFactory::EstimateSummary::NormFactor>normFactor; stringnormName; map<string,pair<double,double> >overallSyst""acceptance""->(0.8,1.2); TH1*relStatErrorAn (optional) externally provided shape for this error; stringshapeFactorName; vector<RooStats::HistFactory::EstimateSummary::ShapeSys>shapeSysts; vector<string>systSourceForHist. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; EstimateSummary(). ~EstimateSummary(); {}. void Print(const char* opt = 0) const. void AddSyst(const string& sname, TH1* low, TH1* high). bool operator==(const RooStats::HistFactory::EstimateSummary& other) const; Comparator for two Estimate summary objects. Useful to make sure two analyses are the same. bool CompareHisto(const TH1* one, const TH1* two) const. EstimateSummary(); simple structure to hold necessary information about each channel. » Author: Kyle Cranmer, Akira Shibata » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: cranmer $ » Last generated: 2015-06-30 14:36; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__HistFactory__EstimateSummary.html:7523,simpl,simple,7523,root/html602/RooStats__HistFactory__EstimateSummary.html,https://root.cern,https://root.cern/root/html602/RooStats__HistFactory__EstimateSummary.html,2,['simpl'],['simple']
Usability,"another RooAbsArg to our cache. void printMultiline(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; Structure printing. void randomize(const char* rangeName = 0); Set a new value sampled from a uniform distribution over the fit range.; Prints a warning and does nothing if the fit range is not finite. void setBin(Int_t ibin, const char* rangeName = 0); Set value to center of bin 'ibin' of binning 'rangeName' (or of; default binning if no range is specified). void setBin(Int_t ibin, const RooAbsBinning& binning); Set value to center of bin 'ibin' of binning 'binning'. void randomize(const RooAbsBinning& binning); Set a new value sampled from a uniform distribution over the fit range.; Prints a warning and does nothing if the fit range is not finite. void setBinFast(Int_t ibin, const RooAbsBinning& binning); Set value to center of bin 'ibin' of binning 'rangeName' (or of; default binning if no range is specified). Bool_t fitRangeOKForPlotting() const; Check if fit range is usable as plot range, i.e. it is neither; open ended, nor empty. Bool_t inRange(const char* name) const; Check if current value is inside range with given name. TH1* createHistogram(const char* name, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()) const; Create an empty ROOT histogram TH1,TH2 or TH3 suitabe to store information represent by the RooAbsRealLValue. This function accepts the following arguments. name -- Name of the ROOT histogram. Binning(const char* name) -- Apply binning with given name to x axis of histogram; Binning(RooAbsBinning& binning) -- Apply specified binning to x axis of histogram; Binning(int_t nbins) -- Apply specified binning to x axis of histogram; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsRealLValue.html:40987,usab,usable,40987,root/html528/RooAbsRealLValue.html,https://root.cern,https://root.cern/root/html528/RooAbsRealLValue.html,9,['usab'],['usable']
Usability,"ans: double sized border, white background and a bit wider to allow for text to be printed in the bar. ; Definition at line 343 of file TGProgressBar.cxx. ◆ ~TGVProgressBar(). TGVProgressBar::~TGVProgressBar ; (; ). inlineoverride . Definition at line 136 of file TGProgressBar.h. Member Function Documentation. ◆ Class(). static TClass * TGVProgressBar::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGVProgressBar::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGVProgressBar::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 144 of file TGProgressBar.h. ◆ DeclFileName(). static const char * TGVProgressBar::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 144 of file TGProgressBar.h. ◆ DoRedraw(). void TGVProgressBar::DoRedraw ; (; ). overrideprotectedvirtual . Draw vertical progress bar. ; Implements TGProgressBar.; Definition at line 359 of file TGProgressBar.cxx. ◆ GetDefaultSize(). TGDimension TGVProgressBar::GetDefaultSize ; (; ); const. inlineoverridevirtual . std::cout << fWidth << ""x"" << fHeight << std::endl; ; Reimplemented from TGFrame.; Definition at line 138 of file TGProgressBar.h. ◆ IsA(). TClass * TGVProgressBar::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGProgressBar.; Definition at line 144 of file TGProgressBar.h. ◆ Percent(). void TGVProgressBar::Percent ; (; Bool_t ; ). inlineoverridevirtual . Reimplemented from TGProgressBar.; Definition at line 142 of file TGProgressBar.h. ◆ SavePrimitive(). void TGVProgressBar::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save a vertical progress bar as a C++ statement(s) on output stream out. ; Reimplemented from TGProgressBar.; Definition at line 438 of file TGProgressBar.cxx. ◆ ShowPos(). v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGVProgressBar.html:32625,progress bar,progress bar,32625,doc/master/classTGVProgressBar.html,https://root.cern,https://root.cern/doc/master/classTGVProgressBar.html,1,['progress bar'],['progress bar']
Usability,"ansfer one single large buffer of 10 Mbytes in one single transaction.; Not only the TreeCache minimizes the number of transfers, but in addition; it can sort the blocks to be read in increasing order such that the file; is read sequentially.; Systems like xrootd, dCache or httpd take advantage of the TreeCache in; reading ahead as much data as they can and return to the application; the maximum data specified in the cache and have the next chunk of data ready; when the next request comes. HOW TO USE the TreeCache. A few use cases are discussed below. It is not simple to activate the cache; by default (except case1 below) because there are many possible configurations.; In some applications you know a priori the list of branches to read.; In other applications the analysis loop calls several layers of user functions; where it is impossible to predict a priori which branches will be used. This; is probably the most frequent case. In this case ROOT I/O will flag used; branches automatically when a branch buffer is read during the learning phase.; The TreeCache interface provides functions to instruct the cache about the used; branches if they are known a priori. In the examples below, portions of analysis; code are shown. The few statements involving the TreeCache are marked with //<<<. 1- with TTree::Draw. the TreeCache is automatically used by TTree::Draw. The function knows; which branches are used in the query and it puts automatically these branches; in the cache. The entry range is also known automatically. 2- with TTree::Process and TSelectors. You must enable the cache and tell the system which branches to cache; and also specify the entry range. It is important to specify the entry range; in case you process only a subset of the events, otherwise you run the risk; to store in the cache entries that you do not need. --example 2a; --; TTree *T = (TTree*)f->Get(""mytree"");; Long64_t nentries = T->GetEntries();; Int_t cachesize = 10000000; //10 MBytes; T->SetCacheS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTreeCache.html:4191,learn,learning,4191,root/html528/TTreeCache.html,https://root.cern,https://root.cern/root/html528/TTreeCache.html,4,['learn'],['learning']
Usability,anual! true if cache is StopLearningPhase was used; Bool_tTFileCacheRead::fIsSortedTrue if fSeek array is sorted; Bool_tTFileCacheRead::fIsTransferredTrue when fBuffer contains something valid; Int_tfLastReadPos; Int_t*TFileCacheRead::fLen[fNb] Length of long buffers; TMutex*fMutexListMutex to protect the various lists. Used by the condvars.; Int_tfNFound! number of blocks that were found in the cache; Int_tfNMissed! number of blocks that were not found in the cache and were unzipped; Int_tTTreeCache::fNReadMissNumber of blocks read and not found in the chache; Int_tTTreeCache::fNReadOkNumber of blocks read and found in the cache; Int_tTTreeCache::fNReadPrefNumber of blocks that were prefetched; Int_tfNStalls! number of hits which caused a stall; Int_tfNUnzip! number of blocks that were unzipped; Int_tTFileCacheRead::fNbNumber of long buffers; Int_tTTreeCache::fNbranches! Number of branches in the cache; Long64_tTFileCacheRead::fNoCacheBytesReadNumber of bytes read by basket to fill cached tree; Int_tTFileCacheRead::fNoCacheReadCallsNumber of read calls by basket to fill cached tree; Int_tTFileCacheRead::fNseekNumber of blocks to be prefetched; Int_tfNseekMax! fNseek can change so we need to know its max size; Int_tTFileCacheRead::fNtotTotal size of prefetched blocks; Bool_tTTreeCache::fOneTime! used in the learning phase ; Bool_tfParallelIndicate if we want to activate the parallelism (for this instance); Long64_t*TFileCacheRead::fPos[fNb] start of long buffers; TFilePrefetch*TFileCacheRead::fPrefetch!Object that does the asynchronous reading in another thread; Long64_tTFileCacheRead::fPrefetchedBlocksNumber of blocks prefetched.; TTreeCache::EPrefillTypeTTreeCache::fPrefillTypeWhether a prefilling is enabled (and if applicable which type); Int_tTFileCacheRead::fReadCallsNumber of read calls for this cache; Bool_tTTreeCache::fReadDirectionSet! read direction established; Bool_tTTreeCache::fReverseRead! reading in reverse mode ; Long64_t*TFileCacheRead::fSeek[fNseek],MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTreeCacheUnzip.html:13846,learn,learning,13846,root/html534/TTreeCacheUnzip.html,https://root.cern,https://root.cern/root/html534/TTreeCacheUnzip.html,2,['learn'],['learning']
Usability,anual! true if cache is StopLearningPhase was used; Bool_tTFileCacheRead::fIsSortedTrue if fSeek array is sorted; Bool_tTFileCacheRead::fIsTransferredTrue when fBuffer contains something valid; Int_tfLastReadPos; Int_t*TFileCacheRead::fLen[fNb] Length of long buffers; TMutex*fMutexListMutex to protect the various lists. Used by the condvars.; Int_tfNFound! number of blocks that were found in the cache; Int_tfNMissed! number of blocks that were not found in the cache and were unzipped; Int_tTTreeCache::fNReadMissNumber of blocks read and not found in the chache; Int_tTTreeCache::fNReadOkNumber of blocks read and found in the cache; Int_tTTreeCache::fNReadPrefNumber of blocks that were prefetched; Int_tfNStalls! number of hits which caused a stall; Int_tfNUnzip! number of blocks that were unzipped; Int_tTFileCacheRead::fNbNumber of long buffers; Int_tTTreeCache::fNbranches! Number of branches in the cache; Long64_tTFileCacheRead::fNoCacheBytesReadNumber of bytes read by basket to fill cached tree; Int_tTFileCacheRead::fNoCacheReadCallsNumber of read calls by basket to fill cached tree; Int_tTFileCacheRead::fNseekNumber of blocks to be prefetched; Int_tfNseekMax! fNseek can change so we need to know its max size; Int_tTFileCacheRead::fNtotTotal size of prefetched blocks; Bool_tTTreeCache::fOneTime! used in the learning phase; Bool_tfParallelIndicate if we want to activate the parallelism (for this instance); Long64_t*TFileCacheRead::fPos[fNb] start of long buffers; TFilePrefetch*TFileCacheRead::fPrefetch! Object that does the asynchronous reading in another thread; Long64_tTFileCacheRead::fPrefetchedBlocksNumber of blocks prefetched.; TTreeCache::EPrefillTypeTTreeCache::fPrefillTypeWhether a prefilling is enabled (and if applicable which type); Int_tTFileCacheRead::fReadCallsNumber of read calls for this cache; Bool_tTTreeCache::fReadDirectionSet! read direction established; Bool_tTTreeCache::fReverseRead! reading in reverse mode; Long64_t*TFileCacheRead::fSeek[fNseek] ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTreeCacheUnzip.html:14532,learn,learning,14532,root/html602/TTreeCacheUnzip.html,https://root.cern,https://root.cern/root/html602/TTreeCacheUnzip.html,4,['learn'],['learning']
Usability,"anvas() [2/3]. TRootCanvas::TRootCanvas ; (; TCanvas * ; c = nullptr, . const char * ; name = ""ROOT Canvas"", . UInt_t ; width = 500, . UInt_t ; height = 300 . ). Create a basic ROOT canvas. ; Definition at line 303 of file TRootCanvas.cxx. ◆ TRootCanvas() [3/3]. TRootCanvas::TRootCanvas ; (; TCanvas * ; c, . const char * ; name, . Int_t ; x, . Int_t ; y, . UInt_t ; width, . UInt_t ; height . ). Create a basic ROOT canvas. ; Definition at line 317 of file TRootCanvas.cxx. ◆ ~TRootCanvas(). TRootCanvas::~TRootCanvas ; (; ). override . Delete ROOT basic canvas. ; Order is significant. Delete in reverse order of creation. ; Definition at line 621 of file TRootCanvas.cxx. Member Function Documentation. ◆ Activated(). void TRootCanvas::Activated ; (; Int_t ; id). Slot handling tab switching in the browser, to properly set the canvas and the model to the editor. ; Definition at line 2072 of file TRootCanvas.cxx. ◆ AdjustSize(). void TRootCanvas::AdjustSize ; (; ). Keep the same canvas size while docking/undocking toolbar. ; Definition at line 1706 of file TRootCanvas.cxx. ◆ Class(). static TClass * TRootCanvas::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TRootCanvas::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TRootCanvas::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 150 of file TRootCanvas.h. ◆ Close(). void TRootCanvas::Close ; (; ). overridevirtual . Called via TCanvasImp interface by TCanvas. ; Reimplemented from TCanvasImp.; Definition at line 671 of file TRootCanvas.cxx. ◆ CloseWindow(). void TRootCanvas::CloseWindow ; (; ). overridevirtual . In case window is closed via WM we get here. ; Reimplemented from TGMainFrame.; Definition at line 714 of file TRootCanvas.cxx. ◆ CreateCanvas(). void TRootCanvas::CreateCanvas ; (; const char * ; name). private . Create the actual canvas. ; Definition at line 332 of fil",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRootCanvas.html:43543,undo,undocking,43543,doc/master/classTRootCanvas.html,https://root.cern,https://root.cern/doc/master/classTRootCanvas.html,1,['undo'],['undocking']
Usability,"anvas.; To automate files loading and objects drawing, one can provide number of URL parameters in address string like:. file - name of the file, which will be automatically open with page loading; files - array of file names for loading; json - name of JSON file with stored ROOT object like histogram or canvas; item - item name to be displayed; opt - drawing option for the item; items - array of items name to be displayed; opts - array of drawing options for the items; expand - item name(s) to be expanded in the hierarchy browser; focus - item name to be focused on in the hierarchy browser; title - set browser title; dir - list files in directory on http server, see https://github.com/root-project/jsroot/issues/283; layout - can be ‘simple’, ‘flex’, ‘tabs’, ‘gridNxM’, ‘horizNMK’, ‘vertNMK’; browser - layout of the browser ‘fix’ (default), ‘float’, ‘no’ (hidden), ‘off’ (fully disabled); nobrowser - do not display file browser (same as browser=no); float - display floating browser (same as browser=float); status - configure status line ‘no’ (default), ‘off’ (completely disable), ‘size’; inject - name of extra JavaScript to load, see several examples in demo/ subdir; optimize - drawing optimization 0:off, 1:only large histograms (default), 2:always; palette - id of default color palette, 51..121 - new ROOT6 palette (default 57); interactive - enable/disable interactive functions 0 - disable all, 1 - enable all; noselect - hide file-selection part in the browser (only when file name is specified); mathjax - use MathJax for latex output; latex - ‘off’, ‘symbols’, ‘normal’, ‘mathjax’, ‘alwaysmath’ control of TLatex processor; style - name of TStyle object to define global JSROOT style; toolbar - show canvas tool buttons ‘off’, ‘on’ and ‘popup’, ‘left’ or ‘right’ for position, ‘vert’ for vertical; divsize - fixed size in pixels for main div element like &dvisize=1500x800; canvsize - default canvas size in pixels like &canvsize=1200x800; optstat - settings for stat box, def",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/JSROOT/JSROOT.html:1987,simpl,simple,1987,root/htmldoc/guides/JSROOT/JSROOT.html,https://root.cern,https://root.cern/root/htmldoc/guides/JSROOT/JSROOT.html,2,['simpl'],['simple']
Usability,"any Branch of this; Tree or any branch in the list of friend trees. aname may be of the form branchname/leafname. Double_t GetMaximum(const char* columname); Return maximum of column with name columname.; if the Tree has an associated TEventList or TEntryList, the maximum; is computed for the entries in this list. Long64_t GetMaxTreeSize(); Static function which returns the tree file size limit in bytes. Double_t GetMinimum(const char* columname); Return minimum of column with name columname.; if the Tree has an associated TEventList or TEntryList, the minimum; is computed for the entries in this list. TVirtualTreePlayer* GetPlayer(); Load the TTreePlayer (if not already done). TList* GetUserInfo(); Return a pointer to the list containing user objects associated to this tree. The list is automatically created if it does not exist. WARNING: By default the TTree destructor will delete all objects added; to this list. If you do not want these objects to be deleted,; call:. mytree->GetUserInfo()->Clear();. before deleting the tree. void ImportClusterRanges(TTree* fromtree); Appends the cluster range information stored in 'fromtree' to this tree,; including the value of fAutoFlush. This is used when doing a fast cloning (by TTreeCloner).; See also fAutoFlush and fAutoSave if needed. void KeepCircular(); Keep a maximum of fMaxEntries in memory. Int_t LoadBaskets(Long64_t maxmemory = 2000000000); Read in memory all baskets from all branches up to the limit of maxmemory bytes. If maxmemory is non null and positive SetMaxVirtualSize is called; with this value. Default for maxmemory is 2000000000 (2 Gigabytes).; The function returns the total number of baskets read into memory; if negative an error occurred while loading the branches.; This method may be called to force branch baskets in memory; when random access to branch entries is required.; If random access to only a few branches is required, you should; call directly TBranch::LoadBaskets. Long64_t LoadTree(Long64_t entry",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TTree.html:99717,Clear,Clear,99717,root/html532/TTree.html,https://root.cern,https://root.cern/root/html532/TTree.html,1,['Clear'],['Clear']
Usability,"apacity greater than or equal to newCap. void Clear(); Clear string without changing its capacity. void Clobber(Ssiz_t nc); Clear string and make sure it has a capacity of nc. void Clone(Ssiz_t nc); Make self a distinct copy with capacity of at least tot, where tot cannot; be smaller than the current length. Preserve previous contents. void FillBuffer(char*& buffer); Copy string into I/O buffer. void ReadBuffer(char*& buffer); Read string from I/O buffer. TString * ReadString(TBuffer& b, const TClass* clReq); Read TString object from buffer. Simplified version of; TBuffer::ReadObject (does not keep track of multiple; references to same string). We need to have it here; because TBuffer::ReadObject can only handle descendant; of TObject. Int_t Sizeof() const; Returns size string will occupy on I/O buffer. void Streamer(TBuffer& b); Stream a string object. void WriteString(TBuffer& b, const TString* a); Write TString object to buffer. Simplified version of; TBuffer::WriteObject (does not keep track of multiple; references to the same string). We need to have it here; because TBuffer::ReadObject can only handle descendant; of TObject. Ssiz_t GetInitialCapacity(). Ssiz_t GetResizeIncrement(). Ssiz_t GetMaxWaste(). Ssiz_t InitialCapacity(Ssiz_t ic = 15); Set default initial capacity for all TStrings. Default is 15. Ssiz_t ResizeIncrement(Ssiz_t ri = 16); Set default resize increment for all TStrings. Default is 16. Ssiz_t MaxWaste(Ssiz_t mw = 15); Set maximum space that may be wasted in a string before doing a resize.; Default is 15. TSubString operator()(Ssiz_t start, Ssiz_t len) const; Return sub-string of string starting at start with length len. TSubString SubString(const char* pat, Ssiz_t start = 0, TString::ECaseCompare cmp = kExact) const; Returns a substring matching ""pattern"", or the null substring; if there is no such match. It would be nice if this could be yet another; overloaded version of operator(), but this would result in a type; conversion ambiguity with",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TString.html:13891,Simpl,Simplified,13891,root/html532/TString.html,https://root.cern,https://root.cern/root/html532/TString.html,1,['Simpl'],['Simplified']
Usability,"ape* shape, Option_t* option = """"); virtual~TVolume(); voidTObject::AbstractMethod(const char* method) const; virtual voidAdd(TShape* shape, Bool_t IsMaster = kFALSE); virtual TVolumePosition*Add(TVolume* node, Double_t x = 0, Double_t y = 0, Double_t z = 0, TRotMatrix* matrix = 0, UInt_t id = 0, Option_t* option = """"); virtual TVolumePosition*Add(TVolume* node, Double_t x, Double_t y, Double_t z, const char* matrixname, UInt_t id = 0, Option_t* option = """"); virtual voidTDataSet::AddAt(TDataSet* dataset, Int_t idx = 0); virtual voidTDataSet::AddAtAndExpand(TDataSet* dataset, Int_t idx = 0); virtual voidTDataSet::AddFirst(TDataSet* dataset); virtual voidTDataSet::AddLast(TDataSet* dataset); virtual TObject*TObjectSet::AddObject(TObject* obj, Bool_t makeOwner = kTRUE); virtual voidTObject::AppendPad(Option_t* option = """"); TDataSet*TDataSet::At(Int_t idx) const; virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TDataSet::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual TNode*CreateTNode(const TVolumePosition* position = 0); virtual voidTObjectSet::Delete(Option_t* opt = """"); virtual voidDeletePosition(TVolumePosition* position); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tTObjectSet::DoOwner(Bool_t done = kTRUE); virtual voidDraw(Option_t* depth = ""3"")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidDrawOnly(Option_t* option = """"); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TVolume.html:2052,Clear,Clear,2052,root/html532/TVolume.html,https://root.cern,https://root.cern/root/html532/TVolume.html,2,['Clear'],['Clear']
Usability,"ape; kGeoInvalidShape; kGeoTorus; kGeoBox; kGeoPara; kGeoSph; kGeoTube; kGeoTubeSeg; kGeoCone; kGeoConeSeg; kGeoPcon; kGeoPgon; kGeoArb8; kGeoEltu; kGeoTrap; kGeoCtub; kGeoTrd1; kGeoTrd2; kGeoComb; kGeoClosedShape; kGeoXtru; kGeoParaboloid; kGeoHalfSpace; kGeoHype; kGeoSavePrimitive; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Double_tTGeoBBox::fDXX half-length; Double_tTGeoBBox::fDYY half-length; Double_tTGeoBBox::fDZZ half-length; TStringTNamed::fNameobject identifier; Double_tTGeoBBox::fOrigin[3]box origin; UInt_tTGeoShape::fShapeBitsshape bits; Int_tTGeoShape::fShapeIdshape id; TStringTNamed::fTitleobject title. private:. TGeoBoolNode*fNodetop boolean node. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void ClearThreadData() const; Needed just for cleanup. TGeoCompositeShape(); Default constructor. TGeoCompositeShape(const char* name, const char* expression); Default constructor. TGeoCompositeShape(const char* expression); Default constructor. TGeoCompositeShape(const char* name, TGeoBoolNode* node); Constructor with a Boolean node. ~TGeoCompositeShape(); destructor. Double_t Capacity() const; Computes capacity of this shape [length^3] by sampling with 1% error. void ComputeBBox(); compute bounding box of the sphere. void ComputeNormal(Double_t* point, Double_t* dir, Double_t* norm); Computes normal vector in POINT to the composite shape. Bool_t Contains(Double_t* point) const; Tests if point is inside the shape. Int_t DistancetoPrimitive(Int_t px, Int_t py); Compute closest distance from point px,py to each corner. Double_t DistFromOutside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; Compute distance from outside point to this composi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoCompositeShape.html:17438,Clear,ClearThreadData,17438,root/html532/TGeoCompositeShape.html,https://root.cern,https://root.cern/root/html532/TGeoCompositeShape.html,1,['Clear'],['ClearThreadData']
Usability,"ape; kGeoInvalidShape; kGeoTorus; kGeoBox; kGeoPara; kGeoSph; kGeoTube; kGeoTubeSeg; kGeoCone; kGeoConeSeg; kGeoPcon; kGeoPgon; kGeoArb8; kGeoEltu; kGeoTrap; kGeoCtub; kGeoTrd1; kGeoTrd2; kGeoComb; kGeoClosedShape; kGeoXtru; kGeoParaboloid; kGeoHalfSpace; kGeoHype; kGeoSavePrimitive; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Double_tTGeoBBox::fDXX half-length; Double_tTGeoBBox::fDYY half-length; Double_tTGeoBBox::fDZZ half-length; TStringTNamed::fNameobject identifier; Double_tTGeoBBox::fOrigin[3]box origin; UInt_tTGeoShape::fShapeBitsshape bits; Int_tTGeoShape::fShapeIdshape id; TStringTNamed::fTitleobject title. private:. TGeoBoolNode*fNodetop boolean node. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void ClearThreadData() const; Needed just for cleanup. void CreateThreadData(Int_t nthreads); Needed just for cleanup. TGeoCompositeShape(); Default constructor. TGeoCompositeShape(const char* name, const char* expression); Default constructor. TGeoCompositeShape(const char* expression); Default constructor. TGeoCompositeShape(const char* name, TGeoBoolNode* node); Constructor with a Boolean node. ~TGeoCompositeShape(); destructor. Double_t Capacity() const; Computes capacity of this shape [length^3] by sampling with 1% error. void ComputeBBox(); compute bounding box of the sphere. void ComputeNormal(const Double_t* point, const Double_t* dir, Double_t* norm); Computes normal vector in POINT to the composite shape. Bool_t Contains(const Double_t* point) const; Tests if point is inside the shape. Int_t DistancetoPrimitive(Int_t px, Int_t py); Compute closest distance from point px,py to each corner. Double_t DistFromOutside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = TG",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoCompositeShape.html:18339,Clear,ClearThreadData,18339,root/html534/TGeoCompositeShape.html,https://root.cern,https://root.cern/root/html534/TGeoCompositeShape.html,1,['Clear'],['ClearThreadData']
Usability,"apeSpecific for TBuffer3DSphere; Try first add to viewer; Int_t reqSections = viewer->AddObject(buffer);; if (reqSections != TBuffer3D::kNone) {; if (reqSections & TBuffer3D::kRawSizes) {; Fill out kRawSizes...; }; if (reqSections & TBuffer3D::kRaw) {; Fill out kRaw...; }; Add second time to viewer - ignore return cannot do more; viewer->AddObject(buffer);; }; }>; ShapeSpecific: If the viewer can directly display the buffer without; filling of the kRaw/kRawSizes section it will not need to request client side; tessellation.; Currently we provide the following various shape specific classes, which the; OpenGL viewer can take advantage of (see TBuffer3D.h and TBuffer3DTypes.h). TBuffer3DSphere - solid, hollow and cut spheres*; TBuffer3DTubeSeg - angle tube segment; TBuffer3DCutTube - angle tube segment with plane cut ends. *OpenGL only supports solid spheres at present - cut/hollow ones will be; requested tessellated.; Anyone is free to add new TBuffer3D classes, but it should be clear that the; viewers require updating to be able to take advantage of them. The number of; native shapes in OpenGL will be expanded over time.; BoundingBox: You are not obliged to complete this, as any viewer; requiring one internally (OpenGL) will build one for you if you do not provide.; However; to do this the viewer will force you to provide the raw tessellation, and the; resulting box will be axis aligned with the overall scene, which is non-ideal; for rotated shapes.; As we need to support orientated (rotated) bounding boxes, TBuffer3D requires; the 6 vertices of the box. We also provide a convenience function, SetAABoundingBox(),; for simpler case of setting an axis aligned bounding box. Master/Local Reference Frames; The Core section of TBuffer3D contains two members relating to reference; frames:; fLocalFrame & fLocalMaster. fLocalFrame indicates; if any positions in the buffer (bounding box and tessellation vertexes) are; in local or master (world; frame). fLocalMaster is a stand",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBuffer3D.html:3422,clear,clear,3422,root/html526/TBuffer3D.html,https://root.cern,https://root.cern/root/html526/TBuffer3D.html,21,['clear'],['clear']
Usability,"aph->InheritsFrom(""TCutG"")) {; 1024 //make sure first and last point are the same; 1025 if (ipoint == 0) {; 1026 theX[theNpoints-1] = theX[0];; 1027 theY[theNpoints-1] = theY[0];; 1028 }; 1029 if (ipoint == theNpoints-1) {; 1030 theX[0] = theX[theNpoints-1];; 1031 theY[0] = theY[theNpoints-1];; 1032 }; 1033 }; 1034 }; 1035 badcase = kFALSE;; 1036 gPad->Modified(kTRUE);; 1037 //gPad->Update();; 1038 }; 1039 break;; 1040 ; 1041 case kButton1Up:; 1042 ; 1043 if (gROOT->IsEscaped()) {; 1044 gROOT->SetEscape(kFALSE);; 1045 x.clear();; 1046 y.clear();; 1047 break;; 1048 }; 1049 ; 1050 // Compute x,y range; 1051 xmin = gPad->GetUxmin();; 1052 xmax = gPad->GetUxmax();; 1053 ymin = gPad->GetUymin();; 1054 ymax = gPad->GetUymax();; 1055 dx = xmax-xmin;; 1056 dy = ymax-ymin;; 1057 dxr = dx/(1 - gPad->GetLeftMargin() - gPad->GetRightMargin());; 1058 dyr = dy/(1 - gPad->GetBottomMargin() - gPad->GetTopMargin());; 1059 ; 1060 if (theGraph->GetHistogram()) {; 1061 // Range() could change the size of the pad pixmap and therefore should; 1062 // be called before the other paint routines; 1063 gPad->Range(xmin - dxr*gPad->GetLeftMargin(),; 1064 ymin - dyr*gPad->GetBottomMargin(),; 1065 xmax + dxr*gPad->GetRightMargin(),; 1066 ymax + dyr*gPad->GetTopMargin());; 1067 gPad->RangeAxis(xmin, ymin, xmax, ymax);; 1068 }; 1069 if (middle) {; 1070 for(i=0;i<theNpoints;i++) {; 1071 if (badcase) continue; //do not update if big zoom and points moved; 1072 if (!x.empty()) theX[i] = gPad->PadtoX(gPad->AbsPixeltoX(x[i]+dpx));; 1073 if (!y.empty()) theY[i] = gPad->PadtoY(gPad->AbsPixeltoY(y[i]+dpy));; 1074 }; 1075 } else {; 1076 theX[ipoint] = gPad->PadtoX(gPad->AbsPixeltoX(pxold));; 1077 theY[ipoint] = gPad->PadtoY(gPad->AbsPixeltoY(pyold));; 1078 if (theGraph->InheritsFrom(""TCutG"")) {; 1079 //make sure first and last point are the same; 1080 if (ipoint == 0) {; 1081 theX[theNpoints-1] = theX[0];; 1082 theY[theNpoints-1] = theY[0];; 1083 }; 1084 if (ipoint == theNpoints-1) {; 1085 theX[0] = theX[th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphPainter_8cxx_source.html:38525,clear,clear,38525,doc/master/TGraphPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphPainter_8cxx_source.html,1,['clear'],['clear']
Usability,"aphErrors; TGraphPolar : example; TMultiGraph : example, exclusion; TGraph2D : example; TEfficiency : docu; TLatex : example; TMathText : example; TCanvas : example; TPad : example; TRatioPlot : example; TLegend : example; TTree : single-branch draw; TPolyLine : dflt; TGaxis : dflt; TEllipse : dflt; TArrow : dflt; TPolyMarker3D: dflt. More examples of supported classes can be found on: https://root.cern/js/latest/examples.htm; There are special JSROOT draw options which only can be used with for TCanvas or TPad objects:. logx - enable log10 scale for X axis; logy - enable log10 scale for Y axis; logz - enable log10 scale for Z axis; log - enable log10 scale for X,Y,Z axes; log2x - enable log2 scale for X axis; log2y - enable log2 scale for Y axis; log2z - enable log2 scale for Z axis; log2 - enable log2 scale for X,Y,Z axes; gridx - enable grid for X axis; gridy - enable grid for X axis; grid - enable grid for X and Y axes; tickx - enable ticks for X axis; ticky - enable ticks for X axis; tick - enable ticks for X and Y axes; rx - reverse X axis; ry - reverse Y axis; rotate - rotate frame; fixframe - disable interactive moving of the frame; nozoomx - disable zooming on X axis; nozoomy - disable zooming on Y axis; cpXY - create palette XY for the canvas like cp50; nopalette - ignore palette stored with TCanvas; nocolors - ignore colors list stored with TCanvas; lcolors - use only locally colors list stored with TCanvas; nomargins - clear frame margins. 1.4 Superimposing draw objects; In the URL string one could use “+” sign to specify objects superposition:. item=hpx+hprof. With similar syntax one could specify individual draw options for superimposed objects. item=hpx+hprof&opt=logy+hist. Here “logy” option will be used for “hpx1” item and “hist” option for “hprof;1” item.; While draw option can include “+” sign itself, for superposition one could specify arrays of items and draw options like:. item=[hpx;1,hprof;1]&opt=[logy,hist]. 1.5 TTree draw; JSROOT provides pos",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/JSROOT/JSROOT.html:7828,clear,clear,7828,root/htmldoc/guides/JSROOT/JSROOT.html,https://root.cern,https://root.cern/root/htmldoc/guides/JSROOT/JSROOT.html,2,['clear'],['clear']
Usability,"apply(unsigned int i) constDefinition Expression.h:244; ROOT::Math::BinaryOp::IsInUsebool IsInUse(const T *p) constDefinition Expression.h:251; ROOT::Math::BinaryOp::operator()T operator()(unsigned int i, unsigned int j) constDefinition Expression.h:247; ROOT::Math::ConstantConstant expression class A class representing constant expressions (literals) in the parse tree.Definition Expression.h:400; ROOT::Math::Constant::applyT apply(unsigned int) constDefinition Expression.h:410; ROOT::Math::Constant::rhs_const T rhs_Definition Expression.h:418; ROOT::Math::Constant::~Constant~Constant()Definition Expression.h:407; ROOT::Math::Constant::operator()T operator()(unsigned int, unsigned int) constDefinition Expression.h:412; ROOT::Math::Constant::ConstantConstant(const T &rhs)Definition Expression.h:403; ROOT::Math::ExprDefinition Expression.h:138; ROOT::Math::Expr::applyT apply(unsigned int i) constDefinition Expression.h:150; ROOT::Math::Expr::printstd::ostream & print(std::ostream &os) constused by operator<<() simplify to use apply(i,j)Definition Expression.h:184; ROOT::Math::Expr::ExprExpr(const ExprType &rhs)Definition Expression.h:143; ROOT::Math::Expr::value_typeT value_typeDefinition Expression.h:140; ROOT::Math::Expr::rhs_ExprType rhs_Definition Expression.h:203; ROOT::Math::Expr::operator()T operator()(unsigned int i, unsigned j) constDefinition Expression.h:153; ROOT::Math::Expr::kCols@ kColsDefinition Expression.h:178; ROOT::Math::Expr::kRows@ kRowsDefinition Expression.h:176; ROOT::Math::Expr::~Expr~Expr()Definition Expression.h:147; ROOT::Math::Expr::IsInUsebool IsInUse(const T *p) constfunction to determine if any use operand is being used (has same memory address)Definition Expression.h:161; ROOT::Math::MatRepStdExpression wrapper class for Matrix objects.Definition MatrixRepresentationsStatic.h:54; ROOT::Math::UnaryOpUnaryOperation class A class representing unary operators in the parse tree.Definition Expression.h:361; ROOT::Math::UnaryOp::rhs_const RHS ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Expression_8h_source.html:14652,simpl,simplify,14652,doc/master/Expression_8h_source.html,https://root.cern,https://root.cern/doc/master/Expression_8h_source.html,1,['simpl'],['simplify']
Usability,"ar * GetSessionDir() const; { return fSessionDir; }. const char * GetPackageDir() const; { return fPackageDir; }. const char * GetDataDir() const; { return fDataDir; }. Int_t GetProtocol() const; { return fProtocol; }. const char * GetOrdinal() const; { return fOrdinal; }. Int_t GetGroupId() const; { return fGroupId; }. Int_t GetGroupSize() const; { return fGroupSize; }. Int_t GetLogLevel() const; { return fLogLevel; }. TSocket * GetSocket() const; { return fSocket; }. Float_t GetRealTime() const; { return fRealTime; }. Float_t GetCpuTime() const; { return fCpuTime; }. Int_t GetQuerySeqNum() const; { return fQuerySeqNum; }. Int_t GetTotSessions() const; { return fTotSessions; }. Int_t GetActSessions() const; { return fActSessions; }. Float_t GetEffSessions() const; { return fEffSessions; }. TList * GetEnabledPackages() const; { return fEnabledPackages; }. Int_t GetInflateFactor() const; { return fInflateFactor; }. Long64_t GetMsgSizeHWM() const; { return fMsgSizeHWM; }. const char * GetPrefix() const; { return fPrefix; }. TProofLockPath * GetCacheLock(); { return fCacheLock; }. EQueryAction GetWorkers(TList* workers, Int_t& prioritychange, Bool_t resume = kFALSE). void HandleTermination(); { Terminate(0); }. void Interrupt(); { fInterrupt = kTRUE; }. Bool_t IsEndMaster() const; { return fEndMaster; }. Bool_t IsMaster() const; { return fMasterServ; }. Bool_t IsTopMaster() const; { return fOrdinal == ""0""; }. void ReleaseWorker(const char* ); { }. void DisableTimeout(); Disable / Enable read timeout. { }. void EnableTimeout(); { }. void LogToMaster(Bool_t on = kTRUE); Log control. { fSendLogToMaster = on; }. » Author: Fons Rademakers 16/02/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id: TProofServ.h 36592 2010-11-11 10:43:17Z ganis $ » Last generated: 2010-12-10 14:39; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofServ.html:32544,resume,resume,32544,root/html528/TProofServ.html,https://root.cern,https://root.cern/root/html528/TProofServ.html,1,['resume'],['resume']
Usability,"ar *player=0, TSocket *s=0);  Construct a TProofPlayer object. ;  ; virtual Int_t PollForNewWorkers ();  Asks the PROOF Serv for new workers in Dynamic Startup mode and activates them. ;  ; void PrepareInputDataFile (TString &dataFile);  Prepare the file with the input data objects to be sent the master; the objects are taken from the dedicated list and / or the specified file. ;  ; Int_t RemoveWorkers (TList *wrks);  Used for shuting down the workres after a query is finished. ;  ; virtual void SaveWorkerInfo ();  Save information about the worker set in the file .workers in the working dir. ;  ; Int_t SendFile (const char *file, Int_t opt=(kBinary|kForward|kCp|kCpBin), const char *rfile=0, TSlave *sl=0);  Send a file to master or slave servers. ;  ; virtual void SendInputDataFile ();  Send the input data objects to the master; the objects are taken from the dedicated list and / or the specified file. ;  ; void SetDSet (TDSet *dset);  ; void SetFeedback (TString &opt, TString &optfb, Int_t action);  Extract from opt in optfb information about wanted feedback settings. ;  ; void SetPlayer (TVirtualProofPlayer *player);  Set a new PROOF player. ;  ; void SetupWorkersEnv (TList *wrks, Bool_t increasingpool=kFALSE);  Set up packages, loaded macros, include and lib paths ... ;  ; virtual Bool_t StartSlaves (Bool_t attach=kFALSE);  Start up PROOF slaves. ;  ; void UpdateDialog ();  Final update of the progress dialog. ;  ; virtual void ValidateDSet (TDSet *dset);  Validate a TDSet. ;  ; Int_t VerifyDataSetParallel (const char *uri, const char *optStr);  Internal function for parallel dataset verification used TProof::VerifyDataSet and TProofLite::VerifyDataSet. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual void * GetSender ();  ; virtual const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:39474,feedback,feedback,39474,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['feedback'],['feedback']
Usability,"ar *player=0, TSocket *s=0);  Construct a TProofPlayer object. ;  ; virtual Int_t PollForNewWorkers ();  Asks the PROOF Serv for new workers in Dynamic Startup mode and activates them. ;  ; void PrepareInputDataFile (TString &dataFile);  Prepare the file with the input data objects to be sent the master; the objects are taken from the dedicated list and / or the specified file. ;  ; Int_t RemoveWorkers (TList *wrks);  Used for shuting down the workres after a query is finished. ;  ; virtual void SaveWorkerInfo ();  Save information about the worker set in the file .workers in the working dir. ;  ; Int_t SendFile (const char *file, Int_t opt=(kBinary|kForward|kCp|kCpBin), const char *rfile=0, TSlave *sl=0);  Send a file to master or slave servers. ;  ; virtual void SendInputDataFile ();  Send the input data objects to the master; the objects are taken from the dedicated list and / or the specified file. ;  ; void SetDSet (TDSet *dset);  ; void SetFeedback (TString &opt, TString &optfb, Int_t action);  Extract from opt in optfb information about wanted feedback settings. ;  ; void SetPlayer (TVirtualProofPlayer *player);  Set a new PROOF player. ;  ; void SetupWorkersEnv (TList *wrks, Bool_t increasingpool=kFALSE);  Set up packages, loaded macros, include and lib paths ... ;  ; void UpdateDialog ();  Final update of the progress dialog. ;  ; virtual void ValidateDSet (TDSet *dset);  Validate a TDSet. ;  ; Int_t VerifyDataSetParallel (const char *uri, const char *optStr);  Internal function for parallel dataset verification used TProof::VerifyDataSet and TProofLite::VerifyDataSet. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual void * GetSender ();  ; virtual const char * GetSenderClassName () const;  . Private Attributes; TCondor * fCondor;  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofCondor.html:38072,feedback,feedback,38072,doc/master/classTProofCondor.html,https://root.cern,https://root.cern/doc/master/classTProofCondor.html,1,['feedback'],['feedback']
Usability,"ar *slot);  This method allows to make a connection from any object of the same class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  . Protected Member Functions; Bool_t HandleTimer (TTimer *timer) override;  Send feedback objects to client. ;  ; Int_t MakeSelector (const char *selfile);  Create the selector object and save the relevant files and binary information in the cache so that the worker can pick it up. ;  ; void SetupFeedback () override;  Setup reporting of feedback objects. ;  ;  Protected Member Functions inherited from TProofPlayerRemote; TProof * GetProof () const;  ; Bool_t HandleTimer (TTimer *timer) override;  Send feedback objects to client. ;  ; Int_t InitPacketizer (TDSet *dset, Long64_t nentries, Long64_t first, const char *defpackunit, const char *defpackdata);  Init the packetizer Return 0 on success (fPacketizer is correctly initialized), -1 on failure. ;  ; TList * MergeFeedback ();  Merge feedback lists. ;  ; Bool_t MergeOutputFiles ();  Merge output in files. ;  ; void NotifyMemory (TObject *obj);  Printout the memory record after merging object 'obj' This record is used by the memory monitor. ;  ; virtual Bool_t SendSelector (const char *selector_file);  Send the selector file(s) to master or worker nodes. ;  ; void SetLastMergingMsg (TObject *obj);  Set the message to be notified in case of exception. ;  ; void SetSelectorDataMembersFromOutputList ();  Set the selector's data members: find the mappin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayerLite.html:20941,feedback,feedback,20941,doc/master/classTProofPlayerLite.html,https://root.cern,https://root.cern/doc/master/classTProofPlayerLite.html,1,['feedback'],['feedback']
Usability,ar * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TAttText; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; Float_t fBlue;  Per cent of blue. ;  ; Bool_t fBoundingBox;  True for Encapsulated PostScript. ;  ; Bool_t fClear;  True when page must be cleared. ;  ; Int_t fClip;  Clipping mode. ;  ; Bool_t fClipStatus;  Clipping Indicator. ;  ; Int_t fCurrentColor;  current Postscript color index ;  ; Float_t fDXC;  ; Float_t fDYC;  ; TString fFileName;  PS file name. ;  ; Bool_t fFontEmbed;  True is FontEmbed has been called. ;  ; Float_t fFX;  ; Float_t fFY;  ; Float_t fGreen;  Per cent of green. ;  ; Int_t fIXzone;  Current zone along X. ;  ; Int_t fIYzone;  Current zone along Y. ;  ; Int_t fLastCellBlue;  Last blue value. ;  ; Int_t fLastCellGreen;  Last green value. ;  ; Int_t fLastCellRed;  Last red value. ;  ; Float_t fLineScale;  Line width scale factor. ;  ; Float_t fMarkerSizeCur;  current transformed value of marker size ;  ; Int_t fMaxLines;  Maximum number of lines in a PS array. ;  ; Float_t fMaxsize;  Largest dimension of X and Y. ;  ; Int_t fMode;  PostScript mode. ;  ; Int_t fNbCellLine;  Number of boxes in the current line. ;  ; Int_t fNbCellW;  Number of boxes per line. ;  ; Int_t fNbinCT;  Number,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPostScript.html:32360,clear,cleared,32360,doc/master/classTPostScript.html,https://root.cern,https://root.cern/doc/master/classTPostScript.html,1,['clear'],['cleared']
Usability,"ar* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. Double_tfConfidenceLevelconfidence level; Double_tfLowerLimitlower interval limit; RooArgSetfParametersset containing the parameter of interest; Double_tfUpperLimitupper interval limit. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SimpleInterval(const char* name = 0); Default constructor. SimpleInterval(const char* name, const RooRealVar& var, Double_t lower, Double_t upper, Double_t cl); Alternate constructor. ~SimpleInterval(); Destructor. Bool_t IsInInterval(const RooArgSet& ) const. RooArgSet* GetParameters() const; return cloned list of parameters. Bool_t CheckParameters(const RooArgSet& ) const. explicit SimpleInterval(const char* name = 0); default constructors. void SetConfidenceLevel(Double_t ); set the confidence level for the interval. Simple interval is defined at construction time so this function; has no effect. {}. Double_t ConfidenceLevel() const; return the confidence interval. {return fConfidenceLevel;}. Double_t LowerLimit(); return the interval lower limit. {return fLowerLimit;}. Double_t UpperLimit(); return the interval upper limit. {return fUpperLimit;}. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: SimpleInterval.h 39391 2011-05-26 09:51:59Z moneta $ » Last generated: 2011-11-03 20:09; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooStats__SimpleInterval.html:6879,Simpl,SimpleInterval,6879,root/html532/RooStats__SimpleInterval.html,https://root.cern,https://root.cern/root/html532/RooStats__SimpleInterval.html,3,['Simpl'],"['Simple', 'SimpleInterval']"
Usability,"ar* method) const; virtual Bool_tTGedFrame::AcceptModel(TObject*); virtual voidTGFrame::Activate(Bool_t); virtual voidTGedFrame::ActivateBaseClassEditors(TClass* cl); virtual voidTGedFrame::AddExtraTab(TGedFrame::TGedSubFrame* sf); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual TGVerticalFrame*TGedFrame::CreateEditorTabSubFrame(const char* name); virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::Des",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TArrowEditor.html:1664,Clear,Clear,1664,root/html532/TArrowEditor.html,https://root.cern,https://root.cern/root/html532/TArrowEditor.html,278,['Clear'],['Clear']
Usability,"ar* method) const; virtual Bool_tTGedFrame::AcceptModel(TObject*); virtual voidTGFrame::Activate(Bool_t); virtual voidTGedFrame::ActivateBaseClassEditors(TClass* cl); virtual voidTGedFrame::AddExtraTab(TGedFrame::TGedSubFrame* sf); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual TGVerticalFrame*TGedFrame::CreateEditorTabSubFrame(const char* name); voidCreateRefsTab(); virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TEveTrackListEditor.html:1631,Clear,Clear,1631,root/html532/TEveTrackListEditor.html,https://root.cern,https://root.cern/root/html532/TEveTrackListEditor.html,4,['Clear'],['Clear']
Usability,"ar* method) const; virtual Bool_tTGedFrame::AcceptModel(TObject*); virtual voidTGFrame::Activate(Bool_t); virtual voidTGedFrame::ActivateBaseClassEditors(TClass* cl); virtual voidTGedFrame::AddExtraTab(TGedFrame::TGedSubFrame* sf); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; voidCreateColorRadioButtons(); voidCreateColorSliders(); virtual TGVerticalFrame*TGedFrame::CreateEditorTabSubFrame(const char* name); virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGLPShapeObjEditor.html:1622,Clear,Clear,1622,root/html532/TGLPShapeObjEditor.html,https://root.cern,https://root.cern/root/html532/TGLPShapeObjEditor.html,4,['Clear'],['Clear']
Usability,"ar* method) const; virtual Bool_tTGedFrame::AcceptModel(TObject*); virtual voidTGFrame::Activate(Bool_t); virtual voidTGedFrame::ActivateBaseClassEditors(TClass* cl); virtual voidTGedFrame::AddExtraTab(TGedFrame::TGedSubFrame* sf); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); voidConnectSelected(TCanvas* c); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual TGVerticalFrame*TGedFrame::CreateEditorTabSubFrame(const char* name); virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoManagerEditor.html:3402,Clear,Clear,3402,root/html532/TGeoManagerEditor.html,https://root.cern,https://root.cern/root/html532/TGeoManagerEditor.html,4,['Clear'],['Clear']
Usability,"ar* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidBuild(); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); voidChangeRightLogo(const char* name); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); voidCleanupSession(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCloseWindow(); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); voidDeleteQuery(); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(); voidDisableTimer()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TSessionViewer.html:1701,Clear,Clear,1701,root/html532/TSessionViewer.html,https://root.cern,https://root.cern/root/html532/TSessionViewer.html,4,['Clear'],['Clear']
Usability,"ar* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. TOrdCollection*fToggleslist of TToggle objects. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TToggleGroup(); Constructor. TToggleGroup(const TToggleGroup& ); Copy constructor. TToggleGroup & operator=(const TToggleGroup& ); Assignment operator. ~TToggleGroup(); Deletes togglegroup but does not disposes toggled objects!. Int_t Add(TToggle* t, Bool_t select = 1); Add a new toggle. Int_t InsertAt(TToggle* t, Int_t pos, Bool_t select = 1); Add a new toggle at a specific position. void Select(Int_t idx); Select a toggle. void Select(TToggle* t); Selector a toggle. void DeleteAll(); Disposes of all objects and clears array. Int_t GetTogglesCount(); {return fToggles->GetSize();}. TToggle * At(Int_t idx); {return (TToggle*)fToggles->At(idx);}. void Remove(TToggle* t); {fToggles->Remove(t);}. void Remove(Int_t pos); {fToggles->RemoveAt(pos);}. TToggle * First(); {return (TToggle*)fToggles->First();}. TToggle * Last(); {return (TToggle*)fToggles->Last();}. Int_t IndexOf(TToggle* t); {return fToggles->IndexOf(t);}. » Author: Piotr Golonka 31/07/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id: TToggleGroup.h 26606 2008-12-02 20:36:09Z pcanal $ » Last generated: 2011-11-03 20:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TToggleGroup.html:6633,clear,clears,6633,root/html532/TToggleGroup.html,https://root.cern,https://root.cern/root/html532/TToggleGroup.html,2,['clear'],['clears']
Usability,"ar* stateNameList); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual voidTObject::AppendPad(Option_t* option = """"); voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidclearRange(const char* name, Bool_t silent); voidRooAbsArg::clearShapeDirty() const; voidclearTypes(); voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsArg*RooAbsCategory::createFundamental(const char* newname = 0) const; Roo1DTable*RooAbsCategory::createTable(const char* label) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; Bool_tdefineType(const char* label); Bool_tdefineType(const char* label, Int_t index); virtual void",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooCategory.html:2126,clear,clearValueAndShapeDirty,2126,root/html532/RooCategory.html,https://root.cern,https://root.cern/root/html532/RooCategory.html,1,['clear'],['clearValueAndShapeDirty']
Usability,"ar_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTProofPlayerRemote::Feedback(TList* objs)SIGNAL ; voidTProofPlayer::FeedBackCanvas(const char* name, Bool_t create); virtual Long64_tFinalize(TQueryResult* qr); virtual Long64_tFinalize(Bool_t force = kFALSE, Bool_t sync = kFALSE); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Long64_tTProofPlayer::GetCacheSize(); virtual TQueryResult*TProofPlayer::GetCurrentQuery() const; virtual Int_tTProofPlayer::GetDrawArgs(const char* var, const char* sel, Option_t* opt, TString& selector, TString& objname); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Long64_tTProofPlayer::GetEventsProcessed() const; virtual TVirtualProofPlayer::EExitStatusTProofPlayer::GetExitStatus() const; virtual const char*TObject::GetIconName() const; virtual TList*TProofPlayer::GetInputList() const; virtual Int_tTProofPlayer::GetLearnEntries(); TList*TQObject::GetListOfClassSignals() const; TList*TQObject::GetListO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofPlayerLite.html:4610,Feedback,Feedback,4610,root/html602/TProofPlayerLite.html,https://root.cern,https://root.cern/root/html602/TProofPlayerLite.html,2,['Feedback'],['Feedback']
Usability,"ar_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTProofPlayerRemote::Feedback(TList* objs)SIGNAL ; voidTProofPlayer::FeedBackCanvas(const char* name, Bool_t create); virtual Long64_tTProofPlayerRemote::Finalize(TQueryResult* qr); virtual Long64_tTProofPlayerRemote::Finalize(Bool_t force = kFALSE, Bool_t sync = kFALSE); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Long64_tTProofPlayer::GetCacheSize(); virtual TQueryResult*TProofPlayer::GetCurrentQuery() const; virtual Int_tTProofPlayer::GetDrawArgs(const char* var, const char* sel, Option_t* opt, TString& selector, TString& objname); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Long64_tTProofPlayer::GetEventsProcessed() const; virtual TVirtualProofPlayer::EExitStatusTProofPlayer::GetExitStatus() const; virtual const char*TObject::GetIconName() const; virtual TList*TProofPlayer::GetInputList() const; virtual Int_tTProofPlayer::GetLearnEntries(); TList*TQObject::GetListOfClassS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofPlayerSuperMaster.html:5112,Feedback,Feedback,5112,root/html602/TProofPlayerSuperMaster.html,https://root.cern,https://root.cern/root/html602/TProofPlayerSuperMaster.html,2,['Feedback'],['Feedback']
Usability,"arallel; world. The parallel world has to be closed before calling any navigation; method. Function Members (Methods); public:. virtual~TGeoParallelWorld(); voidTObject::AbstractMethod(const char* method) const; voidAddNode(TGeoPhysicalNode* pnode); voidAddOverlap(TGeoVolume* vol); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidCheckOverlaps(Double_t ovlp = 0.001); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; Bool_tCloseGeometry(); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); TGeoPhysicalNode*FindNextBoundary(Double_t[3] point, Double_t[3] dir, Double_t& step, Double_t stepmax = 1.0E+30); TGeoPhysicalNode*FindNode(Double_t[3] point); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TGeoManager*GetGeometry() const; virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoParallelWorld.html:1259,Clear,Clear,1259,root/html602/TGeoParallelWorld.html,https://root.cern,https://root.cern/root/html602/TGeoParallelWorld.html,1,['Clear'],['Clear']
Usability,"arallelWorld(const char* name, TGeoManager* mgr); virtual~TGeoParallelWorld(); voidTObject::AbstractMethod(const char* method) const; voidAddNode(const char* path); voidAddOverlap(TGeoVolume* vol, Bool_t activate = kTRUE); voidAddOverlap(const char* volname, Bool_t activate = kTRUE); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidCheckOverlaps(Double_t ovlp = 0.001); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; Bool_tCloseGeometry(); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); TGeoPhysicalNode*FindNextBoundary(Double_t* point, Double_t* dir, Double_t& step, Double_t stepmax = 1.E30); TGeoPhysicalNode*FindNode(Double_t* point); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TGeoManager*GetGeometry() const; virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoParallelWorld.html:1415,Clear,Clear,1415,root/html534/TGeoParallelWorld.html,https://root.cern,https://root.cern/root/html534/TGeoParallelWorld.html,1,['Clear'],['Clear']
Usability,"arameters). void SetEta(Double_t eta); Sets Eta - used in stochastic minimisation; (look at the constructor for the complete description; of learning methods and parameters). void SetEpsilon(Double_t eps); Sets Epsilon - used in stochastic minimisation; (look at the constructor for the complete description; of learning methods and parameters). void SetDelta(Double_t delta); Sets Delta - used in stochastic minimisation; (look at the constructor for the complete description; of learning methods and parameters). void SetEtaDecay(Double_t ed); Sets EtaDecay - Eta *= EtaDecay at each epoch; (look at the constructor for the complete description; of learning methods and parameters). void SetTau(Double_t tau); Sets Tau - used in line search; (look at the constructor for the complete description; of learning methods and parameters). void SetReset(Int_t reset); Sets number of epochs between two resets of the; search direction to the steepest descent.; (look at the constructor for the complete description; of learning methods and parameters). void GetEntry(Int_t ) const; Load an entry into the network. void Train(Int_t nEpoch, Option_t* option = ""text"", Double_t minE = 0); Train the network.; nEpoch is the number of iterations.; option can contain:; - ""text"" (simple text output); - ""graph"" (evoluting graphical training curves); - ""update=X"" (step for the text/graph output update); - ""+"" will skip the randomisation and start from the previous values.; - ""current"" (draw in the current canvas); - ""minErrorTrain"" (stop when NN error on the training sample gets below minE; - ""minErrorTest"" (stop when NN error on the test sample gets below minE; All combinations are available. Double_t Result(Int_t event, Int_t index = 0) const; Computes the output for a given event.; Look at the output neuron designed by index. Double_t GetError(Int_t event) const; Error on the output for a given event. Double_t GetError(TMultiLayerPerceptron::EDataSet set) const; Error on the whole dataset. Double_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMultiLayerPerceptron.html:24645,learn,learning,24645,root/html528/TMultiLayerPerceptron.html,https://root.cern,https://root.cern/root/html528/TMultiLayerPerceptron.html,10,['learn'],['learning']
Usability,"arameters. [in]gcspecifies the GC to be changed ; [in]gvalspecifies the mask and the values to be set. (see also the GCValues_t structure) ; Reimplemented from TVirtualX. ◆ ChangeProperties(). void TGWin32VirtualXProxy::ChangeProperties ; (; Window_t ; id, . Atom_t ; property, . Atom_t ; type, . Int_t ; format, . UChar_t * ; data, . Int_t ; len . ). overridevirtual . Alters the property for the specified window and causes the X server to generate a PropertyNotify event on that window. ; Reimplemented from TVirtualX. ◆ ChangeProperty(). void TGWin32VirtualXProxy::ChangeProperty ; (; Window_t ; id, . Atom_t ; property, . Atom_t ; type, . UChar_t * ; data, . Int_t ; len . ). overridevirtual . Alters the property for the specified window and causes the X server to generate a PropertyNotify event on that window. ; Parameters. [in]idthe window whose property you want to change ; [in]propertyspecifies the property name ; [in]typethe type of the property; the X server does not interpret the type but simply passes it back to an application that might ask about the window properties ; [in]datathe property data ; [in]lenthe length of the specified data format . Reimplemented from TVirtualX. ◆ ChangeWindowAttributes(). void TGWin32VirtualXProxy::ChangeWindowAttributes ; (; Window_t ; id, . SetWindowAttributes_t * ; attr . ). overridevirtual . Changes the attributes of the specified window ""id"" according the values provided in ""attr"". ; The mask data member of ""attr"" specifies which window attributes are defined in the attributes argument. This mask is the bitwise inclusive OR of the valid attribute mask bits; if it is zero, the attributes are ignored. ; Reimplemented from TVirtualX. ◆ CheckEvent(). Bool_t TGWin32VirtualXProxy::CheckEvent ; (; Window_t ; id, . EGEventType ; type, . Event_t & ; ev . ). overridevirtual . Check if there is for window ""id"" an event of type ""type"". ; Reimplemented from TVirtualX.; Definition at line 312 of file TGWin32VirtualXProxy.cxx. ◆ ClearArea()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGWin32VirtualXProxy.html:55085,simpl,simply,55085,doc/master/classTGWin32VirtualXProxy.html,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html,1,['simpl'],['simply']
Usability,"archHighRes ; Definition at line 115 of file TSpectrum2.cxx. ◆ SetResolution(). void TSpectrum2::SetResolution ; (; Double_t ; resolution = 1). NOT USED resolution: determines resolution of the neighboring peaks default value is 1 correspond to 3 sigma distance between peaks. ; Higher values allow higher resolution (smaller distance between peaks. May be set later through SetResolution. ; Definition at line 289 of file TSpectrum2.cxx. ◆ SmoothMarkov(). const char * TSpectrum2::SmoothMarkov ; (; Double_t ** ; source, . Int_t ; ssizex, . Int_t ; ssizey, . Int_t ; averWindow . ). This function calculates smoothed spectrum from source spectrum based on Markov chain method. ; The result is placed in the array pointed by source pointer.; Function parameters:; source-pointer to the array of source spectrum; ssizex-x length of source; ssizey-y length of source; averWindow-width of averaging smoothing window. Smoothing; Goal: Suppression of statistical fluctuations the algorithm is based on discrete Markov chain, which has very simple invariant distribution ; \[; U_2 = \frac{p_{1.2}}{p_{2,1}}U_1, U_3 = \frac{p_{2,3}}{p_{3,2}}U_2 U_1, ... , U_n = \frac{p_{n-1,n}}{p_{n,n-1}}U_{n-1} ... U_2 U_1; \]. \(U_1\) being defined from the normalization condition \( \sum_{i=1}^{n} U_i = 1\) n is the length of the smoothed spectrum and ; \[; p_{i,i\pm1} = A_i \sum_{k=1}^{m} exp\left[\frac{y(i\pm k)-y(i)}{y(i\pm k)+y(i)}\right]; \]. is the probability of the change of the peak position from channel i to the channel i+1. \(A_i\) is the normalization constant so that \( p_{i,i-1}+p_{i,i+1}=1\) and m is a width of smoothing window. We have extended this algorithm to two dimensions.; Reference:; [1] Z.K. Silagadze, A new algorithm for automatic photopeak searches. NIM A 376 (1996), 451. Example 4 - Smooth.C; ; #include <TSpectrum2.h>; ; void Smooth() {; Int_t i, j;; const Int_t nbinsx = 256;; const Int_t nbinsy = 256;; Double_t xmin = 0;; Double_t xmax = (Double_t)nbinsx;; Double_t ymin = 0;; D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2.html:46737,simpl,simple,46737,doc/master/classTSpectrum2.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2.html,1,['simpl'],['simple']
Usability,"architecture class ;  ►CTCpuBufferTCpuBuffer ;  CTDestructor;  CTCpuMatrixThe TCpuMatrix class ;  CTCudaThe TCuda architecture class ;  ►CTCudaDeviceBufferTCudaDeviceBuffer ;  CTDestructor;  CTCudaDeviceReferenceTCudaDeviceReference ;  ►CTCudaHostBufferTCudaHostBuffer ;  CTDestructor;  CTCudaMatrixTCudaMatrix Class ;  CTDataLoaderTDataLoader ;  CTDataLoader< AData, TReference< AReal > >;  CTDeviceTDevice ;  CTGradientDescent;  CTLayerGeneric layer class ;  CTNetGeneric neural network class ;  CTReferenceThe reference architecture class ;  CTSharedLayerLayer class width shared weight and bias layers ;  ►NExperimental;  CClassification;  CClassificationResult;  ►NkNN;  CEvent;  CModulekNN;  CNodeThis file contains binary tree and global function template that searches tree for k-nearest neigbors ;  CAbsoluteDeviationLossFunctionAbsolute Deviation Loss Function ;  CAbsoluteDeviationLossFunctionBDTAbsolute Deviation BDT Loss Function ;  CAbsValue;  CBDTEventWrapper;  CBinarySearchTreeA simple Binary search tree including a volume search method ;  CBinarySearchTreeNodeNode for the BinarySearch or Decision Trees ;  CBinaryTreeBase class for BinarySearch and Decision Trees ;  CCCPrunerA helper class to prune a decision tree using the Cost Complexity method (see Classification and Regression Trees by Leo Breiman et al) ;  ►CCCTreeWrapper;  CCCTreeNode;  CClassificationClass to perform two class classification ;  CClassificationResultClass to save the results of the classifier ;  CClassifierFactoryThis is the MVA factory ;  CClassInfoClass that contains all the information of a class ;  Ccompose_binary_t;  Ccompose_unary_t;  ►CConfigSingleton class for global configuration settings used by TMVA ;  CIONames;  CVariablePlotting;  CConfigurable;  CConvergenceTestCheck for convergence ;  CCostComplexityPruneToolA class to prune a decision tree using the Cost Complexity method ;  CCrossEntropyImplementation of the CrossEntropy as separation criterion ;  CCrossValidationClass to pe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/annotated.html:76223,simpl,simple,76223,doc/v612/annotated.html,https://root.cern,https://root.cern/doc/v612/annotated.html,1,['simpl'],['simple']
Usability,"archy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » POSTSCRIPT; » TTeXDump. class TTeXDump: public TVirtualPS. TTeXDump: Graphics interface to TeX; This class allow to generate PGF/TikZ vector graphics output; which can be included in TeX and LaTeX documents. PGF is a TeX macro package for generating graphics. It is platform; and format-independent and works together with the most important TeX; backend drivers, including pdftex and dvips. It comes with a; user-friendly syntax layer called TikZ. To generate a such file it is enough to do:. gStyle->SetPaperSize(10.,10.);; hpx->Draw();; gPad->Print(""hpx.tex"");. Then, the generated file (hpx.tex) can be included in a; LaTeX document (simple.tex) in the following way:. \documentclass{article}; \usepackage{tikz}; \usetikzlibrary{patterns}; \usetikzlibrary{plotmarks}; \title{A simple LaTeX example}; \date{July 2013}; \begin{document}; \maketitle; The following image as been generated using the TTeXDump class:; \par; \input{hpx.tex}; \end{document}. Note the three directives needed at the top of the LaTeX file:. \usepackage{tikz}; \usetikzlibrary{patterns}; \usetikzlibrary{plotmarks}. Then including the picture in the document is done with the; \input<\tt> directive.; The command pdflatex simple.tex will generate the; corresponding pdf file simple.pdf.; . Function Members (Methods); public:. virtual~TTeXDump(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual voidCellArrayBegin(Int_t W, Int_t H, Double_t x1, Double_t x2, Double_t y1, Double_t y2); virtual voidCellArrayEnd(); virtual voidCellArrayFill(Int_t r, Int_t g, Int_t b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Cl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTeXDump.html:1042,simpl,simple,1042,root/html602/TTeXDump.html,https://root.cern,https://root.cern/root/html602/TTeXDump.html,2,['simpl'],['simple']
Usability,"are stored.; Events for windows, which were not created during recording,; cannot be replayed. Replaying. 1] To start replaying. TRecorder r(const char *filename); TRecorder r(const char *filename, ""READ""). or:. TRecorder *recorder = new TRecorder;; recorder->Replay(const char *filename,; Bool_t showMouseCursor = kTRUE);. -filename A name of file with recorded events; previously created with TRecorder::Start. -showMouseCursor If kTRUE, mouse cursor is replayed as well.; In that case it is not recommended to use mouse; during replaying. In general, it is not recommended to use mouse to change positions; and states of ROOT windows during replaying. IMPORTANT:; The state of ROOT environment before replaying of some events; must be exactly the same as before recording them.; Therefore it is strongly recommended to start both recording; and replaying with empty ROOT environment. 2] To pause replaying. recorder->Pause(). Replaying is stopped until recorder->Resume() is called. 3] To resume paused replaying. recorder->Resume(). Resumes previously stopped replaying. 4] To stop replaying before its end. recorder->Stop(). Function Members (Methods); public:. TRecExtraEvent(); TRecExtraEvent(const TRecExtraEvent&); ~TRecExtraEvent(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMEN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRecExtraEvent.html:2498,resume,resume,2498,root/html528/TRecExtraEvent.html,https://root.cern,https://root.cern/root/html528/TRecExtraEvent.html,12,"['pause', 'resume']","['paused', 'resume']"
Usability,"are stored.; Events for windows, which were not created during recording,; cannot be replayed. Replaying. 1] To start replaying. TRecorder r(const char *filename); TRecorder r(const char *filename, ""READ""). or:. TRecorder *recorder = new TRecorder;; recorder->Replay(const char *filename,; Bool_t showMouseCursor = kTRUE);. -filename A name of file with recorded events; previously created with TRecorder::Start. -showMouseCursor If kTRUE, mouse cursor is replayed as well.; In that case it is not recommended to use mouse; during replaying. In general, it is not recommended to use mouse to change positions; and states of ROOT windows during replaying. IMPORTANT:; The state of ROOT environment before replaying of some events; must be exactly the same as before recording them.; Therefore it is strongly recommended to start both recording; and replaying with empty ROOT environment. 2] To pause replaying. recorder->Pause(). Replaying is stopped until recorder->Resume() is called. 3] To resume paused replaying. recorder->Resume(). Resumes previously stopped replaying. 4] To stop replaying before its end. recorder->Stop(). Function Members (Methods); public:. TRecGuiEvent(); TRecGuiEvent(const TRecGuiEvent&); ~TRecGuiEvent(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; static Event_t*CreateEvent(TRecGuiEvent* ge); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRecGuiEvent.html:2518,resume,resume,2518,root/html528/TRecGuiEvent.html,https://root.cern,https://root.cern/root/html528/TRecGuiEvent.html,12,"['pause', 'resume']","['paused', 'resume']"
Usability,"are stored.; Events for windows, which were not created during recording,; cannot be replayed. Replaying. 1] To start replaying. TRecorder r(const char *filename); TRecorder r(const char *filename, ""READ""). or:. TRecorder *recorder = new TRecorder;; recorder->Replay(const char *filename,; Bool_t showMouseCursor = kTRUE);. -filename A name of file with recorded events; previously created with TRecorder::Start. -showMouseCursor If kTRUE, mouse cursor is replayed as well.; In that case it is not recommended to use mouse; during replaying. In general, it is not recommended to use mouse to change positions; and states of ROOT windows during replaying. IMPORTANT:; The state of ROOT environment before replaying of some events; must be exactly the same as before recording them.; Therefore it is strongly recommended to start both recording; and replaying with empty ROOT environment. 2] To pause replaying. recorder->Pause(). Replaying is stopped until recorder->Resume() is called. 3] To resume paused replaying. recorder->Resume(). Resumes previously stopped replaying. 4] To stop replaying before its end. recorder->Stop(). Function Members (Methods); public:. TRecWinPair(const TRecWinPair&); TRecWinPair(Window_t key, Window_t value); ~TRecWinPair(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRecWinPair.html:2513,resume,resume,2513,root/html528/TRecWinPair.html,https://root.cern,https://root.cern/root/html528/TRecWinPair.html,12,"['pause', 'resume']","['paused', 'resume']"
Usability,"are stored.; Events for windows, which were not created during recording,; cannot be replayed. Replaying. 1] To start replaying. TRecorder r(const char *filename); TRecorder r(const char *filename, ""READ""). or:. TRecorder *recorder = new TRecorder;; recorder->Replay(const char *filename,; Bool_t showMouseCursor = kTRUE);. -filename A name of file with recorded events; previously created with TRecorder::Start. -showMouseCursor If kTRUE, mouse cursor is replayed as well.; In that case it is not recommended to use mouse; during replaying. In general, it is not recommended to use mouse to change positions; and states of ROOT windows during replaying. IMPORTANT:; The state of ROOT environment before replaying of some events; must be exactly the same as before recording them.; Therefore it is strongly recommended to start both recording; and replaying with empty ROOT environment. 2] To pause replaying. recorder->Pause(). Replaying is stopped until recorder->Resume() is called. 3] To resume paused replaying. recorder->Resume(). Resumes previously stopped replaying. 4] To stop replaying before its end. recorder->Stop(). Function Members (Methods); public:. TRecorder(); TRecorder(const TRecorder&); TRecorder(const char* filename, Option_t* option = ""READ""); virtual~TRecorder(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser*); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRecorder.html:2507,resume,resume,2507,root/html528/TRecorder.html,https://root.cern,https://root.cern/root/html528/TRecorder.html,8,"['pause', 'resume']","['paused', 'resume']"
Usability,"are stored.; Events for windows, which were not created during recording,; cannot be replayed. Replaying. 1] To start replaying. TRecorder r(const char *filename); TRecorder r(const char *filename, ""READ""). or:. TRecorder *recorder = new TRecorder;; recorder->Replay(const char *filename,; Bool_t showMouseCursor = kTRUE);. -filename A name of file with recorded events; previously created with TRecorder::Start. -showMouseCursor If kTRUE, mouse cursor is replayed as well.; In that case it is not recommended to use mouse; during replaying. In general, it is not recommended to use mouse to change positions; and states of ROOT windows during replaying. IMPORTANT:; The state of ROOT environment before replaying of some events; must be exactly the same as before recording them.; Therefore it is strongly recommended to start both recording; and replaying with empty ROOT environment. 2] To pause replaying. recorder->Pause(). Replaying is stopped until recorder->Resume() is called. 3] To resume paused replaying. recorder->Resume(). Resumes previously stopped replaying. 4] To stop replaying before its end. recorder->Stop(). Function Members (Methods); public:. TRecorder(); TRecorder(const char* filename, Option_t* option = ""READ""); virtual~TRecorder(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser*); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TRecorder.html:2507,resume,resume,2507,root/html534/TRecorder.html,https://root.cern,https://root.cern/root/html534/TRecorder.html,4,"['pause', 'resume']","['paused', 'resume']"
Usability,"are stored.; Events for windows, which were not created during recording,; cannot be replayed. Replaying. 1] To start replaying. TRecorder r(const char *filename); TRecorder r(const char *filename, ""READ""). or:. TRecorder *recorder = new TRecorder;; recorder->Replay(const char *filename,; Bool_t showMouseCursor = kTRUE);. -filename A name of file with recorded events; previously created with TRecorder::Start. -showMouseCursor If kTRUE, mouse cursor is replayed as well.; In that case it is not recommended to use mouse; during replaying. In general, it is not recommended to use mouse to change positions; and states of ROOT windows during replaying. IMPORTANT:; The state of ROOT environment before replaying of some events; must be exactly the same as before recording them.; Therefore it is strongly recommended to start both recording; and replaying with empty ROOT environment. 2] To pause replaying. recorder->Pause(). Replaying is stopped until recorder->Resume() is called. 3] To resume paused replaying. recorder->Resume(). Resumes previously stopped replaying. 4] To stop replaying before its end. recorder->Stop(). Function Members (Methods); public:. virtual~TRecExtraEvent(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TRecExtraEvent.html:2548,resume,resume,2548,root/html602/TRecExtraEvent.html,https://root.cern,https://root.cern/root/html602/TRecExtraEvent.html,8,"['pause', 'resume']","['paused', 'resume']"
Usability,"are stored.; Events for windows, which were not created during recording,; cannot be replayed. Replaying. 1] To start replaying. TRecorder r(const char *filename); TRecorder r(const char *filename, ""READ""). or:. TRecorder *recorder = new TRecorder;; recorder->Replay(const char *filename,; Bool_t showMouseCursor = kTRUE);. -filename A name of file with recorded events; previously created with TRecorder::Start. -showMouseCursor If kTRUE, mouse cursor is replayed as well.; In that case it is not recommended to use mouse; during replaying. In general, it is not recommended to use mouse to change positions; and states of ROOT windows during replaying. IMPORTANT:; The state of ROOT environment before replaying of some events; must be exactly the same as before recording them.; Therefore it is strongly recommended to start both recording; and replaying with empty ROOT environment. 2] To pause replaying. recorder->Pause(). Replaying is stopped until recorder->Resume() is called. 3] To resume paused replaying. recorder->Resume(). Resumes previously stopped replaying. 4] To stop replaying before its end. recorder->Stop(). Function Members (Methods); public:. virtual~TRecGuiEvent(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; static Event_t*CreateEvent(TRecGuiEvent* ge); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TRecGuiEvent.html:2542,resume,resume,2542,root/html602/TRecGuiEvent.html,https://root.cern,https://root.cern/root/html602/TRecGuiEvent.html,8,"['pause', 'resume']","['paused', 'resume']"
Usability,"are stored.; Events for windows, which were not created during recording,; cannot be replayed. Replaying. 1] To start replaying. TRecorder r(const char *filename); TRecorder r(const char *filename, ""READ""). or:. TRecorder *recorder = new TRecorder;; recorder->Replay(const char *filename,; Bool_t showMouseCursor = kTRUE);. -filename A name of file with recorded events; previously created with TRecorder::Start. -showMouseCursor If kTRUE, mouse cursor is replayed as well.; In that case it is not recommended to use mouse; during replaying. In general, it is not recommended to use mouse to change positions; and states of ROOT windows during replaying. IMPORTANT:; The state of ROOT environment before replaying of some events; must be exactly the same as before recording them.; Therefore it is strongly recommended to start both recording; and replaying with empty ROOT environment. 2] To pause replaying. recorder->Pause(). Replaying is stopped until recorder->Resume() is called. 3] To resume paused replaying. recorder->Resume(). Resumes previously stopped replaying. 4] To stop replaying before its end. recorder->Stop(). Function Members (Methods); public:. virtual~TRecWinPair(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TRecWinPair.html:2537,resume,resume,2537,root/html602/TRecWinPair.html,https://root.cern,https://root.cern/root/html602/TRecWinPair.html,8,"['pause', 'resume']","['paused', 'resume']"
Usability,"are stored.; Events for windows, which were not created during recording,; cannot be replayed. Replaying. 1] To start replaying. TRecorder r(const char *filename); TRecorder r(const char *filename, ""READ""). or:. TRecorder *recorder = new TRecorder;; recorder->Replay(const char *filename,; Bool_t showMouseCursor = kTRUE);. -filename A name of file with recorded events; previously created with TRecorder::Start. -showMouseCursor If kTRUE, mouse cursor is replayed as well.; In that case it is not recommended to use mouse; during replaying. In general, it is not recommended to use mouse to change positions; and states of ROOT windows during replaying. IMPORTANT:; The state of ROOT environment before replaying of some events; must be exactly the same as before recording them.; Therefore it is strongly recommended to start both recording; and replaying with empty ROOT environment. 2] To pause replaying. recorder->Pause(). Replaying is stopped until recorder->Resume() is called. 3] To resume paused replaying. recorder->Resume(). Resumes previously stopped replaying. 4] To stop replaying before its end. recorder->Stop(). Function Members (Methods); public:. virtual~TRecorder(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser*); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TRecorder.html:2531,resume,resume,2531,root/html602/TRecorder.html,https://root.cern,https://root.cern/root/html602/TRecorder.html,8,"['pause', 'resume']","['paused', 'resume']"
Usability,"are stored.; Events for windows, which were not created during recording,; cannot be replayed. Replaying. 1] To start replaying. TRecorder r(const char *filename); TRecorder r(const char *filename, ""READ""). or:. TRecorder *recorder = new TRecorder;; recorder->Replay(const char *filename,; Bool_t showMouseCursor = kTRUE);. -filename A name of file with recorded events; previously created with TRecorder::Start. -showMouseCursor If kTRUE, mouse cursor is replayed as well.; In that case it is not recommended to use mouse; during replaying. In general, it is not recommended to use mouse to change positions; and states of ROOT windows during replaying. IMPORTANT:; The state of ROOT environment before replaying of some events; must be exactly the same as before recording them.; Therefore it is strongly recommended to start both recording; and replaying with empty ROOT environment. 2] To pause replaying. recorder->Pause(). Replaying is stopped until recorder->Resume() is called. 3] To resume paused replaying. recorder->Resume(). Resumes previously stopped replaying. 4] To stop replaying before its end. recorder->Stop(). Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TRecEvent(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TRecEvent.html:2531,resume,resume,2531,root/html602/TRecEvent.html,https://root.cern,https://root.cern/root/html602/TRecEvent.html,8,"['pause', 'resume']","['paused', 'resume']"
Usability,"are stored.; Events for windows, which were not created during recording,; cannot be replayed. Replaying. 1] To start replaying. TRecorder r(const char *filename); TRecorder r(const char *filename, ""READ""). or:. TRecorder *recorder = new TRecorder;; recorder->Replay(const char *filename,; Bool_t showMouseCursor = kTRUE);. -filename A name of file with recorded events; previously created with TRecorder::Start. -showMouseCursor If kTRUE, mouse cursor is replayed as well.; In that case it is not recommended to use mouse; during replaying. In general, it is not recommended to use mouse to change positions; and states of ROOT windows during replaying. IMPORTANT:; The state of ROOT environment before replaying of some events; must be exactly the same as before recording them.; Therefore it is strongly recommended to start both recording; and replaying with empty ROOT environment. 2] To pause replaying. recorder->Pause(). Replaying is stopped until recorder->Resume() is called. 3] To resume paused replaying. recorder->Resume(). Resumes previously stopped replaying. 4] To stop replaying before its end. recorder->Stop(). Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TRecorderState(); static TClass*Class(); virtual TRecorder::ERecorderStateGetState() const; virtual TClass*IsA() const; virtual voidListCmd(const char*); virtual voidListGui(const char*); TRecorderState&operator=(const TRecorderState&); virtual voidPause(TRecorder*); virtual voidPrevCanvases(const char*, Option_t*); virtual Bool_tReplay(TRecorder*, const char*, Bool_t, TRecorder::EReplayModes); virtual voidReplayStop(TRecorder*); virtual voidResume(TRecorder*); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStart(TRecorder*, const char*, Option_t*, Window_t*, Int_t); virtual voidStop(TRecorder*, Bool_t); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& C",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TRecorderState.html:2530,resume,resume,2530,root/html602/TRecorderState.html,https://root.cern,https://root.cern/root/html602/TRecorderState.html,8,"['pause', 'resume']","['paused', 'resume']"
Usability,"are stored.; Events for windows, which were not created during recording,; cannot be replayed. Replaying. 1] To start replaying. TRecorder r(const char *filename); TRecorder r(const char *filename, ""READ""). or:. TRecorder *recorder = new TRecorder;; recorder->Replay(const char *filename,; Bool_t showMouseCursor = kTRUE);. -filename A name of file with recorded events; previously created with TRecorder::Start. -showMouseCursor If kTRUE, mouse cursor is replayed as well.; In that case it is not recommended to use mouse; during replaying. In general, it is not recommended to use mouse to change positions; and states of ROOT windows during replaying. IMPORTANT:; The state of ROOT environment before replaying of some events; must be exactly the same as before recording them.; Therefore it is strongly recommended to start both recording; and replaying with empty ROOT environment. 2] To pause replaying. recorder->Pause(). Replaying is stopped until recorder->Resume() is called. 3] To resume paused replaying. recorder->Resume(). Resumes previously stopped replaying. 4] To stop replaying before its end. recorder->Stop(). Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TRecorderState(); static TClass*Class(); virtual TRecorder::ERecorderStateGetState() const; virtual TClass*IsA() const; virtual voidListCmd(const char*); virtual voidListGui(const char*); TRecorderState&operator=(const TRecorderState&); virtual voidPause(TRecorder*); virtual voidPrevCanvases(const char*, Option_t*); virtual Bool_tReplay(TRecorder*, const char*, Bool_t, TRecorder::EReplayModes); virtual voidReplayStop(TRecorder*); virtual voidResume(TRecorder*); virtual voidShowMembers(TMemberInspector& insp); virtual voidStart(TRecorder*, const char*, Option_t*, Window_t*, Int_t); virtual voidStop(TRecorder*, Bool_t); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRecorderState.html:2480,resume,resume,2480,root/html528/TRecorderState.html,https://root.cern,https://root.cern/root/html528/TRecorderState.html,8,"['pause', 'resume']","['paused', 'resume']"
Usability,"are stored.; Events for windows, which were not created during recording,; cannot be replayed. Replaying. 1] To start replaying. TRecorder r(const char *filename); TRecorder r(const char *filename, ""READ""). or:. TRecorder *recorder = new TRecorder;; recorder->Replay(const char *filename,; Bool_t showMouseCursor = kTRUE);. -filename A name of file with recorded events; previously created with TRecorder::Start. -showMouseCursor If kTRUE, mouse cursor is replayed as well.; In that case it is not recommended to use mouse; during replaying. In general, it is not recommended to use mouse to change positions; and states of ROOT windows during replaying. IMPORTANT:; The state of ROOT environment before replaying of some events; must be exactly the same as before recording them.; Therefore it is strongly recommended to start both recording; and replaying with empty ROOT environment. 2] To pause replaying. recorder->Pause(). Replaying is stopped until recorder->Resume() is called. 3] To resume paused replaying. recorder->Resume(). Resumes previously stopped replaying. 4] To stop replaying before its end. recorder->Stop(). Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TRecorderState(); static TClass*Class(); virtual TRecorder::ERecorderStateGetState() const; virtual TClass*IsA() const; virtual voidListCmd(const char*); virtual voidListGui(const char*); TRecorderState&operator=(const TRecorderState&); virtual voidPause(TRecorder*); virtual voidPrevCanvases(const char*, Option_t*); virtual Bool_tReplay(TRecorder*, const char*, Bool_t, TRecorder::EReplayModes); virtual voidReplayStop(TRecorder*); virtual voidResume(TRecorder*); virtual voidShowMembers(TMemberInspector&); virtual voidStart(TRecorder*, const char*, Option_t*, Window_t*, Int_t); virtual voidStop(TRecorder*, Bool_t); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_Str",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TRecorderState.html:2482,resume,resume,2482,root/html534/TRecorderState.html,https://root.cern,https://root.cern/root/html534/TRecorderState.html,4,"['pause', 'resume']","['paused', 'resume']"
Usability,"are stored.; Events for windows, which were not created during recording,; cannot be replayed. Replaying. 1] To start replaying. TRecorder r(const char *filename); TRecorder r(const char *filename, ""READ""). or:. TRecorder *recorder = new TRecorder;; recorder->Replay(const char *filename,; Bool_t showMouseCursor = kTRUE);. -filename A name of file with recorded events; previously created with TRecorder::Start. -showMouseCursor If kTRUE, mouse cursor is replayed as well.; In that case it is not recommended to use mouse; during replaying. In general, it is not recommended to use mouse to change positions; and states of ROOT windows during replaying. IMPORTANT:; The state of ROOT environment before replaying of some events; must be exactly the same as before recording them.; Therefore it is strongly recommended to start both recording; and replaying with empty ROOT environment. 2] To pause replaying. recorder->Pause(). Replaying is stopped until recorder->Resume() is called. 3] To resume paused replaying. recorder->Resume(). Resumes previously stopped replaying. 4] To stop replaying before its end. recorder->Stop(). Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. ~TRecEvent(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Op",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRecEvent.html:2481,resume,resume,2481,root/html528/TRecEvent.html,https://root.cern,https://root.cern/root/html528/TRecEvent.html,12,"['pause', 'resume']","['paused', 'resume']"
Usability,"ared fit. In general, one should not fit a histogram with non-empty bins and zero errors.; If the bin errors are not known, one should use the fit option ""W"", which gives a weight=1 for each bin (it is an unweighted least-square fit). When using option ""WW"" the empty bins will be also considered in the chi-square fit with an error of 1. Note that in this fitting case (option ""W"" or ""WW"") the resulting fitted parameter errors are corrected by the obtained chi2 value using this scaling expression: errorp *= sqrt(chisquare/(ndf-1)) as it is done when fitting a TGraph with no point errors.; Excluding points; You can use TF1::RejectPoint inside your fitting function to exclude some points within a certain range from the fit. See the tutorial fit/fitExclude.C.; Warning when using the option ""0""; When selecting the option ""0"", the fitted function is added to the list of functions of the histogram, but it is not drawn when the histogram is drawn. You can undo this behaviour resetting its corresponding bit in the TF1 object as following:; h.Fit(""myFunction"", ""0""); // fit, store function but do not draw; h.Draw(); // function is not drawn; h.GetFunction(""myFunction"")->ResetBit(TF1::kNotDraw);; h.Draw(); // function is visible again; TF1::kNotDraw@ kNotDrawDefinition TF1.h:346. Definition at line 4262 of file TH1.cxx. ◆ FitOptionsMake(). Int_t TH1::FitOptionsMake ; (; Option_t * ; option, . Foption_t & ; Foption . ). static . Decode string choptin and fill fitOption structure. ; Definition at line 4652 of file TH1.cxx. ◆ FitPanel(). void TH1::FitPanel ; (; ). virtual . Display a panel with all histogram fit options. ; See class TFitPanel for example ; Definition at line 4284 of file TH1.cxx. ◆ GetAsymmetry(). TH1 * TH1::GetAsymmetry ; (; TH1 * ; h2, . Double_t ; c2 = 1, . Double_t ; dc2 = 0 . ). Return a histogram containing the asymmetry of this histogram with h2, where the asymmetry is defined as: ; Asymmetry = (h1 - h2)/(h1 + h2) where h1 = this; works for 1D, 2D, etc. hist",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:143720,undo,undo,143720,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['undo'],['undo']
Usability,"arge:%ld bytes. Maximum is:%ld bytes"",; 672 ""Iterators for collection"",; 673 fClass->GetName(),; 674 (Long_t)info.fIterSize,; 675 (Long_t)sizeof(e.fIterator));; 676 }; 677 fReadMemberWise = new TObjArray(TCollection::kInitCapacity,-1);; 678 fConversionReadMemberWise = 0;; 679 fWriteMemberWise = 0;; 680 fFunctionCreateIterators = info.fCreateIterators;; 681 fFunctionCopyIterator = info.fCopyIterator;; 682 fFunctionNextIterator = info.fNext;; 683 fFunctionDeleteIterator = info.fDeleteSingleIterator;; 684 fFunctionDeleteTwoIterators = info.fDeleteTwoIterators;; 685}; 686 ; 687namespace {; 688 template <class vec>; 689 void clearVector(vec& v); 690 {; 691 // Clear out the proxies.; 692 ; 693 for(typename vec::iterator i=v.begin(); i != v.end(); ++i) {; 694 typename vec::value_type e = *i;; 695 if ( e ) {; 696 delete e;; 697 }; 698 }; 699 v.clear();; 700 }; 701}; 702////////////////////////////////////////////////////////////////////////////////; 703/// Standard destructor; 704 ; 705TGenCollectionProxy::~TGenCollectionProxy(); 706{; 707 clearVector(fProxyList);; 708 clearVector(fProxyKept);; 709 clearVector(fStaged);; 710 ; 711 if ( fValue.load() ) delete fValue.load();; 712 if ( fVal ) delete fVal;; 713 if ( fKey ) delete fKey;; 714 ; 715 delete fReadMemberWise;; 716 if (fConversionReadMemberWise) {; 717 std::map<std::string, TObjArray*>::iterator it;; 718 std::map<std::string, TObjArray*>::iterator end = fConversionReadMemberWise->end();; 719 for( it = fConversionReadMemberWise->begin(); it != end; ++it ) {; 720 delete it->second;; 721 }; 722 delete fConversionReadMemberWise;; 723 fConversionReadMemberWise = 0;; 724 }; 725 delete fWriteMemberWise;; 726}; 727 ; 728////////////////////////////////////////////////////////////////////////////////; 729/// Virtual copy constructor; 730 ; 731TVirtualCollectionProxy* TGenCollectionProxy::Generate() const; 732{; 733 if ( !fValue.load(std::memory_order_relaxed) ) Initialize(kFALSE);; 734 ; 735 if( fPointers ); 736 return new TGen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html:21357,clear,clear,21357,doc/master/TGenCollectionProxy_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html,4,['clear'],"['clear', 'clearVector']"
Usability,"arguments. RooPlot* plotOn(RooPlot *frame, PlotOpt o); Plotting engine function for internal use. Plot ourselves on given frame. If frame contains a histogram, all dimensions of the plotted; function that occur in the previously plotted dataset are projected via partial integration,; otherwise no projections are performed. Optionally, certain projections can be performed; by summing over the values present in a provided dataset ('projData'), to correctly; project out data dependents that are not properly described by the PDF (e.g. per-event errors). The functions value can be multiplied with an optional scale factor. The interpretation; of the scale factor is unique for generic real functions, for PDFs there are various interpretations; possible, which can be selection with 'stype' (see RooAbsPdf::plotOn() for details). The default projection behaviour can be overriden by supplying an optional set of dependents; to project. For most cases, plotSliceOn() and plotProjOn() provide a more intuitive interface; to modify the default projection behavour. RooPlot* plotSliceOn(RooPlot* frame, const RooArgSet& sliceSet, Option_t* drawOptions = ""L"", Double_t scaleFactor = 1.0, RooAbsReal::ScaleType stype = Relative, const RooAbsData* projData = 0) const; OBSOLETE -- RETAINED FOR BACKWARD COMPATIBILITY. Use the plotOn(frame,Slice(...)) instead. RooPlot* plotAsymOn(RooPlot* frame, const RooAbsCategoryLValue& asymCat, RooAbsReal::PlotOpt o) const; Plotting engine for asymmetries. Implements the functionality if plotOn(frame,Asymmetry(...))). Plot asymmetry of ourselves, defined as. asym = f(asymCat=-1) - f(asymCat=+1) / ( f(asymCat=-1) + f(asymCat=+1) ). on frame. If frame contains a histogram, all dimensions of the plotted; asymmetry function that occur in the previously plotted dataset are projected via partial integration.; Otherwise no projections are performed,. The asymmetry function can be multiplied with an optional scale factor. The default projection; behaviour can be o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsReal.html:50959,intuit,intuitive,50959,root/html526/RooAbsReal.html,https://root.cern,https://root.cern/root/html526/RooAbsReal.html,1,['intuit'],['intuitive']
Usability,"arity vector-matrix product ;  SMatrix Storage Representation;  Matrix and Vector classesClasses representing Matrices and Vectors of arbitrary type and dimension ;  Unuran;  VecOps;  ▼Monte CarloThe Monte Carlo related packages ;  EGParticle Data Group interface ;  Pythia6The Pythia6 interface ;  Pythia8The Pythia8 interface ;  VMCVirtual Monte Carlo ;  ▼PROOFClasses defining the Parallel ROOT Facility, PROOF, a framework for parallel analysis of ROOT TTrees ;  PROOF kernel LibrariesThe PROOF kernel libraries (libProof, libProofPlayer, libProofDraw) contain the classes defining the kernel of the PROOF facility, i.e ;  PROOF benchmark utilitiesSet of utilities to benchmark a PROOF facility ;  XProofD client LibraryThe XProofD client library, libProofx, contain the classes providing the client to interact with the XRootD-based xproofd daemon ;  TMVAThe Multi Variate Analysis package ;  RooFitRooFit toolkit classes ;  RooFitCoreCore RooFit classes ;  RooStatsRooStats toolkit classes ;  DataFrameROOT's RDataFrame allows to analyse data stored in TTrees with a high level interface ;  Tree LibraryTo store large quantities of same-class objects, ROOT provides the TTree and TNtuple classes ;  ▼TutorialsA collection of macros helping to learn ROOT by example ;  Tutorials specific to Mac/CocoaVarious examples showing graphics done with the Mac graphics system Cocoa. These examples run only on Mac/Os ;  Containers tutorialsExamples showing the ""containers' classes"" usage. ;  Data Frame tutorialsThese examples show the functionalities of the RDataFrame class ;  Event display tutorialsExamples showing the ""Event display classes"" usage. ;  Fast Fourier Transforms tutorialsExample showing the Fast Fourier Transforms interface in ROOT ;  Fit TutorialsThese tutorials illustrate the main fitting features. Their names are related to the aspect which is treated in the code ;  FITS files interface tutorialsExamples showing the FITS file interface ;  FOAM tutorialsExamples showing how to",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v614/modules.html:8968,learn,learn,8968,doc/v614/modules.html,https://root.cern,https://root.cern/doc/v614/modules.html,1,['learn'],['learn']
Usability,"arker Color) ;  tprofile2polyRealistic.C;  tprofile2polyRealisticModuleError.C;  transpad.C Example of a canvas showing two histograms with different scales ;  twoscales.C Example of macro illustrating how to superimpose two histograms with different scales in the ""same"" pad ;  xyplot.C Example showing how to produce a plot with an orthogonal axis system centered at (0,0) ;  ► histfactory;  example.C;  example.py;  makeExample.C;  makeQuickModel.py;  ModifyInterpolation.C;  ► html;  MakeTutorials.C;  ► http;  custom.CThis program creates and fills one and two dimensional histogram Macro used to demonstrate usage of custom HTML page in custom.htm One can use plain JavaScript to assign different actions with HTML buttons ;  histfitserver.CThis program demonstrates simultaneous update of histogram and fitted function ;  httpaccess.CThis program demonstrates access control to the THttpServer with digest methods ;  httpcontrol.CThis program demonstrates simple application control via THttpServer Two histogram are filled within endless loop ;  httpserver.CThis program creates : ;  httptextlog.CThis macro demonstrates custom access and custom drawing for TMsgList class Main motivation for this example - demonstrate how traffic between server and client can be minimized and how one could build custom UI in the browser ;  httptextlog.js;  ► image;  galaxy_image.C Importing an image and manipulating it ;  hist2image.C Create an image from a 2-D histogram and manipulate it ;  hsumanim.C This script is a slightly modified version of hsum.C ;  image2hist.C Create a 2-D histogram from an image ;  img2pad.C Display image in canvas and pad ;  imgconv.C Open rose512.jpg and save it in the following formats: .png, .gif, .xpm and tiff ;  pad2png.C Create a canvas and save as png ;  rose_image.C Display image in a new canvas and pad ;  trans_graph.C Demonstrates how to access and manipulate ARGB pixel values of an image +.. ;  ► io;  copyFiles.C Example of script showing how to copy all",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/files.html:126719,simpl,simple,126719,doc/v610/files.html,https://root.cern,https://root.cern/doc/v610/files.html,1,['simpl'],['simple']
Usability,"array of gradients; Output parameters:; fval: The calculated function value.; grad: The vector of first derivatives. The meaning of the parameters par is of course defined by the user,; who uses the values of those parameters to calculate their function value.; The starting values must be specified by the user. Inside FCN user has to define Z-matrix by means TFumili::GetZ; and TFumili::Derivatives,; set theoretical function by means of TFumili::SetUserFunc,; but first - pass number of parameters by TFumili::SetParNumber. Later values are determined by Fumili as it searches for the minimum; or performs whatever analysis is requested by the user. The default function calls the function specified in SetFCN. Double_t EvalTFN(Double_t* , Double_t* ); Evaluate theoretical function; df: array of partial derivatives; X: vector of theoretical function argument. Int_t ExecuteCommand(const char* command, Double_t* args, Int_t nargs). Execute MINUIT commands. MINImize, SIMplex, MIGrad and FUMili all; will call TFumili::Minimize method. For full command list see; MINUIT. Reference Manual. CERN Program Library Long Writeup D506. Improvement and errors calculation are not yet implemented as well; as Monte-Carlo seeking and minimization.; Contour commands are also unsupported. command : command string; args : array of arguments; nargs : number of arguments. Int_t ExecuteSetCommand(Int_t ). Called from TFumili::ExecuteCommand in case; of ""SET xxx"" and ""SHOW xxx"". void FixParameter(Int_t ipar); Fixes parameter number ipar. Double_t * GetCovarianceMatrix() const; return a pointer to the covariance matrix. Double_t GetCovarianceMatrixElement(Int_t i, Int_t j) const; return element i,j from the covariance matrix. Int_t GetNumberTotalParameters() const; return the total number of parameters (free + fixed). Int_t GetNumberFreeParameters() const; return the number of free parameters. Double_t GetParError(Int_t ipar) const; return error of parameter ipar. Double_t GetParameter(Int_t ipar) c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TFumili.html:18615,SIMpl,SIMplex,18615,root/html602/TFumili.html,https://root.cern,https://root.cern/root/html602/TFumili.html,2,['SIMpl'],['SIMplex']
Usability,"ars, list<RooAbsDataStore*> dstoreList); Merge columns of supplied data set(s) with this data set. All; data sets must have equal number of entries. In case of; duplicate columns the column of the last dataset in the list; prevails. void append(RooAbsDataStore& other). Double_t sumEntries() const. Int_t numEntries() const. void reset(). void cacheArgs(const RooAbsArg* owner, RooArgSet& varSet, const RooArgSet* nset = 0, Bool_t skipZeroWeights = kFALSE); Cache given RooAbsArgs with this tree: The tree is; given direct write access of the args internal cache; the args values is pre-calculated for all data points; in this data collection. Upon a get() call, the; internal cache of 'newVar' will be loaded with the; precalculated value and it's dirty flag will be cleared. void setArgStatus(const RooArgSet& set, Bool_t active); Activate or deactivate the branch status of the TTree branch associated; with the given set of dataset observables. void resetCache(); Remove tree with values of cached observables; and clear list of cached observables. void attachBuffers(const RooArgSet& extObs). void resetBuffers(). void restoreAlternateBuffers(). void checkInit() const. Stat_t GetEntries() const; Interface function to TTree::GetEntries. void Reset(Option_t* option = 0); Interface function to TTree::Reset. Int_t Fill(); Interface function to TTree::Fill. Int_t GetEntry(Int_t entry = 0, Int_t getall = 0); Interface function to TTree::GetEntry. void Draw(Option_t* option = """"). void Streamer(TBuffer& ); Stream an object of class RooTreeDataStore. RooAbsDataStore* clone(const char* newname = 0) const; { return new RooTreeDataStore(*this,newname) ; }. RooAbsDataStore* clone(const RooArgSet& vars, const char* newname = 0) const; { return new RooTreeDataStore(*this,vars,newname) ; }. Bool_t isWeighted() const; { return (_wgtVar!=0||_extWgtArray!=0) ; }. TTree& tree(); Tree access. { return *_tree ; }. const TTree* tree() const; { return _tree ; }. const RooAbsArg* cacheOwner(); { return",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooTreeDataStore.html:17754,clear,clear,17754,root/html534/RooTreeDataStore.html,https://root.cern,https://root.cern/root/html534/RooTreeDataStore.html,6,['clear'],['clear']
Usability,"as been overridden by the user. void Evolution(); this function is called from ""init"" and controls the evolution of the; individuals.; the function can be overridden to change the parameters for mutation rate; sexual reproduction and so on. Double_t SpreadControl(Int_t steps, Int_t ofSteps, Double_t factor); this function provides the ability to change the stepSize of a mutation according to; the success of the last generations. Parameters:; int ofSteps : = if OF the number of STEPS given in this variable (ofSteps); int successSteps : >sucessSteps Generations could improve the result; double factor : than multiply the stepSize ( spread ) by this factor; (if ofSteps == successSteps nothing is changed, if ofSteps < successSteps, the spread; is divided by the factor). using this function one can increase the stepSize of the mutation when we have; good success (to pass fast through the easy phase-space) and reduce the stepSize; if we are in a difficult ""territory"" of the phase-space. Bool_t HasConverged(Int_t steps = 10, Double_t ratio = 0.10000000000000001); gives back true if the last ""steps"" steps have lead to an improvement of the; ""fitness"" of the ""individuals"" of at least ""improvement"". this gives a simple measure of if the fitness of the individuals is; converging and no major improvement is to be expected soon. GeneticAlgorithm(TMVA::IFitterTarget& target, Int_t populationSize, const vector<TMVA::Interval*>& ranges, UInt_t seed = 0). GeneticPopulation& GetGeneticPopulation(); { return fPopulation; }. Double_t GetSpread() const; { return fSpread; }. void SetSpread(Double_t s); { fSpread = s; }. void SetMakeCopies(Bool_t s); { fMakeCopies = s; }. Bool_t GetMakeCopies(); { return fMakeCopies; }. » Author: Peter Speckmayer » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:16; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__GeneticAlgorithm.html:5293,simpl,simple,5293,root/html604/TMVA__GeneticAlgorithm.html,https://root.cern,https://root.cern/root/html604/TMVA__GeneticAlgorithm.html,2,['simpl'],['simple']
Usability,"as been overridden by the user. void Evolution(); this function is called from ""init"" and controls the evolution of the; individuals.; the function can be overridden to change the parameters for mutation rate; sexual reproduction and so on. Double_t SpreadControl(Int_t steps, Int_t ofSteps, Double_t factor); this function provides the ability to change the stepSize of a mutation according to; the success of the last generations. Parameters:; int ofSteps : = if OF the number of STEPS given in this variable (ofSteps); int successSteps : >sucessSteps Generations could improve the result; double factor : than multiply the stepSize ( spread ) by this factor; (if ofSteps == successSteps nothing is changed, if ofSteps < successSteps, the spread; is divided by the factor). using this function one can increase the stepSize of the mutation when we have; good success (to pass fast through the easy phase-space) and reduce the stepSize; if we are in a difficult ""territory"" of the phase-space. Bool_t HasConverged(Int_t steps = 10, Double_t ratio = 0.10000000000000001); gives back true if the last ""steps"" steps have lead to an improvement of the; ""fitness"" of the ""individuals"" of at least ""improvement"". this gives a simple measure of if the fitness of the individuals is; converging and no major improvement is to be expected soon. GeneticAlgorithm(TMVA::IFitterTarget& target, Int_t populationSize, const vector<TMVA::Interval*>& ranges, UInt_t seed = 0). GeneticPopulation& GetGeneticPopulation(); { return fPopulation; }. Double_t GetSpread() const; { return fSpread; }. void SetSpread(Double_t s); { fSpread = s; }. void SetMakeCopies(Bool_t s); { fMakeCopies = s; }. Bool_t GetMakeCopies(); { return fMakeCopies; }. » Author: Peter Speckmayer » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-30 15:15; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__GeneticAlgorithm.html:5285,simpl,simple,5285,root/html602/TMVA__GeneticAlgorithm.html,https://root.cern,https://root.cern/root/html602/TMVA__GeneticAlgorithm.html,2,['simpl'],['simple']
Usability,"as solid lines and no special techniques are used to clarify the picture, the result is the previous picture which is very cluttered and useless. To improve the readability of the Parallel Coordinates output and to explore interactively the data set, many techniques are available. We have implemented a few in ROOT. First of all, in order to show better where the clusters on the various axes are, a 1D histogram is associated to each axis. These histograms (one per axis) are filled according to the number of lines passing through the bins. The histogram’s axis can be represented with colors or as bar charts. These histograms can be represented which colors (get from a palette according to the bin contents) or as bar charts. Both representations can be cumulated on the same plot. This technique allows seeing clearly where the clusters are on an individual axis but it does not give any hints about the correlations between the axes.; Avery simple technique allows to make the clusters appearing: Instead of painting solid lines we paint dotted lines. The cluttering of each individual line is reduced and the clusters show clearly as we can see on the next figure. The spacing between the dots is a parameter which can be adjusted in order to get the best results. Using dotted lines is a very simple method to reduce the cluttering. Interactivity is a very important aspect of the Parallel Coordinates plots. To really explore the data set it is essential to act directly with the events and the axes. For instance, changing the axes order may show clusters which were not visible in a different order. On the next figure the axes order has been changed interactively. We can see that many more clusters appear and all the “random spheres” we put in the data set are now clearly visible. Having moved the variables u,v,w after the variables x,y,z the correlation between these two sets of variables is clear also. Axis order is very important to show clusters. To pursue further data sets e",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:613598,simpl,simple,613598,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['simpl'],['simple']
Usability,"asCallback_t callback) final;  perform special action when drawing is ready ;  ; std::string GetWindowAddr () const final;  Returns web window name. ;  ; std::string GetWindowUrl (bool remote) final;  Returns connection URL for web window. ;  ; bool IsCanvasModified (uint64_t id) const final;  return true if canvas modified since last painting ;  ; void NewDisplay (const std::string &where) final;  Create new display for the canvas See ROOT::RWebWindowsManager::Show() docu for more info. ;  ; int NumDisplays () const final;  Returns number of connected displays. ;  ; bool ProduceBatchOutput (const std::string &fname, int width, int height) final;  Produce batch output, using chrome headless mode with DOM dump. ;  ; std::string ProduceJSON () final;  Produce JSON for the canvas. ;  ; void Run (double tm=0.) final;  Run canvas functionality for specified period of time Required when canvas used not from the main thread. ;  ; void SetClearOnClose (const std::shared_ptr< void > &) final;  Set handle to window which will be cleared when connection is closed. ;  ;  Public Member Functions inherited from ROOT::Experimental::Internal::RVirtualCanvasPainter; virtual ~RVirtualCanvasPainter ();  Default destructor. ;  . Private Types; typedef std::vector< Detail::RMenuItem > MenuItemsVector;  . Private Member Functions;  RCanvasPainter (const RCanvasPainter &)=delete;  Disable copy construction. ;  ; void CancelCommands (unsigned connid=0);  Cancel command execution on provided connection All commands are cancelled, when connid === 0. ;  ; void CancelUpdates ();  Cancel all pending Canvas::Update() ;  ; void CheckDataToSend ();  Check if canvas need to send data to the clients. ;  ; std::string CreateSnapshot (RDrawable::RDisplayContext &ctxt);  Create JSON representation of data, which should be send to the clients Here server-side painting is performed - each drawable adds own elements in so-called display list, which transferred to the clients. ;  ; void CreateWindow ();  C",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvasPainter.html:2151,clear,cleared,2151,doc/master/classROOT_1_1Experimental_1_1RCanvasPainter.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvasPainter.html,1,['clear'],['cleared']
Usability,"as_PDF(UInt_t idx); static RooResolutionModel&as_RMODEL(UInt_t idx); static RooArgSetas_SET(UInt_t idx); static const char*as_STRING(UInt_t idx); static RooRealVar&as_VAR(UInt_t idx); static RooAbsRealLValue&as_VARLV(UInt_t idx); RooAbsArg&asARG(const char*); RooCategory&asCAT(const char*); RooAbsCategory&asCATFUNC(const char*); RooAbsCategoryLValue&asCATLV(const char*); RooAbsData&asDATA(const char*); RooDataHist&asDHIST(const char*); Double_tasDOUBLE(const char*); RooDataSet&asDSET(const char*); RooAbsReal&asFUNC(const char*); Int_tasINT(const char*); RooArgListasLIST(const char*); TObject&asOBJ(const char*); RooAbsPdf&asPDF(const char*); RooResolutionModel&asRMODEL(const char*); RooArgSetasSET(const char*); const char*asSTRING(const char*); RooRealVar&asVAR(const char*); RooAbsRealLValue&asVARLV(const char*); const char*autoClassNamePostFix() const; virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; RooAbsArg*createArg(const char* className, const char* objName, const char* varList); RooCategory*createCategory(const char* name, const char* stateNameList = 0); RooRealVar*createVariable(const char* name, Double_t xmin, Double_t xmax); vector<std::string>ctorArgs(const char* className); virtual Int_tRooPrintable::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooFactoryWSTool.html:2633,Clear,Clear,2633,root/html532/RooFactoryWSTool.html,https://root.cern,https://root.cern/root/html532/RooFactoryWSTool.html,2,['Clear'],['Clear']
Usability,"as_PDF(UInt_t idx); static RooResolutionModel&as_RMODEL(UInt_t idx); static RooArgSetas_SET(UInt_t idx); static const char*as_STRING(UInt_t idx); static RooRealVar&as_VAR(UInt_t idx); static RooAbsRealLValue&as_VARLV(UInt_t idx); RooAbsArg&asARG(const char*); RooCategory&asCAT(const char*); RooAbsCategory&asCATFUNC(const char*); RooAbsCategoryLValue&asCATLV(const char*); RooAbsData&asDATA(const char*); RooDataHist&asDHIST(const char*); Double_tasDOUBLE(const char*); RooDataSet&asDSET(const char*); RooAbsReal&asFUNC(const char*); Int_tasINT(const char*); RooArgListasLIST(const char*); TObject&asOBJ(const char*); RooAbsPdf&asPDF(const char*); RooResolutionModel&asRMODEL(const char*); RooArgSetasSET(const char*); const char*asSTRING(const char*); RooRealVar&asVAR(const char*); RooAbsRealLValue&asVARLV(const char*); const char*autoClassNamePostFix() const; virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; RooAbsArg*createArg(const char* className, const char* objName, const char* varList); RooCategory*createCategory(const char* name, const char* stateNameList = 0); RooRealVar*createVariable(const char* name, Double_t xmin, Double_t xmax); vector<string>ctorArgs(const char* className); virtual Int_tRooPrintable::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooFactoryWSTool.html:2597,Clear,Clear,2597,root/html602/RooFactoryWSTool.html,https://root.cern,https://root.cern/root/html602/RooFactoryWSTool.html,2,['Clear'],['Clear']
Usability,"ase Class for all MVA method ;  CMethodBayesClassifierDescription of bayesian classifiers ;  CMethodBDTAnalysis of Boosted Decision Trees ;  CMethodBoostClass for boosting a TMVA method ;  CMethodC50;  CMethodCategoryClass for categorizing the phase space ;  CMethodCFMlpANNInterface to Clermond-Ferrand artificial neural network ;  ►CMethodCFMlpANN_UtilsImplementation of Clermond-Ferrand artificial neural network ;  CVARn2;  CMethodCompositeBaseVirtual base class for combining several TMVA method ;  CMethodCrossValidation;  CMethodCutsMultivariate optimisation of signal efficiency for given background efficiency, applying rectangular minimum and maximum requirements ;  CMethodDL;  ►CMethodDNNDeep Neural Network Implementation ;  CTTrainingSettings;  CMethodDTAnalysis of Boosted Decision Trees ;  CMethodFDAFunction discriminant analysis (FDA) ;  CMethodFisherFisher and Mahalanobis Discriminants (Linear Discriminant Analysis) ;  CMethodHMatrixH-Matrix method, which is implemented as a simple comparison of chi-squared estimators for signal and background, taking into account the linear correlations between the input variables ;  CMethodInfo;  CMethodKNNAnalysis of k-nearest neighbor ;  CMethodLDLinear Discriminant ;  CMethodLikelihoodLikelihood analysis (""non-parametric approach"") ;  CMethodMLPMultilayer Perceptron class built off of MethodANNBase ;  CMethodPDEFoamThe PDEFoam method is an extension of the PDERS method, which divides the multi-dimensional phase space in a finite number of hyper-rectangles (cells) of constant event density ;  CMethodPDERSThis is a generalization of the above Likelihood methods to \( N_{var} \) dimensions, where \( N_{var} \) is the number of input variables used in the MVA ;  CMethodPyAdaBoost;  CMethodPyGTB;  CMethodPyKeras;  CMethodPyRandomForest;  CMethodRSNNS;  CMethodRSVM;  CMethodRuleFitJ Friedman's RuleFit method ;  CMethodRXGB;  CMethodSVMSMO Platt's SVM classifier with Keerthi & Shavade improvements ;  CMethodTMlpANNThis is the TM",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v614/annotated.html:83808,simpl,simple,83808,doc/v614/annotated.html,https://root.cern,https://root.cern/doc/v614/annotated.html,3,['simpl'],['simple']
Usability,"ase of exception. Int_t Incorporate(TObject* obj, TList* out, Bool_t& merged); Incorporate object 'newobj' in the list 'outlist'.; The object is merged with an object of the same name already existing in; the list, or just added.; The boolean merged is set to kFALSE when the object is just added to 'outlist';; this happens if the Merge() method does not exist or if a object named as 'obj'; is not already in the list. If the obj is not 'merged' than it should not be; deleted, unless outlist is not owner of its objects.; Return 0 on success, -1 on error. TObject * HandleHistogram(TObject* obj); Low statistic histograms need a special treatment when using autobin. Bool_t HistoSameAxis(TH1* h0, TH1* h1); Return kTRUE is the histograms 'h0' and 'h1' have the same binning and ranges; on the axis (i.e. if they can be just Add-ed for merging). void StoreOutput(TList* out); Store received output list. TList * MergeFeedback(); Merge feedback lists. void StoreFeedback(TObject* slave, TList* out); Store feedback results from the specified slave. void SetupFeedback(); Setup reporting of feedback objects. void StopFeedback(); Stop reporting of feedback objects. Bool_t HandleTimer(TTimer* timer); Send feedback objects to client. TDSetElement * GetNextPacket(TSlave* slave, TMessage* r); Get next packet for specified slave. Bool_t IsClient() const; Is the player running on the client?. Long64_t DrawSelect(TDSet* set, const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Draw (support for TChain::Draw()).; Returns -1 in case of error or number of selected events in case of success. void SetInitTime(); Set init time. TVirtualPacketizer * GetPacketizer() const; { return 0; }. void Progress(Long64_t total, Long64_t processed). void Progress(TSlave* , Long64_t total, Long64_t processed); { Progress(total, processed); }. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Flo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofPlayerRemote.html:19248,feedback,feedback,19248,root/html530/TProofPlayerRemote.html,https://root.cern,https://root.cern/root/html530/TProofPlayerRemote.html,1,['feedback'],['feedback']
Usability,"ase when using the branches created via a TStreamerInfo (i.e. More...;  ; class  TLeafF;  A TLeaf for a 32 bit floating point data type. More...;  ; class  TLeafF16;  A TLeaf for a 24 bit truncated floating point data type. More...;  ; class  TLeafG;  A TLeaf for a 64 bit Integer data type. More...;  ; class  TLeafI;  A TLeaf for an Integer data type. More...;  ; class  TLeafL;  A TLeaf for a 64 bit Integer data type. More...;  ; class  TLeafO;  A TLeaf for a bool data type. More...;  ; class  TLeafObject;  A TLeaf for a general object derived from TObject. More...;  ; class  TLeafS;  A TLeaf for a 16 bit Integer data type. More...;  ; class  TMethodBrowsable;  This helper object allows the browsing of methods of objects stored in branches. More...;  ; class  TNonSplitBrowsable;  Allows a TBrowser to browse non-split branches as if they were split. More...;  ; class  TNtuple;  A simple TTree restricted to a list of float variables only. More...;  ; class  TNtupleD;  A simple TTree restricted to a list of double variables only. More...;  ; class  TQueryResult;  A container class for query results. More...;  ; class  TreeUtils;  Different standalone functions to work with trees and tuples, not reqiuired to be a member of any class. More...;  ; class  TSelector;  A TSelector object is used by the TTree::Draw, TTree::Scan, TTree::Process to navigate in a TTree and make selections. More...;  ; class  TSelectorList;  A TList derived class that makes sure that objects added to it are not linked to the currently open file (like histograms, eventlists and trees). More...;  ; class  TSelectorScalar;  Named scalar type, based on Long64_t, streamable, storable and mergeable. More...;  ; class  TTree;  A TTree represents a columnar dataset. More...;  ; class  TTreeCache;  A cache to speed-up the reading of ROOT datasets. More...;  ; class  TTreeCacheUnzip;  A TTreeCache which exploits parallelized decompression of its own content. More...;  ; class  TTreeCloner;  Class implement",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tree.html:4979,simpl,simple,4979,doc/master/group__tree.html,https://root.cern,https://root.cern/doc/master/group__tree.html,1,['simpl'],['simple']
Usability,"ase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnUserCovariance&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::MnFcn&, const ROOT::Minuit2::GradientCalculator&, const ROOT::Minuit2::MinimumSeed&, const ROOT::Minuit2::MnStrategy&, unsigned int, double) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const vector<double>&, unsigned int, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>&, unsigned int, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; ROOT::Minuit2::ModularFunctionMinimizerROOT::Minuit2::ModularFunctionMinimizer::ModularFunctionMinimizer(); ROOT::Minuit2::ModularFunctionMinimizerROOT::Minuit2::ModularFunctionMinimizer::ModularFunctionMinimizer(const ROOT::Minuit2::ModularFunctionMinimizer&); ROOT::Minuit2::ScanMinimizer&operator=(const ROOT::Minuit2::ScanMinimizer&); ROOT::Minuit2::ScanMinimizerScanMinimizer(); ROOT::Minuit2::ScanMinimizerScanMinimizer(const ROOT::Minuit2::ScanMinimizer&); virtual const ROOT::Minuit2::MinimumSeedGenerator&SeedGenerator() const. Data Members; private:. ROOT::Minuit2::ScanBuilderfBuilder; ROOT::Minuit2::SimplexSeedGeneratorfSeedGenerator. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ScanMinimizer(); {}. ~ScanMinimizer(); {}. » Last changed: root/minuit2:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Minuit2__ScanMinimizer.html:4503,Simpl,SimplexSeedGeneratorfSeedGenerator,4503,root/html602/ROOT__Minuit2__ScanMinimizer.html,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__ScanMinimizer.html,1,['Simpl'],['SimplexSeedGeneratorfSeedGenerator']
Usability,"ase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnUserCovariance&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::MnFcn&, const ROOT::Minuit2::GradientCalculator&, const ROOT::Minuit2::MinimumSeed&, const ROOT::Minuit2::MnStrategy&, unsigned int, double) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const vector<double>&, unsigned int, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>&, unsigned int, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; ROOT::Minuit2::ModularFunctionMinimizerROOT::Minuit2::ModularFunctionMinimizer::ModularFunctionMinimizer(); ROOT::Minuit2::ModularFunctionMinimizerROOT::Minuit2::ModularFunctionMinimizer::ModularFunctionMinimizer(const ROOT::Minuit2::ModularFunctionMinimizer&); ROOT::Minuit2::ScanMinimizer&operator=(const ROOT::Minuit2::ScanMinimizer&); ROOT::Minuit2::ScanMinimizerScanMinimizer(); ROOT::Minuit2::ScanMinimizerScanMinimizer(const ROOT::Minuit2::ScanMinimizer&); virtual const ROOT::Minuit2::MinimumSeedGenerator&SeedGenerator() const. Data Members; private:. ROOT::Minuit2::ScanBuilderfBuilder; ROOT::Minuit2::SimplexSeedGeneratorfSeedGenerator. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ScanMinimizer(); {}. ~ScanMinimizer(); {}. » Last changed: root/minuit2:$Id$ » Last generated: 2015-09-08 17:39; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Minuit2__ScanMinimizer.html:4503,Simpl,SimplexSeedGeneratorfSeedGenerator,4503,root/html604/ROOT__Minuit2__ScanMinimizer.html,https://root.cern,https://root.cern/root/html604/ROOT__Minuit2__ScanMinimizer.html,1,['Simpl'],['SimplexSeedGeneratorfSeedGenerator']
Usability,"aseIntegratorOptions& opt); doubleRelTolerance() const; voidSetAbsTolerance(double tol); voidSetExtraOptions(const ROOT::Math::IOptions& opt); voidSetRelTolerance(double tol); voidSetWKSize(unsigned int size); unsigned intWKSize() const. protected:. voidClearExtra(). Data Members; protected:. doublefAbsToleranceabsolute tolerance ; ROOT::Math::IOptions*fExtraOptionsextra options ; intfIntegTypeIntegrator type (value converted from enum); unsigned intfNCalls(max) funxtion calls; doublefRelTolerancerelative tolerance ; unsigned intfWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions & operator=(const ROOT::Math::BaseIntegratorOptions& opt); assignment operators. virtual ~BaseIntegratorOptions(); protected constructor to avoid user creating this class. { ClearExtra(); }. std::string Integrator() const; name of 1D integrator. double AbsTolerance() const; non-static methods for retrivieng options ; absolute tolerance. { return fAbsTolerance; }. double RelTolerance() const; absolute tolerance. { return fRelTolerance; }. unsigned int WKSize() const; size of the workspace. { return fWKSize; }. IOptions * ExtraOptions() const; return extra options. { return fExtraOptions; }. void SetAbsTolerance(double tol); non-static methods for setting options ; set the abs tolerance. { fAbsTolerance = tol; }. void SetRelTolerance(double tol); set the relative tolerance. { fRelTolerance = tol; }. void SetWKSize(unsigned int size); set workspace size. { fWKSize = size; }. void SetExtraOptions(const ROOT::Math::IOptions& opt); set extra options (in this case pointer is cloned). void ClearExtra(). » Author: L. Moneta Fri Aug 15 2008 » Copyright (c) 2008 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 16:58; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__BaseIntegratorOptions.html:2541,Clear,ClearExtra,2541,root/html534/ROOT__Math__BaseIntegratorOptions.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__BaseIntegratorOptions.html,1,['Clear'],['ClearExtra']
Usability,"asisConvVar() const; virtual list<Double_t>*RooAbsReal::binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tcheckObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidRooResolutionModel::cleanup(); virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; const RooArgList&coefList() const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual RooResolutionModel*convolution(RooFormulaVar* basis, RooAbsArg* owner) const; RooRealVar&RooResolutionModel::convVar() const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAddModel.html:3657,Clear,Clear,3657,root/html534/RooAddModel.html,https://root.cern,https://root.cern/root/html534/RooAddModel.html,3,['Clear'],['Clear']
Usability,"ass ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Connect (const char *sender_class, const char *signal, const char *receiver_class, void *receiver, const char *slot);  This method allows to make a connection from any object of the same class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  . Protected Member Functions; virtual void InitializeContext ();  Initialize parser parameters, such as, disactivate non-standards libxml1 features, on/off validation, clear error and warning messages. ;  ; virtual void OnValidateError (const TString &message);  This function is called when an error from the parser has occurred. ;  ; virtual void OnValidateWarning (const TString &message);  This function is called when a warning from the parser has occurred. ;  ; virtual void ReleaseUnderlying ();  To release any existing document. ;  ; virtual void SetParseCode (Int_t code);  Set the parse code: ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual void * GetSender ();  ; virtual const char * GetSenderClassName () const;  . Protected Attributes; _xmlParserCtxt * fContext;  Parse the xml file. ;  ; Int_t fParseCode;  To keep track of the errorcodes. ;  ; Bool_t fRep",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTXMLParser.html:13403,clear,clear,13403,doc/master/classTXMLParser.html,https://root.cern,https://root.cern/doc/master/classTXMLParser.html,1,['clear'],['clear']
Usability,"ass Element> inline TVectorT<Element> &TVectorT<Element> Use(Int_t n, float* data); { return Use(0,n-1,data); }. template<class Element> inline const TVectorT<Element> &TVectorT<Element> Use(Int_t n, const float* data) const; { return Use(0,n-1,data); }. template<class Element> inline TVectorT<Element> &TVectorT<Element> Use(TVectorT<float>& v). template<class Element> inline const TVectorT<Element> &TVectorT<Element> Use(const TVectorT<float>& v) const. template<class Element> inline TVectorT<Element> TVectorT<Element> GetSub(Int_t row_lwb, Int_t row_upb, Option_t* option = ""S"") const. template<class Element> inline const Element &TVectorT<Element> operator()(Int_t ind) const; Access a vector element. template<class Element> inline Element &TVectorT<Element> operator()(Int_t ind); Access a vector element. Int_t GetLwb() const; { return fRowLwb; }. Int_t GetUpb() const; { return fNrows+fRowLwb-1; }. Int_t GetNrows() const; { return fNrows; }. Int_t GetNoElements() const; { return fNrows; }. Element * GetMatrixArray(); { return fElements; }. const Element * GetMatrixArray() const; { return fElements; }. void Invalidate(); { SetBit(kStatus); }. void MakeValid(); { ResetBit(kStatus); }. Bool_t IsValid() const; { return !TestBit(kStatus); }. Bool_t IsOwner() const; { return fIsOwner; }. void SetElements(const float* elements). TVectorT<Element> & Shift(Int_t row_shift); { fRowLwb += row_shift; return *this; }. TVectorT<Element> & ResizeTo(Int_t lwb, Int_t upb). TVectorT<Element> & ResizeTo(Int_t n); { return ResizeTo(0,n-1); }. TVectorT<Element> & Use(Int_t lwb, Int_t upb, float* data). const Element & operator[](Int_t index) const; { return (*this)(index); }. Element & operator[](Int_t index); { return (*this)(index); }. void Clear(Option_t* = """"). » Last changed: root/matrix:$Id$ » Last generated: 2015-03-15 16:40; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TVectorT_float_.html:18403,Clear,Clear,18403,root/html534/TVectorT_float_.html,https://root.cern,https://root.cern/root/html534/TVectorT_float_.html,1,['Clear'],['Clear']
Usability,"ass documentation; Root.Html.SearchEngine (default: ) - link to the search engine; Root.Html.Search (defualt: ) - link to search by replacing ""%s"" with user input; Root.Html.ViewCVS (default: ) - URL of ViewCVS base; Root.Html.XWho (default: http://consult.cern.ch/xwho/people?) - URL of CERN's xWho; Root.Html.Charset (default: ISO-8859-1) - HTML character set. IX. Behind the scene; Internally, THtml is just an API class that sets up the list of known; classes, and forwards API invocations to the ""work horses"".; TDocOutput; generates the output by letting a; TDocParser; object parse the sources, which in turn invokes objects deriving from; TDocDirective; to process directives.; . Function Members (Methods); public:. THtml(); virtual~THtml(); voidTObject::AbstractMethod(const char* method) const; voidAddMacroPath(const char* path); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; voidConvert(const char* filename, const char* title, const char* dirname = """", const char* relpath = ""../"", Int_t includeOutput = kNoOutput, const char* context = """"); virtual voidTObject::Copy(TObject& object) const; Bool_tCopyFileFromEtcDir(const char* filename) const; virtual voidCreateAuxiliaryFiles() const; voidCreateHierarchy(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); vir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/THtml.html:17371,Clear,Clear,17371,root/html532/THtml.html,https://root.cern,https://root.cern/root/html532/THtml.html,2,['Clear'],['Clear']
Usability,"ass* cl); virtual voidTGedFrame::AddExtraTab(TGedFrame::TGedSubFrame* sf); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); voidAddNewSurface(); voidAlphaChanged(); voidAlphaChanged(Int_t alpha); virtual voidTObject::AppendPad(Option_t* option = """"); voidApplyAlpha(); voidApplyGridParameters(); voidApplyPlanes(); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); voidBoxCutToggled(); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); voidColorChanged(Pixel_t pixelColor); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual TGVerticalFrame*TGedFrame::CreateEditorTabSubFrame(const char* name); virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroyS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGL5DDataSetEditor.html:1859,Clear,Clear,1859,root/html532/TGL5DDataSetEditor.html,https://root.cern,https://root.cern/root/html532/TGL5DDataSetEditor.html,4,['Clear'],['Clear']
Usability,"assInfo_IsLoaded(ClassInfo_t* info) const; virtual boolClassInfo_IsValid(ClassInfo_t* info) const; virtual boolClassInfo_IsValidMethod(ClassInfo_t* info, const char* method, const char* proto, Long_t* offset) const; virtual const char*ClassInfo_Name(ClassInfo_t* info) const; virtual void*ClassInfo_New(ClassInfo_t* info) const; virtual void*ClassInfo_New(ClassInfo_t* info, int n) const; virtual void*ClassInfo_New(ClassInfo_t* info, void* arena) const; virtual void*ClassInfo_New(ClassInfo_t* info, int n, void* arena) const; virtual intClassInfo_Next(ClassInfo_t* info) const; virtual Long_tClassInfo_Property(ClassInfo_t* info) const; virtual intClassInfo_RootFlag(ClassInfo_t* info) const; virtual intClassInfo_Size(ClassInfo_t* info) const; virtual Long_tClassInfo_Tagnum(ClassInfo_t* info) const; virtual const char*ClassInfo_Title(ClassInfo_t* info) const; virtual const char*ClassInfo_TmpltName(ClassInfo_t* info) const; virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidClearFileBusy(); virtual voidClearStack(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidCreateListOfBaseClasses(TClass* cl); virtual voidCreateListOfDataMembers(TClass* cl); virtual voidCreateListOfMethodArgs(TFunction* m); virtual voidCreateListOfMethods(TClass* cl); virtual intDataMemberInfo_ArrayDim(DataMemberInfo_t* dminfo) const; virtual voidDataMemberInfo_Delete(DataMemberInfo_t* dminfo) const; virtual DataMemberInfo_t*DataMemberInfo_Factory(ClassInfo_t* clinfo = 0) const; virtual DataMemberInfo_t*DataMemberInfo_FactoryCopy(DataMemberInfo_t* dminfo) const; virtual boolDataMemberInfo_IsValid(DataMemberInfo_t* dminfo) const; virtual intDataMemberInfo_MaxIndex(DataMemberInfo_t* dminfo, Int_t dim) const; virtual const char*DataMemberInfo_Name(DataMemberInfo_t* dminfo) const; virtual intDataMemberInfo_Next(DataMemb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TCint.html:5383,Clear,Clear,5383,root/html532/TCint.html,https://root.cern,https://root.cern/root/html532/TCint.html,1,['Clear'],['Clear']
Usability,"assed the filters. For the most common; // types, the type of the values stored in the column is automatically; // guessed.; auto hist = d.Filter(cutb1).Histo1D();; std::cout << ""Filled h "" << hist->GetEntries() << "" times, mean: "" << hist->GetMean() << std::endl;; ; // ### `Foreach` action; // The most generic action of all: an operation is applied to all entries.; // In this case we fill a histogram. In some sense this is a violation of a; // purely functional paradigm - C++ allows to do that.; TH1F h(""h"", ""h"", 12, -1, 11);; d.Filter([](int b2) { return b2 % 2 == 0; }, {""b2""}).Foreach([&h](double b1) { h.Fill(b1); });; ; std::cout << ""Filled h with "" << h.GetEntries() << "" entries"" << std::endl;; ; // ## Express your chain of operations with clarity!; // We are discussing an example here but it is not hard to imagine much more; // complex pipelines of actions acting on data. Those might require code; // which is well organised, for example allowing to conditionally add filters; // or again to clearly separate filters and actions without the need of; // writing the entire pipeline on one line. This can be easily achieved.; // We'll show this by re-working the `Count` example:; auto cutb1_result = d.Filter(cutb1);; auto cutb1b2_result = d.Filter(cutb1b2, {""b2"", ""b1""});; auto cutb1_cutb1b2_result = cutb1_result.Filter(cutb1b2, {""b2"", ""b1""});; // Now we want to count:; auto evts_cutb1_result = cutb1_result.Count();; auto evts_cutb1b2_result = cutb1b2_result.Count();; auto evts_cutb1_cutb1b2_result = cutb1_cutb1b2_result.Count();; ; std::cout << ""Events passing cutb1: "" << *evts_cutb1_result << std::endl; << ""Events passing cutb1b2: "" << *evts_cutb1b2_result << std::endl; << ""Events passing both: "" << *evts_cutb1_cutb1b2_result << std::endl;; ; // ## Calculating quantities starting from existing columns; // Often, operations need to be carried out on quantities calculated starting; // from the ones present in the columns. We'll create in this example a third; // column",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df001__introduction_8C.html:5055,clear,clearly,5055,doc/master/df001__introduction_8C.html,https://root.cern,https://root.cern/doc/master/df001__introduction_8C.html,1,['clear'],['clearly']
Usability,"assification.C;   This macro provides examples for the training and testing of the TMVA classifiers. ;  ;  TMVAClassificationApplication.C;   This macro provides a simple example on how to use the trained classifiers within an analysis module ;  ;  TMVAClassificationCategory.C;   This macro provides examples for the training and testing of the TMVA classifiers in categorisation mode. ;  ;  TMVAClassificationCategoryApplication.C;   This macro provides a simple example on how to use the trained classifiers (with categories) within an analysis module ;  ;  TMVACrossValidation.C;   This macro provides an example of how to use TMVA for k-folds cross evaluation. ;  ;  TMVACrossValidationApplication.C;   This macro provides an example of how to use TMVA for k-folds cross evaluation in application. ;  ;  TMVACrossValidationRegression.C;   This macro provides an example of how to use TMVA for k-folds cross evaluation. ;  ;  TMVAGAexample.C;   This executable gives an example of a very simple use of the genetic algorithm of TMVA ;  ;  TMVAGAexample2.C;   This executable gives an example of a very simple use of the genetic algorithm of TMVA. ;  ;  TMVAMinimalClassification.C;   Minimal self-contained example for setting up TMVA with binary classification. ;  ;  TMVAMulticlass.C;   This macro provides a simple example for the training and testing of the TMVA multiclass classification ;  ;  TMVAMulticlassApplication.C;   This macro provides a simple example on how to use the trained multiclass classifiers within an analysis module ;  ;  TMVAMultipleBackgroundExample.C;   This example shows the training of signal with three different backgrounds Then in the application a tree is created with all signal and background events where the true class ID and the three classifier outputs are added finally with the application tree, the significance is maximized with the help of the TMVA genetic algorithm. ;  ;  TMVARegression.C;   This macro provides examples for the training and testing",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/dir_afb41fc0ce910d0ed999b271277cf431.html:5960,simpl,simple,5960,doc/master/dir_afb41fc0ce910d0ed999b271277cf431.html,https://root.cern,https://root.cern/doc/master/dir_afb41fc0ce910d0ed999b271277cf431.html,1,['simpl'],['simple']
Usability,"asurement(const char* Name, const char* Title = """"). void SetOutputFilePrefix(const string& prefix); set output prefix. { fOutputFilePrefix = prefix; }. std::string GetOutputFilePrefix(); retrieve prefix for output files. { return fOutputFilePrefix; }. void SetPOI(const string& POI); insert PoI at beginning of vector of PoIs. { fPOI.insert( fPOI.begin(), POI ); }. void AddPOI(const string& POI); append parameter to vector of PoIs. { fPOI.push_back(POI); }. std::string GetPOI(unsigned int i = 0); get name of PoI at given index. { return fPOI.at(i); }. std::vector<std::string>& GetPOIList(); get vector of PoI names. { return fPOI; }. void ClearConstantParams(); empty vector of constant parameters. { fConstantParams.clear(); }. std::vector< std::string >& GetConstantParams(); get vector of all constant parameters. { return fConstantParams; }. std::map<std::string, double>& GetParamValues(); get map: parameter name <--> parameter value. { return fParamValues; }. void ClearParamValues(); clear map of parameter values. { fParamValues.clear(); }. void AddFunctionObject(const RooStats::HistFactory::PreprocessFunction function); add a preprocess function object. { fFunctionObjects.push_back( function ); }. void SetFunctionObjects(vector<RooStats::HistFactory::PreprocessFunction> objects); get vector of defined function objects. { fFunctionObjects = objects; }. std::vector< RooStats::HistFactory::PreprocessFunction >& GetFunctionObjects(); { return fFunctionObjects; }. std::vector< RooStats::HistFactory::Asimov >& GetAsimovDatasets(); get vector of defined Asimov Datasets. { return fAsimovDatasets; }. void AddAsimovDataset(RooStats::HistFactory::Asimov dataset); add an Asimov Dataset. { fAsimovDatasets.push_back(dataset); }. void SetLumi(double Lumi); set integrated luminosity used to normalise histograms (if NormalizeByTheory is true for this sample). { fLumi = Lumi; }. void SetLumiRelErr(double RelErr); set relative uncertainty on luminosity. { fLumiRelErr = RelErr; }. doub",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__HistFactory__Measurement.html:12840,clear,clear,12840,root/html602/RooStats__HistFactory__Measurement.html,https://root.cern,https://root.cern/root/html602/RooStats__HistFactory__Measurement.html,6,"['Clear', 'clear']","['ClearParamValues', 'clear']"
Usability,"at line 110 of file TGProgressBar.cxx. ◆ IsA(). TClass * TGProgressBar::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGFrame.; Reimplemented in TGVProgressBar.; Definition at line 90 of file TGProgressBar.h. ◆ Percent(). virtual void TGProgressBar::Percent ; (; Bool_t ; on). inlinevirtual . Reimplemented in TGVProgressBar.; Definition at line 78 of file TGProgressBar.h. ◆ Reset(). void TGProgressBar::Reset ; (; ). virtual . Reset progress bar (i.e. set pos to 0). ; Definition at line 126 of file TGProgressBar.cxx. ◆ SavePrimitive(). void TGProgressBar::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save progress bar parameters as a C++ statement(s) on output stream out. ; Reimplemented from TGFrame.; Reimplemented in TGVProgressBar.; Definition at line 396 of file TGProgressBar.cxx. ◆ SetBarColor() [1/2]. void TGProgressBar::SetBarColor ; (; const char * ; color = ""blue""). Set progress bar color. ; Definition at line 166 of file TGProgressBar.cxx. ◆ SetBarColor() [2/2]. void TGProgressBar::SetBarColor ; (; Pixel_t ; color). virtual . Set progress bar color. ; Definition at line 156 of file TGProgressBar.cxx. ◆ SetBarType(). void TGProgressBar::SetBarType ; (; EBarType ; type). Set bar type. ; Definition at line 146 of file TGProgressBar.cxx. ◆ SetFillType(). void TGProgressBar::SetFillType ; (; EFillType ; type). Set fill type. ; Definition at line 136 of file TGProgressBar.cxx. ◆ SetForegroundColor(). void TGProgressBar::SetForegroundColor ; (; Pixel_t ; pixel). overridevirtual . Change text color drawing. ; Reimplemented from TGFrame.; Definition at line 207 of file TGProgressBar.cxx. ◆ SetMax(). void TGProgressBar::SetMax ; (; Float_t ; max). inline . Definition at line 82 of file TGProgressBar.h. ◆ SetMin(). void TGProgressBar::SetMin ; (; Float_t ; min). inline . Definition at line 81 of file TGProgressBar.h. ◆ SetPosition(). void TGProgressBar::SetPosition ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGProgressBar.html:35046,progress bar,progress bar,35046,doc/master/classTGProgressBar.html,https://root.cern,https://root.cern/doc/master/classTGProgressBar.html,1,['progress bar'],['progress bar']
Usability,"at line 1802 of file TGLViewer.cxx. ◆ SetDrawCameraCenter(). void TGLViewer::SetDrawCameraCenter ; (; Bool_t ; x). Draw camera look at and rotation point. ; Definition at line 2084 of file TGLViewer.cxx. ◆ SetEventHandler(). void TGLViewer::SetEventHandler ; (; TGEventHandler * ; handler). virtual . Set the event-handler. ; The event-handler is owned by the viewer. If GLWidget is set, the handler is propagated to it.; If called with handler=0, the current handler will be deleted (also from TGLWidget). ; Definition at line 2301 of file TGLViewer.cxx. ◆ SetFader(). void TGLViewer::SetFader ; (; Float_t ; x). inline . Definition at line 350 of file TGLViewer.h. ◆ SetGedEditor(). virtual void TGLViewer::SetGedEditor ; (; TGedEditor * ; ed). inlinevirtual . Definition at line 382 of file TGLViewer.h. ◆ SetGuideState(). void TGLViewer::SetGuideState ; (; Int_t ; axesType, . Bool_t ; axesDepthTest, . Bool_t ; referenceOn, . const Double_t * ; referencePos . ). Set the state of guides (axes & reference markers) from arguments. ; Definition at line 2069 of file TGLViewer.cxx. ◆ SetIgnoreSizesOnUpdate(). void TGLViewer::SetIgnoreSizesOnUpdate ; (; Bool_t ; v). inline . Definition at line 356 of file TGLViewer.h. ◆ SetLineScale(). void TGLViewer::SetLineScale ; (; Float_t ; s). inline . Definition at line 256 of file TGLViewer.h. ◆ SetMaxSceneDrawTimeHQ(). void TGLViewer::SetMaxSceneDrawTimeHQ ; (; Float_t ; t). inline . Definition at line 310 of file TGLViewer.h. ◆ SetMaxSceneDrawTimeLQ(). void TGLViewer::SetMaxSceneDrawTimeLQ ; (; Float_t ; t). inline . Definition at line 311 of file TGLViewer.h. ◆ SetOrthoCamera(). void TGLViewer::SetOrthoCamera ; (; ECameraType ; camera, . Double_t ; zoom, . Double_t ; dolly, . Double_t ; center[3], . Double_t ; hRotate, . Double_t ; vRotate . ). Set an orthographic camera to supplied configuration - note this does not need to be the current camera - though you will not see the effect if it is not. ; 'camera' defines the ortho camera - one ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLViewer.html:64682,guid,guides,64682,doc/master/classTGLViewer.html,https://root.cern,https://root.cern/doc/master/classTGLViewer.html,1,['guid'],['guides']
Usability,"at line 373 of file TRatioPlot.cxx. ◆ SetGridlines() [1/2]. void TRatioPlot::SetGridlines ; (; Double_t * ; gridlines, . Int_t ; numGridlines . ). virtual . Set where horizontal, dashed lines are drawn on the lower pad. ; Can be used to override existing default lines (or disable them).; Parameters. gridlinesDouble_t array of y positions for the dashed lines ; numGridlinesLength of gridlines . Definition at line 1682 of file TRatioPlot.cxx. ◆ SetGridlines() [2/2]. void TRatioPlot::SetGridlines ; (; std::vector< double > ; gridlines). virtual . Set where horizontal, dashed lines are drawn on the lower pad. ; Can be used to override existing default lines (or disable them).; Parameters. gridlinesVector of y positions for the dashes lines. ; void ratioplot4() {; gStyle->SetOptStat(0);; auto c1 = new TCanvas(""c1"", ""fit residual simple"");; auto h1 = new TH1D(""h1"", ""h1"", 50, -5, 5);; h1->FillRandom(""gaus"", 2000);; h1->Fit(""gaus"", ""0"");; h1->GetXaxis()->SetTitle(""x"");; h1->GetYaxis()->SetTitle(""y"");; auto rp1 = new TRatioPlot(h1);; std::vector<double> lines = {-3, -2, -1, 0, 1, 2, 3};; rp1->SetGridlines(lines);; rp1->Draw();; rp1->GetLowerRefGraph()->SetMinimum(-4);; rp1->GetLowerRefGraph()->SetMaximum(4);; }; ratioplot4Definition ratioplot4.py:1; . Definition at line 1670 of file TRatioPlot.cxx. ◆ SetH1DrawOpt(). void TRatioPlot::SetH1DrawOpt ; (; Option_t * ; opt). Sets the drawing option for h1. ; Definition at line 353 of file TRatioPlot.cxx. ◆ SetH2DrawOpt(). void TRatioPlot::SetH2DrawOpt ; (; Option_t * ; opt). Sets the drawing option for h2. ; Definition at line 361 of file TRatioPlot.cxx. ◆ SetInsetWidth(). void TRatioPlot::SetInsetWidth ; (; Double_t ; width). Set the inset on the outer sides of all the pads. ; It's used to make the outer pad draggable. ; Definition at line 1632 of file TRatioPlot.cxx. ◆ SetLeftMargin(). void TRatioPlot::SetLeftMargin ; (; Float_t ; margin). Sets the left margin of both pads. ; Parameters. marginThe new margin . Definition at line ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRatioPlot.html:39430,simpl,simple,39430,doc/master/classTRatioPlot.html,https://root.cern,https://root.cern/doc/master/classTRatioPlot.html,1,['simpl'],['simple']
Usability,"at this box have to be aligned with the local coordinates;; Algorithms for dividing the shape along a given axis. The modeller currently provides a set of 20 basic shapes, which we will call primitives. It also provides a special class allowing the creation of shapes as a result of Boolean operations between primitives. These are called composite shapes and the composition operation can be recursive (combined composites). This allows the creation of a quite large number of different shape topologies and combinations. You can have a look and run the tutorial: http://root.cern.ch/root/html/examples/geodemo.C.html. Primitive Shapes - the general inheritance scheme. Shapes are named objects and all primitives have constructors like:; TGeoXXX(const char *name,<type> param1,<type> param2, ...);; TGeoXXX(<type> param1,<type> param2, ...);; Naming shape primitive is mandatory only for the primitives used in Boolean composites (see “Composite Shapes”). For the sake of simplicity, we will describe only the constructors in the second form.; 18.3.1 Units; The length units used in the geometry are arbitrary. However, there are certain functionalities that work with the assumption that the used lengths are expressed in centimeters. This is the case for shape capacity or volume weight computation. The same is valid when using the ROOT geometry as navigator for an external transport MC package (e.g. GEANT) via the VMC interface.; Other units in use: All angles used for defining rotation matrices or some shape parameters are expressed in degrees. Material density is expressed in [g/cm3].; 18.3.2 Primitive Shapes; 18.3.2.1 Boxes - TGeoBBox Class; Normally a box has to be built only with 3 parameters: DX,DY,DZ representing the half-lengths on X, Y and Z-axes. In this case, the origin of the box will match the one of its reference frame and the box will range from: -DX to DX on X-axis, from -DY to DY on Y and from -DZ to DZ on Z. On the other hand, any other shape needs to compute and s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:898492,simpl,simplicity,898492,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['simpl'],['simplicity']
Usability,"at to indicate of Method Transformations have been optained yet or not (normally done in MethodBase::TrainMethod); TStringfOptimizationFitTypewhich type of optimisation procedure to be used; map<TString,TMVA::Interval*>fTuneParametersparameters included in the tuning; map<TString,Double_t>fTunedParametersparameters included in the tuning. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; OptimizeConfigParameters(TMVA::MethodBase*const method, map<TString,TMVA::Interval*> tuneParameters, TString fomType = ""Separation"", TString optimizationType = ""GA""); Constructor which sets either ""Classification or Regression"". ~OptimizeConfigParameters(); the destructor (delete the OptimizeConfigParameters, store the graph and .. delete it). std::map<TString,Double_t> optimize(). std::vector< int > GetScanIndices(int val, vector<int> base); helper function to scan through the all the combinations in the; parameter space. void optimizeScan(); do the actual optimization using a simple scan method,; i.e. calcualte the FOM for; different tuning paraemters and remember which one is; gave the best FOM. void optimizeFit(); ranges (intervals) in which the fit varies the parameters. Double_t EstimatorFunction(vector<Double_t>& ); return the estimator (from current FOM) for the fitting interface. Double_t GetFOM(); Return the Figure of Merit (FOM) used in the parameter; optimization process. void GetMVADists(); fill the private histograms with the mva distributinos for sig/bkg. Double_t GetSeparation(); return the searation between the signal and background; MVA ouput distribution. Double_t GetROCIntegral(); calculate the area (integral) under the ROC curve as a; overall quality measure of the classification. makeing pdfs out of the MVA-ouput distributions doesn't work; reliably for cases where the MVA-ouput isn't a smooth distribution.; this happens ""frequently"" in BDTs for example when the number of; trees is small resulting in only some discrete p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__OptimizeConfigParameters.html:3467,simpl,simple,3467,root/html602/TMVA__OptimizeConfigParameters.html,https://root.cern,https://root.cern/root/html602/TMVA__OptimizeConfigParameters.html,4,['simpl'],['simple']
Usability,"at we have already created.; chamber->AddNode(wire_co, 1, new TGeoTranslation(-0.2,0,0));; chamber->AddNode(wire_co, 2, new TGeoTranslation(0.2,0,0));; TGeoTranslationClass describing translations.Definition TGeoMatrix.h:116; The 2 nodes that we have created inside chamber will both point to a wire_co object, but will be completely distinct : WIRE_CO_1 and WIRE_CO_2. We will want now to place symmetrically 1000 chambers on a pad, following a pattern of 20 rows and 50 columns. One way to do this will be to replicate our chamber by positioning it 1000 times in different positions of the pad. Unfortunately, this is far from being the optimal way of doing what we want. Imagine that we would like to find out which of the 1000 chambers is containing a (x,y,z) point defined in the pad reference. You will never have to do that, since the modeller will take care of it for you, but let's guess what it has to do. The most simple algorithm will just loop over all daughters, convert the point from mother to local reference and check if the current chamber contains the point or not. This might be efficient for pads with few chambers, but definitely not for 1000. Fortunately the modeler is smarter than that and create for each volume some optimization structures called voxels (see Voxelization) to minimize the penalty having too many daughters, but if you have 100 pads like this in your geometry you will anyway loose a lot in your tracking performance.; The way out when volumes can be arranged according to simple patterns is the usage of divisions. We will describe them in detail later on. Let's think now at a different situation : instead of 1000 chambers of the same type, we may have several types of chambers. Let's say all chambers are cylindrical and have a wire inside, but their dimensions are different. However, we would like all to be represented by a single volume family, since they have the same properties. ; Definition at line 43 of file TGeoVolume.h. Public Types; enum ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoVolume.html:10372,simpl,simple,10372,doc/master/classTGeoVolume.html,https://root.cern,https://root.cern/doc/master/classTGeoVolume.html,1,['simpl'],['simple']
Usability,"at::ELimit limits = kNELNoLimits, Double_t min = 0, Double_t max = 1); virtual~TGNumberEntry(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual voidAssociate(const TGWindow* w); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(); Bool_tTQObject::Disconnect(const char* signal = 0, void* receive",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGNumberEntry.html:4082,Clear,Clear,4082,root/html532/TGNumberEntry.html,https://root.cern,https://root.cern/root/html532/TGNumberEntry.html,2,['Clear'],['Clear']
Usability,"ata is empty the specified file is sent over.; If there is no specified file, a file named ""inputdata.root"" is created locally; with the content of fInputData and sent over to the master.; If both fInputData and the specified file are not empty, a copy of the file; is made locally and augmented with the content of fInputData. void PrepareInputDataFile(TString& dataFile); Prepare the file with the input data objects to be sent the master; the; objects are taken from the dedicated list and / or the specified file.; If the fInputData is empty the specified file is sent over.; If there is no specified file, a file named ""inputdata.root"" is created locally; with the content of fInputData and sent over to the master.; If both fInputData and the specified file are not empty, a copy of the file; is made locally and augmented with the content of fInputData. void AddInput(TObject* obj); Add objects that might be needed during the processing of; the selector (see Process()). void ClearInput(); Clear input object list. TList * GetInputList(); Get input list. TObject * GetOutput(const char* name); Get specified object that has been produced during the processing; (see Process()). TList * GetOutputList(); Get list with all object created during processing (see Process()). void SetParameter(const char* par, const char* value); Set input list parameter. If the parameter is already; set it will be set to the new value. void SetParameter(const char* par, Int_t value); Set an input list parameter. void SetParameter(const char* par, Long_t value); Set an input list parameter. void SetParameter(const char* par, Long64_t value); Set an input list parameter. void SetParameter(const char* par, Double_t value); Set an input list parameter. TObject * GetParameter(const char* par) const; Get specified parameter. A parameter set via SetParameter() is either; a TParameter or a TNamed or 0 in case par is not defined. void DeleteParameters(const char* wildcard); Delete the input list parameters s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TProof.html:73990,Clear,ClearInput,73990,root/html532/TProof.html,https://root.cern,https://root.cern/root/html532/TProof.html,2,['Clear'],"['Clear', 'ClearInput']"
Usability,"ata is empty the specified file is sent over.; If there is no specified file, a file named ""inputdata.root"" is created locally; with the content of fInputData and sent over to the master.; If both fInputData and the specified file are not empty, a copy of the file; is made locally and augmented with the content of fInputData. void PrepareInputDataFile(TString& dataFile); Prepare the file with the input data objects to be sent the master; the; objects are taken from the dedicated list and / or the specified file.; If the fInputData is empty the specified file is sent over.; If there is no specified file, a file named ""inputdata.root"" is created locally; with the content of fInputData and sent over to the master.; If both fInputData and the specified file are not empty, a copy of the file; is made locally and augmented with the content of fInputData. void AddInput(TObject* obj); Add objects that might be needed during the processing of; the selector (see Process()). void ClearInput(); Clear input object list. TList * GetInputList(); Get input list. TObject * GetOutput(const char* name); Get specified object that has been produced during the processing; (see Process()). TObject * GetOutput(const char* name, TList* out); Find object 'name' in list 'out' or in the files specified in there. TList * GetOutputList(); Get list with all object created during processing (see Process()). void SetParameter(const char* par, const char* value); Set input list parameter. If the parameter is already; set it will be set to the new value. void SetParameter(const char* par, Int_t value); Set an input list parameter. void SetParameter(const char* par, Long_t value); Set an input list parameter. void SetParameter(const char* par, Long64_t value); Set an input list parameter. void SetParameter(const char* par, Double_t value); Set an input list parameter. TObject * GetParameter(const char* par) const; Get specified parameter. A parameter set via SetParameter() is either; a TParameter or a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProof.html:83907,Clear,ClearInput,83907,root/html534/TProof.html,https://root.cern,https://root.cern/root/html534/TProof.html,6,['Clear'],"['Clear', 'ClearInput']"
Usability,"ata& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidclearConvolutionWindow(); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); RooNumIntConfig&convIntConfig(); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdAr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooNumConvPdf.html:4794,clear,clearEvalError,4794,root/html532/RooNumConvPdf.html,https://root.cern,https://root.cern/root/html532/RooNumConvPdf.html,2,['clear'],['clearEvalError']
Usability,"ata& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidclearConvolutionWindow(); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); RooNumIntConfig&convIntConfig(); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooNumConvPdf.html:4794,clear,clearEvalError,4794,root/html528/RooNumConvPdf.html,https://root.cern,https://root.cern/root/html528/RooNumConvPdf.html,1,['clear'],['clearEvalError']
Usability,"ata& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidclearConvolutionWindow(); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); RooNumIntConfig&convIntConfig(); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooNumConvPdf.html:4794,clear,clearEvalError,4794,root/html530/RooNumConvPdf.html,https://root.cern,https://root.cern/root/html530/RooNumConvPdf.html,1,['clear'],['clearEvalError']
Usability,"ata; 1003. user interface running in all browsers; 101 ; 102To start http server simply create instance; 103of the THttpServer class like:; 104 ; 105 serv = new THttpServer(""http:8080"");; 106 ; 107This will starts civetweb-based http server with http port 8080.; 108Than one should be able to open address ""http://localhost:8080""; 109in any modern web browser (Firefox, Chrome, Opera, ...) and browse objects,; 110created in ROOT application. By default, server can access files,; 111canvases and histograms via `gROOT` pointer. All such objects; 112can be displayed with JSROOT graphics.; 113 ; 114At any time one could register other objects with the command:; 115 ; 116 TGraph* gr = new TGraph(10);; 117 gr->SetName(""gr1"");; 118 serv->Register(""graphs/subfolder"", gr);; 119 ; 120If objects content is changing in the application, one could; 121enable monitoring flag in the browser - than objects view; 122will be regularly updated.; 123 ; 124More information: https://root.cern/root/htmldoc/guides/HttpServer/HttpServer.html; 125*/; 126 ; 127ClassImp(THttpServer);; 128 ; 129////////////////////////////////////////////////////////////////////////////////; 130/// constructor; 131///; 132/// As argument, one specifies engine kind which should be; 133/// created like ""http:8080"". One could specify several engines; 134/// at once, separating them with semicolon ("";""). Following engines are supported:; 135///; 136/// http - TCivetweb, civetweb-based implementation of http protocol; 137/// fastcgi - TFastCgi, special protocol for communicating with web servers; 138///; 139/// For each created engine one should provide socket port number like ""http:8080"" or ""fastcgi:9000"".; 140/// Additional engine-specific options can be supplied with URL syntax like ""http:8080?thrds=10"".; 141/// Full list of supported options should be checked in engines docu.; 142///; 143/// One also can configure following options, separated by semicolon:; 144///; 145/// readonly, ro - set read-only mode (default); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THttpServer_8cxx_source.html:3719,guid,guides,3719,doc/master/THttpServer_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THttpServer_8cxx_source.html,1,['guid'],['guides']
Usability,"ata;; 377 ; 378 if (isSignal); 379 {; 380 for (size_t n = 0; n <= binROC; ++n); 381 {; 382 truePositives.at (n) += weight;; 383 }; 384 for (size_t n = binROC+1; n < numBinsROC; ++n); 385 {; 386 falseNegatives.at (n) += weight;; 387 }; 388 ; 389 datSig.at (binData) += weight;; 390 sumWeightsSig += weight;; 391 }; 392 else; 393 {; 394 for (size_t n = 0; n <= binROC; ++n); 395 {; 396 falsePositives.at (n) += weight;; 397 }; 398 for (size_t n = binROC+1; n < numBinsROC; ++n); 399 {; 400 trueNegatives.at (n) += weight;; 401 }; 402 ; 403 datBkg.at (binData) += weight;; 404 sumWeightsBkg += weight;; 405 }; 406 }; 407 ; 408 std::vector<double> sigEff;; 409 std::vector<double> backRej;; 410 ; 411 double bestSignificance = 0;; 412 double bestCutSignificance = 0;; 413 ; 414 double numEventsScaleFactor = 1.0;; 415 if (m_scaleToNumEvents > 0); 416 {; 417 size_t numEvents = m_output.size ();; 418 numEventsScaleFactor = double (m_scaleToNumEvents)/double (numEvents);; 419 }; 420 ; 421 clear (""ROC"");; 422 clear (""Significance"");; 423 ; 424 for (size_t i = 0; i < numBinsROC; ++i); 425 {; 426 double tp = truePositives.at (i) * numEventsScaleFactor;; 427 double fp = falsePositives.at (i) * numEventsScaleFactor;; 428 double tn = trueNegatives.at (i) * numEventsScaleFactor;; 429 double fn = falseNegatives.at (i) * numEventsScaleFactor;; 430 ; 431 double seff = (tp+fn == 0.0 ? 1.0 : (tp / (tp+fn)));; 432 double brej = (tn+fp == 0.0 ? 0.0 : (tn / (tn+fp)));; 433 ; 434 sigEff.push_back (seff);; 435 backRej.push_back (brej);; 436 ; 437 // m_histROC->Fill (seff, brej);; 438 addPoint (""ROC"", seff, brej); // x, y; 439 ; 440 ; 441 double currentCut = (i * binSizeROC)+minVal;; 442 ; 443 double sig = tp;; 444 double bkg = fp;; 445 double significance = sig / sqrt (sig + bkg);; 446 if (significance > bestSignificance); 447 {; 448 bestSignificance = significance;; 449 bestCutSignificance = currentCut;; 450 }; 451 ; 452 addPoint (""Significance"", currentCut, significance);; 453 // m_histSignificance-",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8cxx_source.html:14925,clear,clear,14925,doc/master/NeuralNet_8cxx_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8cxx_source.html,2,['clear'],['clear']
Usability,"ataSB.Size(), True); 114result = fitter.Result(); 115result.Print(ROOT.std.cout); 116 ; 117c1 = ROOT.TCanvas(""Simfit"", ""Simultaneous fit of two histograms"", 10, 10, 700, 700); 118c1.Divide(1, 2); 119c1.cd(1); 120ROOT.gStyle.SetOptFit(1111); 121 ; 122fB.SetFitResult(result, iparB); 123fB.SetRange(rangeB().first, rangeB().second); 124fB.SetLineColor(ROOT.kBlue); 125hB.GetListOfFunctions().Add(fB); 126hB.Draw(); 127 ; 128c1.cd(2); 129fSB.SetFitResult(result, iparSB); 130fSB.SetRange(rangeSB().first, rangeSB().second); 131fSB.SetLineColor(ROOT.kRed); 132hSB.GetListOfFunctions().Add(fSB); 133hSB.Draw(); 134 ; 135c1.SaveAs(""combinedFit.png""); ROOT::Fit::BinDataClass describing the binned data sets : vectors of x coordinates, y values and optionally error on y ...Definition BinData.h:52; ROOT::Fit::Chi2FCNChi2FCN class for binned fits using the least square methods.Definition Chi2FCN.h:46; ROOT::Fit::DataRangeclass describing the range in the coordinates it supports multiple range in a coordinate.Definition DataRange.h:35; ROOT::Fit::FitterFitter class, entry point for performing all type of fits.Definition Fitter.h:77; ROOT::Math::FunctorDocumentation for class Functor class.Definition Functor.h:47; ROOT::Math::WrappedMultiTF1TemplClass to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions...Definition WrappedMultiTF1.h:48; object; ROOT::Fit::FillDatavoid FillData(BinData &dv, const TH1 *hist, TF1 *func=nullptr)fill the data vector from a TH1.Definition HFitInterface.cxx:107; TMatrixTAutoloadOps::AddTMatrixT< Element > & Add(TMatrixT< Element > &target, Element scalar, const TMatrixT< Element > &source)Modify addition: target += scalar * source.Definition TMatrixT.cxx:2936; ROOT::Fit::DataOptionsDataOptions : simple structure holding the options on how the data are filled.Definition DataOptions.h:28. tutorialsfitcombinedFit.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:07 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/combinedFit_8py_source.html:5174,simpl,simple,5174,doc/master/combinedFit_8py_source.html,https://root.cern,https://root.cern/doc/master/combinedFit_8py_source.html,1,['simpl'],['simple']
Usability,"ataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tcheckObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; const RooArgList&coefList() const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), const RooCmdArg arg5 = RooCmdArg::none(), const RooCmdArg arg6 = RooCmdArg:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAddPdf.html:3776,clear,clearShapeDirty,3776,root/html526/RooAddPdf.html,https://root.cern,https://root.cern/root/html526/RooAddPdf.html,2,['clear'],['clearShapeDirty']
Usability,"ataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tcheckObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), const RooCmdArg arg5 = RooCmdArg::none(), const RooCmdArg arg6 = RooCmdArg::none(), const RooCmdArg arg7 = Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooProdPdf.html:4222,clear,clearShapeDirty,4222,root/html526/RooProdPdf.html,https://root.cern,https://root.cern/root/html526/RooProdPdf.html,1,['clear'],['clearShapeDirty']
Usability,"ataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tcanBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidclearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsPdf.html:6394,clear,clearEvalErrorLog,6394,root/html528/RooAbsPdf.html,https://root.cern,https://root.cern/root/html528/RooAbsPdf.html,2,['clear'],['clearEvalErrorLog']
Usability,"ataSet::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTDataSet::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidAddElement(const char* path, TTable::EColumnType type); voidTDataSet::AddMain(TDataSet* set); voidAddResponse(const char* chit); voidAddVolumePath(const char* path); Bool_tTTable::BoundsOk(const char* where, Int_t at) const; virtual voidTTable::Clear(Option_t* opt = """"); voidTTable::CopyStruct(Char_t* dest, const Char_t* src); Char_t*TTable::Create(); virtual voidTTable::Delete(Option_t* opt = """"); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual Bool_tTTable::EntryLoop(const Char_t* exprFileName, Int_t& action, TObject* obj, Int_t nentries = 1000000000, Int_t firstentry = 0, Option_t* option = """"); virtual TTableDescriptor*TGenericTable::GetDescriptorPointer() const; TDataSet*TDataSet::GetRealParent(); voidTDataSet::MakeCollection(); voidTObject::MakeZombie(); Bool_tTTable::OutOfBoundsError(const char* where, Int_t i) const; voidTTable::ReAlloc(Int_t newsize); virtual voidTGenericTable::SetDescriptorPointer(TTableDescriptor* list); Int_tTTable::SetfN(Long_t len); voidTGenericTable::SetGenericType(); virtual voidTDataSet::SetMother(TObject* mother); voidTTable::SetTablePointer(void* table); virtual voidTTable::SetType(const char *const type); voidTTable::SetUsedRows(Int_t n); static TDataSet::EDataSetPassTDataSet::SortIt(TDataSet* ds); static TDataSet::EDataSetPassTDataSet::SortIt(TDataSet* ds, void* user); voidTTable::StreamerHeader(TBuffer& b, Version_t version = 3); voidTTable::StreamerTable(TBuffer& b, Version_t version = 3); static const char*TTable::TableDictionary(const char* className, const char* structName, TTableDescriptor*& ColDescriptors). Data Members; public:. enum TTable::EColumnType { kNAN; kFloat; kInt; kLong; kShort; kDouble; kUInt; kULong; kUShort; kUChar; kChar; kPtr; kBool; kEndColumnType; };; enum TTable::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TResponseTable.html:11823,Clear,Clear,11823,root/html532/TResponseTable.html,https://root.cern,https://root.cern/root/html532/TResponseTable.html,2,['Clear'],['Clear']
Usability,"ataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tcanBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidclearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsPdf.html:6470,clear,clearValueDirty,6470,root/html528/RooAbsPdf.html,https://root.cern,https://root.cern/root/html528/RooAbsPdf.html,2,['clear'],['clearValueDirty']
Usability,"atchGenerator_NumPy.py;   Example of getting batches of events from a ROOT dataset as Python generators of numpy arrays. ;  ;  RBatchGenerator_PyTorch.py;   Example of getting batches of events from a ROOT dataset into a basic PyTorch workflow. ;  ;  RBatchGenerator_TensorFlow.py;   Example of getting batches of events from a ROOT dataset into a basic TensorFlow workflow. ;  ;  tmva001_RTensor.C;   This tutorial illustrates the basic features of the RTensor class, RTensor is a std::vector-like container with additional shape information. ;  ;  tmva002_RDataFrameAsTensor.C;   This tutorial shows how the content of an RDataFrame can be converted to an RTensor object. ;  ;  tmva003_RReader.C;   This tutorial shows how to apply with the modern interfaces models saved in TMVA XML files. ;  ;  tmva004_RStandardScaler.C;   This tutorial illustrates the usage of the standard scaler as preprocessing method. ;  ;  tmva100_DataPreparation.py;   This tutorial illustrates how to prepare ROOT datasets to be nicely readable by most machine learning methods. ;  ;  tmva101_Training.py;   This tutorial show how you can train a machine learning model with any package reading the training data directly from ROOT files. ;  ;  tmva102_Testing.py;   This tutorial illustrates how you can test a trained BDT model using the fast tree inference engine offered by TMVA and external tools such as scikit-learn. ;  ;  tmva103_Application.C;   This tutorial illustrates how you can conveniently apply BDTs in C++ using the fast tree inference engine offered by TMVA. ;  ;  TMVA_CNN_Classification.C;   TMVA Classification Example Using a Convolutional Neural Network ;  ;  TMVA_CNN_Classification.py;   TMVA Classification Example Using a Convolutional Neural Network ;  ;  TMVA_Higgs_Classification.C;   Classification example of TMVA based on public Higgs UCI dataset ;  ;  TMVA_Higgs_Classification.py;   Classification example of TMVA based on public Higgs UCI dataset ;  ;  TMVA_RNN_Classification.C;   T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/dir_afb41fc0ce910d0ed999b271277cf431.html:1492,learn,learning,1492,doc/master/dir_afb41fc0ce910d0ed999b271277cf431.html,https://root.cern,https://root.cern/doc/master/dir_afb41fc0ce910d0ed999b271277cf431.html,1,['learn'],['learning']
Usability,"atched from external scripts. ; Definition at line 587 of file RBrowser.cxx. ◆ AddInitWidget(). void RBrowser::AddInitWidget ; (; const std::string & ; kind). protected . Create new widget and send init message to the client. ; Definition at line 606 of file RBrowser.cxx. ◆ AddRCanvas(). void ROOT::RBrowser::AddRCanvas ; (; ). inline . Definition at line 86 of file RBrowser.hxx. ◆ AddTCanvas(). void ROOT::RBrowser::AddTCanvas ; (; ). inline . Definition at line 85 of file RBrowser.hxx. ◆ AddWidget(). std::shared_ptr< RBrowserWidget > RBrowser::AddWidget ; (; const std::string & ; kind). protected . Creates new widget. ; Definition at line 555 of file RBrowser.cxx. ◆ CheckWidgtesModified(). void RBrowser::CheckWidgtesModified ; (; unsigned ; connid). protected . Check if any widget was modified and update if necessary. ; Definition at line 766 of file RBrowser.cxx. ◆ ClearOnClose(). void RBrowser::ClearOnClose ; (; const std::shared_ptr< void > & ; handle). Set handle which will be cleared when connection is closed. ; Definition at line 1001 of file RBrowser.cxx. ◆ CloseTab(). void RBrowser::CloseTab ; (; const std::string & ; name). protected . Close and delete specified widget. ; Definition at line 632 of file RBrowser.cxx. ◆ FindWidget(). std::shared_ptr< RBrowserWidget > RBrowser::FindWidget ; (; const std::string & ; name, . const std::string & ; kind = """" . ); const. protected . Find widget by name or kind. ; Definition at line 616 of file RBrowser.cxx. ◆ GetActiveWidget(). std::shared_ptr< RBrowserWidget > ROOT::RBrowser::GetActiveWidget ; (; ); const. inlineprotected . Definition at line 54 of file RBrowser.hxx. ◆ GetCatchWindowShow(). bool ROOT::RBrowser::GetCatchWindowShow ; (; ); const. inline . Is RWebWindow::Show calls catched for embeding of created widgets. ; Definition at line 102 of file RBrowser.hxx. ◆ GetCurrentWorkingDirectory(). std::string RBrowser::GetCurrentWorkingDirectory ; (; ). protected . Return the current directory of ROOT. ; Definition",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RBrowser.html:6492,clear,cleared,6492,doc/master/classROOT_1_1RBrowser.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RBrowser.html,1,['clear'],['cleared']
Usability,"ate . Definition at line 287 of file RCsvDS.cxx. ◆ SetEntry(). bool ROOT::RDF::RCsvDS::SetEntry ; (; unsigned int ; slot, . ULong64_t ; entry . ). finalvirtual . Advance the ""cursors"" returned by GetColumnReaders to the selected entry for a particular slot. ; Parameters. [in]slotThe data processing slot that needs to be considered ; [in]entryThe entry which needs to be pointed to by the reader pointers Slots are adopted to accommodate parallel data processing. Different workers will loop over different ranges and will be labelled by different ""slot"" values. Returns true if the entry has to be processed, false otherwise. . Implements ROOT::RDF::RDataSource.; Definition at line 505 of file RCsvDS.cxx. ◆ SetNSlots(). void ROOT::RDF::RCsvDS::SetNSlots ; (; unsigned int ; nSlots). finalvirtual . Inform RDataSource of the number of processing slots (i.e. ; worker threads) used by the associated RDataFrame. Slots numbers are used to simplify parallel execution: RDataFrame guarantees that different threads will always pass different slot values when calling methods concurrently. ; Implements ROOT::RDF::RDataSource.; Definition at line 536 of file RCsvDS.cxx. ◆ ValidateColTypes(). void ROOT::RDF::RCsvDS::ValidateColTypes ; (; std::vector< std::string > & ; columns); const. private . Definition at line 203 of file RCsvDS.cxx. Member Data Documentation. ◆ fBoolEvtValues. std::vector<std::deque<bool> > ROOT::RDF::RCsvDS::fBoolEvtValues. private . Definition at line 64 of file RCsvDS.hxx. ◆ fColAddresses. std::vector<std::vector<void *> > ROOT::RDF::RCsvDS::fColAddresses. private . Definition at line 57 of file RCsvDS.hxx. ◆ fColContainingEmpty. std::set<std::string> ROOT::RDF::RCsvDS::fColContainingEmpty. private . Definition at line 55 of file RCsvDS.hxx. ◆ fColTypes. std::unordered_map<std::string, ColType_t> ROOT::RDF::RCsvDS::fColTypes. private . Definition at line 54 of file RCsvDS.hxx. ◆ fColTypesList. std::list<ColType_t> ROOT::RDF::RCsvDS::fColTypesList. private . Defin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDF_1_1RCsvDS.html:13940,simpl,simplify,13940,doc/master/classROOT_1_1RDF_1_1RCsvDS.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RCsvDS.html,1,['simpl'],['simplify']
Usability,"ate input values to each neuron. void PrintMessage(TString message, Bool_t force = kFALSE) const; print messages, turn off printing by setting verbose and debug flag appropriately. void WaitForKeyboard(); wait for keyboard input, for debugging. void PrintNetwork() const; print network representation, for debugging. void PrintLayer(TObjArray* layer) const; print a single layer, for debugging. void PrintNeuron(TMVA::TNeuron* neuron) const; print a neuron, for debugging. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); get the mva value generated by the NN. const std::vector<Float_t> & GetRegressionValues(); get the regression value generated by the NN. const std::vector<Float_t> & GetMulticlassValues(); get the multiclass classification values generated by the NN. void AddWeightsXMLTo(void* parent) const; create XML description of ANN classifier. void ReadWeightsFromXML(void* wghtnode); read MLP from xml weight file. void ReadWeightsFromStream(istream& istr); destroy/clear the network then read it back in from the weights file. const TMVA::Ranking* CreateRanking(); compute ranking of input variables by summing function of weights. void CreateWeightMonitoringHists(const TString& bulkname, vector<TH1*>* hv = 0) const. void WriteMonitoringHistosToFile() const; write histograms to file. void MakeClassSpecific(ostream& , const TString& ) const; write specific classifier response. Bool_t Debug() const; who the hell makes such strange Debug flags that even use ""global pointers"".. MethodANNBase(const TString& jobName, TMVA::Types::EMVA methodType, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption, TDirectory* theTargetDir); constructors dictated by subclassing off of MethodBase. void SetActivation(TMVA::TActivation* activation); setters for subclasses. void SetNeuronInputCalculator(TMVA::TNeuronInput* inputCalculator). void Train(); this will have to be overridden by every subclass. Double_t GetNetworkOutput(); { return GetOutputN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MethodANNBase.html:23650,clear,clear,23650,root/html602/TMVA__MethodANNBase.html,https://root.cern,https://root.cern/root/html602/TMVA__MethodANNBase.html,4,['clear'],['clear']
Usability,"ate input values to each neuron. void PrintMessage(TString message, Bool_t force = kFALSE) const; print messages, turn off printing by setting verbose and debug flag appropriately. void WaitForKeyboard(); wait for keyboard input, for debugging. void PrintNetwork() const; print network representation, for debugging. void PrintLayer(TObjArray* layer) const; print a single layer, for debugging. void PrintNeuron(TMVA::TNeuron* neuron) const; print a neuron, for debugging. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); get the mva value generated by the NN. const std::vector<Float_t> & GetRegressionValues(); get the regression value generated by the NN. const std::vector<Float_t> & GetMulticlassValues(); get the multiclass classification values generated by the NN. void AddWeightsXMLTo(void* parent) const; create XML description of ANN classifier. void ReadWeightsFromXML(void* wghtnode); read MLP from xml weight file. void ReadWeightsFromStream(istream& istr); destroy/clear the network then read it back in from the weights file. const TMVA::Ranking* CreateRanking(); compute ranking of input variables by summing function of weights. void CreateWeightMonitoringHists(const TString& bulkname, vector<TH1*>* hv = 0) const. void WriteMonitoringHistosToFile() const; write histograms to file. void MakeClassSpecific(ostream& , const TString& ) const; write specific classifier response. Bool_t Debug() const; who the hell makes such strange Debug flags that even use ""global pointers"".. void SetActivation(TMVA::TActivation* activation); setters for subclasses. void SetNeuronInputCalculator(TMVA::TNeuronInput* inputCalculator). void Train(); this will have to be overridden by every subclass. Double_t GetNetworkOutput(); { return GetOutputNeuron()->GetActivationValue(); }. Int_t NumCycles(); accessors. { return fNcycles; }. TNeuron* GetInputNeuron(Int_t index); { return (TNeuron*)fInputLayer->At(index); }. TNeuron* GetOutputNeuron(Int_t index = 0); { return fOutputNeur",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodANNBase.html:20899,clear,clear,20899,root/html528/TMVA__MethodANNBase.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodANNBase.html,6,['clear'],['clear']
Usability,"ate instance of TSQLStatement class, TSQLServer::Statement() method; should be used. Depending of the driver, used for connection to ODBC,; appropriate object instance will be created. For the moment there are; three different implementation of TSQLStatement class: for MySQL,; Oracle and ODBC. Hopefully, support of ODBC will allows usage of; statements for most existing RDBMS. // first connect to data base; TSQLServer* serv = TSQLServer::Connect(""mysql://hostname.domain:3306/test"",; ""user"", ""pass"");; // check if connection is ok; if ((serv!=0) && serv->IsConnected()) {; // create statement instance; TSQLStatement* stmt = serv->Statement(""CREATE TABLE TESTTABLE (ID1 INT, ID2 INT, FFIELD VARCHAR(255), FVALUE VARCHAR(255))"";; // process statement; stmt->Process();; // destroy object; delete stmt;; }; delete serv;. 2. Insert data to data base. There is a special syntax of SQL queries, which allow to use values,; provided as parameters. For instance, insert one row in TESTTABLE, created; with previous example, one can simply execute query like:. serv->Query(""INSERT INTO TESTTABLE VALUES (1, 2, \""name1\"", \""value1\"""");. But when many (100-1000) rows should be inserted, each call of; TSQLServer::Query() method will cause communication loop with database; server. As a result, insertion of data will takes too much time. TSQLStatement provides a mechanism to insert many rows at once. First of all,; appropriate statement should be created:. TSQLStatement* stmt = serv->Statement(""INSERT INTO TESTTABLE (ID1, ID2, FFIELD, FVALUE) VALUES (?, ?, ?, ?)"", 100);. Here question marks ""?"" indicates where statement parameters can be inserted.; To specify values of parameters, SetInt(), SetDouble(), SetString() and other; methods of TSQLStatement class should be used. Before parameters values; can be specified, NextIteration() method of statement class should be called.; For each new row first, NextIteration() called, that parameters values are; specified. There is one limitation - once pa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSQLStatement.html:1881,simpl,simply,1881,root/html528/TSQLStatement.html,https://root.cern,https://root.cern/root/html528/TSQLStatement.html,4,['simpl'],['simply']
Usability,"ate one subbranch for each data member of; the object TTrack. ==> Case E. TBranch *branch = tree->Branch( branchname, STLcollection, buffsize, splitlevel);; STLcollection is the address of a pointer to std::vector, std::list,; std::deque, std::set or std::multiset containing pointers to objects.; If the splitlevel is a value bigger than 100 (TTree::kSplitCollectionOfPointers); then the collection will be written in split mode, e.g. if it contains objects of; any types deriving from TTrack this function will sort the objects; based on their type and store them in separate branches in split; mode. ==> branch->SetAddress(Void *address); In case of dynamic structures changing with each entry for example, one must; redefine the branch address before filling the branch again.; This is done via the TBranch::SetAddress member function. ==> tree->Fill(); loops on all defined branches and for each branch invokes the Fill function. See also the class TNtuple (a simple Tree with branches of floats); and the class TNtupleD (a simple Tree with branches of doubles). Adding a Branch to an Existing Tree. You may want to add a branch to an existing tree. For example,; if one variable in the tree was computed with a certain algorithm,; you may want to try another algorithm and compare the results.; One solution is to add a new branch, fill it, and save the tree.; The code below adds a simple branch to an existing tree.; Note the kOverwrite option in the Write method, it overwrites the; existing tree. If it is not specified, two copies of the tree headers; are saved. void tree3AddBranch(){; TFile f(""tree3.root"", ""update"");. Float_t new_v;; TTree *t3 = (TTree*)f->Get(""t3"");; TBranch *newBranch = t3->Branch(""new_v"", &new_v, ""new_v/F"");. //read the number of entries in the t3; Long64_t nentries = t3->GetEntries();. for (Long64_t i = 0; i < nentries; i++){; new_v= gRandom->Gaus(0, 1);; newBranch->Fill();; }; // save only the new version of the tree; t3->Write("""", TObject::kOverwrite);; }; A",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTree.html:7364,simpl,simple,7364,root/html534/TTree.html,https://root.cern,https://root.cern/root/html534/TTree.html,12,['simpl'],['simple']
Usability,"ate(). void TClonesArray::ExpandCreate ; (; Int_t ; n). virtual . Expand or shrink the array to n elements and create the clone objects by calling their default ctor. ; If n is less than the current size the array is shrunk and the allocated space is freed. This routine is typically used to create a clonesarray into which one can directly copy object data without going via the ""new (arr[i]) MyObj()"" (i.e. the vtbl is already set correctly). ; Definition at line 514 of file TClonesArray.cxx. ◆ ExpandCreateFast(). void TClonesArray::ExpandCreateFast ; (; Int_t ; n). virtual . Expand or shrink the array to n elements and create the clone objects by calling their default ctor. ; If n is less than the current size the array is shrunk but the allocated space is not freed. This routine is typically used to create a clonesarray into which one can directly copy object data without going via the ""new (arr[i]) MyObj()"" (i.e. the vtbl is already set correctly). This is a simplified version of ExpandCreate used in the TTree mechanism. ; Definition at line 558 of file TClonesArray.cxx. ◆ GetClass(). TClass * TClonesArray::GetClass ; (; ); const. inline . Definition at line 53 of file TClonesArray.h. ◆ IsA(). TClass * TClonesArray::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 83 of file TClonesArray.h. ◆ MultiSort(). void TClonesArray::MultiSort ; (; Int_t ; nTCs, . TClonesArray ** ; tcs, . Int_t ; upto = kMaxInt . ). Sort multiple TClonesArrays simultaneously with this array. ; If objects in array are sortable (i.e. IsSortable() returns true for all objects) then sort array. ; Definition at line 1061 of file TClonesArray.cxx. ◆ New(). TObject * TClonesArray::New ; (; Int_t ; idx). Create an object of type fClass with the default ctor at the specified index. ; Returns 0 in case of error. ; Definition at line 968 of file TClonesArray.cxx. ◆ operator=(). TClonesArray & TClonesArray::operator= ; (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClonesArray.html:37348,simpl,simplified,37348,doc/master/classTClonesArray.html,https://root.cern,https://root.cern/doc/master/classTClonesArray.html,1,['simpl'],['simplified']
Usability,"ateEditor(TClass* cl, Bool_t recurse); voidTGedEditor::ActivateEditors(TList* bcl, Bool_t recurse); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTVirtualPadEditor::Build(); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCloseWindow(); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidTGedEditor::ConnectToCanvas(TCanvas* c); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTVirtualPadEditor::DeleteEditors(); virtual voidDeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; static voidDestroyEditors()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TEveGedEditor.html:1631,Clear,Clear,1631,root/html532/TEveGedEditor.html,https://root.cern,https://root.cern/root/html532/TEveGedEditor.html,4,['Clear'],['Clear']
Usability,"ates the ""distance"" between two points; TMVA::Interval Interval definition, continous and discrete; TMVA::KDEKernel Kernel density estimator for PDF smoothing; TMVA::MCFitter Fitter using Monte Carlo sampling of parameters ; TMVA::MethodANNBase Base class for TMVA ANNs; TMVA::MethodBDT Analysis of Boosted Decision Trees; TMVA::MethodBase Virtual base class for all TMVA method; TMVA::MethodBayesClassifier Friedman's BayesClassifier method ; TMVA::MethodBoost ; TMVA::MethodCFMlpANN Interface for Clermond-Ferrand artificial neural network; TMVA::MethodCFMlpANN_Utils Implementation of Clermond-Ferrand artificial neural network; TMVA::MethodCommittee Analysis of Boosted MVA methods; TMVA::MethodCompositeBase ; TMVA::MethodCuts Multivariate optimisation of signal efficiency; TMVA::MethodDT Analysis of Decision Trees ; TMVA::MethodFDA Function Discriminant Analysis; TMVA::MethodFisher Analysis of Fisher discriminant (Fisher or Mahalanobis approach) ; TMVA::MethodHMatrix H-Matrix method, a simple comparison of chi-squared estimators for signal and background; TMVA::MethodKNN k Nearest Neighbour classifier; TMVA::MethodLD Linear discriminant analysis; TMVA::MethodLikelihood Likelihood analysis (""non-parametric approach"") ; TMVA::MethodMLP Multi-layer perceptron implemented specifically for TMVA; TMVA::MethodPDEFoam Analysis of PDEFoam discriminant (PDEFoam or Mahalanobis approach) ; TMVA::MethodPDERS Multi-dimensional probability density estimator range search (PDERS) method; TMVA::MethodRuleFit Friedman's RuleFit method; TMVA::MethodSVM Support Vector Machine; TMVA::MethodSeedDistance Function Discriminant Analysis; TMVA::MethodTMlpANN Implementation of interface for TMultiLayerPerceptron; TMVA::MetricEuler calculates the ""distance"" between two points; TMVA::MetricManhattan calculates the ""distance"" between two points; TMVA::MinuitFitter Fitter using a Genetic Algorithm; TMVA::MinuitWrapper Wrapper around TMinuit; TMVA::MisClassificationError Implementation of the MisClassif",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html524/ClassIndex.html:95412,simpl,simple,95412,root/html524/ClassIndex.html,https://root.cern,https://root.cern/root/html524/ClassIndex.html,1,['simpl'],['simple']
Usability,"ath(const char* libpath, Bool_t onClient = kFALSE, TList* wrks = 0); static voidTProof::AddEnvVar(const char* name, const char* value); voidTProof::AddFeedback(const char* name); Int_tTProof::AddIncludePath(const char* incpath, Bool_t onClient = kFALSE, TList* wrks = 0); voidTProof::AddInput(TObject* obj); voidTProof::AddInputData(TObject* obj, Bool_t push = kFALSE); virtual voidTObject::AppendPad(Option_t* option = """"); Int_tTProof::Archive(Int_t query, const char* url); Int_tTProof::Archive(const char* queryref, const char* url = 0); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTProof::Browse(TBrowser* b); voidTProof::cd(Int_t id = -1); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; Int_tTProof::CleanupSession(const char* sessiontag); virtual voidTNamed::Clear(Option_t* option = """"); virtual voidClearCache(const char* file = 0); voidTProof::ClearData(UInt_t what = kUnregistered, const char* dsname = 0); virtual voidClearDataSetCache(const char* dataset = 0); voidTProof::ClearFeedback(); voidTProof::ClearInput(); voidTProof::ClearInputData(TObject* obj = 0); voidTProof::ClearInputData(const char* name); Int_tTProof::ClearPackage(const char* package); Int_tTProof::ClearPackages(); virtual TObject*TNamed::Clone(const char* newname = """") const; voidTProof::Close(Option_t* option = """"); voidTProof::CloseProgressDialog()SIGNAL ; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTNamed::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TProofLite.html:1944,Clear,Clear,1944,root/html532/TProofLite.html,https://root.cern,https://root.cern/root/html532/TProofLite.html,1,['Clear'],['Clear']
Usability,"ath(const char* libpath, Bool_t onClient = kFALSE, TList* wrks = 0); static voidTProof::AddEnvVar(const char* name, const char* value); voidTProof::AddFeedback(const char* name); Int_tTProof::AddIncludePath(const char* incpath, Bool_t onClient = kFALSE, TList* wrks = 0); voidTProof::AddInput(TObject* obj); voidTProof::AddInputData(TObject* obj, Bool_t push = kFALSE); virtual voidTObject::AppendPad(Option_t* option = """"); Int_tTProof::Archive(Int_t query, const char* url); Int_tTProof::Archive(const char* queryref, const char* url = 0); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTProof::Browse(TBrowser* b); voidTProof::cd(Int_t id = -1); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; Int_tTProof::CleanupSession(const char* sessiontag); virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTProof::ClearCache(const char* file = 0); voidTProof::ClearData(UInt_t what = kUnregistered, const char* dsname = 0); virtual voidTProof::ClearDataSetCache(const char* dataset = 0); voidTProof::ClearFeedback(); voidTProof::ClearInput(); voidTProof::ClearInputData(TObject* obj = 0); voidTProof::ClearInputData(const char* name); Int_tTProof::ClearPackage(const char* package); Int_tTProof::ClearPackages(); virtual TObject*TNamed::Clone(const char* newname = """") const; voidTProof::Close(Option_t* option = """"); voidTProof::CloseProgressDialog()SIGNAL ; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTNamed::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* send",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TProofCondor.html:1953,Clear,Clear,1953,root/html532/TProofCondor.html,https://root.cern,https://root.cern/root/html532/TProofCondor.html,2,['Clear'],['Clear']
Usability,"ath::VirtualIntegratorMultiDim ; ROOT::Math::VirtualIntegratorOneDim ; ROOT::Math::WrappedMultiTF1 ; ROOT::Math::WrappedTF1 ; ROOT::MathMore ; ROOT::Minuit2::CombinedMinimizer ; ROOT::Minuit2::FCNBase ; ROOT::Minuit2::FCNGradientBase ; ROOT::Minuit2::FumiliFCNBase ; ROOT::Minuit2::FumiliMinimizer ; ROOT::Minuit2::FunctionMinimizer ; ROOT::Minuit2::FunctionMinimum ; ROOT::Minuit2::GenericFunction ; ROOT::Minuit2::MinosError ; ROOT::Minuit2::Minuit2Minimizer ; ROOT::Minuit2::MinuitParameter ; ROOT::Minuit2::MnApplication ; ROOT::Minuit2::MnContours ; ROOT::Minuit2::MnFumiliMinimize ; ROOT::Minuit2::MnHesse ; ROOT::Minuit2::MnMachinePrecision ; ROOT::Minuit2::MnMigrad ; ROOT::Minuit2::MnMinimize ; ROOT::Minuit2::MnMinos ; ROOT::Minuit2::MnPlot ; ROOT::Minuit2::MnScan ; ROOT::Minuit2::MnSimplex ; ROOT::Minuit2::MnStrategy ; ROOT::Minuit2::MnUserParameterState ; ROOT::Minuit2::MnUserParameters ; ROOT::Minuit2::ModularFunctionMinimizer ; ROOT::Minuit2::ScanMinimizer ; ROOT::Minuit2::SimplexMinimizer ; ROOT::Minuit2::VariableMetricMinimizer ; ROOT::TArrayProxy<ROOT::TArrayType<Long64_t,0> > ; ROOT::TArrayProxy<ROOT::TArrayType<ULong64_t,0> > ; ROOT::TArrayProxy<ROOT::TArrayType<bool,0> > ; ROOT::TArrayProxy<ROOT::TArrayType<char,0> > ; ROOT::TArrayProxy<ROOT::TArrayType<double,0> > ; ROOT::TArrayProxy<ROOT::TArrayType<float,0> > ; ROOT::TArrayProxy<ROOT::TArrayType<int,0> > ; ROOT::TArrayProxy<ROOT::TArrayType<long,0> > ; ROOT::TArrayProxy<ROOT::TArrayType<short,0> > ; ROOT::TArrayProxy<ROOT::TArrayType<unsigned char,0> > ; ROOT::TArrayProxy<ROOT::TArrayType<unsigned int,0> > ; ROOT::TArrayProxy<ROOT::TArrayType<unsigned long,0> > ; ROOT::TArrayProxy<ROOT::TArrayType<unsigned short,0> > ; ROOT::TBranchProxy ; ROOT::TBranchProxyClassDescriptor Class to cache the information we gathered about the branch and its content; ROOT::TBranchProxyDescriptor Describe the proxy for a branch; ROOT::TBranchProxyDirector ; ROOT::TClaArrayProxy<ROOT::TArrayType<Long64_t,0> > ; ROOT::TClaArr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ClassIndex.html:21089,Simpl,SimplexMinimizer,21089,root/html534/ClassIndex.html,https://root.cern,https://root.cern/root/html534/ClassIndex.html,1,['Simpl'],['SimplexMinimizer']
Usability,"atibility ;  ; void DeclareOptions ();  MethodKNN options. ;  ; Double_t GausKernel (const kNN::Event &event_knn, const kNN::Event &event, const std::vector< Double_t > &svec) const;  Gaussian kernel. ;  ; Double_t getKernelRadius (const kNN::List &rlist) const;  Get polynomial kernel radius. ;  ; double getLDAValue (const kNN::List &rlist, const kNN::Event &event_knn);  ; const std::vector< Double_t > getRMS (const kNN::List &rlist, const kNN::Event &event_knn) const;  Get polynomial kernel radius. ;  ; void Init (void);  Initialization. ;  ; void MakeKNN (void);  create kNN ;  ; Double_t PolnKernel (Double_t value) const;  polynomial kernel ;  ; void ProcessOptions ();  process the options specified by the user ;  . Private Attributes; Int_t fBalanceDepth;  number of binary tree levels used for balancing tree ;  ; kNN::EventVec fEvent;  ! (untouched) events used for learning ;  ; TString fKernel;  =""Gaus"",""Poln"" - kernel type for smoothing ;  ; LDA fLDA;  ! Experimental feature for local knn analysis ;  ; kNN::ModulekNN * fModule;  ! module where all work is done ;  ; Int_t fnkNN;  number of k-nearest neighbors ;  ; Float_t fScaleFrac;  fraction of events used to compute variable width ;  ; Float_t fSigmaFact;  scale factor for Gaussian sigma in Gaus. kernel ;  ; Double_t fSumOfWeightsB;  sum-of-weights for background training events ;  ; Double_t fSumOfWeightsS;  sum-of-weights for signal training events ;  ; Int_t fTreeOptDepth;  number of binary tree levels used for optimization ;  ; Bool_t fTrim;  set equal number of signal and background events ;  ; Bool_t fUseKernel;  use polynomial kernel weight function ;  ; Bool_t fUseLDA;  use local linear discriminant analysis to compute MVA ;  ; Bool_t fUseWeight;  use weights to count kNN ;  . Additional Inherited Members;  Public Types inherited from TMVA::MethodBase; enum  EWeightFileType { kROOT =0; , kTEXT; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodKNN.html:26411,learn,learning,26411,doc/master/classTMVA_1_1MethodKNN.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodKNN.html,1,['learn'],['learning']
Usability,"atic TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Connect (const char *sender_class, const char *signal, const char *receiver_class, void *receiver, const char *slot);  This method allows to make a connection from any object of the same class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  . Protected Member Functions; virtual void Init (const char *cl, void *object, const char *redo, const char *undo);  Common protected method used in several constructors. ;  ; void PrintCollectionHeader (Option_t *option) const override;  Print collection header. ;  ;  Protected Member Functions inherited from TList; TObjLinkPtr_t * DoSort (TObjLinkPtr_t *head, Int_t n);  Sort linked list. ;  ; TObjLink * FindLink (const TObject *obj, Int_t &idx) const;  Returns the TObjLink object that contains object obj. ;  ; void InsertAfter (const TObjLinkPtr_t &newlink, const TObjLinkPtr_t &prev);  Insert a new link in the chain. ;  ; TObjLink * LinkAt (Int_t idx) const;  sorting order (when calling Sort() or for TSortedList) ;  ; Bool_t LnkCompare (const TObjLinkPtr_t &l1, const TObjLinkPtr_t &l2);  Compares the objects stored in the TObjLink objects. ;  ; TObjLinkPtr_t NewLink (TObject *obj, const TObjLinkPtr_t &prev=nullptr);  Return a new TObjLink. ;  ; TObjLinkPtr_t NewLink (TObject *obj, TObjLink *prev);  ; TObjLinkPtr_t NewOptLink (TObject *obj, Option_t *opt, const TObjLin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQCommand.html:26340,undo,undo,26340,doc/master/classTQCommand.html,https://root.cern,https://root.cern/doc/master/classTQCommand.html,1,['undo'],['undo']
Usability,"atic TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TProofProgressStatus::EStatusBitskFileCorrupted; static TProofProgressStatus::EStatusBitskFileNotOpen; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. Long64_tfBytesRead; Double_tfCPUTime; Long64_tfEntries; Long64_tfLastEntriesLast chunck; Double_tfLastProcTimethe wallclock time of the last addition; Double_tfLastUpdateTimestamp of last change; Double_tfLearnTimethe time spent in learning phase; Double_tfProcTimethe wallclock time; Long64_tfReadCalls. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressStatus(Long64_t fEntries = 0, Long64_t fBytesRead = 0, Long64_t fReadCalls = 0, Double_t fProcTime = 0, Double_t fCPUTime = 0); Main and default constructor. TProofProgressStatus& operator+=(const TProofProgressStatus& st); '+=' operator. TProofProgressStatus& operator-=(const TProofProgressStatus& st); '-=' operator. TProofProgressStatus operator-(TProofProgressStatus& st); '-' operator. void Print(Option_t* option = """") const; Dump the content. void SetLastUpdate(Double_t updtTime = 0); Update time stamp either with the passed value (if > 0) or with; the current time. Double_t GetCurrentRate() const; Get current rate. Rteunr the average rate if the current is not defined. TProofProgressStatus(Long64_t fEntries = 0, Long64_t fBytes",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofProgressStatus.html:7242,learn,learning,7242,root/html602/TProofProgressStatus.html,https://root.cern,https://root.cern/root/html602/TProofProgressStatus.html,4,['learn'],['learning']
Usability,"atic TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. LayoutChunk_t*fChunksArray of chunks. The actual size will be maxChunks.; const TGFont*fFontThe font used when laying out the text.; Int_tfNumChunksNumber of chunks actually used in following array.; const char*fStringThe string that was layed out.; Int_tfWidthThe maximum width of all lines in the text layout. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TGTextLayout(); destructor. void DrawText(Drawable_t dst, GContext_t gc, Int_t x, Int_t y, Int_t firstChar, Int_t lastChar) const; Use the information in the TGTextLayout object to display a multi-line,; justified string of text. This procedure is useful for simple widgets that need to display; single-font, multi-line text and want TGFont to handle the details. dst -- Window or pixmap in which to draw.; gc -- Graphics context to use for drawing text.; x, y -- Upper-left hand corner of rectangle in which to draw; (pixels).; firstChar -- The index of the first character to draw from the given; text item. 0 specfies the beginning.; lastChar -- The index just after the last character to draw from the; given text item. A number < 0 means to draw all characters. void UnderlineChar(Drawable_t dst, GContext_t gc, Int_t x, Int_t y, Int_t underline) const; Use the information in the TGTextLayout object to display an underline; below an individual character. This procedure does not draw the text,; just the underline. This procedure is useful for simple widgets that need to display; single-font, multi-line text with an individual character underlined; and want TGFont to handle the details. To display larger amounts of; underlined text, construct and use an underlined font. dst -- Window ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGTextLayout.html:6947,simpl,simple,6947,root/html602/TGTextLayout.html,https://root.cern,https://root.cern/root/html602/TGTextLayout.html,4,['simpl'],['simple']
Usability,"atic const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static const TGFont*TGProgressBar::fgDefaultFont; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGGC*TGProgressBar::fgDefaultGC; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGHProgressBar(const TGWindow* p = 0, UInt_t w = 4, UInt_t h = kProgressBarTextWidth, Pixel_t back = GetWhitePixel(), Pixel_t barcolor = GetDefaultSelectedBackground(), GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t options = kDoubleBorder|kSunkenFrame); Horizontal progress bar constructor. TGHProgressBar(const TGWindow* p, TGProgressBar::EBarType type, UInt_t w); Simple constructor allow you to create either a standard progress; bar, or a more fancy progress bar (fancy means: double sized border,; white background and a bit wider to allow for text to be printed; in the bar. void ShowPosition(Bool_t set = kTRUE, Bool_t percent = kTRUE, const char* format = ""%.2f""); Show postion text, either in percent or formatted according format. void DoRedraw(); Draw horizontal progress bar. void SavePrimitive(ostream& out, Option_t* option = """"); Save a horizontal progress bar as a C++ statement(s) on output stream out. virtual ~TGHProgressBar(); { }. TGDimension GetDefaultSize() const; { return TGDimension(fWidth, fBarWidth); }. » Author: Fons Rademakers 10/10/2000 » Copyright (C) 1995-2000, Rene Brun and Fo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGHProgressBar.html:20410,progress bar,progress bar,20410,root/html528/TGHProgressBar.html,https://root.cern,https://root.cern/root/html528/TGHProgressBar.html,6,['progress bar'],['progress bar']
Usability,"atically for error logging purposes, unless a custom string with similar information is passed as argument. ; Definition at line 3464 of file RooAbsReal.cxx. ◆ logEvalError() [2/2]. void RooAbsReal::logEvalError ; (; const RooAbsReal * ; originator, . const char * ; origName, . const char * ; message, . const char * ; serverValueString = nullptr . ). static . Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ; Definition at line 3408 of file RooAbsReal.cxx. ◆ makeProjectionSet(). void RooAbsReal::makeProjectionSet ; (; const RooAbsArg * ; plotVar, . const RooArgSet * ; allVars, . RooArgSet & ; projectedVars, . bool ; silent . ); const. protected . Utility function for plotOn() that constructs the set of observables to project when plotting ourselves as function of 'plotVar'. ; 'allVars' is the list of variables that must be projected, but may contain variables that we do not depend on. If 'silent' is cleared, warnings about inconsistent input parameters will be printed. ; Definition at line 2903 of file RooAbsReal.cxx. ◆ matchArgs() [1/5]. bool RooAbsReal::matchArgs ; (; const RooArgSet & ; allDeps, . RooArgSet & ; analDeps, . const RooArgProxy & ; a . ); const. protected . Utility function for use in getAnalyticalIntegral(). ; If the content of proxy 'a' occurs in set 'allDeps' then the argument held in 'a' is copied from allDeps to analDeps ; Definition at line 3146 of file RooAbsReal.cxx. ◆ matchArgs() [2/5]. bool RooAbsReal::matchArgs ; (; const RooArgSet & ; allDeps, . RooArgSet & ; analDeps, . const RooArgProxy & ; a, . const RooArgProxy & ; b . ); const. protected . Utility function for use in getAnalyticalIntegral(). ; If the contents of proxies a,b occur in set 'allDeps' then the arguments held in a,b are copied from allDeps to analDeps ; Definition at line 3163 of file RooAbsReal.cxx. ◆ matchArgs() [3/5]. bool RooAbsReal::matchArgs ; (; const RooArgSet & ; allDeps, . RooArgSet & ; analDeps, . const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsReal.html:121791,clear,cleared,121791,doc/master/classRooAbsReal.html,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html,1,['clear'],['cleared']
Usability,"atically for error logging purposes, unless a custom string with similar information is passed as argument. ; Definition at line 3545 of file RooAbsReal.cxx. ◆ logEvalError() [2/2]. void RooAbsReal::logEvalError ; (; const RooAbsReal * ; originator, . const char * ; origName, . const char * ; message, . const char * ; serverValueString = nullptr . ). static . Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ; Definition at line 3490 of file RooAbsReal.cxx. ◆ makeProjectionSet(). void RooAbsReal::makeProjectionSet ; (; const RooAbsArg * ; plotVar, . const RooArgSet * ; allVars, . RooArgSet & ; projectedVars, . bool ; silent . ); const. protected . Utility function for plotOn() that constructs the set of observables to project when plotting ourselves as function of 'plotVar'. ; 'allVars' is the list of variables that must be projected, but may contain variables that we do not depend on. If 'silent' is cleared, warnings about inconsistent input parameters will be printed. ; Definition at line 2988 of file RooAbsReal.cxx. ◆ matchArgs() [1/5]. bool RooAbsReal::matchArgs ; (; const RooArgSet & ; allDeps, . RooArgSet & ; analDeps, . const RooArgProxy & ; a . ); const. protected . Utility function for use in getAnalyticalIntegral(). ; If the content of proxy 'a' occurs in set 'allDeps' then the argument held in 'a' is copied from allDeps to analDeps ; Definition at line 3228 of file RooAbsReal.cxx. ◆ matchArgs() [2/5]. bool RooAbsReal::matchArgs ; (; const RooArgSet & ; allDeps, . RooArgSet & ; analDeps, . const RooArgProxy & ; a, . const RooArgProxy & ; b . ); const. protected . Utility function for use in getAnalyticalIntegral(). ; If the contents of proxies a,b occur in set 'allDeps' then the arguments held in a,b are copied from allDeps to analDeps ; Definition at line 3245 of file RooAbsReal.cxx. ◆ matchArgs() [3/5]. bool RooAbsReal::matchArgs ; (; const RooArgSet & ; allDeps, . RooArgSet & ; analDeps, . const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAbsReal.html:123121,clear,cleared,123121,doc/v632/classRooAbsReal.html,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html,1,['clear'],['cleared']
Usability,"ation Instantiate the Qt system within ROOT environment; TQtBrush create QBrush object based on the ROOT ""fill"" attributes ; TQtClientFilter Map Qt and ROOT event; TQtClientWidget QFrame implementation backing ROOT TGWindow objects; TQtMarker Convert ROOT TMarker objects on to QPointArray; TQtPadFont < Create Qt QFont object based on ROOT TAttText attributes; TQtRootSlot ; TQtTimer QTimer to awake the ROOT event loop from Qt event loop; TQtWidget QWidget to back ROOT TCanvas (Can be used with Qt designer); TQuaternion a quaternion class; TQueryDescription Query description; TQueryResult Class describing a query; TQueryResultManager PROOF query result manager; TROOT Top level (or root) structure for all classes; TRWLock Reader/writer lock; TRadialGradient Radial gradient fill.; TRandom Simple Random number generator (periodicity = 10**9); TRandom1 Ranlux Random number generators with periodicity > 10**14; TRandom2 Random number generator with periodicity of 10**26; TRandom3 Random number generator: Mersenne Twister; TRealData Description of persistent data members; TRecCmdEvent Class stores information about 1 commandline event (= 1 command typed by user in commandline); TRecEvent Abstract class. Defines basic interface for storing information about ROOT events; TRecExtraEvent Class stores information about extra events; TRecGuiEvent Class stores information about 1 GUI event in ROOT; TRecWinPair Class used for storing of window IDs mapping. Needed for replaying events.; TRecorder Class provides direct recorder/replayer interface for a user.; TRecorderInactive Represents state of TRecorder after its creation; TRecorderPaused Represents state of TRecorder when paused; TRecorderRecording Represents state of TRecorder when recording events; TRecorderReplaying Represents state of TRecorder when replaying; TRecorderState Abstract class that defines interface for a state of recorder; TRedirectOutputGuard Exception safe output redirection; TRef Persistent Reference link to ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ClassIndex.html:126771,Simpl,Simple,126771,root/html534/ClassIndex.html,https://root.cern,https://root.cern/root/html534/ClassIndex.html,1,['Simpl'],['Simple']
Usability,"ation has been chosen over a faster but more difficult to maintain code. Nevertheless, the time penalty does not exceed a factor 2. The MLP; The multilayer perceptron is a simple feed-forward network with the following structure:. It is made of neurons characterized by a bias and weighted links between them (let's call those links synapses). The input neurons receive the inputs, normalize them and forward them to the first hidden layer.; Each neuron in any subsequent layer first computes a linear combination of the outputs of the previous layer. The output of the neuron is then function of that combination with f being linear for output neurons or a sigmoid for hidden layers. This is useful because of two theorems:. A linear combination of sigmoids can approximate any continuous function.; Trained with output = 1 for the signal and 0 for the background, the approximated function of inputs X is the probability of signal, knowing X. Learning methods; The aim of all learning methods is to minimize the total error on a set of weighted examples. The error is defined as the sum in quadrature, divided by two, of the error on each individual output neuron. In all methods implemented, one needs to compute the first derivative of that error with respect to the weights. Exploiting the well-known properties of the derivative, especially the derivative of compound functions, one can write:. for a neuron: product of the local derivative with the weighted sum on the outputs of the derivatives.; for a synapse: product of the input with the local derivative of the output neuron. This computation is called back-propagation of the errors. A loop over all examples is called an epoch. Six learning methods are implemented.; Stochastic minimization:; is the most trivial learning method. This is the Robbins-Monro stochastic approximation applied to multilayer perceptrons. The weights are updated after each example according to the formula: \(w_{ij}(t+1) = w_{ij}(t) + \Delta w_{ij}(t)\); wi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiLayerPerceptron.html:3535,learn,learning,3535,doc/master/classTMultiLayerPerceptron.html,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html,1,['learn'],['learning']
Usability,"ation(); voidTBufferFile::CheckCount(UInt_t offset); UInt_tTBufferFile::CheckObject(UInt_t offset, const TClass* cl, Bool_t readClass = kFALSE); voidCheckVersionBuf(); voidCreateElemNode(const TStreamerElement* elem); XMLNodePointer_tCreateItemNode(const char* name); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTBuffer::Expand(Int_t newsize); Bool_tExtractPointer(XMLNodePointer_t node, void*& ptr, TClass*& cl); voidExtractReference(XMLNodePointer_t node, const void* ptr, const TClass* cl); const char*TXMLSetup::GetElItemName(TStreamerElement* el); Bool_tTXMLSetup::IsValidXmlSetup(const char* setupstr); voidTObject::MakeZombie(); voidTBufferFile::operator=(const TBufferFile&); voidPerformPostProcessing(); voidPerformPreProcessing(const TStreamerElement* elem, XMLNodePointer_t elemnode); TXMLStackObj*PopStack(); Bool_tProcessPointer(const void* ptr, XMLNodePointer_t node); TXMLStackObj*PushStack(XMLNodePointer_t current, Bool_t simple = kFALSE); virtual Int_tTBuffer::Read(const char* name); Bool_tTXMLSetup::ReadSetupFromStr(const char* setupstr); voidRegisterPointer(const void* ptr, XMLNodePointer_t node); voidSetCompressionLevel(int level); voidSetXML(TXMLEngine* xml); voidShiftStack(const char* info = 0); TXMLStackObj*Stack(Int_t depth = 0); XMLNodePointer_tStackNode(); Bool_tVerifyAttr(XMLNodePointer_t node, const char* name, const char* value, const char* errinfo = 0); Bool_tVerifyElemNode(const TStreamerElement* elem); Bool_tVerifyItemNode(const char* name, const char* errinfo = 0); Bool_tVerifyNode(XMLNodePointer_t node, const char* name, const char* errinfo = 0); Bool_tVerifyStackAttr(const char* name, const char* value, const char* errinfo = 0); Bool_tVerifyStackNode(const char* name, const char* errinfo = 0); voidWorkWithClass(TStreamerInfo* info, const TClass* cl = 0); voidWorkWithElement(TStreamerElement* elem, Int_t number); virtual Int_tTBuffer::Write(const char* name, Int_t opt, Int_t bufs); virtual",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBufferXML.html:18098,simpl,simple,18098,root/html526/TBufferXML.html,https://root.cern,https://root.cern/root/html526/TBufferXML.html,1,['simpl'],['simple']
Usability,"ation, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. Double_tfConfidenceLevelconfidence level; Double_tfLowerLimitlower interval limit; RooArgSetfParametersset containing the parameter of interest; Double_tfUpperLimitupper interval limit. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SimpleInterval(const char* name = 0); Default constructor. SimpleInterval(const RooStats::SimpleInterval& other, const char* name); fParameters.add( other.fParameters );. operator=(const RooStats::SimpleInterval& other). SimpleInterval(const char* name, const RooRealVar& var, Double_t lower, Double_t upper, Double_t cl); Alternate constructor. ~SimpleInterval(); Destructor. Bool_t IsInInterval(const RooArgSet& ) const. RooArgSet* GetParameters() const; return cloned list of parameters. Bool_t CheckParameters(const RooArgSet& ) const. explicit SimpleInterval(const char* name = 0); default constructors. void SetConfidenceLevel(Double_t ); set the confidence level for the interval. Simple interval is defined at construction time so this function; has no effect. {}. Double_t ConfidenceLevel() const; return the confidence interval. {return fConfidenceLevel;}. Double_t LowerLimit(); return the interval lower limit. {return fLowerLimit;}. Double_t UpperLimit(); return the interval upper limit. {return fUpperLimit;}. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id$ » Last generated: 2015-03-10 17:20; This page has been automatically generated. For commen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__SimpleInterval.html:6835,Simpl,SimpleInterval,6835,root/html534/RooStats__SimpleInterval.html,https://root.cern,https://root.cern/root/html534/RooStats__SimpleInterval.html,1,['Simpl'],['SimpleInterval']
Usability,"ation.; static Int_tfgCountNumber of TStreamerInfo instances; static TStreamerElement*fgElementPointer to current TStreamerElement. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStreamerInfo(); Default ctor. TStreamerInfo(TClass* cl); Create a TStreamerInfo object. ~TStreamerInfo(); TStreamerInfo dtor. void Build(); Build the I/O data structure for the current class version.; A list of TStreamerElement derived classes is built by scanning; one by one the list of data members of the analyzed class. void BuildCheck(); Check if built and consistent with the class dictionary.; This method is called by TFile::ReadStreamerInfo. void BuildEmulated(TFile* file); Create an Emulation TStreamerInfo object. Bool_t BuildFor(const TClass* cl). Check if we can build this for foreign class - do we have some rules; to do that. void BuildOld(); rebuild the TStreamerInfo structure. void Clear(Option_t* ); If opt cointains 'built', reset this StreamerInfo as if Build or BuildOld; was never called on it (usefull to force their re-running). void CallShowMembers(void* obj, TMemberInspector& insp) const; Emulated a call ShowMembers() on the obj of this class type, passing insp and parent. TObject * Clone(const char* newname = """") const; Make a clone of an object using the Streamer facility.; If newname is specified, this will be the name of the new object. Bool_t CompareContent(TClass* cl, TVirtualStreamerInfo* info, Bool_t warn, Bool_t complete); Return True if the current StreamerInfo in cl or info is equivalent to this TStreamerInfo.; 'Equivalent' means the same number of persistent data member which the same actual C++ type and; the same name.; if 'warn' is true, Warning message are printed to explicit the differences.; if 'complete' is false, stop at the first error, otherwise continue until all members have been checked. void ComputeSize(); Compute total size of all persistent elements of the class. void ForceWriteInfo(TFile* file, Bool_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TStreamerInfo.html:15289,Clear,Clear,15289,root/html532/TStreamerInfo.html,https://root.cern,https://root.cern/root/html532/TStreamerInfo.html,1,['Clear'],['Clear']
Usability,"ationFunction::kSoftSign@ kSoftSign; TMVA::DNN::EActivationFunction::kSymmRelu@ kSymmRelu; TMVA::DNN::ELossFunctionELossFunctionEnum that represents objective functions for the net, i.e.Definition Functions.h:57; TMVA::DNN::ModeOutputValuesModeOutputValuesDefinition NeuralNet.h:179; TMVA::DNN::TMVAInput_tstd::tuple< const std::vector< Event * > &, const DataSetInfo & > TMVAInput_tDefinition DataLoader.h:40; TMVAcreate variable transformationsDefinition GeneticMinimizer.h:22; TMVA::gConfigConfig & gConfig(); TMVA::gToolsTools & gTools(); TMVA::fetchValueTString fetchValue(const std::map< TString, TString > &keyValueMap, TString key)Definition MethodDNN.cxx:320; TMVA::EndlMsgLogger & Endl(MsgLogger &ml)Definition MsgLogger.h:148; TMath::LogDouble_t Log(Double_t x)Returns the natural logarithm of x.Definition TMath.h:756; TMVA::MethodDNN::TTrainingSettingsDefinition MethodDNN.h:90; TMVA::MethodDNN::TTrainingSettings::regularizationDNN::ERegularization regularizationDefinition MethodDNN.h:94; TMVA::MethodDNN::TTrainingSettings::convergenceStepssize_t convergenceStepsDefinition MethodDNN.h:93; TMVA::MethodDNN::TTrainingSettings::learningRateDouble_t learningRateDefinition MethodDNN.h:95; TMVA::MethodDNN::TTrainingSettings::testIntervalsize_t testIntervalDefinition MethodDNN.h:92; TMVA::MethodDNN::TTrainingSettings::batchSizesize_t batchSizeDefinition MethodDNN.h:91; TMVA::MethodDNN::TTrainingSettings::dropoutProbabilitiesstd::vector< Double_t > dropoutProbabilitiesDefinition MethodDNN.h:98; TMVA::MethodDNN::TTrainingSettings::multithreadingbool multithreadingDefinition MethodDNN.h:99; TMVA::MethodDNN::TTrainingSettings::weightDecayDouble_t weightDecayDefinition MethodDNN.h:97; TMVA::MethodDNN::TTrainingSettings::momentumDouble_t momentumDefinition MethodDNN.h:96; lTLine lDefinition textangle.C:4; Config.h; Types.h; outputstatic void output(). tmvatmvasrcMethodDNN.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:00 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDNN_8cxx_source.html:73023,learn,learningRateDefinition,73023,doc/master/MethodDNN_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDNN_8cxx_source.html,1,['learn'],['learningRateDefinition']
Usability,ationFunctionindicates the activation function for this layer ; eModeOutputindicates a potential tranformation of the output values before further computation DIRECT does not further transformation; SIGMOID applies a sigmoid transformation to each output value (to create a probability); SOFTMAX applies a softmax transformation to all output values (mutually exclusive probability) . Definition at line 122 of file NeuralNet.cxx. ◆ LayerData() [5/6]. TMVA::DNN::LayerData::LayerData ; (; const LayerData & ; other). inline . copy c'tor of LayerData ; Definition at line 515 of file NeuralNet.h. ◆ LayerData() [6/6]. TMVA::DNN::LayerData::LayerData ; (; LayerData && ; other). inline . move c'tor of LayerData ; Definition at line 538 of file NeuralNet.h. Member Function Documentation. ◆ activationFunction(). std::shared_ptr< std::function< double(double)> > TMVA::DNN::LayerData::activationFunction ; (; ); const. inline . Definition at line 607 of file NeuralNet.h. ◆ clear(). void TMVA::DNN::LayerData::clear ; (; ). inline . clear the values and the deltas ; Definition at line 576 of file NeuralNet.h. ◆ clearDropOut(). void TMVA::DNN::LayerData::clearDropOut ; (; ). inline . clear the drop-out-data for this layer ; Definition at line 620 of file NeuralNet.h. ◆ computeProbabilities(). LayerData::container_type TMVA::DNN::LayerData::computeProbabilities ; (; ); const. private . compute the probabilities from the node values ; Definition at line 140 of file NeuralNet.cxx. ◆ deltasBegin() [1/2]. iterator_type TMVA::DNN::LayerData::deltasBegin ; (; ). inline . returns iterator to the begin of the deltas (back-propagation) ; Definition at line 591 of file NeuralNet.h. ◆ deltasBegin() [2/2]. const_iterator_type TMVA::DNN::LayerData::deltasBegin ; (; ); const. inline . returns const iterator to the begin of the deltas (back-propagation) ; Definition at line 594 of file NeuralNet.h. ◆ deltasEnd() [1/2]. iterator_type TMVA::DNN::LayerData::deltasEnd ; (; ). inline . returns iterator to ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1LayerData.html:10931,clear,clear,10931,doc/master/classTMVA_1_1DNN_1_1LayerData.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1LayerData.html,1,['clear'],['clear']
Usability,"ations; RooSharedPropertiesList Manager for shared properties among clones of certain RooAbsArg-derived types; RooSimGenContext Context for efficiently generating a dataset from a RooSimultaneous PDF; RooSimPdfBuilder RooSimultaneous PDF Builder (obsolete); RooSimWSTool Workspace oriented tool for customized cloning of p.d.f. into a simultaneous p.d.f; RooSimWSTool::BuildConfig Build configuration object for RooSimWSTool; RooSimWSTool::MultiBuildConfig Build configuration object for RooSimWSTool with multiple prototype p.d.f.; RooSimWSTool::ObjBuildConfig Validated RooSimWSTool build configuration; RooSimWSTool::ObjSplitRule Validated RooSimWSTool split rule; RooSimWSTool::SplitRule Split rule specification for prototype p.d.f; RooSimultaneous Simultaneous operator p.d.f, functions like C++ 'switch()' on input p.d.fs operating on index category5A; RooSpHarmonic SpHarmonic polynomial; RooStats ; RooStats::AcceptanceRegion A simple class for acceptance regions used for ConfidenceBelt; RooStats::BayesianCalculator BayesianCalculator class; RooStats::BernsteinCorrection A utility to add polynomial corrrection terms to a model to improve the description of data.; RooStats::CombinedCalculator A base class that is for tools that can be both HypoTestCalculators and IntervalCalculators; RooStats::ConfInterval Interface for Confidence Intervals; RooStats::ConfidenceBelt A confidence belt for the Neyman Construction; RooStats::DebuggingSampler A simple implementation of the DistributionCreator interface; RooStats::DebuggingTestStat A concrete implementation of the TestStatistic interface, useful for debugging.; RooStats::FeldmanCousins Interface for tools setting limits (producing confidence intervals); RooStats::FrequentistCalculator ; RooStats::HLFactory The high Level Model Factory to create models from datacards; RooStats::Heaviside Your description goes here...; RooStats::HistFactory::EstimateSummary ; RooStats::HistFactory::FlexibleInterpVar flexible interpolation; RooSta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ClassIndex.html:43400,simpl,simple,43400,root/html530/ClassIndex.html,https://root.cern,https://root.cern/root/html530/ClassIndex.html,1,['simpl'],['simple']
Usability,"ations; RooSharedPropertiesList Manager for shared properties among clones of certain RooAbsArg-derived types; RooSimGenContext Context for efficiently generating a dataset from a RooSimultaneous PDF; RooSimPdfBuilder RooSimultaneous PDF Builder (obsolete); RooSimWSTool Workspace oriented tool for customized cloning of p.d.f. into a simultaneous p.d.f; RooSimWSTool::BuildConfig Build configuration object for RooSimWSTool; RooSimWSTool::MultiBuildConfig Build configuration object for RooSimWSTool with multiple prototype p.d.f.; RooSimWSTool::ObjBuildConfig Validated RooSimWSTool build configuration; RooSimWSTool::ObjSplitRule Validated RooSimWSTool split rule; RooSimWSTool::SplitRule Split rule specification for prototype p.d.f; RooSimultaneous Simultaneous operator p.d.f, functions like C++ 'switch()' on input p.d.fs operating on index category5A; RooSpHarmonic SpHarmonic polynomial; RooStats ; RooStats::AcceptanceRegion A simple class for acceptance regions used for ConfidenceBelt; RooStats::BayesianCalculator BayesianCalculator class; RooStats::BernsteinCorrection A utility to add polynomial corrrection terms to a model to improve the description of data.; RooStats::CombinedCalculator A base class that is for tools that can be both HypoTestCalculators and IntervalCalculators; RooStats::ConfInterval Interface for Confidence Intervals; RooStats::ConfidenceBelt A confidence belt for the Neyman Construction; RooStats::DebuggingSampler A simple implementation of the DistributionCreator interface; RooStats::DebuggingTestStat A concrete implementation of the TestStatistic interface, useful for debugging.; RooStats::FeldmanCousins Interface for tools setting limits (producing confidence intervals); RooStats::HLFactory The high Level Model Factory to create models from datacards; RooStats::Heaviside Your description goes here...; RooStats::HistFactory::EstimateSummary ; RooStats::HistFactory::HistoToWorkspaceFactory ; RooStats::HistFactory::LinInterpVar Piecewise linear int",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ClassIndex.html:43387,simpl,simple,43387,root/html528/ClassIndex.html,https://root.cern,https://root.cern/root/html528/ClassIndex.html,1,['simpl'],['simple']
Usability,"atives. . Saving Canvas in TeX ; . Being able to generate TeX graphics can be useful for several reasons:. 	To have an easy to modify the image, in particular the labels and titles (ASCII file).; 	To have the same font in all labels, legends, plot titles etc. as in the text body of a document.; 	Render Math formulae using... more . Defining C++14 ; Hi,. A new C++ meeting is coming up in a few days. Many, many proposals are on the table; they can be found here and here. Out of those proposals only very few will be discussed at the meeting; likely only those that are about to make it into C++14. Given that I am rather new in this business... more . On the way to ROOT 6 ; Hi!. We are running late with ROOT 6, in part because I'm just back at work after being sick for 4 weeks. The other cling team members were hacking away at Fermilab, and I'll demonstrate how major that step to version 6 is for ROOT. ""Commit Activity Index"" for ROOT. SVNPlot defines a... more . C++14 ; Hi,. Two weeks ago I participated at the ISO C++ standard meeting. It was my and CERN's first one and a pleasant surprise. A few news items:. 	The next two standards are planned for 2014 and 2017, with 2014 being a bit like 2003: mostly bug fixes and usability improvements.; 	There is now (... more . Pages1; 2; 3; 4; next ›; last ». Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/blog.html:4984,usab,usability,4984,d/blog.html,https://root.cern,https://root.cern/d/blog.html,2,"['guid', 'usab']","['guidelines', 'usability']"
Usability,"ator line; TGVerticalFrame Composite frame with vertical child layout; TGVerticalLayout Vertical layout manager; TGView View widget base class; TGViewFrame Frame containing the actual text; TGViewPort Viewport through which to look at a container frame; TGWidget Widget base class; TGWindow GUI Window base class; TGX11 Interface to X11; TGX11TTF Interface to X11 + TTF font handling; TGXYLayout X / Y - layout manager; TGXYLayoutHints Hits for the X / Y - layout manager; TGaxis Graphics axis; TGedEditor ROOT graphics editor; TGedFrame base editor's frame; TGedMarkerPopup marker select popup; TGedMarkerSelect Marker selection button; TGedNameFrame frame showing the selected object name; TGedPatternFrame pattern frame; TGedPatternPopup Color selector popup; TGedPatternSelect pattern selection check-button; TGedPatternSelector select pattern frame; TGedPopup popup window; TGedSelect selection check-button; TGenCollectionProxy ; TGenCollectionProxy::Method ; TGenCollectionProxy::Value ; TGenPhaseSpace Simple Phase Space Generator; TGenerator Event generator interface abstract baseclass; TGenericTable Generic array of C-structure (a'la STL vector); TGenericTable::iterator ; TGeoArb8 arbitrary trapezoid with 8 vertices; TGeoAtt class for visibility, activity and optimization attributes for volumes/nodes; TGeoBBox box primitive; TGeoBBoxEditor TGeoBBox editor; TGeoBatemanSol Solution for the Bateman equation; TGeoBoolNode a boolean node; TGeoBuilder geometry builder singleton; TGeoCacheState class storing the cache state; TGeoChecker a simple geometry checker; TGeoCombiTrans rotation + translation; TGeoCombiTransEditor TGeoCombiTrans editor; TGeoCompositeShape boolean composite shape; TGeoCone conical tube class; TGeoConeEditor TGeoCone editor; TGeoConeSeg conical tube segment class ; TGeoConeSegEditor TGeoConeSeg editor; TGeoCtub cut tube segment class ; TGeoCtubEditor TGeoCtub editor; TGeoDecayChannel Decay channel for Elements; TGeoElemIter Iterator for radionuclide chains.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html524/ClassIndex.html:81891,simpl,simple,81891,root/html524/ClassIndex.html,https://root.cern,https://root.cern/root/html524/ClassIndex.html,3,['simpl'],['simple']
Usability,"ator*RooAbsData::_cacheIter! Iterator over cached variables; RooArgSetRooAbsData::_cachedVars! External variables cached with this data set; TDirectory*RooDirItem::_dir! Associated directory; RooAbsDataStore*RooAbsData::_dstoreData storage implementation; TIterator*RooAbsData::_iterator! Iterator over dimension variables; static Int_tRooPrintable::_nameLength; map<std::string,RooAbsData*>RooAbsData::_ownedComponentsOwned external components; static char*_poolBegin! Start of memory pool; static char*_poolCur! Next free slot in memory pool; static char*_poolEnd! End of memory pool ; RooArgSetRooAbsData::_varsDimensions of this data set; RooArgSet_varsNoWgtVars without weight variable ; RooRealVar*_wgtVarPointer to weight variable (if set) ; static RooAbsData::StorageTypeRooAbsData::defaultStorageType; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void cleanup(); Clear memoery pool on exit to avoid reported memory leaks. void* operator new(size_t bytes); Overloaded new operator guarantees that all RooDataSets allocated with new; have a unique address, a property that is exploited in several places; in roofit to quickly index contents on normalization set pointers.; The memory pool only allocates space for the class itself. The elements; stored in the set are stored outside the pool. void operator delete(void* ptr); Memory is owned by pool, we need to do nothing to release it. RooDataSet(); Default constructor for persistence. RooDataSet(const char* name, const char* title, const RooArgSet& vars, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg()); Construct an unbinned dataset from a RooArgSet defining the dimensions of the dat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooDataSet.html:18049,Clear,Clear,18049,root/html534/RooDataSet.html,https://root.cern,https://root.cern/root/html534/RooDataSet.html,1,['Clear'],['Clear']
Usability,"ator.cxx. Member Function Documentation. ◆ ApproximatePosterior(). void RooStats::BayesianCalculator::ApproximatePosterior ; (; ); const. protected . approximate posterior in nbins using a TF1 scan the poi values and evaluate the posterior at each point and save the result in a cloned TF1 For each point the posterior is evaluated by integrating the nuisance parameters ; Definition at line 1319 of file BayesianCalculator.cxx. ◆ Class(). static TClass * RooStats::BayesianCalculator::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooStats::BayesianCalculator::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooStats::BayesianCalculator::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 194 of file BayesianCalculator.h. ◆ ClearAll(). void RooStats::BayesianCalculator::ClearAll ; (; ); const. protected . clear all cached pdf objects ; Definition at line 714 of file BayesianCalculator.cxx. ◆ ComputeIntervalFromApproxPosterior(). void RooStats::BayesianCalculator::ComputeIntervalFromApproxPosterior ; (; double ; c1, . double ; c2 . ); const. protected . compute the interval using the approximate posterior function ; Definition at line 1364 of file BayesianCalculator.cxx. ◆ ComputeIntervalFromCdf(). void RooStats::BayesianCalculator::ComputeIntervalFromCdf ; (; double ; c1, . double ; c2 . ); const. protected . internal function compute the interval using Cdf integration ; Definition at line 1243 of file BayesianCalculator.cxx. ◆ ComputeIntervalUsingRooFit(). void RooStats::BayesianCalculator::ComputeIntervalUsingRooFit ; (; double ; c1, . double ; c2 . ); const. protected . internal function compute the interval using RooFit ; Definition at line 1194 of file BayesianCalculator.cxx. ◆ ComputeShortestInterval(). void RooStats::BayesianCalculator::ComputeShortestInterval ; (; ); const. protected . compute the shortest interval fr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1BayesianCalculator.html:22834,clear,clear,22834,doc/master/classRooStats_1_1BayesianCalculator.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1BayesianCalculator.html,1,['clear'],['clear']
Usability,"ator=(const RooStats::SimpleInterval& other); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidSetConfidenceLevel(Double_t); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; RooStats::SimpleIntervalSimpleInterval(const char* name = 0); RooStats::SimpleIntervalSimpleInterval(const RooStats::SimpleInterval&); RooStats::SimpleIntervalSimpleInterval(const RooStats::SimpleInterval& other, const char* name); RooStats::SimpleIntervalSimpleInterval(const char* name, const RooRealVar& var, Double_t lower, Double_t upper, Double_t cl); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Double_tUpperLimit(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__SimpleInterval.html:5023,Simpl,SimpleIntervalSimpleInterval,5023,root/html602/RooStats__SimpleInterval.html,https://root.cern,https://root.cern/root/html602/RooStats__SimpleInterval.html,12,['Simpl'],"['SimpleInterval', 'SimpleIntervalSimpleInterval']"
Usability,"atrix Decomposition Bunch-Kaufman; TDecompBase Matrix Decomposition Base; TDecompChol Matrix Decompositition Cholesky; TDecompLU Matrix Decompositition LU; TDecompQRH Matrix Decompositition QRH; TDecompSVD Matrix Decompositition SVD; TDecompSparse Matrix Decompositition LU; TDialogCanvas A specialized canvas to set attributes.; TDiamond Diamond class; TDictAttributeMap Container for name/value pairs of TDictionary attributes; TDictionary Interface to dictionary; TDirectory Describe directory structure in memory; TDirectoryFile Describe directory structure in a ROOT file; TDocDirective THtml directive handler; TDocHtmlDirective Handler for ""Begin_Html""/""End_Html"" for raw HTML in documentation comments; TDocLatexDirective Handler for ""Begin_Latex""/""End_Latex"" to generate an image from latex; TDocMacroDirective Handler for ""Begin_Macro""/""End_Macro"" for code that is executed and that can generate an image for documentation; TDocOutput generates documentation web pages; TDocParser parser for reference documentation; TDrawFeedback Present PROOF query feedback; TELTU ELTU shape; TEditQueryFrame Edit query frame; TEfficiency calculating efficiencies; TEllipse An ellipse; TEmulatedCollectionProxy ; TEmulatedMapProxy ; TEntryList A list of entries in a TTree; TEntryListArray A list of entries and subentries in a TTree; TEntryListBlock Used internally in TEntryList to store the entry numbers; TEntryListFromFile Manager for entry lists from different files; TEnum Enum type class; TEnumConstant ; TEnv Handle ROOT configuration resources; TEnvRec Individual TEnv records; TEve3DProjection 3D scaling ""projection""; TEveArrow Class for gl visualisation of arrow.; TEveArrowEditor GUI editor for TEveArrow.; TEveArrowGL GL renderer class for TEveArrow.; TEveBox 3D box with arbitrary vertices.; TEveBoxGL GL renderer class for TEveBox.; TEveBoxProjected Projection of TEveBox.; TEveBoxProjectedGL GL renderer class for TEveBoxProjected.; TEveBoxSet Collection of 3D primitives (fixed-size bo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ClassIndex.html:56702,feedback,feedback,56702,root/html602/ClassIndex.html,https://root.cern,https://root.cern/root/html602/ClassIndex.html,4,['feedback'],['feedback']
Usability,"atrix of migrations A. The method can be applied to a large number of problems, where the measured distribution y is a linear superposition of several Monte Carlo shapes. Beyond such a simple template fit, TUnfoldSys has an adjustable regularisation term and also supports an optional constraint on the total number of events. Background sources can be specified, with a normalisation constant and normalisation uncertainty. In addition, variants of the response matrix may be specified, these are taken to determine systematic uncertainties.; For most applications, it is better to use the derived class TUnfoldDensity instead of TUnfoldSys. TUnfoldDensity adds features to TUnfoldSys, related to possible complex multidimensional arrangements of bins. For innocent users, the most notable improvement of TUnfoldDensity over TUnfoldSys are the getter functions. For TUnfoldSys, histograms have to be booked by the user and the getter functions fill the histogram bins. TUnfoldDensity simply returns a new, already filled histogram.; If you use this software, please consider the following citation; S.Schmitt, JINST 7 (2012) T10003 [arXiv:1205.6201]; Detailed documentation and updates are available on http://www.desy.de/~sschmitt; Brief recipy to use TUnfoldSys: . a matrix (truth,reconstructed) is given as a two-dimensional histogram as argument to the constructor of TUnfold . a vector of measurements is given as one-dimensional histogram using the SetInput() method . repeated calls to SubtractBackground() to specify background sources . repeated calls to AddSysError() to specify systematic uncertainties . The unfolding is performed . either once with a fixed parameter tau, method DoUnfold(tau) . or multiple times in a scan to determine the best chouce of tau, method ScanLCurve() . Unfolding results are retrieved using various GetXXX() methods . Description of (systematic) uncertainties available in TUnfoldSys. There are covariance matrix contributions and there are systematic shifts",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfoldSys.html:1642,simpl,simply,1642,doc/master/classTUnfoldSys.html,https://root.cern,https://root.cern/doc/master/classTUnfoldSys.html,1,['simpl'],['simply']
Usability,"atrix, . const Int_t * ; binMap = nullptr, . Bool_t ; clearEmat = kTRUE . ). covariance matrix contribution from error on regularisation parameter ; Parameters. [in,out]ematrixoutput histogram ; [in]binMap(default=nullptr) remapping of histogram bins ; [in]clearEmat(default=true) if true, clear the histogram. this method returns the covariance contributions to the unfolding result from the assigned uncertainty on the parameter tau, see method SetTauError(). ; the array binMap is explained with the method GetOutput(). The flag clearEmat may be used to add covariance matrices from several uncertainty sources. ; Definition at line 1176 of file TUnfoldSys.cxx. ◆ GetEmatrixSysUncorr(). void TUnfoldSys::GetEmatrixSysUncorr ; (; TH2 * ; ematrix, . const Int_t * ; binMap = nullptr, . Bool_t ; clearEmat = kTRUE . ). Covariance contribution from uncorrelated uncertainties of the response matrix. ; Parameters. [in,out]ematrixcovariance matrix histogram ; [in]binMapmapping of histogram bins ; [in]clearEmatif true, ematrix is cleared prior to adding this covariance matrix contribution. This method propagates the uncertainties of the response matrix histogram, specified with the constructor, to the unfolding result. It is assumed that the entries of that histogram are bin-to-bin uncorrelated. In many cases this corresponds to the ""Monte Carlo statistical uncertainties"". ; The array binMap is explained with the method GetOutput(). The flag clearEmat may be used to add covariance matrices from several uncertainty sources. ; Definition at line 760 of file TUnfoldSys.cxx. ◆ GetEmatrixTotal(). void TUnfoldSys::GetEmatrixTotal ; (; TH2 * ; ematrix, . const Int_t * ; binMap = nullptr . ). Get total error matrix, summing up all contributions. ; Parameters. [out]ematrixhistogram which will be filled ; [in]binMap(default=nullptr) remapping of histogram bins. the array binMap is explained with the method GetOutput(). ; Definition at line 1276 of file TUnfoldSys.cxx. ◆ GetRhoItotal(). void TU",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfoldSys.html:42004,clear,clearEmatif,42004,doc/master/classTUnfoldSys.html,https://root.cern,https://root.cern/doc/master/classTUnfoldSys.html,2,['clear'],"['clearEmatif', 'cleared']"
Usability,"atrixDSparse* src); virtual voidClearResults(); TMatrixDSparse*TUnfold::CreateSparseMatrix(Int_t nrow, Int_t ncol, Int_t nele, Int_t* row, Int_t* col, Double_t* data) const; static voidTUnfold::DeleteMatrix(TMatrixD** m); static voidTUnfold::DeleteMatrix(TMatrixDSparse** m); voidDoBackgroundSubtraction(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual Double_tTUnfold::DoUnfold(); voidTUnfold::ErrorMatrixToHist(TH2* ematrix, const TMatrixDSparse* emat, const Int_t* binMap, Bool_t doClear) const; const TMatrixDSparse*TUnfold::GetAx() const; const TMatrixDSparse*TUnfold::GetDXDAM(int i) const; const TMatrixDSparse*TUnfold::GetDXDAZ(int i) const; const TMatrixDSparse*TUnfold::GetDXDtauSquared() const; const TMatrixDSparse*TUnfold::GetDXDY() const; const TMatrixDSparse*TUnfold::GetE() const; const TMatrixDSparse*TUnfold::GetEinv() const; voidGetEmatrixFromVyy(const TMatrixDSparse* vyy, TH2* ematrix, const Int_t* binMap, Bool_t clearEmat); Int_tTUnfold::GetNx() const; Int_tTUnfold::GetNy() const; const TMatrixDSparse*TUnfold::GetVxx() const; const TMatrixDSparse*TUnfold::GetVxxInv() const; const TMatrixD*TUnfold::GetX() const; static Bool_tTUnfold::InvertMConditioned(TMatrixD* A); TMatrixD*TUnfold::InvertMSparse(const TMatrixDSparse* A) const; voidTObject::MakeZombie(); TMatrixDSparse*TUnfold::MultiplyMSparseM(const TMatrixDSparse* a, const TMatrixD* b) const; TMatrixDSparse*TUnfold::MultiplyMSparseMSparse(const TMatrixDSparse* a, const TMatrixDSparse* b) const; TMatrixDSparse*TUnfold::MultiplyMSparseMSparseTranspVector(const TMatrixDSparse* m1, const TMatrixDSparse* m2, const TMatrixTBase<Double_t>* v) const; TMatrixDSparse*TUnfold::MultiplyMSparseTranspMSparse(const TMatrixDSparse* a, const TMatrixDSparse* b) const; virtual TMatrixDSparse*PrepareCorrEmat(const TMatrixDSparse* m1, const TMatrixDSparse* m2, const TMatrixDSparse* dsys); virtual voidPrepareSysError(); virtual TMatrixDSparse*PrepareUncorrEmat(const T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TUnfoldSys.html:14691,clear,clearEmat,14691,root/html528/TUnfoldSys.html,https://root.cern,https://root.cern/root/html528/TUnfoldSys.html,4,['clear'],['clearEmat']
Usability,"atrixT<Element> &TMatrixT<Element> Use(const TMatrixT<float>& a) const. template <class Element> inline TMatrixT<Element> TMatrixT<Element> GetSub(Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb, Option_t* option = ""S"") const. template <class Element> inline Element TMatrixT<Element> operator()(Int_t rown, Int_t coln) const. template <class Element> inline Element &TMatrixT<Element> operator()(Int_t rown, Int_t coln). void Plus(const TMatrixT <Element> &a,const TMatrixT <Element> &b); Elementary constructors. void Minus(const TMatrixT <Element> &a,const TMatrixT <Element> &b). void TMult(const TMatrixT <Element> &a,const TMatrixT <Element> &b). void TMult(const TMatrixT <Element> &a,const TMatrixTSym<Element> &b). void MultT(const TMatrixT <Element> &a,const TMatrixT <Element> &b). void MultT(const TMatrixT <Element> &a,const TMatrixTSym<Element> &b); { Mult(a,b); }. const Int_t * GetRowIndexArray() const; { return 0; }. Int_t * GetRowIndexArray(); { return 0; }. const Int_t * GetColIndexArray() const; { return 0; }. Int_t * GetColIndexArray(); { return 0; }. TMatrixTBase<Element> & SetRowIndexArray(Int_t* ); { MayNotUse(""SetRowIndexArray(Int_t *)""); return *this; }. TMatrixTBase<Element> & SetColIndexArray(Int_t* ); { MayNotUse(""SetColIndexArray(Int_t *)""); return *this; }. void Clear(Option_t* = """"). TMatrixT <Element> & Use(Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb, float* data). TMatrixTBase<Element> & ResizeTo(Int_t nrows, Int_t ncols, Int_t = -1). const TMatrixTRow_const<Element> operator[](Int_t rown) const; or as a[i][j]. { return TMatrixTRow_const<Element>(*this,rown); }. TMatrixTRow <Element> operator[](Int_t rown); { return TMatrixTRow <Element>(*this,rown); }. » Last changed: root/matrix:$Id: TMatrixT.h 39086 2011-05-04 09:36:17Z moneta $ » Last generated: 2011-11-03 20:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMatrixT_float_.html:26265,Clear,Clear,26265,root/html532/TMatrixT_float_.html,https://root.cern,https://root.cern/root/html532/TMatrixT_float_.html,1,['Clear'],['Clear']
Usability,"ats (gif, gif+, jpg, png). ;  ; Bool_t SavePictureWidth (const TString &fileName, Int_t width, Bool_t pixel_object_scale=kTRUE);  Save picture with given width (height scaled proportionally). ;  ; void SetAutoRotator (TGLAutoRotator *ar);  Set the auto-rotator for this viewer. The old rotator is deleted. ;  ; void SetCameraOverlay (TGLCameraOverlay *m);  ; void SetClearColor (Color_t col);  Set background method. ;  ; void SetClipAutoUpdate (Bool_t x);  ; void SetCurrentCamera (ECameraType camera);  Set current active camera - 'cameraType' one of: kCameraPerspX, kCameraPerspY, kCameraPerspZ, kCameraOrthoXOY, kCameraOrthoXOZ, kCameraOrthoZOY, kCameraOrthoXnOY, kCameraOrthoXnOZ, kCameraOrthoZnOY. ;  ; void SetDrawCameraCenter (Bool_t x);  Draw camera look at and rotation point. ;  ; virtual void SetEventHandler (TGEventHandler *handler);  Set the event-handler. ;  ; void SetFader (Float_t x);  ; virtual void SetGedEditor (TGedEditor *ed);  ; void SetGuideState (Int_t axesType, Bool_t axesDepthTest, Bool_t referenceOn, const Double_t *referencePos);  Set the state of guides (axes & reference markers) from arguments. ;  ; void SetIgnoreSizesOnUpdate (Bool_t v);  ; void SetLineScale (Float_t s);  ; void SetMaxSceneDrawTimeHQ (Float_t t);  ; void SetMaxSceneDrawTimeLQ (Float_t t);  ; void SetOrthoCamera (ECameraType camera, Double_t zoom, Double_t dolly, Double_t center[3], Double_t hRotate, Double_t vRotate);  Set an orthographic camera to supplied configuration - note this does not need to be the current camera - though you will not see the effect if it is not. ;  ; void SetPerspectiveCamera (ECameraType camera, Double_t fov, Double_t dolly, Double_t center[3], Double_t hRotate, Double_t vRotate);  Set a perspective camera to supplied configuration - note this does not need to be the current camera - though you will not see the effect if it is not. ;  ; void SetPictureFileName (const TString &f);  ; void SetPointScale (Float_t s);  ; void SetResetCamerasOnUpdate (Bool_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLSAViewer.html:13091,guid,guides,13091,doc/master/classTGLSAViewer.html,https://root.cern,https://root.cern/doc/master/classTGLSAViewer.html,1,['guid'],['guides']
Usability,"atures ROOT offers? Did you enable the tree cache (on by default for PROOF and one tree per file, off - for now, still - otherwise)? Do you only read the branches you need? I am working on a new TTree read access class that should simplify all of that considerably (and is type safe - no more void*&!); maybe I should take your comment as an invitation to speed up :-); Cheers, Axel. Submitted by Anonymous (not verified) on Thu, 07/23/2015 - 21:51 Permalink . Re: Interpreters . Hi ROOT user,; Thanks for your comments - they are excellent!; Your scenario would probably work - but we decided against it, and I believe that we have good reasons for that :-); GCCXML's future is limited; there is a re-write based on GCC's plugin mechanism, but both suffer from the same problems: we cannot influence what the GCC parser does. And reading headers, writing XML, parsing XML, writing (huge files of) C++, compiling, linking, loading - that's really, really inefficient and error prone.; Python is much simpler than C++. But it's still a horrible language in our environment, unless it's used as bash++. Not a single algorithm should be written in Python: it's terribly hard to convert it into C++, and it's incredibly slow in Python (ask the Google developers about youtube).; So C++ is not a good interpreted language, mainly due to its syntactic verbosity and its lack of dynamic interfaces and reflection capabilities - think; const std::type_info& ti = std::type_info::lookup(""MyClass"");; MyBase* ptr = ti.default_construct();; And Python is not appropriate for many use cases due to its lack of type safety and speed, and its lack of native binding to C++. Then which other language should we use?; Cheers, Axel. Submitted by Anonymous (not verified) on Thu, 07/23/2015 - 21:51 Permalink . Hi Alex, . Hi Alex,; Very good points but let me try to defend python. I have found that a following approach (used by ATLAS that I also adopted in my private code) works fantastically well:; -- Use python t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/blog/do-we-need-yet-another-custom-c-interpreter.html:16791,simpl,simpler,16791,d/blog/do-we-need-yet-another-custom-c-interpreter.html,https://root.cern,https://root.cern/d/blog/do-we-need-yet-another-custom-c-interpreter.html,1,['simpl'],['simpler']
Usability,"atures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TModuleGenerator;  ; class  TNumSlots;  Defines the number of threads in some of ROOT's interfaces. More...;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mutexes. More...;  ; class  TThreadedObject;  A wrapper to make object instances thread private, lazily. More...;  ; class  TThreadExecutor;  This class provides a simple interface to execute the same task multiple times in parallel threads, possibly with different arguments every time. More...;  ; class  TTreeProcessorMP;  This class provides an interface to process a TTree dataset in parallel with multi-process technology. More...;  ; class  TTreeProcessorMT;  A class to process the entries of a TTree in parallel. More...;  ; class  TVirtualRWMutex;  ; class  TWriteLockGuard;  . Typedefs; using ColumnNamesPtr_t = std::shared_ptr< const ColumnNames_t >;  ; typedef void(* DelArrFunc_t) (void *);  ; typedef void(* DelFunc_t) (void *);  ; typedef void(* DesFunc_t) (void *);  ; typedef void(* DirAutoAdd_t) (void *, TDirectory *);  ; using Double_v = Double_t;  ; using Float_v = Float_t;  ; using Int32_v = Int_t;  ; using Int_v = Int_t;  ; typedef std::map< std::string, ROOT::Internal::TSchemaType > MembersTypeMap_t;  ; typedef Long64_t(* MergeFunc_t) (void *, TCollection *, TFileMergeInfo *);  ; typedef void *(* NewArrFunc_t) (Long_t size, void *arena);  ; typedef void *(* NewFunc_t) ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v624/namespaceROOT.html:2893,simpl,simple,2893,doc/v624/namespaceROOT.html,https://root.cern,https://root.cern/doc/v624/namespaceROOT.html,1,['simpl'],['simple']
Usability,"atusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. THashTablefStringPropertyall properties of String type. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TDictAttributeMap(); Default constructor. ~TDictAttributeMap(); Default destructor. void AddProperty(const char* key, const char* value); Add a property with a String value to the TDictAttributeMap.; Parameters: key and char* value of the property. Bool_t HasKey(const char* key) const. const char* GetPropertyAsString(const char* key) const; Access the value of a String property using the key. TString RemovePropertyString(const char* key); Remove a String property from the attribute map specified by the key.; Returns the TString property removed or NULL if the property does not exist. Bool_t RemoveProperty(const char* key); Remove a property from the attribute map specified by the key.; Returns true if property exists and was removed, false if property; does not exist. void Clear(Option_t* option = """"); Deletes all the properties of the class. TDictAttributeMap(). Int_t GetPropertySize() const; { return fStringProperty.GetSize(); }. » Author: Bianca-Cristina Cristescu 03/07/13 » Copyright (C) 1995-2013, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id$ » Last generated: 2015-06-02 15:41; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TDictAttributeMap.html:6966,Clear,Clear,6966,root/html604/TDictAttributeMap.html,https://root.cern,https://root.cern/root/html604/TDictAttributeMap.html,1,['Clear'],['Clear']
Usability,"atusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. THashTablefStringPropertyall properties of String type. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TDictAttributeMap(); Default constructor. ~TDictAttributeMap(); Default destructor. void AddProperty(const char* key, const char* value); Add a property with a String value to the TDictAttributeMap.; Parameters: key and char* value of the property. Bool_t HasKey(const char* key) const. const char* GetPropertyAsString(const char* key) const; Access the value of a String property using the key. TString RemovePropertyString(const char* key); Remove a String property from the attribute map specified by the key.; Returns the TString property removed or NULL if the property does not exist. Bool_t RemoveProperty(const char* key); Remove a property from the attribute map specified by the key.; Returns true if property exists and was removed, false if property; does not exist. void Clear(Option_t* option = """"); Deletes all the properties of the class. TDictAttributeMap(). Int_t GetPropertySize() const; { return fStringProperty.GetSize(); }. » Author: Bianca-Cristina Cristescu 03/07/13 » Copyright (C) 1995-2013, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id$ » Last generated: 2015-06-30 14:42; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TDictAttributeMap.html:6966,Clear,Clear,6966,root/html602/TDictAttributeMap.html,https://root.cern,https://root.cern/root/html602/TDictAttributeMap.html,1,['Clear'],['Clear']
Usability,"atusstatus of actual query; TGTab*fTabmain tab frame; TGLabel*fTotaltotal progress info; TSessionViewer*fViewerpointer on main viewer; TGHProgressBar*frmProgcurrent process progress bar; static TSessionQueryFrame::EQueryStatuskAborted; static TSessionQueryFrame::EQueryStatuskDone; static TSessionQueryFrame::EQueryStatuskRunning; static TSessionQueryFrame::EQueryStatuskStopped. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionQueryFrame. Function documentation; TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionQueryFrame(); Destructor. void Build(TSessionViewer* gui); Build query information frame. void Modified(Bool_t mod = kTRUE); Notify changes in query editor settings. void Feedback(TList* objs); Feedback function connected to Feedback signal.; Used to update feedback histograms. void UpdateHistos(TList* objs); Update feedback histograms. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); New version of Progress (just forward to the old version; for the time being). void ProgressLocal(Long64_t total, Long64_t processed); Update progress bar and status labels. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void ResetProgressDialog(const char* selec, Int_t files, Long64_t first, Long64_t entries); Reset progress frame information fields. void OnBtnFinalize(); Finalize query. void OnBtnStop(); Stop processing query. void OnBtnShowLog(); Show query log. void OnBtnRetrieve(); Retrieve query. void OnBtnAbort(); Abort processing query. void OnBtnSubmit(); Submit query. void UpdateButtons(TQueryDescription* desc); Update buttons state for the current query status. void UpdateInfos(); Update query information (header) text view. TG",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSessionQueryFrame.html:22609,progress bar,progress bar,22609,root/html602/TSessionQueryFrame.html,https://root.cern,https://root.cern/root/html602/TSessionQueryFrame.html,4,['progress bar'],['progress bar']
Usability,"ault constructor.Definition TArrow.cxx:47; TArrow::fAngleFloat_t fAngleArrow opening angle (degrees)Definition TArrow.h:31; TArrow::SavePrimitivevoid SavePrimitive(std::ostream &out, Option_t *option="""") overrideSave primitive as a C++ statement(s) on output stream out.Definition TArrow.cxx:365; TArrow::SetOptionvirtual void SetOption(Option_t *option="">"")Definition TArrow.h:62; TArrow::fgDefaultOptionstatic TString fgDefaultOptionDefault Arrow shapes.Definition TArrow.h:37; TArrow::fOptionTString fOptionArrow shapes.Definition TArrow.h:33; TArrow::PaintArrowNDCvirtual void PaintArrowNDC(Double_t u1, Double_t v1, Double_t u2, Double_t v2, Float_t arrowsize=0.05, Option_t *option="">"")Draw this arrow with new coordinates in NDC.Definition TArrow.cxx:352; TArrow::PaintArrowvirtual void PaintArrow(Double_t x1, Double_t y1, Double_t x2, Double_t y2, Float_t arrowsize=0.05, Option_t *option="">"")Draw this arrow with new coordinates.Definition TArrow.cxx:175; TArrow::~TArrow~TArrow() overrideArrow default destructor.Definition TArrow.cxx:91; TArrow::GetArrowSizeFloat_t GetArrowSize() constDefinition TArrow.h:52; TArrow::SetAnglevirtual void SetAngle(Float_t angle=60)Definition TArrow.h:60; TArrow::GetDefaultArrowSizestatic Float_t GetDefaultArrowSize()Get default arrow size.Definition TArrow.cxx:431; TArrow::Copyvoid Copy(TObject &arrow) const overrideCopy this arrow to arrow.Definition TArrow.cxx:108; TAttFillFill Area Attributes class.Definition TAttFill.h:19; TLineUse the TLine constructor to create a simple line.Definition TLine.h:22; TObjectMother of all ROOT objects.Definition TObject.h:41; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; double; arrowDefinition RArrowDS.hxx:17; v2@ v2Definition rootcling_impl.cxx:3702; v1@ v1Definition rootcling_impl.cxx:3701; Drawth1 Draw(). graf2dgrafincTArrow.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:18 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TArrow_8h_source.html:6743,simpl,simple,6743,doc/master/TArrow_8h_source.html,https://root.cern,https://root.cern/doc/master/TArrow_8h_source.html,1,['simpl'],['simple']
Usability,"aultGC()(), FontStruct_t font=GetDefaultFontStruct(), UInt_t options=kDoubleBorder|kSunkenFrame);  Create progress bar. ;  ;  ~TGProgressBar () override;  ; virtual void Format (const char *format=""%.2f"");  Set format for displaying a value. ;  ; Pixel_t GetBarColor () const;  ; EBarType GetBarType () const;  ; EFillType GetFillType () const;  ; FontStruct_t GetFontStruct () const;  ; TString GetFormat () const;  ; Float_t GetMax () const;  ; Float_t GetMin () const;  ; GContext_t GetNormGC () const;  ; Float_t GetPosition () const;  ; Bool_t GetShowPos () const;  ; const char * GetValueFormat () const;  ; void Increment (Float_t inc);  Increment progress position. ;  ; TClass * IsA () const override;  ; virtual void Percent (Bool_t on);  ; virtual void Reset ();  Reset progress bar (i.e. set pos to 0). ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save progress bar parameters as a C++ statement(s) on output stream out. ;  ; void SetBarColor (const char *color=""blue"");  Set progress bar color. ;  ; virtual void SetBarColor (Pixel_t color);  Set progress bar color. ;  ; void SetBarType (EBarType type);  Set bar type. ;  ; void SetFillType (EFillType type);  Set fill type. ;  ; void SetForegroundColor (Pixel_t pixel) override;  Change text color drawing. ;  ; void SetMax (Float_t max);  ; void SetMin (Float_t min);  ; void SetPosition (Float_t pos);  Set progress position between [min,max]. ;  ; void SetRange (Float_t min, Float_t max);  Set min and max of progress bar. ;  ; virtual void ShowPos (Bool_t on);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t UsePercent () const;  ;  Public Member Functions inherited from TGFrame;  TGFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a TGFrame object. Options is an OR of the EFrameTypes. ;  ;  TGFrame (TGClient *c, W",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHProgressBar.html:2829,progress bar,progress bar,2829,doc/master/classTGHProgressBar.html,https://root.cern,https://root.cern/doc/master/classTGHProgressBar.html,2,['progress bar'],['progress bar']
Usability,"aus, expo,..), otherwise in case of pre-defined functions, some default initial values and limits are set. . ""C"" In case of linear fitting, do no calculate the chisquare (saves CPU time). . ""G"" Uses the gradient implemented in TF1::GradientPar for the minimization. This allows to use Automatic Differentiation when it is supported by the provided TF1 function. . ""EX0"" When fitting a TGraphErrors or TGraphAsymErrors do not consider errors in the X coordinates . ""ROB"" In case of linear fitting, compute the LTS regression coefficients (robust (resistant) regression), using the default fraction of good points ""ROB=0.x"" - compute the LTS regression coefficients, using 0.x as a fraction of good points . This function is used for fitting also the derived TGraph classes such as TGraphErrors or TGraphAsymmErrors. See the note below on how the errors are used when fitting a TGraphErrors or TGraphAsymmErrors.; The fitting of the TGraph, i.e simple data points without any error associated, is performed using the un-weighted least-square (chi-square) method. TGraphErrors fit:; In case of a TGraphErrors or TGraphAsymmErrors object, when x errors are present, the error along x, is projected along the y-direction by calculating the function at the points x-ex_low and x+ex_high, where ex_low and ex_high are the corresponding lower and upper error in x. The chi-square is then computed as the sum of the quantity below at each data point:. \[; \frac{(y-f(x))^{2}}{ey^{2}+(\frac{1}{2}(exl+exh)f'(x))^{2}}; \]. where x and y are the point coordinates, and ‘f’(x)is the derivative of the functionf(x)`.; In case of asymmetric errors, if the function lies below (above) the data point, ey is ey_low (ey_high).; The approach used to approximate the uncertainty in y because of the errors in x is to make it equal the error in x times the slope of the line. This approach is called ""effective variance method"" and the implementation is provided in the function FitUtil::EvaluateChi2Effective. Linear fitt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraph.html:49914,simpl,simple,49914,doc/master/classTGraph.html,https://root.cern,https://root.cern/doc/master/classTGraph.html,1,['simpl'],['simple']
Usability,"ause the viewer to suspend redraws etc, and after the EndScene the viewer will reset the camera to frame the new scene and redraw. [x3d viewer does not support changing of scenes - objects added after the first Open/CloseScene pair will be ignored.]. Filling TBuffer3D and Adding to Viewer; The viewers behind the TVirtualViewer3D interface differ greatly in their capabilities e.g. Some know how to draw certain shapes natively (e.g. spheres/tubes in OpenGL) - others always require a raw tessellation description of points/lines/segments.; Some need the 3D object positions in the global frame, others can cope with local frames + a translation matrix - which can give considerable performance benefits. To cope with these situations the object buffer is filled out in negotiation with the viewer. TBuffer3D classes are conceptually divided into enumerated sections Core, BoundingBox, Raw etc (see TBuffer3D.h for more details). . The SectionsValid() / SetSectionsValid / ClearSectionsValid() methods of TBuffer3D are used to test/set/clear these section valid flags.; The sections found in TBuffer3D (Core/BoundingBox/Raw Sizes/Raw) are sufficient to describe any tessellated shape in a generic fashion. An additional ShapeSpecific section in derived shape specific classes allows a more abstract shape description (""a sphere of inner radius x, outer radius y""). This enables a viewer which knows how to draw (tessellate) the shape itself to do so, which can bring considerable performance and quality benefits, while providing a generic fallback suitable for all viewers.; The rules for client negotiation with the viewer are:. If suitable specialized TBuffer3D class exists, use it, otherwise use TBuffer3D.; Complete the mandatory Core section.; Complete the ShapeSpecific section if applicable.; Complete the BoundingBox if you can.; Pass this buffer to the viewer using one of the AddObject() methods - see below. If the viewer requires more sections to be completed (Raw/RawSizes) AddObject()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualViewer3D.html:3344,clear,clear,3344,doc/master/classTVirtualViewer3D.html,https://root.cern,https://root.cern/doc/master/classTVirtualViewer3D.html,1,['clear'],['clear']
Usability,"aused. class TRecorderPaused: public TRecorderState. Represents state of TRecorder when paused. Function Members (Methods); public:. TRecorderPaused(const TRecorderPaused&); static TClass*Class(); virtual TRecorder::ERecorderStateGetState() const; virtual TClass*IsA() const; virtual voidTRecorderState::ListCmd(const char*); virtual voidTRecorderState::ListGui(const char*); TRecorderPaused&operator=(const TRecorderPaused&); virtual voidTRecorderState::Pause(TRecorder*); virtual voidTRecorderState::PrevCanvases(const char*, Option_t*); virtual Bool_tTRecorderState::Replay(TRecorder*, const char*, Bool_t, TRecorder::EReplayModes); virtual voidReplayStop(TRecorder* r); virtual voidResume(TRecorder* r); virtual voidShowMembers(TMemberInspector& insp); virtual voidTRecorderState::Start(TRecorder*, const char*, Option_t*, Window_t*, Int_t); virtual voidTRecorderState::Stop(TRecorder*, Bool_t); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. TRecorderPaused(TRecorderReplaying* state); voidTRecorderState::ChangeState(TRecorder* r, TRecorderState* s, Bool_t deletePreviousState). private:. (unknown)(). Data Members; private:. TRecorderReplaying*fReplayingStateReplaying that is paused. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TRecorderPaused(TRecorderReplaying* state); Rememeber the recorder state that is paused. void Resume(TRecorder* r); Continues replaying. void ReplayStop(TRecorder* r); Replaying is cancelled. TRecorder::ERecorderState GetState() const; Gets current state of recorder. TRecorderPaused(TRecorderReplaying* state). » Author: Katerina Opocenska 11/09/2008 » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id: TRecorder.h 35206 2010-09-08 14:01:27Z bellenot $ » Last generated: 2010-09-23 20:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRecorderPaused.html:1480,pause,paused,1480,root/html528/TRecorderPaused.html,https://root.cern,https://root.cern/root/html528/TRecorderPaused.html,2,['pause'],['paused']
Usability,"aused. class TRecorderPaused: public TRecorderState. Represents state of TRecorder when paused. Function Members (Methods); public:. TRecorderPaused(const TRecorderPaused&); static TClass*Class(); virtual TRecorder::ERecorderStateGetState() const; virtual TClass*IsA() const; virtual voidTRecorderState::ListCmd(const char*); virtual voidTRecorderState::ListGui(const char*); TRecorderPaused&operator=(const TRecorderPaused&); virtual voidTRecorderState::Pause(TRecorder*); virtual voidTRecorderState::PrevCanvases(const char*, Option_t*); virtual Bool_tTRecorderState::Replay(TRecorder*, const char*, Bool_t, TRecorder::EReplayModes); virtual voidReplayStop(TRecorder* r); virtual voidResume(TRecorder* r); virtual voidShowMembers(TMemberInspector& insp); virtual voidTRecorderState::Start(TRecorder*, const char*, Option_t*, Window_t*, Int_t); virtual voidTRecorderState::Stop(TRecorder*, Bool_t); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. TRecorderPaused(TRecorderReplaying* state); voidTRecorderState::ChangeState(TRecorder* r, TRecorderState* s, Bool_t deletePreviousState). private:. (unknown)(). Data Members; private:. TRecorderReplaying*fReplayingStateReplaying that is paused. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TRecorderPaused(TRecorderReplaying* state); Rememeber the recorder state that is paused. void Resume(TRecorder* r); Continues replaying. void ReplayStop(TRecorder* r); Replaying is cancelled. TRecorder::ERecorderState GetState() const; Gets current state of recorder. TRecorderPaused(TRecorderReplaying* state). » Author: Katerina Opocenska 11/09/2008 » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id: TRecorder.h 35206 2010-09-08 14:01:27Z bellenot $ » Last generated: 2011-07-04 15:36; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TRecorderPaused.html:1480,pause,paused,1480,root/html530/TRecorderPaused.html,https://root.cern,https://root.cern/root/html530/TRecorderPaused.html,2,['pause'],['paused']
Usability,"aused. class TRecorderPaused: public TRecorderState. Represents state of TRecorder when paused. Function Members (Methods); public:. TRecorderPaused(const TRecorderPaused&); static TClass*Class(); virtual TRecorder::ERecorderStateGetState() const; virtual TClass*IsA() const; virtual voidTRecorderState::ListCmd(const char*); virtual voidTRecorderState::ListGui(const char*); TRecorderPaused&operator=(const TRecorderPaused&); virtual voidTRecorderState::Pause(TRecorder*); virtual voidTRecorderState::PrevCanvases(const char*, Option_t*); virtual Bool_tTRecorderState::Replay(TRecorder*, const char*, Bool_t, TRecorder::EReplayModes); virtual voidReplayStop(TRecorder* r); virtual voidResume(TRecorder* r); virtual voidShowMembers(TMemberInspector& insp); virtual voidTRecorderState::Start(TRecorder*, const char*, Option_t*, Window_t*, Int_t); virtual voidTRecorderState::Stop(TRecorder*, Bool_t); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. TRecorderPaused(TRecorderReplaying* state); voidTRecorderState::ChangeState(TRecorder* r, TRecorderState* s, Bool_t deletePreviousState). private:. (unknown)(). Data Members; private:. TRecorderReplaying*fReplayingStateReplaying that is paused. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TRecorderPaused(TRecorderReplaying* state); Rememeber the recorder state that is paused. void Resume(TRecorder* r); Continues replaying. void ReplayStop(TRecorder* r); Replaying is cancelled. TRecorder::ERecorderState GetState() const; Gets current state of recorder. TRecorderPaused(TRecorderReplaying* state). » Author: Katerina Opocenska 11/09/2008 » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id: TRecorder.h 35206 2010-09-08 14:01:27Z bellenot $ » Last generated: 2011-11-03 20:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TRecorderPaused.html:1480,pause,paused,1480,root/html532/TRecorderPaused.html,https://root.cern,https://root.cern/root/html532/TRecorderPaused.html,5,"['Resume', 'pause']","['Resume', 'paused']"
Usability,"aussian resolution PDF do setConvolutionWindow(gaussMean,gaussSigma,5) Note that for a 'wide' Gaussian the -inf to +inf integration may converge more quickly than that over a finite range! The default numeric precision is 1e-7, i.e. the global default for numeric integration but you should experiment with this value to see if it is sufficient for example by studying the number of function calls that MINUIT needs to fit your function as function of the convolution precision. ; Definition at line 29 of file RooNumConvolution.h. Public Member Functions;  RooNumConvolution ();  ;  RooNumConvolution (const char *name, const char *title, RooRealVar &convVar, RooAbsReal &pdf, RooAbsReal &resmodel, const RooNumConvolution *proto=nullptr);  Constructor of convolution operator PDF. ;  ;  RooNumConvolution (const RooNumConvolution &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooNumConvolution () override;  Destructor. ;  ; void clearConvolutionWindow ();  Removes previously defined convolution window, reverting to convolution from -inf to +inf. ;  ; TObject * clone (const char *newname) const override;  ; RooNumIntConfig & convIntConfig ();  ; const RooNumIntConfig & convIntConfig () const;  ; double evaluate () const override;  Calculate convolution integral. ;  ; TClass * IsA () const override;  ; RooAbsReal & model () const;  ; RooAbsReal & pdf () const;  ; const TH2 * profileData () const;  ; void setCallProfiling (bool flag, Int_t nbinX=40, Int_t nbinCall=40, Int_t nCallHigh=1000);  Activate call profile if flag is set to true. ;  ; void setCallWarning (Int_t threshold=2000);  Activate warning messages if number of function calls needed for evaluation of convolution integral exceeds given threshold. ;  ; void setConvolutionWindow (RooAbsReal &centerParam, RooAbsReal &widthParam, double widthScaleFactor=1);  Restrict convolution integral to finite range [ x - C - S*W, x - C + S*W ] where x is current value of convolution variablem, C = centerParam, W=widthPa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumConvolution.html:2912,clear,clearConvolutionWindow,2912,doc/master/classRooNumConvolution.html,https://root.cern,https://root.cern/doc/master/classRooNumConvolution.html,1,['clear'],['clearConvolutionWindow']
Usability,"auto ten = pool.MapReduce([]() { return 1; }, 10, [](const std::vector<int> &v) { return std::accumulate(v.begin(), v.end(), 0); }); root[] ROOT::TProcessExecutor pool; auto tenOnes = pool.Map([]() { return 1; }, 10); auto ten = Reduce([](const std::vector<int> &v) { return std::accumulate(v.begin(), v.end(), 0); }, tenOnes); ; Create 10 histograms and merge them into one; root[] ROOT::TThreadExecutor pool; auto hist = pool.MapReduce(CreateAndFillHists, 10, PoolUtils::ReduceObjects);; ROOT::ExecutorUtils::ReduceObjectsMerge collection of TObjects.Definition PoolUtils.h:35; ROOT::TExecutorCRTP::Mapauto Map(F func, unsigned nTimes) -> std::vector< InvokeResult_t< F > >Execute a function without arguments several times.Definition TExecutorCRTP.hxx:185; ROOT::TExecutorCRTP::ReduceT * Reduce(const std::vector< T * > &mergeObjs)""Reduce"" an std::vector into a single object by using the object's Merge method.Definition TExecutorCRTP.hxx:347; ROOT::TProcessExecutorThis class provides a simple interface to execute the same task multiple times in parallel,...Definition TProcessExecutor.hxx:37; ROOT::TProcessExecutor::MapReduceauto MapReduce(F func, unsigned nTimes, R redfunc) -> InvokeResult_t< F >Execute a function nTimes in parallel (Map) and accumulate the results into a single value (Reduce).Definition TProcessExecutor.hxx:262; ROOT::TThreadExecutorThis class provides a simple interface to execute the same task multiple times in parallel threads,...Definition TThreadExecutor.hxx:41; ROOT::TThreadExecutor::MapReduceauto MapReduce(F func, unsigned nTimes, R redfunc) -> InvokeResult_t< F >Execute a function nTimes in parallel (Map) and accumulate the results into a single value (Reduce).Definition TThreadExecutor.hxx:482; v@ vDefinition rootcling_impl.cxx:3687; sumstatic uint64_t sum(uint64_t i)Definition Factory.cxx:2345. Definition at line 103 of file TExecutorCRTP.hxx. Public Member Functions;  TExecutorCRTP ()=default;  ;  TExecutorCRTP (const TExecutorCRTP &)=delete;  ; t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TExecutorCRTP.html:3807,simpl,simple,3807,doc/v632/classROOT_1_1TExecutorCRTP.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TExecutorCRTP.html,1,['simpl'],['simple']
Usability,"auto ten = pool.MapReduce([]() { return 1; }, 10, [](const std::vector<int> &v) { return std::accumulate(v.begin(), v.end(), 0); }); root[] ROOT::TProcessExecutor pool; auto tenOnes = pool.Map([]() { return 1; }, 10); auto ten = Reduce([](const std::vector<int> &v) { return std::accumulate(v.begin(), v.end(), 0); }, tenOnes); ; Create 10 histograms and merge them into one; root[] ROOT::TThreadExecutor pool; auto hist = pool.MapReduce(CreateAndFillHists, 10, PoolUtils::ReduceObjects);; ROOT::ExecutorUtils::ReduceObjectsMerge collection of TObjects.Definition PoolUtils.h:35; ROOT::TExecutorCRTP::Mapauto Map(F func, unsigned nTimes) -> std::vector< InvokeResult_t< F > >Execute a function without arguments several times.Definition TExecutorCRTP.hxx:185; ROOT::TExecutorCRTP::ReduceT * Reduce(const std::vector< T * > &mergeObjs)""Reduce"" an std::vector into a single object by using the object's Merge method.Definition TExecutorCRTP.hxx:347; ROOT::TProcessExecutorThis class provides a simple interface to execute the same task multiple times in parallel,...Definition TProcessExecutor.hxx:37; ROOT::TProcessExecutor::MapReduceauto MapReduce(F func, unsigned nTimes, R redfunc) -> InvokeResult_t< F >Execute a function nTimes in parallel (Map) and accumulate the results into a single value (Reduce).Definition TProcessExecutor.hxx:262; ROOT::TThreadExecutorThis class provides a simple interface to execute the same task multiple times in parallel threads,...Definition TThreadExecutor.hxx:41; ROOT::TThreadExecutor::MapReduceauto MapReduce(F func, unsigned nTimes, R redfunc) -> InvokeResult_t< F >Execute a function nTimes in parallel (Map) and accumulate the results into a single value (Reduce).Definition TThreadExecutor.hxx:482; v@ vDefinition rootcling_impl.cxx:3699; sumstatic uint64_t sum(uint64_t i)Definition Factory.cxx:2345. Definition at line 103 of file TExecutorCRTP.hxx. Public Member Functions;  TExecutorCRTP ()=default;  ;  TExecutorCRTP (const TExecutorCRTP &)=delete;  ; t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TExecutorCRTP.html:3808,simpl,simple,3808,doc/master/classROOT_1_1TExecutorCRTP.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TExecutorCRTP.html,1,['simpl'],['simple']
Usability,"available in TSpectrum2Painter and paint ""h2"". ; TSpectrum2Painter offers a large set of options/attributes. In the ""option"" parameter each of them can be set to specific values via ""operators"" in the option itself. for instance on can do: h2->Draw(""SPEC a(30,30,0)"");; to draw h2 with TSpectrum2Painter using all the default attributes except the viewing angles. The operators' names are case insensitive (one can use ""a"" or ""A""). Operators parameters are separated by "","". The operators can be put is any order in the option. Operators must be separated by "" "". No "" "" characters should be put in an operator. This help page describes all the available operators.; The way ""h2"" will be painted is controlled with 2 parameters the ""Display; modes groups"" and the ""Display Modes"".; ""Display modes groups"" can take the following values:. 0 = Simple - it covers simple display modes using one color only; 1 = Light - in this group the shading is carried out according to the position of the fictive light source; 2 = Height - in this group the shading is carried out according to the channel contents; 3 = LightHeight - combination of two previous shading algorithms. One can control the weight between both algorithms. ""Display modes"" can take the following values:. 1 = Points.; 2 = Grid.; 3 = Contours.; 4 = Bars.; 5 = LinesX.; 6 = LinesY.; 7 = BarsX.; 8 = BarsY.; 9 = Needles.; 10 = Surface.; 11 = Triangles. Using this function these parameters can be set using the ""dm"" operator in the option. Example: h2->Draw(""SPEC dm(1,2)"");; will paint the 2D histogram h2 using the ""Light Display mode group"" and the ""Grid Display mode"". The following table summarises all the possible combinations of the ""Display modes groups"" and the ""Display modes"". Simple Light Height Light-Height . Points X X X X . Grid X X X X . Contours X - X - . Bars X - X - . LinesX X X X X . LinesY X X X X . BarsX X - X - . BarsY X - X - . Needles X - - - . Surface - X X X . Triangles X X X X . The Pen Attributes can be chang",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2Painter.html:44370,simpl,simple,44370,doc/master/classTSpectrum2Painter.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2Painter.html,1,['simpl'],['simple']
Usability,"aversing the command stack downwards and; calling the ""undo"" method of each command in turn. It is also; possible to redo a sequence of commands by traversing the command; stack upwards and calling the ""redo"" method of each command. Examples:. 1. Create a new command. TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)""; ""SetFillColor(Color_t)"");. 1st parameter - the name of class; 2nd parameter - object; 3rd parameter - the name of do/redo method; 4th parameter - the name of undo method. Since redo,undo methods are the same, undo name can be omitted, e.g. TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");. For objects derived from TObject class name can be omitted, e.g. TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");. 2. Setting undo, redo parameters. Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);. 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values. Since the number of undo,redo parameters is the same one can use. com->SetArgs(1, new_color, old_color);. 3. Undo, redo method execution. com->Redo(); // execute redo method; com->Undo(); // execute undo method. 4. Merged commands. It possible to group several commands together so an end user; can undo and redo them with one command. TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);. 5. Macro commands. ""Merging"" allows to create macro commands, e.g. TQCommand *macro = new TQCommand(""my macro"");; macro->Add(com1);; macro->Add(com2);. During Redo operation commands composing macro command are executed; sequentially in direct order (first in first out). During Undo,; they are executed in reverse order (last in first out). 6. Undo manager. TQUndoManager is recorder of undo and redo operations. This is; command history list which can be traversed backwards and upwards; performing undo and redo operations.; To register co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TQCommand.html:1776,undo,undo,1776,root/html528/TQCommand.html,https://root.cern,https://root.cern/root/html528/TQCommand.html,40,['undo'],['undo']
Usability,"aving filled some entries in a Tree. ;  ; TPrincipal * Principal (const char *varexp="""", const char *selection="""", Option_t *option=""np"", Long64_t nentries=kMaxEntries, Long64_t firstentry=0);  Interface to the Principal Components Analysis class. ;  ; void Print (Option_t *option="""") const override;  Print a summary of the tree contents. ;  ; virtual void PrintCacheStats (Option_t *option="""") const;  Print statistics about the TreeCache for this tree. ;  ; virtual Long64_t Project (const char *hname, const char *varexp, const char *selection="""", Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0);  Make a projection of a tree using selections. ;  ; virtual TSQLResult * Query (const char *varexp="""", const char *selection="""", Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0);  Loop over entries and return a TSQLResult object containing entries following selection. ;  ; virtual Long64_t ReadFile (const char *filename, const char *branchDescriptor="""", char delimiter=' ');  Create or simply read branches from filename. ;  ; virtual Long64_t ReadStream (std::istream &inputStream, const char *branchDescriptor="""", char delimiter=' ');  Create or simply read branches from an input stream. ;  ; void RecursiveRemove (TObject *obj) override;  Make sure that obj (which is being deleted or will soon be) is no longer referenced by this TTree. ;  ; virtual void Refresh ();  Refresh contents of this tree and its branches from the current status on disk. ;  ; virtual void RegisterExternalFriend (TFriendElement *);  Record a TFriendElement that we need to warn when the chain switches to a new file (typically this is because this chain is a friend of another TChain) ;  ; virtual void RemoveExternalFriend (TFriendElement *);  Removes external friend. ;  ; virtual bool SetAlias (const char *aliasName, const char *aliasFormula);  Set a tree variable alias. ;  ; virtual void SetAutoFlush (Long64_t autof=-30000000);  This function may be calle",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTChain.html:24084,simpl,simply,24084,doc/v632/classTChain.html,https://root.cern,https://root.cern/doc/v632/classTChain.html,3,['simpl'],['simply']
Usability,"aw or deriving from them).; 236 ; 237bool TSelector::IsStandardDraw(const char *selec); 238{; 239 // Make sure we have a name; 240 if (!selec) {; 241 ::Info(""TSelector::IsStandardDraw"",; 242 ""selector name undefined - do nothing"");; 243 return false;; 244 }; 245 ; 246 bool stdselec = false;; 247 if (!strchr(selec, '.')) {; 248 if (strstr(selec, ""TSelectorDraw"")) {; 249 stdselec = true;; 250 } else {; 251 TClass *cl = TClass::GetClass(selec);; 252 if (cl && (cl->InheritsFrom(""TProofDraw"") ||; 253 cl->InheritsFrom(""TSelectorDraw""))); 254 stdselec = true;; 255 }; 256 }; 257 ; 258 // We are done; 259 return stdselec;; 260}; 261 ; 262////////////////////////////////////////////////////////////////////////////////; 263/// Imports the content of 'output' in the internal output list. Existing content; 264/// in the output list is discarded (unless found also in 'output').; 265/// In particular, if 'output' is nullptr or empty, reset the internal list.; 266/// On return, the content of 'output' is cleared to avoid double deletion issues.; 267/// (The caller is responsible of 'output' as container: its content is transferred; 268/// under the selector ownership).; 269 ; 270void TSelector::ImportOutput(TList *output) {; 271 ; 272 // Reset the list, if required; 273 if (!output || output->GetSize() <= 0) {; 274 fOutput->Delete();; 275 return;; 276 }; 277 ; 278 TObject *o;; 279 ; 280 // Remove from new list objects already existing locally; 281 TIter nxexo(fOutput);; 282 while ((o = nxexo())) {; 283 if (output->FindObject(o)) output->Remove(o);; 284 }; 285 ; 286 // Transfer remaining objects; 287 TIter nxo(output);; 288 while ((o = nxo())) {; 289 fOutput->Add(o);; 290 }; 291 ; 292 // Cleanup original list; 293 output->SetOwner(false);; 294 output->Clear(""nodelete"");; 295 ; 296 // Done; 297 return;; 298}; 299 ; 300////////////////////////////////////////////////////////////////////////////////; 301/// This method is called before processing entry. It is the user's responsibility t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSelector_8cxx_source.html:10544,clear,cleared,10544,doc/master/TSelector_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSelector_8cxx_source.html,1,['clear'],['cleared']
Usability,"aw(""SPEC c1(3) dm(0,1) a(30,30,0)"");; The operator “lp(x,y,z)” sets the light position. In Light and LightHeight display modes groups the color palette is calculated according to the fictive light source position in 3-d space. Using this function one can change the source’s position and thus achieve various graphical effects. This function does not apply for Simple and Height display modes groups. Default is: lp(1000,1000,100) .; The operator “s(shading,shadow)” allows to set the shading. The surface picture is composed of triangles. The edges of the neighboring triangles can be smoothed (shaded). The shadow can be painted as well. The function does not apply on Simple display modes group. The possible values for shading are:. 0 = Not Shaded,; 1 = Shaded. The possible values for shadow are:. 0 = Shadows are not painted,; 1 = Shadows are painted. Default values: s(1,0) .; The operator “b(bezier)” sets the Bezier smoothing. For Simple display modes group and for Grid, LinesX and LinesY display modes one can smooth data using Bezier smoothing algorithm. The function does not apply on other display modes groups and display modes. Possible values are: 0 = No bezier smoothing, 1 = Bezier smoothing. Default value is: b(0).; The operator “cw(width)” sets the contour width. This function applies only on for the Contours display mode. One can change the width between horizontal slices and thus their density. Default value: cw(50) .; The operator “lhw(weight)” sets the light height weight. For LightHeight display modes group one can change the weight between both shading algorithms. The function does not apply on other display modes groups. Default value is lhw(0.5) .; The operator “cm(enable,color,width,height,style)” allows to draw a marker on each node. In addition to the surface drawn using any above given algorithm one can display channel marks. One can control the color as well as the width, height (in pixels) and the style of the marks. The parameter enable can be set to",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:106378,Simpl,Simple,106378,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['Simpl'],['Simple']
Usability,"aw).; Float_tTGLSceneInfo::fOLLineWOptional override of scene outline line-width; TGLSceneBase*TGLSceneInfo::fScene; UInt_tTGLSceneInfo::fSceneStampScene's time-stamp on last update.; Short_tTGLSceneInfo::fStyleOptional override of scene style; TGLBoundingBoxTGLSceneInfo::fTransformedBBox; Bool_tTGLSceneInfo::fUpdateTimeoutedSet if update was interrupted.; Bool_tTGLSceneInfo::fViewCheckViewer side check if render is necessary.; TGLViewerBase*TGLSceneInfo::fViewer; Float_tTGLSceneInfo::fWFLineWOptional override of scene wire-frame line-width. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSceneInfo(TGLViewerBase* view = 0, TGLScene* scene = 0); Constructor. ~TSceneInfo(); Destructor. void ClearDrawElementVec(TGLScene::DrawElementVec_t& vec, Int_t maxSize); Clear given vec and if it grew too large compared to the size of; shape-of-interest also resize it. void ClearDrawElementPtrVec(TGLScene::DrawElementPtrVec_t& vec, Int_t maxSize); Clear given vec and if it grew too large compared to the size of; shape-of-interest also resize it. void ClearAfterRebuild(); Clear DrawElementVector fVisibleElement and optionally resize it; so that it doesn't take more space then required by all the; elements in the scene's draw-list. void ClearAfterUpdate(); Clear DrawElementPtrVectors and optionally resize them so that; they don't take more space then required by all the elements in; the scene's draw-list. void Lodify(TGLRnrCtx& ctx); Quantize LODs for gice render-context. void PreDraw(); Prepare for drawing - fill DrawElementPtrVectors from the; contents of fVisibleElements if there was some change. void PostDraw(); Clean-up after drawing, nothing to be done here. void ResetDrawStats(); Reset draw statistics. void UpdateDrawStats(const TGLPhysicalShape& shape, Short_t lod); Update draw stats, for newly drawn 'shape'. void DumpDrawStats(); Output draw stats to Info stream. TGLScene& operator=(const TGLScene::TSceneInfo& ). Bool_t CmpDrawEle",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLScene__TSceneInfo.html:6435,Clear,ClearDrawElementPtrVec,6435,root/html602/TGLScene__TSceneInfo.html,https://root.cern,https://root.cern/root/html602/TGLScene__TSceneInfo.html,4,['Clear'],"['Clear', 'ClearDrawElementPtrVec']"
Usability,"aw.C 1-D histogram drawing options ;  h2proj.C;  hbars.C Example of bar charts with 1-d histograms ;  histpalettecolor.C Palette coloring for histogram is activated thanks to the options PFC (Palette Fill Color), PLC (Palette Line Color) and AMC (Palette Marker Color) ;  hksimple.C Illustrates the advantages of a TH1K histogram ;  hlabels1.C 1-D histograms with alphanumeric labels ;  hlabels2.C 2-D histograms with alphanumeric labels ;  hstack.C Example of stacked histograms: class THStack ;  hsum.C Histograms filled and drawn in a loop ;  hsumTimer.C Demo of Timers ;  legendautoplaced.C The legend can be placed automatically in the current pad in an empty space found at painting time ;  logscales.C Draw parametric functions with log scales ;  multicolor.C Use a THStack to show a 2-D hist with cells with different colors ;  ratioplot1.C Example creating a simple ratio plot of two histograms using the pois division option ;  ratioplot1.py Example creating a simple ratio plot of two histograms using the pois division option ;  ratioplot2.C Example of a fit residual plot ;  ratioplot2.py Example of a fit residual plot ;  ratioplot3.C Example which shows how you can get the graph of the lower plot and set the y axis range for it ;  ratioplot3.py Example which shows how you can get the graph of the lower plot and set the y axis range for it ;  ratioplot4.C Example that shows custom dashed lines on the lower plot, specified by a vector of floats ;  ratioplot4.py Example that shows custom dashed lines on the lower plot, specified by a vector of floats ;  ratioplot5.C Example that shows how you can set the colors of the confidence interval bands by using the method TRatioPlot::SetConfidenceIntervalColors ;  ratioplot5.py Example that shows how you can set the colors of the confidence interval bands by using the method TRatioPlot::SetConfidenceIntervalColors ;  ratioplot6.C Example showing a fit residual plot, where the separation margin has been set to 0 ;  ratioplot6.py Exa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v614/files.html:125485,simpl,simple,125485,doc/v614/files.html,https://root.cern,https://root.cern/doc/v614/files.html,1,['simpl'],['simple']
Usability,"awable(). void TPadPainter::CopyDrawable ; (; Int_t ; device, . Int_t ; px, . Int_t ; py . ). overridevirtual . Copy a gVirtualX pixmap. ; Implements TVirtualPadPainter.; Definition at line 324 of file TPadPainter.cxx. ◆ CreateDrawable(). Int_t TPadPainter::CreateDrawable ; (; UInt_t ; w, . UInt_t ; h . ). overridevirtual . Create a gVirtualX Pixmap. ; Implements TVirtualPadPainter.; Definition at line 306 of file TPadPainter.cxx. ◆ DeclFileName(). static const char * TPadPainter::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 109 of file TPadPainter.h. ◆ DestroyDrawable(). void TPadPainter::DestroyDrawable ; (; Int_t ; device). overridevirtual . Close the current gVirtualX pixmap. ; Implements TVirtualPadPainter.; Definition at line 333 of file TPadPainter.cxx. ◆ DrawBox(). void TPadPainter::DrawBox ; (; Double_t ; x1, . Double_t ; y1, . Double_t ; x2, . Double_t ; y2, . EBoxMode ; mode . ). overridevirtual . Paint a simple box. ; Implements TVirtualPadPainter.; Definition at line 390 of file TPadPainter.cxx. ◆ DrawFillArea() [1/2]. void TPadPainter::DrawFillArea ; (; Int_t ; n, . const Double_t * ; x, . const Double_t * ; y . ). overridevirtual . Paint filled area. ; Implements TVirtualPadPainter.; Definition at line 411 of file TPadPainter.cxx. ◆ DrawFillArea() [2/2]. void TPadPainter::DrawFillArea ; (; Int_t ; n, . const Float_t * ; x, . const Float_t * ; y . ). overridevirtual . Paint filled area. ; Implements TVirtualPadPainter.; Definition at line 425 of file TPadPainter.cxx. ◆ DrawLine(). void TPadPainter::DrawLine ; (; Double_t ; x1, . Double_t ; y1, . Double_t ; x2, . Double_t ; y2 . ). overridevirtual . Paint a simple line. ; Implements TVirtualPadPainter.; Definition at line 360 of file TPadPainter.cxx. ◆ DrawLineNDC(). void TPadPainter::DrawLineNDC ; (; Double_t ; u1, . Double_t ; v1, . Double_t ; u2, . Double_t ; v2 . ). overridevirtual . Paint a simple line in normalized coordinates. ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPadPainter.html:8204,simpl,simple,8204,doc/master/classTPadPainter.html,https://root.cern,https://root.cern/doc/master/classTPadPainter.html,1,['simpl'],['simple']
Usability,"ax, Double_t tmin, Double_t tmax); TGraphPolargram Constructor. TGraphPolargram(const char* name = """"); Short constructor used in the case of a spider plot. ~TGraphPolargram(); TGraphPolargram destructor. void ChangeRangePolar(Double_t tmin, Double_t tmax); Set the Polar range.; tmin is the start number.; tmax is the end number. Int_t DistancetoPrimitive(Int_t px, Int_t py); Everything within the circle belongs to the TGraphPolargram. void Draw(Option_t* options = """"); Draw Polargram. void ExecuteEvent(Int_t event, Int_t px, Int_t py); Indicate that there is something to click here. Int_t FindAlign(Double_t angle); Find the alignement rule to apply for TText::SetTextAlign(Short_t). Double_t FindTextAngle(Double_t theta); Determine the orientation of the polar labels according to their angle. void Init(); Initiallize some of the fields of TGraphPolargram. void Paint(Option_t* options = """"); Paint TGraphPolargram. void PaintCircle(Double_t x, Double_t y, Double_t r, Double_t phimin, Double_t phimax, Double_t theta); This is simplifed from TEllipse::PaintEllipse.; Draw this ellipse with new coordinates. void PaintPolarDivisions(Bool_t noLabels); Draw Polar divisions.; Check for editable pad or create default. void PaintRadialDivisions(Bool_t drawaxis); Paint radial divisions.; Check for editable pad or create default. void ReduceFraction(Int_t Num, Int_t Denom, Int_t& rnum, Int_t& rden); Reduce fractions. void SetAxisAngle(Double_t angle = 0); Set axis angle. void SetNdivPolar(Int_t Ndiv = 508); Set the number of Polar divisions: enter a number ij with 0<i<99; 0<j<99; i sets the major Polar divisions.; j sets the minor Polar divisions. void SetNdivRadial(Int_t Ndiv = 508); Set the number of radial divisions: enter a number ij with 0<i<99; 0<j<99; i sets the major radial divisions.; j sets the minor radial divisions. void SetPolarLabel(Int_t div, const TString& label); Set some specified polar labels, used in the case of a spider plot. void SetPolarLabelColor(Color_t tco",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGraphPolargram.html:11759,simpl,simplifed,11759,root/html528/TGraphPolargram.html,https://root.cern,https://root.cern/root/html528/TGraphPolargram.html,10,['simpl'],['simplifed']
Usability,"aximum phi; Float_tfPhiminminimum phi; Float_tfRmaxmaximum radius; Float_tfRminminimum radius; Float_tfThemaxmaximum theta; Float_tfTheminminimum theta; TStringTNamed::fTitleobject title; Int_tTShape::fVisibilityVisibility flag; Float_tfaXCoeff along Ox; Float_tfaYCoeff along Oy; Float_tfaZCoeff along Oz. private:. Float_tfAspectRatioRelation between asumth and grid size (by default 1.0); Double_t*fCoTab! Table of cos(fPhimin) .... cos(Phi); Double_t*fCoThetaTab! Table of sin(gThemin) .... cos(Theta); Int_tfNdivnumber of divisions; Int_tfNz! number of sections; Double_t*fSiTab! Table of sin(fPhimin) .... sin(Phi). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSPHE(); SPHE shape default constructor. TSPHE(const char* name, const char* title, const char* material, Float_t rmin, Float_t rmax, Float_t themin, Float_t themax, Float_t phimin, Float_t phimax); SPHE shape normal constructor. TSPHE(const char* name, const char* title, const char* material, Float_t rmax); SPHE shape ""simplified"" constructor. ~TSPHE(); SPHE shape default destructor. Int_t DistancetoPrimitive(Int_t px, Int_t py); Compute distance from point px,py to a PSPHE. Compute the closest distance of approach from point px,py to each; computed outline point of the PSPHE (stolen from PCON). void SetEllipse(const Float_t* factors); Set ellipse. void SetNumberOfDivisions(Int_t p); Set number of divisions. void SetPoints(Double_t* points) const; Create SPHE points. void Sizeof3D() const; Return total X3D needed by TNode::ls (when called with option ""x""). void MakeTableOfCoSin() const; Make table of sine and cosine. void Streamer(TBuffer& ); Stream a class object. const TBuffer3D & GetBuffer3D(Int_t reqSections) const; Get buffer 3d. TSPHE(). Float_t GetRmin() const; {return fRmin;}. Float_t GetRmax() const; {return fRmax;}. Float_t GetThemin() const; {return fThemin;}. Float_t GetThemax() const; {return fThemax;}. Float_t GetPhimin() const; {return fPhimin;}. Float",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TSPHE.html:9447,simpl,simplified,9447,root/html534/TSPHE.html,https://root.cern,https://root.cern/root/html534/TSPHE.html,2,['simpl'],['simplified']
Usability,"aximum phi; Float_tfPhiminminimum phi; Float_tfRmaxmaximum radius; Float_tfRminminimum radius; Float_tfThemaxmaximum theta; Float_tfTheminminimum theta; TStringTNamed::fTitleobject title; Int_tTShape::fVisibilityVisibility flag; Float_tfaXCoeff along Ox; Float_tfaYCoeff along Oy; Float_tfaZCoeff along Oz. private:. Float_tfAspectRatioRelation between asumth and grid size (by default 1.0); Double_t*fCoTab! Table of cos(fPhimin) .... cos(Phi); Double_t*fCoThetaTab! Table of sin(gThemin) .... cos(Theta); Int_tfNdivnumber of divisions; Int_tfNz! number of sections; Double_t*fSiTab! Table of sin(fPhimin) .... sin(Phi). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSPHE(); SPHE shape default constructor. TSPHE(const char* name, const char* title, const char* material, Float_t rmin, Float_t rmax, Float_t themin, Float_t themax, Float_t phimin, Float_t phimax); SPHE shape normal constructor. TSPHE(const char* name, const char* title, const char* material, Float_t rmax); SPHE shape ""simplified"" constructor. ~TSPHE(); SPHE shape default destructor. Int_t DistancetoPrimitive(Int_t px, Int_t py); Compute distance from point px,py to a PSPHE. Compute the closest distance of approach from point px,py to each; computed outline point of the PSPHE (stolen from PCON). void SetEllipse(const Float_t* factors); Set ellipse. void SetNumberOfDivisions(Int_t p); Set number of divisions. void SetPoints(Double_t* points) const; Create SPHE points. void Sizeof3D() const; Return total X3D needed by TNode::ls (when called with option ""x""). void MakeTableOfCoSin() const; Make table of sine and cosine. void Streamer(TBuffer& b); Stream a class object. const TBuffer3D & GetBuffer3D(Int_t reqSections) const; Get buffer 3d. TSPHE(). Float_t GetRmin() const; {return fRmin;}. Float_t GetRmax() const; {return fRmax;}. Float_t GetThemin() const; {return fThemin;}. Float_t GetThemax() const; {return fThemax;}. Float_t GetPhimin() const; {return fPhimin;}. Floa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSPHE.html:9213,simpl,simplified,9213,root/html528/TSPHE.html,https://root.cern,https://root.cern/root/html528/TSPHE.html,4,['simpl'],['simplified']
Usability,"axis; static TStringTVirtualFitter::fgDefaultname of the default fitter (""Minuit"",""Fumili"",etc); static Double_tTVirtualFitter::fgErrorDefError definition (default=1); static TVirtualFitter*TVirtualFitter::fgFitterCurrent fitter (default TFitter); static Int_tTVirtualFitter::fgMaxiterMaximum number of iterations; static Int_tTVirtualFitter::fgMaxparMaximum number of fit parameters for current fitter; static Double_tTVirtualFitter::fgPrecisionmaximum precision. private:. Double_t*fCovarCovariance matrix; TMinuit*fMinuitpointer to the TMinuit object; Int_tfNlogNumber of elements in fSunLog; Double_t*fSumLogSum of logs (array of fNlog elements). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TFitter(Int_t maxpar = 25); default constructor*-*-; *-* ===================. ~TFitter(); default destructor*-*-*-; *-* ==================. Double_t Chisquare(Int_t npar, Double_t* params) const; return a chisquare equivalent. void Clear(Option_t* option = """"); reset the fitter environment. Int_t ExecuteCommand(const char* command, Double_t* args, Int_t nargs); Execute a fitter command;; command : command string; args : list of nargs command arguments. void FixParameter(Int_t ipar); Fix parameter ipar. void GetConfidenceIntervals(Int_t n, Int_t ndim, const Double_t* x, Double_t* ci, Double_t cl = 0.94999999999999996); Computes point-by-point confidence intervals for the fitted function; Parameters:; n - number of points; ndim - dimensions of points; x - points, at which to compute the intervals, for ndim > 1; should be in order: (x0,y0, x1, y1, ... xn, yn); ci - computed intervals are returned in this array; cl - confidence level, default=0.95; NOTE, that the intervals are approximate for nonlinear(in parameters) models. void GetConfidenceIntervals(TObject* obj, Double_t cl = 0.94999999999999996); Computes confidence intervals at level cl. Default is 0.95; The TObject parameter can be a TGraphErrors, a TGraph2DErrors or a TH1,2,3.; For Gra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TFitter.html:11526,Clear,Clear,11526,root/html602/TFitter.html,https://root.cern,https://root.cern/root/html602/TFitter.html,2,['Clear'],['Clear']
Usability,"axis; static TStringTVirtualFitter::fgDefaultname of the default fitter (""Minuit"",""Fumili"",etc); static Double_tTVirtualFitter::fgErrorDefError definition (default=1); static TVirtualFitter*TVirtualFitter::fgFitterCurrent fitter (default TFitter); static Int_tTVirtualFitter::fgMaxiterMaximum number of iterations; static Int_tTVirtualFitter::fgMaxparMaximum number of fit parameters for current fitter; static Double_tTVirtualFitter::fgPrecisionmaximum precision. private:. Double_t*fCovarCovariance matrix; TMinuit*fMinuitpointer to the TMinuit object; Int_tfNlogNumber of elements in fSunLog; Double_t*fSumLogSum of logs (array of fNlog elements). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TFitter(Int_t maxpar = 25); default constructor*-*-; *-* ===================. ~TFitter(); default destructor*-*-*-; *-* ==================. Double_t Chisquare(Int_t npar, Double_t* params) const; return a chisquare equivalent. void Clear(Option_t* option = """"); reset the fitter environment. Int_t ExecuteCommand(const char* command, Double_t* args, Int_t nargs); Execute a fitter command;; command : command string; args : list of nargs command arguments. void FixParameter(Int_t ipar); Fix parameter ipar. void GetConfidenceIntervals(Int_t n, Int_t ndim, const Double_t* x, Double_t* ci, Double_t cl = 0.95); Computes point-by-point confidence intervals for the fitted function; Parameters:; n - number of points; ndim - dimensions of points; x - points, at which to compute the intervals, for ndim > 1; should be in order: (x0,y0, x1, y1, ... xn, yn); ci - computed intervals are returned in this array; cl - confidence level, default=0.95; NOTE, that the intervals are approximate for nonlinear(in parameters) models. void GetConfidenceIntervals(TObject* obj, Double_t cl = 0.95); Computes confidence intervals at level cl. Default is 0.95; The TObject parameter can be a TGraphErrors, a TGraph2DErrors or a TH1,2,3.; For Graphs, confidence intervals are ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TFitter.html:10958,Clear,Clear,10958,root/html532/TFitter.html,https://root.cern,https://root.cern/root/html532/TFitter.html,2,['Clear'],['Clear']
Usability,"ay object (if one); Short_t**fPointer!Address of pointer to data buffer; TStringTNamed::fTitleobject title; Short_t*fValue!Pointer to data buffer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TLeafS(); Default constructor for LeafS*-*-*-*-*-*-*-*-; *-* ============================. TLeafS(TBranch* parent, const char* name, const char* type); Create a LeafS*-*-; *-* ==============; -. ~TLeafS(); Default destructor for a LeafS*-*-*-*-*-*-; *-* ===============================. void Export(TClonesArray* list, Int_t n); -*Export element from local leaf buffer to ClonesArray; *-* ====================================================. void FillBasket(TBuffer& b); -*-*-*-*Pack leaf elements in Basket output buffer; *-* ==========================================. const char * GetTypeName() const; Returns name of leaf type*-*-*-*-; *-* =========================. Double_t GetValue(Int_t i = 0) const; Returns current value of leaf; if leaf is a simple type, i must be set to 0; if leaf is an array, i is the array element number to be returned. void Import(TClonesArray* list, Int_t n); -*Import element from ClonesArray into local leaf buffer; *-* ======================================================. void PrintValue(Int_t i = 0) const; Prints leaf value. void ReadBasket(TBuffer& b); -*-*-*-*-*Read leaf elements from Basket input buffer; *-* ===========================================. void ReadBasketExport(TBuffer& b, TClonesArray* list, Int_t n); -*-*-*-*-*Read leaf elements from Basket input buffer; and export buffer to TClonesArray objects. void ReadValue(istream& s); read a integer integer from istream s and store it into the branch buffer. void SetAddress(void* add = 0); -*-*-*-*-*Set leaf buffer data address; *-* ============================. TLeafS(). Int_t GetMaximum() const; { return fMaximum; }. Int_t GetMinimum() const; { return fMinimum; }. void * GetValuePointer() const; {return fValue;}. void SetMaximum(Short_t max); { f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TLeafS.html:8523,simpl,simple,8523,root/html532/TLeafS.html,https://root.cern,https://root.cern/root/html532/TLeafS.html,2,['simpl'],['simple']
Usability,"ay object (if one); Short_t**fPointer!Address of pointer to data buffer; TStringTNamed::fTitleobject title; Short_t*fValue!Pointer to data buffer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TLeafS(); Default constructor for LeafS*-*-*-*-*-*-*-*-; *-* ============================. TLeafS(TBranch* parent, const char* name, const char* type); Create a LeafS*-*-; *-* ==============; -. ~TLeafS(); Default destructor for a LeafS*-*-*-*-*-*-; *-* ===============================. void Export(TClonesArray* list, Int_t n); -*Export element from local leaf buffer to ClonesArray; *-* ====================================================. void FillBasket(TBuffer& b); -*-*-*-*Pack leaf elements in Basket output buffer; *-* ==========================================. const char * GetTypeName() const; Returns name of leaf type*-*-*-*-; *-* =========================. Double_t GetValue(Int_t i = 0) const; Returns current value of leaf; if leaf is a simple type, i must be set to 0; if leaf is an array, i is the array element number to be returned. void Import(TClonesArray* list, Int_t n); -*Import element from ClonesArray into local leaf buffer; *-* ======================================================. void PrintValue(Int_t i = 0) const; Prints leaf value. void ReadBasket(TBuffer& b); -*-*-*-*-*Read leaf elements from Basket input buffer; *-* ===========================================. void ReadBasketExport(TBuffer& b, TClonesArray* list, Int_t n); -*-*-*-*-*Read leaf elements from Basket input buffer; and export buffer to TClonesArray objects. void ReadValue(istream& s); read a integer integer from istream s and store it into the branch buffer. void SetAddress(void* add = 0); -*-*-*-*-*Set leaf buffer data address; *-* ============================. TLeafS(). void * GetValuePointer() const; {return fValue;}. » Author: Rene Brun 12/01/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id: TLeafS.h",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TLeafS.html:8394,simpl,simple,8394,root/html528/TLeafS.html,https://root.cern,https://root.cern/root/html528/TLeafS.html,2,['simpl'],['simple']
Usability,"ay object (if one); Short_t**fPointer!Address of pointer to data buffer; TStringTNamed::fTitleobject title; Short_t*fValue!Pointer to data buffer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TLeafS(); Default constructor for LeafS*-*-*-*-*-*-*-*-; *-* ============================. TLeafS(TBranch* parent, const char* name, const char* type); Create a LeafS*-*-; *-* ==============; -. ~TLeafS(); Default destructor for a LeafS*-*-*-*-*-*-; *-* ===============================. void Export(TClonesArray* list, Int_t n); -*Export element from local leaf buffer to ClonesArray; *-* ====================================================. void FillBasket(TBuffer& b); -*-*-*-*Pack leaf elements in Basket output buffer; *-* ==========================================. const char * GetTypeName() const; Returns name of leaf type*-*-*-*-; *-* =========================. Double_t GetValue(Int_t i = 0) const; Returns current value of leaf; if leaf is a simple type, i must be set to 0; if leaf is an array, i is the array element number to be returned. void Import(TClonesArray* list, Int_t n); -*Import element from ClonesArray into local leaf buffer; *-* ======================================================. void PrintValue(Int_t i = 0) const; Prints leaf value. void ReadBasket(TBuffer& b); -*-*-*-*-*Read leaf elements from Basket input buffer; *-* ===========================================. void ReadBasketExport(TBuffer& b, TClonesArray* list, Int_t n); -*-*-*-*-*Read leaf elements from Basket input buffer; and export buffer to TClonesArray objects. void ReadValue(istream& s, Char_t delim = ' '); read a integer integer from istream s and store it into the branch buffer. void SetAddress(void* add = 0); -*-*-*-*-*Set leaf buffer data address; *-* ============================. TLeafS(). Int_t GetMaximum() const; { return fMaximum; }. Int_t GetMinimum() const; { return fMinimum; }. void * GetValuePointer() const; {return fValue;}. void SetMaxim",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TLeafS.html:8686,simpl,simple,8686,root/html534/TLeafS.html,https://root.cern,https://root.cern/root/html534/TLeafS.html,2,['simpl'],['simple']
Usability,"ay object (if one); Short_t**fPointer!Address of pointer to data buffer; TStringTNamed::fTitleobject title; Short_t*fValue!Pointer to data buffer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TLeafS(); Default constructor for LeafS*-*-*-*-*-*-*-*-; *-* ============================. TLeafS(TBranch* parent, const char* name, const char* type); Create a LeafS*-*-; *-* ==============; -. ~TLeafS(); Default destructor for a LeafS*-*-*-*-*-*-; *-* ===============================. void Export(TClonesArray* list, Int_t n); -*Export element from local leaf buffer to ClonesArray; *-* ====================================================. void FillBasket(TBuffer& b); -*-*-*-*Pack leaf elements in Basket output buffer; *-* ==========================================. const char * GetTypeName() const; Returns name of leaf type*-*-*-*-; *-* =========================. Double_t GetValue(Int_t i = 0) const; Returns current value of leaf; if leaf is a simple type, i must be set to 0; if leaf is an array, i is the array element number to be returned. void Import(TClonesArray* list, Int_t n); -*Import element from ClonesArray into local leaf buffer; *-* ======================================================. void PrintValue(Int_t i = 0) const; Prints leaf value. void ReadBasket(TBuffer& b); -*-*-*-*-*Read leaf elements from Basket input buffer; *-* ===========================================. void ReadBasketExport(TBuffer& b, TClonesArray* list, Int_t n); -*-*-*-*-*Read leaf elements from Basket input buffer; and export buffer to TClonesArray objects. void ReadValue(istream& s, Char_t delim = ' '); read a integer integer from std::istream s and store it into the branch buffer. void SetAddress(void* add = 0); -*-*-*-*-*Set leaf buffer data address; *-* ============================. TLeafS(). Int_t GetMaximum() const; { return fMaximum; }. Int_t GetMinimum() const; { return fMinimum; }. void * GetValuePointer() const; {return fValue;}. void Set",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TLeafS.html:9178,simpl,simple,9178,root/html602/TLeafS.html,https://root.cern,https://root.cern/root/html602/TLeafS.html,4,['simpl'],['simple']
Usability,"ayChannel* dc) const; Returns ENDF code of decay result. void FillPopulation(TObjArray* population, Double_t precision = 0.001, Double_t factor = 1.); Fills the input array with the set of RN elements resulting from the decay of; this one. All element in the list will contain the time evolution of their; proportion by number with respect to this element. The proportion can be; retrieved via the method TGeoElementRN::Ratio().; The precision represent the minimum cumulative branching ratio for; which decay products are still taken into account. void MakeName(Int_t a, Int_t z, Int_t iso); Generate a default name for the element. void Print(Option_t* option = """") const; Print info about the element;. TGeoElementRN * ReadElementRN(const char* record, Int_t& ndecays); Create element from line record. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive for RN elements. void AddRatio(TGeoBatemanSol& ratio); Adds a proportion ratio to the existing one. void ResetRatio(); Clears the existing ratio. TGeoElement & operator=(const TGeoElementRN& elem). Int_t ENDFCode() const; methods. { return 0;}. Bool_t IsRadioNuclide() const; {return kFALSE;}. TGeoElementRN(const TGeoElementRN& elem). Int_t ENDF(Int_t a, Int_t z, Int_t iso); {return 10000*z+10*a+iso;}. Int_t MassNo() const; {return (Int_t)fA;}. Int_t AtomicNo() const; {return fZ;}. Int_t IsoNo() const; {return fIso;}. Double_t Level() const; {return fLevel;}. Double_t MassEx() const; {return fDeltaM;}. Double_t HalfLife() const; {return fHalfLife;}. Double_t NatAbun() const; {return fNatAbun;}. const char* PJ() const; {return fTitle.Data();}. Double_t TH_F() const; {return fTH_F;}. Double_t TG_F() const; {return fTG_F;}. Double_t TH_S() const; {return fTH_S;}. Double_t TG_S() const; {return fTG_S;}. Double_t Status() const; {return fStatus;}. Bool_t Stable() const; {return !fDecays;}. TObjArray * Decays() const; {return fDecays;}. TGeoBatemanSol * Ratio() const; {return fRatio;}. » Author: Andrei Gheata 17",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoElementRN.html:10030,Clear,Clears,10030,root/html532/TGeoElementRN.html,https://root.cern,https://root.cern/root/html532/TGeoElementRN.html,4,['Clear'],['Clears']
Usability,"ayout engine as far as; possible with the text that is available. The display is updated; appropriately. void SetTableRelief(int relief); Sets relief mode of html table. void SetRuleRelief(int relief); Sets relief mode of html rule. void UnderlineLinks(int onoff); Set/reset html links underline. void SetBaseUri(const char* uri); Sets base URI. int GotoAnchor(const char* name); Go to anchor position. const char * GetUid(const char* string); Given a string, this procedure returns a unique identifier for the; string. This procedure returns a pointer to a new char string corresponding to; the ""string"" argument. The new string has a value identical to string; (strcmp will return 0), but it's guaranteed that any other calls to this; procedure with a string equal to ""string"" will return exactly the same; result (i.e. can compare pointer *values* directly, without having to; call strcmp on what they point to). void ComputeVirtualSize(); Computes virtual size of html area. void ClearGcCache(); Clear the cache of GCs. void ResetLayoutContext(); Reset the main layout context in the main widget. This happens; before we redo the layout, or just before deleting the widget. void Redraw(); This routine is invoked in order to redraw all or part of the HTML; widget. This might happen because the display has changed, or in; response to an expose event. In all cases, though, this routine; is called by an idle handler. void ScheduleRedraw(); Make sure that a call to the Redraw() routine has been queued. Bool_t HandleIdleEvent(TGIdleHandler* i); Handles idle event. void RedrawArea(int left, int top, int right, int bottom); If any part of the screen needs to be redrawn, then call this routine; with the values of a box (in window coordinates) that needs to be; redrawn. This routine will schedule an idle handler to do the redraw. The box coordinates are relative to the clipping window (fCanvas). void DrawRegion(Int_t x, Int_t y, UInt_t w, UInt_t h); Draw region defined by [x,y] [w,h]. Bool_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGHtml.html:33440,Clear,ClearGcCache,33440,root/html532/TGHtml.html,https://root.cern,https://root.cern/root/html532/TGHtml.html,8,['Clear'],"['Clear', 'ClearGcCache']"
Usability,"ays a recorded ROOT session showing how to perform various interactive GUI operations with the guitest.C macro While replaying the session, several temporary macros (guitest0xx.C) macros will be saved. ;  ; file  guiWithCLING.C;  A simple example of entering CLING commands and having the CLING output in a ROOT GUI application window. ;  ; file  iconAsXPMData.C;  A simple example of creating icon image from XPM data, included into the code. ;  ; file  listBox.C;  This macro gives an example of how to create a list box and how to set and use its multiple selection feature. ;  ; file  mditest.C;  GUI MDI features. ;  ; file  ntupleTableTest.C;  This TableTest class is a simple example of how to use a TGTable with a TTreeTableInterface. ;  ; file  numberEntry.C;  This macro gives an example of how to create a number entry and how to update a label according to the changed value of this number entry. ;  ; file  simpleTableTest.C;  This TableTest class is a simple example of how to use a TGSimpleTable that creates and owns it's own TGSimpleTableInterface. ;  ; file  Slider3Demo.C;  Simple macro showing capabilities of triple slider. ;  ; file  splitbuttonTest.C;  A simple example that shows the usage of a TGSplitButton. ;  ; file  splitterHorizontal.C;  This macro gives an example of how to create a horizontal splitter. ;  ; file  splitterVertical.C;  This macro gives an example of how to create a vertical splitter. ;  ; file  staffTableTest.C;  This TableTest class is a simple example of how to use a TGTable with a TTreeTableInterface. ;  ; file  statusBar.C;  This macro gives an example of how to create a status bar related to an embedded canvas that shows the info of the selected object, exactly as the status bar of any canvas window. ;  ; file  textEntries.C;  This macro gives an example of how to set/change text entry attributes. ;  ; file  textviewostream.C;  This macro gives an example of how to use the TGTextViewostream widget. ;  ; file  WorldMap.C;  This macro sh",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__gui.html:2894,simpl,simple,2894,doc/master/group__tutorial__gui.html,https://root.cern,https://root.cern/doc/master/group__tutorial__gui.html,1,['simpl'],['simple']
Usability,"b*TGeoGedFrame::fTabtab of the ged-editor; TGeoTabManager*TGeoGedFrame::fTabMgrtab manager corresponding to ged-editor; TGTextButton*TGeoPconEditor::fUndoUndo-Button; UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; Double_t*TGeoPconEditor::fZiInitial Z positions; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoPgonEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for polycone editor. ~TGeoPgonEditor(); Destructor. void SetModel(TObject* obj); Connect to a given pcon. void DoApply(); Slot for applying modifications. void DoUndo(); Slot for undoing last operation. void CreateEdges(); Create number entry for Nedges. void DoNedges(); Change number of edges. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id$ » Last generated: 2015-03-14 16:39; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoPgonEditor.html:22158,undo,undoing,22158,root/html534/TGeoPgonEditor.html,https://root.cern,https://root.cern/root/html534/TGeoPgonEditor.html,2,['undo'],['undoing']
Usability,"bMgrtab manager corresponding to ged-editor; TGTextButton*TGeoTubeEditor::fUndoUndo-Button; UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoTubeSegEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for tube segment editor. ~TGeoTubeSegEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the selected object. void DoPhi1(); Slot for phi1. void DoPhi2(); Slot for phi2. void DoPhi(); Slot for phi slider. void DoApply(); Slot for applying modifications. void DoUndo(); Slot for undoing last operation. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id: TGeoTubeEditor.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2010-09-23 20:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoTubeSegEditor.html:21819,undo,undoing,21819,root/html528/TGeoTubeSegEditor.html,https://root.cern,https://root.cern/root/html528/TGeoTubeSegEditor.html,1,['undo'],['undoing']
Usability,"bMgrtab manager corresponding to ged-editor; TGTextButton*TGeoTubeEditor::fUndoUndo-Button; UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoTubeSegEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for tube segment editor. ~TGeoTubeSegEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the selected object. void DoPhi1(); Slot for phi1. void DoPhi2(); Slot for phi2. void DoPhi(); Slot for phi slider. void DoApply(); Slot for applying modifications. void DoUndo(); Slot for undoing last operation. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id: TGeoTubeEditor.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-07-04 15:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGeoTubeSegEditor.html:21919,undo,undoing,21919,root/html530/TGeoTubeSegEditor.html,https://root.cern,https://root.cern/root/html530/TGeoTubeSegEditor.html,1,['undo'],['undoing']
Usability,"bMgrtab manager corresponding to ged-editor; TGTextButton*TGeoTubeEditor::fUndoUndo-Button; UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoTubeSegEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for tube segment editor. ~TGeoTubeSegEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the selected object. void DoPhi1(); Slot for phi1. void DoPhi2(); Slot for phi2. void DoPhi(); Slot for phi slider. void DoApply(); Slot for applying modifications. void DoUndo(); Slot for undoing last operation. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id: TGeoTubeEditor.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoTubeSegEditor.html:21919,undo,undoing,21919,root/html532/TGeoTubeSegEditor.html,https://root.cern,https://root.cern/root/html532/TGeoTubeSegEditor.html,2,['undo'],['undoing']
Usability,"back about processed events. ;  ; file  exec_macro.C;  This utility macro executes the macro ""macro"" given as first argument and save a capture in a png file. ;  ; file  games.C;  This macro runs three ""games"" that each nicely illustrate the graphics capabilities of ROOT. ;  ; file  gtreeTableTest.C;  This TableTest class is a simple example of how to use a TGTreeTable. ;  ; file  guilabels.C;  This macro gives an example of how to create different kind of labels and the possibility to enable/disable them. ;  ; file  guitest.C;  Test program for ROOT native GUI classes Exactly like $ROOTSYS/test/guitest.cxx but using the new signal and slots communication mechanism. ;  ; file  guitest_playback.C;  This macro plays a recorded ROOT session showing how to perform various interactive GUI operations with the guitest.C macro While replaying the session, several temporary macros (guitest0xx.C) macros will be saved. ;  ; file  guiWithCLING.C;  A simple example of entering CLING commands and having the CLING output in a ROOT GUI application window. ;  ; file  iconAsXPMData.C;  A simple example of creating icon image from XPM data, included into the code. ;  ; file  listBox.C;  This macro gives an example of how to create a list box and how to set and use its multiple selection feature. ;  ; file  mditest.C;  GUI MDI features. ;  ; file  ntupleTableTest.C;  This TableTest class is a simple example of how to use a TGTable with a TTreeTableInterface. ;  ; file  numberEntry.C;  This macro gives an example of how to create a number entry and how to update a label according to the changed value of this number entry. ;  ; file  simpleTableTest.C;  This TableTest class is a simple example of how to use a TGSimpleTable that creates and owns it's own TGSimpleTableInterface. ;  ; file  Slider3Demo.C;  Simple macro showing capabilities of triple slider. ;  ; file  splitbuttonTest.C;  A simple example that shows the usage of a TGSplitButton. ;  ; file  splitterHorizontal.C;  This macro gi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__gui.html:2160,simpl,simple,2160,doc/master/group__tutorial__gui.html,https://root.cern,https://root.cern/doc/master/group__tutorial__gui.html,1,['simpl'],['simple']
Usability,"basket number written; Long64_tTBranch::fZipBytesTotal number of bytes in all leaves after compression; static Int_tTBranch::fgCount! branch counter. private:. Long64_tfRequestedEntry! Cursor indicating which entry is being requested. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TBranchRef(); Default constructor. TBranchRef(TTree* tree); Main constructor called by TTree::BranchRef. ~TBranchRef(); Typical destructor. void Clear(Option_t* option = """"); Clear entries in the TRefTable. Int_t Fill(); Fill the branch basket with the referenced objects parent numbers. Bool_t Notify(); This function is called by TRefTable::Notify, itself called by; TRef::GetObject.; The function reads the branch containing the object referenced; by the TRef. void Print(Option_t* option = """") const; Print the TRefTable branch. void ReadLeavesImpl(TBuffer& b); This function called by TBranch::GetEntry overloads TBranch::ReadLeaves. void FillLeavesImpl(TBuffer& b); This function called by TBranch::Fill overloads TBranch::FillLeaves. void Reset(Option_t* option = """"); Existing buffers are deleted; Entries, max and min are reset; TRefTable is cleared. void ResetAfterMerge(TFileMergeInfo* ); Reset a Branch after a Merge operation (drop data but keep customizations); TRefTable is cleared. Int_t SetParent(const TObject* obj, Int_t branchID); -- Set the current parent branch. This function is called by TBranchElement::GetEntry(); and TBranchElement::Fill() when reading or writing; branches that may contain referenced objects. TRefTable * GetRefTable() const; {return fRefTable;}. void SetRequestedEntry(Long64_t entry); {fRequestedEntry = entry;}. » Author: Rene Brun 19/08/2004 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id$ » Last generated: 2015-03-12 16:37; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TBranchRef.html:14937,clear,cleared,14937,root/html534/TBranchRef.html,https://root.cern,https://root.cern/root/html534/TBranchRef.html,4,['clear'],['cleared']
Usability,"be generated if the elapsed time is less than a second.; 13.4.6 Examples of Using the Generators; The method Rndm() is used for generating a pseudo-random number distributed between 0 and 1 as shown in the following example:; // use default seed; // (same random numbers will be generated each time); TRandom3 r; // generate a number in interval ]0,1] (0 is excluded); r.Rndm();; double x[100];; r.RndmArray(100,x); // generate an array of random numbers in ]0,1]; TRandom3 rdm(111); // construct with a user-defined seed; // use 0: a unique seed will be automatically generated using TUUID; TRandom1 r1(0);; TRandom2 r2(0);; TRandom3 r3(0);; // seed generated using machine clock (different every second); TRandom r0(0);; 13.4.7 Random Number Distributions; The TRandom base class provides functions, which can be used by all the other derived classes for generating random variates according to predefined distributions. In the simplest cases, like in the case of the exponential distribution, the non-uniform random number is obtained by applying appropriate transformations. In the more complicated cases, random variates are obtained using acceptance-rejection methods, which require several random numbers.; TRandom3 r;; // generate a gaussian distributed number with:; // mu=0, sigma=1 (default values); double x1 = r.Gaus();; double x2 = r.Gaus(10,3); // use mu = 10, sigma = 3;; The following table shows the various distributions that can be generated using methods of the TRandom classes. More information is available in the reference documentation for TRandom. In addition, random numbers distributed according to a user defined function, in a limited interval, or to a user defined histogram, can be generated in a very efficient way using TF1::GetRandom() or TH1::GetRandom(). Distributions; Description. Double_t Uniform(Double_t x1,Double_t x2 ); Uniform random numbers between x1,x2. Double_t Gaus(Double_t mu,Double_t sigma ); Gaussian random numbers.; Default values: mu=0, sigma=",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:669643,simpl,simplest,669643,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['simpl'],['simplest']
Usability,"be passed to our generateEvent() implementation, but otherwise its value is arbitrary. The default implementation of this method returns zero. Subclasses will usually implement this method using the matchArgs() methods to advertise the algorithms they provide. ; Reimplemented from RooAbsPdf.; Definition at line 166 of file RooGamma.cxx. ◆ IsA(). TClass * RooGamma::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsPdf.; Definition at line 51 of file RooGamma.h. ◆ Streamer(). void RooGamma::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsPdf. ◆ StreamerNVirtual(). void RooGamma::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 51 of file RooGamma.h. ◆ translate(). void RooGamma::translate ; (; RooFit::Detail::CodeSquashContext & ; ctx); const. overridevirtual . This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ; The function adds the code represented by each class as an std::string (that is later concatenated with code strings from translate calls) to form the C++ code that AD tools can understand. Any class that wants to support AD, has to implement this function.; Parameters. [in]ctxAn object to manage auxiliary information for code-squashing. Also takes the code string that this class outputs into the squashed code through the 'addToCodeBody' function. . Reimplemented from RooAbsArg.; Definition at line 90 of file RooGamma.cxx. Member Data Documentation. ◆ beta. RooRealProxy RooGamma::beta. protected . Definition at line 42 of file RooGamma.h. ◆ gamma. RooRealProxy RooGamma::gamma. protected . Definition at line 41 of file RooGamma.h. ◆ mu. RooRealProxy RooGamma::mu. protected . Definition at line 43 of file RooGamma.h. ◆ x. RooRealProxy RooGamma::x. protected . Definition at line 40 of file RooGamma.h. Libraries for RooGamma",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooGamma.html:79741,simpl,simple,79741,doc/master/classRooGamma.html,https://root.cern,https://root.cern/doc/master/classRooGamma.html,1,['simpl'],['simple']
Usability,"be printed if; the specified label does not represent a valid state. Bool_t defineType(const char* label); Define a state with given name, the lowest available; positive integer is assigned as index. Category; state labels may not contain semicolons.; Error status is return if state with given name; is already defined. Bool_t defineType(const char* label, Int_t index); Define a state with given name and index. Category; state labels may not contain semicolons; Error status is return if state with given name; or index is already defined. Bool_t readFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); Read object contents from given stream. void writeToStream(ostream& os, Bool_t compact) const; compact only at the moment. void clearRange(const char* name, Bool_t silent); Check that both input arguments are not null pointers. void setRange(const char* rangeName, const char* stateNameList). void addToRange(const char* rangeName, const char* stateNameList); Check that both input arguments are not null pointers. Bool_t isStateInRange(const char* rangeName, const char* stateName) const; Check that both input arguments are not null pointers. void Streamer(TBuffer& b). TObject* clone(const char* newname) const; { return new RooCategory(*this,newname); }. Int_t getIndex() const; Value modifiers. const char* getLabel() const. Bool_t isFundamental() const; We implement a fundamental type of AbsArg that can be stored in a dataset. void clearTypes(); { RooAbsCategory::clearTypes() ; }. Bool_t inRange(const char* rangeName) const; Returns true of current value of category is inside given range. Bool_t hasRange(const char* rangeName) const; Returns true if category has range with given name. RooCatType evaluate() const; Dummy implementation. » Last changed: Mon Dec 7 13:47:04 2009 » Last generated: 2009-12-07 13:47; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooCategory.html:24176,clear,clearTypes,24176,root/html526/RooCategory.html,https://root.cern,https://root.cern/root/html526/RooCategory.html,2,['clear'],['clearTypes']
Usability,"be printed if; the specified label does not represent a valid state. Bool_t defineType(const char* label); Define a state with given name, the lowest available; positive integer is assigned as index. Category; state labels may not contain semicolons.; Error status is return if state with given name; is already defined. Bool_t defineType(const char* label, Int_t index); Define a state with given name and index. Category; state labels may not contain semicolons; Error status is return if state with given name; or index is already defined. Bool_t readFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); Read object contents from given stream. void writeToStream(ostream& os, Bool_t compact) const; compact only at the moment. void clearRange(const char* name, Bool_t silent); Check that both input arguments are not null pointers. void setRange(const char* rangeName, const char* stateNameList). void addToRange(const char* rangeName, const char* stateNameList); Check that both input arguments are not null pointers. Bool_t isStateInRange(const char* rangeName, const char* stateName) const; Check that both input arguments are not null pointers. void Streamer(TBuffer& b). TObject* clone(const char* newname) const; { return new RooCategory(*this,newname); }. Int_t getIndex() const; Value modifiers. const char* getLabel() const. Bool_t isFundamental() const; We implement a fundamental type of AbsArg that can be stored in a dataset. void clearTypes(); { RooAbsCategory::clearTypes() ; }. Bool_t inRange(const char* rangeName) const; Returns true of current value of category is inside given range. Bool_t hasRange(const char* rangeName) const; Returns true if category has range with given name. RooCatType evaluate() const; Dummy implementation. » Last changed: Mon Jul 4 15:22:24 2011 » Last generated: 2011-07-04 15:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooCategory.html:24430,clear,clearTypes,24430,root/html530/RooCategory.html,https://root.cern,https://root.cern/root/html530/RooCategory.html,2,['clear'],['clearTypes']
Usability,"be printed if; the specified label does not represent a valid state. Bool_t defineType(const char* label); Define a state with given name, the lowest available; positive integer is assigned as index. Category; state labels may not contain semicolons.; Error status is return if state with given name; is already defined. Bool_t defineType(const char* label, Int_t index); Define a state with given name and index. Category; state labels may not contain semicolons; Error status is return if state with given name; or index is already defined. Bool_t readFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); Read object contents from given stream. void writeToStream(ostream& os, Bool_t compact) const; compact only at the moment. void clearRange(const char* name, Bool_t silent); Check that both input arguments are not null pointers. void setRange(const char* rangeName, const char* stateNameList). void addToRange(const char* rangeName, const char* stateNameList); Check that both input arguments are not null pointers. Bool_t isStateInRange(const char* rangeName, const char* stateName) const; Check that both input arguments are not null pointers. void Streamer(TBuffer& b). TObject* clone(const char* newname) const; { return new RooCategory(*this,newname); }. Int_t getIndex() const; Value modifiers. const char* getLabel() const. Bool_t isFundamental() const; We implement a fundamental type of AbsArg that can be stored in a dataset. void clearTypes(); { RooAbsCategory::clearTypes() ; }. Bool_t inRange(const char* rangeName) const; Returns true of current value of category is inside given range. Bool_t hasRange(const char* rangeName) const; Returns true if category has range with given name. RooCatType evaluate() const; Dummy implementation. » Last changed: Sat Oct 9 22:38:38 2010 » Last generated: 2010-10-09 22:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooCategory.html:24308,clear,clearTypes,24308,root/html528/RooCategory.html,https://root.cern,https://root.cern/root/html528/RooCategory.html,2,['clear'],['clearTypes']
Usability,"beTGeoVolume * MakeTube(const char *name, TGeoMedium *medium, Double_t rmin, Double_t rmax, Double_t dz)Make in one step a volume pointing to a tube shape with given medium.Definition TGeoManager.cxx:3204; (*) The same applies for all primitive shapes, for which there can be found corresponding MakeSHAPE() methods. Their usage is much more convenient unless a shape has to be shared between more volumes.; Let us make now an aluminum wire having the same shape, supposing that we have created the copper wire with the line above:; TGeoVolume *wire_al = new TGeoVolume(""WIRE_AL"",wire_co>GetShape(),; ptrAL);; We would like now to position our wire in the middle of a gas chamber. We need first to define the gas chamber:; TGeoVolume *chamber = gGeoManager->MakeTube(""CHAMBER"",ptrGAS,; 0,1,1);; Now we can put the wire inside:; chamber->AddNode(wire_co,1);; If we inspect now the chamber volume in a browser, we will notice that it has one daughter. Of course, the gas has some container also, but let us keeps it like that for the sake of simplicity. Since we did not supply the third argument, the wire will be positioned with an identity transformation inside the chamber.; Overlapping Volumes; Positioning volumes that does not overlap their neighbors nor extrude their container is sometimes quite strong constraint. Having a limited set of geometric shapes might force sometimes overlaps. Since overlapping is contradictory to containment, a point belonging to an overlapping region will naturally belong to all overlapping partners. The answer provided by the modeller to ""Where am I?"" is no longer deterministic if there is no priority assigned.; There are two ways out provided by the modeller in such cases and we will illustrate them by examples. Suppose we have 2 crossing tubes that we have to describe. Such a structure cannot be decomposed in a containment schema. This is a typical example of simple structure that can be handled by using composite shapes. What we have to do is to de",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Geometry.html:36763,simpl,simplicity,36763,doc/master/group__Geometry.html,https://root.cern,https://root.cern/doc/master/group__Geometry.html,1,['simpl'],['simplicity']
Usability,"beginning - tracks - show tracks from TGeoManager - showtop - show top-level volume of TGeoManager (default off) - no_screen - let ignore kVisOnScreen bits for nodes visibility - dray - calculate rendering order using raytracing (extensive calculations) - dbox - use distance to nearest point from bounding box for rendering order (default) - dpnt - use distance to shape center as rendering order - dsize - use volume size as rendering order - ddflt - let three.js to calculate rendering order - comp - show left and right components of TGeoCompositeShape - compx - show all sub-components of TGeoCompositeShape; In the URL string several global settings can be changed:. geosegm - grads per segment is cylindrical shapes, default is 6; geocomp - compress results of composite shape production, default is true. It is possible to display only part of geometry model. For instance, one could select sub-item like:. file=rootgeom.root&item=simple1/TOP/REPLICA_1. Or one can use simple selection syntax (work only with first-level volumes):. item=simple1&opt=-bar1-bar2. Syntax uses ‘+’ sign to enable visibility flag of specified volume and ‘-’ sign to disable visibility. One could use wildcard symbol like ’+TUBE1*’.; Another way to configure visibility flags is usage of ROOT macros, which typically looks like:; {; TGeoManager::Import(""http://root.cern/files/alice2.root"");; gGeoManager->DefaultColors();; // gGeoManager->SetVisLevel(4);; gGeoManager->GetVolume(""HALL"")->InvisibleAll();; gGeoManager->GetVolume(""ZDCC"")->InvisibleAll();; gGeoManager->GetVolume(""ZDCA"")->InvisibleAll();; // ...; gGeoManager->GetVolume(""ALIC"")->Draw(""ogl"");; new TBrowser;; }; Example of such macro can be found in root tutorials.; From provided macro only following calls will be executed in JSROOT:. gGeoManager->DefaultColors(); gGeoManager->GetVolume(""HALL"")->InvisibleAll(); gGeoManager->GetVolume(""HALL"")->SetTransparency(30); gGeoManager->GetVolume(""HALL"")->SetLineColor(5); gGeoManager->GetVolume(""ALIC"")->Dr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/JSROOT/JSROOT.html:14278,simpl,simple,14278,root/htmldoc/guides/JSROOT/JSROOT.html,https://root.cern,https://root.cern/root/htmldoc/guides/JSROOT/JSROOT.html,2,['simpl'],['simple']
Usability,"being spread across the file. However it might decrease the performance when reading more branches (or the full entry).; When using SortBasketsByEntry the baskets with the lowest starting entry are written first. (i.e. the baskets are sorted by the index/number of the first entry they contain). This means that on the file the baskets will be in the order in which they will be needed when reading the whole tree sequentially.; For examples of CloneTree, see tutorials:. copytree.C: A macro to copy a subset of a TTree to a new TTree. The input file has been generated by the program in $ROOTSYS/test/Event with: Event 1000 1 1 1; copytree2.C: A macro to copy a subset of a TTree to a new TTree. One branch of the new Tree is written to a separate file. The input file has been generated by the program in $ROOTSYS/test/Event with: Event 1000 1 1 1 . Reimplemented in TNtuple.; Definition at line 3139 of file TTree.cxx. ◆ CopyAddresses(). void TTree::CopyAddresses ; (; TTree * ; tree, . bool ; undo = false . ). virtual . Set branch addresses of passed tree equal to ours. ; If undo is true, reset the branch addresses instead of copying them. This ensures 'separation' of a cloned tree from its original. ; Definition at line 3299 of file TTree.cxx. ◆ CopyEntries(). Long64_t TTree::CopyEntries ; (; TTree * ; tree, . Long64_t ; nentries = -1, . Option_t * ; option = """", . bool ; needCopyAddresses = false . ). virtual . Copy nentries from given tree to this tree. ; This routines assumes that the branches that intended to be copied are already connected. The typical case is that this tree was created using tree->CloneTree(0).; By default copy all entries.; Returns number of bytes copied to this tree.; If 'option' contains the word 'fast' and nentries is -1, the cloning will be done without unzipping or unstreaming the baskets (i.e., a direct copy of the raw bytes on disk).; When 'fast' is specified, 'option' can also contains a sorting order for the baskets in the output file.; There ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTree.html:106433,undo,undo,106433,doc/v632/classTTree.html,https://root.cern,https://root.cern/doc/v632/classTTree.html,2,['undo'],['undo']
Usability,"bel*fLabInfosinfos on current process; TGLabel*fLabStatusactual process status; Bool_tfModifiedkTRUE if settings have changed; Long64_tfPrevProcessedused for progress bar; Long64_tfPrevTotalused for progress bar; TGLabel*fRaterate of process in events/sec; TCanvas*fStatsCanvasnode statistics canvas; TSessionQueryFrame::EQueryStatusfStatusstatus of actual query; TGTab*fTabmain tab frame; TGLabel*fTotaltotal progress info; TSessionViewer*fViewerpointer on main viewer; TGHProgressBar*frmProgcurrent process progress bar. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionQueryFrame(); Destructor. void Build(TSessionViewer* gui); Build query information frame. void Modified(Bool_t mod = kTRUE); Notify changes in query editor settings. void Feedback(TList* objs); Feedback function connected to Feedback signal.; Used to update feedback histograms. void UpdateHistos(TList* objs); Update feedback histograms. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); New version of Progress (just forward to the old version; for the time being). void ProgressLocal(Long64_t total, Long64_t processed); Update progress bar and status labels. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void ResetProgressDialog(const char* selec, Int_t files, Long64_t first, Long64_t entries); Reset progress frame information fields. void OnBtnFinalize(); Finalize query. void OnBtnStop(); Stop processing query. void OnBtnShowLog(); Show query log. void OnBtnRetrieve(); Retrieve query. void OnBtnAbort(); Abort processing query. void OnBtnSubmit(); Submit query. void UpdateButtons(TQueryDescription* desc); Update buttons state for the current query ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TSessionQueryFrame.html:21395,feedback,feedback,21395,root/html534/TSessionQueryFrame.html,https://root.cern,https://root.cern/root/html534/TSessionQueryFrame.html,2,['feedback'],['feedback']
Usability,"below MaxVirtualsize.Definition TTree.cxx:6837; TTree::GetReadEntryvirtual Long64_t GetReadEntry() constDefinition TTree.h:549; TTree::GetListOfBranchesvirtual TObjArray * GetListOfBranches()Definition TTree.h:528; TTree::fZipBytesLong64_t fZipBytesTotal number of bytes in all branches after compression.Definition TTree.h:87; TTree::GetTreevirtual TTree * GetTree() constDefinition TTree.h:557; TTree::fTransientBufferTBuffer * fTransientBuffer! Pointer to the current transient buffer.Definition TTree.h:138; TTree::SetEntryListvirtual void SetEntryList(TEntryList *list, Option_t *opt="""")Set an EntryList.Definition TTree.cxx:9046; TTree::Notifybool Notify() overrideFunction called when loading a new class library.Definition TTree.cxx:7033; TTree::AddZipBytesvirtual void AddZipBytes(Int_t zip)Definition TTree.h:332; TTree::LoadTreevirtual Long64_t LoadTree(Long64_t entry)Set current entry.Definition TTree.cxx:6473; TTree::ReadFilevirtual Long64_t ReadFile(const char *filename, const char *branchDescriptor="""", char delimiter=' ')Create or simply read branches from filename.Definition TTree.cxx:7564; TTree::GetAliasvirtual const char * GetAlias(const char *aliasName) constReturns the expanded value of the alias. Search in the friends if any.Definition TTree.cxx:5226; TTree::SetIOFeaturesROOT::TIOFeatures SetIOFeatures(const ROOT::TIOFeatures &)Provide the end-user with the ability to enable/disable various experimental IO features for this TTr...Definition TTree.cxx:9130; TTree::CreateBasketvirtual TBasket * CreateBasket(TBranch *)Create a basket for this tree and given branch.Definition TTree.cxx:3731; TTree::fUserInfoTList * fUserInfopointer to a list of user objects associated to this TreeDefinition TTree.h:133; TTree::GetMinimumvirtual Double_t GetMinimum(const char *columname)Return minimum of column with name columname.Definition TTree.cxx:6275; TTree::RemoveFriendvirtual void RemoveFriend(TTree *)Remove a friend from the list of friends.Definition TTree.cxx:7977; T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:454548,simpl,simply,454548,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['simpl'],['simply']
Usability,"ber Functions |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::TProcessExecutor Class ReferenceParallelized classes. ; This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. . ROOT::TProcessExecutor::Map; This class inherits its interfaces from ROOT::TExecutor; . The two possible usages of the Map method are:. Map(F func, unsigned nTimes): func is executed nTimes with no arguments; Map(F func, T& args): func is executed on each element of the collection of arguments args. For either signature, func is executed as many times as needed by a pool of fNWorkers workers; the number of workers can be passed to the constructor or set via SetNWorkers. It typically defaults to the number of cores.; A collection containing the result of each execution is returned.; Note: the user is responsible for the deletion of any object that might be created upon execution of func, returned objects included: ROOT::TProcessExecutor never deletes what it returns, it simply forgets it.; Note: that the usage of ROOT::TProcessExecutor::Map is indicated only when the task to be executed takes more than a few seconds, otherwise the overhead introduced by Map will outrun the benefits of parallel execution on most machines.; Parameters. funca callable object, such as a lambda expression, an std::function, a functor object or a function that takes zero arguments (for the first signature) or one (for the second signature). ; argsa standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature. An integer only for the first. . Note: in cases where the function to be executed takes more than zero/one argument but all are fixed except zero/one, the function can be wrapped in a lambda or via std::bind to give it the right signature.; Note: the user should take care of initializing random seeds differently in each process (e.g. using the process",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TProcessExecutor.html:1249,simpl,simply,1249,doc/v632/classROOT_1_1TProcessExecutor.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TProcessExecutor.html,2,['simpl'],['simply']
Usability,"ber values working for all histograms (1D, 2D and 3D) ; Definition at line 7977 of file TH1.cxx. ◆ Draw(). void TH1::Draw ; (; Option_t * ; option = """"). overridevirtual . Draw this histogram with options. ; Histograms are drawn via the THistPainter class. Each histogram has a pointer to its own painter (to be usable in a multithreaded program). The same histogram can be drawn with different options in different pads. When a histogram drawn in a pad is deleted, the histogram is automatically removed from the pad or pads where it was drawn. If a histogram is drawn in a pad, then filled again, the new status of the histogram will be automatically shown in the pad next time the pad is updated. One does not need to redraw the histogram. To draw the current version of a histogram in a pad, one can use h->DrawCopy(); This makes a clone of the histogram. Once the clone is drawn, the original histogram may be modified or deleted without affecting the aspect of the clone. By default, TH1::Draw clears the current pad.; One can use TH1::SetMaximum and TH1::SetMinimum to force a particular value for the maximum or the minimum scale on the plot.; TH1::UseCurrentStyle can be used to change all histogram graphics attributes to correspond to the current selected style. This function must be called for each histogram. In case one reads and draws many histograms from a file, one can force the histograms to inherit automatically the current graphics style by calling before gROOT->ForceStyle();; See the THistPainter class for a description of all the drawing options. ; Reimplemented from TObject.; Definition at line 3066 of file TH1.cxx. ◆ DrawCopy(). TH1 * TH1::DrawCopy ; (; Option_t * ; option = """", . const char * ; name_postfix = ""_copy"" . ); const. virtual . Copy this histogram and Draw in the current pad. ; Once the histogram is drawn into the pad, any further modification using graphics input will be made on the copy of the histogram, and not to the original object. By default a ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:109313,clear,clears,109313,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['clear'],['clears']
Usability,"bers (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TArray(); static TClass*Class(); virtual Double_tGetAt(Int_t i) const; Int_tGetSize() const; virtual TClass*IsA() const; TArray&operator=(const TArray& rhs); static TArray*ReadArray(TBuffer& b, const TClass* clReq); virtual voidSet(Int_t n); virtual voidSetAt(Double_t v, Int_t i); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); static voidWriteArray(TBuffer& b, const TArray* a). protected:. Bool_tBoundsOk(const char* where, Int_t at) const; Bool_tOutOfBoundsError(const char* where, Int_t i) const. Data Members; public:. Int_tfNNumber of array elements. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bool_t OutOfBoundsError(const char* where, Int_t i) const; Generate an out-of-bounds error. Always returns false. TArray * ReadArray(TBuffer& b, const TClass* clReq); Read TArray object from buffer. Simplified version of; TBuffer::ReadObject (does not keep track of multiple; references to same array). void WriteArray(TBuffer& b, const TArray* a); Write TArray object to buffer. Simplified version of; TBuffer::WriteObject (does not keep track of multiple; references to the same array). Bool_t BoundsOk(const char* where, Int_t at) const. TArray & operator=(const TArray& rhs); {if(this!=&rhs) fN = rhs.fN; return *this; }. virtual ~TArray(); { fN = 0; }. Int_t GetSize() const; { return fN; }. void Set(Int_t n). Double_t GetAt(Int_t i) const. void SetAt(Double_t v, Int_t i). » Author: Fons Rademakers 21/10/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/cont:$Id$ » Last generated: 2015-03-10 17:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TArray.html:1524,Simpl,Simplified,1524,root/html534/TArray.html,https://root.cern,https://root.cern/root/html534/TArray.html,2,['Simpl'],['Simplified']
Usability,"bers; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooSimWSTool::MultiBuildConfig. class RooSimWSTool::MultiBuildConfig: public RooSimWSTool::BuildConfig. Class RooSimWSTool is a tool operating on RooWorkspace objects that; can clone p.d.f.s into a series of variations that are joined together; into a RooSimultanous p.d.f. The simplest use case to to take a workspace p.d.f as prototype and; 'split' a parameter of that p.d.f into two specialized parameters; depending on a category in the dataset. For example, given a Gaussian; p.d.f G(x,m,s) we want to construct a G_a(x,m_a,s) and a G_b(x,m_b,s); with different mean parameters to be fit to a dataset with observables; (x,c) where c is a category with states 'a' and 'b'. Using RooSimWSTool one can create a simultaneous p.d.f from G_a and G_b; from G with the following command. RooSimWSTool wst(wspace) ;; wst.build(""G_sim"",""G"",SplitParam(""m"",""c"")) ;. From this simple example one can go to builds of arbitrary complexity; by specifying multiple SplitParam arguments on multiple parameters; involving multiple splitting categories. Splits can also be performed; in the product multiple categories, e.g. SplitParam(""m"",""c,d"")) ;. splits parameter m in the product of states of c and d. Another possibility; is the 'constrained' split which clones the parameter for all but one state; and insert a formula specialization in a chosen state that evaluates; to 1 - sum_i(a_i) where a_i are all other specializations. For example,; given a category c with state ""A"",""B"",""C"",""D"" the specification. SplitParamConstrained(""m"",""c"",""D""). will result in parameters m_A,m_B,m_C and a formula expression m_D; that evaluates to (1-(m_A+m_B+m_C)). Constrained split can also be; specified in product of categories. In that case the name of the; remainder state follows the syntax ""{State1;State2}"" where State1 and; State2 are the state names of the two spitting categories. The examples so far deal with a single prototype p.d.f. It is also; possible to bu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooSimWSTool__MultiBuildConfig.html:1142,simpl,simple,1142,root/html526/RooSimWSTool__MultiBuildConfig.html,https://root.cern,https://root.cern/root/html526/RooSimWSTool__MultiBuildConfig.html,5,['simpl'],['simple']
Usability,"bers; data members; class charts. ROOT; » HIST; » HIST; » THnT<int>. class THnT<int>: public THn. Helper struct to hold one dimension's bin range for THnBinIter. Function Members (Methods); public:. virtual~THnT<int>(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c = 1.); voidTHn::AddBinContent(const Int_t* idx, Double_t v = 1.); virtual voidTHn::AddBinContent(Long64_t bin, Double_t v = 1.); virtual voidTHn::AddBinError2(Long64_t bin, Double_t e2); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTHnBase::Browse(TBrowser* b); voidTHnBase::CalculateErrors(Bool_t calc = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THn*THn::CreateHn(const char* name, const char* title, const TH1* h1); static THn*THn::CreateHn(const char* name, const char* title, const THnBase* hn); virtual ROOT::THnBaseBinIter*THn::CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/THnT_int_.html:984,Clear,Clear,984,root/html602/THnT_int_.html,https://root.cern,https://root.cern/root/html602/THnT_int_.html,2,['Clear'],['Clear']
Usability,"bers; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. Double_tfConfidenceLevelconfidence level; Double_tfLowerLimitlower interval limit; RooArgSetfParametersset containing the parameter of interest; Double_tfUpperLimitupper interval limit. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SimpleInterval(const char* name = 0); Default constructor. SimpleInterval(const RooStats::SimpleInterval& other, const char* name); fParameters.add( other.fParameters );. operator=(const RooStats::SimpleInterval& other). SimpleInterval(const char* name, const RooRealVar& var, Double_t lower, Double_t upper, Double_t cl); Alternate constructor. ~SimpleInterval(); Destructor. Bool_t IsInInterval(const RooArgSet& ) const. RooArgSet* GetParameters() const; return cloned list of parameters. Bool_t CheckParameters(const RooArgSet& ) const. explicit SimpleInterval(const char* name = 0); default constructors. void SetConfidenceLevel(Double_t ); set the confidence level for the interval. Simple interval is defined at construction time so this function; has no effect. {}. Double_t ConfidenceLevel() const; return the confidence interval. {return fConfidenceLevel;}. Double_t LowerLimit(); return the interval lower limit. {return fLowerLimit;}. Double_t UpperLimit(); return the interval upper limit. {return fUpperLimit;}. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id$ » Last generated: 2015-03-10 17:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__SimpleInterval.html:6961,Simpl,SimpleInterval,6961,root/html534/RooStats__SimpleInterval.html,https://root.cern,https://root.cern/root/html534/RooStats__SimpleInterval.html,1,['Simpl'],['SimpleInterval']
Usability,"better to access the values in a script, one by one. There is a traditional way of doing this (TTree::SetBranchAddress() etc) and a new, recommended one: the TTreeReader. That's what we will use later and introduce here.; The TTreeReader Concept; The TTree loads entry by entry into memory. You and the TTree need to agree what data the TTree should make available (i.e. for which branches) and what data these branches contain. First, we set up a TTreeReader object that connects our data requests to the TTree:; // Access a TTree called ""MyTree"" in the file:; TTreeReader reader(""MyTree"", file);. The TTreeReader Values and Arrays; This reader object can now be used by the data accessors. There are two types: TTreeReaderArray can iterate through collections (std::vector, TClonesArray, TList, MyType[12] - whatever) and TTreeReaderValue that doesn't. You can choose how you access the values - for our tree, all of these might make sense in different contexts:; TTreeReaderValue<float> rvMissingET(reader, ""missingET"");; // The following needs the definition of the Muon class - which is why accessing; // data member branches is much simpler.; TTreeReaderValue<std::vector<Muon>> rvMuons(reader, ""muons"");. TTreeReaderArray<float> raMuonPt(reader, ""muons.fPt"");; // Here, too we would need the definition of the Muon class.; TTreeReaderArray<Muon> raMuons(reader, ""muons"");. Accessing Data; The TTreeReader checks whether the type you specify is the type that's stored in the branch, i.e. whether it can actually access the data through the reader object. The TTreeReaderValue gets its values like so:; // Loop through all the TTree's entries; while (reader.Next()) {; // behaves like an iterator; float missingET = *rvMissingET;; ...; }. A TTreeReaderArray allows you to get the size and access the n-th element:; while (reader.Next()) {; for (int iMuon = 0, nMuons = raMuonPt.GetSize(); iMuon < nMuons; ++iMuon) {; hist->Fill(raMuonPt[iMuon]);; }; }. Of course in C++11 you could also just do; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/7-using-ttreereader.html:3198,simpl,simpler,3198,d/7-using-ttreereader.html,https://root.cern,https://root.cern/d/7-using-ttreereader.html,1,['simpl'],['simpler']
Usability,"bient; Specular; Emissive. For each of these you can select the component via the radio buttons. Each component can have the red, green and blue values for the component adjusted via the sliders. You can apply this adjustment to the shape itself, or to all shapes sharing a common ‘family’. Shapes of the same family have external objects with the same TObject name string. You can also adjust the ‘Opacity’ and ‘Shine’ for the shapes materials via the sliders.; 9.13.2.11 Geometry; Viewer Controls Pane ‘Geometry’ tab.; Review and modify the shapes X/Y/Z center and scaling factors via the edit boxes. Selection and editing of shapes is not available via the API at present.; 9.13.2.12 Outputting Viewer Contents; The current viewer rendering can be output to an external EPS or PDF, using the options under the ‘File’ menu on the top menu bar. The file is named ‘viewer.eps’ or ‘viewer.pdf’ and written to the current ROOT directory.; 9.13.3 The X3D Viewer; The X3D viewer is a fairly simple and limited viewer, capable of showing basic lines and polygons. It lacks the quality, performance and more advanced features of the GL Viewer, and additionally is not supported on Windows. It is not actively developed and you are encouraged to use the GL Viewer out of preference. The below table presents the main interactions - these are repeated in the Help dialog of the viewer.; Action KeyActionKey; Wireframe Mode wRotate about xx a; Hidden Line Mode eRotate about yy b; Hidden Surface Mode rRotate about zz c; Move object down uAuto-rotate about x1 2 3; Move object up iAuto-rotate about y4 5 6; Move object left lAuto-rotate about z7 8 9; Move object right hToggle controls styleo; Move object forward jToggle stereo displays; Move object backward kToggle blue stereo viewd; Adjust focus (stereo mode) [ ] { }Toggle double bufferf; Rotate object Left mouse button down + move.; 9.13.4 Common 3D Viewer Architecture; The 3D Viewer Architecture provides a common mechanism for viewer clients to publ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:400710,simpl,simple,400710,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['simpl'],['simple']
Usability,"bin with the maximum content of each individual violin is; 1558set to a constant value using SetBarWidth(). The static function will affect all violin-charts; 1559in the running program. Default is true. Scaling between multiple violin-charts; 1560(using ""same"" or THStack) is not supported, yet.; 1561 ; 1562##### The zero indicator line; 1563Typical for violin charts is a line in the background over the whole histogram indicating; 1564the bins with zero entries. The zero indicator line can be activated with z=1. The line color; 1565will always be the same as the fill-color of the histogram.; 1566 ; 1567##### The Mean; 1568The Mean is illustrated with the same mechanism as used for candle plots. Usually a circle is used.; 1569 ; 1570##### Whiskers; 1571The whiskers are illustrated by the same mechanism as used for candle plots. There is only one; 1572difference. When using the simple whisker definition (w=1) and the zero indicator line (z=1), then; 1573the whiskers will be forced to be solid (usually hashed); 1574 ; 1575##### Points; 1576The points are illustrated by the same mechanism as used for candle plots. E.g. VIOLIN2 uses; 1577better whisker definition (w=2) and outliers (p=1).; 1578 ; 1579##### Other options; 1580It is possible to combine all options of candle or violin plots with each other. E.g. a violin plot; 1581including a box-plot.; 1582 ; 1583#### How to use the violin-plots drawing option; 1584 ; 1585There are two predefined violin-plot representations:; 1586 - ""VIOLINX1"": Standard violin (histogram, mean, whisker over full distribution,; 1587 zero indicator line); 1588 - ""VIOLINX2"": Line VIOLINX1 both with better whisker definition + outliers.; 1589 ; 1590A solid fill style is recommended for this plot (as opposed to a hollow or; 1591hashed style).; 1592 ; 1593Begin_Macro(source); 1594{; 1595 auto c1 = new TCanvas(""c1"",""c1"",600,400);; 1596 Int_t nx(6), ny(40);; 1597 double xmin(0.0), xmax(+6.0), ymin(0.0), ymax(+4.0);; 1598 auto hviolin = new TH2F(""h",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:67331,simpl,simple,67331,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['simpl'],['simple']
Usability,"bin, Double_t w); static voidTH1::AddDirectory(Bool_t add = kTRUE); static Bool_tTH1::AddDirectoryStatus(); voidTArrayD::Adopt(Int_t n, Double_t* array); virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Option_t* option = """") const; virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Double_t& advalue) const; virtual voidTObject::AppendPad(Option_t* option = """"); Double_tTArrayD::At(Int_t i) const; virtual voidTH1::Browse(TBrowser* b); virtual Int_tTH1::BufferEmpty(Int_t action = 0); virtual Bool_tTH1::CanExtendAllAxes() const; virtual Double_tTH1::Chi2Test(const TH1* h2, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chi2TestX(const TH1* h2, Double_t& chi2, Int_t& ndf, Int_t& igood, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chisquare(TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTH1::ClearUnderflowAndOverflow(); virtual TObject*TH1::Clone(const char* newname = 0) const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tTH1::ComputeIntegral(Bool_t onlyPositive = false); virtual voidCopy(TObject& hnew) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTH1::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTH1::DistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tTH1::Divide(const TH1* h1); virtual Bool_tTH1::Divide(TF1* f1, Double_t c1 = 1); virtual Bool_tTH1::Divide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """")MENU ; virtual voidTH1::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TH1*TH1::DrawCopy(Option_t* option = """", const char* name_postfix = ""_copy"") const; virtual TH1*TH1::DrawNorm",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH1D.html:1802,Clear,ClearUnderflowAndOverflow,1802,root/html602/TH1D.html,https://root.cern,https://root.cern/root/html602/TH1D.html,2,['Clear'],['ClearUnderflowAndOverflow']
Usability,"bin, Double_t w); static voidTH1::AddDirectory(Bool_t add = kTRUE); static Bool_tTH1::AddDirectoryStatus(); voidTArrayD::Adopt(Int_t n, Double_t* array); virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Option_t* option = """") const; virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Double_t& advalue) const; virtual voidTObject::AppendPad(Option_t* option = """"); Double_tTArrayD::At(Int_t i) const; virtual voidTH1::Browse(TBrowser* b); virtual Int_tTH2::BufferEmpty(Int_t action = 0); virtual Bool_tTH1::CanExtendAllAxes() const; virtual Double_tTH1::Chi2Test(const TH1* h2, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chi2TestX(const TH1* h2, Double_t& chi2, Int_t& ndf, Int_t& igood, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chisquare(TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTH1::ClearUnderflowAndOverflow(); virtual TObject*TH1::Clone(const char* newname = 0) const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tTH1::ComputeIntegral(Bool_t onlyPositive = false); virtual voidCopy(TObject& hnew) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTH1::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTH1::DistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tTH1::Divide(const TH1* h1); virtual Bool_tTH1::Divide(TF1* f1, Double_t c1 = 1); virtual Bool_tTH1::Divide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """")MENU ; virtual voidTH1::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TH1*TH1::DrawCopy(Option_t* option = """", const char* name_postfix = ""_copy"") const; virtual TH1*TH1::DrawNorm",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH2D.html:1783,Clear,ClearUnderflowAndOverflow,1783,root/html602/TH2D.html,https://root.cern,https://root.cern/root/html602/TH2D.html,2,['Clear'],['ClearUnderflowAndOverflow']
Usability,"bin, Double_t w); static voidTH1::AddDirectory(Bool_t add = kTRUE); static Bool_tTH1::AddDirectoryStatus(); voidTArrayD::Adopt(Int_t n, Double_t* array); virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Option_t* option = """") const; virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Double_t& advalue) const; virtual voidTObject::AppendPad(Option_t* option = """"); Double_tTArrayD::At(Int_t i) const; virtual voidTH1::Browse(TBrowser* b); virtual Int_tTH3::BufferEmpty(Int_t action = 0); virtual Bool_tTH1::CanExtendAllAxes() const; virtual Double_tTH1::Chi2Test(const TH1* h2, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chi2TestX(const TH1* h2, Double_t& chi2, Int_t& ndf, Int_t& igood, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chisquare(TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTH1::ClearUnderflowAndOverflow(); virtual TObject*TH1::Clone(const char* newname = 0) const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tTH1::ComputeIntegral(Bool_t onlyPositive = false); virtual voidCopy(TObject& hnew) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTH1::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTH1::DistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tTH1::Divide(const TH1* h1); virtual Bool_tTH1::Divide(TF1* f1, Double_t c1 = 1); virtual Bool_tTH1::Divide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """")MENU ; virtual voidTH1::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TH1*TH1::DrawCopy(Option_t* option = """", const char* name_postfix = ""_copy"") const; virtual TH1*TH1::DrawNorm",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH3D.html:1783,Clear,ClearUnderflowAndOverflow,1783,root/html602/TH3D.html,https://root.cern,https://root.cern/root/html602/TH3D.html,2,['Clear'],['ClearUnderflowAndOverflow']
Usability,"binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tcheckObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidRooResolutionModel::cleanup(); virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; const RooArgList&coefList() const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual RooResolutionModel*convolution(RooFormulaVar* basis, RooAbsArg* owner) const; RooRealVar&RooResolutionModel::convVar() const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAddModel.html:3709,clear,clearEvalError,3709,root/html534/RooAddModel.html,https://root.cern,https://root.cern/root/html534/RooAddModel.html,6,['clear'],['clearEvalError']
Usability,"bins in Y except; for Y's under- and overflow bins.; NOTE2: if maxdiff=0 (default), the first cell with content=c is returned. Double_t GetCorrelationFactor(Int_t axis1 = 1, Int_t axis2 = 2) const; -*-*-*Return correlation factor between axis1 and axis2; *-* ====================================================. Double_t GetCovariance(Int_t axis1 = 1, Int_t axis2 = 2) const; -*-*-*Return covariance between axis1 and axis2; *-* ====================================================. void GetRandom2(Double_t& x, Double_t& y); return 2 random numbers along axis x and y distributed according; the cellcontents of a 2-dim histogram. void GetStats(Double_t* stats) const; fill the array stats from the contents of this histogram; The array stats must be correctly dimensionned in the calling program.; stats[0] = sumw; stats[1] = sumw2; stats[2] = sumwx; stats[3] = sumwx2; stats[4] = sumwy; stats[5] = sumwy2; stats[6] = sumwxy. If no axis-subranges are specified (via TAxis::SetRange), the array stats; is simply a copy of the statistics quantities computed at filling time.; If sub-ranges are specified, the function recomputes these quantities; from the bin contents in the current axis ranges. Note that the mean value/RMS is computed using the bins in the currently; defined ranges (see TAxis::SetRange). By default the ranges include; all bins from 1 to nbins included, excluding underflows and overflows.; To force the underflows and overflows in the computation, one must; call the static function TH1::StatOverflows(kTRUE) before filling; the histogram. Double_t Integral(Option_t* option = """") const; Return integral of bin contents. Only bins in the bins range are considered.; By default the integral is computed as the sum of bin contents in the range.; if option ""width"" is specified, the integral is the sum of; the bin contents multiplied by the bin width in x and in y. Double_t Integral(Int_t binx1, Int_t binx2, Int_t biny1, Int_t biny2, Option_t* option = """") const; Return integral",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TH2.html:38385,simpl,simply,38385,root/html530/TH2.html,https://root.cern,https://root.cern/root/html530/TH2.html,3,['simpl'],['simply']
Usability,"bj = nullptr . ). protected . Read data of special kind of objects. ; Definition at line 851 of file TSQLFile.cxx. ◆ ReadSQLClassInfos(). void TSQLFile::ReadSQLClassInfos ; (; ). protected . Read all class infos from IdsTable. ; Definition at line 1911 of file TSQLFile.cxx. ◆ Recover(). Int_t TSQLFile::Recover ; (; ). inlinefinalvirtual . Attempt to recover file if not correctly closed. ; The function returns the number of keys that have been recovered. If no keys can be recovered, the file will be declared Zombie by the calling function. This function is automatically called when opening a file. If the file is open in read only mode, the file is not modified. If open in update mode and the function finds something to recover, a new directory header is written to the file. When opening the file gain no message from Recover will be reported. If keys have been recovered, the file is usable and you can safely read the corresponding objects. If the file is not usable (a zombie), you can test for this case with code like:; TFile f(""myfile.root"");; if (f.IsZombie()) {<actions to take if file is unusable>}; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; If the file has been recovered, the bit kRecovered is set in the TFile object in memory. You can test if the file has been recovered with if (f.TestBit(TFile::kRecovered)) {... the file has been recovered}; When writing TTrees to a file, it is important to save the Tree header at regular intervals (see TTree::AutoSave). If a file containing a Tree is recovered, the last Tree header written to the file will be used. In this case all the entries in all the branches written before writing the header are valid entries. One can disable the automatic recovery procedure by setting TFile.Recover 0; in the system.rootrc file. ; Reimplemented from TFile.; Definition at line 240 of file TSQLFile.h. ◆ ReOpen(). Int_t TSQLFile::ReOpen ; (; Option_t * ; m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLFile.html:85077,usab,usable,85077,doc/master/classTSQLFile.html,https://root.cern,https://root.cern/doc/master/classTSQLFile.html,1,['usab'],['usable']
Usability,"bj, Int_t kind, TList *slaves);  Broadcast an object to all slaves in the specified list. ;  ; Int_t BroadcastObject (const TObject *obj, Int_t kind=kMESS_OBJECT, ESlaves list=kActive);  Broadcast an object to all slaves in the specified list. ;  ; Int_t BroadcastRaw (const void *buffer, Int_t length, ESlaves list=kActive);  Broadcast a raw buffer of specified length to all slaves in the specified list. ;  ; Int_t BroadcastRaw (const void *buffer, Int_t length, TList *slaves);  Broadcast a raw buffer of specified length to all slaves in the specified list. ;  ; Int_t BuildPackage (const char *package, EBuildPackageOpt opt=kBuildAll, Int_t chkveropt=TPackMgr::kCheckROOT, TList *workers=0);  Build specified package. ;  ; Bool_t CheckFile (const char *file, TSlave *sl, Long_t modtime, Int_t cpopt=(kCp|kCpBin));  Check if a file needs to be send to the slave. ;  ; void CleanGDirectory (TList *ol);  Remove links to objects in list 'ol' from gDirectory. ;  ; void ClearDataProgress (Int_t r, Int_t t);  Progress bar for clear data. ;  ; Int_t Collect (const TSlave *sl, Long_t timeout=-1, Int_t endtype=-1, Bool_t deactonfail=kFALSE);  Collect responses from slave sl. ;  ; Int_t Collect (TMonitor *mon, Long_t timeout=-1, Int_t endtype=-1, Bool_t deactonfail=kFALSE);  Collect responses from the slave servers. ;  ; Int_t CollectInputFrom (TSocket *s, Int_t endtype=-1, Bool_t deactonfail=kFALSE);  Collect and analyze available input from socket s. ;  ; Bool_t CreateMerger (TSlave *sl, Int_t port);  Create a new merger. ;  ; void DeActivateAsyncInput ();  De-activate a-sync input handler. ;  ; Int_t DisablePackage (const char *package);  Remove a specific package. ;  ; Int_t DisablePackages ();  Remove all packages. ;  ; Int_t Exec (const char *cmd, ESlaves list, Bool_t plusMaster);  Send command to be executed on the PROOF master and/or slaves. ;  ; void FinalizationDone ();  ; Int_t FindNextFreeMerger ();  Return a merger, which is both active and still accepts some workers to ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:47692,clear,clear,47692,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['clear'],['clear']
Usability,"bjArray a(10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; a[i] = new TTrack(x,y,z,...);. }. a.Delete();; }. One better uses a TClonesArray which reduces the number of; new/delete calls to only O(10000):. TClonesArray a(""TTrack"", 10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; new(a[i]) TTrack(x,y,z,...);. }. a.Delete(); // or a.Clear() or a.Clear(""C""); }. To reduce the number of call to the constructor (especially useful; if the user class requires memory allocation), the object can be; added (and constructed when needed) using ConstructedAt which only; calls the constructor once per slot. TClonesArray a(""TTrack"", 10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; TTrack *track = (TTrack*)a.ConstructedAt(i);; track->Set(x,y,z,....);. }. a.Clear(); // or a.Clear(""C"");; }. Note: the only supported way to add objects to a TClonesArray is; via the new with placement method or the ConstructedAt method.; The other Add() methods ofTObjArray and its base classes are not; allowed. Considering that a new/delete costs about 70 mus on a 300 MHz HP,; O(10^9) new/deletes will save about 19 hours. NOTE 1. C/C++ offers the possibility of allocating and deleting memory.; Forgetting to delete allocated memory is a programming error called a; ""memory leak"", i.e. the memory of your process grows and eventually; your program crashes. Even if you *always* delete the allocated; memory, the recovered space may not be efficiently reused. The; process knows that there are portions of free memory, but when you; allocate it again, a fresh piece of memory is grabbed. Your program; is free from semantic errors, but the total memory of your process; still grows, because your program's memory is full of ""holes"" which; reduce the efficiency of memory access; th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TClonesArray.html:1663,Clear,Clear,1663,root/html532/TClonesArray.html,https://root.cern,https://root.cern/root/html532/TClonesArray.html,4,['Clear'],['Clear']
Usability,"bject is created.; This object is automatically deleted when the Tree is deleted or; when the file is deleted. -Special case of a TChain; Once the training is done on the first Tree, the list of branches; in the cache is kept for the following files. -Special case of a TEventlist; if the Tree or TChain has a TEventlist, only the buffers; referenced by the list are put in the cache. The learning period is started or restarted when:; - A TTree automatically creates a cache; - TTree::SetCacheSize is called for the first time.; - TTree::SetCacheSize is called a second time with a different size.; - TTreeCache::StartLearningPhase is called.; - TTree[Cache]::SetEntryRange is called; * and the learning is not yet finished; * and has not been set to manual; * and the new minimun entry is different. The learning period is stopped (and prefetching is actually started) when:; - TTree[Cache]::StopLearningPhase is called.; - An entry outside the 'learning' range is requested; The 'learning range is from fEntryMin (default to 0) to; fEntryMin + fgLearnEntries (default to 100).; - A 'cached' TChain switches over to a new file. WHY DO WE NEED the TreeCache when doing data analysis?. When writing a TTree, the branch buffers are kept in memory.; A typical branch buffersize (before compression) is typically 32 KBytes.; After compression, the zipped buffer may be just a few Kbytes.; The branch buffers cannot be much larger in case of Trees with several; hundred or thousand branches.; When writing, this does not generate a performance problem because branch; buffers are always written sequentially and the OS is in general clever enough; to flush the data to the output file when a few MBytes of data have to be written.; When reading at the contrary, one may hit a performance problem when reading; across a network (LAN or WAN) and the network latency is high.; For example in a WAN with 10ms latency, reading 1000 buffers of 10 KBytes each; with no cache will imply 10s penalty where a local ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTreeCache.html:1924,learn,learning,1924,root/html534/TTreeCache.html,https://root.cern,https://root.cern/root/html534/TTreeCache.html,8,['learn'],['learning']
Usability,"bject is merged with an object of the same name already existing in; the list, or just added.; The boolean merged is set to kFALSE when the object is just added to 'outlist';; this happens if the Merge() method does not exist or if a object named as 'obj'; is not already in the list. If the obj is not 'merged' than it should not be; deleted, unless outlist is not owner of its objects.; Return 0 on success, -1 on error. TObject * HandleHistogram(TObject* obj); Low statistic histograms need a special treatment when using autobin. Bool_t HistoSameAxis(TH1* h0, TH1* h1); Return kTRUE is the histograms 'h0' and 'h1' have the same binning and ranges; on the axis (i.e. if they can be just Add-ed for merging). void StoreOutput(TList* out); Store received output list. TList * MergeFeedback(); Merge feedback lists. void StoreFeedback(TObject* slave, TList* out); Store feedback results from the specified slave. void SetupFeedback(); Setup reporting of feedback objects. void StopFeedback(); Stop reporting of feedback objects. Bool_t HandleTimer(TTimer* timer); Send feedback objects to client. TDSetElement * GetNextPacket(TSlave* slave, TMessage* r); Get next packet for specified slave. Bool_t IsClient() const; Is the player running on the client?. Long64_t DrawSelect(TDSet* set, const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Draw (support for TChain::Draw()).; Returns -1 in case of error or number of selected events in case of success. void SetInitTime(); Set init time. TVirtualPacketizer * GetPacketizer() const; { return 0; }. void Progress(Long64_t total, Long64_t processed). void Progress(TSlave* , Long64_t total, Long64_t processed); { Progress(total, processed); }. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti). TProof * GetProof() const; { return fProof; }. TProofPlayerRemote(TProof* proof = 0); { fProgressStatus = n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofPlayerRemote.html:19389,feedback,feedback,19389,root/html530/TProofPlayerRemote.html,https://root.cern,https://root.cern/root/html530/TProofPlayerRemote.html,1,['feedback'],['feedback']
Usability,"bject(const TBuffer3D&, Bool_t* = 0); virtual Int_tTGLViewer::AddObject(UInt_t, const TBuffer3D&, Bool_t* = 0); virtual voidTGLViewerBase::AddOverlayElement(TGLOverlayElement* el); TGLSceneInfo*TGLViewerBase::AddScene(TGLSceneBase* scene); virtual voidTObject::AppendPad(Option_t* option = """"); voidTGLViewer::ApplySelection(); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; voidTGLViewer::AutoFade(Float_t fade, Float_t time = 1, Int_t steps = 10); virtual voidTGLViewer::BeginScene(); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTGLViewer::BuildingScene() const; virtual Bool_tTGLViewer::CanLoopOnPrimitives() const; virtual voidTGLViewerBase::Changed(); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidTGLViewer::ClearCurrentOvlElm(); virtual voidTGLViewer::Clicked(TObject* obj)SIGNAL ; virtual voidTGLViewer::Clicked(TObject* obj, UInt_t button, UInt_t state)SIGNAL ; TGLClip*TGLViewerBase::Clip() const; virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidTGLViewer::CloseComposite(); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); TGLColorSet&TGLViewer::ColorSet(); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidTObject::Copy(TObject& object) const; virtual voidCreateGLWidget(); TGLCamera&TGLViewer::CurrentCamera() const; TGLLo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGLEmbeddedViewer.html:1789,Clear,ClearCurrentOvlElm,1789,root/html532/TGLEmbeddedViewer.html,https://root.cern,https://root.cern/root/html532/TGLEmbeddedViewer.html,4,['Clear'],['ClearCurrentOvlElm']
Usability,"bject(const TBuffer3D&, Bool_t* = 0); virtual Int_tTGLViewer::AddObject(UInt_t, const TBuffer3D&, Bool_t* = 0); virtual voidTGLViewerBase::AddOverlayElement(TGLOverlayElement* el); TGLSceneInfo*TGLViewerBase::AddScene(TGLSceneBase* scene); virtual voidTObject::AppendPad(Option_t* option = """"); voidTGLViewer::ApplySelection(); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; voidTGLViewer::AutoFade(Float_t fade, Float_t time = 1, Int_t steps = 10); virtual voidTGLViewer::BeginScene(); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTGLViewer::BuildingScene() const; virtual Bool_tTGLViewer::CanLoopOnPrimitives() const; virtual voidTGLViewerBase::Changed(); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidTGLViewer::ClearCurrentOvlElm(); virtual voidTGLViewer::Clicked(TObject* obj)SIGNAL ; virtual voidTGLViewer::Clicked(TObject* obj, UInt_t button, UInt_t state)SIGNAL ; TGLClip*TGLViewerBase::Clip() const; virtual TObject*TObject::Clone(const char* newname = """") const; voidClose(); virtual voidTGLViewer::CloseComposite(); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); TGLColorSet&TGLViewer::ColorSet(); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidTObject::Copy(TObject& object) const; virtual voidCreateGLWidget(); TGLCamera&TGLViewer::CurrentCamera()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGLSAViewer.html:1738,Clear,ClearCurrentOvlElm,1738,root/html532/TGLSAViewer.html,https://root.cern,https://root.cern/root/html532/TGLSAViewer.html,4,['Clear'],['ClearCurrentOvlElm']
Usability,"bject* mother); static TDataSet::EDataSetPassTDataSet::SortIt(TDataSet* ds); static TDataSet::EDataSetPassTDataSet::SortIt(TDataSet* ds, void* user). Data Members; public:. enum TDataSet::EDataSetPass { kContinue; kPrune; kStop; kUp; kStruct; kAll; kRefs; kMarked; };; enum TDataSet::ESetBits { kMark; kArray; };; enum TDataSet::EBitOpt { kSet; kReset; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. ULong_tTChair::fLastIndxindex pof the last used table row;; void*TChair::fLastRowpointer to the last used table row; fLastRow = table[fLastIndx]; TSeqCollection*TDataSet::fListList of the the the objects included into this dataset; TStringTNamed::fNameobject identifier; TDataSet*TDataSet::fParentpointer to mother of the directory; TTable*TChair::fTablethe ""TTable"" object this object is pthe proxy for; TStringTNamed::fTitleobject title; static TDataSet*TDataSet::fgMainSetpointer the main dataset;. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TColumnView(const char* colName = """", TTable* table = 0); constructor. ~TColumnView(); destructor. void Browse(TBrowser* b); Create a column histogram for the simple column. TH1 * Histogram(const char* selection = """"); Create a histogram from the context menu. Bool_t IsFolder() const; Treat the column with the pointer to the ""Ptr"" as a ""folder"". TColumnView(const char* colName = """", TTable* table = 0). » Author: Valery Fine(fine@bnl.gov) 13/03/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/table:$Id: TColumnView.h 21414 2007-12-17 14:15:59Z brun $ » Last generated: 2009-12-07 15:44; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TColumnView.html:10977,simpl,simple,10977,root/html526/TColumnView.html,https://root.cern,https://root.cern/root/html526/TColumnView.html,1,['simpl'],['simple']
Usability,"bject* mother); static TDataSet::EDataSetPassTDataSet::SortIt(TDataSet* ds); static TDataSet::EDataSetPassTDataSet::SortIt(TDataSet* ds, void* user). Data Members; public:. enum TDataSet::EDataSetPass { kContinue; kPrune; kStop; kUp; kStruct; kAll; kRefs; kMarked; };; enum TDataSet::ESetBits { kMark; kArray; };; enum TDataSet::EBitOpt { kSet; kReset; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. ULong_tTChair::fLastIndxindex pof the last used table row;; void*TChair::fLastRowpointer to the last used table row; fLastRow = table[fLastIndx]; TSeqCollection*TDataSet::fListList of the the the objects included into this dataset; TStringTNamed::fNameobject identifier; TDataSet*TDataSet::fParentpointer to mother of the directory; TTable*TChair::fTablethe ""TTable"" object this object is pthe proxy for; TStringTNamed::fTitleobject title; static TDataSet*TDataSet::fgMainSetpointer the main dataset;. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TColumnView(const char* colName = """", TTable* table = 0); constructor. ~TColumnView(); destructor. void Browse(TBrowser* b); Create a column histogram for the simple column. TH1 * Histogram(const char* selection = """"); Create a histogram from the context menu. Bool_t IsFolder() const; Treat the column with the pointer to the ""Ptr"" as a ""folder"". TColumnView(const char* colName = """", TTable* table = 0). » Author: Valery Fine(fine@bnl.gov) 13/03/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/table:$Id: TColumnView.h 21414 2007-12-17 14:15:59Z brun $ » Last generated: 2010-09-23 20:02; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TColumnView.html:10968,simpl,simple,10968,root/html528/TColumnView.html,https://root.cern,https://root.cern/root/html528/TColumnView.html,1,['simpl'],['simple']
Usability,"bject* mother); static TDataSet::EDataSetPassTDataSet::SortIt(TDataSet* ds); static TDataSet::EDataSetPassTDataSet::SortIt(TDataSet* ds, void* user). Data Members; public:. enum TDataSet::EDataSetPass { kContinue; kPrune; kStop; kUp; kStruct; kAll; kRefs; kMarked; };; enum TDataSet::ESetBits { kMark; kArray; };; enum TDataSet::EBitOpt { kSet; kReset; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. ULong_tTChair::fLastIndxindex pof the last used table row;; void*TChair::fLastRowpointer to the last used table row; fLastRow = table[fLastIndx]; TSeqCollection*TDataSet::fListList of the the the objects included into this dataset; TStringTNamed::fNameobject identifier; TDataSet*TDataSet::fParentpointer to mother of the directory; TTable*TChair::fTablethe ""TTable"" object this object is pthe proxy for; TStringTNamed::fTitleobject title; static TDataSet*TDataSet::fgMainSetpointer the main dataset;. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TColumnView(const char* colName = """", TTable* table = 0); constructor. ~TColumnView(); destructor. void Browse(TBrowser* b); Create a column histogram for the simple column. TH1 * Histogram(const char* selection = """"); Create a histogram from the context menu. Bool_t IsFolder() const; Treat the column with the pointer to the ""Ptr"" as a ""folder"". TColumnView(const char* colName = """", TTable* table = 0). » Author: Valery Fine(fine@bnl.gov) 13/03/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/table:$Id: TColumnView.h 21414 2007-12-17 14:15:59Z brun $ » Last generated: 2011-07-04 15:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TColumnView.html:11068,simpl,simple,11068,root/html530/TColumnView.html,https://root.cern,https://root.cern/root/html530/TColumnView.html,1,['simpl'],['simple']
Usability,"bject* mother); static TDataSet::EDataSetPassTDataSet::SortIt(TDataSet* ds); static TDataSet::EDataSetPassTDataSet::SortIt(TDataSet* ds, void* user). Data Members; public:. enum TDataSet::EDataSetPass { kContinue; kPrune; kStop; kUp; kStruct; kAll; kRefs; kMarked; };; enum TDataSet::ESetBits { kMark; kArray; };; enum TDataSet::EBitOpt { kSet; kReset; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. ULong_tTChair::fLastIndxindex pof the last used table row;; void*TChair::fLastRowpointer to the last used table row; fLastRow = table[fLastIndx]; TSeqCollection*TDataSet::fListList of the the the objects included into this dataset; TStringTNamed::fNameobject identifier; TDataSet*TDataSet::fParentpointer to mother of the directory; TTable*TChair::fTablethe ""TTable"" object this object is pthe proxy for; TStringTNamed::fTitleobject title; static TDataSet*TDataSet::fgMainSetpointer the main dataset;. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TColumnView(const char* colName = """", TTable* table = 0); constructor. ~TColumnView(); destructor. void Browse(TBrowser* b); Create a column histogram for the simple column. TH1 * Histogram(const char* selection = """"); Create a histogram from the context menu. Bool_t IsFolder() const; Treat the column with the pointer to the ""Ptr"" as a ""folder"". TColumnView(const char* colName = """", TTable* table = 0). » Author: Valery Fine(fine@bnl.gov) 13/03/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/table:$Id: TColumnView.h 21414 2007-12-17 14:15:59Z brun $ » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TColumnView.html:11068,simpl,simple,11068,root/html532/TColumnView.html,https://root.cern,https://root.cern/root/html532/TColumnView.html,2,['simpl'],['simple']
Usability,"bject* obj); voidTProof::AddInputData(TObject* obj, Bool_t push = kFALSE); virtual voidTObject::AppendPad(Option_t* option = """"); Int_tTProof::Archive(Int_t query, const char* url); Int_tTProof::Archive(const char* queryref, const char* url = 0); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTProof::Browse(TBrowser* b); voidTProof::cd(Int_t id = -1); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; Int_tTProof::CleanupSession(const char* sessiontag); virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTProof::ClearCache(const char* file = 0); voidTProof::ClearData(UInt_t what = kUnregistered, const char* dsname = 0); virtual voidTProof::ClearDataSetCache(const char* dataset = 0); voidTProof::ClearFeedback(); voidTProof::ClearInput(); voidTProof::ClearInputData(TObject* obj = 0); voidTProof::ClearInputData(const char* name); Int_tTProof::ClearPackage(const char* package); Int_tTProof::ClearPackages(); virtual TObject*TNamed::Clone(const char* newname = """") const; voidTProof::Close(Option_t* option = """"); voidTProof::CloseProgressDialog()SIGNAL ; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTNamed::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidTNamed::Copy(TObject& named) const; TDrawFeedback*TProof::CreateDrawFeedback(); voidTProof::DataSetStatus(const char* msg, Bool_t status, Int_t d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TProofCondor.html:2244,Clear,ClearInputData,2244,root/html532/TProofCondor.html,https://root.cern,https://root.cern/root/html532/TProofCondor.html,2,['Clear'],['ClearInputData']
Usability,"bject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SimpleInterval(const char* name = 0); Default constructor. SimpleInterval(const RooStats::SimpleInterval& other, const char* name); fParameters.add( other.fParameters );. operator=(const RooStats::SimpleInterval& other). SimpleInterval(const char* name, const RooRealVar& var, Double_t lower, Double_t upper, Double_t cl); Alternate constructor. ~SimpleInterval(); Destructor. Bool_t IsInInterval(const RooArgSet& ) const. RooArgSet* GetParameters() const; return cloned list of parameters. Bool_t CheckParameters(const RooArgSet& ) const. explicit SimpleInterval(const char* name = 0); default constructors. void SetConfidenceLevel(Double_t ); set the confidence level for the interval. Simple interval is defined at construction time so this function; has no effect. {}. Double_t ConfidenceLevel() const; return the confidence interval. {return fConfidenceLevel;}. Double_t LowerLimit(); return the interval lower limit. {return fLowerLimit;}. Double_t UpperLimit(); return the interval upper limit. {return fUpperLimit;}. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__SimpleInterval.html:7298,Simpl,SimpleInterval,7298,root/html602/RooStats__SimpleInterval.html,https://root.cern,https://root.cern/root/html602/RooStats__SimpleInterval.html,4,['Simpl'],['SimpleInterval']
Usability,"bject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. UInt_tfNbPntsNumber of points describing the shape; UInt_tfNbPolsNumber of polygons describing the shape; UInt_tfNbSegsNumber of segments describing the shape; UInt_tfPntsCapacityCurrent capacity of fPnts space; UInt_tfPolsCapacityCurrent capacity of fSegs space; UInt_tfSectionsSection validity flags; UInt_tfSegsCapacityCurrent capacity of fSegs space; const Int_tfTypePrimitive type - predefined ones in TBuffer3DTypes.h; static UInt_tfgCSLevel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TBuffer3D(Int_t type, UInt_t reqPnts = 0, UInt_t reqPntsCapacity = 0, UInt_t reqSegs = 0, UInt_t reqSegsCapacity = 0, UInt_t reqPols = 0, UInt_t reqPolsCapacity = 0); Destructor; Construct from supplied shape type and raw sizes. ~TBuffer3D(); Destructor. void Init(); Initialise buffer. void ClearSectionsValid(); Clear any sections marked valid. void SetLocalMasterIdentity(); Set kRaw tesselation section of buffer with supplied sizes; Set fLocalMaster in section kCore to identity. void SetAABoundingBox(const Double_t[3] origin, const Double_t[3] halfLengths); Set fBBVertex in kBoundingBox section to a axis aligned (local) BB; using supplied origin and box half lengths. 7-------6; /| /|; 3-------2 |; | 4-----|-5; |/ |; 0-------1. Bool_t SetRawSizes(UInt_t reqPnts, UInt_t reqPntsCapacity, UInt_t reqSegs, UInt_t reqSegsCapacity, UInt_t reqPols, UInt_t reqPolsCapacity); Set kRaw tesselation section of buffer with supplied sizes. UInt_t GetCSLevel(); return CS level. void IncCSLevel(); increment CS level. UInt_t DecCSLevel(); decrement CS level. TBuffer3D(const TBuffer3D& ); Non-copyable class. const TBuffer3D & operator=(const TBuffer3D& ). void SetSectionsValid(UInt_t mask); Section validity flags. { fSections |= mask & kAll; }. Bool_t SectionsValid(UInt_t mask) const; { return (Bool_t) (GetSections",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TBuffer3D.html:16886,Clear,ClearSectionsValid,16886,root/html602/TBuffer3D.html,https://root.cern,https://root.cern/root/html602/TBuffer3D.html,4,['Clear'],"['Clear', 'ClearSectionsValid']"
Usability,"bject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); Float_t*TAttBBox::AssertBBox(); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElementList*TEveElementList::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidComputeBBox(); virtual voidTNamed::Copy(TObject& named) const; virtual voidTEveElement::CopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); voidTEveElement::CSCApplyMainColorToAllChildren(); voidTEveElement::CSCApplyMainColorToMatchingChildren(); voidTEveElement::CSCApplyMainTransparencyToAllChildren(); voidTEveElement::CSCApplyMainTransparencyToMatchingChildren(); voidTEveElement::CSCImplySelectAllChildren(); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TEveProjectionManager.html:2611,Clear,ClearStamps,2611,root/html532/TEveProjectionManager.html,https://root.cern,https://root.cern/root/html532/TEveProjectionManager.html,4,['Clear'],['ClearStamps']
Usability,"bject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SimpleInterval(const char* name = 0); Default constructor. SimpleInterval(const RooStats::SimpleInterval& other, const char* name); fParameters.add( other.fParameters );. operator=(const RooStats::SimpleInterval& other). SimpleInterval(const char* name, const RooRealVar& var, Double_t lower, Double_t upper, Double_t cl); Alternate constructor. ~SimpleInterval(); Destructor. Bool_t IsInInterval(const RooArgSet& ) const. RooArgSet* GetParameters() const; return cloned list of parameters. Bool_t CheckParameters(const RooArgSet& ) const. explicit SimpleInterval(const char* name = 0); default constructors. void SetConfidenceLevel(Double_t ); set the confidence level for the interval. Simple interval is defined at construction time so this function; has no effect. {}. Double_t ConfidenceLevel() const; return the confidence interval. {return fConfidenceLevel;}. Double_t LowerLimit(); return the interval lower limit. {return fLowerLimit;}. Double_t UpperLimit(); return the interval upper limit. {return fUpperLimit;}. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id$ » ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__SimpleInterval.html:7436,Simpl,SimpleInterval,7436,root/html602/RooStats__SimpleInterval.html,https://root.cern,https://root.cern/root/html602/RooStats__SimpleInterval.html,2,['Simpl'],['SimpleInterval']
Usability,"bject::EmitVA(const char* signal, Int_t nargs, va_list va); Int_tTProof::EnablePackage(const char* package, Bool_t notOnClient = kFALSE, TList* workers = 0); Int_tTProof::EnablePackage(const char* package, const char* loadopts, Bool_t notOnClient = kFALSE, TList* workers = 0); Int_tTProof::EnablePackage(const char* package, TList* loadopts, Bool_t notOnClient = kFALSE, TList* workers = 0); virtual voidTObject::Error(const char* method, const char* msgfmt) const; Int_tTProof::Exec(const char* cmd, Bool_t plusMaster = kFALSE); Int_tTProof::Exec(const char* cmd, const char* ord, Bool_t logtomacro = kFALSE); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual Bool_tTProof::ExistsDataSet(const char* dataset); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTProof::Feedback(TList* objs)SIGNAL ; virtual voidTNamed::FillBuffer(char*& buffer); Long64_tTProof::Finalize(Int_t query = -1, Bool_t force = kFALSE); Long64_tTProof::Finalize(const char* queryref, Bool_t force = kFALSE); TList*TProof::FindDataSets(const char* searchString, const char* optStr = """"); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Long64_tTProof::GetBytesRead() const; Int_tTProof::GetClientProtocol() const; const char*TProof::GetConfDir() const; const char*TProof::GetConfFile() const; Float_tTProof::GetCpuTime() const; const char*TProof::GetDataPoolUrl() const; virtual TFileCollection*TProof::GetDataSet(const char* dataset, const char* optStr = """"); TMap*TProof::GetDataSetQuota(const char* optStr = """"); virtual TMap*TProof::GetDataSets(const char* uri = """", const char* optStr = """"); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TStringTProof::Getenv(const char* env, c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofCondor.html:6903,Feedback,Feedback,6903,root/html534/TProofCondor.html,https://root.cern,https://root.cern/root/html534/TProofCondor.html,2,['Feedback'],['Feedback']
Usability,"bject::MakeZombie(). private:. TMVA::MsgLogger&Log() const; TStringSecToText(Double_t, Bool_t) const. Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. Bool_tfColourfulOutputflag for use of colors; TMVA::MsgLogger*fLoggerthe output logger; Int_tfNcountsreference number of ""counts""; TStringfPrefixprefix for outputs; static const TStringfgClassNameused for output; static const Int_tfgNbinsnumber of bins in progress bar. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Timer(const char* prefix = """", Bool_t colourfulOutput = kTRUE); constructor. Timer(Int_t ncounts, const char* prefix = """", Bool_t colourfulOutput = kTRUE); standard constructor: ncounts gives the total number of counts that; the loop will iterate through. At each call of the timer, the current; number of counts is provided by the user, so that the timer can obtain; the due time from linearly interpolating the spent time. ~Timer( void ); destructor. void Init(Int_t ncounts); timer initialisation. void Reset( void ); resets timer. Double_t ElapsedSeconds( void ); computes elapsed tim in seconds. TString GetElapsedTime(Bool_t Scientific = kTRUE); returns pretty string with elaplsed time. TString GetLeftTime(Int_t icounts); returns pretty string with time left. void ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__Timer.html:7112,progress bar,progress bar,7112,root/html602/TMVA__Timer.html,https://root.cern,https://root.cern/root/html602/TMVA__Timer.html,4,['progress bar'],['progress bar']
Usability,"ble - decides whether the channel grid is shown or not -color - color of channel grid. ; Definition at line 7271 of file TSpectrum2Painter.cxx. ◆ SetChanMarks(). void TSpectrum2Painter::SetChanMarks ; (; Int_t ; enable, . Int_t ; color, . Int_t ; width, . Int_t ; height, . Int_t ; style . ). Sets enables/disables drawing of channel marks and sets their attributes: . enable - decides whether the channel marks are shown or not; color - color of channel marks; width - width of channel marks in pixels; height - height of channel marks in pixels; style - style of channel marks (dot, cross, star, rectangle, X, diamond, triangle) . Definition at line 7244 of file TSpectrum2Painter.cxx. ◆ SetColorAlgorithm(). void TSpectrum2Painter::SetColorAlgorithm ; (; Int_t ; colorAlgorithm). Sets shading color algorithm: . olorAlgorithm - applies only for rainbowed display modes (rgb smooth algorithm, rgb modulo color component, cmy smooth algorithm,; cmy modulo color component, cie smooth algorithm,; cie modulo color component, yiq smooth algorithm,; yiq modulo color component, hsv smooth algorithm,; hsv modulo color component, it does not apply for simple display modes algorithm group . Definition at line 7150 of file TSpectrum2Painter.cxx. ◆ SetColorIncrements(). void TSpectrum2Painter::SetColorIncrements ; (; Double_t ; r, . Double_t ; g, . Double_t ; b . ). Sets color increments between two color levels for r, g, b components: . r, g, b - color increments between two color levels . Definition at line 7162 of file TSpectrum2Painter.cxx. ◆ SetContourWidth(). void TSpectrum2Painter::SetContourWidth ; (; Int_t ; width). Sets width between horizontal slices: . width - width between contours, applies only for contours display mode . Definition at line 7218 of file TSpectrum2Painter.cxx. ◆ SetDisplayMode(). void TSpectrum2Painter::SetDisplayMode ; (; Int_t ; modeGroup, . Int_t ; displayMode . ). Sets display group mode and display mode: . modeGroup - the following group modes can be set: ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2Painter.html:53185,simpl,simple,53185,doc/master/classTSpectrum2Painter.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2Painter.html,1,['simpl'],['simple']
Usability,"ble); virtual voidSetUID(UInt_t uid, TProcessID* context = 0); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TRefTable(); TRefTable(const TRefTable&); TRefTable(TObject* owner, Int_t size); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. Int_tAddInternalIdxForPID(TProcessID* procid); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual Int_tExpandForIID(Int_t iid, Int_t newsize); voidExpandPIDs(Int_t numpids); Int_tFindPIDGUID(const char* guid) const; Int_tGetInternalIdxForPID(TProcessID* procid) const; Int_tGetInternalIdxForPID(Int_t pid) const; voidTObject::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TRefTable::(anonymous)kHaveWarnedReadingOld; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZomb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TRefTable.html:6872,guid,guid,6872,root/html602/TRefTable.html,https://root.cern,https://root.cern/root/html602/TRefTable.html,4,['guid'],['guid']
Usability,"ble.py;  Set visibility attributes for the NA49 geometry Set Shape attributes. ;  ; file  ntuple1.py;   Ntuple drawing example. ;  ; file  numberEntry.py;  Example frame with one box where the user can increase or decrease a number and the shown value will be updated accordingly. ;  ; file  parse_CSV_file_with_TTree_ReadStream.py;  This function provides an example of how one might massage a csv data file to read into a ROOT TTree via TTree::ReadStream. ;  ; file  pyroot001_arrayInterface.py;   This tutorial illustrates the conversion of STL vectors and TVec to numpy arrays without copying the data. ;  ; file  pyroot002_pythonizationDecorator.py;   This tutorial shows how to use the @pythonization decorator to add extra behaviour to C++ user classes that are used from Python via PyROOT. ;  ; file  pyroot003_prettyPrinting.py;   This tutorial illustrates the pretty printing feature of PyROOT, which reveals the content of the object if a string representation is requested, e.g., by Python's print statement. ;  ; file  pyroot004_NumbaDeclare.py;   This tutorial illustrates how PyROOT supports declaring C++ callables from Python callables making them, for example, usable with RDataFrame. ;  ; file  pyroot005_tfile_context_manager.py;   This tutorial demonstrates the usage of the TFile class as a Python context manager. ;  ; file  pyroot006_tcontext_context_manager.py;   This tutorial demonstrates the usage of the TContext class as a Python context manager. ;  ; file  ratioplot.py;   Display two histograms and their ratio. ;  ; file  shapes.py;   Draw the geometry using the x3d viewver. ;  ; file  staff.py;   example of macro to read data from an ascii file and create a root file with a Tree. ;  ; file  surfaces.py;   Surfaces example ;  ; file  tornado.py;  Tornado example. ;  ; file  zdemo.py;   This macro is an example of graphs in log scales with annotations. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__pyroot.html:2314,usab,usable,2314,doc/master/group__tutorial__pyroot.html,https://root.cern,https://root.cern/doc/master/group__tutorial__pyroot.html,1,['usab'],['usable']
Usability,"ble_t e); Set error of bin with index ""bin"" to ""e"", enable errors if needed. void Sumw2(); Enable calculation of errors. THnSparse* Rebin(Int_t group) const; Combine the content of ""group"" neighboring bins into; a new bin and return the resulting THnSparse.; For group=2 and a 3 dimensional histogram, all ""blocks""; of 2*2*2 bins will be put into a bin. void SetTitle(const char* title); Change (i.e. set) the title. If title is in the form ""stringt;string0;string1;string2 ...""; the histogram title is set to stringt, the title of axis0 to string0,; of axis1 to string1, of axis2 to string2, etc, just like it is done; for TH1/TH2/TH3.; To insert the character "";"" in one of the titles, one should use ""#;""; or ""#semicolon"". THnSparse* Rebin(const Int_t* group) const; Combine the content of ""group"" neighboring bins for each dimension; into a new bin and return the resulting THnSparse.; For group={2,1,1} and a 3 dimensional histogram, pairs of x-bins; will be grouped. void Reset(Option_t* option = """"); Clear the histogram. Double_t ComputeIntegral(); Calculate the integral of the histogram. void PrintBin(Long64_t idx, Option_t* options) const; Print bin with linex index ""idx"".; For valid options see PrintBin(Long64_t idx, Int_t* bin, Option_t* options). Bool_t PrintBin(Long64_t idx, Int_t* coord, Option_t* options) const; Print one bin. If ""idx"" is != -1 use that to determine the bin,; otherwise (if ""idx"" == -1) use the coordinate in ""bin"".; If ""options"" contains:; '0': only print bins with an error or content != 0; Return whether the bin was printed (depends on options). void PrintEntries(Long64_t from = 0, Long64_t howmany = -1, Option_t* options = 0) const; Print ""howmany"" entries starting at ""from"". If ""howmany"" is -1, print all.; If ""options"" contains:; 'x': print in the order of axis bins, i.e. (0,0,...,0), (0,0,...,1),...; '0': only print bins with content != 0. void Print(Option_t* option = """") const; Print a THnSparse. If ""option"" contains:; 'a': print axis details; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/THnSparse.html:24962,Clear,Clear,24962,root/html532/THnSparse.html,https://root.cern,https://root.cern/root/html532/THnSparse.html,1,['Clear'],['Clear']
Usability,"ble_t x0 = 0.0, Double_t x1 = 0.0) const; Double_tTUnfold::GetChi2A() const; Double_tTUnfold::GetChi2L() const; Double_tGetChi2Sys(); voidGetDeltaSysBackgroundScale(TH1* delta, const char* source, const Int_t* binMap = 0); voidGetDeltaSysSource(TH1* hist_delta, const char* source, const Int_t* binMap = 0); voidGetDeltaSysTau(TH1* delta, const Int_t* binMap = 0); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); voidTUnfold::GetEmatrix(TH2* ematrix, const Int_t* binMap = 0) const; TH2D*TUnfold::GetEmatrix(const char* name, const char* title, Double_t x0 = 0.0, Double_t x1 = 0.0) const; voidGetEmatrixInput(TH2* ematrix, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE); voidGetEmatrixSysBackgroundScale(TH2* ematrix, const char* source, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE); voidGetEmatrixSysBackgroundUncorr(TH2* ematrix, const char* source, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE); voidGetEmatrixSysSource(TH2* ematrix, const char* source, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE); voidGetEmatrixSysTau(TH2* ematrix, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE); voidGetEmatrixSysUncorr(TH2* ematrix, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE); voidGetEmatrixTotal(TH2* ematrix, const Int_t* binMap = 0); TH1D*TUnfold::GetFoldedOutput(const char* name, const char* title, Double_t y0 = 0.0, Double_t y1 = 0.0) const; virtual const char*TObject::GetIconName() const; TH1D*TUnfold::GetInput(const char* name, const char* title, Double_t y0 = 0.0, Double_t y1 = 0.0) const; virtual Double_tTUnfold::GetLcurveX() const; virtual Double_tTUnfold::GetLcurveY() const; TH2D*TUnfold::GetLsquared(const char* name, const char* title, Double_t x0 = 0.0, Double_t x1 = 0.0) const; virtual const char*TObject::GetName() const; Int_tTUnfold::GetNdf() const; Int_tTUnfold::GetNpar() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::Get",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TUnfoldSys.html:8030,clear,clearEmat,8030,root/html528/TUnfoldSys.html,https://root.cern,https://root.cern/root/html528/TUnfoldSys.html,24,['clear'],['clearEmat']
Usability,"ble_tfPadTheta; const Float_t*fPhysicalShapeColor; Int_tfSelectedPart; TGLSelectionBufferfSelection; Int_tfSelectionBase; Bool_tfSelectionPass; Bool_tfUpdateSelection; TAxis*fXAxis; Double_tfXOYSectionPos; Double_tfXOZSectionPos; TAxis*fYAxis; Double_tfYOZSectionPos; TAxis*fZAxis; vector<Double_t>fZLevels. private:. const TColor*fPadColor. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Paint(); Draw lego/surf/whatever you can. void PrintPlot() const; Generate PS using gl2ps. Bool_t PlotSelected(Int_t px, Int_t py); Read color buffer content to find selected object. void SetPadColor(const TColor* color); Used in a pad. void SetFrameColor(const TColor* frameColor); Set plot's back box color. void InvalidateSelection(); Selection must be updated. const TColor * GetPadColor() const; Get pad color. void MoveSection(Int_t px, Int_t py); Create dynamic profile using selected plane. void DrawSections() const; Draw sections (if any). void ClearBuffers() const. // Clear buffer.; Float_t rgb[3] = {1.f, 1.f, 1.f};; if (const TColor *color = GetPadColor()); color->GetRGB(rgb[0], rgb[1], rgb[2]);; glClearColor(rgb[0], rgb[1], rgb[2], 1.);; glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);. void DrawPaletteAxis() const; Draw. Palette. Axis. void SaveModelviewMatrix() const. void SaveProjectionMatrix() const. void RestoreModelviewMatrix() const. void RestoreProjectionMatrix() const. const TGLPlotBox& RefBackBox() const; { return fBackBox; }. void SetPhysicalShapeColor(const Float_t* rgba). void InitGL() const. void DeInitGL() const. void DrawPlot() const. Bool_t InitGeometry(); Init geometry does plot's specific initialization. void StartPan(Int_t px, Int_t py); Pan function is already declared in TVirtualGLPainter. void AddOption(const TString& stringOption); Add string option, it can be a digit in ""lego"" or ""surf"". void ProcessEvent(Int_t event, Int_t px, Int_t py); Function to process additional events (key presses, mouse clicks.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGLPlotPainter.html:3467,Clear,ClearBuffers,3467,root/html532/TGLPlotPainter.html,https://root.cern,https://root.cern/root/html532/TGLPlotPainter.html,2,['Clear'],['ClearBuffers']
Usability,"bled state of a button group with radio and check buttons ;  buttonsLayout.CThis macro gives an example of different buttons' layout ;  buttonTest.CThis macro gives an example of how to set/change text button attributes ;  calendar.CThis macro gives an example of how to use html widget to display tabular data ;  CPUMeter.CSimple macro showing capabilities of the TGSpeedo widget ;  customContextMenu.CExample showing how to add a function to the class context menu ;  customTH1Fmenu.CExample showing how to customize a context menu for a class ;  drag_and_drop.CThis tutorial illustrates how to use drag and drop within ROOT ;  exec3.CExample of using signal/slot in TCanvas/TPad to get feedback about processed events ;  exec_macro.CThis utility macro executes the macro ""macro"" given as first argument and save a capture in a png file ;  games.CThis macro runs three ""games"" that each nicely illustrate the graphics capabilities of ROOT ;  gtreeTableTest.CThis TableTest class is a simple example of how to use a TGTreeTable ;  guilabels.CThis macro gives an example of how to create different kind of labels and the possibility to enable/disable them ;  guitest.CTest program for ROOT native GUI classes Exactly like $ROOTSYS/test/guitest.cxx but using the new signal and slots communication mechanism ;  guitest_playback.CThis macro plays a recorded ROOT session showing how to perform various interactive GUI operations with the guitest.C macro While replaying the session, several temporary macros (guitest0xx.C) macros will be saved ;  guiWithCINT.CA simple example of entering CINT commands and having the CINT output in a ROOT GUI application window ;  iconAsXPMData.CA simple example of creating icon image from XPM data, included into the code ;  listBox.CThis macro gives an example of how to create a list box and how to set and use its multiple selection feature ;  mditest.CGUI MDI features ;  ntupleTableTest.CThis TableTest class is a simple example of how to use a TGTable with a T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:118715,simpl,simple,118715,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,5,['simpl'],['simple']
Usability,"blockDecompose(const TMatrixD& input, const vector<int>& map1, const vector<int>& map2, TMatrixDSym& S11, TMatrixD& S12, TMatrixD& S21, TMatrixDSym& S22); voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); const TMatrixDSym&covarianceMatrix() const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), const RooCmdArg arg5 = RooCmdArg::none(), const RooCmdArg arg6 = RooCmdArg::none(), const RooCmdArg arg7 =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooMultiVarGaussian.html:3202,clear,clearValueDirty,3202,root/html528/RooMultiVarGaussian.html,https://root.cern,https://root.cern/root/html528/RooMultiVarGaussian.html,1,['clear'],['clearValueDirty']
Usability,"blockDecompose(const TMatrixD& input, const vector<int>& map1, const vector<int>& map2, TMatrixDSym& S11, TMatrixD& S12, TMatrixD& S21, TMatrixDSym& S22); voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); const TMatrixDSym&covarianceMatrix() const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg&",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooMultiVarGaussian.html:3202,clear,clearValueDirty,3202,root/html530/RooMultiVarGaussian.html,https://root.cern,https://root.cern/root/html530/RooMultiVarGaussian.html,1,['clear'],['clearValueDirty']
Usability,"blue). The negative portion of the axis line is shown in dark color, the positive in bright. The axis name and minimum / maximum values are labeled in the same color. There are three options for axes drawing - selected by radio buttons:. None - not drawn (default).; Edge - draw axes on the (minimum) edge of the scene extents box.; Origin - drawn axes through the origin. For edge axes, the zero value for each axis is marked on the axis line with a colored sphere. For origin axes, a single white sphere is shown at the origin.; Edge axes are depth clipped - i.e. are obscured by 3D objects in front of them. Origin axes (which generally pass through the middle of the 3D scene) are not depth clipped - so always visible.; A single orange sphere of fixed view port (window) size can be shown at any arbitrary position. Enable / disable the drawing with ‘Show’ checkbox. Enter X/Y/Z position in the edit boxes to set position. Initial position is at the center of the scene.; Set the guides using TGLViewer::SetGuideState e.g. to enable edge axes, and enable a reference marker at world position 50, 60, 100:; Double_t refPos[3] = {50.0,60.0,100.0};; v->SetGuideState(TGLUtil::kAxesEdge, kTRUE, refPos);; 9.13.2.8 Selecting Scene Shapes; You can select a single shape from your scene by pressing ‘Shift’ key, pointing and left clicking anywhere on the shape in the viewer. Selection is currently shown by drawing the shape-bounding box (not depth clipped) in white (polygon or wire frame render styles) or red (outline render style). Manipulators supported by the shape are drawn in red, green and blue while the non-supported ones are drawn in grey. To deselect a shape, either select another, or shift/click anywhere on the background (empty space) in the viewer. You cannot select Manipulators or Guides (Axes / Reference Marker).; 9.13.2.9 Editing Shapes; When a shape is selected, the viewer’s control pane shows the user interface that allows you to review and adjust the color and geometry pr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:397851,guid,guides,397851,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['guid'],['guides']
Usability,"bmission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome Documentation. ROOT provides different types of documentation:. The Reference Guide, which is generated by doxygen provides an up-to-date full code documentation. This is mainly for software developers of ROOT and using ROOT to build the applications.; A general Users Guide is provided for a more in depth explanation of concepts and functionality available in the ROOT system. ; A number of topical User Guides and Manuals for various components of the system.; A rich set of ROOT tutorials and code examples are offered to developers to exercise specific functionality.; A rich set of HowTo's is also present to discuss issues commonly faced by ROOT users. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/documentation.html:2744,guid,guidelines,2744,d/documentation.html,https://root.cern,https://root.cern/d/documentation.html,1,['guid'],['guidelines']
Usability,"bname, Option_t* option = ""read"", const char* user = ""user"", const char* pass = ""pass""); virtual~TSQLFile(); voidTObject::AbstractMethod(const char* method) const; virtual voidTDirectoryFile::Add(TObject* obj, Bool_t replace = kFALSE); static voidTDirectory::AddDirectory(Bool_t add = kTRUE); static Bool_tTDirectory::AddDirectoryStatus(); virtual voidTDirectoryFile::Append(TObject* obj, Bool_t replace = kFALSE); virtual Int_tTDirectoryFile::AppendKey(TKey* key); virtual voidTObject::AppendPad(Option_t* option = """"); static TFileOpenHandle*TFile::AsyncOpen(const char* name, Option_t* option = """", const char* ftitle = """", Int_t compress = 1, Int_t netopt = 0); virtual voidTDirectoryFile::Browse(TBrowser* b); virtual voidTDirectoryFile::Build(TFile* motherFile = 0, TDirectory* motherDir = 0); virtual Bool_tTDirectoryFile::cd(const char* path = 0); static Bool_tTDirectory::Cd(const char* path); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTDirectory::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual TObject*TDirectoryFile::CloneObject(const TObject* obj, Bool_t autoadd = kTRUE); virtual voidClose(Option_t* option = """")MENU ; Bool_tCommit(); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTFile::Copy(TObject&) const; virtual Bool_tTFile::Cp(const char* dst, Bool_t progressbar = kTRUE, UInt_t buffersize = 1000000); static Bool_tTFile::Cp(const char* src, const char* dst, Bool_t progressbar = kTRUE, UInt_t buffersize = 1000000); virtual TKey*CreateKey(TDirectory* mother, const TObject* obj, const char* name, Int_t bufsize); virtual TKey*CreateKey(TDirectory* mother, const void* obj, const TClass* cl, const char* name, Int_t bufsize); static TDirectory*&TDirectory::CurrentDirectory(); static TFile*&TFile::CurrentFile(); static voidTDirectory::DecodeNameCycle(const char* namecycle, char* name, Short_t& cycle); virtual voidTFile::Delete(const char* namecycle = """"); virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TSQLFile.html:8095,Clear,Clear,8095,root/html532/TSQLFile.html,https://root.cern,https://root.cern/root/html532/TSQLFile.html,1,['Clear'],['Clear']
Usability,"bname, Option_t* option = ""read"", const char* user = ""user"", const char* pass = ""pass""); virtual~TSQLFile(); voidTObject::AbstractMethod(const char* method) const; virtual voidTDirectoryFile::Add(TObject* obj, Bool_t replace = kFALSE); static voidTDirectory::AddDirectory(Bool_t add = kTRUE); static Bool_tTDirectory::AddDirectoryStatus(); virtual voidTDirectoryFile::Append(TObject* obj, Bool_t replace = kFALSE); virtual Int_tTDirectoryFile::AppendKey(TKey* key); virtual voidTObject::AppendPad(Option_t* option = """"); static TFileOpenHandle*TFile::AsyncOpen(const char* name, Option_t* option = """", const char* ftitle = """", Int_t compress = 1, Int_t netopt = 0); virtual voidTDirectoryFile::Browse(TBrowser* b); virtual voidTDirectoryFile::Build(TFile* motherFile = 0, TDirectory* motherDir = 0); virtual Bool_tTDirectoryFile::cd(const char* path = 0); static Bool_tTDirectory::Cd(const char* path); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTDirectory::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual TObject*TDirectoryFile::CloneObject(const TObject* obj, Bool_t autoadd = kTRUE); virtual voidClose(Option_t* option = """")MENU ; Bool_tCommit(); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTFile::Copy(TObject&) const; virtual Bool_tTFile::Cp(const char* dst, Bool_t progressbar = kTRUE, UInt_t buffersize = 1000000); static Bool_tTFile::Cp(const char* src, const char* dst, Bool_t progressbar = kTRUE, UInt_t buffersize = 1000000); virtual TKey*CreateKey(TDirectory* mother, const TObject* obj, const char* name, Int_t bufsize); virtual TKey*CreateKey(TDirectory* mother, const void* obj, const TClass* cl, const char* name, Int_t bufsize); static TDirectory*&TDirectory::CurrentDirectory(); static TFile*&TFile::CurrentFile(); static voidTDirectory::DecodeNameCycle(const char* namecycle, char* name, Short_t& cycle, const size_t namesize = 0); virtual voidTFile::Delete(const c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TSQLFile.html:8095,Clear,Clear,8095,root/html534/TSQLFile.html,https://root.cern,https://root.cern/root/html534/TSQLFile.html,1,['Clear'],['Clear']
Usability,"boolROOT::Math::Minimizer::fValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). private:. vector<double>fCovarvector storing the covariance matrix; unsigned intfDim; vector<double>fErrorsvector of output errors; boolfMinosRun; TMinuit*fMinuit; vector<double>fParamsvector of output values; ROOT::Minuit::EMinimizerTypefType; boolfUsed; static ROOT::Math::IMultiGenFunction*fgFunc; static TMinuit*fgMinuit; static boolfgUseStaticMinuitflag to control if using global TMInuit instance (gMinuit); static boolfgUsedflag to control if static instance has done minimization. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TMinuitMinimizer(ROOT::Minuit::EMinimizerType type = ROOT::Minuit::kMigrad, unsigned int ndim = 0); Constructor for TMinuitMinimier class via an enumeration specifying the minimization; algorithm type. Supported types are : kMigrad, kSimplex, kCombined (a combined; Migrad + Simplex minimization) and kMigradImproved (a Migrad mininimization folloed by an; improved search for global minima). The default type is Migrad (kMigrad). TMinuitMinimizer(const char* type, unsigned int ndim = 0); constructor from a char * for the algorithm type, used by the plug-in manager; The names supported (case unsensitive) are:; Migrad (default), Simplex, Minimize (for the combined Migrad+ Simplex) and Migrad_imp. ~TMinuitMinimizer(); Destructor implementation. TMinuitMinimizer(const TMinuitMinimizer& ); Implementation of copy constructor (it is private). bool UseStaticMinuit(bool on = true); static method to control usage of global TMinuit instance. void InitTMinuit(int ndim). void SetFunction(const ROOT::Math::IMultiGenFunction & func); Set the objective function to be minimized, by passing a function object implement the; basic multi-dim Function interface. In this case the derivatives will be; calculated by Minuit; Here a TMinuit instance is created since only at this point we know the number of",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMinuitMinimizer.html:6429,Simpl,Simplex,6429,root/html602/TMinuitMinimizer.html,https://root.cern,https://root.cern/root/html602/TMinuitMinimizer.html,2,['Simpl'],['Simplex']
Usability,"bool ; shapeProp . ). Change dirty flag propagation mask for specified server. ; Definition at line 438 of file RooAbsArg.cxx. ◆ checkObservables(). bool RooAbsArg::checkObservables ; (; const RooArgSet * ; nset); const. virtual . Overloadable function in which derived classes can implement consistency checks of the variables. ; If this function returns true, indicating an error, the fitter or generator will abort. ; Reimplemented in RooLagrangianMorphFunc, RooAddModel, RooAddPdf, RooRealSumFunc, and RooRealSumPdf.; Definition at line 817 of file RooAbsArg.cxx. ◆ cleanBranchName(). TString RooAbsArg::cleanBranchName ; (; ); const. protected . Construct a mangled name from the actual name that is free of any math symbols that might be interpreted by TTree. ; Definition at line 2075 of file RooAbsArg.cxx. ◆ clearShapeDirty(). void RooAbsArg::clearShapeDirty ; (; ); const. inlineprotected . Definition at line 579 of file RooAbsArg.h. ◆ clearValueAndShapeDirty(). void RooAbsArg::clearValueAndShapeDirty ; (; ); const. inlineprotected . Definition at line 571 of file RooAbsArg.h. ◆ clearValueDirty(). void RooAbsArg::clearValueDirty ; (; ); const. inlineprotected . Definition at line 576 of file RooAbsArg.h. ◆ clients(). const RefCountList_t & RooAbsArg::clients ; (; ); const. inline . List of all clients of this object. ; Definition at line 166 of file RooAbsArg.h. ◆ clone(). virtual TObject * RooAbsArg::clone ; (; const char * ; newname = nullptr); const. pure virtual . Implemented in RooStats::HistFactory::FlexibleInterpVar, RooStats::HistFactory::LinInterpVar, ParamHistFunc, PiecewiseInterpolation, RooStats::HistFactory::RooBarlowBeestonLL, Roo2DKeysPdf, RooArgusBG, RooBCPEffDecay, RooBCPGenDecay, RooBDecay, RooBernstein, RooBifurGauss, RooBMixDecay, RooBreitWigner, RooBukinPdf, RooCBShape, RooCFunction1Binding< VO, VI >, RooCFunction1PdfBinding< VO, VI >, RooCFunction2Binding< VO, VI1, VI2 >, RooCFunction2PdfBinding< VO, VI1, VI2 >, RooCFunction3Binding< VO, VI1, VI2, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsArg.html:50696,clear,clearValueAndShapeDirty,50696,doc/master/classRooAbsArg.html,https://root.cern,https://root.cern/doc/master/classRooAbsArg.html,1,['clear'],['clearValueAndShapeDirty']
Usability,"bool recursiveCheckObservables (const RooArgSet *nset) const;  Recursively call checkObservables on all nodes in the expression tree. ;  ; void removeStringAttribute (const Text_t *key);  Delete a string attribute with a given key. ;  ; void resetDataToken ();  ; void setAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setDataToken (std::size_t index);  Sets the token for retrieving results in the BatchMode. For internal use only. ;  ; void setLocalNoDirtyInhibit (bool flag) const;  ; void SetName (const char *name) override;  Set the name of the TNamed. ;  ; void SetNameTitle (const char *name, const char *title) override;  Set all the TNamed parameters (name and title). ;  ; void setProhibitServerRedirect (bool flag);  ; void setStringAttribute (const Text_t *key, const Text_t *value);  Associate string 'value' to this object under key 'key'. ;  ; void setTransientAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setWorkspace (RooWorkspace &ws);  ; const std::map< std::string, std::string > & stringAttributes () const;  ; const std::set< std::string > & transientAttributes () const;  ; RooWorkspace * workspace () const;  ; TIterator * clientIterator () const R__DEPRECATED(6;  Retrieve a client iterator. ;  ; TIterator Use clients () and begin();  ; TIterator Use end () or range-based loops."") ;  ; TIterator * valueClientIterator () const R__DEPRECATED(6;  ; TIterator Use valueClients () and begin();  ; TIterator Use end () or range-based loops."") ;  ; TIterator * shapeClientIterator () const R__DEPRECATED(6;  ; TIterator Use shapeClients () and begin();  ; TIterator Use end () or range-based loops."") ;  ; TIterator * serverIterator () const R__DEPRECATED(6;  ; TIterator Use servers () and begin();  ; TIterator Use end () or range-based loops."") ;  ; RooFIter valueClientMIterator () const R__DEPRECATED(6;  ; RooFIter ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAddPdf.html:42041,clear,clear,42041,doc/v632/classRooAddPdf.html,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html,3,['clear'],['clear']
Usability,"bool recursiveCheckObservables (const RooArgSet *nset) const;  Recursively call checkObservables on all nodes in the expression tree. ;  ; void removeStringAttribute (const Text_t *key);  Delete a string attribute with a given key. ;  ; void resetDataToken ();  ; void setAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setDataToken (std::size_t index);  Sets the token for retrieving results in the BatchMode. For internal use only. ;  ; void setLocalNoDirtyInhibit (bool flag) const;  ; void SetName (const char *name) override;  Set the name of the TNamed. ;  ; void SetNameTitle (const char *name, const char *title) override;  Set all the TNamed parameters (name and title). ;  ; void setProhibitServerRedirect (bool flag);  ; void setStringAttribute (const Text_t *key, const Text_t *value);  Associate string 'value' to this object under key 'key'. ;  ; void setTransientAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setWorkspace (RooWorkspace &ws);  ; const std::map< std::string, std::string > & stringAttributes () const;  ; const std::set< std::string > & transientAttributes () const;  ; RooWorkspace * workspace () const;  ; const RefCountList_t & clients () const;  List of all clients of this object. ;  ; const RefCountList_t & valueClients () const;  List of all value clients of this object. Value clients receive value updates. ;  ; const RefCountList_t & shapeClients () const;  List of all shape clients of this object. ;  ; const RefCountList_t & servers () const;  List of all servers of this object. ;  ; RooAbsArg * findServer (const char *name) const;  Return server of this with name name. Returns nullptr if not found. ;  ; RooAbsArg * findServer (const RooAbsArg &arg) const;  Return server of this that has the same name as arg. Returns nullptr if not found. ;  ; RooAbsArg * findServer (Int_t index) const;  Return",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCBShape.html:38951,clear,clear,38951,doc/master/classRooCBShape.html,https://root.cern,https://root.cern/doc/master/classRooCBShape.html,37,['clear'],['clear']
Usability,"bool recursiveCheckObservables (const RooArgSet *nset) const;  Recursively call checkObservables on all nodes in the expression tree. ;  ; void removeStringAttribute (const Text_t *key);  Delete a string attribute with a given key. ;  ; void resetDataToken ();  ; void setAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setDataToken (std::size_t index);  Sets the token for retrieving results in the BatchMode. For internal use only. ;  ; void setLocalNoDirtyInhibit (bool flag) const;  ; void SetName (const char *name) override;  Set the name of the TNamed. ;  ; void SetNameTitle (const char *name, const char *title) override;  Set all the TNamed parameters (name and title). ;  ; void setProhibitServerRedirect (bool flag);  ; void setStringAttribute (const Text_t *key, const Text_t *value);  Associate string 'value' to this object under key 'key'. ;  ; void setTransientAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setWorkspace (RooWorkspace &ws);  ; const std::map< std::string, std::string > & stringAttributes () const;  ; const std::set< std::string > & transientAttributes () const;  ; virtual void translate (RooFit::Detail::CodeSquashContext &ctx) const;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ; RooWorkspace * workspace () const;  ; TIterator * clientIterator () const R__DEPRECATED(6;  Retrieve a client iterator. ;  ; TIterator Use clients () and begin();  ; TIterator Use end () or range-based loops."") ;  ; TIterator * valueClientIterator () const R__DEPRECATED(6;  ; TIterator Use valueClients () and begin();  ; TIterator Use end () or range-based loops."") ;  ; TIterator * shapeClientIterator () const R__DEPRECATED(6;  ; TIterator Use shapeClients () and begin();  ; TIterator Use end () or range-based loops."") ;  ; TIterator *",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAbsReal.html:30999,clear,clear,30999,doc/v632/classRooAbsReal.html,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html,1,['clear'],['clear']
Usability,"bool recursiveCheckObservables (const RooArgSet *nset) const;  Recursively call checkObservables on all nodes in the expression tree. ;  ; void removeStringAttribute (const Text_t *key);  Delete a string attribute with a given key. ;  ; void resetDataToken ();  ; void setAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setDataToken (std::size_t index);  Sets the token for retrieving results in the BatchMode. For internal use only. ;  ; void setLocalNoDirtyInhibit (bool flag) const;  ; void SetName (const char *name) override;  Set the name of the TNamed. ;  ; void SetNameTitle (const char *name, const char *title) override;  Set all the TNamed parameters (name and title). ;  ; void setProhibitServerRedirect (bool flag);  ; void setStringAttribute (const Text_t *key, const Text_t *value);  Associate string 'value' to this object under key 'key'. ;  ; void setTransientAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setWorkspace (RooWorkspace &ws);  ; const std::map< std::string, std::string > & stringAttributes () const;  ; const std::set< std::string > & transientAttributes () const;  ; virtual void translate (RooFit::Detail::CodeSquashContext &ctx) const;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ; RooWorkspace * workspace () const;  ; const RefCountList_t & clients () const;  List of all clients of this object. ;  ; const RefCountList_t & valueClients () const;  List of all value clients of this object. Value clients receive value updates. ;  ; const RefCountList_t & shapeClients () const;  List of all shape clients of this object. ;  ; const RefCountList_t & servers () const;  List of all servers of this object. ;  ; RooAbsArg * findServer (const char *name) const;  Return server of this with name name. Returns nullptr if not f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBinWidthFunction.html:28689,clear,clear,28689,doc/master/classRooBinWidthFunction.html,https://root.cern,https://root.cern/doc/master/classRooBinWidthFunction.html,112,['clear'],['clear']
Usability,"bool recursiveCheckObservables (const RooArgSet *nset) const;  Recursively call checkObservables on all nodes in the expression tree. ;  ; void removeStringAttribute (const Text_t *key);  Delete a string attribute with a given key. ;  ; void resetDataToken ();  ; void setAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setDataToken (std::size_t index);  Sets the token for retrieving results in the BatchMode. For internal use only. ;  ; void setLocalNoDirtyInhibit (bool flag) const;  ; void SetName (const char *name) override;  Set the name of the TNamed. ;  ; void SetNameTitle (const char *name, const char *title) override;  Set all the TNamed parameters (name and title). ;  ; void setProhibitServerRedirect (bool flag);  ; void setStringAttribute (const Text_t *key, const Text_t *value);  Associate string 'value' to this object under key 'key'. ;  ; void setTransientAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setWorkspace (RooWorkspace &ws);  ; const std::map< std::string, std::string > & stringAttributes () const;  ; const std::set< std::string > & transientAttributes () const;  ; virtual void translate (RooFit::Detail::CodeSquashContext &ctx) const;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ; RooWorkspace * workspace () const;  ; virtual void writeToStream (std::ostream &os, bool compact) const =0;  ; Client-Server Interface; These functions allow RooFit to figure out who is serving values to whom. . const RefCountList_t & clients () const;  List of all clients of this object. ;  ; const RefCountList_t & valueClients () const;  List of all value clients of this object. Value clients receive value updates. ;  ; const RefCountList_t & shapeClients () const;  List of all shape clients of this object. ;  ; const RefCountList_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsArg.html:15782,clear,clear,15782,doc/master/classRooAbsArg.html,https://root.cern,https://root.cern/doc/master/classRooAbsArg.html,1,['clear'],['clear']
Usability,"bout which TTree entry to access. For that call TTreeReader::Next() in a loop. It will return false once it has reached the end of the TTree.; In the same loop, compute the total size of all events (simply add the current event size to the total size); ... // Loop over all entries of the TTree or TChain.; while (myReader.Next()) {; // Get the data from the current TTree entry by getting; // the value from the connected reader (eventSize):; totalSize += *eventSize;; }. Accessing the Analysis Result; At the end of the loop, print the sum of all event sizes. This sum shows you the real power of a TTree: even though you can analyze large amounts of data (our example tree with 22MB is tiny!) ROOT needs just a few MB of your RAM, no matter how many events you analyze. Imagine what it would be like if you had to load all data into memory, e.g. using a simple vector!; ... Int_t sizeInMB = totalSize/1024/1024;; printf(""Total size of all events: %d MB\n"", sizeInMB);; }. Running the Macro; To run this macro, simply type .x AnalyzeTree.C and ROOT will execute it. If it finds an error it might be wise to quit ROOT (.q) and try again!; If, for any reason, you don't manage to get it working, you can download a working macro file here: CountEvents.C; Here again, if you are using ROOT via ssh, you have to download the file with wget from your remote directory:; wget http://root-mirror.github.io/training/intro/CountEvents.C; . ‹ TTree and Its Data; up; Histogramming ›. Navigate through this book; Meet a TTree; Accessing a TTree With a TBrowser; Using TTree::Draw() to access a TTree; TTree and Its Data; Using a Macro to Read a TTree; Histogramming; Fit Panel; Compiling Your Code (also known as ACLiC); Accessing a TTree With a TSelector; Histogramming in a Selector; Using a TSelector with PROOF; The End. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/using-macro-read-ttree.html:5280,simpl,simply,5280,d/using-macro-read-ttree.html,https://root.cern,https://root.cern/d/using-macro-read-ttree.html,1,['simpl'],['simply']
Usability,"box. Note: Length/volume ratios NOT dependent on the projected size; of box at current camera configuration as we do not want; continual changes. This is used when (re) populating the scene; with objects from external client. TODO: Might be more logical to move this test out to client -; and have accessor for fInterestBox instead?. Bool_t UpdateInterest(Bool_t force); Update the internal interest box (fInterestBox) of the camera.; The interest box is an orientated bounding box, calculated as; an expanded container round the frustum. It is used to test if; if object bounding boxes are of interest (should be accepted; into viewer scene) for a camera - see TGLCamera::OfInterest(). The interest box is updated if the frustum is no longer contained; in the existing one, or a new one calculated on the current frustum; differs significantly in volume (camera has been zoomed/dollyed; sizable amount). If the interest box is updated we return kTRUE - kFALSE otherwise. void ResetInterest(); Clear out the existing interest box. Bool_t AdjustAndClampVal(Double_t& val, Double_t min, Double_t max, Int_t screenShift, Int_t screenShiftRange, Bool_t mod1, Bool_t mod2) const; Adjust a passed REFERENCE value 'val', based on screenShift delta.; Two modifier flags ('mod1' / 'mod2' ) for sensitivity:. mod1 = kFALSE, mod2 = kFALSE : normal sensitivity (screenShift/screenShiftRange); mod1 = kTRUE, mod2 = kFALSE : 0.1x sensitivity; mod1 = kTRUE, mod2 = kTRUE : 0.01x sensitivity; mod1 = kFALSE, mod2 = kTRUE : 10.0x sensitivity. 'val' is modified and clamped to 'min' / 'max' range.; Return bool kTRUE if val actually changed. Used as common interaction function for adjusting zoom/dolly etc. Double_t AdjustDelta(Double_t screenShift, Double_t deltaFactor, Bool_t mod1, Bool_t mod2) const; Adjust a passed screen value and apply modifiers.; See AdjustAndClampVal() for details. void DrawDebugAids() const; Draw out some debugging aids for the camera:. i) The frustum used to create the current interest ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGLCamera.html:15030,Clear,Clear,15030,root/html532/TGLCamera.html,https://root.cern,https://root.cern/root/html532/TGLCamera.html,4,['Clear'],['Clear']
Usability,"branches with variable length arrays. Each entry has a variable number of tracks, and each track has several variables.; tree4.C: a tree with a class (Event). The class Event is defined in $ROOTSYS/test. In this example we first encounter the impact of splitting a branch. Each script contains the main function, with the same name as the file (i.e. tree1), the function to write - tree1w, and the function to read - tree1r. If the script is not run in batch mode, it displays the tree in the browser and tree viewer. To study the example scripts, you can either execute the main script, or load the script and execute a specific function. For example:; // execute the function that writes, reads, shows the tree; root[] x tree1.C; // use ACLiC to build shared library, check syntax, execute; root[] x tree1.C++; // Load the script and select a function to execute; root[] L tree1.C; root[] tree1w(); root[] tree1r(); 12.14 Example 1: A Tree with Simple Variables; This example shows how to write, view, and read a tree with several simple (integers and floating-point) variables.; 12.14.1 Writing the Tree; Below is the function that writes the tree (tree1w). First, the variables are defined (px, py, pz, random and ev). Then we add a branch for each of the variables to the tree, by calling the TTree::Branch method for each variable.; void tree1w(){. // create a tree file tree1.root - create the file, the Tree and; // a few branches; TFile f(""tree1.root"",""recreate"");; TTree t1(""t1"",""a simple Tree with simple variables"");; Float_t px, py, pz;; Double_t random;; Int_t ev;; t1.Branch(""px"",&px,""px/F"");; t1.Branch(""py"",&py,""py/F"");; t1.Branch(""pz"",&pz,""pz/F"");; t1.Branch(""ev"",&ev,""ev/I"");. // fill the tree; for (Int_t i=0; i<10000; i++) {; gRandom->Rannor(px,py);; pz = px*px + py*py;; random = gRandom->Rndm();; ev = i;; t1.Fill();; }; // save the Tree heade; the file will be automatically closed; // when going out of the function scope; t1.Write();; }; 12.14.1.1 Creating Branches with A si",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:552485,simpl,simple,552485,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,3,"['Simpl', 'simpl']","['Simple', 'simple']"
Usability,"branches.; 352 /// \return Pointer to the TBranch that was created. The branch is owned by the tree.; 353 template <class T> TBranch *Branch(const char* name, T* obj, Int_t bufsize = 32000, Int_t splitlevel = 99); 354 {; 355 return BranchImpRef(name, TClass::GetClass<T>(), TDataType::GetType(typeid(T)), obj, bufsize, splitlevel);; 356 }; 357 ; 358 /// Add a new branch, and infer the data type from the array `addobj` being passed.; 359 ///; 360 /// \note This and the previous overload should cover most cases for creating a branch. Try to use these two whenever; 361 /// possible, unless e.g. type conversions are needed.; 362 ///; 363 /// \param[in] name Name of the branch to be created.; 364 /// \param[in] addobj Array of the objects to be added. When calling Fill(), the current value of the type/object will be saved.; 365 /// \param[in] bufsize he buffer size in bytes for this branch. When the buffer is full, it is compressed and written to disc.; 366 /// The default value of 32000 bytes and should be ok for most simple types. Larger buffers (e.g. 256000) if your Tree is not split and each entry is large (Megabytes).; 367 /// A small value for bufsize is beneficial if entries in the Tree are accessed randomly and the Tree is in split mode.; 368 /// \param[in] splitlevel If T is a class or struct and splitlevel > 0, the members of the object are serialised as separate branches.; 369 /// \return Pointer to the TBranch that was created. The branch is owned by the tree.; 370 template <class T> TBranch *Branch(const char* name, T** addobj, Int_t bufsize = 32000, Int_t splitlevel = 99); 371 {; 372 return BranchImp(name, TClass::GetClass<T>(), addobj, bufsize, splitlevel);; 373 }; 374 ; 375 virtual Int_t Branch(TCollection* list, Int_t bufsize = 32000, Int_t splitlevel = 99, const char* name = """");; 376 virtual Int_t Branch(TList* list, Int_t bufsize = 32000, Int_t splitlevel = 99);; 377 virtual Int_t Branch(const char* folder, Int_t bufsize = 32000, Int_t splitlevel = 99);",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8h_source.html:18154,simpl,simple,18154,doc/master/TTree_8h_source.html,https://root.cern,https://root.cern/doc/master/TTree_8h_source.html,1,['simpl'],['simple']
Usability,"break;; 842 }; 843 ; 844 Settings * settings = new Settings(TString(), s.convergenceSteps, s.batchSize,; 845 s.testInterval, s.weightDecay, r,; 846 MinimizerType::fSteepest, s.learningRate,; 847 s.momentum, 1, s.multithreading);; 848 std::shared_ptr<Settings> ptrSettings(settings);; 849 ptrSettings->setMonitoring (0);; 850 Log() << kINFO; 851 << ""Training with learning rate = "" << ptrSettings->learningRate (); 852 << "", momentum = "" << ptrSettings->momentum (); 853 << "", repetitions = "" << ptrSettings->repetitions (); 854 << Endl;; 855 ; 856 ptrSettings->setProgressLimits ((idxSetting)*100.0/(fSettings.size ()),; 857 (idxSetting+1)*100.0/(fSettings.size ()));; 858 ; 859 const std::vector<double>& dropConfig = ptrSettings->dropFractions ();; 860 if (!dropConfig.empty ()) {; 861 Log () << kINFO << ""Drop configuration"" << Endl; 862 << "" drop repetitions = "" << ptrSettings->dropRepetitions(); 863 << Endl;; 864 }; 865 ; 866 int idx = 0;; 867 for (auto f : dropConfig) {; 868 Log () << kINFO << "" Layer "" << idx << "" = "" << f << Endl;; 869 ++idx;; 870 }; 871 Log () << kINFO << Endl;; 872 ; 873 DNN::Steepest minimizer(ptrSettings->learningRate(),; 874 ptrSettings->momentum(),; 875 ptrSettings->repetitions());; 876 net.train(weights, trainPattern, testPattern, minimizer, *ptrSettings.get());; 877 ptrSettings.reset();; 878 Log () << kINFO << Endl;; 879 idxSetting++;; 880 }; 881 size_t weightIndex = 0;; 882 for (size_t l = 0; l < fNet.GetDepth(); l++) {; 883 auto & layerWeights = fNet.GetLayer(l).GetWeights();; 884 for (Int_t j = 0; j < layerWeights.GetNcols(); j++) {; 885 for (Int_t i = 0; i < layerWeights.GetNrows(); i++) {; 886 layerWeights(i,j) = weights[weightIndex];; 887 weightIndex++;; 888 }; 889 }; 890 auto & layerBiases = fNet.GetLayer(l).GetBiases();; 891 if (l == 0) {; 892 for (Int_t i = 0; i < layerBiases.GetNrows(); i++) {; 893 layerBiases(i,0) = weights[weightIndex];; 894 weightIndex++;; 895 }; 896 } else {; 897 for (Int_t i = 0; i < layerBiases.GetNrows(); i++) {",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDNN_8cxx_source.html:31253,learn,learningRate,31253,doc/master/MethodDNN_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDNN_8cxx_source.html,1,['learn'],['learningRate']
Usability,"browser on Windows.; 640 TString cWindows(""start \""\"" "");; 641 cWindows.Append(url);; 642 gSystem->Exec(cWindows);; 643#else; 644 // Command for opening a browser in Linux.; 645 TString cLinux(""xdg-open "");; 646 // For Linux we check if the DISPLAY is set.; 647 if (gSystem->Getenv(""DISPLAY"")) {; 648 // If the DISPLAY is set it will open the browser.; 649 cLinux.Append(url);; 650 gSystem->Exec(cLinux);; 651 } else {; 652 // Else the user will have a warning and the URL in the terminal.; 653 Warning(""OpenInBrowser"", ""The $DISPLAY is not set! Please open (e.g. Ctrl-click) %s\n"", url.Data());; 654 return;; 655 }; 656#endif; 657 Info(""OpenInBrowser"", ""A new tab should have opened in your browser."");; 658}; 659 ; 660namespace {; 661enum EUrl { kURLforClass, kURLforNameSpace, kURLforStruct };; 662////////////////////////////////////////////////////////////////////////////////; 663/// The function generates a URL address for class or namespace (scopeName).; 664/// This is the URL to the online reference guide, generated by Doxygen.; 665/// With the enumeration ""EUrl"" we pick which case we need - the one for; 666/// class (kURLforClass) or the one for namespace (kURLforNameSpace).; 667///; 668/// \param[in] scopeName the name of the class or the namespace; 669/// \param[in] scopeType the enumerator for class or namespace; 670 ; 671static TString UrlGenerator(TString scopeName, EUrl scopeType); 672{; 673 // We start the URL with a static part, the same for all scopes and members.; 674 TString url = ""https://root.cern/doc/"";; 675 // Then we check the ROOT version used.; 676 TPRegexp re4(R""(.*/(v\d)-(\d\d)-00-patches)"");; 677 const char *branchName = gROOT->GetGitBranch();; 678 TObjArray *objarr = re4.MatchS(branchName);; 679 TString version;; 680 // We extract the correct version name for the URL.; 681 if (objarr && objarr->GetEntries() == 3) {; 682 // We have a valid version of ROOT and we will extract the correct name for the URL.; 683 version = ((TObjString *)objarr->At(1))-",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TApplication_8cxx_source.html:23075,guid,guide,23075,doc/master/TApplication_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TApplication_8cxx_source.html,1,['guid'],['guide']
Usability,"browserPad->Update();; // This call tells ROOT to process all pending GUI events; // It allows users to use the TBrowser as usual while the event-loop is running; gSystem->ProcessEvents();; });; ; // Finally, we would like to print a progress bar on the terminal to show how the event-loop is progressing.; // To take into account _all_ events we use `OnPartialResultSlot`: when Implicit Multi-Threading is enabled, in fact,; // `OnPartialResult` invokes the callback only in one of the worker threads, and always returns that worker threads'; // partial result. This is useful because it means we don't have to worry about concurrent execution and; // thread-safety of the callbacks if we are happy with just one threads' partial result.; // `OnPartialResultSlot`, on the other hand, invokes the callback in each one of the worker threads, every time a; // thread finishes processing a batch of `everyN` events. This is what we want for the progress bar, but we need to; // take care that two threads will not print to terminal at the same time: we need a std::mutex for synchronization.; std::string progressBar;; std::mutex barMutex; // Only one thread at a time can lock a mutex. Let's use this to avoid concurrent printing.; // Magic numbers that yield good progress bars for nSlots = 1,2,4,8; const auto everyN = nSlots == 8 ? 1000 : 100ull * nSlots;; const auto barWidth = nEvents / everyN;; h.OnPartialResultSlot(everyN, [&barWidth, &progressBar, &barMutex](unsigned int /*slot*/, TH1D & /*partialHist*/) {; std::lock_guard<std::mutex> l(barMutex); // lock_guard locks the mutex at construction, releases it at destruction; progressBar.push_back('#');; // re-print the line with the progress bar; std::cout << ""\r["" << std::left << std::setw(barWidth) << progressBar << ']' << std::flush;; });; ; // ## Running the analysis; // So far we told RDataFrame what we want to happen during the event-loop, but we have not actually run any of those; // actions: the TBrowser is still empty, the prog",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df013__InspectAnalysis_8C.html:4855,progress bar,progress bar,4855,doc/master/df013__InspectAnalysis_8C.html,https://root.cern,https://root.cern/doc/master/df013__InspectAnalysis_8C.html,1,['progress bar'],['progress bar']
Usability,"bsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooChangeTracker(); Default constructor. RooChangeTracker(const char* name, const char* title, const RooArgSet& trackSet, Bool_t checkValues = kFALSE); Constructor. The set trackSet contains the observables to be; tracked for changes. If checkValues is true an additional; validation step is activated where the numeric values of the; tracked arguments are compared with reference values ensuring; that values have actually changed. RooChangeTracker(const RooChangeTracker& other, const char* name = 0); Copy constructor. Bool_t hasChanged(Bool_t clearState); Returns true if state has changes since last call with clearState=kTRUE; If clearState is true, changeState flag will be cleared. ~RooChangeTracker(); Destructor. RooArgSet parameters() const. TObject* clone(const char* newname) const; { return new RooChangeTracker(*this, newname); }. Double_t evaluate() const; { return 1 ; }. » Last changed: Tue Mar 10 17:15:55 2015 » Last generated: 2015-03-10 17:15; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooChangeTracker.html:37042,clear,clearState,37042,root/html534/RooChangeTracker.html,https://root.cern,https://root.cern/root/html534/RooChangeTracker.html,8,['clear'],"['clearState', 'cleared']"
Usability,"bsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; virtual list<Double_t>*binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(),",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooHistPdf.html:2853,Clear,Clear,2853,root/html532/RooHistPdf.html,https://root.cern,https://root.cern/root/html532/RooHistPdf.html,1,['Clear'],['Clear']
Usability,"bsite The ROOT web site has up to date documentation. The ROOT source code automatically generates this documentation, so each class is explicitly documented on its own web page, which is always up to date with the latest official release of ROOT.; The ROOT Reference Guide web pages can be found at class index reference guide https://root.cern/doc/master/classes.html. Each page contains a class description, and an explanation of each method. It shows the class inheritance tree and lets you jump to the parent class page by clicking on the class name. If you want more details, you can even see the source. There is a help page available in the little box on the upper right hand side of each class documentation page. You can see on the next page what a typical class documentation web page looks like. The ROOT web site also contains in addition to this Reference Guide, “How To’s”, a list of publications and example applications.; 1.7.1 Class Reference Guide; The top of any class reference page lets you jump to different parts of the documentation. The first line links to the class index and the index for the current module (a group of classes, often a library). The second line links to the ROOT homepage and the class overviews. The third line links the source information - a HTML version of the source and header file as well as the CVS (the source management system used for the ROOT development) information of the files. The last line links the different parts of the current pages. Example of function documentation, with automatically generated LaTeX-like graphics. Inheritance tree, showing what the current class derives from, and which classes inherit from it. HTML version of the source file linking all types and most functions. 2 Getting Started; We begin by showing you how to use ROOT interactively. There are two examples to click through and learn how to use the GUI. We continue by using the command line, and explaining the coding conventions, global variables and the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:29284,Guid,Guide,29284,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['Guid'],['Guide']
Usability,"buf, Long64_t pos, Int_t len, Bool_t* free); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tIsActiveThread(); virtual Bool_tTFileCacheRead::IsAsyncReading() const; Bool_tTTreeCache::IsAutoCreated() const; virtual Bool_tTTreeCache::IsEnabled() const; virtual Bool_tTFileCacheRead::IsEnablePrefetching() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTTreeCache::IsLearning() const; Bool_tTObject::IsOnHeap() const; static Bool_tIsParallelUnzip(); Bool_tIsQueueEmpty(); virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTTreeCache::LearnPrefill(); virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTFileCacheRead::Prefetch(Long64_t pos, Int_t len); virtual voidPrint(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual Int_tTTreeCache::ReadBuffer(char* buf, Long64_t pos, Int_t len); virtual Int_tReadBufferExt(char* buf, Long64_t po",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTreeCacheUnzip.html:5794,Learn,LearnPrefill,5794,root/html534/TTreeCacheUnzip.html,https://root.cern,https://root.cern/root/html534/TTreeCacheUnzip.html,1,['Learn'],['LearnPrefill']
Usability,"buf, Long64_t pos, Int_t len, Bool_t* free); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tIsActiveThread(); virtual Bool_tTFileCacheRead::IsAsyncReading() const; Bool_tTTreeCache::IsAutoCreated() const; virtual Bool_tTTreeCache::IsEnabled() const; virtual Bool_tTFileCacheRead::IsEnablePrefetching() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTTreeCache::IsLearning() const; Bool_tTObject::IsOnHeap() const; static Bool_tIsParallelUnzip(); Bool_tIsQueueEmpty(); virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTTreeCache::LearnPrefill(); virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTFileCacheRead::Prefetch(Long64_t pos, Int_t len); virtual voidPrint(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual Int_tTTreeCache::ReadBuffer(char* buf, Long64_t pos, Int_t len); virtual Int_tReadBufferExt(char* buf, Long64_t pos, Int_t len, Int_t& loc); v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTreeCacheUnzip.html:5747,Learn,LearnPrefill,5747,root/html602/TTreeCacheUnzip.html,https://root.cern,https://root.cern/root/html602/TTreeCacheUnzip.html,2,['Learn'],['LearnPrefill']
Usability,"buffers' size; Int_tfModeGroupdisplay mode algorithm group (simple modes-kModeGroupSimple, modes with shading according to light-kModeGroupLight, modes with shading according to channels counts-kModeGroupHeight, modes of combination of shading according to light and to channels counts-kModeGroupLightHeight); Double_tfMxx; Double_tfMxy; Double_tfMyx; Double_tfMyy; TStringTNamed::fNameobject identifier; TColor*fNewColor!; Int_tfNewColorIndex; Int_tfNodesxnumber of nodes in x dimension of grid; Int_tfNodesynumber of nodes in y dimension of grid; Double_tfNuSli; Int_tfPenColorcolor of spectrum; Int_tfPenDashstyle of pen; Int_tfPenWidthwidth of line; Double_tfRainbow1Stepdetermines the first component step for neighbouring color levels, applies only for rainbowed display modes, it does not apply for simple display modes algorithm group; Double_tfRainbow2Stepdetermines the second component step for neighbouring color levels, applies only for rainbowed display modes, it does not apply for simple display modes algorithm group; Double_tfRainbow3Stepdetermines the third component step for neighbouring color levels, applies only for rainbowed display modes, it does not apply for simple display modes algorithm group; Int_tfShadingdetermines whether the picture will shaded, smoothed (no shading, shading), for rainbowed display modes only; Int_tfShadowdetermines whether shadow will be drawn (no shadow, shadow), for rainbowed display modes with shading according to light; TStringTNamed::fTitleobject title; Double_tfTxx; Double_tfTxy; Double_tfTyx; Double_tfTyy; Double_tfTyz; Int_tfViewAnglerotation angle of the view, it can be 0, 90, 180, 270 degrees; Double_tfVx; Double_tfVy; Int_tfXe; Int_tfXlightx position of fictive light source, applies only for rainbowed display modes with shading according to light; Int_tfXmaxx-end channel of spectrum; Int_tfXminx-starting channel of spectrum; Int_tfXs; Int_tfXt; Int_tfYe; Int_tfYlighty position of fictive light source, applies only for rain",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrum2Painter.html:12152,simpl,simple,12152,root/html528/TSpectrum2Painter.html,https://root.cern,https://root.cern/root/html528/TSpectrum2Painter.html,10,['simpl'],['simple']
Usability,"bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. Double_tfConfidenceLevelconfidence level; Double_tfLowerLimitlower interval limit; RooArgSetfParametersset containing the parameter of interest; Double_tfUpperLimitupper interval limit. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SimpleInterval(const char* name = 0); Default constructor. SimpleInterval(const RooStats::SimpleInterval& other, const char* name); fParameters.add( other.fParameters );. operator=(const RooStats::SimpleInterval& other). SimpleInterval(const char* name, const RooRealVar& var, Double_t lower, Double_t upper, Double_t cl); Alternate constructor. ~SimpleInterval(); Destructor. Bool_t IsInInterval(const RooArgSet& ) const. RooArgSet* GetParameters() const; return cloned list of parameters. Bool_t CheckParameters(const RooArgSet& ) const. explicit SimpleInterval(const char* name = 0); default constructors. void SetConfidenceLevel(Double_t ); set the confidence level for the interval. Simple interval is defined at construction time so this function; has no effect. {}. Double_t ConfidenceLevel() const; return the confidence interval. {return fConfidenceLevel;}. Double_t LowerLimit(); return the interval lower limit. {return fLowerLimit;}. Double_t UpperLimit(); return the interval upper limit. {return fUpperLimit;}. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id$ » ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__SimpleInterval.html:6811,Simpl,SimpleInterval,6811,root/html534/RooStats__SimpleInterval.html,https://root.cern,https://root.cern/root/html534/RooStats__SimpleInterval.html,1,['Simpl'],['SimpleInterval']
Usability,"bufsize = 0); Write all objects in this collection. By default all objects in; the collection are written individually (each object gets its; own key). Note, this is recursive, i.e. objects in collections; in the collection are also written individually. To write all; objects using a single key specify a name and set option to; TObject::kSingleKey (i.e. 1). TCollection * GetCurrentCollection(); Return the globally accessible collection. void SetCurrentCollection(); Set this collection to be the globally accesible collection. void StartGarbageCollection(); Set up for garbage collection. void EmptyGarbageCollection(); Do the garbage collection. void GarbageCollect(TObject* obj); Add to the list of things to be cleaned up. void SetOwner(Bool_t enable = kTRUE); Set whether this collection is the owner (enable==true); of its content. If it is the owner of its contents,; these objects will be deleted whenever the collection itself; is delete. The objects might also be deleted or destructed when Clear; is called (depending on the collection). TIter begin() const; { return ++(TIter(this)); }. TIter end() const; { return TIter::End(); }. TCollection(const TCollection& ). void operator=(const TCollection& ). TCollection(); { }. virtual ~TCollection(); { }. void Add(TObject* obj). Int_t Capacity() const; { return fSize; }. void Clear(Option_t* option = """"). Bool_t Contains(const char* name) const; { return FindObject(name) != 0; }. Bool_t Contains(const TObject* obj) const; { return FindObject(obj) != 0; }. void Delete(Option_t* option = """"). Int_t GetEntries() const; { return GetSize(); }. TObject ** GetObjectRef(const TObject* obj) const. Int_t GetSize() const; { return fSize; }. ULong_t Hash() const; { return fName.Hash(); }. Bool_t IsEmpty() const; { return GetSize() <= 0; }. Bool_t IsFolder() const; { return kTRUE; }. Bool_t IsOwner() const; { return TestBit(kIsOwner); }. Bool_t IsSortable() const; { return kTRUE; }. TIterator * MakeIterator(Bool_t dir = kIterForward) cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TCollection.html:14589,Clear,Clear,14589,root/html602/TCollection.html,https://root.cern,https://root.cern/root/html602/TCollection.html,2,['Clear'],['Clear']
Usability,"bufsize = 0); Write all objects in this collection. By default all objects in; the collection are written individually (each object gets its; own key). Note, this is recursive, i.e. objects in collections; in the collection are also written individually. To write all; objects using a single key specify a name and set option to; TObject::kSingleKey (i.e. 1). TCollection * GetCurrentCollection(); Return the globally accessible collection. void SetCurrentCollection(); Set this collection to be the globally accesible collection. void StartGarbageCollection(); Set up for garbage collection. void EmptyGarbageCollection(); Do the garbage collection. void GarbageCollect(TObject* obj); Add to the list of things to be cleaned up. void SetOwner(Bool_t enable = kTRUE); Set whether this collection is the owner (enable==true); of its content. If it is the owner of its contents,; these objects will be deleted whenever the collection itself; is delete. The objects might also be deleted or destructed when Clear; is called (depending on the collection). TIter begin() const; { return ++(TIter(this)); }. TIter end() const; { return TIter::End(); }. void operator=(const TCollection& ). virtual ~TCollection(); { }. void Add(TObject* obj). Int_t Capacity() const; { return fSize; }. void Clear(Option_t* option = """"). Bool_t Contains(const char* name) const; { return FindObject(name) != 0; }. Bool_t Contains(const TObject* obj) const; { return FindObject(obj) != 0; }. void Delete(Option_t* option = """"). Int_t GetEntries() const; { return GetSize(); }. TObject ** GetObjectRef(const TObject* obj) const. Int_t GetSize() const; { return fSize; }. ULong_t Hash() const; { return fName.Hash(); }. Bool_t IsEmpty() const; { return GetSize() <= 0; }. Bool_t IsFolder() const; { return kTRUE; }. Bool_t IsOwner() const; { return TestBit(kIsOwner); }. Bool_t IsSortable() const; { return kTRUE; }. TIterator * MakeIterator(Bool_t dir = kIterForward) const. TIterator * MakeReverseIterator() const; { return M",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TCollection.html:13998,Clear,Clear,13998,root/html534/TCollection.html,https://root.cern,https://root.cern/root/html534/TCollection.html,1,['Clear'],['Clear']
Usability,"bufsize = 0); Write all objects in this collection. By default all objects in; the collection are written individually (each object gets its; own key). Note, this is recursive, i.e. objects in collections; in the collection are also written individually. To write all; objects using a single key specify a name and set option to; TObject::kSingleKey (i.e. 1). TCollection * GetCurrentCollection(); Return the globally accessible collection. void SetCurrentCollection(); Set this collection to be the globally accesible collection. void StartGarbageCollection(); Set up for garbage collection. void EmptyGarbageCollection(); Do the garbage collection. void GarbageCollect(TObject* obj); Add to the list of things to be cleaned up. void SetOwner(Bool_t enable = kTRUE); Set whether this collection is the owner (enable==true); of its content. If it is the owner of its contents,; these objects will be deleted whenever the collection itself; is delete. The objects might also be deleted or destructed when Clear; is called (depending on the collection). void operator=(const TCollection& ). virtual ~TCollection(); { }. void Add(TObject* obj). Int_t Capacity() const; { return fSize; }. void Clear(Option_t* option = """"). Bool_t Contains(const char* name) const; { return FindObject(name) != 0; }. Bool_t Contains(const TObject* obj) const; { return FindObject(obj) != 0; }. void Delete(Option_t* option = """"). Int_t GetEntries() const; { return GetSize(); }. TObject ** GetObjectRef(const TObject* obj) const. Int_t GetSize() const; { return fSize; }. ULong_t Hash() const; { return fName.Hash(); }. Bool_t IsEmpty() const; { return GetSize() <= 0; }. Bool_t IsFolder() const; { return kTRUE; }. Bool_t IsOwner() const; { return TestBit(kIsOwner); }. Bool_t IsSortable() const; { return kTRUE; }. TIterator * MakeIterator(Bool_t dir = kIterForward) const. TIterator * MakeReverseIterator() const; { return MakeIterator(kIterBackward); }. TObject * Remove(TObject* obj). void RemoveAll(TCollection* col)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TCollection.html:13942,Clear,Clear,13942,root/html532/TCollection.html,https://root.cern,https://root.cern/root/html532/TCollection.html,1,['Clear'],['Clear']
Usability,"bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual Bool_tTFormula::CheckOperands(Int_t operation, Int_t& err); virtual Bool_tTFormula::CheckOperands(Int_t leftoperand, Int_t rightoperartion, Int_t& err); voidTFormula::ClearFormula(Option_t* option = """"); virtual voidTFormula::Convert(UInt_t fromVersion); virtual Double_tDefinedValue(Int_t code); Int_tDefinedVariable(TString& name); virtual Int_tDefinedVariable(TString& name, int& action); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; Double_tTFormula::EvalParFast(const Double_t* x, const Double_t* params); Double_tTFormula::EvalPrimitive(const Double_t* x, const Double_t* params); Double_tTFormula::EvalPrimitive0(const Double_t* x, const Double_t* params); Double_tTFormula::EvalPrimitive1(const Double_t* x, const Double_t* params); Double_tTFormula::EvalPrimitive2(const Double_t* x, const Double_t* params); Double_tTFormula::EvalPrimitive3(const Double_t* x, const Double_t* params); Double_tTFormula::EvalPrimitive4(const Double_t* x, const Double_t* params); Short_tTFormula::GetAction(Int_t code) const; Short_tTFormula::GetActionOptimized(Int_t code) const; Int_tTFormula::GetActionParam(Int_t code) const; Int_tTFormula::GetActionParamOptimized(Int_t code) const; Int_t*TFormula::GetOper() const; Int_t*TFormula::GetOperOptimized() const; voidinitCopy(const RooFormula& other); virtual Bool_tTFormula::IsString(Int_t oper) const; voidTFormula::MakePrimitive(const char* expr, Int_t pos); voidTObject::MakeZombie(); RooFormula&operator=(const RooFormula& other); Int_tTFormula::PreCompile(); voidTFormula::SetAction(Int_t code, Int_t value, Int_t param = 0); voidTFormula::SetActionOptimized(Int_t code, Int_t value, Int_t param = 0); virtual Bool_tTFormula::StringToNumber(Int_t code). Data Members; public:. enum TFormula::[unnamed] { kEnd; kAdd; kSubstract; kMultiply; kDivide; kModulo; kcos; ksin; kta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooFormula.html:9184,Clear,ClearFormula,9184,root/html532/RooFormula.html,https://root.cern,https://root.cern/root/html532/RooFormula.html,2,['Clear'],['ClearFormula']
Usability,"bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual Bool_tTFormula::CheckOperands(Int_t operation, Int_t& err); virtual Bool_tTFormula::CheckOperands(Int_t leftoperand, Int_t rightoperartion, Int_t& err); voidTFormula::ClearFormula(Option_t* option = """"); virtual voidTFormula::Convert(UInt_t fromVersion); virtual Double_tDefinedValue(Int_t code); Int_tDefinedVariable(TString& name); virtual Int_tDefinedVariable(TString& name, int& action); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; Double_tTFormula::EvalParFast(const Double_t* x, const Double_t* params); Double_tTFormula::EvalPrimitive(const Double_t* x, const Double_t* params); Double_tTFormula::EvalPrimitive0(const Double_t* x, const Double_t* params); Double_tTFormula::EvalPrimitive1(const Double_t* x, const Double_t* params); Double_tTFormula::EvalPrimitive2(const Double_t* x, const Double_t* params); Double_tTFormula::EvalPrimitive3(const Double_t* x, const Double_t* params); Double_tTFormula::EvalPrimitive4(const Double_t* x, const Double_t* params); Short_tTFormula::GetAction(Int_t code) const; Short_tTFormula::GetActionOptimized(Int_t code) const; Int_tTFormula::GetActionParam(Int_t code) const; Int_tTFormula::GetActionParamOptimized(Int_t code) const; Int_t*TFormula::GetOper() const; Int_t*TFormula::GetOperOptimized() const; voidinitCopy(const RooFormula& other); virtual Bool_tTFormula::IsString(Int_t oper) const; voidTFormula::MakePrimitive(const char* expr, Int_t pos); voidTObject::MakeZombie(); RooFormula&operator=(const RooFormula& other); Int_tTFormula::PreCompile(); voidTFormula::SetAction(Int_t code, Int_t value, Int_t param = 0); voidTFormula::SetActionOptimized(Int_t code, Int_t value, Int_t param = 0); virtual Bool_tTFormula::StringToNumber(Int_t code). Data Members; public:. static RooPrintable::ContentsOptionRooPrintable::kAddress; static RooPrintable::ContentsOptionR",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooFormula.html:9273,Clear,ClearFormula,9273,root/html602/RooFormula.html,https://root.cern,https://root.cern/root/html602/RooFormula.html,1,['Clear'],['ClearFormula']
Usability,"bufsize = 32000); TBranch*TTree::Branch(const char* name, int address, const char* leaflist, Int_t bufsize = 32000); TBranch*TTree::Branch(const char* name, void** obj, Int_t bufsize = 32000, Int_t splitlevel = 99); TBranch*TTree::Branch(const char* name, const char* classname, void** obj, Int_t bufsize = 32000, Int_t splitlevel = 99); virtual TBranch*TTree::BranchOld(const char* name, const char* classname, void* addobj, Int_t bufsize = 32000, Int_t splitlevel = 1); virtual TBranch*TTree::BranchRef(); virtual TBranch*TTree::Bronch(const char* name, const char* classname, void* addobj, Int_t bufsize = 32000, Int_t splitlevel = 99); virtual voidTTree::Browse(TBrowser*); virtual Int_tTTree::BuildIndex(const char* majorname, const char* minorname = ""0""); TStreamerInfo*TTree::BuildStreamerInfo(TClass* cl, void* pointer = 0, Bool_t canOptimize = kTRUE); virtual TFile*TTree::ChangeFile(TFile* file); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual TTree*TTree::CloneTree(Long64_t nentries = -1, Option_t* option = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTTree::CopyAddresses(TTree*, Bool_t undo = kFALSE); virtual Long64_tTTree::CopyEntries(TTree* tree, Long64_t nentries = -1, Option_t* option = """"); virtual TTree*TTree::CopyTree(const char* selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); virtual TBasket*TTree::CreateBasket(TBranch*); Int_tTTree::Debug() const; virtual voidTTree::Delete(Option_t* option = """")MENU ; virtual voidTTree::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTTree::Draw(Option_t* opt); virtual Long64_tTTree::Draw(const char* vare",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/THbookTree.html:3591,Clear,Clear,3591,root/html532/THbookTree.html,https://root.cern,https://root.cern/root/html532/THbookTree.html,1,['Clear'],['Clear']
Usability,building. void ChangeTextColor(TGTextButton* ); Change text color via color selection dialog. This method is activated; via context menu during guibuilding. void ChangePicture(TGPictureButton* ); Invoke file dialog to assign a new picture.; This method is activated via context menu during guibuilding. void ChangeBackgroundColor(TGCanvas* ); Change background color via context menu. void ChangeBackgroundColor(TGComboBox* ); Change background color for list box entries. This method is invoked; via context menu during guibuilding. void ChangeProperties(TGLabel* ); Edit properties via font selection dialog. This method is activated; via context menu during guibuilding. void ChangeTextColor(TGLabel* ); Change text color via color selection dialog. This method is activated; via context menu during guibuilding. void ChangeBackgroundColor(TGListBox* ); Set background color for list box entries. This method is invoked; via context menu during guibuilding. void ChangeBarColor(TGProgressBar* ); Set progress bar color via TGColorDialog.; This method is activated via context menu during guibuilding. void ChangeTextColor(TGProgressBar* ); Change text color which displays position. void ChangeTextColor(TGTextEntry* ); Set text color. This method is invoked; via context menu during guibuilding. void ChangeTextFont(TGTextEntry* ); Change text font via font selection dialog. This method is activated; via context menu during guibuilding. void ChangeImage(TGIcon* ); Invoke file dialog to assign a new image.; This method is activated via context menu during guibuilding. void SetLassoDrawn(Bool_t on); Set lasso drawn flag. Bool_t IsEditDisabled(TGWindow* f) const; { return (f && (f->GetEditDisabled() & kEditDisable)); }. Bool_t IsGrabDisabled(TGWindow* f) const; { return (f && (f->GetEditDisabled() & kEditDisableGrab)); }. Bool_t IsEventsDisabled(TGWindow* f) const; { return (f && (f->GetEditDisabled() & kEditDisableEvents)); }. Bool_t IsFixedLayout(TGWindow* f) const; { return (f && (f-,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGuiBldDragManager.html:34500,progress bar,progress bar,34500,root/html528/TGuiBldDragManager.html,https://root.cern,https://root.cern/root/html528/TGuiBldDragManager.html,10,['progress bar'],['progress bar']
Usability,"butes() const; virtual list<Double_t>*RooAbsReal::binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tcanBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidclearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsPdf.html:6525,clear,clearShapeDirty,6525,root/html532/RooAbsPdf.html,https://root.cern,https://root.cern/root/html532/RooAbsPdf.html,1,['clear'],['clearShapeDirty']
Usability,"bwindow-mode, clip-x-origin, clip-y-origin, and clip-mask.; GC mode-dependent components: foreground, background, tile, stipple,; tile-stipple-x-origin, and tile-stipple-y-origin.; (see also the GCValues_t structure). Int_t TextWidth(FontStruct_t font, const char* s, Int_t len); Return lenght of the string ""s"" in pixels. Size depends on font. void GetFontProperties(FontStruct_t font, Int_t& max_ascent, Int_t& max_descent); Returns the font properties. void GetGCValues(GContext_t gc, GCValues_t& gval); Returns the components specified by the mask in ""gval"" for the; specified GC ""gc"" (see also the GCValues_t structure). FontStruct_t GetFontStruct(FontH_t fh); Retrieves the associated font structure of the font specified font; handle ""fh"". Free returned FontStruct_t using FreeFontStruct(). void FreeFontStruct(FontStruct_t fs); Frees the font structure ""fs"". The font itself will be freed when; no other resource references it. void ClearWindow(Window_t id); Clears the entire area in the specified window and it is equivalent to; ClearArea(id, 0, 0, 0, 0). Int_t KeysymToKeycode(UInt_t keysym); Converts the ""keysym"" to the appropriate keycode. For example,; keysym is a letter and keycode is the matching keyboard key (which; is dependend on the current keyboard mapping). If the specified; ""keysym"" is not defined for any keycode, returns zero. void FillRectangle(Drawable_t id, GContext_t gc, Int_t x, Int_t y, UInt_t w, UInt_t h); Fills the specified rectangle defined by [x,y] [x+w,y] [x+w,y+h] [x,y+h].; using the GC you specify. GC components in use are: function, plane-mask, fill-style,; subwindow-mode, clip-x-origin, clip-y-origin, clip-mask.; GC mode-dependent components: foreground, background, tile, stipple,; tile-stipple-x-origin, and tile-stipple-y-origin.; (see also the GCValues_t structure). void DrawRectangle(Drawable_t id, GContext_t gc, Int_t x, Int_t y, UInt_t w, UInt_t h); Draws rectangle outlines of [x,y] [x+w,y] [x+w,y+h] [x,y+h]. GC components in use: functio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TVirtualX.html:53361,Clear,ClearWindow,53361,root/html532/TVirtualX.html,https://root.cern,https://root.cern/root/html532/TVirtualX.html,3,['Clear'],"['ClearArea', 'ClearWindow', 'Clears']"
Usability,"bwindow-mode, clip-x-origin, clip-y-origin, and clip-mask.; GC mode-dependent components: foreground, background, tile, stipple,; tile-stipple-x-origin, and tile-stipple-y-origin.; (see also the GCValues_t structure). Int_t TextWidth(FontStruct_t font, const char* s, Int_t len); Return length of the string ""s"" in pixels. Size depends on font. void GetFontProperties(FontStruct_t font, Int_t& max_ascent, Int_t& max_descent); Returns the font properties. void GetGCValues(GContext_t gc, GCValues_t& gval); Returns the components specified by the mask in ""gval"" for the; specified GC ""gc"" (see also the GCValues_t structure). FontStruct_t GetFontStruct(FontH_t fh); Retrieves the associated font structure of the font specified font; handle ""fh"". Free returned FontStruct_t using FreeFontStruct(). void FreeFontStruct(FontStruct_t fs); Frees the font structure ""fs"". The font itself will be freed when; no other resource references it. void ClearWindow(Window_t id); Clears the entire area in the specified window and it is equivalent to; ClearArea(id, 0, 0, 0, 0). Int_t KeysymToKeycode(UInt_t keysym); Converts the ""keysym"" to the appropriate keycode. For example,; keysym is a letter and keycode is the matching keyboard key (which; is dependend on the current keyboard mapping). If the specified; ""keysym"" is not defined for any keycode, returns zero. void FillRectangle(Drawable_t id, GContext_t gc, Int_t x, Int_t y, UInt_t w, UInt_t h); Fills the specified rectangle defined by [x,y] [x+w,y] [x+w,y+h] [x,y+h].; using the GC you specify. GC components in use are: function, plane-mask, fill-style,; subwindow-mode, clip-x-origin, clip-y-origin, clip-mask.; GC mode-dependent components: foreground, background, tile, stipple,; tile-stipple-x-origin, and tile-stipple-y-origin.; (see also the GCValues_t structure). void DrawRectangle(Drawable_t id, GContext_t gc, Int_t x, Int_t y, UInt_t w, UInt_t h); Draws rectangle outlines of [x,y] [x+w,y] [x+w,y+h] [x,y+h]. GC components in use: functio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TVirtualX.html:56806,Clear,ClearWindow,56806,root/html602/TVirtualX.html,https://root.cern,https://root.cern/root/html602/TVirtualX.html,3,['Clear'],"['ClearArea', 'ClearWindow', 'Clears']"
Usability,"by a warning message issued by M when running into troubles. Problems can be:. a bug in M; an error in the \(\mbox{FCN}\); a highly difficult problem (usually strong correlations among parameters); floating–point precision. 4.5 The output from minimization; 4.5.1 The FunctionMinimum; The output of the minimizers is the FunctionMinimum. The FunctionMinimum contains the result of the minimization in both internal parameter representation and external parameter representation.; 4.5.2 User representable format: MnUserParameterState; On request, the result of the minimization is transformed into a user representable format for parameters and errors, the MnUserParameterState.; 4.5.3 Access values, errors, covariance; The result can be accessed via methods like MnUserParameterState::value(unsigned int n) and MnUserParameterState::error(unsigned int n), where \(n\) is the index of the parameter in the list of parameters defined by the user.; 4.5.4 Printout of the result; The FunctionMinimum can be printed on the output simply via std::cout. It will print both the internal and external state, that is parameters, errors and the covariance matrix (if available). It also tells the user if M did converge or not by issuing an appropriate message. If a covariance matrix is available, the global correlation coefficients are printed as well.; 4.5.5 Global correlation coefficients; The global correlation coefficient for parameter \(n\) is a number between zero and one which gives the correlation between parameter \(n\) and that linear combination of all other parameters which is most strongly correlated with \(n\).; 5 M application programming interface (API); [api:api]; 5.1 FunctionMinimum; [api:fm] The FunctionMinimum is the output of the minimizers and contains the minimization result. The state at the minimum is available both in internal and external representations. For the external representations the return methods. FunctionMinimum::userState(),; FunctionMinimum::userParamete",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/minuit2/Minuit2.html:37602,simpl,simply,37602,root/htmldoc/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/htmldoc/guides/minuit2/Minuit2.html,2,['simpl'],['simply']
Usability,"by default) is used otherwise linear one. Int_t CountKeys() const. Counts the number of different key values. Bool_t FillIndexArray(). File the array of the pointers and check whether; the original table has been sorted to avoid an extra job. Return: kTRUE - the table has been sorted; kFALSE - otherwise. Int_t FindFirstKey(const void* key) const. Looks for the first index of the ""key""; within SORTED table AFTER sorting. Returns: = -1 if the ""key"" was not found. Note: This method has no sense for; ==== the float and double key. To get the index within the original; unsorted table the GetIndex() method; may be used like this:; GetIndex(FindFirstKey(key)). const char * GetTableName() const; to be documented. const char * GetTableTitle() const; to be documented. const char * GetTableType() const; to be documented. TTable * GetTable() const; to be documented. void SetSearchMethod(); Select search function at once. void QSort(); Call the standard C run-time library ""qsort"" function. void LearnTable(). LearnTable() allows the TTableSorter to learn the structure of the; tables used to fill the ntuple.; table - the name of the table; buildTree - if kTRUE, then add TBranches to the TTree for each table; column (default=kFALSE). const char * At(Int_t i) const; {return fFirstParentRow + i*fParentRowSize;}. Long_t GetRowSize(); { return fParentRowSize; }. Int_t operator[](Int_t value) const; { return BSearch(value); }. Int_t operator[](Long_t value) const; { return BSearch(value); }. Int_t operator[](Double_t value) const; { return BSearch(value); }. Int_t operator[](void* value) const; { return BSearch(value); }. Int_t operator()(Float_t value); { return BinarySearch(value); }. Int_t operator()(Int_t value); { return BinarySearch(value); }. Int_t operator()(Long_t value); { return BinarySearch(value); }. Int_t operator()(Double_t value); { return BinarySearch(value); }. TTableSorter(const TTableSorter& ). TTableSorter & operator=(const TTableSorter& ). int CompareFloat_t(const v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTableSorter.html:19233,Learn,LearnTable,19233,root/html534/TTableSorter.html,https://root.cern,https://root.cern/root/html534/TTableSorter.html,3,['Learn'],['LearnTable']
Usability,"by default) is used otherwise linear one. Int_t CountKeys() const. Counts the number of different key values. Bool_t FillIndexArray(). File the array of the pointers and check whether; the original table has been sorted to avoid an extra job. Return: kTRUE - the table has been sorted; kFALSE - otherwise. Int_t FindFirstKey(const void* key) const. Looks for the first index of the ""key""; within SORTED table AFTER sorting. Returns: = -1 if the ""key"" was not found. Note: This method has no sense for; ==== the float and double key. To get the index within the original; unsorted table the GetIndex() method; may be used like this:; GetIndex(FindFirstKey(key)). const char * GetTableName() const; to be documented. const char * GetTableTitle() const; to be documented. const char * GetTableType() const; to be documented. TTable * GetTable() const; to be documented. void SetSearchMethod(); Select search function at once. void QSort(); Call the standard C run-time library ""qsort"" function. void LearnTable(). LearnTable() allows the TTableSorter to learn the structure of the; tables used to fill the ntuple.; table - the name of the table; buildTree - if kTRUE, then add TBranches to the TTree for each table; column (default=kFALSE). const char * At(Int_t i) const; {return fFirstParentRow + i*fParentRowSize;}. Long_t GetRowSize(); { return fParentRowSize; }. Int_t operator[](Int_t value) const; { return BSearch(value); }. Int_t operator[](Long_t value) const; { return BSearch(value); }. Int_t operator[](Double_t value) const; { return BSearch(value); }. Int_t operator[](void* value) const; { return BSearch(value); }. Int_t operator()(Float_t value); { return BinarySearch(value); }. Int_t operator()(Int_t value); { return BinarySearch(value); }. Int_t operator()(Long_t value); { return BinarySearch(value); }. Int_t operator()(Double_t value); { return BinarySearch(value); }. int CompareFloat_t(const void** , const void** ). int CompareInt_t(const void** , const void** ). int CompareL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TTableSorter.html:19204,Learn,LearnTable,19204,root/html532/TTableSorter.html,https://root.cern,https://root.cern/root/html532/TTableSorter.html,1,['Learn'],['LearnTable']
Usability,"by having to manually specify the value and shape server properties, it is very easy to get them wrong.; If you want to safely replace a server, you should use RooAbsArg::redirectServers(), which replaces the server in-place at the same position of the server list, keeps the same value and shape server properties, and also updates the corresponding proxies. ; Definition at line 421 of file RooAbsArg.cxx. ◆ resetDataToken(). void RooAbsArg::resetDataToken ; (; ). inline . Definition at line 681 of file RooAbsArg.h. ◆ serverNameChangeHook(). virtual void RooAbsArg::serverNameChangeHook ; (; const RooAbsArg * ; , . const RooAbsArg * ;  . ). inlinevirtual . Definition at line 248 of file RooAbsArg.h. ◆ servers(). const RefCountList_t & RooAbsArg::servers ; (; ); const. inline . List of all servers of this object. ; Definition at line 180 of file RooAbsArg.h. ◆ setAttribute(). void RooAbsArg::setAttribute ; (; const Text_t * ; name, . bool ; value = true . ). Set (default) or clear a named boolean attribute of this object. ; Definition at line 222 of file RooAbsArg.cxx. ◆ setCacheAndTrackHints(). virtual void RooAbsArg::setCacheAndTrackHints ; (; RooArgSet & ; ). inlinevirtual . Reimplemented in RooLagrangianMorphFunc, RooAbsAnaConvPdf, RooAddPdf, RooProdPdf, RooProduct, RooRealSumFunc, and RooRealSumPdf.; Definition at line 385 of file RooAbsArg.h. ◆ setCachedValue(). virtual void RooAbsArg::setCachedValue ; (; double ; , . bool ; = true . ). inlinevirtual . Overwrite the current value stored in this object, making it look like this object computed that value. ; recompute their values. ; Reimplemented in RooAbsCategory, and RooAbsReal.; Definition at line 481 of file RooAbsArg.h. ◆ setDataToken(). void RooAbsArg::setDataToken ; (; std::size_t ; index). Sets the token for retrieving results in the BatchMode. For internal use only. ; Definition at line 2555 of file RooAbsArg.cxx. ◆ setDirtyInhibit(). void RooAbsArg::setDirtyInhibit ; (; bool ; flag). static . Control globa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsArg.html:95818,clear,clear,95818,doc/master/classRooAbsArg.html,https://root.cern,https://root.cern/doc/master/classRooAbsArg.html,1,['clear'],['clear']
Usability,"by ‘@’ (e.g. “@out”) if one wants to normalize the corresponding value. Also, if the string ends with ‘!’, output neurons are set up for classification, i.e. with a sigmoid (1 neuron) or softmax (more neurons) activation function.; Many questions on the good usage of neural network, including rules of dumb to determine the best network topology are addressed at ftp://ftp.sas.com/pub/neural/FAQ.html; // a simple network: 2 inputs, 10 hidden and 1 normalized; // output neuron; TMultiLayerPerceptron network(""r,z:10:@Br"",tree);; Expressions are evaluated as for TTree::Draw(). Input and outputs are taken from the TTree associated with the network. This TTree can be given as argument of the constructor or defined later with TMultiLayerPerceptron::SetData(). Events can also be weighted. The weight expression can be given in the constructor or set later with the method SetWeight() of the class TMultiLayerPerceptron. Two datasets must be defined before learning the network: a training dataset that is used when minimizing the error, and a test dataset that will avoid bias. Those two datasets can be built aside and then given to the network, or can be built from a standard expression. By default, half of the events are put in both datasets.; // a more complex 4:8:1 network; // the ptsumf branch is used as weigh;; // default event lists are explicit; TMultiLayerPerceptron network(""m,pt,acol,acopl:8:type"",""pt"",tree,; ""Entry$%2"",""Entry$/2"");; The method TMultiLayerPerceptron::SetLearningMethod() defines the learning method. Learning methods are:; TMultiLayerPerceptron::kStochastic,; TMultiLayerPerceptron::kBatch,; TMultiLayerPerceptron::kSteepestDescent,; TMultiLayerPerceptron::kRibierePolak,; TMultiLayerPerceptron::kFletcherReeves,; TMultiLayerPerceptron::kBFGS // default; The training can start with TMultiLayerPerceptron::Train(Int_t nepoch,Option_t* options). The first argument is the number of epochs while option is a string that can contain “text” (simple text output), “grap",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:236020,learn,learning,236020,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['learn'],['learning']
Usability,"bytes (treated as unsigned char values,; so that `\200' is greater than `\0', for example). Zero-length; strings are always identical. Int_t CountChar(Int_t c) const; Return number of times character c occurs in the string. TString Copy() const; Copy a string. Ssiz_t First(char c) const; Find first occurrence of a character c. Ssiz_t First(const char* cs) const; Find first occurrence of a character in cs. UInt_t HashCase() const; Return a case-sensitive hash value (endian independent). UInt_t HashFoldCase() const; Return a case-insensitive hash value (endian independent). UInt_t Hash(TString::ECaseCompare cmp = kExact) const; Return hash value. UInt_t Hash(const void* txt, Int_t ntxt); Calculates hash index from any char string. (static function); For string: i = TString::Hash(string,nstring);; For int: i = TString::Hash(&intword,sizeof(int));; For pointer: i = TString::Hash(&pointer,sizeof(void*));. This employs two different hash functions, depending on ntxt:; ntxt == sizeof(void*): a simple bitwise xor to get fast pointer hashes; else: MurmurHash3_x64_128 http://code.google.com/p/smhasher. Ssiz_t Index(const char* pat, Ssiz_t patlen, Ssiz_t i, TString::ECaseCompare cmp) const; Search for a string in the TString. Plen is the length of pattern,; startIndex is the index from which to start and cmp selects the type; of case-comparison. Ssiz_t Last(char c) const; Find last occurrence of a character c. TString MD5() const; Return the MD5 digest for this string, in a string representation. Bool_t MaybeRegexp() const; Returns true if string contains one of the regexp characters ""^$.[]*+?"". Bool_t MaybeWildcard() const; Returns true if string contains one of the wildcard characters ""[]*?"". TString& Prepend(char c, Ssiz_t rep = 1); Prepend character c rep times to string. TString & Replace(Ssiz_t pos, Ssiz_t n, const char* s, Ssiz_t ns); Remove at most n1 characters from self beginning at pos,; and replace them with the first n2 characters of cs. TString& ReplaceAll(const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TString.html:11697,simpl,simple,11697,root/html534/TString.html,https://root.cern,https://root.cern/root/html534/TString.html,6,['simpl'],['simple']
Usability,"c Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; Float_t*TAttBBox::AssertBBox(); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidTPointSet3D::ClearIds(); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEvePointSet*CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidClonePoints(const TEvePointSet& e); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTPointSet3D::ComputeBBox(); Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiv",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TEvePointSet.html:3238,Clear,Clear,3238,root/html532/TEvePointSet.html,https://root.cern,https://root.cern/root/html532/TEvePointSet.html,4,['Clear'],['Clear']
Usability,"c Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; Float_t*TAttBBox::AssertBBox(); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidTPointSet3D::ClearIds(); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEvePointSet*TEvePointSet::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEvePointSet::ClonePoints(const TEvePointSet& e); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidComputeBBox(); Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TEveTrack.html:2709,Clear,Clear,2709,root/html532/TEveTrack.html,https://root.cern,https://root.cern/root/html532/TEveTrack.html,1,['Clear'],['Clear']
Usability,"c Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; Float_t*TAttBBox::AssertBBox(); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidTPointSet3D::ClearIds(); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEvePointSet*TEvePointSet::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEvePointSet::ClonePoints(const TEvePointSet& e); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTEveTrack::ComputeBBox(); Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TEveTrackProjected.html:2519,Clear,Clear,2519,root/html532/TEveTrackProjected.html,https://root.cern,https://root.cern/root/html532/TEveTrackProjected.html,1,['Clear'],['Clear']
Usability,"c Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; Float_t*TAttBBox::AssertBBox(); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidTPointSet3D::ClearIds(); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEvePointSet*TEvePointSet::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEvePointSet::ClonePoints(const TEvePointSet& e); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTPointSet3D::ComputeBBox(); Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TEveLine.html:2582,Clear,Clear,2582,root/html532/TEveLine.html,https://root.cern,https://root.cern/root/html532/TEveLine.html,6,['Clear'],['Clear']
Usability,"c Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TQUndoManager(); Constructor. ~TQUndoManager(); Destructor. void ls(Option_t* option = """") const; Lists all commands in stack. void PrintCollectionEntry(TObject* entry, Option_t* option, Int_t recurse) const; Print collection entry. void SetLogging(Bool_t on = kTRUE); Start logging. Delete all previous log records; Note: logging is not implemented yet. void Add(TObject* obj, Option_t* opt); Add command to the stack of commands.; Command's redo action will be executed. option string can contain the following substrings:; ""merge"" - input command will be merged; ""compress"" - input command will be compressed. void CurrentChanged(TQCommand* c); emit signal. void Undo(Option_t* option = """"); Performs undo action. Move cursor position backward in history stack. void Redo(Option_t* option = """"); Performs redo action. Move cursor position forward in history stack. Bool_t CanRedo() const; Returns kTRUE if redo action is possible. Bool_t CanUndo() const; Returns kTRUE if undo action is possible. Bool_t IsLogging() const; Returns kTRUE if logging is ON. TQCommand * GetCurrent() const; Returns the last executed command. TQCommand * GetCursor() const; Returns a command correspondent to the current cursor position in stack. void SetLimit(UInt_t limit); Returns a maximum number of commands which could be located in stack. UInt_t GetLimit() const; Returns a maximum number of commands which could be located in stack. void Add(TObject* obj, Option_t* opt). » Author: Valeriy Onuchin 04/27/2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TQCommand.h 25128 2008-08-12 17:59:19Z pcanal $ » Last generated: 2010-09-23 20:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TQUndoManager.html:19453,undo,undo,19453,root/html528/TQUndoManager.html,https://root.cern,https://root.cern/root/html528/TQUndoManager.html,1,['undo'],['undo']
Usability,"c Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TQUndoManager(); Constructor. ~TQUndoManager(); Destructor. void ls(Option_t* option = """") const; Lists all commands in stack. void PrintCollectionEntry(TObject* entry, Option_t* option, Int_t recurse) const; Print collection entry. void SetLogging(Bool_t on = kTRUE); Start logging. Delete all previous log records; Note: logging is not implemented yet. void Add(TObject* obj, Option_t* opt); Add command to the stack of commands.; Command's redo action will be executed. option string can contain the following substrings:; ""merge"" - input command will be merged; ""compress"" - input command will be compressed. void CurrentChanged(TQCommand* c); emit signal. void Undo(Option_t* option = """"); Performs undo action. Move cursor position backward in history stack. void Redo(Option_t* option = """"); Performs redo action. Move cursor position forward in history stack. Bool_t CanRedo() const; Returns kTRUE if redo action is possible. Bool_t CanUndo() const; Returns kTRUE if undo action is possible. Bool_t IsLogging() const; Returns kTRUE if logging is ON. TQCommand * GetCurrent() const; Returns the last executed command. TQCommand * GetCursor() const; Returns a command correspondent to the current cursor position in stack. void SetLimit(UInt_t limit); Returns a maximum number of commands which could be located in stack. UInt_t GetLimit() const; Returns a maximum number of commands which could be located in stack. void Add(TObject* obj, Option_t* opt). » Author: Valeriy Onuchin 04/27/2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TQCommand.h 39365 2011-05-24 19:53:19Z pcanal $ » Last generated: 2011-07-04 15:36; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TQUndoManager.html:19637,undo,undo,19637,root/html530/TQUndoManager.html,https://root.cern,https://root.cern/root/html530/TQUndoManager.html,1,['undo'],['undo']
Usability,"c Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TQUndoManager(); Constructor. ~TQUndoManager(); Destructor. void ls(Option_t* option = """") const; Lists all commands in stack. void PrintCollectionEntry(TObject* entry, Option_t* option, Int_t recurse) const; Print collection entry. void SetLogging(Bool_t on = kTRUE); Start logging. Delete all previous log records; Note: logging is not implemented yet. void Add(TObject* obj, Option_t* opt); Add command to the stack of commands.; Command's redo action will be executed. option string can contain the following substrings:; ""merge"" - input command will be merged; ""compress"" - input command will be compressed. void CurrentChanged(TQCommand* c); emit signal. void Undo(Option_t* option = """"); Performs undo action. Move cursor position backward in history stack. void Redo(Option_t* option = """"); Performs redo action. Move cursor position forward in history stack. Bool_t CanRedo() const; Returns kTRUE if redo action is possible. Bool_t CanUndo() const; Returns kTRUE if undo action is possible. Bool_t IsLogging() const; Returns kTRUE if logging is ON. TQCommand * GetCurrent() const; Returns the last executed command. TQCommand * GetCursor() const; Returns a command correspondent to the current cursor position in stack. void SetLimit(UInt_t limit); Returns a maximum number of commands which could be located in stack. UInt_t GetLimit() const; Returns a maximum number of commands which could be located in stack. void Add(TObject* obj, Option_t* opt). » Author: Valeriy Onuchin 04/27/2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TQCommand.h 39365 2011-05-24 19:53:19Z pcanal $ » Last generated: 2011-11-03 20:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TQUndoManager.html:19637,undo,undo,19637,root/html532/TQUndoManager.html,https://root.cern,https://root.cern/root/html532/TQUndoManager.html,2,['undo'],['undo']
Usability,"c Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoPconEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for polycone editor. ~TGeoPconEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to a given pcon. void CreateSections(Int_t inew); Change dynamically the number of sections. Bool_t CheckSections(Bool_t change = kFALSE); Check validity of sections. void UpdateSections(); Update sections according fShape. Bool_t IsDelayed() const; Check if shape drawing is delayed. void DoName(); Perform name change. void DoApply(); Slot for applying modifications. void DoSectionChange(Int_t i); Change parameters of section isect;. void DoNz(); Change number of sections. void DoPhi(); Change phi range. void DoModified(); Slot for signaling modifications. void DoUndo(); Slot for undoing last operation. void CreateEdges(); {;}. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id$ » Last generated: 2015-03-14 16:39; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoPconEditor.html:22092,undo,undoing,22092,root/html534/TGeoPconEditor.html,https://root.cern,https://root.cern/root/html534/TGeoPconEditor.html,2,['undo'],['undoing']
Usability,"c Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoParaEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for para editor. ~TGeoParaEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the selected object. Bool_t IsDelayed() const; Check if shape drawing is delayed. void DoName(); Slot for name. void DoApply(); Slot for applying current settings. void DoModified(); Slot for notifying modifications. void DoUndo(); Slot for undoing last operation. void DoX(); Slot for X. void DoY(); Slot for Y. void DoZ(); Slot for Z. void DoAlpha(); Slot for alpha. void DoTheta(); Slot for theta. void DoPhi(); Slot for phi. TGeoParaEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()). » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id$ » Last generated: 2015-06-02 16:02; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGeoParaEditor.html:22309,undo,undoing,22309,root/html604/TGeoParaEditor.html,https://root.cern,https://root.cern/root/html604/TGeoParaEditor.html,2,['undo'],['undoing']
Usability,"c Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoParaEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for para editor. ~TGeoParaEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the selected object. Bool_t IsDelayed() const; Check if shape drawing is delayed. void DoName(); Slot for name. void DoApply(); Slot for applying current settings. void DoModified(); Slot for notifying modifications. void DoUndo(); Slot for undoing last operation. void DoX(); Slot for X. void DoY(); Slot for Y. void DoZ(); Slot for Z. void DoAlpha(); Slot for alpha. void DoTheta(); Slot for theta. void DoPhi(); Slot for phi. TGeoParaEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()). » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id$ » Last generated: 2015-06-30 15:02; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoParaEditor.html:22309,undo,undoing,22309,root/html602/TGeoParaEditor.html,https://root.cern,https://root.cern/root/html602/TGeoParaEditor.html,2,['undo'],['undoing']
Usability,"c Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressMemoryPlot(TProofProgressDialog* d, Int_t w = 700, Int_t h = 300); Main constructor. ~TProofProgressMemoryPlot(); Destructor. TGListBox* BuildLogList(TGFrame* parent); Build the list of workers. For this, extract the logs and take the names; of TProofLogElements. void Clear(Option_t* = 0); Clear the canvases. void DoPlot(); Draw the plot from the logs. TGraph * DoAveragePlot(Int_t& max_el, Int_t& min_el); Create the average plots. Int_t ParseLine(TString l, Long64_t& v, Long64_t& r, Long64_t& e); Extract from line 'l' the virtual memory 'v', the resident memory 'r' and the; number of events 'e'.; The line is assumed to be in the form; ""... Memory 130868 virtual 31540 ... event 5550""; The fields are only filled if >= 0 .; Return 0 on success, -1 if any of the values coudl not be filled (the output; fields are not touched in such a case). TGraph * DoWorkerPlot(TProofLogElem* ple); Make a memory consumption graph for a worker. TGraph * DoMasterPlot(TProofLogElem* ple); a master or submaster log; display without meaningful labels for now. void Select(Int_t id); actions of select all/clear all button. TGraph* DoAveragePlotOld(Int_t& max_el, Int_t& min_el). » Author: Anna Kreshuk 18/07/2008 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id: TProofProgressMemoryPlot.h 28564 2009-05-12 11:00:21Z ganis $ » Last generated: 2010-09-23 20:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofProgressMemoryPlot.html:23647,clear,clear,23647,root/html528/TProofProgressMemoryPlot.html,https://root.cern,https://root.cern/root/html528/TProofProgressMemoryPlot.html,1,['clear'],['clear']
Usability,"c Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressMemoryPlot(TProofProgressDialog* d, Int_t w = 700, Int_t h = 300); Main constructor. ~TProofProgressMemoryPlot(); Destructor. TGListBox* BuildLogList(TGFrame* parent); Build the list of workers. For this, extract the logs and take the names; of TProofLogElements. void Clear(Option_t* = 0); Clear the canvases. void DoPlot(); Draw the plot from the logs. TGraph * DoAveragePlot(Int_t& max_el, Int_t& min_el); Create the average plots. Int_t ParseLine(TString l, Long64_t& v, Long64_t& r, Long64_t& e); Extract from line 'l' the virtual memory 'v', the resident memory 'r' and the; number of events 'e'.; The line is assumed to be in the form; ""... Memory 130868 virtual 31540 ... event 5550""; The fields are only filled if >= 0 .; Return 0 on success, -1 if any of the values coudl not be filled (the output; fields are not touched in such a case). TGraph * DoWorkerPlot(TProofLogElem* ple); Make a memory consumption graph for a worker. TGraph * DoMasterPlot(TProofLogElem* ple); a master or submaster log; display without meaningful labels for now. void Select(Int_t id); actions of select all/clear all button. TGraph* DoAveragePlotOld(Int_t& max_el, Int_t& min_el). » Author: Anna Kreshuk 18/07/2008 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id: TProofProgressMemoryPlot.h 28564 2009-05-12 11:00:21Z ganis $ » Last generated: 2011-07-04 15:36; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofProgressMemoryPlot.html:23800,clear,clear,23800,root/html530/TProofProgressMemoryPlot.html,https://root.cern,https://root.cern/root/html530/TProofProgressMemoryPlot.html,1,['clear'],['clear']
Usability,"c Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressMemoryPlot(TProofProgressDialog* d, Int_t w = 700, Int_t h = 300); Main constructor. ~TProofProgressMemoryPlot(); Destructor. TGListBox* BuildLogList(TGFrame* parent); Build the list of workers. For this, extract the logs and take the names; of TProofLogElements. void Clear(Option_t* = 0); Clear the canvases. void DoPlot(); Draw the plot from the logs. TGraph * DoAveragePlot(Int_t& max_el, Int_t& min_el); Create the average plots. Int_t ParseLine(TString l, Long64_t& v, Long64_t& r, Long64_t& e); Extract from line 'l' the virtual memory 'v', the resident memory 'r' and the; number of events 'e'.; The line is assumed to be in the form; ""... Memory 130868 virtual 31540 ... event 5550""; The fields are only filled if >= 0 .; Return 0 on success, -1 if any of the values coudl not be filled (the output; fields are not touched in such a case). TGraph * DoWorkerPlot(TProofLogElem* ple); Make a memory consumption graph for a worker. TGraph * DoMasterPlot(TProofLogElem* ple); a master or submaster log; display without meaningful labels for now. void Select(Int_t id); actions of select all/clear all button. TGraph* DoAveragePlotOld(Int_t& max_el, Int_t& min_el). » Author: Anna Kreshuk 18/07/2008 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id: TProofProgressMemoryPlot.h 28564 2009-05-12 11:00:21Z ganis $ » Last generated: 2011-12-02 14:28; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TProofProgressMemoryPlot.html:23800,clear,clear,23800,root/html532/TProofProgressMemoryPlot.html,https://root.cern,https://root.cern/root/html532/TProofProgressMemoryPlot.html,2,['clear'],['clear']
Usability,"c Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TFoam Class Reference. ; TFoam is the main class of the multi-dimensional general purpose Monte Carlo event generator (integrator) FOAM. . FOAM Version 1.02M; AuthorsS. Jadach and P.Sawicki Institute of Nuclear Physics, Cracow, Poland Stanislaw. Jadac.nosp@m.h@if.nosp@m.j.edu.nosp@m..pl, Pawel.nosp@m..Saw.nosp@m.icki@.nosp@m.ifj..nosp@m.edu.p.nosp@m.l. What is FOAM for?. Suppose you want to generate randomly points (vectors) according to an arbitrary probability distribution in n dimensions, for which you supply your own method. FOAM can do it for you! Even if your distributions has quite strong peaks and is discontinuous!; FOAM generates random points with weight one or with variable weight.; FOAM is capable to integrate using efficient ""adaptive"" MC method. (The distribution does not need to be normalized to one.). How does it work?; FOAM is the simplified version of the multi-dimensional general purpose Monte Carlo event generator (integrator) FOAM. It creates hyper-rectangular ""foam of cells"", which is more dense around its peaks. See the following 2-dim. example of the map of 1000 cells for doubly peaked distribution:. FOAM is now fully integrated with the ROOT package. The important bonus of the ROOT use is persistency of the FOAM objects!; For more sophisticated problems full version of FOAM may be more appropriate: See full version of FOAM. Simple example of the use of FOAM:; ; #include ""Riostream.h""; #include ""TFoam.h""; #include ""TCanvas.h""; #include ""TH2.h""; #include ""TMath.h""; #include ""TFoamIntegrand.h""; #include ""TRandom3.h""; ; //_____________________________________________________________________________; Double_t sqr(Double_t x){; return x*x;; }; //_____________________________________________________________________________; Double_t Camel2(Int_t nDim, Double_t *Xarg){; // 2-dimensional distribution for Foam, normalized to one (within 1e-5); Double",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFoam.html:1130,simpl,simplified,1130,doc/master/classTFoam.html,https://root.cern,https://root.cern/doc/master/classTFoam.html,1,['simpl'],['simplified']
Usability,c TTabCom::EContext_tkSYS_FileName; static TTabCom::EContext_tkSYS_UserName; static TTabCom::EContext_tkUNKNOWN_CONTEXT. private:. char*fBufinitialized by Hook(); Int_tfLastIterfrodo: iteration counter for recursive MakeClassFromVarName; Pattern_tfPat[25][1024]array of patterns; ULong64_tfPrevInterpMarker; const char*fRegExp[25]corresponding regular expression plain text; Bool_tfVarIsPointerfrodo: pointer or not flag; TSeqCollection*fpClasses; TSeqCollection*fpDirectives; TSeqCollection*fpEnvVars; TSeqCollection*fpFiles; TSeqCollection*fpGlobals; int*fpLocinitialized by Hook(); TSeqCollection*fpPragmas; TSeqCollection*fpSysIncFiles; TSeqCollection*fpUsers. Class Charts. Inheritance Chart:. TTabCom. Function documentation; TTabCom(); Default constructor. ~TTabCom(); Destructor. void ClearClasses(); Clear classes and namespace collections. void ClearCppDirectives(); Forget all Cpp directives seen so far. void ClearEnvVars(); Forget all environment variables seen so far. void ClearFiles(); Close all files. void ClearGlobalFunctions(); Forget all global functions seen so far.; Not needed anymore. Use gROOT->GetListOfGlobalFunctions(). void ClearGlobals(); Forget all global variables seen so far.; With teh new implamentation the list is gROOT->GetListOfGlobals(true). void ClearPragmas(); Forget all pragmas seen so far. void ClearSysIncFiles(); Close system files. void ClearUsers(); Forget all user seen so far. void ClearAll(); clears all lists; except for user names and system include files. void RehashClasses(); Do the class rehash. void RehashCppDirectives(); Cpp rehashing. void RehashEnvVars(); Environemnt variables rehashing. void RehashFiles(); Close files. void RehashGlobalFunctions(); Reload global functions. void RehashGlobals(); Reload globals. void RehashPragmas(); Reload pragmas. void RehashSysIncFiles(); Reload system include files. void RehashUsers(); Reload users. void RehashAll(); clears and then rebuilds all lists; except for user names and system include,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTabCom.html:7793,Clear,ClearFiles,7793,root/html602/TTabCom.html,https://root.cern,https://root.cern/root/html602/TTabCom.html,2,['Clear'],['ClearFiles']
Usability,"c bool getFloorGlobal ();  ; static void setFloorGlobal (bool flag);  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooRealSumFunc.html:47401,clear,clearing,47401,doc/v632/classRooRealSumFunc.html,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html,1,['clear'],['clearing']
Usability,"c const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoMixtureEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for mixture editor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the selected mixture. void DoChkFraction(); Check button state changed for fraction. void DoChkNatoms(); Check button state changed for natoms. void DoFraction(); Fraction changed. void DoNatoms(); Natoms changed. void DoSelectElement(Int_t iel); Slot for selecting an element. void DoAddElem(); Slot for adding an element. No undo. void DoApply1(); Slot for applying modifications. void DoUndo1(); Slot for undoing all changes. void UpdateElements(); Update the list of elements in the TGCanvas. virtual ~TGeoMixtureEditor(); {}. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id: TGeoMaterialEditor.h 32718 2010-03-23 15:58:34Z rdm $ » Last generated: 2010-11-08 19:55; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoMixtureEditor.html:23023,undo,undo,23023,root/html528/TGeoMixtureEditor.html,https://root.cern,https://root.cern/root/html528/TGeoMixtureEditor.html,2,['undo'],"['undo', 'undoing']"
Usability,"c const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoMixtureEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for mixture editor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the selected mixture. void DoChkFraction(); Check button state changed for fraction. void DoChkNatoms(); Check button state changed for natoms. void DoFraction(); Fraction changed. void DoNatoms(); Natoms changed. void DoSelectElement(Int_t iel); Slot for selecting an element. void DoAddElem(); Slot for adding an element. No undo. void DoApply1(); Slot for applying modifications. void DoUndo1(); Slot for undoing all changes. void UpdateElements(); Update the list of elements in the TGCanvas. virtual ~TGeoMixtureEditor(); {}. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id: TGeoMaterialEditor.h 32718 2010-03-23 15:58:34Z rdm $ » Last generated: 2011-07-04 15:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGeoMixtureEditor.html:23123,undo,undo,23123,root/html530/TGeoMixtureEditor.html,https://root.cern,https://root.cern/root/html530/TGeoMixtureEditor.html,2,['undo'],"['undo', 'undoing']"
Usability,"c const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoMixtureEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for mixture editor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the selected mixture. void DoChkFraction(); Check button state changed for fraction. void DoChkNatoms(); Check button state changed for natoms. void DoFraction(); Fraction changed. void DoNatoms(); Natoms changed. void DoSelectElement(Int_t iel); Slot for selecting an element. void DoAddElem(); Slot for adding an element. No undo. void DoApply1(); Slot for applying modifications. void DoUndo1(); Slot for undoing all changes. void UpdateElements(); Update the list of elements in the TGCanvas. virtual ~TGeoMixtureEditor(); {}. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id: TGeoMaterialEditor.h 32718 2010-03-23 15:58:34Z rdm $ » Last generated: 2011-11-03 20:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoMixtureEditor.html:23123,undo,undo,23123,root/html532/TGeoMixtureEditor.html,https://root.cern,https://root.cern/root/html532/TGeoMixtureEditor.html,4,['undo'],"['undo', 'undoing']"
Usability,"c const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static const TGFont*fgDefaultFont; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGGC*fgDefaultGC; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGProgressBar(const TGWindow* p, UInt_t w, UInt_t h, Pixel_t back = GetWhitePixel(), Pixel_t barcolor = GetDefaultSelectedBackground(), GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t options = kDoubleBorder | kSunkenFrame); Create progress bar. void SetRange(Float_t min, Float_t max); Set min and max of progress bar. void SetPosition(Float_t pos); Set progress position between [min,max]. void Increment(Float_t inc); Increment progress position. void Reset(); Reset progress bar (i.e. set pos to 0). void SetFillType(TGProgressBar::EFillType type); Set fill type. void SetBarType(TGProgressBar::EBarType type); Set bar type. void SetBarColor(ULong_t color); Set progress bar color. void SetBarColor(const char* color = ""blue""); Set progress bar color. void Format(const char* format = ""%.2f""); Set format for displaying a value. FontStruct_t GetDefaultFontStruct(); Return default font structure in use. const TGGC & GetDefaultGC(); Return default graphics context in use. void SetForegroundColor(Pixel_t pixel); Change text color drawing. void SavePrimitive(ostream& out, Option_t* opti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGProgressBar.html:20769,progress bar,progress bar,20769,root/html602/TGProgressBar.html,https://root.cern,https://root.cern/root/html602/TGProgressBar.html,4,['progress bar'],['progress bar']
Usability,"c const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TTVLVEntry(const TGWindow* p, const TGPicture* bigpic, const TGPicture* smallpic, TGString* name, TGString** subnames, EListViewMode ViewMode); TGTreeLVEntry constructor. ~TTVLVEntry(); TGTreeLVEntry destructor. const char * ConvertAliases(); Convert all aliases into true names. Bool_t FullConverted(); Return true if converted name is alias free. void CopyItem(TTVLVEntry* dest); Copy this item's name and alias to an other. Bool_t HandleCrossing(Event_t* event); Handle mouse crossing event. Bool_t HasAlias(); Check if alias name is not empty. void PrependTilde(); Prepend a ~ to item alias. void SetItemName(const char* name); redraw this entry with new name. void SetCutType(Bool_t type = kFALSE); Set cut type. void SetExpression(const char* name, const char* alias, Bool_t cutType = kFALSE); Set the true name, alias and type of the expression, then refresh it. void Empty(); clear all names and alias. void SetToolTipText(const char* text, Long_t delayms = 1000); Set tool tip text associated with this item. The delay is in; milliseconds (minimum 250). To remove tool tip call method with text = 0. void SetSmallPic(const TGPicture* spic); Set small picture. const char * GetAlias(); {return fAlias.Data();}. TTVLVContainer * GetContainer(); {return fContainer;}. TGItemContext * GetContext(); {return fContext;}. const char * GetConvName(); {return fConvName;}. const char * GetTrueName(); {return fTrueName.Data();}. TGToolTip * GetTip(); {return fTip;}. Bool_t IsCut(); {return fIsCut;}. void SetAlias(const char* alias); {fAlias = alias;}. void SetTrueName(const char* name); {fTrueName = name;}. » Last changed: root/treeviewer:$Id$ » Last generated: 2015-03-14 16:50; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTVLVEntry.html:20780,clear,clear,20780,root/html534/TTVLVEntry.html,https://root.cern,https://root.cern/root/html534/TTVLVEntry.html,2,['clear'],['clear']
Usability,"c const char * TRefTable::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 93 of file TRefTable.h. ◆ Expand(). Int_t TRefTable::Expand ; (; Int_t ; pid, . Int_t ; newsize . ). virtual . Expand fParentIDs to newsize for ProcessID pid. ; Definition at line 157 of file TRefTable.cxx. ◆ ExpandForIID(). Int_t TRefTable::ExpandForIID ; (; Int_t ; iid, . Int_t ; newsize . ). protectedvirtual . Expand fParentIDs to newsize for internel ProcessID index iid. ; Definition at line 167 of file TRefTable.cxx. ◆ ExpandPIDs(). void TRefTable::ExpandPIDs ; (; Int_t ; numpids). protected . Expand the arrays of managed PIDs. ; Definition at line 193 of file TRefTable.cxx. ◆ FillBuffer(). void TRefTable::FillBuffer ; (; TBuffer & ; b). virtual . Fill buffer b with the fN elements in fParentdIDs. ; This function is called by TBranchRef::FillLeaves. ; Definition at line 225 of file TRefTable.cxx. ◆ FindPIDGUID(). Int_t TRefTable::FindPIDGUID ; (; const char * ; guid); const. protected . Get fProcessGUIDs' index of the TProcessID with GUID guid. ; Definition at line 238 of file TRefTable.cxx. ◆ GetInternalIdxForPID() [1/2]. Int_t TRefTable::GetInternalIdxForPID ; (; Int_t ; pid); const. protected . Get the index for fProcessIDs, fAllocSize, etc given a PID. ; Uses fMapPIDtoInternal and the pid's GUID / fProcessGUID ; Definition at line 278 of file TRefTable.cxx. ◆ GetInternalIdxForPID() [2/2]. Int_t TRefTable::GetInternalIdxForPID ; (; TProcessID * ; procid); const. protected . Get the index for fProcessIDs, fAllocSize, etc given a PID. ; Uses fMapPIDtoInternal and the pid's GUID / fProcessGUID ; Definition at line 269 of file TRefTable.cxx. ◆ GetN(). Int_t TRefTable::GetN ; (; Int_t ; pid); const. inline . Definition at line 80 of file TRefTable.h. ◆ GetNumPIDs(). Int_t TRefTable::GetNumPIDs ; (; ); const. inline . Definition at line 78 of file TRefTable.h. ◆ GetOwner(). TObject * TRefTable::GetOwner ; (; ); const. inline . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRefTable.html:17234,guid,guid,17234,doc/master/classTRefTable.html,https://root.cern,https://root.cern/doc/master/classTRefTable.html,1,['guid'],['guid']
Usability,"c const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  ;  Static Public Member Functions inherited from RooAbsLValue; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions; double evaluate () const override;  Calculate current value of this object. ;  ;  Protected Member Functions inherited from RooAbsRealLValue; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy cache of another RooAbsArg to our cache. ;  ; bool fitRangeOKForPlotting () const;  Check if fit range is usable as plot range, i.e. ;  ; virtual void setValFast (double value);  ;  Protected Member Functions inherited from RooAbsReal; void attachToTree (TTree &t, Int_t bufSize=32000) override;  Attach object to a branch of given TTree. ;  ; void attachToVStore (RooVectorDataStore &vstore) override;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ;  ; TString integralNameSuffix (const RooArgSet",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLinearVar.html:57133,usab,usable,57133,doc/master/classRooLinearVar.html,https://root.cern,https://root.cern/doc/master/classRooLinearVar.html,1,['usab'],['usable']
Usability,"c*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Double_tbufferFraction() const; RooFFTConvPdf::BufStratbufferStrategy() const; const RooArgSet&cacheObservables() const; virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooFFTConvPdf.html:7288,clear,clearEvalErrorLog,7288,root/html532/RooFFTConvPdf.html,https://root.cern,https://root.cern/root/html532/RooFFTConvPdf.html,2,['clear'],['clearEvalErrorLog']
Usability,"c*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Double_tbufferFraction() const; RooFFTConvPdf::BufStratbufferStrategy() const; const RooArgSet&cacheObservables() const; virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), const RooCmdArg arg5 = RooCmdArg::none(), const RooCmdArg arg6 = RooCmdArg:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooFFTConvPdf.html:7288,clear,clearEvalErrorLog,7288,root/html528/RooFFTConvPdf.html,https://root.cern,https://root.cern/root/html528/RooFFTConvPdf.html,1,['clear'],['clearEvalErrorLog']
Usability,"c*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Double_tbufferFraction() const; RooFFTConvPdf::BufStratbufferStrategy() const; const RooArgSet&cacheObservables() const; virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooFFTConvPdf.html:7288,clear,clearEvalErrorLog,7288,root/html530/RooFFTConvPdf.html,https://root.cern,https://root.cern/root/html530/RooFFTConvPdf.html,1,['clear'],['clearEvalErrorLog']
Usability,"c*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidcleanup(); virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual RooResolutionModel*convolution(RooFormulaVar* basis, RooAbsArg* owner) const; RooRealVar&convVar() const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooResolutionModel.html:4539,clear,clearShapeDirty,4539,root/html602/RooResolutionModel.html,https://root.cern,https://root.cern/root/html602/RooResolutionModel.html,2,['clear'],['clearShapeDirty']
Usability,"c*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModecanNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tcheckObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; const RooArgList&coefList() const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAddPdf.html:4067,clear,clearValueAndShapeDirty,4067,root/html534/RooAddPdf.html,https://root.cern,https://root.cern/root/html534/RooAddPdf.html,12,['clear'],['clearValueAndShapeDirty']
Usability,"c*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidRooResolutionModel::cleanup(); virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual RooResolutionModel*RooResolutionModel::convolution(RooFormulaVar* basis, RooAbsArg* owner) const; RooRealVar&RooResolutionModel::convVar() const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdAr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooGaussModel.html:3342,clear,clearValueAndShapeDirty,3342,root/html532/RooGaussModel.html,https://root.cern,https://root.cern/root/html532/RooGaussModel.html,6,['clear'],['clearValueAndShapeDirty']
Usability,"c*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Int_tcalculateBandWidth(Int_t kernel = -999); Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), const RooCmdArg arg5 = RooCmdArg::none(), const RooCmdArg arg6 = RooCmdArg::none(), const RooCmdArg arg7 = RooCmdArg::none(), const RooCmdArg arg8 = R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/Roo2DKeysPdf.html:2761,clear,clearValueDirty,2761,root/html528/Roo2DKeysPdf.html,https://root.cern,https://root.cern/root/html528/Roo2DKeysPdf.html,1,['clear'],['clearValueDirty']
Usability,"c*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Int_tcalculateBandWidth(Int_t kernel = -999); Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/Roo2DKeysPdf.html:2761,clear,clearValueDirty,2761,root/html530/Roo2DKeysPdf.html,https://root.cern,https://root.cern/root/html530/Roo2DKeysPdf.html,1,['clear'],['clearValueDirty']
Usability,"c1 = 1, Option_t* option = """"); virtual Bool_tAdd(const TH1* h, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1)MENU ; virtual voidAddBinContent(Int_t bin); virtual voidAddBinContent(Int_t bin, Double_t w); static voidAddDirectory(Bool_t add = kTRUE); static Bool_tAddDirectoryStatus(); virtual Double_tAndersonDarlingTest(const TH1* h2, Option_t* option = """") const; virtual Double_tAndersonDarlingTest(const TH1* h2, Double_t& advalue) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); virtual Int_tBufferEmpty(Int_t action = 0); virtual Bool_tCanExtendAllAxes() const; virtual Double_tChi2Test(const TH1* h2, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tChi2TestX(const TH1* h2, Double_t& chi2, Int_t& ndf, Int_t& igood, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tChisquare(TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidClearUnderflowAndOverflow(); virtual TObject*Clone(const char* newname = 0) const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tComputeIntegral(Bool_t onlyPositive = false); virtual voidCopy(TObject& hnew) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidDirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tDivide(const TH1* h1); virtual Bool_tDivide(TF1* f1, Double_t c1 = 1); virtual Bool_tDivide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """")MENU ; virtual voidDraw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TH1*DrawCopy(Option_t* option = """", const char* name_postfix = ""_copy"") const; virtual TH1*DrawNo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH1.html:18289,Clear,Clear,18289,root/html602/TH1.html,https://root.cern,https://root.cern/root/html602/TH1.html,2,['Clear'],['Clear']
Usability,"cal tasks than inheritance, and help ensure the type-safety of code (thereby ensuring the accuracy of data by helping to prevent accidental narrowing etc). It implies that you intend to continue to encourage the use of bare new and delete operators, instead of relying on the more efficient, reliable, and safe method of using RAII. Why? This begs the obvious question: why bother migrating at all? You wish to migrate to the modern and superior C++11 in order to not take advantage of its features? Why not just simply maintain ROOT5 and CINT, and just refuse to upgrade? ROOT is not a particularly good framework that is written in a language that isn't quite C++. If you are going to break away and make/use/write cling, then fix the poor design decisions: cling will probably break compatibility anyways despite your best efforts, so you might as well take the time and effort to refactor and clean up the code base. A simple example, taken from this website: """""" TFFTComplex One of the interface classes to the FFTW package, can be used directly or via the TVirtualFFT class. Only the basic interface of FFTW is implemented. Computes complex input/output discrete Fourier transforms (DFT) in one or more dimensions. For the detailed information on the computed transforms please refer to the FFTW manual, chapter ""What FFTW really computes"". How to use it: 1) Create an instance of TFFTComplex - this will allocate input and output arrays (unless an in-place transform is specified) 2) Run the Init() function with the desired flags and settings ... """""" This is simply poor design. This should look like: root::Fft, removing the T, using a namespace, using templates instead of inheritence, etc. But also, notice that you have to run an Init function. Why? That is specifically what the constructor is for. Why does everything in ROOT know how to draw itself? Why does everything in ROOT have 100 methods, for ""quick access"" to other objects that do the actual work of those methods? These are q",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/blog/do-we-need-yet-another-custom-c-interpreter.html:10727,simpl,simple,10727,d/blog/do-we-need-yet-another-custom-c-interpreter.html,https://root.cern,https://root.cern/d/blog/do-we-need-yet-another-custom-c-interpreter.html,1,['simpl'],['simple']
Usability,"calFrame Composite frame with vertical child layout; TGVerticalLayout Vertical layout manager; TGView View widget base class; TGViewFrame Frame containing the actual text; TGViewPort Viewport through which to look at a container frame; TGWidget Widget base class; TGWindow GUI Window base class; TGX11 Interface to X11; TGX11TTF Interface to X11 + TTF font handling; TGXYLayout X / Y - layout manager; TGXYLayoutHints Hits for the X / Y - layout manager; TGaxis Graphics axis; TGedEditor ROOT graphics editor; TGedFrame base editor's frame; TGedMarkerPopup marker select popup; TGedMarkerSelect Marker selection button; TGedNameFrame frame showing the selected object name; TGedPatternFrame pattern frame; TGedPatternPopup Color selector popup; TGedPatternSelect pattern selection check-button; TGedPatternSelector select pattern frame; TGedPopup popup window; TGedSelect selection check-button; TGenCollectionProxy ; TGenCollectionProxy::Method ; TGenCollectionProxy::Value ; TGenPhaseSpace Simple Phase Space Generator; TGenerator Event generator interface abstract baseclass; TGenericTable Generic array of C-structure (a'la STL vector); TGenericTable::iterator ; TGeoArb8 arbitrary trapezoid with 8 vertices; TGeoAtt class for visibility, activity and optimization attributes for volumes/nodes; TGeoBBox box primitive; TGeoBBoxEditor TGeoBBox editor; TGeoBatemanSol Solution for the Bateman equation; TGeoBoolNode a boolean node; TGeoBranchArray ; TGeoBuilder geometry builder singleton; TGeoCacheState class storing the cache state; TGeoChecker a simple geometry checker; TGeoCombiTrans rotation + translation; TGeoCombiTransEditor TGeoCombiTrans editor; TGeoCompositeShape boolean composite shape; TGeoCone conical tube class; TGeoConeEditor TGeoCone editor; TGeoConeSeg conical tube segment class ; TGeoConeSegEditor TGeoConeSeg editor; TGeoCtub cut tube segment class ; TGeoCtubEditor TGeoCtub editor; TGeoDecayChannel Decay channel for Elements; TGeoElemIter Iterator for radionuclide chains.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ClassIndex.html:87857,simpl,simple,87857,root/html530/ClassIndex.html,https://root.cern,https://root.cern/root/html530/ClassIndex.html,4,['simpl'],['simple']
Usability,"calIntegral (Int_t code, const char *rangeName=nullptr) const override;  Implement analytical integral. ;  ; std::string buildCallToAnalyticIntegral (Int_t code, const char *rangeName, RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines the analytical integral translation for the class. ;  ; TObject * clone (const char *newname) const override;  ; void generateEvent (Int_t code) override;  Implement internal generator. ;  ; Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const override;  Advertise analytical integral. ;  ; Int_t getGenerator (const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) const override;  Advertise internal generator. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void translate (RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const char *title=nullptr);  Constructor with name and title only. ;  ;  ~RooAbsPdf () override;  Destructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Analytical integral with normalization (see RooAbsReal::analyticalIntegralWN() for further information). ;  ; virtual RooAbsGenContext * autoGenContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false, bool autoBinned=true, const char *binnedTag="""") const;  ; virtual RooAbsGenContext * binnedGenContext (con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooUniform.html:1718,simpl,simple,1718,doc/master/classRooUniform.html,https://root.cern,https://root.cern/doc/master/classRooUniform.html,1,['simpl'],['simple']
Usability,"calar_t = typename Architecture_t::Scalar_t;  . Public Member Functions;  TSGD (Scalar_t learningRate, DeepNet_t &deepNet, Scalar_t momentum);  Constructor. ;  ;  ~TSGD ()=default;  Destructor. ;  ; Scalar_t GetMomentum () const;  Getters. ;  ; std::vector< std::vector< Matrix_t > > & GetPastBiasGradients ();  ; std::vector< Matrix_t > & GetPastBiasGradientsAt (size_t i);  ; std::vector< std::vector< Matrix_t > > & GetPastWeightGradients ();  ; std::vector< Matrix_t > & GetPastWeightGradientsAt (size_t i);  ;  Public Member Functions inherited from TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >;  VOptimizer (Scalar_t learningRate, DeepNet_t &deepNet);  Constructor. ;  ; virtual ~VOptimizer ()=default;  Virtual Destructor. ;  ; size_t GetGlobalStep () const;  ; Layer_t * GetLayerAt (size_t i);  ; std::vector< Layer_t * > & GetLayers ();  ; Scalar_t GetLearningRate () const;  Getters. ;  ; void IncrementGlobalStep ();  Increments the global step. ;  ; void SetLearningRate (size_t learningRate);  Setters. ;  ; void Step ();  Performs one step of optimization. ;  . Protected Member Functions; void UpdateBiases (size_t layerIndex, std::vector< Matrix_t > &biases, const std::vector< Matrix_t > &biasGradients);  Update the biases, given the current bias gradients. ;  ; void UpdateWeights (size_t layerIndex, std::vector< Matrix_t > &weights, const std::vector< Matrix_t > &weightGradients);  Update the weights, given the current weight gradients. ;  . Protected Attributes; Scalar_t fMomentum;  The momentum used for training. ;  ; std::vector< std::vector< Matrix_t > > fPastBiasGradients;  The sum of the past bias gradients associated with the deep net. ;  ; std::vector< std::vector< Matrix_t > > fPastWeightGradients;  The sum of the past weight gradients associated with the deep net. ;  ;  Protected Attributes inherited from TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >; DeepNet_t & fDeepNet;  The reference to the deep net. ;  ; size_t fGlobalStep; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TSGD.html:2095,learn,learningRate,2095,doc/master/classTMVA_1_1DNN_1_1TSGD.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TSGD.html,1,['learn'],['learningRate']
Usability,"calar_t fTestError;  Holds the most recently computed test loss. ;  ; size_t fTestInterval;  Interval for the computation of the test error. ;  ; Scalar_t fTrainingError;  Holds the most recently computed training loss. ;  . #include <TMVA/DNN/Minimizers.h>; Member Typedef Documentation. ◆ Matrix_t. template<typename Architecture_t > . using TMVA::DNN::TGradientDescent< Architecture_t >::Matrix_t = typename Architecture_t::Matrix_t. Definition at line 59 of file Minimizers.h. ◆ Scalar_t. template<typename Architecture_t > . using TMVA::DNN::TGradientDescent< Architecture_t >::Scalar_t = typename Architecture_t::Scalar_t. Definition at line 58 of file Minimizers.h. Constructor & Destructor Documentation. ◆ TGradientDescent() [1/2]. template<typename Architecture_t > . TMVA::DNN::TGradientDescent< Architecture_t >::TGradientDescent. Definition at line 175 of file Minimizers.h. ◆ TGradientDescent() [2/2]. template<typename Architecture_t > . TMVA::DNN::TGradientDescent< Architecture_t >::TGradientDescent ; (; Scalar_t ; learningRate, . size_t ; convergenceSteps, . size_t ; testInterval . ). Definition at line 185 of file Minimizers.h. Member Function Documentation. ◆ GetConvergenceCount(). template<typename Architecture_t > . size_t TMVA::DNN::TGradientDescent< Architecture_t >::GetConvergenceCount ; (; ); const. inline . Definition at line 159 of file Minimizers.h. ◆ GetConvergenceSteps(). template<typename Architecture_t > . size_t TMVA::DNN::TGradientDescent< Architecture_t >::GetConvergenceSteps ; (; ); const. inline . Definition at line 160 of file Minimizers.h. ◆ GetTestError(). template<typename Architecture_t > . Scalar_t TMVA::DNN::TGradientDescent< Architecture_t >::GetTestError ; (; ); const. inline . Definition at line 162 of file Minimizers.h. ◆ GetTestInterval(). template<typename Architecture_t > . size_t TMVA::DNN::TGradientDescent< Architecture_t >::GetTestInterval ; (; ); const. inline . Definition at line 163 of file Minimizers.h. ◆ GetTrainingError(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TGradientDescent.html:5917,learn,learningRate,5917,doc/master/classTMVA_1_1DNN_1_1TGradientDescent.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TGradientDescent.html,1,['learn'],['learningRate']
Usability,"calculated by the numerical Gradient calculator is negative, a 1dim line search in the direction of that component is done in order to find a better position where g2 is again positive. More...;  ; class  Numerical2PGradientCalculator;  class performing the numerical gradient calculation More...;  ; class  NumericalDerivator;  ; class  ParametricFunction;  Function which has parameters. More...;  ; class  PrefixStack;  ; class  ScanBuilder;  Performs a minimization using the simplex method of Nelder and Mead (ref. More...;  ; class  ScanMinimizer;  Class implementing the required methods for a minimization using SCAN API is provided in the upper ROOT::Minuit2::ModularFunctionMinimizer class. More...;  ; class  SimplexBuilder;  Performs a minimization using the simplex method of Nelder and Mead (ref. More...;  ; class  SimplexMinimizer;  Class implementing the required methods for a minimization using Simplex. More...;  ; class  SimplexParameters;  class describing the simplex set of points (f(x), x ) which evolve during the minimization iteration process. More...;  ; class  SimplexSeedGenerator;  generate Simplex starting point (state) More...;  ; class  SinParameterTransformation;  class for the transformation for double-limited parameter Using a sin function one goes from a double-limited parameter range to an unlimited one More...;  ; class  SqrtLowParameterTransformation;  Transformation from external to internal Parameter based on sqrt(1 + x**2) More...;  ; class  SqrtUpParameterTransformation;  Transformation from external to internal Parameter based on sqrt(1 + x**2) More...;  ; class  StackAllocator;  StackAllocator controls the memory allocation/deallocation of Minuit. More...;  ; class  StackAllocatorHolder;  ; class  StackError;  ; class  StackOverflow;  define stack allocator symbol More...;  ; class  sym;  ; class  VariableMetricBuilder;  Build (find) function minimum using the Variable Metric method (MIGRAD) Two possible error updators can be chosen. Mo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html:11731,simpl,simplex,11731,doc/master/namespaceROOT_1_1Minuit2.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html,2,['simpl'],['simplex']
Usability,"callback for monitoring and loggging ; Reimplemented in TMVA::DNN::ClassificationSettings.; Definition at line 805 of file NeuralNet.h. ◆ endTrainCycle(). virtual void TMVA::DNN::Settings::endTrainCycle ; (; double ; ). inlinevirtual . callback for monitoring and logging ; Reimplemented in TMVA::DNN::ClassificationSettings.; Definition at line 788 of file NeuralNet.h. ◆ exists(). bool TMVA::DNN::Settings::exists ; (; std::string ; histoName). inline . for monitoring ; Definition at line 825 of file NeuralNet.h. ◆ factorWeightDecay(). double TMVA::DNN::Settings::factorWeightDecay ; (; ); const. inline . get the weight-decay factor ; Definition at line 769 of file NeuralNet.h. ◆ hasConverged(). bool TMVA::DNN::Settings::hasConverged ; (; double ; testError). virtual . has this training converged already? ; check for convergence; Definition at line 485 of file NeuralNet.cxx. ◆ learningRate(). double TMVA::DNN::Settings::learningRate ; (; ); const. inline . get the learning rate ; Definition at line 771 of file NeuralNet.h. ◆ maxConvergenceCount(). size_t TMVA::DNN::Settings::maxConvergenceCount ; (; ); const. inline . returns the max convergence count so far ; Definition at line 828 of file NeuralNet.h. ◆ minError(). size_t TMVA::DNN::Settings::minError ; (; ); const. inline . returns the smallest error so far ; Definition at line 829 of file NeuralNet.h. ◆ minimizerType(). MinimizerType TMVA::DNN::Settings::minimizerType ; (; ); const. inline . which minimizer shall be used (e.g. SGD) ; Definition at line 774 of file NeuralNet.h. ◆ momentum(). double TMVA::DNN::Settings::momentum ; (; ); const. inline . get the momentum (e.g. for SGD) ; Definition at line 772 of file NeuralNet.h. ◆ pads(). void TMVA::DNN::Settings::pads ; (; int ; numPads). inline . preparation for monitoring ; Definition at line 818 of file NeuralNet.h. ◆ plot(). void TMVA::DNN::Settings::plot ; (; std::string ; histoName, . std::string ; options, . int ; pad, . EColor ; color . ). inline . for monit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Settings.html:9089,learn,learning,9089,doc/master/classTMVA_1_1DNN_1_1Settings.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Settings.html,1,['learn'],['learning']
Usability,"called, and the; dimensions required are taken and stored, these are then bound and; converted to type TGeoBBox and stored in fsolmap map using the name; as its key. XMLNodePointer_t Ellipsoid(TXMLEngine* gdml, XMLNodePointer_t node, XMLAttrPointer_t attr); In the solids section of the GDML file, an ellipsoid may be declared.; Unfortunately, the ellipsoid is not supported under ROOT so,; when the ellipsoid keyword is found, this function is called; to convert it to a simple box with similar dimensions, and the; dimensions required are taken and stored, these are then bound and; converted to type TGeoBBox and stored in fsolmap map using the name; as its key. XMLNodePointer_t ElCone(TXMLEngine* gdml, XMLNodePointer_t node, XMLAttrPointer_t attr); In the solids section of the GDML file, an elliptical cone may be declared.; Unfortunately, the elliptical cone is not supported under ROOT so,; when the elcone keyword is found, this function is called; to convert it to a simple box with similar dimensions, and the; dimensions required are taken and stored, these are then bound and; converted to type TGeoBBox and stored in fsolmap map using the name; as its key. XMLNodePointer_t Paraboloid(TXMLEngine* gdml, XMLNodePointer_t node, XMLAttrPointer_t attr); In the solids section of the GDML file, a Paraboloid may be declared.; when the paraboloid keyword is found, this function is called, and the; dimensions required are taken and stored, these are then bound and; converted to type TGeoParaboloid and stored in fsolmap map using the name; as its key. XMLNodePointer_t Arb8(TXMLEngine* gdml, XMLNodePointer_t node, XMLAttrPointer_t attr); In the solids section of the GDML file, an Arb8 may be declared.; when the arb8 keyword is found, this function is called, and the; dimensions required are taken and stored, these are then bound and; converted to type TGeoArb8 and stored in fsolmap map using the name; as its key. XMLNodePointer_t Tube(TXMLEngine* gdml, XMLNodePointer_t node, XMLAttr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGDMLParse.html:17570,simpl,simple,17570,root/html534/TGDMLParse.html,https://root.cern,https://root.cern/root/html534/TGDMLParse.html,6,['simpl'],['simple']
Usability,"calls : 100000; Depending on the algorithm, some of the control parameters might have no effect.; 13.8.3.3 ROOT::Math::AdaptiveIntegratorMultiDim; This class implements an adaptive quadrature integration method for multi dimensional functions. It is described in this paper Genz, A.A. Malik, An adaptive algorithm for numerical integration over an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302. It is part of the MathCore library. The user can control the relative and absolute tolerance and the maximum allowed number of function evaluation.; 13.8.3.4 ROOT::Math::GSLMCIntegrator; It is a class for performing numerical integration of a multidimensional function. It uses the numerical integration algorithms of GSL, which reimplements the algorithms used in the QUADPACK, a numerical integration package written in Fortran. Plain MC, MISER and VEGAS integration algorithms are supported for integration over finite (hypercubic) ranges. For a detail description of the GSL methods visit the GSL users guide. Specific configuration options (documented in the GSL user guide) for the ROOT::Math::GSLMCIntegration can be set directly in the class, or when using it via the ROOT::Math::IntegratorMultiDim interface, can be defined using the ROOT::Math::IntegratorMultiDimOptions.; 13.9 Function Derivation; There are in ROOT only two classes to perform numerical derivation. One of them is in the MathCore library while the other is in the MathMore wrapping an integration function from the GSL library. * RichardsonDerivator: Implements the Richardson method for numerical integration. It can calculate up to the third derivative of a function. * GSLDerivator of MathMore based on GSL.; 13.10 Numerical Minimization; The algorithms provided by ROOT for numerical integration are implemented following the hierarchy shown in the next image. The left branch of classes are used for one dimensional minimization, while the right one is used for multidimensional minimization. In",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:713008,guid,guide,713008,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['guid'],['guide']
Usability,"cally constructed from the name of the input function, the variables it integrates and the range integrates over. If nset is specified the integrand is request to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified the integral is performed over the named range, otherwise it is performed over the domain of each integrated observable. If cfg is specified it will be used to configure any numeric integration aspect of the integral. It will not force the integral to be performed numerically, which is decided automatically by RooRealIntegral. ; Reimplemented from RooAbsReal.; Definition at line 1056 of file RooAbsRealLValue.cxx. ◆ DeclFileName(). static const char * RooAbsRealLValue::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 164 of file RooAbsRealLValue.h. ◆ fitRangeOKForPlotting(). bool RooAbsRealLValue::fitRangeOKForPlotting ; (; ); const. protected . Check if fit range is usable as plot range, i.e. ; it is neither open ended, nor empty ; Definition at line 493 of file RooAbsRealLValue.cxx. ◆ frame() [1/6]. RooPlot * RooAbsRealLValue::frame ; (; ); const. Create a new RooPlot on the heap with a drawing frame initialized for this object, but no plot contents. ; Use x.frame() as the first argument to a y.plotOn(...) method, for example. The caller is responsible for deleting the returned object.; The current fit range may not be open ended or empty. ; Definition at line 374 of file RooAbsRealLValue.cxx. ◆ frame() [2/6]. RooAbsRealLValue::frame ; (; const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ); const. Create a new RooPlot on the heap with a drawing frame initialized for this object, but no plot contents. ; Use x.frame() as the first argument to a ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsRealLValue.html:76616,usab,usable,76616,doc/master/classRooAbsRealLValue.html,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html,1,['usab'],['usable']
Usability,"case of failure. In the last case the file cannot be used anymore. 11.7 Remotely Access to ROOT Files; ROOT files can be accessed remotely in many ways, on the base of the protocol URL. Among the most popular are XRootD (protocols ‘root://’ and ‘xrd://’) and a Web server (protocl ‘http://’ or ‘https://’).; The rootd daemon is deprecated and has been removed in version 6.16/00.; Please refer to the XRootD documentation for starting and ensuring that such a daemon is running.; Reading and writing ROOT files over the net can be done by creating a TFile object using the static method TFile::Open() object. This will instantiate the appropriate derivation of TFile to handle the request. Inheriting from the TFile class, the returned instance will have exactly the same interface and behavior of TFile. The only difference is that it reads and writes from a remote service. In the example below the file is read via a web server through the TDavixFile plug-in.; 11.7.1 A Simple Session; root[] TFile *f1 = TFile::Open(""local/file.root"",""update""); root[] TFile *f2 = TFile::Open(""root://my.server.org/data/file.root"",""new""); root[] TFile *f3 = TFile::Open(""http://root.cern.ch/files/hsimple.root""); root[] f3.ls(); TDavixFile** http://root.cern.ch/files/hsimple.root; TDavixFile* http://root.cern.ch/files/hsimple.root; KEY: TH1F hpx;1 This is the px distribution; KEY: TH2F hpxpy;1 py vs px; KEY: TProfile hprof;1 Profile of pz versus px; KEY: TNtuple ntuple;1 Demo ntuple; root[] hpx.Draw(); 11.8 XML Interface; A new module xml as implemented by Sergey Linev (GSI). It is an optional package that can be used to save a canvas into file.xml file format instead of file.root. XML files do not have any advantages compared to the normal ROOT files, except that the information in these files can be edited via a normal editor. The main motivation for this new format is to facilitate the communication with other non ROOT applications. Currently writing and reading XML files is limited to ROOT appli",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:516823,Simpl,Simple,516823,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['Simpl'],['Simple']
Usability,"cated floating point data type. More...;  ; class  TLeafElement;  A TLeaf for the general case when using the branches created via a TStreamerInfo (i.e. More...;  ; class  TLeafF;  A TLeaf for a 32 bit floating point data type. More...;  ; class  TLeafF16;  A TLeaf for a 24 bit truncated floating point data type. More...;  ; class  TLeafG;  A TLeaf for a 64 bit Integer data type. More...;  ; class  TLeafI;  A TLeaf for an Integer data type. More...;  ; class  TLeafL;  A TLeaf for a 64 bit Integer data type. More...;  ; class  TLeafO;  A TLeaf for a bool data type. More...;  ; class  TLeafObject;  A TLeaf for a general object derived from TObject. More...;  ; class  TLeafS;  A TLeaf for a 16 bit Integer data type. More...;  ; class  TMethodBrowsable;  This helper object allows the browsing of methods of objects stored in branches. More...;  ; class  TNonSplitBrowsable;  Allows a TBrowser to browse non-split branches as if they were split. More...;  ; class  TNtuple;  A simple TTree restricted to a list of float variables only. More...;  ; class  TNtupleD;  A simple TTree restricted to a list of double variables only. More...;  ; class  TQueryResult;  A container class for query results. More...;  ; class  TreeUtils;  Different standalone functions to work with trees and tuples, not reqiuired to be a member of any class. More...;  ; class  TSelector;  A TSelector object is used by the TTree::Draw, TTree::Scan, TTree::Process to navigate in a TTree and make selections. More...;  ; class  TSelectorList;  A TList derived class that makes sure that objects added to it are not linked to the currently open file (like histograms, eventlists and trees). More...;  ; class  TSelectorScalar;  Named scalar type, based on Long64_t, streamable, storable and mergeable. More...;  ; class  TTree;  A TTree represents a columnar dataset. More...;  ; class  TTreeCache;  A cache to speed-up the reading of ROOT datasets. More...;  ; class  TTreeCacheUnzip;  A TTreeCache which exploits para",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tree.html:4888,simpl,simple,4888,doc/master/group__tree.html,https://root.cern,https://root.cern/doc/master/group__tree.html,1,['simpl'],['simple']
Usability,"cation based on Bayesian posterior probability. . Introduction. Neural Networks are more and more used in various fields for data; analysis and classification, both for research and commercial; institutions. Some randomly choosen examples are:. image analysis; financial movements predictions and analysis; sales forecast and product shipping optimisation; in particles physics: mainly for classification tasks (signal; over background discrimination). More than 50% of neural networks are multilayer perceptrons. This; implementation of multilayer perceptrons is inspired from the; MLPfit; package originaly written by Jerome Schwindling. MLPfit remains; one of the fastest tool for neural networks studies, and this ROOT; add-on will not try to compete on that. A clear and flexible Object; Oriented implementation has been choosen over a faster but more; difficult to maintain code. Nevertheless, the time penalty does not; exceed a factor 2. The; MLP. The multilayer perceptron is a simple feed-forward network with; the following structure:. It is made of neurons characterized by a bias and weighted links; between them (let's call those links synapses). The input neurons; receive the inputs, normalize them and forward them to the first; hidden layer. Each neuron in any subsequent layer first computes a linear; combination of the outputs of the previous layer. The output of the; neuron is then function of that combination with f being; linear for output neurons or a sigmoid for hidden layers. This is; useful because of two theorems:. A linear combination of sigmoids can approximate any; continuous function.; Trained with output = 1 for the signal and 0 for the; background, the approximated function of inputs X is the probability; of signal, knowing X. Learning; methods. The aim of all learning methods is to minimize the total error on; a set of weighted examples. The error is defined as the sum in; quadrature, devided by two, of the error on each individual output; neuron.; In a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMultiLayerPerceptron.html:2729,simpl,simple,2729,root/html528/TMultiLayerPerceptron.html,https://root.cern,https://root.cern/root/html528/TMultiLayerPerceptron.html,4,['simpl'],['simple']
Usability,"cation with 2 classes and regression with; 112/// one regression-target; 113 ; 114Bool_t TMVA::MethodDNN::HasAnalysisType(Types::EAnalysisType type,; 115 UInt_t numberClasses,; 116 UInt_t /*numberTargets*/ ); 117{; 118 if (type == Types::kClassification && numberClasses == 2 ) return kTRUE;; 119 if (type == Types::kMulticlass ) return kTRUE;; 120 if (type == Types::kRegression ) return kTRUE;; 121 ; 122 return kFALSE;; 123}; 124 ; 125////////////////////////////////////////////////////////////////////////////////; 126/// default initializations; 127 ; 128void TMVA::MethodDNN::Init() {; 129 Log() << kWARNING; 130 << ""MethodDNN is deprecated and it will be removed in future ROOT version. ""; 131 ""Please use MethodDL ( TMVA::kDL)""; 132 << Endl;; 133 ; 134}; 135 ; 136////////////////////////////////////////////////////////////////////////////////; 137/// Options to be set in the option string:; 138///; 139/// - LearningRate <float> DNN learning rate parameter.; 140/// - DecayRate <float> Decay rate for learning parameter.; 141/// - TestRate <int> Period of validation set error computation.; 142/// - BatchSize <int> Number of event per batch.; 143///; 144/// - ValidationSize <string> How many events to use for validation. ""0.2""; 145/// or ""20%"" indicates that a fifth of the; 146/// training data should be used. ""100""; 147/// indicates that 100 events should be used.; 148 ; 149void TMVA::MethodDNN::DeclareOptions(); 150{; 151 ; 152 DeclareOptionRef(fLayoutString=""SOFTSIGN|(N+100)*2,LINEAR"",; 153 ""Layout"",; 154 ""Layout of the network."");; 155 ; 156 DeclareOptionRef(fValidationSize = ""20%"", ""ValidationSize"",; 157 ""Part of the training data to use for ""; 158 ""validation. Specify as 0.2 or 20% to use a ""; 159 ""fifth of the data set as validation set. ""; 160 ""Specify as 100 to use exactly 100 events. ""; 161 ""(Default: 20%)"");; 162 ; 163 DeclareOptionRef(fErrorStrategy=""CROSSENTROPY"",; 164 ""ErrorStrategy"",; 165 ""Loss function: Mean squared error (regression)""; 166 "" or cross entr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDNN_8cxx_source.html:4786,learn,learning,4786,doc/master/MethodDNN_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDNN_8cxx_source.html,1,['learn'],['learning']
Usability,"cayChannel - a decay channel for a radionuclide; TGeoElementTable - table of elements. Function Members (Methods); public:. virtual~TGeoElementRN(); Double_tTGeoElement::A() const; voidTObject::AbstractMethod(const char* method) const; voidAddDecay(TGeoDecayChannel* dc); voidAddDecay(Int_t decay, Int_t diso, Double_t branchingRatio, Double_t qValue); voidTGeoElement::AddIsotope(TGeoIsotope* isotope, Double_t relativeAbundance); voidAddRatio(TGeoBatemanSol& ratio); virtual voidTObject::AppendPad(Option_t* option = """"); Int_tAtomicNo() const; virtual voidTObject::Browse(TBrowser* b); Bool_tCheckDecays() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; Int_tDecayResult(TGeoDecayChannel* dc) const; TObjArray*Decays() const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static Int_tENDF(Int_t a, Int_t z, Int_t iso); virtual Int_tENDFCode() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); voidFillPopulation(TObjArray* population, Double_t precision = 0.001, Double_t factor = 1.); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObjec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoElementRN.html:1159,Clear,Clear,1159,root/html602/TGeoElementRN.html,https://root.cern,https://root.cern/root/html602/TGeoElementRN.html,2,['Clear'],['Clear']
Usability,"ce . Definition at line 29 of file TCTUB.h. Public Member Functions;  TCTUB ();  CTUB shape default constructor. ;  ;  TCTUB (const char *name, const char *title, const char *material, Float_t rmin, Float_t rmax, Float_t dz, Float_t phi1, Float_t phi2, Float_t *lowNormal, Float_t *highNormal);  CTUB shape normal constructor. ;  ;  TCTUB (const char *name, const char *title, const char *material, Float_t rmin, Float_t rmax, Float_t dz, Float_t phi1, Float_t phi2, Float_t coslx, Float_t cosly, Float_t coslz, Float_t coshx, Float_t coshy, Float_t coshz);  CTUB shape normal constructor. ;  ;  ~TCTUB () override;  CTUB shape default destructor. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TCTUB. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TTUBS;  TTUBS ();  TUBS shape default constructor. ;  ;  TTUBS (const char *name, const char *title, const char *material, Float_t rmax, Float_t dz, Float_t phi1, Float_t phi2);  TUBS shape ""simplified"" constructor. ;  ;  TTUBS (const char *name, const char *title, const char *material, Float_t rmin, Float_t rmax, Float_t dz, Float_t phi1, Float_t phi2);  TUBS shape normal constructor. ;  ;  ~TTUBS () override;  TUBS shape default destructor. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a TUBE. ;  ; const TBuffer3D & GetBuffer3D (Int_t reqSections) const override;  Get buffer 3d. ;  ; virtual Float_t GetPhi1 () const;  ; virtual Float_t GetPhi2 () const;  ; TClass * IsA () const override;  ; void Sizeof3D () const override;  Return total X3D needed by TNode::ls (when called with option ""x"") ;  ; void Streamer (TBuffer &) override;  Stream an object of class TTUBE. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TTUBE;  TTUBE ();  TUBE shape default constructor. ;  ;  TTUBE (const char *name, const cha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCTUB.html:2038,simpl,simplified,2038,doc/master/classTCTUB.html,https://root.cern,https://root.cern/doc/master/classTCTUB.html,1,['simpl'],['simplified']
Usability,"ce Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; TMVA::VariableImportance Class ReferenceTMVA. . Definition at line 44 of file VariableImportance.h. Public Member Functions;  VariableImportance (DataLoader *loader);  ;  ~VariableImportance ();  ; virtual void Evaluate ();  Virtual method to be implemented with your algorithm. ;  ; const VariableImportanceResult & GetResults () const;  ; VIType GetType ();  ; virtual TClass * IsA () const;  ; void SetType (VIType type);  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Envelope;  ~Envelope ();  Default destructor. ;  ; virtual void BookMethod (TString methodname, TString methodtitle, TString options="""");  Method to book the machine learning method to perform the algorithm. ;  ; virtual void BookMethod (Types::EMVA method, TString methodtitle, TString options="""");  Method to book the machine learning method to perform the algorithm. ;  ; DataLoader * GetDataLoader ();  Method to get the pointer to TMVA::DataLoader object. ;  ; TFile * GetFile ();  Method to get the pointer to TFile object. ;  ; std::vector< OptionMap > & GetMethods ();  Method get the Booked methods in a option map object. ;  ; Bool_t HasMethod (TString methodname, TString methodtitle);  function to check methods booked ;  ; Bool_t IsModelPersistence ();  Method to see if the algorithm model is saved in xml or serialized files. ;  ; Bool_t IsSilentFile ();  Method to see if a file is available to save results. ;  ; Bool_t IsVerbose ();  Method to see if the algorithm should print extra information. ;  ; virtual void ParseOptions ();  Method to parse the internal option string. ;  ; void SetDataLoader (DataLo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1VariableImportance.html:1070,learn,learning,1070,doc/master/classTMVA_1_1VariableImportance.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1VariableImportance.html,1,['learn'],['learning']
Usability,"ce cannot be used.; 4.3.1 What the user must supply; The user must supply to M. a valid implementation of the FCNBase base class; parameters with their starting values; expected uncertainties on the parameters. The input parameters can be simply defined via an std::vector\(<\)double\(>\), which means that all parameters are variables. If the user wants fix a parameter or put limits on it before minimization, he has to instantiate a MnUserParameters object and then add parameters one by one, giving them a name, value, uncertainty. Once all parameters are added to MnUserParameters, he can fix a parameter or put limits on another one before handing them over to Minit for minimization.; 4.3.2 What the user can supply; Optionally the user can supply his own gradient calculator by implementing the FCNGradientBase interface or supply a full covariance matrix for input if one is available. The covariance matrix can be supplied in form of a std::vector\(<\)double\(>\) in packed storage format (upper triangular), or in a more user-friendly way by using the interface provided by the MnUserCovariance.; 4.4 Running a M minimization; Two use cases are addressed for minimization:. The user just wants the function to be minimized in one go.; The user wants to minimize the \(\mbox{FCN}\) in several minimization steps, re-using the result of the preceeding minimization in the next step and change parameters in between (fix/release/put limits on them, etc.). How M minimizations can be performed is shown in [example:main].; 4.4.1 Direct usage of minimizers; Minimizers such as the VariableMetricMinimizer are designed as state-less minimization engines, which means that they do not depend on the current function and its parameters. Any \(\mbox{FCN}\) function can be minimized with the same minimizer. The interface is restricted to minimization and no parameter interaction is possible.; 4.4.2 Using an application (MnMigrad); MnMigrad uses the VariableMetricMinimizer for minimization but a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:38611,user-friendly,user-friendly,38611,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,2,['user-friendly'],['user-friendly']
Usability,"ce file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooAbsPdf. class RooAbsPdf: public RooAbsReal. RooAbsPdf is the abstract interface for all probability density; functions The class provides hybrid analytical/numerical; normalization for its implementations, error tracing and a MC; generator interface. A minimal implementation of a PDF class derived from RooAbsPdf; should overload the evaluate() function. This functions should; return PDFs value. [Normalization/Integration]. Although the normalization of a PDF is an integral part of a; probability density function, normalization is treated separately; in RooAbsPdf. The reason is that a RooAbsPdf object is more than a; PDF: it can be a building block for a more complex, composite PDF; if any of its variables are functions instead of variables. In; such cases the normalization of the composite may not be simply the; integral over the dependents of the top level PDF as these are; functions with potentially non-trivial Jacobian terms themselves.; Therefore. --> No explicit attempt should be made to normalize; the functions output in evaluate(). In addition, RooAbsPdf objects do not have a static concept of what; variables are parameters and what variables are dependents (which; need to be integrated over for a correct PDF normalization).; Instead the choice of normalization is always specified each time a; normalized values is requested from the PDF via the getVal(); method. RooAbsPdf manages the entire normalization logic of each PDF with; help of a RooRealIntegral object, which coordinates the integration; of a given choice of normalization. By default, RooRealIntegral will; perform a fully numeric integration of all dependents. However,; PDFs can advertise one or more (partial) analytical integrals of; their function, and these will be used by RooRealIntegral, if it; determines that this is safe (i.e. no hidden Jacobian ter",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsPdf.html:1067,simpl,simply,1067,root/html526/RooAbsPdf.html,https://root.cern,https://root.cern/root/html526/RooAbsPdf.html,10,['simpl'],['simply']
Usability,"ce of a TH2 following the mouse position ;  exec1.CEcho object at mouse position ;  exec2.CEcho object at mouse position and show a graphics line ;  Fibonacci.C A TH2Poly build with Fibonacci numbers ;  fillrandom.C Fill a 1-D histogram from a parametric function ;  FirstContour.C Make a contour plot and get the first contour in a TPolyMarker ;  greyscale.C Create grey scale of 200 x 200 boxes ;  h1draw.C 1-D histogram drawing options ;  hbars.C Example of bar charts with 1-d histograms ;  hksimple.C Illustrates the advantages of a TH1K histogram ;  hlabels1.C 1-D histograms with alphanumeric labels ;  hlabels2.C 2-D histograms with alphanumeric labels ;  hstack.C Example of stacked histograms: class THStack ;  hsum.C Histograms filled and drawn in a loop ;  hsumTimer.C Demo of Timers ;  logscales.C Draw parametric functions with log scales ;  multicolor.C Use a THStack to show a 2-D hist with cells with different colors ;  ratioplot1.C Example creating a simple ratio plot of two histograms using the pois division option ;  ratioplot2.C Example of a fit residual plot ;  ratioplot3.C Example which shows how you can get the graph of the lower plot and set the y axis range for it ;  ratioplot4.C Example that shows custom dashed lines on the lower plot, specified by a vector of floats ;  ratioplot5.C Example that shows how you can set the colors of the confidence interval bands by using the method TRatioPlot::SetConfidenceIntervalColors ;  ratioplot6.C Example showing a fit residual plot, where the separation margin has been set to 0 ;  ratioplotOld.CExample displaying two histograms and their ratio ;  rebin.C Rebin a variable bin-width histogram ;  reverseaxis.C Example showing an histogram with reverse axis ;  sparsehist.CEvaluate the performance of THnSparse vs TH1/2/3/nF for different numbers of dimensions and bins per dimension ;  statsEditing.C Edit statistics box ;  testSmooth.C Histogram smoothing ;  th2polyBoxes.C This tutorial illustrates how to create an hist",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:122929,simpl,simple,122929,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,1,['simpl'],['simple']
Usability,"ce.cxx. ◆ GetDataType() [1/2]. BinData::ErrorType ROOT::Fit::GetDataType ; (; const TGraph * ; gr, . DataOptions & ; fitOpt . ). Definition at line 476 of file HFitInterface.cxx. ◆ GetDataType() [2/2]. BinData::ErrorType ROOT::Fit::GetDataType ; (; const TGraph2D * ; gr, . const DataOptions & ; fitOpt . ). Definition at line 545 of file HFitInterface.cxx. ◆ Init2DGaus(). void ROOT::Fit::Init2DGaus ; (; const ROOT::Fit::BinData & ; data, . TF1 * ; f1 . ). compute initial parameter for 2D gaussian function given the fit data Set the sigma limits for zero top 10* initial rms values Set the initial parameter values in the TF1 ; Compute Initial values of parameters for a gaussian derived from function H1InitGaus defined in TH1.cxx. ; Definition at line 388 of file HFitInterface.cxx. ◆ InitExpo(). void ROOT::Fit::InitExpo ; (; const ROOT::Fit::BinData & ; data, . TF1 * ; f1 . ). compute initial parameter for an exponential function given the fit data Set the constant and slope assuming a simple exponential going through xmin and xmax of the data set ; Compute rough values of parameters for an exponential. ; Definition at line 267 of file HFitInterface.cxx. ◆ InitGaus(). void ROOT::Fit::InitGaus ; (; const ROOT::Fit::BinData & ; data, . TF1 * ; f1 . ). compute initial parameter for gaussian function given the fit data Set the sigma limits for zero top 10* initial rms values Set the initial parameter values in the TF1 ; Compute Initial values of parameters for a gaussian derived from function H1InitGaus defined in TH1.cxx. ; Definition at line 306 of file HFitInterface.cxx. ◆ lessRange(). bool ROOT::Fit::lessRange ; (; const std::pair< double, double > & ; r1, . const std::pair< double, double > & ; r2 . ). Definition at line 73 of file DataRange.cxx. ◆ operator<<(). ostream & ROOT::Fit::operator<< ; (; ostream & ; os, . const ROOT::Fit::Box & ; b . ). Definition at line 374 of file SparseData.cxx. ◆ UnBinFit(). TFitResultPtr ROOT::Fit::UnBinFit ; (; ROOT::Fit::UnBinData * ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Fit.html:16221,simpl,simple,16221,doc/master/namespaceROOT_1_1Fit.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Fit.html,2,['simpl'],['simple']
Usability,"ceX[fNox] number of candidates in X slice; Int_t*fNsliceY[fNoy] number of candidates in Y slice; Int_t*fNsliceZ[fNoz] number of candidates in Z slice; Int_tfNxlength of array of X voxels; Int_tfNylength of array of Y voxels; Int_tfNzlength of array of Z voxels; Int_t*fOBx[fNox] offsets of daughter indices for slices X; Int_t*fOBy[fNoy] offsets of daughter indices for slices Y; Int_t*fOBz[fNoz] offsets of daughter indices for slices Z; Int_t*fOEx[fNox] offsets of extra indices for slices X; Int_t*fOEy[fNoy] offsets of extra indices for slices Y; Int_t*fOEz[fNoz] offsets of extra indices for slices Z; Int_tfPriority[3]priority for each axis; vector<ThreadData_t*>fThreadData!; Int_tfThreadSize!; TGeoVolume*fVolumevolume to which applies; Double_t*fXb[fIbx] ordered array of X box boundaries; Double_t*fYb[fIby] ordered array of Y box boundaries; Double_t*fZb[fIbz] ordered array of Z box boundaries. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void ClearThreadData() const. TGeoVoxelFinder(); Default constructor. TGeoVoxelFinder(TGeoVolume* vol); Default constructor. TGeoVoxelFinder(const TGeoVoxelFinder& ); copy constructor. TGeoVoxelFinder& operator=(const TGeoVoxelFinder& ); assignment operator. ~TGeoVoxelFinder(); Destructor; printf(""deleting finder of %s\n"", fVolume->GetName());. Int_t GetNcandidates(Int_t tid = 0) const. Int_t* GetCheckList(Int_t& nelem, Int_t tid = 0) const. void BuildVoxelLimits(); build the array of bounding boxes of the nodes inside. void CreateCheckList(Int_t tid = 0); Initializes check list. void DaughterToMother(Int_t id, Double_t* local, Double_t* master) const; convert a point from the local reference system of node id to reference; system of mother volume. Bool_t IsSafeVoxel(Double_t* point, Int_t inode, Double_t minsafe) const; Computes squared distance from POINT to the voxel(s) containing node INODE. Returns 0; if POINT inside voxel(s). Double_t Efficiency(); --- Compute voxelization efficien",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoVoxelFinder.html:9616,Clear,ClearThreadData,9616,root/html532/TGeoVoxelFinder.html,https://root.cern,https://root.cern/root/html532/TGeoVoxelFinder.html,1,['Clear'],['ClearThreadData']
Usability,"ce_Check(pyobject);; 200 ; 201// all C++ objects should have sq_item defined, but a user-derived class may; 202// have deleted it, in which case this is not a sequence; 203 PyTypeObject* t = Py_TYPE(pyobject);; 204 if (!t->tp_as_sequence || !t->tp_as_sequence->sq_item); 205 return false;; 206 ; 207// if this is the default getitem, it is only a sequence if it's an array type; 208 if (t->tp_as_sequence->sq_item == CPPInstance_Type.tp_as_sequence->sq_item) {; 209 if (((CPPInstance*)pyobject)->fFlags & CPPInstance::kIsArray); 210 return true;; 211 return false;; 212 }; 213 ; 214// TODO: could additionally verify whether __len__ is supported and/or whether; 215// operator()[] takes an int argument type; 216 ; 217 return true;; 218}; 219 ; 220//-----------------------------------------------------------------------------; 221bool CPyCppyy::Instance_IsLively(PyObject* pyobject); 222{; 223// Test whether the given instance can safely return to C++; 224 if (!CPPInstance_Check(pyobject)); 225 return true; // simply don't know; 226 ; 227// the instance fails the lively test if it owns the C++ object while having a; 228// reference count of 1 (meaning: it could delete the C++ instance any moment); 229 if (pyobject->ob_refcnt <= 1 && (((CPPInstance*)pyobject)->fFlags & CPPInstance::kIsOwner)); 230 return false;; 231 ; 232 return true;; 233}; 234 ; 235//-----------------------------------------------------------------------------; 236bool CPyCppyy::Overload_Check(PyObject* pyobject); 237{; 238// Test if the given pyobject is of CPPOverload derived type.; 239 if (!Initialize()); 240 return false;; 241 ; 242// detailed walk through inheritance hierarchy; 243 return CPPOverload_Check(pyobject);; 244}; 245 ; 246//-----------------------------------------------------------------------------; 247bool CPyCppyy::Overload_CheckExact(PyObject* pyobject); 248{; 249// Test if the given pyobject is of CPPOverload type.; 250 if (!Initialize()); 251 return false;; 252 ; 253// direct pointer co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/API_8cxx_source.html:7789,simpl,simply,7789,doc/master/API_8cxx_source.html,https://root.cern,https://root.cern/doc/master/API_8cxx_source.html,1,['simpl'],['simply']
Usability,"ced by st; - & is replaced by rf. If a cutfilename is specified, for each entry, we execute; if (cutfilename()) htemp->Fill(macrofilename());; If no cutfilename is specified, for each entry we execute; htemp(macrofilename());. The default for the histogram are the same as for; TTreePlayer::DrawSelect. Long64_t DrawSelect(const char* varexp, const char* selection, Option_t* option, Long64_t nentries, Long64_t firstentry); Draw expression varexp for specified entries; Returns -1 in case of error or number of selected events in case of success. varexp is an expression of the general form; - ""e1"" produces a 1-d histogram of expression ""e1""; - ""e1:e2"" produces a 2-d histogram (or profile) of ""e1"" versus ""e2""; - ""e1:e2:e3"" produces a 3-d scatter-plot of ""e1"" versus ""e2"" versus ""e3""; - ""e1:e2:e3:e4"" produces a 3-d scatter-plot of ""e1"" versus ""e2"" versus ""e3""; and ""e4"" mapped on the color number. Example:; varexp = x simplest case: draw a 1-Dim distribution of column named x; = sqrt(x) : draw distribution of sqrt(x); = x*y/z; = y:sqrt(x) 2-Dim distribution of y versus sqrt(x); = px:py:pz:2.5*E produces a 3-d scatter-plot of px vs py ps pz; and the color number of each marker will be 2.5*E.; If the color number is negative it is set to 0.; If the color number is greater than the current number of colors; it is set to the highest color number.; The default number of colors is 50.; see TStyle::SetPalette for setting a new color palette. Note that the variables e1, e2 or e3 may contain a selection.; example, if e1= x*(y<0), the value histogrammed will be x if y<0; and will be 0 otherwise. The expressions can use all the operations and build-in functions; supported by TFormula (See TFormula::Analyze), including free; standing function taking numerical arguments (TMath::Bessel).; In addition, you can call member functions taking numerical; arguments. For example:; - ""TMath::BreitWigner(fPx,3,2)""; - ""event.GetHistogram().GetXaxis().GetXmax()""; Note: You can only pass expression th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTreePlayer.html:19371,simpl,simplest,19371,root/html528/TTreePlayer.html,https://root.cern,https://root.cern/root/html528/TTreePlayer.html,1,['simpl'],['simplest']
Usability,"cence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » First Steps With ROOT Showing results with ROOT. The ROOT framework consists of many classes, grouped into several categories. Finally, the latter are grouped into few top-level categories. Each top-level category comes with a basic description of the framework design and of the purpose of its categories, which also have more detailed documentation about their use. The most complete documentation is the Reference Guide, that contains the automatically generated documentation of each class.; This document is about the top-level categories related to graphical output. . ‹ TMVA; up; Canvases and pads ›. Navigate through this book; Processing data with ROOT; Showing results with ROOTCanvases and pads; Graphics 2D; Graphics 3D. Simulation in ROOT; ROOT I/O. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/showing-results-root.html:2861,guid,guidelines,2861,d/showing-results-root.html,https://root.cern,https://root.cern/d/showing-results-root.html,1,['guid'],['guidelines']
Usability,"ch ""py"" contains floats, too; access those as myPy.; TTreeReaderValue<Float_t> myPy(myReader, ""py"");; ; // Loop over all entries of the TTree or TChain.; while (myReader.Next()) {; // Just access the data as if myPx and myPy were iterators (note the '*'; // in front of them):; myHist->Fill(*myPx + *myPy);; }; ; myHist->Draw();; }; TFile.h; TH1F.h; TTreeReaderValue.h; TTreeReader.h; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TTreeReaderValueAn interface for reading values stored in ROOT columnar datasets.Definition TTreeReaderValue.h:174; TTreeReaderA simple, robust and fast interface to read values from ROOT columnar datasets such as TTree,...Definition TTreeReader.h:46; A more complete example including error handling and a few combinations of TTreeReaderValue and TTreeReaderArray would look like this:; #include <TFile.h>; #include <TH1.h>; #include <TTreeReader.h>; #include <TTreeReaderValue.h>; #include <TTreeReaderArray.h>; ; #include ""TriggerInfo.h""; #include ""Muon.h""; #include ""Tau.h""; ; #include <vector>; #include <iostream>; ; bool CheckValue(ROOT::Internal::TTreeReaderValueBase& value) {; if (value.GetSetupStatus() < 0) {; std::cerr << ""Error "" << value.GetSetupStatus(); << ""setting up reader for "" << value.GetBranchName() << '\n';; return false;; }; return true;; }; ; ; // Analyze the tree ""MyTree"" in the file passed into the function.; // Returns false in case of errors.; bool analyze(TFile* file) {; // Create a TTreeReader named ""MyTree"" from the given TDirectory.; // The TTreeReader gives access to the TTree to the TTreeReaderValue and; // TTreeReaderArr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeReader.html:2766,simpl,simple,2766,doc/master/classTTreeReader.html,https://root.cern,https://root.cern/doc/master/classTTreeReader.html,1,['simpl'],['simple']
Usability,"ch type of prefilling is used.; The two value currently supported are:; TTreeCache::kNoPrefill disable the prefilling; TTreeCache::kAllBranches fill the cache with baskets from all branches.; The default prefilling behavior can be controlled by setting; TTreeCache.Prefill or the environment variable ROOT_TTREECACHE_PREFILL. void StartLearningPhase(); The name should be enough to explain the method.; The only additional comments is that the cache is cleaned before; the new learning phase. void StopLearningPhase(); This is the counterpart of StartLearningPhase() and can be used to stop; the learning phase. It's useful when the user knows exactly what branches; they are going to use.; For the moment it's just a call to FillBuffer() since that method; will create the buffer lists from the specified branches. void UpdateBranches(TTree* tree); Update pointer to current Tree and recompute pointers to the branches in the cache. void LearnPrefill(); Perform an initial prefetch, attempting to read as much of the learning; phase baskets for all branches at once. TTreeCache(const TTreeCache& ). TTreeCache& operator=(const TTreeCache& ). void Disable(); {fEnabled = kFALSE;}. void Enable(); {fEnabled = kTRUE;}. const TObjArray * GetCachedBranches() const; { return fBranches; }. EPrefillType GetConfiguredPrefillType() const. Int_t GetEntryMin() const; {return fEntryMin;}. Int_t GetEntryMax() const; {return fEntryMax;}. EPrefillType GetLearnPrefill() const; {return fPrefillType;}. TTree * GetTree() const; {return fTree;}. Bool_t IsAutoCreated() const; {return fAutoCreated;}. Bool_t IsEnabled() const; {return fEnabled;}. Bool_t IsLearning() const; {return fIsLearning;}. void SetAutoCreated(Bool_t val); {fAutoCreated = val;}. » Author: Rene Brun 04/06/2006 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id$ » Last generated: 2015-06-02 16:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TTreeCache.html:27781,learn,learning,27781,root/html604/TTreeCache.html,https://root.cern,https://root.cern/root/html604/TTreeCache.html,3,"['Learn', 'learn']","['LearnPrefill', 'learning']"
Usability,"ch type of prefilling is used.; The two value currently supported are:; TTreeCache::kNoPrefill disable the prefilling; TTreeCache::kAllBranches fill the cache with baskets from all branches.; The default prefilling behavior can be controlled by setting; TTreeCache.Prefill or the environment variable ROOT_TTREECACHE_PREFILL. void StartLearningPhase(); The name should be enough to explain the method.; The only additional comments is that the cache is cleaned before; the new learning phase. void StopLearningPhase(); This is the counterpart of StartLearningPhase() and can be used to stop; the learning phase. It's useful when the user knows exactly what branches; they are going to use.; For the moment it's just a call to FillBuffer() since that method; will create the buffer lists from the specified branches. void UpdateBranches(TTree* tree); Update pointer to current Tree and recompute pointers to the branches in the cache. void LearnPrefill(); Perform an initial prefetch, attempting to read as much of the learning; phase baskets for all branches at once. TTreeCache(const TTreeCache& ). TTreeCache& operator=(const TTreeCache& ). void Disable(); {fEnabled = kFALSE;}. void Enable(); {fEnabled = kTRUE;}. const TObjArray * GetCachedBranches() const; { return fBranches; }. EPrefillType GetConfiguredPrefillType() const. Int_t GetEntryMin() const; {return fEntryMin;}. Int_t GetEntryMax() const; {return fEntryMax;}. EPrefillType GetLearnPrefill() const; {return fPrefillType;}. TTree * GetTree() const; {return fTree;}. Bool_t IsAutoCreated() const; {return fAutoCreated;}. Bool_t IsEnabled() const; {return fEnabled;}. Bool_t IsLearning() const; {return fIsLearning;}. void SetAutoCreated(Bool_t val); {fAutoCreated = val;}. » Author: Rene Brun 04/06/2006 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id$ » Last generated: 2015-06-30 15:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTreeCache.html:27085,learn,learning,27085,root/html602/TTreeCache.html,https://root.cern,https://root.cern/root/html602/TTreeCache.html,3,"['Learn', 'learn']","['LearnPrefill', 'learning']"
Usability,"ch*Branch(const char* name, long address, const char* leaflist, Int_t bufsize = 32000); TBranch*Branch(const char* name, int address, const char* leaflist, Int_t bufsize = 32000); TBranch*Branch(const char* name, void** obj, Int_t bufsize = 32000, Int_t splitlevel = 99); TBranch*Branch(const char* name, const char* classname, void** obj, Int_t bufsize = 32000, Int_t splitlevel = 99); virtual TBranch*BranchOld(const char* name, const char* classname, void* addobj, Int_t bufsize = 32000, Int_t splitlevel = 1); virtual TBranch*BranchRef(); virtual TBranch*Bronch(const char* name, const char* classname, void* addobj, Int_t bufsize = 32000, Int_t splitlevel = 99); virtual voidBrowse(TBrowser*); virtual Int_tBuildIndex(const char* majorname, const char* minorname = ""0""); TStreamerInfo*BuildStreamerInfo(TClass* cl, void* pointer = 0, Bool_t canOptimize = kTRUE); virtual TFile*ChangeFile(TFile* file); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual TTree*CloneTree(Long64_t nentries = -1, Option_t* option = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidCopyAddresses(TTree*, Bool_t undo = kFALSE); virtual Long64_tCopyEntries(TTree* tree, Long64_t nentries = -1, Option_t* option = """"); virtual TTree*CopyTree(const char* selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); virtual TBasket*CreateBasket(TBranch*); Int_tDebug() const; virtual voidDelete(Option_t* option = """")MENU ; virtual voidDirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* opt); virtual Long64_tDraw(const char* varexp, const TCut& selection, Option_t* option = """", Long64_t nentries = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TTree.html:13801,Clear,Clear,13801,root/html532/TTree.html,https://root.cern,https://root.cern/root/html532/TTree.html,1,['Clear'],['Clear']
Usability,"ch.GetOutput();; 1338 auto weights = batch.GetWeights();; 1339 ; 1340 //std::cout << "" input use count "" << inputTensor.GetBufferUseCount() << std::endl;; 1341 // should we apply droput to the loss ??; 1342 minValError += deepNet.Loss(inputTensor, outputMatrix, weights, false, includeRegularization);; 1343 }; 1344 // add Regularization term; 1345 Double_t regzTerm = (includeRegularization) ? deepNet.RegularizationTerm() : 0.0;; 1346 minValError /= (Double_t)(nValidationSamples / settings.batchSize);; 1347 minValError += regzTerm;; 1348 ; 1349 ; 1350 // create a pointer to base class VOptimizer; 1351 std::unique_ptr<DNN::VOptimizer<Architecture_t, Layer_t, DeepNet_t>> optimizer;; 1352 ; 1353 // initialize the base class pointer with the corresponding derived class object.; 1354 switch (O) {; 1355 ; 1356 case EOptimizer::kSGD:; 1357 optimizer = std::unique_ptr<DNN::TSGD<Architecture_t, Layer_t, DeepNet_t>>(; 1358 new DNN::TSGD<Architecture_t, Layer_t, DeepNet_t>(settings.learningRate, deepNet, settings.momentum));; 1359 break;; 1360 ; 1361 case EOptimizer::kAdam: {; 1362 optimizer = std::unique_ptr<DNN::TAdam<Architecture_t, Layer_t, DeepNet_t>>(; 1363 new DNN::TAdam<Architecture_t, Layer_t, DeepNet_t>(; 1364 deepNet, settings.learningRate, settings.optimizerParams[""ADAM_beta1""],; 1365 settings.optimizerParams[""ADAM_beta2""], settings.optimizerParams[""ADAM_eps""]));; 1366 break;; 1367 }; 1368 ; 1369 case EOptimizer::kAdagrad:; 1370 optimizer = std::unique_ptr<DNN::TAdagrad<Architecture_t, Layer_t, DeepNet_t>>(; 1371 new DNN::TAdagrad<Architecture_t, Layer_t, DeepNet_t>(deepNet, settings.learningRate,; 1372 settings.optimizerParams[""ADAGRAD_eps""]));; 1373 break;; 1374 ; 1375 case EOptimizer::kRMSProp:; 1376 optimizer = std::unique_ptr<DNN::TRMSProp<Architecture_t, Layer_t, DeepNet_t>>(; 1377 new DNN::TRMSProp<Architecture_t, Layer_t, DeepNet_t>(deepNet, settings.learningRate, settings.momentum,; 1378 settings.optimizerParams[""RMSPROP_rho""],; 1379 settings.optimizerParams",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDL_8cxx_source.html:53749,learn,learningRate,53749,doc/master/MethodDL_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDL_8cxx_source.html,1,['learn'],['learningRate']
Usability,"chSize);  Setters. ;  ; void SetDepth (size_t depth);  ; virtual void SetDropoutProbability (Scalar_t);  Set Dropout probability. ;  ; virtual void SetExtraLayerParameters (const std::vector< Matrix_t > &);  ; void SetHeight (size_t height);  ; void SetInputDepth (size_t inputDepth);  ; void SetInputHeight (size_t inputHeight);  ; void SetInputWidth (size_t inputWidth);  ; void SetIsTraining (bool isTraining);  ; void SetWidth (size_t width);  ; void Update (const Scalar_t learningRate);  Updates the weights and biases, given the learning rate. ;  ; void UpdateBiases (const std::vector< Matrix_t > &biasGradients, const Scalar_t learningRate);  Updates the biases, given the gradients and the learning rate. ;  ; void UpdateBiasGradients (const std::vector< Matrix_t > &biasGradients, const Scalar_t learningRate);  Updates the bias gradients, given some other weight gradients and learning rate. ;  ; void UpdateWeightGradients (const std::vector< Matrix_t > &weightGradients, const Scalar_t learningRate);  Updates the weight gradients, given some other weight gradients and learning rate. ;  ; void UpdateWeights (const std::vector< Matrix_t > &weightGradients, const Scalar_t learningRate);  Updates the weights, given the gradients and the learning rate,. ;  ; void WriteMatrixToXML (void *node, const char *name, const Matrix_t &matrix);  ; void WriteTensorToXML (void *node, const char *name, const std::vector< Matrix_t > &tensor);  helper functions for XML ;  . Private Attributes; bool fFlattening;  Whether the layer is doing flattening. ;  . Additional Inherited Members;  Protected Attributes inherited from TMVA::DNN::VGeneralLayer< Architecture_t >; Tensor_t fActivationGradients;  Gradients w.r.t. the activations of this layer. ;  ; size_t fBatchSize;  Batch size used for training and evaluation. ;  ; std::vector< Matrix_t > fBiases;  The biases associated to the layer. ;  ; std::vector< Matrix_t > fBiasGradients;  Gradients w.r.t. the bias values of the layer. ;  ; size_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TReshapeLayer.html:6415,learn,learningRate,6415,doc/master/classTMVA_1_1DNN_1_1TReshapeLayer.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TReshapeLayer.html,2,['learn'],"['learning', 'learningRate']"
Usability,"chSize);  Setters. ;  ; void SetDepth (size_t depth);  ; virtual void SetDropoutProbability (Scalar_t);  Set Dropout probability. ;  ; virtual void SetExtraLayerParameters (const std::vector< Matrix_t > &);  ; void SetHeight (size_t height);  ; void SetInputDepth (size_t inputDepth);  ; void SetInputHeight (size_t inputHeight);  ; void SetInputWidth (size_t inputWidth);  ; void SetIsTraining (bool isTraining);  ; void SetWidth (size_t width);  ; void Update (const Scalar_t learningRate);  Updates the weights and biases, given the learning rate. ;  ; void UpdateBiases (const std::vector< Matrix_t > &biasGradients, const Scalar_t learningRate);  Updates the biases, given the gradients and the learning rate. ;  ; void UpdateBiasGradients (const std::vector< Matrix_t > &biasGradients, const Scalar_t learningRate);  Updates the bias gradients, given some other weight gradients and learning rate. ;  ; void UpdateWeightGradients (const std::vector< Matrix_t > &weightGradients, const Scalar_t learningRate);  Updates the weight gradients, given some other weight gradients and learning rate. ;  ; void UpdateWeights (const std::vector< Matrix_t > &weightGradients, const Scalar_t learningRate);  Updates the weights, given the gradients and the learning rate,. ;  ; void WriteMatrixToXML (void *node, const char *name, const Matrix_t &matrix);  ; void WriteTensorToXML (void *node, const char *name, const std::vector< Matrix_t > &tensor);  helper functions for XML ;  . Protected Attributes; Tensor_t fActivationGradients;  Gradients w.r.t. the activations of this layer. ;  ; size_t fBatchSize;  Batch size used for training and evaluation. ;  ; std::vector< Matrix_t > fBiases;  The biases associated to the layer. ;  ; std::vector< Matrix_t > fBiasGradients;  Gradients w.r.t. the bias values of the layer. ;  ; size_t fDepth;  The depth of the layer. ;  ; size_t fHeight;  The height of the layer. ;  ; EInitialization fInit;  The initialization method. ;  ; size_t fInputDepth;  The depth",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html:5667,learn,learningRate,5667,doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html,2,['learn'],"['learning', 'learningRate']"
Usability,"chamber volumes ? No, we will just need to replicate the; ones that we have already created. chamber->AddNode(wire_co, 1, new TGeoTranslation(-0.2,0,0));; chamber->AddNode(wire_co, 2, new TGeoTranslation(0.2,0,0));. The 2 nodes that we have created inside chamber will both point to a wire_co; object, but will be completely distinct : WIRE_CO_1 and WIRE_CO_2. We will; want now to place symetrically 1000 chambers on a pad, following a pattern; of 20 rows and 50 columns. One way to do this will be to replicate our chamber; by positioning it 1000 times in different positions of the pad. Unfortunatelly,; this is far from being the optimal way of doing what we want.; Imagine that we would like to find out which of the 1000 chambers is containing; a (x,y,z) point defined in the pad reference. You will never have to do that,; since the modeller will take care of it for you, but let's guess what it has; to do. The most simple algorithm will just loop over all daughters, convert; the point from mother to local reference and check if the current chamber; contains the point or not. This might be efficient for pads with few chambers,; but definitely not for 1000. Fortunately the modeler is smarter than that and; create for each volume some optimization structures called voxels (see Voxelization); to minimize the penalty having too many daughters, but if you have 100 pads like; this in your geometry you will anyway loose a lot in your tracking performance. The way out when volumes can be arranged according to simple patterns is the; usage of divisions. We will describe them in detail later on. Let's think now; at a different situation : instead of 1000 chambers of the same type, we may; have several types of chambers. Let's say all chambers are cylindrical and have; a wire inside, but their dimensions are different. However, we would like all; to be represented by a single volume family, since they have the same properties. Volume families (TGeoVolumeMulti). A volume family is re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoVolume.html:9428,simpl,simple,9428,root/html534/TGeoVolume.html,https://root.cern,https://root.cern/root/html534/TGeoVolume.html,18,['simpl'],['simple']
Usability,char * TProofCondor::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TProofCondor::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 53 of file TProofCondor.h. ◆ DeclFileName(). static const char * TProofCondor::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 53 of file TProofCondor.h. ◆ GetJobAd(). TString TProofCondor::GetJobAd ; (; ). protected . Get job Ad. ; Definition at line 309 of file TProofCondor.cxx. ◆ IsA(). TClass * TProofCondor::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TProof.; Definition at line 53 of file TProofCondor.h. ◆ SetActive() [1/2]. virtual void TProofCondor::SetActive ; (; ). inlinevirtual . Definition at line 50 of file TProofCondor.h. ◆ SetActive() [2/2]. void TProofCondor::SetActive ; (; Bool_t ; active). virtual . Suspend or resume PROOF via Condor. ; Definition at line 283 of file TProofCondor.cxx. ◆ StartSlaves(). Bool_t TProofCondor::StartSlaves ; (; Bool_t ; ). overrideprotectedvirtual . Setup Condor workers using dynamic information. ; Reimplemented from TProof.; Definition at line 81 of file TProofCondor.cxx. ◆ Streamer(). void TProofCondor::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TProof. ◆ StreamerNVirtual(). void TProofCondor::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 53 of file TProofCondor.h. Friends And Related Symbol Documentation. ◆ TCondor. friend class TCondor. friend . Definition at line 35 of file TProofCondor.h. Member Data Documentation. ◆ fCondor. TCondor* TProofCondor::fCondor. private . Definition at line 38 of file TProofCondor.h. ◆ fTimer. TTimer* TProofCondor::fTimer. private . Definition at line 39 of file TProofCondor.h. proof/proof/inc/TProofCondor.h; proof/proof/src/TP,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofCondor.html:45799,resume,resume,45799,doc/master/classTProofCondor.html,https://root.cern,https://root.cern/doc/master/classTProofCondor.html,1,['resume'],['resume']
Usability,"char *msg);  ; virtual Int_t NumberOfConnections () const;  Return number of connections for this object. ;  ; virtual Int_t NumberOfSignals () const;  Return number of signals for this object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGLViewer; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TGLColorSet & GetDefaultColorSet ();  Returns reference to the default color-set. ;  ; static Bool_t IsUsingDefaultColorSetForNewViewers ();  Returns the value of the static flag that determines if new viewers should use the default color-set. ;  ; static void SetAxisLabelScale (Float_t als);  Sets static scaling facor that allows simple guide axies to have label values scaled relative to actual scene dimensions. ;  ; static void UseDefaultColorSetForNewViewers (Bool_t x);  Sets static flag that determines if new viewers should use the default color-set. ;  ;  Static Public Member Functions inherited from TVirtualViewer3D; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TVirtualViewer3D * Viewer3D (TVirtualPad *pad=nullptr, Option_t *type="""");  Create a Viewer 3D of specified type. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLEmbeddedViewer.html:26682,simpl,simple,26682,doc/master/classTGLEmbeddedViewer.html,https://root.cern,https://root.cern/doc/master/classTGLEmbeddedViewer.html,2,"['guid', 'simpl']","['guide', 'simple']"
Usability,"char* classname, void* addobj, Int_t bufsize = 32000, Int_t splitlevel = 99); virtual TBranch*BranchOld(const char* name, const char* classname, void* addobj, Int_t bufsize = 32000, Int_t splitlevel = 1); virtual TBranch*BranchRef(); virtual TBranch*Bronch(const char* name, const char* classname, void* addobj, Int_t bufsize = 32000, Int_t splitlevel = 99); virtual voidBrowse(TBrowser*); virtual Int_tBuildIndex(const char* majorname, const char* minorname = ""0""); TStreamerInfo*BuildStreamerInfo(TClass* cl, void* pointer = 0, Bool_t canOptimize = kTRUE); virtual TFile*ChangeFile(TFile* file); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual TTree*CloneTree(Long64_t nentries = -1, Option_t* option = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidCopyAddresses(TTree*, Bool_t undo = kFALSE); virtual Long64_tCopyEntries(TTree* tree, Long64_t nentries = -1, Option_t* option = """"); virtual TTree*CopyTree(const char* selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); virtual TBasket*CreateBasket(TBranch*); Int_tDebug() const; virtual voidDelete(Option_t* option = """")MENU ; virtual voidDirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* opt); virtual Long64_tDraw(const char* varexp, const TCut& selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); virtual Long64_tDraw(const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0)MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTree.html:13726,undo,undo,13726,root/html528/TTree.html,https://root.cern,https://root.cern/root/html528/TTree.html,1,['undo'],['undo']
Usability,"char* errinfo = 0); voidBeforeIOoperation(); voidTBufferFile::CheckCount(UInt_t offset); UInt_tTBufferFile::CheckObject(UInt_t offset, const TClass* cl, Bool_t readClass = kFALSE); voidCheckVersionBuf(); voidCreateElemNode(const TStreamerElement* elem); XMLNodePointer_tCreateItemNode(const char* name); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; Bool_tExtractPointer(XMLNodePointer_t node, void*& ptr, TClass*& cl); voidExtractReference(XMLNodePointer_t node, const void* ptr, const TClass* cl); const char*TXMLSetup::GetElItemName(TStreamerElement* el); Bool_tTXMLSetup::IsValidXmlSetup(const char* setupstr); voidTObject::MakeZombie(); voidTBufferFile::operator=(const TBufferFile&); voidPerformPostProcessing(); voidPerformPreProcessing(const TStreamerElement* elem, XMLNodePointer_t elemnode); TXMLStackObj*PopStack(); Bool_tProcessPointer(const void* ptr, XMLNodePointer_t node); TXMLStackObj*PushStack(XMLNodePointer_t current, Bool_t simple = kFALSE); virtual Int_tTBuffer::Read(const char* name); Bool_tTXMLSetup::ReadSetupFromStr(const char* setupstr); voidRegisterPointer(const void* ptr, XMLNodePointer_t node); voidSetCompressionLevel(int level); voidSetXML(TXMLEngine* xml); voidShiftStack(const char* info = 0); TXMLStackObj*Stack(Int_t depth = 0); XMLNodePointer_tStackNode(); Bool_tVerifyAttr(XMLNodePointer_t node, const char* name, const char* value, const char* errinfo = 0); Bool_tVerifyElemNode(const TStreamerElement* elem); Bool_tVerifyItemNode(const char* name, const char* errinfo = 0); Bool_tVerifyNode(XMLNodePointer_t node, const char* name, const char* errinfo = 0); Bool_tVerifyStackAttr(const char* name, const char* value, const char* errinfo = 0); Bool_tVerifyStackNode(const char* name, const char* errinfo = 0); voidWorkWithClass(TStreamerInfo* info, const TClass* cl = 0); voidWorkWithElement(TStreamerElement* elem, Int_t number); virtual Int_tTBuffer::Write(const char* name, Int_t opt, Int_t bufs); virtual",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TBufferXML.html:18813,simpl,simple,18813,root/html528/TBufferXML.html,https://root.cern,https://root.cern/root/html528/TBufferXML.html,1,['simpl'],['simple']
Usability,"char* title = 0); virtual~RooWorkspace(); voidTObject::AbstractMethod(const char* method) const; static voidaddClassDeclImportDir(const char* dir); static voidaddClassImplImportDir(const char* dir); Bool_taddStudy(RooAbsStudy& study); RooArgSetallCatFunctions() const; RooArgSetallCats() const; list<RooAbsData*>allData() const; list<RooAbsData*>allEmbeddedData() const; RooArgSetallFunctions() const; list<TObject*>allGenericObjects() const; RooArgSetallPdfs() const; RooArgSetallResolutionModels() const; RooArgSetallVars() const; virtual voidTObject::AppendPad(Option_t* option = """"); RooAbsArg*arg(const char* name) const; RooArgSetargSet(const char* nameList) const; static voidautoImportClassCode(Bool_t flag); virtual voidTObject::Browse(TBrowser* b); Bool_tcancelTransaction(); RooCategory*cat(const char* name) const; RooAbsCategory*catfunc(const char* name) const; Bool_tcd(const char* path = 0); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidclearStudies(); virtual TObject*TNamed::Clone(const char* newname = """") const; Bool_tcommitTransaction(); virtual Int_tTNamed::Compare(const TObject* obj) const; TIterator*componentIterator() const; const RooArgSet&components() const; virtual voidTNamed::Copy(TObject& named) const; RooAbsData*data(const char* name) const; Bool_tdefineSet(const char* name, const char* contentList); Bool_tdefineSet(const char* name, const RooArgSet& aset, Bool_t importMissing = kFALSE); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; RooAbsData*embeddedData(const char* name) const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooWorkspace.html:2459,Clear,Clear,2459,root/html534/RooWorkspace.html,https://root.cern,https://root.cern/root/html534/RooWorkspace.html,1,['Clear'],['Clear']
Usability,"character mark at position pos. ; See also SetCursorPosition(). ; Definition at line 693 of file TGTextEntry.cxx. ◆ operator=(). TGTextEntry & TGTextEntry::operator= ; (; const TGTextEntry & ; ). privatedelete . ◆ Paste(). void TGTextEntry::Paste ; (; ). protected . Inserts text at the cursor position, deleting any previous marked text. ; See also CopyText() Cut(). ; Definition at line 947 of file TGTextEntry.cxx. ◆ PastePrimary(). void TGTextEntry::PastePrimary ; (; Window_t ; wid, . Atom_t ; property, . Bool_t ; del . ). protectedvirtual . Paste text from selection (either primary or cut buffer) into text entry widget. ; Definition at line 1542 of file TGTextEntry.cxx. ◆ Remove(). void TGTextEntry::Remove ; (; ). Deletes all characters on the right side of the cursor. ; See also Del() Backspace(). ; Definition at line 919 of file TGTextEntry.cxx. ◆ RemoveText(). void TGTextEntry::RemoveText ; (; Int_t ; start, . Int_t ; end . ). virtual . Removes text at the range, clears the selection and moves the cursor to the end of the line. ; See also GetText(), InsertText(), SetText(), AppendText(). ; Definition at line 1699 of file TGTextEntry.cxx. ◆ ReturnPressed(). void TGTextEntry::ReturnPressed ; (; ). virtual . This signal is emitted when the return or enter key is pressed. ; Reimplemented in TGNumberEntryField.; Definition at line 393 of file TGTextEntry.cxx. ◆ SavePrimitive(). void TGTextEntry::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save a text entry widget as a C++ statement(s) on output stream out. ; Reimplemented from TGFrame.; Definition at line 1827 of file TGTextEntry.cxx. ◆ ScrollByChar(). void TGTextEntry::ScrollByChar ; (; ). protectedvirtual . Shift position of cursor by one character. ; Definition at line 1583 of file TGTextEntry.cxx. ◆ SelectAll(). void TGTextEntry::SelectAll ; (; ). virtual . Selects all text (i.e. ; marks it) and moves the cursor to the end. Useful when a default value has been inserte",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTextEntry.html:60302,clear,clears,60302,doc/master/classTGTextEntry.html,https://root.cern,https://root.cern/doc/master/classTGTextEntry.html,1,['clear'],['clears']
Usability,"cheElement>::wireCache(). Data Members; protected:. static Bool_t_clearObsListClear obslist on sterilize?; Bool_t_clearOnRedirect; Int_tRooCacheManager<RooAbsCacheElement>::_lastIndexLast slot accessed; Int_tRooCacheManager<RooAbsCacheElement>::_maxSizeMaximum size; RooNormSetCache*RooCacheManager<RooAbsCacheElement>::_nsetCache! Normalization/Integration set manager; RooAbsCacheElement**RooCacheManager<RooAbsCacheElement>::_object! Payload; Bool_t_optCacheModeSeen! ; list<RooArgSet*>_optCacheObsList! list of all optCacheObservables owned; RooArgSet*_optCacheObservables! current optCacheObservables ; RooAbsArg*RooAbsCache::_ownerPointer to owning RooAbsArg; Int_tRooCacheManager<RooAbsCacheElement>::_sizeActual use; Bool_tRooCacheManager<RooAbsCacheElement>::_wired! In wired mode, there is a single payload which is returned always. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooObjCacheManager(RooAbsArg* owner = 0, Int_t maxSize = 10, Bool_t clearCacheOnServerRedirect = kTRUE); Constructor of object cache manager for given owner. If clearCacheOnServerRedirect is true; all cache elements will be cleared when a server redirect is intercepted by the cache manager.; This is the default strategy and should only be overridden when you really understand; what you're doing as properly implementing server redirect in cache elements can get very; complicated, especially if there are (cyclical) reference back to the owning object. RooObjCacheManager(const RooObjCacheManager& other, RooAbsArg* owner = 0); Copy constructor. ~RooObjCacheManager(); Destructor. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ); Intercept server redirect calls. If clearOnRedirect was set, sterilize; the cache (i.e. keep the structure but delete all contents). If not; forward serverRedirect to cache elements. void operModeHook(); Intercept changes to cache operation mode and forward to cache elements. void optimizeCacheMode(c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooObjCacheManager.html:4050,clear,clearCacheOnServerRedirect,4050,root/html532/RooObjCacheManager.html,https://root.cern,https://root.cern/root/html532/RooObjCacheManager.html,2,['clear'],['clearCacheOnServerRedirect']
Usability,"cheme; <site> --> <jobid> --> 'time' = >unixtimestamp<. Bool_t SendProcessingStatus(const char* status, Bool_t restarttimer = kFALSE); Send the procesing status 'status' to MonaLisa following the; processing scheme:; <site> --> <jobid> --> 'status' = <status>; Used, to set the processing status of individual subtaks e.g. the; status of a batch (sub-)job or the status of a PROOF slave; participating in query <jobid>. Bool_t SendProcessingProgress(Double_t nevent, Double_t nbytes, Bool_t force = kFALSE); Send the procesing progress to MonaLisa. Bool_t SendFileOpenProgress(TFile* file, TList* openphases, const char* openphasename, Bool_t forcesend = kFALSE); Send the fileopen progress to MonaLisa.; If openphases=0 it means that the information is to be stored; in a temp space, since there is not yet an object where to attach it to.; This is typical in the static Open calls.; The temp openphases are put into a list as soon as one is specified. If thisopenphasename=0 it means that the stored phases (temp and object); have to be cleared. Bool_t SendFileCloseEvent(TFile* file). Bool_t SendFileReadProgress(TFile* file). Bool_t SendFileWriteProgress(TFile* file). Bool_t SendFileCheckpoint(TFile* file). Bool_t SendParameters(TList* valuelist, const char* identifier = 0); Send the parameters to MonaLisa. void SetLogLevel(const char* loglevel = ""WARNING""); Set MonaLisa log level. void Print(Option_t* option = """") const; Print info about MonaLisa object. TMonaLisaValue& operator=(const TMonaLisaWriter& ). TMonaLisaWriter(const TMonaLisaWriter& ). ApMon * GetApMon() const; { return fApmon; }. void Verbose(Bool_t onoff); { fVerbose = onoff; }. » Author: Andreas Peters 5/10/2005 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/monalisa:$Id: TMonaLisaWriter.h 23209 2008-04-14 13:25:09Z rdm $ » Last generated: 2011-07-04 15:35; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMonaLisaWriter.html:14670,clear,cleared,14670,root/html530/TMonaLisaWriter.html,https://root.cern,https://root.cern/root/html530/TMonaLisaWriter.html,1,['clear'],['cleared']
Usability,"cheme; <site> --> <jobid> --> 'time' = >unixtimestamp<. Bool_t SendProcessingStatus(const char* status, Bool_t restarttimer = kFALSE); Send the procesing status 'status' to MonaLisa following the; processing scheme:; <site> --> <jobid> --> 'status' = <status>; Used, to set the processing status of individual subtaks e.g. the; status of a batch (sub-)job or the status of a PROOF slave; participating in query <jobid>. Bool_t SendProcessingProgress(Double_t nevent, Double_t nbytes, Bool_t force = kFALSE); Send the procesing progress to MonaLisa. Bool_t SendFileOpenProgress(TFile* file, TList* openphases, const char* openphasename, Bool_t forcesend = kFALSE); Send the fileopen progress to MonaLisa.; If openphases=0 it means that the information is to be stored; in a temp space, since there is not yet an object where to attach it to.; This is typical in the static Open calls.; The temp openphases are put into a list as soon as one is specified. If thisopenphasename=0 it means that the stored phases (temp and object); have to be cleared. Bool_t SendFileCloseEvent(TFile* file). Bool_t SendFileReadProgress(TFile* file). Bool_t SendFileWriteProgress(TFile* file). Bool_t SendFileCheckpoint(TFile* file). Bool_t SendParameters(TList* valuelist, const char* identifier = 0); Send the parameters to MonaLisa. void SetLogLevel(const char* loglevel = ""WARNING""); Set MonaLisa log level. void Print(Option_t* option = """") const; Print info about MonaLisa object. TMonaLisaValue& operator=(const TMonaLisaWriter& ). TMonaLisaWriter(const TMonaLisaWriter& ). ApMon * GetApMon() const; { return fApmon; }. void Verbose(Bool_t onoff); { fVerbose = onoff; }. » Author: Andreas Peters 5/10/2005 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/monalisa:$Id: TMonaLisaWriter.h 23209 2008-04-14 13:25:09Z rdm $ » Last generated: 2011-11-03 20:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMonaLisaWriter.html:14670,clear,cleared,14670,root/html532/TMonaLisaWriter.html,https://root.cern,https://root.cern/root/html532/TMonaLisaWriter.html,2,['clear'],['cleared']
Usability,"ches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Static Protected Attributes |; List of all members ; TGraphPainter Class ReferenceHistogram Library » Painting classes » Histograms and graphs painting classes. ; The graph painter class. ; Implements all graphs' drawing's options. Introduction; Graphs' plotting options; Exclusion graphs; Graphs with error bars; TGraphErrors; TGraphAsymmErrors; TGraphBentErrors; TGraphMultiErrors. TGraphPolar options; Colors automatically picked in palette; Reverse graphs' axis; Graphs in logarithmic scale; Highlight mode for graph. Introduction; Graphs are drawn via the painter TGraphPainter class. This class implements techniques needed to display the various kind of graphs i.e.: TGraph, TGraphErrors, TGraphBentErrors and TGraphAsymmErrors.; To draw a graph graph it's enough to do: graph->Draw(""AL"");; The option AL in the Draw() method means:. The axis should be drawn (option A),; The graph should be drawn as a simple line (option L).; By default a graph is drawn in the current pad in the current coordinate system. To define a suitable coordinate system and draw the axis the option A must be specified. TGraphPainter offers many options to paint the various kind of graphs.; It is separated from the graph classes so that one can have graphs without the graphics overhead, for example in a batch program.; When a displayed graph is modified, there is no need to call Draw() again; the image will be refreshed the next time the pad will be updated. A pad is updated after one of these three actions:. a carriage return on the ROOT command line,; a click inside the pad,; a call to TPad::Update. Graphs' plotting options; Graphs can be drawn with the following options:. Option Description . ""A"" Produce a new plot with Axis around the graph . ""I"" Combine with option 'A' it draws invisible axis . ""L"" A simple polyline is drawn . ""F"" A fill area is drawn ('CF' draw a smoothed fill area",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphPainter.html:1138,simpl,simple,1138,doc/master/classTGraphPainter.html,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html,1,['simpl'],['simple']
Usability,"chin has been working on several ROOT packages, in particular the graphics sub-system for Windows and the GUI Builder (since 2000).; Gerri Ganis has been working on the authentication procedures to be used by the root daemons and the PROOF system (since 2002).; Maarten Ballintijn (MIT) is one of the main developers of the PROOF sub-system (since 1995).; Valeri Fine (now at BNL) ported ROOT to Windows and contributed largely to the 3-D graphics. He is currently working on the Qt layer of ROOT (since 1995).; Victor Perevoztchikov (BNL) worked on key elements of the I/O system, in particular the improved support for STL collections (1997-2001).; Nenad Buncic developed the HTML documentation generation system and integrated the X3D viewer inside ROOT (1995-1997).; Suzanne Panacek was the author of the first version of this User’s Guide and very active in preparing tutorials and giving lectures about ROOT (1999-2002).; Axel Naumann has been developing further the HTML Reference Guide and helps in porting ROOT under Windows (cygwin/gcc implementation) (since 2000).; Anna Kreshuk has developed the Linear Fitter and Robust Fitter classes as well as many functions in TMath, TF1, TGraph (since 2005).; Richard Maunder has contributed to the GL viewer classes (since 2004).; Timur Pocheptsov has contributed to the GL viewer classes and GL in pad classes (since 2004).; Sergei Linev has developed the XML driver and the TSQLFile classes (since 2003).; Stefan Roiser has been contributing to the reflex and cintex packages (since 2005).; Lorenzo Moneta has been contributing the MathCore, MathMore, Smatrix & Minuit2 packages (since 2005).; Wim Lavrijsen is the author of the PyRoot package (since 2004).; Further we would like to thank all the people mentioned in the $ROOTSYS/README/CREDITS file for their contributions, and finally, everybody who gave comments, reported bugs and provided fixes.; Happy ROOTing!; Rene Brun & Fons Rademakers; Geneva, July 2007; 1 Introduction; In the mid 199",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:4856,Guid,Guide,4856,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['Guid'],['Guide']
Usability,"chitecture_t::Matrix_t;  ; using Scalar_t = typename Architecture_t::Scalar_t;  ;  Public Types inherited from TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >; using Matrix_t = typename Architecture_t::Matrix_t;  ; using Scalar_t = typename Architecture_t::Scalar_t;  . Public Member Functions;  TRMSProp (DeepNet_t &deepNet, Scalar_t learningRate=0.001, Scalar_t momentum=0.0, Scalar_t rho=0.9, Scalar_t epsilon=1e-7);  Constructor. ;  ;  ~TRMSProp ()=default;  Destructor. ;  ; std::vector< std::vector< Matrix_t > > & GetBiasUpdates ();  ; std::vector< Matrix_t > & GetBiasUpdatesAt (size_t i);  ; Scalar_t GetEpsilon () const;  ; Scalar_t GetMomentum () const;  Getters. ;  ; std::vector< std::vector< Matrix_t > > & GetPastSquaredBiasGradients ();  ; std::vector< Matrix_t > & GetPastSquaredBiasGradientsAt (size_t i);  ; std::vector< std::vector< Matrix_t > > & GetPastSquaredWeightGradients ();  ; std::vector< Matrix_t > & GetPastSquaredWeightGradientsAt (size_t i);  ; Scalar_t GetRho () const;  ; std::vector< std::vector< Matrix_t > > & GetWeightUpdates ();  ; std::vector< Matrix_t > & GetWeightUpdatesAt (size_t i);  ;  Public Member Functions inherited from TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >;  VOptimizer (Scalar_t learningRate, DeepNet_t &deepNet);  Constructor. ;  ; virtual ~VOptimizer ()=default;  Virtual Destructor. ;  ; size_t GetGlobalStep () const;  ; Layer_t * GetLayerAt (size_t i);  ; std::vector< Layer_t * > & GetLayers ();  ; Scalar_t GetLearningRate () const;  Getters. ;  ; void IncrementGlobalStep ();  Increments the global step. ;  ; void SetLearningRate (size_t learningRate);  Setters. ;  ; void Step ();  Performs one step of optimization. ;  . Protected Member Functions; void UpdateBiases (size_t layerIndex, std::vector< Matrix_t > &biases, const std::vector< Matrix_t > &biasGradients);  Update the biases, given the current bias gradients. ;  ; void UpdateWeights (size_t layerIndex, std::vector< Matrix_t > &weights, con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TRMSProp.html:2064,learn,learningRate,2064,doc/master/classTMVA_1_1DNN_1_1TRMSProp.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TRMSProp.html,1,['learn'],['learningRate']
Usability,"chnique is useful in several cases, for example if you want to draw a graph connecting all the x, y(or z) points. Note that you may have a tree (or chain) with 1 billion entries, but only a few may survive the cuts and will fit without problems in these arrays.; 12.21 Using TTree::MakeClass. The TTree::Draw method is convenient and easy to use; however it falls short if you need to do some programming with the variable.; For example, for plotting the masses of all oppositely changed pairs of tracks, you would need to write a program that loops over all events, finds all pairs of tracks, and calculates the required quantities. We have shown how to retrieve the data arrays from the branches of the tree in the previous section, and you could just write that program from scratch. Since this is a very common task, ROOT provides a utility that generates a skeleton class designed to loop over the entries of the tree.; This is the TTree::MakeClass method. We will now go through the steps of using MakeClass with a simplified example. The methods used here obviously work for complex event loop calculations.; These are our assumptions: we would like to do selective plotting and loop through each entry of the tree and tracks. We chose a simple example: we want to plot fPx of the first 100 tracks of each entry. We have a ROOT tree with a branch for each data member in the “Event” object. To build this file and tree follow the instructions on how to build the examples in $ROOTSYS/test. Execute Event and instruct it to split the object with this command (from the UNIX command line).; > $ROOTSYS/test/Event 400 1 2 1; This creates an Event.root file with 400 events, compressed, split, and filled.; See $ROOTSYS/test/MainEvent.cxx for more info.; The person who designed the tree makes a shared library available to you, which defines the classes needed. In this case, the classes are Event, EventHeader, and Track and they are defined in the shared library libEvent.so. The designer also g",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:634425,simpl,simplified,634425,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['simpl'],['simplified']
Usability,"ciated parameters with given values in cache.; The cache will take _ownership_of_object_ and is indexed under the given name (which does not; need to be the name of cacheObject and with given set of dependent parameters with validity for the; current values of those parameters. It can be retrieved later by callin retrieveObject(). Bool_t registerObject(const char* ownerName, const char* objectName, TObject& cacheObject, TIterator* paramIter); Register object associated with given name and given associated parameters with given values in cache.; The cache will take _ownership_of_object_ and is indexed under the given name (which does not; need to be the name of cacheObject and with given set of dependent parameters with validity for the; current values of those parameters. It can be retrieved later by callin retrieveObject(). const TObject* retrieveObject(const char* name, TClass* tclass, const RooArgSet& params); Retrieve object from cache that was registered under given name with given parameters, _if_; current parameter values match those that were stored in the registry for this object.; The return object is owned by the cache instance. const TObject* getObj(Int_t uniqueID); Retrieve payload object of cache element with given unique ID. Bool_t clearObj(Int_t uniqueID); Clear cache element with given unique ID; Retrieve payload object of cache element with given unique ID. Bool_t setObj(Int_t uniqueID, TObject* obj); Place new payload object in cache element with given unique ID. Cache; will take ownership of provided object!. void clearAll(); Clear all cache elements. void print() const. void importCacheObjects(RooExpensiveObjectCache& other, const char* ownerName, Bool_t verbose = kFALSE). Int_t size() const; { return _map.size() ; }. » Last changed: Mon Jul 4 15:22:45 2011 » Last generated: 2011-07-04 15:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooExpensiveObjectCache.html:8123,clear,clearObj,8123,root/html530/RooExpensiveObjectCache.html,https://root.cern,https://root.cern/root/html530/RooExpensiveObjectCache.html,2,['clear'],"['clearAll', 'clearObj']"
Usability,"ciated parameters with given values in cache.; The cache will take _ownership_of_object_ and is indexed under the given name (which does not; need to be the name of cacheObject and with given set of dependent parameters with validity for the; current values of those parameters. It can be retrieved later by callin retrieveObject(). Bool_t registerObject(const char* ownerName, const char* objectName, TObject& cacheObject, TIterator* paramIter); Register object associated with given name and given associated parameters with given values in cache.; The cache will take _ownership_of_object_ and is indexed under the given name (which does not; need to be the name of cacheObject and with given set of dependent parameters with validity for the; current values of those parameters. It can be retrieved later by callin retrieveObject(). const TObject* retrieveObject(const char* name, TClass* tclass, const RooArgSet& params); Retrieve object from cache that was registered under given name with given parameters, _if_; current parameter values match those that were stored in the registry for this object.; The return object is owned by the cache instance. const TObject* getObj(Int_t uniqueID); Retrieve payload object of cache element with given unique ID. Bool_t clearObj(Int_t uniqueID); Clear cache element with given unique ID; Retrieve payload object of cache element with given unique ID. Bool_t setObj(Int_t uniqueID, TObject* obj); Place new payload object in cache element with given unique ID. Cache; will take ownership of provided object!. void clearAll(); Clear all cache elements. void print() const. void importCacheObjects(RooExpensiveObjectCache& other, const char* ownerName, Bool_t verbose = kFALSE). Int_t size() const; { return _map.size() ; }. » Last changed: Thu Nov 3 20:08:03 2011 » Last generated: 2011-11-03 20:08; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooExpensiveObjectCache.html:8123,clear,clearObj,8123,root/html532/RooExpensiveObjectCache.html,https://root.cern,https://root.cern/root/html532/RooExpensiveObjectCache.html,6,"['Clear', 'clear']","['Clear', 'clearAll', 'clearObj']"
Usability,"ciated parameters with given values in cache.; The cache will take _ownership_of_object_ and is indexed under the given name (which does not; need to be the name of cacheObject and with given set of dependent parameters with validity for the; current values of those parameters. It can be retrieved later by callin retrieveObject(). Bool_t registerObject(const char* ownerName, const char* objectName, TObject& cacheObject, TIterator* paramIter); Register object associated with given name and given associated parameters with given values in cache.; The cache will take _ownership_of_object_ and is indexed under the given name (which does not; need to be the name of cacheObject and with given set of dependent parameters with validity for the; current values of those parameters. It can be retrieved later by callin retrieveObject(). const TObject* retrieveObject(const char* name, TClass* tclass, const RooArgSet& params); Retrieve object from cache that was registered under given name with given parameters, _if_; current parameter values match those that were stored in the registry for this object.; The return object is owned by the cache instance. const TObject* getObj(Int_t uniqueID); Retrieve payload object of cache element with given unique ID. Bool_t clearObj(Int_t uniqueID); Clear cache element with given unique ID; Retrieve payload object of cache element with given unique ID. Bool_t setObj(Int_t uniqueID, TObject* obj); Place new payload object in cache element with given unique ID. Cache; will take ownership of provided object!. void clearAll(); Clear all cache elements. void print() const. void importCacheObjects(RooExpensiveObjectCache& other, const char* ownerName, Bool_t verbose = kFALSE). Int_t size() const; { return _map.size() ; }. » Last changed: Tue Jun 2 15:30:37 2015 » Last generated: 2015-06-02 15:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooExpensiveObjectCache.html:8628,clear,clearObj,8628,root/html604/RooExpensiveObjectCache.html,https://root.cern,https://root.cern/root/html604/RooExpensiveObjectCache.html,6,"['Clear', 'clear']","['Clear', 'clearAll', 'clearObj']"
Usability,"ck (unsigned connid, const std::string &arg);  Process data from client. ;  . Protected Attributes; RGeomDescription & fDesc;  ! geometry description, shared with external ;  ; std::shared_ptr< RWebWindow > fWebWindow;  ! web window to show geometry ;  . #include <ROOT/RGeomHierarchy.hxx>; Constructor & Destructor Documentation. ◆ RGeomHierarchy(). RGeomHierarchy::RGeomHierarchy ; (; RGeomDescription & ; desc, . bool ; use_server_threads = false . ). constructor ; Definition at line 24 of file RGeomHierarchy.cxx. ◆ ~RGeomHierarchy(). RGeomHierarchy::~RGeomHierarchy ; (; ). virtual . destructor ; Definition at line 41 of file RGeomHierarchy.cxx. Member Function Documentation. ◆ BrowseTo(). void RGeomHierarchy::BrowseTo ; (; const std::string & ; itemname). Let browse to specified location. ; Definition at line 149 of file RGeomHierarchy.cxx. ◆ ClearOnClose(). void RGeomHierarchy::ClearOnClose ; (; const std::shared_ptr< void > & ; handle). Set handle which will be cleared when connection is closed Must be called after window is shown. ; Definition at line 180 of file RGeomHierarchy.cxx. ◆ Description(). RGeomDescription & ROOT::RGeomHierarchy::Description ; (; ). inline . Definition at line 48 of file RGeomHierarchy.hxx. ◆ ProcessSignal(). void RGeomHierarchy::ProcessSignal ; (; const std::string & ; kind). protected . Process signals from geometry description object. ; Definition at line 158 of file RGeomHierarchy.cxx. ◆ Show(). void RGeomHierarchy::Show ; (; const RWebDisplayArgs & ; args = """"). Show hierarchy in web window. ; Definition at line 128 of file RGeomHierarchy.cxx. ◆ Update(). void RGeomHierarchy::Update ; (; ). Update client - reload hierarchy. ; Definition at line 140 of file RGeomHierarchy.cxx. ◆ WebWindowCallback(). void RGeomHierarchy::WebWindowCallback ; (; unsigned ; connid, . const std::string & ; arg . ). protected . Process data from client. ; Definition at line 49 of file RGeomHierarchy.cxx. Member Data Documentation. ◆ fDesc. RGeomDescription",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RGeomHierarchy.html:2052,clear,cleared,2052,doc/v632/classROOT_1_1RGeomHierarchy.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomHierarchy.html,1,['clear'],['cleared']
Usability,"ck (unsigned connid, const std::string &arg);  Process data from client. ;  . Protected Attributes; RGeomDescription & fDesc;  ! geometry description, shared with external ;  ; std::shared_ptr< RWebWindow > fWebWindow;  ! web window to show geometry ;  . #include <ROOT/RGeomHierarchy.hxx>; Constructor & Destructor Documentation. ◆ RGeomHierarchy(). RGeomHierarchy::RGeomHierarchy ; (; RGeomDescription & ; desc, . bool ; use_server_threads = false . ). constructor ; Definition at line 32 of file RGeomHierarchy.cxx. ◆ ~RGeomHierarchy(). RGeomHierarchy::~RGeomHierarchy ; (; ). virtual . destructor ; Definition at line 48 of file RGeomHierarchy.cxx. Member Function Documentation. ◆ BrowseTo(). void RGeomHierarchy::BrowseTo ; (; const std::string & ; itemname). Let browse to specified location. ; Definition at line 156 of file RGeomHierarchy.cxx. ◆ ClearOnClose(). void RGeomHierarchy::ClearOnClose ; (; const std::shared_ptr< void > & ; handle). Set handle which will be cleared when connection is closed Must be called after window is shown. ; Definition at line 187 of file RGeomHierarchy.cxx. ◆ Description(). RGeomDescription & ROOT::RGeomHierarchy::Description ; (; ). inline . Definition at line 48 of file RGeomHierarchy.hxx. ◆ ProcessSignal(). void RGeomHierarchy::ProcessSignal ; (; const std::string & ; kind). protected . Process signals from geometry description object. ; Definition at line 165 of file RGeomHierarchy.cxx. ◆ Show(). void RGeomHierarchy::Show ; (; const RWebDisplayArgs & ; args = """"). Show hierarchy in web window. ; Definition at line 135 of file RGeomHierarchy.cxx. ◆ Update(). void RGeomHierarchy::Update ; (; ). Update client - reload hierarchy. ; Definition at line 147 of file RGeomHierarchy.cxx. ◆ WebWindowCallback(). void RGeomHierarchy::WebWindowCallback ; (; unsigned ; connid, . const std::string & ; arg . ). protected . Process data from client. ; Definition at line 56 of file RGeomHierarchy.cxx. Member Data Documentation. ◆ fDesc. RGeomDescription",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RGeomHierarchy.html:2108,clear,cleared,2108,doc/master/classROOT_1_1RGeomHierarchy.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomHierarchy.html,1,['clear'],['cleared']
Usability,"ck contention. I/O Libraries. Exclusive use of the global lock is reduced or migrated to finer grained read and write locks in a few hotspots that occur during file opening/closing or task initialization in RDataFrame. This can lead to O(100x) improvements for some typical RDataFrame scenarios with 256 threads due to massively reduced lock contention. TTree Libraries. TTree now supports the inclusion of leaves of types long and unsigned long (and therefore also std::size_t on most systems) also for branches in “leaflist mode”. The corresponding leaflist letters are ‘G’ and ‘g’.; when looping over a TTree with a friend with a larger number of entries, TTreeReader now ends the event loop when the entries in the main TTree are exhausted, consistently with other interfaces. See #6518 for more details.; TTreeProcessorMT::SetMaxTasksPerFilePerWorker is now deprecated in favor of the more flexible and newly introduced TTreeProcessorMT::SetTasksPerWorkerHint. See the relevant entries in our reference guide for more information.; The name of the sub-branches of a split collection no longer have 2 consecutive dots if the top level branche name has a trailing dot. The name of the collection’s index leaf also no longer include the dot. For example for “t.” the names where “t._” and “t..fValue” and are now “t_” and “t.fValue”. RDataFrame; New features. Introduce ROOT::RDF::RunGraphs, which allows to compute the results of multiple RDataFrames (or better, multiple independent computation graphs) concurrently while sharing the same thread pool. The computation may be more efficient than running the RDataFrames sequentially if an analysis consists of several computation graphs that individually do not fully utilize the available resources. See e.g. this tutorial for an example usage.; RDataFrame now supports reading friend TTrees with a TTreeIndex, aka “indexed friends”. More details at ROOT-9559.; Experimental logging capabilities have been added to RDataFrame. To activate logging",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v624/release-notes.html:6447,guid,guide,6447,doc/v624/release-notes.html,https://root.cern,https://root.cern/doc/v624/release-notes.html,1,['guid'],['guide']
Usability,"ck matrix into vector, which can be send to client; 334/// Following sizes can be used for vector:; 335/// 0 - Identity matrix; 336/// 3 - Translation; 337/// 4 - Scale (last element always 1); 338/// 9 - Rotation; 339/// 16 - Full size; 340 ; 341void RGeomDescription::PackMatrix(std::vector<float> &vect, TGeoMatrix *matr); 342{; 343 vect.clear();; 344 ; 345 if (!matr || matr->IsIdentity()); 346 return;; 347 ; 348 auto trans = matr->GetTranslation();; 349 auto scale = matr->GetScale();; 350 auto rotate = matr->GetRotationMatrix();; 351 ; 352 bool is_translate = matr->IsA() == TGeoTranslation::Class(), is_scale = matr->IsA() == TGeoScale::Class(),; 353 is_rotate = matr->IsA() == TGeoRotation::Class();; 354 ; 355 if (!is_translate && !is_scale && !is_rotate) {; 356 // check if trivial matrix; 357 ; 358 auto test = [](double val, double chk) { return (val == chk) || (TMath::Abs(val - chk) < 1e-20); };; 359 ; 360 bool no_scale = test(scale[0], 1) && test(scale[1], 1) && test(scale[2], 1);; 361 bool no_trans = test(trans[0], 0) && test(trans[1], 0) && test(trans[2], 0);; 362 bool no_rotate = test(rotate[0], 1) && test(rotate[1], 0) && test(rotate[2], 0) && test(rotate[3], 0) &&; 363 test(rotate[4], 1) && test(rotate[5], 0) && test(rotate[6], 0) && test(rotate[7], 0) &&; 364 test(rotate[8], 1);; 365 ; 366 if (no_scale && no_trans && no_rotate); 367 return;; 368 ; 369 if (no_scale && no_trans && !no_rotate) {; 370 is_rotate = true;; 371 } else if (no_scale && !no_trans && no_rotate) {; 372 is_translate = true;; 373 } else if (!no_scale && no_trans && no_rotate) {; 374 is_scale = true;; 375 }; 376 }; 377 ; 378 if (is_translate) {; 379 vect.resize(3);; 380 vect[0] = trans[0];; 381 vect[1] = trans[1];; 382 vect[2] = trans[2];; 383 return;; 384 }; 385 ; 386 if (is_scale) {; 387 vect.resize(4);; 388 vect[0] = scale[0];; 389 vect[1] = scale[1];; 390 vect[2] = scale[2];; 391 vect[3] = 1;; 392 return;; 393 }; 394 ; 395 if (is_rotate) {; 396 vect.resize(9);; 397 for (int n = 0; n < ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RGeomData_8cxx_source.html:8482,clear,clear,8482,doc/master/RGeomData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RGeomData_8cxx_source.html,2,['clear'],['clear']
Usability,"ck; static TObject::EStatusBitsTObject::kHasUUID; static TCollection::(anonymous)TCollection::kInitCapacity; static TCollection::(anonymous)TCollection::kInitHashTableCapacity; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Bool_tTList::fAscending! sorting order (when calling Sort() or for TSortedList); TObjLink*TList::fCache! cache to speedup sequential calling of Before() and After() functions; TObjLink*TList::fFirst! pointer to first entry in linked list; TObjLink*TList::fLast! pointer to last entry in linked list; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Int_tfNRargsnumber of redo arguments; Int_tfNUargsnumber of undo arguments; TStringfNamecommand name. Default is ""ClassName::RedoName(args)""; TStringTCollection::fNamename of the collection; Bool_tfNewDeletekTRUE if Redo/Undo methods are new/delete; void*fObjectobject to which undo/redo actions applied; TQConnection*fRedodo/redo action; Long_t*fRedoArgsredo values; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Int_tTCollection::fSizenumber of elements in collection; Bool_tTSeqCollection::fSortedtrue if collection has been sorted; Int_tfState-1 undoing on, 1 redoing on, 0 nothing in progress; Int_tfStatusfStatus++ after Redo(), fStatus-- after Undo(); TStringfTitlecommand description; TQConnection*fUndoundo action; Long_t*fUndoArgsundo values; static Bool_tTQObject::fgAllSignalsBlockedflag used f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TQCommand.html:17639,undo,undo,17639,root/html602/TQCommand.html,https://root.cern,https://root.cern/root/html602/TQCommand.html,4,['undo'],['undo']
Usability,"ckHelper class to prevent infinite recursion in the usage of TTree Friends ;  ►CTTreeCacheA specialized TFileCacheRead object for a TTree ;  CIOPos;  ►CMissCache;  CEntry;  ►CTTreeCacheUnzipSpecialization of TTreeCache for parallel Unzipping ;  CUnzipState;  ►CTTreeClonerClass implementing or helping the various TTree cloning method ;  CCompareEntry;  CCompareSeek;  CTTreeDrawArgsParserA class that parses all parameters for TTree::Draw() ;  ►CTTreeFormulaUsed to pass a selection expression to the Tree drawing routine ;  CRealInstanceCache;  CTTreeFormulaManagerUsed to coordinate one or more TTreeFormula objects ;  CTTreeFriendLeafIterIterator on all the leaves in a TTree and its friend ;  CTTreeIndexA Tree Index with majorname and minorname ;  CTTreeInput;  ►CTTreePerfStatsTTree I/O performance measurement ;  CBasketInfo;  CTTreePlayerImplement some of the functionality of the class TTree requiring access to extra libraries (Histogram, display, etc) ;  ►CTTreeReaderTTreeReader is a simple, robust and fast interface to read values from a TTree, TChain or TNtuple ;  CIterator_tIterate through the entries of a TTree ;  ►CTTreeReaderArrayExtracts array data from a TTree ;  CIterator_tRandom access iterator to the elements of a TTreeReaderArray ;  CTTreeReaderValueExtracts data from a TTree ;  CTTreeResultClass defining interface to a TTree query result with the same interface as for SQL databases ;  CTTreeRowClass defining interface to a row of a TTree query result ;  CTTreeSQLImplement TTree for a SQL backend ;  CTTreeTableInterfaceTTreeTableInterface is used to interface to data that is stored in a TTree ;  CTTreeViewA helper class that encapsulates a file and a tree ;  CTTreeViewerA graphic user interface designed to handle ROOT trees and to take advantage of TTree class features ;  CTTUBEA tube ;  CTTUBSA segment of a tube ;  CTTVLVContainerThis class represent the list view container for the ;  CTTVLVEntryThis class represent entries that goes into the TreeViewer li",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v614/annotated.html:213815,simpl,simple,213815,doc/v614/annotated.html,https://root.cern,https://root.cern/doc/v614/annotated.html,1,['simpl'],['simple']
Usability,"cket* s = 0); Creates a socket or a parallel socket and authenticates to the; remote server specified in 'url' on remote 'port' as 'user'. url: [[proto][p][auth]://]host[/?options]. where proto = ""sockd"", ""rootd"", ""proofd""; indicates the type of remote server; if missing ""sockd"" is assumed (""sockd"" indicates; any remote server session using TServerSocket); [p] = for parallel sockets (forced internally for; rootd); [auth] = ""up"", ""s"", ""k"", ""g"", ""h"", ""ug"" to force UsrPwd,; SRP, Krb5, Globus, SSH or UidGid authentication; [options] = ""m"" or ""s"", when proto=proofd indicates whether; we are master or slave (used internally by TSlave). An already opened connection can be used by passing its socket; in opensock. Example:. TSocket::CreateAuthSocket(""qwerty"",""rootdps://machine.fq.dn"",5051). creates an authenticated socket to a rootd server running; on remote machine machine.fq.dn on port 5051; ""parallel""; sockets are forced internally because rootd expects; parallel sockets; however a simple socket will be created; in this case because the size is 0 (the default);; authentication will attempt protocol SRP first. TSocket::CreateAuthSocket(""qwerty"",""pk://machine.fq.dn:5052"",3). creates an authenticated parallel socket of size 3 to a sockd; server running on remote machine machine.fq.dn on port 5052;; authentication will attempt protocol Kerberos first. NB: may hang if the remote server is not of the correct type;; at present TSocket has no way to find out the type of the; remote server automatically. Returns pointer to an authenticated socket or 0 if creation or; authentication is unsuccessful. Int_t GetClientProtocol(); Static method returning supported client protocol. void NetError(const char* where, Int_t error); Print error string depending on error code. ULong64_t GetSocketBytesSent(); Get total number of bytes sent via all sockets. ULong64_t GetSocketBytesRecv(); Get total number of bytes received via all sockets. friend class TProofServ; // to be able to call SetDescrip",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSocket.html:22419,simpl,simple,22419,root/html528/TSocket.html,https://root.cern,https://root.cern/root/html528/TSocket.html,1,['simpl'],['simple']
Usability,"cketClass)) {; 1204 gInterpreter->CallFunc_Exec(socketCloser, ((char*)socket)+offset);; 1205 // Put the object in the closed list for later deletion.; 1206 socket->SetBit(kMustCleanup);; 1207 fClosedObjects->AddLast(socket);; 1208 } else {; 1209 // Crap ... this is not a socket, likely Proof or something, let's try to find a Close; 1210 Longptr_t other_offset;; 1211 CallFunc_t *otherCloser = gInterpreter->CallFunc_Factory();; 1212 gInterpreter->CallFunc_SetFuncProto(otherCloser, socket->IsA()->GetClassInfo(), ""Close"", """", &other_offset);; 1213 if (gInterpreter->CallFunc_IsValid(otherCloser)) {; 1214 gInterpreter->CallFunc_Exec(otherCloser, ((char*)socket)+other_offset);; 1215 // Put the object in the closed list for later deletion.; 1216 socket->SetBit(kMustCleanup);; 1217 fClosedObjects->AddLast(socket);; 1218 } else {; 1219 notclosed.AddLast(socket);; 1220 }; 1221 gInterpreter->CallFunc_Delete(otherCloser);; 1222 // Put it back; 1223 cursor->SetObject(socket);; 1224 }; 1225 cursor = cursor->Next();; 1226 }; 1227 // Now were done, clear the list; 1228 fSockets->Clear();; 1229 // Read the one we did not close; 1230 cursor = notclosed.FirstLink();; 1231 while (cursor) {; 1232 static_cast<TList*>(fSockets)->AddLast(cursor->GetObject());; 1233 cursor = cursor->Next();; 1234 }; 1235 }; 1236 gInterpreter->CallFunc_Delete(socketCloser);; 1237 }; 1238 if (fMappedFiles && fMappedFiles->First()) {; 1239 R__ListSlowClose<TVirtualMapFile>(static_cast<TList*>(fMappedFiles));; 1240 }; 1241 ; 1242}; 1243 ; 1244////////////////////////////////////////////////////////////////////////////////; 1245/// Execute the cleanups necessary at the end of the process, in particular; 1246/// those that must be executed before the library start being unloaded.; 1247 ; 1248void TROOT::EndOfProcessCleanups(); 1249{; 1250 // This will not delete the objects 'held' by the TFiles so that; 1251 // they can still be 'reacheable' when ResetGlobals is run.; 1252 CloseFiles();; 1253 ; 1254 if (gInterpret",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TROOT_8cxx_source.html:48373,clear,clear,48373,doc/master/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TROOT_8cxx_source.html,2,['clear'],['clear']
Usability,"ckground component only.; # The VisualizeError() option can generally applied to _any_ kind of; # plot (components, asymmetries, etc..); model.plotOn(frame, VisualizeError=(r, 1), FillColor=""kOrange"", Components=""bkg""); model.plotOn(; frame,; VisualizeError=(r, 1, False),; DrawOption=""L"",; LineWidth=2,; LineColor=""r"",; Components=""bkg"",; LineStyle=""--"",; ); ; # Overlay central value; model.plotOn(frame); model.plotOn(frame, Components=""bkg"", LineStyle=""--""); d.plotOn(frame); frame.SetMinimum(0); ; # Visualize partial fit error; # ------------------------------------------------------; ; # Make plot frame; frame2 = x.frame(Bins=40, Title=""Visualization of 2-sigma partial error from (m,m2)""); ; # Visualize partial error. For partial error visualization the covariance matrix is first reduced as follows; # ___ -1; # Vred = V22 = V11 - V12 * V22 * V21; #; # Where V11,V12,V21, represent a block decomposition of the covariance matrix into observables that; # are propagated (labeled by index '1') and that are not propagated (labeled by index '2'), V22bar; # is the Shur complement of V22, as shown above; #; # (Note that Vred is _not_ a simple sub-matrix of V); ; # Propagate partial error due to shape parameters (m,m2) using linear and; # sampling method; model.plotOn(frame2, VisualizeError=(r, {m, m2}, 2), FillColor=""c""); model.plotOn(frame2, Components=""bkg"", VisualizeError=(r, {m, m2}, 2), FillColor=""c""); ; model.plotOn(frame2); model.plotOn(frame2, Components=""bkg"", LineStyle=""--""); frame2.SetMinimum(0); ; # Make plot frame; frame3 = x.frame(Bins=40, Title=""Visualization of 2-sigma partial error from (s,s2)""); ; # Propagate partial error due to yield parameter using linear and sampling; # method; model.plotOn(frame3, VisualizeError=(r, {s, s2}, 2), FillColor=""g""); model.plotOn(frame3, Components=""bkg"", VisualizeError=(r, {fsig}, 2), FillColor=""g""); ; model.plotOn(frame3); model.plotOn(frame3, Components=""bkg"", LineStyle=""--""); frame3.SetMinimum(0); ; # Make plot frame; fr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf610__visualerror_8py.html:4113,simpl,simple,4113,doc/master/rf610__visualerror_8py.html,https://root.cern,https://root.cern/doc/master/rf610__visualerror_8py.html,1,['simpl'],['simple']
Usability,"cl) {; 2701 // We stream std::string without going through members..; 2702 return;; 2703 }; 2704 ; 2705 if (TClassEdit::IsStdArray(cl->GetName())) {; 2706 // We treat std arrays as C arrays; 2707 return;; 2708 }; 2709 ; 2710 if (TClassEdit::IsUniquePtr(cl->GetName())) {; 2711 // Ignore error caused by the inside of std::unique_ptr; 2712 // This is needed solely because of rootclingIO's IsUnsupportedUniquePointer; 2713 // which checks the number of elements in the GetListOfRealData.; 2714 // If this usage is removed, this can be replaced with a return statement.; 2715 // See https://github.com/root-project/root/issues/13574; 2716 isTransient = true;; 2717 }; 2718 ; 2719 const char* cobj = (const char*) obj; // for ptr arithmetics; 2720 ; 2721 // Treat the case of std::complex in a special manner. We want to enforce; 2722 // the layout of a stl implementation independent class, which is the; 2723 // complex as implemented in ROOT5.; 2724 ; 2725 // A simple lambda to simplify the code; 2726 auto inspInspect = [&] (ptrdiff_t offset){; 2727 insp.Inspect(const_cast<TClass*>(cl), insp.GetParent(), ""_real"", cobj, isTransient);; 2728 insp.Inspect(const_cast<TClass*>(cl), insp.GetParent(), ""_imag"", cobj + offset, isTransient);; 2729 };; 2730 ; 2731 auto complexType = TClassEdit::GetComplexType(cl->GetName());; 2732 switch(complexType) {; 2733 case TClassEdit::EComplexType::kNone:; 2734 {; 2735 break;; 2736 }; 2737 case TClassEdit::EComplexType::kFloat:; 2738 {; 2739 inspInspect(sizeof(float));; 2740 return;; 2741 }; 2742 case TClassEdit::EComplexType::kDouble:; 2743 {; 2744 inspInspect(sizeof(double));; 2745 return;; 2746 }; 2747 case TClassEdit::EComplexType::kInt:; 2748 {; 2749 inspInspect(sizeof(int));; 2750 return;; 2751 }; 2752 case TClassEdit::EComplexType::kLong:; 2753 {; 2754 inspInspect(sizeof(long));; 2755 return;; 2756 }; 2757 }; 2758 ; 2759 static clang::PrintingPolicy; 2760 printPol(fInterpreter->getCI()->getLangOpts());; 2761 if (printPol.Indentation) {; 2762 //",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:105226,simpl,simple,105226,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,2,['simpl'],"['simple', 'simplify']"
Usability,"clare that we handle all integrations internally. ;  ; TClass * IsA () const override;  ; bool isBinnedDistribution (const RooArgSet &obs) const override;  Tests if the distribution is binned. Unless overridden by derived classes, this always returns false. ;  ; std::list< double > * plotSamplingHint (RooAbsRealLValue &, double, double) const override;  Forward the plot sampling hint from the p.d.f. that defines the observable obs. ;  ; void printMetaArgs (std::ostream &os) const override;  Customized printing of arguments of a RooProduct to more intuitively reflect the contents of the product operator construction. ;  ; const RooArgList & realComponents () const;  ; void setCacheAndTrackHints (RooArgSet &) override;  Label OK'ed components of a RooProduct with cache-and-track. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void translate (RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 object bound ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooProduct.html:2969,simpl,simple,2969,doc/master/classRooProduct.html,https://root.cern,https://root.cern/doc/master/classRooProduct.html,1,['simpl'],['simple']
Usability,"class TPyMultiGenFunction: public ROOT::Math::IBaseFunctionMultiDim. Python wrapper for Fit functions. Function Members (Methods); public:. virtual~TPyMultiGenFunction(); static TClass*Class(); virtual ROOT::Math::IBaseFunctionMultiDim*Clone() const; virtual doubleDoEval(const double* x) const; ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(const ROOT::Math::IBaseFunctionMultiDim&); virtual TClass*IsA() const; virtual unsigned intNDim() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TPyMultiGenFunction(PyObject* self = 0). private:. TPyMultiGenFunction&operator=(const TPyMultiGenFunction&); TPyMultiGenFunction(const TPyMultiGenFunction& src). Data Members; private:. PyObject*fPySelf! actual python object. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPyMultiGenFunction(PyObject* self = 0); Construct a TPyMultiGenFunction derived with <self> as the underlying. ~TPyMultiGenFunction(); Destructor. Only deref if still holding on to Py_None (circular otherwise). unsigned int NDim() const; Simply forward the call to python self. double DoEval(const double* x) const; Simply forward the call to python self. TPyMultiGenFunction(PyObject* self = 0); ctor/dtor, and assignment. ROOT::Math::IBaseFunctionMultiDim* Clone() const; Math::IMultiGenFunction implementation. { return new TPyMultiGenFunction( fPySelf ); }. TPyMultiGenFunction& operator=(const TPyMultiGenFunction& ); { return *this; }. » Last changed: Tue Jun 30 15:28:39 2015 » Last generated: 2015-06-30 15:28; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TPyMultiGenFunction.html:1645,Simpl,Simply,1645,root/html602/TPyMultiGenFunction.html,https://root.cern,https://root.cern/root/html602/TPyMultiGenFunction.html,2,['Simpl'],['Simply']
Usability,"class can be used to adopt existing memory or allocate some ;  vo002_VectorCalculations.C In this tutorial we learn how the RVec class can be used to express easily mathematical operations involving arrays and scalars ;  vo003_LogicalOperations.C In this tutorial we learn how the RVec class can be used to express logical operations ;  vo004_SortAndSelect.C In this tutorial we learn how elements of an RVec can be easily sorted and selected ;  vo004_SortAndSelect.py In this tutorial we learn how elements of an RVec can be easily sorted and selected ;  vo005_Combinations.C In this tutorial we learn how combinations of RVecs can be build ;  vo005_Combinations.py In this tutorial we learn how combinations of RVecs can be build ;  vo006_IndexManipulation.C In this tutorial we demonstrate RVec helpers for index manipulation ;  ► xml;  DOMParsePerson.C ROOT implementation of a XML DOM Parser ;  DOMRecursive.C ROOT implementation of a XML DOM Parser ;  SAXHandler.C ROOT implementation of a simple SAX Handler ;  xmlmodifyfile.C Example to read, modify and store xml file, using TXMLEngine class The input file, produced by xmlnewfile.C macro is used If you need full xml syntax support, use TXMLParser instead ;  xmlnewfile.C Example to create a new xml file with the TXMLEngine class ;  xmlreadfile.C Example to read and parse any xml file, supported by TXMLEngine class The input file, produced by xmlnewfile.C macro is used If you need full xml syntax support, use TXMLParser instead ;  benchmarks.CThis macro run several tests and produces an benchmark report ;  demos.CThis macro shows a control bar to run some of the ROOT tutorials ;  demoshelp.CThis macro shows help on running the Demos ;  geant3tasks.CThis script is a representation using TTasks of the Geant3 simulation program This example uses directly TTask objects ;  hsimple.C This program creates : ;  htmlex.CThis file demonstrates how THtml can document sources ;  MyTasks.cxxA set of classes deriving from TTask ;  regexp.CA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/files.html:173228,simpl,simple,173228,doc/v616/files.html,https://root.cern,https://root.cern/doc/v616/files.html,1,['simpl'],['simple']
Usability,"class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooSimWSTool::ObjSplitRule. class RooSimWSTool::ObjSplitRule. Class RooSimWSTool is a tool operating on RooWorkspace objects that; can clone p.d.f.s into a series of variations that are joined together; into a RooSimultanous p.d.f. The simplest use case to take a workspace p.d.f as prototype and; 'split' a parameter of that p.d.f into two specialized parameters; depending on a category in the dataset. For example, given a Gaussian; p.d.f G(x,m,s) we want to construct a G_a(x,m_a,s) and a G_b(x,m_b,s); with different mean parameters to be fit to a dataset with observables; (x,c) where c is a category with states 'a' and 'b'. Using RooSimWSTool one can create a simultaneous p.d.f from G_a and G_b; from G with the following command. RooSimWSTool wst(wspace) ;; wst.build(""G_sim"",""G"",SplitParam(""m"",""c"")) ;. From this simple example one can go to builds of arbitrary complexity; by specifying multiple SplitParam arguments on multiple parameters; involving multiple splitting categories. Splits can also be performed; in the product multiple categories, e.g. SplitParam(""m"",""c,d"")) ;. splits parameter m in the product of states of c and d. Another possibility; is the 'constrained' split which clones the parameter for all but one state; and insert a formula specialization in a chosen state that evaluates; to 1 - sum_i(a_i) where a_i are all other specializations. For example,; given a category c with state ""A"",""B"",""C"",""D"" the specification. SplitParamConstrained(""m"",""c"",""D""). will result in parameters m_A,m_B,m_C and a formula expression m_D; that evaluates to (1-(m_A+m_B+m_C)). Constrained split can also be; specified in product of categories. In that case the name of the; remainder state follows the syntax ""{State1;State2}"" where State1 and; State2 are the state names of the two spitting categories. The examples so far deal with a single prototype p.d.f. It is also; possible to bu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooSimWSTool__ObjSplitRule.html:1093,simpl,simple,1093,root/html534/RooSimWSTool__ObjSplitRule.html,https://root.cern,https://root.cern/root/html534/RooSimWSTool__ObjSplitRule.html,6,['simpl'],['simple']
Usability,"class of MemStat; TMemStatShow class to visualize the results of TMemStat ; TMemberInspector ABC for inspecting class data members; TMemberStreamer ; TMergerInfo Basic info on merger, i.e. worker serving as merger; TMessage Message buffer class; TMessageHandler Generic message handler; TMethod Dictionary for a class member function (method); TMethodArg Dictionary for a method argument; TMethodBrowsable Helper object to browse methods; TMethodCall Method calling interface; TMinuit The MINUIT minimisation package; TMinuitMinimizer Implementation of Minimizer interface using TMinuit ; TMixture Mixtures used in the Geometry Shapes; TModuleDocInfo documentation for a group of classes; TMonaLisaText Interface to MonaLisa Monitoring Text; TMonaLisaValue Interface to MonaLisa Monitoring Values; TMonaLisaWriter Interface to MonaLisa Monitoring; TMonitor Monitor activity on a set of TSocket objects; TMultiDimFit Multi dimensional fit class; TMultiGraph A collection of TGraph objects; TMultiLayerPerceptron a Neural Network; TMutex Mutex lock class; TMutexImp Mutex lock implementation ABC; TMySQLResult MySQL query result; TMySQLRow One row of MySQL query result; TMySQLServer Connection to MySQL server; TMySQLStatement SQL statement class for MySQL DB; TNamed The basis for a named object (name, title); TNetFile A ROOT file that reads/writes via a rootd server; TNetFileStager Implementation for a 'rootd' backend; TNetSystem Directory handler for NetSystem; TNeuron Neuron for MultiLayerPerceptrons; TNewChainDlg New chain dialog; TNewQueryDlg New query dialog; TNode Description of parameters to position a 3-D geometry object; TNodeDiv Description of parameters to divide a 3-D geometry object; TNonSplitBrowsable Helper object to browse unsplit objects; TNtuple A simple tree with branches of floats.; TNtupleD A simple tree with branches of floats.; TObjArray An array of objects; TObjArrayIter Object array iterator; TObjString Collectable string class; TObject Basic ROOT object; TObje",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ClassIndex.html:111327,simpl,simple,111327,root/html530/ClassIndex.html,https://root.cern,https://root.cern/root/html530/ClassIndex.html,2,['simpl'],['simple']
Usability,"class)THnF, THnT<Float_t>. Function Members (Methods); public:. THnT<float>(); THnT<float>(const char* name, const char* title, Int_t dim, const Int_t* nbins, const Double_t* xmin, const Double_t* xmax); ~THnT<float>(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c = 1.); voidTHn::AddBinContent(const Int_t* idx, Double_t v = 1.); virtual voidTHn::AddBinContent(Long64_t bin, Double_t v = 1.); virtual voidTHn::AddBinError2(Long64_t bin, Double_t e2); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTHnBase::Browse(TBrowser* b); voidTHnBase::CalculateErrors(Bool_t calc = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THn*THn::CreateHn(const char* name, const char* title, const TH1* h1); static THn*THn::CreateHn(const char* name, const char* title, const THnBase* hn); virtual ROOT::THnBaseBinIter*THn::CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THnT_float_.html:2226,Clear,Clear,2226,root/html534/THnT_float_.html,https://root.cern,https://root.cern/root/html534/THnT_float_.html,1,['Clear'],['Clear']
Usability,"class)THnT<Short_t>, THnS. Function Members (Methods); public:. THnT<short>(); THnT<short>(const char* name, const char* title, Int_t dim, const Int_t* nbins, const Double_t* xmin, const Double_t* xmax); ~THnT<short>(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c = 1.); voidTHn::AddBinContent(const Int_t* idx, Double_t v = 1.); virtual voidTHn::AddBinContent(Long64_t bin, Double_t v = 1.); virtual voidTHn::AddBinError2(Long64_t bin, Double_t e2); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTHnBase::Browse(TBrowser* b); voidTHnBase::CalculateErrors(Bool_t calc = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THn*THn::CreateHn(const char* name, const char* title, const TH1* h1); static THn*THn::CreateHn(const char* name, const char* title, const THnBase* hn); virtual ROOT::THnBaseBinIter*THn::CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THnT_short_.html:2226,Clear,Clear,2226,root/html534/THnT_short_.html,https://root.cern,https://root.cern/root/html534/THnT_short_.html,1,['Clear'],['Clear']
Usability,"classes, this always returns false. ;  ; double maxVal (Int_t code) const override;  Return maximum value for set of observables identified by code assigned in getMaxVal. ;  ; std::list< double > * plotSamplingHint (RooAbsRealLValue &obs, double xlo, double xhi) const override;  Return sampling hint for making curves of (projections) of this function as the recursive division strategy of RooCurve cannot deal efficiently with the vertical lines that occur in a non-interpolated histogram. ;  ; void setCdfBoundaries (bool flag);  Set use of special boundary conditions for c.d.f.s. ;  ; void setInterpolationOrder (Int_t order);  Set histogram interpolation order. ;  ; void Streamer (TBuffer &) override;  Stream an object of class RooHistFunc. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; double totVolume () const;  Get total bin volume spanned by this hist function. ;  ; void translate (RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ; RooArgSet const & variables () const;  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 objec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooHistFunc.html:4434,simpl,simple,4434,doc/master/classRooHistFunc.html,https://root.cern,https://root.cern/doc/master/classRooHistFunc.html,1,['simpl'],['simple']
Usability,"clicked button via the method; GetClicked(). For example, bar->GetClicked()->GetName(); will return the name of the last clicked button. {; gROOT.Reset(""a"");; TControlBar bar(""vertical"");; bar.AddButton(""Help to run demos"","".x demoshelp.C"",; ""Explains how to run the demos"");; bar.AddButton(""framework"", "".x framework.C"",; ""An Example of Object Oriented User Interface"");; bar.AddButton(""hsimple"", "".x hsimple.C"",; ""An Example Creating Histograms/Ntuples on File"");; bar.AddButton(""hsum"", "".x hsum.C"",; ""Filling histograms and some graphics options"");; bar.AddButton(""canvas"", "".x canvas.C"",; ""Canvas and Pad Management"");; bar.AddButton(""formula1"", "".x formula1.C"",; ""Simple Formula and Functions"");; bar.AddButton(""fillrandom"", "".x fillrandom.C"",; ""Histograms with Random Numbers from a Function"");; bar.AddButton(""fit1"", "".x fit1.C"",; ""A Simple Fitting Example"");; bar.AddButton(""h1draw"", "".x h1draw.C"",; ""Drawing Options for 1D Histograms"");; bar.AddButton(""graph"", "".x graph.C"",; ""Examples of a simple graph"");; bar.AddButton(""tornado"", "".x tornado.C"",; ""Examples of 3-D PolyMarkers"");; bar.AddButton(""shapes"", "".x shapes.C"",; ""The Geometry Shapes"");; bar.AddButton(""atlasna49"", "".x atlasna49.C"",; ""Creating and Viewing Geometries"");; bar.AddButton(""file_layout"", "".x file.C"",; ""The ROOT file format"");; bar.AddButton(""tree_layout"", "".x tree.C"",; ""The Tree Data Structure"");; bar.AddButton(""ntuple1"", "".x ntuple1.C"",; ""Ntuples and Selections"");; bar.AddButton(""run benchmarks"", "".x benchmarks.C"",; ""Runs all the ROOT benchmarks"");; bar.AddButton(""rootmarks"", "".x rootmarks.C"",; ""Prints an estimated ROOTMARKS for your machine"");; bar.AddButton(""edit_hsimple"", "".!ved hsimple.C &"",; ""Invokes the text editor on file hsimple.C"");; bar.AddButton(""Close Bar"", ""gROOT.Reset(\""a\"")"",; ""Close ControlBar"");; bar.Show();; gROOT.SaveContext();; }. /*. */. Function Members (Methods); public:. TControlBar(); TControlBar(const TControlBar&); TControlBar(const char* orientation, const char* title = """"); TC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TControlBar.html:1741,simpl,simple,1741,root/html526/TControlBar.html,https://root.cern,https://root.cern/root/html526/TControlBar.html,7,['simpl'],['simple']
Usability,"clicked button via the method; GetClicked(). For example, bar->GetClicked()->GetName(); will return the name of the last clicked button. {; gROOT.Reset(""a"");; TControlBar bar(""vertical"");; bar.AddButton(""Help to run demos"","".x demoshelp.C"",; ""Explains how to run the demos"");; bar.AddButton(""framework"", "".x framework.C"",; ""An Example of Object Oriented User Interface"");; bar.AddButton(""hsimple"", "".x hsimple.C"",; ""An Example Creating Histograms/Ntuples on File"");; bar.AddButton(""hsum"", "".x hsum.C"",; ""Filling histograms and some graphics options"");; bar.AddButton(""canvas"", "".x canvas.C"",; ""Canvas and Pad Management"");; bar.AddButton(""formula1"", "".x formula1.C"",; ""Simple Formula and Functions"");; bar.AddButton(""fillrandom"", "".x fillrandom.C"",; ""Histograms with Random Numbers from a Function"");; bar.AddButton(""fit1"", "".x fit1.C"",; ""A Simple Fitting Example"");; bar.AddButton(""h1draw"", "".x h1draw.C"",; ""Drawing Options for 1D Histograms"");; bar.AddButton(""graph"", "".x graph.C"",; ""Examples of a simple graph"");; bar.AddButton(""tornado"", "".x tornado.C"",; ""Examples of 3-D PolyMarkers"");; bar.AddButton(""shapes"", "".x shapes.C"",; ""The Geometry Shapes"");; bar.AddButton(""atlasna49"", "".x atlasna49.C"",; ""Creating and Viewing Geometries"");; bar.AddButton(""file_layout"", "".x file.C"",; ""The ROOT file format"");; bar.AddButton(""tree_layout"", "".x tree.C"",; ""The Tree Data Structure"");; bar.AddButton(""ntuple1"", "".x ntuple1.C"",; ""Ntuples and Selections"");; bar.AddButton(""run benchmarks"", "".x benchmarks.C"",; ""Runs all the ROOT benchmarks"");; bar.AddButton(""rootmarks"", "".x rootmarks.C"",; ""Prints an estimated ROOTMARKS for your machine"");; bar.AddButton(""edit_hsimple"", "".!ved hsimple.C &"",; ""Invokes the text editor on file hsimple.C"");; bar.AddButton(""Close Bar"", ""gROOT.Reset(\""a\"")"",; ""Close ControlBar"");; bar.Show();; gROOT.SaveContext();; }. /*. */. Function Members (Methods); public:. virtual~TControlBar(); voidTObject::AbstractMethod(const char* method) const; virtual voidTControlBarButton::Act",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TControlBar.html:1749,simpl,simple,1749,root/html602/TControlBar.html,https://root.cern,https://root.cern/root/html602/TControlBar.html,4,['simpl'],['simple']
Usability,"client=nullptr);  Print tree structure of expression tree on given ostream. ;  ; void printComponentTree (const char *indent="""", const char *namePat=nullptr, Int_t nLevel=999);  Print tree structure of expression tree on given ostream, only branch nodes are printed. ;  ; void printDirty (bool depth=true) const;  Print information about current value dirty state information. ;  ; virtual void printMetaArgs (std::ostream &) const;  ; void printName (std::ostream &os) const override;  Print object name. ;  ; void printTitle (std::ostream &os) const override;  Print object title. ;  ; void printTree (std::ostream &os, TString indent="""") const override;  Print object tree structure. ;  ; bool recursiveCheckObservables (const RooArgSet *nset) const;  Recursively call checkObservables on all nodes in the expression tree. ;  ; void removeStringAttribute (const Text_t *key);  Delete a string attribute with a given key. ;  ; void resetDataToken ();  ; void setAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setDataToken (std::size_t index);  Sets the token for retrieving results in the BatchMode. For internal use only. ;  ; void setLocalNoDirtyInhibit (bool flag) const;  ; void SetName (const char *name) override;  Set the name of the TNamed. ;  ; void SetNameTitle (const char *name, const char *title) override;  Set all the TNamed parameters (name and title). ;  ; void setProhibitServerRedirect (bool flag);  ; void setStringAttribute (const Text_t *key, const Text_t *value);  Associate string 'value' to this object under key 'key'. ;  ; void setTransientAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setWorkspace (RooWorkspace &ws);  ; const std::map< std::string, std::string > & stringAttributes () const;  ; const std::set< std::string > & transientAttributes () const;  ; virtual void translate (RooFit::Detail::CodeSquashCon",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooChi2Var.html:33018,clear,clear,33018,doc/master/classRooChi2Var.html,https://root.cern,https://root.cern/doc/master/classRooChi2Var.html,2,['clear'],['clear']
Usability,"clipInvalid = kFALSE) const; static voidblockDecompose(const TMatrixD& input, const vector<int>& map1, const vector<int>& map2, TMatrixDSym& S11, TMatrixD& S12, TMatrixD& S21, TMatrixDSym& S22); voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; const TMatrixDSym&covarianceMatrix() const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooMultiVarGaussian.html:3293,clear,clearShapeDirty,3293,root/html532/RooMultiVarGaussian.html,https://root.cern,https://root.cern/root/html532/RooMultiVarGaussian.html,2,['clear'],['clearShapeDirty']
Usability,"clipInvalid = kFALSE) const; static voidblockDecompose(const TMatrixD& input, const vector<int>& map1, const vector<int>& map2, TMatrixDSym& S11, TMatrixD& S12, TMatrixD& S21, TMatrixDSym& S22); voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); const TMatrixDSym&covarianceMatrix() const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), const RooCmdArg arg5 = RooCmdArg::none(), const RooCmdArg arg6 = R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooMultiVarGaussian.html:3162,clear,clearShapeDirty,3162,root/html528/RooMultiVarGaussian.html,https://root.cern,https://root.cern/root/html528/RooMultiVarGaussian.html,1,['clear'],['clearShapeDirty']
Usability,"clipInvalid = kFALSE) const; static voidblockDecompose(const TMatrixD& input, const vector<int>& map1, const vector<int>& map2, TMatrixDSym& S11, TMatrixD& S12, TMatrixD& S21, TMatrixDSym& S22); voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); const TMatrixDSym&covarianceMatrix() const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& ar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooMultiVarGaussian.html:3162,clear,clearShapeDirty,3162,root/html530/RooMultiVarGaussian.html,https://root.cern,https://root.cern/root/html530/RooMultiVarGaussian.html,1,['clear'],['clearShapeDirty']
Usability,"clude <TMVA/DNN/SGD.h>. Inheritance diagram for TMVA::DNN::TSGD< Architecture_t, Layer_t, DeepNet_t >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ Matrix_t. template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . using TMVA::DNN::TSGD< Architecture_t, Layer_t, DeepNet_t >::Matrix_t = typename Architecture_t::Matrix_t. Definition at line 48 of file SGD.h. ◆ Scalar_t. template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . using TMVA::DNN::TSGD< Architecture_t, Layer_t, DeepNet_t >::Scalar_t = typename Architecture_t::Scalar_t. Definition at line 49 of file SGD.h. Constructor & Destructor Documentation. ◆ TSGD(). template<typename Architecture_t , typename Layer_t , typename DeepNet_t > . TMVA::DNN::TSGD< Architecture_t, Layer_t, DeepNet_t >::TSGD ; (; Scalar_t ; learningRate, . DeepNet_t & ; deepNet, . Scalar_t ; momentum . ). Constructor. ; Definition at line 86 of file SGD.h. ◆ ~TSGD(). template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . TMVA::DNN::TSGD< Architecture_t, Layer_t, DeepNet_t >::~TSGD ; (; ). default . Destructor. . Member Function Documentation. ◆ GetMomentum(). template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . Scalar_t TMVA::DNN::TSGD< Architecture_t, Layer_t, DeepNet_t >::GetMomentum ; (; ); const. inline . Getters. ; Definition at line 72 of file SGD.h. ◆ GetPastBiasGradients(). template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . std::vector< std::vector< Matrix_t > > & TMVA::DNN::TSGD< Architecture_t, Layer_t, DeepNet_t >::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TSGD.html:4244,learn,learningRate,4244,doc/master/classTMVA_1_1DNN_1_1TSGD.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TSGD.html,1,['learn'],['learningRate']
Usability,"clude.hEmpty file to test TProof::Load in runProof.C and StressProof.cxx in conjunction with ProcFileElements and ProofEventProc ;  finalizeProof.CMacro to finalize queries run with the macro tutorials/runProof ;  getProof.CAttaches to a PROOF session, possibly at the indicated URL ;  ProcFileElements.CClass to hold information about the processed elements of a file ;  ProcFileElements.hClass to hold information about the processed elements of a file ;  ProofAux.CSelector used for auxiliary actions in the PROOF tutorials ;  ProofAux.hSelector used for auxiliary actions in the PROOF tutorials ;  ProofEvent.CSelector for generic processing with Event ;  ProofEvent.hSelector for generic processing with Event ;  ProofEventProc.CSelector to process trees containing Event structures ;  ProofEventProc.hSelector to process trees containing Event structures ;  ProofFriends.CSelector to process tree friends ;  ProofFriends.hSelector to process tree friends ;  ProofNtuple.CSelector to fill a simple ntuple ;  ProofNtuple.hSelector to fill a simple ntuple ;  ProofPythia.CSelector to generate Monte Carlo events with Pythia8 ;  ProofPythia.hSelector to generate Monte Carlo events with Pythia8 ;  ProofSimple.CSelector to fill a set of histograms ;  ProofSimple.hSelector to fill a set of histograms ;  ProofSimpleFile.CSelector to fill a set of histograms and merging via file ;  ProofSimpleFile.hSelector to fill a set of histograms and merging via file ;  ProofStdVect.CSelector for generic processing with stdlib collections ;  ProofStdVect.hSelector for generic processing with stdlib collections ;  ProofTests.CAuxilliary selector used to test PROOF functionality ;  ProofTests.hAuxilliary selector used to test PROOF functionality ;  runProof.CMacro to run examples of analysis on PROOF, corresponding to the TSelector implementations found under <ROOTSYS>/tutorials/proof ;  ► pyroot;  benchmarks.pyRun benchmarks macros ;  demo.pyTo run, do an ""execfile( '<path-to>/demo.py' )"" or ""python ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:136465,simpl,simple,136465,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,5,['simpl'],['simple']
Usability,"color algorithms (RGB, CMY, CIE, YIQ, HVS models). When the level of a component reaches the limit value one can choose either smooth transition (by decreasing the limit value) or a sharp modulo transition (continuing with 0 value). This allows various visual effects. One can choose from the following set of the algorithms:. 0 = RGB Smooth,; 1 = RGB Modulo,; 2 = CMY Smooth,; 3 = CMY Modulo,; 4 = CIE Smooth; 5 = CIE Modulo,; 6 = YIQ Smooth,; 7 = YIQ Modulo,; 8 = HVS Smooth,; 9 = HVS Modulo. This function does not apply on Simple display modes group. Default value is 0. Example choosing CMY Modulo to paint the 2D histogram:; h2->Draw(""SPEC c1(3) dm(0,1) a(30,30,0)"");; The operator “lp(x,y,z)” sets the light position. In Light and LightHeight display modes groups the color palette is calculated according to the fictive light source position in 3-d space. Using this function one can change the source’s position and thus achieve various graphical effects. This function does not apply for Simple and Height display modes groups. Default is: lp(1000,1000,100) .; The operator “s(shading,shadow)” allows to set the shading. The surface picture is composed of triangles. The edges of the neighboring triangles can be smoothed (shaded). The shadow can be painted as well. The function does not apply on Simple display modes group. The possible values for shading are:. 0 = Not Shaded,; 1 = Shaded. The possible values for shadow are:. 0 = Shadows are not painted,; 1 = Shadows are painted. Default values: s(1,0) .; The operator “b(bezier)” sets the Bezier smoothing. For Simple display modes group and for Grid, LinesX and LinesY display modes one can smooth data using Bezier smoothing algorithm. The function does not apply on other display modes groups and display modes. Possible values are: 0 = No bezier smoothing, 1 = Bezier smoothing. Default value is: b(0).; The operator “cw(width)” sets the contour width. This function applies only on for the Contours display mode. One can change th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:105799,Simpl,Simple,105799,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['Simpl'],['Simple']
Usability,"color component, hsv smooth; // algorithm, hsv modulo color component, it does not apply for simple; // display modes algorithm group [15]; float l_h_weight; // weight between shading according to fictive light source and; // according to channels counts, applies only for; // PICTURE2_MODE_GROUP_LIGHT_HEIGHT modes group; int xlight; // x position of fictive light source, applies only for rainbowed display; // modes with shading according to light; int ylight; // y position of fictive light source, applies only for rainbowed display; // modes with shading according to light; int zlight; // z position of fictive light source, applies only for rainbowed display; // modes with shading according to light; int shadow; // determines whether shadow will be drawn (no shadow, shadow),; // for rainbowed display modes with shading according to light; int shading; // determines whether the picture will shaded, smoothed (no shading,; // shading), for rainbowed display modes only; int bezier; // determines Bezier interpolation (applies only for simple display; // modes group for grid, x_lines, y_lines display modes); int border_color; // color of background of the picture; int full_border; // decides whether background is painted; int raster_en_dis; // decides whether the rasters are shown; int raster_long; // decides whether the rasters are drawn as long lines; int raster_color; // color of the rasters; char *raster_description_x; // x axis description; char *raster_description_y; // y axis description; char *raster_description_z; // z axis description; int pen_color; // color of spectrum; int pen_dash; // style of pen; int pen_width; // width of line; int chanmark_en_dis; // decides whether the channel marks are shown; int chanmark_style; // style of channel marks; int chanmark_width; // width of channel marks; int chanmark_height; // height of channel marks; int chanmark_color; // color of channel marks; int chanline_en_dis; // decides whether the channel lines (grid) are shown.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/spectrum/Spectrum.html:73965,simpl,simple,73965,root/html534/guides/spectrum/Spectrum.html,https://root.cern,https://root.cern/root/html534/guides/spectrum/Spectrum.html,4,['simpl'],['simple']
Usability,"color); Delegate to gVirtualX. void SetTextFont(Font_t tfont); Delegate to gVirtualX. void SetTextSize(Float_t tsize); Delegate to gVirtualX. void SetTextSizePixels(Int_t npixels); Delegate to gVirtualX. Int_t CreateDrawable(UInt_t w, UInt_t h); Create a gVirtualX Pixmap. void ClearDrawable(); Clear the current gVirtualX window. void CopyDrawable(Int_t id, Int_t px, Int_t py); Copy a gVirtualX pixmap. void DestroyDrawable(); Close the current gVirtualX pixmap. void SelectDrawable(Int_t device); Select the window in which the graphics will go. void DrawPixels(const unsigned char* pixelData, UInt_t width, UInt_t height, Int_t dstX, Int_t dstY, Bool_t enableAlphaBlending); Noop, for non-gl pad TASImage calls gVirtualX->CopyArea. void DrawLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2); Paint a simple line. void DrawLineNDC(Double_t u1, Double_t v1, Double_t u2, Double_t v2); Paint a simple line in normalized coordinates. void DrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2, TVirtualPadPainter::EBoxMode mode); Paint a simple box. void DrawFillArea(Int_t n, const Double_t* x, const Double_t* y); Paint filled area. void DrawFillArea(Int_t n, const Float_t* x, const Float_t* y); Paint filled area. void DrawPolyLine(Int_t n, const Double_t* x, const Double_t* y). void DrawPolyLine(Int_t n, const Float_t* x, const Float_t* y); Paint polyline. void DrawPolyLineNDC(Int_t n, const Double_t* u, const Double_t* v); Paint polyline in normalized coordinates. void DrawPolyMarker(Int_t n, const Double_t* x, const Double_t* y); Paint polymarker. void DrawPolyMarker(Int_t n, const Float_t* x, const Float_t* y); Paint polymarker. void DrawText(Double_t x, Double_t y, const char* text, TVirtualPadPainter::ETextMode mode); Paint text. void DrawText(Double_t x, Double_t y, const wchar_t* text, TVirtualPadPainter::ETextMode mode); That's a special version working with wchar_t and required by TMathText (who uses utf-8(?)). void DrawTextNDC(Double_t u, Double_t v, const cha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TPadPainter.html:6139,simpl,simple,6139,root/html602/TPadPainter.html,https://root.cern,https://root.cern/root/html602/TPadPainter.html,2,['simpl'],['simple']
Usability,"color); Delegate to gVirtualX. void SetTextFont(Font_t tfont); Delegate to gVirtualX. void SetTextSize(Float_t tsize); Delegate to gVirtualX. void SetTextSizePixels(Int_t npixels); Delegate to gVirtualX. Int_t CreateDrawable(UInt_t w, UInt_t h); Create a gVirtualX Pixmap. void ClearDrawable(); Clear the current gVirtualX window. void CopyDrawable(Int_t id, Int_t px, Int_t py); Copy a gVirtualX pixmap. void DestroyDrawable(); Close the current gVirtualX pixmap. void SelectDrawable(Int_t device); Select the window in which the graphics will go. void DrawPixels(const unsigned char* pixelData, UInt_t width, UInt_t height, Int_t dstX, Int_t dstY, Bool_t enableAlphaBlending); Noop, for non-gl pad TASImage calls gVirtualX->CopyArea. void DrawLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2); Paint a simple line. void DrawLineNDC(Double_t u1, Double_t v1, Double_t u2, Double_t v2); Paint a simple line in normalized coordinates. void DrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2, TVirtualPadPainter::EBoxMode mode); Paint a simple box. void DrawFillArea(Int_t n, const Double_t* x, const Double_t* y); Paint filled area. void DrawFillArea(Int_t n, const Float_t* x, const Float_t* y); Paint filled area. void DrawPolyLine(Int_t n, const Double_t* x, const Double_t* y); Paint Polyline. void DrawPolyLine(Int_t n, const Float_t* x, const Float_t* y); Paint polyline. void DrawPolyLineNDC(Int_t n, const Double_t* u, const Double_t* v); Paint polyline in normalized coordinates. void DrawPolyMarker(Int_t n, const Double_t* x, const Double_t* y); Paint polymarker. void DrawPolyMarker(Int_t n, const Float_t* x, const Float_t* y); Paint polymarker. void DrawText(Double_t x, Double_t y, const char* text, TVirtualPadPainter::ETextMode mode); Paint text. void DrawText(Double_t x, Double_t y, const wchar_t* text, TVirtualPadPainter::ETextMode mode); Special version working with wchar_t and required by TMathText. void DrawTextNDC(Double_t u, Double_t v, const char* text, TVir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TPadPainter.html:6139,simpl,simple,6139,root/html604/TPadPainter.html,https://root.cern,https://root.cern/root/html604/TPadPainter.html,2,['simpl'],['simple']
Usability,"column will also not correspond to the entry numbers in the input dataset (e.g. TChain) in multi-thread runs.; WarningBy default, RDataFrame will use as many threads as the hardware supports, using up all the resources on a machine. This might be undesirable on shared computing resources such as a batch cluster. Therefore, when running on shared computing resources, use ROOT::EnableImplicitMT(i); replacing i with the number of CPUs/slots that were allocated for this job. Thread-safety of user-defined expressions; RDataFrame operations such as Histo1D() or Snapshot() are guaranteed to work correctly in multi-thread event loops. User-defined expressions, such as strings or lambdas passed to Filter(), Define(), Foreach(), Reduce() or Aggregate() will have to be thread-safe, i.e. it should be possible to call them concurrently from different threads.; Note that simple Filter() and Define() transformations will inherently satisfy this requirement: Filter() / Define() expressions will often be pure in the functional programming sense (no side-effects, no dependency on external state), which eliminates all risks of race conditions.; In order to facilitate writing of thread-safe operations, some RDataFrame features such as Foreach(), Define() or OnPartialResult() offer thread-aware counterparts (ForeachSlot(), DefineSlot(), OnPartialResultSlot()): their only difference is that they will pass an extra slot argument (an unsigned integer) to the user-defined expression. When calling user-defined code concurrently, RDataFrame guarantees that different threads will employ different values of the slot parameter, where slot will be a number between 0 and GetNSlots() - 1. In other words, within a slot, computation runs sequentially and events are processed sequentially. Note that the same slot might be associated to different threads over the course of a single event loop, but two threads will never receive the same slot at the same time. This extra parameter might facilitate writi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:46668,simpl,simple,46668,doc/v632/classROOT_1_1RDataFrame.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html,2,['simpl'],['simple']
Usability,"command.; Merged commands are executed in reverse order. const char * GetName() const; Returns the command name. Default name is ""ClassName::RedoName(args)""; If list of merged commands is not empty the name is; ""ClassName::RedoName(args):cname1:cname2 ..."". const char * GetTitle() const; Returns command description.; By default, ""ClassName::RedoName(args)_ClassName::UndoName(args)"". const char * GetRedoName() const; Returns the name of redo command. const char * GetUndoName() const; Returns the name of undo command. Long_t * GetRedoArgs() const; Returns a pointer to array of redo arguments. Long_t * GetUndoArgs() const; Returns a pointer to array of undo arguments. Int_t GetNRargs() const; Returns a number of redo arguments. Int_t GetNUargs() const; Returns a number of undo arguments. void * GetObject() const; Returns an object for which undo redo acions are applied. Int_t GetStatus() const; Returns a number of sequential undo or redo operations. Bool_t IsMacro() const; Returns kTRUE if neither redo nor undo action specified. Bool_t IsUndoing() const; Undo action is in progress. Bool_t IsRedoing() const; Redo action is in progress. Bool_t IsExecuting() const; Returns kTRUE if command execution is in progress. void SetName(const char* name); Sets name of the command. void SetTitle(const char* title); Sets description of the command. void ls(Option_t* option = """") const; ls this command and merged commands. void PrintCollectionHeader(Option_t* option) const; Print collection header. TQCommand & operator=(const TQCommand& ). TQConnection * GetRedo() const; { return fRedo; }. TQConnection * GetUndo() const; { return fUndo; }. void Add(TObject* obj, Option_t* opt). » Author: Valeriy Onuchin 04/27/2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-03-14 16:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TQCommand.html:24046,undo,undo,24046,root/html534/TQCommand.html,https://root.cern,https://root.cern/root/html534/TQCommand.html,2,['undo'],['undo']
Usability,"command.; Merged commands are executed in reverse order. const char * GetName() const; Returns the command name. Default name is ""ClassName::RedoName(args)""; If list of merged commands is not empty the name is; ""ClassName::RedoName(args):cname1:cname2 ..."". const char * GetTitle() const; Returns command description.; By default, ""ClassName::RedoName(args)_ClassName::UndoName(args)"". const char * GetRedoName() const; Returns the name of redo command. const char * GetUndoName() const; Returns the name of undo command. Long_t * GetRedoArgs() const; Returns a pointer to array of redo arguments. Long_t * GetUndoArgs() const; Returns a pointer to array of undo arguments. Int_t GetNRargs() const; Returns a number of redo arguments. Int_t GetNUargs() const; Returns a number of undo arguments. void * GetObject() const; Returns an object for which undo redo acions are applied. Int_t GetStatus() const; Returns a number of sequential undo or redo operations. Bool_t IsMacro() const; Returns kTRUE if neither redo nor undo action specified. Bool_t IsUndoing() const; Undo action is in progress. Bool_t IsRedoing() const; Redo action is in progress. Bool_t IsExecuting() const; Returns kTRUE if command execution is in progress. void SetName(const char* name); Sets name of the command. void SetTitle(const char* title); Sets description of the command. void ls(Option_t* option = """") const; ls this command and merged commands. void PrintCollectionHeader(Option_t* option) const; Print collection header. TQCommand & operator=(const TQCommand& ). TQConnection * GetRedo() const; { return fRedo; }. TQConnection * GetUndo() const; { return fUndo; }. void Add(TObject* obj, Option_t* opt). » Author: Valeriy Onuchin 04/27/2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-02 16:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TQCommand.html:24786,undo,undo,24786,root/html604/TQCommand.html,https://root.cern,https://root.cern/root/html604/TQCommand.html,2,['undo'],['undo']
Usability,"command.; Merged commands are executed in reverse order. const char * GetName() const; Returns the command name. Default name is ""ClassName::RedoName(args)""; If list of merged commands is not empty the name is; ""ClassName::RedoName(args):cname1:cname2 ..."". const char * GetTitle() const; Returns command description.; By default, ""ClassName::RedoName(args)_ClassName::UndoName(args)"". const char * GetRedoName() const; Returns the name of redo command. const char * GetUndoName() const; Returns the name of undo command. Long_t * GetRedoArgs() const; Returns a pointer to array of redo arguments. Long_t * GetUndoArgs() const; Returns a pointer to array of undo arguments. Int_t GetNRargs() const; Returns a number of redo arguments. Int_t GetNUargs() const; Returns a number of undo arguments. void * GetObject() const; Returns an object for which undo redo acions are applied. Int_t GetStatus() const; Returns a number of sequential undo or redo operations. Bool_t IsMacro() const; Returns kTRUE if neither redo nor undo action specified. Bool_t IsUndoing() const; Undo action is in progress. Bool_t IsRedoing() const; Redo action is in progress. Bool_t IsExecuting() const; Returns kTRUE if command execution is in progress. void SetName(const char* name); Sets name of the command. void SetTitle(const char* title); Sets description of the command. void ls(Option_t* option = """") const; ls this command and merged commands. void PrintCollectionHeader(Option_t* option) const; Print collection header. TQCommand & operator=(const TQCommand& ). TQConnection * GetRedo() const; { return fRedo; }. TQConnection * GetUndo() const; { return fUndo; }. void Add(TObject* obj, Option_t* opt). » Author: Valeriy Onuchin 04/27/2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-30 15:28; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TQCommand.html:24786,undo,undo,24786,root/html602/TQCommand.html,https://root.cern,https://root.cern/root/html602/TQCommand.html,2,['undo'],['undo']
Usability,"command.; Merged commands are executed in reverse order. const char * GetName() const; Returns the command name. Default name is ""ClassName::RedoName(args)""; If list of merged commands is not empty the name is; ""ClassName::RedoName(args):cname1:cname2 ..."". const char * GetTitle() const; Returns command description.; By default, ""ClassName::RedoName(args)_ClassName::UndoName(args)"". const char * GetRedoName() const; Returns the name of redo command. const char * GetUndoName() const; Returns the name of undo command. Long_t * GetRedoArgs() const; Returns a pointer to array of redo arguments. Long_t * GetUndoArgs() const; Returns a pointer to array of undo arguments. Int_t GetNRargs() const; Returns a number of redo arguments. Int_t GetNUargs() const; Returns a number of undo arguments. void * GetObject() const; Returns an object for which undo redo acions are applied. Int_t GetStatus() const; Returns a number of sequential undo or redo operations. Bool_t IsMacro() const; Returns kTRUE if neither redo nor undo action specified. Bool_t IsUndoing() const; Undo action is in progress. Bool_t IsRedoing() const; Redo action is in progress. Bool_t IsExecuting() const; Returns kTRUE if command execution is in progress. void SetName(const char* name); Sets name of the command. void SetTitle(const char* title); Sets description of the command. void ls(Option_t* option = """") const; ls this command and merged commands. void PrintCollectionHeader(Option_t* option) const; Print collection header. TQConnection * GetRedo() const; { return fRedo; }. TQConnection * GetUndo() const; { return fUndo; }. void Add(TObject* obj, Option_t* opt). » Author: Valeriy Onuchin 04/27/2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TQCommand.h 25128 2008-08-12 17:59:19Z pcanal $ » Last generated: 2010-09-23 20:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TQCommand.html:23771,undo,undo,23771,root/html528/TQCommand.html,https://root.cern,https://root.cern/root/html528/TQCommand.html,1,['undo'],['undo']
Usability,"command.; Merged commands are executed in reverse order. const char * GetName() const; Returns the command name. Default name is ""ClassName::RedoName(args)""; If list of merged commands is not empty the name is; ""ClassName::RedoName(args):cname1:cname2 ..."". const char * GetTitle() const; Returns command description.; By default, ""ClassName::RedoName(args)_ClassName::UndoName(args)"". const char * GetRedoName() const; Returns the name of redo command. const char * GetUndoName() const; Returns the name of undo command. Long_t * GetRedoArgs() const; Returns a pointer to array of redo arguments. Long_t * GetUndoArgs() const; Returns a pointer to array of undo arguments. Int_t GetNRargs() const; Returns a number of redo arguments. Int_t GetNUargs() const; Returns a number of undo arguments. void * GetObject() const; Returns an object for which undo redo acions are applied. Int_t GetStatus() const; Returns a number of sequential undo or redo operations. Bool_t IsMacro() const; Returns kTRUE if neither redo nor undo action specified. Bool_t IsUndoing() const; Undo action is in progress. Bool_t IsRedoing() const; Redo action is in progress. Bool_t IsExecuting() const; Returns kTRUE if command execution is in progress. void SetName(const char* name); Sets name of the command. void SetTitle(const char* title); Sets description of the command. void ls(Option_t* option = """") const; ls this command and merged commands. void PrintCollectionHeader(Option_t* option) const; Print collection header. TQConnection * GetRedo() const; { return fRedo; }. TQConnection * GetUndo() const; { return fUndo; }. void Add(TObject* obj, Option_t* opt). » Author: Valeriy Onuchin 04/27/2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TQCommand.h 39365 2011-05-24 19:53:19Z pcanal $ » Last generated: 2011-07-04 15:36; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TQCommand.html:24026,undo,undo,24026,root/html530/TQCommand.html,https://root.cern,https://root.cern/root/html530/TQCommand.html,1,['undo'],['undo']
Usability,"command.; Merged commands are executed in reverse order. const char * GetName() const; Returns the command name. Default name is ""ClassName::RedoName(args)""; If list of merged commands is not empty the name is; ""ClassName::RedoName(args):cname1:cname2 ..."". const char * GetTitle() const; Returns command description.; By default, ""ClassName::RedoName(args)_ClassName::UndoName(args)"". const char * GetRedoName() const; Returns the name of redo command. const char * GetUndoName() const; Returns the name of undo command. Long_t * GetRedoArgs() const; Returns a pointer to array of redo arguments. Long_t * GetUndoArgs() const; Returns a pointer to array of undo arguments. Int_t GetNRargs() const; Returns a number of redo arguments. Int_t GetNUargs() const; Returns a number of undo arguments. void * GetObject() const; Returns an object for which undo redo acions are applied. Int_t GetStatus() const; Returns a number of sequential undo or redo operations. Bool_t IsMacro() const; Returns kTRUE if neither redo nor undo action specified. Bool_t IsUndoing() const; Undo action is in progress. Bool_t IsRedoing() const; Redo action is in progress. Bool_t IsExecuting() const; Returns kTRUE if command execution is in progress. void SetName(const char* name); Sets name of the command. void SetTitle(const char* title); Sets description of the command. void ls(Option_t* option = """") const; ls this command and merged commands. void PrintCollectionHeader(Option_t* option) const; Print collection header. TQConnection * GetRedo() const; { return fRedo; }. TQConnection * GetUndo() const; { return fUndo; }. void Add(TObject* obj, Option_t* opt). » Author: Valeriy Onuchin 04/27/2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TQCommand.h 39365 2011-05-24 19:53:19Z pcanal $ » Last generated: 2011-11-03 20:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TQCommand.html:24026,undo,undo,24026,root/html532/TQCommand.html,https://root.cern,https://root.cern/root/html532/TQCommand.html,2,['undo'],['undo']
Usability,"compares with state index number). Bool_t operator==(const char* label) const; Equality operator with a string (compares with state label string). Bool_t operator==(const RooAbsArg& other); Equality operator with another RooAbsArg. Only functional; is also a RooAbsCategory, will return true if index is the same. Bool_t isIdentical(const RooAbsArg& other, Bool_t assumeSameType = kFALSE). Bool_t isValidIndex(Int_t index) const; Check if state with given index is defined. Bool_t isValidLabel(const char* label) const; Check if state with given name is defined. const RooCatType* defineType(const char* label); Define a new state with given name. The lowest available; integer number is assigned as index value. const RooCatType* defineTypeUnchecked(const char* label, Int_t index); Internal version of defineType that does not check if type; already exists. const RooCatType* defineType(const char* label, Int_t index); Define new state with given name and index number. void clearTypes(); Delete all currently defined states. const RooCatType* lookupType(const RooCatType& type, Bool_t printError = kFALSE) const; Find our type that matches the specified type, or return 0 for no match. const RooCatType* lookupType(Int_t index, Bool_t printError = kFALSE) const; Find our type corresponding to the specified index, or return 0 for no match. const RooCatType* lookupType(const char* label, Bool_t printError = kFALSE) const; Find our type corresponding to the specified label, or return 0 for no match. Bool_t isValid() const; Check if current value is a valid state. Bool_t isValid(const RooCatType& value) const; Check if given state is defined for this object. Roo1DTable* createTable(const char* label) const; Create a table matching the shape of this category. Bool_t readFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); Read object contents from stream (dummy for now). void writeToStream(ostream& os, Bool_t compact) const; Write object contents to ostream. void printValue",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsCategory.html:23617,clear,clearTypes,23617,root/html534/RooAbsCategory.html,https://root.cern,https://root.cern/root/html534/RooAbsCategory.html,6,['clear'],['clearTypes']
Usability,conbase list tree icon picture; Bool_tfBusyKTRUE if busy i.e : connecting; TGPopupMenu*fCascadeMenuoptions menu entry; Bool_tfChangePicKTRUE if animation active; TStringfConfigFileconfiguration file name; TGHProgressBar*fConnectProgconnection progress bar; TContextMenu*fContextMenuinput/output objects context menu; time_tfElapsedtime of connection; TGPopupMenu*fFileMenufile menu entry; TGPopupMenu*fHelpMenuhelp menu entry; TGHorizontalFrame*fHf; TSessionInputFrame*fInputFrameinput frame; const TGPicture*fLocallocal session icon picture; TSessionLogView*fLogWindowexternal log window; TGMenuBar*fMenuBarapplication main menu bar; TGPopupMenu*fOptionsMenuoptions menu entry; TSessionOutputFrame*fOutputFrameoutput frame; TGPopupMenu*fPopupQryquery related popup menu; TGPopupMenu*fPopupSrvserver related popup menu; const TGPicture*fProofConconnected server icon picture; const TGPicture*fProofDiscondisconnected server icon picture; const TGPicture*fQueryConconnected(?) query icon picture; const TGPicture*fQueryDiscondisconnected(?) query icon picture; TSessionQueryFrame*fQueryFrameright side query frame; TGPopupMenu*fQueryMenuquery menu entry; TGIcon*fRightIconassociated picture; TGPicture*fRightIconPicturelower bottom left icon used to show connection status; TSessionServerFrame*fServerFrameright side server frame; TSessionFrame*fSessionFrameright side session frame; TGListTree*fSessionHierarchymain sessions/queries hierarchy list tree; TGListTreeItem*fSessionItembase (main) session list tree item; TGPopupMenu*fSessionMenusession menu entry; TList*fSessionslist of sessions; time_tfStarttime of connection; TGStatusBar*fStatusBarbottom status bar; TTimer*fTimertimer used to change icon picture; TGToolBar*fToolBarapplication tool bar; TGCanvas*fTreeViewmain right sessions/queries tree view; UserGroup_t*fUserGroupuser connected to session; TGVerticalFrame*fV1; TGVerticalFrame*fV2; TEnv*fViewerEnvviewer's configuration. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←;,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSessionViewer.html:24663,progress bar,progress bar,24663,root/html602/TSessionViewer.html,https://root.cern,https://root.cern/root/html602/TSessionViewer.html,4,['progress bar'],['progress bar']
Usability,"concrete implementation of IntervalCalculator, providing the computation ; of a credible interval using a Bayesian method. ; The class works only for one single parameter of interest and it integrates the likelihood function with the given prior; probability density function to compute the posterior probability. The result of the class is a one dimensional interval ; (class SimpleInterval ), which is obtained from inverting the cumulative posterior distribution. . The interface allows one to construct the class by passing the data set, probability density function for the model, the prior; functions and then the parameter of interest to scan. The nuisance parameters can also be passed to be marginalized when ; computing the posterior. Alternatively, the class can be constructed by passing the data and the ModelConfig containing; all the needed information (model pdf, prior pdf, parameter of interest, nuisance parameters, etc..). After configuring the calculator, one only needs to ask GetInterval(), which; will return an SimpleInterval object. By default the extrem of the integral are obtained by inverting directly the; cumulative posterior distribution. By using the method SetScanOfPosterior(nbins) the interval is then obtained by ; scanning the posterior function in the given number of points. The firts method is in general faster but it requires an; integration one extra dimension ( in the poi in addition to the nuisance parameters), therefore in some case it can be; less robust. . The class can also return the posterior function (method GetPosteriorFunction) or if needed the normalized; posterior function (the posterior pdf) (method GetPosteriorPdf). A posterior plot is also obtained using ; the GetPosteriorPlot method. The class allows to use different integration methods for integrating in the nuisances and in the poi. All the numerical ; integration methods of ROOT can be used via the method SetIntegrationType (see more in the documentation of; this method). F",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooStats__BayesianCalculator.html:1447,Simpl,SimpleInterval,1447,root/html532/RooStats__BayesianCalculator.html,https://root.cern,https://root.cern/root/html532/RooStats__BayesianCalculator.html,4,['Simpl'],['SimpleInterval']
Usability,"concurrent update of pad, file, benchmark facility, etc. 26.6.3 An Example on How to Use Canvas Event Signals (rqfiller.C); This example shows:. How the object communication mechanism can be used for handling the TCanvas’s mouse/key events in an interpreted class. With this demo you can fill histograms by hand:. Click the left button or move mouse with button pressed to fill histograms.; Use the right button of the mouse to reset the histograms. 26.6.4 Complex GUI Using Signals and Slots (guitest.C); Based on $ROOTSYS/test/guitest.cxx this example demonstrates:. All features of the original compiled guitest.cxx program.; Sophisticated use of signals and slots to build a complete user interface that can be executed either in the interpreter or as a compiled program. 27 Automatic HTML Documentation. THtml is ROOT’s documentation engine. It can be used to document your classes in a reference guide, and to convert your text or source files to HTML.; 27.1 Reference Guide; The Reference Guide for the ROOT classes at http://root.cern.ch/root/html/ has been generated by ROOT’s THtml class. Just as for ROOT’s classes, it can generate (and update) a reference guide for your classes, too. You document your classes using source code comments. All comments will be automatically put into a <pre></pre> environment to keep the indentation and line length. You can write “raw” HTML by enclosing comments in the keywords Begin_Html and End_Html.; To generate documentation for the class TObject you could run the following commands:; root[] THtml h; root[] h.SetInputDir(""$(ROOTSYS)"");; root[] h.MakeClass(""TObject"");; root[] h.CreateJavascript();; root[] h.CreateStylesheet();; The comments following the first comment of the form //____________________, before any method, is assumed to be the class description. As with any other documentation part, it has to be a continuous block of comments.; Any documented class will have an class index entry in the ClassIndex.html, showing their name wit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1240043,Guid,Guide,1240043,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['Guid'],['Guide']
Usability,"confined in a close vicinity. The linearity property of this method is reflected in the metric with which ""far apart"" and ""close vicinity"" are determined: the covariance matrix of the discriminant variable space.; The classification of the events in signal and background classes relies on the following characteristics (only): overall sample means, \( x_i \), for each input variable, \( i \), class-specific sample means, \( x_{S(B),i}\), and total covariance matrix \( T_{ij} \). The covariance matrix can be decomposed into the sum of a within ( \( W_{ij} \)) and a between-class ( \( B_{ij} \)) class matrix. They describe the dispersion of events relative to the means of their own class (within-class matrix), and relative to the overall sample means (between-class matrix). The Fisher coefficients, \( F_i \), are then given by. \[; F_i = \frac{\sqrt{N_s N_b}}{N_s + N_b} \sum_{j=1}^{N_{SB}} W_{ij}^{-1} (\bar{X}_{Sj} - \bar{X}_{Bj}); \]. where in TMVA is set \( N_S = N_B \), so that the factor in front of the sum simplifies to \( \frac{1}{2}\). The Fisher discriminant then reads. \[; X_{Fi} = F_0 + \sum_{i=1}^{N_{SB}} F_i X_i; \]. The offset \( F_0 \) centers the sample mean of \( x_{Fi} \) at zero. Instead of using the within-class matrix, the Mahalanobis variant determines the Fisher coefficients as follows:. \[; F_i = \frac{\sqrt{N_s N_b}}{N_s + N_b} \sum_{j=1}^{N_{SB}} (W + B)_{ij}^{-1} (\bar{X}_{Sj} - \bar{X}_{Bj}); \]. with resulting \( x_{Ma} \) that are very similar to the \( x_{Fi} \).; TMVA provides two outputs for the ranking of the input variables:. Fisher test: the Fisher analysis aims at simultaneously maximising the between-class separation, while minimising the within-class dispersion. A useful measure of the discrimination power of a variable is hence given by the diagonal quantity: \( \frac{B_{ii}}{W_{ii}} \) .; Discrimination power: the value of the Fisher coefficient is a measure of the discriminating power of a variable. The discrimination power of se",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodFisher.html:1954,simpl,simplifies,1954,doc/master/classTMVA_1_1MethodFisher.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodFisher.html,1,['simpl'],['simplifies']
Usability,"const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; virtual list<Double_t>*binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tcheckObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; const RooArgList&coefList() const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAddPdf.html:3897,clear,clearEvalError,3897,root/html532/RooAddPdf.html,https://root.cern,https://root.cern/root/html532/RooAddPdf.html,3,['clear'],['clearEvalError']
Usability,"const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; virtual list<Double_t>*binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tcheckObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooProdPdf.html:4343,clear,clearEvalError,4343,root/html532/RooProdPdf.html,https://root.cern,https://root.cern/root/html532/RooProdPdf.html,2,['clear'],['clearEvalError']
Usability,"const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; virtual list<Double_t>*binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tcheckObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooProdPdf.html:4343,clear,clearEvalError,4343,root/html534/RooProdPdf.html,https://root.cern,https://root.cern/root/html534/RooProdPdf.html,2,['clear'],['clearEvalError']
Usability,"const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tRooAbsAnaConvPdf::coefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*RooAbsAnaConvPdf::coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooDecay.html:2536,Clear,Clear,2536,root/html532/RooDecay.html,https://root.cern,https://root.cern/root/html532/RooDecay.html,1,['Clear'],['Clear']
Usability,"const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcoefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*RooAbsAnaConvPdf::coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooNonCPEigenDecay.html:3677,Clear,Clear,3677,root/html532/RooNonCPEigenDecay.html,https://root.cern,https://root.cern/root/html532/RooNonCPEigenDecay.html,1,['Clear'],['Clear']
Usability,"const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooChiSquarePdf.html:2577,Clear,Clear,2577,root/html532/RooChiSquarePdf.html,https://root.cern,https://root.cern/root/html532/RooChiSquarePdf.html,25,['Clear'],['Clear']
Usability,"const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidclearConvolutionWindow(); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); RooNumIntConfig&convIntConfig(); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooNumConvPdf.html:4712,Clear,Clear,4712,root/html532/RooNumConvPdf.html,https://root.cern,https://root.cern/root/html532/RooNumConvPdf.html,1,['Clear'],['Clear']
Usability,"const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; static voidblockDecompose(const TMatrixD& input, const vector<int>& map1, const vector<int>& map2, TMatrixDSym& S11, TMatrixD& S12, TMatrixD& S21, TMatrixDSym& S22); voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); const TMatrixDSym&covarianceMatrix() const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), const RooCmdArg arg5 = RooCmdArg::none(), const RooCmdArg arg6 = R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooMultiVarGaussian.html:3047,clear,clearShapeDirty,3047,root/html526/RooMultiVarGaussian.html,https://root.cern,https://root.cern/root/html526/RooMultiVarGaussian.html,1,['clear'],['clearShapeDirty']
Usability,"const TEmulatedCollectionProxy &);  . Friends; class TCollectionProxy;  . Additional Inherited Members;  Static Public Attributes inherited from TVirtualCollectionProxy; static const Int_t fgIteratorArenaSize = 16;  The size of a small buffer that can be allocated on the stack to store iterator-specific information. ;  ;  Protected Types inherited from TGenCollectionProxy; typedef void *(* ArrIterfunc_t) (void *from, size_t size);  ; typedef void *(* Collectfunc_t) (void *from, void *to);  ; typedef ROOT::Detail::TCollectionProxyInfo::Environ< char[64]> Env_t;  ; typedef ROOT::Detail::TCollectionProxyInfo::EnvironBase EnvironBase_t;  ; typedef void *(* Feedfunc_t) (void *from, void *to, size_t size);  ; typedef std::vector< EnvironBase_t * > Proxies_t;  ; typedef void(* Sizing_t) (void *obj, size_t size);  ; typedef std::vector< TStaging * > Staged_t;  Collection of pre-allocated staged array for associative containers. ;  ;  Protected Attributes inherited from TGenCollectionProxy; Method fClear;  Method cache for container accessors: clear container. ;  ; Collectfunc_t fCollect;  Method to collect objects from container. ;  ; ArrIterfunc_t fConstruct;  Container accessors: block construct. ;  ; std::map< std::string, TObjArray * > * fConversionReadMemberWise;  Array of bundle of TStreamerInfoActions to stream out (read) derived from another class. ;  ; Method0 fCreateEnv;  Method to allocate an Environment holder. ;  ; Sizing_t fDestruct;  Container accessors: block destruct. ;  ; EnvironBase_t * fEnv;  Address of the currently proxied object. ;  ; Feedfunc_t fFeed;  Container accessors: block feed. ;  ; Method fFirst;  Container accessors: generic iteration: first. ;  ; CopyIterator_t fFunctionCopyIterator;  ; CreateIterators_t fFunctionCreateIterators;  ; DeleteIterator_t fFunctionDeleteIterator;  ; DeleteTwoIterators_t fFunctionDeleteTwoIterators;  ; Next_t fFunctionNextIterator;  ; Value * fKey;  Descriptor of the key_type. ;  ; std::string fName;  Name of the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEmulatedCollectionProxy.html:11273,clear,clear,11273,doc/master/classTEmulatedCollectionProxy.html,https://root.cern,https://root.cern/doc/master/classTEmulatedCollectionProxy.html,1,['clear'],['clear']
Usability,"const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoTubeEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for tube editor. ~TGeoTubeEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the selected object. Bool_t IsDelayed() const; Check if shape drawing is delayed. void DoName(); Perform name change. void DoApply(); Slot for applying modifications. void DoModified(); Slot for signaling modifications. void DoUndo(); Slot for undoing last operation. void DoRmin(); Slot for rmin. void DoRmax(); Slot for rmax. void DoDz(); Slot for dz. TGeoTubeEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()). » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id$ » Last generated: 2015-06-02 16:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGeoTubeEditor.html:22222,undo,undoing,22222,root/html604/TGeoTubeEditor.html,https://root.cern,https://root.cern/root/html604/TGeoTubeEditor.html,2,['undo'],['undoing']
Usability,"const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoTubeEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for tube editor. ~TGeoTubeEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the selected object. Bool_t IsDelayed() const; Check if shape drawing is delayed. void DoName(); Perform name change. void DoApply(); Slot for applying modifications. void DoModified(); Slot for signaling modifications. void DoUndo(); Slot for undoing last operation. void DoRmin(); Slot for rmin. void DoRmax(); Slot for rmax. void DoDz(); Slot for dz. TGeoTubeEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()). » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id$ » Last generated: 2015-06-30 15:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoTubeEditor.html:22222,undo,undoing,22222,root/html602/TGeoTubeEditor.html,https://root.cern,https://root.cern/root/html602/TGeoTubeEditor.html,2,['undo'],['undoing']
Usability,"const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoRotationEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for rotation editor. ~TGeoRotationEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the selected rotation. void DoName(); Slot for name. void DoRotPhi(); Slot for phi (Euler X convention). void DoRotTheta(); Slot for theta (Euler X convention). void DoRotPsi(); Slot for psi (Euler X convention). void DoRotAngle(); Slot for additional rotation about one axis. Bool_t DoParameters(); Slot for checking parameters. void DoApply(); Slot for applying modifications. void DoCancel(); Slot for cancelling last un-applied operations. void DoModified(); Slot for notifying changes. void DoUndo(); Slot for undoing last changes. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id: TGeoMatrixEditor.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2010-09-23 20:09; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoRotationEditor.html:21908,undo,undoing,21908,root/html528/TGeoRotationEditor.html,https://root.cern,https://root.cern/root/html528/TGeoRotationEditor.html,1,['undo'],['undoing']
Usability,"const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoRotationEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for rotation editor. ~TGeoRotationEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the selected rotation. void DoName(); Slot for name. void DoRotPhi(); Slot for phi (Euler X convention). void DoRotTheta(); Slot for theta (Euler X convention). void DoRotPsi(); Slot for psi (Euler X convention). void DoRotAngle(); Slot for additional rotation about one axis. Bool_t DoParameters(); Slot for checking parameters. void DoApply(); Slot for applying modifications. void DoCancel(); Slot for cancelling last un-applied operations. void DoModified(); Slot for notifying changes. void DoUndo(); Slot for undoing last changes. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id: TGeoMatrixEditor.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-07-04 15:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGeoRotationEditor.html:22008,undo,undoing,22008,root/html530/TGeoRotationEditor.html,https://root.cern,https://root.cern/root/html530/TGeoRotationEditor.html,1,['undo'],['undoing']
Usability,"const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoRotationEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for rotation editor. ~TGeoRotationEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the selected rotation. void DoName(); Slot for name. void DoRotPhi(); Slot for phi (Euler X convention). void DoRotTheta(); Slot for theta (Euler X convention). void DoRotPsi(); Slot for psi (Euler X convention). void DoRotAngle(); Slot for additional rotation about one axis. Bool_t DoParameters(); Slot for checking parameters. void DoApply(); Slot for applying modifications. void DoCancel(); Slot for cancelling last un-applied operations. void DoModified(); Slot for notifying changes. void DoUndo(); Slot for undoing last changes. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id: TGeoMatrixEditor.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoRotationEditor.html:22008,undo,undoing,22008,root/html532/TGeoRotationEditor.html,https://root.cern,https://root.cern/root/html532/TGeoRotationEditor.html,2,['undo'],['undoing']
Usability,"const TGWindow* p = 0, UInt_t h = 1, UInt_t type = 1, Int_t id = -1, UInt_t options = kVerticalFrame, Pixel_t back = GetDefaultFrameBackground(), Bool_t reversed = kFALSE, Bool_t mark_ends = kFALSE, Bool_t constrained = kTRUE, Bool_t relative = kFALSE); virtual~TGTripleVSlider(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual voidTGWidget::Associate(const TGWindow* w); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGFrame::ChangeOptions(UInt_t options); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(); Bool_tTQObject::Disconnect(const char* signal = 0, void* receive",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGTripleVSlider.html:2845,Clear,Clear,2845,root/html532/TGTripleVSlider.html,https://root.cern,https://root.cern/root/html532/TGTripleVSlider.html,2,['Clear'],['Clear']
Usability,"const TGWindow* p, Int_t w = 1, Int_t h = 20); virtual~TGMdiMenuBar(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); voidAddPopup(TGHotString* s, TGPopupMenu* menu, TGLayoutHints* l); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(); Bool_tTQObject::Disconnect(const char* signal = 0, void* receive",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGMdiMenuBar.html:1405,Clear,Clear,1405,root/html532/TGMdiMenuBar.html,https://root.cern,https://root.cern/root/html532/TGMdiMenuBar.html,2,['Clear'],['Clear']
Usability,"const char * GetText() const. Int_t GetTextLength() const. const char * GetTipText() const. Int_t GetTipTextLength() const. void SetText(const char* ); {}. void SetTipText(const char* ); {}. void SetUserData(void* , Bool_t = kFALSE); {}. void * GetUserData() const. const TGPicture* GetPicture() const. void SetPictures(const TGPicture* , const TGPicture* ); {}. const TGPicture* GetCheckBoxPicture() const. void SetCheckBoxPictures(const TGPicture* , const TGPicture* ); {}. void SetCheckBox(Bool_t = kTRUE); {}. Bool_t HasCheckBox() const. void CheckItem(Bool_t = kTRUE). void Toggle(); { SetCheckBox( ! IsChecked()); }. Bool_t IsChecked() const. void CheckAllChildren(Bool_t = kTRUE); Propagation of checked-state form children to parents. {}. void CheckChildren(TGListTreeItem* , Bool_t ); {}. Bool_t HasCheckedChild(Bool_t = kFALSE); { return kTRUE; }. Bool_t HasUnCheckedChild(Bool_t = kFALSE); { return kTRUE; }. void UpdateState(); {}. Bool_t HasColor() const; Item coloration (underline + minibox). Color_t GetColor() const. void SetColor(Color_t ); {}. void ClearColor(); {}. void SetDNDSource(Bool_t onoff); Drag and drop. { if (onoff) fDNDState |= kIsDNDSource; else fDNDState &= ~kIsDNDSource; }. void SetDNDTarget(Bool_t onoff); { if (onoff) fDNDState |= kIsDNDTarget; else fDNDState &= ~kIsDNDTarget; }. Bool_t IsDNDSource() const; { return fDNDState & kIsDNDSource; }. Bool_t IsDNDTarget() const; { return fDNDState & kIsDNDTarget; }. Bool_t HandlesDragAndDrop() const; Allow handling by the items themselves ... NOT USED in TGListTree yet !!!!. { return kFALSE; }. void HandleDrag(); {}. void HandleDrop(); {}. void SavePrimitive(ostream& , Option_t* , Int_t ); {}. » Author: Fons Rademakers 25/02/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 15:54; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGListTreeItem.html:5495,Clear,ClearColor,5495,root/html604/TGListTreeItem.html,https://root.cern,https://root.cern/root/html604/TGListTreeItem.html,1,['Clear'],['ClearColor']
Usability,"const char * GetText() const. Int_t GetTextLength() const. const char * GetTipText() const. Int_t GetTipTextLength() const. void SetText(const char* ); {}. void SetTipText(const char* ); {}. void SetUserData(void* , Bool_t = kFALSE); {}. void * GetUserData() const. const TGPicture* GetPicture() const. void SetPictures(const TGPicture* , const TGPicture* ); {}. const TGPicture* GetCheckBoxPicture() const. void SetCheckBoxPictures(const TGPicture* , const TGPicture* ); {}. void SetCheckBox(Bool_t = kTRUE); {}. Bool_t HasCheckBox() const. void CheckItem(Bool_t = kTRUE). void Toggle(); { SetCheckBox( ! IsChecked()); }. Bool_t IsChecked() const. void CheckAllChildren(Bool_t = kTRUE); Propagation of checked-state form children to parents. {}. void CheckChildren(TGListTreeItem* , Bool_t ); {}. Bool_t HasCheckedChild(Bool_t = kFALSE); { return kTRUE; }. Bool_t HasUnCheckedChild(Bool_t = kFALSE); { return kTRUE; }. void UpdateState(); {}. Bool_t HasColor() const; Item coloration (underline + minibox). Color_t GetColor() const. void SetColor(Color_t ); {}. void ClearColor(); {}. void SetDNDSource(Bool_t onoff); Drag and drop. { if (onoff) fDNDState |= kIsDNDSource; else fDNDState &= ~kIsDNDSource; }. void SetDNDTarget(Bool_t onoff); { if (onoff) fDNDState |= kIsDNDTarget; else fDNDState &= ~kIsDNDTarget; }. Bool_t IsDNDSource() const; { return fDNDState & kIsDNDSource; }. Bool_t IsDNDTarget() const; { return fDNDState & kIsDNDTarget; }. Bool_t HandlesDragAndDrop() const; Allow handling by the items themselves ... NOT USED in TGListTree yet !!!!. { return kFALSE; }. void HandleDrag(); {}. void HandleDrop(); {}. void SavePrimitive(ostream& , Option_t* , Int_t ); {}. » Author: Fons Rademakers 25/02/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-04 16:52; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGListTreeItem.html:5274,Clear,ClearColor,5274,root/html534/TGListTreeItem.html,https://root.cern,https://root.cern/root/html534/TGListTreeItem.html,1,['Clear'],['ClearColor']
Usability,"const char * GetText() const. Int_t GetTextLength() const. const char * GetTipText() const. Int_t GetTipTextLength() const. void SetText(const char* ); {}. void SetTipText(const char* ); {}. void SetUserData(void* , Bool_t = kFALSE); {}. void * GetUserData() const. const TGPicture* GetPicture() const. void SetPictures(const TGPicture* , const TGPicture* ); {}. const TGPicture* GetCheckBoxPicture() const. void SetCheckBoxPictures(const TGPicture* , const TGPicture* ); {}. void SetCheckBox(Bool_t = kTRUE); {}. Bool_t HasCheckBox() const. void CheckItem(Bool_t = kTRUE). void Toggle(); { SetCheckBox( ! IsChecked()); }. Bool_t IsChecked() const. void CheckAllChildren(Bool_t = kTRUE); Propagation of checked-state form children to parents. {}. void CheckChildren(TGListTreeItem* , Bool_t ); {}. Bool_t HasCheckedChild(Bool_t = kFALSE); { return kTRUE; }. Bool_t HasUnCheckedChild(Bool_t = kFALSE); { return kTRUE; }. void UpdateState(); {}. Bool_t HasColor() const; Item coloration (underline + minibox). Color_t GetColor() const. void SetColor(Color_t ); {}. void ClearColor(); {}. void SetDNDSource(Bool_t onoff); Drag and drop. { if (onoff) fDNDState |= kIsDNDSource; else fDNDState &= ~kIsDNDSource; }. void SetDNDTarget(Bool_t onoff); { if (onoff) fDNDState |= kIsDNDTarget; else fDNDState &= ~kIsDNDTarget; }. Bool_t IsDNDSource() const; { return fDNDState & kIsDNDSource; }. Bool_t IsDNDTarget() const; { return fDNDState & kIsDNDTarget; }. Bool_t HandlesDragAndDrop() const; Allow handling by the items themselves ... NOT USED in TGListTree yet !!!!. { return kFALSE; }. void HandleDrag(); {}. void HandleDrop(); {}. void SavePrimitive(ostream& , Option_t* , Int_t ); {}. » Author: Fons Rademakers 25/02/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-30 14:55; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGListTreeItem.html:5495,Clear,ClearColor,5495,root/html602/TGListTreeItem.html,https://root.cern,https://root.cern/root/html602/TGListTreeItem.html,1,['Clear'],['ClearColor']
Usability,"const char * ; hname, . const char * ; varexp, . const char * ; selection = """", . Option_t * ; option = """", . Long64_t ; nentries = kMaxEntries, . Long64_t ; firstentry = 0 . ). virtual . Make a projection of a tree using selections. ; Depending on the value of varexp (described in Draw) a 1-D, 2-D, etc., projection of the tree will be filled in histogram hname. Note that the dimension of hname must match with the dimension of varexp. ; Definition at line 7498 of file TTree.cxx. ◆ Query(). TSQLResult * TTree::Query ; (; const char * ; varexp = """", . const char * ; selection = """", . Option_t * ; option = """", . Long64_t ; nentries = kMaxEntries, . Long64_t ; firstentry = 0 . ). virtual . Loop over entries and return a TSQLResult object containing entries following selection. ; Definition at line 7513 of file TTree.cxx. ◆ ReadFile(). Long64_t TTree::ReadFile ; (; const char * ; filename, . const char * ; branchDescriptor = """", . char ; delimiter = ' ' . ). virtual . Create or simply read branches from filename. ; if branchDescriptor = """" (default), it is assumed that the Tree descriptor is given in the first line of the file with a syntax like A/D:Table[2]/F:Ntracks/I:astring/C; F#define F(x, y, z); I#define I(x, y, z); otherwise branchDescriptor must be specified with the above syntax. If the type of the first variable is not specified, it is assumed to be ""/F""; If the type of any other variable is not specified, the type of the previous variable is assumed. eg; x:y:z (all variables are assumed of type ""F""); x/D:y:z (all variables are of type ""D""); x:y/D:z (x is type ""F"", y and z of type ""D""). delimiter allows for the use of another delimiter besides whitespace. This provides support for direct import of common data file formats like csv. If delimiter != ' ' and branchDescriptor == """", then the branch description is taken from the first line in the file, but delimiter is used for the branch names tokenization rather than ':'. Note however that if the values in the fir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTree.html:193183,simpl,simply,193183,doc/v632/classTTree.html,https://root.cern,https://root.cern/doc/v632/classTTree.html,2,['simpl'],['simply']
Usability,"const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsCachedPdf; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsPdf; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static RooNumGenConfig * defaultGeneratorConfig ();  Returns the default numeric MC generator configuration for all RooAbsReals. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCachedPdf.html:57815,clear,clearEvalErrorLog,57815,doc/master/classRooCachedPdf.html,https://root.cern,https://root.cern/doc/master/classRooCachedPdf.html,3,['clear'],['clearEvalErrorLog']
Usability,"const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Member Functions; bool checkSyntax (const char *arg);  Perform basic syntax on given factory expression. ;  ; void clearError ();  Associated workspace. ;  ; Int_t errorCount ();  ; std::string processAliasExpression (const char *arg);  Parse token. ;  ; std::string processCompositeExpression (const char *arg);  Process a single composite expression. ;  ; std::string processCreateArg (std::string &func, std::vector< std::string > &args);  Glue function between high-level syntax and low-level factory call to createArg: Process a parsed call to create a pdf named func ;  ; std::string processCreateVar (std::string &func, std::vector< std::string > &args);  Glue function between high-level syntax and low-level factory call to createVariable: Process a parsed call to create a variable named func ;  ; std::string processListExpression (const char *arg);  Process a list of high-level expression. ;  ; std::string processMetaArg (std::string &func, std::vector< std::string > &args);  Concatenate list of args into comma separated string. ;  ; std::string processSingleExpression (const char *arg);  Process a single high-",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFactoryWSTool.html:17817,clear,clearError,17817,doc/master/classRooFactoryWSTool.html,https://root.cern,https://root.cern/doc/master/classRooFactoryWSTool.html,1,['clear'],['clearError']
Usability,"const char * GetElementTitle () const;  Virtual function for retrieving title of the render-element. ;  ; virtual const TGPicture * GetListTreeCheckBoxIcon ();  Returns list-tree-item check-box picture appropriate for given rendering state. ;  ; virtual const TGPicture * GetListTreeIcon (Bool_t open=kFALSE);  Returns pointer to first listtreeicon. ;  ; virtual Color_t GetMainColor () const;  ; Color_t * GetMainColorPtr () const;  ; virtual Char_t GetMainTransparency () const;  ; TEveElement * GetMaster ();  Returns the master element - that is: ;  ; virtual Int_t GetNItems () const;  ; virtual TObject * GetObject (const TEveException &eh) const;  Get a TObject associated with this render-element. ;  ; Int_t GetParentIgnoreCnt () const;  Get number of parents that should be ignored in doing reference-counting. ;  ; virtual TObject * GetRenderObject (const TEveException &eh) const;  ; virtual Bool_t GetRnrAnything () const;  ; virtual Bool_t GetRnrChildren () const;  ; virtual Bool_t GetRnrSelf () const;  ; virtual Bool_t GetRnrState () const;  ; virtual UChar_t GetSelectedLevel () const;  Get selection level, needed for rendering selection and highlight feedback. ;  ; TRef & GetSource ();  ; TObject * GetSourceObject () const;  ; void * GetUserData () const;  ; TEveElement * GetVizModel () const;  ; const TString & GetVizTag () const;  ; virtual Bool_t HandleElementPaste (TEveElement *el);  React to element being pasted or dnd-ed. ;  ; Bool_t HasChild (TEveElement *el);  Check if element el is a child of this element. ;  ; Bool_t HasChildren () const;  ; virtual Bool_t HasMainColor () const;  ; virtual Bool_t HasMainTrans () const;  ; Bool_t HasParents () const;  ; virtual void HighlightElement (Bool_t state);  Set element's highlight state. Stamp appropriately. ;  ; void IncDenyDestroy ();  Increases the deny-destroy count of the element. ;  ; virtual void IncImpliedHighlighted ();  Increase element's implied-highlight count. Stamp appropriately. ;  ; virtual void I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveCaloData.html:13244,feedback,feedback,13244,doc/master/classTEveCaloData.html,https://root.cern,https://root.cern/doc/master/classTEveCaloData.html,3,['feedback'],['feedback']
Usability,"const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetCLsCleanupThreshold(Double_t th); virtual voidSetConfidenceLevel(Double_t cl); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetInterpolationOption(RooStats::HypoTestInverterResult::InterpolOption_t opt); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetTestSize(Double_t size); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); RooStats::SimpleIntervalRooStats::SimpleInterval::SimpleInterval(const char* name = 0); RooStats::SimpleIntervalRooStats::SimpleInterval::SimpleInterval(const RooStats::SimpleInterval&); RooStats::SimpleIntervalRooStats::SimpleInterval::SimpleInterval(const RooStats::SimpleInterval& other, const char* name); RooStats::SimpleIntervalRooStats::SimpleInterval::SimpleInterval(const char* name, const RooRealVar& var, Double_t lower, Double_t upper, Double_t cl); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Double_tUpperLimit(); Double_tUpperLimitEstimatedError(); voidUseCLs(bool on = true); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HypoTestInverterResult.html:6906,Simpl,SimpleIntervalRooStats,6906,root/html534/RooStats__HypoTestInverterResult.html,https://root.cern,https://root.cern/root/html534/RooStats__HypoTestInverterResult.html,1,['Simpl'],['SimpleIntervalRooStats']
Usability,"const char* name, const char* value); voidTProof::AddFeedback(const char* name); Int_tTProof::AddIncludePath(const char* incpath, Bool_t onClient = kFALSE, TList* wrks = 0); voidTProof::AddInput(TObject* obj); voidTProof::AddInputData(TObject* obj, Bool_t push = kFALSE); virtual voidTObject::AppendPad(Option_t* option = """"); Int_tTProof::Archive(Int_t query, const char* url); Int_tTProof::Archive(const char* queryref, const char* url = 0); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTProof::Browse(TBrowser* b); voidTProof::cd(Int_t id = -1); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; Int_tTProof::CleanupSession(const char* sessiontag); virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTProof::ClearCache(const char* file = 0); voidTProof::ClearData(UInt_t what = kUnregistered, const char* dsname = 0); virtual voidTProof::ClearDataSetCache(const char* dataset = 0); voidTProof::ClearFeedback(); voidTProof::ClearInput(); voidTProof::ClearInputData(TObject* obj = 0); voidTProof::ClearInputData(const char* name); Int_tTProof::ClearPackage(const char* package); Int_tTProof::ClearPackages(); virtual TObject*TNamed::Clone(const char* newname = """") const; voidTProof::Close(Option_t* option = """"); voidTProof::CloseProgressDialog()SIGNAL ; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTNamed::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TProofCondor.html:2049,Clear,ClearData,2049,root/html532/TProofCondor.html,https://root.cern,https://root.cern/root/html532/TProofCondor.html,2,['Clear'],['ClearData']
Usability,"const char* title = """")MENU ; virtual voidTEveElement::SetTransMatrix(Double_t* carr); virtual voidTEveElement::SetTransMatrix(const TGeoMatrix& mat); virtual voidTObject::SetUniqueID(UInt_t uid); voidTEveElement::SetUserData(void* ud); voidTEveElement::SetVizModel(TEveElement* model); voidTEveElement::SetVizTag(const TString& tag); virtual voidShowMembers(TMemberInspector& insp); virtual Bool_tTEveElement::SingleRnrState() const; virtual Int_tTNamed::Sizeof() const; voidTEveElement::SpawnEditor()MENU ; voidTEveElement::StampColorSelection(); voidTEveElement::StampObjProps(); voidTEveElement::StampTransBBox(); voidTEveElement::StampVisibility(); TGCompositeFrame*StartEmbedding(); TEveWindowFrame*StopEmbedding(const char* name = 0); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); voidTEveWindow::SwapWindow(TEveWindow* w); static voidTEveWindow::SwapWindows(TEveWindow* w1, TEveWindow* w2); voidTEveWindow::SwapWindowWithCurrent()MENU ; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTEveElement::TestCSCBits(UChar_t f) const; voidTEveWindow::TitleBarClicked(); voidTEveWindow::UndockWindow()MENU ; voidTEveWindow::UndockWindowDestroySlot()MENU ; virtual voidTEveElement::UnHighlighted(); virtual voidTEveElement::UnSelected(); virtual voidTObject::UseCurrentStyle(); voidTEveElement::VizDB_Apply(const char* tag)MENU ; voidTEveElement::VizDB_Insert(const char* tag, Bool_t replace = kTRUE, Bool_t update = kTRUE)MENU ; voidTEveElement::VizDB_Reapply()MENU ; voidTEveElement::VizDB_UpdateModel(Bool_t update = kTRUE)MENU ; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTEveElement::WriteVizParams(ostream& out, const TString& var).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TEveWindowSlot.html:17188,Undo,UndockWindow,17188,root/html532/TEveWindowSlot.html,https://root.cern,https://root.cern/root/html532/TEveWindowSlot.html,2,['Undo'],"['UndockWindow', 'UndockWindowDestroySlot']"
Usability,"const char*fRegExp[25]corresponding regular expression plain text; Bool_tfVarIsPointerfrodo: pointer or not flag; TSeqCollection*fpClasses; TSeqCollection*fpDirectives; TSeqCollection*fpEnvVars; TSeqCollection*fpFiles; TSeqCollection*fpGlobals; int*fpLocinitialized by Hook(); TSeqCollection*fpPragmas; TSeqCollection*fpSysIncFiles; TSeqCollection*fpUsers. Class Charts. Inheritance Chart:. TTabCom. Function documentation; TTabCom(); Default constructor. ~TTabCom(); Destructor. void ClearClasses(); Clear classes and namespace collections. void ClearCppDirectives(); Forget all Cpp directives seen so far. void ClearEnvVars(); Forget all environment variables seen so far. void ClearFiles(); Close all files. void ClearGlobalFunctions(); Forget all global functions seen so far.; Not needed anymore. Use gROOT->GetListOfGlobalFunctions(). void ClearGlobals(); Forget all global variables seen so far.; With teh new implamentation the list is gROOT->GetListOfGlobals(true). void ClearPragmas(); Forget all pragmas seen so far. void ClearSysIncFiles(); Close system files. void ClearUsers(); Forget all user seen so far. void ClearAll(); clears all lists; except for user names and system include files. void RehashClasses(); Do the class rehash. void RehashCppDirectives(); Cpp rehashing. void RehashEnvVars(); Environemnt variables rehashing. void RehashFiles(); Close files. void RehashGlobalFunctions(); Reload global functions. void RehashGlobals(); Reload globals. void RehashPragmas(); Reload pragmas. void RehashSysIncFiles(); Reload system include files. void RehashUsers(); Reload users. void RehashAll(); clears and then rebuilds all lists; except for user names and system include files. const TSeqCollection * GetListOfClasses(); Return the list of classes. const TSeqCollection * GetListOfCppDirectives(); Return the list of CPP directives. const TSeqCollection * GetListOfFilesInPath(const char[] path); ""path"" should be initialized with a colon separated list of; system directories. c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTabCom.html:8093,Clear,ClearPragmas,8093,root/html602/TTabCom.html,https://root.cern,https://root.cern/root/html602/TTabCom.html,2,['Clear'],['ClearPragmas']
Usability,"const std::string &fprefix="""");  Configures recording of communication data in protocol file Provided filename will be used to store JSON array with names of written files - text or binary If data was send from client, ""send"" entry will be placed. ;  ; void Run (double tm=0.);  Run window functionality for specified time If no action can be performed - just sleep specified time. ;  ; void Send (unsigned connid, const std::string &data);  Sends data to specified connection. ;  ; void SendBinary (unsigned connid, const void *data, std::size_t len);  Send binary data to specified connection. ;  ; void SendBinary (unsigned connid, std::string &&data);  Send binary data to specified connection. ;  ; void SetCallBacks (WebWindowConnectCallback_t conn, WebWindowDataCallback_t data, WebWindowConnectCallback_t disconn=nullptr);  Set call-backs function for connect, data and disconnect events. ;  ; void SetClearOnClose (const std::shared_ptr< void > &handle=nullptr);  Set handle which is cleared when last active connection is closed Typically can be used to destroy web-based widget at such moment. ;  ; void SetClientVersion (const std::string &vers);  Set client version, used as prefix in scripts URL When changed, web browser will reload all related JS files while full URL will be different Default is empty value - no extra string in URL Version should be string like ""1.2"" or ""ver1.subv2"" and not contain any special symbols. ;  ; void SetConnectCallBack (WebWindowConnectCallback_t func);  Set call-back function for new connection. ;  ; void SetConnLimit (unsigned lmt=0);  Configure maximal number of allowed connections - 0 is unlimited Will not affect already existing connections Default is 1 - the only client is allowed. ;  ; void SetConnToken (const std::string &token="""");  Configures connection token (default none) When specified, in URL of webpage such token should be provided as &token=value parameter, otherwise web window will refuse connection. ;  ; void SetDataCallBac",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:6873,clear,cleared,6873,doc/v632/classROOT_1_1RWebWindow.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html,1,['clear'],['cleared']
Usability,"const. Counts the number of different key values. Bool_t FillIndexArray(). File the array of the pointers and check whether; the original table has been sorted to avoid an extra job. Return: kTRUE - the table has been sorted; kFALSE - otherwise. Int_t FindFirstKey(const void* key) const. Looks for the first index of the ""key""; within SORTED table AFTER sorting. Returns: = -1 if the ""key"" was not found. Note: This method has no sense for; ==== the float and double key. To get the index within the original; unsorted table the GetIndex() method; may be used like this:; GetIndex(FindFirstKey(key)). const char * GetTableName() const; to be documented. const char * GetTableTitle() const; to be documented. const char * GetTableType() const; to be documented. TTable * GetTable() const; to be documented. void SetSearchMethod(); Select search function at once. void QSort(); Call the standard C run-time library ""qsort"" function. void LearnTable(). LearnTable() allows the TTableSorter to learn the structure of the; tables used to fill the ntuple.; table - the name of the table; buildTree - if kTRUE, then add TBranches to the TTree for each table; column (default=kFALSE). const char * At(Int_t i) const; {return fFirstParentRow + i*fParentRowSize;}. Long_t GetRowSize(); { return fParentRowSize; }. Int_t operator[](Int_t value) const; { return BSearch(value); }. Int_t operator[](Long_t value) const; { return BSearch(value); }. Int_t operator[](Double_t value) const; { return BSearch(value); }. Int_t operator[](void* value) const; { return BSearch(value); }. Int_t operator()(Float_t value); { return BinarySearch(value); }. Int_t operator()(Int_t value); { return BinarySearch(value); }. Int_t operator()(Long_t value); { return BinarySearch(value); }. Int_t operator()(Double_t value); { return BinarySearch(value); }. TTableSorter(const TTableSorter& ). TTableSorter & operator=(const TTableSorter& ). int CompareFloat_t(const void** , const void** ). int CompareInt_t(const void** , con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTableSorter.html:19287,learn,learn,19287,root/html534/TTableSorter.html,https://root.cern,https://root.cern/root/html534/TTableSorter.html,9,"['Learn', 'learn']","['LearnTable', 'learn']"
Usability,"const. Counts the number of different key values. Bool_t FillIndexArray(). File the array of the pointers and check whether; the original table has been sorted to avoid an extra job. Return: kTRUE - the table has been sorted; kFALSE - otherwise. Int_t FindFirstKey(const void* key) const. Looks for the first index of the ""key""; within SORTED table AFTER sorting. Returns: = -1 if the ""key"" was not found. Note: This method has no sense for; ==== the float and double key. To get the index within the original; unsorted table the GetIndex() method; may be used like this:; GetIndex(FindFirstKey(key)). const char * GetTableName() const; to be documented. const char * GetTableTitle() const; to be documented. const char * GetTableType() const; to be documented. TTable * GetTable() const; to be documented. void SetSearchMethod(); Select search function at once. void QSort(); Call the standard C run-time library ""qsort"" function. void LearnTable(). LearnTable() allows the TTableSorter to learn the structure of the; tables used to fill the ntuple.; table - the name of the table; buildTree - if kTRUE, then add TBranches to the TTree for each table; column (default=kFALSE). const char * At(Int_t i) const; {return fFirstParentRow + i*fParentRowSize;}. Long_t GetRowSize(); { return fParentRowSize; }. Int_t operator[](Int_t value) const; { return BSearch(value); }. Int_t operator[](Long_t value) const; { return BSearch(value); }. Int_t operator[](Double_t value) const; { return BSearch(value); }. Int_t operator[](void* value) const; { return BSearch(value); }. Int_t operator()(Float_t value); { return BinarySearch(value); }. Int_t operator()(Int_t value); { return BinarySearch(value); }. Int_t operator()(Long_t value); { return BinarySearch(value); }. Int_t operator()(Double_t value); { return BinarySearch(value); }. int CompareFloat_t(const void** , const void** ). int CompareInt_t(const void** , const void** ). int CompareLong_t(const void** , const void** ). int CompareULong_t(con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTableSorter.html:19189,learn,learn,19189,root/html528/TTableSorter.html,https://root.cern,https://root.cern/root/html528/TTableSorter.html,5,"['Learn', 'learn']","['LearnTable', 'learn']"
Usability,"const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTGFrame::DoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; const TGResourcePool*TGFrame::GetResourcePool() const; virtual void*TGFrame::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidTObject::MakeZombie(); TGWindow&TGWindow::operator=(const TGWindow& tgw); Int_tTGWidget::SetFlags(Int_t flags); virtual voidTGFrame::StartGuiBuilding(Bool_t on = kTRUE). Data Members; public:. enum TGFrame::[unnamed] { kDeleteWindowCalled; };; enum TGWindow::EEditMode { kEditEnable; kEditDisable; kEditDisableEvents; kEditDisableGrab; kEditDisableLayout; kEditDisableResize; kEditDisableHeight; kEditDisableWidth; kEditDisableBtnEnable; kEditDisableKeyEnable; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGHScrollBar.html:15191,Clear,ClearFlags,15191,root/html532/TGHScrollBar.html,https://root.cern,https://root.cern/root/html532/TGHScrollBar.html,4,['Clear'],['ClearFlags']
Usability,"const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Bool_tcacheAlpha() const; virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooIntegralMorph.html:6532,clear,clearValueAndShapeDirty,6532,root/html532/RooIntegralMorph.html,https://root.cern,https://root.cern/root/html532/RooIntegralMorph.html,2,['clear'],['clearValueAndShapeDirty']
Usability,"const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidclearConvolutionWindow(); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); RooNumIntConfig&convIntConfig(); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), const RooCmdArg arg5 = RooCmdArg::none(), const RooCmdArg arg6 = RooCmdArg::none(), const RooCmdArg arg7 = RooCmdArg:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooNumConvPdf.html:4911,clear,clearValueDirty,4911,root/html528/RooNumConvPdf.html,https://root.cern,https://root.cern/root/html528/RooNumConvPdf.html,1,['clear'],['clearValueDirty']
Usability,"const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidclearConvolutionWindow(); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); RooNumIntConfig&convIntConfig(); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooNumConvPdf.html:4911,clear,clearValueDirty,4911,root/html530/RooNumConvPdf.html,https://root.cern,https://root.cern/root/html530/RooNumConvPdf.html,1,['clear'],['clearValueDirty']
Usability,"const; Should always return false, unless you can highlight selected object in pad. void PushTopLevelSelectable(TObject* top); Does nothing, unless you implement your own picking.; When complex object containing sub-objects (which can be picked); is painted in a pad, this ""top-level"" object is pushed into; the selectables stack. void PushSelectableObject(TObject* obj); Does nothing, unless you implement your own picking.; ""Complete"" object, or part of complex object, which; can be picked. void PopTopLevelSelectable(); Does nothing, unless you implement your own picking.; Remove top level selectable and all its' children. void * GetSender(); { return this; }. void AbsCoordinates(Bool_t set). Double_t AbsPixeltoX(Int_t px). Double_t AbsPixeltoY(Int_t py). void AddExec(const char* name, const char* command). TLegend * BuildLegend(Double_t x1 = 0.5, Double_t y1 = 0.67, Double_t x2 = 0.88, Double_t y2 = 0.88, const char* title = """"). TVirtualPad* cd(Int_t subpadnumber = 0). void Clear(Option_t* option = """"). void Close(Option_t* option = """"). void CopyPixmap(). void CopyPixmaps(). void DeleteExec(const char* name). void Divide(Int_t nx = 1, Int_t ny = 1, Float_t xmargin = 0.01, Float_t ymargin = 0.01, Int_t color = 0). void Draw(Option_t* option = """"). void DrawClassObject(const TObject* obj, Option_t* option = """"). TH1F * DrawFrame(Double_t xmin, Double_t ymin, Double_t xmax, Double_t ymax, const char* title = """"). void ExecuteEventAxis(Int_t event, Int_t px, Int_t py, TAxis* axis). Short_t GetBorderMode() const. Short_t GetBorderSize() const. Int_t GetCanvasID() const. TCanvasImp * GetCanvasImp() const. TCanvas * GetCanvas() const. TVirtualPad * GetVirtCanvas() const. Int_t GetEvent() const. Int_t GetEventX() const. Int_t GetEventY() const. TFrame * GetFrame(). Color_t GetHighLightColor() const. Int_t GetNumber() const. void GetRange(Double_t& x1, Double_t& y1, Double_t& x2, Double_t& y2). void GetRangeAxis(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TVirtualPad.html:22824,Clear,Clear,22824,root/html534/TVirtualPad.html,https://root.cern,https://root.cern/root/html534/TVirtualPad.html,1,['Clear'],['Clear']
Usability,"const; const RooFormulaVar&RooResolutionModel::basis() const; virtual Int_tbasisCode(const char* name) const; const RooRealVar&RooResolutionModel::basisConvVar() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidRooResolutionModel::cleanup(); virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual RooResolutionModel*RooResolutionModel::convolution(RooFormulaVar* basis, RooAbsArg* owner) const; RooRealVar&RooResolutionModel::convVar() const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooAr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooGaussModel.html:3173,Clear,Clear,3173,root/html532/RooGaussModel.html,https://root.cern,https://root.cern/root/html532/RooGaussModel.html,3,['Clear'],['Clear']
Usability,"const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static TStringTQObject::CompressName(const char* method_name); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidCopy(TObject&) const; virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTGView::DoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); virtual voidDrawRegion(Int_t x, Int_t y, UInt_t w, UInt_t h); static FontStruct_tGetDefaultFontStruct(); static const TGGC&GetDefaultGC(); static const TGGC&GetDefaultSelectedBackgroundGC(); static const TGGC&GetDefaultSelectedGC(); static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; const TGResourcePool*TGFrame::GetResourcePool() const; virtual void*TGFrame::GetSender(); virtual const char*TQObject::GetSenderClassName() const; virtual voidHLayout(); voidInit(Pixel_t bg); virtual Bool_tTGView::ItemLayout(); voidTObject::MakeZombie(); virtual voidMark(Long_t xPos, Long_t yPos); Int_tTGWidget::SetFlags(Int_t flags); virtual voidTGFrame::StartGuiBuilding(Bool_t on = kTRUE); virtual voidUnMark(); virtual voidTGView::UpdateRegion(Int_t x, Int_t y, UInt_t w, UInt_t h); virtual voidVLayout(). private:. TGTextView&operator=(const TGTextView&); TGTextView(const TGTextView&). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGTextView.html:17718,Clear,ClearFlags,17718,root/html602/TGTextView.html,https://root.cern,https://root.cern/root/html602/TGTextView.html,2,['Clear'],['ClearFlags']
Usability,"const; virtual Int_tbasisCode(const char* name) const; const RooRealVar&basisConvVar() const; virtual list<Double_t>*RooAbsReal::binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidcleanup(); virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual RooResolutionModel*convolution(RooFormulaVar* basis, RooAbsArg* owner) const; RooRealVar&convVar() const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooResolutionModel.html:4351,Clear,Clear,4351,root/html532/RooResolutionModel.html,https://root.cern,https://root.cern/root/html532/RooResolutionModel.html,1,['Clear'],['Clear']
Usability,"const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidCenterOnParent(Bool_t croot = kTRUE, TGTransientFrame::EPlacement pos = kCenter); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidTGMainFrame::CloseWindow()SIGNAL ; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(); Bool_tTQObject::D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGTransientFrame.html:2653,Clear,Clear,2653,root/html532/TGTransientFrame.html,https://root.cern,https://root.cern/root/html532/TGTransientFrame.html,4,['Clear'],['Clear']
Usability,"const; virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTGFrame::DoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); voidDrawBox(Int_t x, Int_t y, UInt_t width, UInt_t height); static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; const TGResourcePool*TGFrame::GetResourcePool() const; virtual void*TGFrame::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidTObject::MakeZombie(); voidMoveResizeIt(); TGWindow&TGWindow::operator=(const TGWindow& tgw); Int_tTGWidget::SetFlags(Int_t flags); virtual voidTGFrame::StartGuiBuilding(Bool_t on = kTRUE). Data Members; public:. enum TGFrame::[unnamed] { kDeleteWindowCalled; };; enum TGWindow::EEditMode { kEditEnable; kEditDisable; kEditDisableEvents; kEditDisableGrab; kEditDisableLayout; kEditDisableResize; kEditDisableHeight; kEditDisableWidth; kEditDisableBtnEnable; kEditDisableKeyEnable; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGMdiWinResizer.html:14041,Clear,ClearFlags,14041,root/html532/TGMdiWinResizer.html,https://root.cern,https://root.cern/root/html532/TGMdiWinResizer.html,2,['Clear'],['ClearFlags']
Usability,"const; virtual voidTH1::Add(const TH1* h1, Double_t c1 = 1); virtual voidTH1::Add(TF1* h1, Double_t c1 = 1, Option_t* option = """"); virtual voidTH1::Add(const TH1* h, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1)MENU ; voidTArrayF::AddAt(Float_t c, Int_t i); virtual voidTH1::AddBinContent(Int_t bin); virtual voidTH1::AddBinContent(Int_t bin, Double_t w); static voidTH1::AddDirectory(Bool_t add = kTRUE); static Bool_tTH1::AddDirectoryStatus(); voidTArrayF::Adopt(Int_t n, Float_t* array); virtual voidTObject::AppendPad(Option_t* option = """"); Float_tTArrayF::At(Int_t i) const; virtual voidTH1::Browse(TBrowser* b); virtual Int_tTH1::BufferEmpty(Int_t action = 0); virtual Double_tTH1::Chi2Test(const TH1* h2, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chi2TestX(const TH1* h2, Double_t& chi2, Int_t& ndf, Int_t& igood, Option_t* option = ""UU"", Double_t* res = 0) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tTH1::ComputeIntegral(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTH1::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTH1::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTH1::Divide(const TH1* h1); virtual voidTH1::Divide(TF1* f1, Double_t c1 = 1); virtual voidTH1::Divide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """")MENU ; virtual voidTH1::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TH1*TH1::DrawCopy(Option_t* option = """") const; virtual TH1*TH1::DrawNormalized(Option_t* option = """", Double_t norm = 1) const; virtual voidTH1::DrawPanel()MENU ; vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TH1K.html:2070,Clear,Clear,2070,root/html532/TH1K.html,https://root.cern,https://root.cern/root/html532/TH1K.html,1,['Clear'],['Clear']
Usability,"const;  Print statistics about the TreeCache for this tree. ;  ; virtual Long64_t Process (const char *filename, Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0);  Process this tree executing the TSelector code in the specified filename. ;  ; virtual Long64_t Process (TSelector *selector, Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0);  Process this tree executing the code in the specified selector. ;  ; virtual Long64_t Project (const char *hname, const char *varexp, const char *selection="""", Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0);  Make a projection of a tree using selections. ;  ; virtual TSQLResult * Query (const char *varexp="""", const char *selection="""", Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0);  Loop over entries and return a TSQLResult object containing entries following selection. ;  ; virtual Long64_t ReadFile (const char *filename, const char *branchDescriptor="""", char delimiter=' ');  Create or simply read branches from filename. ;  ; virtual Long64_t ReadStream (std::istream &inputStream, const char *branchDescriptor="""", char delimiter=' ');  Create or simply read branches from an input stream. ;  ; void RecursiveRemove (TObject *obj) override;  Make sure that obj (which is being deleted or will soon be) is no longer referenced by this TTree. ;  ; virtual void Refresh ();  Refresh contents of this tree and its branches from the current status on disk. ;  ; virtual void RegisterExternalFriend (TFriendElement *);  Record a TFriendElement that we need to warn when the chain switches to a new file (typically this is because this chain is a friend of another TChain) ;  ; virtual void RemoveExternalFriend (TFriendElement *);  Removes external friend. ;  ; virtual void RemoveFriend (TTree *);  Remove a friend from the list of friends. ;  ; virtual void Reset (Option_t *option="""");  Reset baskets, buffers and entries count in all branches an",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTree.html:35581,simpl,simply,35581,doc/v632/classTTree.html,https://root.cern,https://root.cern/doc/v632/classTTree.html,3,['simpl'],['simply']
Usability,"const;  Print statistics about the TreeCache for this tree. ;  ; virtual Long64_t Process (const char *filename, Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0);  Process this tree executing the TSelector code in the specified filename. ;  ; virtual Long64_t Process (TSelector *selector, Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0);  Process this tree executing the code in the specified selector. ;  ; virtual Long64_t Project (const char *hname, const char *varexp, const char *selection="""", Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0);  Make a projection of a tree using selections. ;  ; virtual TSQLResult * Query (const char *varexp="""", const char *selection="""", Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0);  Loop over entries and return a TSQLResult object containing entries following selection. ;  ; virtual Long64_t ReadFile (const char *filename, const char *branchDescriptor="""", char delimiter=' ');  Create or simply read branches from filename. ;  ; virtual Long64_t ReadStream (std::istream &inputStream, const char *branchDescriptor="""", char delimiter=' ');  Create or simply read branches from an input stream. ;  ; void RecursiveRemove (TObject *obj) override;  Make sure that obj (which is being deleted or will soon be) is no longer referenced by this TTree. ;  ; virtual void RegisterExternalFriend (TFriendElement *);  Record a TFriendElement that we need to warn when the chain switches to a new file (typically this is because this chain is a friend of another TChain) ;  ; virtual void RemoveExternalFriend (TFriendElement *);  Removes external friend. ;  ; virtual void RemoveFriend (TTree *);  Remove a friend from the list of friends. ;  ; virtual void Reset (Option_t *option="""");  Reset baskets, buffers and entries count in all branches and leaves. ;  ; virtual void ResetAfterMerge (TFileMergeInfo *);  Resets the state of this TTree after a merge (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeSQL.html:17191,simpl,simply,17191,doc/master/classTTreeSQL.html,https://root.cern,https://root.cern/doc/master/classTTreeSQL.html,1,['simpl'],['simply']
Usability,"const;  Print statistics about the TreeCache for this tree. ;  ; virtual Long64_t Process (const char *filename, Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0);  Process this tree executing the TSelector code in the specified filename. ;  ; virtual Long64_t Process (TSelector *selector, Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0);  Process this tree executing the code in the specified selector. ;  ; virtual Long64_t Project (const char *hname, const char *varexp, const char *selection="""", Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0);  Make a projection of a tree using selections. ;  ; virtual TSQLResult * Query (const char *varexp="""", const char *selection="""", Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0);  Loop over entries and return a TSQLResult object containing entries following selection. ;  ; virtual Long64_t ReadFile (const char *filename, const char *branchDescriptor="""", char delimiter=' ');  Create or simply read branches from filename. ;  ; void RecursiveRemove (TObject *obj) override;  Make sure that obj (which is being deleted or will soon be) is no longer referenced by this TTree. ;  ; virtual void Refresh ();  Refresh contents of this tree and its branches from the current status on disk. ;  ; virtual void RegisterExternalFriend (TFriendElement *);  Record a TFriendElement that we need to warn when the chain switches to a new file (typically this is because this chain is a friend of another TChain) ;  ; virtual void RemoveExternalFriend (TFriendElement *);  Removes external friend. ;  ; virtual void RemoveFriend (TTree *);  Remove a friend from the list of friends. ;  ; virtual void Reset (Option_t *option="""");  Reset baskets, buffers and entries count in all branches and leaves. ;  ; virtual void ResetAfterMerge (TFileMergeInfo *);  Resets the state of this TTree after a merge (keep the customization but forget the data). ;  ; virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNtuple.html:18481,simpl,simply,18481,doc/master/classTNtuple.html,https://root.cern,https://root.cern/doc/master/classTNtuple.html,2,['simpl'],['simply']
Usability,"content of log file. ;  ; std::string NewWidgetMsg (std::shared_ptr< RBrowserWidget > &widget);  Create message which send to client to create new widget. ;  ; std::string ProcessBrowserRequest (const std::string &msg);  Process browser request. ;  ; std::string ProcessDblClick (unsigned connid, std::vector< std::string > &args);  Process dbl click on browser item. ;  ; void ProcessMsg (unsigned connid, const std::string &arg);  Process received message from the client. ;  ; void ProcessPostponedRequests ();  Process postponed requests - decouple from websocket handling Only requests which can take longer time should be postponed. ;  ; void ProcessRunMacro (const std::string &file_path);  Process run macro command in the editor. ;  ; void ProcessSaveFile (const std::string &fname, const std::string &content);  Process file save command in the editor. ;  ; void SendInitMsg (unsigned connid);  Process client connect. ;  ; void SendProgress (unsigned connid, float progr);  Send generic progress message to the web window Should show progress bar on client side. ;  . Protected Attributes; std::string fActiveWidgetName;  ! name of active widget ;  ; RBrowserData fBrowsable;  ! central browsing element ;  ; bool fCatchWindowShow {true};  ! if arbitrary RWebWindow::Show calls should be catched by browser ;  ; unsigned fConnId {0};  ! default connection id ;  ; float fLastProgressSend {0};  ! last value of send progress ;  ; long long fLastProgressSendTm {0};  ! time when last progress message was send ;  ; std::vector< std::vector< std::string > > fPostponed;  ! postponed messages, handled in timer ;  ; std::string fPromptFileOutput;  ! file name for prompt output ;  ; std::unique_ptr< RBrowserTimer > fTimer;  ! timer to handle postponed requests ;  ; std::string fTitle;  ! title ;  ; bool fUseRCanvas {false};  ! which canvas should be used ;  ; std::shared_ptr< RWebWindow > fWebWindow;  ! web window to browser ;  ; int fWidgetCnt {0};  ! counter for created widgets ;  ; std",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RBrowser.html:3608,progress bar,progress bar,3608,doc/v632/classROOT_1_1RBrowser.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowser.html,2,['progress bar'],['progress bar']
Usability,"cord a TFriendElement that we need to warn when the chain switches to a new file (typically this is because this chain is a friend of another TChain) ;  ; virtual void RemoveExternalFriend (TFriendElement *);  Removes external friend. ;  ; virtual bool SetAlias (const char *aliasName, const char *aliasFormula);  Set a tree variable alias. ;  ; virtual void SetAutoFlush (Long64_t autof=-30000000);  This function may be called at the start of a program to change the default value for fAutoFlush. ;  ; virtual void SetAutoSave (Long64_t autos=-300000000);  In case of a program crash, it will be possible to recover the data in the tree up to the last AutoSave point. ;  ; virtual void SetBasketSize (const char *bname, Int_t buffsize=16000);  Set a branch's basket size. ;  ; template<class T > ; Int_t SetBranchAddress (const char *bname, T **add, TBranch **ptr=nullptr);  ; template<class T > ; Int_t SetBranchAddress (const char *bname, T *add, TBranch **ptr=nullptr);  ; virtual Int_t SetCacheEntryRange (Long64_t first, Long64_t last);  interface to TTreeCache to set the cache entry range ;  ; virtual void SetCacheLearnEntries (Int_t n=10);  Interface to TTreeCache to set the number of entries for the learning phase. ;  ; virtual void SetChainOffset (Long64_t offset=0);  ; virtual void SetCircular (Long64_t maxEntries);  Enable/Disable circularity for this tree. ;  ; virtual void SetClusterPrefetch (bool enabled);  ; virtual void SetDebug (Int_t level=1, Long64_t min=0, Long64_t max=9999999);  Set the debug level and the debug range. ;  ; virtual void SetDefaultEntryOffsetLen (Int_t newdefault, bool updateExisting=false);  Update the default value for the branch's fEntryOffsetLen. ;  ; virtual Long64_t SetEntries (Long64_t n=-1);  Change number of entries in the tree. ;  ; virtual void SetEstimate (Long64_t nentries=1000000);  Set number of entries to estimate variable limits. ;  ; virtual void SetFileNumber (Int_t number=0);  Set fFileNumber to number. ;  ; virtual void Set",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTChain.html:25828,learn,learning,25828,doc/v632/classTChain.html,https://root.cern,https://root.cern/doc/v632/classTChain.html,2,['learn'],['learning']
Usability,"cord a TFriendElement that we need to warn when the chain switches to a new file (typically this is because this chain is a friend of another TChain) ;  ; virtual void RemoveExternalFriend (TFriendElement *);  Removes external friend. ;  ; virtual bool SetAlias (const char *aliasName, const char *aliasFormula);  Set a tree variable alias. ;  ; virtual void SetAutoFlush (Long64_t autof=-30000000);  This function may be called at the start of a program to change the default value for fAutoFlush. ;  ; virtual void SetAutoSave (Long64_t autos=-300000000);  In case of a program crash, it will be possible to recover the data in the tree up to the last AutoSave point. ;  ; virtual void SetBasketSize (const char *bname, Int_t buffsize=16000);  Set a branch's basket size. ;  ; template<class T > ; Int_t SetBranchAddress (const char *bname, T **add, TBranch **ptr=nullptr);  ; template<class T > ; Int_t SetBranchAddress (const char *bname, T *add, TBranch **ptr=nullptr);  ; virtual Int_t SetCacheEntryRange (Long64_t first, Long64_t last);  interface to TTreeCache to set the cache entry range ;  ; virtual void SetCacheLearnEntries (Int_t n=10);  Interface to TTreeCache to set the number of entries for the learning phase. ;  ; virtual void SetChainOffset (Long64_t offset=0);  ; virtual void SetCircular (Long64_t maxEntries);  Enable/Disable circularity for this tree. ;  ; virtual void SetClusterPrefetch (bool enabled);  ; virtual void SetDefaultEntryOffsetLen (Int_t newdefault, bool updateExisting=false);  Update the default value for the branch's fEntryOffsetLen. ;  ; virtual Long64_t SetEntries (Long64_t n=-1);  Change number of entries in the tree. ;  ; virtual void SetEstimate (Long64_t nentries=1000000);  Set number of entries to estimate variable limits. ;  ; virtual void SetFileNumber (Int_t number=0);  Set fFileNumber to number. ;  ; virtual void SetImplicitMT (bool enabled);  ; ROOT::TIOFeatures SetIOFeatures (const ROOT::TIOFeatures &);  Provide the end-user with the ab",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofChain.html:26767,learn,learning,26767,doc/master/classTProofChain.html,https://root.cern,https://root.cern/doc/master/classTProofChain.html,1,['learn'],['learning']
Usability,corder/replayer interface for a user.; TRecorderInactive Represents state of TRecorder after its creation; TRecorderPaused Represents state of TRecorder when paused; TRecorderRecording Represents state of TRecorder when recording events; TRecorderReplaying Represents state of TRecorder when replaying; TRecorderState Abstract class that defines interface for a state of recorder; TRedirectOutputGuard Exception safe output redirection; TRef Persistent Reference link to a TObject; TRefArray An array of references to TObjects; TRefArrayIter Object array iterator; TRefCnt ; TRefTable Table of referenced objects during an I/O operation; TRegexp Regular expression class; TRemoteObject A remote object; TResponseTable Generic Geant detector response table; TRint ROOT Interactive Application Interface; TRobustEstimator Minimum Covariance Determinant Estimator; TRolke ; TRootApplication ROOT native GUI application environment; TRootAuth client auth interface; TRootBrowser New ROOT Browser; TRootBrowserLite ROOT native GUI version of browser; TRootCanvas ROOT native GUI version of main window with menubar and drawing area; TRootContextMenu ROOT native GUI context sensitive popup menu; TRootControlBar ROOT native GUI implementation of TControlBar; TRootDialog Native GUI method argument prompt dialog box; TRootEmbeddedCanvas A ROOT TCanvas that can be embedded in a TGFrame; TRootGuiBuilder ROOT GUI Builder; TRootGuiFactory Factory for ROOT GUI components; TRootHelpDialog Dialog to display help text; TRootIOCtor ; TRootSecContext Class providing host specific authentication information; TRotMatrix Rotation Matrix for 3-D geometry objects; TRotation Rotations of TVector3 objects; TSAXParser SAX Parser; TSPHE SPHE shape; TSPlot class to disentangle signal from background; TSQLClassColumnInfo Keeps information about single column in class table; TSQLClassInfo Keeps the table information relevant for one class ; TSQLColumnData Single SQL column data.; TSQLColumnInfo Summury information ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ClassIndex.html:120772,pause,paused,120772,root/html530/ClassIndex.html,https://root.cern,https://root.cern/root/html530/ClassIndex.html,1,['pause'],['paused']
Usability,"count in the message service...; 3521 ccoutD(Eval) << ""RooAbsReal::logEvalError("" << GetName(); 3522 << "") delayed evaluation error, "" << std::endl; 3523 << "" origin : "" << oss2.str() << std::endl; 3524 << "" message : "" << oee._msg << std::endl; 3525 << "" server values: "" << oee._srvval << std::endl ;; 3526 evalErrorList.second.pop_front();; 3527 }; 3528 evalErrorList.first = oss2.str() ;; 3529 evalErrorList.second.push_back(ee) ;; 3530 }; 3531 ; 3532 inLogEvalError = false ;; 3533 //coutE(Tracing) << ""RooAbsReal::logEvalError("" << GetName() << "") message = "" << message << std::endl ;; 3534}; 3535 ; 3536 ; 3537 ; 3538 ; 3539////////////////////////////////////////////////////////////////////////////////; 3540/// Clear the stack of evaluation error messages; 3541 ; 3542void RooAbsReal::clearEvalErrorLog(); 3543{; 3544 if (evalErrorData().mode == PrintErrors) {; 3545 return ;; 3546 } else if (evalErrorData().mode == CollectErrors) {; 3547 evalErrorData().errorList.clear() ;; 3548 } else {; 3549 evalErrorData().count = 0 ;; 3550 }; 3551}; 3552 ; 3553 ; 3554////////////////////////////////////////////////////////////////////////////////; 3555/// Retrieve bin boundaries if this distribution is binned in `obs`.; 3556/// \param[in] obs Observable to retrieve boundaries for.; 3557/// \param[in] xlo Beginning of range.; 3558/// \param[in] xhi End of range.; 3559/// \return The caller owns the returned std::list.; 3560std::list<double>* RooAbsReal::binBoundaries(RooAbsRealLValue& /*obs*/, double /*xlo*/, double /*xhi*/) const {; 3561 return nullptr;; 3562}; 3563 ; 3564 ; 3565////////////////////////////////////////////////////////////////////////////////; 3566/// Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable `obs`.; 3567/// \param[in] obs Observable to retrieve sampling hint for.; 3568/// \param[in] xlo Beginning of range.; 3569/// \param[in] xhi End of range.; 3570/// \return The caller owns the returned",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:151609,clear,clear,151609,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,1,['clear'],['clear']
Usability,counting experiment with uncertainty on both the background rate and signal efficiency. ;  ; file  rs101_limitexample.py;   Limits: number counting experiment with uncertainty on both the background rate and signal efficiency. ;  ; file  rs102_hypotestwithshapes.C;   A typical search for a new particle by studying an invariant mass distribution ;  ; file  rs301_splot.C;   SPlot tutorial ;  ; file  rs302_JeffreysPriorDemo.C;   tutorial demonstrating and validates the RooJeffreysPrior class ;  ; file  rs401c_FeldmanCousins.C;   Produces an interval on the mean signal in a number counting experiment with known background using the Feldman-Cousins technique. ;  ; file  rs401c_FeldmanCousins.py;   Produces an interval on the mean signal in a number counting experiment with known background using the Feldman-Cousins technique. ;  ; file  rs401d_FeldmanCousins.C;   Neutrino Oscillation Example from Feldman & Cousins ;  ; file  rs601_HLFactoryexample.C;   High Level Factory: creation of a simple model ;  ; file  rs601_HLFactoryexample.py;   High Level Factory: creation of a simple model ;  ; file  rs602_HLFactoryCombinationexample.C;   High Level Factory: creation of a combined model ;  ; file  rs603_HLFactoryElaborateExample.C;   High Level Factory: creating a complex combined model. ;  ; file  rs701_BayesianCalculator.C;   Bayesian calculator: basic example ;  ; file  rs701_BayesianCalculator.py;   Bayesian calculator: basic example ;  ; file  rs_bernsteinCorrection.C;   Example of the BernsteinCorrection utility in RooStats. ;  ; file  rs_bernsteinCorrection.py;   Example of the BernsteinCorrection utility in RooStats. ;  ; file  rs_numberCountingCombination.C;   'Number Counting Example' RooStats tutorial macro #100 ;  ; file  rs_numbercountingutils.C;   'Number Counting Utils' RooStats tutorial ;  ; file  rs_numbercountingutils.py;   'Number Counting Utils' RooStats tutorial ;  ; file  StandardBayesianMCMCDemo.C;   Standard demo of the Bayesian MCMC calculator ;  ; fil,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__roostats.html:2188,simpl,simple,2188,doc/master/group__tutorial__roostats.html,https://root.cern,https://root.cern/doc/master/group__tutorial__roostats.html,1,['simpl'],['simple']
Usability,"cout<<""\n*ERROR<TLatex>: ""<<fError<<std::endl;; 2618 std::cout<<""==> ""<<GetTitle()<<std::endl;; 2619 return;; 2620 }; 2621 fError = nullptr;; 2622 ; 2623 if (angle) {; 2624 Int_t cBoxX[4], cBoxY[4];; 2625 Int_t ptx, pty;; 2626 if (TestBit(kTextNDC)) {; 2627 ptx = gPad->UtoPixel(fX);; 2628 pty = gPad->VtoPixel(fY);; 2629 } else {; 2630 ptx = gPad->XtoAbsPixel(gPad->XtoPad(fX));; 2631 pty = gPad->YtoAbsPixel(gPad->YtoPad(fY));; 2632 }; 2633 GetControlBox(ptx, pty, fTextAngle, cBoxX, cBoxY);; 2634 Int_t x1 = cBoxX[0];; 2635 Int_t x2 = cBoxX[0];; 2636 Int_t y1 = cBoxY[0];; 2637 Int_t y2 = cBoxY[0];; 2638 for (Int_t i=1; i<4; i++) {; 2639 if (cBoxX[i] < x1) x1 = cBoxX[i];; 2640 if (cBoxX[i] > x2) x2 = cBoxX[i];; 2641 if (cBoxY[i] < y1) y1 = cBoxY[i];; 2642 if (cBoxY[i] > y2) y2 = cBoxY[i];; 2643 }; 2644 w = x2-x1;; 2645 h = y2-y1;; 2646 } else {; 2647 const Char_t *text = newText.Data() ;; 2648 TLatexFormSize fs = FirstParse(GetTextAngle(),GetTextSize(),text);; 2649 fTabSize.clear();; 2650 w = (UInt_t)fs.Width();; 2651 h = (UInt_t)fs.Height();; 2652 }; 2653}; 2654 ; 2655////////////////////////////////////////////////////////////////////////////////; 2656/// Return size of the formula along Y in pad coordinates when the text precision; 2657/// is smaller than 3.; 2658 ; 2659Double_t TLatex::GetYsize(); 2660{; 2661 if (!gPad) return 0.;; 2662 TString newText = GetTitle();; 2663 if( newText.Length() == 0) return 0;; 2664 ; 2665 // The text is a TMathText.; 2666 if ( newText.Contains(""\\"") ) {; 2667 TMathText tm(0., 0., newText.Data());; 2668 return tm.GetYsize();; 2669 }; 2670 ; 2671 fError = nullptr;; 2672 if (CheckLatexSyntax(newText)) {; 2673 std::cout<<""\n*ERROR<TLatex>: ""<<fError<<std::endl;; 2674 std::cout<<""==> ""<<GetTitle()<<std::endl;; 2675 return 0;; 2676 }; 2677 fError = nullptr;; 2678 ; 2679 const Char_t *text = newText.Data();; 2680 Double_t angsav = fTextAngle;; 2681 TLatexFormSize fs = FirstParse(0,GetTextSize(),text);; 2682 fTextAngle = angsav;; 2683 fTabSi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TLatex_8cxx_source.html:93818,clear,clear,93818,doc/master/TLatex_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TLatex_8cxx_source.html,1,['clear'],['clear']
Usability,"coverable;; 1776 return 0;; 1777 }; 1778 ; 1779 ::std::ifstream macro(exnam, std::ios::in);; 1780 if (!macro.good()) {; 1781 ::Error(""TApplication::ExecuteFile"", ""%s no such file"", exnam);; 1782 if (error); 1783 *error = (Int_t)TInterpreter::kRecoverable;; 1784 delete [] exnam;; 1785 return 0;; 1786 }; 1787 ; 1788 char currentline[kBufSize];; 1789 char dummyline[kBufSize];; 1790 int tempfile = 0;; 1791 int comment = 0;; 1792 int ifndefc = 0;; 1793 int ifdef = 0;; 1794 char *s = nullptr;; 1795 Bool_t execute = kFALSE;; 1796 Longptr_t retval = 0;; 1797 ; 1798 while (1) {; 1799 bool res = (bool)macro.getline(currentline, kBufSize);; 1800 if (macro.eof()) break;; 1801 if (!res) {; 1802 // Probably only read kBufSize, let's ignore the remainder of; 1803 // the line.; 1804 macro.clear();; 1805 while (!macro.getline(dummyline, kBufSize) && !macro.eof()) {; 1806 macro.clear();; 1807 }; 1808 }; 1809 s = currentline;; 1810 while (s && (*s == ' ' || *s == '\t')) s++; // strip-off leading blanks; 1811 ; 1812 // very simple minded pre-processor parsing, only works in case macro file; 1813 // starts with ""#ifndef __CINT__"". In that case everything till next; 1814 // ""#else"" or ""#endif"" will be skipped.; 1815 if (*s == '#') {; 1816 char *cs = Compress(currentline);; 1817 if (strstr(cs, ""#ifndef__CINT__"") ||; 1818 strstr(cs, ""#if!defined(__CINT__)"")); 1819 ifndefc = 1;; 1820 else if (ifndefc && (strstr(cs, ""#ifdef"") || strstr(cs, ""#ifndef"") ||; 1821 strstr(cs, ""#ifdefined"") || strstr(cs, ""#if!defined""))); 1822 ifdef++;; 1823 else if (ifndefc && strstr(cs, ""#endif"")) {; 1824 if (ifdef); 1825 ifdef--;; 1826 else; 1827 ifndefc = 0;; 1828 } else if (ifndefc && !ifdef && strstr(cs, ""#else"")); 1829 ifndefc = 0;; 1830 delete [] cs;; 1831 }; 1832 if (!*s || *s == '#' || ifndefc || !strncmp(s, ""//"", 2)) continue;; 1833 ; 1834 if (!comment && (!strncmp(s, "".X"", 2) || !strncmp(s, "".x"", 2))) {; 1835 retval = ExecuteFile(s+3);; 1836 execute = kTRUE;; 1837 continue;; 1838 }; 1839 ; 1840 if (!str",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TApplication_8cxx_source.html:69765,clear,clear,69765,doc/master/TApplication_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TApplication_8cxx_source.html,2,"['clear', 'simpl']","['clear', 'simple']"
Usability,"cpy(buff, c+1, n+1); // strlcpy copy 'size-1' characters.; 1169 std::string hd = GetHomeDirectory(buff);; 1170 e = c+1+n;; 1171 if (!hd.empty()) { // we have smth to copy; 1172 p = hd.c_str();; 1173 strlcpy(x, p, kBufSize);; 1174 x += strlen(p);; 1175 c = e;; 1176 } else {; 1177 x++[0] = c[0];; 1178 //++ier;; 1179 ++c;; 1180 }; 1181 }; 1182 ; 1183 for ( ; c[0]; c++) {; 1184 ; 1185 p = nullptr; e = nullptr;; 1186 ; 1187 if (c[0] == '.' && c[1] == '/' && c[-1] == ' ') { // $cwd; 1188 std::string wd = GetWorkingDirectory();; 1189 strlcpy(buff, wd.c_str(), kBufSize);; 1190 p = buff;; 1191 e = c + 1;; 1192 }; 1193 if (p) { // we have smth to copy */; 1194 strlcpy(x, p, kBufSize); x += strlen(p); c = e-1; continue;; 1195 }; 1196 ; 1197 if (c[0] != '$') { // not $, simple copy; 1198 x++[0] = c[0];; 1199 } else { // we have a $; 1200 b = c+1;; 1201 if (c[1] == '(') b++;; 1202 if (c[1] == '{') b++;; 1203 if (b[0] == '$'); 1204 e = b+1;; 1205 else; 1206 for (e = b; isalnum(e[0]) || e[0] == '_'; e++) ;; 1207 buff[0] = 0; strncat(buff, b, e-b);; 1208 p = Getenv(buff);; 1209 if (!p) { // too bad, try UPPER case; 1210 for (t = buff; (t[0] = toupper(t[0])); t++) ;; 1211 p = Getenv(buff);; 1212 }; 1213 if (!p) { // too bad, try Lower case; 1214 for (t = buff; (t[0] = tolower(t[0])); t++) ;; 1215 p = Getenv(buff);; 1216 }; 1217 if (!p && !strcmp(buff, ""cwd"")) { // it is $cwd; 1218 std::string wd = GetWorkingDirectory();; 1219 strlcpy(buff, wd.c_str(), kBufSize);; 1220 p = buff;; 1221 }; 1222 if (!p && !strcmp(buff, ""$"")) { // it is $$ (replace by GetPid()); 1223 snprintf(buff,kBufSize*4, ""%d"", GetPid());; 1224 p = buff;; 1225 }; 1226 if (!p) { // too bad, nothing can help; 1227#ifdef WIN32; 1228 // if we're on windows, we can have \\SomeMachine\C$ - don't; 1229 // complain about that, if '$' is followed by nothing or a; 1230 // path delimiter.; 1231 if (c[1] && c[1]!='\\' && c[1]!=';' && c[1]!='/'); 1232 ier++;; 1233#else; 1234 ier++;; 1235#endif; 1236 x++[0] = c[0];; 1237 } else { ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSystem_8cxx_source.html:36946,simpl,simple,36946,doc/master/TSystem_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSystem_8cxx_source.html,1,['simpl'],['simple']
Usability,"created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoMediumEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for medium editor. ~TGeoMediumEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the selected object. void DoEditMaterial(); Edit selected material. void DoMedName(); Slot for medium name. void DoMedId(); Slot for medium id. void DoSelectMaterial(); Select the material component. void DoToggleSensitive(); Slot for sensitivity. void DoMagfldSelect(Int_t ientry); Slot for mag. field. void DoFieldm(); Slot for max field. void DoTmaxfd(); Slot for tmaxfd. void DoStemax(); Slot for the max allowed step. void DoDeemax(); Slot for the maximum allowed dedx. void DoEpsil(); Slot for tracking precision. void DoStmin(); Slot for min. step. void DoApply(); Slot for applying modifications. void DoUndo(); Slot for undoing last operation. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id: TGeoMediumEditor.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2010-09-23 20:09; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoMediumEditor.html:22034,undo,undoing,22034,root/html528/TGeoMediumEditor.html,https://root.cern,https://root.cern/root/html528/TGeoMediumEditor.html,1,['undo'],['undoing']
Usability,"created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoMediumEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for medium editor. ~TGeoMediumEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the selected object. void DoEditMaterial(); Edit selected material. void DoMedName(); Slot for medium name. void DoMedId(); Slot for medium id. void DoSelectMaterial(); Select the material component. void DoToggleSensitive(); Slot for sensitivity. void DoMagfldSelect(Int_t ientry); Slot for mag. field. void DoFieldm(); Slot for max field. void DoTmaxfd(); Slot for tmaxfd. void DoStemax(); Slot for the max allowed step. void DoDeemax(); Slot for the maximum allowed dedx. void DoEpsil(); Slot for tracking precision. void DoStmin(); Slot for min. step. void DoApply(); Slot for applying modifications. void DoUndo(); Slot for undoing last operation. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id: TGeoMediumEditor.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-07-04 15:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGeoMediumEditor.html:22134,undo,undoing,22134,root/html530/TGeoMediumEditor.html,https://root.cern,https://root.cern/root/html530/TGeoMediumEditor.html,1,['undo'],['undoing']
Usability,"created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoMediumEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for medium editor. ~TGeoMediumEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the selected object. void DoEditMaterial(); Edit selected material. void DoMedName(); Slot for medium name. void DoMedId(); Slot for medium id. void DoSelectMaterial(); Select the material component. void DoToggleSensitive(); Slot for sensitivity. void DoMagfldSelect(Int_t ientry); Slot for mag. field. void DoFieldm(); Slot for max field. void DoTmaxfd(); Slot for tmaxfd. void DoStemax(); Slot for the max allowed step. void DoDeemax(); Slot for the maximum allowed dedx. void DoEpsil(); Slot for tracking precision. void DoStmin(); Slot for min. step. void DoApply(); Slot for applying modifications. void DoUndo(); Slot for undoing last operation. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id: TGeoMediumEditor.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoMediumEditor.html:22134,undo,undoing,22134,root/html532/TGeoMediumEditor.html,https://root.cern,https://root.cern/root/html532/TGeoMediumEditor.html,2,['undo'],['undoing']
Usability,cript. ; Definition at line 3009 of file TPostScript.cxx. ◆ VtoPS(). Int_t TPostScript::VtoPS ; (; Double_t ; v). Convert V from NDC coordinate to PostScript. ; Definition at line 3018 of file TPostScript.cxx. ◆ XtoPS(). Int_t TPostScript::XtoPS ; (; Double_t ; x). Convert X from world coordinate to PostScript. ; Definition at line 3027 of file TPostScript.cxx. ◆ YtoPS(). Int_t TPostScript::YtoPS ; (; Double_t ; y). Convert Y from world coordinate to PostScript. ; Definition at line 3036 of file TPostScript.cxx. ◆ Zone(). void TPostScript::Zone ; (; ). Initialize the PostScript page in zones. ; Definition at line 3045 of file TPostScript.cxx. Member Data Documentation. ◆ fBlue. Float_t TPostScript::fBlue. protected . Per cent of blue. ; Definition at line 50 of file TPostScript.h. ◆ fBoundingBox. Bool_t TPostScript::fBoundingBox. protected . True for Encapsulated PostScript. ; Definition at line 63 of file TPostScript.h. ◆ fClear. Bool_t TPostScript::fClear. protected . True when page must be cleared. ; Definition at line 64 of file TPostScript.h. ◆ fClip. Int_t TPostScript::fClip. protected . Clipping mode. ; Definition at line 62 of file TPostScript.h. ◆ fClipStatus. Bool_t TPostScript::fClipStatus. protected . Clipping Indicator. ; Definition at line 65 of file TPostScript.h. ◆ fCurrentColor. Int_t TPostScript::fCurrentColor. protected . current Postscript color index ; Definition at line 58 of file TPostScript.h. ◆ fDXC. Float_t TPostScript::fDXC. protected . Definition at line 31 of file TPostScript.h. ◆ fDYC. Float_t TPostScript::fDYC. protected . Definition at line 32 of file TPostScript.h. ◆ fFileName. TString TPostScript::fFileName. protected . PS file name. ; Definition at line 77 of file TPostScript.h. ◆ fFontEmbed. Bool_t TPostScript::fFontEmbed. protected . True is FontEmbed has been called. ; Definition at line 78 of file TPostScript.h. ◆ fFX. Float_t TPostScript::fFX. protected . Definition at line 35 of file TPostScript.h. ◆ fFY. Float_t TPostScript:,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPostScript.html:53035,clear,cleared,53035,doc/master/classTPostScript.html,https://root.cern,https://root.cern/doc/master/classTPostScript.html,1,['clear'],['cleared']
Usability,"cription(topnode, topnode->GetVolume());; 447 ; 448 if (!volname.empty()) {; 449 auto vol = mgr->GetVolume(volname.c_str());; 450 RGeomBrowserIter iter(*this);; 451 if (vol && (vol != topnode->GetVolume()) && iter.Navigate(vol)); 452 fSelectedStack = MakeStackByIds(iter.CurrentIds());; 453 }; 454}; 455 ; 456/////////////////////////////////////////////////////////////////////; 457/// Collect information about geometry from single volume; 458/// like it done in JSROOT ClonedNodes.createClones; 459 ; 460void RGeomDescription::Build(TGeoVolume *vol); 461{; 462 ClearDescription();; 463 if (!vol); 464 return;; 465 ; 466 TLockGuard lock(fMutex);; 467 ; 468 fDrawVolume = vol;; 469 ; 470 fSelectedStack.clear();; 471 ; 472 BuildDescription(nullptr, fDrawVolume);; 473}; 474 ; 475/////////////////////////////////////////////////////////////////////; 476/// Clear geometry description; 477 ; 478void RGeomDescription::ClearDescription(); 479{; 480 TLockGuard lock(fMutex);; 481 ; 482 fDesc.clear();; 483 fNodes.clear();; 484 fSortMap.clear();; 485 ClearDrawData();; 486 fDrawIdCut = 0;; 487 fDrawVolume = nullptr;; 488 fSelectedStack.clear();; 489}; 490 ; 491/////////////////////////////////////////////////////////////////////; 492/// Build geometry description; 493 ; 494void RGeomDescription::BuildDescription(TGeoNode *topnode, TGeoVolume *topvolume); 495{; 496 // vector to remember numbers; 497 std::vector<int> numbers;; 498 int offset = 1000000000;; 499 ; 500 // try to build flat list of all nodes; 501 TGeoNode *snode = topnode;; 502 TGeoIterator iter(topvolume);; 503 do {; 504 if (!snode) {; 505 numbers.emplace_back(offset);; 506 fNodes.emplace_back(nullptr);; 507 } else if (snode->GetNumber() >= offset) {; 508 // artificial offset already applied, used as identifier; 509 iter.Skip(); // no need to look inside; 510 } else {; 511 numbers.emplace_back(snode->GetNumber());; 512 snode->SetNumber(offset + fNodes.size()); // use id with shift 1e9; 513 fNodes.emplace_back(snode);; 514 };",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RGeomData_8cxx_source.html:12498,clear,clear,12498,doc/master/RGeomData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RGeomData_8cxx_source.html,2,['clear'],['clear']
Usability,"cription; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooSimWSTool::SplitRule. class RooSimWSTool::SplitRule: public TNamed. Class RooSimWSTool is a tool operating on RooWorkspace objects that; can clone p.d.f.s into a series of variations that are joined together; into a RooSimultanous p.d.f. The simplest use case to take a workspace p.d.f as prototype and; 'split' a parameter of that p.d.f into two specialized parameters; depending on a category in the dataset. For example, given a Gaussian; p.d.f G(x,m,s) we want to construct a G_a(x,m_a,s) and a G_b(x,m_b,s); with different mean parameters to be fit to a dataset with observables; (x,c) where c is a category with states 'a' and 'b'. Using RooSimWSTool one can create a simultaneous p.d.f from G_a and G_b; from G with the following command. RooSimWSTool wst(wspace) ;; wst.build(""G_sim"",""G"",SplitParam(""m"",""c"")) ;. From this simple example one can go to builds of arbitrary complexity; by specifying multiple SplitParam arguments on multiple parameters; involving multiple splitting categories. Splits can also be performed; in the product multiple categories, e.g. SplitParam(""m"",""c,d"")) ;. splits parameter m in the product of states of c and d. Another possibility; is the 'constrained' split which clones the parameter for all but one state; and insert a formula specialization in a chosen state that evaluates; to 1 - sum_i(a_i) where a_i are all other specializations. For example,; given a category c with state ""A"",""B"",""C"",""D"" the specification. SplitParamConstrained(""m"",""c"",""D""). will result in parameters m_A,m_B,m_C and a formula expression m_D; that evaluates to (1-(m_A+m_B+m_C)). Constrained split can also be; specified in product of categories. In that case the name of the; remainder state follows the syntax ""{State1;State2}"" where State1 and; State2 are the state names of the two spitting categories. The examples so far deal with a single prototype p.d.f. It is also; possible to bu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooSimWSTool__SplitRule.html:1099,simpl,simple,1099,root/html534/RooSimWSTool__SplitRule.html,https://root.cern,https://root.cern/root/html534/RooSimWSTool__SplitRule.html,6,['simpl'],['simple']
Usability,"cs system and eventloop; (be it X, Windoze, MacOS or BeOS). After creating the application; object start the eventloop by calling its Run() method. The command; line options recogized by TApplication are described in the GetOptions(); method. The recognized options are removed from the argument array.; The original list of argument options can be retrieved via the Argc(); and Argv() methods. The appClassName ""proofserv"" is reserved for the; PROOF system. The ""options"" and ""numOptions"" arguments are not used,; except if you want to by-pass the argv processing by GetOptions(); in which case you should specify numOptions<0. All options will; still be available via the Argv() method for later use. ~TApplication(); TApplication dtor. void NeedGraphicsLibs(); Static method. This method should be called from static library; initializers if the library needs the low level graphics system. void InitializeGraphics(); Initialize the graphics environment. void ClearInputFiles(); Clear list containing macro files passed as program arguments.; This method is called from TRint::Run() to ensure that the macro; files are only executed the first time Run() is called. char * Argv(Int_t index) const; Return specified argument. void GetOptions(Int_t* argc, char** argv); Get and handle command line options. Arguments handled are removed; from the argument array. The following arguments are handled:; -b : run in batch mode without graphics; -x : exit on exception; -e expression: request execution of the given C++ expression.; -n : do not execute logon and logoff macros as specified in .rootrc; -q : exit after processing command line macro files; -l : do not show splash screen; The last three options are only relevant in conjunction with TRint.; The following help and info arguments are supported:; -? : print usage; -h : print usage; --help : print usage; -config : print ./configure options; -memstat : run with memory usage monitoring; In addition to the above options the arguments that are",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TApplication.html:14479,Clear,ClearInputFiles,14479,root/html602/TApplication.html,https://root.cern,https://root.cern/root/html602/TApplication.html,4,['Clear'],"['Clear', 'ClearInputFiles']"
Usability,"cs system and eventloop; (be it X, Windoze, MacOS or BeOS). After creating the application; object start the eventloop by calling its Run() method. The command; line options recogized by TApplication are described in the GetOptions(); method. The recognized options are removed from the argument array.; The original list of argument options can be retrieved via the Argc(); and Argv() methods. The appClassName ""proofserv"" is reserved for the; PROOF system. The ""options"" and ""numOptions"" arguments are not used,; except if you want to by-pass the argv processing by GetOptions(); in which case you should specify numOptions<0. All options will; still be available via the Argv() method for later use. ~TApplication(); TApplication dtor. void NeedGraphicsLibs(); Static method. This method should be called from static library; initializers if the library needs the low level graphics system. void InitializeGraphics(); Initialize the graphics environment. void ClearInputFiles(); Clear list containing macro files passed as program arguments.; This method is called from TRint::Run() to ensure that the macro; files are only executed the first time Run() is called. char * Argv(Int_t index) const; Return specified argument. void GetOptions(Int_t* argc, char** argv); Get and handle command line options. Arguments handled are removed; from the argument array. The following arguments are handled:; -b : run in batch mode without graphics; -x : exit on exception; -n : do not execute logon and logoff macros as specified in .rootrc; -q : exit after processing command line macro files; -l : do not show splash screen; The last three options are only relevant in conjunction with TRint.; The following help and info arguments are supported:; -? : print usage; -h : print usage; --help : print usage; -config : print ./configure options; -memstat : run with memory usage monitoring; In addition to the above options the arguments that are not options,; i.e. they don't start with - or + are treated as",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TApplication.html:13788,Clear,ClearInputFiles,13788,root/html532/TApplication.html,https://root.cern,https://root.cern/root/html532/TApplication.html,4,['Clear'],"['Clear', 'ClearInputFiles']"
Usability,"cs » 3D Graphics » Basic 3D graphics. ; An hyperboloid (not implemented) ; It has 4 parameters:. name: name of the shape; title: shape's title; material: (see TMaterial); rmin: inner radius of the tube; rmax: outer radius of the tube; dz: half-length of the box along the z-axis; phi: stereo angle . Definition at line 28 of file THYPE.h. Public Member Functions;  THYPE ();  HYPE shape default constructor. ;  ;  THYPE (const char *name, const char *title, const char *material, Float_t rmin, Float_t rmax, Float_t dz, Float_t phi);  HYPE shape normal constructor. ;  ;  ~THYPE () override;  HYPE shape default destructor. ;  ; virtual Float_t GetPhi () const;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TTUBE;  TTUBE ();  TUBE shape default constructor. ;  ;  TTUBE (const char *name, const char *title, const char *material, Float_t rmax, Float_t dz);  TUBE shape ""simplified"" constructor. ;  ;  TTUBE (const char *name, const char *title, const char *material, Float_t rmin, Float_t rmax, Float_t dz, Float_t aspect=1);  TUBE shape normal constructor. ;  ;  ~TTUBE () override;  TUBE shape default destructor. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a TUBE. ;  ; virtual Float_t GetAspectRatio () const;  ; const TBuffer3D & GetBuffer3D (Int_t reqSections) const override;  Get buffer 3d. ;  ; virtual Float_t GetDz () const;  ; virtual Int_t GetNdiv () const;  ; virtual Int_t GetNumberOfDivisions () const;  ; virtual Float_t GetRmax () const;  ; virtual Float_t GetRmin () const;  ; TClass * IsA () const override;  ; virtual void SetAspectRatio (Float_t factor=1);  ; virtual void SetNumberOfDivisions (Int_t ndiv);  Set number of divisions used to draw this tube. ;  ; void Sizeof3D () const override;  Return total X3D needed by TNode::ls (when called wi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHYPE.html:1314,simpl,simplified,1314,doc/master/classTHYPE.html,https://root.cern,https://root.cern/doc/master/classTHYPE.html,1,['simpl'],['simplified']
Usability,"ct class, return 0.; GenericLayout and UseNamespaces should be the same as in ConvertToXML(). void* ConvertFromXMLAny(const char* str, TClass** cl = 0, Bool_t GenericLayout = kFALSE, Bool_t UseNamespaces = kFALSE); Read object of any class from XML, produced by ConvertToXML() method.; If cl!=0, return actual class of object.; GenericLayout and UseNamespaces should be the same as in ConvertToXML(). XMLNodePointer_t XmlWriteAny(const void* obj, const TClass* cl); Convert object of any class to xml structures; Return pointer on top xml element. void* XmlReadAny(XMLNodePointer_t node, void* obj, TClass** cl); Recreate object from xml structure.; Return pointer to read object.; if (cl!=0) returns pointer to class of object. void WriteObject(const TObject* obj); Convert object into xml structures.; !!! Should be used only by TBufferXML itself.; Use ConvertToXML() methods to convert your object to xml; Redefined here to avoid gcc 3.x warning. TXMLStackObj* PushStack(XMLNodePointer_t current, Bool_t simple = kFALSE); add new level to xml stack. TXMLStackObj* PopStack(); remove one level from xml stack. TXMLStackObj* Stack(Int_t depth = 0); return xml stack object of specified depth. XMLNodePointer_t StackNode(); return pointer on current xml node. void ShiftStack(const char* info = 0); shift stack node to next. void SetCompressionAlgorithm(Int_t algorithm = 0); See comments for function SetCompressionSettings. void SetCompressionLevel(Int_t level = 1); See comments for function SetCompressionSettings. void SetCompressionSettings(Int_t settings = 1); Used to specify the compression level and algorithm:; settings = 100 * algorithm + level. level = 0 no compression.; level = 1 minimal compression level but fast. level = 9 maximal compression level but slower and might use more memory.; (For the currently supported algorithms, the maximum level is 9); If compress is negative it indicates the compression level is not set yet. The enumeration ROOT::ECompressionAlgorithm associates",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TBufferXML.html:27117,simpl,simple,27117,root/html530/TBufferXML.html,https://root.cern,https://root.cern/root/html530/TBufferXML.html,9,['simpl'],['simple']
Usability,"ct class, return 0.; GenericLayout and UseNamespaces should be the same as in ConvertToXML(). void* ConvertFromXMLAny(const char* str, TClass** cl = 0, Bool_t GenericLayout = kFALSE, Bool_t UseNamespaces = kFALSE); Read object of any class from XML, produced by ConvertToXML() method.; If cl!=0, return actual class of object.; GenericLayout and UseNamespaces should be the same as in ConvertToXML(). XMLNodePointer_t XmlWriteAny(const void* obj, const TClass* cl); Convert object of any class to xml structures; Return pointer on top xml element. void* XmlReadAny(XMLNodePointer_t node, void* obj, TClass** cl); Recreate object from xml structure.; Return pointer to read object.; if (cl!=0) returns pointer to class of object. void WriteObject(const TObject* obj); Convert object into xml structures.; !!! Should be used only by TBufferXML itself.; Use ConvertToXML() methods to convert your object to xml; Redefined here to avoid gcc 3.x warning. TXMLStackObj* PushStack(XMLNodePointer_t current, Bool_t simple = kFALSE); add new level to xml stack. TXMLStackObj* PopStack(); remove one level from xml stack. TXMLStackObj* Stack(Int_t depth = 0); return xml stack object of specified depth. XMLNodePointer_t StackNode(); return pointer on current xml node. void ShiftStack(const char* info = 0); shift stack node to next. void XmlWriteBlock(XMLNodePointer_t node); write binary data block from buffer to xml; this data can be produced only by direct call of TBuffer::WriteBuf() functions. void XmlReadBlock(XMLNodePointer_t node); read binary block of data from xml. Bool_t ProcessPointer(const void* ptr, XMLNodePointer_t node); Add ""ptr"" attribute to node, if ptr is null or; if ptr is pointer on object, which is already saved in buffer; Automatically add ""ref"" attribute to node, where referenced object is stored. void RegisterPointer(const void* ptr, XMLNodePointer_t node); Register pair of object pointer and node, where this object is saved,; in object map. Bool_t ExtractPointer(XMLNodePo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBufferXML.html:25995,simpl,simple,25995,root/html526/TBufferXML.html,https://root.cern,https://root.cern/root/html526/TBufferXML.html,2,['simpl'],['simple']
Usability,"ct the ""Associated Members"". TDataSet * FindByPath(const char* path) const; Aliase for TDataSet::Find(const Char_t *path) method. TDataSet * Find(const char* path) const. Full description see: TDataSetIter::Find. Note. This method is quite expansive.; ----- It is done to simplify the user's code when one wants to find ONLY object.; If you need to find more then 1 object in this dataset,; regard using TDataSetIter class yourself. TDataSet * FindByName(const char* name, const char* path = """", Option_t* opt = """") const. Full description see: TDataSetIter::Find. Note. This is method is quite expansive.; ----- It is done to simplify the user's code when one wants to find ONLY object.; If you need to find more then 1 object in this dataset,; regard using TDataSetIter class yourself. TDataSet * FindByTitle(const char* title, const char* path = """", Option_t* opt = """") const. Full description see: TDataSetIter::Find. Note. This method is quite expansive.; ----- It is done to simplify the user's code when one wants to find ONLY object.; If you need to find more then 1 object in this dataset,; regard using TDataSetIter class yourself. TDataSet * First() const; Return the first object in the list. Returns 0 when list is empty. void AddMain(TDataSet* set); add data set to main data set. TDataSet * GetMainSet(); return pointer to the main dataset. TObject * GetObject() const; The depricated method (left here for the sake of the backward compatibility). TDataSet * Last() const; Return the last object in the list. Returns 0 when list is empty. TDataSet * Next() const; Return the object next to this one in the parent structure; This convinient but time-consuming. Don't use it in the inner loops. TDataSet * Prev() const; Return the object that is previous to this one in the parent structure; This convinient but time-consuming. Don't use it in the inner loops. void SetObject(TObject* obj); The depricated method (left here for the sake of the backward compatibility). void ls(Option_t* ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDataSet.html:14727,simpl,simplify,14727,root/html528/TDataSet.html,https://root.cern,https://root.cern/root/html528/TDataSet.html,10,['simpl'],['simplify']
Usability,"ct* obj, const char* name, Int_t check = -1); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidBrowseObj(TObject* obj)SIGNAL ; TBrowser*TBrowserImp::Browser() const; virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); virtual voidChecked(TObject* obj, Bool_t check)SIGNAL ; virtual voidCheckObjectItem(TObject* obj, Bool_t check = kFALSE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCloseTabs(); virtual voidCloseWindow(); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(); Bool_tTQObje",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TRootBrowserLite.html:2092,Clear,Clear,2092,root/html532/TRootBrowserLite.html,https://root.cern,https://root.cern/root/html532/TRootBrowserLite.html,4,['Clear'],['Clear']
Usability,"ct*); virtual voidTGFrame::Activate(Bool_t); virtual voidTGedFrame::ActivateBaseClassEditors(TClass* cl); virtual voidTGedFrame::AddExtraTab(TGedFrame::TGedSubFrame* sf); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); voidApplyButtonSlot(); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; voidAutoRefreshButtonSlot(Bool_t on); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); voidColorSelectedSlot(Pixel_t color); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual TGVerticalFrame*TGedFrame::CreateEditorTabSubFrame(const char* name); voidDefaultButtonSlot(); virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TStructNodeEditor.html:1888,Clear,Clear,1888,root/html532/TStructNodeEditor.html,https://root.cern,https://root.cern/root/html532/TStructNodeEditor.html,4,['Clear'],['Clear']
Usability,"ct::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); Float_t*TAttBBox::AssertBBox(); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; static voidCheckAndFixBoxOrientationEv(TEveVector* box); static voidCheckAndFixBoxOrientationFv(Float_t** box); virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElementList*TEveElementList::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTAttBBox::ComputeBBox(); virtual voidTNamed::Copy(TObject& named) const; virtual voidCopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); voidTEveElement::CSCApplyMainColorToAllChildren(); voidTEveElement::CSCApplyMainColorToMatchingChildren(); voidTEveElement::CSCApplyMainTransparencyToAllChildren(); voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TEveShape.html:2623,Clear,Clear,2623,root/html532/TEveShape.html,https://root.cern,https://root.cern/root/html532/TEveShape.html,2,['Clear'],['Clear']
Usability,"ct::AppendPad(Option_t* option = """"); Int_tTProof::Archive(Int_t query, const char* url); Int_tTProof::Archive(const char* queryref, const char* url = 0); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTProof::Browse(TBrowser* b); voidTProof::cd(Int_t id = -1); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; Int_tTProof::CleanupSession(const char* sessiontag); virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTProof::ClearCache(const char* file = 0); voidTProof::ClearData(UInt_t what = kUnregistered, const char* dsname = 0); virtual voidTProof::ClearDataSetCache(const char* dataset = 0); voidTProof::ClearFeedback(); voidTProof::ClearInput(); voidTProof::ClearInputData(TObject* obj = 0); voidTProof::ClearInputData(const char* name); Int_tTProof::ClearPackage(const char* package); Int_tTProof::ClearPackages(); virtual TObject*TNamed::Clone(const char* newname = """") const; voidTProof::Close(Option_t* option = """"); voidTProof::CloseProgressDialog()SIGNAL ; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTNamed::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidTNamed::Copy(TObject& named) const; TDrawFeedback*TProof::CreateDrawFeedback(); voidTProof::DataSetStatus(const char* msg, Bool_t status, Int_t done, Int_t total)SIGNAL ; Int_tTProof::DeactivateWorker(const char* ord); static voidTProof:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TProofCondor.html:2337,Clear,ClearPackage,2337,root/html532/TProofCondor.html,https://root.cern,https://root.cern/root/html532/TProofCondor.html,2,['Clear'],['ClearPackage']
Usability,"ct::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetCLsCleanupThreshold(Double_t th); virtual voidSetConfidenceLevel(Double_t cl); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetInterpolationOption(RooStats::HypoTestInverterResult::InterpolOption_t opt); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetTestSize(Double_t size); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); RooStats::SimpleIntervalRooStats::SimpleInterval::SimpleInterval(const char* name = 0); RooStats::SimpleIntervalRooStats::SimpleInterval::SimpleInterval(const RooStats::SimpleInterval&); RooStats::SimpleIntervalRooStats::SimpleInterval::SimpleInterval(const RooStats::SimpleInterval& other, const char* name); RooStats::SimpleIntervalRooStats::SimpleInterval::SimpleInterval(const char* name, const RooRealVar& var, Double_t lower, Double_t upper, Double_t cl); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Double_tUpperLimit(); Double_tUpperLimitEstimatedError(); voidUseCLs(bool on = true); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HypoTestInverterResult.html:6946,Simpl,SimpleInterval,6946,root/html534/RooStats__HypoTestInverterResult.html,https://root.cern,https://root.cern/root/html534/RooStats__HypoTestInverterResult.html,1,['Simpl'],['SimpleInterval']
Usability,"ct::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidTGDoubleSlider::ChangeCursor(Event_t* event); static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidDoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); static voidTGDoubleSlider::FixBounds(Float_t& min, Float_t& max); static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; const TGResourcePool*TGFrame::GetResourcePool() const; virtual void*TGFrame::GetSender(); virtual const char*TQObject::GetSenderClassName() const; TStringTGDoubleSlider::GetSString() const; voidTObject::MakeZombie(); TGWindow&TGWindow::operator=(const TGWindow& tgw); Int_tTGWidget::SetFlags(Int_t flags); virtual voidSetPointerPos(Int_t z, Int_t opt = 0); virtual voidTGFrame::StartGuiBuilding(Bool_t on = kTRUE). Data Members; public:. enum TGFrame::[unnamed] { kDeleteWindowCalled; };; enum TGWindow::EEditMode { kEditEnable; kEditDisable; kEditDisableEvents; kEditDisableGrab; kEditDisableLayout; kEditDisableResize; kEditDisableHeight; kEditDisableWidth; kEditDisableBtnEnable; kEditDisableKeyEnable; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanv",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGTripleHSlider.html:16186,Clear,ClearFlags,16186,root/html532/TGTripleHSlider.html,https://root.cern,https://root.cern/root/html532/TGTripleHSlider.html,4,['Clear'],['ClearFlags']
Usability,"ct::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static TStringTQObject::CompressName(const char* method_name); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); voidCopyText() const; virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidDoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); Int_tGetCharacterIndex(Int_t xcoord); static const TGGC&GetDefaultSelectedBackgroundGC(); static const TGGC&GetDefaultSelectedGC(); static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; const TGResourcePool*TGFrame::GetResourcePool() const; virtual void*TGFrame::GetSender(); virtual const char*TQObject::GetSenderClassName() const; virtual voidInit(); virtual Bool_tIsCursorOutOfFrame(); voidTObject::MakeZombie(); voidPaste(); virtual voidPastePrimary(Window_t wid, Atom_t property, Bool_t del); virtual voidScrollByChar(); Int_tTGWidget::SetFlags(Int_t flags); virtual voidTGFrame::StartGuiBuilding(Bool_t on = kTRUE); virtual voidUpdateOffset(). private:. TGTextEntry&operator=(const TGTextEntry&); TGTextEntry(const TGTextEntry&). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TGWindow::EEditModeTGWind",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGTextEntry.html:20230,Clear,ClearFlags,20230,root/html602/TGTextEntry.html,https://root.cern,https://root.cern/root/html602/TGTextEntry.html,2,['Clear'],['ClearFlags']
Usability,"ct::Warning(const char* method, const char* msgfmt) const; virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTSeqCollection::Changed(); static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); static TStringTQObject::CompressName(const char* method_name); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTList::DeleteLink(TObjLink* lnk); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; TObjLink**TList::DoSort(TObjLink** head, Int_t n); TObjLink*TList::FindLink(const TObject* obj, Int_t& idx) const; virtual const char*TCollection::GetCollectionEntryName(TObject* entry) const; virtual void*TQObject::GetSender(); virtual const char*TQObject::GetSenderClassName() const; virtual voidInit(const char* cl, void* object, const char* redo, const char* undo); TObjLink*TList::LinkAt(Int_t idx) const; Bool_tTList::LnkCompare(TObjLink* l1, TObjLink* l2); voidTObject::MakeZombie(); virtual TObjLink*TList::NewLink(TObject* obj, TObjLink* prev = __null); virtual TObjLink*TList::NewOptLink(TObject* obj, Option_t* opt, TObjLink* prev = __null); virtual voidTCollection::PrintCollectionEntry(TObject* entry, Option_t* option, Int_t recurse) const; virtual voidPrintCollectionHeader(Option_t* option) const. private:. TQCommand&operator=(const TQCommand&). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TQCommand.html:15748,undo,undo,15748,root/html602/TQCommand.html,https://root.cern,https://root.cern/root/html602/TQCommand.html,4,['undo'],['undo']
Usability,"ct::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. TStringfDrawstring to send to TTree::Draw(), NOT by GetScope()!. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Browse(TBrowser* b); Browses a TCollectionPropertyBrowsable. The only difference to; the generic TVirtualBranchBrowsable::Browse is our fDraw. Int_t GetBrowsables(TList& list, const TBranch* branch, const TVirtualBranchBrowsable* parent = 0); If the element to browse (given by either parent of branch) contains; a collection (TClonesArray or something for which a TVirtualCollectionProxy; exists), we will add some special objects to the browser. For now there is; just one object ""@size"", returning the size of the collection (as in; std::list::size(), or TClonesArray::GetEntries()).; The objects we create are simply used to forward strings (like ""@size"") to; TTreeFormula via our Browse method. These strings are stored in fName. void Register(); Wrapper for the registration method. Needed against MSVC, which; assigned different addr to the same method, depending on what; translation unit you're in... void Unregister(); Wrapper for the registration method. Needed against MSVC, which; assigned different addr to the same method, depending on what; translation unit you're in... ~TCollectionPropertyBrowsable(); {}. const char* GetDraw() const; return the string passed to TTree::Draw. TCollectionPropertyBrowsable(const char* name, const char* title, const char* draw, const TBranch* branch, const TVirtualBranchBrowsable* parent = 0); constructor, which sets the name and title according to the parameters; (and thus differently than our base class TVirtualBranchBrowsable). » Author: Axel Naumann 14/10/2004 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id$ » Last generated: 2015-03-12 16:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TCollectionPropertyBrowsable.html:9611,simpl,simply,9611,root/html534/TCollectionPropertyBrowsable.html,https://root.cern,https://root.cern/root/html534/TCollectionPropertyBrowsable.html,2,['simpl'],['simply']
Usability,"ct::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. TStringfDrawstring to send to TTree::Draw(), NOT by GetScope()!. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Browse(TBrowser* b); Browses a TCollectionPropertyBrowsable. The only difference to; the generic TVirtualBranchBrowsable::Browse is our fDraw. Int_t GetBrowsables(TList& list, const TBranch* branch, const TVirtualBranchBrowsable* parent = 0); If the element to browse (given by either parent of branch) contains; a collection (TClonesArray or something for which a TVirtualCollectionProxy; exists), we will add some special objects to the browser. For now there is; just one object ""@size"", returning the size of the collection (as in; std::list::size(), or TClonesArray::GetEntries()).; The objects we create are simply used to forward strings (like ""@size"") to; TTreeFormula via our Browse method. These strings are stored in fName. void Register(); Wrapper for the registration method. Needed against MSVC, which; assigned different addr to the same method, depending on what; translation unit you're in... void Unregister(); Wrapper for the registration method. Needed against MSVC, which; assigned different addr to the same method, depending on what; translation unit you're in... ~TCollectionPropertyBrowsable(); {}. const char* GetDraw() const; return the string passed to TTree::Draw. TCollectionPropertyBrowsable(const char* name, const char* title, const char* draw, const TBranch* branch, const TVirtualBranchBrowsable* parent = 0); constructor, which sets the name and title according to the parameters; (and thus differently than our base class TVirtualBranchBrowsable). » Author: Axel Naumann 14/10/2004 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id: TBranchBrowsable.h 40605 2011-08",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TCollectionPropertyBrowsable.html:9592,simpl,simply,9592,root/html532/TCollectionPropertyBrowsable.html,https://root.cern,https://root.cern/root/html532/TCollectionPropertyBrowsable.html,2,['simpl'],['simply']
Usability,"ct::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. TStringfDrawstring to send to TTree::Draw(), NOT by GetScope()!. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Browse(TBrowser* b); Browses a TCollectionPropertyBrowsable. The only difference to; the generic TVirtualBranchBrowsable::Browse is our fDraw. Int_t GetBrowsables(TList& list, const TBranch* branch, const TVirtualBranchBrowsable* parent = 0); If the element to browse (given by either parent of branch) contains; a collection (TClonesArray or something for which a TVirtualCollectionProxy; exists), we will add some special objects to the browser. For now there is; just one object ""@size"", returning the size of the collection (as in; std::list::size(), or TClonesArray::GetEntries()).; The objects we create are simply used to forward strings (like ""@size"") to; TTreeFormula via our Browse method. These strings are stored in fName. void Register(); Wrapper for the registration method. Needed against MSVC, which; assigned different addr to the same method, depending on what; translation unit you're in... void Unregister(); Wrapper for the registration method. Needed against MSVC, which; assigned different addr to the same method, depending on what; translation unit you're in... ~TCollectionPropertyBrowsable(); {}. const char* GetDraw() const; return the string passed to TTree::Draw. TCollectionPropertyBrowsable(const char* name, const char* title, const char* draw, const TBranch* branch, const TVirtualBranchBrowsable* parent = 0); contrsuctor, which sets the name and title according to the parameters; (and thus differently than our base class TVirtualBranchBrowsable). » Author: Axel Naumann 14/10/2004 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id: TBranchBrowsable.h 20882 2007-11",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TCollectionPropertyBrowsable.html:9537,simpl,simply,9537,root/html526/TCollectionPropertyBrowsable.html,https://root.cern,https://root.cern/root/html526/TCollectionPropertyBrowsable.html,3,['simpl'],['simply']
Usability,"ct::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. UChar_t*fAllBits[fNbytes] array of UChars; UInt_tfNbitsHighest bit set + 1; UInt_tfNbytesNumber of UChars in fAllBits. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TBits(UInt_t nbits = 8); TBits constructor. All bits set to 0. TBits(const TBits& ); TBits copy constructor. TBits& operator=(const TBits& ); TBits assignment operator. ~TBits(); TBits destructor. void Clear(Option_t* option = """"); Clear the value. void Compact(); Reduce the storage used by the object to a minimun. UInt_t CountBits(UInt_t startBit = 0) const; Return number of bits set to 1 starting at bit startBit. void DoAndEqual(const TBits& rhs); Execute (*this) &= rhs;; Extra bits in rhs are ignored; Missing bits in rhs are assumed to be zero. void DoOrEqual(const TBits& rhs); Execute (*this) &= rhs;; Extra bits in rhs are ignored; Missing bits in rhs are assumed to be zero. void DoXorEqual(const TBits& rhs); Execute (*this) ^= rhs;; Extra bits in rhs are ignored; Missing bits in rhs are assumed to be zero. void DoFlip(); Execute ~(*this). void DoLeftShift(UInt_t shift); Execute the left shift operation. void DoRightShift(UInt_t shift); Execute the left shift operation. UInt_t FirstNullBit(UInt_t startBit = 0) const; Return position of first null bit (starting from position 0 and up). UInt_t LastNullBit(UInt_t startBit = 999999999) const; Return position of first null bit (starting from position 0 a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TBits.html:8105,Clear,Clear,8105,root/html602/TBits.html,https://root.cern,https://root.cern/root/html602/TBits.html,4,['Clear'],['Clear']
Usability,"ct; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Int_tfColDimensionsThe number of the dimensions for array (=-1 means it is a ""simple"" array); TStringfColName; Int_tfColOffset; Int_tfColSizeThe size of the selected column in bytes; TTable::EColumnTypefColTypedata type of the selected column; COMPAREMETHODfCompareMethodFunction to sort the original array; const char*fFirstParentRow! pointer to the internal array of TTable object;; Int_tfFirstRowfirst row of the table to be sorted; Int_t*fIndexArray""parsed"" indecis; Int_tfLastFoundThe index of the last found index within fSortIndex; TStringTNamed::fNameobject identifier; Int_tfNumberOfRowsnumber of rows of the table to be sorted; Long_tfParentRowSizeTo be filled from TTable::GetRowSize() method; const TTable*fParentTable!- the back pointer to the sorted table; SEARCHMETHODfSearchMethodFunction selected to search values; void**fSortIndexArray of pointers to columns of the sorted table; TStringTNamed::fTitleobject title; const Char_t*fsimpleArrayPointer to the ""simple"" array;. private:. union(anonymous)fValue. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TTableSorter. Function documentation; TTableSorter(); default ctor for RootCint dictionary. TTableSorter(const TTable& table, TString& colName, Int_t firstRow = 0, Int_t numbeRows = 0). TTableSorter ctor sorts the input table along its column defined with colName. - colName - may be followed by the square brackets with integer number inside,; if that columm is an array (for example ""phys[3]"").; NO expression i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTableSorter.html:12401,simpl,simple,12401,root/html602/TTableSorter.html,https://root.cern,https://root.cern/root/html602/TTableSorter.html,8,['simpl'],['simple']
Usability,"cted number of events, if non-zero. The returned; dataset belongs to the caller. Return zero in case of an error.; Generation of individual events is delegated to a virtual generateEvent(); method. A virtual initGenerator() method is also called just before the; first call to generateEvent(). void initGenerator(const RooArgSet& theEvent); Interface function to initialize context for generation for given; set of observables. void printName(ostream& os) const; Print name of context. void printTitle(ostream& os) const; Print title of context. void printClassName(ostream& os) const; Print class name of context. void printArgs(ostream& os) const; Print arguments of context, i.e. the observables being generated in this context. void printMultiline(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; Interface for multi-line printing. void setProtoDataOrder(Int_t* lut); Set the traversal order of prototype data to that in the lookup tables; passed as argument. The LUT must be an array of integers with the same; size as the number of entries in the prototype dataset and must contain; integer values in the range [0,Nevt-1]. void resampleData(Double_t& ratio); Rescale existing output buffer with given ratio. Int_t defaultPrintContents(Option_t* opt) const; Define default contents when printing. RooPrintable::StyleOption defaultPrintStyle(Option_t* opt) const; Define default print style. Bool_t isValid() const; If true generator context is in a valid state. void setVerbose(Bool_t verbose = kTRUE); Set/clear verbose messaging. Bool_t isVerbose() const; If true verbose messaging is active. void Print(Option_t* options = 0) const; Print context information on stdout. void generateEvent(RooArgSet& theEvent, Int_t remaining). » Last changed: Mon Dec 7 13:45:38 2009 » Last generated: 2009-12-07 13:45; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsGenContext.html:9980,clear,clear,9980,root/html526/RooAbsGenContext.html,https://root.cern,https://root.cern/root/html526/RooAbsGenContext.html,1,['clear'],['clear']
Usability,"cted number of events, if non-zero. The returned; dataset belongs to the caller. Return zero in case of an error.; Generation of individual events is delegated to a virtual generateEvent(); method. A virtual initGenerator() method is also called just before the; first call to generateEvent(). void initGenerator(const RooArgSet& theEvent); Interface function to initialize context for generation for given; set of observables. void printName(ostream& os) const; Print name of context. void printTitle(ostream& os) const; Print title of context. void printClassName(ostream& os) const; Print class name of context. void printArgs(ostream& os) const; Print arguments of context, i.e. the observables being generated in this context. void printMultiline(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; Interface for multi-line printing. void setProtoDataOrder(Int_t* lut); Set the traversal order of prototype data to that in the lookup tables; passed as argument. The LUT must be an array of integers with the same; size as the number of entries in the prototype dataset and must contain; integer values in the range [0,Nevt-1]. void resampleData(Double_t& ratio); Rescale existing output buffer with given ratio. Int_t defaultPrintContents(Option_t* opt) const; Define default contents when printing. RooPrintable::StyleOption defaultPrintStyle(Option_t* opt) const; Define default print style. Bool_t isValid() const; If true generator context is in a valid state. void setVerbose(Bool_t verbose = kTRUE); Set/clear verbose messaging. Bool_t isVerbose() const; If true verbose messaging is active. void Print(Option_t* options = 0) const; Print context information on stdout. void generateEvent(RooArgSet& theEvent, Int_t remaining). » Last changed: Mon Jul 4 15:21:22 2011 » Last generated: 2011-07-04 15:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooAbsGenContext.html:10326,clear,clear,10326,root/html530/RooAbsGenContext.html,https://root.cern,https://root.cern/root/html530/RooAbsGenContext.html,1,['clear'],['clear']
Usability,"cted number of events, if non-zero. The returned; dataset belongs to the caller. Return zero in case of an error.; Generation of individual events is delegated to a virtual generateEvent(); method. A virtual initGenerator() method is also called just before the; first call to generateEvent(). void initGenerator(const RooArgSet& theEvent); Interface function to initialize context for generation for given; set of observables. void printName(ostream& os) const; Print name of context. void printTitle(ostream& os) const; Print title of context. void printClassName(ostream& os) const; Print class name of context. void printArgs(ostream& os) const; Print arguments of context, i.e. the observables being generated in this context. void printMultiline(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; Interface for multi-line printing. void setProtoDataOrder(Int_t* lut); Set the traversal order of prototype data to that in the lookup tables; passed as argument. The LUT must be an array of integers with the same; size as the number of entries in the prototype dataset and must contain; integer values in the range [0,Nevt-1]. void resampleData(Double_t& ratio); Rescale existing output buffer with given ratio. Int_t defaultPrintContents(Option_t* opt) const; Define default contents when printing. RooPrintable::StyleOption defaultPrintStyle(Option_t* opt) const; Define default print style. Bool_t isValid() const; If true generator context is in a valid state. void setVerbose(Bool_t verbose = kTRUE); Set/clear verbose messaging. Bool_t isVerbose() const; If true verbose messaging is active. void Print(Option_t* options = 0) const; Print context information on stdout. void generateEvent(RooArgSet& theEvent, Int_t remaining). » Last changed: Sat Oct 9 06:57:57 2010 » Last generated: 2010-10-09 06:57; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsGenContext.html:10011,clear,clear,10011,root/html528/RooAbsGenContext.html,https://root.cern,https://root.cern/root/html528/RooAbsGenContext.html,1,['clear'],['clear']
Usability,"cted object or on; all canvases, change gStyle. Activate the style manager by selecting Edit menu / Style...; in the canvas window. The Style Manager interface is composed of two parts:; - the top level interface that manages a list of styles;; - the style editor, which deals with the current style settings. /*. */. The combo box 'Available Styles' contains the list of available; styles for the current ROOT session and shows the currently; selected one. The field on the right shows the setting of the gStyle.; You can set the global variable gStyle to the selected style by; clicking on the button in the middle.; The group frame 'Apply on' displays information for the currently; selected canvas and object in the ROOT session. This selection might; be changed by clicking on another object with the middle mouse; button. You have a choice to apply a style on the selected object or; on all available canvases.; WARNING: You cannot undo the changes after applying the style! If; you are not sure of that action, it may be better to see a preview; of what you are going to apply.; If the check button 'Preview' is selected, a preview of the selected; canvas according to the selected style will be shown. The selection; of the next check button 'Run Time Preview' will apply updates of; the preview any time a value of the selected style is changed. For; drawings that take a time it is better to disable this option. Create a new style:; A new style can be created via the Style menu/New... or the toolbar.; A clone of the selected style will be used as a base of the new; style. All its values can be modified via the style editor later.; The dialog that appears will ask for the name and description of the; new style. Import a style (from a macro):; A style macro can be imported at any time. The new imported style in; the ROOT session will become the selected one. Import a style (from a canvas):; You can do that selecting the Style menu/Import from.../Canvas or; the corresponding Tool b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TStyleManager.html:1422,undo,undo,1422,root/html528/TStyleManager.html,https://root.cern,https://root.cern/root/html528/TStyleManager.html,10,['undo'],['undo']
Usability,"cted ones. Selection for shapes and matrices is split into categories represented by top-level list tree items for: boxes, tubes, translations, rotations, etc. Selection dialogs for different TGeo objects. Once a selection is made and the dialog is closed, the selected item name will appear in the corresponding label and the button Edit will start the object editor in a transient frame. Closing these transient frames will not delete, but just hide existing opened editors for later reuse. Their lifetime is determined by the canvas to which the manager editor is attached to, since these will be destroyed together.; ; For most editors, the functionalities Apply and Undo are provided.; For shapes, changing any of the shape parameters will activate the “Apply” button only if the check button “Delayed draw” is checked, otherwise the changes are immediately applied. Once the apply button is pressed, the changes are applied to the edited shape and drawn. The “Undo” button becomes active after the first modification has been applied. It allows restoring the initial parameters of the shape.; NOTE: In this version the “Undo” does not allow restoring an intermediate state of the parameters that was applied - it will always restore the parameters at the moment the shape was edited.; All material properties changes are undoable. The mixture editor currently allows adding elements one by one in the mixture composition. This can be done either by element weight fraction or by number of atoms. Once an element was added using one method the other method is not selectable anymore. Summing component fractions up to 1 in the final mixture is the user responsibility. Adding materials as components of a mixture is not supported in this version.; The elements that were added to the mixture appear in the bottom of the mixture editor. The operations performed on mixture are not undoable.; 18.11.4 Creation of New Objects; As described above, all geometry object creators are accessible within ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1036539,Undo,Undo,1036539,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['Undo'],['Undo']
Usability,"ction class (like TF1) in a IParamMultiFunction interface of multi-dimensions...Definition WrappedMultiTF1.h:48; TAttLine::SetLineColorvirtual void SetLineColor(Color_t lcolor)Set the line color.Definition TAttLine.h:40; TCanvasThe Canvas class.Definition TCanvas.h:23; TF11-Dim function classDefinition TF1.h:233; TF1::SetRangevirtual void SetRange(Double_t xmin, Double_t xmax)Initialize the upper and lower bounds to draw the function.Definition TF1.cxx:3528; TF1::SetParametersvirtual void SetParameters(const Double_t *params)Definition TF1.h:677; TF1::SetFitResultvirtual void SetFitResult(const ROOT::Fit::FitResult &result, const Int_t *indpar=nullptr)Set the result from the fit parameter values, errors, chi2, etc... Optionally a pointer to a vector (...Definition TF1.cxx:3355; TH1D1-D histogram with a double per channel (see TH1 documentation)Definition TH1.h:670; TH1::FillRandomvirtual void FillRandom(const char *fname, Int_t ntimes=5000, TRandom *rng=nullptr)Fill histogram following distribution in function fname.Definition TH1.cxx:3519; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; TH1::GetListOfFunctionsTList * GetListOfFunctions() constDefinition TH1.h:244; TList::Addvoid Add(TObject *obj) overrideDefinition TList.h:83; TStyle::SetOptFitvoid SetOptFit(Int_t fit=1)The type of information about fit parameters printed in the histogram statistics box can be selected ...Definition TStyle.cxx:1593; c1return c1Definition legend1.C:41; f1TF1 * f1Definition legend1.C:11; ROOT::Fit::FillDatavoid FillData(BinData &dv, const TH1 *hist, TF1 *func=nullptr)fill the data vector from a TH1.Definition HFitInterface.cxx:107; combinedFitDefinition combinedFit.py:1; ROOT::Fit::DataOptionsDataOptions : simple structure holding the options on how the data are filled.Definition DataOptions.h:28. tutorialsfitcombinedFit.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:07 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/combinedFit_8C_source.html:9881,simpl,simple,9881,doc/master/combinedFit_8C_source.html,https://root.cern,https://root.cern/doc/master/combinedFit_8C_source.html,1,['simpl'],['simple']
Usability,"ction will be written in split mode, e.g. if it contains objects of; any types deriving from TTrack this function will sort the objects; based on their type and store them in separate branches in split; mode. ==> branch->SetAddress(Void *address); In case of dynamic structures changing with each entry for example, one must; redefine the branch address before filling the branch again.; This is done via the TBranch::SetAddress member function. ==> tree->Fill(); loops on all defined branches and for each branch invokes the Fill function. See also the class TNtuple (a simple Tree with branches of floats); and the class TNtupleD (a simple Tree with branches of doubles). Adding a Branch to an Existing Tree. You may want to add a branch to an existing tree. For example,; if one variable in the tree was computed with a certain algorithm,; you may want to try another algorithm and compare the results.; One solution is to add a new branch, fill it, and save the tree.; The code below adds a simple branch to an existing tree.; Note the kOverwrite option in the Write method, it overwrites the; existing tree. If it is not specified, two copies of the tree headers; are saved. void tree3AddBranch(){; TFile f(""tree3.root"", ""update"");. Float_t new_v;; TTree *t3 = (TTree*)f->Get(""t3"");; TBranch *newBranch = t3->Branch(""new_v"", &new_v, ""new_v/F"");. //read the number of entries in the t3; Long64_t nentries = t3->GetEntries();. for (Long64_t i = 0; i < nentries; i++){; new_v= gRandom->Gaus(0, 1);; newBranch->Fill();; }; // save only the new version of the tree; t3->Write("""", TObject::kOverwrite);; }; Adding a branch is often not possible because the tree is in a read-only; file and you do not have permission to save the modified tree with the; new branch. Even if you do have the permission, you risk losing the; original tree with an unsuccessful attempt to save the modification.; Since trees are usually large, adding a branch could extend it over the; 2GB limit. In this case, the attempt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTree.html:7788,simpl,simple,7788,root/html534/TTree.html,https://root.cern,https://root.cern/root/html534/TTree.html,6,['simpl'],['simple']
Usability,"ction& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidaddToRange(const char* rangeName, const char* stateNameList); virtual voidTObject::AppendPad(Option_t* option = """"); voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidclearRange(const char* name, Bool_t silent); voidRooAbsArg::clearShapeDirty() const; voidclearTypes(); voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsArg*RooAbsCategory::createFundamental(const char* newname = 0) const; Roo1DTable*RooAbsCategory::createTable(const char* label) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; Bool_tdefineType(const char* label); Bool_tdefineType(const char* label, Int_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooCategory.html:2011,clear,clearValueDirty,2011,root/html526/RooCategory.html,https://root.cern,https://root.cern/root/html526/RooCategory.html,1,['clear'],['clearValueDirty']
Usability,"ction::begin ; (; ); const. inline . Definition at line 253 of file RooAbsCollection.h. ◆ canBeAdded(). virtual bool RooAbsCollection::canBeAdded ; (; const RooAbsArg & ; arg, . bool ; silent . ); const. protectedpure virtual . Determine whether it's possible to add a given RooAbsArg to the collection or not. ; Implemented in RooArgSet, and RooArgList. ◆ Class(). static TClass * RooAbsCollection::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooAbsCollection::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooAbsCollection::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 432 of file RooAbsCollection.h. ◆ clear(). void RooAbsCollection::clear ; (; ). inline . Clear contents. If the collection is owning, it will also delete the contents. ; Definition at line 282 of file RooAbsCollection.h. ◆ clearStructureTags(). void RooAbsCollection::clearStructureTags ; (; ). inlineprotected . Definition at line 392 of file RooAbsCollection.h. ◆ clone(). virtual TObject * RooAbsCollection::clone ; (; const char * ; newname); const. pure virtual . Implemented in RooArgList, and RooArgSet. ◆ Clone(). TObject * RooAbsCollection::Clone ; (; const char * ; newname = nullptr); const. inlineoverridevirtual . Make a clone of an object using the Streamer facility. ; If the object derives from TNamed, this function is called by TNamed::Clone. TNamed::Clone uses the optional argument to set a new name to the newly created object.; If the object class has a DirectoryAutoAdd function, it will be called at the end of the function with the parameter gDirectory. This usually means that the object will be appended to the current ROOT directory. ; Reimplemented from TObject.; Definition at line 76 of file RooAbsCollection.h. ◆ contains(). bool RooAbsCollection::contains ; (; const RooAbsArg & ; var); const. inline . Check if collection contains an a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsCollection.html:36176,clear,clearStructureTags,36176,doc/master/classRooAbsCollection.html,https://root.cern,https://root.cern/doc/master/classRooAbsCollection.html,1,['clear'],['clearStructureTags']
Usability,"ction::begin ; (; ); const. inline . Definition at line 276 of file RooAbsCollection.h. ◆ canBeAdded(). virtual bool RooAbsCollection::canBeAdded ; (; const RooAbsArg & ; arg, . bool ; silent . ); const. protectedpure virtual . Determine whether it's possible to add a given RooAbsArg to the collection or not. ; Implemented in RooArgSet, and RooArgList. ◆ Class(). static TClass * RooAbsCollection::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooAbsCollection::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooAbsCollection::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 455 of file RooAbsCollection.h. ◆ clear(). void RooAbsCollection::clear ; (; ). inline . Clear contents. If the collection is owning, it will also delete the contents. ; Definition at line 305 of file RooAbsCollection.h. ◆ clearStructureTags(). void RooAbsCollection::clearStructureTags ; (; ). inlineprotected . Definition at line 415 of file RooAbsCollection.h. ◆ clone(). virtual TObject * RooAbsCollection::clone ; (; const char * ; newname); const. pure virtual . Implemented in RooArgList, and RooArgSet. ◆ Clone(). TObject * RooAbsCollection::Clone ; (; const char * ; newname = nullptr); const. inlineoverridevirtual . Make a clone of an object using the Streamer facility. ; If the object derives from TNamed, this function is called by TNamed::Clone. TNamed::Clone uses the optional argument to set a new name to the newly created object.; If the object class has a DirectoryAutoAdd function, it will be called at the end of the function with the parameter gDirectory. This usually means that the object will be appended to the current ROOT directory. ; Reimplemented from TObject.; Definition at line 76 of file RooAbsCollection.h. ◆ contains(). bool RooAbsCollection::contains ; (; const RooAbsArg & ; var); const. inline . Check if collection contains an a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAbsCollection.html:36950,clear,clearStructureTags,36950,doc/v632/classRooAbsCollection.html,https://root.cern,https://root.cern/doc/v632/classRooAbsCollection.html,1,['clear'],['clearStructureTags']
Usability,"ctives; TSeqCollection*fpEnvVars; TSeqCollection*fpFiles; TSeqCollection*fpGlobals; int*fpLocinitialized by Hook(); TSeqCollection*fpPragmas; TSeqCollection*fpSysIncFiles; TSeqCollection*fpUsers. Class Charts. Inheritance Chart:. TTabCom. Function documentation; TTabCom(); Default constructor. ~TTabCom(); Destructor. void ClearClasses(); Clear classes and namespace collections. void ClearCppDirectives(); Forget all Cpp directives seen so far. void ClearEnvVars(); Forget all environment variables seen so far. void ClearFiles(); Close all files. void ClearGlobalFunctions(); Forget all global functions seen so far.; Not needed anymore. Use gROOT->GetListOfGlobalFunctions(). void ClearGlobals(); Forget all global variables seen so far.; With teh new implamentation the list is gROOT->GetListOfGlobals(true). void ClearPragmas(); Forget all pragmas seen so far. void ClearSysIncFiles(); Close system files. void ClearUsers(); Forget all user seen so far. void ClearAll(); clears all lists; except for user names and system include files. void RehashClasses(); Do the class rehash. void RehashCppDirectives(); Cpp rehashing. void RehashEnvVars(); Environemnt variables rehashing. void RehashFiles(); Close files. void RehashGlobalFunctions(); Reload global functions. void RehashGlobals(); Reload globals. void RehashPragmas(); Reload pragmas. void RehashSysIncFiles(); Reload system include files. void RehashUsers(); Reload users. void RehashAll(); clears and then rebuilds all lists; except for user names and system include files. const TSeqCollection * GetListOfClasses(); Return the list of classes. const TSeqCollection * GetListOfCppDirectives(); Return the list of CPP directives. const TSeqCollection * GetListOfFilesInPath(const char[] path); ""path"" should be initialized with a colon separated list of; system directories. const TSeqCollection * GetListOfEnvVars(); Uses ""env"" (Unix) or ""set"" (Windows) to get list of environment variables. const TSeqCollection * GetListOfGlobals(); R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTabCom.html:8251,clear,clears,8251,root/html602/TTabCom.html,https://root.cern,https://root.cern/root/html602/TTabCom.html,6,"['Clear', 'clear']","['ClearAll', 'clears']"
Usability,"ctor of efficiencies. E^-1 = ((A# Vyy^-1 A)+tau^2 Lsquared). x = E (A# Vyy^-1 y + tau^2 Lsquared x0 +lambda/2 * epsilon) is the result. The derivatives; dx_k/dy_i; dx_k/dA_ij; dx_k/d(tau^2); are calculated for further usage. The covariance matrix V_xx is calculated as:; Vxx_ij = sum_kl dx_i/dy_k Vyy_kl dx_j/dy_l. Warning:. The algorithm is based on ""standard"" matrix inversion, with the; known limitations in numerical accuracy and computing cost for; matrices with large dimensions. Thus the algorithm should not used for large dimensions of x and y; nx should not be much larger than 200; ny should not be much larger than 1000. Proper choice of tau. One of the difficult questions is about the choice of tau.; The method implemented in TUnfold is the L-curve method:; a two-dimensional curve is plotted; x-axis: log10(chisquare); y-axis: log10(regularisation condition); In many cases this curve has an L-shape. The best choice of tau is in the; kink of the L. Within TUnfold a simple version of the L-curve analysis is available.; It tests a given number of points in a predefined tau-range and searches; for the maximum of the curvature in the L-curve (kink position).; if no tau range is given, the range of the scan is determined automatically. A nice overview of the L-curve method is given in:; The L-curve and Its Use in the Numerical Treatment of Inverse Problems; (2000) by P. C. Hansen, in Computational Inverse Problems in; Electrocardiology, ed. P. Johnston,; Advances in Computational Bioengineering; http://www.imm.dtu.dk/~pch/TR/Lcurve.ps. Alternative Regularisation conditions. Regularisation is needed for most unfolding problems, in order to avoid; large oscillations and large correlations on the output bins.; It means that some extra conditions are applied on the output bins. Within TUnfold these conditions are posed on the difference (x-x0), where; x: unfolding output; x0: the bias distribution, by default calculated from; the input matrix A. There is a method SetBias(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TUnfold.html:4871,simpl,simple,4871,root/html534/TUnfold.html,https://root.cern,https://root.cern/root/html534/TUnfold.html,6,['simpl'],['simple']
Usability,"ctor, either with TMultiLayerPerceptron::SetEventWeight(). In addition, the TTree weight is taken into account.; Finally, one starts the training with TMultiLayerPerceptron::Train(Int_t nepoch, Option_t* options). The first argument is the number of epochs while option is a string that can contain: ""text"" (simple text output) , ""graph"" (evoluting graphical training curves), ""update=X"" (step for the text/graph output update) or ""+"" (will skip the randomisation and start from the previous values). All combinations are available.; Example: net.Train(100,""text, graph, update=10"");; When the neural net is trained, it can be used directly ( TMultiLayerPerceptron::Evaluate() ) or exported to a standalone C++ code ( TMultiLayerPerceptron::Export() ).; Finally, note that even if this implementation is inspired from the mlpfit code, the feature lists are not exactly matching:. mlpfit hybrid learning method is not implemented; output neurons can be normalized, this is not the case for mlpfit; the neural net is exported in C++, FORTRAN or PYTHON; the drawResult() method allows a fast check of the learning procedure. In addition, the paw version of mlpfit had additional limitations on the number of neurons, hidden layers and inputs/outputs that does not apply to TMultiLayerPerceptron. ; Definition at line 26 of file TMultiLayerPerceptron.h. Public Types; enum  EDataSet { kTraining; , kTest; };  ; enum  ELearningMethod { ;   kStochastic; , kBatch; , kSteepestDescent; , kRibierePolak; , ;   kFletcherReeves; , kBFGS. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsRefer",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiLayerPerceptron.html:8707,learn,learning,8707,doc/master/classTMultiLayerPerceptron.html,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html,2,['learn'],['learning']
Usability,"ctor. ;  ; virtual ~VOptimizer ()=default;  Virtual Destructor. ;  ; size_t GetGlobalStep () const;  ; Layer_t * GetLayerAt (size_t i);  ; std::vector< Layer_t * > & GetLayers ();  ; Scalar_t GetLearningRate () const;  Getters. ;  ; void IncrementGlobalStep ();  Increments the global step. ;  ; void SetLearningRate (size_t learningRate);  Setters. ;  ; void Step ();  Performs one step of optimization. ;  . Protected Member Functions; virtual void UpdateBiases (size_t layerIndex, std::vector< Matrix_t > &biases, const std::vector< Matrix_t > &biasGradients)=0;  Update the biases, given the current bias gradients. ;  ; virtual void UpdateWeights (size_t layerIndex, std::vector< Matrix_t > &weights, const std::vector< Matrix_t > &weightGradients)=0;  Update the weights, given the current weight gradients. ;  . Protected Attributes; DeepNet_t & fDeepNet;  The reference to the deep net. ;  ; size_t fGlobalStep;  The current global step count during training. ;  ; Scalar_t fLearningRate;  The learning rate used for training. ;  . #include <TMVA/DNN/Optimizer.h>. Inheritance diagram for TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ Matrix_t. template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . using TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >::Matrix_t = typename Architecture_t::Matrix_t. Definition at line 47 of file Optimizer.h. ◆ Scalar_t. template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . using TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >::Scalar_t = typename Architecture_t::Scalar_t. Definition at line 48 of file Optimizer.h. Constructor & Destructor Documentation. ◆ VOptimizer(). template<typename Architecture_t , typ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1VOptimizer.html:1995,learn,learning,1995,doc/master/classTMVA_1_1DNN_1_1VOptimizer.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1VOptimizer.html,1,['learn'],['learning']
Usability,"ctor. Double_t evaluate() const; Calculate and return value of p.d.f. void initialize() const; One-time initialization of object. RooAbsGenContext* genContext(const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE) const; Return appropriate generator context for this convolved p.d.f. If both pdf and resolution; model support internal generation return and optimization convolution generation context; that uses a smearing algorithm. Otherwise return a standard accept/reject sampling; context on the convoluted shape. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooNumConvPdf to more intuitively reflect the contents of the; product operator construction. TObject* clone(const char* newname) const; { return new RooNumConvPdf(*this,newname) ; }. RooNumIntConfig& convIntConfig(); Calls forwarded to RooNumConvolution. { return conv().convIntConfig() ; }. void clearConvolutionWindow(); { conv().clearConvolutionWindow() ; }. void setConvolutionWindow(RooAbsReal& centerParam, RooAbsReal& widthParam, Double_t widthScaleFactor = 1); { conv().setConvolutionWindow(centerParam,widthParam,widthScaleFactor) ; }. void setCallWarning(Int_t threshold = 2000); { conv().setCallWarning(threshold) ; }. void setCallProfiling(Bool_t flag, Int_t nbinX = 40, Int_t nbinCall = 40, Int_t nCallHigh = 1000); { conv().setCallProfiling(flag,nbinX,nbinCall,nCallHigh) ; }. const TH2* profileData() const; { return conv().profileData() ; }. RooRealVar& var() const; Access components. { return (RooRealVar&)(const_cast<RooAbsReal&>(_origVar.arg())) ; }. RooAbsReal& pdf() const; { return const_cast<RooAbsReal&>(_origPdf.arg()) ; }. RooAbsReal& model() const; { return const_cast<RooAbsReal&>(_origModel.arg()) ; }. RooNumConvolution& conv() const; WVE Store all properties of RooNumConvolution here so that can be take; along in the copy ctor. { if (!_init) initialize() ; return *_conv ; }. » Last changed: Mon Dec 7 13:48:30 20",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooNumConvPdf.html:43687,clear,clearConvolutionWindow,43687,root/html526/RooNumConvPdf.html,https://root.cern,https://root.cern/root/html526/RooNumConvPdf.html,1,['clear'],['clearConvolutionWindow']
Usability,"ctor. Double_t evaluate() const; Calculate and return value of p.d.f. void initialize() const; One-time initialization of object. RooAbsGenContext* genContext(const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE) const; Return appropriate generator context for this convolved p.d.f. If both pdf and resolution; model support internal generation return and optimization convolution generation context; that uses a smearing algorithm. Otherwise return a standard accept/reject sampling; context on the convoluted shape. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooNumConvPdf to more intuitively reflect the contents of the; product operator construction. TObject* clone(const char* newname) const; { return new RooNumConvPdf(*this,newname) ; }. RooNumIntConfig& convIntConfig(); Calls forwarded to RooNumConvolution. { return conv().convIntConfig() ; }. void clearConvolutionWindow(); { conv().clearConvolutionWindow() ; }. void setConvolutionWindow(RooAbsReal& centerParam, RooAbsReal& widthParam, Double_t widthScaleFactor = 1); { conv().setConvolutionWindow(centerParam,widthParam,widthScaleFactor) ; }. void setCallWarning(Int_t threshold = 2000); { conv().setCallWarning(threshold) ; }. void setCallProfiling(Bool_t flag, Int_t nbinX = 40, Int_t nbinCall = 40, Int_t nCallHigh = 1000); { conv().setCallProfiling(flag,nbinX,nbinCall,nCallHigh) ; }. const TH2* profileData() const; { return conv().profileData() ; }. RooRealVar& var() const; Access components. { return (RooRealVar&)(const_cast<RooAbsReal&>(_origVar.arg())) ; }. RooAbsReal& pdf() const; { return const_cast<RooAbsReal&>(_origPdf.arg()) ; }. RooAbsReal& model() const; { return const_cast<RooAbsReal&>(_origModel.arg()) ; }. RooNumConvolution& conv() const; WVE Store all properties of RooNumConvolution here so that can be take; along in the copy ctor. { if (!_init) initialize() ; return *_conv ; }. » Last changed: Mon Jul 4 15:23:33 20",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooNumConvPdf.html:44723,clear,clearConvolutionWindow,44723,root/html530/RooNumConvPdf.html,https://root.cern,https://root.cern/root/html530/RooNumConvPdf.html,1,['clear'],['clearConvolutionWindow']
Usability,"ctor. Double_t evaluate() const; Calculate and return value of p.d.f. void initialize() const; One-time initialization of object. RooAbsGenContext* genContext(const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE) const; Return appropriate generator context for this convolved p.d.f. If both pdf and resolution; model support internal generation return and optimization convolution generation context; that uses a smearing algorithm. Otherwise return a standard accept/reject sampling; context on the convoluted shape. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooNumConvPdf to more intuitively reflect the contents of the; product operator construction. TObject* clone(const char* newname) const; { return new RooNumConvPdf(*this,newname) ; }. RooNumIntConfig& convIntConfig(); Calls forwarded to RooNumConvolution. { return conv().convIntConfig() ; }. void clearConvolutionWindow(); { conv().clearConvolutionWindow() ; }. void setConvolutionWindow(RooAbsReal& centerParam, RooAbsReal& widthParam, Double_t widthScaleFactor = 1); { conv().setConvolutionWindow(centerParam,widthParam,widthScaleFactor) ; }. void setCallWarning(Int_t threshold = 2000); { conv().setCallWarning(threshold) ; }. void setCallProfiling(Bool_t flag, Int_t nbinX = 40, Int_t nbinCall = 40, Int_t nCallHigh = 1000); { conv().setCallProfiling(flag,nbinX,nbinCall,nCallHigh) ; }. const TH2* profileData() const; { return conv().profileData() ; }. RooRealVar& var() const; Access components. { return (RooRealVar&)(const_cast<RooAbsReal&>(_origVar.arg())) ; }. RooAbsReal& pdf() const; { return const_cast<RooAbsReal&>(_origPdf.arg()) ; }. RooAbsReal& model() const; { return const_cast<RooAbsReal&>(_origModel.arg()) ; }. RooNumConvolution& conv() const; WVE Store all properties of RooNumConvolution here so that can be take; along in the copy ctor. { if (!_init) initialize() ; return *_conv ; }. » Last changed: Thu Nov 3 20:08:50 20",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooNumConvPdf.html:45130,clear,clearConvolutionWindow,45130,root/html532/RooNumConvPdf.html,https://root.cern,https://root.cern/root/html532/RooNumConvPdf.html,2,['clear'],['clearConvolutionWindow']
Usability,"ctor. Double_t evaluate() const; Calculate and return value of p.d.f. void initialize() const; One-time initialization of object. RooAbsGenContext* genContext(const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE) const; Return appropriate generator context for this convolved p.d.f. If both pdf and resolution; model support internal generation return and optimization convolution generation context; that uses a smearing algorithm. Otherwise return a standard accept/reject sampling; context on the convoluted shape. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooNumConvPdf to more intuitively reflect the contents of the; product operator construction. TObject* clone(const char* newname) const; { return new RooNumConvPdf(*this,newname) ; }. RooNumIntConfig& convIntConfig(); Calls forwarded to RooNumConvolution. { return conv().convIntConfig() ; }. void clearConvolutionWindow(); { conv().clearConvolutionWindow() ; }. void setConvolutionWindow(RooAbsReal& centerParam, RooAbsReal& widthParam, Double_t widthScaleFactor = 1); { conv().setConvolutionWindow(centerParam,widthParam,widthScaleFactor) ; }. void setCallWarning(Int_t threshold = 2000); { conv().setCallWarning(threshold) ; }. void setCallProfiling(Bool_t flag, Int_t nbinX = 40, Int_t nbinCall = 40, Int_t nCallHigh = 1000); { conv().setCallProfiling(flag,nbinX,nbinCall,nCallHigh) ; }. const TH2* profileData() const; { return conv().profileData() ; }. RooRealVar& var() const; Access components. { return (RooRealVar&)(const_cast<RooAbsReal&>(_origVar.arg())) ; }. RooAbsReal& pdf() const; { return const_cast<RooAbsReal&>(_origPdf.arg()) ; }. RooAbsReal& model() const; { return const_cast<RooAbsReal&>(_origModel.arg()) ; }. RooNumConvolution& conv() const; WVE Store all properties of RooNumConvolution here so that can be take; along in the copy ctor. { if (!_init) initialize() ; return *_conv ; }. » Last changed: Thu Sep 23 20:00:22 2",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooNumConvPdf.html:44163,clear,clearConvolutionWindow,44163,root/html528/RooNumConvPdf.html,https://root.cern,https://root.cern/root/html528/RooNumConvPdf.html,1,['clear'],['clearConvolutionWindow']
Usability,"ctor. Double_t evaluate() const; Calculate and return value of p.d.f. void initialize() const; One-time initialization of object. RooAbsGenContext* genContext(const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE) const; Return appropriate generator context for this convolved p.d.f. If both pdf and resolution; model support internal generation return and optimization convolution generation context; that uses a smearing algorithm. Otherwise return a standard accept/reject sampling; context on the convoluted shape. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooNumConvPdf to more intuitively reflect the contents of the; product operator construction. TObject* clone(const char* newname) const; { return new RooNumConvPdf(*this,newname) ; }. RooNumIntConfig& convIntConfig(); Calls forwarded to RooNumConvolution. { return conv().convIntConfig() ; }. void clearConvolutionWindow(); { conv().clearConvolutionWindow() ; }. void setConvolutionWindow(RooAbsReal& centerParam, RooAbsReal& widthParam, Double_t widthScaleFactor = 1); { conv().setConvolutionWindow(centerParam,widthParam,widthScaleFactor) ; }. void setCallWarning(Int_t threshold = 2000); { conv().setCallWarning(threshold) ; }. void setCallProfiling(Bool_t flag, Int_t nbinX = 40, Int_t nbinCall = 40, Int_t nCallHigh = 1000); { conv().setCallProfiling(flag,nbinX,nbinCall,nCallHigh) ; }. const TH2* profileData() const; { return conv().profileData() ; }. RooRealVar& var() const; Access components. { return (RooRealVar&)(const_cast<RooAbsReal&>(_origVar.arg())) ; }. RooAbsReal& pdf() const; { return const_cast<RooAbsReal&>(_origPdf.arg()) ; }. RooAbsReal& model() const; { return const_cast<RooAbsReal&>(_origModel.arg()) ; }. RooNumConvolution& conv() const; WVE Store all properties of RooNumConvolution here so that can be take; along in the copy ctor. { if (!_init) initialize() ; return *_conv ; }. » Last changed: Tue Jun 2 15:32:39 20",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooNumConvPdf.html:49143,clear,clearConvolutionWindow,49143,root/html604/RooNumConvPdf.html,https://root.cern,https://root.cern/root/html604/RooNumConvPdf.html,2,['clear'],['clearConvolutionWindow']
Usability,"ctor. Double_t evaluate() const; Calculate and return value of p.d.f. void initialize() const; One-time initialization of object. RooAbsGenContext* genContext(const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE) const; Return appropriate generator context for this convolved p.d.f. If both pdf and resolution; model support internal generation return and optimization convolution generation context; that uses a smearing algorithm. Otherwise return a standard accept/reject sampling; context on the convoluted shape. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooNumConvPdf to more intuitively reflect the contents of the; product operator construction. TObject* clone(const char* newname) const; { return new RooNumConvPdf(*this,newname) ; }. RooNumIntConfig& convIntConfig(); Calls forwarded to RooNumConvolution. { return conv().convIntConfig() ; }. void clearConvolutionWindow(); { conv().clearConvolutionWindow() ; }. void setConvolutionWindow(RooAbsReal& centerParam, RooAbsReal& widthParam, Double_t widthScaleFactor = 1); { conv().setConvolutionWindow(centerParam,widthParam,widthScaleFactor) ; }. void setCallWarning(Int_t threshold = 2000); { conv().setCallWarning(threshold) ; }. void setCallProfiling(Bool_t flag, Int_t nbinX = 40, Int_t nbinCall = 40, Int_t nCallHigh = 1000); { conv().setCallProfiling(flag,nbinX,nbinCall,nCallHigh) ; }. const TH2* profileData() const; { return conv().profileData() ; }. RooRealVar& var() const; Access components. { return (RooRealVar&)(const_cast<RooAbsReal&>(_origVar.arg())) ; }. RooAbsReal& pdf() const; { return const_cast<RooAbsReal&>(_origPdf.arg()) ; }. RooAbsReal& model() const; { return const_cast<RooAbsReal&>(_origModel.arg()) ; }. RooNumConvolution& conv() const; WVE Store all properties of RooNumConvolution here so that can be take; along in the copy ctor. { if (!_init) initialize() ; return *_conv ; }. » Last changed: Tue Jun 30 14:34:34 2",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooNumConvPdf.html:49143,clear,clearConvolutionWindow,49143,root/html602/RooNumConvPdf.html,https://root.cern,https://root.cern/root/html602/RooNumConvPdf.html,2,['clear'],['clearConvolutionWindow']
Usability,"ctor. Double_t evaluate() const; Calculate and return value of p.d.f. void initialize() const; One-time initialization of object. RooAbsGenContext* genContext(const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE) const; Return appropriate generator context for this convolved p.d.f. If both pdf and resolution; model support internal generation return and optimization convolution generation context; that uses a smearing algorithm. Otherwise return a standard accept/reject sampling; context on the convoluted shape. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooNumConvPdf to more intuitively reflect the contents of the; product operator construction. TObject* clone(const char* newname) const; { return new RooNumConvPdf(*this,newname) ; }. RooNumIntConfig& convIntConfig(); Calls forwarded to RooNumConvolution. { return conv().convIntConfig() ; }. void clearConvolutionWindow(); { conv().clearConvolutionWindow() ; }. void setConvolutionWindow(RooAbsReal& centerParam, RooAbsReal& widthParam, Double_t widthScaleFactor = 1); { conv().setConvolutionWindow(centerParam,widthParam,widthScaleFactor) ; }. void setCallWarning(Int_t threshold = 2000); { conv().setCallWarning(threshold) ; }. void setCallProfiling(Bool_t flag, Int_t nbinX = 40, Int_t nbinCall = 40, Int_t nCallHigh = 1000); { conv().setCallProfiling(flag,nbinX,nbinCall,nCallHigh) ; }. const TH2* profileData() const; { return conv().profileData() ; }. RooRealVar& var() const; Access components. { return (RooRealVar&)(const_cast<RooAbsReal&>(_origVar.arg())) ; }. RooAbsReal& pdf() const; { return const_cast<RooAbsReal&>(_origPdf.arg()) ; }. RooAbsReal& model() const; { return const_cast<RooAbsReal&>(_origModel.arg()) ; }. RooNumConvolution& conv() const; WVE Store all properties of RooNumConvolution here so that can be take; along in the copy ctor. { if (!_init) initialize() ; return *_conv ; }. » Last changed: Tue Mar 10 17:18:13 2",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooNumConvPdf.html:47481,clear,clearConvolutionWindow,47481,root/html534/RooNumConvPdf.html,https://root.cern,https://root.cern/root/html534/RooNumConvPdf.html,2,['clear'],['clearConvolutionWindow']
Usability,"ctor<RooAbsReal*>fNullNLLs!; vector<const RooArgSet*>fNullSnapshots; const RooArgSet*RooStats::ToyMCSampler::fObservables; const RooArgSet*RooStats::ToyMCSampler::fParametersForTestStat; RooAbsPdf*RooStats::ToyMCSampler::fPdfmodel (can be alt or null); RooAbsPdf*RooStats::ToyMCSampler::fPriorNuisanceprior pdf for nuisance parameters; RooStats::ProofConfig*RooStats::ToyMCSampler::fProofConfig!; const RooDataSet*RooStats::ToyMCSampler::fProtoDatain dev; boolfReuseNLL; stringRooStats::ToyMCSampler::fSamplingDistNamename of the model; Double_tRooStats::ToyMCSampler::fSize; vector<TestStatistic*>RooStats::ToyMCSampler::fTestStatistics; Double_tRooStats::ToyMCSampler::fToysInTails; RooStats::toysStrategiesfToysStrategy; Bool_tRooStats::ToyMCSampler::fUseMultiGenUse PrepareMultiGen?; static Bool_tRooStats::ToyMCSampler::fgAlwaysUseMultiGenUse PrepareMultiGen always. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~ToyMCImportanceSampler(). void ClearCache(void). RooDataSet* GetSamplingDistributionsSingleWorker(RooArgSet& paramPoint). RooAbsData* GenerateToyData(RooArgSet& paramPoint, double& weight) const. RooAbsData* GenerateToyData(RooArgSet& paramPoint, double& weight, vector<double>& impNLLs, double& nullNLL) const. RooAbsData* GenerateToyData(vector<double>& weights) const. RooAbsData* GenerateToyData(vector<double>& weights, vector<double>& nullNLLs, vector<double>& impNLLs) const; global observables into account.; The values of the generated global observables remain in the pdf's variables.; They have to have those values for the subsequent evaluation of the; test statistics. int CreateImpDensitiesForOnePOIAdaptively(RooAbsPdf& pdf, const RooArgSet& allPOI, RooRealVar& poi, double nStdDevOverlap = 0.5, double poiValueForBackground = 0.0); these might not necessarily be the same thing. int CreateNImpDensitiesForOnePOI(RooAbsPdf& pdf, const RooArgSet& allPOI, RooRealVar& poi, int n, double poiValueForBackground = 0.0); n is th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__ToyMCImportanceSampler.html:8544,Clear,ClearCache,8544,root/html534/RooStats__ToyMCImportanceSampler.html,https://root.cern,https://root.cern/root/html534/RooStats__ToyMCImportanceSampler.html,1,['Clear'],['ClearCache']
Usability,"ctrum2Fit Spectrum2 Fitter using algorithm without matrix inversion and conjugate gradient method for symmetrical matrices (Stiefel-Hestens method); TSpectrum2Painter TSpectrum 3d graphics package; TSpectrum2Transform Spectrum2 Transformer, it calculates classic orthogonal 2D transforms; TSpectrum3 Peak Finder, Background estimator, Markov smoothing and Deconvolution for 3-D histograms; TSpectrumFit Spectrum Fitter using algorithm without matrix inversion and conjugate gradient method for symmetrical matrices (Stiefel-Hestens method); TSpectrumTransform Spectrum Transformer, it calculates classic orthogonal 1D transforms; TSpider Helper class to draw spider; TSpiderEditor GUI for editing the spider plot attributes.; TSpline Spline base class; TSpline3 Class to create third natural splines; TSpline5 Class to create quintic natural splines; TSplinePoly Spline polynomial terms; TSplinePoly3 Third spline polynomial terms; TSplinePoly5 Quintic spline polynomial terms; TStatistic Named statistical variable; TStatsFeedback Present PROOF query feedback; TStatus Status class; TStdExceptionHandler C++ exception handler; TStopwatch A stopwatch which times real and cpu time; TStorage Storage manager class; TStreamerArtificial StreamerElement injected by a TSchemaRule. Transient only to preverse forward compatibility.; TStreamerBase Streamer element of type base class; TStreamerBasicPointer Streamer element for a pointer to a basic type; TStreamerBasicType Streamer element for a basic type; TStreamerElement Base class for one element (data member) to be Streamed; TStreamerInfo Streamer information for one class version; TStreamerInfoActions ; TStreamerInfoActions::TActionSequence ; TStreamerInfoActions::TConfiguration ; TStreamerInfoActions::TConfiguredAction A configured action; TStreamerLoop Streamer element for a pointer to an array of objects; TStreamerObject Streamer element of type object; TStreamerObjectAny Streamer element of type object other than TObject; TStreamerObje",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ClassIndex.html:133144,feedback,feedback,133144,root/html534/ClassIndex.html,https://root.cern,https://root.cern/root/html534/ClassIndex.html,6,['feedback'],['feedback']
Usability,"cts to; 365// automatize memory management and not introduce even more preprocessor; 366// branching for deletion at the end of the method.; 367//; 368// FUTURE IMPROVEMENT ONCE OLD PYTHON VERSIONS ARE NOT SUPPORTED BY CPPYY:; 369// Right now we use C++ objects to automatize memory management. One could use; 370// RAAI and the Python memory allocation API (PEP 445) once some old Python; 371// version is deprecated in CPPYY. That new feature is available since version; 372// 3.4 and the preprocessor branching to also support that would be so; 373// complicated to make the code unreadable.; 374 std::vector<std::wstring> argv2;; 375 argv2.reserve(argc);; 376 argv2.emplace_back(name.c_str(), &name[name.size()]);; 377 ; 378 for (int i = 1; i < argc; ++i) {; 379 auto iarg = args[i - 1].c_str();; 380 argv2.emplace_back(iarg, &iarg[strlen(iarg)]);; 381 }; 382 ; 383#if PY_VERSION_HEX < 0x03080000; 384// Before version 3.8, the code is one simple line; 385 wchar_t *argv2_arr[argc];; 386 for (int i = 0; i < argc; ++i) {; 387 argv2_arr[i] = const_cast<wchar_t *>(argv2[i].c_str());; 388 }; 389 PySys_SetArgv(argc, argv2_arr);; 390 ; 391#else; 392// Here we comply to ""PEP 587 – Python Initialization Configuration"" to avoid; 393// deprecation warnings at compile time.; 394 class PyConfigHelperRAAI {; 395 public:; 396 PyConfigHelperRAAI(const std::vector<std::wstring> &argv2); 397 {; 398 PyConfig_InitPythonConfig(&fConfig);; 399 fConfig.parse_argv = 1;; 400 UpdateArgv(argv2);; 401 InitFromConfig();; 402 }; 403 ~PyConfigHelperRAAI() { PyConfig_Clear(&fConfig); }; 404 ; 405 private:; 406 void InitFromConfig() { Py_InitializeFromConfig(&fConfig); };; 407 void UpdateArgv(const std::vector<std::wstring> &argv2); 408 {; 409 auto WideStringListAppendHelper = [](PyWideStringList *wslist, const wchar_t *wcstr) {; 410 PyStatus append_status = PyWideStringList_Append(wslist, wcstr);; 411 if (PyStatus_IsError(append_status)) {; 412 std::wcerr << ""Error: could not append element "" << wcstr << "" t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/API_8cxx_source.html:13320,simpl,simple,13320,doc/master/API_8cxx_source.html,https://root.cern,https://root.cern/doc/master/API_8cxx_source.html,1,['simpl'],['simple']
Usability,"cts/subfolder/obj/root.json.gz; If the access to the server is restricted with htdigest, it is recommended to use the curl program since only curl correctly implements such authentication method. The command will look like:; [shell] curl --user ""accout:password"" http://localhost:8080/Objects/subfolder/obj/root.json --digest -o root.json; 1.9.1 Objects data access in JSON format; Request root.json implemented with TBufferJSON class. TBufferJSON generates such object representation, which could be directly used in JSROOT for drawing. root.json request returns either complete object or just object member like:; [shell] wget http://localhost:8080/Objects/subfolder/obj/fTitle/root.json; The result will be: ""title"".; For the root.json request one could specify the ‘compact’ parameter, which allow to reduce the number of spaces and new lines without data lost. This parameter can have values from ‘0’ (no compression) till ‘3’ (no spaces and new lines at all). In addition, one can use simple compression algorithm for big arrays. If compact=‘10’, zero values in the begin and at the end of the array will be excluded. If compact=‘20’, similar values or large zero gaps in-between will be compressed. Such array compression support in JSROOT from version 4.8.2.; Usage of root.json request is about as efficient as binary root.bin request. Comparison of different request methods with TH2 histogram from hsimple.C shown in the table:. Request; Size. root.bin; 7672 bytes. root.bin.gz; 1582 bytes. root.json; 8570 bytes. root.json?compact=3; 6004 bytes. root.json?compact=23; 5216 bytes. root.json.gz?compact=23; 1855 bytes. One should remember that JSON representation always includes names of the data fields which are not present in the binary representation. Even then the size difference is negligible.; root.json used in JSROOT to request objects from THttpServer.; 1.9.2 Generating images out of objects; For the ROOT classes which are implementing Draw method (like TH1 or TGraph) one cou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/HttpServer/HttpServer.html:15879,simpl,simple,15879,root/htmldoc/guides/HttpServer/HttpServer.html,https://root.cern,https://root.cern/root/htmldoc/guides/HttpServer/HttpServer.html,2,['simpl'],['simple']
Usability,"ctuations – noise. The algorithm is based on smoothed second differences that are compared to its standard deviations. Therefore it is necessary to pass a parameter of sigma to the peak searching function. The algorithm is selective to the peaks with a given sigma. The form of the basic peak searching function is; Int_t Search1(const float *spectrum,; int size,; double sigma);; This function searches for peaks in the source spectrum. The number of found peaks and their positions are written into structure pointed by one_dim_peak structure pointer.; Function parameters:. source: pointer to the vector of the source spectrum; p: pointer to the one_dim_peak structure pointer; size: length of the source spectrum; sigma: sigma of searched peaks. The one_dim_peak structure has the form of; struct one_dim_peak{; int number_of_peaks;; double position[MAX_NUMBER_OF_PEAKS1];; };; An example of simple one-dimensional spectrum with identified peaks is given in Figure 3.1. Simple one-dimensional spectrum with identified peaks. An example of 1-dimensional experimental spectrum with many identified peaks is given in Figure 3.2. 1-dimensional experimental spectrum with many identified peaks. However, when we have noisy data, the number of peaks can be enormous. One such an example is given in Figure 3.3. With noisy data the number of peaks can be enormous. Therefore it can be useful to have a possibility to set a threshold value and to consider only the peaks higher than this threshold (see Figure 3.4, only three peaks were identified, threshold=50). The value in the center of the peak (value[i]) minus the average value in two symmetrically positioned channels (channels i-3*sigma, i+3*sigma) must be greater than threshold. Otherwise the peak is ignored. Iwth threshold=50, only three peaks were identified. An alternative approach was proposed in [6]. The algorithm generates new invariant spectrum based on discrete Markov chains. In this spectrum the noise is suppressed, the spectrum i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/spectrum/Spectrum.html:16895,Simpl,Simple,16895,root/htmldoc/guides/spectrum/Spectrum.html,https://root.cern,https://root.cern/root/htmldoc/guides/spectrum/Spectrum.html,1,['Simpl'],['Simple']
Usability,"cular when the TTree is accessed remotely, e.g. via a high latency network.; For each TTree being processed a TTreeCache object is created. This object is automatically deleted when the Tree is deleted or when the file is deleted. The user can change the size of the cache with the TTree::SetCacheSize method (by default the size is 30 Megabytes). This feature can be controlled with the environment variable ROOT_TTREECACHE_SIZE or the TTreeCache.Size option. The entry range for which the cache is active can also be set with the SetEntryRange method. Changes of behavior when using TChain and TEventList; The usage of TChain or TEventList have influence on the behaviour of the cache:. Special case of a TChain Once the training is done on the first Tree, the list of branches in the cache is kept for the following files.; Special case of a TEventlist if the Tree or TChain has a TEventlist, only the buffers referenced by the list are put in the cache. The learning phase is started or restarted when:; TTree automatically creates a cache.; TTree::SetCacheSize is called with a non-zero size and a cache did not previously exist; TTreeCache::StartLearningPhase is called.; TTreeCache::SetEntryRange is called and the learning is not yet finished and has not been set to manual and the new minimun entry is different. The learning period is stopped (and prefetching is started) when:; TTreeCache::StopLearningPhase is called.; An entry outside the 'learning' range is requested The 'learning range is from fEntryMin (default to 0) to fEntryMin + fgLearnEntries.; A 'cached' TChain switches over to a new file. Self-optimization in presence of cache misses; The TTreeCache can optimize its behavior on a cache miss. When miss optimization is enabled (see the SetOptimizeMisses method), it tracks all branches utilized after the learning phase which caused a cache miss. When one cache miss occurs, all the utilized branches are be prefetched for that event. This optimization utilizes the observati",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTreeCache.html:3701,learn,learning,3701,doc/v632/classTTreeCache.html,https://root.cern,https://root.cern/doc/v632/classTTreeCache.html,2,['learn'],['learning']
Usability,"culation is skipped if err==0; 198 virtual Double_t GetMvaValue( Double_t* errLower = nullptr, Double_t* errUpper = nullptr) = 0;; 199 ; 200 // signal/background classification response; 201 Double_t GetMvaValue( const TMVA::Event* const ev, Double_t* err = nullptr, Double_t* errUpper = nullptr );; 202 ; 203 protected:; 204 // helper function to set errors to -1; 205 void NoErrorCalc(Double_t* const err, Double_t* const errUpper);; 206 ; 207 // signal/background classification response for all current set of data; 208 virtual std::vector<Double_t> GetMvaValues(Long64_t firstEvt = 0, Long64_t lastEvt = -1, Bool_t logProgress = false);; 209 // same as above but using a provided data set (used by MethodCategory); 210 virtual std::vector<Double_t> GetDataMvaValues(DataSet *data = nullptr, Long64_t firstEvt = 0, Long64_t lastEvt = -1, Bool_t logProgress = false);; 211 ; 212 public:; 213 // regression response; 214 const std::vector<Float_t>& GetRegressionValues(const TMVA::Event* const ev){; 215 fTmpEvent = ev;; 216 const std::vector<Float_t>* ptr = &GetRegressionValues();; 217 fTmpEvent = nullptr;; 218 return (*ptr);; 219 }; 220 ; 221 virtual const std::vector<Float_t>& GetRegressionValues() {; 222 std::vector<Float_t>* ptr = new std::vector<Float_t>(0);; 223 return (*ptr);; 224 }; 225 ; 226 // multiclass classification response; 227 virtual const std::vector<Float_t>& GetMulticlassValues() {; 228 std::vector<Float_t>* ptr = new std::vector<Float_t>(0);; 229 return (*ptr);; 230 }; 231 ; 232 // Training history; 233 virtual const std::vector<Float_t>& GetTrainingHistory(const char* /*name*/ ) {; 234 std::vector<Float_t>* ptr = new std::vector<Float_t>(0);; 235 return (*ptr);; 236 }; 237 ; 238 // probability of classifier response (mvaval) to be signal (requires ""CreateMvaPdf"" option set); 239 virtual Double_t GetProba( const Event *ev); // the simple one, automatically calculates the mvaVal and uses the SAME sig/bkg ratio as given in the training sample (typically 50/50 .",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodBase_8h_source.html:8832,simpl,simple,8832,doc/master/MethodBase_8h_source.html,https://root.cern,https://root.cern/doc/master/MethodBase_8h_source.html,1,['simpl'],['simple']
Usability,"cutor pool; auto hist = pool.MapReduce(CreateAndFillHists, 10, PoolUtils::ReduceObjects);; ROOT::ExecutorUtils::ReduceObjectsMerge collection of TObjects.Definition PoolUtils.h:35; ROOT::TExecutorCRTP::Mapauto Map(F func, unsigned nTimes) -> std::vector< InvokeResult_t< F > >Execute a function without arguments several times.Definition TExecutorCRTP.hxx:185; ROOT::TExecutorCRTP::ReduceT * Reduce(const std::vector< T * > &mergeObjs)""Reduce"" an std::vector into a single object by using the object's Merge method.Definition TExecutorCRTP.hxx:347; ROOT::TProcessExecutorThis class provides a simple interface to execute the same task multiple times in parallel,...Definition TProcessExecutor.hxx:37; ROOT::TProcessExecutor::MapReduceauto MapReduce(F func, unsigned nTimes, R redfunc) -> InvokeResult_t< F >Execute a function nTimes in parallel (Map) and accumulate the results into a single value (Reduce).Definition TProcessExecutor.hxx:262; ROOT::TThreadExecutorThis class provides a simple interface to execute the same task multiple times in parallel threads,...Definition TThreadExecutor.hxx:41; ROOT::TThreadExecutor::MapReduceauto MapReduce(F func, unsigned nTimes, R redfunc) -> InvokeResult_t< F >Execute a function nTimes in parallel (Map) and accumulate the results into a single value (Reduce).Definition TThreadExecutor.hxx:482; v@ vDefinition rootcling_impl.cxx:3687; sumstatic uint64_t sum(uint64_t i)Definition Factory.cxx:2345. Definition at line 103 of file TExecutorCRTP.hxx. Public Member Functions;  TExecutorCRTP ()=default;  ;  TExecutorCRTP (const TExecutorCRTP &)=delete;  ; template<class F , class T , class Cond = validMapReturnCond<F, T>> ; auto Map (F func, const std::vector< T > &args) -> std::vector< InvokeResult_t< F, T > >;  Execute a function over the elements of an immutable vector. ;  ; template<class F , class INTEGER , class Cond = validMapReturnCond<F, INTEGER>> ; auto Map (F func, ROOT::TSeq< INTEGER > args) -> std::vector< InvokeResult_t< F, INTEGER >",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TExecutorCRTP.html:4201,simpl,simple,4201,doc/v632/classROOT_1_1TExecutorCRTP.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TExecutorCRTP.html,1,['simpl'],['simple']
Usability,"cutor pool; auto hist = pool.MapReduce(CreateAndFillHists, 10, PoolUtils::ReduceObjects);; ROOT::ExecutorUtils::ReduceObjectsMerge collection of TObjects.Definition PoolUtils.h:35; ROOT::TExecutorCRTP::Mapauto Map(F func, unsigned nTimes) -> std::vector< InvokeResult_t< F > >Execute a function without arguments several times.Definition TExecutorCRTP.hxx:185; ROOT::TExecutorCRTP::ReduceT * Reduce(const std::vector< T * > &mergeObjs)""Reduce"" an std::vector into a single object by using the object's Merge method.Definition TExecutorCRTP.hxx:347; ROOT::TProcessExecutorThis class provides a simple interface to execute the same task multiple times in parallel,...Definition TProcessExecutor.hxx:37; ROOT::TProcessExecutor::MapReduceauto MapReduce(F func, unsigned nTimes, R redfunc) -> InvokeResult_t< F >Execute a function nTimes in parallel (Map) and accumulate the results into a single value (Reduce).Definition TProcessExecutor.hxx:262; ROOT::TThreadExecutorThis class provides a simple interface to execute the same task multiple times in parallel threads,...Definition TThreadExecutor.hxx:41; ROOT::TThreadExecutor::MapReduceauto MapReduce(F func, unsigned nTimes, R redfunc) -> InvokeResult_t< F >Execute a function nTimes in parallel (Map) and accumulate the results into a single value (Reduce).Definition TThreadExecutor.hxx:482; v@ vDefinition rootcling_impl.cxx:3699; sumstatic uint64_t sum(uint64_t i)Definition Factory.cxx:2345. Definition at line 103 of file TExecutorCRTP.hxx. Public Member Functions;  TExecutorCRTP ()=default;  ;  TExecutorCRTP (const TExecutorCRTP &)=delete;  ; template<class F , class T , class Cond = validMapReturnCond<F, T>> ; auto Map (F func, const std::vector< T > &args) -> std::vector< InvokeResult_t< F, T > >;  Execute a function over the elements of an immutable vector. ;  ; template<class F , class INTEGER , class Cond = validMapReturnCond<F, INTEGER>> ; auto Map (F func, ROOT::TSeq< INTEGER > args) -> std::vector< InvokeResult_t< F, INTEGER >",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TExecutorCRTP.html:4202,simpl,simple,4202,doc/master/classROOT_1_1TExecutorCRTP.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TExecutorCRTP.html,1,['simpl'],['simple']
Usability,"cxx. ◆ getAnalyticalIntegral(). Int_t RooPolyVar::getAnalyticalIntegral ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. overridevirtual . Advertise that we can internally integrate over x. ; Reimplemented from RooAbsReal.; Definition at line 168 of file RooPolyVar.cxx. ◆ IsA(). TClass * RooPolyVar::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsReal.; Definition at line 62 of file RooPolyVar.h. ◆ Streamer(). void RooPolyVar::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsReal. ◆ StreamerNVirtual(). void RooPolyVar::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 62 of file RooPolyVar.h. ◆ translate(). void RooPolyVar::translate ; (; RooFit::Detail::CodeSquashContext & ; ctx); const. overridevirtual . This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ; The function adds the code represented by each class as an std::string (that is later concatenated with code strings from translate calls) to form the C++ code that AD tools can understand. Any class that wants to support AD, has to implement this function.; Parameters. [in]ctxAn object to manage auxiliary information for code-squashing. Also takes the code string that this class outputs into the squashed code through the 'addToCodeBody' function. . Reimplemented from RooAbsArg.; Definition at line 115 of file RooPolyVar.cxx. Friends And Related Symbol Documentation. ◆ RooPolynomial. friend class RooPolynomial. friend . Definition at line 55 of file RooPolyVar.h. Member Data Documentation. ◆ _coefList. RooListProxy RooPolyVar::_coefList. protected . Definition at line 43 of file RooPolyVar.h. ◆ _lowestOrder. Int_t RooPolyVar::_lowestOrder = 0. protected . Definition at line 44 of file RooPolyVar.h. ◆ _wksp. std::vector<d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooPolyVar.html:65154,simpl,simple,65154,doc/master/classRooPolyVar.html,https://root.cern,https://root.cern/doc/master/classRooPolyVar.html,1,['simpl'],['simple']
Usability,cxx;  LaEigenValues.cxx;  LaInnerProduct.cxx;  LaInverse.cxx;  LaOuterProduct.cxx;  LaSumOfElements.cxx;  LaVtMVSimilarity.cxx;  MinimumBuilder.cxx;  Minuit2Minimizer.cxx;  MnApplication.cxx;  mnbins.cxx;  MnContours.cxx;  MnCovarianceSqueeze.cxx;  mndasum.cxx;  mndaxpy.cxx;  mnddot.cxx;  mndscal.cxx;  mndspmv.cxx;  mndspr.cxx;  MnEigen.cxx;  MnFcn.cxx;  MnFumiliMinimize.cxx;  MnFunctionCross.cxx;  MnGlobalCorrelationCoeff.cxx;  MnHesse.cxx;  MnLineSearch.cxx;  mnlsame.cxx;  MnMachinePrecision.cxx;  MnMinos.cxx;  MnParabolaFactory.cxx;  MnParameterScan.cxx;  MnPlot.cxx;  MnPosDef.cxx;  MnPrint.cxx;  MnScan.cxx;  MnSeedGenerator.cxx;  MnStrategy.cxx;  mnteigen.cxx;  MnTiny.cxx;  mntplot.cxx;  MnTraceObject.cxx;  MnUserFcn.cxx;  MnUserParameters.cxx;  MnUserParameterState.cxx;  MnUserTransformation.cxx;  mnvert.cxx;  mnxerbla.cxx;  ModularFunctionMinimizer.cxx;  MPIProcess.cxx;  NegativeG2LineSearch.cxx;  Numerical2PGradientCalculator.cxx;  ParametricFunction.cxx;  ScanBuilder.cxx;  SimplexBuilder.cxx;  SimplexParameters.cxx;  SimplexSeedGenerator.cxx;  SinParameterTransformation.cxx;  SqrtLowParameterTransformation.cxx;  SqrtUpParameterTransformation.cxx;  TMinuit2TraceObject.cxx;  VariableMetricBuilder.cxx;  VariableMetricEDMEstimator.cxx;  ► test;  ► MnSim;  DemoFumili.cxx;  DemoGaussSim.cxx;  demoMinimizer.cxx;  FlatRandomGen.h;  GaussDataGen.cxx;  GaussDataGen.h;  GaussFcn.cxx;  GaussFcn.h;  GaussFcn2.cxx;  GaussFcn2.h;  GaussFunction.h;  GaussianModelFunction.h;  GaussRandomGen.h;  ParallelTest.cxx;  PaulTest.cxx;  PaulTest2.cxx;  PaulTest3.cxx;  PaulTest4.cxx;  ReneTest.cxx;  ► MnTutorial;  Quad12F.h;  Quad12FMain.cxx;  Quad1F.h;  Quad1FMain.cxx;  Quad4F.h;  Quad4FMain.cxx;  Quad8F.h;  Quad8FMain.cxx;  testMinimizer.cxx;  testNdimFit.cxx;  testUnbinGausFit.cxx;  testUserFunc.cxx;  ► mlp;  ► inc;  LinkDef.h;  TMLPAnalyzer.h;  TMultiLayerPerceptron.h;  TNeuron.h;  TSynapse.h;  ► src;  TMLPAnalyzer.cxx;  TMultiLayerPerceptron.cxx;  TNeuron.cxx;  TSynapse.cxx;  ► ph,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html606/files.html:54207,Simpl,SimplexBuilder,54207,root/html606/files.html,https://root.cern,https://root.cern/root/html606/files.html,1,['Simpl'],['SimplexBuilder']
Usability,"d ;  draw_rh1.cxxThis macro generates a small V7 TH1D, fills it and draw it in a V7 canvas ;  draw_subpads.cxx;  draw_v6.cxx;  fitpanel.cxx;  histops.cxx;  line.cxxThis ROOT 7 example demonstrates how to create a ROOT 7 canvas (RCanvas) and draw ROOT 7 lines in it (RLine) ;  lineStyle.cxx;  lineWidth.cxx;  markerStyle.cxx;  pad.cxx;  perf.cxx;  perfcomp.cxx;  simple.cxx;  text.cxx;  ► vecops;  vo001_AdoptOrOwnMemory.C In this tutorial we learn how the RVec class can be used to adopt existing memory or allocate some ;  vo001_AdoptOrOwnMemory.py In this tutorial we learn how the RVec class can be used to adopt existing memory or allocate some ;  vo002_VectorCalculations.C In this tutorial we learn how the RVec class can be used to express easily mathematical operations involving arrays and scalars ;  vo003_LogicalOperations.C In this tutorial we learn how the RVec class can be used to express logical operations ;  vo004_SortAndSelect.C In this tutorial we learn how elements of an RVec can be easily sorted and selected ;  vo004_SortAndSelect.py In this tutorial we learn how elements of an RVec can be easily sorted and selected ;  vo005_Combinations.C In this tutorial we learn how combinations of RVecs can be build ;  vo005_Combinations.py In this tutorial we learn how combinations of RVecs can be build ;  vo006_IndexManipulation.C In this tutorial we demonstrate RVec helpers for index manipulation ;  ► xml;  DOMParsePerson.C ROOT implementation of a XML DOM Parser ;  DOMRecursive.C ROOT implementation of a XML DOM Parser ;  SAXHandler.C ROOT implementation of a simple SAX Handler ;  xmlmodifyfile.C Example to read, modify and store xml file, using TXMLEngine class The input file, produced by xmlnewfile.C macro is used If you need full xml syntax support, use TXMLParser instead ;  xmlnewfile.C Example to create a new xml file with the TXMLEngine class ;  xmlreadfile.C Example to read and parse any xml file, supported by TXMLEngine class The input file, produced by xmlnew",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/files.html:172611,learn,learn,172611,doc/v616/files.html,https://root.cern,https://root.cern/doc/v616/files.html,1,['learn'],['learn']
Usability,"d CreatePainter(); Probably, TPadPainter must be placed in a separate ROOT module -; ""padpainter"" (the same as ""histpainter""). But now, it's directly in a; gpad dir, so, in case of default painter, no *.so should be loaded,; no need in plugin managers.; May change in future. TVirtualPadPainter * GetCanvasPainter(); Access and (probably) creation of pad painter. TCanvas(const TCanvas& canvas). TCanvas & operator=(const TCanvas& rhs). void Delete(Option_t* = """"); { MayNotUse(""Delete()""); }. void ForceUpdate(); { fCanvasImp->ForceUpdate(); }. const char * GetDISPLAY() const; {return fDISPLAY.Data();}. TContextMenu * GetContextMenu() const; {return fContextMenu;}. Int_t GetDoubleBuffer() const; {return fDoubleBuffer;}. Int_t GetEvent() const; { return fEvent; }. Int_t GetEventX() const; { return fEventX; }. Int_t GetEventY() const; { return fEventY; }. Color_t GetHighLightColor() const; { return fHighLightColor; }. TVirtualPad * GetPadSave() const; { return fPadSave; }. void ClearPadSave(); { fPadSave = 0; }. TObject * GetSelected() const; {return fSelected;}. TObject * GetClickSelected() const; {return fClickSelected;}. Int_t GetSelectedX() const; {return fSelectedX;}. Int_t GetSelectedY() const; {return fSelectedY;}. Option_t * GetSelectedOpt() const; {return fSelectedOpt.Data();}. TVirtualPad * GetSelectedPad() const; { return fSelectedPad; }. TVirtualPad * GetClickSelectedPad() const; { return fClickSelectedPad; }. Bool_t GetShowEventStatus() const; { return TestBit(kShowEventStatus); }. Bool_t GetShowToolBar() const; { return TestBit(kShowToolBar); }. Bool_t GetShowEditor() const; { return TestBit(kShowEditor); }. Bool_t GetShowToolTips() const; { return TestBit(kShowToolTips); }. Bool_t GetAutoExec() const; { return TestBit(kAutoExec); }. Size_t GetXsizeUser() const; {return fXsizeUser;}. Size_t GetYsizeUser() const; {return fYsizeUser;}. Size_t GetXsizeReal() const; {return fXsizeReal;}. Size_t GetYsizeReal() const; {return fYsizeReal;}. Int_t GetCanvasID() const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TCanvas.html:45658,Clear,ClearPadSave,45658,root/html532/TCanvas.html,https://root.cern,https://root.cern/root/html532/TCanvas.html,1,['Clear'],['ClearPadSave']
Usability,"d Initialize()Initialize the weights and biases according to the given initialization method.Definition GeneralLayer.h:395; TMVA::DNN::VGeneralLayer::GetBiasesAtMatrix_t & GetBiasesAt(size_t i)Definition GeneralLayer.h:182; TMVA::DNN::VGeneralLayer::SetInputHeightvoid SetInputHeight(size_t inputHeight)Definition GeneralLayer.h:219; TMVA::DNN::VGeneralLayer::fBiasGradientsstd::vector< Matrix_t > fBiasGradientsGradients w.r.t. the bias values of the layer.Definition GeneralLayer.h:75; TMVA::DNN::VGeneralLayer::SetDepthvoid SetDepth(size_t depth)Definition GeneralLayer.h:221; TMVA::DNN::VGeneralLayer::SetExtraLayerParametersvirtual void SetExtraLayerParameters(const std::vector< Matrix_t > &)Definition GeneralLayer.h:212; TMVA::DNN::VGeneralLayer::ReadWeightsFromXMLvirtual void ReadWeightsFromXML(void *parent)=0Read the information and the weights about the layer from XML node.; TMVA::DNN::VGeneralLayer::UpdateBiasGradientsvoid UpdateBiasGradients(const std::vector< Matrix_t > &biasGradients, const Scalar_t learningRate)Updates the bias gradients, given some other weight gradients and learning rate.Definition GeneralLayer.h:448; TMVA::DNN::VGeneralLayer::SetBatchSizevoid SetBatchSize(size_t batchSize)Setters.Definition GeneralLayer.h:217; TMVA::DNN::VGeneralLayer::CopyWeightsvoid CopyWeights(const std::vector< Matrix_t > &otherWeights)Copies the weights provided as an input.Definition GeneralLayer.h:458; TMVA::DNN::VGeneralLayer::fBatchSizesize_t fBatchSizeBatch size used for training and evaluation.Definition GeneralLayer.h:59; TMVA::DNN::VGeneralLayer::AddWeightsXMLTovirtual void AddWeightsXMLTo(void *parent)=0Writes the information and the weights about the layer in an XML node.; TMVA::DNN::VGeneralLayer::UpdateWeightsvoid UpdateWeights(const std::vector< Matrix_t > &weightGradients, const Scalar_t learningRate)Updates the weights, given the gradients and the learning rate,.Definition GeneralLayer.h:418; TMVA::DNN::VGeneralLayer::Matrix_ttypename Architecture_t::Mat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GeneralLayer_8h_source.html:29384,learn,learningRate,29384,doc/master/GeneralLayer_8h_source.html,https://root.cern,https://root.cern/doc/master/GeneralLayer_8h_source.html,2,['learn'],"['learning', 'learningRate']"
Usability,"d Interface; TMVA::Interval Interval definition, continous and discrete; TMVA::KDEKernel Kernel density estimator for PDF smoothing; TMVA::LogInterval Interval definition, continous and discrete; TMVA::MCFitter Fitter using Monte Carlo sampling of parameters; TMVA::MethodANNBase Base class for TMVA ANNs; TMVA::MethodBDT Analysis of Boosted Decision Trees; TMVA::MethodBase Virtual base class for all TMVA method; TMVA::MethodBayesClassifier Friedman's BayesClassifier method; TMVA::MethodBoost ; TMVA::MethodCFMlpANN Interface for Clermond-Ferrand artificial neural network; TMVA::MethodCFMlpANN_Utils Implementation of Clermond-Ferrand artificial neural network; TMVA::MethodCategory ; TMVA::MethodCompositeBase ; TMVA::MethodCuts Multivariate optimisation of signal efficiency; TMVA::MethodDT Analysis of Decision Trees; TMVA::MethodFDA Function Discriminant Analysis; TMVA::MethodFisher Analysis of Fisher discriminant (Fisher or Mahalanobis approach); TMVA::MethodHMatrix H-Matrix method, a simple comparison of chi-squared estimators for signal and background; TMVA::MethodInfo ; TMVA::MethodKNN k Nearest Neighbour classifier; TMVA::MethodLD Linear discriminant analysis; TMVA::MethodLikelihood Likelihood analysis (""non-parametric approach""); TMVA::MethodMLP Multi-layer perceptron implemented specifically for TMVA; TMVA::MethodPDEFoam Multi-dimensional probability density estimator using TFoam (PDE-Foam); TMVA::MethodPDERS Multi-dimensional probability density estimator range search (PDERS) method; TMVA::MethodRuleFit Friedman's RuleFit method; TMVA::MethodSVM Support Vector Machine; TMVA::MethodTMlpANN Implementation of interface for TMultiLayerPerceptron; TMVA::MinuitFitter Fitter using a Genetic Algorithm; TMVA::MinuitWrapper Wrapper around TMinuit; TMVA::MisClassificationError Implementation of the MisClassificationError as separation criterion; TMVA::MsgLogger Ostringstream derivative to redirect and format logging output; TMVA::Node Node for the BinarySearch or Decision T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ClassIndex.html:102814,simpl,simple,102814,root/html604/ClassIndex.html,https://root.cern,https://root.cern/root/html604/ClassIndex.html,2,['simpl'],['simple']
Usability,"d Interface; TMVA::Interval Interval definition, continous and discrete; TMVA::KDEKernel Kernel density estimator for PDF smoothing; TMVA::LogInterval Interval definition, continous and discrete; TMVA::MCFitter Fitter using Monte Carlo sampling of parameters; TMVA::MethodANNBase Base class for TMVA ANNs; TMVA::MethodBDT Analysis of Boosted Decision Trees; TMVA::MethodBase Virtual base class for all TMVA method; TMVA::MethodBayesClassifier Friedman's BayesClassifier method; TMVA::MethodBoost ; TMVA::MethodCFMlpANN Interface for Clermond-Ferrand artificial neural network; TMVA::MethodCFMlpANN_Utils Implementation of Clermond-Ferrand artificial neural network; TMVA::MethodCategory ; TMVA::MethodCompositeBase ; TMVA::MethodCuts Multivariate optimisation of signal efficiency; TMVA::MethodDT Analysis of Decision Trees; TMVA::MethodFDA Function Discriminant Analysis; TMVA::MethodFisher Analysis of Fisher discriminant (Fisher or Mahalanobis approach); TMVA::MethodHMatrix H-Matrix method, a simple comparison of chi-squared estimators for signal and background; TMVA::MethodKNN k Nearest Neighbour classifier; TMVA::MethodLD Linear discriminant analysis; TMVA::MethodLikelihood Likelihood analysis (""non-parametric approach""); TMVA::MethodMLP Multi-layer perceptron implemented specifically for TMVA; TMVA::MethodPDEFoam Multi-dimensional probability density estimator using TFoam (PDE-Foam); TMVA::MethodPDERS Multi-dimensional probability density estimator range search (PDERS) method; TMVA::MethodRuleFit Friedman's RuleFit method; TMVA::MethodSVM Support Vector Machine; TMVA::MethodTMlpANN Implementation of interface for TMultiLayerPerceptron; TMVA::MinuitFitter Fitter using a Genetic Algorithm; TMVA::MinuitWrapper Wrapper around TMinuit; TMVA::MisClassificationError Implementation of the MisClassificationError as separation criterion; TMVA::MsgLogger Ostringstream derivative to redirect and format logging output; TMVA::Node Node for the BinarySearch or Decision Trees; TMVA::Optimiz",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ClassIndex.html:102158,simpl,simple,102158,root/html602/ClassIndex.html,https://root.cern,https://root.cern/root/html602/ClassIndex.html,4,['simpl'],['simple']
Usability,"d Members; Includes; Libraries. Function documentation; TEveTrack(); Default constructor. TEveTrack(TParticle* t, Int_t label, TEveTrackPropagator* prop = 0); Constructor from TParticle. TEveTrack(TEveMCTrack* t, TEveTrackPropagator* prop = 0); Constructor from TEveUtil Monte Carlo track. TEveTrack(TEveRecTrack* t, TEveTrackPropagator* prop = 0); Constructor from TEveUtil reconstructed track. TEveTrack(const TEveTrack& t); Copy constructor. Track paremeters are copied but the; extrapolation is not perfermed so you should still call; MakeTrack() to do that.; If points of 't' are locked, they are cloned. ~TEveTrack(); Destructor. const TGPicture* GetListTreeIcon(Bool_t open = kFALSE); Returns list-tree icon for TEveTrack. void ComputeBBox(); Compute the bounding box of the track. void SetStdTitle(); Set standard track title based on most data-member values. void SetTrackParams(const TEveTrack& t); Copy track parameters from t. Track-propagator is set, too.; PathMarks are cleared - you can copy them via SetPathMarks(t).; If track 't' is locked, you should probably clone its points; over - use TEvePointSet::ClonePoints(t);. void SetPathMarks(const TEveTrack& t); Copy path-marks from t. void SetPropagator(TEveTrackPropagator* prop); Set track's render style.; Reference counts of old and new propagator are updated. void SetAttLineAttMarker(TEveTrackList* tl); Set line and marker attributes from TEveTrackList. void MakeTrack(Bool_t recurse = kTRUE); Calculate track representation based on track data and current; settings of the propagator.; If recurse is true, descend into children. void CopyVizParams(const TEveElement* el); Copy visualization parameters from element el. void WriteVizParams(ostream& out, const TString& var); Write visualization parameters. TClass* ProjectedClass(const TEveProjection* p) const; Virtual from TEveProjectable, return TEveTrackProjected class. void SortPathMarksByTime(); Sort registerd pat-marks by time. void PrintPathMarks(); Print registered ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveTrack.html:30606,clear,cleared,30606,root/html528/TEveTrack.html,https://root.cern,https://root.cern/root/html528/TEveTrack.html,1,['clear'],['cleared']
Usability,"d SetDelta(Double_t delta); Sets Delta - used in stochastic minimisation; (look at the constructor for the complete description; of learning methods and parameters). void SetEtaDecay(Double_t ed); Sets EtaDecay - Eta *= EtaDecay at each epoch; (look at the constructor for the complete description; of learning methods and parameters). void SetTau(Double_t tau); Sets Tau - used in line search; (look at the constructor for the complete description; of learning methods and parameters). void SetReset(Int_t reset); Sets number of epochs between two resets of the; search direction to the steepest descent.; (look at the constructor for the complete description; of learning methods and parameters). void GetEntry(Int_t ) const; Load an entry into the network. void Train(Int_t nEpoch, Option_t* option = ""text"", Double_t minE = 0); Train the network.; nEpoch is the number of iterations.; option can contain:; - ""text"" (simple text output); - ""graph"" (evoluting graphical training curves); - ""update=X"" (step for the text/graph output update); - ""+"" will skip the randomisation and start from the previous values.; - ""current"" (draw in the current canvas); - ""minErrorTrain"" (stop when NN error on the training sample gets below minE; - ""minErrorTest"" (stop when NN error on the test sample gets below minE; All combinations are available. Double_t Result(Int_t event, Int_t index = 0) const; Computes the output for a given event.; Look at the output neuron designed by index. Double_t GetError(Int_t event) const; Error on the output for a given event. Double_t GetError(TMultiLayerPerceptron::EDataSet set) const; Error on the whole dataset. Double_t GetSumSquareError() const; Error on the output for a given event. Double_t GetCrossEntropyBinary() const; Cross entropy error for sigmoid output neurons, for a given event. Double_t GetCrossEntropy() const; Cross entropy error for a softmax output neuron, for a given event. void ComputeDEDw() const; Compute the DEDw = sum on all training events",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMultiLayerPerceptron.html:24900,simpl,simple,24900,root/html528/TMultiLayerPerceptron.html,https://root.cern,https://root.cern/root/html528/TMultiLayerPerceptron.html,10,['simpl'],['simple']
Usability,"d UpdateOffset(); Updates start text offset according GetAlignment() mode,; if cursor is out of frame => scroll the text.; See also SetAlignment() and ScrollByChar(). void SetToolTipText(const char* text, Long_t delayms = 500); Set tool tip text associated with this text entry. The delay is in; milliseconds (minimum 250). To remove tool tip call method with; text = 0. void SetFocus(); Set focus to this text entry. void InsertText(const char* text, Int_t pos); Inserts text at position pos, clears the selection and moves; the cursor to the end of the line.; If necessary the text is truncated to fit MaxLength().; See also GetText(), SetText(), AppendText(), RemoveText(). void AppendText(const char* text); Appends text to the end of text entry, clears the selection; and moves the cursor to the end of the line.; If necessary the text is truncated to fit MaxLength().; See also GetText(), InsertText(), SetText(), RemoveText(). void RemoveText(Int_t start, Int_t end); Removes text at the range, clears the selection and moves; the cursor to the end of the line.; See also GetText(), InsertText(), SetText(), AppendText(). void SetFont(FontStruct_t font, Bool_t local = kTRUE); Changes text font.; If local is kTRUE font is changed locally. void SetFont(const char* fontName, Bool_t local = kTRUE); Changes text font specified by name.; If local is kTRUE font is changed locally. void SetFont(TGFont* font, Bool_t local = kTRUE); Changes text font specified by pointer to TGFont object.; If local is kTRUE font is changed locally. void SetTextColor(Pixel_t color, Bool_t local = kTRUE); Changes text color.; If local is true color is changed locally. void SetTextColor(TColor* color, Bool_t local = kTRUE); Changes text color.; If local is true color is changed locally. FontStruct_t GetDefaultFontStruct(); Return default font structure in use. const TGGC & GetDefaultGC(); Return default graphics context. const TGGC & GetDefaultSelectedGC(); Return selection graphics context. const TGGC & Ge",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGTextEntry.html:37288,clear,clears,37288,root/html528/TGTextEntry.html,https://root.cern,https://root.cern/root/html528/TGTextEntry.html,10,['clear'],['clears']
Usability,"d a color integer for the color whose color components; are given by pRef. const char * GetHref(int x, int y, const char** target = 0); This routine searchs for a hyperlink beneath the coordinates x,y; and returns a pointer to the HREF for that hyperlink. The text; is held in one of the markup argv[] fields of the <a> markup. int ElementCoords(TGHtmlElement* p, int i, int pct, int* coords); Return coordinates of item. TGHtmlElement * AttrElem(const char* name, char* value); Returns html element matching attribute name and value. void UpdateSelection(int forceUpdate); Given the selection end-points in fSelBegin and fSelEnd, recompute; pSelBeginBlock and fPSelEndBlock, then call UpdateSelectionDisplay(); to update the display. This routine should be called whenever the selection changes or; whenever the set of TGHtmlBlock structures change. void UpdateSelectionDisplay(); The fPSelStartBlock and fPSelEndBlock values have been changed.; This routine's job is to loop over all TGHtmlBlocks and either; set or clear the HTML_Selected bits in the .fFlags field; as appropriate. For every TGHtmlBlock where the bit changes,; mark that block for redrawing. void LostSelection(); Clear selection. int SelectionSet(const char* startIx, const char* endIx); Set selection. void UpdateInsert(); Recompute the position of the insertion cursor based on the; position in fIns. int SetInsert(const char* insIx); Set the position of the insertion cursor. void SavePrimitive(ostream& out, Option_t* = """"); Save a html widget as a C++ statement(s) on output stream out. Bool_t ProcessMessage(Long_t , Long_t , Long_t ). int GetTableRelief() const; { return fTableRelief; }. int GetRuleRelief() const; { return fRuleRelief; }. int GetRulePadding() const; { return fRulePadding; }. const char * GetBaseUri() const; { return fZBase; }. char * ResolveUri(const char* uri); User function to resolve URIs. TImage * LoadImage(const char* uri, int w = 0, int h = 0); User function to get an image from a URL. int Is",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGHtml.html:38585,clear,clear,38585,root/html528/TGHtml.html,https://root.cern,https://root.cern/root/html528/TGHtml.html,6,['clear'],['clear']
Usability,"d a color integer for the color whose color components; are given by pRef. const char * GetHref(int x, int y, const char** target = 0); This routine searchs for a hyperlink beneath the coordinates x,y; and returns a pointer to the HREF for that hyperlink. The text; is held in one of the markup argv[] fields of the <a> markup. int ElementCoords(TGHtmlElement* p, int i, int pct, int* coords); Return coordinates of item. TGHtmlElement * AttrElem(const char* name, char* value); Returns html element matching attribute name and value. void UpdateSelection(int forceUpdate); Given the selection end-points in fSelBegin and fSelEnd, recompute; pSelBeginBlock and fPSelEndBlock, then call UpdateSelectionDisplay(); to update the display. This routine should be called whenever the selection changes or; whenever the set of TGHtmlBlock structures change. void UpdateSelectionDisplay(); The fPSelStartBlock and fPSelEndBlock values have been changed.; This routine's job is to loop over all TGHtmlBlocks and either; set or clear the HTML_Selected bits in the .fFlags field; as appropriate. For every TGHtmlBlock where the bit changes,; mark that block for redrawing. void LostSelection(); Clear selection. int SelectionSet(const char* startIx, const char* endIx); Set selection. void UpdateInsert(); Recompute the position of the insertion cursor based on the; position in fIns. int SetInsert(const char* insIx); Set the position of the insertion cursor. void SavePrimitive(ostream& out, Option_t* = """"); Save a html widget as a C++ statement(s) on output stream out. TGHtmlTextElement & operator=(const TGHtml& ). TGHtml(const TGWindow* p, int w, int h, int id = -1). Bool_t ProcessMessage(Long_t , Long_t , Long_t ). int GetTableRelief() const; { return fTableRelief; }. int GetRuleRelief() const; { return fRuleRelief; }. int GetRulePadding() const; { return fRulePadding; }. const char * GetBaseUri() const; { return fZBase; }. char * ResolveUri(const char* uri); User function to resolve URIs. TImage",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGHtml.html:39770,clear,clear,39770,root/html602/TGHtml.html,https://root.cern,https://root.cern/root/html602/TGHtml.html,4,['clear'],['clear']
Usability,"d buffer is created to hold the compressed buffer.; Reservation of the corresponding space in the file by looking in the TFree list of free blocks of the file.; The buffer is written to the file. Bufsize can be given to force a given buffer size to write this object. By default, the buffersize will be taken from the average buffer size of all objects written to the current file so far.; If a name is specified, it will be the name of the key. If name is not given, the name of the key will be the name as returned by GetName().; The option can be a combination of: kSingleKey, kOverwrite or kWriteDelete Using the kOverwrite option a previous key with the same name is overwritten. The previous key is deleted before writing the new object. Using the kWriteDelete option a previous key with the same name is deleted only after the new object has been written. This option is safer than kOverwrite but it is slower. NOTE: Neither kOverwrite nor kWriteDelete reduces the size of a TFile– the space is simply freed up to be overwritten; in the case of a TTree, it is more complicated. If one opens a TTree, appends some entries, then writes it out, the behaviour is effectively the same. If, however, one creates a new TTree and writes it out in this way, only the metadata is replaced, effectively making the old data invisible without deleting it. TTree::Delete() can be used to mark all disk space occupied by a TTree as free before overwriting its metadata this way. The kSingleKey option is only used by TCollection::Write() to write a container with a single key instead of each object in the container with its own key.; An object is read from the file into memory via TKey::Read() or via TObject::Read().; The function returns the total number of bytes written to the file. It returns 0 if the object cannot be written. ; Reimplemented from TObject.; Definition at line 69 of file TBuffer.h. ◆ Write() [2/2]. Int_t TBuffer::Write ; (; const char * ; name, . Int_t ; option, . Int_t ; bufsize .",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBuffer.html:58911,simpl,simply,58911,doc/master/classTBuffer.html,https://root.cern,https://root.cern/doc/master/classTBuffer.html,1,['simpl'],['simply']
Usability,"d buffer is created to hold the compressed buffer.; Reservation of the corresponding space in the file by looking in the TFree list of free blocks of the file.; The buffer is written to the file. Bufsize can be given to force a given buffer size to write this object. By default, the buffersize will be taken from the average buffer size of all objects written to the current file so far.; If a name is specified, it will be the name of the key. If name is not given, the name of the key will be the name as returned by GetName().; The option can be a combination of: kSingleKey, kOverwrite or kWriteDelete Using the kOverwrite option a previous key with the same name is overwritten. The previous key is deleted before writing the new object. Using the kWriteDelete option a previous key with the same name is deleted only after the new object has been written. This option is safer than kOverwrite but it is slower. NOTE: Neither kOverwrite nor kWriteDelete reduces the size of a TFile– the space is simply freed up to be overwritten; in the case of a TTree, it is more complicated. If one opens a TTree, appends some entries, then writes it out, the behaviour is effectively the same. If, however, one creates a new TTree and writes it out in this way, only the metadata is replaced, effectively making the old data invisible without deleting it. TTree::Delete() can be used to mark all disk space occupied by a TTree as free before overwriting its metadata this way. The kSingleKey option is only used by TCollection::Write() to write a container with a single key instead of each object in the container with its own key.; An object is read from the file into memory via TKey::Read() or via TObject::Read().; The function returns the total number of bytes written to the file. It returns 0 if the object cannot be written. ; Reimplemented from TObject.; Reimplemented in TSQLFile, TXMLFile, TFile, TParallelMergingFile, and TDirectoryFile.; Definition at line 265 of file TDirectory.h. ◆ Write() ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTDirectory.html:52375,simpl,simply,52375,doc/v632/classTDirectory.html,https://root.cern,https://root.cern/doc/v632/classTDirectory.html,2,['simpl'],['simply']
Usability,"d buffer is created to hold the compressed buffer.; Reservation of the corresponding space in the file by looking in the TFree list of free blocks of the file.; The buffer is written to the file. Bufsize can be given to force a given buffer size to write this object. By default, the buffersize will be taken from the average buffer size of all objects written to the current file so far.; If a name is specified, it will be the name of the key. If name is not given, the name of the key will be the name as returned by GetName().; The option can be a combination of: kSingleKey, kOverwrite or kWriteDelete Using the kOverwrite option a previous key with the same name is overwritten. The previous key is deleted before writing the new object. Using the kWriteDelete option a previous key with the same name is deleted only after the new object has been written. This option is safer than kOverwrite but it is slower. NOTE: Neither kOverwrite nor kWriteDelete reduces the size of a TFile– the space is simply freed up to be overwritten; in the case of a TTree, it is more complicated. If one opens a TTree, appends some entries, then writes it out, the behaviour is effectively the same. If, however, one creates a new TTree and writes it out in this way, only the metadata is replaced, effectively making the old data invisible without deleting it. TTree::Delete() can be used to mark all disk space occupied by a TTree as free before overwriting its metadata this way. The kSingleKey option is only used by TCollection::Write() to write a container with a single key instead of each object in the container with its own key.; An object is read from the file into memory via TKey::Read() or via TObject::Read().; The function returns the total number of bytes written to the file. It returns 0 if the object cannot be written. ; Reimplemented in TSQLFile, TXMLFile, TDirectory, TBuffer, TFile, TParallelMergingFile, TDirectoryFile, TCollection, TMap, and TTree.; Definition at line 858 of file TObjec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTObject.html:119209,simpl,simply,119209,doc/v632/classTObject.html,https://root.cern,https://root.cern/doc/v632/classTObject.html,1,['simpl'],['simply']
Usability,"d buffer is created to hold the compressed buffer.; Reservation of the corresponding space in the file by looking in the TFree list of free blocks of the file.; The buffer is written to the file. Bufsize can be given to force a given buffer size to write this object. By default, the buffersize will be taken from the average buffer size of all objects written to the current file so far.; If a name is specified, it will be the name of the key. If name is not given, the name of the key will be the name as returned by GetName().; The option can be a combination of: kSingleKey, kOverwrite or kWriteDelete Using the kOverwrite option a previous key with the same name is overwritten. The previous key is deleted before writing the new object. Using the kWriteDelete option a previous key with the same name is deleted only after the new object has been written. This option is safer than kOverwrite but it is slower. NOTE: Neither kOverwrite nor kWriteDelete reduces the size of a TFile– the space is simply freed up to be overwritten; in the case of a TTree, it is more complicated. If one opens a TTree, appends some entries, then writes it out, the behaviour is effectively the same. If, however, one creates a new TTree and writes it out in this way, only the metadata is replaced, effectively making the old data invisible without deleting it. TTree::Delete() can be used to mark all disk space occupied by a TTree as free before overwriting its metadata this way. The kSingleKey option is only used by TCollection::Write() to write a container with a single key instead of each object in the container with its own key.; An object is read from the file into memory via TKey::Read() or via TObject::Read().; The function returns the total number of bytes written to the file. It returns 0 if the object cannot be written. ; Reimplemented in TSQLFile, TXMLFile, TDirectory, TBuffer, TFile, TParallelMergingFile, TDirectoryFile, TCollection, TMap, and TTree.; Definition at line 864 of file TObjec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTObject.html:118210,simpl,simply,118210,doc/master/classTObject.html,https://root.cern,https://root.cern/doc/master/classTObject.html,1,['simpl'],['simply']
Usability,"d by a warning message isued by M when running into troubles. Problems can be:. a bug in M; an error in the \(\mbox{FCN}\); a highly difficult problem (usually strong correlations among parameters); floating–point precision. 4.5 The output from minimization; 4.5.1 The FunctionMinimum; The output of the minimizers is the FunctionMinimum. The FunctionMinimum contains the result of the minimization in both internal parameter representation and external parameter representation.; 4.5.2 User representable format: MnUserParameterState; On request, the result of the minimzation is transformed into a user representable format for parameters and errors, the MnUserParameterState.; 4.5.3 Access values, errors, covariance; The result can be accessed via methods like MnUserParameterState::value(unsigned int n) and MnUserParameterState::error(unsigned int n), where \(n\) is the index of the parameter in the list of parameters defined by the user.; 4.5.4 Printout of the result; The FunctionMinimum can be printed on the output simply via std::cout. It will print both the internal and external state, that is parameters, errors and the covariance matrix (if available). It also tells the user if M did converge or not by issueing an appropriate message. If a covariance matrix is available, the global correlation coefficients are printed as well.; 4.5.5 Global correlation coefficients; The global correlation coefficient for parameter \(n\) is a number between zero and one which gives the correlation between parameter \(n\) and that linear combination of all other parameters which is most strongly correlated with \(n\).; 5 M application programming interface (API); [api:api]; 5.1 FunctionMinimum; [api:fm] The FunctionMinimum is the output of the minimizers and contains the minimzation result. The state at the minimum is available both in internal and external representations. For the external representations the return methods. FunctionMinimum::userState(),; FunctionMinimum::userParamete",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:41607,simpl,simply,41607,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,2,['simpl'],['simply']
Usability,"d cloning of p.d.f. into a simultaneous p.d.f; RooSimWSTool::BuildConfig Build configuration object for RooSimWSTool; RooSimWSTool::MultiBuildConfig Build configuration object for RooSimWSTool with multiple prototype p.d.f.; RooSimWSTool::ObjBuildConfig Validated RooSimWSTool build configuration; RooSimWSTool::ObjSplitRule Validated RooSimWSTool split rule; RooSimWSTool::SplitRule Split rule specification for prototype p.d.f; RooSimultaneous Simultaneous operator p.d.f, functions like C++ 'switch()' on input p.d.fs operating on index category5A; RooStats ; RooStats::AcceptanceRegion A simple class for acceptance regions used for ConfidenceBelt; RooStats::BernsteinCorrection A utility to add polynomial corrrection terms to a model to improve the description of data.; RooStats::CombinedCalculator A base class that is for tools that can be both HypoTestCalculators and IntervalCalculators; RooStats::ConfInterval Interface for Confidence Intervals; RooStats::ConfidenceBelt A confidence belt for the Neyman Construction; RooStats::DebuggingSampler A simple implementation of the DistributionCreator interface; RooStats::DebuggingTestStat A concrete implementation of the TestStatistic interface, useful for debugging.; RooStats::FeldmanCousins Interface for tools setting limits (producing confidence intervals); RooStats::HybridCalculator Hypothesis test calculator using a Bayesian-frequentist hybrid method; RooStats::HybridPlot Provides the plots for an HybridResult; RooStats::HybridResult Class containing the results of the HybridCalculator; RooStats::HypoTestCalculator Interface for tools doing hypothesis tests; RooStats::HypoTestResult Base class to represent results of a hypothesis test; RooStats::IntervalCalculator Interface for tools setting limits (producing confidence intervals); RooStats::LikelihoodInterval Concrete implementation of a ConfInterval based on a likelihood ratio; RooStats::LikelihoodIntervalPlot Class containing the results of the IntervalCalculator; RooS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html524/ClassIndex.html:42028,simpl,simple,42028,root/html524/ClassIndex.html,https://root.cern,https://root.cern/root/html524/ClassIndex.html,1,['simpl'],['simple']
