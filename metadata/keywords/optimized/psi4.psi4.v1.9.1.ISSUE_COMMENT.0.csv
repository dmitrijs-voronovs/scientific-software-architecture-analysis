quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,wiki,url,total_similar,target_keywords,target_matched_words
Availability,"			 <; 												 <; Filatov & Thiel correlation									 <; M. Filatov and W. Thiel, Int. J. Quantum Chem. 62, 603 (1997)				 <; M. Filatov and W. Thiel, Mol. Phys. 91, 847 (1997)						 <; GGA = TRUE									 <; Meta = FALSE									 <; LRC = FALSE									 <; Alpha = 1.000000E+00									 <; Omega = 0.000000E+00									 <. => Molecular Quadrature <=										 => Molecular Quadrature <=. Radial Scheme = TREUTLER								 Radial Scheme = TREUTLER; Pruning Scheme = NONE								 Pruning Scheme = NONE; Nuclear Scheme = TREUTLER								 Nuclear Scheme = TREUTLER. BS radius alpha = 1								 BS radius alpha = 1; Pruning alpha = 1								 Pruning alpha = 1; Radial Points = 99							 |	 Radial Points = 75; Spherical Points = 770								 Spherical Points = 770; Total Points = 69300							 |	 Total Points = 53130; Total Blocks = 570							 |	 Total Blocks = 475; Max Points = 256							 |	 Max Points = 255; Max Functions = 14								 Max Functions = 14; Weights Tolerance = 1.00E-15								 Weights Tolerance = 1.00E-15. ==> Integral Setup <==										 ==> Integral Setup <==. ==> DirectJK: Integral-Direct J/K Matrices <==							 ==> DirectJK: Integral-Direct J/K Matrices <==. J tasked: Yes									 J tasked: Yes; K tasked: No									 K tasked: No; wK tasked: No									 wK tasked: No; Integrals threads: 1									 Integrals threads: 1; Schwarz Cutoff: 1E-12									 Schwarz Cutoff: 1E-12. Cached 100.0% of DFT collocation blocks in 0.028 [GiB].					 |	 Cached 100.0% of DFT collocation blocks in 0.021 [GiB]. Minimum eigenvalue in the overlap matrix is 1.9330486283E-01.						 Minimum eigenvalue in the overlap matrix is 1.9330486283E-01.; Reciprocal condition number of the overlap matrix is 1.1340153394E-01.				 Reciprocal condition number of the overlap matrix is 1.1340153394E-01.; Using symmetric orthogonalization.									 Using symmetric orthogonalization. ==> Pre-Iterations <==										 ==> Pre-Iterations <==. SCF Guess: Core (One-Electron) Hamiltonian.								 SCF Guess: ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-755088124:6384,Toler,Tolerance,6384,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-755088124,1,['Toler'],['Tolerance']
Availability," 	@rpath/libiomp5.dylib (compatibility version 5.0.0, current version 5.0.0); 	/usr/local/opt/gcc@8/lib/gcc/8/libgomp.1.dylib (compatibility version 2.0.0, current version 2.0.0); 	/usr/local/opt/gcc@8/lib/gcc/8/libstdc++.6.dylib (compatibility version 7.0.0, current version 7.25.0); 	/usr/local/lib/gcc/8/libgcc_s.1.dylib (compatibility version 1.0.0, current version 1.0.0); ```. As you said, it seems ```gcc``` tries to impose ```gomp```. How can I bypass it ?; Because I still have the error:; ```; E ImportError: dlopen(/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so, 2): Symbol not found: __gfortran_concat_string; E Referenced from: /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so; E Expected in: flat namespace; E in /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so; ```. which (I think) is due to that right ?. PS: ```echo $DYLD_LIBRARY_PATH``` gives ```/opt/intel/lib``` only. And in case it helps, here is the output of my configuration step, which seems correct:; ```cmake -H. -Bobjdir -DOpenMP_LIBRARY_DIRS=/opt/intel/lib```; ```; -- The C compiler identification is GNU 8.3.0; -- The CXX compiler identification is GNU 8.3.0; -- Checking whether C compiler has -isysroot; -- Checking whether C compiler has -isysroot - yes; -- Checking whether C compiler supports OSX deployment target flag; -- Checking whether C compiler supports OSX deployment target flag - yes; -- Check for working C compiler: /usr/local/bin/gcc-8; -- Check for working C compiler: /usr/local/bin/gcc-8 -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Checking whether CXX compiler has -isysroot; -- Checking whether CXX compiler has -isysroot - yes; -- Checking whether CXX compiler supports OSX deployment target flag; -- Checking whether CXX compiler s",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308:2417,echo,echo,2417,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308,1,['echo'],['echo']
Availability," ""void __cdecl psi::C_DSPR(char,int,double,double *,int,double *)"" (?C_DSPR@psi@@YAXDHNPEANH0@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dspr2，该符号在函数 ""void __cdecl psi::C_DSPR2(char,int,double,double *,int,double *,int,double *)"" (?C_DSPR2@psi@@YAXDHNPEANH0H0@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dsymm，该符号在函数 ""void __cdecl psi::C_DSYMM(char,char,int,int,double,double *,int,double *,int,double,double *,int)"" (?C_DSYMM@psi@@YAXDDHHNPEANH0HN0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dsymv，该符号在函数 ""void __cdecl psi::C_DSYMV(char,int,double,double *,int,double *,int,double,double *,int)"" (?C_DSYMV@psi@@YAXDHNPEANH0HN0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dsyr，该符号在函数 ""void __cdecl psi::C_DSYR(char,int,double,double *,int,double *,int)"" (?C_DSYR@psi@@YAXDHNPEANH0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dsyr2，该符号在函数 ""void __cdecl psi::C_DSYR2(char,int,double,double *,int,double *,int,double *,int)"" (?C_DSYR2@psi@@YAXDHNPEANH0H0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dsyr2k，该符号在函数 ""void __cdecl psi::C_DSYR2K(char,char,int,int,double,double *,int,double *,int,double,double *,int)"" (?C_DSYR2K@psi@@YAXDDHHNPEANH0HN0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dsyrk，该符号在函数 ""void __cdecl psi::C_DSYRK(char,char,int,int,double,double *,int,double,double *,int)"" (?C_DSYRK@psi@@YAXDDHHNPEANHN0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dtbmv，该符号在函数 ""void __cdecl psi::C_DTBMV(char,char,char,int,int,double *,int,double *,int)"" (?C_DTBMV@psi@@YAXDDDHHPEANH0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dtbsv，该符号在函数 ""void __cdecl psi::C_DTBSV(char,char,char,int,int,double *,int,double *,int)"" (?C_DTBSV@psi@@YAXDDDHHPEANH0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dtpmv，该符号在函数 ""void __cdecl psi::C_DTPMV(char,char,char,int,double *",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:12900,error,error,12900,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability," (6 tests); dfomp2 = 6.63 sec*proc (1 test); dfomp3 = 66.77 sec*proc (2 tests); dft = 110.67 sec*proc (5 tests); dftd3 = 50.87 sec*proc (1 test); dftd4 = 138.41 sec*proc (2 tests); direct-scf = 4.26 sec*proc (1 test); eom = 26.13 sec*proc (2 tests); extern = 145.89 sec*proc (6 tests); fcidump = 3.94 sec*proc (1 test); findif = 217.30 sec*proc (11 tests); fnocc = 214.81 sec*proc (4 tests); freq = 119.90 sec*proc (9 tests); fsapt = 680.95 sec*proc (7 tests); gradient = 7.40 sec*proc (2 tests); json = 6.72 sec*proc (2 tests); mcscf = 2.04 sec*proc (1 test); minitests = 10.99 sec*proc (2 tests); mints = 14.50 sec*proc (6 tests); misc = 48.60 sec*proc (8 tests); mp2 = 11.54 sec*proc (3 tests); nbody = 140.71 sec*proc (2 tests); noc1 = 1576.77 sec*proc (45 tests); numpy = 1.88 sec*proc (1 test); olccd = 11.77 sec*proc (2 tests); omp = 19.01 sec*proc (4 tests); opt = 18.56 sec*proc (3 tests); properties = 234.60 sec*proc (11 tests); psi = 7147.73 sec*proc (184 tests); psi4numpy = 11.43 sec*proc (4 tests); psimrcc = 19.16 sec*proc (5 tests); python = 164.19 sec*proc (10 tests); pywrap = 102.12 sec*proc (5 tests); quicktests = 7213.94 sec*proc (185 tests); sapt = 2255.37 sec*proc (14 tests); scf = 2018.25 sec*proc (36 tests); smoketests = 1345.56 sec*proc (16 tests); stability = 14.22 sec*proc (3 tests); tdscf = 352.79 sec*proc (2 tests); tutorial = 24.08 sec*proc (4 tests); uhf = 3.31 sec*proc (1 test); x2c = 24.82 sec*proc (4 tests). Total Test time (real) = 7214.27 sec. The following tests FAILED:; 192 - dft-vv10 (Failed); 197 - dft-dens-cut (Failed); 210 - fsapt-terms (Failed); 213 - fsapt-ext-abc (Failed); 214 - fsapt-ext-abc2 (Failed); 215 - fsapt-ext-abc-au (Failed); 452 - dft-smoke (Failed); 525 - fsaptd-terms (Failed); 527 - dftd4-r2scan (Failed); Errors while running CTest; Output from these tests are in: /gpfs/alpine2/scratch/jslj23/chm205/psi4/build/Testing/Temporary/LastTest.log; Use ""--rerun-failed --output-on-failure"" to re-run the failed cases verbosely.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223#issuecomment-2373056930:20013,Error,Errors,20013,https://psicode.org,https://github.com/psi4/psi4/issues/3223#issuecomment-2373056930,2,"['Error', 'failure']","['Errors', 'failure']"
Availability," (?C_DPTCON@psi@@YAHHPEAN0N00@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpteqr，该符号在函数 ""int __cdecl psi::C_DPTEQR(char,int,double *,double *,double *,int,double *)"" (?C_DPTEQR@psi@@YAHDHPEAN00H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dptrfs，该符号在函数 ""int __cdecl psi::C_DPTRFS(int,int,double *,double *,double *,double *,double *,int,double *,int,double *,double *,double *)"" (?C_DPTRFS@psi@@YAHHHPEAN0000H0H000@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dptsv，该符号在函数 ""int __cdecl psi::C_DPTSV(int,int,double *,double *,double *,int)"" (?C_DPTSV@psi@@YAHHHPEAN00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dptsvx，该符号在函数 ""int __cdecl psi::C_DPTSVX(char,int,int,double *,double *,double *,double *,double *,int,double *,int,double *,double *,double *,double *)"" (?C_DPTSVX@psi@@YAHDHHPEAN0000H0H0000@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpttrf，该符号在函数 ""int __cdecl psi::C_DPTTRF(int,double *,double *)"" (?C_DPTTRF@psi@@YAHHPEAN0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpttrs，该符号在函数 ""int __cdecl psi::C_DPTTRS(int,int,double *,double *,double *,int)"" (?C_DPTTRS@psi@@YAHHHPEAN00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsbev，该符号在函数 ""int __cdecl psi::C_DSBEV(char,char,int,int,double *,int,double *,double *,int,double *)"" (?C_DSBEV@psi@@YAHDDHHPEANH00H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsbevd，该符号在函数 ""int __cdecl psi::C_DSBEVD(char,char,int,int,double *,int,double *,double *,int,double *,int,int *,int)"" (?C_DSBEVD@psi@@YAHDDHHPEANH00H0HPEAHH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsbevx，该符号在函数 ""int __cdecl psi::C_DSBEVX(char,char,char,int,int,double *,int,double *,int,double,double,int,int,double,int *,double *,double *,int,double *,int *,int *)"" (?C_DSBEVX@psi@@YAHDDDHHPEANH0HNNHHNPEAH00H011@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:37869,error,error,37869,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability," *,double *,double *,double *)"" (?C_DPTSVX@psi@@YAHDHHPEAN0000H0H0000@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpttrf，该符号在函数 ""int __cdecl psi::C_DPTTRF(int,double *,double *)"" (?C_DPTTRF@psi@@YAHHPEAN0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpttrs，该符号在函数 ""int __cdecl psi::C_DPTTRS(int,int,double *,double *,double *,int)"" (?C_DPTTRS@psi@@YAHHHPEAN00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsbev，该符号在函数 ""int __cdecl psi::C_DSBEV(char,char,int,int,double *,int,double *,double *,int,double *)"" (?C_DSBEV@psi@@YAHDDHHPEANH00H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsbevd，该符号在函数 ""int __cdecl psi::C_DSBEVD(char,char,int,int,double *,int,double *,double *,int,double *,int,int *,int)"" (?C_DSBEVD@psi@@YAHDDHHPEANH00H0HPEAHH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsbevx，该符号在函数 ""int __cdecl psi::C_DSBEVX(char,char,char,int,int,double *,int,double *,int,double,double,int,int,double,int *,double *,double *,int,double *,int *,int *)"" (?C_DSBEVX@psi@@YAHDDDHHPEANH0HNNHHNPEAH00H011@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsbgst，该符号在函数 ""int __cdecl psi::C_DSBGST(char,char,int,int,int,double *,int,double *,int,double *,int,double *)"" (?C_DSBGST@psi@@YAHDDHHHPEANH0H0H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsbgv，该符号在函数 ""int __cdecl psi::C_DSBGV(char,char,int,int,int,double *,int,double *,int,double *,double *,int,double *)"" (?C_DSBGV@psi@@YAHDDHHHPEANH0H00H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsbgvd，该符号在函数 ""int __cdecl psi::C_DSBGVD(char,char,int,int,int,double *,int,double *,int,double *,double *,int,double *,int,int *,int)"" (?C_DSBGVD@psi@@YAHDDHHHPEANH0H00H0HPEAHH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsbgvx，该符号在函数 ""int __cdecl psi::C_DSBGVX(char,char,char,int,int,int,double *,int,double *,int,double *,int,double,double,int,int,doubl",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:38632,error,error,38632,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability," *,double *,int *)"" (?C_DSYRFS@psi@@YAHDHHPEANH0HPEAH0H0H0001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsysv，该符号在函数 ""int __cdecl psi::C_DSYSV(char,int,int,double *,int,int *,double *,int,double *,int)"" (?C_DSYSV@psi@@YAHDHHPEANHPEAH0H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsysvx，该符号在函数 ""int __cdecl psi::C_DSYSVX(char,char,int,int,double *,int,double *,int,int *,double *,int,double *,int,double *)"" (?C_DSYSVX@psi@@YAHDDHHPEANH0HPEAH0H0H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsytrd，该符号在函数 ""int __cdecl psi::C_DSYTRD(char,int,double *,int,double *,double *,double *,double *,int)"" (?C_DSYTRD@psi@@YAHDHPEANH0000H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsytrf，该符号在函数 ""int __cdecl psi::C_DSYTRF(char,int,double *,int,int *,double *,int)"" (?C_DSYTRF@psi@@YAHDHPEANHPEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsytri，该符号在函数 ""int __cdecl psi::C_DSYTRI(char,int,double *,int,int *,double *)"" (?C_DSYTRI@psi@@YAHDHPEANHPEAH0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsytrs，该符号在函数 ""int __cdecl psi::C_DSYTRS(char,int,int,double *,int,int *,double *,int)"" (?C_DSYTRS@psi@@YAHDHHPEANHPEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtbcon，该符号在函数 ""int __cdecl psi::C_DTBCON(char,char,char,int,int,double *,int,double *,double *,int *)"" (?C_DTBCON@psi@@YAHDDDHHPEANH00PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtbrfs，该符号在函数 ""int __cdecl psi::C_DTBRFS(char,char,char,int,int,int,double *,int,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DTBRFS@psi@@YAHDDDHHHPEANH0H0H000PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtbtrs，该符号在函数 ""int __cdecl psi::C_DTBTRS(char,char,char,int,int,int,double *,int,double *,int)"" (?C_DTBTRS@psi@@YAHDDDHHHPEANH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtgevc，该符号在函数 ""int __cdecl ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:48805,error,error,48805,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability," -> dftd3rec@io -> jobrec@io (returned) process. Input Fields; ------------. Optional Input Fields; ---------------------. Output Fields; -------------. Optional Output Fields; ----------------------. """"""; if verbose > 2:; print('[1] {} JOBREC PRE-PLANT (j@i) <<<'.format('DFTD3')); pp.pprint(jobrec); print('>>>'). dftd3rec = dftd3_plant(jobrec). # test json roundtrip; jdftd3rec = json.dumps(dftd3rec); dftd3rec = json.loads(jdftd3rec). if verbose > 3:; print('[2] {}REC PRE-SUBPROCESS (m@i) <<<'.format('DFTD3')); pp.pprint(dftd3rec); print('>>>\n'). dftd3_subprocess(dftd3rec) # updates dftd3rec. if verbose > 3:; print('[3] {}REC POST-SUBPROCESS (m@io) <<<'.format('DFTD3')); pp.pprint(dftd3rec); print('>>>\n'). > dftd3_harvest(jobrec, dftd3rec) # updates jobrec. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:183:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. jobrec = {'driver': 'energy', 'error': ""Dftd3Error('Unsuccessful run. Possibly -D variant not available in dftd3 version.',)"", ...ule': {'elbl': ['', '', '', ''], 'elea': [12, 12, 1, 1], 'elem': ['C', 'C', 'H', 'H'], 'elez': [6, 6, 1, 1], ...}, ...}; dftd3rec = {'command': ['dftd3', 'dftd3_geometry.xyz'], 'dashlevel': 'd3bj', 'dashparams': {'a1': 0.486, 'a2': 4.5, 's6': 1.0, 's8': 0.0}, 'dashparams_citation': False, ...}. def dftd3_harvest(jobrec, dftd3rec):; """"""Process raw results from read-only `dftd3rec` into QCAspect; fields in returned `jobrec`: jobrec@i, dftd3rec@io -> jobrec@io. Parameters; ----------; jobrec : dict; Nested dictionary with input specifications for DFTD3 in generic; QC terms.; dftd3rec : dict; Nested dictionary with input specification and output collection; from DFTD3 in program-specific commands, files, & output capture. Returns; -------; jobrec : dict; Nested dictionary with input specification and output collection; from DFTD3 in generic QC terms. """"""; try:; jobrec['molecule']['real']; jobrec",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:14475,error,error,14475,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846,1,['error'],['error']
Availability," 0.000; > C 0.698 1.209 0.000; > C -0.698 1.209 0.000; > C -1.396 0.000 0.000; > C -0.698 -1.209 0.000; > C 0.698 -1.209 0.000; > H 1.240 2.147 0.000; > H -1.240 2.147 0.000; > H -2.479 0.000 0.000; > H -1.240 -2.147 0.000; > H 1.240 -2.147 0.000; > C 2.798 0.000 0.000; > C 4.020 0.000 0.000; > C 5.422 0.000 0.000; > C 8.214 0.000 0.000; > C 7.516 1.209 0.000; > C 6.120 1.209 0.000; > C 6.120 -1.209 0.000; > C 7.516 -1.209 0.000; > H 8.058 2.147 0.000; > H 5.578 2.147 0.000; > H 9.297 0.000 0.000; > H 5.578 -2.147 0.000; > H 8.058 -2.147 0.000; > ; > symmetry c1; > units angstrom; > }; > ; > set globals {; > reference rhf; > basis cc-pvdz; > #freeze_core true; > scf_type out_of_core; > dipmom true; > num_roots 4; > }; > ; > set scf d_convergence 10; > set detci e_convergence 8; > ; > ## thisenergy = energy('fci'); > ; > I am getting this erorr and i am not able to correct this. any one can; > help me ?; > ; > PSIO_ERROR: unit = 41, errval = 12; > PSIO_ERROR: 12 (error writing to file); > Traceback (most recent call last):; > File """", line 58, in; > File ""/usr/local/psi4/share/psi/python/driver.py"", line 549, in energy; > procedures['energy']lowername http://lowername,%20**kwargs; > File ""/usr/local/psi4/share/psi/python/proc.py"", line 1481, in run_detci; > psi4.transqt2(); > RuntimeError: PSIO Error; > file: /home/psi4.0b5/src/lib/libpsio/error.cc; > line: 116; > ; > Output File; > ; > ---; > ; > ```; > PSI4: An Open-Source Ab Initio Electronic Structure Package; > PSI 4.0.0-beta5 Driver; > ```; > ; > J. M. Turney, A. C. Simmonett, R. M. Parrish, E. G. Hohenstein,; > F. A. Evangelista, J. T. Fermann, B. J. Mintz, L. A. Burns, J. J. Wilke,; > M. L. Abrams, N. J. Russ, M. L. Leininger, C. L. Janssen, E. T. Seidl,; > W. D. Allen, H. F. Schaefer, R. A. King, E. F. Valeev, C. D. Sherrill,; > and T. D. Crawford, WIREs Comput. Mol. Sci., (2011) (doi: 10.1002/wcms.93); > ; > ```; > Additional Contributions by; > ```; > ; > ## A. E. DePrince, M. Saitow, U. Bozkaya, A. Yu. Sok",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/61#issuecomment-58650322:1778,error,error,1778,https://psicode.org,https://github.com/psi4/psi4/issues/61#issuecomment-58650322,1,['error'],['error']
Availability," 0.3243016058 2.42e-09 1.52e-06 N; 2 0.3285655299 6.91e-10 7.75e-06 N; Iter=34 L=12 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016030 -2.78e-09 9.27e-07 Y; 2 0.3285655320 2.15e-09 6.23e-06 N; Iter=35 L=13 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016033 2.53e-10 9.26e-07 Y; 2 0.3285655298 -2.26e-09 4.11e-06 N; Iter=36 L=14 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016026 -6.98e-10 9.41e-07 Y; 2 0.3285655295 -2.30e-10 3.70e-06 N; Iter=37 L=15 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016027 1.05e-10 9.64e-07 Y; 2 0.3285655298 2.71e-10 3.50e-06 N; Iter=38 L=16 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016031 4.09e-10 9.77e-07 Y; 2 0.3285655296 -2.10e-10 3.48e-06 N; Iter=39 L=17 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016034 2.70e-10 8.97e-07 Y; 2 0.3285655295 -6.61e-11 3.51e-06 N; Iter=40 L=18 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016049 1.54e-09 8.13e-07 Y; 2 0.3285655298 2.62e-10 3.34e-06 N; Iter=41 L=19 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016050 1.05e-10 7.91e-07 Y; 2 0.3285655298 -2.41e-11 3.31e-06 N; Iter=42 L=20 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016056 5.33e-10 7.73e-07 Y; 2 0.3285655297 -9.36e-11 3.26e-06 N; Iter=43 L=21 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016050 -5.70e-10 7.66e-07 Y; 2 0.3285655297 1.62e-11 3.26e-06 N; Iter=44 L=22 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016043 -7.30e-10 7.68e-07 Y; 2 0.3285655297 -2.33e-11 3.26e-06 N; Iter=45 L=23 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016047 4.83e-10 7.73e-07 Y; 2 0.3285655297 -1.39e-12 3.26e-06 N; Collapsing to only 2 vector(s). Procedure converged for 1 root(s). Algorithm failure: No vectors could be added, though not all roots converged!. EOM CCSD R0 for root 0 = 0.00000000000. Final Energetic Summary for Converged Roots of Irrep B1g; Excitation Energy Total Energy; (eV) (cm^-1) (au) (au); EOM State 1 8.825 71176.0 0.3243016047 -231.251027700721. Largest components of excited wave function #1:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/603#issuecomment-279097344:3094,failure,failure,3094,https://psicode.org,https://github.com/psi4/psi4/issues/603#issuecomment-279097344,1,['failure'],['failure']
Availability," 16:02:12 2016 -0500. ROHF Gradient: DIIS error_vectors really should be orthonormal, fixes #120; ```. and get. ```; /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:30.45:. subroutine generatecavity_cpp(maxts_, maxsph_, maxvert_, &; 1; Warning: Unused dummy argument 'maxsph_' at (1); /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:30.55:. subroutine generatecavity_cpp(maxts_, maxsph_, maxvert_, &; 1; Warning: Unused dummy argument 'maxvert_' at (1); /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pcm_mxcent.h:37.50:; Included at /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:48:. integer(kind=regint_k) MXNEW, MXCENT, MXCOOR; 1; Warning: Unused parameter 'mxcoor' declared at (1); /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pcm_mxcent.h:37.34:; Included at /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:48:. integer(kind=regint_k) MXNEW, MXCENT, MXCOOR; 1; Warning: Unused parameter 'mxnew' declared at (1); /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pcm_pcmdef.h:25.39:; Included at /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:47:. INTEGER MXTS, MXSP, MXTSPT, MXVER; 1; Warning: Unused parameter 'mxver' declared at (1); [ 94%] Built target pcm-base; Scanning dependencies of target pcm-shared; [ 97%] Linking CXX shared library ../lib/libpcm.dylib; Undefined symbols for architecture x86_64:; ""_host_writer"", referenced from:; pcm::Meddle::printer(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const in Meddle.cpp.o; pcm::Meddle::printer(std::__1::basic_ostringstream<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const in Meddle.cpp.o; ld: symbol(s) not found for architecture x86_64; clang: error: linker command failed with exit code 1 (use -v to see invocation); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/207#issuecomment-171081034:2047,error,error,2047,https://psicode.org,https://github.com/psi4/psi4/issues/207#issuecomment-171081034,1,['error'],['error']
Availability," = None; jobrec['return_output'] = True; prov = {}; prov['creator'] = 'QCDB'; prov['version'] = __version__; prov['routine'] = sys._getframe().f_code.co_name; jobrec['provenance'] = prov. # strip engine hint; if name_hint.startswith('d3-'):; name_hint = name_hint[3:]. opts = {}; opts['level_hint'] = level_hint; opts['params_tweaks'] = param_tweaks; opts['dashcoeff_supplement'] = dashcoeff_supplement. jobrec['molecule'] = molrec; jobrec['method'] = name_hint; _, jobrec['driver'] = parse_dertype(ptype, max_derivative=1); jobrec['options'] = opts; #jobrec['options'] = copy.deepcopy(options). try:; dftd3_driver(jobrec); except Exception as err:; jobrec['success'] = False; jobrec['error'] += repr(err); > raise RuntimeError(err) from err; E RuntimeError: Unsuccessful run. Possibly -D variant not available in dftd3 version. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:135: RuntimeError; ------------------------------------------------- Captured stdout call -------------------------------------------------. Dftd3Error: Unsuccessful run. Possibly -D variant not available in dftd3 version. =============================================== short test summary info ================================================; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:99: Psi4 not detecting MRCC. Add `dmrcc` to envvar PSIPATH or PATH; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:633: Psi4 not compiled with erd. Rebuild with -DENABLE_erd; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:686: Psi4 not detecting CFOUR. Add `xcfour` to envvar PSIPATH or PATH; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:773: Psi4 not detecting plugin gpu_dfcc. Build plugin if necessary and add to envvar PYTHONPATH; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:923: Psi4 not detecting plugin snsmp2. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_snsmp2)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:20783,avail,available,20783,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846,1,['avail'],['available']
Availability," @RKS iter 89: -128.84997768340841 -3.17755e-11 2.03835e-06 DIIS; @RKS iter 90: -128.84997768340452 3.89377e-12 2.83140e-06 DIIS; @RKS iter 91: -128.84997768341313 -8.61178e-12 4.42947e-06 DIIS; @RKS iter 92: -128.84997768341492 -1.79057e-12 3.69111e-06 DIIS; @RKS iter 93: -128.84997768340847 6.45173e-12 1.00965e-05 DIIS; @RKS iter 94: -128.84997768341520 -6.73595e-12 5.17369e-06 DIIS; @RKS iter 95: -128.84997768341461 5.96856e-13 4.11707e-06 DIIS; @RKS iter 96: -128.84997768340847 6.13909e-12 4.30105e-06 DIIS; @RKS iter 97: -128.84997768341833 -9.86233e-12 2.90666e-06 DIIS; @RKS iter 98: -128.84997768339980 1.85310e-11 5.70420e-06 DIIS; @RKS iter 99: -128.84997768338903 1.07718e-11 2.47201e-06 DIIS; @RKS iter 100: -128.84997768342927 -4.02451e-11 7.70997e-06 DIIS. ==> Post-Iterations <==. Failed to converge.; Iterations did not converge.; Traceback (most recent call last):; File ""/root/psi4/build/stage/share/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 44, in <module>; File ""/root/psi4/build/stage/share/psi4/lib//psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/root/psi4/build/stage/share/psi4/lib//psi4/driver/procrouting/proc.py"", line 2009, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/root/psi4/build/stage/share/psi4/lib//psi4/driver/procrouting/proc.py"", line 1363, in scf_helper; e_scf = scf_wfn.compute_energy(). RuntimeError:; Fatal Error: Iterations did not converge.; Error occurred in file: /root/psi4/psi4/src/psi4/libpsi4util/process.cc on line: 112; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int). Psi4 stopped on: Wednesday, 13 June 2018 11:12AM; Psi4 wall time for execution: 0:00:23.39. *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4. ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1038#issuecomment-396997775:23495,Error,Error,23495,https://psicode.org,https://github.com/psi4/psi4/issues/1038#issuecomment-396997775,3,"['Error', 'error']","['Error', 'error']"
Availability," CheMPS2::DMRGSCFmatrix*, CheMPS2::DMRGSCFindices*, CheMPS2::Hamiltonian*, std::shared_ptr<psi::PSIO>, std::shared_ptr<psi::Wavefunction>)’:; > /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:268:66: error: no matching function for call to ‘psi::Molecule::nuclear_repulsion_energy()’; > double Econstant = wfn->molecule()->nuclear_repulsion_energy();; > ^; > In file included from /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:34:0:; > /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate: double psi::Molecule::nuclear_repulsion_energy(const std::array<double, 3ul>&) const; > double nuclear_repulsion_energy(const std::array<double,3> &dipole_field) const;; > ^; > /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate expects 1 argument, 0 provided; > make[5]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/dmrgscf.cc.o] Error 1; > make[4]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/all] Error 2; > make[3]: *** [all] Error 2; > make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; > make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; > make: *** [all] Error 2; > The output generated by psi4-path-advisor --gcc is; > ; > /home/shouck/miniconda3/envs/p4dev/bin/cmake \; > -H. \; > -C/home/shouck/miniconda3/envs/p4dev/share/cmake/psi4/psi4DepsCache.cmake \; > -Bobjdir; > @ashutoshvt and @robertodr have narrowed the issue down to the CheMPS2 module, which is set to ON in psi4DepsCache.cmake by default; changing it to; > ; > set(ENABLE_CheMPS2 OFF CACHE BOOL """"); > set(CheMPS2_DIR ""/home/shouck/miniconda3/envs/p4dev/share/cmake/CheMPS2"" CACHE PATH """"); > allows Psi4 to compile without issues. I'm not sure, but it seems like maybe a function was changed and then not updated in CheMPS2. The error and log files are attached. Thank you!; > ; > CMakeError.log; > CMakeOutput.log; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub, or mute the thread.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/871#issuecomment-347970165:1739,Error,Error,1739,https://psicode.org,https://github.com/psi4/psi4/issues/871#issuecomment-347970165,4,"['Error', 'down', 'error']","['Error', 'down', 'error']"
Availability," I click the link to; www.psicode.org (top hit), www.psicode.org/labs.php (2nd hit), or; github.com/psi4/psi4 (3rd hit). It is really weird that github is also being intercepted. I could imagine; how our DNS might have been hijacked, etc., but not how the github link; could have been... David. On Thu, Apr 14, 2016 at 11:54 AM, Andrew James notifications@github.com; wrote:. > I am also being re-directed from search engines. The top site shows; > psicode.org but will redirect if I click on it. Typing psicode.org into a; > browser will bring me to the correct page, but I am noticing that the; > “manual” link is not working properly.; > ; > I have that bookmarked and I wanted to see if that would redirect. It does; > not re-direct but none of the CSS elements associated with the manual are; > being loaded properly. I see the manual appearing as plain HTML. The same; > thing happens if I navigate to the manual from the psicode.org homepage.; > ; > The console in chrome and safari are showing 404 errors for js and css:; > ; > http://psicode.org/psi4manual/master/_static/psi4.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/pygments.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/doctools.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/underscore.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/jquery.cookie.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/jquery.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_sections.js Failed to; > load resource: the server respon",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/342#issuecomment-210017774:1049,error,errors,1049,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210017774,1,['error'],['errors']
Availability," I revert to the; > commit just before this I'm able to compile.; > >; > > If it helps, I'm running Ubuntu, with gnu compilers.; > >; > > Here's the error message:; > >; > > /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc: In; > function ‘bool py_psi_set_local_option_array(const string&, const; > string&, const pybind11::list&, psi::DataType*)’: /home/nmayhall/qcSoftware/; > psi4/psi4.inv.git/psi4/src/core.cc:786:13: error: ‘isinstance’ is not a; > member of ‘py’ if (py::isinstance<py::list>(values[n])) { ^; > /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:786:36:; > error: expected primary-expression before ‘>’ token if; > (py::isinstance<py::list>(values[n])) { ^ /home/nmayhall/qcSoftware/; > psi4/psi4.inv.git/psi4/src/core.cc: In function ‘bool; > py_psi_set_global_option_array(const string&, pybind11::list,; > psi::DataType*)’: /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:13:; > error: ‘isinstance’ is not a member of ‘py’ if (py::isinstance<py::list>(values[n])); > { ^ /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:36:; > error: expected primary-expression before ‘>’ token if; > (py::isinstance<py::list>(values[n])) { ^ src/CMakeFiles/core.dir/build.make:374:; > recipe for target 'src/CMakeFiles/core.dir/core.cc.o' failed make[5]: ***; > [src/CMakeFiles/core.dir/core.cc.o] Error 1 make[5]: *** Waiting for; > unfinished jobs.... ^Csrc/CMakeFiles/core.dir/build.make:86: recipe for; > target 'src/CMakeFiles/core.dir/export_mints.cc.o' failed make[5]: ***; > [src/CMakeFiles/core.dir/export_mints.cc.o] Interrupt; > CMakeFiles/Makefile2:208: recipe for target 'src/CMakeFiles/core.dir/all'; > failed make[4]: *** [src/CMakeFiles/core.dir/all] Interrupt Makefile:127:; > recipe for target 'all' failed make[3]: *** [all] Interrupt; > CMakeFiles/psi4_core.dir/build.make:111: recipe for target; > 'psi4_core-prefix/src/psi4_core-stamp/psi4_core-build' failed make[2]:; > *** [psi4_core-prefix/src/psi4_core-stamp/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/536#issuecomment-264074858:1667,error,error,1667,https://psicode.org,https://github.com/psi4/psi4/issues/536#issuecomment-264074858,1,['error'],['error']
Availability," SCF_TYPE MCSCF_TYPE SCF_TYPE. Did you mean? SCF_TYPE MCSCF_TYPE SCF_TYPE. Error at bond length 5.000000000000004: Error setting options: {'tdscf_type': ('full', RuntimeError('\nFatal Error: TDSCF_TYPE is not a valid option.\nError occurred in file: /home/conda/feedstock_root/build_artifacts/psi4_1683815705191/work/psi4/src/psi4/liboptions/liboptions.h on line: 55\nThe most recent 5 function calls were:\n\npsi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int)\n'))}; Potential energy data saved to CF_PEC_1_data.csv; Plot saved as CF_PEC_Psi4_1.png. And here's the script I ran to see the available methods and options: ; import psi4. # Test common methods to see if they are available; methods_to_test = ['scf', 'mp2', 'ccsd', 'eom-ccsd', 'td-dft']; available_methods = []. for method in methods_to_test:; try:; psi4.energy(method); available_methods.append(method); except Exception:; pass. print(""Available Methods:""); print(available_methods). # List available options; options = psi4.core.get_global_option_list(); print(""\nAvailable Options:""); print(options). # Check specific option; print(""\nIs 'tdscf_type' available?"", 'tdscf_type' in options). And here's the result I got when I ran the script:; (psi4_env) -bash-4.2# python3 CF_PEC_Project.py. Scratch directory: /tmp/. Scratch directory: /tmp/. Scratch directory: /tmp/. Scratch directory: /tmp/. Scratch directory: /tmp/; Available Methods:; []. Available Options:; ['ABCD', 'ACTIVE', 'ACTIVE_NAT_ORBS', 'ADD_AUXILIARY_BONDS', 'AIO_CPHF', 'AIO_DF_INTS', 'ALGORITHM', 'ANALYZE', 'AO_BASIS', 'AUXILIARY_BOND_FACTOR', 'AVG_STATES', 'AVG_WEIGHTS', 'A_RAS3_MAX', 'BASIS', 'BASIS_GUESS', 'BASIS_RELATIVISTIC', 'BCCD_MAXITER', 'BENCH', 'BENDAZZOLI', 'BORDER', 'BORDER_N_REDIST', 'BORDER_REDIST_ORDER', 'BORDER_REDIST_POL', 'BORDER_RMIN', 'BORDER_RMIN_UNIT', 'BORDER_TYPE', 'BRUECKNER_MAXITER', 'BRUECKNER_ORBS_R_CONVERGENCE', 'B_RAS3_MAX', 'CACHELEVEL', 'CACHETY",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845:5715,Avail,Available,5715,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845,1,['Avail'],['Available']
Availability," So I would make another python module, `psi2adcc` say, and in it implement the routing between psi4 and adcc. Then adcc is one of its `setup.py` dependencies. In this python module I will need to adapt `psi4.driver.procedures['energy']['adc2']` and similar and add my energy function. So far, so good. Now the problem I see is that in a vanilla Psi4 version without adcc-support, `psi4.driver.procedures['energy']['adc2']` is assigned to `run_adc`, which rightfully runs the ADC(2) implementation in Psi4. If my plugin is loaded, however, this should become a `select_adc2` method, which either picks the `run_adc` in my plugin or the `run_adc` in Psi4, depending on some user settings. One option to resolve this is to give the adcc methods a different name, e.g. `adcc-adc(2)`. This is roughly what is done e.g. in the `gpu_dfcc` plugin to distinguish against the CPU versions if I understand correctly. For me this solution does not feel very satisfying, however, because now it's again the user's responsibility to select the right ADC implementation.; Another option is to implement a dummy `select_adc` in Psi4, which does no branching and always falls to the built-in implementation. This could then be monkey-patched in my plugin by wrapping it somehow ... but that is not clean either. . Alternative is to integrate deeper into the python layer and subject to the availablity of the `adcc` module either have two branches in `select_adc` or just one. That's what I will pursue now if there are no other thoughts. --. About the wavefunction object: I have not looked at the Psi4 implementation details (or the schema) so far, but roughly speaking it's (for each excited state) the excitation energy, a few property vectors and AO density matrices. Theoretically one could also export the full excitation vector, but that involves copying a rank-4 tensor, so I would not do that. But one can export important amplitudes, which is a mapping from a pair / quadruple of integers to a real value.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-547652584:1729,avail,availablity,1729,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547652584,1,['avail'],['availablity']
Availability," _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. molrec = {'elbl': ['', '', '', ''], 'elea': [12, 12, 1, 1], 'elem': ['C', 'C', 'H', 'H'], 'elez': [6, 6, 1, 1], ...}; name_hint = 'pbeh3c', level_hint = 'd3bj', param_tweaks = {'a1': 0.486, 'a2': 4.5, 's6': 1.0, 's8': 0.0}; ptype = 'energy'; dashcoeff_supplement = defaultdict(<function <lambda> at 0x7f5e8db768c8>, {'d2': defaultdict(<class 'dict'>, {'definitions': {'opbe-d2': {'ty...0093}, 'citation': ' M. K. Kesharwani, A. Karton, J.M. L. Martin, J. Chem. Theory Comput. 12, 444-454, 2016\n'}}})}); verbose = 1. def run_dftd3_from_arrays(molrec,; name_hint=None,; level_hint=None,; param_tweaks=None,; ptype='energy',; dashcoeff_supplement=None,; verbose=1):; """"""Specialized signature disentangling dispersion level and; parameters for computing on `molecule` with engine `DFTD3`. See; `dashparam.from_array` for parameter details. """"""; jobrec = {}; jobrec['error'] = ''; jobrec['success'] = None; jobrec['return_output'] = True; prov = {}; prov['creator'] = 'QCDB'; prov['version'] = __version__; prov['routine'] = sys._getframe().f_code.co_name; jobrec['provenance'] = prov. # strip engine hint; if name_hint.startswith('d3-'):; name_hint = name_hint[3:]. opts = {}; opts['level_hint'] = level_hint; opts['params_tweaks'] = param_tweaks; opts['dashcoeff_supplement'] = dashcoeff_supplement. jobrec['molecule'] = molrec; jobrec['method'] = name_hint; _, jobrec['driver'] = parse_dertype(ptype, max_derivative=1); jobrec['options'] = opts; #jobrec['options'] = copy.deepcopy(options). try:; dftd3_driver(jobrec); except Exception as err:; jobrec['success'] = False; jobrec['error'] += repr(err); > raise RuntimeError(err) from err; E RuntimeError: Unsuccessful run. Possibly -D variant not available in dftd3 version. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:135: RuntimeError; ------------------------------------------------- Captured stdout call -------------------------------------------------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:19659,error,error,19659,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846,1,['error'],['error']
Availability," ```; ==14111== ; ==14111== Process terminating with default action of signal 11 (SIGSEGV); ==14111== General Protection Fault; ==14111== at 0x13A3EBF: psi::fnocc::CoupledCluster::triples() (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x686B882: __kmp_invoke_microtask (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x6845324: __kmp_fork_call (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x6826B2E: __kmpc_fork_call (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x13A13D1: psi::fnocc::CoupledCluster::triples() (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x134038C: psi::fnocc::CoupledCluster::compute_energy() (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x1330A20: psi::fnocc::fnocc(psi::Options&) (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0xA5D569: py_psi_fnocc() (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0xA8C2AD: boost::python::objects::caller_py_function_impl<boost::python::detail::caller<double (*)(), boost::python::default_call_policies, boost::mpl::vector1<double> > >::operator()(_object*, _object*) (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x55C4D9D: boost::python::objects::function::call(_object*, _object*) const (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x55C4AD4: boost::detail::function::void_function_r",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/121#issuecomment-123755185:638,Fault,Fault,638,https://psicode.org,https://github.com/psi4/psi4/issues/121#issuecomment-123755185,1,['Fault'],['Fault']
Availability," actually a PyBind11 version error. It doesn't appear that our; > CMake is detecting the discrepancy. Please blow away your objdir and; > recompile from scratch.; >; > -Daniel Smith; > Sent from my iPhone.; >; > > On Nov 30, 2016, at 23:06, nmayhall <notifications@github.com> wrote:; > >; > > After a recent git pull, psi4 failed to compile. It seems that the error; > was likely introduced in commit 0d0d1f9 ""Reworked exception printing in Psi; > so all Python Exceptions raise to stdout and psi out"". If I revert to the; > commit just before this I'm able to compile.; > >; > > If it helps, I'm running Ubuntu, with gnu compilers.; > >; > > Here's the error message:; > >; > > /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc: In; > function ‘bool py_psi_set_local_option_array(const string&, const; > string&, const pybind11::list&, psi::DataType*)’: /home/nmayhall/qcSoftware/; > psi4/psi4.inv.git/psi4/src/core.cc:786:13: error: ‘isinstance’ is not a; > member of ‘py’ if (py::isinstance<py::list>(values[n])) { ^; > /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:786:36:; > error: expected primary-expression before ‘>’ token if; > (py::isinstance<py::list>(values[n])) { ^ /home/nmayhall/qcSoftware/; > psi4/psi4.inv.git/psi4/src/core.cc: In function ‘bool; > py_psi_set_global_option_array(const string&, pybind11::list,; > psi::DataType*)’: /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:13:; > error: ‘isinstance’ is not a member of ‘py’ if (py::isinstance<py::list>(values[n])); > { ^ /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:36:; > error: expected primary-expression before ‘>’ token if; > (py::isinstance<py::list>(values[n])) { ^ src/CMakeFiles/core.dir/build.make:374:; > recipe for target 'src/CMakeFiles/core.dir/core.cc.o' failed make[5]: ***; > [src/CMakeFiles/core.dir/core.cc.o] Error 1 make[5]: *** Waiting for; > unfinished jobs.... ^Csrc/CMakeFiles/core.dir/build.make:86: recipe for; > target 'src/CMakeFil",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/536#issuecomment-264074858:1158,error,error,1158,https://psicode.org,https://github.com/psi4/psi4/issues/536#issuecomment-264074858,1,['error'],['error']
Availability, bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:909: Psi4 not detecting plugin snsmp2. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_snsmp2); SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:925: Psi4 not detecting plugin resp. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_resp). ================================================================== warnings summary ==================================================================; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304:,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892:5292,error,error,5292,https://psicode.org,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892,1,['error'],['error']
Availability," conda packages psi4 & psi4-deps and the installer psi4conda?; --------------------------------------------------------------------------. psi4 - has full-featured psi4 itself and necessarily all the link-time qc addons (e.g., chemps2). Of gcc-ness, it has minimal, run-time libraries, not compilers, though, for linux, full gcc and run-time gcc are the same. It doesn't have the run-time qc addons (e.g., dftd3). psi4-deps - does not have psi4 itself (though fine to install it alongside). Does have all the link-time and run-time addons. Does have cmake and sphinx (and python). Of gcc-ness, has full packages, that is, compilers, not runtime packages. installer - has full-featured psi4 itself, all link-time qc addons, all run-time qc addons, and minimal gcc runtime libraries. How to just get Psi4 with minimal conda interaction; ---------------------------------------------------. Download one of the six installers (Linux/Mac; Py27, 35, 36; presently at http://vergil.chemistry.gatech.edu/download/). `bash` it. Follow the prompts and _do_ make the adjustments to PATH and PSI_SCRATCH that it suggests at the end. Test with `psi4 --test`. Done. How to get a pre-build Psi4 into a conda environment of an existing Ana/Miniconda installation; ----------------------------------------------------------------------------------------------. `conda create -n p4env python=x.x psi4 psi4-deps -c psi4/label/devel -c psi4`. Same for Mac/Linux. Substitute desired python version: 2.7, 3.5, 3.6. Only reason for psi4-deps is to get the qc runtime addons; could say ""dftd3 gcp v2rdm_casscf"" instead of ""psi4-deps""; or leave them out if you don't want them. Activate environment and make the adjustmets to PATH and PSI_SCRATCH that it suggests at the end. Test with `psi4 --test`. How to use all those conda packages to compile Psi4 faster and easier; ---------------------------------------------------------------------. `conda create -n p4deps python=x.x psi4-deps -c psi4`. Same for Mac/Linux. Substit",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/466#issuecomment-292102715:1022,down,download,1022,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-292102715,1,['down'],['download']
Availability," const&) in; > libboost_python-1_57.a(object_protocol.o); > ""_PyErr_Fetch"", referenced from:; > psi::HandleError() in libfrag.a(LibFragDriver.cc.o); > ""_PyErr_Format"", referenced from:; > boost::python::pytype_check(_typeobject_, _object_) in; > libboost_python-1_57.a(from_python.o); > boost::python::objects::(anonymous; > namespace)::callable_check(_object_) in libboost_python-1_57.a(class.o); > ; > boost::python::objects::function::add_to_namespace(boost::python::api::object; > const&, char const_, boost::python::api::object const&, char const_) in; > libboost_python-1_57.a(function.o); > boost::python::converter::registration::get_class_object() const in; > libboost_python-1_57.a(registry.o); > ""_PyErr_NewException"", referenced from:; > boost::python::objects::function::argument_error(_object_,; > _object_) const in libboost_python-1_57.a(function.o); > ""_PyErr_NoMemory"", referenced from:; > boost::python::handle_exception_impl(boost::function0<void>) in; > libboost_python-1_57.a(errors.o); > ""_PyErr_Occurred"", referenced from:; > boost::python::len(boost::python::api::object const&) in python.cc.o; > boost::python::len(boost::python::api::object const&) in; > libparallel2.a(LibParallelHelper.cc.o); > boost::python::len(boost::python::api::object const&) in; > libmints.a(matrix.cc.o); > boost::python::len(boost::python::api::object const&) in; > libfindif.a(fd_hessian_0.cc.o); > boost::python::len(boost::python::api::object const&) in; > libfindif.a(fd_1_0.cc.o); > boost::python::len(boost::python::api::object const&) in; > libfindif.a(fd_freq_0.cc.o); > boost::python::len(boost::python::api::object const&) in; > libfindif.a(fd_freq_1.cc.o); > ...; > ""_PyErr_Print"", referenced from:; > psi::Python::run(__sFILE*) in python.cc.o; > psi::Dispersion::compute_energy(boost::shared_ptrpsi::Molecule); > in libdisp.a(dispersion.cc.o); > psi::Dispersion::compute_gradient(boost::shared_ptrpsi::Molecule); > in libdisp.a(dispersion.cc.o); > psi::SuperFunctional::build(std::__1",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/164#issuecomment-131150834:8689,error,errors,8689,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131150834,2,['error'],['errors']
Availability," dgbrfs，该符号在函数 ""int __cdecl psi::C_DGBRFS(char,int,int,int,int,double *,int,double *,int,int *,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DGBRFS@psi@@YAHDHHHHPEANH0HPEAH0H0H0001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgbsv，该符号在函数 ""int __cdecl psi::C_DGBSV(int,int,int,int,double *,int,int *,double *,int)"" (?C_DGBSV@psi@@YAHHHHHPEANHPEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgbsvx，该符号在函数 ""int __cdecl psi::C_DGBSVX(char,char,int,int,int,int,double *,int,double *,int,int *,char,double *,double *,double *,int,double *,int,double *,double *,double *,double *,int *)"" (?C_DGBSVX@psi@@YAHDDHHHHPEANH0HPEAHD000H0H00001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgbtrf，该符号在函数 ""int __cdecl psi::C_DGBTRF(int,int,int,int,double *,int,int *)"" (?C_DGBTRF@psi@@YAHHHHHPEANHPEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgbtrs，该符号在函数 ""int __cdecl psi::C_DGBTRS(char,int,int,int,int,double *,int,int *,double *,int)"" (?C_DGBTRS@psi@@YAHDHHHHPEANHPEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgebak，该符号在函数 ""int __cdecl psi::C_DGEBAK(char,char,int,int,int,double *,int,double *,int)"" (?C_DGEBAK@psi@@YAHDDHHHPEANH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgebal，该符号在函数 ""int __cdecl psi::C_DGEBAL(char,int,double *,int,int *,int *,double *)"" (?C_DGEBAL@psi@@YAHDHPEANHPEAH10@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgebrd，该符号在函数 ""int __cdecl psi::C_DGEBRD(int,int,double *,int,double *,double *,double *,double *,double *,int)"" (?C_DGEBRD@psi@@YAHHHPEANH00000H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgecon，该符号在函数 ""int __cdecl psi::C_DGECON(char,int,double *,int,double,double *,double *,int *)"" (?C_DGECON@psi@@YAHDHPEANHN00PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgeequ，该符号在函数 ""int __cdecl psi::C_DGEEQU(int,int,double *,int,double *,do",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:17289,error,error,17289,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability," dsyevr，该符号在函数 ""int __cdecl psi::C_DSYEVR(char,char,char,int,double *,int,double,double,int,int,double,int *,double *,double *,int,int *,double *,int,int *,int)"" (?C_DSYEVR@psi@@YAHDDDHPEANHNNHHNPEAH00H10H1H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsyevx，该符号在函数 ""int __cdecl psi::C_DSYEVX(char,char,char,int,double *,int,double,double,int,int,double,int *,double *,double *,int,double *,int,int *,int *)"" (?C_DSYEVX@psi@@YAHDDDHPEANHNNHHNPEAH00H0H11@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsygst，该符号在函数 ""int __cdecl psi::C_DSYGST(int,char,int,double *,int,double *,int)"" (?C_DSYGST@psi@@YAHHDHPEANH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsygv，该符号在函数 ""int __cdecl psi::C_DSYGV(int,char,char,int,double *,int,double *,int,double *,double *,int)"" (?C_DSYGV@psi@@YAHHDDHPEANH0H00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsygvd，该符号在函数 ""int __cdecl psi::C_DSYGVD(int,char,char,int,double *,int,double *,int,double *,double *,int,int *,int)"" (?C_DSYGVD@psi@@YAHHDDHPEANH0H00HPEAHH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsygvx，该符号在函数 ""int __cdecl psi::C_DSYGVX(int,char,char,char,int,double *,int,double *,int,double,double,int,int,double,int *,double *,double *,int,double *,int,int *,int *)"" (?C_DSYGVX@psi@@YAHHDDDHPEANH0HNNHHNPEAH00H0H11@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsyrfs，该符号在函数 ""int __cdecl psi::C_DSYRFS(char,int,int,double *,int,double *,int,int *,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DSYRFS@psi@@YAHDHHPEANH0HPEAH0H0H0001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsysv，该符号在函数 ""int __cdecl psi::C_DSYSV(char,int,int,double *,int,int *,double *,int,double *,int)"" (?C_DSYSV@psi@@YAHDHHPEANHPEAH0H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsysvx，该符号在函数 ""int __cdecl psi::C_DSYSVX(char,char,int,int,double *,int,double *,int,int *,double *,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:47211,error,error,47211,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability," error LNK2019: 无法解析的外部符号 dgetrs，该符号在函数 ""int __cdecl psi::C_DGETRS(char,int,int,double *,int,int *,double *,int)"" (?C_DGETRS@psi@@YAHDHHPEANHPEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dggbak，该符号在函数 ""int __cdecl psi::C_DGGBAK(char,char,int,int,int,double *,double *,int,double *,int)"" (?C_DGGBAK@psi@@YAHDDHHHPEAN0H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dggbal，该符号在函数 ""int __cdecl psi::C_DGGBAL(char,int,double *,int,double *,int,int *,int *,double *,double *,double *)"" (?C_DGGBAL@psi@@YAHDHPEANH0HPEAH1000@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgges，该符号在函数 ""int __cdecl psi::C_DGEGS(char,char,int,double *,int,double *,int,double *,double *,double *,double *,int,double *,int,double *,int)"" (?C_DGEGS@psi@@YAHDDHPEANH0H0000H0H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dggesx，该符号在函数 ""int __cdecl psi::C_DGGESX(char,char,char,char,int,double *,int,double *,int,int *,double *,double *,double *,double *,int,double *,int,double *,double *,double *,int,int *,int)"" (?C_DGGESX@psi@@YAHDDDDHPEANH0HPEAH0000H0H000H1H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dggev，该符号在函数 ""int __cdecl psi::C_DGEGV(char,char,int,double *,int,double *,int,double *,double *,double *,double *,int,double *,int,double *,int)"" (?C_DGEGV@psi@@YAHDDHPEANH0H0000H0H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dggevx，该符号在函数 ""int __cdecl psi::C_DGGEVX(char,char,char,char,int,double *,int,double *,int,double *,double *,double *,double *,int,double *,int,int *,int *,double *,double *,double *,double *,double *,double *,double *,int,int *)"" (?C_DGGEVX@psi@@YAHDDDDHPEANH0H0000H0HPEAH10000000H1@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dggglm，该符号在函数 ""int __cdecl psi::C_DGGGLM(int,int,int,double *,int,double *,int,double *,double *,double *,double *,int)"" (?C_DGGGLM@psi@@YAHHHHPEANH0H0000H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : err",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:23642,error,error,23642,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability," following error: . ```; {'error': {'error_message': 'QCEngine Execution Error:\n'; 'Traceback (most recent call last):\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib//python3.8/site-packages/qcengine/util.py"", '; 'line 114, in compute_wrapper\n'; ' yield metadata\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib//python3.8/site-packages/qcengine/compute.py"", '; 'line 91, in compute\n'; ' output_data = executor.compute(input_data, '; 'config)\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib//python3.8/site-packages/qcengine/programs/cfour/runner.py"", '; 'line 71, in compute\n'; ' job_inputs = self.build_input(input_model, '; 'config)\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib//python3.8/site-packages/qcengine/programs/cfour/runner.py"", '; 'line 137, in build_input\n'; ' cfourrec[""infiles""][""GENBAS""] = '; 'genbas.read_text()\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib/python3.8/pathlib.py"", '; 'line 1236, in read_text\n'; "" with self.open(mode='r', encoding=encoding, ""; 'errors=errors) as f:\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib/python3.8/pathlib.py"", '; 'line 1222, in open\n'; ' return io.open(self, mode, buffering, '; 'encoding, errors, newline,\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib/python3.8/pathlib.py"", '; 'line 1078, in _opener\n'; ' return self._accessor.open(self, flags, '; 'mode)\n'; 'FileNotFoundError: [Errno 2] No such file or '; 'directory: '; ""'/xstorage/tobias/bin/cfour/basis/GENBAS'\n"",; 'error_type': 'unknown_error',; 'extras': None},; 'extras': None,; 'id': None,; 'input_data': {'driver': 'energy',; 'keywords': {'CC_CONV': 12, 'SCF_CONV': 12},; 'model': {'basis': 'aug-pvqz', 'method': 'ccsd(t)'},; 'molecule': {'atom_labels': ['', '', ''],; 'atomic_numbers': [8, 1, 1],; 'fix_com': False,; 'fix_orientation': False,; 'fragment_charges': [0.0],; 'fragment_multiplicities': [1],; 'fragments': [[0, 1, 2]],; 'geometry': [0.0,; 0.0,; -0.12403886030029525,; 0.0,; -1.431430901356359,; 0.9842933627189459,; 0.0,; 1.431430901356359,; 0.9842933627189459]",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2608#issuecomment-1155516048:1768,error,errors,1768,https://psicode.org,https://github.com/psi4/psi4/issues/2608#issuecomment-1155516048,4,['error'],['errors']
Availability," for parameter details. """"""; jobrec = {}; jobrec['error'] = ''; jobrec['success'] = None; jobrec['return_output'] = True; prov = {}; prov['creator'] = 'QCDB'; prov['version'] = __version__; prov['routine'] = sys._getframe().f_code.co_name; jobrec['provenance'] = prov. # strip engine hint; if name_hint.startswith('d3-'):; name_hint = name_hint[3:]. opts = {}; opts['level_hint'] = level_hint; opts['params_tweaks'] = param_tweaks; opts['dashcoeff_supplement'] = dashcoeff_supplement. jobrec['molecule'] = molrec; jobrec['method'] = name_hint; _, jobrec['driver'] = parse_dertype(ptype, max_derivative=1); jobrec['options'] = opts; #jobrec['options'] = copy.deepcopy(options). try:; > dftd3_driver(jobrec). ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:131:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. jobrec = {'driver': 'gradient', 'error': ""Dftd3Error('Unsuccessful run. Possibly -D variant not available in dftd3 version.',)""...a': [12, 12, 1, 1, 1, 1, ...], 'elem': ['C', 'C', 'H', 'H', 'H', 'H', ...], 'elez': [6, 6, 1, 1, 1, 1, ...], ...}, ...}; verbose = 1. def dftd3_driver(jobrec, verbose=1):; """"""Drive the jobrec@i (input) -> dftd3rec@i -> dftd3rec@io -> jobrec@io (returned) process. Input Fields; ------------. Optional Input Fields; ---------------------. Output Fields; -------------. Optional Output Fields; ----------------------. """"""; if verbose > 2:; print('[1] {} JOBREC PRE-PLANT (j@i) <<<'.format('DFTD3')); pp.pprint(jobrec); print('>>>'). dftd3rec = dftd3_plant(jobrec). # test json roundtrip; jdftd3rec = json.dumps(dftd3rec); dftd3rec = json.loads(jdftd3rec). if verbose > 3:; print('[2] {}REC PRE-SUBPROCESS (m@i) <<<'.format('DFTD3')); pp.pprint(dftd3rec); print('>>>\n'). dftd3_subprocess(dftd3rec) # updates dftd3rec. if verbose > 3:; print('[3] {}REC POST-SUBPROCESS (m@io) <<<'.format('DFTD3')); pp.pprint(dftd3rec); print('>>>\n'). > dftd3_harvest(jobrec, dftd3rec) ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:4394,avail,available,4394,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846,1,['avail'],['available']
Availability," has been fixed in the latest version as we have looked at; this problem before, but I'm not sure. The 'dynamic_level' idea is still under development, and hasn't been much; tested.; If you look in /psi4/psi4/src/psi4/optking/set_params.cc, you can see what; the dynamic level is doing. It is changing parameters towards typically; more robust levels. You can do the same thing by changing input keywords.; For example, the behavior of dynamic_level=3 shown there can be produced by; setting the analogous keywords. Opt_params.coordinates = OPT_PARAMS::BOTH;. Opt_params.consecutive_backsteps_allowed = 1;. Opt_params.step_type = OPT_PARAMS::RFO;. Opt_params.intrafragment_step_limit = 0.1;. Opt_params.intrafragment_step_limit_min = 0.1;. Opt_params.intrafragment_step_limit_max = 0.1;. All this to say that you can skip the dynamic_level usage (or simply start; with dynamic_level = 3 [don't know if anyone has ever done that!] and I; expect the i/o error will go away. On the stability of the back-transformation, optking accounts for Delta(q); for a torsion value going from -178 to +178 degrees, etc.. However, the; formula for the derivative (B-matrix element) is undefined and also; discontinuous at 180. A real pain. I hope to try to fix this someday, but; when I do, it'll probably be in the newer python optimizer I'm developing. On Wed, Nov 15, 2017 at 5:21 PM, Chaya Stern <notifications@github.com>; wrote:. > This seems to be an error in writing rather than an error in the; > constrained optimization, isn't it?; >; > This error shows up when dynamic level is raised to 3 after the first; > convergence check when it tries to write optimization data to binary file.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/858#issuecomment-344762514>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/ADguTMqNeh8Ky1RIqF0KceVVWoPAvSuHks5s23H-gaJpZM4QcgDn>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/858#issuecomment-344949158:1674,error,error,1674,https://psicode.org,https://github.com/psi4/psi4/issues/858#issuecomment-344949158,6,['error'],['error']
Availability," i<nirrep_; ++i) {; rowspi_[i] = cp->rowspi_[i];; colspi_[i] = cp->colspi_[i];; }; alloc();; }; ```. …; }. From looking at your code the matrix Ca does not use symmetry,. ```; SharedMatrix Ca = SharedMatrix(new Matrix(""Alpha MO Coefficients"", nso_, nmo_));; ```. but the one you request from the environment does because the calculation uses symmetry:. SharedMatrix moA = Process::environment.wavefunction()->Ca();. This is only speculative, but it could be easily tested. Maybe we should reconsider restricting Matrix::copy so that we eliminate the option to make copies between objects that do not have the same dimension. After all, if we are going to reallocate the memory we might as well just create a copy of the matrix with clone(). Francesco. On Jul 16, 2015, at 5:24 PM, Ugur Bozkaya <notifications@github.com<mailto:notifications@github.com>> wrote:. I am also very surprised how the saving MOs procedure yields wrong gradients. I do not read back the MOs from wfn during gradients. That code in the save_mo_to_wfn() function, which is on the line 328 of manager.cchttp://manager.cc. If I call save_mo_to_wfn() before gradients, then gradient code gives the wrong answer. Anyone can confirm me. It is really quite odd. Jet wrote that he will take a look it. Not sure whether he has the time or not. @jturneyhttps://github.com/jturney. —; Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/127#issuecomment-122103421. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/127#issuecomment-122116756:2452,error,error,2452,https://psicode.org,https://github.com/psi4/psi4/issues/127#issuecomment-122116756,1,['error'],['error']
Availability," little bit of training to; be able to use properly... they're not totally bulletproof black boxes. Best,; David. On Thu, Aug 27, 2020 at 12:07 PM Alfred Andersson <notifications@github.com>; wrote:. > Hi,; >; > I've been trying to calculate the energies of monoatomic compounds. All of; > the atoms ran successfully, except for hydrogen with multiplicity 2.; >; > My in-file:; >; > molecule mol_atomic_hydrogen_doublet {; > 0 2; > H 0.000000000 0.000000000 0.000000000; >; > units angstrom; > no_reorient; > }; >; > set globals {; > basis aug-cc-pVQZ; > dft_spherical_points 434; > dft_radial_points 85; > reference uhf; > }; >; > set_memory(100000000000); > try:; > optimize('pwpb95-d3bj'); > except SCFConvergenceError as e:; > unconverged_scf_wfn = e.wfn; > unconverged_scf_wfn.to_file(unconverged_scf_wfn.get_scratch_filename(180)); > set guess read; > optimize('pwpb95-d3bj'); >; > The error I got (including previous lines):; >; > *** tstart() called on host; > *** at Fri Aug 21 16:21:36 2020; >; > => Loading Basis Set <=; >; > Name: (AUG-CC-PVQZ AUX); > Role: RIFIT; > Keyword: DF_BASIS_MP2; > atoms 1 entry H line 30 file /home/username/miniconda/share/psi4/basis/aug-cc-pvqz-ri.gbs; >; > --------------------------------------------------------; > DF-MP2; > 2nd-Order Density-Fitted Moller-Plesset Theory; > UMP2 Wavefunction, 28 Threads; >; > Rob Parrish, Justin Turney, Andy Simmonett,; > Ed Hohenstein, and C. David Sherrill; > --------------------------------------------------------; >; > --------------------------------------------------------; > NBF = 46, NAUX = 80; > --------------------------------------------------------; > CLASS FOCC OCC AOCC AVIR VIR FVIR; > ALPHA 0 1 1 45 45 0; > BETA 0 0 0 46 46 0; > --------------------------------------------------------; >; >; > Traceback (most recent call last):; > File ""/home/username/miniconda/bin/psi4"", line 287, in <module>; > exec(content); > File ""<string>"", line 31, in <module>; > File ""/home/username/miniconda/lib//pyth",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1995#issuecomment-682586879:1479,error,error,1479,https://psicode.org,https://github.com/psi4/psi4/issues/1995#issuecomment-682586879,1,['error'],['error']
Availability," negative argument to the sqrt function, which is very suspicious. It implies that the surface has strange curvature at that point, likely a) due to numerical noise or b) due to the method of choice not being able to globally describe the surface. The first of these is usually to blame - you need *very* tightly converged energies when trying to get higher order derivatives (I'd say 12 digits after the decimal, so make sure all densities / residuals of your method of choice are tightly converged). Very few methods can describe a full dissociation curve, and the very wide range of r values that you're using means that there's potential to probe some bond lengths that are problematic, which could lead to strange behavior like what was observed. I think @loriab is right - keeping the points close to the minimum is much safer. The cubic and quartic force constants that you get from the analysis are derivatives taken *at* the minimum, so points far away are not needed. Moreover, the default behavior is to weight the points in the fit by distance from the minimum, so only those nearby will contribute appreciably. I added that code to get rid of some very messy Lagrangian interpolation code that was used before. The previous code used 5 or 9 points spaced around the minimum, and similar amounts of data were successful for my testing. I think 0.05A might be ok as long as the points chosen bracket the minimum. I'd recommend some testing of this - if you take a really cheap method and try different spacings, you should see a plateau in the results w.r.t. grid spacing; too small a spacing is susceptible to roundoff error, while large spacing pushes the definition of 'finite' in finite differences, but the plateau in between defines the optimal region. When I tested on H2 (in the psithon1 test case, by the way) I found that it was quite insensitive to the grid size, but I was also using tightly converged full CI so there were no problems with the underlying potential. Good luck!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1600#issuecomment-483086393:1730,error,error,1730,https://psicode.org,https://github.com/psi4/psi4/issues/1600#issuecomment-483086393,1,['error'],['error']
Availability," on `molecule` with engine `DFTD3`. See; `dashparam.from_array` for parameter details. """"""; jobrec = {}; jobrec['error'] = ''; jobrec['success'] = None; jobrec['return_output'] = True; prov = {}; prov['creator'] = 'QCDB'; prov['version'] = __version__; prov['routine'] = sys._getframe().f_code.co_name; jobrec['provenance'] = prov. # strip engine hint; if name_hint.startswith('d3-'):; name_hint = name_hint[3:]. opts = {}; opts['level_hint'] = level_hint; opts['params_tweaks'] = param_tweaks; opts['dashcoeff_supplement'] = dashcoeff_supplement. jobrec['molecule'] = molrec; jobrec['method'] = name_hint; _, jobrec['driver'] = parse_dertype(ptype, max_derivative=1); jobrec['options'] = opts; #jobrec['options'] = copy.deepcopy(options). try:; > dftd3_driver(jobrec). ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:131:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. jobrec = {'driver': 'energy', 'error': ""Dftd3Error('Unsuccessful run. Possibly -D variant not available in dftd3 version.',)"", ...ule': {'elbl': ['', '', '', ''], 'elea': [12, 12, 1, 1], 'elem': ['C', 'C', 'H', 'H'], 'elez': [6, 6, 1, 1], ...}, ...}; verbose = 1. def dftd3_driver(jobrec, verbose=1):; """"""Drive the jobrec@i (input) -> dftd3rec@i -> dftd3rec@io -> jobrec@io (returned) process. Input Fields; ------------. Optional Input Fields; ---------------------. Output Fields; -------------. Optional Output Fields; ----------------------. """"""; if verbose > 2:; print('[1] {} JOBREC PRE-PLANT (j@i) <<<'.format('DFTD3')); pp.pprint(jobrec); print('>>>'). dftd3rec = dftd3_plant(jobrec). # test json roundtrip; jdftd3rec = json.dumps(dftd3rec); dftd3rec = json.loads(jdftd3rec). if verbose > 3:; print('[2] {}REC PRE-SUBPROCESS (m@i) <<<'.format('DFTD3')); pp.pprint(dftd3rec); print('>>>\n'). dftd3_subprocess(dftd3rec) # updates dftd3rec. if verbose > 3:; print('[3] {}REC POST-SUBPROCESS (m@io) <<<'.format('DFTD3')); pp.pprin",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:13164,error,error,13164,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846,1,['error'],['error']
Availability," only get technical objections from me :-). That said, there's a lot of work involved. About 24 of these recipes are active, https://github.com/psi4/psi4meta/tree/master/conda-recipes . They're not all required to get a minimal psi4 package, but most would be needed to complete the migration. But that's just work :-); The big, multidimensional technical hurdle is libint2, a required dependency.; * I adapted their buildsys for cmake, then the developer adapted that further, but then I was busy and haven't re-reconciled it with psi4. There has never been a release or even a commit on master that works with psi4.; * There is already a libint2 package on c-f, but it has only plain integrals, not derivative ints, and is built with autotools.; * Psi uses a different integral ordering than every other open-source QC package, and this is a *compile-time* option, not a run-time option https://github.com/evaleev/libint/issues/190 That is, no single build of libint2 could work for all the downstreams on c-f that want to use it. (It could be worse -- in integral package land, there's also commonly source-generation-time options :-); * the production-level Linux libint2 package has 26k source files, takes way more than 6h to build running on 12 cores, and needs `ulimit` reset on the building computer to complete; * Windows libint2 package has only ever been built on @andysim 's laptop. I worry that between the careful choice of compiler he had to make and the clang-cl details that something would conflict with c-f's locked-down build tooling. Of course we get away with this now because libint2 gets pulled along with psi from `-c psi4`. I've read some of those threads that it took to get OpenMM GPU code working at production grade on c-f, and I judge that a bigger hurdle than libint2. But libint2 is formidable nonetheless. Glad to talk further, though I don't think I have blocks of time to actually work on this this year. Thanks for using psi4 enough to want cleaner environments!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-926939624:2940,down,down,2940,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-926939624,1,['down'],['down']
Availability," options for the excited states, I got a return message showing the available options but no available methods was shown. Here's the script I ran to obtain the ground state PEC:. import numpy as np; import psi4; import matplotlib.pyplot as plt. # Set Psi4 memory; psi4.set_memory('2 GB'). def compute_energy(bond_length):; molecule = psi4.geometry(f""""""; 0 2; C 0.000000000 0.000000000 0.000000000; F 0.000000000 0.000000000 {bond_length:.6f}; """"""). psi4.set_options({; 'basis': 'cc-pVTZ',; 'reference': 'uhf', # Use UHF for open-shell systems; 'scf_type': 'pk',; 'maxiter': 100,; 'e_convergence': 1e-8,; 'd_convergence': 1e-8; }). # Compute SCF energy; energy = psi4.energy('scf'); return energy. def generate_potential_energy_curve():; bond_lengths = np.arange(0.7, 5.02, 0.02); energies = []. for bond_length in bond_lengths:; try:; energy = compute_energy(bond_length); energies.append(energy); print(f""Bond length: {bond_length:.2f}, Energy: {energy:.8f}""); except Exception as e:; print(f""Error at bond length {bond_length}: {e}""); energies.append(float('nan')). return bond_lengths, energies. # Generate potential energy curve; bond_lengths, energies = generate_potential_energy_curve(). # Save bond lengths and energies to a text file; data_file = 'CF_PEC_0_data.csv'; with open(data_file, 'w') as file:; file.write(""Bond Length (Angstrom) Energy (Hartree)\n""); for length, energy in zip(bond_lengths, energies):; file.write(f""{length:.6f} {energy:.8f}\n""). print(f""Potential energy data saved to {data_file}""). # Plot the potential energy curve; plt.figure(figsize=(8, 6)); plt.plot(bond_lengths, energies, marker='o', linestyle='-', color='b', label='SCF Energy Curve'); plt.xlabel('Bond Length (Angstrom)'); plt.ylabel('Energy (Hartree)'); plt.title('Potential Energy Curve for CF Molecule'); plt.grid(True); plt.legend(); plt.tight_layout(). # Save the plot as an image file; plot_file = 'CF_PEC_Psi4_0.png'; plt.savefig(plot_file); print(f""Plot saved as {plot_file}""). # Display the plot; ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845:1252,Error,Error,1252,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845,1,['Error'],['Error']
Availability," psi::C_DSBEVD(char,char,int,int,double *,int,double *,double *,int,double *,int,int *,int)"" (?C_DSBEVD@psi@@YAHDDHHPEANH00H0HPEAHH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsbevx，该符号在函数 ""int __cdecl psi::C_DSBEVX(char,char,char,int,int,double *,int,double *,int,double,double,int,int,double,int *,double *,double *,int,double *,int *,int *)"" (?C_DSBEVX@psi@@YAHDDDHHPEANH0HNNHHNPEAH00H011@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsbgst，该符号在函数 ""int __cdecl psi::C_DSBGST(char,char,int,int,int,double *,int,double *,int,double *,int,double *)"" (?C_DSBGST@psi@@YAHDDHHHPEANH0H0H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsbgv，该符号在函数 ""int __cdecl psi::C_DSBGV(char,char,int,int,int,double *,int,double *,int,double *,double *,int,double *)"" (?C_DSBGV@psi@@YAHDDHHHPEANH0H00H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsbgvd，该符号在函数 ""int __cdecl psi::C_DSBGVD(char,char,int,int,int,double *,int,double *,int,double *,double *,int,double *,int,int *,int)"" (?C_DSBGVD@psi@@YAHDDHHHPEANH0H00H0HPEAHH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsbgvx，该符号在函数 ""int __cdecl psi::C_DSBGVX(char,char,char,int,int,int,double *,int,double *,int,double *,int,double,double,int,int,double,int *,double *,double *,int,double *,int *,int *)"" (?C_DSBGVX@psi@@YAHDDDHHHPEANH0H0HNNHHNPEAH00H011@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsbtrd，该符号在函数 ""int __cdecl psi::C_DSBTRD(char,char,int,int,double *,int,double *,double *,double *,int,double *)"" (?C_DSBTRD@psi@@YAHDDHHPEANH000H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsgesv，该符号在函数 ""int __cdecl psi::C_DSGESV(int,int,double *,int,int *,double *,int,double *,int,double *,int *)"" (?C_DSGESV@psi@@YAHHHPEANHPEAH0H0H01@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspcon，该符号在函数 ""int __cdecl psi::C_DSPCON(char,int,double *,int *,double,double *,double *,int *)"" (?C_",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:39353,error,error,39353,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability," some other settings, seeing if; turning off density-fitting or changing the grid prods things. I've run the; same calc in Orca which seems to go alright; both use LibXC for wb97M-V,; though Orca has its own VV10 impl. I'll see if non-self-consistent VV10; hits the same issue; if not, I'll play with the VV10 grid settings, too. I do have some other calculations in this dataset with perfectly reasonable; geometries which failed due to ""ADIIS"", which I'd like to sort out. I; suspect they may have a common cause in whatever *actually* caused this; failure, and I'll see what I can dig up. On Thu, Oct 5, 2023 at 9:44 AM Jonathon Misiewicz ***@***.***>; wrote:. > Hello, I'm the developer who implemented ADIIS in Psi4. Thanks for your; > patience. Between some life changes and issues compiling Psi4, I haven't; > been able to look at this issue previously.; >; > 1. Following Susi's suggestion, B3LYP converges straightforwardly. The; > SCF iterations takes one bad step early on, but this happens whether ADIIS; > is on or off.; > 2. If I disable ADIIS completely using your original functional, it; > *still* fails. Once the energy gets to around 284 Eh, it doesn't; > become negative again. *Contrary to the topic title, ADIIS is not at; > fault*.; > 3. The title suggests that you've had previous ADIIS issues; > previously. If so, please send me specific examples. My experience has been; > that ADIIS itself is fine, but can break when other parts of the code are; > badly behaved.; >; > I'll do some digging to see if I can suggest an alternate protocol that; > will actually converge.; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/3051#issuecomment-1748931430>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ABTN7JEC2WPIX354RHZG4ZTX522TPAVCNFSM6AAAAAA5H47C7WVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTONBYHEZTCNBTGA>; > .; > You are receiving this because you authored the thread.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3051#issuecomment-1748950476:1566,fault,fault,1566,https://psicode.org,https://github.com/psi4/psi4/issues/3051#issuecomment-1748950476,1,['fault'],['fault']
Availability," test_grimme_3c ____________________________________________________. molrec = {'elbl': ['', '', '', ''], 'elea': [12, 12, 1, 1], 'elem': ['C', 'C', 'H', 'H'], 'elez': [6, 6, 1, 1], ...}; name_hint = 'pbeh3c', level_hint = 'd3bj', param_tweaks = {'a1': 0.486, 'a2': 4.5, 's6': 1.0, 's8': 0.0}; ptype = 'energy'; dashcoeff_supplement = defaultdict(<function <lambda> at 0x7f5e8db768c8>, {'d2': defaultdict(<class 'dict'>, {'definitions': {'opbe-d2': {'ty...0093}, 'citation': ' M. K. Kesharwani, A. Karton, J.M. L. Martin, J. Chem. Theory Comput. 12, 444-454, 2016\n'}}})}); verbose = 1. def run_dftd3_from_arrays(molrec,; name_hint=None,; level_hint=None,; param_tweaks=None,; ptype='energy',; dashcoeff_supplement=None,; verbose=1):; """"""Specialized signature disentangling dispersion level and; parameters for computing on `molecule` with engine `DFTD3`. See; `dashparam.from_array` for parameter details. """"""; jobrec = {}; jobrec['error'] = ''; jobrec['success'] = None; jobrec['return_output'] = True; prov = {}; prov['creator'] = 'QCDB'; prov['version'] = __version__; prov['routine'] = sys._getframe().f_code.co_name; jobrec['provenance'] = prov. # strip engine hint; if name_hint.startswith('d3-'):; name_hint = name_hint[3:]. opts = {}; opts['level_hint'] = level_hint; opts['params_tweaks'] = param_tweaks; opts['dashcoeff_supplement'] = dashcoeff_supplement. jobrec['molecule'] = molrec; jobrec['method'] = name_hint; _, jobrec['driver'] = parse_dertype(ptype, max_derivative=1); jobrec['options'] = opts; #jobrec['options'] = copy.deepcopy(options). try:; > dftd3_driver(jobrec). ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:131:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. jobrec = {'driver': 'energy', 'error': ""Dftd3Error('Unsuccessful run. Possibly -D variant not available in dftd3 version.',)"", ...ule': {'elbl': ['', '', '', ''], 'elea': [12, 12, 1, 1], 'elem': ['C', 'C', 'H', 'H']",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:12280,error,error,12280,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846,1,['error'],['error']
Availability," the radius of convergence of DIIS, unless the problem is fundamentally ill-behaved (which you again can solve efficiently using GDM). If the DIIS error is in the range `1e-3, ..., 1e-2`, i.e. `log error = [-3, -2]`, then the DIIS solution likely has some truth in it, but it should still be guided by the ADIIS/EDIIS solution. Then you weigh the ADIIS/EDIIS and the C2DIIS solutions by linear interpolation from full ADIIS to `1e-2`, then linear interpolation to full C2DIIS at `1e-3`. Orbital rotation methods like GDM are often also quite good at finding a local minimum. Moreover, if you have analytical orbital derivatives, you can implement an analytical, numerically accurate line search very easily. When you use an exact line search, you're less likely to get stuck on local minima compared to DIIS. For instance, the reason why I found that PP theory breaks sigma-pi symmetry in the acenes was that compared to previous work that had ""showed"" it preserves sigma-pi symmetry, the line search implemented in my code actually just went close to the symmetry preserving saddle point solution, and then recovered from it to decrease the energy quite a lot to break the sigma-pi symmetry. There's often enough of numerical noise so that your solution vector picks up some component of the symmetry breaking dimension. In DIIS you can make these problems converge by increasing the DIIS history length, but then you often see that the SCF is actually going up in energy in the later calculation. Increasing the history length from the default (I think mine is 5, 6, or 7 iterations) to something like 15-25 allows the DIIS procedure to find enough linearly independent vectors to enforce that the resulting orbitals are going to belong to an extremal point. However, these points often then turn out to be saddle points, in which you can decrease the energy slightly (or a lot more) by moving some weight from an orbital to another... Then you have the true second-order schemes, like Newton-Raphs",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2235#issuecomment-874461568:3961,recover,recovered,3961,https://psicode.org,https://github.com/psi4/psi4/issues/2235#issuecomment-874461568,2,['recover'],['recovered']
Availability," to 1e-8 while the threshold is much tighter in Psi4. It can be controlled in newer PySCF as detailed in. I am not sure which threshold are you talking about here. One of the thresholds I found here is much tighter and should be enough imho; https://github.com/pyscf/pyscf/blob/c876e965f3dcd23d6cf8dbb9c9085b44f22ba11e/pyscf/gto/eval_gto.py#L28. > There are also be differences in how linear dependencies are handled in density fitting. As you said, I don't think here there are any major issues regarding linear dependencies. > I would first try to reproduce the energies with exact integrals, since those numbers should match exactly. . I am working on this suggestion. > So in addition to setting mf.small_rho_cutoff = 1e-15 in PySCF you also need to use a smaller threshold for the basis function screening. Is this the same as here (https://github.com/pyscf/pyscf/blob/c876e965f3dcd23d6cf8dbb9c9085b44f22ba11e/pyscf/gto/eval_gto.py#L28) or something else?; I tried reducing it 1e-20 using the config file but still got the same result (an error of around 35 uH). > Usually one is able to get different programs to agree beyond 1 uEh in DFT total energies, when the calculations are converged with respect to all numerical parameters. I usually only look at small calculations, though,. I agree and I am usually able to reproduce the same results as TURBOMOLE RIPER (using mostly defaults) upto $<1 \mu H$ accuracy even for large systems. This is why I was trying to find out why the difference was around 35 uH for decane. Furthermore, since the no. of grid points coming out of pyscf and psi4 were different even for the same number of radial and angular grid points, I even tried to use the same grids as psi4 in pyscf but still got the same result. Here is the script I used; ```python; import os. ncores = 8; os.environ['OMP_NUM_THREADS'] = str(ncores); os.environ[""OPENBLAS_NUM_THREADS""] = str(ncores) # export OPENBLAS_NUM_THREADS=4; os.environ[""MKL_NUM_THREADS""] = str(ncores) # export MKL",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2911#issuecomment-1487617168:1743,error,error,1743,https://psicode.org,https://github.com/psi4/psi4/issues/2911#issuecomment-1487617168,1,['error'],['error']
Availability," v2.0.0 release; Submodule 'tools/clang' (https://github.com/wjakob/clang-cindex-python3) registered for path 'tools/clang'; Cloning into 'tools/clang'...; Submodule path 'tools/clang': checked out '254c7a91e3c6aa254e113197604dafb443f4d429'; [ 25%] No update step for 'pybind11_external'; [ 25%] No patch step for 'pybind11_external'; [ 31%] Performing configure step for 'pybind11_external'; -- The C compiler identification is GNU 5.4.0; -- The CXX compiler identification is GNU 5.4.0; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found PythonInterp: /usr/bin/python3.4 (found version ""3.4.5"") ; -- Found PythonLibs: /usr/lib64/libpython3.4m.so; -- pybind11 v2.0.0; -- Configuring done; -- Generating done; -- Build files have been written to: /usr/qc/psi4.git/objdir/external/upstream/pybind11/pybind11_external-prefix/src/pybind11_external-build. ```. For reasons unknown to me I cannot reproduce my previous compilation error. Previously I could reproduce it even when cloning a brand new copy of psi4. Now it finishes the compilation normally.; Maybe the old psi4 installation directory interfered somehow? Just guessing at this point. However, I still cannot execute psi4. If I use a symlink to the installed binary I get a python error:; ```; import psi4; ImportError: No module named psi4; ```; If I use the full path i get `Intel MKL FATAL ERROR: Cannot load libmkl_avx.so or libmkl_def.so.` instead. But maybe PR https://github.com/psi4/psi4/pull/563 will fix these things for me.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/577#issuecomment-273732640:4340,error,error,4340,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273732640,3,"['ERROR', 'error']","['ERROR', 'error']"
Availability," what the ""Ways to Add Code"" page is supposed to accomplish. There's nothing unifying these sections together, and even individual sections seem disjointed to me. The easier and more rapid development section feels like one part expositing historical developments and one part trying to sell the new developer on the transition to Python. The Psi4Numpy and plugins sections read like one part overviewing the process of going from equations to code and again like one part trying to sell the new developer on NumPy. The ""incorporating code into Psi4"" section reads like a guide on parceling code into C++ parts and Python parts. 2. Are you expecting the reader to already know about dual-language software and OpenMP? The current documentation is written as if you are, but I didn't know about the first one until after I had started working in Psi, and I still only have a hazy idea on the second. 3. I fear that the strategy of ""mostly the vanilla contributor covenant, but with small additions to emphasize that we value inexperienced devs"" will lead to those small additions not being noticed by the inexperienced devs. When I see something as general as, ""to help us maintain this vibrant; and productive atmosphere,"" my immediate thought is that this is administrative babble and only worth skimming. Having read the covenant, I cannot identify the small additions in there. Might I suggest making an explicit section on new developers and making it very specific to Psi? Something like:; _""The continued maintenance and growth of Psi depends on getting, training, and retaining new developers. This brings in prospective developers with widely varying levels of programming experience, including people learning the basics of theory and programming in quantum chemistry, people learning the basics of C++ or Python, and even people learning programming in general. We accept all this and are committed to training new developers to contribute to the code. In particular, we are willing to...""_",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1274#issuecomment-435668745:1566,mainten,maintenance,1566,https://psicode.org,https://github.com/psi4/psi4/pull/1274#issuecomment-435668745,2,['mainten'],['maintenance']
Availability," working version:; ```; import time; import sys; import os; import json. import psi4. def run_fxyz(fxyz, theory='wB97X-D3/def2-TZVP'):; '''; fxyz: absolute path to an xyz file; '''; elements, xyz = [], []; with open(fxyz) as f:; line = next(f); numb_atoms = int(line.split()[0]); line = next(f); charge, multiplicity = map(int, line.split()); for i in range(numb_atoms):; line = next(f); elmnt, x, y, z = line.split() ; elements.append(elmnt); xyz.append((float(x), float(y), float(z))). fxyz = os.path.basename(fxyz); base, ext = os.path.splitext(fxyz). name = base + '_wB97XD3_def2-TZVP'. geom_string = '\n'.join(['%s %f %f %f' % (e, x, y, z) for e, (x, y, z) in zip(elements, xyz)]); geom_string = str(charge) + ' ' + str(multiplicity) + '\n' + geom_string; print(""geom_string"", geom_string). outfile = name + '.psi4'; psi4.core.set_output_file(outfile, False); geom = psi4.geometry(geom_string); settings = {; 'scf_type': 'DF',; 'dft_basis_tolerance': 1e-10,; 'ints_tolerance': 1e-10,; 'dft_pruning_scheme':'robust',; 'S_ORTHOGONALIZATION': 'PARTIALCHOLESKY',; 'S_CHOLESKY_TOLERANCE': 1e-6,; 'wcombine': False,; }; psi4.set_options(settings); start_time = time.time(); grad = psi4.gradient(theory) ; psi4.core.print_variables(); energy = psi4.variable(""SCF TOTAL ENERGY""); psi4.core.clean(); jobtime = time.time() - start_time; results = {; ""time"": float(jobtime),; ""energy"": energy,; ""gradient"": grad.np.tolist(); }; print(f""{psi4.core.get_num_threads()=}""). with open(name + "".json"", ""w"") as fout:; json.dump(results, fout, indent=4). print(""Job %s completed in %.2f seconds with energy %.10f"" % (base, jobtime, energy)). def main(args):; assert args[1].endswith("".xyz""); psi4.set_num_threads(1); run_fxyz(args[1]). if __name__ == '__main__':; main(sys.argv); ```. ## Psithon vs. QCSchema. Another aside -- your input is written as a python script containing a single job and dropping the key results to json. This could also run through QCSchema with json input and json output, either API like",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2548#issuecomment-1100294938:4128,robust,robust,4128,https://psicode.org,https://github.com/psi4/psi4/issues/2548#issuecomment-1100294938,1,['robust'],['robust']
Availability," 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dhsein，该符号在函数 ""int __cdecl psi::C_DHSEIN(char,char,char,int,double *,int,double *,double *,double *,int,double *,int,int,int *,double *,int *,int *)"" (?C_DHSEIN@psi@@YAHDDDHPEANH000H0HHPEAH011@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dhseqr，该符号在函数 ""int __cdecl psi::C_DHSEQR(char,char,int,int,int,double *,int,double *,double *,double *,int,double *,int)"" (?C_DHSEQR@psi@@YAHDDHHHPEANH000H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dopgtr，该符号在函数 ""int __cdecl psi::C_DOPGTR(char,int,double *,double *,double *,int,double *)"" (?C_DOPGTR@psi@@YAHDHPEAN00H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dopmtr，该符号在函数 ""int __cdecl psi::C_DOPMTR(char,char,char,int,int,double *,double *,double *,int,double *)"" (?C_DOPMTR@psi@@YAHDDDHHPEAN00H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dorgbr，该符号在函数 ""int __cdecl psi::C_DORGBR(char,int,int,int,double *,int,double *,double *,int)"" (?C_DORGBR@psi@@YAHDHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dorghr，该符号在函数 ""int __cdecl psi::C_DORGHR(int,int,int,double *,int,double *,double *,int)"" (?C_DORGHR@psi@@YAHHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dorglq，该符号在函数 ""int __cdecl psi::C_DORGLQ(int,int,int,double *,int,double *,double *,int)"" (?C_DORGLQ@psi@@YAHHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dorgql，该符号在函数 ""int __cdecl psi::C_DORGQL(int,int,int,double *,int,double *,double *,int)"" (?C_DORGQL@psi@@YAHHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dorgqr，该符号在函数 ""int __cdecl psi::C_DORGQR(int,int,int,double *,int,double *,double *,int)"" (?C_DORGQR@psi@@YAHHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dorgrq，该符号在函数 ""int __cdecl psi::C_DORGRQ(int,int,int,double *,int,double *,double *,int)"" (?C_DORGRQ@psi@@YAH",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:28796,error,error,28796,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability," 无法解析的外部符号 dtbmv，该符号在函数 ""void __cdecl psi::C_DTBMV(char,char,char,int,int,double *,int,double *,int)"" (?C_DTBMV@psi@@YAXDDDHHPEANH0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dtbsv，该符号在函数 ""void __cdecl psi::C_DTBSV(char,char,char,int,int,double *,int,double *,int)"" (?C_DTBSV@psi@@YAXDDDHHPEANH0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dtpmv，该符号在函数 ""void __cdecl psi::C_DTPMV(char,char,char,int,double *,double *,int)"" (?C_DTPMV@psi@@YAXDDDHPEAN0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dtpsv，该符号在函数 ""void __cdecl psi::C_DTPSV(char,char,char,int,double *,double *,int)"" (?C_DTPSV@psi@@YAXDDDHPEAN0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dtrmm，该符号在函数 ""void __cdecl psi::C_DTRMM(char,char,char,char,int,int,double,double *,int,double *,int)"" (?C_DTRMM@psi@@YAXDDDDHHNPEANH0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dtrmv，该符号在函数 ""void __cdecl psi::C_DTRMV(char,char,char,int,double *,int,double *,int)"" (?C_DTRMV@psi@@YAXDDDHPEANH0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dtrsm，该符号在函数 ""void __cdecl psi::C_DTRSM(char,char,char,char,int,int,double,double *,int,double *,int)"" (?C_DTRSM@psi@@YAXDDDDHHNPEANH0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dtrsv，该符号在函数 ""void __cdecl psi::C_DTRSV(char,char,char,int,double *,int,double *,int)"" (?C_DTRSV@psi@@YAXDDDHPEANH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dbdsdc，该符号在函数 ""int __cdecl psi::C_DBDSDC(char,char,int,double *,double *,double *,int,double *,int,double *,int *,double *,int *)"" (?C_DBDSDC@psi@@YAHDDHPEAN00H0H0PEAH01@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dbdsqr，该符号在函数 ""int __cdecl psi::C_DBDSQR(char,int,int,int,int,double *,double *,double *,int,double *,int,double *,int,double *)"" (?C_DBDSQR@psi@@YAHDHHHHPEAN00H0H0H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 ddisna，该",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:14450,error,error,14450,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,""" (?C_DGELS@psi@@YAHDHHHPEANH0H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgelsd，该符号在函数 ""int __cdecl psi::C_DGELSD(int,int,int,double *,int,double *,int,double *,double,int *,double *,int,int *)"" (?C_DGELSD@psi@@YAHHHHPEANH0H0NPEAH0H1@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgelss，该符号在函数 ""int __cdecl psi::C_DGELSS(int,int,int,double *,int,double *,int,double *,double,int *,double *,int)"" (?C_DGELSS@psi@@YAHHHHPEANH0H0NPEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgelsy，该符号在函数 ""int __cdecl psi::C_DGELSX(int,int,int,double *,int,double *,int,int *,double,int *,double *)"" (?C_DGELSX@psi@@YAHHHHPEANH0HPEAHN10@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgeqlf，该符号在函数 ""int __cdecl psi::C_DGEQLF(int,int,double *,int,double *,double *,int)"" (?C_DGEQLF@psi@@YAHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgeqp3，该符号在函数 ""int __cdecl psi::C_DGEQP3(int,int,double *,int,int *,double *,double *,int)"" (?C_DGEQP3@psi@@YAHHHPEANHPEAH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgeqrf，该符号在函数 ""int __cdecl psi::C_DGEQRF(int,int,double *,int,double *,double *,int)"" (?C_DGEQRF@psi@@YAHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgerfs，该符号在函数 ""int __cdecl psi::C_DGERFS(char,int,int,double *,int,double *,int,int *,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DGERFS@psi@@YAHDHHPEANH0HPEAH0H0H0001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgerqf，该符号在函数 ""int __cdecl psi::C_DGERQF(int,int,double *,int,double *,double *,int)"" (?C_DGERQF@psi@@YAHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgesdd，该符号在函数 ""int __cdecl psi::C_DGESDD(char,int,int,double *,int,double *,double *,int,double *,int,double *,int,int *)"" (?C_DGESDD@psi@@YAHDHHPEANH00H0H0HPEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgesv，该符号在函",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:20912,error,error,20912,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,""" (?C_DGGQRF@psi@@YAHHHHPEANH00H00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dggrqf，该符号在函数 ""int __cdecl psi::C_DGGRQF(int,int,int,double *,int,double *,double *,int,double *,double *,int)"" (?C_DGGRQF@psi@@YAHHHHPEANH00H00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dggsvd3，该符号在函数 ""int __cdecl psi::C_DGGSVD3(char,char,char,int,int,int,int *,int *,double *,int,double *,int,double *,double *,double *,int,double *,int,double *,int,double *,int,int *)"" (?C_DGGSVD3@psi@@YAHDDDHHHPEAH0PEANH1H111H1H1H1H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dggsvp3，该符号在函数 ""int __cdecl psi::C_DGGSVP3(char,char,char,int,int,int,double *,int,double *,int,double,double,int *,int *,double *,int,double *,int,double *,int,int *,double *,double *,int)"" (?C_DGGSVP3@psi@@YAHDDDHHHPEANH0HNNPEAH10H0H0H100H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgtcon，该符号在函数 ""int __cdecl psi::C_DGTCON(char,int,double *,double *,double *,double *,int *,double,double *,double *,int *)"" (?C_DGTCON@psi@@YAHDHPEAN000PEAHN001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgtrfs，该符号在函数 ""int __cdecl psi::C_DGTRFS(char,int,int,double *,double *,double *,double *,double *,double *,double *,int *,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DGTRFS@psi@@YAHDHHPEAN000000PEAH0H0H0001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgtsv，该符号在函数 ""int __cdecl psi::C_DGTSV(int,int,double *,double *,double *,double *,int)"" (?C_DGTSV@psi@@YAHHHPEAN000H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgtsvx，该符号在函数 ""int __cdecl psi::C_DGTSVX(char,char,int,int,double *,double *,double *,double *,double *,double *,double *,int *,double *,int,double *,int,double *)"" (?C_DGTSVX@psi@@YAHDDHHPEAN000000PEAH0H0H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgttrf，该符号在函数 ""int __cdecl psi::C_DGTTRF(int,double *,double *,double *,double *,int *)""",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:26258,error,error,26258,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,""" (?C_DPOEQU@psi@@YAHHPEANH000@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dporfs，该符号在函数 ""int __cdecl psi::C_DPORFS(char,int,int,double *,int,double *,int,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DPORFS@psi@@YAHDHHPEANH0H0H0H000PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dposv，该符号在函数 ""int __cdecl psi::C_DPOSV(char,int,int,double *,int,double *,int)"" (?C_DPOSV@psi@@YAHDHHPEANH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dposvx，该符号在函数 ""int __cdecl psi::C_DPOSVX(char,char,int,int,double *,int,double *,int,char,double *,double *,int,double *,int,double *,double *,double *,double *,int *)"" (?C_DPOSVX@psi@@YAHDDHHPEANH0HD00H0H0000PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpotrf，该符号在函数 ""int __cdecl psi::C_DPOTRF(char,int,double *,int)"" (?C_DPOTRF@psi@@YAHDHPEANH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpotri，该符号在函数 ""int __cdecl psi::C_DPOTRI(char,int,double *,int)"" (?C_DPOTRI@psi@@YAHDHPEANH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpotrs，该符号在函数 ""int __cdecl psi::C_DPOTRS(char,int,int,double *,int,double *,int)"" (?C_DPOTRS@psi@@YAHDHHPEANH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dppcon，该符号在函数 ""int __cdecl psi::C_DPPCON(char,int,double *,double,double *,double *,int *)"" (?C_DPPCON@psi@@YAHDHPEANN00PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dppequ，该符号在函数 ""int __cdecl psi::C_DPPEQU(char,int,double *,double *,double *,double *)"" (?C_DPPEQU@psi@@YAHDHPEAN000@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpprfs，该符号在函数 ""int __cdecl psi::C_DPPRFS(char,int,int,double *,double *,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DPPRFS@psi@@YAHDHHPEAN00H0H000PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dppsv，该符号在函数 ""int __cdecl psi::C_DPPSV(char,int,int,double *,double *,int)"" (?C_DPPSV",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:34940,error,error,34940,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,""", ""SCF_TYPE"")); >; > ValidationError: SCF: SCF_TYPE (MEM_DF) not supported for range-separated functionals.; >; > 5. SAPT0/cc-pVDZ (energies only; water dimer): Passed!; > 6. FNOCC; > - QCISD(T)/cc-pVDZ: *ENERGY FAILED*; >; > PSIO_ERROR: Can't find TOC Entry IWL Buffers; > PSIO_ERROR: unit = 33, errval = 13; > PSIO_ERROR: 13 (no such TOC entry); > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 31, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 4052, in run_fnocc; > fnocc_wfn = core.fnocc(ref_wfn); >; > RuntimeError:; > Fatal Error: PSIO Error; > Error occurred in file: /Users/dasirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; > The most recent 5 function calls were:; >; > - FNO-DF-CCSD(T)/cc-pVDZ: *memDF FAILED* (diskDF passed all); >; > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 43, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 858, in select_ccsd_t_; > return func(name, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 3907, in run_fnodfcc; > set_cholesky_from('CC_TYPE'); > File ""/Users/dasirianni/Gi",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128:7470,Error,Error,7470,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128,4,"['Error', 'error']","['Error', 'error']"
Availability,"""; 0 2; C 0.000000000 0.000000000 0.000000000; F 0.000000000 0.000000000 {bond_length:.6f}; """"""). psi4.set_options({; 'basis': 'cc-pVTZ',; 'reference': 'uhf', # Use UHF for open-shell systems; 'scf_type': 'pk',; 'maxiter': 100,; 'e_convergence': 1e-8,; 'd_convergence': 1e-8; }). # Compute ground state SCF energy; scf_energy = psi4.energy('scf'). # Compute TD-DFT excited state energies; td_options = {; 'tdscf_type': 'full',; 'roots_per_irrep': [1, 0, 0, 0],; }; psi4.set_options(td_options); td_energy, wfn = psi4.energy('td-dft', return_wfn=True); ; # Extract the first excited state energy; first_excited_energy = wfn.extras['TDDFT ROOT 1 EXCITED STATE ENERGY']. return first_excited_energy. def generate_potential_energy_curve():; bond_lengths = np.arange(0.7, 5.02, 0.02); energies = []. for bond_length in bond_lengths:; try:; energy = compute_energy(bond_length); energies.append(energy); print(f""Bond length: {bond_length:.2f}, Energy: {energy:.8f}""); except Exception as e:; print(f""Error at bond length {bond_length}: {e}""); energies.append(float('nan')). return bond_lengths, energies. # Generate potential energy curve; bond_lengths, energies = generate_potential_energy_curve(). # Save bond lengths and energies to a text file; data_file = 'CF_PEC_1_data.csv'; with open(data_file, 'w') as file:; file.write(""Bond Length (Angstrom) Energy (Hartree)\n""); for length, energy in zip(bond_lengths, energies):; file.write(f""{length:.6f} {energy:.8f}\n""). print(f""Potential energy data saved to {data_file}""). # Plot the potential energy curve; plt.figure(figsize=(8, 6)); plt.plot(bond_lengths, energies, marker='o', linestyle='-', color='b', label='First Excited State Energy Curve'); plt.xlabel('Bond Length (Angstrom)'); plt.ylabel('Energy (Hartree)'); plt.title('Potential Energy Curve for CF Molecule (First Excited State)'); plt.grid(True); plt.legend(); plt.tight_layout(). # Save the plot as an image file; plot_file = 'CF_PEC_Psi4_1.png'; plt.savefig(plot_file); print(f""Plot saved ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845:3490,Error,Error,3490,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845,1,['Error'],['Error']
Availability,"""TOLERANCE"" is used in most ofter cutoff-type keywords, so I kept to that. ; Not the biggest fan of it either, but consistency among the keywords is useful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1860#issuecomment-610517532:1,TOLER,TOLERANCE,1,https://psicode.org,https://github.com/psi4/psi4/pull/1860#issuecomment-610517532,1,['TOLER'],['TOLERANCE']
Availability,"""This means the reference state is not stable."" In other words, the SCF solver landed on an excited state, but our algorithm is designed to work only on local minima. You'll need to land on the minimum, either by changing convergence settings such as initial guess or instability analysis. Without knowing more details about your system, I don't know which to recommend. Is the language of ""This means the reference state is not stable."" new to you? If it is, we may need to make the error message more explicit... This is an old issue, but I'd like to keep the issue list trimmer than it currently is. If there's no response from you in a week or so, I'll close this, but feel free to reopen afterwards if the issue isn't settled. Inadvertent excited states are bad.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3134#issuecomment-2162774748:484,error,error,484,https://psicode.org,https://github.com/psi4/psi4/issues/3134#issuecomment-2162774748,1,['error'],['error']
Availability,"""api"" tests fail with the timeout error:; ```; ==================================================================================== test session starts =====================================================================================; platform freebsd13 -- Python 3.9.15, pytest-7.2.0, pluggy-1.0.0; Using --randomly-seed=3542811706; rootdir: /disk-samsung/freebsd-ports/science/psi4/work/psi4-1.7, configfile: pytest.ini; plugins: cov-2.9.0, randomly-3.12.0, timeout-2.1.0, rerunfailures-10.1, flaky-3.7.0, xdist-2.5.0, env-0.6.2, freezegun-0.4.2, mock-1.10.4, forked-1.4.0, hypothesis-6.56.2; collected 1337 items / 19 errors . =========================================================================================== ERRORS ===========================================================================================; ________________________________________________________________________ ERROR collecting tests/pytests/test_adcc.py _________________________________________________________________________; test_adcc.py:9: in <module>; from addons import using; addons.py:9: in <module>; from qcengine.testing import _programs as _programs_qcng; /usr/local/lib/python3.9/site-packages/qcengine/testing.py:173: in <module>; ""psi4"": is_program_new_enough(""psi4"", ""1.2""),; /usr/local/lib/python3.9/site-packages/qcengine/testing.py:62: in is_program_new_enough; candidate_version = qcng.get_program(program).get_version(); /usr/local/lib/python3.9/site-packages/qcengine/programs/psi4.py:90: in get_version; exc[""proc""].wait(timeout=30); /usr/local/lib/python3.9/subprocess.py:1189: in wait; return self._wait(timeout=timeout); /usr/local/lib/python3.9/subprocess.py:1909: in _wait; raise TimeoutExpired(self.args, timeout); E subprocess.TimeoutExpired: Command '['/usr/local/bin/psi4', '--version']' timed out after 30 seconds; ```. I think that most tests themselves pass, but there's something wrong with the python test harness.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2830#issuecomment-1343724097:34,error,error,34,https://psicode.org,https://github.com/psi4/psi4/issues/2830#issuecomment-1343724097,4,"['ERROR', 'error']","['ERROR', 'ERRORS', 'error', 'errors']"
Availability,"# Generate potential energy curve; bond_lengths, energies = generate_potential_energy_curve(). # Save bond lengths and energies to a text file; data_file = 'CF_PEC_1_data.csv'; with open(data_file, 'w') as file:; file.write(""Bond Length (Angstrom) Energy (Hartree)\n""); for length, energy in zip(bond_lengths, energies):; file.write(f""{length:.6f} {energy:.8f}\n""). print(f""Potential energy data saved to {data_file}""). # Plot the potential energy curve; plt.figure(figsize=(8, 6)); plt.plot(bond_lengths, energies, marker='o', linestyle='-', color='b', label='First Excited State Energy Curve'); plt.xlabel('Bond Length (Angstrom)'); plt.ylabel('Energy (Hartree)'); plt.title('Potential Energy Curve for CF Molecule (First Excited State)'); plt.grid(True); plt.legend(); plt.tight_layout(). # Save the plot as an image file; plot_file = 'CF_PEC_Psi4_1.png'; plt.savefig(plot_file); print(f""Plot saved as {plot_file}""). # Display the plot; plt.show(). The error I got is: ; Error: option TDSCF_TYPE is not contained in the list of available options. Error: option TDSCF_TYPE is not contained in the list of available options. Did you mean? SCF_TYPE MCSCF_TYPE SCF_TYPE. Did you mean? SCF_TYPE MCSCF_TYPE SCF_TYPE. Error at bond length 5.000000000000004: Error setting options: {'tdscf_type': ('full', RuntimeError('\nFatal Error: TDSCF_TYPE is not a valid option.\nError occurred in file: /home/conda/feedstock_root/build_artifacts/psi4_1683815705191/work/psi4/src/psi4/liboptions/liboptions.h on line: 55\nThe most recent 5 function calls were:\n\npsi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int)\n'))}; Potential energy data saved to CF_PEC_1_data.csv; Plot saved as CF_PEC_Psi4_1.png. And here's the script I ran to see the available methods and options: ; import psi4. # Test common methods to see if they are available; methods_to_test = ['scf', 'mp2', 'ccsd', 'eom-ccsd', 'td-dft']; available_methods = []. for m",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845:4551,error,error,4551,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845,3,"['Error', 'avail', 'error']","['Error', 'available', 'error']"
Availability,"# Known bugs; - PCM-ROHF is broken. See #999; # Library updates; - PCMSolver is updated to its latest version (1.2.1) This new release of PCMSolver is a maintenance release and no new features were added to Psi4 through this upgrade. However, more tests were added for PCM used in conjunction with ERI algorithms other than PK. A test was also added for geometry optimizations with PCM run using finite differences. See the [library's changelog](https://github.com/PCMSolver/pcmsolver/blob/release/1.2/CHANGELOG.md) for more information on what changed in the library itself.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/959#issuecomment-386064898:153,mainten,maintenance,153,https://psicode.org,https://github.com/psi4/psi4/issues/959#issuecomment-386064898,1,['mainten'],['maintenance']
Availability,"# [Codecov](https://codecov.io/gh/psi4/psi4/pull/1315?src=pr&el=h1) Report; > :exclamation: No coverage uploaded for pull request base (`master@8cb0765`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/psi4/psi4/pull/1315/graphs/tree.svg?width=650&token=w7A43dTksA&height=150&src=pr)](https://codecov.io/gh/psi4/psi4/pull/1315?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #1315 +/- ##; =========================================; Coverage ? 70.32% ; =========================================; Files ? 1508 ; Lines ? 326837 ; Branches ? 0 ; =========================================; Hits ? 229863 ; Misses ? 96974 ; Partials ? 0; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/psi4/psi4/pull/1315?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/psi4/psi4/pull/1315?src=pr&el=footer). Last update [8cb0765...ed8cf13](https://codecov.io/gh/psi4/psi4/pull/1315?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1315#issuecomment-433574980:222,error,error-reference,222,https://psicode.org,https://github.com/psi4/psi4/pull/1315#issuecomment-433574980,2,['error'],['error-reference']
Availability,"# [Codecov](https://codecov.io/gh/psi4/psi4/pull/1676?src=pr&el=h1) Report; > :exclamation: No coverage uploaded for pull request base (`master@8d6a59d`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/psi4/psi4/pull/1676/graphs/tree.svg?width=650&token=w7A43dTksA&height=150&src=pr)](https://codecov.io/gh/psi4/psi4/pull/1676?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #1676 +/- ##; =========================================; Coverage ? 71.08% ; =========================================; Files ? 1468 ; Lines ? 315595 ; Branches ? 0 ; =========================================; Hits ? 224354 ; Misses ? 91241 ; Partials ? 0; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/psi4/psi4/pull/1676?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/psi4/psi4/pull/1676?src=pr&el=footer). Last update [8d6a59d...aeac164](https://codecov.io/gh/psi4/psi4/pull/1676?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1676#issuecomment-510816321:222,error,error-reference,222,https://psicode.org,https://github.com/psi4/psi4/pull/1676#issuecomment-510816321,2,['error'],['error-reference']
Availability,## Medium; - [ ] Design and implement a memory manager. It should keep track of the memory allocated and provide the user with the currently available memory.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/402#issuecomment-230368446:141,avail,available,141,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-230368446,1,['avail'],['available']
Availability,"## Notes on updating your conda distribution of Psi4; There's been a lot of changes to conda defaults channel and the Psi4 conda build since v1.1 c. May 2017. They've all been to the good, but they're drastic enough that a `conda update psi4` is not the right way to go.; #### Changes/Timeline; * July 2017 — Psi4 stops statically linking MKL into the binary and starts dynamically linking `mkl_rt` from conda; * Dec 2017 — Psi4 updates pybind11 from 2.0 to 2.2; * winter/spring 2017/2018 — On Linux, conda defaults channel switches from GCC 4.8.5 to 7.2.0. This means Psi4 doesn't have to ship a potentially interfering 5.2.0 alongside just for C++11 support. On Mac, conda defaults channel switches to a non-AppleClang Clang compiler that supports OpenMP. We can thread again! Also, conda defaults switches their NumPy to link to `mkl_rt` (from a different combination of MKL libs) (so any previous advice to grab NumPy from `-c intel` can be ignored).; * April/May/June 2018 — Psi4 follows defaults channel and incorporates all these improvements. We are currently compatible with defaults to the best of my knowledge (that is, no reason installing psi4 into your up-to-date base environment should cause symbol errors for psi4 or the base). conda-forge channel is still working on their update, so I wouldn't mix psi4 with serious (i.e., compiled) packages from there. #### Updating; * If you're working from Psi4 v1.1 (psi4conda) or any conda Psi4 from 2017, **do not update**. Another clue is if there's a `gcc5` in your `conda list`. Another clue is a `__svml` error.; * Instead, create a new environment for a new Psi4. You may need to `conda update conda` beforehand.; * Then `conda create -n {p4env} python={3.6} psi4 psi4-rt -c psi4/label/dev` You get to choose the `{...}` bits.; * There's at least one report that a fresh Anaconda doesn't work with psi while a fresh Miniconda does. This doesn't sound right to me, but it's worth noting and getting further reports.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/960#issuecomment-397056473:1215,error,errors,1215,https://psicode.org,https://github.com/psi4/psi4/issues/960#issuecomment-397056473,2,['error'],"['error', 'errors']"
Availability,### Tentative Roadmap; - [ ] **1.3a1** when Windows ready; - alphas as needed by downstream users who need tags; - [ ] sometime drop py35 and add py37; - [ ] **feature freeze** & **1.3rc1** 1 Oct 2018; - rc's as needed until code settles; - [ ] **1.3** 1 Nov 2018; - [ ] **PsiCon2018** 9–10 Nov 2018 @ GT,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/972#issuecomment-407559283:81,down,downstream,81,https://psicode.org,https://github.com/psi4/psi4/issues/972#issuecomment-407559283,1,['down'],['downstream']
Availability,"### Upgrade Guide. * `property(...)` --> `properties(...)`; * If you have a (non-py-only) plugin, ; * Add `PSI_API` to your plugin code in [this pattern](https://github.com/edeprince3/v2rdm_casscf/commit/7d4507d8979b61b3333fc6ceab450a61392836ff); * If, upon rebuilding against psi4, you get symbol not found errors, run `c++filt` on the mangled symbol name, then add `PSI_API` to the psi4 repo to make sure the `core.so` you're linking against is exporting the symbol you need. See example [here](https://github.com/psi4/psi4/pull/955). Or just file an issue with your lost symbol.; * Note that anyone wanting to re-use an objdir will need to **thoroughly** remove the old pybind11 v2.0.0 from detectability. This means:; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/includes/pybind11`; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/share/cmake/pybind11`; * `<objdir> rm -rf external/upstream/pybind11`; * Intel 2016 is no longer a valid compiler (doesn't work with py11 >=2.2.1)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/959#issuecomment-381256278:308,error,errors,308,https://psicode.org,https://github.com/psi4/psi4/issues/959#issuecomment-381256278,1,['error'],['errors']
Availability,"##### Summary. With a couple changes, as below, I think this can be ready to go. ##### Testing Setup. * in `~/.psi4rc`: `psi4.set_global_option(""INTEGRAL_PACKAGE"", ""ERD"")`; * in `psi4/driver/driver.py`: the catch from the section below, only with `sys.exit(0)` to force smooth exit from test, rather than the ValidationError; * Under these conditions, only the below fail from full tests. Ignoring the can't-find-exe, the known-failures, and the sow/reap, the ailing test cases involved either LRC functionals or ESP.; ```; The following tests FAILED:; 	151 - dft1 (Failed); 	152 - dft1-alt (Failed); 	154 - dft3 (Failed); 	188 - mints9 (Failed); 	272 - pywrap-db2 (Failed); 	275 - pywrap-freq-g-sowreap (Failed); 	322 - cubeprop-esp (Failed); 	333 - dftd3-version (Failed); 	341 - mrcc-ccsdt (Failed); 	342 - mrcc-ccsd_t_ (Failed); 	343 - mrcc-ccsdt_q_ (Failed); 	344 - mrcc-optfreq (Failed); Errors while running CTest; ```. ##### Recc. TODO. * In main CM, change erd warning to ` message(WARNING ""ERD will build, link, and run in Psi4 just fine. However, it has not been hooked into Psi4 in all roles, notably gradients, LRC DFT energies, and ESP. So upon activating through ``set integral_package erd``, gradients will be caught and halted, but LRC DFT, ESP, and perhaps other types not tested and identified will give *wrong* answers. Consider this your warning."")`. * In `psi4/driver/driver.py`, apply patch below. ```; --- a/psi4/driver/driver.py; +++ b/psi4/driver/driver.py; @@ -82,6 +82,9 @@ def _find_derivative_type(ptype, method_name, user_dertype):; raise ValidationError(""_find_derivative_type: user_dertype should only be None or int!""); dertype = user_dertype; ; + if (core.get_global_option('INTEGRAL_PACKAGE') == 'ERD') and (dertype != 0):; + raise ValidationError(""INTEGRAL_PACKAGE ERD does not play nicely with gradients, so stopping.""); +; # Summary validation; if (dertype == 2) and (method_name in procedures['hessian']):; pass; ```. * Running this yield the following list (30",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/587#issuecomment-276884648:428,failure,failures,428,https://psicode.org,https://github.com/psi4/psi4/pull/587#issuecomment-276884648,2,"['Error', 'failure']","['Errors', 'failures']"
Availability,"##### Watch Out For. Matt's seeing consistent failures among certain functionals in `dft-bench-ionization`. Particularly the first and third (`PWB6K` & `wB97X-D`) while the second is fine. I don't see the problem with Intel `2018.0.2` compilers, and travis doesn't see it in a truncated test case (clang and gcc). So watch out for this, and even if you cut off full tests prematurely b/c the benches are so long, please go ahead and run at least the first few functionals of the test outright for a few weeks so we can get more info.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/961#issuecomment-385090273:46,failure,failures,46,https://psicode.org,https://github.com/psi4/psi4/pull/961#issuecomment-385090273,1,['failure'],['failures']
Availability,"#2158 failed all azure - Win with a mdi failure at test time and Lin with Py detection failures at Psi configure time. So far this one is ok. It's beyond the configure, but this one is using cmake 3.19. 2158 was using cmake 3.20 which has changes to Py detection. I'm keeping an eye on both PRs, but it's hardly caused by the PR changes themselves.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2159#issuecomment-822611626:40,failure,failure,40,https://psicode.org,https://github.com/psi4/psi4/pull/2159#issuecomment-822611626,2,['failure'],"['failure', 'failures']"
Availability,"#2179) ; - Restore debug symbols (#2159) ; - DCT Cleanup (#2152, #2168, #2171, #2182, #2185) ; - Cleanup of some optking functions (#2170) ; - Improve QCEngine interface for empirical dispersion (#2180) ; - Remove CHKPT (#2186) ; - X2C gradient warning (#2200) ; - Update cmake files to enable Flexiblas support from Fedora (#2246) ; ; Bug Fixes ; --------- ; ; - Fix bug in DF-CC when reading wfn with scf_type CD (#1771) ; - Fix computation of properties in DFOCC (#1772) ; - Fix ROHF and CUHF for asymmetric orthogonalizing matrix X (#1781) ; - Fix to NBO, move to python (#1790) ; - Fix memory bug in DMRG (#1802) ; - Add missing E(30)ind term in SAPT (#1803) ; - Typo in error message (#1811) ; - Fix Azure clang omp (#1822) ; - Remove Psi3 from docs (#1815) ; - Fix to omp call (#1823) ; - Handle very bad linear dependencies (#1844) ; - Fixes to vibrational analysis (#1845) ; - Fix threading in SAPT CPHF (#1849) ; - Fix MP2 handling of 1-electron cases (#1857) ; - Replace seg fault with error in DETCI and DFOCC (#1858, #1861) ; - Fix printing of custom basis sets in banner (#1880) ; - Remove omp_set_nested (#1883) ; - Fix seg fault in CCEnergyWavefunction::rotation() (#1887) ; - Threading fix in ESP potential build (#1900) ; - Proper computation of TDMs from DETCI (#1910) ; - Close DETCI files (#1926) ; - Fix UHF after RHF CCSD gradient crash (#1928) ; - Fix ECPa f-electron combinations (#1930) ; - Keep default_psio_manager alive (#1933) ; - Fix printing of coordinates (#1938) ; - Fixes to Treutler gcc5 (#1945) ; - Fix string setting in options (#1955) ; - USAPT spin fix (#1948, #1969) ; - Distinguish SCF and CC densities (#1962) ; - Improvement to PCMsolver interface (#1977) ; - Fix to occ orbital gradient (#1988) ; - Fix to PK (#1990) ; - Fix bug in scf response (#1999) ; - Correct Bragg-Slater radius for Zn (#2000) ; - Skip Ghost atoms interacting with external charges (#1993) ; - Fix inconsistent basis set parsing (#2002) ; - Psi4dev package working on mac (#2005) ; ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:5387,error,error,5387,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683,1,['error'],['error']
Availability,"'] = sys._getframe().f_code.co_name; jobrec['provenance'] = prov. # strip engine hint; if name_hint.startswith('d3-'):; name_hint = name_hint[3:]. opts = {}; opts['level_hint'] = level_hint; opts['params_tweaks'] = param_tweaks; opts['dashcoeff_supplement'] = dashcoeff_supplement. jobrec['molecule'] = molrec; jobrec['method'] = name_hint; _, jobrec['driver'] = parse_dertype(ptype, max_derivative=1); jobrec['options'] = opts; #jobrec['options'] = copy.deepcopy(options). try:; dftd3_driver(jobrec); except Exception as err:; jobrec['success'] = False; jobrec['error'] += repr(err); > raise RuntimeError(err) from err; E RuntimeError: Unsuccessful run. Possibly -D variant not available in dftd3 version. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:135: RuntimeError; ------------------------------------------------- Captured stdout call -------------------------------------------------; -D correction from Py-side. Dftd3Error: Unsuccessful run. Possibly -D variant not available in dftd3 version. ____________________________________________________ test_grimme_3c ____________________________________________________. molrec = {'elbl': ['', '', '', ''], 'elea': [12, 12, 1, 1], 'elem': ['C', 'C', 'H', 'H'], 'elez': [6, 6, 1, 1], ...}; name_hint = 'pbeh3c', level_hint = 'd3bj', param_tweaks = {'a1': 0.486, 'a2': 4.5, 's6': 1.0, 's8': 0.0}; ptype = 'energy'; dashcoeff_supplement = defaultdict(<function <lambda> at 0x7f5e8db768c8>, {'d2': defaultdict(<class 'dict'>, {'definitions': {'opbe-d2': {'ty...0093}, 'citation': ' M. K. Kesharwani, A. Karton, J.M. L. Martin, J. Chem. Theory Comput. 12, 444-454, 2016\n'}}})}); verbose = 1. def run_dftd3_from_arrays(molrec,; name_hint=None,; level_hint=None,; param_tweaks=None,; ptype='energy',; dashcoeff_supplement=None,; verbose=1):; """"""Specialized signature disentangling dispersion level and; parameters for computing on `molecule` with engine `DFTD3`. See; `dashparam.from_array` for parameter details. """"""; jobrec = ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:11267,avail,available,11267,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846,1,['avail'],['available']
Availability,"(1) do other conda packages like NumPy work for you?; Yes, I just opened pycharm using conda as the interpreter, import numpy and converted a list to a np array. (2) can/did you do the Windows equivalent of log out then log back in?; I just restarted my computer, error still persists . (3) what exactly was your ""added the directory to my path"" command?; I went system properties --> environment manager --> Path ; then added the following code in ""C:\Users\erikc\psi4conda"". (4) what does psi4 --version say?; C:\Users\erikc>psi4 --version; Traceback (most recent call last):; File ""C:\Users\erikc\psi4conda\lib\site-packages\psi4\__init__.py"", line 55, in <module>; from . import core; ImportError: DLL load failed while importing core: The specified module could not be found. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""C:\Users\erikc\psi4conda\Scripts\psi4-script.py"", line 182, in <module>; import psi4 # isort:skip; File ""C:\Users\erikc\psi4conda\lib\site-packages\psi4\__init__.py"", line 60, in <module>; raise ImportError(""{0}"".format(err)); ImportError: DLL load failed while importing core: The specified module could not be found.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875053088:264,error,error,264,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875053088,1,['error'],['error']
Availability,"(?C_DGEQP3@psi@@YAHHHPEANHPEAH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgeqrf，该符号在函数 ""int __cdecl psi::C_DGEQRF(int,int,double *,int,double *,double *,int)"" (?C_DGEQRF@psi@@YAHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgerfs，该符号在函数 ""int __cdecl psi::C_DGERFS(char,int,int,double *,int,double *,int,int *,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DGERFS@psi@@YAHDHHPEANH0HPEAH0H0H0001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgerqf，该符号在函数 ""int __cdecl psi::C_DGERQF(int,int,double *,int,double *,double *,int)"" (?C_DGERQF@psi@@YAHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgesdd，该符号在函数 ""int __cdecl psi::C_DGESDD(char,int,int,double *,int,double *,double *,int,double *,int,double *,int,int *)"" (?C_DGESDD@psi@@YAHDHHPEANH00H0H0HPEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgesv，该符号在函数 ""int __cdecl psi::C_DGESV(int,int,double *,int,int *,double *,int)"" (?C_DGESV@psi@@YAHHHPEANHPEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgesvx，该符号在函数 ""int __cdecl psi::C_DGESVX(char,char,int,int,double *,int,double *,int,int *,char,double *,double *,double *,int,double *,int,double *,double *,double *,double *,int *)"" (?C_DGESVX@psi@@YAHDDHHPEANH0HPEAHD000H0H00001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgetrf，该符号在函数 ""int __cdecl psi::C_DGETRF(int,int,double *,int,int *)"" (?C_DGETRF@psi@@YAHHHPEANHPEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgetri，该符号在函数 ""int __cdecl psi::C_DGETRI(int,double *,int,int *,double *,int)"" (?C_DGETRI@psi@@YAHHPEANHPEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgetrs，该符号在函数 ""int __cdecl psi::C_DGETRS(char,int,int,double *,int,int *,double *,int)"" (?C_DGETRS@psi@@YAHDHHPEANHPEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dggbak，该符号在函数 ""int __cdecl psi::C_D",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:21956,error,error,21956,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"(?C_DPPCON@psi@@YAHDHPEANN00PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dppequ，该符号在函数 ""int __cdecl psi::C_DPPEQU(char,int,double *,double *,double *,double *)"" (?C_DPPEQU@psi@@YAHDHPEAN000@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpprfs，该符号在函数 ""int __cdecl psi::C_DPPRFS(char,int,int,double *,double *,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DPPRFS@psi@@YAHDHHPEAN00H0H000PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dppsv，该符号在函数 ""int __cdecl psi::C_DPPSV(char,int,int,double *,double *,int)"" (?C_DPPSV@psi@@YAHDHHPEAN0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dppsvx，该符号在函数 ""int __cdecl psi::C_DPPSVX(char,char,int,int,double *,double *,char,double *,double *,int,double *,int,double *,double *,double *,double *,int *)"" (?C_DPPSVX@psi@@YAHDDHHPEAN0D00H0H0000PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpptrf，该符号在函数 ""int __cdecl psi::C_DPPTRF(char,int,double *)"" (?C_DPPTRF@psi@@YAHDHPEAN@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpptri，该符号在函数 ""int __cdecl psi::C_DPPTRI(char,int,double *)"" (?C_DPPTRI@psi@@YAHDHPEAN@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpptrs，该符号在函数 ""int __cdecl psi::C_DPPTRS(char,int,int,double *,double *,int)"" (?C_DPPTRS@psi@@YAHDHHPEAN0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dptcon，该符号在函数 ""int __cdecl psi::C_DPTCON(int,double *,double *,double,double *,double *)"" (?C_DPTCON@psi@@YAHHPEAN0N00@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpteqr，该符号在函数 ""int __cdecl psi::C_DPTEQR(char,int,double *,double *,double *,int,double *)"" (?C_DPTEQR@psi@@YAHDHPEAN00H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dptrfs，该符号在函数 ""int __cdecl psi::C_DPTRFS(int,int,double *,double *,double *,double *,double *,int,double *,int,double *,double *,double *)"" (?C_DPTRFS@psi@@YAHHHPEAN0000H0H000@Z)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:36335,error,error,36335,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"(base) C:\Users\erikc>conda create -n p4envnew python=3.8 psi4 -c psi4/label/dev; Collecting package metadata (current_repodata.json): done; Solving environment: failed with repodata from current_repodata.json, will retry with next repodata source.; Collecting package metadata (repodata.json): done; Solving environment: \; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; Examining @/win-64::__win==0=0: 80%|████████████████████████████████████████████████████████████████████████████▊ | 4/5 [00:00<00:00, 14.60it/s]-failed. UnsatisfiableError: The following specifications were found to be incompatible with each other:. Output in format: Requested package -> Available versions. Package python conflicts for:; psi4 -> msgpack-python -> python[version='>=2.7,<2.8.0a0|>=3.6,<3.7.0a0|>=3.8,<3.9.0a0|>=3.9,<3.10.0a0|>=3.7,<3.8.0a0|>=3.5,<3.6.0a0|>=3.6|>=3.5|>=3.6.0']; psi4 -> python=3.8; python=3.8. I dont think it is the environment name",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1979#issuecomment-874814114:722,Avail,Available,722,https://psicode.org,https://github.com/psi4/psi4/issues/1979#issuecomment-874814114,1,['Avail'],['Available']
Availability,"(int,int,double *,int,int *)"" (?C_DGETRF@psi@@YAHHHPEANHPEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgetri，该符号在函数 ""int __cdecl psi::C_DGETRI(int,double *,int,int *,double *,int)"" (?C_DGETRI@psi@@YAHHPEANHPEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgetrs，该符号在函数 ""int __cdecl psi::C_DGETRS(char,int,int,double *,int,int *,double *,int)"" (?C_DGETRS@psi@@YAHDHHPEANHPEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dggbak，该符号在函数 ""int __cdecl psi::C_DGGBAK(char,char,int,int,int,double *,double *,int,double *,int)"" (?C_DGGBAK@psi@@YAHDDHHHPEAN0H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dggbal，该符号在函数 ""int __cdecl psi::C_DGGBAL(char,int,double *,int,double *,int,int *,int *,double *,double *,double *)"" (?C_DGGBAL@psi@@YAHDHPEANH0HPEAH1000@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgges，该符号在函数 ""int __cdecl psi::C_DGEGS(char,char,int,double *,int,double *,int,double *,double *,double *,double *,int,double *,int,double *,int)"" (?C_DGEGS@psi@@YAHDDHPEANH0H0000H0H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dggesx，该符号在函数 ""int __cdecl psi::C_DGGESX(char,char,char,char,int,double *,int,double *,int,int *,double *,double *,double *,double *,int,double *,int,double *,double *,double *,int,int *,int)"" (?C_DGGESX@psi@@YAHDDDDHPEANH0HPEAH0000H0H000H1H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dggev，该符号在函数 ""int __cdecl psi::C_DGEGV(char,char,int,double *,int,double *,int,double *,double *,double *,double *,int,double *,int,double *,int)"" (?C_DGEGV@psi@@YAHDDHPEANH0H0000H0H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dggevx，该符号在函数 ""int __cdecl psi::C_DGGEVX(char,char,char,char,int,double *,int,double *,int,double *,double *,double *,double *,int,double *,int,int *,int *,double *,double *,double *,double *,double *,double *,double *,int,int *)"" (?C_DGGEVX@psi@@YAHDDDDHPEANH0H0000H0HPE",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:23390,error,error,23390,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,")"" (?C_DSPCON@psi@@YAHDHPEANPEAHN001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspev，该符号在函数 ""int __cdecl psi::C_DSPEV(char,char,int,double *,double *,double *,int,double *)"" (?C_DSPEV@psi@@YAHDDHPEAN00H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspevd，该符号在函数 ""int __cdecl psi::C_DSPEVD(char,char,int,double *,double *,double *,int,double *,int,int *,int)"" (?C_DSPEVD@psi@@YAHDDHPEAN00H0HPEAHH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspevx，该符号在函数 ""int __cdecl psi::C_DSPEVX(char,char,char,int,double *,double,double,int,int,double,int *,double *,double *,int,double *,int *,int *)"" (?C_DSPEVX@psi@@YAHDDDHPEANNNHHNPEAH00H011@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspgst，该符号在函数 ""int __cdecl psi::C_DSPGST(int,char,int,double *,double *)"" (?C_DSPGST@psi@@YAHHDHPEAN0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspgv，该符号在函数 ""int __cdecl psi::C_DSPGV(int,char,char,int,double *,double *,double *,double *,int,double *)"" (?C_DSPGV@psi@@YAHHDDHPEAN000H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspgvd，该符号在函数 ""int __cdecl psi::C_DSPGVD(int,char,char,int,double *,double *,double *,double *,int,double *,int,int *,int)"" (?C_DSPGVD@psi@@YAHHDDHPEAN000H0HPEAHH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspgvx，该符号在函数 ""int __cdecl psi::C_DSPGVX(int,char,char,char,int,double *,double *,double,double,int,int,double,int *,double *,double *,int,double *,int *,int *)"" (?C_DSPGVX@psi@@YAHHDDDHPEAN0NNHHNPEAH00H011@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsprfs，该符号在函数 ""int __cdecl psi::C_DSPRFS(char,int,int,double *,double *,int *,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DSPRFS@psi@@YAHDHHPEAN0PEAH0H0H0001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspsv，该符号在函数 ""int __cdecl psi::C_DSPSV(char,int,int,double *,int *,double *,int)"" (?C_DSPSV@psi@@YAHDHHPE",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:41366,error,error,41366,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,")"" (?C_DTRMV@psi@@YAXDDDHPEANH0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dtrsm，该符号在函数 ""void __cdecl psi::C_DTRSM(char,char,char,char,int,int,double,double *,int,double *,int)"" (?C_DTRSM@psi@@YAXDDDDHHNPEANH0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dtrsv，该符号在函数 ""void __cdecl psi::C_DTRSV(char,char,char,int,double *,int,double *,int)"" (?C_DTRSV@psi@@YAXDDDHPEANH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dbdsdc，该符号在函数 ""int __cdecl psi::C_DBDSDC(char,char,int,double *,double *,double *,int,double *,int,double *,int *,double *,int *)"" (?C_DBDSDC@psi@@YAHDDHPEAN00H0H0PEAH01@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dbdsqr，该符号在函数 ""int __cdecl psi::C_DBDSQR(char,int,int,int,int,double *,double *,double *,int,double *,int,double *,int,double *)"" (?C_DBDSQR@psi@@YAHDHHHHPEAN00H0H0H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 ddisna，该符号在函数 ""int __cdecl psi::C_DDISNA(char,int,int,double *,double *)"" (?C_DDISNA@psi@@YAHDHHPEAN0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgbbrd，该符号在函数 ""int __cdecl psi::C_DGBBRD(char,int,int,int,int,int,double *,int,double *,double *,double *,int,double *,int,double *,int,double *)"" (?C_DGBBRD@psi@@YAHDHHHHHPEANH000H0H0H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgbcon，该符号在函数 ""int __cdecl psi::C_DGBCON(char,int,int,int,double *,int,int *,double,double *,double *,int *)"" (?C_DGBCON@psi@@YAHDHHHPEANHPEAHN001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgbequ，该符号在函数 ""int __cdecl psi::C_DGBEQU(int,int,int,int,double *,int,double *,double *,double *,double *,double *)"" (?C_DGBEQU@psi@@YAHHHHHPEANH00000@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgbrfs，该符号在函数 ""int __cdecl psi::C_DGBRFS(char,int,int,int,int,double *,int,double *,int,int *,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DGBRFS@psi@@YAHDHHHHPEANH0HPE",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:15492,error,error,15492,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"):; psi2dump[0] = 1 # A; psi2dump[1] = 4 # B1; psi2dump[2] = 3 # B2; psi2dump[3] = 2 # B3; if ( 'c2v' == symm ):; psi2dump[0] = 1 # A1; psi2dump[1] = 4 # A2; psi2dump[2] = 2 # B1; psi2dump[3] = 3 # B2; if ( 'c2h' == symm ):; psi2dump[0] = 1 # Ag; psi2dump[1] = 4 # Bg; psi2dump[2] = 2 # Au; psi2dump[3] = 3 # Bu; if ( 'd2h' == symm ):; psi2dump[0] = 1 # Ag; psi2dump[1] = 4 # B1g; psi2dump[2] = 6 # B2g; psi2dump[3] = 7 # B3g; psi2dump[4] = 8 # Au; psi2dump[5] = 5 # B1u; psi2dump[6] = 3 # B2u; psi2dump[7] = 2 # B3u. return psi2dump. and the replacement. core.print_out('Writing integrals in FCIDUMP format to ' + fname + '\n'); psi2dump = fcidump_helper(wfn); # Generate FCIDUMP header; header = '&FCI\n'; header += 'NORB={:d},\n'.format(nbf); header += 'NELEC={:d},\n'.format(nelectron); header += 'MS2={:d},\n'.format(wfn.nalpha() - wfn.nbeta()); header += 'UHF=.{}.,\n'.format(not wfn.same_a_b_orbs()).upper(); orbsym = ''; for h in range(active_mopi.n()):; for n in range(frzcpi[h], frzcpi[h] + active_mopi[h]):; orbsym += '{:d},'.format(psi2dump[h]); if not wfn.same_a_b_orbs():; orbsym += '{:d},'.format(psi2dump[h]); header += 'ORBSYM={}\n'.format(orbsym); header += 'ISYM={:d},\n'.format(psi2dump[wfn.irrep()]); header += '&END\n'; with open(fname, 'w') as intdump:; intdump.write(header). Please also note that ""ISYM"" is printed according to FCIDUMP convention on a separate line subsequent the ""ORBSYM"" line. I do not have an idea whether the wfn.irrep() call is implemented or which equivalent to use, but better versed psi4 programmers will know what to do. Please note that, for example, in pyscf, there is:. - a package-provided [fcidump](https://github.com/sunqm/pyscf/blob/a22a531a07c862ce3681c0d069c97aa192ede032/pyscf/tools/fcidump.py), and; - a separate [fcidump](https://github.com/sunqm/pyscf/blob/a22a531a07c862ce3681c0d069c97aa192ede032/pyscf/fciqmcscf/fciqmc.py) for interfacing with fciqmc (with renumbered orbital irreps),. so it's a common error. Best regards,; Sebastian",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1431#issuecomment-449621130:2471,error,error,2471,https://psicode.org,https://github.com/psi4/psi4/issues/1431#issuecomment-449621130,1,['error'],['error']
Availability,"); chemps2 = 0.06 sec*proc (1 test); df = 0.06 sec*proc (1 test); dfmp2 = 0.06 sec*proc (1 test); fcidump = 0.06 sec*proc (1 test); json = 4.46 sec*proc (1 test); properties = 0.06 sec*proc (1 test); psi = 17.03 sec*proc (12 tests); psi4numpy = 9.97 sec*proc (2 tests); python = 1.99 sec*proc (1 test); quicktests = 17.03 sec*proc (12 tests); sapt = 0.06 sec*proc (1 test); scf = 0.06 sec*proc (1 test); smoketests = 17.03 sec*proc (12 tests); tutorial = 0.05 sec*proc (1 test). Total Test time (real) = 17.19 sec. The following tests FAILED:; 	 7 - casscf-sp (Failed); 	 22 - cc1 (Failed); 	132 - dfmp2-1 (Failed); 	196 - fcidump (Failed); 	330 - sapt1 (Failed); 	357 - scf-property (Failed); 	372 - tu1-h2o-energy (Failed); 	424 - chemps2-scf-n2 (Failed); Errors while running CTest; ```; The casscf-sp error is; ```; 7/428 Test: casscf-sp; Command: ""/usr/bin/python3.12"" ""/builddir/build/BUILD/psi4-1.3.2/tests/runtest.py"" ""/builddir/build/BUILD/psi4-1.3.2/tests/casscf-sp/input.dat"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux; -build/testresults.log"" ""false"" ""/builddir/build/BUILD/psi4-1.3.2"" ""false"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests/casscf-sp/output.dat"" ""/builddir/build/BUILD/psi4-1.3.2/; redhat-linux-build/stage/bin/psi4"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/share/psi4"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/lib64/python3.12/site-pac; kages""; Directory: /builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests/casscf-sp; ""casscf-sp"" start time: Aug 14 00:32 UTC; Output:; ----------------------------------------------------------; Command ['/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/bin/psi4', '/builddir/build/BUILD/psi4-1.3.2/tests/casscf-sp/input.dat', '/builddir/build/BUILD/psi4-1.3.2/redhat-linux-bu; ild/tests/casscf-sp/output.dat', '-l', '/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/share/psi4'] execution failed: Exec format error; <end of output>; Test time = 0.21 sec; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680:3388,error,error,3388,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680,1,['error'],['error']
Availability,"* Fixed mp2-module failure. Changed the symmetry reset to only occur if the user provided a default symmetry. My changes overrode Bozkaya's DF code running computations in C1, and the computational symmetry change resulted in BH3 landing on different UHF solutions.; * Fixed pywrap-all failure. Per discussion in Slack, findif now saves and resets the core variables from the reference, after all displacements are finished.; * Addressed concerns of @andysim. I now set DOCC explicitly for my test case, to show compatibility with my symmetry-breaking findif solution.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1424#issuecomment-447413964:19,failure,failure,19,https://psicode.org,https://github.com/psi4/psi4/pull/1424#issuecomment-447413964,2,['failure'],['failure']
Availability,"* I think CDS would like to see levelshifting as a widely available convergence strategy. But no need to tack it onto this project.; * The disappearance of the level_shift keyword (for reference, used by dfocc, occ, mcscf) doesn't trouble me much. If `throw_deprecation_errors` can't catch set as global, only way I can think of to emit a warning is to add it back to read_options, then probe in the occ module itself and throw an exception there.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1783#issuecomment-575501992:58,avail,available,58,https://psicode.org,https://github.com/psi4/psi4/pull/1783#issuecomment-575501992,1,['avail'],['available']
Availability,"* Psi4 `v1.2rc3.dev1` compile pure GCC 7.2.0 w/`libgomp` for threading.; * OpenBLAS `v0.2.20-453-gf5959f2` compile pure GCC 5.2 w/`libgomp` for threading (except for line 5, which is conda 0.2.20, 9ac9557`).; * No Intel compilers or `libiomp5` available or in `ldd -v`. NumPy is still the conda nomkl NumPy, but its links to openblas are unresolved, so tests are either not hitting that submodule or it's using the below-described libopenblas loaded by psi. | openblas compilation | psiapi speedup `-n4` | psithon speedup `-n4` | ion pass `-n1` | ion pass `-n4` |; | :--- | ---: | ---: | :---: | :---: |; | `USE_THREAD=0 USE_OPENMP=0` | 1.00 | 1.54 | yes | yes |; | `USE_THREAD=1 USE_OPENMP=0` | 0.90 | warn + 0.85 | no | no |; | `USE_THREAD=1 USE_OPENMP=0 USE_SIMPLE_THREADED_LEVEL3=1` | 1.20 | warn + 1.40 | no | no |; | `USE_THREAD=1 USE_OPENMP=1` | 1.04 | 2.27 | yes | no |; | CONDA `USE_THREAD=1 USE_OPENMP=0` | ? | warn + ?| no | no |; | EDIT: `USE_THREAD=1 USE_OPENMP=1 NUM_PARALLEL=4` | 1.00 | 1.77 | yes | no |. * ""warn"": oodles of ""OpenBLAS Warning : Detect OpenMP Loop and this application may hang. Please rebuild the library with USE_OPENMP=1 option."". * full OpenBLAS compile command for row 4; ```; make CC=gcc FC=gfortran DYNAMIC_ARCH=1 BINARY=64 NO_LAPACK=0 NO_AFFINITY=1 USE_THREAD=1 USE_OPENMP=1 NUM_THREADS=128 CFLAGS=""-march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -O2 -pipe"" FFLAGS=""-fopenmp -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -O2 -pipe""; ```. Unless someone sees a problem with my build configs, it's not looking too encouraging, except for wholly unthreaded. Troubling also that this contradicts @hokru's findings of good behavior for `USE_OPENMP=1` from source build.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-390869229:244,avail,available,244,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-390869229,1,['avail'],['available']
Availability,"* Yes, eventually will support `linux-64`, `osx-64`, `osx-arm64`, `win-64` arch. staged-recipes won't have osx-arm64, though.; * Still TBD if Windows psi4 packages will include Fortran addons like dkh, gdma, pcmsolver.; * All arch will be explicitly linked to MKL (that is, `libblas=*=*mkl`). dependencies that themselves need blas/lapack are getting linked generically so runtime selection is an option, but psi4 itself is getting fixed to MKL. I'm open to someday linking psi4 generically, but I think other distributions need to be tested and any performance and oversubscription issues addressed first.; * yes, as Matt says, you have to dig around on Azure, find ""artifacts"", download, and then can install locally (or upload to a separate anaconda.org acct).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-1483880346:680,down,download,680,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1483880346,1,['down'],['download']
Availability,"* You can ignore what I said about py27, too. v1.2.1 will be good with 2.7, 3.5, 3.6 (and probably 3.7, though not tested). But boost is definitely not used c. v1.1. * I'm trying to remember the AM conventions. I think it's that quicktests will pass with AM5, while full tests requires AM6. Those ""rules"" may have broken down, so it's possible that some of those tests will heal with higher AM libint. * If you can `cat Testing/Temporary/LastTest*log` after `ctest`, that may be helpful for diagnosis.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1302#issuecomment-451522000:321,down,down,321,https://psicode.org,https://github.com/psi4/psi4/issues/1302#issuecomment-451522000,1,['down'],['down']
Availability,"* generating download site directions above; * shift alias to new installs/content file; * NYI commit new files, PR, and upload site. * On GH site ""Draft a New Release"". * grab the 1.3 manual by `cp -pR master 1.3` on godaddy; * NYI adjust the front-matter tags. ## reset; * NYI new ltrt line; * NYI psi4-multi and psi4-docs back to master; * NYI turn off anom and go back to norm",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1496#issuecomment-468650036:13,down,download,13,https://psicode.org,https://github.com/psi4/psi4/issues/1496#issuecomment-468650036,1,['down'],['download']
Availability,"* run `make sphinxman` at least once by hand and check in resulting psifiles.py and all the updated and new `samples/` files and dirs. * figure out any new `Additional Contributors` since last release and edit header.py accordingly. Get their particulars for codemeta.json. invite any >=3 PRs to GH org. * follow the procedure outlined in [cbcy](https://github.com/psi4/psi4meta/blob/master/conda-recipes/conda_build_config.yaml) and [poodle](https://github.com/psi4/psi4meta/blob/master/psinet-nightly/kitandkapoodle.py) (I haven't pushed the versions with enhanced comments) to; * update upstream and downstream deps/addons that may have advanced since last release. edit recipes and psi4 `external/` code.; * rebuild the psi4, psi4-rt, psi4-dev, psi4-docs stack on Linux and Mac",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1496#issuecomment-460674604:603,down,downstream,603,https://psicode.org,https://github.com/psi4/psi4/issues/1496#issuecomment-460674604,1,['down'],['downstream']
Availability,"* these four mols https://github.com/MolSSI/QCEngine/blob/master/qcengine/programs/tests/standard_suite_ref.py#L12-L40; * rhf for hf & h2o. uhf/rohf for bh3p & nh2.; * cc-pvdz for hf & bh2p. aug-cc-pvdz & cfour-qz2p for h2o & nh2.; * conv, df, cd, though conv only is a fine start; * all-electron (ae) and frozen-core (fc); * lccd, olccd, lccsd all appreciated, though maybe your code doesn't cover the last; * energies and energy components of first priority, but should you have dipoles, gradients, etc., glad to collect them now. You don't have to do any of this -- I can take values from existing psi modules -- but an independent reference implementation is not to be sniffed at, and you can ensure psi will fail if it doesn't match you from here out. * either send me numbers (non-redundant; that is, corl, not corl and tot) or PR directly to qcengine (just that one standard_suite_ref.py file); * I'm only testing to 1.e-6 but refs generated with https://github.com/psi4/psi4/blob/master/tests/pytests/standard_suite_runner.py#L60-L63. I'll merge this PR",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1909#issuecomment-635391683:787,redundant,redundant,787,https://psicode.org,https://github.com/psi4/psi4/pull/1909#issuecomment-635391683,1,['redundant'],['redundant']
Availability,"* when publishing a new installer page, move the ""latest"" alias https://github.com/psi4/psicode-hugo-website/blob/master/content/installs/v13rc2.md to the new page so that ""Downloads"" on the naviagtion bar points there.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1496#issuecomment-465437366:173,Down,Downloads,173,https://psicode.org,https://github.com/psi4/psi4/issues/1496#issuecomment-465437366,1,['Down'],['Downloads']
Availability,"*)"" (?C_DPBCON@psi@@YAHDHHPEANHN00PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbequ，该符号在函数 ""int __cdecl psi::C_DPBEQU(char,int,int,double *,int,double *,double *,double *)"" (?C_DPBEQU@psi@@YAHDHHPEANH000@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbrfs，该符号在函数 ""int __cdecl psi::C_DPBRFS(char,int,int,int,double *,int,double *,int,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DPBRFS@psi@@YAHDHHHPEANH0H0H0H000PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbstf，该符号在函数 ""int __cdecl psi::C_DPBSTF(char,int,int,double *,int)"" (?C_DPBSTF@psi@@YAHDHHPEANH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbsv，该符号在函数 ""int __cdecl psi::C_DPBSV(char,int,int,int,double *,int,double *,int)"" (?C_DPBSV@psi@@YAHDHHHPEANH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbsvx，该符号在函数 ""int __cdecl psi::C_DPBSVX(char,char,int,int,int,double *,int,double *,int,char,double *,double *,int,double *,int,double *,double *,double *,double *,int *)"" (?C_DPBSVX@psi@@YAHDDHHHPEANH0HD00H0H0000PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbtrf，该符号在函数 ""int __cdecl psi::C_DPBTRF(char,int,int,double *,int)"" (?C_DPBTRF@psi@@YAHDHHPEANH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbtrs，该符号在函数 ""int __cdecl psi::C_DPBTRS(char,int,int,int,double *,int,double *,int)"" (?C_DPBTRS@psi@@YAHDHHHPEANH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpocon，该符号在函数 ""int __cdecl psi::C_DPOCON(char,int,double *,int,double,double *,double *,int *)"" (?C_DPOCON@psi@@YAHDHPEANHN00PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpoequ，该符号在函数 ""int __cdecl psi::C_DPOEQU(int,double *,int,double *,double *,double *)"" (?C_DPOEQU@psi@@YAHHPEANH000@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dporfs，该符号在函数 ""int __cdecl psi::C_DPORFS(char,int,int,double *,int,double *,int,double ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:33061,error,error,33061,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"**General comments**: The `robust` scheme uses the following orders in the regions: [7, nominal-7, nominal, nominal] Meaning only the inner 50% are pruned. And things will break i think when the order is 7 -> 86 points or smaller.; Also for `Treutler` it does not make much sense to go below 11 -> 194 points because the order of the core region is fixed at that and you don't want to have the outer regions with less points than the inner.; I didn't take into account people would want to do pruning with small grids to be honest and even if things do not ""break"" there will certainly an unwanted imbalance. This needs to be at least checked by the code in the future.; As for pruning schemes for small grids, one could come up with a new scheme or even let the user input an array with orders to make grid pruning fully manually adjustable. **On topic**: I don't really understand why this should happen currently.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2890#issuecomment-1458711309:27,robust,robust,27,https://psicode.org,https://github.com/psi4/psi4/issues/2890#issuecomment-1458711309,1,['robust'],['robust']
Availability,"**Update on the Azure CI failures**; The problem seems _not_ to be entirely controllable through flags. Parts of the xtensor stack code base (xtensor itself, xsimd, possibly xtensor-python) need to be changed and I am working on it. Once I have PR submitted to all these projects, they are hopefully merged and new releases minted.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-487287211:25,failure,failures,25,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-487287211,1,['failure'],['failures']
Availability,"**user summary**:; This is not a bug that is affecting any DFT calculations currently run with PSI4.; The bug is found in unused code. ---. The radial grid is entirely build with https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/cubature.cc#L2433. The function supposed to call `build_becke` `build_treutler` is never called, instead a dummy function is called that only populates the `RadialGrid` class, which is never used in `cubature.cc` anyway (looks like it is nowhere used). . On the plus side, the bug fixed with this PR is never encountered. The downside is that the TREUTLER scheme is not entirely correct because at least the eta mapping parameters (`TreutlerEta`) are missing. If `build_treutler` is correct or not, I cannot 100% say. In a quick & dirty fashion I enforced it. _Without_ eta (set to 1.0) all DFT `ctests` pass. That's good!; I added the missing eta parameters with updated BS radii a while ago, but didn't notice that the etas changed nothing. I thought the effect was just too small. But there is a very minor one. Including the etas has 11 of 37 tests fail. (Did not run the pytests). I will refactor `cubature.cc` ..somehow.. in the near future. ---. I will approve & merge tomorrow.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2044#issuecomment-745602400:568,down,downside,568,https://psicode.org,https://github.com/psi4/psi4/pull/2044#issuecomment-745602400,1,['down'],['downside']
Availability,"*,double *,double *,double *,int,double *,int)"" (?C_DGEES@psi@@YAHDDHPEANHPEAH000H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgeesx，该符号在函数 ""int __cdecl psi::C_DGEESX(char,char,char,int,double *,int,int *,double *,double *,double *,int,double *,double *,double *,int,int *,int)"" (?C_DGEESX@psi@@YAHDDDHPEANHPEAH000H000H1H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgeev，该符号在函数 ""int __cdecl psi::C_DGEEV(char,char,int,double *,int,double *,double *,double *,int,double *,int,double *,int)"" (?C_DGEEV@psi@@YAHDDHPEANH000H0H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgeevx，该符号在函数 ""int __cdecl psi::C_DGEEVX(char,char,char,char,int,double *,int,double *,double *,double *,int,double *,int,int *,int *,double *,double *,double *,double *,double *,int,int *)"" (?C_DGEEVX@psi@@YAHDDDDHPEANH000H0HPEAH100000H1@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgehrd，该符号在函数 ""int __cdecl psi::C_DGEHRD(int,int,int,double *,int,double *,double *,int)"" (?C_DGEHRD@psi@@YAHHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgelqf，该符号在函数 ""int __cdecl psi::C_DGELQF(int,int,double *,int,double *,double *,int)"" (?C_DGELQF@psi@@YAHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgels，该符号在函数 ""int __cdecl psi::C_DGELS(char,int,int,int,double *,int,double *,int,double *,int)"" (?C_DGELS@psi@@YAHDHHHPEANH0H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgelsd，该符号在函数 ""int __cdecl psi::C_DGELSD(int,int,int,double *,int,double *,int,double *,double,int *,double *,int,int *)"" (?C_DGELSD@psi@@YAHHHHPEANH0H0NPEAH0H1@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgelss，该符号在函数 ""int __cdecl psi::C_DGELSS(int,int,int,double *,int,double *,int,double *,double,int *,double *,int)"" (?C_DGELSS@psi@@YAHHHHPEANH0H0NPEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgelsy，该符号在函数 ""int __cdecl psi::C_DG",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:19500,error,error,19500,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"*,int *,double *,int,double *,int,double *,int,int *,double *,double *,int)"" (?C_DGGSVP3@psi@@YAHDDDHHHPEANH0HNNPEAH10H0H0H100H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgtcon，该符号在函数 ""int __cdecl psi::C_DGTCON(char,int,double *,double *,double *,double *,int *,double,double *,double *,int *)"" (?C_DGTCON@psi@@YAHDHPEAN000PEAHN001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgtrfs，该符号在函数 ""int __cdecl psi::C_DGTRFS(char,int,int,double *,double *,double *,double *,double *,double *,double *,int *,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DGTRFS@psi@@YAHDHHPEAN000000PEAH0H0H0001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgtsv，该符号在函数 ""int __cdecl psi::C_DGTSV(int,int,double *,double *,double *,double *,int)"" (?C_DGTSV@psi@@YAHHHPEAN000H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgtsvx，该符号在函数 ""int __cdecl psi::C_DGTSVX(char,char,int,int,double *,double *,double *,double *,double *,double *,double *,int *,double *,int,double *,int,double *)"" (?C_DGTSVX@psi@@YAHDDHHPEAN000000PEAH0H0H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgttrf，该符号在函数 ""int __cdecl psi::C_DGTTRF(int,double *,double *,double *,double *,int *)"" (?C_DGTTRF@psi@@YAHHPEAN000PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgttrs，该符号在函数 ""int __cdecl psi::C_DGTTRS(char,int,int,double *,double *,double *,double *,int *,double *,int)"" (?C_DGTTRS@psi@@YAHDHHPEAN000PEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dhgeqz，该符号在函数 ""int __cdecl psi::C_DHGEQZ(char,char,char,int,int,int,double *,int,double *,int,double *,double *,double *,double *,int,double *,int,double *,int)"" (?C_DHGEQZ@psi@@YAHDDDHHHPEANH0H0000H0H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dhsein，该符号在函数 ""int __cdecl psi::C_DHSEIN(char,char,char,int,double *,int,double *,double *,double *,int,double *,int,int,int *,double *,int *,int *)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:26968,error,error,26968,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"*,int,double *,double *,double *,int,int *)"" (?C_DTGSYL@psi@@YAHDHHHPEANH0H0H0H0H0H000HPEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtpcon，该符号在函数 ""int __cdecl psi::C_DTPCON(char,char,char,int,double *,double *,double *,int *)"" (?C_DTPCON@psi@@YAHDDDHPEAN00PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtprfs，该符号在函数 ""int __cdecl psi::C_DTPRFS(char,char,char,int,int,double *,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DTPRFS@psi@@YAHDDDHHPEAN0H0H000PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtptri，该符号在函数 ""int __cdecl psi::C_DTPTRI(char,char,int,double *)"" (?C_DTPTRI@psi@@YAHDDHPEAN@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtptrs，该符号在函数 ""int __cdecl psi::C_DTPTRS(char,char,char,int,int,double *,double *,int)"" (?C_DTPTRS@psi@@YAHDDDHHPEAN0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtrcon，该符号在函数 ""int __cdecl psi::C_DTRCON(char,char,char,int,double *,int,double *,double *,int *)"" (?C_DTRCON@psi@@YAHDDDHPEANH00PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtrevc，该符号在函数 ""int __cdecl psi::C_DTREVC(char,char,int,double *,int,double *,int,double *,int,int,int *,double *)"" (?C_DTREVC@psi@@YAHDDHPEANH0H0HHPEAH0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtrexc，该符号在函数 ""int __cdecl psi::C_DTREXC(char,int,double *,int,double *,int,int *,int *,double *)"" (?C_DTREXC@psi@@YAHDHPEANH0HPEAH10@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtrrfs，该符号在函数 ""int __cdecl psi::C_DTRRFS(char,char,char,int,int,double *,int,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DTRRFS@psi@@YAHDDDHHPEANH0H0H000PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtrsen，该符号在函数 ""int __cdecl psi::C_DTRSEN(char,char,int,double *,int,double *,int,double *,double *,int *,double *,double *,double *,int,int *,int)"" (?C_DTRSEN@psi@@YAHDDHPEANH0H00PEAH000H1H@Z",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:52237,error,error,52237,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,*Question*: Do we want to be able to switch between old and new BS radii (as expert option)?. Personally I think I would leave them commented out in the code and not make a user-facing switch available.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1591#issuecomment-494774576:192,avail,available,192,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-494774576,1,['avail'],['available']
Availability,"*kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 333, in select_mp3; > return func(name, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1941, in run_occ; > occ_wfn = core.occ(ref_wfn); >; > RuntimeError:; > Fatal Error: PSIO Error; > Error occurred in file: /Users/dasirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; > The most recent 5 function calls were:; >; > - CISD/cc-pVDZ via DETCI: *FAILED*; >; > PSIO_ERROR: Can't find TOC Entry IWL Buffers; > PSIO_ERROR: unit = 33, errval = 13; > PSIO_ERROR: 13 (no such TOC entry); > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 29, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 952, in select_cisd; > return func(name, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 3062, in run_detci; > ciwfn = core.detci(ref_wfn); >; > RuntimeError:; > Fatal Error: PSIO Error; > Error occurred in file: /Users/dasirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; > The most recent 5 function calls were:; >; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1021#issuecomment-388980081>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdoBl5TkzfuztMHuD5aseZ9qEjGVeks5tygHBgaJpZM4T-hi0>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128:13067,Error,Error,13067,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128,4,"['Error', 'error']","['Error', 'error']"
Availability,*proc (1 test); dfccsd-grad = 22.59 sec*proc (1 test); dfccsd-t-grad = 19.43 sec*proc (1 test); dfccsdat = 13.82 sec*proc (1 test); dfccsdl = 3.14 sec*proc (1 test); dfccsdt = 3.87 sec*proc (1 test); dfep2 = 5.30 sec*proc (2 tests); dfmp2 = 89.76 sec*proc (11 tests); dfomp2 = 275.42 sec*proc (7 tests); dfomp2.5 = 77.71 sec*proc (4 tests); dfomp3 = 93.16 sec*proc (4 tests); dfscf = 28.72 sec*proc (1 test); dft = 5528.80 sec*proc (26 tests); docs = 1.34 sec*proc (2 tests); ecp = 37.52 sec*proc (2 tests); fci = 6.48 sec*proc (2 tests); fcidump = 3.69 sec*proc (1 test); findif = 602.21 sec*proc (5 tests); fnocc = 58.18 sec*proc (4 tests); freq = 856.94 sec*proc (6 tests); gradient = 547.45 sec*proc (16 tests); json = 14.48 sec*proc (8 tests); longtests = 835.25 sec*proc (5 tests); mcscf = 3.12 sec*proc (3 tests); minitests = 31.52 sec*proc (3 tests); mints = 35.52 sec*proc (14 tests); misc = 272.90 sec*proc (16 tests); mp2 = 205.17 sec*proc (13 tests); nbody = 52.21 sec*proc (2 tests); numpy = 0.63 sec*proc (1 test); ocepa = 324.78 sec*proc (6 tests); omp = 326.64 sec*proc (18 tests); opt = 769.80 sec*proc (21 tests); prop = 1.60 sec*proc (1 test); properties = 84.77 sec*proc (10 tests); psi = 20501.24 sec*proc (400 tests); psi4numpy = 13.93 sec*proc (6 tests); psimrcc = 70.67 sec*proc (8 tests); python = 880.26 sec*proc (10 tests); pywrap = 1339.53 sec*proc (12 tests); quicktests = 2290.03 sec*proc (137 tests); rasci = 37.96 sec*proc (3 tests); sapt = 1420.73 sec*proc (20 tests); scf = 5859.53 sec*proc (51 tests); shorttests = 39.46 sec*proc (4 tests); smoketests = 89.98 sec*proc (11 tests); stability = 5.90 sec*proc (2 tests); tutorial = 165.22 sec*proc (6 tests); x2c = 34.46 sec*proc (3 tests). Total Test time (real) = 3000.09 sec. The following tests FAILED:; 	360 - cubeprop-esp (Failed); 	371 - dft-bench-interaction (Timeout); 	373 - pywrap-align (Failed); 	374 - pywrap-align-chiral (Failed); 	401 - json-schema_0_properties (Failed); Errors while running CTest; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637:40023,Error,Errors,40023,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637,1,['Error'],['Errors']
Availability,"+1. I have run into similar errors. This is with the simple case of doing a dihedral scan on hydrogen peroxide. ```; ERROR: Symmetry operation 2 did not map atom 1 to another atom:; Molecule:; Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; H 0.021730534334 1.023759611300 -0.835745328589 1.007825032070; O -0.026376271469 0.710734621460 0.054491125526 15.994914619560; O 0.026376271467 -0.710734621234 0.054491125355 15.994914619560; H -0.021730534332 -1.023759611527 -0.835745328694 1.007825032070. attempted to find atom at; 0.041065 -1.934625 -1.579330; atom_map() throwing PsiException; Could not symmetrize geometry in OPT::MOLECULE::SYMMETRIZE_GEOM(). **** Optimization has failed! (in 1 steps) ****; ```. In my case, some steps fail to optimize while most don't. It's hard to say why some are failing, while other steps are not. It seems that rotation far away from the input molecule conformer are an issue. Though that's not always the case, so...? Here's my input file:. ```; molecule HOOH {; 0 1; H ; O 1 0.90; O 2 1.40 1 100.0; H 3 0.90 2 100.0 1 0.0 ; }. steps = 35; step_size = 10 ; start_angle = -170.0; dihedrals = [""1 2 3 4 {}"".format((counter * step_size) + start_angle) for counter in range(0, steps)]; #print(dihedrals); for dihedral in dihedrals:; set {; basis 6-31G*; scf_type df; guess sad ; ints_tolerance 1.0E-8; } ; set optking {; fixed_dihedral = $dihedral; } ; optimize('scf'); SCF_Energy = energy('scf'); ```. Edit: I should add that attempting to make the optimization gentler with the following settings, or changing the step size, does not seem to fix the issue. ```; full_hess_every 1; dynamic_level 1; opt_coordinates both; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/10#issuecomment-200900928:28,error,errors,28,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-200900928,3,"['ERROR', 'error']","['ERROR', 'errors']"
Availability,", Mol. Phys. 91, 847 (1997)						 <; GGA = TRUE									 <; Meta = FALSE									 <; LRC = FALSE									 <; Alpha = 1.000000E+00									 <; Omega = 0.000000E+00									 <; 												 <; => XC_GGA_C_FT97 Functional <=								 <; 												 <; Filatov & Thiel correlation									 <; M. Filatov and W. Thiel, Int. J. Quantum Chem. 62, 603 (1997)				 <; M. Filatov and W. Thiel, Mol. Phys. 91, 847 (1997)						 <; GGA = TRUE									 <; Meta = FALSE									 <; LRC = FALSE									 <; Alpha = 1.000000E+00									 <; Omega = 0.000000E+00									 <. => Molecular Quadrature <=										 => Molecular Quadrature <=. Radial Scheme = TREUTLER								 Radial Scheme = TREUTLER; Pruning Scheme = NONE								 Pruning Scheme = NONE; Nuclear Scheme = TREUTLER								 Nuclear Scheme = TREUTLER. BS radius alpha = 1								 BS radius alpha = 1; Pruning alpha = 1								 Pruning alpha = 1; Radial Points = 99							 |	 Radial Points = 75; Spherical Points = 770								 Spherical Points = 770; Total Points = 69300							 |	 Total Points = 53130; Total Blocks = 570							 |	 Total Blocks = 475; Max Points = 256							 |	 Max Points = 255; Max Functions = 14								 Max Functions = 14; Weights Tolerance = 1.00E-15								 Weights Tolerance = 1.00E-15. ==> Integral Setup <==										 ==> Integral Setup <==. ==> DirectJK: Integral-Direct J/K Matrices <==							 ==> DirectJK: Integral-Direct J/K Matrices <==. J tasked: Yes									 J tasked: Yes; K tasked: No									 K tasked: No; wK tasked: No									 wK tasked: No; Integrals threads: 1									 Integrals threads: 1; Schwarz Cutoff: 1E-12									 Schwarz Cutoff: 1E-12. Cached 100.0% of DFT collocation blocks in 0.028 [GiB].					 |	 Cached 100.0% of DFT collocation blocks in 0.021 [GiB]. Minimum eigenvalue in the overlap matrix is 1.9330486283E-01.						 Minimum eigenvalue in the overlap matrix is 1.9330486283E-01.; Reciprocal condition number of the overlap matrix is 1.1340153394E-01.				 Reciprocal condition number of the overlap ma",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-755088124:6347,Toler,Tolerance,6347,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-755088124,1,['Toler'],['Tolerance']
Availability,", v4rhosigma2tau=0x0, v4rhosigmalapl2=0x0, v4rhosigmalapltau=0x0, ; v4rhosigmatau2=0x0, v4rholapl3=0x0, v4rholapl2tau=0x0, v4rholapltau2=0x0, v4rhotau3=0x0, v4sigma4=0x0, v4sigma3lapl=0x0, v4sigma3tau=0x0, v4sigma2lapl2=0x0, v4sigma2lapltau=0x0, v4sigma2tau2=0x0, v4sigmalapl3=0x0, v4sigmalapl2tau=0x0, v4sigmalapltau2=0x0, v4sigmatau3=0x0, v4lapl4=0x0, v4lapl3tau=0x0, v4lapl2tau2=0x0, v4lapltau3=0x0, ; v4tau4=0x0) at /psi/gits/libxc/src/mix_func.c:119; #5 0x00007fffecf71998 in xc_gga (func=0x555556ca7500, np=255, rho=0x555556e575c0, sigma=0x555556ccda80, zk=0x555556771300, vrho=0x55555e164460, vsigma=0x555556c12720, v2rho2=0x0, v2rhosigma=0x0, v2sigma2=0x0, v3rho3=0x0, v3rho2sigma=0x0, v3rhosigma2=0x0, v3sigma3=0x0, v4rho4=0x0, v4rho3sigma=0x0, v4rho2sigma2=0x0, v4rhosigma3=0x0, v4sigma4=0x0); at /psi/gits/libxc/src/gga.c:126; #6 0x00007fffecf71b16 in xc_gga_exc_vxc (p=<optimized out>, np=<optimized out>, rho=<optimized out>, sigma=<optimized out>, zk=<optimized out>, vrho=<optimized out>, vsigma=0x555556c12720) at /psi/gits/libxc/src/gga.c:160; #7 0x00007fffef1a9541 in psi::LibXCFunctional::compute_functional (this=0x896d, in=..., out=..., npoints=-1, deriv=1) at /psi/gits/hrw-demo/psi4/src/psi4/libfunctional/LibXCfunctional.cc:549; #8 0x00007fffef1b899f in psi::SuperFunctional::compute_functional (this=0x896d, vals=..., npoints=6) at /psi/gits/hrw-demo/psi4/src/psi4/libfunctional/superfunctional.cc:633; #9 0x00007fffef1737ba in psi::RV::compute_V (this=0x896d, ret=<error reading variable: Cannot access memory at address 0x896d>) at /psi/gits/hrw-demo/psi4/src/psi4/libfock/v.cc:1350; #10 0x00007fffef7752c3 in psi::scf::RHF::form_V (this=0x896d) at /psi/gits/hrw-demo/psi4/src/psi4/libscf_solver/rhf.cc:180; #11 0x00007fffef77451b in psi::scf::RHF::form_G (this=0x896d) at /psi/gits/hrw-demo/psi4/src/psi4/libscf_solver/rhf.cc:185; ```. Please let me know when is a good point to try Psi4+Libxc 5.1 again and if your Libxc 6 PR needs adding atop this (surely not?), thanks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-754391084:3219,error,error,3219,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-754391084,1,['error'],['error']
Availability,",double *,int *,int *)"" (?C_DHSEIN@psi@@YAHDDDHPEANH000H0HHPEAH011@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dhseqr，该符号在函数 ""int __cdecl psi::C_DHSEQR(char,char,int,int,int,double *,int,double *,double *,double *,int,double *,int)"" (?C_DHSEQR@psi@@YAHDDHHHPEANH000H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dopgtr，该符号在函数 ""int __cdecl psi::C_DOPGTR(char,int,double *,double *,double *,int,double *)"" (?C_DOPGTR@psi@@YAHDHPEAN00H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dopmtr，该符号在函数 ""int __cdecl psi::C_DOPMTR(char,char,char,int,int,double *,double *,double *,int,double *)"" (?C_DOPMTR@psi@@YAHDDDHHPEAN00H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dorgbr，该符号在函数 ""int __cdecl psi::C_DORGBR(char,int,int,int,double *,int,double *,double *,int)"" (?C_DORGBR@psi@@YAHDHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dorghr，该符号在函数 ""int __cdecl psi::C_DORGHR(int,int,int,double *,int,double *,double *,int)"" (?C_DORGHR@psi@@YAHHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dorglq，该符号在函数 ""int __cdecl psi::C_DORGLQ(int,int,int,double *,int,double *,double *,int)"" (?C_DORGLQ@psi@@YAHHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dorgql，该符号在函数 ""int __cdecl psi::C_DORGQL(int,int,int,double *,int,double *,double *,int)"" (?C_DORGQL@psi@@YAHHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dorgqr，该符号在函数 ""int __cdecl psi::C_DORGQR(int,int,int,double *,int,double *,double *,int)"" (?C_DORGQR@psi@@YAHHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dorgrq，该符号在函数 ""int __cdecl psi::C_DORGRQ(int,int,int,double *,int,double *,double *,int)"" (?C_DORGRQ@psi@@YAHHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dorgtr，该符号在函数 ""int __cdecl psi::C_DORGTR(char,int,double *,int,double *,double *,int)"" (?C_DORGTR@psi@@YAHDHPEAN",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:28990,error,error,28990,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,",double *,int)"" (?C_DGEQLF@psi@@YAHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgeqp3，该符号在函数 ""int __cdecl psi::C_DGEQP3(int,int,double *,int,int *,double *,double *,int)"" (?C_DGEQP3@psi@@YAHHHPEANHPEAH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgeqrf，该符号在函数 ""int __cdecl psi::C_DGEQRF(int,int,double *,int,double *,double *,int)"" (?C_DGEQRF@psi@@YAHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgerfs，该符号在函数 ""int __cdecl psi::C_DGERFS(char,int,int,double *,int,double *,int,int *,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DGERFS@psi@@YAHDHHPEANH0HPEAH0H0H0001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgerqf，该符号在函数 ""int __cdecl psi::C_DGERQF(int,int,double *,int,double *,double *,int)"" (?C_DGERQF@psi@@YAHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgesdd，该符号在函数 ""int __cdecl psi::C_DGESDD(char,int,int,double *,int,double *,double *,int,double *,int,double *,int,int *)"" (?C_DGESDD@psi@@YAHDHHPEANH00H0H0HPEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgesv，该符号在函数 ""int __cdecl psi::C_DGESV(int,int,double *,int,int *,double *,int)"" (?C_DGESV@psi@@YAHHHPEANHPEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgesvx，该符号在函数 ""int __cdecl psi::C_DGESVX(char,char,int,int,double *,int,double *,int,int *,char,double *,double *,double *,int,double *,int,double *,double *,double *,double *,int *)"" (?C_DGESVX@psi@@YAHDDHHPEANH0HPEAHD000H0H00001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgetrf，该符号在函数 ""int __cdecl psi::C_DGETRF(int,int,double *,int,int *)"" (?C_DGETRF@psi@@YAHHHPEANHPEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgetri，该符号在函数 ""int __cdecl psi::C_DGETRI(int,double *,int,int *,double *,int)"" (?C_DGETRI@psi@@YAHHPEANHPEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgetrs，该符号在函数 ""int _",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:21727,error,error,21727,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,",double *,int,double *,int,double,double *,int)"" (?C_DGEMM@psi@@YAXDDHHHNPEANH0HN0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dgemv，该符号在函数 ""void __cdecl psi::C_DGEMV(char,int,int,double,double *,int,double *,int,double,double *,int)"" (?C_DGEMV@psi@@YAXDHHNPEANH0HN0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dger，该符号在函数 ""void __cdecl psi::C_DGER(int,int,double,double *,int,double *,int,double *,int)"" (?C_DGER@psi@@YAXHHNPEANH0H0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dsbmv，该符号在函数 ""void __cdecl psi::C_DSBMV(char,int,int,double,double *,int,double *,int,double,double *,int)"" (?C_DSBMV@psi@@YAXDHHNPEANH0HN0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dspmv，该符号在函数 ""void __cdecl psi::C_DSPMV(char,int,double,double *,double *,int,double,double *,int)"" (?C_DSPMV@psi@@YAXDHNPEAN0HN0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dspr，该符号在函数 ""void __cdecl psi::C_DSPR(char,int,double,double *,int,double *)"" (?C_DSPR@psi@@YAXDHNPEANH0@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dspr2，该符号在函数 ""void __cdecl psi::C_DSPR2(char,int,double,double *,int,double *,int,double *)"" (?C_DSPR2@psi@@YAXDHNPEANH0H0@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dsymm，该符号在函数 ""void __cdecl psi::C_DSYMM(char,char,int,int,double,double *,int,double *,int,double,double *,int)"" (?C_DSYMM@psi@@YAXDDHHNPEANH0HN0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dsymv，该符号在函数 ""void __cdecl psi::C_DSYMV(char,int,double,double *,int,double *,int,double,double *,int)"" (?C_DSYMV@psi@@YAXDHNPEANH0HN0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dsyr，该符号在函数 ""void __cdecl psi::C_DSYR(char,int,double,double *,int,double *,int)"" (?C_DSYR@psi@@YAXDHNPEANH0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dsyr2，该符号在函数 ""void __cdecl psi::C_DSYR2(char,int,double,double *,int,double *,int,double",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:11944,error,error,11944,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,",double *,int,double,double,int,int,double,int *,double *,double *,int,double *,int *,int *)"" (?C_DSBEVX@psi@@YAHDDDHHPEANH0HNNHHNPEAH00H011@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsbgst，该符号在函数 ""int __cdecl psi::C_DSBGST(char,char,int,int,int,double *,int,double *,int,double *,int,double *)"" (?C_DSBGST@psi@@YAHDDHHHPEANH0H0H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsbgv，该符号在函数 ""int __cdecl psi::C_DSBGV(char,char,int,int,int,double *,int,double *,int,double *,double *,int,double *)"" (?C_DSBGV@psi@@YAHDDHHHPEANH0H00H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsbgvd，该符号在函数 ""int __cdecl psi::C_DSBGVD(char,char,int,int,int,double *,int,double *,int,double *,double *,int,double *,int,int *,int)"" (?C_DSBGVD@psi@@YAHDDHHHPEANH0H00H0HPEAHH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsbgvx，该符号在函数 ""int __cdecl psi::C_DSBGVX(char,char,char,int,int,int,double *,int,double *,int,double *,int,double,double,int,int,double,int *,double *,double *,int,double *,int *,int *)"" (?C_DSBGVX@psi@@YAHDDDHHHPEANH0H0HNNHHNPEAH00H011@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsbtrd，该符号在函数 ""int __cdecl psi::C_DSBTRD(char,char,int,int,double *,int,double *,double *,double *,int,double *)"" (?C_DSBTRD@psi@@YAHDDHHPEANH000H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsgesv，该符号在函数 ""int __cdecl psi::C_DSGESV(int,int,double *,int,int *,double *,int,double *,int,double *,int *)"" (?C_DSGESV@psi@@YAHHHPEANHPEAH0H0H01@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspcon，该符号在函数 ""int __cdecl psi::C_DSPCON(char,int,double *,int *,double,double *,double *,int *)"" (?C_DSPCON@psi@@YAHDHPEANPEAHN001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspev，该符号在函数 ""int __cdecl psi::C_DSPEV(char,char,int,double *,double *,double *,int,double *)"" (?C_DSPEV@psi@@YAHDDHPEAN00H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:39598,error,error,39598,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,",double *,int,int *)"" (?C_DGEEVX@psi@@YAHDDDDHPEANH000H0HPEAH100000H1@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgehrd，该符号在函数 ""int __cdecl psi::C_DGEHRD(int,int,int,double *,int,double *,double *,int)"" (?C_DGEHRD@psi@@YAHHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgelqf，该符号在函数 ""int __cdecl psi::C_DGELQF(int,int,double *,int,double *,double *,int)"" (?C_DGELQF@psi@@YAHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgels，该符号在函数 ""int __cdecl psi::C_DGELS(char,int,int,int,double *,int,double *,int,double *,int)"" (?C_DGELS@psi@@YAHDHHHPEANH0H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgelsd，该符号在函数 ""int __cdecl psi::C_DGELSD(int,int,int,double *,int,double *,int,double *,double,int *,double *,int,int *)"" (?C_DGELSD@psi@@YAHHHHPEANH0H0NPEAH0H1@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgelss，该符号在函数 ""int __cdecl psi::C_DGELSS(int,int,int,double *,int,double *,int,double *,double,int *,double *,int)"" (?C_DGELSS@psi@@YAHHHHPEANH0H0NPEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgelsy，该符号在函数 ""int __cdecl psi::C_DGELSX(int,int,int,double *,int,double *,int,int *,double,int *,double *)"" (?C_DGELSX@psi@@YAHHHHPEANH0HPEAHN10@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgeqlf，该符号在函数 ""int __cdecl psi::C_DGEQLF(int,int,double *,int,double *,double *,int)"" (?C_DGEQLF@psi@@YAHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgeqp3，该符号在函数 ""int __cdecl psi::C_DGEQP3(int,int,double *,int,int *,double *,double *,int)"" (?C_DGEQP3@psi@@YAHHHPEANHPEAH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgeqrf，该符号在函数 ""int __cdecl psi::C_DGEQRF(int,int,double *,int,double *,double *,int)"" (?C_DGEQRF@psi@@YAHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgerfs，该符号在函数 ""int __cdecl psi::C_DGERFS(char,int,int,double *,int,double *,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:20295,error,error,20295,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,",double,int *,double *,int,int *)"" (?C_DGELSD@psi@@YAHHHHPEANH0H0NPEAH0H1@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgelss，该符号在函数 ""int __cdecl psi::C_DGELSS(int,int,int,double *,int,double *,int,double *,double,int *,double *,int)"" (?C_DGELSS@psi@@YAHHHHPEANH0H0NPEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgelsy，该符号在函数 ""int __cdecl psi::C_DGELSX(int,int,int,double *,int,double *,int,int *,double,int *,double *)"" (?C_DGELSX@psi@@YAHHHHPEANH0HPEAHN10@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgeqlf，该符号在函数 ""int __cdecl psi::C_DGEQLF(int,int,double *,int,double *,double *,int)"" (?C_DGEQLF@psi@@YAHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgeqp3，该符号在函数 ""int __cdecl psi::C_DGEQP3(int,int,double *,int,int *,double *,double *,int)"" (?C_DGEQP3@psi@@YAHHHPEANHPEAH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgeqrf，该符号在函数 ""int __cdecl psi::C_DGEQRF(int,int,double *,int,double *,double *,int)"" (?C_DGEQRF@psi@@YAHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgerfs，该符号在函数 ""int __cdecl psi::C_DGERFS(char,int,int,double *,int,double *,int,int *,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DGERFS@psi@@YAHDHHPEANH0HPEAH0H0H0001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgerqf，该符号在函数 ""int __cdecl psi::C_DGERQF(int,int,double *,int,double *,double *,int)"" (?C_DGERQF@psi@@YAHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgesdd，该符号在函数 ""int __cdecl psi::C_DGESDD(char,int,int,double *,int,double *,double *,int,double *,int,double *,int,int *)"" (?C_DGESDD@psi@@YAHDHHPEANH00H0H0HPEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgesv，该符号在函数 ""int __cdecl psi::C_DGESV(int,int,double *,int,int *,double *,int)"" (?C_DGESV@psi@@YAHHHPEANHPEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgesvx，该符号在函数 ""int ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:21105,error,error,21105,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,",int)"" (?C_IDAMAX@psi@@YA_K_KPEANH@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dgbmv，该符号在函数 ""void __cdecl psi::C_DGBMV(char,int,int,int,int,double,double *,int,double *,int,double,double *,int)"" (?C_DGBMV@psi@@YAXDHHHHNPEANH0HN0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dgemm，该符号在函数 ""void __cdecl psi::C_DGEMM(char,char,int,int,int,double,double *,int,double *,int,double,double *,int)"" (?C_DGEMM@psi@@YAXDDHHHNPEANH0HN0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dgemv，该符号在函数 ""void __cdecl psi::C_DGEMV(char,int,int,double,double *,int,double *,int,double,double *,int)"" (?C_DGEMV@psi@@YAXDHHNPEANH0HN0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dger，该符号在函数 ""void __cdecl psi::C_DGER(int,int,double,double *,int,double *,int,double *,int)"" (?C_DGER@psi@@YAXHHNPEANH0H0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dsbmv，该符号在函数 ""void __cdecl psi::C_DSBMV(char,int,int,double,double *,int,double *,int,double,double *,int)"" (?C_DSBMV@psi@@YAXDHHNPEANH0HN0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dspmv，该符号在函数 ""void __cdecl psi::C_DSPMV(char,int,double,double *,double *,int,double,double *,int)"" (?C_DSPMV@psi@@YAXDHNPEAN0HN0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dspr，该符号在函数 ""void __cdecl psi::C_DSPR(char,int,double,double *,int,double *)"" (?C_DSPR@psi@@YAXDHNPEANH0@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dspr2，该符号在函数 ""void __cdecl psi::C_DSPR2(char,int,double,double *,int,double *,int,double *)"" (?C_DSPR2@psi@@YAXDHNPEANH0H0@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dsymm，该符号在函数 ""void __cdecl psi::C_DSYMM(char,char,int,int,double,double *,int,double *,int,double,double *,int)"" (?C_DSYMM@psi@@YAXDDHHNPEANH0HN0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dsymv，该符号在函数 ""void __cdecl psi::C_DSYMV(char,int,double,double *,int,double *,in",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:11538,error,error,11538,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,",int,double *,double *,double *,int)"" (?C_DPTSV@psi@@YAHHHPEAN00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dptsvx，该符号在函数 ""int __cdecl psi::C_DPTSVX(char,int,int,double *,double *,double *,double *,double *,int,double *,int,double *,double *,double *,double *)"" (?C_DPTSVX@psi@@YAHDHHPEAN0000H0H0000@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpttrf，该符号在函数 ""int __cdecl psi::C_DPTTRF(int,double *,double *)"" (?C_DPTTRF@psi@@YAHHPEAN0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpttrs，该符号在函数 ""int __cdecl psi::C_DPTTRS(int,int,double *,double *,double *,int)"" (?C_DPTTRS@psi@@YAHHHPEAN00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsbev，该符号在函数 ""int __cdecl psi::C_DSBEV(char,char,int,int,double *,int,double *,double *,int,double *)"" (?C_DSBEV@psi@@YAHDDHHPEANH00H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsbevd，该符号在函数 ""int __cdecl psi::C_DSBEVD(char,char,int,int,double *,int,double *,double *,int,double *,int,int *,int)"" (?C_DSBEVD@psi@@YAHDDHHPEANH00H0HPEAHH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsbevx，该符号在函数 ""int __cdecl psi::C_DSBEVX(char,char,char,int,int,double *,int,double *,int,double,double,int,int,double,int *,double *,double *,int,double *,int *,int *)"" (?C_DSBEVX@psi@@YAHDDDHHPEANH0HNNHHNPEAH00H011@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsbgst，该符号在函数 ""int __cdecl psi::C_DSBGST(char,char,int,int,int,double *,int,double *,int,double *,int,double *)"" (?C_DSBGST@psi@@YAHDDHHHPEANH0H0H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsbgv，该符号在函数 ""int __cdecl psi::C_DSBGV(char,char,int,int,int,double *,int,double *,int,double *,double *,int,double *)"" (?C_DSBGV@psi@@YAHDDHHHPEANH0H00H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsbgvd，该符号在函数 ""int __cdecl psi::C_DSBGVD(char,char,int,int,int,double *,int,double *,int,double *,double *,int,double *,int,i",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:38407,error,error,38407,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,",int,double *,int,double *,double *,double *,double *,int)"" (?C_DSYTRD@psi@@YAHDHPEANH0000H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsytrf，该符号在函数 ""int __cdecl psi::C_DSYTRF(char,int,double *,int,int *,double *,int)"" (?C_DSYTRF@psi@@YAHDHPEANHPEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsytri，该符号在函数 ""int __cdecl psi::C_DSYTRI(char,int,double *,int,int *,double *)"" (?C_DSYTRI@psi@@YAHDHPEANHPEAH0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsytrs，该符号在函数 ""int __cdecl psi::C_DSYTRS(char,int,int,double *,int,int *,double *,int)"" (?C_DSYTRS@psi@@YAHDHHPEANHPEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtbcon，该符号在函数 ""int __cdecl psi::C_DTBCON(char,char,char,int,int,double *,int,double *,double *,int *)"" (?C_DTBCON@psi@@YAHDDDHHPEANH00PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtbrfs，该符号在函数 ""int __cdecl psi::C_DTBRFS(char,char,char,int,int,int,double *,int,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DTBRFS@psi@@YAHDDDHHHPEANH0H0H000PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtbtrs，该符号在函数 ""int __cdecl psi::C_DTBTRS(char,char,char,int,int,int,double *,int,double *,int)"" (?C_DTBTRS@psi@@YAHDDDHHHPEANH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtgevc，该符号在函数 ""int __cdecl psi::C_DTGEVC(char,char,int,double *,int,double *,int,double *,int,double *,int,int,int *,double *)"" (?C_DTGEVC@psi@@YAHDDHPEANH0H0H0HHPEAH0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtgexc，该符号在函数 ""int __cdecl psi::C_DTGEXC(int,double *,int,double *,int,double *,int,double *,int,int *,int *,double *,int)"" (?C_DTGEXC@psi@@YAHHPEANH0H0H0HPEAH10H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtgsen，该符号在函数 ""int __cdecl psi::C_DTGSEN(int,int,double *,int,double *,int,double *,double *,double *,double *,int,double *,int,int *,double *,double *,double *,double *,in",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:49379,error,error,49379,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,",int,int,double *,double *,int *,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DSPRFS@psi@@YAHDHHPEAN0PEAH0H0H0001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspsv，该符号在函数 ""int __cdecl psi::C_DSPSV(char,int,int,double *,int *,double *,int)"" (?C_DSPSV@psi@@YAHDHHPEANPEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspsvx，该符号在函数 ""int __cdecl psi::C_DSPSVX(char,char,int,int,double *,double *,int *,double *,int,double *,int,double *)"" (?C_DSPSVX@psi@@YAHDDHHPEAN0PEAH0H0H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsptrd，该符号在函数 ""int __cdecl psi::C_DSPTRD(char,int,double *,double *,double *,double *)"" (?C_DSPTRD@psi@@YAHDHPEAN000@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsptrf，该符号在函数 ""int __cdecl psi::C_DSPTRF(char,int,double *,int *)"" (?C_DSPTRF@psi@@YAHDHPEANPEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsptri，该符号在函数 ""int __cdecl psi::C_DSPTRI(char,int,double *,int *,double *)"" (?C_DSPTRI@psi@@YAHDHPEANPEAH0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsptrs，该符号在函数 ""int __cdecl psi::C_DSPTRS(char,int,int,double *,int *,double *,int)"" (?C_DSPTRS@psi@@YAHDHHPEANPEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dstebz，该符号在函数 ""int __cdecl psi::C_DSTEBZ(char,char,int,double,double,int,int,double,double *,double *,int *,int *,double *,int *,int *,double *,int *)"" (?C_DSTEBZ@psi@@YAHDDHNNHHNPEAN0PEAH101101@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dstedc，该符号在函数 ""int __cdecl psi::C_DSTEDC(char,int,double *,double *,double *,int,double *,int,int *,int)"" (?C_DSTEDC@psi@@YAHDHPEAN00H0HPEAHH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dstegr，该符号在函数 ""int __cdecl psi::C_DSTEGR(char,char,int,double *,double *,double,double,int,int,double,int *,double *,double *,int,int *,double *,int,int *,int)"" (?C_DSTEGR@psi@@YAHDDHPEAN0NNHHNPEAH00H10H1H@Z) 中被引用; F",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:43077,error,error,43077,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,",int,int,double *,int,double *,double *,double *,int,double *,int)"" (?C_DHSEQR@psi@@YAHDDHHHPEANH000H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dopgtr，该符号在函数 ""int __cdecl psi::C_DOPGTR(char,int,double *,double *,double *,int,double *)"" (?C_DOPGTR@psi@@YAHDHPEAN00H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dopmtr，该符号在函数 ""int __cdecl psi::C_DOPMTR(char,char,char,int,int,double *,double *,double *,int,double *)"" (?C_DOPMTR@psi@@YAHDDDHHPEAN00H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dorgbr，该符号在函数 ""int __cdecl psi::C_DORGBR(char,int,int,int,double *,int,double *,double *,int)"" (?C_DORGBR@psi@@YAHDHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dorghr，该符号在函数 ""int __cdecl psi::C_DORGHR(int,int,int,double *,int,double *,double *,int)"" (?C_DORGHR@psi@@YAHHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dorglq，该符号在函数 ""int __cdecl psi::C_DORGLQ(int,int,int,double *,int,double *,double *,int)"" (?C_DORGLQ@psi@@YAHHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dorgql，该符号在函数 ""int __cdecl psi::C_DORGQL(int,int,int,double *,int,double *,double *,int)"" (?C_DORGQL@psi@@YAHHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dorgqr，该符号在函数 ""int __cdecl psi::C_DORGQR(int,int,int,double *,int,double *,double *,int)"" (?C_DORGQR@psi@@YAHHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dorgrq，该符号在函数 ""int __cdecl psi::C_DORGRQ(int,int,int,double *,int,double *,double *,int)"" (?C_DORGRQ@psi@@YAHHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dorgtr，该符号在函数 ""int __cdecl psi::C_DORGTR(char,int,double *,int,double *,double *,int)"" (?C_DORGTR@psi@@YAHDHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormbr，该符号在函数 ""int __cdecl psi::C_DORMBR(char,char,char,int,int,int,double *,int,double *,double *,int,double *,int)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:29178,error,error,29178,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"- No S^2 vs S^Inf is, in some ways, a different level theory.; - S^2/S^Inf are separate quantities; - Mixing is as safe as any other mixing in SAPT. Our current version is fine, but S^Inf should help more for charged complexes. Exch/Ind-Exch at S^Inf and Disp-Exch at S^2 is probably quite reasonable.; - Yes and no. S^Inf is limited to SAPT0 for the time being, higher levels could get quite complex. One more person to ping and can correct me: @ajmisquitta",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/921#issuecomment-366112364:421,ping,ping,421,https://psicode.org,https://github.com/psi4/psi4/pull/921#issuecomment-366112364,1,['ping'],['ping']
Availability,"- Step 1. Modify the perl script to write the reference values out instead of checking them could even write them directly into input.dat with a variable name.; - Step 2. Hunt down the corresponding psivars and add the `compare_value` statements.; - Step 3. The ones that don't work in 2 point at missing psivars which need to be added. 1.) should be somewhat easy but some perl knowledge required. 2) not too difficult either. 3) will take the most time, finding the code in `psi4/src/psi4/cc*` that needs to be modified will take the most time. . I am not completely sure I get what you want to do with your point (3) do you want to just lump `compare_values` together in a function that takes a `wfn` and `ref_vals` dict and does all the `compare_values` needed rather than putting lots of them in the input files?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/943#issuecomment-376638034:176,down,down,176,https://psicode.org,https://github.com/psi4/psi4/issues/943#issuecomment-376638034,1,['down'],['down']
Availability,"- The fd-freq-energy test fails for me if the exit() command is removed---the 5-point frequencies disagree by slightly more than 0.001 (the tolerance threshold).; - Thanks for the pointer on dftd3. I was indeed looking at the wrong documentation. The dftd3 tests needed only a small change to work (see above commit).; - One option for format_kwargs_for_input is to reopen the file in binary mode before calling it and then reopening the file in (normal) text mode afterwards. Messy but it should work under python 2 and python 3. Regarding checking against different platforms, have you considered using buildbot to automate the process? Given psi4 is so easy to checkout, compile and test, setting up buildbot would be pretty easy. Let me know if you'd like a hand/advice---I'm moving to using psi4 for as much as possible so I'm happy to spend time helping to make it work more smoothly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/9#issuecomment-20552847:140,toler,tolerance,140,https://psicode.org,https://github.com/psi4/psi4/pull/9#issuecomment-20552847,1,['toler'],['tolerance']
Availability,- [ ] mention Disp30 error before v1.4 in docs #1803,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1796#issuecomment-582589959:21,error,error,21,https://psicode.org,https://github.com/psi4/psi4/issues/1796#issuecomment-582589959,1,['error'],['error']
Availability,"- [x] Can libmints get away with not having `MAX_AM_ERI` passed to it? That way one could switch out `libint.so`s on the fly (conda can do this). Would have to find a way to still exit gracefully if insufficient AM and give decent error messages. EDIT: Can't be done, as the header sets data structure sizes as well. Settling on AM=8 for conda linux instead.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/402#issuecomment-334617561:231,error,error,231,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-334617561,1,['error'],['error']
Availability,"------------------------------------------------------------------------------- ~; 1 -609.21574955 -6.09e+02 4.65e-02 1.39e-02 o 1.70e-01 5.38e-02 o ~; 2 -609.24416188 -2.84e-02 1.95e-02 4.94e-03 o 3.67e-01 6.90e-02 o ~; 3 -609.26373458 -1.96e-02 4.03e-02 1.34e-02 o 4.00e-01 1.12e-01 o ~; 4 -609.29180689 -2.81e-02 4.13e-02 1.19e-02 o 3.28e-01 7.61e-02 o ~; 5 -609.31034726 -1.85e-02 6.99e-02 1.39e-02 o 3.38e-01 6.27e-02 o ~; 6 -609.33098015 -2.06e-02 4.29e-02 1.03e-02 o 4.77e-01 7.89e-02 o ~; 7 -609.36524125 -3.43e-02 4.11e-02 7.82e-03 o 7.04e-01 1.05e-01 o ~; 8 -609.41234162 -4.71e-02 4.58e-02 8.89e-03 o 5.68e-01 1.12e-01 o ~; 9 -609.44676585 -3.44e-02 4.83e-02 1.17e-02 o 6.15e-01 9.91e-02 o ~; 10 -609.49528129 -4.85e-02 4.44e-02 1.07e-02 o 4.17e-01 1.12e-01 o ~; 11 -609.37833924 1.17e-01 1.22e-01 3.06e-02 o 2.26e-01 6.51e-02 o ~; 12 -609.49194948 -1.14e-01 6.74e-02 1.50e-02 o 2.98e-01 6.15e-02 o ~; 13 -609.50472895 -1.28e-02 4.41e-02 7.46e-03 o 6.15e-01 9.60e-02 o ~; 14 -609.49299554 1.17e-02 5.21e-02 1.31e-02 o 4.25e-01 7.90e-02 o ~; 15 -609.51141760 -1.84e-02 1.84e-02 4.83e-03 o 2.71e-01 9.38e-02 o ~; 16 -609.46604175 4.54e-02 6.62e-02 1.90e-02 o 1.47e-01 5.38e-02 o ~; 17 -609.50752379 -4.15e-02 3.93e-02 8.01e-03 o 1.44e-01 4.93e-02 o ~; 18 -609.50243791 5.09e-03 4.01e-02 1.12e-02 o 2.42e-01 7.18e-02 o ~; 19 -609.48911958 1.33e-02 7.26e-02 1.74e-02 o 1.09e-01 4.09e-02 o ~; 20 -609.51528318 -2.62e-02 9.87e-03 2.56e-03 o 1.78e-01 5.73e-02 o ~; 21 -609.51351330 1.77e-03 1.38e-02 3.38e-03 o 1.74e-01 4.56e-02 o ~; 22 -609.51620753 -2.69e-03 3.27e-03 1.32e-03 o 5.00e-02 1.16e-02 o ~; 23 -609.51663430 -4.27e-04 2.26e-03 7.58e-04 o 1.86e-01 2.83e-02 o ~; 24 -609.51722373 -5.89e-04 2.81e-03 9.14e-04 o 2.33e-01 3.45e-02 o ~; ```. error is same as OP reports. Below shows starting (L) and final (R) geometries. <img width=""1357"" alt=""screen shot 2015-07-29 at 3 55 39 pm"" src=""https://cloud.githubusercontent.com/assets/2314730/8975665/110d0ab0-3650-11e5-9c6f-5358f4f84105.png"">",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/153#issuecomment-126177998:2692,error,error,2692,https://psicode.org,https://github.com/psi4/psi4/issues/153#issuecomment-126177998,1,['error'],['error']
Availability,"--------------------------------------------------; ImportError Traceback (most recent call ; last); /srv/conda/envs/notebook/lib/python3.9/site-packages/psi4/__init__.py in ; <module>; 54 try:; ---> 55 from . import core; 56 except ImportError as err:. ImportError: ; /srv/conda/envs/notebook/lib/python3.9/site-packages/psi4/core.cpython-39-x86_64-linux-gnu.so: ; undefined symbol: __svml_exp4_mask_e9. During handling of the above exception, another exception occurred:. ImportError Traceback (most recent call ; last); /tmp/ipykernel_64/253247311.py in <module>; ----> 1 import psi4. /srv/conda/envs/notebook/lib/python3.9/site-packages/psi4/__init__.py in ; <module>; 58 raise ImportError(""{0}\nLikely cause: GCC >= 4.9 not in ; [DY]LD_LIBRARY_PATH"".format(err)); 59 else:; ---> 60 raise ImportError(""{0}"".format(err)); 61; 62 from psi4.core import set_output_file, get_num_threads, ; set_num_threads. ImportError: ; /srv/conda/envs/notebook/lib/python3.9/site-packages/psi4/core.cpython-39-x86_64-linux-gnu.so: ; undefined symbol: __svml_exp4_mask_e9. On 2021-09-16 13:08, Jonathon Misiewicz wrote:; > A traceback is never adequate information for a bug report.; > ; > We need a Psi4 version number, exact steps to reproduce the error, and; > need to know what operating system you're using.; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub [1], or unsubscribe; > [2].; > Triage notifications on the go with GitHub Mobile for iOS [3] or; > Android [4].; > ; > Links:; > ------; > [1] https://github.com/psi4/psi4/issues/2294#issuecomment-920805274; > [2]; > https://github.com/notifications/unsubscribe-auth/AENL3I6BPHZOPNVWELB2ITDUCHF2TANCNFSM5EEDQMYA; > [3]; > https://apps.apple.com/app/apple-store/id1477376905?ct=notification-email&amp;mt=8&amp;pt=524675; > [4]; > https://play.google.com/store/apps/details?id=com.github.android&amp;referrer=utm_campaign%3Dnotification-email%26utm_medium%3Demail%26utm_source%3Dgithub",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2294#issuecomment-921085607:1656,error,error,1656,https://psicode.org,https://github.com/psi4/psi4/issues/2294#issuecomment-921085607,1,['error'],['error']
Availability,"---------------. Psi4 started on: Wednesday, 13 June 2018 11:12AM. Process ID: 23105; Host: scychon-OptiPlex-7010; PSIDATADIR: /root/psi4/build/stage/share/psi4/share/psi4; Memory: 500.0 MiB; Threads: 1. ==> Input File <==. --------------------------------------------------------------------------; #! DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. # copy&paste list:; # ""b86bpbe"" : build_b86bpbe_superfunctional,; # ""blyp"" : build_blyp_superfunctional,; # ""svwn"" : build_svwn_superfunctional,; # ""pw86pbe"" : build_pw86pbe_superfunctional,; # ""pbe"" : build_pbe_superfunctional,; # ""bp86"" : build_bp86_superfunctional,; # ""pw91"" : build_pw91_superfunctional,; # ""ft97"" : build_ft97_superfunctional,; # ""bop"" : build_bop_superfunctional,; # ""mpwpw"" : build_mpwpw_superfunctional,. ## Programs/References; # ORCA v.4.0.1: cc-pVDZ, RI-MP2, no FC, GRID7, nori; # Gaussian 09: cc-pVDZ 5D SP Int(Grid=99770); # Turbomole 7.2, nori, grid 7; # NWCHEM grid: xfine, TOLERANCES accCoul 1e-14; ## Notes; # BP86 can come with PW91 or VWN5 LDA correlation. Deviations are quite large either way.; # SOGGA11 only up to 4 decimals even for Ne with fine grid. ggaval ={; ""blyp"" : -128.894855380969, # ORCA; ""svwn"" : -128.357941704 , # G09; ""pbe"" : -128.79305010293, # TM LDA-PW91; #""pbe"" : -128.793027408, # G09; #""pbe"" : -128.793068569269 # ORCA LDA-PW91; #""bp86"" : -128.905683777641, # ORCA LDA-PW91; #""bp86"" : -128.9092927447, # TM = LDA-VWN, or iop(3/74=418) in Gaussian; #""bp86"" : -128.903070321, #G09 LDA-PW86; ""pw91"" : -128.871229934635, # ORCA; ""mpwpw"" : -128.893378250504, # ORCA; ""ft97"" : -128.850056371480 , # NWCHEM xfine xc ft97 screening 1-e14; ""bop"" : -128.892404778404, # NWCHEM; #""b86bpbe"" : , # ???; ""pw86pbe"" : -128.946484366 , # G09 iop(3/74=809); ""sogga11"" : -128.889273547 , # G09.D01 ""SOGGA11/cc-pVDZ 5D SP Int(Grid=99770)""; }. molecule ne {; 0 1; Ne; }. set df_scf_guess false; set basis cc-pvdz; set reference rks; set dft_radial_points 99; set dft_spherical_points 770; s",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1038#issuecomment-396997775:1774,TOLER,TOLERANCES,1774,https://psicode.org,https://github.com/psi4/psi4/issues/1038#issuecomment-396997775,1,['TOLER'],['TOLERANCES']
Availability,"------------. Optional Input Fields; ---------------------. Output Fields; -------------. Optional Output Fields; ----------------------. """"""; if verbose > 2:; print('[1] {} JOBREC PRE-PLANT (j@i) <<<'.format('DFTD3')); pp.pprint(jobrec); print('>>>'). dftd3rec = dftd3_plant(jobrec). # test json roundtrip; jdftd3rec = json.dumps(dftd3rec); dftd3rec = json.loads(jdftd3rec). if verbose > 3:; print('[2] {}REC PRE-SUBPROCESS (m@i) <<<'.format('DFTD3')); pp.pprint(dftd3rec); print('>>>\n'). dftd3_subprocess(dftd3rec) # updates dftd3rec. if verbose > 3:; print('[3] {}REC POST-SUBPROCESS (m@io) <<<'.format('DFTD3')); pp.pprint(dftd3rec); print('>>>\n'). > dftd3_harvest(jobrec, dftd3rec) # updates jobrec. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:183:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. jobrec = {'driver': 'gradient', 'error': ""Dftd3Error('Unsuccessful run. Possibly -D variant not available in dftd3 version.',)""...a': [12, 12, 1, 1, 1, 1, ...], 'elem': ['C', 'C', 'H', 'H', 'H', 'H', ...], 'elez': [6, 6, 1, 1, 1, 1, ...], ...}, ...}; dftd3rec = {'command': ['dftd3', 'dftd3_geometry.xyz', '-grad'], 'dashlevel': 'd2', 'dashparams': {'alpha6': 20.0, 's6': 1.05, 'sr6': 1.1}, 'dashparams_citation': '', ...}. def dftd3_harvest(jobrec, dftd3rec):; """"""Process raw results from read-only `dftd3rec` into QCAspect; fields in returned `jobrec`: jobrec@i, dftd3rec@io -> jobrec@io. Parameters; ----------; jobrec : dict; Nested dictionary with input specifications for DFTD3 in generic; QC terms.; dftd3rec : dict; Nested dictionary with input specification and output collection; from DFTD3 in program-specific commands, files, & output capture. Returns; -------; jobrec : dict; Nested dictionary with input specification and output collection; from DFTD3 in generic QC terms. """"""; try:; jobrec['molecule']['real']; jobrec['driver']; jobrec['provenance']; jobrec['options']['fctldash']; ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:5705,avail,available,5705,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846,1,['avail'],['available']
Availability,"-0.9469373770 -1.1509808737; > }; >; > basis = core.BasisSet.build(mol, ""ORBITAL"", ""cc-pvdz"", quiet=True); > factory = core.IntegralFactory(basis); >; > # np.dot(so2ao, ao2so) should always be the identity. The functions are inverses.; >; > # We have a problem!; > petite = core.PetiteList(basis, factory, True); > so2ao = petite.sotoao().nph[0]; > print(so2ao); > print(so2ao.shape) # (24, 25); > ao2so = petite.aotoso().nph[0]; > print(np.dot(so2ao, ao2so)); >; > # Works fine!; > petite = core.PetiteList(basis, factory, False); > so2ao = petite.sotoao().nph[0]; > print(so2ao); > print(so2ao.shape) # (24, 24); > ao2so = petite.aotoso().nph[0]; > print(np.dot(so2ao, ao2so)); >; > The next question is what we do about this. I see two solutions:; >; > 1. Put a flag in sotoao that throws if include_pure_transform_ is; > true. I've run this change through full tests and didn't get any errors.; > However, somebody can assume sotoao() is the transpose of aotoso() and; > get rubbish.; > 2. Remove the functionality of the include_pure_transform flag; > entirely. The transformations are always invertible, but we lose whatever; > efficiency gain motivated including the flag in the first place.; >; > I don't know which is the best solution, or if there's a third.; >; > Pinging @andysim <https://github.com/andysim>, @susilehtola; > <https://github.com/susilehtola>, @jturney <https://github.com/jturney>,; > and @fevangelista <https://github.com/fevangelista>, all of whom have; > either touched this code or expressed interest in this issue previously.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1763?email_source=notifications&email_token=AAXVA5WSYVY7DDERYLO3GDLQWURWFA5CNFSM4JTXOXB2YY3PNVWWK3TUL52HS4DFUVEXG43VMWVGG33NNVSW45C7NFSM4H5JN6UA>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AAXVA5VPMHM3HOZ7O5JLBRDQWURWFANCNFSM4JTXOXBQ>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1763#issuecomment-560454475:3154,Ping,Pinging,3154,https://psicode.org,https://github.com/psi4/psi4/issues/1763#issuecomment-560454475,1,['Ping'],['Pinging']
Availability,"-> dftd3rec@io -> jobrec@io (returned) process. Input Fields; ------------. Optional Input Fields; ---------------------. Output Fields; -------------. Optional Output Fields; ----------------------. """"""; if verbose > 2:; print('[1] {} JOBREC PRE-PLANT (j@i) <<<'.format('DFTD3')); pp.pprint(jobrec); print('>>>'). dftd3rec = dftd3_plant(jobrec). # test json roundtrip; jdftd3rec = json.dumps(dftd3rec); dftd3rec = json.loads(jdftd3rec). if verbose > 3:; print('[2] {}REC PRE-SUBPROCESS (m@i) <<<'.format('DFTD3')); pp.pprint(dftd3rec); print('>>>\n'). dftd3_subprocess(dftd3rec) # updates dftd3rec. if verbose > 3:; print('[3] {}REC POST-SUBPROCESS (m@io) <<<'.format('DFTD3')); pp.pprint(dftd3rec); print('>>>\n'). > dftd3_harvest(jobrec, dftd3rec) # updates jobrec. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:183:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. jobrec = {'driver': 'gradient', 'error': ""Dftd3Error('Unsuccessful run. Possibly -D variant not available in dftd3 version.',)""...a': [12, 12, 1, 1, 1, 1, ...], 'elem': ['C', 'C', 'H', 'H', 'H', 'H', ...], 'elez': [6, 6, 1, 1, 1, 1, ...], ...}, ...}; dftd3rec = {'command': ['dftd3', 'dftd3_geometry.xyz', '-grad'], 'dashlevel': 'd2', 'dashparams': {'alpha6': 20.0, 's6': 1.05, 'sr6': 1.1}, 'dashparams_citation': '', ...}. def dftd3_harvest(jobrec, dftd3rec):; """"""Process raw results from read-only `dftd3rec` into QCAspect; fields in returned `jobrec`: jobrec@i, dftd3rec@io -> jobrec@io. Parameters; ----------; jobrec : dict; Nested dictionary with input specifications for DFTD3 in generic; QC terms.; dftd3rec : dict; Nested dictionary with input specification and output collection; from DFTD3 in program-specific commands, files, & output capture. Returns; -------; jobrec : dict; Nested dictionary with input specification and output collection; from DFTD3 in generic QC terms. """"""; try:; jobrec['molecule']['real']; jobrec['d",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:5642,error,error,5642,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846,1,['error'],['error']
Availability,"-j4 builds now run smoothly on my Mac and another cluster (cerebro), but I still have problems on one of our campus clusters. The error is not the same as the libdpd+libmints case mentioned above, so I'm investigating.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/219#issuecomment-173210896:130,error,error,130,https://psicode.org,https://github.com/psi4/psi4/issues/219#issuecomment-173210896,1,['error'],['error']
Availability,". may need to clear out space.; * Go through each active conda package off https://anaconda.org/psi4/repo, find the most recent build set (L/M, active py versions) that psi/psi-rt/psi-dev is using and _add_ (not replace) the `main` label. this makes a `conda install psi4 -c psi4` get everything psi4 needs. for the moment `conda install psi4 -c psi4/label/dev` will get the same set, until package psi4-1.4a1.dev1 gets uploaded. may help to check versions and build versions against ltrtver in conda_build_config.yaml. this step takes a while. ### constructor stage. * move into constructor_cutter_unified. there's a rEADME there. ; * edit pythons if necessary; * edit release/hash/ltrtver of cookiecutter.json .; * for non-rc's channel_tag should be empty string; * leave git set to a `rc` since that has more details; * copy cookiecutter.json to cookiecutter.json-vXXX; * cookiecutter/{{.../construct.yaml rarely needs editing; * do clear out .constructor so that everyting downloaded afresh; * clean out build/; * python run.py check for an py_ bad noarch pkgs; * if fetching times out, may have to run run.py several times. clear out build/ in between. it's the fetching that takes a long time, not constucting; * in the end, should have several constructors; ```; >>> lh build/psi4conda-1.3-py3.*/*64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 516M Feb 28 20:30 build/psi4conda-1.3-py3.6-linux-64/psi4conda-1.3-py36-Linux-x86_64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 299M Feb 28 20:31 build/psi4conda-1.3-py3.6-osx-64/psi4conda-1.3-py36-MacOSX-x86_64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 518M Feb 28 20:30 build/psi4conda-1.3-py3.7-linux-64/psi4conda-1.3-py37-Linux-x86_64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 299M Feb 28 20:31 build/psi4conda-1.3-py3.7-osx-64/psi4conda-1.3-py37-MacOSX-x86_64.sh; ```. * use command in readme to upload to vergil; * log in to vergil to make windows wsl symlinks. * worth downloading at least one L and M and installing it and running tests",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1496#issuecomment-468535372:2198,down,downloading,2198,https://psicode.org,https://github.com/psi4/psi4/issues/1496#issuecomment-468535372,2,['down'],['downloading']
Availability,". psi4.set_options({; 'basis': 'cc-pvtz',; 'reference': 'uhf',; 'scf_type': 'pk',; 'e_convergence': 1e-8,; 'd_convergence': 1e-8,; 'maxiter': 500,; }). energies = {method: {state: [] for state in range(1, num_states + 1)} for method in methods_to_try}; wfns = {method: {state: [] for state in range(1, num_states + 1)} for method in methods_to_try}. try:; scf_e, scf_wfn = psi4.energy('scf', return_wfn=True). for method in methods_to_try:; psi4.set_options({f'{method.lower()}__nroots': num_states}); energy, wfn = psi4.energy(method, return_wfn=True); for state in range(1, num_states + 1):; if energy is not None: # Check if energy calculation was successful; energies[method][state].append(energy[state - 1]); wfns[method][state].append(wfn[state - 1]); else:; energies[method][state].append(float('nan')); wfns[method][state].append(None). except Exception as e:; print(f""Error computing energies at bond length {bond_length}: {str(e)}""); energies = {method: {state: [float('nan')] for state in range(1, num_states + 1)} for method in methods_to_try}; wfns = {method: {state: [None] for state in range(1, num_states + 1)} for method in methods_to_try}. return energies, wfns. def generate_potential_energy_curves():; bond_lengths = np.arange(1.0, 10.2, 0.2); num_states = 6; methods_to_try = ['EOM-CCSD', 'EOM-CC2', 'EOM-CC3', 'EOM-CCSDT']. energies = {method: {state: [] for state in range(1, num_states + 1)} for method in methods_to_try}; wfns = {method: {state: [] for state in range(1, num_states + 1)} for method in methods_to_try}. for bond_length in bond_lengths:; casscf_energies, casscf_wfns = compute_energies(bond_length, num_states, methods_to_try); for method in methods_to_try:; for state in range(1, num_states + 1):; energies[method][state].append(casscf_energies[method][state]); wfns[method][state].append(casscf_wfns[method][state]). return bond_lengths, energies, wfns. # Generate potential energy curves; bond_lengths, energies, wfns = generate_potential_energy_curves(). # ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2172329824:1958,Error,Error,1958,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2172329824,1,['Error'],['Error']
Availability,".... Passed 4.46 sec; Start 424: chemps2-scf-n2; 12/12 Test #424: chemps2-scf-n2 ...................***Failed 0.06 sec. 33% tests passed, 8 tests failed out of 12. Label Time Summary:; addon = 0.06 sec*proc (1 test); cart = 0.17 sec*proc (3 tests); casscf = 0.21 sec*proc (1 test); cc = 0.06 sec*proc (1 test); chemps2 = 0.06 sec*proc (1 test); df = 0.06 sec*proc (1 test); dfmp2 = 0.06 sec*proc (1 test); fcidump = 0.06 sec*proc (1 test); json = 4.46 sec*proc (1 test); properties = 0.06 sec*proc (1 test); psi = 17.03 sec*proc (12 tests); psi4numpy = 9.97 sec*proc (2 tests); python = 1.99 sec*proc (1 test); quicktests = 17.03 sec*proc (12 tests); sapt = 0.06 sec*proc (1 test); scf = 0.06 sec*proc (1 test); smoketests = 17.03 sec*proc (12 tests); tutorial = 0.05 sec*proc (1 test). Total Test time (real) = 17.19 sec. The following tests FAILED:; 	 7 - casscf-sp (Failed); 	 22 - cc1 (Failed); 	132 - dfmp2-1 (Failed); 	196 - fcidump (Failed); 	330 - sapt1 (Failed); 	357 - scf-property (Failed); 	372 - tu1-h2o-energy (Failed); 	424 - chemps2-scf-n2 (Failed); Errors while running CTest; ```; The casscf-sp error is; ```; 7/428 Test: casscf-sp; Command: ""/usr/bin/python3.12"" ""/builddir/build/BUILD/psi4-1.3.2/tests/runtest.py"" ""/builddir/build/BUILD/psi4-1.3.2/tests/casscf-sp/input.dat"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux; -build/testresults.log"" ""false"" ""/builddir/build/BUILD/psi4-1.3.2"" ""false"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests/casscf-sp/output.dat"" ""/builddir/build/BUILD/psi4-1.3.2/; redhat-linux-build/stage/bin/psi4"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/share/psi4"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/lib64/python3.12/site-pac; kages""; Directory: /builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests/casscf-sp; ""casscf-sp"" start time: Aug 14 00:32 UTC; Output:; ----------------------------------------------------------; Command ['/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/bin/ps",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680:2195,Error,Errors,2195,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680,2,"['Error', 'error']","['Errors', 'error']"
Availability,"....... Passed 46.21 sec; Start 368: dft-custom-mgga; 23/24 Test #368: dft-custom-mgga .................. Passed 244.44 sec; Start 369: dft-custom-gga; 24/24 Test #369: dft-custom-gga ...................***Failed 171.36 sec; 	Ne: BLYP..........................................................PASSED; 	Ne: SVWN..........................................................PASSED; 	Ne: PBE...........................................................PASSED; 	Ne: PW91..........................................................PASSED; 	Ne: MPWPW.........................................................PASSED; Error occurred in file: C:\Users\User\psi4.git\psi4\src\psi4\libpsi4util\process.cc on line: 112; Traceback (most recent call last):; File ""C:/Users/User/psi4.git/win_install/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 44, in <module>; File ""C:\Users\User\psi4.git\win_install\lib\psi4\driver\driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""C:\Users\User\psi4.git\win_install\lib\psi4\driver\procrouting\proc.py"", line 2038, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""C:\Users\User\psi4.git\win_install\lib\psi4\driver\procrouting\proc.py"", line 1363, in scf_helper; e_scf = scf_wfn.compute_energy(). RuntimeError: ; Fatal Error: Iterations did not converge.; Error occurred in file: C:\Users\User\psi4.git\psi4\src\psi4\libpsi4util\process.cc on line: 112. Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ). 88% tests passed, 3 tests failed out of 24. Label Time Summary:; cart = 233.39 sec (4 tests); dft = 2298.14 sec (24 tests); mp2 = 16.23 sec (1 test); psi = 2298.14 sec (24 tests); quicktests = 144.78 sec (2 tests); scf = 2298.14 sec (24 tests); shorttests = 129.39 sec (3 tests). Total Test time (real) = 2303.35 sec. The following tests FAILED:; 	168 - dft3 (Failed); 	366 - dft-custom-dhdf (Failed); 	369 - dft-custom-gga (Failed); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-404224014:6131,Error,Error,6131,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-404224014,2,['Error'],['Error']
Availability,".................................PASSED; 401: 	Result: MAYER_INDICES.............................................PASSED; 401: 	CALCINFO_NBASIS...................................................PASSED; 401: 	CALCINFO_NMO......................................................PASSED; 401: 	CALCINFO_NALPHA...................................................PASSED; 401: 	CALCINFO_NBETA....................................................PASSED; 401: 	CALCINFO_NATOM....................................................PASSED; 401: 	SCF_ONE_ELECTRON_ENERGY: computed value (-122.2750930) does not match (-122.2750911) to 6 digits.; 401: 	JSON Success......................................................PASSED; 401: 	Result: DIPOLE....................................................PASSED; 401: 	Result: QUADRUPOLE................................................PASSED; 401: 	Result: MULLIKEN_CHARGES..........................................PASSED; 401: 	Result: LOWDIN_CHARGES............................................PASSED; 401: 	Result: WIBERG_LOWDIN_INDICES.....................................PASSED; 401: 	Result: MAYER_INDICES.............................................PASSED; 401: 	CALCINFO_NBASIS...................................................PASSED; 401: 	CALCINFO_NMO......................................................PASSED; 401: 	CALCINFO_NALPHA...................................................PASSED; 401: 	CALCINFO_NBETA....................................................PASSED; 401: 	CALCINFO_NATOM....................................................PASSED; 401: Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); 1/1 Test #401: json-schema_0_properties .........***Failed 1.21 sec. 0% tests passed, 1 tests failed out of 1. Label Time Summary:; json = 1.21 sec*proc (1 test); psi = 1.21 sec*proc (1 test). Total Test time (real) = 1.28 sec. The following tests FAILED:; 	401 - json-schema_0_properties (Failed); Errors while running CTest; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-403466174:12159,Error,Errors,12159,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-403466174,1,['Error'],['Errors']
Availability,"...And unfortunately, one more wrinkle. Upon deleting the remaining `P::e.globals`, we lose the`SCS-OMP3 TOTAL ENERGY` variable, causing a quick test failure. When you said ""kill off all the remaining P::e.globals"", did you mean _turn them into `variables_`, or did you mean _delete the lines, and remove any reference to them in tests_? There is nothing in`proc.py` to reconstruct the missing variables.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1789#issuecomment-581700316:150,failure,failure,150,https://psicode.org,https://github.com/psi4/psi4/pull/1789#issuecomment-581700316,1,['failure'],['failure']
Availability,"../tests/pytests/test_dft_benchmarks.py -rws -v -n12; [gw8] [ 5%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[B5050LYP- - ]; [gw7] [ 18%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[MN12-SX- - ]; [gw5] [ 22%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[SCAN0- - ]; [gw8] [ 33%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[wB97- - ]; [gw6] [ 36%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[wB97X-D- - ]; [gw6] [ 43%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[wB97X-V- - ]; [gw2] [ 47%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[SCAN- - ]; [gw8] [ 54%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[wB97X- - ]; [gw0] [ 72%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_interaction[MN12-SX- - ]; [gw8] [ 88%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97X-V- - ]; [gw9] [ 91%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97- - ]; [gw10] [ 96%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97X-D- - ]; [gw0] [ 96%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97X-D3BJ- - ]; [gw2] [ 99%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97X- - ]; ```; Most all the trouble are wB97. The B5050 is off in 3rd decimal but most of the other are; ```; E RuntimeError: ; E Fatal Error: Matrix::power: C_DSYEV failed; E Error occurred in file: /home/psilocaluser/gits/hrw-direct/psi4/src/psi4/libmints/matrix.cc on line: 2280; E The most recent 5 function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::Matrix::power(double, double); E psi::DIISManager::extrapolate(int, ...); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-601509105:2785,Error,Error,2785,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-601509105,2,['Error'],['Error']
Availability,".000; > C 8.214 0.000 0.000; > C 7.516 1.209 0.000; > C 6.120 1.209 0.000; > C 6.120 -1.209 0.000; > C 7.516 -1.209 0.000; > H 8.058 2.147 0.000; > H 5.578 2.147 0.000; > H 9.297 0.000 0.000; > H 5.578 -2.147 0.000; > H 8.058 -2.147 0.000; > ; > symmetry c1; > units angstrom; > }; > ; > set globals {; > reference rhf; > basis cc-pvdz; > #freeze_core true; > scf_type out_of_core; > dipmom true; > num_roots 4; > }; > ; > set scf d_convergence 10; > set detci e_convergence 8; > ; > ## thisenergy = energy('fci'); > ; > I am getting this erorr and i am not able to correct this. any one can; > help me ?; > ; > PSIO_ERROR: unit = 41, errval = 12; > PSIO_ERROR: 12 (error writing to file); > Traceback (most recent call last):; > File """", line 58, in; > File ""/usr/local/psi4/share/psi/python/driver.py"", line 549, in energy; > procedures['energy']lowername http://lowername,%20**kwargs; > File ""/usr/local/psi4/share/psi/python/proc.py"", line 1481, in run_detci; > psi4.transqt2(); > RuntimeError: PSIO Error; > file: /home/psi4.0b5/src/lib/libpsio/error.cc; > line: 116; > ; > Output File; > ; > ---; > ; > ```; > PSI4: An Open-Source Ab Initio Electronic Structure Package; > PSI 4.0.0-beta5 Driver; > ```; > ; > J. M. Turney, A. C. Simmonett, R. M. Parrish, E. G. Hohenstein,; > F. A. Evangelista, J. T. Fermann, B. J. Mintz, L. A. Burns, J. J. Wilke,; > M. L. Abrams, N. J. Russ, M. L. Leininger, C. L. Janssen, E. T. Seidl,; > W. D. Allen, H. F. Schaefer, R. A. King, E. F. Valeev, C. D. Sherrill,; > and T. D. Crawford, WIREs Comput. Mol. Sci., (2011) (doi: 10.1002/wcms.93); > ; > ```; > Additional Contributions by; > ```; > ; > ## A. E. DePrince, M. Saitow, U. Bozkaya, A. Yu. Sokolov; > ; > Process ID: 4249; > PSI4DATADIR: /usr/local/psi4/share/psi; > ; > Using LocalCommunicator (Number of processes = 1); > ; > Memory level set to 256.000 MB; > ; > ## ==> Input File <==; > ; > Finding of 30 higher roots(i.e excited states) and then finding transition; > dipole moment from ground state",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/61#issuecomment-58650322:2116,Error,Error,2116,https://psicode.org,https://github.com/psi4/psi4/issues/61#issuecomment-58650322,1,['Error'],['Error']
Availability,".2.199/linux/mpi; _=/usr/bin/printenv; ```. cat /home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsIntelCache.cmake; ```; # psi4DepsIntelCache.cmake; # ------------------------; #; # This module sets some likely variable values to initialize the CMake; # cache for dependencies to build your Psi4 source.; # Note that this uses user-provided (non-conda) tools.; #; # See ``psi4-path-advisor`` (or cmake command below) for use.; #; # >>> /home/termo/miniconda3/envs/p4dev35/bin/cmake \; # -H. \; # -C/home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsIntelCache.cmake \; # -Bobjdir; #. set(CMAKE_C_COMPILER ""icc"" CACHE STRING """"); set(CMAKE_CXX_COMPILER ""icpc"" CACHE STRING """"); set(CMAKE_Fortran_COMPILER ""ifort"" CACHE STRING """"). set(CMAKE_C_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"); set(CMAKE_CXX_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"); set(CMAKE_Fortran_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"). #set(CMAKE_CXX_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"); ```; --> same error at same place as earlier... icpc -gnu-prefix=x86_64-conda_cos6-linux-gnu- hello.cc -o hello && ./hello; ```; In file included from /home/termo/miniconda3/envs/p4dev35/bin/../x86_64-conda_cos6-linux-gnu/include/c++/7.2.0/x86_64-conda_cos6-linux-gnu/bits/os_defines.h(39),; from /home/termo/miniconda3/envs/p4dev35/bin/../x86_64-conda_cos6-linux-gnu/include/c++/7.2.0/x86_64-conda_cos6-linux-gnu/bits/c++config.h(533),; from /home/termo/miniconda3/envs/p4dev35/bin/../x86_64-conda_cos6-linux-gnu/include/c++/7.2.0/iostream(38),; from hello.cc(1):; /usr/include/features.h(367): catastrophic error: cannot open source file ""sys/cdefs.h""; # include <sys/cdefs.h>; ^. compilation aborted for hello.cc (code 4). ```; now we are getting somewhere :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386642448:11053,error,error,11053,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386642448,2,['error'],['error']
Availability,".cc.o); ...; ""__ZTISt8bad_cast"", referenced from:; __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj in liboptking.a(optking.cc.o); __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE4syncEv in liboptking.a(optking.cc.o); __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE9underflowEv in liboptking.a(optking.cc.o); __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE8overflowEi in liboptking.a(optking.cc.o); __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj in libmints.a(basisset_parser.cc.o); __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE4syncEv in libmints.a(basisset_parser.cc.o); __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE9underflowEv in libmints.a(basisset_parser.cc.o); ...; ""__ZTISt9bad_alloc"", referenced from:; __ZTIN5boost16exception_detail10bad_alloc_E in libpsio.a(filemanager.cc.o); __ZN5boost6python15instance_holder8allocateEP7_objectmm in libboost_python-1_57.a(class.o); GCC_except_table3 in libboost_python-1_57.a(errors.o); __ZN5boost6python6detail12gcc_demangleEPKc in libboost_python-1_57.a(type_id.o); GCC_except_table3 in libmints.a(eribase.cc.o); GCC_except_table3 in libmints.a(3coverlap.cc.o); __ZN5Eigen8internal19throw_std_bad_allocEv in libpcm.a(Meddle.cpp.o); ...; ""__ZTISt9exception"", referenced from:; __ZTIN5boost2io12format_errorE in libmints.a(molecule.cc.o); GCC_except_table3 in libboost_python-1_57.a(errors.o); __ZTIN6PsiAPI13PsiException2E in libpsiapi.a(BasisSet.cc.o); __ZTIN3psi13PsiException2E in libmolecule.a(FragmentedSys.cc.o); __ZTIN3psi13PsiException2E in libparallel2.a(TaskMap.cc.o); __ZTIN3psi13PsiException2E in libparallel2.a(TaskStatistics.cc.o); __ZTIN3psi13PsiException2E in libPsiUtil.a(Exception2.cc.o); ...; ""__ZTIa"", referenced from:; __ZN5boost6python9converter29initialize_builtin_convertersEv in libboost_python-1_57.a(builtin_converters.o); ""__ZTIb"", referenced from:; __ZN5boost6python6detail15signature_arityILj3EE4implINS_3mpl7vector4IvRN3psi11PSIOManagerEibEEE8elem",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/199#issuecomment-169139808:76455,error,errors,76455,https://psicode.org,https://github.com/psi4/psi4/issues/199#issuecomment-169139808,1,['error'],['errors']
Availability,".lib(blas.cc.obj) : error LNK2019: 无法解析的外部符号 dgemv_，该符号在函数 ""void __cdecl psi::fnocc::DGEMV(char &,long &,long &,double &,double *,long &,double *,long &,double &,double *,long &)"" (?DGEMV@fnocc@psi@@YAXAEADAEAJ1AEANPEAN131231@Z) 中被引用; F:\fnocc.lib(blas.cc.obj) : error LNK2019: 无法解析的外部符号 dgemm_，该符号在函数 ""void __cdecl psi::fnocc::DGEMM(char &,char &,long &,long &,long &,double &,double *,long &,double *,long &,double &,double *,long &)"" (?DGEMM@fnocc@psi@@YAXAEAD0AEAJ11AEANPEAN131231@Z) 中被引用; F:\optking.lib(linear_algebra.cc.obj) : error LNK2001: 无法解析的外部符号 dgemm_; F:\psimrcc.lib(algebra_interface.cc.obj) : error LNK2001: 无法解析的外部符号 dgemm_; F:\psimrcc.lib(operation_contraction.cc.obj) : error LNK2001: 无法解析的外部符号 dgemm_; F:\fnocc.lib(blas.cc.obj) : error LNK2019: 无法解析的外部符号 dsyev_，该符号在函数 ""void __cdecl psi::fnocc::DSYEV(char &,char &,long &,double *,long &,double *,double *,long &,long &)"" (?DSYEV@fnocc@psi@@YAXAEAD0AEAJPEAN12211@Z) 中被引用; F:\optking.lib(linear_algebra.cc.obj) : error LNK2001: 无法解析的外部符号 dsyev_; F:\fnocc.lib(blas.cc.obj) : error LNK2019: 无法解析的外部符号 dspev_，该符号在函数 ""void __cdecl psi::fnocc::DSPEV(char &,char &,long &,double *,double *,double *,long &,double *,long &)"" (?DSPEV@fnocc@psi@@YAXAEAD0AEAJPEAN22121@Z) 中被引用; F:\fnocc.lib(blas.cc.obj) : error LNK2019: 无法解析的外部符号 dgesvd_，该符号在函数 ""void __cdecl psi::fnocc::DGESVD(char &,char &,long &,long &,double *,long &,double *,double *,long &,double *,long &,double *,long &,long &)"" (?DGESVD@fnocc@psi@@YAXAEAD0AEAJ1PEAN122121211@Z) 中被引用; F:\optking.lib(linear_algebra.cc.obj) : error LNK2019: 无法解析的外部符号 dgeev_，该符号在函数 opt_asymm_matrix_eig 中被引用; F:\psimrcc.lib(manybody.cc.obj) : error LNK2001: 无法解析的外部符号 dgeev_; F:\psimrcc.lib(heff_diagonalize.cc.obj) : error LNK2001: 无法解析的外部符号 dgeev_; F:\psimrcc.lib(blas_diis.cc.obj) : error LNK2019: 无法解析的外部符号 ddot_，该符号在函数 ""public: void __cdecl psi::psimrcc::CCBLAS::diis(int,double,enum psi::psimrcc::DiisType)"" (?diis@CCBLAS@psimrcc@psi@@QEAAXHNW4DiisType@23@@Z) 中被引用; F:\qt.lib(blas_intfc.cc.obj",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:8088,error,error,8088,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,".lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dggsvd3，该符号在函数 ""int __cdecl psi::C_DGGSVD3(char,char,char,int,int,int,int *,int *,double *,int,double *,int,double *,double *,double *,int,double *,int,double *,int,double *,int,int *)"" (?C_DGGSVD3@psi@@YAHDDDHHHPEAH0PEANH1H111H1H1H1H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dggsvp3，该符号在函数 ""int __cdecl psi::C_DGGSVP3(char,char,char,int,int,int,double *,int,double *,int,double,double,int *,int *,double *,int,double *,int,double *,int,int *,double *,double *,int)"" (?C_DGGSVP3@psi@@YAHDDDHHHPEANH0HNNPEAH10H0H0H100H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgtcon，该符号在函数 ""int __cdecl psi::C_DGTCON(char,int,double *,double *,double *,double *,int *,double,double *,double *,int *)"" (?C_DGTCON@psi@@YAHDHPEAN000PEAHN001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgtrfs，该符号在函数 ""int __cdecl psi::C_DGTRFS(char,int,int,double *,double *,double *,double *,double *,double *,double *,int *,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DGTRFS@psi@@YAHDHHPEAN000000PEAH0H0H0001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgtsv，该符号在函数 ""int __cdecl psi::C_DGTSV(int,int,double *,double *,double *,double *,int)"" (?C_DGTSV@psi@@YAHHHPEAN000H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgtsvx，该符号在函数 ""int __cdecl psi::C_DGTSVX(char,char,int,int,double *,double *,double *,double *,double *,double *,double *,int *,double *,int,double *,int,double *)"" (?C_DGTSVX@psi@@YAHDDHHPEAN000000PEAH0H0H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgttrf，该符号在函数 ""int __cdecl psi::C_DGTTRF(int,double *,double *,double *,double *,int *)"" (?C_DGTTRF@psi@@YAHHPEAN000PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgttrs，该符号在函数 ""int __cdecl psi::C_DGTTRS(char,int,int,double *,double *,double *,double *,int *,double *,int)"" (?C_DGTTRS@psi@@YAHDHHPEAN000PEAH0H@Z) 中被引用; F:\qt.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:26487,error,error,26487,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"/CVS thing, IMHO. We were using Git for a very long time before making the public/private split and the core developers are extremely familiar with Git’s distributed nature. The old way of developing Psi was to have a private repo (which used to be CVS, then SVN, then Git/SVN, before switching completely to Git) and to only release static tarballs every now and then. Lori touched on the reason for the private repo - we need to be able to collaborate with each other but don’t want to release certain features until we’ve been able to write them up and test them. The idea of having the private repo be a local one is fine if you’re working in isolation, but most of our code is developed collaboratively so we need a central place, like GitHub, to be able to store the repo. Adding a public mirror was just a convenient way to provide more timely updates than static releases, and we have not been diligent enough in keeping this synced up. If GitHub were to allow more fine-grained control of branch access, perhaps we could collapse down to one repo. As things stand, I think that removing the private repo would prevent people from working together on new features that are to be released at a later date. These issues were mooted a few years ago when we set the dual repo system up. If there’s been a GitHub update in the intervening time that allows more fine-grained access, or if anybody has a better idea that doesn’t interrupt our workflow, then we’re always open to suggestions. Andy. > On May 3, 2015, at 11:50 AM, Ryan Richard notifications@github.com wrote:; > ; > I think the short answer may be that a lot of the developers are still used; > to version control models like SVN or CVS.; > ; > Honestly I think you have the right idea though, with git there really; > isn't a need for two repositories for an open source code so long as we; > adopt the accompanying philosophy. It's now a matter of getting everyone; > on board.; > ; > Sent from my Android (without spellcheck). Plea",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/88#issuecomment-98498738:1061,down,down,1061,https://psicode.org,https://github.com/psi4/psi4/issues/88#issuecomment-98498738,1,['down'],['down']
Availability,/bio/gromacs/bin:/opt/bio/gmap/bin:/opt/bio/tigr/bin:/opt/bio/autodocksuite/bin:/opt/bio/wgs/bin:/opt/eclipse:/opt/ganglia/bin:/opt/ganglia/sbin:/usr/java/latest/bin:/opt/maven/bin:/opt/pdsh/bin:/opt/rocks/bin:/opt/rocks/sbin:/opt/condor/bin:/opt/condor/sbin:/opt/gridengine/bin/linux-x64:/home/gaussian/g09/bsd:/home/gaussian/g09/local:/home/gaussian/g09/extras:/home/gaussian/g09:/home/software/molden4.0:/home/software/Python-2.7.6/bin:/home/ch1jgh/bin:/home/software/Turbomole/7.1/TURBOMOLE/scripts:/home/software/Turbomole/7.1/TURBOMOLE/bin/em64t-unknown-linux-gnu:/home/software/psi4conda/bin:/home/software/multiwfn:/home/software/molden4.0:/home/software/Python-2.7.6/bin:/home/ch1jgh/bin:/home/software/Turbomole/7.1/TURBOMOLE/scripts:/home/software/Turbomole/7.1/TURBOMOLE/bin/em64t-unknown-linux-gnu_smp`. `[ch1jgh@xxx ~]$ echo $PYTHONPATH; :/export/home/ch1jgh/pbt:/export/home/ch1jgh/scripts:/export/home/ch1jgh/pbt:/export/home/ch1jgh/scripts`. `[ch1jgh@xxx ~]$ echo $LD_LIBRARY_PATH ; /home/software/intel/composer_xe_2013_sp1.1.106/compiler/lib/intel64:/home/software/intel/composer_xe_2013_sp1.1.106/mpirt/lib/intel64:/home/software/intel/composer_xe_2013_sp1.1.106/ipp/../compiler/lib/intel64:/home/software/intel/composer_xe_2013_sp1.1.106/ipp/lib/intel64:/home/software/intel/composer_xe_2013_sp1.1.106/compiler/lib/intel64:/home/software/intel/composer_xe_2013_sp1.1.106/mkl/lib/intel64:/home/software/intel/composer_xe_2013_sp1.1.106/tbb/lib/intel64/gcc4.4:/home/software/intel/composer_xe_2013_sp1.1.106/compiler/lib/intel64:/home/software/intel/composer_xe_2013_sp1.1.106/mpirt/lib/intel64:/home/software/intel/composer_xe_2013_sp1.1.106/ipp/../compiler/lib/intel64:/home/software/intel/composer_xe_2013_sp1.1.106/ipp/lib/intel64:/home/software/intel/composer_xe_2013_sp1.1.106/compiler/lib/intel64:/home/software/intel/composer_xe_2013_sp1.1.106/mkl/lib/intel64:/home/software/intel/composer_xe_2013_sp1.1.106/tbb/lib/intel64/gcc4.4:/home/gaussian/g09/bsd:/home/gaussian/g09/,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1088#issuecomment-404235526:4405,echo,echo,4405,https://psicode.org,https://github.com/psi4/psi4/issues/1088#issuecomment-404235526,1,['echo'],['echo']
Availability,"/executable.cpp:459: undefined reference to `CheMPS2::DMRG::DMRG(CheMPS2::Problem*, CheMPS2::ConvergenceScheme*, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'; /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:462: undefined reference to `CheMPS2::DMRG::newExcitation(double)'; /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:463: undefined reference to `CheMPS2::DMRG::Solve()'; /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:464: undefined reference to `CheMPS2::DMRG::activateExcitations(int)'; /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:475: undefined reference to `CheMPS2::DMRG::deleteStoredOperators()'; /tmp/ccJGpNaW.ltrans0.ltrans.o: In function `CheMPS2::DMRG::calc2DMandCorrelations()':; /home/jturney/Code/CheMPS2/CheMPS2/include/chemps2/DMRG.h:104: undefined reference to `CheMPS2::DMRG::calc_rdms_and_correlations(bool)'; /tmp/ccJGpNaW.ltrans0.ltrans.o: In function `main':; /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:470: undefined reference to `CheMPS2::TwoDM::write2DMAfile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) const'; /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:471: undefined reference to `CheMPS2::Correlations::Print(int, int) const'; /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:352: undefined reference to `CheMPS2::Irreps::~Irreps()'; /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:343: undefined reference to `CheMPS2::Irreps::~Irreps()'; /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:410: undefined reference to `CheMPS2::Irreps::~Irreps()'; collect2: error: ld returned 1 exit status; CheMPS2/CMakeFiles/chemps2bin.dir/build.make:92: recipe for target 'CheMPS2/chemps2' failed; make[2]: *** [CheMPS2/chemps2] Error 1; CMakeFiles/Makefile2:149: recipe for target 'CheMPS2/CMakeFiles/chemps2bin.dir/all' failed; make[1]: *** [CheMPS2/CMakeFiles/chemps2bin.dir/all] Error 2; Makefile:126: recipe for target 'all' failed; make: *** [all] Error 2; ... ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/264#issuecomment-185220619:3748,error,error,3748,https://psicode.org,https://github.com/psi4/psi4/issues/264#issuecomment-185220619,4,"['Error', 'error']","['Error', 'error']"
Availability,/hmmer/bin:/opt/bio/phylip/exe:/opt/bio/mrbayes:/opt/bio/fasta:/opt/bio/glimmer/bin:/opt/bio/glimmer/scripts:/opt/bio/gromacs/bin:/opt/bio/gmap/bin:/opt/bio/tigr/bin:/opt/bio/autodocksuite/bin:/opt/bio/wgs/bin:/opt/eclipse:/opt/ganglia/bin:/opt/ganglia/sbin:/usr/java/latest/bin:/opt/maven/bin:/opt/pdsh/bin:/opt/rocks/bin:/opt/rocks/sbin:/opt/condor/bin:/opt/condor/sbin:/opt/gridengine/bin/linux-x64:/home/gaussian/g09/bsd:/home/gaussian/g09/local:/home/gaussian/g09/extras:/home/gaussian/g09:/home/software/molden4.0:/home/software/Python-2.7.6/bin:/home/ch1jgh/bin:/home/software/Turbomole/7.1/TURBOMOLE/scripts:/home/software/Turbomole/7.1/TURBOMOLE/bin/em64t-unknown-linux-gnu:/home/software/psi4conda/bin:/home/software/multiwfn:/home/software/molden4.0:/home/software/Python-2.7.6/bin:/home/ch1jgh/bin:/home/software/Turbomole/7.1/TURBOMOLE/scripts:/home/software/Turbomole/7.1/TURBOMOLE/bin/em64t-unknown-linux-gnu_smp`. `[ch1jgh@xxx ~]$ echo $PYTHONPATH; :/export/home/ch1jgh/pbt:/export/home/ch1jgh/scripts:/export/home/ch1jgh/pbt:/export/home/ch1jgh/scripts`. `[ch1jgh@xxx ~]$ echo $LD_LIBRARY_PATH ; /home/software/intel/composer_xe_2013_sp1.1.106/compiler/lib/intel64:/home/software/intel/composer_xe_2013_sp1.1.106/mpirt/lib/intel64:/home/software/intel/composer_xe_2013_sp1.1.106/ipp/../compiler/lib/intel64:/home/software/intel/composer_xe_2013_sp1.1.106/ipp/lib/intel64:/home/software/intel/composer_xe_2013_sp1.1.106/compiler/lib/intel64:/home/software/intel/composer_xe_2013_sp1.1.106/mkl/lib/intel64:/home/software/intel/composer_xe_2013_sp1.1.106/tbb/lib/intel64/gcc4.4:/home/software/intel/composer_xe_2013_sp1.1.106/compiler/lib/intel64:/home/software/intel/composer_xe_2013_sp1.1.106/mpirt/lib/intel64:/home/software/intel/composer_xe_2013_sp1.1.106/ipp/../compiler/lib/intel64:/home/software/intel/composer_xe_2013_sp1.1.106/ipp/lib/intel64:/home/software/intel/composer_xe_2013_sp1.1.106/compiler/lib/intel64:/home/software/intel/composer_xe_2013_sp1.1.106/mkl/lib/intel64:,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1088#issuecomment-404235526:4263,echo,echo,4263,https://psicode.org,https://github.com/psi4/psi4/issues/1088#issuecomment-404235526,1,['echo'],['echo']
Availability,"/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:. /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:. -- Docs: https://docs.pytest.org/en/latest/warnings.html; ================================================ 12 passed, 10 skipped, 304 warnings in 43.19 seconds ================================================`; `",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892:83650,error,error,83650,https://psicode.org,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892,3,['error'],['error']
Availability,/psi4/../../../libstdc++.so.6:; 		ld-linux-x86-64.so.2 (GLIBC_2.3) => /lib64/ld-linux-x86-64.so.2; 		libm.so.6 (GLIBC_2.2.5) => /lib64/libm.so.6; 		libgcc_s.so.1 (GCC_4.2.0) => /home/usrname/.local/opt/PSI4/v1.2/lib/python3.6/site-packages/psi4/../../../libgcc_s.so.1; 		libgcc_s.so.1 (GCC_3.3) => /home/usrname/.local/opt/PSI4/v1.2/lib/python3.6/site-packages/psi4/../../../libgcc_s.so.1; 		libgcc_s.so.1 (GCC_3.0) => /home/usrname/.local/opt/PSI4/v1.2/lib/python3.6/site-packages/psi4/../../../libgcc_s.so.1; 		libc.so.6 (GLIBC_2.3) => /lib64/libc.so.6; 		libc.so.6 (GLIBC_2.3.2) => /lib64/libc.so.6; 		libc.so.6 (GLIBC_2.2.5) => /lib64/libc.so.6; 	/home/usrname/.local/opt/PSI4/v1.2/lib/python3.6/site-packages/psi4/../../../libgcc_s.so.1:; 		libc.so.6 (GLIBC_2.2.5) => /lib64/libc.so.6; 	/lib64/libc.so.6:; 		ld-linux-x86-64.so.2 (GLIBC_PRIVATE) => /lib64/ld-linux-x86-64.so.2; 		ld-linux-x86-64.so.2 (GLIBC_2.3) => /lib64/ld-linux-x86-64.so.2; 	/home/usrname/.local/opt/PSI4/v1.2/lib/python3.6/site-packages/psi4/../../.././libhdf5.so.101:; 		libdl.so.2 (GLIBC_2.2.5) => /lib64/libdl.so.2; 		libm.so.6 (GLIBC_2.2.5) => /lib64/libm.so.6; 		libpthread.so.0 (GLIBC_2.3.2) => /lib64/libpthread.so.0; 		libpthread.so.0 (GLIBC_2.2.5) => /lib64/libpthread.so.0; 		libc.so.6 (GLIBC_2.8) => /lib64/libc.so.6; 		libc.so.6 (GLIBC_2.3) => /lib64/libc.so.6; 		libc.so.6 (GLIBC_2.4) => /lib64/libc.so.6; 		libc.so.6 (GLIBC_2.2.5) => /lib64/libc.so.6; 		libc.so.6 (GLIBC_2.3.4) => /lib64/libc.so.6; 	/home/usrname/.local/opt/PSI4/v1.2/lib/python3.6/site-packages/psi4/../../.././libz.so.1:; 		libc.so.6 (GLIBC_2.4) => /lib64/libc.so.6; 		libc.so.6 (GLIBC_2.2.5) => /lib64/libc.so.6; 	/lib64/librt.so.1:; 		libpthread.so.0 (GLIBC_2.2.5) => /lib64/libpthread.so.0; 		libpthread.so.0 (GLIBC_PRIVATE) => /lib64/libpthread.so.0; 		libc.so.6 (GLIBC_2.3.2) => /lib64/libc.so.6; 		libc.so.6 (GLIBC_2.2.5) => /lib64/libc.so.6; 		libc.so.6 (GLIBC_PRIVATE) => /lib64/libc.so.6; ```; psi4; Segmentation fault (core dumped),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1088#issuecomment-405831690:18679,fault,fault,18679,https://psicode.org,https://github.com/psi4/psi4/issues/1088#issuecomment-405831690,1,['fault'],['fault']
Availability,"/src/lib/libPsiUtil/Implementations/../Table.h: In member function ‘std::string psi::Table<T, Args>::PrintOut(int) const’:; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:228: sorry, unimplemented: cannot expand ‘Args ...’ into a fixed-length argument list; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h: In constructor ‘psi::Table<T, Args>::Table(int, const T&, Args& ...)’:; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:235: sorry, unimplemented: cannot expand ‘Args ...’ into a fixed-length argument list; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:235: error: expected ‘{’ before ‘(’ token; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h: At global scope:; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:235: error: expected unqualified-id before numeric constant; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:235: error: expected ‘)’ before numeric constant; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h: In member function ‘void psi::Table<T, Args>::SetBorder(psi::TableSide, char)’:; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:251: sorry, unimplemented: cannot expand ‘Args ...’ into a fixed-length argument list; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:251: error: invalid type in declaration before ‘(’ token; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h: In constructor ‘psi::Table<T, Args>::Table(int, const T&, Args& ...) [with T = psi::TableColumn<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >, Args = psi::TableColumn<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >, psi::TableColumn<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >, psi::TableColumn<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >]’:; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/Timer.c",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/404#issuecomment-224865906:2137,error,error,2137,https://psicode.org,https://github.com/psi4/psi4/issues/404#issuecomment-224865906,1,['error'],['error']
Availability,"/test_psi4.py::test_psi4_scfproperty PASSED [100%]. ======================================================= FAILURES =======================================================; ______________________________________________________ test_dftd3 ______________________________________________________. molrec = {'elbl': ['', '', '', '', '', '', ...], 'elea': [12, 12, 1, 1, 1, 1, ...], 'elem': ['C', 'C', 'H', 'H', 'H', 'H', ...], 'elez': [6, 6, 1, 1, 1, 1, ...], ...}; name_hint = 'b3lyp', level_hint = 'd2', param_tweaks = None, ptype = 'gradient', dashcoeff_supplement = None; verbose = 1. def run_dftd3_from_arrays(molrec,; name_hint=None,; level_hint=None,; param_tweaks=None,; ptype='energy',; dashcoeff_supplement=None,; verbose=1):; """"""Specialized signature disentangling dispersion level and; parameters for computing on `molecule` with engine `DFTD3`. See; `dashparam.from_array` for parameter details. """"""; jobrec = {}; jobrec['error'] = ''; jobrec['success'] = None; jobrec['return_output'] = True; prov = {}; prov['creator'] = 'QCDB'; prov['version'] = __version__; prov['routine'] = sys._getframe().f_code.co_name; jobrec['provenance'] = prov. # strip engine hint; if name_hint.startswith('d3-'):; name_hint = name_hint[3:]. opts = {}; opts['level_hint'] = level_hint; opts['params_tweaks'] = param_tweaks; opts['dashcoeff_supplement'] = dashcoeff_supplement. jobrec['molecule'] = molrec; jobrec['method'] = name_hint; _, jobrec['driver'] = parse_dertype(ptype, max_derivative=1); jobrec['options'] = opts; #jobrec['options'] = copy.deepcopy(options). try:; > dftd3_driver(jobrec). ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:131:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. jobrec = {'driver': 'gradient', 'error': ""Dftd3Error('Unsuccessful run. Possibly -D variant not available in dftd3 version.',)""...a': [12, 12, 1, 1, 1, 1, ...], 'elem': ['C', 'C', 'H', 'H', 'H', 'H', ...], 'elez': [",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:3445,error,error,3445,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846,1,['error'],['error']
Availability,"0) ; - Improve QCEngine interface for empirical dispersion (#2180) ; - Remove CHKPT (#2186) ; - X2C gradient warning (#2200) ; - Update cmake files to enable Flexiblas support from Fedora (#2246) ; ; Bug Fixes ; --------- ; ; - Fix bug in DF-CC when reading wfn with scf_type CD (#1771) ; - Fix computation of properties in DFOCC (#1772) ; - Fix ROHF and CUHF for asymmetric orthogonalizing matrix X (#1781) ; - Fix to NBO, move to python (#1790) ; - Fix memory bug in DMRG (#1802) ; - Add missing E(30)ind term in SAPT (#1803) ; - Typo in error message (#1811) ; - Fix Azure clang omp (#1822) ; - Remove Psi3 from docs (#1815) ; - Fix to omp call (#1823) ; - Handle very bad linear dependencies (#1844) ; - Fixes to vibrational analysis (#1845) ; - Fix threading in SAPT CPHF (#1849) ; - Fix MP2 handling of 1-electron cases (#1857) ; - Replace seg fault with error in DETCI and DFOCC (#1858, #1861) ; - Fix printing of custom basis sets in banner (#1880) ; - Remove omp_set_nested (#1883) ; - Fix seg fault in CCEnergyWavefunction::rotation() (#1887) ; - Threading fix in ESP potential build (#1900) ; - Proper computation of TDMs from DETCI (#1910) ; - Close DETCI files (#1926) ; - Fix UHF after RHF CCSD gradient crash (#1928) ; - Fix ECPa f-electron combinations (#1930) ; - Keep default_psio_manager alive (#1933) ; - Fix printing of coordinates (#1938) ; - Fixes to Treutler gcc5 (#1945) ; - Fix string setting in options (#1955) ; - USAPT spin fix (#1948, #1969) ; - Distinguish SCF and CC densities (#1962) ; - Improvement to PCMsolver interface (#1977) ; - Fix to occ orbital gradient (#1988) ; - Fix to PK (#1990) ; - Fix bug in scf response (#1999) ; - Correct Bragg-Slater radius for Zn (#2000) ; - Skip Ghost atoms interacting with external charges (#1993) ; - Fix inconsistent basis set parsing (#2002) ; - Psi4dev package working on mac (#2005) ; - Patches to FNOCC and DFOCC (#2013) ; - Fix QCSchema interface (#2014) ; - Fix VV10 for clang (#2017) ; - Plugins work with pybind11 v2.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:5529,fault,fault,5529,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683,2,"['alive', 'fault']","['alive', 'fault']"
Availability,"000.000000; 72 500000000.000000; 73 700000000.000000; 74 1000000000.000000; 75 2000000000.000000; 76 3000000000.000000; 77 4000000000.000000; 78 5000000000.000000; 79 6000000000.000000; 80 7000000000.000000; 81 10000000000.000000; 82 20000000000.000000; 83 30000000000.000000; 84 40000000000.000000; 85 50000000000.000000; 86 70000000000.000000; 87 100000000000.000000; 88 200000000000.000000; 89 300000000000.000000; 90 400000000000.000000; 91 500000000000.000000; 92 700000000000.000000; 93 1000000000000.000000; 94 2000000000000.000000; 95 3000000000000.000000; 96 4000000000000.000000; 97 5000000000000.000000; 98 7000000000000.000000; ```; [error file](https://github.com/psi4/psi4/blob/master/psi4/share/psi4/quadratures/1_x/error.bin), 5247 doubles read into a Matrix. many zeros; ```; 0 0 0.0212800000000000; 0 1 0.0435800000000000; 0 2 0.0596000000000000; 0 3 0.0707500000000000; 0 4 0.0782500000000000; 0 5 0.0828800000000000; 0 6 0.0851600000000000; 0 7 0.0855600000000000; 0 8 0.0855600000000000; 0 9 0.0000000000000000; 0 10 0.0000000000000000; 0 11 0.0000000000000000; 0 12 0.0000000000000000; ...; ```. [This block](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/lib3index/denominator.cc#L566-L595) reads those bin files. It occurs three times in denominator.cc, once for each flavor of `*LaplaceDenominator.decompose()`, so refactoring into calling a free function is perhaps in order. After the arrays are filled, both are used to make sure the system can be fit w/i the availability and accuracy of the stored quadratures, https://github.com/psi4/psi4/blob/master/psi4/src/psi4/lib3index/denominator.cc#L196-L209. decompose happens once per SAPT calc, so perhaps ok to make text file? or alternate big-endian file? or better to detect host-endianness and read little-endian file accordingly? routine goes on to regex read a single quadrature file of <100 lines, so while this isn't time consuming compared to SAPT calc, the `.bin` files are larger than those in rest of dir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1462#issuecomment-451726050:3055,avail,availability,3055,https://psicode.org,https://github.com/psi4/psi4/issues/1462#issuecomment-451726050,1,['avail'],['availability']
Availability,"000000; 57 5000000.000000; 58 6000000.000000; 59 7000000.000000; 60 8000000.000000; 61 9000000.000000; 62 10000000.000000; 63 20000000.000000; 64 30000000.000000; 65 40000000.000000; 66 50000000.000000; 67 70000000.000000; 68 100000000.000000; 69 200000000.000000; 70 300000000.000000; 71 400000000.000000; 72 500000000.000000; 73 700000000.000000; 74 1000000000.000000; 75 2000000000.000000; 76 3000000000.000000; 77 4000000000.000000; 78 5000000000.000000; 79 6000000000.000000; 80 7000000000.000000; 81 10000000000.000000; 82 20000000000.000000; 83 30000000000.000000; 84 40000000000.000000; 85 50000000000.000000; 86 70000000000.000000; 87 100000000000.000000; 88 200000000000.000000; 89 300000000000.000000; 90 400000000000.000000; 91 500000000000.000000; 92 700000000000.000000; 93 1000000000000.000000; 94 2000000000000.000000; 95 3000000000000.000000; 96 4000000000000.000000; 97 5000000000000.000000; 98 7000000000000.000000; ```; [error file](https://github.com/psi4/psi4/blob/master/psi4/share/psi4/quadratures/1_x/error.bin), 5247 doubles read into a Matrix. many zeros; ```; 0 0 0.0212800000000000; 0 1 0.0435800000000000; 0 2 0.0596000000000000; 0 3 0.0707500000000000; 0 4 0.0782500000000000; 0 5 0.0828800000000000; 0 6 0.0851600000000000; 0 7 0.0855600000000000; 0 8 0.0855600000000000; 0 9 0.0000000000000000; 0 10 0.0000000000000000; 0 11 0.0000000000000000; 0 12 0.0000000000000000; ...; ```. [This block](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/lib3index/denominator.cc#L566-L595) reads those bin files. It occurs three times in denominator.cc, once for each flavor of `*LaplaceDenominator.decompose()`, so refactoring into calling a free function is perhaps in order. After the arrays are filled, both are used to make sure the system can be fit w/i the availability and accuracy of the stored quadratures, https://github.com/psi4/psi4/blob/master/psi4/src/psi4/lib3index/denominator.cc#L196-L209. decompose happens once per SAPT calc, so perhaps ok to make text ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1462#issuecomment-451726050:2290,error,error,2290,https://psicode.org,https://github.com/psi4/psi4/issues/1462#issuecomment-451726050,1,['error'],['error']
Availability,"0001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgbsv，该符号在函数 ""int __cdecl psi::C_DGBSV(int,int,int,int,double *,int,int *,double *,int)"" (?C_DGBSV@psi@@YAHHHHHPEANHPEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgbsvx，该符号在函数 ""int __cdecl psi::C_DGBSVX(char,char,int,int,int,int,double *,int,double *,int,int *,char,double *,double *,double *,int,double *,int,double *,double *,double *,double *,int *)"" (?C_DGBSVX@psi@@YAHDDHHHHPEANH0HPEAHD000H0H00001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgbtrf，该符号在函数 ""int __cdecl psi::C_DGBTRF(int,int,int,int,double *,int,int *)"" (?C_DGBTRF@psi@@YAHHHHHPEANHPEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgbtrs，该符号在函数 ""int __cdecl psi::C_DGBTRS(char,int,int,int,int,double *,int,int *,double *,int)"" (?C_DGBTRS@psi@@YAHDHHHHPEANHPEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgebak，该符号在函数 ""int __cdecl psi::C_DGEBAK(char,char,int,int,int,double *,int,double *,int)"" (?C_DGEBAK@psi@@YAHDDHHHPEANH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgebal，该符号在函数 ""int __cdecl psi::C_DGEBAL(char,int,double *,int,int *,int *,double *)"" (?C_DGEBAL@psi@@YAHDHPEANHPEAH10@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgebrd，该符号在函数 ""int __cdecl psi::C_DGEBRD(int,int,double *,int,double *,double *,double *,double *,double *,int)"" (?C_DGEBRD@psi@@YAHHHPEANH00000H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgecon，该符号在函数 ""int __cdecl psi::C_DGECON(char,int,double *,int,double,double *,double *,int *)"" (?C_DGECON@psi@@YAHDHPEANHN00PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgeequ，该符号在函数 ""int __cdecl psi::C_DGEEQU(int,int,double *,int,double *,double *,double *,double *,double *)"" (?C_DGEEQU@psi@@YAHHHPEANH00000@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgees，该符号在函数 ""int __cdecl psi::C_DGEES(char,char,int,double",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:17488,error,error,17488,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"00; 54 2000000.000000; 55 3000000.000000; 56 4000000.000000; 57 5000000.000000; 58 6000000.000000; 59 7000000.000000; 60 8000000.000000; 61 9000000.000000; 62 10000000.000000; 63 20000000.000000; 64 30000000.000000; 65 40000000.000000; 66 50000000.000000; 67 70000000.000000; 68 100000000.000000; 69 200000000.000000; 70 300000000.000000; 71 400000000.000000; 72 500000000.000000; 73 700000000.000000; 74 1000000000.000000; 75 2000000000.000000; 76 3000000000.000000; 77 4000000000.000000; 78 5000000000.000000; 79 6000000000.000000; 80 7000000000.000000; 81 10000000000.000000; 82 20000000000.000000; 83 30000000000.000000; 84 40000000000.000000; 85 50000000000.000000; 86 70000000000.000000; 87 100000000000.000000; 88 200000000000.000000; 89 300000000000.000000; 90 400000000000.000000; 91 500000000000.000000; 92 700000000000.000000; 93 1000000000000.000000; 94 2000000000000.000000; 95 3000000000000.000000; 96 4000000000000.000000; 97 5000000000000.000000; 98 7000000000000.000000; ```; [error file](https://github.com/psi4/psi4/blob/master/psi4/share/psi4/quadratures/1_x/error.bin), 5247 doubles read into a Matrix. many zeros; ```; 0 0 0.0212800000000000; 0 1 0.0435800000000000; 0 2 0.0596000000000000; 0 3 0.0707500000000000; 0 4 0.0782500000000000; 0 5 0.0828800000000000; 0 6 0.0851600000000000; 0 7 0.0855600000000000; 0 8 0.0855600000000000; 0 9 0.0000000000000000; 0 10 0.0000000000000000; 0 11 0.0000000000000000; 0 12 0.0000000000000000; ...; ```. [This block](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/lib3index/denominator.cc#L566-L595) reads those bin files. It occurs three times in denominator.cc, once for each flavor of `*LaplaceDenominator.decompose()`, so refactoring into calling a free function is perhaps in order. After the arrays are filled, both are used to make sure the system can be fit w/i the availability and accuracy of the stored quadratures, https://github.com/psi4/psi4/blob/master/psi4/src/psi4/lib3index/denominator.cc#L196-L209. decompose hap",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1462#issuecomment-451726050:2205,error,error,2205,https://psicode.org,https://github.com/psi4/psi4/issues/1462#issuecomment-451726050,1,['error'],['error']
Availability,"00PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpoequ，该符号在函数 ""int __cdecl psi::C_DPOEQU(int,double *,int,double *,double *,double *)"" (?C_DPOEQU@psi@@YAHHPEANH000@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dporfs，该符号在函数 ""int __cdecl psi::C_DPORFS(char,int,int,double *,int,double *,int,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DPORFS@psi@@YAHDHHPEANH0H0H0H000PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dposv，该符号在函数 ""int __cdecl psi::C_DPOSV(char,int,int,double *,int,double *,int)"" (?C_DPOSV@psi@@YAHDHHPEANH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dposvx，该符号在函数 ""int __cdecl psi::C_DPOSVX(char,char,int,int,double *,int,double *,int,char,double *,double *,int,double *,int,double *,double *,double *,double *,int *)"" (?C_DPOSVX@psi@@YAHDDHHPEANH0HD00H0H0000PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpotrf，该符号在函数 ""int __cdecl psi::C_DPOTRF(char,int,double *,int)"" (?C_DPOTRF@psi@@YAHDHPEANH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpotri，该符号在函数 ""int __cdecl psi::C_DPOTRI(char,int,double *,int)"" (?C_DPOTRI@psi@@YAHDHPEANH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpotrs，该符号在函数 ""int __cdecl psi::C_DPOTRS(char,int,int,double *,int,double *,int)"" (?C_DPOTRS@psi@@YAHDHHPEANH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dppcon，该符号在函数 ""int __cdecl psi::C_DPPCON(char,int,double *,double,double *,double *,int *)"" (?C_DPPCON@psi@@YAHDHPEANN00PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dppequ，该符号在函数 ""int __cdecl psi::C_DPPEQU(char,int,double *,double *,double *,double *)"" (?C_DPPEQU@psi@@YAHDHPEAN000@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpprfs，该符号在函数 ""int __cdecl psi::C_DPPRFS(char,int,int,double *,double *,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DPPRFS@psi@@YAHDHHPEAN00H0H0",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:34781,error,error,34781,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,00[fa]fa fa; 0x0c068006f8d0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; 0x0c068006f8e0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; 0x0c068006f8f0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; 0x0c068006f900: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; 0x0c068006f910: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; Shadow byte legend (one shadow byte represents 8 application bytes):; Addressable: 00; Partially addressable: 01 02 03 04 05 06 07 ; Heap left redzone: fa; Freed heap region: fd; Stack left redzone: f1; Stack mid redzone: f2; Stack right redzone: f3; Stack after return: f5; Stack use after scope: f8; Global redzone: f9; Global init order: f6; Poisoned by user: f7; Container overflow: fc; Array cookie: ac; Intra object redzone: bb; ASan internal: fe; Left alloca redzone: ca; Right alloca redzone: cb; ==10081==ABORTING; Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ). =================================================================; ==10025==ERROR: LeakSanitizer: detected memory leaks. Direct leak of 282802 byte(s) in 124 object(s) allocated from:; #0 0x7f0f92dd6afc in __interceptor_malloc /opt/conda/conda-bld/compilers_linux-64_1520532893746/work/.build/src/gcc-7.2.0/libsanitizer/asan/asan_malloc_linux.cc:62; #1 0x557f1794b8b3 in PyObject_Malloc (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0xe88b3). Direct leak of 2 byte(s) in 2 object(s) allocated from:; #0 0x7f0f92dd6afc in __interceptor_malloc /opt/conda/conda-bld/compilers_linux-64_1520532893746/work/.build/src/gcc-7.2.0/libsanitizer/asan/asan_malloc_linux.cc:62; #1 0x557f17949fe0 in _PyObject_Alloc.isra.0 (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0xe6fe0). Indirect leak of 19819 byte(s) in 22 object(s) allocated from:; #0 0x7f0f92dd6afc in __interceptor_malloc /opt/conda/conda-bld/compilers_linux-64_1520532893746/work/.build/src/gcc-7.2.0/libsanitizer/asan/asan_malloc_linux.cc:62; #1 0x557f1794b8b3 in PyObject_Malloc (/shared/raim,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1220#issuecomment-421335756:17738,ERROR,ERROR,17738,https://psicode.org,https://github.com/psi4/psi4/pull/1220#issuecomment-421335756,1,['ERROR'],['ERROR']
Availability,"0395757 -0.003634444122; @IRC 11 -92.852777598444 -0.003517202687; @IRC 12 -92.856140015989 -0.003362417545; @IRC 13 -92.859308223013 -0.003168207024; @IRC 14 -92.862250220465 -0.002941997452; @IRC 15 -92.864943075409 -0.002692854944; @IRC 16 -92.867368006399 -0.002424930990; @IRC 17 -92.869505711996 -0.002137705597; @IRC 18 -92.871329201900 -0.001823489904; @IRC 19 -92.872798961306 -0.001469759406; @IRC 20 -92.873862613736 -0.001063652429; @IRC 21 -92.874464128325 -0.000601514589; @IRC 22 -92.874561860949 -0.000097732624; @IRC 23 -92.874559174537 0.000002686412; @IRC 24 -92.874584188151 -0.000025013614; @IRC 25 -92.874518478044 0.000065710108; @IRC 26 -92.874584083068 -0.000065605025; @IRC 27 -92.874584016106 0.000000066962; @IRC ----------------------------------------------; ```. Compared to the reference from 2017, the first step has an energy difference on the order of 1e-4, and the energy difference remains at or below 1e-4 up to step 22. If I had to guess, this is due to PR #1663, where I fixed an error in the initial displacement for the IRC. At step 22, the geometry is very close to the minimum, so the next step ends up raising the energy. The two IRCs then bounce around, with the reference IRC bouncing in the fourth decimal place and the current IRC bouncing in the fifth. This is enough bounce for the final energies to be outside convergence criteria. Unless somebody has the time and drive to improve the IRC termination cutoff in C-Optking, I recommend changing the reference value for now and investigating this in Py-Optking, whenever that comes out. Meanwhile, I have most of the occ tests fixed locally, but `ocepa-grad2` is proving more difficult. My Psi4Numpy converges with no problems, so the issue probably isn't in the coupled-DIIS approach itself... My current guess is that it's the fact that the ""residuals"" `occ` throws into DIIS aren't the residuals but the residuals divided by the MPPT-like denominators from the standard amplitude update algorithm.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1793#issuecomment-592806226:2043,error,error,2043,https://psicode.org,https://github.com/psi4/psi4/issues/1793#issuecomment-592806226,1,['error'],['error']
Availability,"0H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormql，该符号在函数 ""int __cdecl psi::C_DORMQL(char,char,int,int,int,double *,int,double *,double *,int,double *,int)"" (?C_DORMQL@psi@@YAHDDHHHPEANH00H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormqr，该符号在函数 ""int __cdecl psi::C_DORMQR(char,char,int,int,int,double *,int,double *,double *,int,double *,int)"" (?C_DORMQR@psi@@YAHDDHHHPEANH00H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormr3，该符号在函数 ""int __cdecl psi::C_DORMR3(char,char,int,int,int,int,double *,int,double *,double *,int,double *)"" (?C_DORMR3@psi@@YAHDDHHHHPEANH00H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormrq，该符号在函数 ""int __cdecl psi::C_DORMRQ(char,char,int,int,int,double *,int,double *,double *,int,double *,int)"" (?C_DORMRQ@psi@@YAHDDHHHPEANH00H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormrz，该符号在函数 ""int __cdecl psi::C_DORMRZ(char,char,int,int,int,int,double *,int,double *,double *,int,double *,int)"" (?C_DORMRZ@psi@@YAHDDHHHHPEANH00H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormtr，该符号在函数 ""int __cdecl psi::C_DORMTR(char,char,char,int,int,double *,int,double *,double *,int,double *,int)"" (?C_DORMTR@psi@@YAHDDDHHPEANH00H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbcon，该符号在函数 ""int __cdecl psi::C_DPBCON(char,int,int,double *,int,double,double *,double *,int *)"" (?C_DPBCON@psi@@YAHDHHPEANHN00PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbequ，该符号在函数 ""int __cdecl psi::C_DPBEQU(char,int,int,double *,int,double *,double *,double *)"" (?C_DPBEQU@psi@@YAHDHHPEANH000@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbrfs，该符号在函数 ""int __cdecl psi::C_DPBRFS(char,int,int,int,double *,int,double *,int,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DPBRFS@psi@@YAHDHHHPEANH0H0H0H000PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error L",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:31630,error,error,31630,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormhr，该符号在函数 ""int __cdecl psi::C_DORMHR(char,char,int,int,int,int,double *,int,double *,double *,int,double *,int)"" (?C_DORMHR@psi@@YAHDDHHHHPEANH00H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormlq，该符号在函数 ""int __cdecl psi::C_DORMLQ(char,char,int,int,int,double *,int,double *,double *,int,double *,int)"" (?C_DORMLQ@psi@@YAHDDHHHPEANH00H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormql，该符号在函数 ""int __cdecl psi::C_DORMQL(char,char,int,int,int,double *,int,double *,double *,int,double *,int)"" (?C_DORMQL@psi@@YAHDDHHHPEANH00H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormqr，该符号在函数 ""int __cdecl psi::C_DORMQR(char,char,int,int,int,double *,int,double *,double *,int,double *,int)"" (?C_DORMQR@psi@@YAHDDHHHPEANH00H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormr3，该符号在函数 ""int __cdecl psi::C_DORMR3(char,char,int,int,int,int,double *,int,double *,double *,int,double *)"" (?C_DORMR3@psi@@YAHDDHHHHPEANH00H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormrq，该符号在函数 ""int __cdecl psi::C_DORMRQ(char,char,int,int,int,double *,int,double *,double *,int,double *,int)"" (?C_DORMRQ@psi@@YAHDDHHHPEANH00H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormrz，该符号在函数 ""int __cdecl psi::C_DORMRZ(char,char,int,int,int,int,double *,int,double *,double *,int,double *,int)"" (?C_DORMRZ@psi@@YAHDDHHHHPEANH00H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormtr，该符号在函数 ""int __cdecl psi::C_DORMTR(char,char,char,int,int,double *,int,double *,double *,int,double *,int)"" (?C_DORMTR@psi@@YAHDDDHHPEANH00H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbcon，该符号在函数 ""int __cdecl psi::C_DPBCON(char,int,int,double *,int,double,double *,double *,int *)"" (?C_DPBCON@psi@@YAHDHHPEANHN00PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:31200,error,error,31200,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"0HPEAH0000H1H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtgsja，该符号在函数 ""int __cdecl psi::C_DTGSJA(char,char,char,int,int,int,int,int,double *,int,double *,int,double,double,double *,double *,double *,int,double *,int,double *,int,double *,int *)"" (?C_DTGSJA@psi@@YAHDDDHHHHHPEANH0HNN000H0H0H0PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtgsna，该符号在函数 ""int __cdecl psi::C_DTGSNA(char,char,int,double *,int,double *,int,double *,int,double *,int,double *,double *,int,int *,double *,int,int *)"" (?C_DTGSNA@psi@@YAHDDHPEANH0H0H0H00HPEAH0H1@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtgsyl，该符号在函数 ""int __cdecl psi::C_DTGSYL(char,int,int,int,double *,int,double *,int,double *,int,double *,int,double *,int,double *,int,double *,double *,double *,int,int *)"" (?C_DTGSYL@psi@@YAHDHHHPEANH0H0H0H0H0H000HPEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtpcon，该符号在函数 ""int __cdecl psi::C_DTPCON(char,char,char,int,double *,double *,double *,int *)"" (?C_DTPCON@psi@@YAHDDDHPEAN00PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtprfs，该符号在函数 ""int __cdecl psi::C_DTPRFS(char,char,char,int,int,double *,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DTPRFS@psi@@YAHDDDHHPEAN0H0H000PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtptri，该符号在函数 ""int __cdecl psi::C_DTPTRI(char,char,int,double *)"" (?C_DTPTRI@psi@@YAHDDHPEAN@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtptrs，该符号在函数 ""int __cdecl psi::C_DTPTRS(char,char,char,int,int,double *,double *,int)"" (?C_DTPTRS@psi@@YAHDDDHHPEAN0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtrcon，该符号在函数 ""int __cdecl psi::C_DTRCON(char,char,char,int,double *,int,double *,double *,int *)"" (?C_DTRCON@psi@@YAHDDDHPEANH00PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtrevc，该符号在函数 ""int __cdecl psi::C_DTREVC(char,char,int,double *,int,doub",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:51454,error,error,51454,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"1. I got this idea when talking to a graduate student who works on orbital solvers the other week. I can do a quick search for anything more ""standard,"" but I'm not expecting it to find anything.; 2. The energy tolerance is problematic in practice. A lot of the instabilities that I've seen are related to ghost atoms involving SAPT, which are prone to very small instabilities.; 3. I don't understand why your procedure is easier to implement. The fourth order could be tricky, but the third order is trivial. We have the first zero, first, and second order terms analytically from the original instability analysis, and we can fit the third order from the ""new SCF energy"" by a simple algebraic expression. Finding the stationary points is equivalent to factoring f'(x), and we already know (x-0) is one of the roots. It's an easy problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3045#issuecomment-1706844926:211,toler,tolerance,211,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1706844926,2,['toler'],['tolerance']
Availability,"1. Psi doesn't tabulate these, and I've mostly seen them for DFT. Scaling factors handy for getting oriented with a vib spectrum, but they're not uniquely determined for a method/basis.; 2. Yes, IR intensities are available as of psi4 1.6 in late May provided analytic gradients are available (as opposed to Hessian by finite difference of energies).; 3. I'm not sure what ""mode"" you were looking at. I can clarify if you post a link. Once upon a time, there was a `frequency(..., mode=(continuous|sow|reap))` but that had to do with farming out finite difference jobs and is now defunct anyways. There's `irrep` https://github.com/psi4/psi4/blob/master/psi4/driver/driver.py#L1511-L1517 that allows a partial frequency job for only a symmetry subset. Example here https://github.com/psi4/psi4/blob/master/tests/fd-freq-gradient/input.dat#L75 . There's no singling out of particular modes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2698#issuecomment-1225919509:214,avail,available,214,https://psicode.org,https://github.com/psi4/psi4/issues/2698#issuecomment-1225919509,2,['avail'],['available']
Availability,"1. The key phrase here is _would give us_. The capabilities aren't there yet. This is GauXC. I know this was a feature they desired, but I don't know how close it is to being complete. My guess is that things are, as always, not going as optimistically as they would like.; 2. Psi4 1.9.1 should not raise this error. You're saying that the input; ```; import psi4; psi4.set_options({'reference': 'uhf', 'stability_analysis': 'check', 'basis_guess': 'true'}); mol = psi4.geometry(""""""; symmetry c1; 0 3; O; """""");; psi4.energy('PBE/6-31G', molecule=mol); ```; gave you `psi4.driver.p4util.exceptions.ValidationError: Stability analysis not yet supported for XC functionals.`? Can you double-check and post the output file?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3236#issuecomment-2444511042:310,error,error,310,https://psicode.org,https://github.com/psi4/psi4/issues/3236#issuecomment-2444511042,1,['error'],['error']
Availability,1.2rc2 was tagged last week. Please try it out and report problems here on GitHub. Linux installers and packages available from http://vergil.chemistry.gatech.edu/nu-psicode/install-v1.2rc2.html .,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/960#issuecomment-391862109:113,avail,available,113,https://psicode.org,https://github.com/psi4/psi4/issues/960#issuecomment-391862109,1,['avail'],['available']
Availability,"10807957900 0.000000000103; > C -1.260557226131 1.493619582118 -0.000000000155; > C -0.000034659568 0.759625960521 -0.000000000159; > C -0.000034625713 -0.759624178218 -0.000000000042; > H -5.916030845275 -1.282197811131 -0.000000001395; > H -5.916031258658 1.282196125448 -0.000000001329; > H -3.903819438194 2.368212991154 -0.000000000840; > H -3.903818961364 -2.368213684326 -0.000000000900; > H -3.380202809742 -3.532377155298 0.000000000843; > H -3.323483157889 -5.783256218484 0.000000001017; > H -1.123533880262 -7.010678898257 0.000000000718; > H 1.123569529821 -7.010687056820 0.000000000512; > H 3.323444251476 -5.783425057171 0.000000000238; > H 3.380590817837 -3.532764155114 0.000000000007; > H 3.903306158089 -2.368093837703 -0.000000000251; > H 5.915904268397 -1.282153443029 -0.000000000487; > H 5.915904332310 1.282151831717 -0.000000000600; > H 3.903306767856 2.368091938384 -0.000000000491; > H 3.380592041773 3.532764158212 -0.000000000516; > H 3.323445571900 5.783426049843 -0.000000000059; > H 1.123570392243 7.010688579024 0.000000000716; > H -1.123534819764 7.010680587949 0.000000001092; > H -3.323484052934 5.783257818228 0.000000001355; > H -3.380204830685 3.532377523087 0.000000001020; > }; > set basis 6-31g; > set reference rhf; > set scf_type DIRECT; > set e_convergence 1e-10; > set d_convergence 1e-8; > set ints_tolerance 0.0; > ; > set dmrg_irrep 0; > set dmrg_multiplicity 1; > set restricted_docc [105,0]; > set active [0,38]; > ; > set dmrg_sweep_states [200, 400, 600, 800]; > set dmrg_sweep_energy_conv [1e-6, 1e-6, 1e-8, 1e-10]; > set dmrg_sweep_dvdson_rtol [1e-5, 1e-5, 1e-5, 1e-8]; > set dmrg_sweep_max_sweeps [10, 10, 8, 6]; > set dmrg_sweep_noise_prefac [0.05, 0.05, 0.05, 0.0]; > set dmrg_scf_active_space loc; > set dmrg_scf_max_iter 100; > set dmrg_mps_write true; > ; > energy(""dmrg-ci""). I believe this might be a memory issue because this exact input file but with the sto-3g basis runs as expected, ""upgrading"" the basis set introduces this error.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2102#issuecomment-772517025:3842,error,error,3842,https://psicode.org,https://github.com/psi4/psi4/issues/2102#issuecomment-772517025,1,['error'],['error']
Availability,"19: 无法解析的外部符号 dsygst，该符号在函数 ""int __cdecl psi::C_DSYGST(int,char,int,double *,int,double *,int)"" (?C_DSYGST@psi@@YAHHDHPEANH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsygv，该符号在函数 ""int __cdecl psi::C_DSYGV(int,char,char,int,double *,int,double *,int,double *,double *,int)"" (?C_DSYGV@psi@@YAHHDDHPEANH0H00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsygvd，该符号在函数 ""int __cdecl psi::C_DSYGVD(int,char,char,int,double *,int,double *,int,double *,double *,int,int *,int)"" (?C_DSYGVD@psi@@YAHHDDHPEANH0H00HPEAHH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsygvx，该符号在函数 ""int __cdecl psi::C_DSYGVX(int,char,char,char,int,double *,int,double *,int,double,double,int,int,double,int *,double *,double *,int,double *,int,int *,int *)"" (?C_DSYGVX@psi@@YAHHDDDHPEANH0HNNHHNPEAH00H0H11@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsyrfs，该符号在函数 ""int __cdecl psi::C_DSYRFS(char,int,int,double *,int,double *,int,int *,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DSYRFS@psi@@YAHDHHPEANH0HPEAH0H0H0001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsysv，该符号在函数 ""int __cdecl psi::C_DSYSV(char,int,int,double *,int,int *,double *,int,double *,int)"" (?C_DSYSV@psi@@YAHDHHPEANHPEAH0H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsysvx，该符号在函数 ""int __cdecl psi::C_DSYSVX(char,char,int,int,double *,int,double *,int,int *,double *,int,double *,int,double *)"" (?C_DSYSVX@psi@@YAHDDHHPEANH0HPEAH0H0H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsytrd，该符号在函数 ""int __cdecl psi::C_DSYTRD(char,int,double *,int,double *,double *,double *,double *,int)"" (?C_DSYTRD@psi@@YAHDHPEANH0000H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsytrf，该符号在函数 ""int __cdecl psi::C_DSYTRF(char,int,double *,int,int *,double *,int)"" (?C_DSYTRF@psi@@YAHDHPEANHPEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsytri",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:47725,error,error,47725,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,2-grad2 (Failed); 	136 - dfomp3-grad1 (Failed); 	137 - dfomp3-grad2 (Failed); 	140 - dfomp2p5-grad1 (Failed); 	141 - dfomp2p5-grad2 (Failed); 	146 - dft-freq (Failed); 	147 - dft-grad (Failed); 	151 - dft1 (Failed); 	152 - dft1-alt (Failed); 	154 - dft3 (Failed); 	157 - extern1 (Failed); 	165 - fd-freq-energy-large (Failed); 	166 - fd-freq-gradient (Failed); 	167 - fd-freq-gradient-large (Failed); 	168 - fd-gradient (Failed); 	169 - freq-isotope (Failed); 	171 - fnocc2 (Failed); 	176 - gibbs (Failed); 	188 - mints9 (Failed); 	192 - mp2-1 (Failed); 	194 - mp2-grad1 (Failed); 	195 - mp2-grad2 (Failed); 	196 - mp2-module (Failed); 	197 - mp2_5-grad1 (Failed); 	198 - mp2_5-grad2 (Failed); 	199 - mp3-grad1 (Failed); 	200 - mp3-grad2 (Failed); 	206 - ocepa-grad1 (Failed); 	207 - ocepa-grad2 (Failed); 	216 - omp2-grad1 (Failed); 	217 - omp2-grad2 (Failed); 	220 - omp2_5-grad1 (Failed); 	221 - omp2_5-grad2 (Failed); 	227 - omp3-grad1 (Failed); 	228 - omp3-grad2 (Failed); 	229 - opt-lindep-change (Failed); 	230 - opt1 (Failed); 	232 - opt2 (Failed); 	233 - opt2-fd (Failed); 	234 - opt3 (Failed); 	235 - opt4 (Failed); 	236 - opt5 (Failed); 	237 - opt6 (Failed); 	238 - opt7 (Failed); 	239 - opt8 (Failed); 	240 - opt9 (Failed); 	241 - opt11 (Failed); 	242 - opt12 (Failed); 	243 - opt13 (Failed); 	244 - opt14 (Failed); 	245 - opt-irc-1 (Failed); 	246 - opt-irc-2 (Failed); 	247 - opt_freeze_coords (Failed); 	261 - pubchem1 (Failed); 	263 - pywrap-alias (Failed); 	264 - pywrap-all (Failed); 	268 - pywrap-checkrun-rhf (Failed); 	269 - pywrap-checkrun-rohf (Failed); 	270 - pywrap-checkrun-uhf (Failed); 	272 - pywrap-db2 (Failed); 	275 - pywrap-freq-g-sowreap (Failed); 	301 - scf6 (Failed); 	309 - tu3-h2o-opt (Failed); 	310 - tu4-h2o-freq (Failed); 	322 - cubeprop-esp (Failed); 	331 - dftd3-grad (Failed); 	333 - dftd3-version (Failed); 	341 - mrcc-ccsdt (Failed); 	342 - mrcc-ccsd_t_ (Failed); 	343 - mrcc-ccsdt_q_ (Failed); 	344 - mrcc-optfreq (Failed); Errors while running CTest; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/587#issuecomment-276884648:4828,Error,Errors,4828,https://psicode.org,https://github.com/psi4/psi4/pull/587#issuecomment-276884648,1,['Error'],['Errors']
Availability,"2559128 (a.u.), 6.9637417 (eV); ```. Further, we set up calculations for the systems in [this work](https://aip.scitation.org/doi/10.1063/1.1504708). Please find the calculations for HF and N2 below; I am happy to provide data on the other systems if needed.; Basis set & geometry information for HF and N2 were found in [this work](https://aip.scitation.org/doi/abs/10.1063/1.1386415). ### **HF**; For ADC(1) results, we continue to see no remarkable error. In the ADC(2) results, the HF system's excitation energies calculated by QChem reproduce the results provided in the Trofimov, Stelter, Schirmer paper. However, the energies provided by Psi4 seem to have an inconsistent deviation from the values: for some states, the energies reported are near exact:; ```; Lit: 9.63 eV; Psi4: 9.6455240 eV; QChem: 9.631168 eV; ```; for others, the excitation energy deviates as much as 0.08 eV:; ```; Lit: 15.33 eV; Psi4: 15.2573251 eV; QChem: 15.318842 eV; ```. ### **N2**; In the case of the N2 system, we again saw no errors in the ADC(1) results. QChem continues to be able to reproduce excitation energies for ADC(2) calculations, but in Psi4, for several states in the ADC(2) calculation, we see warnings about a strongly rotated CIS state and zero eigenvalues. ### **Psi4 1.3.2 -- N2 ADC(2) excitation energies**; ```; 1 Ag state : 0.9479767 (a.u.), 25.7957601 (eV); 2 Ag state : 1.0193053 (a.u.), 27.7367101 (eV); #WARNING: Strongly rotated from the CIS state!; 3 Ag state : 1.0706909 (a.u.), 29.1349838 (eV); #WARNING: Strongly rotated from the CIS state!; 4 Ag state : 1.1395201 (a.u.), 31.0079202 (eV). 1B1g state : 0.0000000 (a.u.), 0.0000000 (eV); #WARNING: Strongly rotated from the CIS state!; 2B1g state : 0.0000000 (a.u.), 0.0000000 (eV); #WARNING: Strongly rotated from the CIS state!; 3B1g state : 0.0000000 (a.u.), 0.0000000 (eV); #WARNING: Strongly rotated from the CIS state!; 4B1g state : 0.0000000 (a.u.), 0.0000000 (eV); #WARNING: Strongly rotated from the CIS state!. 1B2g state :",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1033#issuecomment-510952344:3642,error,errors,3642,https://psicode.org,https://github.com/psi4/psi4/issues/1033#issuecomment-510952344,1,['error'],['errors']
Availability,"3N-6 = 30 SALCs. There is no symmetry to exploit, as recognized or not by libmints. Here are the 3 point formulas O(1/h^2):; For diagonal:; [f(1,0) + f(-1,0) - 2f(0,0)]/(h^2); Off-diagonal; [f(1,1)+f(-1,-1)+2f(0,0) -f(1,0) -f(-1,0) -f(0,1) -f(0,-1)]/(2h^2). So the diagonal of the Hessian costs 30*2 = 60.; The off-diagonal costs an additional (29 \* 30 / 2 = 465 entries) times 2 = 870.; If there is an error, it is in libmints symmetry detection - not findif.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/145#issuecomment-122013214:404,error,error,404,https://psicode.org,https://github.com/psi4/psi4/issues/145#issuecomment-122013214,1,['error'],['error']
Availability,"3_0 conda-forge; setuptools 61.2.0 py38haa95532_0; sqlite 3.38.3 h2bbff1b_0; tk 8.6.12 h8ffe710_0 conda-forge; tomli 2.0.1 pyhd8ed1ab_0 conda-forge; vc 14.2 h21ff451_1; vs2015_runtime 14.27.29016 h5e58377_2; wheel 0.37.1 pyhd3eb1b0_0; wincertstore 0.2 py38haa95532_2; xz 5.2.5 h62dcd97_1 conda-forge; yaml 0.2.5 h8ffe710_2 conda-forge; zipp 3.8.0 pyhd8ed1ab_0 conda-forge; ```. Manually updating pydantic with `pip install -U pydantic`, installs version 1.9.1 and then running `psi4 --test` gives:; ```; ================================================= test session starts =================================================; platform win32 -- Python 3.8.13, pytest-7.1.2, pluggy-1.0.0 -- Path\psi4conda\envs\psi16\python.exe; cachedir: .pytest_cache; rootdir: Path\psi4conda\envs\psi16\lib\site-packages\psi4, configfile: pytest.ini; collected 4042 items / 1 error / 3950 deselected / 92 selected. ======================================================= ERRORS ========================================================; _______________________________ ERROR collecting tests/test_qcel_molparse_to_string.py ________________________________; psi4conda\envs\psi16\lib\site-packages\psi4\tests\test_qcel_molparse_to_string.py:7: in <module>; from qcelemental.tests import test_molparse_to_string; <frozen importlib._bootstrap>:991: in _find_and_load; ???; <frozen importlib._bootstrap>:975: in _find_and_load_unlocked; ???; <frozen importlib._bootstrap>:671: in _load_unlocked; ???; psi4conda\envs\psi16\lib\site-packages\_pytest\assertion\rewrite.py:168: in exec_module; exec(co, module.__dict__); psi4conda\envs\psi16\lib\site-packages\qcelemental\tests\test_molparse_to_string.py:270: in <module>; ""subject1"": qcel.models.Molecule(; psi4conda\envs\psi16\lib\site-packages\qcelemental\models\molecule.py:294: in __init__; super().__init__(**kwargs); pydantic\main.py:341: in pydantic.main.BaseModel.__init__; ???; E pydantic.error_wrappers.ValidationError: 2 validation errors for Molecule; E connectiv",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2614#issuecomment-1160363542:3013,ERROR,ERRORS,3013,https://psicode.org,https://github.com/psi4/psi4/issues/2614#issuecomment-1160363542,2,['ERROR'],"['ERROR', 'ERRORS']"
Availability,"3lyp and wb97x. Mostly: ; ```; slurmstepd: error: Detected 1 oom-kill event(s) in step 4420716.batch cgroup. Some of your processes may have been killed by the cgroup out-of-memory handler.; ```; with a few:; ```; Bus error (core dumped) psi4; ```; and ; ```; Fatal Error: PSIO Error; ```. I am running these requesting 10GB from slurm and asking psi4 to use 8GB.; I also used sacct to query the memory usage for one failed example each:; wB97x:; ```; JobID State NodeLi NN Parti NCPU State ReqMe MaxRSS MaxVMSize Elapsed CPUTime Exit Start End JobName; ------------ ---------- ------ -- ----- ---- ---------- ----- --------- --------- ---------- ---------- ---- ------------------- ------------------- ----------------------------------------; 4420706.bat+ OUT_OF_ME+ nc130 1 2 OUT_OF_ME+ 10Gn 10314128K 225460K 00:16:07 00:32:14 0:1+ 04/04/19 09:42:32 04/04/19 09:58:39 batch; ```. B3LYP:; ```; JobID State NodeLi NN Parti NCPU State ReqMe MaxRSS MaxVMSize Elapsed CPUTime Exit Start End JobName; ------------ ---------- ------ -- ----- ---- ---------- ----- --------- --------- ---------- ---------- ---- ------------------- ------------------- ----------------------------------------; 4494794.bat+ OUT_OF_ME+ nc153 1 2 OUT_OF_ME+ 10Gn 8825012K 225600K 00:02:07 00:04:14 0:1+ 04/09/19 09:43:57 04/09/19 09:46:04 batch; ```; Both exceed the 8GB psi4 is supposed to use but wB97x does this to a higher level. As mentioned the failures occur at different points in time:; - ```==> Integral Setup <==```; - Before the first SCF itteration of the first geomety optimization step completes; - ``` ==> DFJKGrad: Density-Fitted SCF Gradients <==```; - I also repeated one of the failed B3LYP. The initial time around it did not print the first SCF cycle of the first geometry optimization; The second time around it failed in the grad computation of the second geometry optimization cycle with a ""Bus error"" after/during ```==> DFJKGrad: Density-Fitted SCF Gradients <==```. Thanks for looking into this!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1590#issuecomment-481479677:1615,failure,failures,1615,https://psicode.org,https://github.com/psi4/psi4/issues/1590#issuecomment-481479677,2,"['error', 'failure']","['error', 'failures']"
Availability,"4 headers: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/include; -- Psi4 library: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/lib//psi4/core.so; -- Psi4 sys.path: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/lib/; -- Psi4 components: ; -- Python executable: /usr/bin/python2.7; CMake Error at /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/psi4/psi4Config.cmake:148 (find_package):; Could not find a package configuration file provided by ""TargetLAPACK"" with; any of the following names:. TargetLAPACKConfig.cmake; targetlapack-config.cmake. Add the installation prefix of ""TargetLAPACK"" to CMAKE_PREFIX_PATH or set; ""TargetLAPACK_DIR"" to a directory containing one of the above files. If; ""TargetLAPACK"" provides a separate development package or SDK, be sure it; has been installed.; Call Stack (most recent call first):; CMakeLists.txt:6 (find_package). -- Configuring incomplete, errors occurred!; See also ""/home/laz/build/psi4/psi4/objdir/external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-build/CMakeFiles/CMakeOutput.log"".; See also ""/home/laz/build/psi4/psi4/objdir/external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-build/CMakeFiles/CMakeError.log"".; external/downstream/gpu_dfcc/CMakeFiles/gpu_dfcc_external.dir/build.make:107: recipe for target 'external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-stamp/gpu_dfcc_external-configure' failed; make[2]: *** [external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-stamp/gpu_dfcc_external-configure] Error 1; CMakeFiles/Makefile2:1533: recipe for target 'external/downstream/gpu_dfcc/CMakeFiles/gpu_dfcc_external.dir/all' failed; make[1]: *** [external/downstream/gpu_dfcc/CMakeFiles/gpu_dfcc_external.dir/all] Error 2; Makefile:140: recipe for target 'all' failed; make: *** [all] Error 2; ```; I'll have a poke about to see if I can get it to build, either within the main psi4 build or stand alone ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-400445022:1564,error,errors,1564,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-400445022,2,"['down', 'error']","['downstream', 'errors']"
Availability,"4/objdir/psi4-core-prefix/tmp/psi4-core-cache-Release.cmake; -- The C compiler identification is GNU 7.3.0; -- The CXX compiler identification is GNU 7.3.0; -- Check for working C compiler: /usr/bin/cc; -- Check for working C compiler: /usr/bin/cc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/bin/c++; -- Check for working CXX compiler: /usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- LAZ Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so;/usr/lib/x86_64-linux-gnu/libpthread.so ; CMake Error at /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:137 (message):; Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE); Call Stack (most recent call first):; /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:378 (_FPHSA_FAILURE_MESSAGE); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:99 (find_package_handle_standard_args); /usr/share/cmake-3.11/Modules/CMakeFindDependencyMacro.cmake:48 (find_package); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/TargetLAPACKConfig.cmake:45 (find_dependency); CMakeLists.txt:25 (find_package). -- Configuring incomplete, errors occurred!; See also ""/home/laz/build/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build/CMakeFiles/CMakeOutput.log"".; CMakeFiles/psi4-core.dir/build.make:108: recipe for target 'psi4-core-prefix/src/psi4-core-stamp/psi4-core-configure' failed; make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-confi",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-396738516:4193,Error,Error,4193,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-396738516,1,['Error'],['Error']
Availability,"4002487283383; 3 0.00000000000000 -0.00000000000000 -0.00008207795130; 4 -0.01223116065955 -0.00000000000000 -0.00731033118319; 5 0.01223116065955 0.00000000000000 -0.00731033118319; 6 -0.00012619424214 -0.00130983621357 0.00002545245078; 7 -0.00012619424214 0.00130983621357 0.00002545245078; 8 0.00012619424214 0.00130983621357 0.00002545245078; 9 0.00012619424214 -0.00130983621357 0.00002545245078. ## F-D gradient (Symmetry 0) ##; Irrep: 1 Size: 9 x 3. 1 2 3. 1 0.00000000000000 0.00000000000000 -0.02542132788092; 2 0.00000000000000 0.00000000000000 0.04001842268283; 3 0.00000000000000 0.00000000000000 -0.00008157403367; 4 -0.01223146212679 0.00000000000000 -0.00730812502865; 5 0.01223146212679 0.00000000000000 -0.00730812502865; 6 -0.00012673181204 -0.00131081707156 0.00002518232226; 7 -0.00012673181204 0.00131081707156 0.00002518232226; 8 0.00012673181204 0.00131081707156 0.00002518232226; 9 0.00012673181204 -0.00131081707156 0.00002518232226; ```. ---. A large part of the error comes from remaining XC grid errors. Removing the XC component and switching to the following functional:. ```; func = {; ""name"": ""random"",; ""x_hf"": {; ""alpha"": 0.6,; ""beta"": 1.0,; ""omega"": 0.2; },; ""c_functionals"": {}; }; ```. We get:; ```; ## Total Gradient (Symmetry 0) ##; Irrep: 1 Size: 9 x 3. 1 2 3. 1 0.00000000000000 0.00000000000000 0.00751539716985; 2 0.00000000000000 -0.00000000000000 -0.11630695396167; 3 0.00000000000000 0.00000000000000 -0.01206645849208; 4 0.03096553875899 0.00000000000000 0.01320113763483; 5 -0.03096553875899 -0.00000000000000 0.01320113763483; 6 0.03065040266884 0.05175861616944 0.02361393500320; 7 0.03065040266884 -0.05175861616944 0.02361393500320; 8 -0.03065040266884 -0.05175861616944 0.02361393500320; 9 -0.03065040266884 0.05175861616944 0.02361393500320. ## F-D gradient (Symmetry 0) ##; Irrep: 1 Size: 9 x 3. 1 2 3. 1 0.00000000000000 0.00000000000000 0.00751479730193; 2 0.00000000000000 0.00000000000000 -0.11630874980790; 3 0.00000000000000 0.000000000000",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1043#issuecomment-397310129:1786,error,error,1786,https://psicode.org,https://github.com/psi4/psi4/pull/1043#issuecomment-397310129,2,['error'],"['error', 'errors']"
Availability,"42) ; - LIBxc density screening (#1860) ; - Add MBIS charge partitioning (#1961, #2035, #2056, #2127) ; - External potentials to CP-SCF solver (#2006) ; - FMM and PE(ECP) (#2025) ; - SAPT(DFT) supports hybrid XC kernel in dispersion (#1865) ; - SAPT0-D routines, includes interface (#2081) ; - Electrostatic embedding to FSAPT (#2131); - Implement level shifts in RHF, UHF, CUHF, ROHF (#2225, #2237) ; ; New External Libraries ; ---------------------- ; ; - ADC from ADCC callable from Psi (#1744, #1827, #1848, #1892, #1914) ; - Enables use of GeomeTRIC optimizer in Psi (#1813) ; - Interoperability via Molssi Driver (#1676, #1929, #2163) ; - Psi4fockci (#1855) ; - CCT3 (#1934) ; - Interface to i-pi (#1057) ; - BrianQC GPU module (#1893) ; - Upgrade to Libint2 (#1721) ; - Update RESP and PSIXAS (#2065) ; - Move to LibXC5 (#1101, #2113, #2169, #2191) ; ; Performace Optimizations ; ------------------------ ; ; - Big performance improvement to DF SCF Hessian (#1805) ; - Omega combine algorithm for computing exchange terms (#1911) ; - Optimize linalg::triplet (#2053) ; - Thread external charge potential (#1946) ; ; Developer Interests ; ------------------- ; ; - Remove obsolete functions in Wavefunction (#1766) ; - Psi is safe for Python 38 (#1776) ; - Extensive improvements to OCC (#1783,#1785,#1789, #1809, #1829, #1846) ; - Keep one-electron integrals in core (#1770) ; - Use def2 basis sets from BSE (#1804) ; - Improve memory estimates in fdisp (#1810) ; - Improve basis set choice in basis guess (#1484) ; - Print initial orbital occupations (#1713) ; - Improve handling/units of dipole and quadrupole arrays (#1800) ; - Electric dipole derivatives available py-side (#1799) ; - Add ST0-6G to list of basis sets (#1853) ; - PSIMRCC callable from comput_energy (#1854) ; - Improved general error reporting (#1862,#1868) ; - Removes CEPA0 from DCT module (#1873) ; - Remove debugging and timing code from psimrcc (#1879, #1901) ; - Add cython (#1889) ; - Update tolerances for mkl 2020.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:2029,avail,available,2029,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683,3,"['avail', 'error', 'toler']","['available', 'error', 'tolerances']"
Availability,"4218334710; 4 -0.00080458046709 0.00000000000000 -0.00083578684600; 5 0.00080458046709 0.00000000000000 -0.00083578684600; 6 -0.00151233457098 -0.00586107718524 -0.00140782187617; 7 -0.00151233457098 0.00586107718524 -0.00140782187617; 8 0.00151233457098 0.00586107718524 -0.00140782187617; 9 0.00151233457098 -0.00586107718524 -0.00140782187617; ```; By disabling [this safety check](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/scfgrad/jk_grad.cc#L185) I can make the DF version run, which is clearly wrong:; ```; ## Total Gradient (Symmetry 0) ##; Irrep: 1 Size: 9 x 3. 1 2 3. 1 0.00000000000000 -0.00000000000000 -0.34802063969605; 2 0.00000000000000 -0.00000000000000 0.51455817020357; 3 0.00000000000000 0.00000000000000 0.04263207395510; 4 -0.03687141420968 -0.00000000000000 -0.01196133113197; 5 0.03687141420968 0.00000000000000 -0.01196133113197; 6 -0.06383887601370 -0.11505211473982 -0.04636560808797; 7 -0.06383887601370 0.11505211473982 -0.04636560808797; 8 0.06383887601370 0.11505211473982 -0.04636560808797; 9 0.06383887601370 -0.11505211473982 -0.04636560808797. ## F-D gradient (Symmetry 0) ##; Irrep: 1 Size: 9 x 3. 1 2 3. 1 0.00000000000000 0.00000000000000 0.00759612379921; 2 0.00000000000000 0.00000000000000 0.01575853518631; 3 0.00000000000000 0.00000000000000 -0.01609636966124; 4 -0.00080665975793 0.00000000000000 -0.00081633836046; 5 0.00080665975793 0.00000000000000 -0.00081633836046; 6 -0.00151005119180 -0.00585353047813 -0.00140640315084; 7 -0.00151005119180 0.00585353047813 -0.00140640315084; 8 0.00151005119180 0.00585353047813 -0.00140640315084; 9 0.00151005119180 -0.00585353047813 -0.00140640315084; ```; It does look like we can re-enable the exact integral methods in the driver, but the DF bug is still present. Thankfully DF cannot be run without code modifications, so users will never see that faulty DF gradients. I bet it's an easy one to figure out - should be a good candidate for the next hackathon unless somebody gets to it before then.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/867#issuecomment-351422094:2821,fault,faulty,2821,https://psicode.org,https://github.com/psi4/psi4/issues/867#issuecomment-351422094,2,['fault'],['faulty']
Availability,"48886 -2.2974156084 2.1731147635; H 2.9070579021 0.6633160437 0.4892159706; H 3.2587884244 -0.9572243350 -3.3447119335; --------------------------; OPTKING Finished Execution; --------------------------. Structure for next step:; Molecular point group: c1; Full point group: C1; ```; But then when it starts going again, this is happening. ```; Name: DEF2-TZVP; Role: ORBITAL; Keyword: BASIS; atoms 1-2, 5-7, 10 entry C line 123 file /apps/psi4conda/share/psi4/basis/def2-tzvp.gbs; atoms 3-4, 8-9, 11-13 entry O line 189 file /apps/psi4conda/share/psi4/basis/def2-tzvp.gbs; atoms 14-21 entry H line 15 file /apps/psi4conda/share/psi4/basis/def2-tzvp.gbs. Reading orbitals from file /tmp/citric_acid_B3LYP-D3_def2-tzvp_psi4_geom_opt.py.dimer_0_0.23437.180.npy, no projection. ==> Integral Setup <==. DFHelper Memory: AOs need 1.457 GiB; user supplied 24.990 GiB. Using in-core AOs. ==> MemDFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 20; Memory [MiB]: 25589; Algorithm: Core; Schwarz Cutoff: 1E-12; Mask sparsity (%): 19.8770; Fitting Condition: 1E-10. => Auxiliary Basis Set <=. Basis Set: (DEF2-TZVP AUX); Blend: DEF2-UNIVERSAL-JKFIT; Number of shells: 373; Number of basis functions: 1133; Number of Cartesian functions: 1345; Spherical Harmonics?: true; Max angular momentum: 4. Cached 100.0% of DFT collocation blocks in 2.950 [GiB]. Minimum eigenvalue in the overlap matrix is 1.9770003531E-04.; Reciprocal condition number of the overlap matrix is 2.3108928958E-05.; Using symmetric orthogonalization. ==> Pre-Iterations <==. SCF Guess: Orbitals guess was supplied from a previous computation. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 451 451 50 50 50 0; -------------------------------------------------------; Total 451 451 50 50 50 0; -------------------------------------------------------. ==> Iterations <==. Total Ener",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2338#issuecomment-952880914:3817,Mask,Mask,3817,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-952880914,1,['Mask'],['Mask']
Availability,"4942958 -1 -195.27629857 1 -76.47288217 1; HEAVY28-11 0.8000 0.1821 -0.6179 -2.5853 -656.12844746 -1 -195.27629857 1 -460.85185870 1; HEAVY28-12 1.0400 0.4064 -0.6336 -2.6510 -2770.12088792 -1 -195.27629857 1 -2574.84394169 1; HEAVY28-13 1.2900 0.0679 -1.2221 -5.1133 -493.68358516 -1 -195.27629857 1 -298.40717839 1; HEAVY28-14 0.7000 0.1020 -0.5980 -2.5019 -464.58500012 -1 -195.27629857 1 -269.30853894 1; HEAVY28-15 1.3000 0.2426 -1.0574 -4.4240 -484.24282026 -1 -242.12121680 2; HEAVY28-16 1.7000 1.7156 0.0156 0.0653 -318.59683296 -1 -242.12121680 1 -76.47288217 1; HEAVY28-17 1.1400 0.7054 -0.4346 -1.8184 -641.56356522 -1 -242.12121680 1 -399.44122431 1; HEAVY28-18 2.2000 2.1130 -0.0870 -0.3641 -702.97644274 -1 -242.12121680 1 -460.85185870 1; HEAVY28-19 2.0700 1.9609 -0.1091 -0.4563 -2816.96828346 -1 -242.12121680 1 -2574.84394169 1; HEAVY28-20 1.6400 1.1654 -0.4746 -1.9859 -540.53025230 -1 -242.12121680 1 -298.40717839 1; HEAVY28-22 0.5800 -0.0821 -0.6621 -2.7702 -538.61694704 -1 -269.30853894 2; HEAVY28-24 0.5000 -0.0901 -0.5901 -2.4690 -668.74961966 -1 -269.30853894 1 -399.44122431 1; HEAVY28-25 1.2400 0.7192 -0.5208 -2.1790 -730.16154377 -1 -269.30853894 1 -460.85185870 1; HEAVY28-26 1.2400 0.7729 -0.4671 -1.9542 -2844.15371239 -1 -269.30853894 1 -2574.84394169 1; HEAVY28-27 0.8400 0.2215 -0.6185 -2.5876 -567.71607039 -1 -269.30853894 1 -298.40717839 1; --------------------------------------------------------------------------------------------------------------------------; Minimal Dev 0.0156 0.0653; Maximal Dev -1.2548 -5.2502; Mean Signed Dev -0.5805 -2.4287; Mean Absolute Dev 0.5965 2.4956; RMS Dev 0.6837 2.8605; --------------------------------------------------------------------------------------------------------------------------; ```; when col ""Energy Calc"" should match http://www.thch.uni-bonn.de/tc.old/downloads/GMTKN/GMTKN30/funcsGMTKN30/HEAVY28B3LYP.html. Sorry, that's D2 vs D3, will post correction shortly. Just wanted to make materials available.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/795#issuecomment-326351281:3213,down,downloads,3213,https://psicode.org,https://github.com/psi4/psi4/pull/795#issuecomment-326351281,2,"['avail', 'down']","['available', 'downloads']"
Availability,"4\libtrans\trans.lib Ws2_32.lib C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\Extensions\Microsoft\Python\Miniconda\Miniconda3-x64\libs\Python37.lib F:\psi4_v1.3.2\out\build\x64-Release\stage\lib\gg.lib F:\psi4_v1.3.2\out\build\x64-Release\stage\lib\xc.lib F:\psi4_v1.3.2\out\build\x64-Release\stage\lib\deriv.lib F:\psi4_v1.3.2\out\build\x64-Release\stage\lib\int.lib D:\OpenBLAS\lib\openblas.lib kernel32.lib user32.lib gdi32.lib winspool.lib shell32.lib ole32.lib oleaut32.lib uuid.lib comdlg32.lib advapi32.lib /MANIFEST /MANIFESTFILE:src\CMakeFiles\core.dir/intermediate.manifest src\CMakeFiles\core.dir/manifest.res"" failed (exit code 1120) with the following output:; 正在创建库 src\core.lib 和对象 src\core.exp; F:\fnocc.lib(diis.cc.obj) : error LNK2019: 无法解析的外部符号 dgesv_，该符号在函数 ""void __cdecl psi::fnocc::DGESV(long &,long &,double *,long &,long *,double *,long &,long &)"" (?DGESV@fnocc@psi@@YAXAEAJ0PEAN0PEAJ100@Z) 中被引用; F:\mcscf.lib(scf_diis.cc.obj) : error LNK2001: 无法解析的外部符号 dgesv_; F:\psimrcc.lib(blas_diis.cc.obj) : error LNK2001: 无法解析的外部符号 dgesv_; F:\fnocc.lib(blas.cc.obj) : error LNK2019: 无法解析的外部符号 dgemv_，该符号在函数 ""void __cdecl psi::fnocc::DGEMV(char &,long &,long &,double &,double *,long &,double *,long &,double &,double *,long &)"" (?DGEMV@fnocc@psi@@YAXAEADAEAJ1AEANPEAN131231@Z) 中被引用; F:\fnocc.lib(blas.cc.obj) : error LNK2019: 无法解析的外部符号 dgemm_，该符号在函数 ""void __cdecl psi::fnocc::DGEMM(char &,char &,long &,long &,long &,double &,double *,long &,double *,long &,double &,double *,long &)"" (?DGEMM@fnocc@psi@@YAXAEAD0AEAJ11AEANPEAN131231@Z) 中被引用; F:\optking.lib(linear_algebra.cc.obj) : error LNK2001: 无法解析的外部符号 dgemm_; F:\psimrcc.lib(algebra_interface.cc.obj) : error LNK2001: 无法解析的外部符号 dgemm_; F:\psimrcc.lib(operation_contraction.cc.obj) : error LNK2001: 无法解析的外部符号 dgemm_; F:\fnocc.lib(blas.cc.obj) : error LNK2019: 无法解析的外部符号 dsyev_，该符号在函数 ""void __cdecl psi::fnocc::DSYEV(char &,char &,long &,double *,long &,double *,double *,long &,long &)"" (?DSYEV@fnocc@psi",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:6996,error,error,6996,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,6.1 hf484d3e_0 ; networkx 2.1 py36_0 ; numpy 1.14.5 py36hcd700cb_3 ; numpy-base 1.14.5 py36hdbf6ddf_3 ; openssl 1.0.2o h20670df_0 ; pcmsolver 1.2.1 py36h8733eb9_0 psi4; pip 10.0.1 py36_0 ; pluggy 0.6.0 py36hb689045_0 ; psi4 1.2+9d4a61c py36hf231b52_1 psi4; psi4-rt 1.2 py36ha3f051b_1 psi4; py 1.5.3 py36_0 ; pycosat 0.6.3 py36h0a5515d_0 ; pycparser 2.18 py36hf9f622e_1 ; pyopenssl 18.0.0 py36_0 ; pysocks 1.6.8 py36_0 ; pytest 3.6.2 py36_0 ; python 3.6.6 hc3d631a_0 ; readline 7.0 ha6073c6_4 ; requests 2.18.4 py36he2e5f8d_1 ; resp 0.7 py36ha93d1a2_0 psi4; ruamel_yaml 0.15.37 py36h14c3975_2 ; scipy 1.1.0 py36hfc37229_0 ; setuptools 39.2.0 py36_0 ; simint 0.7 h642920c_1 psi4; six 1.11.0 py36h372c433_1 ; snsmp2 1.0.1 py36hda7112b_2 psi4; sqlite 3.24.0 h84994c4_0 ; tk 8.6.7 hc745277_3 ; urllib3 1.22 py36hbe7ace6_0 ; v2rdm_casscf 0.8 py36hbddea90_0 psi4; wheel 0.31.1 py36_0 ; xz 5.2.4 h14c3975_4 ; yaml 0.1.7 had09818_2 ; zlib 1.2.11 ha838bed_2`. `[ch1jgh@xxx ~]$ echo $PATH; /home/software/miniconda3/bin:/home/software/intel/composer_xe_2013_sp1.1.106/bin/intel64:/home/software/intel/composer_xe_2013_sp1.1.106/mpirt/bin/intel64:/home/software/intel/composer_xe_2013_sp1.1.106/debugger/gdb/intel64_mic/py26/bin:/home/software/intel/composer_xe_2013_sp1.1.106/debugger/gdb/intel64/py26/bin:/home/software/intel/composer_xe_2013_sp1.1.106/bin/intel64:/home/software/intel/composer_xe_2013_sp1.1.106/bin/intel64_mic:/home/software/intel/composer_xe_2013_sp1.1.106/debugger/gui/intel64:/home/software/intel/composer_xe_2013_sp1.1.106/bin/intel64:/home/software/intel/composer_xe_2013_sp1.1.106/mpirt/bin/intel64:/home/software/intel/composer_xe_2013_sp1.1.106/debugger/gdb/intel64_mic/py26/bin:/home/software/intel/composer_xe_2013_sp1.1.106/debugger/gdb/intel64/py26/bin:/home/software/intel/composer_xe_2013_sp1.1.106/bin/intel64:/home/software/intel/composer_xe_2013_sp1.1.106/bin/intel64_mic:/home/software/intel/composer_xe_2013_sp1.1.106/debugger/gui/intel64:/opt/openmpi/bin:/usr/lib64/qt-3.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1088#issuecomment-404235526:2105,echo,echo,2105,https://psicode.org,https://github.com/psi4/psi4/issues/1088#issuecomment-404235526,1,['echo'],['echo']
Availability,"67, #2172, #2179) ; - Restore debug symbols (#2159) ; - DCT Cleanup (#2152, #2168, #2171, #2182, #2185) ; - Cleanup of some optking functions (#2170) ; - Improve QCEngine interface for empirical dispersion (#2180) ; - Remove CHKPT (#2186) ; - X2C gradient warning (#2200) ; - Update cmake files to enable Flexiblas support from Fedora (#2246) ; ; Bug Fixes ; --------- ; ; - Fix bug in DF-CC when reading wfn with scf_type CD (#1771) ; - Fix computation of properties in DFOCC (#1772) ; - Fix ROHF and CUHF for asymmetric orthogonalizing matrix X (#1781) ; - Fix to NBO, move to python (#1790) ; - Fix memory bug in DMRG (#1802) ; - Add missing E(30)ind term in SAPT (#1803) ; - Typo in error message (#1811) ; - Fix Azure clang omp (#1822) ; - Remove Psi3 from docs (#1815) ; - Fix to omp call (#1823) ; - Handle very bad linear dependencies (#1844) ; - Fixes to vibrational analysis (#1845) ; - Fix threading in SAPT CPHF (#1849) ; - Fix MP2 handling of 1-electron cases (#1857) ; - Replace seg fault with error in DETCI and DFOCC (#1858, #1861) ; - Fix printing of custom basis sets in banner (#1880) ; - Remove omp_set_nested (#1883) ; - Fix seg fault in CCEnergyWavefunction::rotation() (#1887) ; - Threading fix in ESP potential build (#1900) ; - Proper computation of TDMs from DETCI (#1910) ; - Close DETCI files (#1926) ; - Fix UHF after RHF CCSD gradient crash (#1928) ; - Fix ECPa f-electron combinations (#1930) ; - Keep default_psio_manager alive (#1933) ; - Fix printing of coordinates (#1938) ; - Fixes to Treutler gcc5 (#1945) ; - Fix string setting in options (#1955) ; - USAPT spin fix (#1948, #1969) ; - Distinguish SCF and CC densities (#1962) ; - Improvement to PCMsolver interface (#1977) ; - Fix to occ orbital gradient (#1988) ; - Fix to PK (#1990) ; - Fix bug in scf response (#1999) ; - Correct Bragg-Slater radius for Zn (#2000) ; - Skip Ghost atoms interacting with external charges (#1993) ; - Fix inconsistent basis set parsing (#2002) ; - Psi4dev package working on mac",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:5376,fault,fault,5376,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683,1,['fault'],['fault']
Availability,"6\lib\site-packages\psi4\tests\test_qcel_molparse_to_string.py:7: in <module>; from qcelemental.tests import test_molparse_to_string; <frozen importlib._bootstrap>:991: in _find_and_load; ???; <frozen importlib._bootstrap>:975: in _find_and_load_unlocked; ???; <frozen importlib._bootstrap>:671: in _load_unlocked; ???; psi4conda\envs\psi16\lib\site-packages\_pytest\assertion\rewrite.py:168: in exec_module; exec(co, module.__dict__); psi4conda\envs\psi16\lib\site-packages\qcelemental\tests\test_molparse_to_string.py:270: in <module>; ""subject1"": qcel.models.Molecule(; psi4conda\envs\psi16\lib\site-packages\qcelemental\models\molecule.py:294: in __init__; super().__init__(**kwargs); pydantic\main.py:341: in pydantic.main.BaseModel.__init__; ???; E pydantic.error_wrappers.ValidationError: 2 validation errors for Molecule; E connectivity -> 0; E '<' not supported between instances of 'tuple' and 'int' (type=type_error); E connectivity -> 1; E '<' not supported between instances of 'tuple' and 'int' (type=type_error); ================================================== warnings summary ===================================================; psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:599; psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:701; `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:698; psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:699; `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2614#issuecomment-1160363542:4027,error,errors,4027,https://psicode.org,https://github.com/psi4/psi4/issues/2614#issuecomment-1160363542,2,['error'],['errors']
Availability,"7.12/envs/psi4-2/lib/python3.11/site-packages/psi4/__init__.py"", line 90, in <module>; from .driver import endorsed_plugins; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/psi4/driver/__init__.py"", line 42, in <module>; from qcelemental import constants; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/qcelemental/__init__.py"", line 6, in <module>; from . import covalent_radii, models, molparse, molutil, periodic_table, physical_constants, util, vanderwaals_radii; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/qcelemental/models/__init__.py"", line 10, in <module>; from .align import AlignmentMill; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/qcelemental/models/align.py"", line 6, in <module>; from ..util import blockwise_contract, blockwise_expand; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/qcelemental/util/__init__.py"", line 1, in <module>; from .autodocs import auto_gen_docs_on_demand, get_base_docs; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/qcelemental/util/autodocs.py"", line 6, in <module>; from pydantic import BaseModel, BaseSettings; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/pydantic/__init__.py"", line 210, in __getattr__; return _getattr_migration(attr_name); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/pydantic/_migration.py"", line 289, in wrapper; raise PydanticImportError(; pydantic.errors.PydanticImportError: `BaseSettings` has been moved to the `pydantic-settings` package. See https://docs.pydantic.dev/2.3/migration/#basesettings-has-moved-to-pydantic-settings for more details. For further information visit https://errors.pydantic.dev/2.3/u/import-error; ~ ❯ ; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2991#issuecomment-1698251880:2309,error,errors,2309,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1698251880,3,['error'],"['error', 'errors']"
Availability,"9 0.000; > C 6.120 1.209 0.000; > C 6.120 -1.209 0.000; > C 7.516 -1.209 0.000; > H 8.058 2.147 0.000; > H 5.578 2.147 0.000; > H 9.297 0.000 0.000; > H 5.578 -2.147 0.000; > H 8.058 -2.147 0.000; > ; > symmetry c1; > units angstrom; > }; > ; > set globals {; > reference rhf; > basis cc-pvdz; > #freeze_core true; > scf_type out_of_core; > dipmom true; > num_roots 4; > }; > ; > set scf d_convergence 10; > set detci e_convergence 8; > ; > ## thisenergy = energy('fci'); > ; > I am getting this erorr and i am not able to correct this. any one can; > help me ?; > ; > PSIO_ERROR: unit = 41, errval = 12; > PSIO_ERROR: 12 (error writing to file); > Traceback (most recent call last):; > File """", line 58, in; > File ""/usr/local/psi4/share/psi/python/driver.py"", line 549, in energy; > procedures['energy']lowername http://lowername,%20**kwargs; > File ""/usr/local/psi4/share/psi/python/proc.py"", line 1481, in run_detci; > psi4.transqt2(); > RuntimeError: PSIO Error; > file: /home/psi4.0b5/src/lib/libpsio/error.cc; > line: 116; > ; > Output File; > ; > ---; > ; > ```; > PSI4: An Open-Source Ab Initio Electronic Structure Package; > PSI 4.0.0-beta5 Driver; > ```; > ; > J. M. Turney, A. C. Simmonett, R. M. Parrish, E. G. Hohenstein,; > F. A. Evangelista, J. T. Fermann, B. J. Mintz, L. A. Burns, J. J. Wilke,; > M. L. Abrams, N. J. Russ, M. L. Leininger, C. L. Janssen, E. T. Seidl,; > W. D. Allen, H. F. Schaefer, R. A. King, E. F. Valeev, C. D. Sherrill,; > and T. D. Crawford, WIREs Comput. Mol. Sci., (2011) (doi: 10.1002/wcms.93); > ; > ```; > Additional Contributions by; > ```; > ; > ## A. E. DePrince, M. Saitow, U. Bozkaya, A. Yu. Sokolov; > ; > Process ID: 4249; > PSI4DATADIR: /usr/local/psi4/share/psi; > ; > Using LocalCommunicator (Number of processes = 1); > ; > Memory level set to 256.000 MB; > ; > ## ==> Input File <==; > ; > Finding of 30 higher roots(i.e excited states) and then finding transition; > dipole moment from ground state to these excited states; > ; > #for Graph",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/61#issuecomment-58650322:2162,error,error,2162,https://psicode.org,https://github.com/psi4/psi4/issues/61#issuecomment-58650322,1,['error'],['error']
Availability,"9, in geometric_run_json\n geometric.optimize.Optimize(coords, M, IC, engine, dirname, params, print_info = (ic==0))\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 779, in Optimize\n return optimizer.optimizeGeometry()\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 692, in optimizeGeometry\n self.calcEnergyForce()\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 283, in calcEnergyForce\n spcalc = self.engine.calc(self.X, self.dirname, read_data=(self.Iteration==0))\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1470, in calc\n return self.calc_new(coords, dirname)\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1461, in calc_new\n raise QCEngineAPIEngineError(""QCEngineAPI computation did not execute correctly. Message: "" + ret[""error""][""error_message""])\ngeometric.errors.QCEngineAPIEngineError: QCEngineAPI computation did not execute correctly. Message: QCEngine Execution Error:\nTraceback (most recent call last):\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\util.py"", line 114, in compute_wrapper\n yield metadata\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\compute.py"", line 105, in compute\n output_data = executor.compute(input_data, config)\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\programs\\psi4.py"", line 121, in compute\n pversion = parse_version(self.get_version())\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\programs\\psi4.py"", line 89, in get_version\n with popen([which_prog, ""--version""]) as exc:\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\contextlib.py"", line 113, in __enter__\n return next(self.gen)\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-pack",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020:1641,error,error,1641,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020,1,['error'],['error']
Availability,"9.187; N 32.575 19.445 27.669; C 32.087 18.889 26.432; C 31.731 17.414 26.713; C 31.321 16.545 25.541; C 31.013 15.137 26.058; C 30.543 14.205 24.939; N 30.199 12.899 25.479; H 31.224 19.458 26.087; H 32.557 18.953 28.374; H 32.758 18.931 25.732; H 32.498 16.999 27.137; H 31.008 17.401 27.36; H 30.542 16.92 25.101; H 32.031 16.513 24.881; H 31.806 14.766 26.475; H 30.329 15.188 26.744; H 29.773 14.59 24.492; H 31.241 14.112 24.272; H 29.548 12.991 26.078; H 29.922 12.373 24.817; H 30.914 12.537 25.867; C 31.761 21.869 21.802; C 32.242 20.403 21.82; C 33.766 20.25 22.033; C 34.219 19.883 23.454; N 33.896 18.494 23.771; C 34.834 17.555 23.931; N 36.131 17.833 23.815; N 34.474 16.305 24.204; H 31.663 22.232 22.825; H 30.794 21.929 21.302; H 32.406 22.415 21.326; H 31.776 19.927 22.525; H 31.997 19.98 20.982; H 34.092 19.569 21.424; H 34.194 21.084 21.782; H 35.175 20.022 23.537; H 33.79 20.472 24.095; H 33.07 18.269 23.849; H 36.39 18.633 23.634; H 36.712 17.209 23.924; H 33.641 16.105 24.278; H 35.074 15.698 24.31; C 38.551 24.807 28.833; C 39.217 23.791 29.752; O 40.012 23.0 29.251; H 39.174 24.9 27.944; H 37.55 24.41 28.664; H 38.405 25.701 29.18; N 38.994 23.745 31.065; C 39.394 22.611 31.867; C 38.505 22.665 33.102; O 37.885 23.692 33.416; C 40.943 22.687 32.147; C 41.446 23.269 33.424; O 41.297 21.311 32.139; H 38.613 24.41 31.455; H 39.273 21.75 31.437; H 41.327 23.294 31.495; H 42.122 21.236 32.281; H 42.415 23.239 33.434; H 41.151 24.19 33.499; H 41.099 22.757 34.172; N 38.365 21.521 33.776; C 37.444 21.422 34.889; H 36.713 20.636 34.701; H 37.974 21.174 35.809; H 38.903 20.867 33.627; H 36.998 22.28 34.969. units angstrom; no_reorient; symmetry c1; }. set globals {; basis jun-cc-pvdz; df_basis_scf jun-cc-pvdz-jkfit; df_basis_sapt jun-cc-pvdz-ri; guess sad; scf_type df; freeze_core true; }. set sapt {; print 1; }. energy('fisapt0-d3mbj'); ```. Hello, We are having the same pairwise sum error . ! !; ! pairwise sum -2.401299138175176 != energy -2.40130245 !; ! !",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2914#issuecomment-1720232923:8830,error,error,8830,https://psicode.org,https://github.com/psi4/psi4/issues/2914#issuecomment-1720232923,1,['error'],['error']
Availability,9949. OS CCSD correlation energy: -3.064993697148; SS CCSD correlation energy: -0.903832488652; CCSD correlation energy: -3.968826185800; * CCSD total energy: -1132.830153449423. Total time for CCSD iterations: 4253910.43 s (user); 6108342.47 s (system); 475421 s (total). Time per iteration: 223890.02 s (user); 321491.71 s (system); 25022.16 s (total). *** tstop() called on pn029.its.monash.edu.au at Thu Mar 13 03:02:13 2014; Module time:; user time = 4263649.92 seconds = 71060.83 minutes; system time = 6115066.90 seconds = 101917.78 minutes; total time = 484147 seconds = 8069.12 minutes; Total time:; user time = 4279640.89 seconds = 71327.35 minutes; system time = 6115258.31 seconds = 101920.97 minutes; total time = 484647 seconds = 8077.45 minutes. *** tstart() called on pn029.its.monash.edu.au; *** at Thu Mar 13 03:19:32 2014. *******************************************************; * *; * CCSD(T) *; * *; *******************************************************. num_threads = 64; available memory = 43097.75 mb; memory requirements = 433739.41 mb. Number of ijk combinations: 50116. Computing (T) correction... % complete total time; 10.0 54071 s; 20.0 107105 s; 30.1 161098 s; 40.0 214685 s; 50.1 268763 s; 60.0 322003 s; 70.1 378258 s; 80.1 435809 s; 90.1 493509 s. (T) energy -0.198672700359. CCSD(T) correlation energy -4.167498886158; * CCSD(T) total energy -1133.028826149781. *** tstop() called on pn029.its.monash.edu.au at Wed Mar 19 13:22:06 2014; Module time:; user time = 0.00 seconds = 0.00 minutes; system time = 32946184.58 seconds = 549103.08 minutes; total time = 554554 seconds = 9242.57 minutes; Total time:; user time = 4279640.89 seconds = 71327.35 minutes; system time = 39077777.68 seconds = 651296.29 minutes; total time = 1040240 seconds = 17337.33 minutes. *** tstop() called on pn029.its.monash.edu.au at Wed Mar 19 13:22:08 2014; Module time:; user time = 0.00 seconds = 0.00 minutes; system time = 32946186.58 seconds = 549103.11 minutes; total time = 55,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/34#issuecomment-38020193:4269,avail,available,4269,https://psicode.org,https://github.com/psi4/psi4/issues/34#issuecomment-38020193,1,['avail'],['available']
Availability,"9: 无法解析的外部符号 dsbgvx，该符号在函数 ""int __cdecl psi::C_DSBGVX(char,char,char,int,int,int,double *,int,double *,int,double *,int,double,double,int,int,double,int *,double *,double *,int,double *,int *,int *)"" (?C_DSBGVX@psi@@YAHDDDHHHPEANH0H0HNNHHNPEAH00H011@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsbtrd，该符号在函数 ""int __cdecl psi::C_DSBTRD(char,char,int,int,double *,int,double *,double *,double *,int,double *)"" (?C_DSBTRD@psi@@YAHDDHHPEANH000H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsgesv，该符号在函数 ""int __cdecl psi::C_DSGESV(int,int,double *,int,int *,double *,int,double *,int,double *,int *)"" (?C_DSGESV@psi@@YAHHHPEANHPEAH0H0H01@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspcon，该符号在函数 ""int __cdecl psi::C_DSPCON(char,int,double *,int *,double,double *,double *,int *)"" (?C_DSPCON@psi@@YAHDHPEANPEAHN001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspev，该符号在函数 ""int __cdecl psi::C_DSPEV(char,char,int,double *,double *,double *,int,double *)"" (?C_DSPEV@psi@@YAHDDHPEAN00H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspevd，该符号在函数 ""int __cdecl psi::C_DSPEVD(char,char,int,double *,double *,double *,int,double *,int,int *,int)"" (?C_DSPEVD@psi@@YAHDDHPEAN00H0HPEAHH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspevx，该符号在函数 ""int __cdecl psi::C_DSPEVX(char,char,char,int,double *,double,double,int,int,double,int *,double *,double *,int,double *,int *,int *)"" (?C_DSPEVX@psi@@YAHDDDHPEANNNHHNPEAH00H011@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspgst，该符号在函数 ""int __cdecl psi::C_DSPGST(int,char,int,double *,double *)"" (?C_DSPGST@psi@@YAHHDHPEAN0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspgv，该符号在函数 ""int __cdecl psi::C_DSPGV(int,char,char,int,double *,double *,double *,double *,int,double *)"" (?C_DSPGV@psi@@YAHHDDHPEAN000H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspgvd，该符号在函",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:40531,error,error,40531,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"9: 无法解析的外部符号 dstevr，该符号在函数 ""int __cdecl psi::C_DSTEVR(char,char,int,double *,double *,double,double,int,int,double,int *,double *,double *,int,int *,double *,int,int *,int)"" (?C_DSTEVR@psi@@YAHDDHPEAN0NNHHNPEAH00H10H1H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dstevx，该符号在函数 ""int __cdecl psi::C_DSTEVX(char,char,int,double *,double *,double,double,int,int,double,int *,double *,double *,int,double *,int *,int *)"" (?C_DSTEVX@psi@@YAHDDHPEAN0NNHHNPEAH00H011@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsycon，该符号在函数 ""int __cdecl psi::C_DSYCON(char,int,double *,int,int *,double,double *,double *,int *)"" (?C_DSYCON@psi@@YAHDHPEANHPEAHN001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsyev，该符号在函数 ""int __cdecl psi::C_DSYEV(char,char,int,double *,int,double *,double *,int)"" (?C_DSYEV@psi@@YAHDDHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsyevd，该符号在函数 ""int __cdecl psi::C_DSYEVD(char,char,int,double *,int,double *,double *,int,int *,int)"" (?C_DSYEVD@psi@@YAHDDHPEANH00HPEAHH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsyevr，该符号在函数 ""int __cdecl psi::C_DSYEVR(char,char,char,int,double *,int,double,double,int,int,double,int *,double *,double *,int,int *,double *,int,int *,int)"" (?C_DSYEVR@psi@@YAHDDDHPEANHNNHHNPEAH00H10H1H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsyevx，该符号在函数 ""int __cdecl psi::C_DSYEVX(char,char,char,int,double *,int,double,double,int,int,double,int *,double *,double *,int,double *,int,int *,int *)"" (?C_DSYEVX@psi@@YAHDDDHPEANHNNHHNPEAH00H0H11@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsygst，该符号在函数 ""int __cdecl psi::C_DSYGST(int,char,int,double *,int,double *,int)"" (?C_DSYGST@psi@@YAHHDHPEANH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsygv，该符号在函数 ""int __cdecl psi::C_DSYGV(int,char,char,int,double *,int,double *,int,double *,double *,int)"" (?C_DSYGV@psi@@YAHHDDHPEANH",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:46077,error,error,46077,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,": error LNK2019: 无法解析的外部符号 ddot，该符号在函数 ""double __cdecl psi::C_DDOT(unsigned __int64,double *,int,double *,int)"" (?C_DDOT@psi@@YAN_KPEANH1H@Z) 中被引用; F:\qt.lib(blas_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dnrm2，该符号在函数 ""double __cdecl psi::C_DNRM2(unsigned __int64,double *,int)"" (?C_DNRM2@psi@@YAN_KPEANH@Z) 中被引用; F:\qt.lib(blas_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dasum，该符号在函数 ""double __cdecl psi::C_DASUM(unsigned __int64,double *,int)"" (?C_DASUM@psi@@YAN_KPEANH@Z) 中被引用; F:\qt.lib(blas_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 idamax，该符号在函数 ""unsigned __int64 __cdecl psi::C_IDAMAX(unsigned __int64,double *,int)"" (?C_IDAMAX@psi@@YA_K_KPEANH@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dgbmv，该符号在函数 ""void __cdecl psi::C_DGBMV(char,int,int,int,int,double,double *,int,double *,int,double,double *,int)"" (?C_DGBMV@psi@@YAXDHHHHNPEANH0HN0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dgemm，该符号在函数 ""void __cdecl psi::C_DGEMM(char,char,int,int,int,double,double *,int,double *,int,double,double *,int)"" (?C_DGEMM@psi@@YAXDDHHHNPEANH0HN0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dgemv，该符号在函数 ""void __cdecl psi::C_DGEMV(char,int,int,double,double *,int,double *,int,double,double *,int)"" (?C_DGEMV@psi@@YAXDHHNPEANH0HN0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dger，该符号在函数 ""void __cdecl psi::C_DGER(int,int,double,double *,int,double *,int,double *,int)"" (?C_DGER@psi@@YAXHHNPEANH0H0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dsbmv，该符号在函数 ""void __cdecl psi::C_DSBMV(char,int,int,double,double *,int,double *,int,double,double *,int)"" (?C_DSBMV@psi@@YAXDHHNPEANH0HN0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dspmv，该符号在函数 ""void __cdecl psi::C_DSPMV(char,int,double,double *,double *,int,double,double *,int)"" (?C_DSPMV@psi@@YAXDHNPEAN0HN0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dspr，该符号在函数 ""void __cdecl psi::C_DSPR(char,i",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:10920,error,error,10920,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,": 无法解析的外部符号 dsyevd，该符号在函数 ""int __cdecl psi::C_DSYEVD(char,char,int,double *,int,double *,double *,int,int *,int)"" (?C_DSYEVD@psi@@YAHDDHPEANH00HPEAHH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsyevr，该符号在函数 ""int __cdecl psi::C_DSYEVR(char,char,char,int,double *,int,double,double,int,int,double,int *,double *,double *,int,int *,double *,int,int *,int)"" (?C_DSYEVR@psi@@YAHDDDHPEANHNNHHNPEAH00H10H1H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsyevx，该符号在函数 ""int __cdecl psi::C_DSYEVX(char,char,char,int,double *,int,double,double,int,int,double,int *,double *,double *,int,double *,int,int *,int *)"" (?C_DSYEVX@psi@@YAHDDDHPEANHNNHHNPEAH00H0H11@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsygst，该符号在函数 ""int __cdecl psi::C_DSYGST(int,char,int,double *,int,double *,int)"" (?C_DSYGST@psi@@YAHHDHPEANH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsygv，该符号在函数 ""int __cdecl psi::C_DSYGV(int,char,char,int,double *,int,double *,int,double *,double *,int)"" (?C_DSYGV@psi@@YAHHDDHPEANH0H00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsygvd，该符号在函数 ""int __cdecl psi::C_DSYGVD(int,char,char,int,double *,int,double *,int,double *,double *,int,int *,int)"" (?C_DSYGVD@psi@@YAHHDDHPEANH0H00HPEAHH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsygvx，该符号在函数 ""int __cdecl psi::C_DSYGVX(int,char,char,char,int,double *,int,double *,int,double,double,int,int,double,int *,double *,double *,int,double *,int,int *,int *)"" (?C_DSYGVX@psi@@YAHHDDDHPEANH0HNNHHNPEAH00H0H11@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsyrfs，该符号在函数 ""int __cdecl psi::C_DSYRFS(char,int,int,double *,int,double *,int,int *,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DSYRFS@psi@@YAHDHHPEANH0HPEAH0H0H0001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsysv，该符号在函数 ""int __cdecl psi::C_DSYSV(char,int,int,double *,int,int *,double *,int,d",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:47004,error,error,47004,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"://azure.archive.ubuntu.com/ubuntu focal/universe amd64 libclang-common-6.0-dev amd64 1:6.0.1-14 [3015 kB]; 2022-12-01T16:30:07.1867680Z Get:4 http://azure.archive.ubuntu.com/ubuntu focal/universe amd64 libclang1-6.0 amd64 1:6.0.1-14 [7472 kB]; 2022-12-01T16:31:01.2307594Z Get:5 http://azure.archive.ubuntu.com/ubuntu focal/universe amd64 clang-6.0 amd64 1:6.0.1-14 [9831 kB]; 2022-12-01T16:32:37.6678852Z Get:6 http://azure.archive.ubuntu.com/ubuntu focal/universe amd64 libomp5-10 amd64 1:10.0.0-4ubuntu1 [300 kB]; 2022-12-01T16:32:38.5410720Z Get:7 http://azure.archive.ubuntu.com/ubuntu focal/universe amd64 libomp-10-dev amd64 1:10.0.0-4ubuntu1 [47.7 kB]; 2022-12-01T16:32:38.5769178Z Get:8 http://azure.archive.ubuntu.com/ubuntu focal/universe amd64 llvm-6.0-runtime amd64 1:6.0.1-14 [207 kB]; 2022-12-01T16:32:38.6670727Z Get:9 http://azure.archive.ubuntu.com/ubuntu focal/universe amd64 llvm-6.0 amd64 1:6.0.1-14 [4889 kB]; 2022-12-01T16:33:14.3718902Z Get:10 http://azure.archive.ubuntu.com/ubuntu focal/universe amd64 llvm-6.0-dev amd64 1:6.0.1-14 [24.0 MB]; 2022-12-01T16:35:33.4054716Z Get:11 http://azure.archive.ubuntu.com/ubuntu focal/universe amd64 libomp-dev amd64 1:10.0-50~exp1 [2824 B]; 2022-12-01T16:35:33.4069243Z Fetched 65.0 MB in 12min 10s (89.1 kB/s); 2022-12-01T16:35:33.4339396Z E: Failed to fetch http://azure.archive.ubuntu.com/ubuntu/pool/main/libj/libjsoncpp/libjsoncpp1_1.7.4-3.1ubuntu2_amd64.deb 503 Service Unavailable [IP: 52.147.219.192 80]; 2022-12-01T16:35:33.4341544Z E: Unable to fetch some archives, maybe run apt-get update or try with --fix-missing?; 2022-12-01T16:35:33.4444758Z ##[error]Bash exited with code '100'.; 2022-12-01T16:35:33.4494014Z ##[section]Finishing: Apt-Get Packages; 2022-12-01T16:35:33.6248939Z ##[section]Starting: Checkout psi4/psi4@refs/pull/2816/merge to s; 2022-12-01T16:35:33.6261343Z `. Seems to be an issue with loading and installing packages with apt-get? Maybe this is a one-time thing that can be fixed with a CI restart.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2816#issuecomment-1334145597:2066,error,error,2066,https://psicode.org,https://github.com/psi4/psi4/pull/2816#issuecomment-1334145597,1,['error'],['error']
Availability,"::C_DGEMV(char,int,int,double,double *,int,double *,int,double,double *,int)"" (?C_DGEMV@psi@@YAXDHHNPEANH0HN0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dger，该符号在函数 ""void __cdecl psi::C_DGER(int,int,double,double *,int,double *,int,double *,int)"" (?C_DGER@psi@@YAXHHNPEANH0H0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dsbmv，该符号在函数 ""void __cdecl psi::C_DSBMV(char,int,int,double,double *,int,double *,int,double,double *,int)"" (?C_DSBMV@psi@@YAXDHHNPEANH0HN0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dspmv，该符号在函数 ""void __cdecl psi::C_DSPMV(char,int,double,double *,double *,int,double,double *,int)"" (?C_DSPMV@psi@@YAXDHNPEAN0HN0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dspr，该符号在函数 ""void __cdecl psi::C_DSPR(char,int,double,double *,int,double *)"" (?C_DSPR@psi@@YAXDHNPEANH0@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dspr2，该符号在函数 ""void __cdecl psi::C_DSPR2(char,int,double,double *,int,double *,int,double *)"" (?C_DSPR2@psi@@YAXDHNPEANH0H0@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dsymm，该符号在函数 ""void __cdecl psi::C_DSYMM(char,char,int,int,double,double *,int,double *,int,double,double *,int)"" (?C_DSYMM@psi@@YAXDDHHNPEANH0HN0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dsymv，该符号在函数 ""void __cdecl psi::C_DSYMV(char,int,double,double *,int,double *,int,double,double *,int)"" (?C_DSYMV@psi@@YAXDHNPEANH0HN0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dsyr，该符号在函数 ""void __cdecl psi::C_DSYR(char,int,double,double *,int,double *,int)"" (?C_DSYR@psi@@YAXDHNPEANH0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dsyr2，该符号在函数 ""void __cdecl psi::C_DSYR2(char,int,double,double *,int,double *,int,double *,int)"" (?C_DSYR2@psi@@YAXDHNPEANH0H0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dsyr2k，该符号在函数 ""void __cdecl psi::C_DSYR2K(char,char,int,int,double,double ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:12116,error,error,12116,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"::C_DSPTRD(char,int,double *,double *,double *,double *)"" (?C_DSPTRD@psi@@YAHDHPEAN000@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsptrf，该符号在函数 ""int __cdecl psi::C_DSPTRF(char,int,double *,int *)"" (?C_DSPTRF@psi@@YAHDHPEANPEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsptri，该符号在函数 ""int __cdecl psi::C_DSPTRI(char,int,double *,int *,double *)"" (?C_DSPTRI@psi@@YAHDHPEANPEAH0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsptrs，该符号在函数 ""int __cdecl psi::C_DSPTRS(char,int,int,double *,int *,double *,int)"" (?C_DSPTRS@psi@@YAHDHHPEANPEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dstebz，该符号在函数 ""int __cdecl psi::C_DSTEBZ(char,char,int,double,double,int,int,double,double *,double *,int *,int *,double *,int *,int *,double *,int *)"" (?C_DSTEBZ@psi@@YAHDDHNNHHNPEAN0PEAH101101@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dstedc，该符号在函数 ""int __cdecl psi::C_DSTEDC(char,int,double *,double *,double *,int,double *,int,int *,int)"" (?C_DSTEDC@psi@@YAHDHPEAN00H0HPEAHH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dstegr，该符号在函数 ""int __cdecl psi::C_DSTEGR(char,char,int,double *,double *,double,double,int,int,double,int *,double *,double *,int,int *,double *,int,int *,int)"" (?C_DSTEGR@psi@@YAHDDHPEAN0NNHHNPEAH00H10H1H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dstein，该符号在函数 ""int __cdecl psi::C_DSTEIN(int,double *,double *,int,double *,int *,int *,double *,int,double *,int *,int *)"" (?C_DSTEIN@psi@@YAHHPEAN0H0PEAH10H011@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsteqr，该符号在函数 ""int __cdecl psi::C_DSTEQR(char,int,double *,double *,double *,int,double *)"" (?C_DSTEQR@psi@@YAHDHPEAN00H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsterf，该符号在函数 ""int __cdecl psi::C_DSTERF(int,double *,double *)"" (?C_DSTERF@psi@@YAHHPEAN0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dstev",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:43697,error,error,43697,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"::C_DSYR(char,int,double,double *,int,double *,int)"" (?C_DSYR@psi@@YAXDHNPEANH0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dsyr2，该符号在函数 ""void __cdecl psi::C_DSYR2(char,int,double,double *,int,double *,int,double *,int)"" (?C_DSYR2@psi@@YAXDHNPEANH0H0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dsyr2k，该符号在函数 ""void __cdecl psi::C_DSYR2K(char,char,int,int,double,double *,int,double *,int,double,double *,int)"" (?C_DSYR2K@psi@@YAXDDHHNPEANH0HN0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dsyrk，该符号在函数 ""void __cdecl psi::C_DSYRK(char,char,int,int,double,double *,int,double,double *,int)"" (?C_DSYRK@psi@@YAXDDHHNPEANHN0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dtbmv，该符号在函数 ""void __cdecl psi::C_DTBMV(char,char,char,int,int,double *,int,double *,int)"" (?C_DTBMV@psi@@YAXDDDHHPEANH0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dtbsv，该符号在函数 ""void __cdecl psi::C_DTBSV(char,char,char,int,int,double *,int,double *,int)"" (?C_DTBSV@psi@@YAXDDDHHPEANH0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dtpmv，该符号在函数 ""void __cdecl psi::C_DTPMV(char,char,char,int,double *,double *,int)"" (?C_DTPMV@psi@@YAXDDDHPEAN0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dtpsv，该符号在函数 ""void __cdecl psi::C_DTPSV(char,char,char,int,double *,double *,int)"" (?C_DTPSV@psi@@YAXDDDHPEAN0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dtrmm，该符号在函数 ""void __cdecl psi::C_DTRMM(char,char,char,char,int,int,double,double *,int,double *,int)"" (?C_DTRMM@psi@@YAXDDDDHHNPEANH0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dtrmv，该符号在函数 ""void __cdecl psi::C_DTRMV(char,char,char,int,double *,int,double *,int)"" (?C_DTRMV@psi@@YAXDDDHPEANH0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dtrsm，该符号在函数 ""void __cdecl psi::C_DTRSM(char,char,char,char,int,int,double,double *,int,double *,int)"" (?C_DTRSM@psi@@Y",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:13700,error,error,13700,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,":C_DGEEQU(int,int,double *,int,double *,double *,double *,double *,double *)"" (?C_DGEEQU@psi@@YAHHHPEANH00000@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgees，该符号在函数 ""int __cdecl psi::C_DGEES(char,char,int,double *,int,int *,double *,double *,double *,int,double *,int)"" (?C_DGEES@psi@@YAHDDHPEANHPEAH000H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgeesx，该符号在函数 ""int __cdecl psi::C_DGEESX(char,char,char,int,double *,int,int *,double *,double *,double *,int,double *,double *,double *,int,int *,int)"" (?C_DGEESX@psi@@YAHDDDHPEANHPEAH000H000H1H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgeev，该符号在函数 ""int __cdecl psi::C_DGEEV(char,char,int,double *,int,double *,double *,double *,int,double *,int,double *,int)"" (?C_DGEEV@psi@@YAHDDHPEANH000H0H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgeevx，该符号在函数 ""int __cdecl psi::C_DGEEVX(char,char,char,char,int,double *,int,double *,double *,double *,int,double *,int,int *,int *,double *,double *,double *,double *,double *,int,int *)"" (?C_DGEEVX@psi@@YAHDDDDHPEANH000H0HPEAH100000H1@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgehrd，该符号在函数 ""int __cdecl psi::C_DGEHRD(int,int,int,double *,int,double *,double *,int)"" (?C_DGEHRD@psi@@YAHHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgelqf，该符号在函数 ""int __cdecl psi::C_DGELQF(int,int,double *,int,double *,double *,int)"" (?C_DGELQF@psi@@YAHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgels，该符号在函数 ""int __cdecl psi::C_DGELS(char,int,int,int,double *,int,double *,int,double *,int)"" (?C_DGELS@psi@@YAHDHHHPEANH0H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgelsd，该符号在函数 ""int __cdecl psi::C_DGELSD(int,int,int,double *,int,double *,int,double *,double,int *,double *,int,int *)"" (?C_DGELSD@psi@@YAHHHHPEANH0H0NPEAH0H1@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgelss，该符号",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:19194,error,error,19194,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,":C_DTGSNA(char,char,int,double *,int,double *,int,double *,int,double *,int,double *,double *,int,int *,double *,int,int *)"" (?C_DTGSNA@psi@@YAHDDHPEANH0H0H0H00HPEAH0H1@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtgsyl，该符号在函数 ""int __cdecl psi::C_DTGSYL(char,int,int,int,double *,int,double *,int,double *,int,double *,int,double *,int,double *,int,double *,double *,double *,int,int *)"" (?C_DTGSYL@psi@@YAHDHHHPEANH0H0H0H0H0H000HPEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtpcon，该符号在函数 ""int __cdecl psi::C_DTPCON(char,char,char,int,double *,double *,double *,int *)"" (?C_DTPCON@psi@@YAHDDDHPEAN00PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtprfs，该符号在函数 ""int __cdecl psi::C_DTPRFS(char,char,char,int,int,double *,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DTPRFS@psi@@YAHDDDHHPEAN0H0H000PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtptri，该符号在函数 ""int __cdecl psi::C_DTPTRI(char,char,int,double *)"" (?C_DTPTRI@psi@@YAHDDHPEAN@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtptrs，该符号在函数 ""int __cdecl psi::C_DTPTRS(char,char,char,int,int,double *,double *,int)"" (?C_DTPTRS@psi@@YAHDDDHHPEAN0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtrcon，该符号在函数 ""int __cdecl psi::C_DTRCON(char,char,char,int,double *,int,double *,double *,int *)"" (?C_DTRCON@psi@@YAHDDDHPEANH00PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtrevc，该符号在函数 ""int __cdecl psi::C_DTREVC(char,char,int,double *,int,double *,int,double *,int,int,int *,double *)"" (?C_DTREVC@psi@@YAHDDHPEANH0H0HHPEAH0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtrexc，该符号在函数 ""int __cdecl psi::C_DTREXC(char,int,double *,int,double *,int,int *,int *,double *)"" (?C_DTREXC@psi@@YAHDHPEANH0HPEAH10@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtrrfs，该符号在函数 ""int __cdecl psi::C_DTRRFS(char,char,char,int,int,double",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:51891,error,error,51891,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,":DMRG::Solve()'; > /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:464: undefined reference to `CheMPS2::DMRG::activateExcitations(int)'; > /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:475: undefined reference to`CheMPS2::DMRG::deleteStoredOperators()'; > /tmp/ccJGpNaW.ltrans0.ltrans.o: In function `CheMPS2::DMRG::calc2DMandCorrelations()':; > /home/jturney/Code/CheMPS2/CheMPS2/include/chemps2/DMRG.h:104: undefined reference to`CheMPS2::DMRG::calc_rdms_and_correlations(bool)'; > /tmp/ccJGpNaW.ltrans0.ltrans.o: In function `main':; > /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:470: undefined reference to`CheMPS2::TwoDM::write2DMAfile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) const'; > /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:471: undefined reference to `CheMPS2::Correlations::Print(int, int) const'; > /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:352: undefined reference to`CheMPS2::Irreps::~Irreps()'; > /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:343: undefined reference to `CheMPS2::Irreps::~Irreps()'; > /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:410: undefined reference to`CheMPS2::Irreps::~Irreps()'; > collect2: error: ld returned 1 exit status; > CheMPS2/CMakeFiles/chemps2bin.dir/build.make:92: recipe for target 'CheMPS2/chemps2' failed; > make[2]: **\* [CheMPS2/chemps2] Error 1; > CMakeFiles/Makefile2:149: recipe for target 'CheMPS2/CMakeFiles/chemps2bin.dir/all' failed; > make[1]: **\* [CheMPS2/CMakeFiles/chemps2bin.dir/all] Error 2; > Makefile:126: recipe for target 'all' failed; > make: **\* [all] Error 2; > ...; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/264#issuecomment-185220619. ## . ---. dr. ir. Sebastian Wouters; Postdoctoral Fellow of the Research Foundation Flanders (FWO); Ghent University; (address) Center for Molecular Modeling; Technologiepark 903; 9052 Zwijnaarde (Belgium); (e-mail) sebastianwouters@gmail.com. ---",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/264#issuecomment-185225793:3972,error,error,3972,https://psicode.org,https://github.com/psi4/psi4/issues/264#issuecomment-185225793,4,"['Error', 'error']","['Error', 'error']"
Availability,":\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dggglm，该符号在函数 ""int __cdecl psi::C_DGGGLM(int,int,int,double *,int,double *,int,double *,double *,double *,double *,int)"" (?C_DGGGLM@psi@@YAHHHHPEANH0H0000H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgghrd，该符号在函数 ""int __cdecl psi::C_DGGHRD(char,char,int,int,int,double *,int,double *,int,double *,int,double *,int)"" (?C_DGGHRD@psi@@YAHDDHHHPEANH0H0H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgglse，该符号在函数 ""int __cdecl psi::C_DGGLSE(int,int,int,double *,int,double *,int,double *,double *,double *,double *,int)"" (?C_DGGLSE@psi@@YAHHHHPEANH0H0000H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dggqrf，该符号在函数 ""int __cdecl psi::C_DGGQRF(int,int,int,double *,int,double *,double *,int,double *,double *,int)"" (?C_DGGQRF@psi@@YAHHHHPEANH00H00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dggrqf，该符号在函数 ""int __cdecl psi::C_DGGRQF(int,int,int,double *,int,double *,double *,int,double *,double *,int)"" (?C_DGGRQF@psi@@YAHHHHPEANH00H00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dggsvd3，该符号在函数 ""int __cdecl psi::C_DGGSVD3(char,char,char,int,int,int,int *,int *,double *,int,double *,int,double *,double *,double *,int,double *,int,double *,int,double *,int,int *)"" (?C_DGGSVD3@psi@@YAHDDDHHHPEAH0PEANH1H111H1H1H1H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dggsvp3，该符号在函数 ""int __cdecl psi::C_DGGSVP3(char,char,char,int,int,int,double *,int,double *,int,double,double,int *,int *,double *,int,double *,int,double *,int,int *,double *,double *,int)"" (?C_DGGSVP3@psi@@YAHDDDHHHPEANH0HNNPEAH10H0H0H100H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgtcon，该符号在函数 ""int __cdecl psi::C_DGTCON(char,int,double *,double *,double *,double *,int *,double,double *,double *,int *)"" (?C_DGTCON@psi@@YAHDHPEAN000PEAHN001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgtrfs，该符号在",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:25433,error,error,25433,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,":buildHamDMRG(std::shared_ptr<psi::IntegralTransform>, std::shared_ptr<psi::MOSpace>, CheMPS2::DMRGSCFmatrix*, CheMPS2::DMRGSCFmatrix*, CheMPS2::DMRGSCFindices*, CheMPS2::Hamiltonian*, std::shared_ptr<psi::PSIO>, std::shared_ptr<psi::Wavefunction>)’:; > /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:268:66: error: no matching function for call to ‘psi::Molecule::nuclear_repulsion_energy()’; > double Econstant = wfn->molecule()->nuclear_repulsion_energy();; > ^; > In file included from /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:34:0:; > /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate: double psi::Molecule::nuclear_repulsion_energy(const std::array<double, 3ul>&) const; > double nuclear_repulsion_energy(const std::array<double,3> &dipole_field) const;; > ^; > /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate expects 1 argument, 0 provided; > make[5]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/dmrgscf.cc.o] Error 1; > make[4]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/all] Error 2; > make[3]: *** [all] Error 2; > make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; > make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; > make: *** [all] Error 2; > The output generated by psi4-path-advisor --gcc is; > ; > /home/shouck/miniconda3/envs/p4dev/bin/cmake \; > -H. \; > -C/home/shouck/miniconda3/envs/p4dev/share/cmake/psi4/psi4DepsCache.cmake \; > -Bobjdir; > @ashutoshvt and @robertodr have narrowed the issue down to the CheMPS2 module, which is set to ON in psi4DepsCache.cmake by default; changing it to; > ; > set(ENABLE_CheMPS2 OFF CACHE BOOL """"); > set(CheMPS2_DIR ""/home/shouck/miniconda3/envs/p4dev/share/cmake/CheMPS2"" CACHE PATH """"); > allows Psi4 to compile without issues. I'm not sure, but it seems like maybe a function was changed and then not updated in CheMPS2. The error and log files are attached. Thank you!; > ; > CMakeError.log; > CMakeOutput.log; > ; > —; > You are receiving this because",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/871#issuecomment-347970165:1511,Error,Error,1511,https://psicode.org,https://github.com/psi4/psi4/issues/871#issuecomment-347970165,1,['Error'],['Error']
Availability,"; - USAPT spin fix (#1948, #1969) ; - Distinguish SCF and CC densities (#1962) ; - Improvement to PCMsolver interface (#1977) ; - Fix to occ orbital gradient (#1988) ; - Fix to PK (#1990) ; - Fix bug in scf response (#1999) ; - Correct Bragg-Slater radius for Zn (#2000) ; - Skip Ghost atoms interacting with external charges (#1993) ; - Fix inconsistent basis set parsing (#2002) ; - Psi4dev package working on mac (#2005) ; - Patches to FNOCC and DFOCC (#2013) ; - Fix QCSchema interface (#2014) ; - Fix VV10 for clang (#2017) ; - Plugins work with pybind11 v2.6.0 (#2028) ; - Fix memory bug in libtrans (#2027) ; - Fix to large DF-MP2 (#2033) ; - Make sure psi populates qcschema wfn with orbital occupations (#2036) ; - Options reading ignores spaces (#2051) ; - Fix to Treutler grid call (#2044) ; - Fix diffuse external potential after L2 (#2068) ; - Fixes to PCM/qcschema (#2037) ; - Bug in ccresponse (#2077) ; - Fix error throwing in some threaded blocks (#2082) ; - Better error printing (#2083) ; - Fix in EOM CC3 (#2085) ; - Deprecate Matrix::Savetype::Full (#2092) ; - Fix getting of CC amplitudes in frozen core jobs (#2095) ; - QCSchema export bug fix (#2112) ; - Fix TD-SCF computations when using DF and symmetry (#2124) ; - Fix DF-DCT energy, grad, properties, and densities (#2100) ; - Fix bug by closing DPD file in DF grad (#2137) ; - Fix method/basis bug when using DiskDF (#2141) ; - Fix bug by triggering error in CC code (#2150) ; - Fix indexing bug in DCT (#2165) ; - Fix gcc-related bug (#2175) ; - Fix stability of mcscf test (#2173) ; - Citation type fix in dft builder (#2176) ; - Keep internal coordinate files in optking (#2188) ; - Bugfix in parallelization of DF gradients (#2193) ; - Fix bug in qcvars for nbody computations (#2191) ; - Use correct libxc functional for wB97X-D3 (#2207) ; - Fix shell core freezing with ECPs (#2222) ; - Fix linear dependency bugs in DCT (#2232, #2233) ; - Return correct energy for ccsd(at) (#2241) ; - Bug in detci printing (2245)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:6889,error,error,6889,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683,3,['error'],['error']
Availability,"; - int atom_at_position1(double*, double tol = 0.05) const;; - int atom_at_position2(Vector3&, double tol = 0.05) const;; - int atom_at_position3(const std::array<double, 3>&, const double tol = 0.05) const;; + int atom_at_position1(double*, double tol = 1.e-6) const;; + int atom_at_position2(Vector3&, double tol = 1.e-6) const;; + int atom_at_position3(const std::array<double, 3>&, const double tol = 1.e-6) const;; /// @}; ; /// Do we reinterpret coordentries during a call to update_geometry?; @@ -505,7 +505,7 @@ class PSI_API Molecule {; * Force the molecule to have the symmetry specified in pg_.; * This is to handle noise coming in from optking.; */; - void symmetrize(double tol = 0.05, bool suppress_mol_print_in_exc = false);; + void symmetrize(double tol = 1.e-6, bool suppress_mol_print_in_exc = false);; /// @}; ; /**; @@ -668,7 +668,7 @@ class PSI_API Molecule {; /// Returns the Schoenflies symbol; std::string schoenflies_symbol() const;; /// Check if current geometry fits current point group; - bool valid_atom_map(double tol = 0.05) const;; + bool valid_atom_map(double tol = 1.e-6) const;; /// Return point group name such as C3v or S8.; std::string full_point_group() const;; /// Return point group name such as Cnv or Sn.; ```. input; ```; import psi4. mol = psi4.core.Molecule.from_arrays(; elez=[2, 4, 2],; #fix_com=True,; #fix_orientation=True,; fix_symmetry='c1',; tooclose=1.e-6,; real=[True, False, True],; geom=[; 1.0, 0.0, -0.01,; 1.0, 0.0, 0.0,; 1.0, 0.0, 0.01]); activate(mol). set basis cc-pvdz #ugbs; energy('scf'). # fix_symmetry needed to avoid:; #Program received signal SIGFPE, Arithmetic exception.; #0x00007fffe1b5700e in psi::PetiteList::init (this=0x0, tol=0) at /home/psilocaluser/gits/hrw-direct/psi4/src/psi4/libmints/petitelist.cc:567; #567 lamij_[ij] = (char)(ng_ / nij);. # now ends with; #Fatal Error: SOBasis::SOBasis: shell changed; #Error occurred in file: /home/psilocaluser/gits/hrw-direct/psi4/src/psi4/libmints/sobasis.cc on line: 257; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1843#issuecomment-595893879:3738,Error,Error,3738,https://psicode.org,https://github.com/psi4/psi4/pull/1843#issuecomment-595893879,2,['Error'],['Error']
Availability,"; ------------. Optional Input Fields; ---------------------. Output Fields; -------------. Optional Output Fields; ----------------------. """"""; if verbose > 2:; print('[1] {} JOBREC PRE-PLANT (j@i) <<<'.format('DFTD3')); pp.pprint(jobrec); print('>>>'). dftd3rec = dftd3_plant(jobrec). # test json roundtrip; jdftd3rec = json.dumps(dftd3rec); dftd3rec = json.loads(jdftd3rec). if verbose > 3:; print('[2] {}REC PRE-SUBPROCESS (m@i) <<<'.format('DFTD3')); pp.pprint(dftd3rec); print('>>>\n'). dftd3_subprocess(dftd3rec) # updates dftd3rec. if verbose > 3:; print('[3] {}REC POST-SUBPROCESS (m@io) <<<'.format('DFTD3')); pp.pprint(dftd3rec); print('>>>\n'). > dftd3_harvest(jobrec, dftd3rec) # updates jobrec. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:183:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. jobrec = {'driver': 'energy', 'error': ""Dftd3Error('Unsuccessful run. Possibly -D variant not available in dftd3 version.',)"", ...ule': {'elbl': ['', '', '', ''], 'elea': [12, 12, 1, 1], 'elem': ['C', 'C', 'H', 'H'], 'elez': [6, 6, 1, 1], ...}, ...}; dftd3rec = {'command': ['dftd3', 'dftd3_geometry.xyz'], 'dashlevel': 'd3bj', 'dashparams': {'a1': 0.486, 'a2': 4.5, 's6': 1.0, 's8': 0.0}, 'dashparams_citation': False, ...}. def dftd3_harvest(jobrec, dftd3rec):; """"""Process raw results from read-only `dftd3rec` into QCAspect; fields in returned `jobrec`: jobrec@i, dftd3rec@io -> jobrec@io. Parameters; ----------; jobrec : dict; Nested dictionary with input specifications for DFTD3 in generic; QC terms.; dftd3rec : dict; Nested dictionary with input specification and output collection; from DFTD3 in program-specific commands, files, & output capture. Returns; -------; jobrec : dict; Nested dictionary with input specification and output collection; from DFTD3 in generic QC terms. """"""; try:; jobrec['molecule']['real']; jobrec['driver']; jobrec['provenance']; jobrec['options']['fctldash",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:14538,avail,available,14538,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846,1,['avail'],['available']
Availability,"; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/p4util/numpy_helper.py:454: DeprecationWarning: The binary mode of fromstring is deprecated, as it behaves surprisingly on unicode inputs. Use frombuffer instead; ret.nph[n].flat[:] = np.fromstring(json_data[""data""][n], dtype=np.double). /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:. /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892:37192,error,error,37192,https://psicode.org,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892,1,['error'],['error']
Availability,"; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/p4util/numpy_helper.py:454: DeprecationWarning: The binary mode of fromstring is deprecated, as it behaves surprisingly on unicode inputs. Use frombuffer instead; ret.nph[n].flat[:] = np.fromstring(json_data[""data""][n], dtype=np.double). /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:. /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892:36931,error,error,36931,https://psicode.org,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892,1,['error'],['error']
Availability,"; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/p4util/numpy_helper.py:454: DeprecationWarning: The binary mode of fromstring is deprecated, as it behaves surprisingly on unicode inputs. Use frombuffer instead; ret.nph[n].flat[:] = np.fromstring(json_data[""data""][n], dtype=np.double). /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:. /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892:36670,error,error,36670,https://psicode.org,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892,1,['error'],['error']
Availability,"; > #29 0x00007ffff514b004 in fast_function (nk=<optimized out>, na=1, n=<optimized out>, pp_stack=0x7fffffffe160, func=<optimized out>) at Python/ceval.c:4161; > #30 call_function (oparg=<optimized out>, pp_stack=0x7fffffffe160) at Python/ceval.c:4084; > #31 PyEval_EvalFrameEx (f=f@entry=0x28d5360, throwflag=throwflag@entry=0) at Python/ceval.c:2679; > #32 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0, ; > args=args@entry=0x0, argcount=argcount@entry=0, kws=kws@entry=0x0, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, ; > kwdefs=kwdefs@entry=0x0, closure=closure@entry=0x0) at Python/ceval.c:3433; > #33 0x00007ffff514d33b in PyEval_EvalCode (co=co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0); > at Python/ceval.c:771; > #34 0x00007ffff51669e4 in run_mod (mod=<optimized out>, filename=filename@entry=0x7ffff51bde72 ""<string>"", globals=globals@entry=0x7ffff7ed07a0, ; > locals=locals@entry=0x7ffff7ed07a0, flags=flags@entry=0x0, arena=arena@entry=0x28ca640) at Python/pythonrun.c:1981; > #35 0x00007ffff5168335 in PyRun_StringFlags (str=<optimized out>, start=257, globals=0x7ffff7ed07a0, locals=0x7ffff7ed07a0, flags=0x0); > at Python/pythonrun.c:1914; > #36 0x00007ffff66a3f45 in boost::python::exec(boost::python::str, boost::python::api::object, boost::python::api::object) (); > from /usr/lib/libboost_python3.so.1.54.0; > #37 0x00000000006fcad7 in psi::Python::run (this=<optimized out>, input=<optimized out>) at /home/james/projects/psi4/src/bin/psi4/python.cc:1446; > #38 0x000000000069a8ae in main (argc=2, argv=<optimized out>) at /home/james/projects/psi4/src/bin/psi4/psi4.cc:111; > Any suggestions on what I could do to track this down further? I looked in ccenergy/pair_energies.cc and there was nothing immediately obvious.; > ; > Thanks!; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12#issuecomment-22188141:7773,down,down,7773,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22188141,2,['down'],['down']
Availability,"; > - All the very tight DFT and VV10 tests break or will break. How to; > 'solve' that?; > - Do we want to be able to switch between old and new BS radii (as; > expert-only option)?; > - DFT_PRUNING_SCHEME re-work to not have DFT_PRUNE_TYPE as competing; > and confusing option?; > - Do users want access to custom pruning, e.g. via an array to define; > grids for RadialPruneMgr::ShellPruning ?; > - Pruning enabled by default? (I would vote yes); >; > Checklist; >; > - Documentation; > - Tests added; > - All or relevant fraction of full tests run; > <http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests>; >; > Status; >; > - Ready for review; > - Ready for merge; >; > ------------------------------; > You can view, comment on, or merge this pull request online at:; >; > https://github.com/psi4/psi4/pull/1591; > Commit Summary; >; > - first try of Treutler pruning. Error very large; > - testing; > - testing stage; > - adds Treutlers M4 fitting radii and new BS radii; > - adds switch for 3 different pruning schemes; > - BSrad in Angstrom works best..; > - cleaning up; > - adds smooth Becke mu of Ochsenfeld; >; > File Changes; >; > - *M* psi4/src/psi4/libfock/cubature.cc; > <https://github.com/psi4/psi4/pull/1591/files#diff-0> (235); > - *M* psi4/src/psi4/libfock/cubature.h; > <https://github.com/psi4/psi4/pull/1591/files#diff-1> (9); > - *M* psi4/src/read_options.cc; > <https://github.com/psi4/psi4/pull/1591/files#diff-2> (5); > - *M* tests/dft-b3lyp/input.dat; > <https://github.com/psi4/psi4/pull/1591/files#diff-3> (3); >; > Patch Links:; >; > - https://github.com/psi4/psi4/pull/1591.patch; > - https://github.com/psi4/psi4/pull/1591.diff; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/1591>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdvDQ8k3q9iMmt3WyUH9_hci95FKbks5vdu4LgaJpZM4ceQFR>; > .;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1591#issuecomment-480256922:2652,Error,Error,2652,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-480256922,1,['Error'],['Error']
Availability,"; > psi4/psi4.inv.git/psi4/src/core.cc:786:13: error: ‘isinstance’ is not a; > member of ‘py’ if (py::isinstance<py::list>(values[n])) { ^; > /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:786:36:; > error: expected primary-expression before ‘>’ token if; > (py::isinstance<py::list>(values[n])) { ^ /home/nmayhall/qcSoftware/; > psi4/psi4.inv.git/psi4/src/core.cc: In function ‘bool; > py_psi_set_global_option_array(const string&, pybind11::list,; > psi::DataType*)’: /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:13:; > error: ‘isinstance’ is not a member of ‘py’ if (py::isinstance<py::list>(values[n])); > { ^ /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:36:; > error: expected primary-expression before ‘>’ token if; > (py::isinstance<py::list>(values[n])) { ^ src/CMakeFiles/core.dir/build.make:374:; > recipe for target 'src/CMakeFiles/core.dir/core.cc.o' failed make[5]: ***; > [src/CMakeFiles/core.dir/core.cc.o] Error 1 make[5]: *** Waiting for; > unfinished jobs.... ^Csrc/CMakeFiles/core.dir/build.make:86: recipe for; > target 'src/CMakeFiles/core.dir/export_mints.cc.o' failed make[5]: ***; > [src/CMakeFiles/core.dir/export_mints.cc.o] Interrupt; > CMakeFiles/Makefile2:208: recipe for target 'src/CMakeFiles/core.dir/all'; > failed make[4]: *** [src/CMakeFiles/core.dir/all] Interrupt Makefile:127:; > recipe for target 'all' failed make[3]: *** [all] Interrupt; > CMakeFiles/psi4_core.dir/build.make:111: recipe for target; > 'psi4_core-prefix/src/psi4_core-stamp/psi4_core-build' failed make[2]:; > *** [psi4_core-prefix/src/psi4_core-stamp/psi4_core-build] Interrupt; > CMakeFiles/Makefile2:355: recipe for target 'CMakeFiles/psi4_core.dir/all'; > failed make[1]: *** [CMakeFiles/psi4_core.dir/all] Interrupt Makefile:138:; > recipe for target 'all' failed make: *** [all] Interrupt; > >; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly, view it on GitHub, or mute ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/536#issuecomment-264074858:2087,Error,Error,2087,https://psicode.org,https://github.com/psi4/psi4/issues/536#issuecomment-264074858,1,['Error'],['Error']
Availability,; df = 781.81 sec*proc (38 tests); dfccd = 1.18 sec*proc (1 test); dfccd-grad = 1.98 sec*proc (1 test); dfccdl = 1.41 sec*proc (1 test); dfccsd = 2.54 sec*proc (1 test); dfccsd-grad = 7.22 sec*proc (1 test); dfccsd-t-grad = 10.40 sec*proc (1 test); dfccsdat = 3.19 sec*proc (1 test); dfccsdl = 3.30 sec*proc (1 test); dfccsdt = 2.46 sec*proc (1 test); dfep2 = 4.34 sec*proc (2 tests); dfmp2 = 62.44 sec*proc (11 tests); dfomp2 = 517.24 sec*proc (7 tests); dfomp2.5 = 42.99 sec*proc (4 tests); dfomp3 = 50.83 sec*proc (4 tests); dfscf = 31.62 sec*proc (1 test); dft = 738.08 sec*proc (27 tests); docs = 1.16 sec*proc (2 tests); ecp = 32.55 sec*proc (2 tests); fci = 5.67 sec*proc (2 tests); fcidump = 3.01 sec*proc (1 test); findif = 553.63 sec*proc (5 tests); fnocc = 28.55 sec*proc (4 tests); freq = 919.36 sec*proc (6 tests); gradient = 876.87 sec*proc (16 tests); json = 10.02 sec*proc (8 tests); longtests = 792.31 sec*proc (5 tests); mcscf = 2.83 sec*proc (3 tests); minitests = 27.46 sec*proc (3 tests); mints = 32.34 sec*proc (14 tests); misc = 234.73 sec*proc (16 tests); mp2 = 166.66 sec*proc (13 tests); nbody = 43.85 sec*proc (2 tests); numpy = 0.62 sec*proc (1 test); ocepa = 492.10 sec*proc (6 tests); omp = 280.23 sec*proc (18 tests); opt = 690.78 sec*proc (21 tests); prop = 1.27 sec*proc (1 test); properties = 67.96 sec*proc (10 tests); psi = 18047.47 sec*proc (403 tests); psi4numpy = 10.13 sec*proc (6 tests); psimrcc = 59.10 sec*proc (8 tests); python = 942.95 sec*proc (10 tests); pywrap = 2529.67 sec*proc (12 tests); quicktests = 1844.29 sec*proc (138 tests); rasci = 34.06 sec*proc (3 tests); sapt = 1326.10 sec*proc (21 tests); scf = 1008.60 sec*proc (52 tests); shorttests = 34.75 sec*proc (4 tests); smoketests = 48.57 sec*proc (11 tests); stability = 3.84 sec*proc (2 tests); tutorial = 98.89 sec*proc (6 tests); x2c = 9.44 sec*proc (3 tests). Total Test time (real) = 2258.21 sec. The following tests FAILED:; 	365 - cubeprop-esp (Failed); Errors while running CTest; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338:40035,Error,Errors,40035,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338,1,['Error'],['Errors']
Availability,"= 1.325; b_start = 1.355; b_num = 20; aa = np.linspace(1, 1.2, 6); a = np.linspace(1.25, a_end, 3); b = np.linspace(b_start, 2.5, b_num); c = np.linspace(2.6, 10, 8); Rvals = np.concatenate((aa, a, b, c), axis=None). # Dictionary to store energies; ecp = {}. # Loop over R values; for R in Rvals:; if R <= a_end:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 0, 'NUM_DETS_PRINT': 40}); elif R >= b_start:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 1, 'NUM_DETS_PRINT': 40}). # Create CF molecule geometry; cf = psi4.geometry(cf_geometry.format(R)); ; # Run CASSCF calculation; try:; casscf_energy = psi4.energy('casscf'); ; # Store energies; ecp[R] = [; casscf_energy,; psi4.core.variable('ci root %d TOTAL ENERGY' % 0),; psi4.core.variable('ci root %d TOTAL ENERGY' % 1),; psi4.core.variable('ci root %d TOTAL ENERGY' % 2); ]; except Exception as e:; print(f""Error at R={R}: {e}""); ; # Clean up Psi4 core; psi4.core.clean(); ```; The new error message is: ; ```; Warning: iopen=0,opentype!=closed. Making iopen=1; ras_set3():Warning:Occupied electrons beyond ACTIVE orbs!; (set_ras_parms): detecting 1 alpha electrons in RAS III for irrep 3.; Some parts of DETCI assume all elec in I and II; Traceback (most recent call last):; File ""cf_casscf_pec.py"", line 50, in <module>; casscf_energy = psi4.energy('casscf'); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/driver.py"", line 526, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 5466, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/mcscf/mcscf_solver.py"", line 49, in mcscf_solver; ciwfn = core.CIWavefunction(ref_wfn); RuntimeError:; Fatal Error: DETCI: electrons detected outside of active space. Error occurred in file: /home/conda/feedstock_root/build_",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2153825631:1601,error,error,1601,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2153825631,1,['error'],['error']
Availability,"============================== warnings summary ===================================================; psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:599; psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:701; `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:698; psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:699; `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:702; `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html; !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!; =================================== 3950 deselected, 5 warnings, 1 error in 20.79s ====================================; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2614#issuecomment-1160363542:6076,error,error,6076,https://psicode.org,https://github.com/psi4/psi4/issues/2614#issuecomment-1160363542,4,['error'],['error']
Availability,==========================================================; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304:,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892:5814,error,error,5814,https://psicode.org,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892,1,['error'],['error']
Availability,"=None,; param_tweaks=None,; ptype='energy',; dashcoeff_supplement=None,; verbose=1):; """"""Specialized signature disentangling dispersion level and; parameters for computing on `molecule` with engine `DFTD3`. See; `dashparam.from_array` for parameter details. """"""; jobrec = {}; jobrec['error'] = ''; jobrec['success'] = None; jobrec['return_output'] = True; prov = {}; prov['creator'] = 'QCDB'; prov['version'] = __version__; prov['routine'] = sys._getframe().f_code.co_name; jobrec['provenance'] = prov. # strip engine hint; if name_hint.startswith('d3-'):; name_hint = name_hint[3:]. opts = {}; opts['level_hint'] = level_hint; opts['params_tweaks'] = param_tweaks; opts['dashcoeff_supplement'] = dashcoeff_supplement. jobrec['molecule'] = molrec; jobrec['method'] = name_hint; _, jobrec['driver'] = parse_dertype(ptype, max_derivative=1); jobrec['options'] = opts; #jobrec['options'] = copy.deepcopy(options). try:; dftd3_driver(jobrec); except Exception as err:; jobrec['success'] = False; jobrec['error'] += repr(err); > raise RuntimeError(err) from err; E RuntimeError: Unsuccessful run. Possibly -D variant not available in dftd3 version. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:135: RuntimeError; ------------------------------------------------- Captured stdout call -------------------------------------------------. Dftd3Error: Unsuccessful run. Possibly -D variant not available in dftd3 version. =============================================== short test summary info ================================================; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:99: Psi4 not detecting MRCC. Add `dmrcc` to envvar PSIPATH or PATH; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:633: Psi4 not compiled with erd. Rebuild with -DENABLE_erd; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:686: Psi4 not detecting CFOUR. Add `xcfour` to envvar PSIPATH or PATH; SKIPPED [1] lib/python3.6/site-packages/psi4/t",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:20375,error,error,20375,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846,1,['error'],['error']
Availability,"=None,; param_tweaks=None,; ptype='energy',; dashcoeff_supplement=None,; verbose=1):; """"""Specialized signature disentangling dispersion level and; parameters for computing on `molecule` with engine `DFTD3`. See; `dashparam.from_array` for parameter details. """"""; jobrec = {}; jobrec['error'] = ''; jobrec['success'] = None; jobrec['return_output'] = True; prov = {}; prov['creator'] = 'QCDB'; prov['version'] = __version__; prov['routine'] = sys._getframe().f_code.co_name; jobrec['provenance'] = prov. # strip engine hint; if name_hint.startswith('d3-'):; name_hint = name_hint[3:]. opts = {}; opts['level_hint'] = level_hint; opts['params_tweaks'] = param_tweaks; opts['dashcoeff_supplement'] = dashcoeff_supplement. jobrec['molecule'] = molrec; jobrec['method'] = name_hint; _, jobrec['driver'] = parse_dertype(ptype, max_derivative=1); jobrec['options'] = opts; #jobrec['options'] = copy.deepcopy(options). try:; dftd3_driver(jobrec); except Exception as err:; jobrec['success'] = False; jobrec['error'] += repr(err); > raise RuntimeError(err) from err; E RuntimeError: Unsuccessful run. Possibly -D variant not available in dftd3 version. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:135: RuntimeError; ------------------------------------------------- Captured stdout call -------------------------------------------------; -D correction from Py-side. Dftd3Error: Unsuccessful run. Possibly -D variant not available in dftd3 version. ____________________________________________________ test_grimme_3c ____________________________________________________. molrec = {'elbl': ['', '', '', ''], 'elea': [12, 12, 1, 1], 'elem': ['C', 'C', 'H', 'H'], 'elez': [6, 6, 1, 1], ...}; name_hint = 'pbeh3c', level_hint = 'd3bj', param_tweaks = {'a1': 0.486, 'a2': 4.5, 's6': 1.0, 's8': 0.0}; ptype = 'energy'; dashcoeff_supplement = defaultdict(<function <lambda> at 0x7f5e8db768c8>, {'d2': defaultdict(<class 'dict'>, {'definitions': {'opbe-d2': {'ty...0093}, 'citation': ' M. K. Ke",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:10831,error,error,10831,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846,1,['error'],['error']
Availability,"> ![image](https://private-user-images.githubusercontent.com/174042911/343890176-4ecd3a4a-19a1-48a3-af1e-5c1c787756ff.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTk1MTE3NDksIm5iZiI6MTcxOTUxMTQ0OSwicGF0aCI6Ii8xNzQwNDI5MTEvMzQzODkwMTc2LTRlY2QzYTRhLTE5YTEtNDhhMy1hZjFlLTVjMWM3ODc3NTZmZi5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjQwNjI3JTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI0MDYyN1QxODA0MDlaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT1lNjhjNjNlMDljZWY3MDZiMTgwY2NmMDI0MzM4NzQyYjEyOTRkYjAzNGQ1YWNkMjBlNmIwMTk3YjM5NjYzYmI2JlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCZhY3Rvcl9pZD0wJmtleV9pZD0wJnJlcG9faWQ9MCJ9.lrgh8Wm-ActfzXx9w5DLSgo9D-Bnf-eOKrQ1te9qJj8). The first one gives you a syntax error because it was meant to be executed in Bash, not Python, so naturally it does not have the correct syntax according to Python.; The second syntax error is because `sys.path.append` expects a string, and in Python you need to enclose string literals in quote characters.; Plus of course both of the paths you have tried to use were invalid, because the `<whatever>` notation generally means you are supposed to replace `<whatever>` with something before use.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3188#issuecomment-2195402490:867,error,error,867,https://psicode.org,https://github.com/psi4/psi4/issues/3188#issuecomment-2195402490,2,['error'],['error']
Availability,"> * Have you checked the magnitude of the negative grid weights? Are they near-zero, within some small tolerance? That could be justification for zeroing them out. They are of proper magnitude. Grid points with tiny weights are also already screened out during construction.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2890#issuecomment-1499311759:103,toler,tolerance,103,https://psicode.org,https://github.com/psi4/psi4/issues/2890#issuecomment-1499311759,1,['toler'],['tolerance']
Availability,"> * Holger asked about correctness tests. Sorry if I was unclear. I only wanted a sentence about how correctness was tested (or which other code was followed) for completeness of the PR body. Just in case one has to track something down.; Maybe in this more trivial case it's not needed, I don't think I looked at the code changes then.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2072#issuecomment-767165337:232,down,down,232,https://psicode.org,https://github.com/psi4/psi4/pull/2072#issuecomment-767165337,1,['down'],['down']
Availability,"> * I'm jealous you were able to pull this off, I gave up in a fit of rage the last time I tried to do this migration. Yeah, there were some bizarre bits -- had to basically restructure the driver import structure in #3033 to unwind the circular import to let pydantic see the classes it demanded. Thankfully Levi did the really hard part for qcel. > * Having 1.9 drop with pydantic =2 constrained everywhere would be a small problem (I think that's what the contents of this PR would require?). We'd be stuck on 1.8.something, which isn't the end of the world but also not preferred.; > * Waiting until the QCArchive stack works with v1/v2 at installation time and then having the next-ish Psi4 release be pydantic =2 sounds like a great idea (I think this is what you're suggesting?). Ok, good. Yes, I was suggesting psi v1.10 in May 2024 be pydantic=2 only and let v1.9 stay v1/v2-compatible. I don't want downstream to get locked into too-narrow a slice of the stack to cope with other constraints. So long as psi4 as v1/v2 isn't holding openff back, I think this is the way to go. Thanks!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3034#issuecomment-1809344855:909,down,downstream,909,https://psicode.org,https://github.com/psi4/psi4/pull/3034#issuecomment-1809344855,1,['down'],['downstream']
Availability,"> . > PSI4 has UBCC(T) `energy('bcc(t)')` on a ROHF reference, but only conventional integrals with the `ccenergy` module. Maybe you already found it. o_O No, in fact I would have completely missed that! I checked the method table [here](http://www.psicode.org/psi4manual/master/notes_c.html#alternate-implementations) and thought Psi4 cannot do BCCD(T) at all. Perhaps BCCD and BCCD(T) could be added as methods to that docpage?. > ; > You may want to have a look at Piecuch's methods (and his group's general work) for which now there is a plugin available https://github.com/piecuch-group/psi4_cct3 . Thanks, I will check it out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1863#issuecomment-611929316:549,avail,available,549,https://psicode.org,https://github.com/psi4/psi4/issues/1863#issuecomment-611929316,1,['avail'],['available']
Availability,"> . > There is a rohf-bccd test at https://github.com/psi4/psi4/blob/master/tests/cc16/input.dat#L28 . If it's any help, bccd and bccd(t) all-electron in psi4 match that in cfour. (Though I did have to turn on orbitals=1 for cfour bccd(t) for rhf/uhf to allow it to match psi4. After moderate effort, I couldn't get cfour bccd to run with frozen-core, but I wouldn't rule out user error.); > ; > > Would taking a look at https://psicode.org/psi4manual/master/cc.html be also in-scope for this PR? I think that page never mentions that gradients are restricted to all-electron.; > ; > I agree documenting capability exceptions is weak across modules at the moment. I was hoping to fix that with the table above, which is autogenerated from calcs, not hand-assembled. Do you think more is needed?. Hmmm...the `cc_index` file refers to `cc16` as ""UHF-B-CCD(T)"", but the input file in that test appears to execute ROHF-B-CCD(T) twice. The `output.ref` file, on the other hand starts with a UHF initial guess, and then switches to ROHF. Strange that it still passes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2708#issuecomment-1243114814:381,error,error,381,https://psicode.org,https://github.com/psi4/psi4/pull/2708#issuecomment-1243114814,1,['error'],['error']
Availability,"> 1. Fix the merge conflicts (annoying rebase). I'm not sure how much rebasing you want to do, but I think things are back to the state-of-the-world that we were discussing prior to #2743 . > 2. Determine what information in `print_details` is actually used. I want to retain print information that is actually used, but I can do away with the rest. Once we have that, we can assess if keeping a modified `RadialGrid` is the best way to keep the useful print information. (I think we've established that `r` and `wr` are used, but `order` is not?). ""Used"" is a funny word here. No tests when this print is removed, so it's not _so_ important that someone wrote a test to preserve it. Furthermore, the `order_` was _always_ wrong. The other elements weren't, though, but you have to set a pretty high print level to actually see anything (`v.cc` requires `print_ > 2`). . If by ""used"" you mean that the piece of information represented in the print is used downstream: `r` and `wr` are the primary candidates here. That said, they aren't used as-is -- they're dotted through other elements found by a lookup in `LebedevGridMgr` and `RadialGridMgr` to make `MassPoints` (see https://github.com/psi4/psi4/blob/9db9100564eaef5d02c952817a73c397db9d657b/psi4/src/psi4/libfock/cubature.cc#L3814-L3822). I'm not sure if we care about diagnostic print info on the intermediaries (the radii of shells around atoms we care about, and the number of angular points we end up picking for each shell). Maybe we do? If so, a struct seems like the most reasonable solution. I suppose, all-in-all, it's not so much data to carry around. Appending that data onto every `MassPoint` however feels like overkill (and that's the only other place to put it). . But we definitely should clean up/remove the rest of the old `RadialGrid` and `SphericalGrid`, as these seem to only cause confusion about where changes should be made. `RadialGridMgr` and `LebedevGridMgr` are the classes of Actual Importance.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2736#issuecomment-1275116304:956,down,downstream,956,https://psicode.org,https://github.com/psi4/psi4/pull/2736#issuecomment-1275116304,1,['down'],['downstream']
Availability,"> 1. Libxc: This line https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfunctional/LibXCfunctional.cc#L38 > includes libxc/xc.h when libxc installs include/xc.h. Yes, I've been pushing for namespaced headers (point 2 of https://gitlab.com/libxc/libxc/issues/61). If we really must, Psi can do non-namespaced libxc, but haven't gotten much response either way from upstream. > 2. Libxc project doesn't install .cmake files that you rely on. Only cmake build installs .cmake files and cmake build is broken:; https://gitlab.com/libxc/libxc/issues/66; https://gitlab.com/libxc/libxc/issues/67; https://gitlab.com/libxc/libxc/issues/68. I've fixed the latter two of these in https://gitlab.com/libxc/libxc/merge_requests/113. Not sure what to do about the first -- I really wish they would namespace their headers. The greater Libxc problem is that even if the above two points were cleaned up, there is no upstream Libxc release that has ever worked with Psi4. The Libxc3 series didn't have cmake. Early Libxc4 changed the interface so that some features we needed weren't accessible. Current Libxc4 master has those features, but they're not available in a release. When the questions of https://gitlab.com/libxc/libxc/issues/61 are resolved, https://github.com/psi4/psi4/pull/1101 is ready. > Libint: Similarly to Libxc, Libint has problems in its cmake build and it can't be used evaleev/libint#111 evaleev/libint#112. Thanks for pinging me on these. I don't watch that repo.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1302#issuecomment-433085737:1148,avail,available,1148,https://psicode.org,https://github.com/psi4/psi4/issues/1302#issuecomment-433085737,2,"['avail', 'ping']","['available', 'pinging']"
Availability,"> 3AA 4AX means that you have an alpha electron in orbital 3A, and an alpha and beta electron in orbital 4A. You could also write the three determinants as 2u00, u200, and u020 with u=spin-up, d=spin-down, 2=doubly occupied, 0=unoccupied. Since the active orbitals are numbered A2 A3 A4 A5, why not the three determinants as 2u00, 0u20, and 0u02? 3A up-electron not promoted anyhow.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/796#issuecomment-2426630487:200,down,down,200,https://psicode.org,https://github.com/psi4/psi4/issues/796#issuecomment-2426630487,1,['down'],['down']
Availability,"> ; > ; > @ TiborGY I would not know how to monitor the health of my SSD, so I cannot speak to that. I have a 16GB M1 Mac mini sitting on my desk using most of the cores 24/7, but all of the program memory requirements fit comfortably within 16GB, so little or no swap is being used. Edit: We are going off topic here, but I am going to answer because I think this could be useful information.; I am not just talking about swap here, a lot of quantum chemistry programs create temporary files that they intensely read and write to. Usually called ""conventional integrals"" or ""out-of-core"" algorithms for historical reasons. I once guesstimated the amount of writes running non-DF CCSD(T) generates to be around 1 to 5 TB per day on a fast 8-14 core machine. Not something that most SSDs can be expected to reliably handle for long.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2333#issuecomment-961542615:806,reliab,reliably,806,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-961542615,1,['reliab'],['reliably']
Availability,"> ; > ; > Just to make sure, you have also installed `ipykernel` into the environment, and added that kernel into your notebook spec using something like [this guide](https://medium.com/@nrk25693/how-to-add-your-conda-environment-to-your-jupyter-notebook-in-just-4-steps-abeab8b8d084), correct? And you're sure your jupyter is loading the correct kernel (i.e. the correct conda env)?. Thanks for your reply. I followed the instructions in your reference but it still doesnt work. Now I see the option to change the kernel in the Notebook to `p4env`, but when trying to import psi4 in that environment I get another error; `ImportError: DLL load failed while importing core`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2329#issuecomment-947965342:615,error,error,615,https://psicode.org,https://github.com/psi4/psi4/issues/2329#issuecomment-947965342,2,['error'],['error']
Availability,"> ; > ; > Perhaps a good idea. PSIO should mainly be disk issues IMO. And only memory issues if the C code made bad estimates, right? Unless there are there virtual files that are written to RAM.; > `PSIO_ERROR: 12 (error writing to file)` should in most cases be a disk space issue. Well, I have seen some systems where /tmp is a ramdisk. But usually, if that is the case, the maximum size of /tmp is quite limited.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1959#issuecomment-661793401:216,error,error,216,https://psicode.org,https://github.com/psi4/psi4/issues/1959#issuecomment-661793401,1,['error'],['error']
Availability,"> ; > ; > The PSIO error can occur for running out of RAM? Is it writing to a virtual file (for the lack of better term)?. On some systems, /tmp is a ramdisk by default, so if PSI4 is configured to use that as a scratch dir, the system can easily run out of memory.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1361#issuecomment-517414594:19,error,error,19,https://psicode.org,https://github.com/psi4/psi4/issues/1361#issuecomment-517414594,1,['error'],['error']
Availability,"> ; > ; > my 2 cents on this: The geometry you posted looks broken to me (too long 'bonds'). I'd guess the optimizer had some troubles displacing the geometry correctly. Often it is enough to set `opt_coordinates both`, which mixes cartesian and redundant coordinates. If the fault does lie in the bonds being stretched (the first two CC bonds start off at 1.52 ang, and end up at 1.65 ang, chemistry tells us single c-c bonds are around 1.54 ang), and the first scf round does converge(it does), then wouldn't the fault end up being with the gradient calculation, since I am assuming, this is what is used to make the coordinate adjustment? I am not sure how to counter this if that is the issue. Can I damp the geometry optimization step?. I am trying with the `opt_coordinates` mixed coordinates, as well as waiting on the `guess_persist` results.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2338#issuecomment-953185581:246,redundant,redundant,246,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-953185581,3,"['fault', 'redundant']","['fault', 'redundant']"
Availability,"> ; > But a trend of having `/tmp` as ramdisk questions PSI4's choice of default scratch directory, because ramdisk space does not take away the OS max ram, right? There could be unexpected memory allocation errors for users. I think the typical ramdisk implementation used for /tmp starts off using ~0 RAM. One can create as many 10 TB ramdisks as one desires, they only start allocating memory when they are written to, and I think the amount of RAM used by the ramdisk follows the amount of data currently stored on it.; IIRC the RAM consumed by such ramdisks appears as if some other regular application was using it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1965#issuecomment-661826679:208,error,errors,208,https://psicode.org,https://github.com/psi4/psi4/issues/1965#issuecomment-661826679,1,['error'],['errors']
Availability,"> > * sometimes the non-OO value (e.g., MP2, LCCD) is available as an early byproduct of the OO calc (e.g., OMP2, OLCCD). this wasn't the case with REMP, and some QCVariables that stored a purported non-OO REMP had to be removed.; > ; > MP2 should also be available from the guess. But it is of course better to not print/store something than to print something wrong. I might be mistaken, but given that `occ` does coupled DIIS for amplitudes and orbitals, the canonical LCCD enery should not be available from an OLCCD calculation (lccd is never iterated on canonical orbitals). The same holds for REMP2. So yes, if there are variables pretending to be canonical results from an orbital-optimized calculation, these should probably be removed. No problem, it was mostly my fault to put way too many changes into a single pull request based on an ancient master branch. This is completely correct. The lone OLCCD algorithm in `occ` does not compute LCCD with the input orbitals.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2653#issuecomment-1201136739:54,avail,available,54,https://psicode.org,https://github.com/psi4/psi4/pull/2653#issuecomment-1201136739,4,"['avail', 'fault']","['available', 'fault']"
Availability,"> > > Do you have all the patches installed?; > > ; > > ; > > Define patches; > ; > Sorry, should have clarified. https://www.mrcc.hu/index.php/download-mrcc/mrcc-binary-2/category/5-mrcc-patches. Wow, talking about a blast from the past.... haven't done this in over 20 years",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3159#issuecomment-2071556216:144,down,download-mrcc,144,https://psicode.org,https://github.com/psi4/psi4/issues/3159#issuecomment-2071556216,1,['down'],['download-mrcc']
Availability,"> > > I wrote and pushed my own commit implementing them (fixing the copy-paste error). See the latest commit. I don't see an issue here.; > ; > In the future, please use ""accept suggestion"". Not when I need to suggest a change to the suggestion.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2859#issuecomment-1404992356:80,error,error,80,https://psicode.org,https://github.com/psi4/psi4/pull/2859#issuecomment-1404992356,1,['error'],['error']
Availability,"> > > lgtm, thanks! Is there any atomic unit for specific rotation?; > > ; > > ; > > since specific rotation is normalized for path length and concentration in experimental settings, I'd say the use of deg/[dm (g/cm^3)] for specific rotation is even more ubiquitous than the use of NM for wavelength for dynamic properties. @lothian may have more to say on this topic.; > ; > Are we talking about storing the specific rotation or the G' tensor? I would think we'd want to store the latter in atomic units (along with the field energy, also in a.u.), and not store the specific rotation, which can quickly be computed from the tensor and the energy. The G' tensor is stored in atomic units (as it's reported in the output file), while the specific rotation itself is stored in deg/[dm (g/cm^3)] since it is only one additional float. For now, since the syntax is `CCxx xPROPERTYx @ xxNM`, it's a bit easier to use NM. But you're right that the field strength in a.u. should be available at the python level to an arbitrary number of digits. perhaps the `omega` dict passed in (as `psi4.set_options({""omega"":[x,x,unit]})`) is available on the wfn already?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2022#issuecomment-716600491:976,avail,available,976,https://psicode.org,https://github.com/psi4/psi4/pull/2022#issuecomment-716600491,2,['avail'],['available']
Availability,"> > >, true>, boost::python::detail::no_proxy_helper<std::__1::vector<boost::shared_ptr<psi::Matrix>, std::__1::allocator<boost::shared_ptr<psi::Matrix> > >, boost::python::detail::final_vector_derived_policies<std::__1::vector<boost::shared_ptr<psi::Matrix>, std::__1::allocator<boost::shared_ptr<psi::Matrix> > >, true>, boost::python::detail::container_element<std::__1::vector<boost::shared_ptr<psi::Matrix>, std::__1::allocator<boost::shared_ptr<psi::Matrix> > >, unsigned long, boost::python::detail::final_vector_derived_policies<std::__1::vector<boost::shared_ptr<psi::Matrix>, std::__1::allocator<boost::shared_ptr<psi::Matrix> > >, true> >, unsigned long>, boost::shared_ptr<psi::Matrix>, unsigned long>::base_get_slice_data(std::__1::vector<boost::shared_ptr<psi::Matrix>, std::__1::allocator<boost::shared_ptr<psi::Matrix> > >&, PySliceObject*, unsigned long&, unsigned long&) in export_mints.cc.o; boost::python::handle_exception_impl(boost::function0<void>) in libboost_python-1_57.a(errors.o); ""_PyExc_OverflowError"", referenced from:; boost::python::handle_exception_impl(boost::function0<void>) in libboost_python-1_57.a(errors.o); boost::python::converter::(anonymous namespace)::unsigned_int_rvalue_from_python<unsigned long>::extract(_object*) in libboost_python-1_57.a(builtin_converters.o); boost::python::converter::(anonymous namespace)::unsigned_int_rvalue_from_python<unsigned int>::extract(_object*) in libboost_python-1_57.a(builtin_converters.o); boost::python::converter::(anonymous namespace)::unsigned_int_rvalue_from_python<unsigned short>::extract(_object*) in libboost_python-1_57.a(builtin_converters.o); boost::python::converter::(anonymous namespace)::unsigned_int_rvalue_from_python<unsigned char>::extract(_object*) in libboost_python-1_57.a(builtin_converters.o); ""_PyExc_ReferenceError"", referenced from:; boost::python::converter::(anonymous namespace)::lvalue_result_from_python(_object*, boost::python::converter::registration const&, char const*) in libbo",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/164#issuecomment-131149225:22674,error,errors,22674,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131149225,2,['error'],['errors']
Availability,"> > Do you have all the patches installed?; > ; > Define patches. Sorry, should have clarified.; https://www.mrcc.hu/index.php/download-mrcc/mrcc-binary-2/category/5-mrcc-patches",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3159#issuecomment-2070626117:127,down,download-mrcc,127,https://psicode.org,https://github.com/psi4/psi4/issues/3159#issuecomment-2070626117,1,['down'],['download-mrcc']
Availability,"> > Hopefully psi4 will hit conda forge soon; > ; > Agreed. There's some conflicting dependency issues to work out beforehand. More specifically, #2537 is the next step, AFAIK. We'd love to work on this, but a few other things (SCF cleanup and a new feature, double-checking ECPs, and overdue maintenance of `dfocc`) are higher priority for Lori and I.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2621#issuecomment-1165034257:293,mainten,maintenance,293,https://psicode.org,https://github.com/psi4/psi4/issues/2621#issuecomment-1165034257,1,['mainten'],['maintenance']
Availability,"> > I agree with your points. However, making that change would require a refactor of `DirectJK` (which zero out the J/K matrices at the beginning of every iteration) as well, as well as an overhaul of the previous `INCFOCK` code that exists in the Psi4 code. For the sake of PR brevity, I suggest punting those changes down to a future PR.; > ; > Is this a future PR you'll commit to doing, or a future PR you'll leave to somebody else?. I will commit to doing it. I will likely open it up within the next few days.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2682#issuecomment-1231718373:320,down,down,320,https://psicode.org,https://github.com/psi4/psi4/pull/2682#issuecomment-1231718373,1,['down'],['down']
Availability,"> > I don't reproduce a failure of tests/pytests/test_standard_suite.py::test_mp2_hessian_module on master. I don't have enough details to say more.; > ; > This test would need a recent qcel/qcng pair to pass. Andy's trying to update his. I'd be surprised if this PR is implicated.; > ; > @andyj10224, if you rebase as of this morning, the clang CI lane will work again. @loriab @JonathonMisiewicz I updated my qcel/qcng, and the mp2 hessian tests now pass. Now I just need to compile the docs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-946829083:24,failure,failure,24,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-946829083,1,['failure'],['failure']
Availability,"> > I wrote and pushed my own commit implementing them (fixing the copy-paste error). See the latest commit. I don't see an issue here. In the future, please use ""accept suggestion"".",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2859#issuecomment-1404913573:78,error,error,78,https://psicode.org,https://github.com/psi4/psi4/pull/2859#issuecomment-1404913573,1,['error'],['error']
Availability,"> > I'm slightly confused. So COSX and Direct have different ""versions"" of incremental Fock build, and this PR has them use the same incremental Fock code?; > ; > Yes this is correct. Yeah, what Andy said is correct. I've been doing some benchmarking of different J build methods with the COSX method. When doing benchmarks on the DFJCOSK code currently present in Psi4, it often to take a notably higher number of iterations then expected to converge many of the calculations, especially when diffuse functions are in the basis set. After modifying the COSX code to use the ""Direct"" version of Incfock, the number of SCF iterations needs to converge goes down noticeably. It was in these timing benchmarks that we found the different Incfock implementation in COSX, and this PR is meant to remedy that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2682#issuecomment-1219772523:656,down,down,656,https://psicode.org,https://github.com/psi4/psi4/pull/2682#issuecomment-1219772523,1,['down'],['down']
Availability,"> > The dfocc module is nice but pretty memory hungry. With systems that carry more than ~1300 basis functions i ran into problems i haven't been able to resolve yet. > What problems? I can imagine memory issues because of DFOCC::b_so. Exactly. As far as i tracked down the crashes, the program dies while computing the three-index integrals. It computes them all at once and stores them in memory. Probably, these need to be batched.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2354#issuecomment-971481116:265,down,down,265,https://psicode.org,https://github.com/psi4/psi4/pull/2354#issuecomment-971481116,1,['down'],['down']
Availability,"> > Yeah, it's perfectly fine to split things up into multiple PRs. One sensible order I can come up with is:; > ; > > ; > ; > > 1. Edit the incremental Fock in the derived `DirectJK` class so that it is efficient and maintainable (no SCF iteration counts associated with the object, minimal number of matrices cached on the object, etc.) [some other PR]; > ; > > 2. Move this improved incremental Fock to the parent `JK` class. [this PR]; > ; > > ; > ; > > In a previous comment, I suggested doing away with the cached `J`/`K`/`wK`/`dJ`/`dK`/`dwK` matrices by changing the behavior of the `JK` object so that the buffers aren't cleared between SCF iterations. If you find that difficult to do, I think an acceptable compromise would be to retain those cached matrices, but initialize them in the SCF driver (rather than make them a property of the JK object).; > ; > ; > ; > Since this PR is already opened, I would actually prefer 2 before 1. I am slammed with my schedule right now, and I think 2 before 1 would be WAYYY easier for me. Is that okay with you @zachglick @JonathonMisiewicz? This PR also immediately fixes the `incfock` issues with `DFJCOSK`, as opposed to punting those fixes down to a future PR. I could also do both 1 and 2 in this PR, if that makes things easier. Which do y'all prefer (2 then 1, or 1 and 2) @zachglick @JonathonMisiewicz ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2682#issuecomment-1253891035:1194,down,down,1194,https://psicode.org,https://github.com/psi4/psi4/pull/2682#issuecomment-1253891035,2,['down'],['down']
Availability,"> @JonathonMisiewicz I think I did it right -- I added `MBIS VALENCE CHARGES` (`MBIS VALENCE WIDTHS` was already present) to the glossary and got things pulled in. Does this lgty now?. It should be. We need one other reviewer, and then to troubleshoot the failing test... The failure is unrelated to this PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3226#issuecomment-2457645305:276,failure,failure,276,https://psicode.org,https://github.com/psi4/psi4/pull/3226#issuecomment-2457645305,1,['failure'],['failure']
Availability,"> @JonathonMisiewicz To reference the treating the D separately, we are calculating the change in the density matrix, or delta D if we are not in the first iteration, the delta J, K, and wKs are added to the J and K in the post-iteration step. That way, incremental Fock build is available for all JK types. Basically knowledge of the iteration is needed so we know when to set up the delta D matrices. (It is also needed for my future CFMM and linK PRs, where we do NOT want to run linK or CFMM on the SAD guess). Okay, so why do you need to know the _iteration number_? It sounds like you just need to know whether you're on the first iteration or not, which is inherently a boolean. I'd be less opposed to that, but I'd need to look over the code again to see whether I'm in favor of it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-937754025:280,avail,available,280,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-937754025,1,['avail'],['available']
Availability,"> @davpoolechem, tests/python/3-index-transforms/input.py isn't running correctly. Do you happen to understand how to edit it while still preserving the intent of the test?; > ; > ```; > Fatal Error: SCF_SUBTYPE=INCORE was specified, but there is not enough memory to do in-core! Increase the amount of memory allocated to Psi4 or allow for out-of-core to be used.; > ```. After some quick tinkering, I was fix the issue by adding the line. `psi4.set_options({ ""scf_subtype"": ""auto"" })`. under the definition of `mol`. Setting `SCF_SUBTYPE` explicitly like this circumvents the switch to the `INCORE` MemDF algorithm in the DFHelper constructor that is causing the exception. . Cross-checking against the test output from another Psi4 build leads to basically no difference in the output files, specifically in MemDF header printout, so I believe the intent of the test is also preserved (i.e., there are no alterations into what configurations of MemDF are tested).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3131#issuecomment-1936037904:193,Error,Error,193,https://psicode.org,https://github.com/psi4/psi4/pull/3131#issuecomment-1936037904,1,['Error'],['Error']
Availability,> @hokru Would you have time for a Psi4NumPy implementation?. I cannot promise anything but I write it down as a potential project.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1669#issuecomment-503910522:103,down,down,103,https://psicode.org,https://github.com/psi4/psi4/issues/1669#issuecomment-503910522,1,['down'],['down']
Availability,"> A couple thoughts before a more thorough review:; > ; > Can you add some test cases to verify that this doesn't change the SCF energy? That set of test molecules from yesterday would be good, plus a few larger molecules; > ; > Could you do some timing to verify that this does in fact speed the SCF code up? A comparison of system size, density threshold, timing, and energy error would be good.; > ; > It appears that you're calculating integrals within the master loop and doing redundant work, possibly more than the original algorithm. I think you want to calculate all (NM|NM) shells outside of the loop and use those integrals within the loop. I will run a variety of tests and include that as a Google Sheets link. And your point about redundancy is good. I will get that fixed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2062#issuecomment-743354001:377,error,error,377,https://psicode.org,https://github.com/psi4/psi4/pull/2062#issuecomment-743354001,2,"['error', 'redundant']","['error', 'redundant']"
Availability,"> A general advice after an PSIO error of sth like: 'check your scratch directory location and how much space you got', could go a long way. Certainly. Having `PSI_SCRATCH=/tmp` can either cause the system run out of memory, or out of ""disk space"" on `/tmp` which is at most the size of RAM, if tmpfs is used. Perhaps even printing the scratch dir location in the error message would help.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1965#issuecomment-724408535:33,error,error,33,https://psicode.org,https://github.com/psi4/psi4/issues/1965#issuecomment-724408535,2,['error'],['error']
Availability,"> After coding this all up, I'm inclined to remove the last access call. I'd definitely retain the access call with the symmetry of the transition. How about `TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY - A2 TRANSITION` to make the distinction to the ""legacy"" version more clear?. Even though `adcc` does not support point group symmetry, ping @mfherbst for another opinion on excited states 😄",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2462#issuecomment-1060884379:336,ping,ping,336,https://psicode.org,https://github.com/psi4/psi4/pull/2462#issuecomment-1060884379,2,['ping'],['ping']
Availability,"> All relevant error information should end up in the error box, not just `stderr`. OK. Would the inverse be acceptable? ie. nothing going to `stderr`, only to the error box",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2700#issuecomment-1236139536:15,error,error,15,https://psicode.org,https://github.com/psi4/psi4/pull/2700#issuecomment-1236139536,3,['error'],['error']
Availability,"> Already known and fixed in the developer version of Psi. We're planning to release a v1.3.2 with the fix soon, though I don't have an estimate of when ""soon"" is. In the meantime, you can either downgrade NumPy, as mentioned, or use the developer version. Precise instructions on how to use the developer version depend on how you installed Psi in the first place. OK",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1610#issuecomment-487277664:196,down,downgrade,196,https://psicode.org,https://github.com/psi4/psi4/issues/1610#issuecomment-487277664,1,['down'],['downgrade']
Availability,"> Also, how have you verified correctness? While I'm not familiar with these methods, ""can induce an energy difference of over 2 _hartrees_ even at conservative cutoffs"" does not seem safe. I have extensively verified the correctness of this approach, across many different molecules, basis sets, etc. I have never observed an error of ""2 Hartrees"". The worst I have ever observed is on the order of 1.0e-5 Hartrees, better than density fitting. Here is a link to my ""benzene case study"". https://docs.google.com/spreadsheets/d/1HDMZ5PV6GhnK4i68Y1t86VhauTwqMP_X2kII21GCsiY/edit?usp=sharing. I empirically discovered that the best screening threshold given an energy convergence of 1.0e-n is 1.0e-(n+3) for non-augmented basis sets and 1.0e-(n+5) for augmented basis sets. For example, for an e_convergence of 1.0e-8 in cc-pVTZ, the ideal threshold is 1.0e-11, while it is 1.0e-13 in aug-cc-pVTZ.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-821189029:327,error,error,327,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-821189029,1,['error'],['error']
Availability,"> Also, would using the (smaller) default grid, i.e. `dft_spherical_points 302` (instead of 434) and `dft_radial_points 75` (instead of 85) improve the convergence?. No, this will only worsen the convergence by introducing more numerical error.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2016#issuecomment-704952817:238,error,error,238,https://psicode.org,https://github.com/psi4/psi4/issues/2016#issuecomment-704952817,1,['error'],['error']
Availability,> Any error message on the crash?. No.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/923#issuecomment-368940098:6,error,error,6,https://psicode.org,https://github.com/psi4/psi4/issues/923#issuecomment-368940098,1,['error'],['error']
Availability,"> Are there particular packages you'd need besides required, optimization, and dispersion?. No, so far, I am just exploring a few ideas/experiments (using qcengine mostly) and only require `psi4`. I can get `psi4` running, but integration with other internal packages is very challenging (if not impossible) without a binary-compatible c-f package. > Many of the deps are compiled or psi is using a slight fork or need windows work. do you have specialties? :-). I can only develop a package on my Linux machine. No problem to also build on the CI for osx/windows, but debugging is much harder on those platforms. I have experience building CMake based C/C++ packages on c-f (as long as it does not require diving too deep in the C/C++ code). > Roughly, my plan is to start compiling psi4 locally with c-f conditions and the very basic deps and post them to a psi4/label/cf channel. Libint2 must still pull from psi4 channel for the forseeable future. Glad to talk strategy, esp. after 12 Dec. Beside libint2, it looks like you are quite close here. I don't know if you are aware of it but you can easily run a c-f build (almost identical to the ones on the CI) using the `build_locally.py` script. See https://conda-forge.org/docs/maintainer/updating_pkgs.html#testing-changes-locally for the details. That script is available in the feedstock repo but also in the `staged-recipes` repo for package that does not yet exist.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2621#issuecomment-1337307605:1318,avail,available,1318,https://psicode.org,https://github.com/psi4/psi4/issues/2621#issuecomment-1337307605,1,['avail'],['available']
Availability,"> Before we merge, just wanting to confirm if the right conda install libint2 -c psi4/label/dev is available?. I hope so -- they should be: https://anaconda.org/psi4/libint2/files",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1721#issuecomment-730250341:99,avail,available,99,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-730250341,1,['avail'],['available']
Availability,"> CI failure seems to be unrelated error in compiling Psi4? The docs do build successfully on my machine. The docs CI seems to be flaky at the moment, no idea why",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3123#issuecomment-1899214338:5,failure,failure,5,https://psicode.org,https://github.com/psi4/psi4/pull/3123#issuecomment-1899214338,2,"['error', 'failure']","['error', 'failure']"
Availability,"> Can you provide a before-and-after example of what error messages look like?. Hmm, yes I reckon if I ran something with a ~50 MB ramdisk as the scratch drive, that should be a reliable way to trigger a write failure. My immediate-term schedule just got a lot busier, so I might not get around to doing this for a week or so.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2756#issuecomment-1291906441:53,error,error,53,https://psicode.org,https://github.com/psi4/psi4/pull/2756#issuecomment-1291906441,3,"['error', 'failure', 'reliab']","['error', 'failure', 'reliable']"
Availability,"> Cool! Just as a remark: I suggest to default to adcc in procrouting as well for ADC(2) in case it is available. Right now the default is still the builtin. I'm in favor, but this sounds like the sort of thing other developers may object to, so I'll defer to popular opinion before deciding to adopt or not.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2419#issuecomment-1029167139:103,avail,available,103,https://psicode.org,https://github.com/psi4/psi4/pull/2419#issuecomment-1029167139,1,['avail'],['available']
Availability,"> Could isapt2 vs fsapt2 be the confusion?. I think it is not because of this reason. I check the input file for isapt and faspt,respectively. The calculation I want to do is F-SAPT. But it reported error. But the example you test is I-SAPT. So I also tested the I-SAPT example but also got such error.; This error may all caused by this code:; ```val = np.einsum('i,ij,j', valueA, value, valueB)```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2281#issuecomment-902428685:199,error,error,199,https://psicode.org,https://github.com/psi4/psi4/issues/2281#issuecomment-902428685,3,['error'],['error']
Availability,"> Could you elaborate on why tests are failing at all, and what numbers are differing? Are these Cartesian coordinates?. I poorly worded my explanation. I was attempting to say that the geometries are virtually the same but not numerically, they are both well converged. I assumed the discrepancy was just a numeric difference and there have been various tweaks as well over the last few years to the algorithm. There is 1 algorithmic difference I'd be concerned about, from looking at the two outputs. New optking doesn't consider the most recent step in the hessian updating procedure - cpp-optking did. I've found three pieces of logic that explicitly or implicitly prevent updating with the most recent step in all or specific cases. I'd have to ask @psi-rking if this is a bug or was changed due to some stability concern. > Is .log where all the optking detailed output goes now? I guess we ought to start collecting them. output.log, perhaps. But this can also be deferred to a grand regenerate-the-refs script and PR. Yes optking's detailed output goes to `.log` but it isn't strictly speaking necessary for the user to see the detailed logs I would say. However, if the test is failing it might be nice to have a more detailed optimization record to compare against if the optimizer is at fault.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727#issuecomment-1262591435:1298,fault,fault,1298,https://psicode.org,https://github.com/psi4/psi4/pull/2727#issuecomment-1262591435,1,['fault'],['fault']
Availability,"> Could you post the whole test output please?; > ; > And do you have the `dftd3` binary available at run time?. Yep, it was a dftd3 issue. Rerunning tests now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2385#issuecomment-997262981:89,avail,available,89,https://psicode.org,https://github.com/psi4/psi4/pull/2385#issuecomment-997262981,1,['avail'],['available']
Availability,"> Do you have SCF iterations before the crash?. No. It crashes setting everything up. And yes, the error is not reliably found in one place.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1366#issuecomment-443205607:99,error,error,99,https://psicode.org,https://github.com/psi4/psi4/issues/1366#issuecomment-443205607,2,"['error', 'reliab']","['error', 'reliably']"
Availability,"> Downgrade numpy to 1.16.2 may work. Thanks tzyii. . I have noticed that error information and downgrade the numpy, all are ok now. This just a report that PSI4 is incompatible with numpy >= 1.16.3?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1611#issuecomment-487277350:2,Down,Downgrade,2,https://psicode.org,https://github.com/psi4/psi4/issues/1611#issuecomment-487277350,3,"['Down', 'down', 'error']","['Downgrade', 'downgrade', 'error']"
Availability,"> Following up on an issue from the conference call:; > The fixed `phi_ao` functions are used to form the core Hamiltonian whenever an embedding potential is read from a file. While I haven't run anything, I would expect the bug fixed by this PR to cause correctness errors in SCF energies. Definitely agree with getting this fix in for 1.4. Hi Jonathon,. As requested, I cleaned up the code by removing the helper functions, as well as added a new test case (C test phi-ao).; I think having phi_ao as a python function will be useful to Psi developers and users, as it would be immensely helpful for the development of grid-based approaches. Thank you,; Andy",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2210#issuecomment-877678443:267,error,errors,267,https://psicode.org,https://github.com/psi4/psi4/pull/2210#issuecomment-877678443,1,['error'],['errors']
Availability,"> From the little I know about FreeBSD, I'm guessing that it's not fitting into either the Mac or Linux channels that our build system expects. . It's somewhere in between. Good news is that besides this error, it finished building fine. Previously reported by me errors are only in 1.1.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/853#issuecomment-343702979:204,error,error,204,https://psicode.org,https://github.com/psi4/psi4/issues/853#issuecomment-343702979,2,['error'],"['error', 'errors']"
Availability,"> Great change. However, I would propose eliminating the old print statements, since the same information is in the error message. I have considered doing that, but I am not entirely comfortable with it because `throw PSIEXCEPTION` is not perfectly reliable when it comes to delivering the error message to the user. For example see https://github.com/psi4/psi4/pull/2997. Until a reliable solution is found for the error messages getting swallowed up on some platforms, I am reluctant to remove the traditional error messages. But in principle I agree completely.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3117#issuecomment-1876910092:116,error,error,116,https://psicode.org,https://github.com/psi4/psi4/pull/3117#issuecomment-1876910092,6,"['error', 'reliab']","['error', 'reliable']"
Availability,"> Here's a quick-and-dirty review before I go silent for a while over the Thanksgiving holidays.; > ; > There is a _lot_ of code duplication in this file. How much of this can we consolidate? I can figure out where one builder function differs from another, but it takes much more effort than I'm comfortable with. I understand if this is essential for speed purposes, but the current arrangement is error-prone. Good point. I will try to see if I can consolidate any repeats, perhaps `build_JK(ints, D, J, K, do_J, do_K)`?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-976006166:400,error,error-prone,400,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-976006166,1,['error'],['error-prone']
Availability,"> Hi, did you get a chance to look at this further? So long as as big problems aren't uncovered in last week's rc3, we'd like to do the 1.4 release including the new databases this week. I think the items in [#2154 (comment)](https://github.com/psi4/psi4/pull/2154#issuecomment-870728272) were pretty small. Let me know if you need advice for the rebase. I need to run, some tests, if the database after the changes is still fine since I didn't manage to put up automated tests, yet.; Running, whole test set might add significant overhead to the already time-consuming test suite. Are there any recommendations on `pytest.mark` to qualify it for the `heaviest` league?; I imagine, running some small-basis SAPT0 for mb case, and UMP2 for CP/un-CP one. > remove no_com, etc. if not really; - [x] done . > clarify in docstrings whether 1.9 is R_eq or AA; - [x] done, I think. See the latest changes `R=0.9R_eq`. > allow uncp in ACTV rather than hardcoding both it and ACTV_CP to cp, unless there's a good reason not to; - [x] done, TBH I've worked exclusively with mid-bond version with CP, I don't know if unCP with mid-bonds makes even sense. Need someone with `unCP` experience to comment on that. > I don't recall why CI/Azure was failing on your last commit, but there were certainly points where it was psi4 master's fault, so you may need to rebase.; - [x] rebased. as for DRYifing two files, I don't think it's desired to couple these two files, as they should be in-principle, runnable standalone.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2154#issuecomment-878539595:1322,fault,fault,1322,https://psicode.org,https://github.com/psi4/psi4/pull/2154#issuecomment-878539595,1,['fault'],['fault']
Availability,"> Hm, is there a requirement on the ordering used in Libint2? This may complicate packaging... Yes, there's ordering requirements at two different levels. The cartgauss_ordering has to be chosen at code-generation time, but fortunately psi4 uses `standard`. The spgauss_ordering can be selected at code-compile time, and here psi4 uses `gaussian` (not default). So for binary distribution, yes, there's going to be packaging complications. I've translated both stages of libint2 build to cmake and added in `find_package(..., COMPONENTS ...)` selectors https://github.com/evaleev/libint/pull/148/files#diff-4cfbbb105ca3b371b7251a6e37a56f74R41 so that downstream programs can avoid detecting unsuitable installations. Of course that doesn't help non-cmake downstreams much ...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1721#issuecomment-685960414:651,down,downstream,651,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-685960414,2,['down'],"['downstream', 'downstreams']"
Availability,"> I agree with your points. However, making that change would require a refactor of `DirectJK` (which zero out the J/K matrices at the beginning of every iteration) as well, as well as an overhaul of the previous `INCFOCK` code that exists in the Psi4 code. For the sake of PR brevity, I suggest punting those changes down to a future PR. Is this a future PR you'll commit to doing, or a future PR you'll leave to somebody else?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2682#issuecomment-1231694428:318,down,down,318,https://psicode.org,https://github.com/psi4/psi4/pull/2682#issuecomment-1231694428,1,['down'],['down']
Availability,"> I can try to reproduce the error on my systems, but I wonder if the behavior would change if you asked for less memory – say 4GB?. No change in behavior with 4GB, same crash.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2261#issuecomment-1246607163:29,error,error,29,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1246607163,1,['error'],['error']
Availability,"> I didn't examine the code in detail; does it use aliasing? I think Neese and coworkers use it a lot, the idea is to make the integrand smoother so that the quadrature errors are smaller and one can get away with smaller grids. Yes, this PR uses aliasing (also called ""overlap fitting""). This feature is enabled with the `COSX_OVERLAP_FITTING` keyword. The second reference added to the bibliography covers the theory behind this idea, and the code references equations from this paper.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2567#issuecomment-1120084494:169,error,errors,169,https://psicode.org,https://github.com/psi4/psi4/pull/2567#issuecomment-1120084494,1,['error'],['errors']
Availability,> I don't know how you can check the fingerprint for a repo. Probably not for github. Github downloads are fundamentally insecure as implemented by cmake. Documentation says that hash can be set for URL downloads though.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/854#issuecomment-344327124:93,down,downloads,93,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-344327124,2,['down'],['downloads']
Availability,"> I don't like the idea of removing these functions. Some of us in Francesco's group use `swap_columns` to move orbitals in the C matrix. Thanks, I have no intention of causing downstream pain by axing it if it is actually being used.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2909#issuecomment-1483209663:177,down,downstream,177,https://psicode.org,https://github.com/psi4/psi4/pull/2909#issuecomment-1483209663,1,['down'],['downstream']
Availability,"> I don't quite understand what the numbers in brackets mean; > * 1 -0.972087 ( 0, 0) 2AX 3AA.; > * 2 -0.165902 ( 2, 2) 3AA 4AX.; > * 3 -0.165902 ( 4, 3) 3AA 5AX.; > I'm also not sure that 3AA 4AX means 1-st up active space electron in 3-rd orbital, 2-nd up electron on 4-th orbital, 1-st down electron on 4-th orbital. This would explain the sign of the determinant, since in ORCA order is reversed. 3AA 4AX means that you have an alpha electron in orbital 3A, and an alpha and beta electron in orbital 4A. You could also write the three determinants as 2u00, u200, and u020 with u=spin-up, d=spin-down, 2=doubly occupied, 0=unoccupied. I think the difference may just be in the ordering of the different spin blocks: are the creation/annihilation operators acting on the HF determinant first by orbital, then by spin, or first by spin, and then by orbital.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/796#issuecomment-804983924:289,down,down,289,https://psicode.org,https://github.com/psi4/psi4/issues/796#issuecomment-804983924,2,['down'],['down']
Availability,"> I don't reproduce a failure of tests/pytests/test_standard_suite.py::test_mp2_hessian_module on master. I don't have enough details to say more. This test would need a recent qcel/qcng pair to pass. Andy's trying to update his. I'd be surprised if this PR is implicated. @andyj10224, if you rebase as of this morning, the clang CI lane will work again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-946767530:22,failure,failure,22,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-946767530,1,['failure'],['failure']
Availability,"> I finished about half of the review and then got confused about the ""big picture."" If you're only intending to support point charges, then what happens if a user passes in an external potential object with basis functions attached? I can't find a place in this code that limits the kind of external potentials that can be considered. And why are there lines of code to get and append basis functions from/to the external potential? If you don't intend to support basis function external potentials (and it isn't clear to me if you intend to or not), then there should be a user-friendly error message when a user tries this. And on the topic, what is the technical barrier to including basis function external potentials? Is there a reason why those are being excluded from this PR, if they are?; > ; > I'll need to re-review once changes are made, and this issue of basis function external potentials is clarified. Please see the updated description above. I removes unnecessary code to make this PR specifically for point charges.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2131#issuecomment-800707855:589,error,error,589,https://psicode.org,https://github.com/psi4/psi4/pull/2131#issuecomment-800707855,2,['error'],['error']
Availability,"> I finished the `lmp2_iterations` function, and I have a much better feel for how the code works now.; > ; > Zach, do you want me to keep going, or do you want to respond to what I've already flooded you with? I'd rather wait for you to catch up, to avoid having many comment chains at once. Thanks for the super thorough review. You've given me plenty to work through if you want to turn your attention to other things for a bit. I can ping you once I've responded to everything.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2093#issuecomment-908779460:438,ping,ping,438,https://psicode.org,https://github.com/psi4/psi4/pull/2093#issuecomment-908779460,1,['ping'],['ping']
Availability,"> I got the static_assert error again now. The file it's triggering on hasn't had recent changes, so I don't know why it's popping up now, unless it's an intermittant/brownout strategy to push upgrades. Anyways, switching the llvm version https://github.com/psi4/psi4/pull/2791/files#diff-9f5f8e4d87a7d1fbb0e8f30d1c680c5f42f6af10c04aa81d342c7dfa5af9a99fR10 at least gets the build started. Hmmmm, I see. Thank you for looking into this! I just rebased and pushed again, so we will see if that helps.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2808#issuecomment-1333851983:26,error,error,26,https://psicode.org,https://github.com/psi4/psi4/pull/2808#issuecomment-1333851983,1,['error'],['error']
Availability,"> I have realised that I couldn't find any assertion rewriting handler for pytest. Can you check that a failing test executed with pytest prints a reasonable AssertionError? I'd have thought you'd have to add the compare_* functions into pytest's assertion database using pytest.register_assert_rewrite(""""). Thanks for this, @PeterKraus. It cleared up a minor mystery about why the assertions in `standard_suite_runner.py` were behaving differently. I've played around with registering the files, and the pytest introspection printing works, but it isn't particularly better than what currently exists. I think the reason is that the psi compare_* functions write out their own, more informative, error messages. Glad to reconsider if I'm missing something. I think I've addressed your other suggestions. thanks for the review!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454#issuecomment-1078692585:697,error,error,697,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078692585,2,['error'],['error']
Availability,"> I honestly don't recognize what you're trying to contribute. Are you proposing a course of action? Are you listing potentially relevant considerations for a more robust solution? Are you trying to say that ""algorithms that are both more robust and harder to implement exist""?. I was trying to bounce some ideas off the community, in the hope that it would ultimately lead to a better solution. To some extent that included all three of the above. I am sorry if that was frustrating, will try to clarify. In my first post:; 1. I proposed an alternative algorithm, which I guess is a course of action.; 2. I highlighted two potential problems with my alternative algorithm.; 3. I suggested that looking for existing algorithms in the literature may lead to something better than any of the proposals here, mine included. In my second post:; 1. I interpreted your response as ""SCF instability literature is unlikely to have anything better"". So I tried to clarify that I meant that the broader literature might contain useful ideas, not just SCF instability literature, but also the geometry optimization literature and possibly even the machine learning literature.; 2. I suggested a particular paper and algorithm, which claims to be able to minimize functions effectively, while avoiding saddle points. This is the ""both more robust and harder to implement"" part. The idea that I should have explicitly written out, is that if it could be implemented as an SOSCF method, it may greatly reduce the chances of getting an unstable solution in the first place, which would make having smart SCF instability following less important.; 3. I was trying to explain what thought process has lead me to believe that using the predicted/actual SCF energy may be a good idea for checking the quality of the Taylor expansion. I hope no offense was caused.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3045#issuecomment-1707160470:164,robust,robust,164,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1707160470,6,['robust'],['robust']
Availability,"> I may be not quite following the INSIST_FIND_PACKAGE reasoning. ENABLE_PkgName=ON/OFF turns it off completely. And I would like to control bundling. I want cmake to fail when external package isn't found. I am trying to create the FreeBSD port for psi4. Package build infrastructure is all automated, and is very rigorous. So if the package is chosen to be installed externally, there is no reason to even try to download it from github. It's besides the point here, but such downloads are also a security risk, because you don't check the downloaded file's fingerprints.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/854#issuecomment-343778164:415,down,download,415,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-343778164,3,['down'],"['download', 'downloaded', 'downloads']"
Availability,"> I modified the error message from being about ""core electrons"" to just ""electrons."" . Ah, copy-paste error. You didn't accept the suggestions tho",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2859#issuecomment-1399445500:17,error,error,17,https://psicode.org,https://github.com/psi4/psi4/pull/2859#issuecomment-1399445500,2,['error'],['error']
Availability,"> I removed the MEMORY option from the ADC section, but now some tests using fnocc are failing, because apparently, the option was only provided by the ADC part in read_options.cc... What should I do about this? adcc does not take any input on available memory, so where should the MEMORY option live from now on?. My best guess at why fnocc is using MEMORY is so that it can get more memory under default conditions (1gb instead of 0.5gb). Better handling would probably be to have a `FNOCC_TRIPLES_FACTOR` to manipulate input memory. I think comment out those `MEMORY` blocks in triples and lowmemory_triples, and we'll put up an issue. Those aren't running by default, and fnocc doesn't own MEMORY (as you discovered).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2737#issuecomment-1270159393:244,avail,available,244,https://psicode.org,https://github.com/psi4/psi4/pull/2737#issuecomment-1270159393,1,['avail'],['available']
Availability,"> I simplified the omega setter interface for the `HJS_PBE` https://github.com/psi4/psi4/pull/1101/files#diff-375f534fffdbfb11f5ae38dace0c3ab71230ea1f9eed95df51d21fdfd2589e4aL218-R221 and that fixed custom and smoke. Is that what you had in mind with ""named parameter setter"", @susilehtola?. No. Use `void xc_func_set_ext_params_name(xc_func_type *p, const char *name, double par);` i.e.; ```; xc_func_set_ext_params_name(func, ""_omega"", value_of_omega);; ```; > Now only the ft97 is a problem among ctests. pytests were clean before, but I'll check again. I've never seen anyone use that functional. It looks like it uses `GGA_X_FT97_B` and `GGA_C_FT97`. The latter appears to misbehave, https://gitlab.com/libxc/libxc/-/issues/275. > Are any of these now available in v5.1 that I should be activating?; > ; > ```; > SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: B3TLAP not in Psi4.; > SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: BP86VWN not in Psi4.; > SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: LDA0 not in Psi4.; > SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: CAM-LDA0 not in Psi4. LDA0 and CAM-LDA0 are introduced in the upcoming 5.1.0. . I can probably also add P86VWN; it's a trivial modification. https://gitlab.com/libxc/libxc/-/issues/277. > SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: LRC-BOP not in Psi4.; > SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: PBEsol not in Psi4. PBEsol has been in libxc for ages, since version 2.1.0 released in March 2014. I've opened up a ticket on LRC-BOP (https://gitlab.com/libxc/libxc/-/issues/276); it might not make it to the next release. > SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: t-HCTH not in Psi4.; > SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: t-HCTHh not in Psi4. These have also been in libxc for ages, since version 4.0.0 in 2017. `MGGA_X_TAU_HCTH`+`MGGA_C_TAU_HCTH` and `HYB_MGGA_X_TAU_HCTH`+`MGGA_C_HYB_TAU_HCTH`. > SKIPPED [1] ../tests/p",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-755266459:757,avail,available,757,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-755266459,2,['avail'],['available']
Availability,"> I think that requiring pairs of (Alpha, Beta) is the right interface. Another (more clean and less error-prone) option would be to only allow for custom operators in the AO basis...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2266#issuecomment-966518168:101,error,error-prone,101,https://psicode.org,https://github.com/psi4/psi4/pull/2266#issuecomment-966518168,1,['error'],['error-prone']
Availability,"> I think the problem is the MOs appearing in the output file in addition to the FCHK file. Should be an easy one to track down, I hope. Whoops, that's right..",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1272#issuecomment-426249740:123,down,down,123,https://psicode.org,https://github.com/psi4/psi4/issues/1272#issuecomment-426249740,1,['down'],['down']
Availability,"> I think this is again in a good shape and also writes now the correct orbital coeff/energies in the FCHK sense, meaning SCF ones.; > Please check the updated main post. What do you mean? If you run OO-CC, does the checkpoint file contain the original HF orbitals, or the OO-CC orbitals?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1884#issuecomment-670512939:216,checkpoint,checkpoint,216,https://psicode.org,https://github.com/psi4/psi4/pull/1884#issuecomment-670512939,1,['checkpoint'],['checkpoint']
Availability,"> I wish there was a way to cut down the repetition in variable description, but from the user standpoint, that probably is the way to go... In another project, I have the glossary-like doc generated by python to cut down on that. Perhaps someday ...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2569#issuecomment-1129513001:32,down,down,32,https://psicode.org,https://github.com/psi4/psi4/pull/2569#issuecomment-1129513001,2,['down'],['down']
Availability,"> I would prefer to use `do_LinK` as user facing option over a general `do_linear_exchange`. LinK is not the only available linear scaling exchange implementation in the literature.; > ; > Also please let the user know that LinK is active. At least I didn't see it in the test output files. I added just added the LinK flag in the output files. I also added a personal message in case someone has questions about this code in the future, they know who to bug :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-977380293:114,avail,available,114,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-977380293,1,['avail'],['available']
Availability,> I wrote and pushed my own commit implementing them (fixing the copy-paste error). See the latest commit. I don't see an issue here. @susilehtola,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2859#issuecomment-1403785234:76,error,error,76,https://psicode.org,https://github.com/psi4/psi4/pull/2859#issuecomment-1403785234,1,['error'],['error']
Availability,"> I'm afraid I don't know what ""consolidate the -D and -NL behaviour"" means in this context. I am referring essentially to this: https://github.com/psi4/psi4/pull/2132#issuecomment-802158952; Was a PR question, rather than code comment. If there was a code discussion I missed it. If you/we don't want to touch it this now, we should note it down somewhere. Either as issue or code comment.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2132#issuecomment-963304601:342,down,down,342,https://psicode.org,https://github.com/psi4/psi4/pull/2132#issuecomment-963304601,1,['down'],['down']
Availability,"> I'm building Libint2 via Psi4; I wouldn't have this error otherwise ;). The hartree-fock++ test case won't happen, but the eigen3 detection can still be a problem even with pre-built because the l2 c++ interface needs it to compile p4 against. > I'm waiting on Ed to release a stable updated version of Libint2, so that I can package it in Fedora. I've seen some clues that he's waiting on this. I need to get the mpfr and eigen3 detection fixed before I can start ready-to-merge negotiations. Also, I don't know if EFV is planning the sph-ordering-as-runtime-option for the 2.7 release so that psi can use the Fedora distribution.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2046#issuecomment-737442203:54,error,error,54,https://psicode.org,https://github.com/psi4/psi4/issues/2046#issuecomment-737442203,1,['error'],['error']
Availability,"> I'm fine defaulting it to `OFF`, to be honest! Probably safer that way, in regards to unforeseen errors/issues. sounds good. I think it's worth turning on in azure, if that wasn't already in your plans.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3145#issuecomment-2018364039:99,error,errors,99,https://psicode.org,https://github.com/psi4/psi4/pull/3145#issuecomment-2018364039,1,['error'],['errors']
Availability,"> I'm not really qualified to appraise this, but I don't see any obvious errors. Alas, nobody is fully qualified to appraise this. TDC knows the `cc` code and Lori knows psivars, but densities touch so many parts of the code that we'd need expertise in every single module, which we simply don't have. I won't be free to work on the next PR for a while, so we can leave this open to collect more comments.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2541#issuecomment-1098334427:73,error,errors,73,https://psicode.org,https://github.com/psi4/psi4/pull/2541#issuecomment-1098334427,2,['error'],['errors']
Availability,"> I'm not seeing any change in in 6 years -- https://github.com/psi4/psi4/blame/master/psi4/src/psi4/libscf_solver/hf.cc#L772-L801 . I also did a fresh clone and compile of master earlier today, and it was fine, so I'm not sure what circumstances could lead to your error. If you're rebuilding psi4 after a long interval, I'd suggest a new objdir.`compute_fcpi()`. maybe because i enable brianqc? my compile being corrected after I add ""}""; btw , my link is [https://github.com/psi4/psi4/tree/master/psi4/src/psi4/libscf_solver](url)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3185#issuecomment-2179682307:266,error,error,266,https://psicode.org,https://github.com/psi4/psi4/issues/3185#issuecomment-2179682307,1,['error'],['error']
Availability,"> Ideally, the list of functionals in Psi4 would depend on the version of libxc available. Not to be snarky, but when there are two upstream libxc-s that can build and are API compatible with Psi, I can probably arrange for varying functional lists. For present, I yearn for one. (I may be misunderstanding your point.) . > And yes, it would be nice to be able to compile Psi4 without modifications against the distribution version of libint. The Fedora package supports very large angular momentum, whereas the default libint that's automatically compiled by Psi4 can't handle density fitting basis sets for transition metals... And the trouble is that Psi4 only detects via the cmake interface whereas other libint downstreams in Fedora require pkgconfig? iirc, Psi uses libint's cmake to also set some AM compile defs, not just location detection, so pkgconfig detection insufficient. Would having libint's cmake write out the pkgconfig files (as libxc now does) allow the cmake libint to work for everyone?. I agree I wouldn't ship a production distribution with the default angmom. I like 7 locally and soon I'll make conda use the 8 pkg (now optional) by default instead of the lighter 6. Only potential trouble for you is that libderiv AM = libint AM – 1. If you're going _really_ high for libint, deriv may not cooperate. -----------. I was misremembering when I wrote https://github.com/psi4/psi4/issues/1302#issuecomment-450762992 .; * cmake was why Psi v1.1 couldn't use upstream libxc 3 (so we forked 3 and added cmake).; * functional tweakers not in public API was why Psi v1.2 couldn't use libxc 4 w/o losing functionality (so we forked libxc 4.0 and added the rejected [MR 62](https://gitlab.com/libxc/libxc/merge_requests/62) plus a few merged build MRs). The same libxc ~4.0 is the current state of Psi master.; * The missing tweakers of rejected MR 62 were replaced in merged [MR 67](https://gitlab.com/libxc/libxc/merge_requests/67) but that's a different API (solved by #1101) and ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1302#issuecomment-451132442:80,avail,available,80,https://psicode.org,https://github.com/psi4/psi4/issues/1302#issuecomment-451132442,2,"['avail', 'down']","['available', 'downstreams']"
Availability,"> Including the _order of magnitude_ in a corner of the plot is highly non-standard and leads to the confusion I just went through. Choose units that are of the proper order of magnitude, and include any needed decimals on the axis directly. According to your axes, you have 2 hartree error, which is utterly unacceptable. 0.2 microhartree error is much more reasonable.; > ; > What you're describing confirms that the error is small. That is different from confirming correctness. Are you able to compare the numbers to some other implementation and show agreement? Is there some rare property that the exact scheme has, which you can numerically reproduce?. Ah, the energy convergence criteria itself is 1.0e-6, and the errors are well below that number, so I strongly believe that we are safe. It may not be a good idea to compare to another implementation since every implementation has different tricks thrown in. Rather, if the energy difference is less than the e_convergence criteria, we are definitely safe. Though we could try to reproduce something like MBIS charges to check if we are safe.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-821197961:285,error,error,285,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-821197961,4,['error'],"['error', 'errors']"
Availability,"> Independent of the options issues -- should something be patched/changed such that if the user/a program/etc passes a nonsense `num_frozen_docc`, the program gives a sensible error rather than segfaulting?. Yes. Lori's comment was ""trick you can use to prevent accidentally stumbling into this again,"" not a fix. `scf::HF::compute_fcpi` probably needs a validation check...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2631#issuecomment-1193180818:177,error,error,177,https://psicode.org,https://github.com/psi4/psi4/issues/2631#issuecomment-1193180818,1,['error'],['error']
Availability,"> Instead, the parser should be developed to have a shorthand for exchange and correlation functionals. . Not sure I agree on this one. While such parsers are common in other codes, personally I think it's a wasted effort when one uses libxc - most folks who want ""non-standard"" combinations of exchanges and correlations know what they're doing, and they will be comfortable with the `dict`-based interface (if they aren't, it's a failure of the docs more than anything). Obviously, it doesn't hurt to have the common options (such as BLYP, SVWN, PW91, PBE...) pre-defined and checked for regressions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1111#issuecomment-416118875:432,failure,failure,432,https://psicode.org,https://github.com/psi4/psi4/issues/1111#issuecomment-416118875,1,['failure'],['failure']
Availability,"> Interesting, I had believed the other cases were handled by LibXC and the only component we were interested in is if they needed wK or not. As a note this was directly copied out of the wiki at one stage. What needs to be done to add Yukawa screening and what exactly is LC then?. They are handled in libxc in the same way CAM is. Namely, if you use a range-separated hybrid, libxc only computes the local component. It is the responsibility of the downstream code to do the range-separated exact exchange. I have a vague recollection of seeing a paper (I think the authors were Japanese) that discussed how the Yukawa exchange can be calculated in Gaussian basis sets. I never implemented it in ERKALE since basically all functionals just use the error function method which is trivial to implement in Gaussian programs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1258#issuecomment-424044212:451,down,downstream,451,https://psicode.org,https://github.com/psi4/psi4/issues/1258#issuecomment-424044212,2,"['down', 'error']","['downstream', 'error']"
Availability,"> Internally it's fine to use COSK, however user-facing it is better to use COSX, imo. That's a good idea, done. > Ideally the COSK grids can use all the options the normal DFT grid uses. At the very least pruning. However it is a bit annoying that one has to duplicate/triplicate the normal DFT grid options for this. Not sure how this can be solved best. Yes, the fact that the COSX grids are affected by keywords such as `DFT_PRUNING_SCHEME`, `DFT_RADIAL_SCHEME`, `DFT_NUCLEAR_SCHEME`, etc. is not ideal. I don't think we should duplicate/triplicate these keywords (resulting in independent but parallel keywords like `COSX_RADIAL_SCHEME`, `COSX_RADIAL_SCHEME_FINAL`, etc.) because I can't imagine any users realistically wanting to manually set those values. I think it makes more sense to hardwire some of the grid settings when building the grids for COSX. For example, we probably always want do `ROBUST` pruning on those grids.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2567#issuecomment-1117521179:904,ROBUST,ROBUST,904,https://psicode.org,https://github.com/psi4/psi4/pull/2567#issuecomment-1117521179,1,['ROBUST'],['ROBUST']
Availability,"> Is DSWAP deprecated upstream or is there another reason to prune it? I think part of the plan with the libqt exports was to provide a full blas/lapack interface, even if not everything got used by psi internally. That was before `np.linalg` and Eigen were around/prominent, so perhaps it's not so vital, but it's nice for downstream to know if psi is exporting the full set or as-needed.; > ; > fwiw, I've no strong opinion on `Matrix::swap_rows` and `Matrix::swap_columns`. There is no upstream deprecation for this one, so comments and discussion is welcome. I was not aware that the intent was to expose the full set of functions to downstream. Some of the Level 1 and 2 BLAS functions that Psi4 has interfaces for are not exported to Python. So I assumed that Psi4 only provides interfaces for so many of them, because it was much easier to auto-generate all of them, than try to figure out what is needed. The bigger picture is that by providing the entire Fortran-->C++-->Python interface to downstream, Psi4 is taking on a maintenance burden, with the really problematic part being the Fortran-->C++ part. (eg. the Fortran character argument ABI violation horror story-we are relying on UB and the mercy of compiler developers); Currently, the sheer number of BLAS/LAPACK functions makes any overhaul of the interface a daunting prospect. I would wager that if all BLAS/LAPACK functions which have no internal or external users were removed, then the task of transitioning to a less fragile solution for getting linear algebra into Psi4 (regardless of how that will be achieved), will be much easier done.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2909#issuecomment-1483129698:324,down,downstream,324,https://psicode.org,https://github.com/psi4/psi4/pull/2909#issuecomment-1483129698,4,"['down', 'mainten']","['downstream', 'maintenance']"
Availability,"> Is there ever a legitimate reason for an atom to have fewer basis functions than it has active electrons? My intuition is no, but I don't want to attempt any code to enforce that before at least checking for reasons. On a purely mathematical ground, there is no reason not to allow calculations where some nuclei do not have any basis functions; after all, all that matters is the flexibility of the whole basis set. I would therefore recommend against a hard error here, or there should at least be a flag to control whether an error is raised or not. Not having sufficiently many basis functions to hold the electrons is, however, a major error and should always result in an error termination. Here, Ba is indeed given a 3s3p basis set, which has 12 spatial orbitals and can thereby hold 24 electrons, whereas Ba has 56 electrons. The error `Cannot set element 12 since there are only 12 elements` arises from exactly this; it seems that the size of the fragment basis is not checked, or not checked early enough!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2853#issuecomment-1397449933:462,error,error,462,https://psicode.org,https://github.com/psi4/psi4/issues/2853#issuecomment-1397449933,10,['error'],['error']
Availability,"> It looks like the entire `ERISieve` class is marked as `PSI_API`, so AFAIK that is giving ; > downstream the permission to rely on both the object and all of its public members ; > being a stable API, not just a few functions. I think that is right, as well. When I said ""user-facing"", I meant the `ERISieve` functions that are explicitly enabled Python-side via PyBind, as defined through the `export_mints.cc` file. Deprecation as a whole is less my realm of expertise, however, so I'm not 100% if what I'm doing is even the ideal route regardless.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2935#issuecomment-1527947435:96,down,downstream,96,https://psicode.org,https://github.com/psi4/psi4/pull/2935#issuecomment-1527947435,1,['down'],['downstream']
Availability,"> It would almost be better if type-A ghosts didn't exist and at parse-time any ""default"" ghosts are treated as type-B ghosts somehow. That's what I do for the json molecule record – there's a list `real = [True, False, True, False, False, False]` and a separate `fragment_separators = [3]` that decouples what would be the following in psi. Ghosting types A & B are collapsed. . ```; molecule {; C; @C; C; --; C; C; C; }; extract_subsets(1, 2); ```. > As for a new Molecule function to ensure the user knows what they're going to get, are you referring specifically to a molecular_weight function or more generally a function to return either the mass or Z val as either zero or real depending on input?. I think I've settled on recommending changing the signature of `Molecule.Z()` and `Molecule.mass()` to take a required argument `bool zero_ghost`. The recompile will force consideration of which was wanted everywhere (incl. downstream). At the same time, I think leave `CoordEntry.Z()` and `CoordEntry.mass()` alone in their probably inconsistent state. Most of the `Z()` calls in Mol are probably to `CoordEntry.Z()` and have the gh=0 factored into the logic. Should definitely get consensus tomorrow before diving in.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/909#issuecomment-363503391:930,down,downstream,930,https://psicode.org,https://github.com/psi4/psi4/issues/909#issuecomment-363503391,1,['down'],['downstream']
Availability,"> It would be good for me to write a test case for everything I check as part of DCT and Linear Dependencies #2231. Should this live in ctests or pytests? I'm not clear on test best practices at this point in Psi development, since we want to mover over to pytests eventually. Even then, right now is a bad time to write the test since Fix GEMM errors in presence of linear dependencies #2232 will change the reference output. In the beginning I may have had (and spoken) dreams of rewriting all the ctests in psiapi for pytest, but I've since been talked down, and the plan is to allow each ctest input.dat to stay where it is and be wrapped in a pytest test (like psi4numpy). There'll have to be extra install steps to position the ctest inputs into the python module directory. Upshot is it's fine to continue choosing psithon or psiapi style for writing new tests, mostly depending on testing style convenience and whether the test would serve as an easy model for users.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2233#issuecomment-873124663:345,error,errors,345,https://psicode.org,https://github.com/psi4/psi4/pull/2233#issuecomment-873124663,4,"['down', 'error']","['down', 'errors']"
Availability,"> It's missing finding the `libiomp5.so`. In a oneapi installation, it's in a different directory than `libmkl_rt.so`, so you source the whole oneapi install or add more to ld_library_path. Alternately, all this can be got from conda. If you have the `mkl-devel` and `mkl` packages installed, the iomp5 lib should be available. Second alternately, you can specify the location of the dir containing iomp5 by `-D OpenMP_LIBRARY_DIRS=""/path/to/dir/containing/iomp5_lib`.; > ; > There's some additional notes in #2965 in case helpful. Very appreciate! It works!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2998#issuecomment-1622809815:317,avail,available,317,https://psicode.org,https://github.com/psi4/psi4/issues/2998#issuecomment-1622809815,1,['avail'],['available']
Availability,"> Just checking that the extra precision added https://github.com/psi4/psi4/pull/1510/files didn't get lost. We studied numerical precision and couldn't justify going out to the **17** decimal places reported after #1510: the Python code couldn't reproduce the C++ code out that far. My memory is hazy, but I recall some errors that were normally in the 14th decimal place but could rarely reach to the 12th decimal place, which I suspected were related to the numerical precision of S^(-1/2). This made me want to cut back the number of decimal places to something less fragile. I [checked in](https://github.com/psi4/psi4/issues/1973) about why we had 17 decimal places in the first place, and the person who made the change simply assumed that we had that many decimals of precision. In my judgment, we do not, and it was a mistake to ever report that many decimal places. I _also_ checked that 10 decimal places was enough to keep #1486 fixed. (That was the issue that originally prompted the increased precision in our Molden files.) While the 4 decimal places of the pre-#1486 era had the bug, the 10 decimal places of this PR did not. While we could _maybe_ go out to 11 or 12 decimal places, trying to get 17 decimal places of precision would require an analysis of round-off error in every line of the SCF code. This seems far beyond the scope of the PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2229#issuecomment-872543523:321,error,errors,321,https://psicode.org,https://github.com/psi4/psi4/pull/2229#issuecomment-872543523,4,['error'],"['error', 'errors']"
Availability,"> Let me make sure I have this right: you're plotting energy errors on the order of 1e-7, but you only converged the energy to 1e-6? If so, then your plots are pure noise. If not, then what am I getting wrong?. Yes sir that is right :) The point of the plots is to show that the errors are irrelavent",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-821213641:61,error,errors,61,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-821213641,2,['error'],['errors']
Availability,"> Looks like I'm still failing the Cholesky convergence test after a rebase. Well, you're not hitting the same error. This one is down the sequence at 1e-10, not 1e-7. And always by about same amt. . ``` Energy with Cholesky 1e-10: computed value (-230.6415254219) does not !; ! match (-230.6415254333) to atol=1e-08 by difference (0.0000000114).; ```. I wonder if this is associated with the new 2020.1 mkl set that's ~9 days old.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1895#issuecomment-632118171:111,error,error,111,https://psicode.org,https://github.com/psi4/psi4/pull/1895#issuecomment-632118171,2,"['down', 'error']","['down', 'error']"
Availability,"> Maybe it's a pybind11 issue?. Worth a try. Looks like we were at `v2.2.3` in that era: (2nd col of https://github.com/psi4/psi4meta/blob/master/conda-recipes/conda_build_config.yaml#L103-L104). > Yup. And no changes to dependency lists either; no qcengine. aggh. > And yes, this is with Python 3.11 in Fedora rawhide. Can you dial Python down a bit? Psi 1.3 was only knowingly build for 3.6 and 3.7. --------. This long life of v1.3 is all because of Libint2 issues, right? Can L2 be vendored with (internal build distributed with) Psi4? Must it be static?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2656#issuecomment-1203229833:340,down,down,340,https://psicode.org,https://github.com/psi4/psi4/issues/2656#issuecomment-1203229833,1,['down'],['down']
Availability,"> New LinK PR opened, comments on this are certainly welcome, but I still need to make my tests and update the docs. Ping me when it's done, and I'll review it then.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-974342373:117,Ping,Ping,117,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-974342373,1,['Ping'],['Ping']
Availability,"> No py-side changes needed for 3.9 to work? Nice!. nope! I tested it a month ago with c-f 3.9, and it built first time. now the py39 stack is available on defaults, so we're good to go. (there's a p4 conda package up now, but it's built from this branch, not master, so I'll pull it soon.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2063#issuecomment-743485611:143,avail,available,143,https://psicode.org,https://github.com/psi4/psi4/pull/2063#issuecomment-743485611,1,['avail'],['available']
Availability,"> Not related to the issue at hand, but since changes are made to it:; On Apple Silicon ARM the -march=native flag is not recognized with Apple's clang 13.; It could e.g. be disabled with an if (NOT CMAKE_HOST_SYSTEM_PROCESSOR STREQUAL ""arm64"") for clang gnu (that's tested) but that would nest if statements even more. Thanks, @hokru, do you know if there's a flag for Apple Silicon ARM that should be used in place of `march=native`? The xhost logic block is running with `option_with_flags()` (activates the first flag in argument list that the compiler understands), but that's mostly for pretty printing now that there's more compiler logic and only one proposed flag per call. Having started down the logic path, I'm glad to add more cases for Silicon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2384#issuecomment-997437932:698,down,down,698,https://psicode.org,https://github.com/psi4/psi4/pull/2384#issuecomment-997437932,1,['down'],['down']
Availability,"> Note that the SAD guess in Psi4 is not the best one possible, as it is not symmetry aware. Such a SAD guess is available in PySCF, and it is also directly accessible from Python.; > ; > I have planned to rectify the situation in Psi4 in the future, but I have some other projects to finish before that. thanks for this very useful pointer! I will then give `PySCF` a try. however, my main concern with `PySCF` is, after getting the SAD Guess from it, I have to reorder the rows and columns of the density matrix, so that it aligns with the ordering in `psi4` ? I believe these 2 programs do not have the same ordering (but I'm not certain). I need to do this as most of my workflow is centred in `psi4`, and a large amount of calculations of density matrices have already been done with `psi4`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2897#issuecomment-1467597056:113,avail,available,113,https://psicode.org,https://github.com/psi4/psi4/issues/2897#issuecomment-1467597056,1,['avail'],['available']
Availability,"> Now I also get it :); > ; > Incremental Fock builds can show numerical error accumulation. Adding a reset frequency is sensible, e.g. after 20 incremental builds do a full Fock build from scratch. The actual number should be a (expert) user option.; > ; > The incremental Fock build can be compared against a standard build. They have to agree.; > Comparing density screening to other programs can probably only be done for HF calculations and even then I would expect that one can only see 'similar errors' and no exact number agreement. This is already done, as I turn off incremental Fock build after the density drops below 1.0e-5, to reduce the differences, though I could make this a user option. :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-821204441:73,error,error,73,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-821204441,2,['error'],"['error', 'errors']"
Availability,"> Other than seeing python test failures caused by psi4 being compiled with python3 not python2 assumed by the tests, nothing big comes out. I hope these are tests in `tests/python/` and `tests/json/` you're seeing this with (those are psiapi)? All psithon `ctest` tests should be using the python psi was built with, not the `which python` python. . Sure, I'll run a local full tests on this PR this weekend.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1458#issuecomment-451607182:32,failure,failures,32,https://psicode.org,https://github.com/psi4/psi4/pull/1458#issuecomment-451607182,1,['failure'],['failures']
Availability,"> Please explain the bug in more detail. Is the expected behavior that Psi reports some jobs in the plan can't run? If the expected behavior is that you get a number, why are any PsiExceptions appearing in the plan?. Good point. The new driver_util tech separates figuring out what derivative psi can do analytically under the specified conditions from what derivative requested or demanded by user. So those error strings you see in `analytic` are just being stored _in case_ user demanded analytic gradient. In the given case, energy was requested and the error strings were never used. If the user wanted gradient, calc would fall back to findif by E and the error strings wouldn't be used. If the user wanted gradient and also gave `dertype=1` for analytic, the error string pops up. For the last case, this needs to be improved in future to show the user _all_ the errors, not just the first (mp2) one. But that's more than a couple-line fix, so not suitable for backport.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2590#issuecomment-1145418829:409,error,error,409,https://psicode.org,https://github.com/psi4/psi4/pull/2590#issuecomment-1145418829,5,['error'],"['error', 'errors']"
Availability,"> Please update the error message to say that the grid is unusable with COSX, rather than ""better fix"" incoming. > See above. > Maybe language like ""The definition of the current grid includes negative weights. As these are not suitable for the COSX implementation, please choose another grid through ..."". Done and done! Wording changed to match these suggestions. Also, for those not at the Psi4 dev meeting today, it was agreed upon that this PR would indeed be the final fix to the COSX grid issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2906#issuecomment-1497977769:20,error,error,20,https://psicode.org,https://github.com/psi4/psi4/pull/2906#issuecomment-1497977769,1,['error'],['error']
Availability,"> Potentially print the symmetrized molecule and abort after that. Implementing that would require reworking the callers of `atom_at_position`, as it is a fairly low-level function that is not only called when we are trying to symmetrize. Throwing an exception in `atom_at_position` after the warning, and catching it in the symmetrization function may be feasible, other callers would not catch it and the uncaught exception would terminate execution. > But I imagine in practice the error could occur if a user tries to symmetrize a molecule with a questionably large tolerance.; This is the primary reason why I am reworking this, although I also tend to abuse QC programs with thousands of extreme geometries. A third option would be to raise an error in `atom_at_position` by default, but add an expert option to turn the error into a warning.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2465#issuecomment-1064088333:485,error,error,485,https://psicode.org,https://github.com/psi4/psi4/pull/2465#issuecomment-1064088333,4,"['error', 'toler']","['error', 'tolerance']"
Availability,"> Psi4 was changing Libint2 requirements a good deal in mid-2021 through early-2022. So if your environment is from before, say, April 2022, but your psi4 src is newer, it's better to create a fresh psi4-dev env. At present you should be using one of; > ; > * [linux-64/libint2-2.7.1-h2fe1556_15.tar.bz2](https://anaconda.org/psi4/libint2/2.7.1/download/linux-64/libint2-2.7.1-h2fe1556_15.tar.bz2); > * [win-64/libint2-2.6.0-h2e52968_4.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/win-64/libint2-2.6.0-h2e52968_4.tar.bz2); > * [osx-64/libint2-2.6.0-h879752b_7.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/osx-64/libint2-2.6.0-h879752b_7.tar.bz2); > ; > You can see what you've got with `conda list`. Thank you very much. I'm using a fresh psi4-dev env, which I create with the following command: conda create -n psi4env python=3.9 psi4 gau2grid=2 --only-deps -c psi4/label/dev.; When I use the conda list to check it, it also includes: libint2 2.7.1 h2fe1556_15 psi4/label/dev.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2879#issuecomment-1437809093:345,down,download,345,https://psicode.org,https://github.com/psi4/psi4/issues/2879#issuecomment-1437809093,3,['down'],['download']
Availability,"> Since this is real trouble if a K-needing method doesn't get a K, maybe add a test of scf_type=dfdirj parametrized over BP86 and B3LYP that checks that the former runs and the latter errors informatively. Yeah, I can do that!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3001#issuecomment-1618978873:185,error,errors,185,https://psicode.org,https://github.com/psi4/psi4/pull/3001#issuecomment-1618978873,1,['error'],['errors']
Availability,"> So far I think this looks great - type safe python with a lot of testing, and a great modular design for the solvers. . All AJ's work!. > I really like the line broadening plot generation. . Thanks, it took me an embarrassingly long amount of time to check that units of measure all made sense... > If there's some kind of provenance info that can be added to the json reference data file that would be handy. I have the raw G09 input and output files, together with the notebook that extracts the data from the formatted checkpoint files. Should I include that in the `pytests` folder?. @loriab I'm seeing some funny behavior (or most likely I don't understand what the normal behavior actually is); ```; molecule {; 0 1; O 0.000000 0.695000 -0.092486; O -0.000000 -0.695000 -0.092486; H -0.388142 0.895249 0.739888; H 0.388142 -0.895249 0.739888; }. set {; tdscf_states 10; scf_type pk; }. energy('td-scf/cc-pvdz'); ```; I'd expect this to converge the wavefunction to `D_CONVERGENCE` 1e-6 and then compute the 10 states to `TDSCF_R_CONVERGENCE` 1e-4 The thresholds seems however to be 1e-8 (and 1e-6) respectively. I can't figure out where `D_CONVERGENCE` gets tightened from what stated in the [table](http://psicode.org/psi4manual/master/scf.html#convergence-and-algorithm-defaults)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-644236820:524,checkpoint,checkpoint,524,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-644236820,1,['checkpoint'],['checkpoint']
Availability,"> Sorry to keep making you write, but is the ""big picture"" view of nbody documented anywhere? I can't follow what energy_body_dict means, or why the value of one of its entries is coupled to whether the total energy is available. > I fear this is a case where there is a lot of ""developer was only coding to be comprehensible to themselves"" code debt. I confess to being lost in nbody, too. And some of the psivars set aren't as descriptive as I'd like (e.g., `2CP`. However, any changes to nbody make DDD especially painful to rebase. And I think a good time to rationalize and document the pieces are when we take the nbody communication dictionary DDD uses and formulate/propose a proper schema. I guess I'm ok leaving it inscrutable (and without binding contracts :-) until then.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2221#issuecomment-871799597:219,avail,available,219,https://psicode.org,https://github.com/psi4/psi4/pull/2221#issuecomment-871799597,1,['avail'],['available']
Availability,"> Tarballs downloaded from GitHub are not git repositories. We use them in FreeBSD ports.; Nothing important should be hard-wired to Git during build/tests. I agree broadly, though I'd sacrifice it to get fine-grain versioning for cross-project communication if needed :-). The way psi is set up now, if the buildsys detects that it's not a git repo, it substitutes some generic most-recent-tag info and proceeds, so that one gets a working build. When I try, it works as planned:. acquire tarball; ```; > curl -L https://github.com/psi4/psi4/tarball/master -o psi4_v17.tgz; ```; configure and build -- it detects ""no git""; ```; # configure (all req'd deps detected except optking to be build from src); > cmake --build . -j12; ...; [ 88%] Performing build step for 'psi4-core'; [ 1%] Generating version info; [ 1%] Building CXX object src/psi4/lib3index/CMakeFiles/3index.dir/dftensor.cc.o; ...; [ 2%] Building CXX object src/CMakeFiles/l2export.dir/export_mints.cc.o; Blindly (no git) accepting release version: 1.7+6ce35a5 (recorded); 1.7 {} 6ce35a5 1.7.0.0 release 1.7 <-- 1.7+6ce35a5; [ 2%] Built target update_version; [ 2%] Building CXX object src/psi4/libciomr/CMakeFiles/ciomr.dir/dsyev_ascending.cc.o; ...; ```; version computes and simple test, distributed driver tests, and dftd3 addon tests work ok; ```; > stage/bin/psi4 --psiapi # execute results; >>> stage/bin/psi4 --version; 1.7; >>> ctest -R tu1; Test project /psi/gits/tarbuild/psi4-psi4-4d94910/objdir-py310; Start 426: tu1-h2o-energy; 1/1 Test #426: tu1-h2o-energy ................... Passed 1.65 sec. 100% tests passed, 0 tests failed out of 1; >>> ctest -R ddd; Test project /psi/gits/tarbuild/psi4-psi4-4d94910/objdir-py310; Start 479: ddd-deriv; 1/2 Test #479: ddd-deriv ........................ Passed 13.18 sec; Start 481: ddd-function-kwargs; 2/2 Test #481: ddd-function-kwargs .............. Passed 170.20 sec. 100% tests passed, 0 tests failed out of 2; >>> ctest -R dftd3; Test project /psi/gits/tarbuild/psi4-psi4-4d94",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2687#issuecomment-1358169826:11,down,downloaded,11,https://psicode.org,https://github.com/psi4/psi4/issues/2687#issuecomment-1358169826,2,['down'],['downloaded']
Availability,"> The cause of missing error messages is likely the improper use of `exit()`. I have prepared a companion pull request to this one to get rid of them. I think there are two separate issues here. One is the improper use of `exit()` scattered around the codebase, but I still think that there is a separate issue here where not even `throw PSIEXCEPTION(...)` is delivering the error message, in certain environments. I think that would still be a problem even if every instance of `exit()` were to be eradicated from the repo. In https://github.com/psi4/psi4/issues/2970, the part of PSIO that was raising the error was already using `throw PSIEXCEPTION(...)`, it was not calling `exit()`. Unless removing all of the `exit()` calls elsewhere from the codebase magically changes how `PSIEXCEPTION` works, I cannot see how that would fix that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3117#issuecomment-1877118432:23,error,error,23,https://psicode.org,https://github.com/psi4/psi4/pull/3117#issuecomment-1877118432,3,['error'],['error']
Availability,"> The contraption you show above could also be written as `if procedures['energy'][method_name] in [proc.run_scf, proc.run_tdscf_energy]:`. . Yep, much cleaner syntax. > Regarding the nirrep>1 problem, it sounds like the backtransformation is either not numerically sound or is not being applied correctly. I didn't see anything wrong in the first pass through but I'll look again. The (probably faulty) code should be in `twoel_Hx` (and deeper) which was not touched in this PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-644794380:396,fault,faulty,396,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-644794380,1,['fault'],['faulty']
Availability,"> The git history is still a concern. If it's WIP, fine, but if you're having trouble, please ping me on slack. Thanks. Yes, I'm still working on the project. Though I fixed the git history.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2043#issuecomment-742693014:94,ping,ping,94,https://psicode.org,https://github.com/psi4/psi4/pull/2043#issuecomment-742693014,1,['ping'],['ping']
Availability,"> The three new(ish) beyond-S^2 corrections, E(20)exch-ind, E(20)exch-disp, and E(30)exch-ind cannot be currently calculated by a single SAPT call: the first two require energy('sapt(dft)') and the last one energy('sapt2+3'). That's quite unfortunate and we need a better workflow, possibly by making the non-S^2 E(20)exch-ind,resp and E(20)exch-disp available as part of energy('sapt0'). This is the topic that probably needs most discussion between @konpat and @CDSherrill, particularly as sapt-dft is now involved. Agreed that split ""non-s^2"" is an unsatisfactory state of affairs. perhaps psicon?. > What should go into aggregate SAPT energy values, S^2 or non-S^2? I made the code pick the non-S^2 value of E(30)exch-ind,resp if available, but I'd be happy to revert it back to picking E(30)exch-ind,resp(S^2). At present, I don't think the non-S^2 values of E(20)exch-ind,resp and E(20)exch-disp are ever included in total SAPT numbers, maybe they should?. I think we've accumulated enough changes for another adjustment to psi's SAPT definitions -- 3 non-S^2 for S^2 terms and evening up the fit basis sets btwn Ed/Rob so that sapt0 is exactly the same from both. > Finally, the option names such as do_ind30_exch_sinf are somewhat unfortunate because they propagate the misconception that you include effects all the way to S^infinity. In reality, the largest power of overlap integral S you ever need is min(NelA,NelB) - after that, you run out of electrons to exchange between A and B. Nonapproximated, Nonexpanded, and beyond-S^2 are all formally more correct names than S^infinity. I'm mostly concerned with the qcvars that need terse names. And it looks like only pure-exch vars have been given S^2 designations https://github.com/psi4/psi4/blob/3d2403c43e2cf8df699ff6e382a4ae2e3a0a5faa/psi4/driver/qcdb/psivardefs.py . So we'd need some existing vars to turn into two flavors `SAPT EXCH-IND30,R ENERGY` --> `SAPT EXCH-IND30,R(S^2) ENERGY` and `SAPT EXCH-IND30,R(!S^2) ENERGY`, perhaps? W",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2314#issuecomment-938713375:351,avail,available,351,https://psicode.org,https://github.com/psi4/psi4/pull/2314#issuecomment-938713375,2,['avail'],['available']
Availability,"> Then I rebuild dftd3 under WSL. You mean you go to https://github.com/loriab/dftd3, clone and compile and it works? (`make` or `cmake`?) Or you mean downloading the 3.2.0 tarball from Grimme and `make`ing it works?. In either case, thanks for the investigation. I must have done something in the conda package that disagrees with WSL. Will fix by v1.3.1.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1587#issuecomment-478302836:151,down,downloading,151,https://psicode.org,https://github.com/psi4/psi4/issues/1587#issuecomment-478302836,1,['down'],['downloading']
Availability,"> There are not many places internal to Psi4 that need to really know the ordering of our orbitals. So perhaps us changing to match default libint2 wouldn't be too big a hurdle. Do any of our up or downstream packages need to know the ordering?. * fwiw, none of our ecosystem packages use libint directly; * gau2grid is aware of ordering, but it's runtime setable; * reading Andy's comment into the record https://github.com/evaleev/libint/issues/190#issuecomment-691482710",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-926952999:198,down,downstream,198,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-926952999,1,['down'],['downstream']
Availability,"> There is no upstream deprecation for this one, so comments and discussion is welcome. gtk, thanks. > I was not aware that the intent was to expose the full set of functions to downstream. Some of the Level 1 and 2 BLAS functions that Psi4 has interfaces for are not exported to Python. So I assumed that Psi4 only provides interfaces for so many of them, because it was much easier to auto-generate all of them, than try to figure out what is needed. Quite right, I think it was for downstream C++ plugins that the full export set was intended. Python exports (relatively newfangled c. 2016) have been as-needed. > The bigger picture is that by providing the entire Fortran-->C++-->Python interface to downstream, Psi4 is taking on a maintenance burden, with the really problematic part being the Fortran-->C++ part. (eg. the Fortran character argument ABI violation horror story-we are relying on UB and the mercy of compiler developers); Currently, the sheer number of BLAS/LAPACK functions makes any overhaul of the interface a daunting prospect. Agree on the daunting. In the same category as the libqt exports are the CMake LAPACK detection and testing with other LAPACK distributions. Right now, I'm hardwiring the psi4 conda-forge recipe to MKL, but it'd be nice in future to relax that to normal usage (compile against a generic interface, then allow runtime selection of distribution) if we could do so with assurance (last time OpenBLAS was tried, we had threading oversubscription for SAPT iirc). > I would wager that if all BLAS/LAPACK functions which have no internal or external users were removed, then the task of transitioning to a less fragile solution for getting linear algebra into Psi4 (regardless of how that will be achieved), will be much easier done.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2909#issuecomment-1483234672:178,down,downstream,178,https://psicode.org,https://github.com/psi4/psi4/pull/2909#issuecomment-1483234672,4,"['down', 'mainten']","['downstream', 'maintenance']"
Availability,"> This can hypothetically happen in two ways: the atoms are either extremely close, or the tolerance is set to a large value. unphysical close atoms should be acceptable as input, even if mostly of academic interest. But I imagine in practice the error could occur if a user tries to symmetrize a molecule with a questionably large tolerance.; Then the question is if we should indeed abort or still try to symmetrize hoping to get lucky?; Potentially print the symmetrized molecule and abort after that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2465#issuecomment-1064071052:91,toler,tolerance,91,https://psicode.org,https://github.com/psi4/psi4/pull/2465#issuecomment-1064071052,3,"['error', 'toler']","['error', 'tolerance']"
Availability,"> This reminds me, there _is_ a technique to avoid recomputing every `N` iterations. Namely, I think Ahlrichs(?) described a procedure where one keeps track of the change of the density matrix from the reference one by setting `D_0=0` and `D_i = D_{i-1} + max{|Duv|}` where `Duv` is the difference density matrix at iteration `i` and `D_i` tracks the changes. Instead of doing the reset every `N` iterations, one does a full rebuild when `D_i >= eps` because by then sufficient numerical error may have creeped into the calculation. Thank you for telling me about this! This is an intriguing idea overall. Essentially, instead of hard-setting a number of iterations to fully recompute the Fock matrix, one does it dynamically based on how much the density matrix has changed over time. While I don't think this PR is the right place to implement such a scheme (with 1.7 is right around the corner; and since such a scheme would break standardization of IncFock between the different integral-direct JK builds Psi4 has currently, assuming we implement it only in DFJCOSK for this PR), it could be worth investigating in the future. The potential for removing a human-set parameter (INCFOCK_FULL_FOCK_EVERY in this case) is always appealing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2816#issuecomment-1337458155:488,error,error,488,https://psicode.org,https://github.com/psi4/psi4/pull/2816#issuecomment-1337458155,1,['error'],['error']
Availability,"> This seems to be an error in writing rather than an error in the constrained optimization, isn't it?. This error shows up when dynamic level is raised to 3 after the first convergence check when it tries to write optimization data to binary file.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/858#issuecomment-344762514:22,error,error,22,https://psicode.org,https://github.com/psi4/psi4/issues/858#issuecomment-344762514,3,['error'],['error']
Availability,"> Two questions:; > ; > * Have you checked the magnitude of the negative grid weights? Are they near-zero, within some small tolerance? That could be justification for zeroing them out; > * Why not implement my above suggestion of forming two separate `X` matrices? This would be simple to do. @hokru answered the first part; and while I couldn't say what a ""proper magnitude"" is, my observation was that some of the negative weights were large enough in magnitude to where zeroing them out wouldn't be feasible. For your second part, it's just what was settled on at the Psi4 dev meeting, moreso than anything. On further reflection, though, I can work on your suggestion today, because you're right, it wouldn't be too hard to do what you said.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2890#issuecomment-1503331042:125,toler,tolerance,125,https://psicode.org,https://github.com/psi4/psi4/issues/2890#issuecomment-1503331042,2,['toler'],['tolerance']
Availability,"> Update your PR description. Behavior changes are not ""minor cleanup"", even if that behavior is as simple as raising an error where there wasn't one before. Done",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2488#issuecomment-1074139322:121,error,error,121,https://psicode.org,https://github.com/psi4/psi4/pull/2488#issuecomment-1074139322,2,['error'],['error']
Availability,"> Wait, what? Then how is Incremental Fock build set to energy tolerance on the order of 1e-9 giving you errors on the order of 1e-7?. Oh no, I mean the SCREENING threshold is set to 1.0e-9, the energy tolerance is 1.0e-6.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-821209945:63,toler,tolerance,63,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-821209945,3,"['error', 'toler']","['errors', 'tolerance']"
Availability,"> Wait, why do we want to ""turn off the incremental build once a preset level of `D_CONVERGENCE` is achieved""? Is the idea that the numerical creep is within the `D_CONVERGENCE` tolerance?. I would maybe turn it off when the final `D_CONVERGENCE` has been reached, and then do full rebuild(s) until SCF convergence has been achieved. It's been almost a decade since I worked with the equations for direct SCF; wasn't there some cutoff parameter that's used to discard ""small"" elements to the Fock matrix? This may not be accurate enough so it's always safer to do a full build at the end. Again, the point about resets is just to prevent numerical creep, which might require several more costly full rebuilds.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-940988917:178,toler,tolerance,178,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-940988917,1,['toler'],['tolerance']
Availability,"> We should use a more informative/tailored error message.; > ; > But the reason it can't drop a wfn file is because non-Hartree--Fock Hessians are computed by finite difference, so there's at most a dummy wfn with mol, basis, qcvariables, etc. No goodies like MO coefficients or occupations. What piece of data were you seeking?. Ach so, I just found a method to calculate without this wfn,thanks!; btw,I'm looking forward to calculate analytical hessian with DFT for long time, having any plan?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3068#issuecomment-1786389664:44,error,error,44,https://psicode.org,https://github.com/psi4/psi4/issues/3068#issuecomment-1786389664,1,['error'],['error']
Availability,"> Well, as we already have 4.0b5 installed on our systems, we stuck to this version scheme (we ; > suffixed with a date for git builds). So, suddenly going to 1.0 will not work with our version ordering ; > schemes. Well, there are already the 0.1, 0.2 and 0.3 releases - I complained about the number downgrade, got schooled and bit the bullet by introducing an epoch in the version for the packages I maintain. But if the developers decide to switch back to 4.0 as stable version, I won't complain, it's not a big deal to skip version numbers. . In that case I guess there should be a note that psi5 really starts at 0.1 from the beginning (if people still use version numbers by then).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/213#issuecomment-183429072:302,down,downgrade,302,https://psicode.org,https://github.com/psi4/psi4/issues/213#issuecomment-183429072,1,['down'],['downgrade']
Availability,"> What happens if a user runs a computation, toggles whether X2C is on, and then calls the wavefunction's compute_gradient method?. Apparently even the non-rel returns a `psi4.core.RHF`, and since that hasn't had it's `compute_gradient` implemented, the parent `Wavefunction`'s `Analytic gradients are not available for this wavefunction.` is thrown. Not what I was expecting (or probably what someone using a C++ API was expecting), but it does shut down a way to get the wrong answer by evading the Py APi.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2200#issuecomment-869752875:306,avail,available,306,https://psicode.org,https://github.com/psi4/psi4/pull/2200#issuecomment-869752875,2,"['avail', 'down']","['available', 'down']"
Availability,"> What is left for this PR and what level of integration are you shooting for in this first pass?. Running the aforementioned methods from Psi4 and being able to ""see"" the results in the output file and get the most important lot of them (dipole moments, oscillator strength, energies) from the `Wavefunction` object. Support for restricted and unrestricted references. Smooth selection between builtin ADC (only for ADC(2) on RHF and singlet excitations) and adcc (for all the rest). That's not fully there (see my TODO). If you are ok with using more options than in other `select_` cases for the `select_adc2` method, than I'll go ahead and implement that. On that note: I noticed that already for small and simple systems such as cc-pvdz water the adcc ADC(2) and the builtin ADC(2) differ. Since we compare and test our code very thoroughly to reference data from Q-Chem/adcman including test cases of such complexity and derived properties, I would be quite surprised if the error was on our end. I'm not sure what to do with that. At best this is confusing for a user and one should definitely make a statement about in the manual, but still ... obviously one implementation is wrong. I have not worked on the ADC documentation inside Psi4 so far. I am not sure what kind of detail you want in the manual, I'd be very brief, explaining only the Psi4-option for ADC and refer to [adc-connect.org](https://adc-connect.org) for the details on ADC itself. If I understand correctly the main file I have to work on is `doc/sphinxman/source/adc.rst`. Our PR 20 is now basically merged. We'll proceed with the tagging of a release soon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-552363755:981,error,error,981,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-552363755,2,['error'],['error']
Availability,> What is the other possible error during Psi-internal adcc build? 😬. Something libtensor related that I have not investigated further:; ```; copying adcc/visualisation/Spectrum.py -> build/lib.linux-x86_64-3.10/adcc/visualisation; running build_ext; building 'libadcc' extension; creating build/temp.linux-x86_64-3.10; creating build/temp.linux-x86_64-3.10/libadcc; creating build/temp.linux-x86_64-3.10/libadcc/MoSpaces; creating build/temp.linux-x86_64-3.10/libadcc/TensorImpl; creating build/temp.linux-x86_64-3.10/libadcc/guess; creating build/temp.linux-x86_64-3.10/libadcc/pyiface; x86_64-linux-gnu-gcc -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O2 -Wall -g -fstack-protector-strong -Wformat -Werror=format-security -g -fwrapv -O2 -g -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fPIC -I/usr/include/python3.10 -c libadcc/AdcMemory.cc -o build/temp.linux-x86_64-3.10/libadcc/AdcMemory.o -Wall -Wextra -Werror -O3 -isystem /home/tgy/.local/include; libadcc/AdcMemory.cc:26:10: fatal error: libtensor/core/allocator.h: No such file or directory; 26 | #include <libtensor/core/allocator.h>; | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~; compilation terminated.; error: command '/usr/bin/x86_64-linux-gnu-gcc' failed with exit code 1; make[2]: *** [external/downstream/adcc/CMakeFiles/adcc_external.dir/build.make:86: external/downstream/adcc/adcc_external-prefix/src/adcc_external-stamp/adcc_external-build] Error 1; make[1]: *** [CMakeFiles/Makefile2:11798: external/downstream/adcc/CMakeFiles/adcc_external.dir/all] Error 2; make[1]: *** Waiting for unfinished jobs....; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2785#issuecomment-1322477930:29,error,error,29,https://psicode.org,https://github.com/psi4/psi4/pull/2785#issuecomment-1322477930,8,"['Error', 'down', 'error']","['Error', 'downstream', 'error']"
Availability,> Why do we have DipoleInt as a class unrelated to MultipoleInt?. I don't know. There's also `QuadrupoleInt` and `TracelessQuadrupoleInt` which both use L2. Some more senior developer would have to comment on whether a) we should keep all of the multipole classes as-is or b) hard-wire some to the general `MultipoleInt` or c) remove the specialized integral classes entirely. ping @loriab @andysim @jturney,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2496#issuecomment-1077741209:377,ping,ping,377,https://psicode.org,https://github.com/psi4/psi4/pull/2496#issuecomment-1077741209,1,['ping'],['ping']
Availability,"> Would testing COSX results against the implementation in Orca 5 make sense? Of course the grid dependence makes such things tricky. Practically speaking, this should be doable, but one would need to ensure that as many factors between the two implementations as possible are standardized and made the same. Some of these factors (e.g., screening tolerances) shouldn't be that hard, but others (like grids, as you mentioned) would be quite a bit harder and could be quite a thorn in our side for comparing the two implementations. . This question opens up the discussion to another approach I was thinking for this PR - using separate reference energies for COSX and LINK in the scf5 test, rather than comparing against canonical or DF energies. I am rather neutral on that matter, and am definitely open to doing so; but there are some concerns that should be considered with the separate reference energies approach. These are concerns that might not matter as much now; but the scf5 test will undoubtedly be expanded as CompositeJK and new separate J and K algorithms are added to Psi4, and these concerns might pop up then:. 1. Using separate reference energies for each CompositeJK JK build combination, for each O2 multiplicity and SCF reference, could quickly make scf5 quite unwieldy and messy. ; 2. Against what do we compare reference energies? In some cases, it won't be too big of a problem (as with here, where we can compare against ORCA), but I'm willing to bet that there are certain combinations of J and K algorithms that CompositeJK will eventually be able to do, that might not actually be present in other codes to compare against. . Of course, these concerns are more specific to CompositeJK testing, so maybe they're an issue that can punted down the road for when scf5 gets updated again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2768#issuecomment-1306134603:348,toler,tolerances,348,https://psicode.org,https://github.com/psi4/psi4/pull/2768#issuecomment-1306134603,4,"['down', 'toler']","['down', 'tolerances']"
Availability,"> Wow, a lot of PYTHON->Python for you to track down there. Is that syntax change a recent thing? LGTM!. I guess long, long ago, cmake's native python's detection had no notion of finding matching interpreter/library pairs. That reported its results as `PYTHON_FOUND` and friends. Hence numpy/pb11/us used the `FindPythonLibsNew` module that had mixed c++/py in mind and also reported as `PYTHON_*`. But the cmake native detection has been much revamped, reformed, and componentized, enough to [inspire pybind11 to switch over](https://github.com/pybind/pybind11/pull/2370/files). The new setup reports as `Python_*`. The long time it's taken to get cmake's new detection modules hammered out leads to the big jump to 3.15. There may still be plugin and docs build follow-up items, but I think I've caught most of the `Python`s. Main thing ppl have to do is edit their setup scripts if they're hinting the `PYTHON_EXECUTABLE`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2048#issuecomment-764963688:48,down,down,48,https://psicode.org,https://github.com/psi4/psi4/pull/2048#issuecomment-764963688,1,['down'],['down']
Availability,"> Yeah, it's perfectly fine to split things up into multiple PRs. One sensible order I can come up with is:; > ; > 1. Edit the incremental Fock in the derived `DirectJK` class so that it is efficient and maintainable (no SCF iteration counts associated with the object, minimal number of matrices cached on the object, etc.) [some other PR]; > 2. Move this improved incremental Fock to the parent `JK` class. [this PR]; > ; > In a previous comment, I suggested doing away with the cached `J`/`K`/`wK`/`dJ`/`dK`/`dwK` matrices by changing the behavior of the `JK` object so that the buffers aren't cleared between SCF iterations. If you find that difficult to do, I think an acceptable compromise would be to retain those cached matrices, but initialize them in the SCF driver (rather than make them a property of the JK object). Since this PR is already opened, I would actually prefer 2 before 1. I am slammed with my schedule right now, and I think 2 before 1 would be WAYYY easier for me. Is that okay with you @zachglick @JonathonMisiewicz? This PR also immediately fixes the `incfock` issues with `DFJCOSK`, as opposed to punting those fixes down to a future PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2682#issuecomment-1253878406:1147,down,down,1147,https://psicode.org,https://github.com/psi4/psi4/pull/2682#issuecomment-1253878406,2,['down'],['down']
Availability,"> You also have `find_package(Libint ...)` that can't work because libint2 doesn't provide cmake files, and you don't provide them either. libint2 does (or at least can) provide cmake files, even with the 2.6.x releases, but it's somewhat tricky. I don't think anything besides psi4 uses them, and for psi4 they are broken/much bigger issues (see above). As I mentioned in https://github.com/evaleev/libint/issues/190#issuecomment-1003936604 libint2 (experimental Debian 2.7.1 package) gets detected fine, but there are build errors later on.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2398#issuecomment-1008119932:526,error,errors,526,https://psicode.org,https://github.com/psi4/psi4/issues/2398#issuecomment-1008119932,1,['error'],['errors']
Availability,"> You should not have made those graphs. All you know for sure is that the error is less than 1 micro hartree. You cannot tell the difference between 1.0 e-7 and 1.5 e-7, but people read graphs as if you can tell the difference between your data points.; > ; > This is also why you can't just present graphs. You need to be absolutely sure that your labels are clear, and that somebody who isn't you will be able to figure out what the graph means. If you need to add a sentence to explain them, do so.; > ; > I request additional benchmarks so we can get more precise estimates on how much error these techniques introduce. Can you increase energy convergence to `1e-10`?; > ; > Because this PR isn't coming in until 1.5 anyways, I'm going to turn my attention to other things for a while. Ah, I am learning a lot. Good teachers like you will prepare me well for grad school :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-821278069:75,error,error,75,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-821278069,4,['error'],['error']
Availability,"> [psi4-test.txt](https://github.com/psi4/psi4/files/8883628/psi4-test.txt) contains the results of `psi4 --test` kindly let me know if this mean that psi4 is in functional state. Here is the `conda list` output in case it is needed. [psi4-env_conda-list.txt](https://github.com/psi4/psi4/files/8883643/psi4-env_conda-list.txt). Yes, the base Psi4 is functional. All the messages about skipped tests indicate that there are addons that Psi4 _has_ but that your Psi4 installation isn't detecting as installed. Based on your conda list, these are probably not installed, so this behavior is expected. Let us know if there are addons that you need but don't know how to get. (Examples: `dftd4` for DFT dispersion corrections, `cct3` for some exotic coupled cluster variants, `cppe` for polarizable embedding.). > Now I have some compatibility issues against python3.8 but that's with other packages I am trying to use.; > ; > Just to make sure, psi4 is no longer supported on python3.7, right?. The latest Psi4 is no longer supported on Python 3.7, correct. If you need 3.7 support, dropping down to Psi4 1.5 is technically an option.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2598#issuecomment-1152920803:1089,down,down,1089,https://psicode.org,https://github.com/psi4/psi4/issues/2598#issuecomment-1152920803,1,['down'],['down']
Availability,> ```; > rows_per_bucket = -1622894080; > nbuckets = -18256; > rows_left = -1312595486; > ```; > ; > This immediately makes me suspect a type overflow error. Thanks for everything thus far. Or possibly an unsigned underflow that got cast to signed.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2261#issuecomment-1227204536:151,error,error,151,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1227204536,1,['error'],['error']
Availability,"> ah, was this choking in `OEProp` when you pushed an EOM wfn? or was it computing properly and just giving the redundant name? regardless, good catch. Computing properly and not giving the expected `CCSD DIPOLE`. This led to an error when I fixed a bug in AJ's code. That should be fixed in the next `cc` series PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2533#issuecomment-1089317532:112,redundant,redundant,112,https://psicode.org,https://github.com/psi4/psi4/pull/2533#issuecomment-1089317532,2,"['error', 'redundant']","['error', 'redundant']"
Availability,"> do not appear to be any auxiliary basis sets available for the density fitting procedure that's used in the SCF and, I believe, the SAPT parts. If I'm following this correctly, you are talking about RI fitting for Li? It looks like the EMSL BSE was missing that, but I've taken the values from turbomole for the new BSE. (The developers of that fitting basis were turbomole developers)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1557#issuecomment-467228938:47,avail,available,47,https://psicode.org,https://github.com/psi4/psi4/issues/1557#issuecomment-467228938,1,['avail'],['available']
Availability,"> error: process exited with status -1 (cannot attach to process due to System Integrity Protection); > (lldb). Are you using the system python? I have SIP disabled but I would not be surprised if you can't attach the debugger to an executable that falls under that protection. . To disable SIP you need to reboot into recovery mode, then reboot again for it to take effect.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/491#issuecomment-258535598:2,error,error,2,https://psicode.org,https://github.com/psi4/psi4/issues/491#issuecomment-258535598,4,"['error', 'reboot', 'recover']","['error', 'reboot', 'recovery']"
Availability,"> general note: now that I have the correct base of master, azure should run and fail on mbis-3. @zachglick tracked the problem down to nondeterministic root solutions of the degenerate states. a PR will happen. follow-up: I've removed mbis-3 from quicktests so this one can merge. note that it's a known failure in full tests for now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2003#issuecomment-688988721:128,down,down,128,https://psicode.org,https://github.com/psi4/psi4/pull/2003#issuecomment-688988721,2,"['down', 'failure']","['down', 'failure']"
Availability,"> hello, I'll try to work on the replies and changes to have it completed by the end of the week, might I ask what's the timeframe we're working here before 1.4 stable release?. We're probably looking at rc3 asap and stable 1.4 next week. So end-of-the-week is fine. As I see it, the items are:; * remove no_com, etc. if not really needed; * clarify in docstrings whether 1.9 is R_eq or AA; * allow uncp in `ACTV` rather than hardcoding both it and `ACTV_CP` to cp, unless there's a good reason not to; * the suggestion about deduplicating the two files might be possible, but I don't think it's worth it for a db; * I don't recall why CI/Azure was failing on your last commit, but there were certainly points where it was psi4 master's fault, so you may need to rebase.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2154#issuecomment-870728272:737,fault,fault,737,https://psicode.org,https://github.com/psi4/psi4/pull/2154#issuecomment-870728272,1,['fault'],['fault']
Availability,"> heya it says 40 passed, 51 skipped, 4026 deselected, 1x failed in 283.19s (0:04:43). no failed or errors, so it seems to be working fine. https://docs.pytest.org/en/7.1.x/how-to/output.html?highlight=xpass#producing-a-detailed-summary-report. > also how do you copy paste i try the ctrl+shift+c but it doesn't look as it should. you'd have to look that up for your OS and terminal",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2614#issuecomment-1175773574:100,error,errors,100,https://psicode.org,https://github.com/psi4/psi4/issues/2614#issuecomment-1175773574,1,['error'],['errors']
Availability,"> oh no, not again. Yes, one had to download patched files for the previous version from their homepage. See [the issue about the 2020 release](https://github.com/psi4/psi4/issues/1866) for additional information on ""the previous version"" and Psi.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2497#issuecomment-1077599645:36,down,download,36,https://psicode.org,https://github.com/psi4/psi4/issues/2497#issuecomment-1077599645,1,['down'],['download']
Availability,"> requiring pytest 7 -> so when you build a package using setup.py you can declare dependency-targets. I can't figure out how Psi4 is packaged now that setup.cfg is gone, but perhaps adding pytest as a dependency of an optional [testing] target might be a simpler way out?. I've so far resisted hooking up psi4's CMake to a setup.py, so the `[testing]` route won't work. I'm hoping that with https://github.com/psi4/psi4/pull/2454/files#diff-fb6a686182f16eb54af3c628f38593f347f68aba31de903983023c560288d7a1R2, pytest itself will raise a sensible error. I have previously included pytest in the psi4 package https://github.com/psi4/psi4meta/blob/master/conda-recipes/psi4-multiout/meta.yaml#L91, but I was planning to suppress that for a while until defaults catches up. > disable warnings-as-errors from docs build due to ""circular import"" -> let's make an issue and then it's fine by me. Yes, already fixed in qcel master https://github.com/MolSSI/QCElemental/pull/286",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454#issuecomment-1079351845:546,error,error,546,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1079351845,4,['error'],"['error', 'errors']"
Availability,"> svwn_hessian_module shows 15 failures, now that I check that... Can I just halve the default value? That will make RKS behavior as it was before. UKS will stay change, but I think that's unavoidable. Unless you think new (w/PR) analytic value is better than before (in which case I need to re-collect refs), I agree on halving the default. That's equivalent to tightening up occ/dfocc to work under standard options settings. All stdsuite is run under standard conv and options (besides points=5; otherwise nothing would match).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2834#issuecomment-1349608028:31,failure,failures,31,https://psicode.org,https://github.com/psi4/psi4/pull/2834#issuecomment-1349608028,1,['failure'],['failures']
Availability,"> that's a common problem when adding new functionals. The list of available functionals is updated by the make system by running get_funcs.pl. The easiest way to force the list to be regenerated is to remove the build directory and rebuild. aha, thanks. you can also just add a blank line to top-level CMakeLists.txt to retrigger cmake config. LRC-BOP now working. >> I want to work on converting the c-f recipe to cmake and building out for Windows, so I may have some build MRs over at libxc. > What do you mean?. I mean I'm trying to build out the conda-forge arch matrix for libxc (https://github.com/conda-forge/libxc-feedstock/pull/8) so that psi4 windows can pull a pre-built libxc instead of doing an internal build. So I may have merge requests in your intervening week before v5.1 tagging.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-755827197:67,avail,available,67,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-755827197,1,['avail'],['available']
Availability,"> tol=14 or 15, everyone?. I have the impression PSI4 always leans on the conservative side of thresholds, instead of tuning things for speed. Also, perhaps for floppy frequencies or similarly sensitive calculations one wants to be as safe as possible. Then tol=15 might be the safe choice. But..on the other hand it is DFT and the error from the quadrature itself is larger except for impractically large grids, I suppose. The often tight gradients and frequencies tests of psi4 pass with the current tolerance of 14. A dynamic adjustment of the threshold could be envisioned, but I think that would be overkill.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1581#issuecomment-498769923:332,error,error,332,https://psicode.org,https://github.com/psi4/psi4/pull/1581#issuecomment-498769923,2,"['error', 'toler']","['error', 'tolerance']"
Availability,"> turns out the downloaded basis sets files from the SI don't comply with the expected angular momentum notation. E.g. there is a J where a K should be. (psi4 does G-H-I-K-L etc.). Great, a third standard.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1346#issuecomment-437581927:16,down,downloaded,16,https://psicode.org,https://github.com/psi4/psi4/pull/1346#issuecomment-437581927,1,['down'],['downloaded']
Availability,"> uh-oh, it's finding pedantic errors in integratorxx now `/include/integratorxx/generators/s2_factory.hpp:24:2: error: extra ‘;’ [-Wpedantic]` . this would be a fault of our appending to `CMAKE_CXX_FLAGS`, which wasn't so outrageous back in the day.; > ; > thinking about it, there would be a lot more of these interferences with other projects if the CI wasn't detecting so much as pre-built. which means that developers building deps from source will likely have builds fail since force_pydantic defualts to ON and if the dep projects aren't pedantic clean. so this was probably a lucky block to the merge.; > ; > I'm not sure right off if there's a quick+good solution. you could move the option to here https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L222 _after_ the externals have been added. and maybe turn the default to OFF but add it (`-D`) as ON to the azure CI. I'm going to put a needs-changes block so I remember it isn't just a spurious test fail in the merge queue. lmk if you disagree with any of my hasty conclusions. Yeah, I feel like I ran into this issue previously with Einsums. It's part of why I was so concerned about this PR in the first place, and whether `FORCE_PEDANTIC` should be on by default. I can definitely toy around and see if I can get the pedantic flag to only apply to Psi-side code, like you suggested. Worst-case scenario, we just turn `FORCE_PEDANTIC` off by default?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3145#issuecomment-2017950145:31,error,errors,31,https://psicode.org,https://github.com/psi4/psi4/pull/3145#issuecomment-2017950145,3,"['error', 'fault']","['error', 'errors', 'fault']"
Availability,"> v2rdm strikes again! :-); > ; > fwiw, the original author (DePrince) isn't dedicated to preserving the plugin, but it's handy for catching things that may affect downstream users. Right now we're pulling from https://github.com/loriab/v2rdm_casscf/tree/v2rdm8, so if you want to PR a switchout of ERISeive to there for post-1.8, that'd be fine. In any case, it might be worth getting in a deprecation warning now for v1.8 on ERISeive. Thank you for the heads-up on this! I'll work on getting rid of ERISieve there, as well, and deprecate ERISieve here for 1.8. With this PR being connected to v2rdm_casscf, it'd probably be wise to make this PR post-1.8.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2933#issuecomment-1527891258:164,down,downstream,164,https://psicode.org,https://github.com/psi4/psi4/pull/2933#issuecomment-1527891258,1,['down'],['downstream']
Availability,">; > File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 1052, in optimize; > G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); > File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 710, in gradient; > **kwargs); > File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 183, in _process_displacement; > derivative, wfn = derivfunc(method, return_wfn=True, molecule=clone, **kwargs); > File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 556, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 2018, in run_scf; > dfmp2_wfn.compute_energy(); >; > RuntimeError:; > Fatal Error: There are no occupied orbitals with beta spin.; > Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1563933640427/work/psi4/src/psi4/dfmp2/mp2.cc on line: 196; > The most recent 5 function calls were:; >; >; >; >; > Printing out the relevant lines from the Psithon --> Python processed input file:; > core.set_global_option(""DFT_SPHERICAL_POINTS"", 434); > core.set_global_option(""DFT_RADIAL_POINTS"", 85); > core.set_global_option(""REFERENCE"", ""uhf""); > set_memory(100000000000); > try:; > --> optimize('pwpb95-d3bj'); > except SCFConvergenceError as e:; > unconverged_scf_wfn = e.wfn; > unconverged_scf_wfn.to_file(unconverged_scf_wfn.get_scratch_filename(180)); > core.set_global_option(""GUESS"", ""read""); > optimize('pwpb95-d3bj'); >; > Psi4 stopped on: Friday, 21 August 2020 04:21PM; > Psi4 wall time for execution: 0:00:04.47; >; > *** Psi4 encountered an error. Buy a developer more coffee!; > *** Resources and help at github.com/psi4/psi4.; >; > As I am fairly new to quantum chemistry, I do not really know how to; > interpret this error.; >; > Any pointers are appreciated.;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1995#issuecomment-682586879:3486,Error,Error,3486,https://psicode.org,https://github.com/psi4/psi4/issues/1995#issuecomment-682586879,1,['Error'],['Error']
Availability,">= 1.12 is very reasonable as it's a few years old, and I think pins like >= 1.16 are likely to happen elsewhere. Following your suggestion, conda chokes with more errors than fit on my terminal's history, but mamba complains about . ```; Problem: package ambertools-20.0-py37h18738c5_0 requires netcdf-fortran >=4.5.2,<4.6.0a0, but none of the providers can be installed; ```. yet here's a 4.5.3 online: https://anaconda.org/conda-forge/netcdf-fortran/files / https://anaconda.org/conda-forge/netcdf-fortran/files/modal/info/5f8e0b60a58f0d0a54b46bb2. hdf5 1.10.6 seems to be in the recent psi4 builds, so that shouldn't be the issue. Maybe it's the fortran stuff, it's confusing how and why `libgfortran`/`libgfortran4`/`libgfortran5` all coexist at once.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2024#issuecomment-718357532:164,error,errors,164,https://psicode.org,https://github.com/psi4/psi4/issues/2024#issuecomment-718357532,1,['error'],['errors']
Availability,">> All relevant error information should end up in the error box, not just stderr. > OK. Would the inverse be acceptable? ie. nothing going to stderr, only to the error box. Haven't investigated, but my first thought is that error box only would work",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2700#issuecomment-1236169643:16,error,error,16,https://psicode.org,https://github.com/psi4/psi4/pull/2700#issuecomment-1236169643,4,['error'],['error']
Availability,">> I do think we should try to get the changes into one psi4 release cycle. > Regarding the deprecation message/schedule: do you mean that they should be deprecated now and then removed before 1.7 RC1?. I think deprecation warnings (with code still functional) need to be in at least one release. So the code can be broken as soon as ~Dec (after 1.7.0 release). But what I was meaning to say with ""get the changes into one psi4 release cycle"" was let's aim to get all the immediate-breaks and/or notifications in before 1.7.0 so that downstream users have the info to do a single overhaul after 1.7.0. Keep pinging me if this doesn't make sense :-)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2693#issuecomment-1259615160:534,down,downstream,534,https://psicode.org,https://github.com/psi4/psi4/pull/2693#issuecomment-1259615160,2,"['down', 'ping']","['downstream', 'pinging']"
Availability,">>> sometimes the non-OO value (e.g., MP2, LCCD) is available as an early byproduct of the OO calc (e.g., OMP2, OLCCD). this wasn't the case with REMP, and some QCVariables that stored a purported non-OO REMP had to be removed. >> MP2 should also be available from the guess. But it is of course better to not print/store something than to print something wrong. I might be mistaken, but given that occ does coupled DIIS for amplitudes and orbitals, the canonical LCCD enery should not be available from an OLCCD calculation (lccd is never iterated on canonical orbitals). The same holds for REMP2. So yes, if there are variables pretending to be canonical results from an orbital-optimized calculation, these should probably be removed. No problem, it was mostly my fault to put way too many changes into a single pull request based on an ancient master branch. > This is completely correct. The lone OLCCD algorithm in occ does not compute LCCD with the input orbitals. Great, thanks. `oremp2` is in good shape, then, and I'll add negative assertions for `olccd`. Here's the summary of what gets checked (details are at QCEngine): https://github.com/psi4/psi4/pull/2653/files#diff-e2cf14f98c8e885f5abc7385ca737bfeba9f2f62caead630129e6d7cd9678e71R193-R203",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2653#issuecomment-1201257770:52,avail,available,52,https://psicode.org,https://github.com/psi4/psi4/pull/2653#issuecomment-1201257770,4,"['avail', 'fault']","['available', 'fault']"
Availability,"?C_DGGSVD3@psi@@YAHDDDHHHPEAH0PEANH1H111H1H1H1H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dggsvp3，该符号在函数 ""int __cdecl psi::C_DGGSVP3(char,char,char,int,int,int,double *,int,double *,int,double,double,int *,int *,double *,int,double *,int,double *,int,int *,double *,double *,int)"" (?C_DGGSVP3@psi@@YAHDDDHHHPEANH0HNNPEAH10H0H0H100H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgtcon，该符号在函数 ""int __cdecl psi::C_DGTCON(char,int,double *,double *,double *,double *,int *,double,double *,double *,int *)"" (?C_DGTCON@psi@@YAHDHPEAN000PEAHN001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgtrfs，该符号在函数 ""int __cdecl psi::C_DGTRFS(char,int,int,double *,double *,double *,double *,double *,double *,double *,int *,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DGTRFS@psi@@YAHDHHPEAN000000PEAH0H0H0001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgtsv，该符号在函数 ""int __cdecl psi::C_DGTSV(int,int,double *,double *,double *,double *,int)"" (?C_DGTSV@psi@@YAHHHPEAN000H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgtsvx，该符号在函数 ""int __cdecl psi::C_DGTSVX(char,char,int,int,double *,double *,double *,double *,double *,double *,double *,int *,double *,int,double *,int,double *)"" (?C_DGTSVX@psi@@YAHDDHHPEAN000000PEAH0H0H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgttrf，该符号在函数 ""int __cdecl psi::C_DGTTRF(int,double *,double *,double *,double *,int *)"" (?C_DGTTRF@psi@@YAHHPEAN000PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgttrs，该符号在函数 ""int __cdecl psi::C_DGTTRS(char,int,int,double *,double *,double *,double *,int *,double *,int)"" (?C_DGTTRS@psi@@YAHDHHPEAN000PEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dhgeqz，该符号在函数 ""int __cdecl psi::C_DHGEQZ(char,char,char,int,int,int,double *,int,double *,int,double *,double *,double *,double *,int,double *,int,double *,int)"" (?C_DHGEQZ@psi@@YAHDDDHHHPE",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:26783,error,error,26783,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"?C_DPBTRS@psi@@YAHDHHHPEANH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpocon，该符号在函数 ""int __cdecl psi::C_DPOCON(char,int,double *,int,double,double *,double *,int *)"" (?C_DPOCON@psi@@YAHDHPEANHN00PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpoequ，该符号在函数 ""int __cdecl psi::C_DPOEQU(int,double *,int,double *,double *,double *)"" (?C_DPOEQU@psi@@YAHHPEANH000@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dporfs，该符号在函数 ""int __cdecl psi::C_DPORFS(char,int,int,double *,int,double *,int,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DPORFS@psi@@YAHDHHPEANH0H0H0H000PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dposv，该符号在函数 ""int __cdecl psi::C_DPOSV(char,int,int,double *,int,double *,int)"" (?C_DPOSV@psi@@YAHDHHPEANH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dposvx，该符号在函数 ""int __cdecl psi::C_DPOSVX(char,char,int,int,double *,int,double *,int,char,double *,double *,int,double *,int,double *,double *,double *,double *,int *)"" (?C_DPOSVX@psi@@YAHDDHHPEANH0HD00H0H0000PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpotrf，该符号在函数 ""int __cdecl psi::C_DPOTRF(char,int,double *,int)"" (?C_DPOTRF@psi@@YAHDHPEANH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpotri，该符号在函数 ""int __cdecl psi::C_DPOTRI(char,int,double *,int)"" (?C_DPOTRI@psi@@YAHDHPEANH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpotrs，该符号在函数 ""int __cdecl psi::C_DPOTRS(char,int,int,double *,int,double *,int)"" (?C_DPOTRS@psi@@YAHDHHPEANH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dppcon，该符号在函数 ""int __cdecl psi::C_DPPCON(char,int,double *,double,double *,double *,int *)"" (?C_DPPCON@psi@@YAHDHPEANN00PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dppequ，该符号在函数 ""int __cdecl psi::C_DPPEQU(char,int,double *,double *,double *,double *)"" (?C_DPPEQU@psi@@YAHDHPEAN000@Z) 中被引用; F:\",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:34500,error,error,34500,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"@AlexHeide, your suggestion to compute an energy is an excellent one. How do we do it? I'm available to work on this, but not sure where to start putting the catch. Feel free to cue me on Slack if that's more convenient.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2971#issuecomment-1571236559:91,avail,available,91,https://psicode.org,https://github.com/psi4/psi4/issues/2971#issuecomment-1571236559,1,['avail'],['available']
Availability,"@CDSherrill , the halfway-corrected version of bullet 2nd energy above is. ```; molecule ne {\nNe\n}; set basis cc-pVDZ; set transqt2 delete_tei false; energy('cisd'); energy('fci', bypass_scf='True'); ```. where the integrals from the CISD aren't available for the FCI calc. I think we had seen this earlier with the file numbers used by detci aren't registered in psifiles.h . This input is in a docstring in `lib/python/energy.py`, not `tests/` so we could just drop it from there for now and add an issue if it's an involved fix.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/149#issuecomment-122484876:248,avail,available,248,https://psicode.org,https://github.com/psi4/psi4/issues/149#issuecomment-122484876,1,['avail'],['available']
Availability,"@CDSherrill . Oh, and if an error's raised but not caught, it just shows the traceback and triggers coffee:. ```; PsiException: Could not converge SCF iterations in 4 iterations. Failed to converge. Traceback (most recent call last):; File ""stage/usr/local/psi4/bin/psi4"", line 269, in <module>; exec(content); File ""<string>"", line 30, in <module>; File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 2008, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 1362, in scf_helper; e_scf = scf_wfn.compute_energy(); File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 93, in scf_compute_energy; raise e; File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 86, in scf_compute_energy; self.iterations(); File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 358, in scf_iterate; raise ConvergenceError(""""""SCF iterations"""""", self.iteration_). ConvergenceError: Could not converge SCF iterations in 4 iterations. Psi4 stopped on: Wednesday, 08 August 2018 05:42PM; Psi4 wall time for execution: 0:00:01.01. *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.; ```. It looks like [`die_if_not_converged`](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libpsi4util/process.cc#L105-L113) toggled print-error-msg/die+traceback previously for SCF and DETCI, with defaulting toward print-error-msg. I think it's better to default toward die ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1130#issuecomment-411567479:28,error,error,28,https://psicode.org,https://github.com/psi4/psi4/pull/1130#issuecomment-411567479,1,['error'],['error']
Availability,"@CDSherrill . [This](https://github.com/psi4/psi4/blob/1.2.x/psi4/src/psi4/libscf_solver/hf.cc#L631-L639) was the v1.2 behavior so print error msg or die, depending on settings. Previous scfitertopy behavior was always to throw generic ConvergenceError with msg and niter. Now, throw SCFConvergenceError with msg, niter, and wfn attached.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1130#issuecomment-411563673:137,error,error,137,https://psicode.org,https://github.com/psi4/psi4/pull/1130#issuecomment-411563673,1,['error'],['error']
Availability,"@CDSherrill, nominally, yes. We've a test case that sets `memory 2 mb` to test an algorithm, and it runs just fine. Of course, we've never tested psi4 on a platform that has only 2–256 MB available. In general, I'm with you that I'd rather the minimum at which it complains was lower than the default: 100 or 256 mb. But it's not too hard to get around: `psi4.core.set_memory_bytes(2000)` will happily set internal memory to 2kb.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/641#issuecomment-285734725:188,avail,available,188,https://psicode.org,https://github.com/psi4/psi4/pull/641#issuecomment-285734725,1,['avail'],['available']
Availability,"@JGrantHill yes, I think it's definitely affected. The quicker solution will probably slow down the delta Hartree--Fock step b/c it won't reuse integrals. But eventually that could be restored. I'm still working on the gradients issue #3066 but I hope to look into this soon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1968#issuecomment-1825937582:91,down,down,91,https://psicode.org,https://github.com/psi4/psi4/issues/1968#issuecomment-1825937582,1,['down'],['down']
Availability,"@JonathonMisiewicz . Let's subdivide further into 3 issues: the dfocc pcg, the occ lccd, and the occ olccd. * dfocc pcg: I think with the switch to coupling to `tol_t2` we're both satisfied. your approach fixes all the tests with far fewer iterations than my original sol'n; * occ lccd: you're right that the three errors were in spin components. I found that a `0.5 * tol_Eod` adds a single iteration about a quarter of the time, and fixes all the tests. Since triggering convergence on a small energy _rise_ is already a little unexpected, this prefactor doesn't bother me. I'm not adamant though -- adjusting e_conv for the stdsuite tests is a lot more palatable than adjusting pcg_conv.; * occ olccd: there's two errors -- one in spin components and another with the correlation energy itself (below). I tried to back off the prefactor, but nothing looser than a full order of magnitude fixed the tests. It's adding 2-4 iterations to every test (so 8-11 iterations becomes 10-14). That's severe, especially as it affects all the oo methods, not just olccd. So if you think it's better to skip this fix for a while, I'm ok with that. . `test_olccd_energy_module[olccd uhf conv ae: * occ -qz2p-ene0] OLCCD CORRELATION ENERGY: computed value (-0.21805777) does not match (-0.21805608) to atol=1e-06 by difference (-0.00000169).`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1980#issuecomment-677068760:315,error,errors,315,https://psicode.org,https://github.com/psi4/psi4/pull/1980#issuecomment-677068760,2,['error'],['errors']
Availability,"@JonathonMisiewicz @loriab I think I understand now, I thought you had to use an explicit `std::move` but that is only for an **`lvalue`**, you can do . ```c++; std::shared_ptr<TwoBodyAOInt>(factory->erf_eri(omega_); ```. where `erf_eri` returns a `std::unique_ptr` because its a **temporary `rvalue`**. My bad sorry for the misunderstanding. . Regardless I will track down the failing test.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2775#issuecomment-1316328355:369,down,down,369,https://psicode.org,https://github.com/psi4/psi4/pull/2775#issuecomment-1316328355,1,['down'],['down']
Availability,"@JonathonMisiewicz I reran my timings on a growing system of water clusters for density screening and the new incfock algorithm. The basis set is 6-31G*, and the screening is the Psi4 default of `1.0e-12`. The errors are well within SCF convergence (1.0e-6), and the time savings remain significant (albeit with a tighter screening tolerance). ![dscreen_time_wc](https://user-images.githubusercontent.com/60559795/137191849-d0fc9f07-5dc1-4e61-89ab-5b9bd552a011.png); ![dscreen_diff_wc](https://user-images.githubusercontent.com/60559795/137191850-9ee6311c-f898-4064-857e-90e95be8bad6.png)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-942599138:210,error,errors,210,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-942599138,2,"['error', 'toler']","['errors', 'tolerance']"
Availability,"@JonathonMisiewicz I'm not using conda at all, as described above, i started from a clean directory, cloned the source, ran cmake and make. The libint is the one that is automatically downloaded if no libint was found:; ```; -- Suitable Libint2 could not be located, Building Libint2 5-4-3-6-5-4 instead.; ```; in the cmake step and; ```; [ 10%] Performing download step (download, verify and extract) for 'libint2_external'; [ 12%] Performing download step (download, verify and extract) for 'pybind11_external'; -- Downloading...; dst='/scr/behnle/psi4_clean_cmake_3.19/psi4/objdir/external/upstream/libint2/libint2_external-prefix/src/Libint2-export-5-4-3-6-5-4_mm4f12ob2.tgz'; timeout='none'; inactivity timeout='none'; -- Using src='https://github.com/loriab/libint/releases/download/v0.1/Libint2-export-5-4-3-6-5-4_mm4f12ob2.tgz'; -- Downloading...; ``` ; in the make step. @loriab Thanks for the quick reply, i will try and report back.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2572#issuecomment-1121208944:184,down,downloaded,184,https://psicode.org,https://github.com/psi4/psi4/issues/2572#issuecomment-1121208944,8,"['Down', 'down']","['Downloading', 'download', 'downloaded']"
Availability,"@JonathonMisiewicz It wasn't able to complete, it had a ""bad alloc"" error. However, the .dat file was 105,000 lines long, it had done many geometry iterations as well as scf iterations for each one, and the last scf iteration had completed in 8 steps. So it looked fine. My other jobs also ended prematurely, which is too bad. I have started them again. I think I need to add more memory to the machine...So I will make sure I don't overload the server this time. I am currently also (in addition) running it using B3LYP/6-31G* just to see how that goes, since it is quick and dirty. The one that had `bad alloc` was running these specs. ```; memory 40 Gb. set {; basis def2-tzvp; maxiter 100; g_convergence gau; soscf true; soscf_max_iter 40; guess sad; guess_persist true; opt_coordinates both; }; set_num_threads(20); E, wfn = optimize('B3LYP-D3', bsse_type='cp', return_wfn=True); fchk(wfn, 'citric_acid_bsse_cp.fchk'). def saveFile(name, string):; f=open(name, 'w'); f.write(string); f.close(). saveFile('citric_acid.optimized.dimer_geometry_bsse_cp.log', wfn.molecule().save_string_xyz_file()); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2338#issuecomment-957463262:68,error,error,68,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-957463262,1,['error'],['error']
Availability,"@JonathonMisiewicz To reference the treating the D separately, we are calculating the change in the density matrix, or delta D if we are not in the first iteration, the delta J, K, and wKs are added to the J and K in the post-iteration step. That way, incremental Fock build is available for all JK types. Basically knowledge of the iteration is needed so we know when to set up the delta D matrices. (It is also needed for my future CFMM and linK PRs, where we do NOT want to run linK or CFMM on the SAD guess)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-937307252:278,avail,available,278,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-937307252,1,['avail'],['available']
Availability,"@JonathonMisiewicz Yeah, I realized that I was doing redundant work. I fixed this issue. Great catch, thank you for pointing that out. Please continue review :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-1035839142:53,redundant,redundant,53,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-1035839142,1,['redundant'],['redundant']
Availability,"@JonathonMisiewicz looks like most things worked except one of the linux builds failed for an issue that I don't think is related to my patch:. ```CMake Error at /usr/local/share/cmake-3.24/Modules/FindPackageHandleStandardArgs.cmake:230 (message):; Could NOT find Python (missing: Python_NumPy_INCLUDE_DIRS Interpreter; NumPy) (found suitable version ""3.8.10"", minimum required is ""3.8""); ```. Not sure how to proceed here.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2667#issuecomment-1212370317:153,Error,Error,153,https://psicode.org,https://github.com/psi4/psi4/pull/2667#issuecomment-1212370317,1,['Error'],['Error']
Availability,"@JonathonMisiewicz please tag me next time ;). The check should be human readable. Please declare new variables for all of the results of the ternary operations. If I were to write a size check for a matrix multiply of `C(m,n) = A(m,k) B(k,n)`, I would write the check something along the lines of `if((m_in != m_out) || (n_in != n_out) || (k1 != k2))`. And yes, in case of an error, one should print out the dimensions of all three matrices.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2729#issuecomment-1262451178:377,error,error,377,https://psicode.org,https://github.com/psi4/psi4/pull/2729#issuecomment-1262451178,1,['error'],['error']
Availability,"@JonathonMisiewicz smaller here means the number of bytes in the psio entry. The piso unit (`PSIF_LIBTRANS_DPD`) and the TOC key `MO Ints (OO|OV)` point to a unique entry. Based on the error you are seeing that means that the number of bytes written to that entry by `OMP2` code or by some call made by the `OMP2` was smaller than the number of bytes that the line you linked is trying to write. I am not familiar with the `ID` macro, but I am assuming it is defined outside each module and that is not the source of the problem, and since the size of the Alpha occupied/virtual space hasn't changed it could be that the entry on file was written in the `OMP2` code with the bra packed?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1288#issuecomment-435213821:185,error,error,185,https://psicode.org,https://github.com/psi4/psi4/issues/1288#issuecomment-435213821,1,['error'],['error']
Availability,"@JonathonMisiewicz something to keep in mind, that may help while investigating the bug, The error you are seeing is raised by psio when it checks that a particular write won't extend into the next entry. So there may be differences in the size of other blocks, however if the overwrite is smaller than the old quantity you will never write into the next entry and an error wont occur.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1288#issuecomment-435203050:93,error,error,93,https://psicode.org,https://github.com/psi4/psi4/issues/1288#issuecomment-435203050,2,['error'],['error']
Availability,"@JonathonMisiewicz; Based upon a build of the documentation target (local equivalent is `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit 238aecf08 has been issued to your PR branch; * the commit updates 96 files in `samples/` based on `tests/`; * if changes are ok, synchronize your local branch to your GH fork through (approximately) `git pull --rebase origin jonathonmisiewicz-patch-1`; * if changes are objectionable, synchronize your GH fork to your local branch through (approximately) `git push origin jonathonmisiewicz-patch-1 --force`. However, you can't avoid the update forever; * ask for help in the PR if you have git questions. * an automated pull request https://github.com/psi4/psi4docs/pull/5 has been issued to the docs website repo; * the pull request previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes there at the netlify/psi4manual/deploy-preview check. Edit your PR branch here as needed; no further action on auto PR required; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2468#issuecomment-1064377911:1085,down,downloading,1085,https://psicode.org,https://github.com/psi4/psi4/pull/2468#issuecomment-1064377911,1,['down'],['downloading']
Availability,"@Konjkov could you show some of the output above the `PSIO_ERROR`? I am not sure that DF integrals is the culprit here. It would be easier to track down if I could see where in the second exited state it is failing. I ran the input you posted but I don't see the same PSIO_ERROR. It is strange that the first excited state would be able to run if the integrals were incompatible. Also, the file number 128 is a temporary file used by the CC codes to store things with a short lifetime. If the integrals were the source of the problem I would expect this kind of error to show up when trying to read some persistent quantity, which would then be used to compute the values that would go into file 128. . @kannon92 do you have an input that will cause the `PSIO_ERROR` if DF is used? The driver should probably soft-fail with a warning to turn DF off in these cases. It would be very frustrating for a job to run this far just to fail.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/307#issuecomment-194417745:148,down,down,148,https://psicode.org,https://github.com/psi4/psi4/issues/307#issuecomment-194417745,2,"['down', 'error']","['down', 'error']"
Availability,"@MartinBeseda, there's a chance you don't have the same problem as the OP but just have the same error message. If you've got an existing gau2grid installation (which can only be built through cmake or setup.py (that runs cmake behind the scenes) and thus always installs `gau2gridConfig.cmake`), but psi4 or another downstream with `find_package(gau2grid CONFIG)` isn't detecting it and is printing the error in the issue, you can pass `-Dgau2grid_DIR=/path/to/dir/of/gau2gridConfig.cmake` to the downstream build to guide it. https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L62. If you're looking to compile but not package, also note that you can get all the deps pre-build from conda https://admiring-tesla-08529a.netlify.com/installs/v13/ (select ""source"").",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1588#issuecomment-482921785:97,error,error,97,https://psicode.org,https://github.com/psi4/psi4/issues/1588#issuecomment-482921785,8,"['down', 'error']","['downstream', 'error']"
Availability,"@PeterKraus . > I have realised that I couldn't find any assertion rewriting handler for pytest. Can you check that a failing test executed with pytest prints a reasonable AssertionError? I'd have thought you'd have to add the compare_* functions into pytest's assertion database using pytest.register_assert_rewrite(""<module>""). Below is a usual failure printing (basic is psiapi and tu1 is psithon). Current status has generally been ok since comparison functions are passed through https://github.com/psi4/psi4/blob/master/tests/pytests/utils.py#L37 . I'll have to look into `pytest.register_assert_rewirte`, though, as I haven't met it before. Thanks!. ```; > (gha_eco_rb5) PYTHONPATH=stage/lib/ pytest stage/lib/psi4/tests/ -k ""basic or tu1""; ============================================================================================================ test session starts ============================================================================================================; platform linux -- Python 3.10.0, pytest-7.1.0, pluggy-0.13.1; rootdir: /psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4, configfile: pytest.ini; plugins: forked-1.3.0, xdist-2.3.0; collected 3507 items / 3504 deselected / 3 selected . stage/lib/psi4/tests/test_psi4.py F [ 33%]; stage/lib/psi4/tests/test_psi4_qcschema.py . [ 66%]; stage/lib/psi4/tests/tu1-h2o-energy/test_input.py F [100%]. ================================================================================================================= FAILURES ==================================================================================================================; ______________________________________________________________________________________________________________ test_psi4_basic ______________________________________________________________________________________________________________. @pytest.mark.smoke; def test_psi4_basic():; """"""tu1-h2o-energy""""""; #! Sample HF/cc-pVDZ H2O computation; ; h2o = psi4.geometry(""""""; O; H 1 0.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:347,failure,failure,347,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888,2,['failure'],['failure']
Availability,"@PeterKraus thanks for this helpful update. This will eliminate some redundant computations, which is helpful (especially for people who just want a dimer IE). Thanks also for testing the gradients. I have one quibble with the user interface. What happens if a user tries to run an optimization but only uses bsse_type=['cp']? The monomer energies in the monomer basis sets need to be calculated so that we have total energies... trying to optimize the interaction energy only, without some special constraints in the optimizer to keep the monomers frozen (a capability we do not have automated right now), will give garbage. 99% of users will not be clever enough to realize that if they want the counterpoise-corrected geometry of a dimer, they need to include ""nocp"" in their bsse_type list. Can you solve this by forcibly adding monomers (and perhaps option ""nocp"" internally, if you want) when an optimization is requested? I would like to head off a lot of posts on the user forum about CP-corrected optimizations that went wrong :). Minor question about printing. I agree that things that are not total energies should not be printed in the total energy column. However, what are you doing if bsse_type='cp'? Leaving it blank? That might cause a problem for anyone trying to scrape the output file. Should there be something there, like ""n/a"" or something?. Also, when you do print the total energy, it's the same total energy as before your PR, right? The total energy of a dimer should be E_AB(AB) minus the Boys-Bernardi estimate of the BSSE, which is [E_A(AB) - E_A(A) + E_B(AB) - E_B(B)]",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1691#issuecomment-869885254:69,redundant,redundant,69,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-869885254,1,['redundant'],['redundant']
Availability,"@PhillCli . > as a follow up from #1948 the original issue was resolved, but I've missed another edge-case, where setting freeze_core True results in empty-blocks in mp2 terms ... (sorry for being such a pain).; I've hacked away a solution and additional regression tests (should I add output.ref also?) with lithium dimer. Not at all -- problem identified and solution prepared is a double win, not a pain. thank you. > The code is available at fcore_fix, should I make another PR?. please do. and `output.ref` welcome. we try to generate missing ones every year or so, but sooner they're present the better.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1830#issuecomment-658972493:433,avail,available,433,https://psicode.org,https://github.com/psi4/psi4/issues/1830#issuecomment-658972493,1,['avail'],['available']
Availability,"@SebWouters, I was on the verge of introducing FCIDUMP in Forte but if an alternative like you describe is available, we would be happy to adopt it instead.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1431#issuecomment-452041777:107,avail,available,107,https://psicode.org,https://github.com/psi4/psi4/issues/1431#issuecomment-452041777,1,['avail'],['available']
Availability,"@TiborGY *Conda* package for *Windows* have to be built with VS 2015 (https://conda.io/docs/user-guide/tutorials/build-windows.html#microsoft-visual-studio). So I'm doing that to avoid compatibility problems and make later deployment easy. @tonigi I hacked a bit `psi::libfilesystem` to compile, but is making a lot of test to segment fault. Yes, I also found `std::experimental::filesystem` and it looks as good option.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-404166121:335,fault,fault,335,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-404166121,2,['fault'],['fault']
Availability,"@TiborGY is right. Even though you've set ""uhf"", that switches to ""uks"" behind the scenes (so you're not having to set DFT in two places). When I release the error you hit, the further error shows: . ```. Printing out the relevant lines from the Psithon --> Python processed input file:; psi4.set_options({'reference': 'uks', 'stability_analysis': 'follow'}); mol = psi4.geometry(""""""; 0 1; O; """""");; --> psi4.energy('wB97M-D3BJ/def2-TZVPPD', molecule=mol). !-----------------------------------------------------------!; ! !; ! Stability analysis not yet supported for XC functionals. !; ! !; !-----------------------------------------------------------!; ```. Agree that the existing error looks contradictory. I've adjusted it to show:. ```; Printing out the relevant lines from the Psithon --> Python processed input file:; psi4.set_options({'reference': 'uhf', 'stability_analysis': 'follow'}); mol = psi4.geometry(""""""; 0 1; O; """""");; --> psi4.energy('wB97M-D3BJ/def2-TZVPPD', molecule=mol). !----------------------------------------------------------------------------------!; ! !; ! Stability analysis root following is only available for unrestricted Hartree-- !; ! Fock, not present UKS !; ! !; !----------------------------------------------------------------------------------!; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2577#issuecomment-1125639718:158,error,error,158,https://psicode.org,https://github.com/psi4/psi4/issues/2577#issuecomment-1125639718,4,"['avail', 'error']","['available', 'error']"
Availability,"@Z) 中被引用; F:\mcscf.lib(scf_diis.cc.obj) : error LNK2001: 无法解析的外部符号 dgesv_; F:\psimrcc.lib(blas_diis.cc.obj) : error LNK2001: 无法解析的外部符号 dgesv_; F:\fnocc.lib(blas.cc.obj) : error LNK2019: 无法解析的外部符号 dgemv_，该符号在函数 ""void __cdecl psi::fnocc::DGEMV(char &,long &,long &,double &,double *,long &,double *,long &,double &,double *,long &)"" (?DGEMV@fnocc@psi@@YAXAEADAEAJ1AEANPEAN131231@Z) 中被引用; F:\fnocc.lib(blas.cc.obj) : error LNK2019: 无法解析的外部符号 dgemm_，该符号在函数 ""void __cdecl psi::fnocc::DGEMM(char &,char &,long &,long &,long &,double &,double *,long &,double *,long &,double &,double *,long &)"" (?DGEMM@fnocc@psi@@YAXAEAD0AEAJ11AEANPEAN131231@Z) 中被引用; F:\optking.lib(linear_algebra.cc.obj) : error LNK2001: 无法解析的外部符号 dgemm_; F:\psimrcc.lib(algebra_interface.cc.obj) : error LNK2001: 无法解析的外部符号 dgemm_; F:\psimrcc.lib(operation_contraction.cc.obj) : error LNK2001: 无法解析的外部符号 dgemm_; F:\fnocc.lib(blas.cc.obj) : error LNK2019: 无法解析的外部符号 dsyev_，该符号在函数 ""void __cdecl psi::fnocc::DSYEV(char &,char &,long &,double *,long &,double *,double *,long &,long &)"" (?DSYEV@fnocc@psi@@YAXAEAD0AEAJPEAN12211@Z) 中被引用; F:\optking.lib(linear_algebra.cc.obj) : error LNK2001: 无法解析的外部符号 dsyev_; F:\fnocc.lib(blas.cc.obj) : error LNK2019: 无法解析的外部符号 dspev_，该符号在函数 ""void __cdecl psi::fnocc::DSPEV(char &,char &,long &,double *,double *,double *,long &,double *,long &)"" (?DSPEV@fnocc@psi@@YAXAEAD0AEAJPEAN22121@Z) 中被引用; F:\fnocc.lib(blas.cc.obj) : error LNK2019: 无法解析的外部符号 dgesvd_，该符号在函数 ""void __cdecl psi::fnocc::DGESVD(char &,char &,long &,long &,double *,long &,double *,double *,long &,double *,long &,double *,long &,long &)"" (?DGESVD@fnocc@psi@@YAXAEAD0AEAJ1PEAN122121211@Z) 中被引用; F:\optking.lib(linear_algebra.cc.obj) : error LNK2019: 无法解析的外部符号 dgeev_，该符号在函数 opt_asymm_matrix_eig 中被引用; F:\psimrcc.lib(manybody.cc.obj) : error LNK2001: 无法解析的外部符号 dgeev_; F:\psimrcc.lib(heff_diagonalize.cc.obj) : error LNK2001: 无法解析的外部符号 dgeev_; F:\psimrcc.lib(blas_diis.cc.obj) : error LNK2019: 无法解析的外部符号 ddot_，该符号在函数 ""public: void __cdecl p",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:7856,error,error,7856,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgerqf，该符号在函数 ""int __cdecl psi::C_DGERQF(int,int,double *,int,double *,double *,int)"" (?C_DGERQF@psi@@YAHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgesdd，该符号在函数 ""int __cdecl psi::C_DGESDD(char,int,int,double *,int,double *,double *,int,double *,int,double *,int,int *)"" (?C_DGESDD@psi@@YAHDHHPEANH00H0H0HPEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgesv，该符号在函数 ""int __cdecl psi::C_DGESV(int,int,double *,int,int *,double *,int)"" (?C_DGESV@psi@@YAHHHPEANHPEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgesvx，该符号在函数 ""int __cdecl psi::C_DGESVX(char,char,int,int,double *,int,double *,int,int *,char,double *,double *,double *,int,double *,int,double *,double *,double *,double *,int *)"" (?C_DGESVX@psi@@YAHDDHHPEANH0HPEAHD000H0H00001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgetrf，该符号在函数 ""int __cdecl psi::C_DGETRF(int,int,double *,int,int *)"" (?C_DGETRF@psi@@YAHHHPEANHPEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgetri，该符号在函数 ""int __cdecl psi::C_DGETRI(int,double *,int,int *,double *,int)"" (?C_DGETRI@psi@@YAHHPEANHPEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgetrs，该符号在函数 ""int __cdecl psi::C_DGETRS(char,int,int,double *,int,int *,double *,int)"" (?C_DGETRS@psi@@YAHDHHPEANHPEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dggbak，该符号在函数 ""int __cdecl psi::C_DGGBAK(char,char,int,int,int,double *,double *,int,double *,int)"" (?C_DGGBAK@psi@@YAHDDHHHPEAN0H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dggbal，该符号在函数 ""int __cdecl psi::C_DGGBAL(char,int,double *,int,double *,int,int *,int *,double *,double *,double *)"" (?C_DGGBAL@psi@@YAHDHPEANH0HPEAH1000@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgges，该符号在函数 ""int __cdecl psi::C_DGEGS(char,char,int,double *,int,double *,int,double ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:22434,error,error,22434,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"@aizvorski or @hokru (or anyone), did you happen to have on hand independent ref values for any of these five fctls, particularly r2SCAN-3C & B97-3C ? (Note that c-f dftd4 isn't available for py312, so I'll likely need to adjust the CI to improve testing coverage. If this makes it into v1.9, I'm good with dropping support for dftd3 classic and the psi4 build of dftd4. Also, the plan is libxc=6, dropping v5 support.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2842#issuecomment-1830386611:178,avail,available,178,https://psicode.org,https://github.com/psi4/psi4/pull/2842#issuecomment-1830386611,1,['avail'],['available']
Availability,@ajmisquitta I may have pinged you incorrectly the first time. Let me know what you think of these changes and apologies for the possible double ping.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/942#issuecomment-376280951:24,ping,pinged,24,https://psicode.org,https://github.com/psi4/psi4/pull/942#issuecomment-376280951,2,['ping'],"['ping', 'pinged']"
Availability,"@amjames Sorry for not being more clear - the output generated by the different calls to `MoldenWriter` is different if you directly interact with the interface via `molden()` versus the `set print mos` route. I have attached two examples. `test.molden` is output generated by using the `molden()` call, and `test.default.22773.molden` is generated using the `set print mos` route (I added to .txt extension to the attachments so that Github would upload them). Per the molden example in the manual (example 4 [](http://www.psicode.org/psi4manual/master/molden.html)), I passed in the densities from the returned wavefunction. I'm not sure if the DF-MP2 generates densities (I would think it needs to in order to do the density fitting), but if not the SCF call certainly generates a density which should be available in the wavefunction if no MP2 density is generated. Below is my input. > E, wfn = energy('mp2/aug-cc-pvdz', properties=['dipole'], return_wfn=True); > ; > Da_so = wfn.Da(); > Db_so = wfn.Db(); > ; > Da_mo = Matrix.triplet(wfn.Ca(), Da_so, wfn.Ca(), True, False, False); > Db_mo = Matrix.triplet(wfn.Cb(), Db_so, wfn.Cb(), True, False, False); > ; > molden(wfn, 'test.molden', density_a=Da_mo, density_b=Db_mo, dovirtual=True); > . [test.molden.txt](https://github.com/psi4/psi4/files/992976/test.molden.txt); [test.default.22773.molden.txt](https://github.com/psi4/psi4/files/992977/test.default.22773.molden.txt). The energies end up being set equal to the occupancies (which are incorrect - noninteger and in some instances in the thousands). I think this is due to the call to `MoleculeWriter.writeNO`. I did not find this call in `writer.cc`; all I could find was a header file. It does not appear to take energies in as arguments, so I'm not sure why/where from it is passing energies to the molden output. I don't understand all of the procedure in going from the density to the occupancies; why is the number of MOs per irrep used as the rotation matrix in `NO_Ra = core.Matri",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/699#issuecomment-300777718:808,avail,available,808,https://psicode.org,https://github.com/psi4/psi4/pull/699#issuecomment-300777718,2,['avail'],['available']
Availability,"@amjames That clears up the shared state issue, thank you. I have the growing suspicion that I've been leading you all to nowhere. I'll walk you through what I did from the start. lldb said the error originated from line 362 of dcft_integrals_UHF.cc, so I applied the following:; ```; @ -357,8 +357,14 @@ void DCFTSolver::sort_OOOV_integrals() {; global_dpd_->buf4_sort(&I, PSIF_LIBTRANS_DPD, prqs, ID(""[V,O]""), ID(""[O,O]""), ""MO Ints <VO|OO>"");; global_dpd_->buf4_close(&I);; ; + global_dpd_->buf4_init(&I, PSIF_LIBTRANS_DPD, 0, ID(""[O,O]""), ID(""[O,V]""), ID(""[O>=O]+""), ID(""[O,V]""), 0,; + ""MO Ints (VO|OO)"");; + global_dpd_->buf4_print(&I, ""outfile"", 1);; + global_dpd_->buf4_close(&I);; +; global_dpd_->buf4_init(&I, PSIF_LIBTRANS_DPD, 0, ID(""[V,O]""), ID(""[O,O]""), ID(""[V,O]""), ID(""[O>=O]+""), 0,; ""MO Ints (VO|OO)"");; + global_dpd_->buf4_print(&I, ""outfile"", 1);; global_dpd_->buf4_sort(&I, PSIF_LIBTRANS_DPD, rsqp, ID(""[O,O]""), ID(""[O,V]""), ""MO Ints (OO|OV)"");; global_dpd_->buf4_close(&I);; ```. You can see the results of the print statements as pre.txt and post.txt respectively at https://gist.github.com/JonathonMisiewicz/7d4e3ac7eee98b8dcc94d74f2d60f378. I noticed the row and column indices were transposed but everything else looked fine, suspected the transpose was the problem and checked with @jturney. Maybe there was some miscommunication here? I thought he agreed with me that one of the two codes using the wrong index convention was the problem. Based on what you've been saying about byte counts, it looks like the problem is elsewhere. Maybe the code is supposed to do the transposing? I'll admit that I'm very shaky on reading this code. The only documentation I've been able to find on LIBPSIO is more than 20 years old, and from that, all I can make out about the purpose of LIBPSIO is that it replaced some other I/O system. On second look, it is strange that the non-zero pqnum/rsnum changes from 25 to 26. Is that supposed to happen?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1288#issuecomment-435251377:194,error,error,194,https://psicode.org,https://github.com/psi4/psi4/issues/1288#issuecomment-435251377,2,['error'],['error']
Availability,"@amjames, I get these errors when I am using my plugins. I usually don't get it when I am running psi4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/307#issuecomment-194431083:22,error,errors,22,https://psicode.org,https://github.com/psi4/psi4/issues/307#issuecomment-194431083,1,['error'],['errors']
Availability,"@andysim Good point, bumped down AM requirements. The ""Distelli CI"" link should be dead as its an incorrect hook configuration, shouldn't show up in the future.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/449#issuecomment-235422113:28,down,down,28,https://psicode.org,https://github.com/psi4/psi4/pull/449#issuecomment-235422113,1,['down'],['down']
Availability,"@andysim I agree that `size_t` is probably a better solution, but I will have to take a closer look to say for sure. . @lazaroid I agree that there are probably more int overflows to be tracked down in DPD, any that you find you are welcome to patch I will go hunting as well.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/685#issuecomment-297214526:194,down,down,194,https://psicode.org,https://github.com/psi4/psi4/pull/685#issuecomment-297214526,1,['down'],['down']
Availability,"@andysim I believe this is correct, do you concur?. @SebWouters You seem to have a pretty good handle on exactly where this error occurs, would you mind making a PR to patch this up?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1431#issuecomment-449605158:124,error,error,124,https://psicode.org,https://github.com/psi4/psi4/issues/1431#issuecomment-449605158,1,['error'],['error']
Availability,"@andysim I can't help but notice that the three failing jobs all involve Hessians....Does anything in the logs jump out at you? The only error I saw was that the fnocc2 G2 free-energies weren't matching to 8 decimal places, but rather 7. Do we really expect them to match to 8 decimal places? I have no idea why the other two are failing....",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235098972:137,error,error,137,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235098972,1,['error'],['error']
Availability,@andysim great. Since the weird thing is that I can't find any errors in the build log that @loriab linked:; ```; 2020-01-06T17:54:37.8471030Z Energy with Cholesky 1e-4.........................................PASSED; 2020-01-06T17:54:37.8471436Z Energy with Cholesky 1e-4.........................................PASSED; 2020-01-06T17:55:04.0834277Z Energy with Cholesky 1e-5.........................................PASSED; 2020-01-06T17:55:04.0834591Z Energy with Cholesky 1e-5.........................................PASSED; ```; The crash comes suddenly; ```; 2020-01-06T17:55:21.8639362Z ; 2020-01-06T17:55:21.8712539Z Using partial Cholesky orthogonalization (doi:10.1063/1.5139948).; 2020-01-06T17:55:30.8500954Z ##[error]Cmd.exe exited with code '-1073741819'.; 2020-01-06T17:55:30.9285461Z ##[section]Finishing: CHolesky basis Spot Test; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1760#issuecomment-571269056:63,error,errors,63,https://psicode.org,https://github.com/psi4/psi4/pull/1760#issuecomment-571269056,2,['error'],"['error', 'errors']"
Availability,@andysim: I am super excited about this code! I was wondering if you could answer a few questions so that I can start to think about how to write the interface with forte. How do you handle the reduced number of electrons? Do you redefine the atomic charge (Z) or just subtract the number of core electrons? Is this info available from Wavefunction? Let us know if we can be of any help!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/681#issuecomment-295521147:321,avail,available,321,https://psicode.org,https://github.com/psi4/psi4/pull/681#issuecomment-295521147,1,['avail'],['available']
Availability,"@andysim: I may have some extra bandwidth to assist with the basis set cleanup if you ping me at that time. Improving support for ECPs is also something I'm particularly interested in, and a place where the C++- and Python-side basis set machinery has recently slightly diverged.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/721#issuecomment-305325000:86,ping,ping,86,https://psicode.org,https://github.com/psi4/psi4/pull/721#issuecomment-305325000,1,['ping'],['ping']
Availability,"@bast, the -6 is the return code from the subprocess call that ran the test case. Usually it reflects success (0) or failure (anything else). Not sure what's going off here, but since your job gave every other appearance of success, I won't worry about it unless more evidence surfaces. Thanks for testing it with an exotic (for us) setup.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/591#issuecomment-276673381:117,failure,failure,117,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276673381,1,['failure'],['failure']
Availability,"@bennybp , I ran it 40 times today, and it passed consistently. But @dgasmith is right that I've seen it before. Now that it's not just me, I've made a ticket #322. But that was with 2015 compilers, so it is an unrelated issue. @jturney, usually I only alter `xHost` for the generic linux binary, but yes, I can see it being necessary for deploying to a heterogenous cluster when not compiling on the oldest machine. I admit it's suspicious that no matter how I back down optimization on the Haswell box, nothing helps the situation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/321#issuecomment-198786718:467,down,down,467,https://psicode.org,https://github.com/psi4/psi4/issues/321#issuecomment-198786718,1,['down'],['down']
Availability,"@bennybp I'm trying to switch the `psi4_add_library` macro from imported to public as we speak. The error I was getting was something about the alias target `PCMSolver::PCMSolver`, which I appear to have fixed; was this what you were also getting?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-237855000:100,error,error,100,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-237855000,1,['error'],['error']
Availability,"@bennybp, so constraints of Windows (mainly `DESTDIR=/path/to/somewhere make install` not available for on-the-fly relocation of install step) mean that our tidy scheme for cmake superbuild _staged_ install to `objdir/stage/$CMAKE_INSTALL_PREFIX/[bin|lib|share]` followed by cmake superbuild _final_ install to `$CMAKE_INSTALL_PREFIX/[bin|lib|share]` is about to crumble. The people making this change haven't seen ill effects, so I've been trying to remember why using the entire build prefix is important. I suspect it all has to do with `rpath`s (which were irrelevant to libint, as it has no managed dependencies). Psi4 _does_ manage rpaths carefully (bottom of next linked file), culminating in [`BUILD_WITH_INSTALL_RPATH`](https://github.com/psi4/psi4/blob/master/psi4/src/CMakeLists.txt#L126). IIRC, the full path scheme (`stage/$CMAKE_INSTALL_PREFIX`) allows both absolutely located and relatively located dependencies to be set for the staged installation, then those are still valid for the final superbuild installation. Note that conda rewrites `rpath`s, so the problem this scheme is solving wouldn't show up for conda-build. Nor would it show up for internal builds of dependencies (covered by relative paths). A conda-centric (psi4-path-advisor) build may also bypass the problem, since dependencies collocated. A spack-type build or one that uses local installations of dependencies found throughout the filesystem is more likely to hit the problem and need this treatment. As you designed the superbuild scheme, pinging you to see if my concerns are shared or overblown. Also @robertodr",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1115#issuecomment-411795980:90,avail,available,90,https://psicode.org,https://github.com/psi4/psi4/pull/1115#issuecomment-411795980,2,"['avail', 'ping']","['available', 'pinging']"
Availability,"@bozkaya, great, thanks! If you don’t mind, please push your branch to your fork (perhaps already done), then make a PR to my branch (choose “loriab/psi4” instead of usual “psi4/psi4” and “ugurfno” instead of usual “master” on the left hand side of the four-drop down PR form)..",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1390#issuecomment-446617359:263,down,down,263,https://psicode.org,https://github.com/psi4/psi4/pull/1390#issuecomment-446617359,1,['down'],['down']
Availability,"@bozkaya, so if one runs a df-mp2 gradient that effectively but not explicitly does conventional HF, as through the input below, which yields the output pattern below, then this is actually a bad error of routing, which I should correct?. ```; molecule hf {; H; F 1 0.917; }. set basis cc-pvdz; set mp2_type df; set qc_module occ. gradient('mp2'); ```. ```; ...; @RHF Final Energy: -100.01941126902265; ...; Computing DF-MP2 energy using SCF MOs (Canonical DF-MP2)... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 5.19366944090513; DF-HF Energy (a.u.) : -100.01941126902265; REF Energy (a.u.) : -100.01941126902265; DF-MP2 Correlation Energy (a.u.) : -0.20376310280949; DF-MP2 Total Energy (a.u.) : -100.22317437183214; ======================================================================= ; ...; DFGRAD ; A General Analytic Gradients Code ; for Density-Fitted Methods ; ...; -Total Gradient:; Atom X Y Z; ------ ----------------- ----------------- -----------------; 1 -0.000000000000 0.000000000000 0.002795941505; 2 0.000000000000 -0.000000000000 -0.002795941505; ...; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/245#issuecomment-192816600:196,error,error,196,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-192816600,1,['error'],['error']
Availability,"@bozkaya, thanks for all the feedback!. Q1: Good, I'm going the latter route so it behaves just like the DFMP2 module. I just wanted to confirm that it was finishing cleanly in error, and it seems we agree on that. Q2: Ok, just confirming that this was a difference btwn OCC & DFOCC. I'll go ahead and check fc & non-fc independently for df and leave in a commented check for fc w/conv in case you ever get around to that. Q3: Yay! I had tried up-ing the convergence but not the findif scheme. Will do this routinely in future. Thanks for finding the problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/245#issuecomment-192934321:177,error,error,177,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-192934321,2,['error'],['error']
Availability,"@bwb314 Confirmed this is fixed, I was seeing a separate error.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/332#issuecomment-205789744:57,error,error,57,https://psicode.org,https://github.com/psi4/psi4/issues/332#issuecomment-205789744,1,['error'],['error']
Availability,"@bwb314, @PeterKraus, were errors for DSD-BLYP and DSD-PBE-PBE86 to be expected? I didn't see any comments to that respect but there's been a lot of edits to DFT and its testing of late. Thanks for any clues.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/945#issuecomment-378478967:27,error,errors,27,https://psicode.org,https://github.com/psi4/psi4/pull/945#issuecomment-378478967,1,['error'],['errors']
Availability,"@cdsherrill yes 15.0 is recent enough. 14.0 is the minimum for full C; ++11 support based on the internets. On Wed, 2016-02-10 at 13:27 -0800, David Sherrill wrote:. > Fewer compilers working is less of an issue as we push more users; > towards; > the binary distribution. And is only a temporary problem, anyway. Is; > icpc; > 15.0 recent enough to support all the standards we need?; > ; > On Wed, Feb 10, 2016 at 3:50 PM, Ben Pritchard; > notifications@github.com; > wrote:; > ; > > For me the biggest pro of C++11 is that is reduces the amount of; > > code I; > > have to write/maintain/debug.; > > - Defaulted (and deleted) constructors and assignment operators; > > (mentiond by @dgasmith https://github.com/dgasmith); > > - Liberal use of STL containers and unique_ptr means you should; > > rarely; > > have to write a destructor, and often don't have to write a copy; > > constructor; > > - Constructor delegation; > > ; > > Cons:; > > - Template programming results in nasty compiler error messages that; > > take experience to figure out; > > - Overuse of templates, auto, decltype, etc, can result unreadable; > > code; > > - This can somewhat be fixed in the new PR workflow. Don't accept; > > PRs which are a mess; > > - Some C++11 patterns can be intimidating to people who are still; > > learning basic C++; > > ; > > As more libraries require C++11 (I think Ambit, TiledArray, and; > > Cyclops; > > all do), it should generally be embraced, with some reservations.; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > ; > > https://github.com/psi4/psi4public/issues/238#issuecomment-182577836.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/238#issuecomment-182596162:993,error,error,993,https://psicode.org,https://github.com/psi4/psi4/issues/238#issuecomment-182596162,2,['error'],['error']
Availability,"@davpoolechem, tests/python/3-index-transforms/input.py isn't running correctly. Do you happen to understand how to edit it while still preserving the intent of the test?. ```; Fatal Error: SCF_SUBTYPE=INCORE was specified, but there is not enough memory to do in-core! Increase the amount of memory allocated to Psi4 or allow for out-of-core to be used.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3131#issuecomment-1935022416:183,Error,Error,183,https://psicode.org,https://github.com/psi4/psi4/pull/3131#issuecomment-1935022416,1,['Error'],['Error']
Availability,"@dgasmith , maybe keep an eye out for test ""casscf-fzc-sp"". That's what failed on distelli (below), though it passed locally and on travis. May be another clue to the #322 intermittent failure. ```; ==> Setting up CI strings <==. There are 15 alpha and 15 beta strings; The CI space requires 65 (6.50E+01) determinants and 4 blocks. ==> Setting up MCSCF integrals <==. ==> Starting MCSCF iterations <==. Total Energy Delta E RMS Grad NCI. @MCSCF Iter 1: -76.02993400953443 -1.2637e-02 9.9525e-03 1 Initial CI; @MCSCF Iter 2: -76.06895156963408 -3.9018e-02 1.3537e-02 9 APPROX; @MCSCF Iter 3: -76.07302175257405 -4.0702e-03 4.4001e-03 7 APPROX; @MCSCF Iter 4: -76.07362055903870 -5.9881e-04 1.6406e-03 7 APPROX; @MCSCF Iter 5: -76.07373579006990 -1.1523e-04 7.9473e-04 7 APPROX, DIIS; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/456#issuecomment-238002601:185,failure,failure,185,https://psicode.org,https://github.com/psi4/psi4/pull/456#issuecomment-238002601,1,['failure'],['failure']
Availability,"@dgasmith . Essentially, the size of `Parameters_->average_weights` is not `nroots`:; https://github.com/psi4/psi4/blob/51f1cb126641a3398ec5219d3b8789e2cdfb847b/psi4/src/psi4/detci/sem.cc#L991-L998. ```; =================================================================; ==8917==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x6020004445d8 at pc 0x7fa13936619c bp 0x7ffdfdc7def0 sp 0x7ffdfdc7dee8; READ of size 8 at 0x6020004445d8 thread T0; #0 0x7fa13936619b in psi::detci::CIWavefunction::sem_iter(psi::detci::CIvect&, psi::detci::stringwr**, psi::detci::stringwr**, double*, double, double, double, double, int, int, int) /home/raimis/psi4.git/psi4/src/psi4/detci/sem.cc:994; #1 0x7fa1392bee3c in psi::detci::CIWavefunction::diag_h(double, double) /home/raimis/psi4.git/psi4/src/psi4/detci/diag_h.cc:443; #2 0x7fa139293574 in psi::detci::CIWavefunction::compute_energy() /home/raimis/psi4.git/psi4/src/psi4/detci/ciwave.cc:154; #3 0x7fa1392b5dcf in psi::detci::detci(std::shared_ptr<psi::Wavefunction>, psi::Options&) /home/raimis/psi4.git/psi4/src/psi4/detci/detci.cc:68; #4 0x7fa138466ba0 in py_psi_detci(std::shared_ptr<psi::Wavefunction>) /home/raimis/psi4.git/psi4/src/core.cc:346; #5 0x7fa13851eea0 in std::shared_ptr<psi::Wavefunction> pybind11::detail::argument_loader<std::shared_ptr<psi::Wavefunction> >::call_impl<std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::Wavefunction> (*&)(std::shared_ptr<psi::Wavefunction>), 0ul, pybind11::detail::void_type>(std::shared_ptr<psi::Wavefunction> (*&)(std::shared_ptr<psi::Wavefunction>), std::integer_sequence<unsigned long, 0ul>, pybind11::detail::void_type&&) /shared/raimis/opt/miniconda/envs/psi4/include/python3.6m/pybind11/cast.h:1870; #6 0x7fa1385101e4 in std::enable_if<!std::is_void<std::shared_ptr<psi::Wavefunction> >::value, std::shared_ptr<psi::Wavefunction> >::type pybind11::detail::argument_loader<std::shared_ptr<psi::Wavefunction> >::call<std::shared_ptr<psi::Wavefunction>, pybind11::detail::void_type, std:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1441#issuecomment-449451218:279,ERROR,ERROR,279,https://psicode.org,https://github.com/psi4/psi4/pull/1441#issuecomment-449451218,1,['ERROR'],['ERROR']
Availability,@dgasmith I think this is ready for review - there is also one test that tests the minimal functionality of the Broker.; I have more things to implement once the amplitudes are available from python as well and could add another PR for that once that is in as well,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1057#issuecomment-449792318:177,avail,available,177,https://psicode.org,https://github.com/psi4/psi4/pull/1057#issuecomment-449792318,1,['avail'],['available']
Availability,@dgasmith That is a copying error. Thanks for catching that. It is fixed now.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/584#issuecomment-275691833:28,error,error,28,https://psicode.org,https://github.com/psi4/psi4/pull/584#issuecomment-275691833,1,['error'],['error']
Availability,"@dgasmith and I were discussing this and realizing that if we start guaranteeing symmetrized output that there are many arrays as plausible targets: Hessian, components of gradient, MOs, properties. That is, every symmetry tolerant code is going to have to shove its output through a symmetrizer, or parts that need symmetrized input (e.g., optking) could it into targeted (e.g., gradient-only) symmetrizers. For general planning, functions like these probably belong in the driver alongside functions (various of which I have) for manipulating mol, dipole, grad, hess by translation, rotation, atom-exchange, etc.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/298#issuecomment-191938284:223,toler,tolerant,223,https://psicode.org,https://github.com/psi4/psi4/issues/298#issuecomment-191938284,1,['toler'],['tolerant']
Availability,"@dgasmith thanks, I'm still road tripping and haven't opened my computer in a few days. Getting back home to work tomorrow evening. @loriab okay, I'll have a look later (ping me since I'll probably forget). And no, there's no way to track package downloads, because they're mirrored to n>>>1 locations anyhow.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/631#issuecomment-285217536:170,ping,ping,170,https://psicode.org,https://github.com/psi4/psi4/issues/631#issuecomment-285217536,2,"['down', 'ping']","['downloads', 'ping']"
Availability,"@dgasmith well, it's quite a simple matter: if you have a large matrix where a few elements are large while the rest are numerically zero, the RMS norm may be small since it's only looking at the average. The maximum absolute norm, however, picks up this case. Q-Chem appears to have switched to the maximum absolute norm from the RMS norm in version 3.0. It's also the default in GAMESS'94, probably other codes as well. This means that the bigger system you have, the more likely you're going to see problems with the RMS norm, as it will say the wave function has converged even if you have significant residual gradients for a limited set of orbitals. The extreme case is, of course, if you e.g. use ```guess read``` with ```guess_mix true``` with a previously converged calculation. Then only the HOMO-LUMO pair isn't converged, and even in cases where the ground state wave function may have significant symmetry breaking, you might not pick this up since the orbital gradient only has two large elements. I've been running calculations on some small transition metal complexes lately, and there it's quite common to see differences of 1 or 2 orders of magnitude between the RMS and MAX error.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1460#issuecomment-452407959:1193,error,error,1193,https://psicode.org,https://github.com/psi4/psi4/pull/1460#issuecomment-452407959,2,['error'],['error']
Availability,"@dgasmith yes, `opt10` and `sapt4` no longer complain. However, I've got two new failures: `opt7` and `opt-irc-2`.; For `opt7`:. ```; PsiException: Int. Coord. RHF opt of HOOH with O-O-H fixed to 105, energy: computed value (-150.7861731) does not match (-150.7861769) to 6 decimal places.; ```. For `opt-irc-2`:. ```; PsiException: Energy of last IRC point: computed value (-92.869134) does not match (-92.868901) to 5 decimal places.; ```. I used 13bf41bd1b0dd2a39d",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/253#issuecomment-190689367:81,failure,failures,81,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-190689367,1,['failure'],['failures']
Availability,"@dgasmith, I really prefer to upgrade to pb11 2.2. pylibefp is using a nice 2.2 feature (though I do know how to downgrade). But we do have to agree and solve symbols visibility or face breaking plugins (slide from wwdc attached). Since gau2grid doesn't need the python interface in psi (or do you have plans for it?), I think keep the 2.2 features. <img width=""1298"" alt=""screen shot 2017-11-26 at 10 20 24 am"" src=""https://user-images.githubusercontent.com/2314730/33241456-82bf7044-d293-11e7-8e8d-8f968bdcb16a.png"">",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/814#issuecomment-347016004:113,down,downgrade,113,https://psicode.org,https://github.com/psi4/psi4/pull/814#issuecomment-347016004,1,['down'],['downgrade']
Availability,"@dgasmith, fyi that the scf5 problem has surfaced on your box with 2016 compilers. Sometimes fails on Singlet PK UHF, like above error. Sometimes passes. Below is diff of the key SCF with new (failing) on L, output.ref on R. Further below is diff of the key SCF with new (passing) on L, output.ref on R. Note the changing occupancies. ```; ==> Iterations <== ==> Iterations <==. Total Energy Delta E RMS |[F,P]| | Total Energy Delta E Density RMS. > Forming PK and K matrices.; > @UHF iter 1: -130.87953989478825 -1.78522e+01 0.00000e+00 ; Occupation by irrep: Occupation by irrep:; Ag B1g B2g B3g Au B1u B2u B3u Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 3, 0, 0, 0, 0, 2, 1, 1 ] | DOCC [ 3, 0, 1, 0, 0, 2, 1, 1 ]; SOCC [ 0, 0, 1, 1, 0, 0, 0, 0 ] | SOCC [ 0, 0, 0, 0, 0, 0, 0, 0 ]; | @UHF iter 2: -140.04253152363862 -9.16299e+00 2.20869e-01 DIIS; @UHF iter 1: -130.87953989478828 -1.30880e+02 3.53419e-01 | @UHF iter 3: -149.17635355329770 -9.13382e+00 2.03083e-01 DIIS; @UHF iter 2: -140.07431434746931 -9.19477e+00 1.82031e-01 DIIS | @UHF iter 4: -149.57809876181395 -4.01745e-01 1.46708e-02 DIIS; @UHF iter 3: -149.23552613462837 -9.16121e+00 4.96906e-02 DIIS | @UHF iter 5: -149.59038744607500 -1.22887e-02 3.98344e-03 DIIS; @UHF iter 4: -149.63524139545771 -3.99715e-01 7.44669e-03 DIIS | @UHF iter 6: -149.59059079586575 -2.03350e-04 4.93283e-04 DIIS; @UHF iter 5: -149.64817974336708 -1.29383e-02 9.02194e-04 DIIS | @UHF iter 7: -149.59059711351466 -6.31765e-06 9.62861e-05 DIIS; @UHF iter 6: -149.64843348113254 -2.53738e-04 1.48299e-04 DIIS | @UHF iter 8: -149.59059723201250 -1.18498e-07 1.30989e-05 DIIS; @UHF iter 7: -149.64844078492737 -7.30379e-06 2.61364e-05 DIIS | @UHF iter 9: -149.59059723617770 -4.16520e-09 2.01100e-06 DIIS; @UHF iter 8: -149.64844097370053 -1.88773e-07 5.78597e-06 DIIS | @UHF iter 10: -149.59059723621087 -3.31681e-11 1.77929e-07 DIIS; @UHF iter 9: -149.64844098588614 -1.21856e-08 1.04113e-06 DIIS | @UHF iter 11: -149.59059723621158 -7.10543e-13 3.00170e-08 DIIS",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/322#issuecomment-200629470:129,error,error,129,https://psicode.org,https://github.com/psi4/psi4/issues/322#issuecomment-200629470,1,['error'],['error']
Availability,"@dgasmith. I think this is a PEBKAC error. I was passing in desymmetrized matrices, which is fine for PK and DF, which both use C1 symmetry under the hood. The fix for `OUT_OF_CORE` is to add symmetry back into the L and R matrices, before calling `jk->compute()`. There's no problem with the JK code, and I'll see if I can add a simple fix for out of core.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/437#issuecomment-233021414:36,error,error,36,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-233021414,2,['error'],['error']
Availability,"@dgasmith: I don't know the ""citation"", ""description"" and also [""dispersion""][""citation""] maximum lengths. However, it shouldn't be too difficult to ""pad"" all three of these strings with the right number of leading spaces, and throw a warning (or even raise an error) if they are too long. However, perhaps not in this PR? If you make an issue (and tell me the limits), I can tackle this next week.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/914#issuecomment-385265092:261,error,error,261,https://psicode.org,https://github.com/psi4/psi4/pull/914#issuecomment-385265092,1,['error'],['error']
Availability,"@drhaney I made a few comments to your work, a few notes:; - Your comments only have the new basis sets, was the new G3 module intended as well?; - Most of the comments are aimed at removing global options. Globals are now semi-deprecated within Psi4 and will be completely removed in an update. ; - This is one of the first modules that will take extensive use of our option passing update, you will probably collide with a few errors. Let us know and we will get them fixed up.; - Thanks for writing this up.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/335#issuecomment-205789593:429,error,errors,429,https://psicode.org,https://github.com/psi4/psi4/pull/335#issuecomment-205789593,1,['error'],['errors']
Availability,"@edeprince3, if you had already pushed those enum fixes to the v2rdm/master, then sorry for my message – having them publicly accessible was all I wanted. Though if that's the complete fix, it's nice to have the 0.6 tag anyways. @robertodr, thanks for moving the import. Hopefully that clears everything up. I don't recognize that symbol error you posted, but things like that usually come from multiple lapack. I have encountered a `undefined symbol: for_realloc_lhs` issue with v2rdm that comes about from too old MKL (e.g., 2016) having got into the compile/link chain.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/872#issuecomment-355376217:338,error,error,338,https://psicode.org,https://github.com/psi4/psi4/pull/872#issuecomment-355376217,2,['error'],['error']
Availability,"@hokru I get the error below when there's no dftd4 of any kind around. (It's what Azure linux is doing now.) When I change the try/except in qcng empirical_disp_param line 906 from ModuleNotFoundError to ImportError. This is py310, so I'm not sure why, but it might be a sol'n. ```(py310) psilocaluser@bash:psinet:/psi/gits/hrw-detangle/objdir_py310: (r2scan) conda list dftd; # packages in environment at /psi/toolchainconda/envs/py310:; #; # Name Version Build Channel; dftd3 3.2.1 h84218bc_2 psi4; (py310) psilocaluser@bash:psinet:/psi/gits/hrw-detangle/objdir_py310: (r2scan) conda list gcp; # packages in environment at /psi/toolchainconda/envs/py310:; #; # Name Version Build Channel; gcp 2.0.2 he991be0_2 psi4; gcp-correction 2.3.1 h1990efc_3 conda-forge; (py310) psilocaluser@bash:psinet:/psi/gits/hrw-detangle/objdir_py310: (r2scan) pytest ../tests/pytests/test_psi4.py ; ================================================================================== test session starts ==================================================================================; platform linux -- Python 3.10.4, pytest-7.1.2, pluggy-1.0.0; rootdir: /psi/gits/hrw-detangle, configfile: pytest.ini; plugins: forked-1.3.0, xdist-2.5.0; collected 0 items / 1 error . ======================================================================================== ERRORS =========================================================================================; ______________________________________________________________________ ERROR collecting tests/pytests/test_psi4.py ______________________________________________________________________; ImportError while importing test module '/psi/gits/hrw-detangle/tests/pytests/test_psi4.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; ../tests/pytests/test_psi4.py:4: in <module>; import psi4; stage/lib/psi4/__init__.py:75: in <module>; from .driver import endorsed_plugins; stage/lib/psi4/driver/__init__.py:46: in <module>; from psi",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2842#issuecomment-1444984342:17,error,error,17,https://psicode.org,https://github.com/psi4/psi4/pull/2842#issuecomment-1444984342,1,['error'],['error']
Availability,"@hokru and @dgasmith . I tested the analytic and numeric gradients with 100 molecules using wB97X-D and B3LYP (for reference). ![anal_vs_grad_wb97x-d](https://user-images.githubusercontent.com/2469715/33882176-8d09a24e-df37-11e7-9aee-3a6a4530d4a9.png). Sample: 4512; MaxAE 0.002127; MSE -0.000000; MAE 0.000039; RMSE 0.000089. ![anal_vs_grad_b3lyp](https://user-images.githubusercontent.com/2469715/33882181-8f7b6972-df37-11e7-8377-358eb436c824.png). Sample: 4512; MaxAE 0.000631; MSE -0.000000; MAE 0.000016; RMSE 0.000031. There is no systematic error in both cases, but wB97X-D results are more skewed. Do you think, it is just numerics or indication of a more serious problem?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/867#issuecomment-351024635:548,error,error,548,https://psicode.org,https://github.com/psi4/psi4/issues/867#issuecomment-351024635,1,['error'],['error']
Availability,"@hokru, correct me if I'm wrong, but isn't it fairly formulaic at this point to ask people to check how much memory they gave Psi and then check their scratch directory in the face of a PSIO read error? If it is, I have half a mind to update the error message with this advice. I'd need to check, but I think this is doable, and it would save us a lot of questions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1959#issuecomment-661778670:196,error,error,196,https://psicode.org,https://github.com/psi4/psi4/issues/1959#issuecomment-661778670,2,['error'],['error']
Availability,"@hokru, fyi, the tests you added in #1320 got moved around here. Because they use dftd3, which isn't always available, they need `using_dftd3` decorator (for pytest) or to be in `tests/dftd3/` (for ctest).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1414#issuecomment-448263677:108,avail,available,108,https://psicode.org,https://github.com/psi4/psi4/pull/1414#issuecomment-448263677,1,['avail'],['available']
Availability,"@jgonthier Effectively yes, when we rewrite the history no merging can take place so its best to simply remove all old history. Git will throw some pretty strange errors at you if you try. You can use the git merging tool without history (will throw conflicts at every change however), or other merging tools to help out. Since its fairly difficult to rebase through the CMake changes it was thought that this would be a ideal time to do the history rewrite. Git should be setup correctly with the external projects so a similar history rewrite should not be needed again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-248348353:163,error,errors,163,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-248348353,2,['error'],['errors']
Availability,@jgonthier I found that invalid read you mentioned but the test did pass. @andysim That's fine. I'm just not sure why there's concern to keep the testing down to a minimum. It's free testing that we don't have to think about.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237#issuecomment-182896518:154,down,down,154,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182896518,1,['down'],['down']
Availability,"@jgonthier In the latest SAD PR I reduced the tolerance to `1.e-2` up from `1.e-4`. ""Failing"" is a strong word here as the eigenvalue is still positive. Im guessing this is just small flutter in the Davidson iterations which are not converged strongly to begin with.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/385#issuecomment-224908411:46,toler,tolerance,46,https://psicode.org,https://github.com/psi4/psi4/issues/385#issuecomment-224908411,1,['toler'],['tolerance']
Availability,"@jgonthier is there any easy way to turn on or off different components of the SAPT computation? That is, compute only the electrostatic and induction terms, or only the dispersion terms, etc. That might be easier to do than (and/or an initial step towards) full restart capability. @loriab it would be interesting to debate this as a use-case for more general restart capabilities. Where do we log the info about how far the computation has gotten? And what information is going to be available for the restart calculation? In a cluster computing environment, the scratch files are going to be gone. We could save the orbitals (although that's probably not the rate-determining step of most SAPT computations, regardless of the SAPT order). Other stuff is probably too large to save anywhere for a restart.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/51#issuecomment-177233740:486,avail,available,486,https://psicode.org,https://github.com/psi4/psi4/issues/51#issuecomment-177233740,1,['avail'],['available']
Availability,"@jgonthier, if you can build successfully, then it's getting the `-gcc-name`/`-gxx-name` – no more recompile necessary. It would have failed to build libmints if that part wasn't right. . You're right that your `ldd psi4` will cause trouble – in fact it should have given you `CXXABI` and `GLIBCXX` errors just in the `ldd psi4`. Your `$LD_LIBRARY_PATH` should have fixed it, though. Any chance that's not in effect in the terminal you're running the `ldd psi4` in? If the gcc52 was in ld_library_path, your ldd psi4 should switch immediately to `libstdc++.so.6 => /theoryfs2/ds/cdsgroup/miniconda/envs/sgcc5/lib/libstdc++.so.6`. Alternatively, you can delete `stage/......../bin/psi4` (that file only) (or lib/psi4/core.so if you're on inversion) and edit w/i objdir `psi4_core-prefix/src/psi4_core-build/src/CMakeFiles/psi4-bin.dir/link.txt` (psi4-lib.dir if you're on inversion) and stick your gcc5 path first behind the `rpath` at the end, then rebuild (will only relink). I named my env `sgcc5`. Looks like you named yours `gcc52`. Could there be name mixing?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-252802774:299,error,errors,299,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252802774,1,['error'],['errors']
Availability,"@jturney @andysim @fevangelista @zachglick ; FYI, both libint1 and libint2 can now be built internally from this PR. * libint1 pulls a branch where the `Libint_t` has already become `Libint1_t`. Because the compiler looks everywhere in includes directories for headers, easiest to still build this branch in a conda env _without_ `libint` in `conda list`. (If you have `psi4-dev` installed, `conda remove libint --force` is what you need.); * libint2 pulls a tarball, then configures with spherical `gaussian` (looks like the quotes were the problem last week).; * if using `psi4-dev`, may want to dial down `-DMAX_AM_ERI` to 6 or so. If you've already built the specialized libint1 and/or libint2 externally, the below are what you want to tell psi4 to find them (it's the location of the Config.cmake file).; ```; -DLibint2_DIR=/programming/libint-2.6.0/installdir/lib/cmake/libint2 ; -DLibint_DIR=/programming/libint1/installdir/share/cmake/Libint; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1721#issuecomment-534313474:603,down,down,603,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-534313474,1,['down'],['down']
Availability,@jturney @andysim @psi-rking Does anyone object to reducing the tolerance here? Alternatively we can make a special case for ghost atoms. Although two centers so close will increase linear dependency issues.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/195#issuecomment-189336384:64,toler,tolerance,64,https://psicode.org,https://github.com/psi4/psi4/issues/195#issuecomment-189336384,1,['toler'],['tolerance']
Availability,"@jturney It seems that CMake is not aware of any compiler features for the Intel compilers...; How do you handle this? Or you never tried to compile your other projects with Intel?; I found some ""custom"" extensions for the Intel compilers, but that would just move the maintenance work from the current detection system to another...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/188#issuecomment-161354287:269,mainten,maintenance,269,https://psicode.org,https://github.com/psi4/psi4/issues/188#issuecomment-161354287,1,['mainten'],['maintenance']
Availability,"@jturney yeah, it's ignoring the 14 flag ; ```; 2022-01-06T15:09:42.7151758Z C:\PROGRA~1\LLVM\bin\clang-cl.exe /nologo -TP -DUSING_LAPACK_MKL -D_USE_MATH_DEFINES -ID:\a\1\s\psi4\include -ID:\a\1\s\psi4\src -imsvc C:\tools\miniconda3\include -imsvc C:\tools\miniconda3\Library\include -imsvc C:\tools\miniconda3\Library\include\eigen3 /DWIN32 /D_WINDOWS /GR /EHsc -march=native /O2 /Ob2 /DNDEBUG -MD /EHsc -Xclang -fopenmp -std:c++17 -std=c++14 /showIncludes /Fosrc\psi4\libmints\CMakeFiles\mints.dir\integral.cc.obj /Fdsrc\psi4\libmints\CMakeFiles\mints.dir\mints.pdb -c -- D:\a\1\s\psi4\src\psi4\libmints\integral.cc; 2022-01-06T15:09:42.7772130Z clang-cl: warning: unknown argument ignored in clang-cl: '-std=c++14' [-Wunknown-argument]; ```. before shorting out on `any.h`. ```; 2022-01-06T15:09:43.2968999Z In file included from D:\a\1\s\psi4\src\psi4\libmints\integral.cc:35:; 2022-01-06T15:09:43.2969944Z In file included from D:\a\1\s\psi4\src\psi4/libmints/eri.h:42:; 2022-01-06T15:09:43.2970731Z In file included from D:\a\1\s\psi4\src\psi4/libmints/shellpair.h:8:; 2022-01-06T15:09:43.2971583Z In file included from C:\tools\miniconda3\include\libint2/engine.h:53:; 2022-01-06T15:09:43.2972460Z C:\tools\miniconda3\include\libint2/util/any.h(47,11): fatal error: 'any' file not found; 2022-01-06T15:09:43.2973173Z # include <any>; 2022-01-06T15:09:43.2973795Z ^~~~~; 2022-01-06T15:09:43.2974438Z 1 warning and 1 error generated.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2392#issuecomment-1006685579:1266,error,error,1266,https://psicode.org,https://github.com/psi4/psi4/pull/2392#issuecomment-1006685579,2,['error'],['error']
Availability,"@jturney, any ideas? In his original `cdefs.h` error, it's showing finding three headers in the proper conda-supplied locations, then failing out on the 4th in the chain. I've tried all the `man icpc` options I can find. Very confused, as, apart from RHEL7 supplying 4.8.5 instead of 5.4 natively, my system is about the same setup and working with only env activation and `-gnu-prefix`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386735634:47,error,error,47,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386735634,1,['error'],['error']
Availability,@kannon92 These issues are solved in the driver. Please let us know if you encounter a PSIO 33 or 35 file error in Psi4 proper.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/307#issuecomment-194435312:106,error,error,106,https://psicode.org,https://github.com/psi4/psi4/issues/307#issuecomment-194435312,1,['error'],['error']
Availability,"@kannon92 yes, I'd suggest formatted checkpoints, which is an OK format for passing around data, and which is supported by a number of different visualization programs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/504#issuecomment-271110193:37,checkpoint,checkpoints,37,https://psicode.org,https://github.com/psi4/psi4/issues/504#issuecomment-271110193,1,['checkpoint'],['checkpoints']
Availability,"@kis-gergely-dzsi . > I have looked into your suggestion about enabling and disabling BrianQC with an input file option instead of (or in addition to) an env var, and I think there is a minor issue here. Normally, BrianQC's initialization should happen once, preferably during Psi4's own initialization. But, due to the way Psi4 is normally used from Python (first doing import psi4, and then calling psi4.set_options()), the input options are not yet available when psi4_python_module_initialize() is called (from which brianAPIInit() had been called until now). > As far as I could tell, there is no function that normally runs between setting the options and performing a calculation. So, to enable BrianQC through an input option, I have two choices: either I add the check-and-initialize to the options setter method itself (py_psi_set_global_option_int()), or I add it to every high-level computation function (like energy() and optimize()) that could potentially use BrianQC. Which way would be better in your opinion?. Sorry, I only noticed the docs query and not this one. Looking through the code you've added I think I understand your difficulty. It looks like right now, initialization brianAPIInit() sets briancookie boolean, and that setting governs in the SCF code and otherwise whether brianqc is used or bypassed. So in the course of an input file with several togglings of brianqc on/off, then brianqc gets initiated and torn down multiple times. Is this correct? And is the multiple teardowns wanted? It's fine to add a hook to each of the major fns like energy/gradient/hessian/properties. But could there instead be a single initiation, then checking the option `options.get_bool(""brianqc"");` as needed in the scf, grid, etc.?. ```; import psi4 # brianqc init happens alongside psi4 init. psi4.geometry(A). psi4.set_options({'brianqc': False}). energy('b3lyp/cc-pvdz') # runs all CPU. psi4.set_options({'brianqc': True}). energy('b3lyp/cc-pvdz') # runs w/GPU; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1893#issuecomment-659131975:452,avail,available,452,https://psicode.org,https://github.com/psi4/psi4/pull/1893#issuecomment-659131975,2,"['avail', 'down']","['available', 'down']"
Availability,"@lazaroid , I saw the forum post, and it's extremely helpful. My suspicion is that this is being caused by the injection of an optimisation that uses an instruction only available on the offending processors. I'm fine with rounding the result but, just for my own edification, I'd like to experiment with some `#pragma optimize` blocks to see if my suspicion is correct. This should be a fairly simple test, now that you've done all of the hard work of figuring out exactly what's wrong.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/678#issuecomment-292635303:170,avail,available,170,https://psicode.org,https://github.com/psi4/psi4/pull/678#issuecomment-292635303,2,['avail'],['available']
Availability,"@loriab - many, but I think I might be nearing the end of these updates. I apparently hadn't used this plugin since the days of boost ... it probably would have been easier to rewrite the stupid thing from scratch than to repair it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1049#issuecomment-399415373:222,repair,repair,222,https://psicode.org,https://github.com/psi4/psi4/pull/1049#issuecomment-399415373,1,['repair'],['repair']
Availability,"@loriab ; as a follow up from #1948; the original issue was resolved, but I've missed another edge-case, where setting `freeze_core True` results in empty-blocks in mp2 terms ... (sorry for being such a pain).; I've hacked away a solution and additional regression tests (should I add `output.ref` also?) with lithium dimer.; The code is available at [fcore_fix](https://github.com/PhillCli/psi4/tree/usapt0_spin_fix_fcore), should I make another PR?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1830#issuecomment-658966911:338,avail,available,338,https://psicode.org,https://github.com/psi4/psi4/issues/1830#issuecomment-658966911,1,['avail'],['available']
Availability,"@loriab @andysim Can you guys check into the EFP failure when you get a moment, not completely sure what to do about that one. If we *only* have EFP frags:; ```; Traceback (most recent call last):; File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/bin/psi4"", line 260, in <module>; exec(content); File ""<string>"", line 83, in <module>; File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/lib/psi4/driver/driver.py"", line 427, in energy; molecule.update_geometry(); RuntimeError: ; Fatal Error: Molecule::geometry(): molecule does not contain any atoms. Try calling `molecule.update_geometry(); to ensure the molecule is properly constructed.; Error occurred in file: /home/travis/build/psi4/psi4/psi4/src/psi4/libmints/molecule.cc on line: 541; The most recent 5 function calls were:; psi::PsiException::PsiException(std::string, char const*, int); psi::Molecule::geometry() const; psi::Molecule::set_full_point_group(double); psi::Molecule::update_geometry(); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/760#issuecomment-317918961:49,failure,failure,49,https://psicode.org,https://github.com/psi4/psi4/pull/760#issuecomment-317918961,3,"['Error', 'failure']","['Error', 'failure']"
Availability,"@loriab @jeffschriber Hi is there any update on this issue as it is breaking a workflow I have where I calculate MBIS charges using wavefunctions stored in QCArchive the attached script shows how this works and results in the following error when using psi4-1.4.1.; ```; Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]; Computing free-atom volumes; Traceback (most recent call last):; File ""charges_from_wavefunction.py"", line 72, in <module>; psi4.oeprop(hf_wfn, ""MBIS_CHARGES""); File ""/Users/joshua/mambaforge/envs/test_psi4/lib/python3.7/site-packages/psi4/driver/p4util/util.py"", line 72, in oeprop; free_atom_volumes(wfn); ; File ""/Users/joshua/mambaforge/envs/test_psi4/lib/python3.7/site-packages/psi4/driver/p4util/prop_util.py"", line 54, in free_atom_volumes; current_en = wfn.scalar_variable('CURRENT ENERGY'); RuntimeError: ; Fatal Error: Wavefunction::scalar_variable: Requested variable CURRENT ENERGY was not set!. Error occurred in file: /Users/github/builds/conda-builds/psi4-multiout_1633712094436/work/psi4/src/psi4/libmints/wavefunction.cc on line: 1335; The most recent 5 function calls were:; ```. [charges_from_wavefunction.txt](https://github.com/psi4/psi4/files/7624873/charges_from_wavefunction.txt)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2299#issuecomment-982487534:236,error,error,236,https://psicode.org,https://github.com/psi4/psi4/issues/2299#issuecomment-982487534,3,"['Error', 'error']","['Error', 'error']"
Availability,"@loriab As you suggest `-DOpenMP_CXX_LIBRARY_DIRS=/path/to/iomp5/dir` with cmake (v3.11.3), I try it and my cmake does not recognize the option:; ```; CMake Warning:; Manually-specified variables were not used by the project:. OpenMP_CXX_LIBRARY_DIRS. ```; The second way to edit link.txt gives error message from OMP:; ```; OMP: Error #15: Initializing libiomp5.so, but found libiomp5.so already initialized.; OMP: Hint: This means that multiple copies of the OpenMP runtime have been linked into the program. That is dangerous, since it can degrade performance or cause incorrect results. The best thing to do is to ensure that only a single OpenMP runtime is linked into the process, e.g. by avoiding static linking of the OpenMP runtime in any library. As an unsafe, unsupported, undocumented workaround you can set the environment variable KMP_DUPLICATE_LIB_OK=TRUE to allow the program to continue to execute, but that may cause crashes or silently produce incorrect results. For more information, please see http://www.intel.com/software/products/support/.; Aborted (core dumped); ```; To force running psi4, I follow OMP error message's suggestion (`export KMP_DUPLICATE_LIB_OK=TRUE`), but dft-custom-gga does not work (failed due to the same reason - not converged ). From my several trials, this problem seems not to be related to OMP libraries. Regardless of using either `gomp` or `iomp`, dft-custom-gga test fails under single thread. In other words, whenever multi-thread is used for calculations, it gives good SCF convergence within few iterations, which seems similar with the issue #994 @hokru reported. I thought it might be problem of incompatibilities between GCC compiler and Intel OMP libraries. Like @loriab setting, I changed to use icpc intel compiler (v 18.0.3), instead of gcc (v5.4.0). Re-built '<objdir>' by cmake. Then, opened '<objdir>/psi4-core-prefix/src/psi4-core-build/src/CMakeFiles/core.dir/link.txt' and added '/opt/intel/lib/intel64' (basically intel 64bit libr",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1038#issuecomment-397364809:295,error,error,295,https://psicode.org,https://github.com/psi4/psi4/issues/1038#issuecomment-397364809,3,"['Error', 'error']","['Error', 'error']"
Availability,"@loriab Correct: I believe there's a symmetrization step missing. I forget exactly where it was done before, but things like benzene are commonly retrieved with coords that are effectively C1. There's (molecule?) member function somewhere that allows symmetrization to a given tolerance (something really sleazy like 0.01A is needed, IIRC) so it's just a case of calling that. A simple STO-3G optimization could be a good followup step, but that's not essential.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/965#issuecomment-382854005:277,toler,tolerance,277,https://psicode.org,https://github.com/psi4/psi4/pull/965#issuecomment-382854005,2,['toler'],['tolerance']
Availability,"@loriab Could potentially be [this](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/lib3index/df_helper.cc#L1335) line. Could you change the schedule to simply `schedule(static)`? Either way we now have a reproducible error that can be fixed, thanks so much!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/961#issuecomment-384625713:225,error,error,225,https://psicode.org,https://github.com/psi4/psi4/pull/961#issuecomment-384625713,2,['error'],['error']
Availability,"@loriab For example, libxc project. The version here http://www.tddft.org/programs/octopus/download/libxc/ doesn't even contain .cmake files. Why doesn't it and how can external libxc be found without .cmake? Your version here https://github.com/loriab/libxc has .cmake files in the tree, and its README claims that it installs them, but it really doesn't install them. So, again, how can the external libxc be found?. Why aren't .cmake files installed?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/854#issuecomment-343716686:91,down,download,91,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-343716686,1,['down'],['download']
Availability,"@loriab I am re-creating the broken build now and I will look at what `ldd -v psi4` gives me, but I did try modifying the `LD_LIBRARY_PATH` to fix the `GLIBCXX_X.X.XX` runtime error with no luck. Actually loading the GCC_5.2 module would modify it for me, but I removed /usr/lib64 from it just to be sure.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-249681177:176,error,error,176,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249681177,1,['error'],['error']
Availability,"@loriab I can confirm that I have your version working with a5Z on Bridges. I suspect your branch is in a state of flux, but I'll point out that I had to do a few tweaks to get it to work. For example I had to make `psi4_main.a` a shared library so that I could access the Python bindings (and change it's name to `psi4.so`, otherwise Python claims it doesn't have an `__init__` function because Boost defines it for a module called psi4). There were a few places where the old libint and libderiv targets were still being used, which led to link errors like `no -lderiv` and `no -lint`. Also the `psi4config` file needs updated to reflect these changes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-241027531:547,error,errors,547,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-241027531,1,['error'],['errors']
Availability,"@loriab I did. I guess you don't encounter the error because you are not using `$PSIPATH`, see http://www.psicode.org/psi4manual/master/external.html#envvar-PSIPATH. (I'm using this to reproduce the situation of a user who wants to use a custom basis set file on a system-wide PSI4 installation to which he/she does not have write access.) It seems that basis set files in `$PSIPATH` are somehow handled differently. These are my corresponding files:. ```; head $PSIPATH/ano-rcc.gbs; cartesian. !----------------------------------------------------------------------; ! Basis Set Exchange; ! Version v0.7.0; ! https://www.basissetexchange.org; !----------------------------------------------------------------------; ! Basis set: ANO-RCC; ! Description: Full ANO-RCC basis; ! Role: orbital; ```. ```. -----------------------------------------------------------------------; Psi4: An Open-Source Ab Initio Electronic Structure Package; Psi4 1.4a1.dev101 . Git: Rev {master} 302cd1d dirty. R. M. Parrish, L. A. Burns, D. G. A. Smith, A. C. Simmonett,; A. E. DePrince III, E. G. Hohenstein, U. Bozkaya, A. Yu. Sokolov,; R. Di Remigio, R. M. Richard, J. F. Gonthier, A. M. James,; H. R. McAlexander, A. Kumar, M. Saitow, X. Wang, B. P. Pritchard,; P. Verma, H. F. Schaefer III, K. Patkowski, R. A. King, E. F. Valeev,; F. A. Evangelista, J. M. Turney, T. D. Crawford, and C. D. Sherrill,; J. Chem. Theory Comput. 13(7) pp 3185--3197 (2017).; (doi: 10.1021/acs.jctc.7b00174). Additional Contributions by; P. Kraus, H. Kruse, M. H. Lechner, M. C. Schieber, R. A. Shaw,; A. Alenaizan, R. Galvelis, Z. L. Glick, S. Lehtola, and J. P. Misiewicz. -----------------------------------------------------------------------. Psi4 started on: Monday, 29 April 2019 07:36PM. Process ID: 6146; Host: molmod00.ugent.be; PSIDATADIR: /home/toon/miniconda3/envs/p4dev/share/psi4; Memory: 500.0 MiB; Threads: 1; ; ==> Input File <==. --------------------------------------------------------------------------; molecule {; H;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1613#issuecomment-487675807:47,error,error,47,https://psicode.org,https://github.com/psi4/psi4/issues/1613#issuecomment-487675807,1,['error'],['error']
Availability,"@loriab I have integrated `psi4 --fulltest` on Azure, but the tests does not work in parallel:; ```; 2018-12-06T18:15:06.8235423Z =================================== ERRORS ====================================; 2018-12-06T18:15:06.8236398Z _______________ ERROR at teardown of test_deprecated_wfn_arrays _______________; 2018-12-06T18:15:06.8236914Z [gw0] win32 -- Python 3.6.6 C:\tools\miniconda3\python.exe; 2018-12-06T18:15:06.8237116Z ; 2018-12-06T18:15:06.8238150Z tp = <class 'PermissionError'>, value = None, tb = None; 2018-12-06T18:15:06.8238413Z ; 2018-12-06T18:15:06.8238651Z def reraise(tp, value, tb=None):; 2018-12-06T18:15:06.8238835Z try:; 2018-12-06T18:15:06.8239065Z if value is None:; 2018-12-06T18:15:06.8239312Z value = tp(); 2018-12-06T18:15:06.8239526Z if value.__traceback__ is not tb:; 2018-12-06T18:15:06.8239861Z raise value.with_traceback(tb); 2018-12-06T18:15:06.8240255Z > raise value; 2018-12-06T18:15:06.8240643Z ; 2018-12-06T18:15:06.8240921Z C:\tools\miniconda3\lib\site-packages\six.py:693: ; 2018-12-06T18:15:06.8241733Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; 2018-12-06T18:15:06.8242195Z C:\tools\miniconda3\lib\site-packages\six.py:693: in reraise; 2018-12-06T18:15:06.8242519Z raise value; 2018-12-06T18:15:06.8243257Z C:\tools\miniconda3\lib\site-packages\six.py:693: in reraise; 2018-12-06T18:15:06.8243569Z raise value; 2018-12-06T18:15:06.8244186Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; 2018-12-06T18:15:06.8244400Z ; 2018-12-06T18:15:06.8244638Z def tear_down():; 2018-12-06T18:15:06.8245076Z import os; 2018-12-06T18:15:06.8245339Z import glob; 2018-12-06T18:15:06.8245555Z import psi4; 2018-12-06T18:15:06.8245794Z psi4.core.close_outfile(); 2018-12-06T18:15:06.8246104Z patterns = ['cavity.*', 'grid*', 'pytest_output.*h5',; 2018-12-06T18:15:06.8246380Z 'pytest_output.dat',; 2018-12-06T18:15:06.8246851Z '*pcmsolver.inp', 'PEDRA.OUT*', 'timer.dat']; 2018-12-06T18:15:06",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1399#issuecomment-445000007:166,ERROR,ERRORS,166,https://psicode.org,https://github.com/psi4/psi4/pull/1399#issuecomment-445000007,2,['ERROR'],"['ERROR', 'ERRORS']"
Availability,"@loriab I have looked into your suggestion about enabling and disabling BrianQC with an input file option instead of (or in addition to) an env var, and I think there is a minor issue here. Normally, BrianQC's initialization should happen once, preferably during Psi4's own initialization. But, due to the way Psi4 is normally used from Python (first doing `import psi4`, and then calling `psi4.set_options()`), the input options are not yet available when `psi4_python_module_initialize()` is called (from which `brianAPIInit()` had been called until now). As far as I could tell, there is no function that normally runs between setting the options and performing a calculation. So, to enable BrianQC through an input option, I have two choices: either I add the check-and-initialize to the options setter method itself (`py_psi_set_global_option_int()`), or I add it to every high-level computation function (like `energy()` and `optimize()`) that could potentially use BrianQC. Which way would be better in your opinion?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1893#issuecomment-654282045:442,avail,available,442,https://psicode.org,https://github.com/psi4/psi4/pull/1893#issuecomment-654282045,1,['avail'],['available']
Availability,"@loriab I just ran the original branch of Bozkaya's and confirmed that all six pytest failures, where `MP2 SINGLES ENERGY` is zero for MP3 calculations on top of ROHF references, originate there. The test failures do not appear for MP2 computations, so this is a regression in Bozkaya's fork. The 98% is confirmed. Keep me in the loop. For behnle, this means that you don't need to worry about the test failures. _Someone_ will deal with it, the main devs just need to figure out who that is.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2354#issuecomment-974321512:86,failure,failures,86,https://psicode.org,https://github.com/psi4/psi4/pull/2354#issuecomment-974321512,3,['failure'],['failures']
Availability,@loriab I must have made a mistake while I was playing around with this. The error does not appear if I have `LD_LIBRARY_PATH` set correctly at run-time and if I don't have the correct compiler module loaded then cmake errors out in the configure step.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-249690183:77,error,error,77,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249690183,2,['error'],"['error', 'errors']"
Availability,"@loriab I now have the same problem than @amjames regarding libstdc++.so. Quick context:; I installed my own GCC 5.2 using my own conda, then gave cmake the necessary info (through `-DCMAKE_CXX_FLAGS`) and modified `LD_LIBRARY_PATH`. I also installed Python 3.5 in conda and gave the paths to CMake using the `PYTHON_LIBRARY` and `PYTHON_INCLUDE_DIR` variables. With that, I could build and link (after a few tries) but a bunch of tests failed, seemingly Python-related. I thus tried to re-build, but giving the system Python (2.7) and Python libraries. For that, I modified my PATH environment variable so that Python 2.7 would be default and not the conda Python 3.5. I also passed all three `PYTHON_XXX` variables to CMake. I could build and link successfully, but now for some reason psi4 is associated with the wrong gcc headers.; My CMakeCache.txt contains the appropriate `gcc-name` options described in the FAQ, the first line of `echo $LD_LIBRARY_PATH` reads; `/theoryfs2/ds/gonthier/software/miniconda3/envs/gcc52/lib:/theoryfs2/ds/gonthier/software/miniconda3/lib:/theoryfs2/common/software/intel2016/compilers_and_libraries_2016.3.210/linux/compiler/lib/intel64`; and `ldd psi4` gives:; `libstdc++.so.6 => /usr/lib64/libstdc++.so.6 (0x00007fe059a33000)`. I haven't tried using `CMAKE_PREFIX_PATH` yet. I'm going to do that now and report the results.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-252797491:939,echo,echo,939,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252797491,1,['echo'],['echo']
Availability,"@loriab I removed the `MEMORY` option from the ADC section, but now some tests using `fnocc` are failing, because apparently, the option was *only* provided by the ADC part in `read_options.cc`... What should I do about this? `adcc` does not take any input on available memory, so where should the `MEMORY` option live from now on?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2737#issuecomment-1269567607:260,avail,available,260,https://psicode.org,https://github.com/psi4/psi4/pull/2737#issuecomment-1269567607,1,['avail'],['available']
Availability,"@loriab I think setting `CMAKE_PREFIX_PATH` can help with detecting anything usinga `find_package` call. ; Setting `CMAKE_PREFIX_PATH` has the search to prioritize the directories listed in that variable. I actually have no python detection problems if I set `-DCMAKE_PREFIX_PATH=${ANACONDA_LIB}:${ANACONDA_INC}`, but only setting one or the other means either the wrong headers or the wrong library is found instead. Just slightly less typing than setting two separate `PYTHON_…` variables. ---. Also worth mentioning: It looks like [here](https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L110) we are only setting the major python version as a requirement, so I am not getting any cmake errors if I remove anaconda from my env, and let the system python be detected (in my case 2.6.9, which is okay I think). But in the cmake output I see a message like: . ```; — Found PythonInterp: /usr/bin/python (found version ""2.6.9); — Found PythonLibs: /usr/lib64/libpython2.6.so (found sutable version 2.6.9, minimum required is ""2""); ```. Is that going to go ahead and build if the python version is `2.(anything)`? Last I remember we needed python 2.6.9 or later.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-249711681:696,error,errors,696,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249711681,1,['error'],['errors']
Availability,"@loriab I think this is now ready for review. The values in the new test are hand-calculated from the single point values using a spreadsheet. Let me know if I should just boilerplate the docstrings from the `qcdb.cbs_helpers` file - and whether I should change just the missing functions or the old ones as well. One thing that is perhaps missing is handling of different `corl_alpha`'s for delta-corrections; this might actually be a useful feature, as one is more likely to drop down to [DT] extrapolation (for which `alpha = 2.4` gives better results) with things like CCSD(T) while using MP2/[TQ] as the `corl_wfn/basis`. It should be an easy fix. I left the `pcseg-N` basis sets out for now; I'll read the literature and see whether it makes sense. I still plan to allow the `roos-ano-[dt]z` basis sets into the CBS functions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/963#issuecomment-381996152:482,down,down,482,https://psicode.org,https://github.com/psi4/psi4/pull/963#issuecomment-381996152,1,['down'],['down']
Availability,"@loriab I'm happy to switch the logic if necessary, and I would love to name it `undead_ghosts`, but the name should probably be strikingly clear at a glance since it's a required arg c-side. `include_ghosts` or `count_ghosts` maybe? . As for uses w/i our control, I'm not convinced we've switched everything that needs it, but the ones I _have_ switched from default I am confident in (current work on `scatter.cc` and the Hessian notwithstanding). If there's others we could ping for the other cases I'm all for it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1355#issuecomment-444930702:477,ping,ping,477,https://psicode.org,https://github.com/psi4/psi4/pull/1355#issuecomment-444930702,2,['ping'],['ping']
Availability,"@loriab If the threading flag you mentioned refers to `USE_OPENMP=1`, then I am reasonably sure that is essential. As far as I understand, OpenBLAS is not stateless/thread-safe when compiled to use its native threading. So if there is an OMP parallel section in Psi4, and multiple Psi4 threads call BLAS/LAPACK subrutines at the same time, AND OpenBLAS is also doing those operations in parallel, then you get undefined behaviour. This is probably not going to be reliably mitigated by setting OpenBLAS to only use 1 thread at runtime, it may still cause UB.; AFAIK, currently the only safe way to call OpenBLAS BLAS/LAPACK routines from OMP parallel regions, is to use an OpenBLAS build compiled with `USE_OPENMP=1`. This disables the native/pthreads parallelism, and uses OMP instead, this way you get thread safety and nested parallelism should also work.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-390192476:464,reliab,reliably,464,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-390192476,1,['reliab'],['reliably']
Availability,"@loriab No success, unfortunately. The option is recognized (initial cmake); ```; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Building using CMake 3.19.4 Generator Unix Makefiles; -- Setting option BUILD_SHARED_LIBS: ON <=================; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; ```; but somehow does not get passed to the libint2 build step (make):; ```; [ 73%] No update step for 'libint2_external'; [ 75%] No patch step for 'libint2_external'; [ 77%] Performing configure step for 'libint2_external'; loading initial cache file /scr/behnle/psi4_clean_cmake_3.19/psi4/objdir/external/upstream/libint2/libint2_external-prefix/tmp/libint2_external-cache-Release.cmake; -- Version: Full 2.7.1 Numeric 2.7.1; -- SO Version: Full 2:3:0 Major 2; -- The CXX compiler identification is GNU 11.2.1; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working CXX compiler: /usr/bin/g++-11 - skipped; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Setting option CMAKE_BUILD_TYPE: Release; -- Setting option REQUIRE_CXX_API: ON; -- Setting option REQUIRE_CXX_API_COMPILED: OFF; -- Setting option ENABLE_FORTRAN: OFF; -- Setting (unspecified) option ENABLE_MPFR: OFF; -- Setting option BUILD_SHARED_LIBS: OFF <==================; -- Setting (unspecified) option LIBINT2_BUILD_SHARED_AND_STATIC_LIBS: OFF; -- Setting (unspecified) option LIBINT_LOCAL_Eigen3_INSTALL: OFF; ```. The error message is exactly the same.; I wiped the build directory completely in between, so there were no leftovers that might have influenced the build process.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2572#issuecomment-1121326370:1602,error,error,1602,https://psicode.org,https://github.com/psi4/psi4/issues/2572#issuecomment-1121326370,1,['error'],['error']
Availability,"@loriab Regarding the chemps2 version: I just tried on my desktop where everything is fine and it installed 1.8.3. On my cluster with gcc < 4.9, it installs chemps2 1.8.2, if I do the install with the gcc 5 env activated it installs chemps2 1.8.3. So it seems the version installed depends on the availability of gcc >= 4.9",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/660#issuecomment-288529918:297,avail,availability,297,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288529918,1,['avail'],['availability']
Availability,"@loriab Thanks for the tips. `LD_LIBRARY_PATH` is in effect in my terminal, here are the results of commands directly issued in the same terminal:; `>> echo $LD_LIBRARY_PATH`; `>> /theoryfs2/ds/gonthier/software/miniconda3/envs/gcc52/lib:/theoryfs2/ds/gonthier/software/miniconda3/lib [...]`; then:; `>> ldd stage/usr/local/bin/psi4`; `>> stage/usr/local/bin/psi4: /usr/lib64/libstdc++.so.6: version `CXXABI_1.3.8' not found (required by stage/usr/local/bin/psi4)`; `stage/usr/local/bin/psi4: /usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.20' not found (required by stage/usr/local/bin/psi4)`; `stage/usr/local/bin/psi4: /usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.21' not found (required by stage/usr/local/bin/psi4)`; [...]; `libstdc++.so.6 => /usr/lib64/libstdc++.so.6 (0x00007fd93dcba000)`; `libiomp5.so => /theoryfs2/ds/gonthier/software/miniconda3/lib/libiomp5.so (0x00007fd93d970000)`; [...]. As you can see, the correct path is in `LD_LIBRARY_PATH`, yet `ldd psi4` does not find the correct `libstdc++.so.6`, yet `libiomp5.so` finds the miniconda path that is in `LD_LIBRARY_PATH`. Finally, I tried your suggestion to directly modify the `link.txt` file with explicit specification of the `gcc52` path. Sure enough, this worked ! Psi4 finds the correct gcc library and runs like a charm (well, I barely started the tests so let's keep the fingers crossed). I don't see with what `gcc52` could mix, since I don't have any other environments defined. Plus, I'm never using `source activate gcc52` because this command does not work any more, at least on `ds3` (can you tell the software has been quite hostile to me on this build ?). Thanks for everything anyway. Should I report back with possible test failures here again or open a new issue ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-252821533:152,echo,echo,152,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252821533,2,"['echo', 'failure']","['echo', 'failures']"
Availability,"@loriab Thanks for these comments!. I now have some simple documentation [for running Psi4 with MDI](https://molssi.github.io/MDI_Library/html/mdi_ecosystem.html#ecosystem_psi4) as part of the MDI_Library documentation pages. Its still very basic, but thankfully there isn't much more to the process than what is described in the [general MDI launch documentation](https://molssi.github.io/MDI_Library/html/library_page.html#library_launching_sec). I've tried to work on adding some how-to-use documentation to Psi4 proper, but I can't seem to get my Sphinx environment set up correctly:. ```; Building html documentation ...; Running Sphinx v2.2.0; making output directory... done; /Users/tbarnes/anaconda3/envs/psi4/lib/python3.7/site-packages/sphinx/events.py:103: RemovedInSphinx30Warning: autodoc_default_flags is now deprecated. Please use autodoc_default_options instead.; results.append(callback(self.app, *args)). Theme error:; no theme named 'cloud' found, inherited by 'sphinx_psi_theme'; make[3]: *** [sphinxman] Error 2; make[2]: *** [doc/sphinxman/CMakeFiles/sphinxman.dir/all] Error 2; make[1]: *** [doc/sphinxman/CMakeFiles/sphinxman.dir/rule] Error 2; make: *** [sphinxman] Error 2; ```. This is despite having a conda installation of `cloud_sptheme`. Regarding the `mdi('hf/cc-pvdz')` command, I would be fine with something more like your suggestion of `energy('hf/cc-pvdz', mdi=True)`. One alternative possibility would be to say that if the `--mdi` runtime option is provided, the mdi code is just automatically called after everything in the input file has executed; this approach would still require some mechanism of setting the method used, of course, and I have no idea whether this would fit into the broader Psi4 design philosophy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1676#issuecomment-533313015:929,error,error,929,https://psicode.org,https://github.com/psi4/psi4/pull/1676#issuecomment-533313015,6,"['Error', 'error']","['Error', 'error']"
Availability,"@loriab This issue isn't so much a problem with not understanding how to use DPD, as I am sure the author of each module was aware of what the code they wrote would do. This is more a fundamental issue with DPD and how it poorly manages shared state. In this case the entry that triggers the psio error already exists and has a smaller size than the data that is being written in its place, but there is no mechanism for gracefully avoiding that situation. . I am working on a better model that avoids a lot of these problems with shared state. I have so far worked out (on paper) how map objects to the regions where their data is stored on disk and keep everything from overwriting each other. The last piece of the puzzle is how to allow *some* shared ownership to exist, for example you would like the DCFT module or the OMP2 module to be ""aware"" if integrals have already been transformed, and then avoid doing the transformation again but because they were given an object that points to a particular location on disk, not because they looked in some predetermined location and found *something* there.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1288#issuecomment-435197522:297,error,error,297,https://psicode.org,https://github.com/psi4/psi4/issues/1288#issuecomment-435197522,1,['error'],['error']
Availability,@loriab This works fine for me in Python 2 and 3. Can you provide the error message? This should be fine as the base Exception class always inits a blank `message`. We may be doing something wrong somewhere.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/530#issuecomment-263296772:70,error,error,70,https://psicode.org,https://github.com/psi4/psi4/pull/530#issuecomment-263296772,1,['error'],['error']
Availability,"@loriab You can also drop the loop and just put `H2.R=1`. Futhermore, add `OPDM yes` and even with `num_roots 1`, it will give the same error. So there's probably an error in saving the eigenvectors. I don't need the 0.1 point, the np.arange command will give a list starting at 1.0 and increasing with 0.1 until 10.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/83#issuecomment-96190725:136,error,error,136,https://psicode.org,https://github.com/psi4/psi4/issues/83#issuecomment-96190725,2,['error'],['error']
Availability,"@loriab and @tovrstra: Can we find a compromise where we keep the interface consistent but make sure that the inner workings of C++ classes is all in a.u.? I agree that having the logic deep down the code is not the right way to go. I would keep the current automatic conversion for several reasons:; 1. **Continuity**. People are already using it, so switching could create some challenges since one would have to be careful when setting up computations for different version of psi4; 1. **Potential confusion**. The potential for confusing bohr/ang with the external field is greater than that of confusing bohr/ang in the molecule geometry. For molecules if one confuses bohr vs. ang you easily run into convergence problems or get nonsensical results. But for the external field corrections it's not obvious, unless one does some testing. We, for example, could entirely miss this change in our computations.; 1. **Practicality**. We use the external charges and in our typical workflow we prepare a geometry for a lattice of atoms and then separate the QM from the MM region. It's just simpler to keep everything consistent in one set of units. I have to say, that from the user perspective, the current way we handle the input is not ideal. I am not familiar with QMMM codes, but what would be the most convenient input format is something like we have for the molecular fragments:; ```; molecule {; C ; O ; <some delimiter>; Q X1 Y1 Z1 CHARGE1; Q X2 Y2 Z2 CHARGE2; }; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1881#issuecomment-625885345:191,down,down,191,https://psicode.org,https://github.com/psi4/psi4/issues/1881#issuecomment-625885345,2,['down'],['down']
Availability,"@loriab can correct me if I'm mistaken, but I think your error is occurring because STO-3G doesn't have a fitting basis. Try using one of our ""hidden"" features, conventional, non-DF MP2; details on how to do this can be found at this link:; http://www.psicode.org/psi4manual/master/occ.html; ,but amount to replacing `'df-mp2'` with `'conv-mp2'`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/105#issuecomment-144734918:57,error,error,57,https://psicode.org,https://github.com/psi4/psi4/issues/105#issuecomment-144734918,1,['error'],['error']
Availability,"@loriab can discuss this more, but the largest issue is if NumPy and Psi4 have different OMP runtimes via BLAS. GOMP and IOMP do not play well together. So naively you would either need to use GCC as this is likely what NumPy's BLAS is linked against or build your own NumPy and link it against the same Intel BLAS you plan to use with Psi4. At this point I think we highly recommend using a conda environment or our [binaries](http://vergil.chemistry.gatech.edu/psicode-download/1.1.html). Both are ICC compiled with MKL and are optimized for multiple architectures from SSE2 (?) to AVX-512. If you really want to compile Psi4 yourself we recommend using the p4dev environment with the built in path-manager, see [here](http://www.psicode.org/psi4manual/master/conda.html#how-to-use-conda-to-compile-psi4-faster-and-easier) to help avoid these conflicts. Lots of fun intricacies to make something like Python really work with large C++ backends :). LAB EDIT: the 1.1 binaries use statically linked MKL in psi4 and are potentially susceptible to the problems mentioned. binaries after mid-July 2017 are safe (provided numpy is MKL RT)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1007#issuecomment-387872100:471,down,download,471,https://psicode.org,https://github.com/psi4/psi4/issues/1007#issuecomment-387872100,1,['down'],['download']
Availability,"@loriab can't see any such thing browsing the netlib GitHub repo. There could be some CMake magic to check whether those functions are available, but I am afraid it could become quite painful to maintain, since it would require first finding math libraries, then trying to link against it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1314#issuecomment-433466071:135,avail,available,135,https://psicode.org,https://github.com/psi4/psi4/pull/1314#issuecomment-433466071,1,['avail'],['available']
Availability,"@loriab did you have an easy fix for the svml error? psi4 was working until I installed rdkit and ambertools, and during the process it seems to have over-rode something. now I have the . ```; Traceback (most recent call last):; File ""/home/user/psi4conda/bin/psi4"", line 183, in <module>; import psi4 # isort:skip; File ""/home/user/psi4conda/lib//python3.8/site-packages/psi4/__init__.py"", line 60, in <module>; raise ImportError(""{0}"".format(err)); ImportError: /home/user/psi4conda/lib//python3.8/site-packages/psi4/core.cpython-38-x86_64-linux-gnu.so: undefined symbol: __svml_exp4_mask_e9; ```; error. Thanks",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1036#issuecomment-923928460:46,error,error,46,https://psicode.org,https://github.com/psi4/psi4/issues/1036#issuecomment-923928460,2,['error'],['error']
Availability,"@loriab full tests are running, although I have the default libint which is handicapped. Your failures were most likely caused by #1451: since the occupation numbers weren't included, e.g. the Sc atom would have been calculated in the charge state -15(!).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1458#issuecomment-451553569:94,failure,failures,94,https://psicode.org,https://github.com/psi4/psi4/pull/1458#issuecomment-451553569,1,['failure'],['failures']
Availability,"@loriab libxc 4 uses Maple implementations of pretty much everything, whereas version 3 had my hand-written implementation. But yes, it would appear that the Maple version is faulty and needs to be fixed. https://gitlab.com/libxc/libxc/issues/45",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/802#issuecomment-383554275:175,fault,faulty,175,https://psicode.org,https://github.com/psi4/psi4/pull/802#issuecomment-383554275,1,['fault'],['faulty']
Availability,@loriab that's a common problem when adding new functionals. The list of available functionals is updated by the make system by running `get_funcs.pl`. The easiest way to force the list to be regenerated is to remove the build directory and rebuild,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-755795443:73,avail,available,73,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-755795443,1,['avail'],['available']
Availability,"@loriab yes, that still works. Travis still uses Makefiles, since the GCC builds are failing with a compiler error with Ninja.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/794#issuecomment-328489425:109,error,error,109,https://psicode.org,https://github.com/psi4/psi4/pull/794#issuecomment-328489425,1,['error'],['error']
Availability,"@loriab yup, failures are for ```python-*```, ```json-*```, as well as ```psi4numpy-*```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1458#issuecomment-451607523:13,failure,failures,13,https://psicode.org,https://github.com/psi4/psi4/pull/1458#issuecomment-451607523,1,['failure'],['failures']
Availability,"@loriab, @jturney : Problem fixed. Deleting synchronization in AIOHandler::write, I saw the errors you mentioned, Lori. The error in cubeprop was caused by the threads not being joined before they were destroyed (Boost automatically called detach() in the thread destructors). After adding synchronization everywhere, the cubeprop error disappears.; Then, sapt2, sapt3 and sapt6 had errors. These ones were caused by threads being joined twice when the user called synchronize on AIOHandler. That is now fixed by having synchronize() check wether the threads are joinable or not. I believe threads are now properly managed by AIOHandler.; @susilehtola : the error message you saw will not appear after PR #609 is accepted. Thanks for reporting it!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/596#issuecomment-278176196:92,error,errors,92,https://psicode.org,https://github.com/psi4/psi4/issues/596#issuecomment-278176196,5,['error'],"['error', 'errors']"
Availability,"@loriab, I am excited to test this feature more extensively. When it will be available in the conda build can you please let me know?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/720#issuecomment-303909419:77,avail,available,77,https://psicode.org,https://github.com/psi4/psi4/pull/720#issuecomment-303909419,1,['avail'],['available']
Availability,"@loriab, I noticed that you posted a fix for my Psi4/Cfour problem at https://github.com/psi4/psi4/pull/2615. Thank you for that! As I understand correctly, you have the updated files using which all Cfour test jobs run successfully. If so, could you please help me which files have been modified, and from where I can download them?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2608#issuecomment-1168954201:319,down,download,319,https://psicode.org,https://github.com/psi4/psi4/issues/2608#issuecomment-1168954201,1,['down'],['download']
Availability,"@loriab, with the new DMRG changes, I am not able to compile this directory anymore. Hold off on merging. It seems that CheMPS2 has not updated. I get an error that it can't find chemps2/caspt2.h and when I look at the chemps2 directory, there does not exist a CASPT2 file. However, the new CheMPS2 has this include file. . Well, it looks like the new DMRG detection ran into some trouble. I forgot to remove a usr/local instance of libchemps2 that I have not used in a very long time. The cmake build would not build CheMPS2 if it found this library so I believe this was the root of my problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/405#issuecomment-225029668:154,error,error,154,https://psicode.org,https://github.com/psi4/psi4/pull/405#issuecomment-225029668,1,['error'],['error']
Availability,"@loriab. I think `-DOpenMP_LIBRARY_DIRS` is a good solution. I just think that if the detection is not going to be truly automatic (i.e. combinations such as gcc + MKL, which is a very common free combination of software, is not properly detected) it probably should be more obvious to the user that such options _have_ to be passed to CMake. With that in mind, improving the error message suggesting to use `-DOpenMP_LIBRARY_DIRS` would be awesome. And thank you for your time by the way.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1118#issuecomment-410473052:376,error,error,376,https://psicode.org,https://github.com/psi4/psi4/issues/1118#issuecomment-410473052,1,['error'],['error']
Availability,"@loriab: This sounds good --- I think die+traceback is probably the right; default if the exception isn't caught. On Wed, Aug 8, 2018 at 6:02 PM Lori A. Burns <notifications@github.com>; wrote:. > @CDSherrill <https://github.com/CDSherrill>; >; > Oh, and if an error's raised but not caught, it just shows the traceback; > and triggers coffee:; >; > PsiException: Could not converge SCF iterations in 4 iterations.; >; > Failed to converge.; >; > Traceback (most recent call last):; > File ""stage/usr/local/psi4/bin/psi4"", line 269, in <module>; > exec(content); > File ""<string>"", line 30, in <module>; > File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 2008, in run_scf; > scf_wfn = scf_helper(name, post_scf=False, **kwargs); > File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 1362, in scf_helper; > e_scf = scf_wfn.compute_energy(); > File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 93, in scf_compute_energy; > raise e; > File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 86, in scf_compute_energy; > self.iterations(); > File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 358, in scf_iterate; > raise ConvergenceError(""""""SCF iterations"""""", self.iteration_); >; > ConvergenceError: Could not converge SCF iterations in 4 iterations.; >; > Psi4 stopped on: Wednesday, 08 August 2018 05:42PM; > Psi4 wall time for execution: 0:00:01.01; >; > *** Psi4 encountered an error. Buy a developer more coffee!; > *** Resources and help at github.c",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1130#issuecomment-411580303:261,error,error,261,https://psicode.org,https://github.com/psi4/psi4/pull/1130#issuecomment-411580303,1,['error'],['error']
Availability,"@loriab: Yes, the state must change somewhere and the error comes when the input is parsed (say after running SCF). My solution is to temporarily switch to the module passed by the user and then go back to the one set before these functions are called. In the future, I would like to see if we could find a way to rely less on the set_/get_module. I see the benefits, but it makes the options model quite obscure.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1412#issuecomment-445294507:54,error,error,54,https://psicode.org,https://github.com/psi4/psi4/pull/1412#issuecomment-445294507,1,['error'],['error']
Availability,"@loriab; Based upon a build of the documentation target (local equivalent is `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit bc7a25bc0 has been issued to your PR branch; * the commit updates 80 files in `samples/` based on `tests/`; * if changes are ok, synchronize your local branch to your GH fork through (approximately) `git pull --rebase origin loriab-patch-1`; * if changes are objectionable, synchronize your GH fork to your local branch through (approximately) `git push origin loriab-patch-1 --force`. However, you can't avoid the update forever; * ask for help in the PR if you have git questions. * an automated pull request https://github.com/psi4/psi4docs/pull/4 has been issued to the docs website repo; * the pull request previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes there at the netlify/psi4manual/deploy-preview check. Edit your PR branch here as needed; no further action on auto PR required; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2365#issuecomment-978693131:1052,down,downloading,1052,https://psicode.org,https://github.com/psi4/psi4/pull/2365#issuecomment-978693131,1,['down'],['downloading']
Availability,"@loriab; Based upon a build of the documentation target (locally, `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit 5aa048b39 has been issued to your PR branch; * this updates 4 files in `samples/` based on `tests/`; * if objectionable, make changes and force push your local branch, but you can't avoid the update forever; * usually, `git pull --rebase origin ghadocs3` to synchronize your local branch with GH. * an automated pull request https://github.com/psi4/psi4docs/pull/1 has been issued to the docs website repo; * this previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes at checks, deploy-preview. Edit your PR branch here as needed; no further action on auto PR required.; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2146#issuecomment-816883319:817,down,downloading,817,https://psicode.org,https://github.com/psi4/psi4/pull/2146#issuecomment-816883319,1,['down'],['downloading']
Availability,"@loriab; Based upon a build of the documentation target (locally, `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit b4247d841 has been issued to your PR branch; * this updates 80 files in `samples/` based on `tests/`; * if objectionable, make changes and force push your local branch, but you can't avoid the update forever; * usually, `git pull --rebase origin loriab-patch-1` to synchronize your local branch with GH. * an automated pull request https://github.com/psi4/psi4docs/pull/3 has been issued to the docs website repo; * this previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes at checks, deploy-preview. Edit your PR branch here as needed; no further action on auto PR required.; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2363#issuecomment-977075574:824,down,downloading,824,https://psicode.org,https://github.com/psi4/psi4/pull/2363#issuecomment-977075574,1,['down'],['downloading']
Availability,"@loriab; Based upon a build of the documentation target (locally, `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated pull request https://github.com/psi4/psi4docs/pull/1 has been issued to the docs website repo; * this previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes at checks, deploy-preview. Edit your PR branch here as needed; no further action on auto PR required.; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2146#issuecomment-816151920:498,down,downloading,498,https://psicode.org,https://github.com/psi4/psi4/pull/2146#issuecomment-816151920,2,['down'],['downloading']
Availability,"@medvedev-m, /tmp is just fine when it's big enough. Often, default Linux/Unix installations have only a limited amount of space available in /tmp. The singlet B atom computation you had crash is actually very small and doesn't require much space, so I think your /tmp must have been filled by some of your earlier computations that crashed. Many quantum chemistry programs, including Psi4, leave some of their temporary files around if they crash, so you have to delete them up to avoid filling the directory. Anything in /tmp should be automatically removed by the operating system, eventually, but I don't know how often that happens --- they might not be cleaned up that quickly. NFS-attached disks are very slow and you should never use them as scratch disks in a quantum chemistry computation. Otherwise, you'll cripple the network with all the data you're sending over it, people will have trouble accessing their files, and your system administrator will be very unhappy with you. So if /tmp is a problem and if NFS-attached disks are a problem, what do you do? Anyone running serious quantum chemistry computations (beyond tiny molecules with cheap methods) normally takes special steps to set up their computer such that is has one or more large hard drives in it that can be used for the temporary files (""scratch space""). For very large computations, it is advisable to get 2-3 hard drives and stripe them together in a ""RAID0"" configuration for maximum speed. It's good to have several hundreds of gibabytes available, at least, and for really big computations it's good to have a terabyte or more. . You might be able to get by using /tmp if you keep it cleaned of any files from crashed calculations, and if you're lucky it might be big enough for some decent computations if they're not too large. Ramdisks are great if your computations are quite small so that they will fit. David",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204#issuecomment-170252262:129,avail,available,129,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170252262,2,['avail'],['available']
Availability,"@psi-rking : Can you elaborate on what the fundamental issue here is? Is it that the internal-to-cartesian coordinate conversion is numerically unstable? Or that there is some other weird saddle point that the minimization converges to instead? If you could point us to the code that needs to be made more robust, we can take a stab at it, but if there's fundamentally no way to converge these kinds of calculations, that would be helpful to know. Also, isn't this second error unrelated?; ```; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495011512596/work/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::write(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::PSIO::write_entry(unsigned int, char const*, char*, unsigned long); ```; This seems to be an error in writing rather than an error in the constrained optimization, isn't it?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/858#issuecomment-344761262:306,robust,robust,306,https://psicode.org,https://github.com/psi4/psi4/issues/858#issuecomment-344761262,6,"['Error', 'error', 'robust']","['Error', 'error', 'robust']"
Availability,"@psi-rking @AlexHeide ping. I don't know if I've loaded all the details, but a table like below may organize discussion (or at least provide something to write a test against) even if my rightmost column is wrong. cmd | bsse_type | return_total_data | performs; ---- | ---- | ---- | ----; energy | cp | true | 5 ene, return CP tot; energy | cp | false (default) | 3 ene, return CP IE; energy | cp, uncp | true | 5 ene, return CP tot; energy | cp, uncp | false (default) | 5 ene, return CP IE; gradient | cp | true | 5 grad, return CP tot; gradient | cp | false (default) | 3 grad, return CP IE; gradient | cp, uncp | true | 5 grad, return CP tot; gradient | cp, uncp | false (default) | 5 grad, return CP IE. users aren't calling `gradient(... bsse_type)` directly -- either `optimize()` or an optimizer program are making that call, and I think the latter can hard-wire the correct choice they need (5th line?).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1691#issuecomment-869918783:22,ping,ping,22,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-869918783,1,['ping'],['ping']
Availability,"@psi-rking @avcopan Some more thorough testing of the #859 hotfix above allowed me to reproduce non-deterministic behavior where the IRC may or may not converge after the second step. Output files below. [output1.txt](https://github.com/psi4/psi4/files/1533781/output1.txt); [output2.txt](https://github.com/psi4/psi4/files/1533782/output2.txt). I want #859 fixed before trying to fix this issue, because that kills my test cases before they encounter this bug. I see two options for the #859 fix. 1. Forbid the IRC from ending if the hessian has a negative eigenvalue, as we cannot be at a minimum. This fixes both issues, but requires that Optking's hessian agree with the true hessian about whether there is a negative eigenvalue. Is this a reliable assumption? And what if Optking gets ""stuck"" at a very flat initial transition state? Do we want it to continue trying to get out until it exhausts its number of optimizations?; 2. Keep the condition I tried to generate these output files, where we only forbid exit on iteration 1. It is up to the user to check that the IRC does not get stuck at the initial TS later and change the step size if it does get stuck. In either case, fixing #859 will not fix this bug, so I'll have to investigate the source of this non-determinism next. EDIT0: Investigation revealed that the early-exit cases have an initial u_f_q_dot value between -0.84 and -0.88, where the normal cases have a u_f_q_dot between +0.75 and +0.77. I refer to [these lines](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/optking/molecule_irc_step.cc#L216-L220 ).; EDIT1: After looking at the code, my _intuition_ is that this is a problem of near-zero gradients. Because of the original tight convergence of the TS, the first gradient is very near zero. There's no guarantee what sign it will have. But when we normalize it and take the overlap with our first displacement, the displacement could very well have caused the gradient to change signs. The optimizer sees we have ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/860#issuecomment-349520464:744,reliab,reliable,744,https://psicode.org,https://github.com/psi4/psi4/issues/860#issuecomment-349520464,2,['reliab'],['reliable']
Availability,"@psi-rking Ah, thats disturbing it appears to be non-deterministic. I find failures between iteration 7 and 35 or the optimization stopping at iteration 50 between separate DF-SCF runs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/10#issuecomment-203491619:75,failure,failures,75,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-203491619,1,['failure'],['failures']
Availability,"@psi-rking Just FYI this bug occurs with SCF/DFT or MP2 for a cheaper computation. For me, the primary concern is the symmetry mapping error is fairly generic. I think a bit clearer error message (if possible) would be sufficient.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/10#issuecomment-203062097:135,error,error,135,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-203062097,4,['error'],['error']
Availability,"@psi-rking Thats very odd, I get a failure at a large number of steps for both SCF and DFT. I guess you can consider that this doesn't identify the TS, but it should still fail with a understandable error message.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/10#issuecomment-203471756:35,failure,failure,35,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-203471756,2,"['error', 'failure']","['error', 'failure']"
Availability,"@psi@@YAHDDDDHPEANH0HPEAH0000H0H000H1H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dggev，该符号在函数 ""int __cdecl psi::C_DGEGV(char,char,int,double *,int,double *,int,double *,double *,double *,double *,int,double *,int,double *,int)"" (?C_DGEGV@psi@@YAHDDHPEANH0H0000H0H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dggevx，该符号在函数 ""int __cdecl psi::C_DGGEVX(char,char,char,char,int,double *,int,double *,int,double *,double *,double *,double *,int,double *,int,int *,int *,double *,double *,double *,double *,double *,double *,double *,int,int *)"" (?C_DGGEVX@psi@@YAHDDDDHPEANH0H0000H0HPEAH10000000H1@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dggglm，该符号在函数 ""int __cdecl psi::C_DGGGLM(int,int,int,double *,int,double *,int,double *,double *,double *,double *,int)"" (?C_DGGGLM@psi@@YAHHHHPEANH0H0000H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgghrd，该符号在函数 ""int __cdecl psi::C_DGGHRD(char,char,int,int,int,double *,int,double *,int,double *,int,double *,int)"" (?C_DGGHRD@psi@@YAHDDHHHPEANH0H0H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgglse，该符号在函数 ""int __cdecl psi::C_DGGLSE(int,int,int,double *,int,double *,int,double *,double *,double *,double *,int)"" (?C_DGGLSE@psi@@YAHHHHPEANH0H0000H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dggqrf，该符号在函数 ""int __cdecl psi::C_DGGQRF(int,int,int,double *,int,double *,double *,int,double *,double *,int)"" (?C_DGGQRF@psi@@YAHHHHPEANH00H00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dggrqf，该符号在函数 ""int __cdecl psi::C_DGGRQF(int,int,int,double *,int,double *,double *,int,double *,double *,int)"" (?C_DGGRQF@psi@@YAHHHHPEANH00H00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dggsvd3，该符号在函数 ""int __cdecl psi::C_DGGSVD3(char,char,char,int,int,int,int *,int *,double *,int,double *,int,double *,double *,double *,int,double *,int,double *,int,double *,int,int *)"" (?C_DGGSVD3@p",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:24777,error,error,24777,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"@psi@@YAHDDHHHHPEANH00H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormrq，该符号在函数 ""int __cdecl psi::C_DORMRQ(char,char,int,int,int,double *,int,double *,double *,int,double *,int)"" (?C_DORMRQ@psi@@YAHDDHHHPEANH00H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormrz，该符号在函数 ""int __cdecl psi::C_DORMRZ(char,char,int,int,int,int,double *,int,double *,double *,int,double *,int)"" (?C_DORMRZ@psi@@YAHDDHHHHPEANH00H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormtr，该符号在函数 ""int __cdecl psi::C_DORMTR(char,char,char,int,int,double *,int,double *,double *,int,double *,int)"" (?C_DORMTR@psi@@YAHDDDHHPEANH00H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbcon，该符号在函数 ""int __cdecl psi::C_DPBCON(char,int,int,double *,int,double,double *,double *,int *)"" (?C_DPBCON@psi@@YAHDHHPEANHN00PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbequ，该符号在函数 ""int __cdecl psi::C_DPBEQU(char,int,int,double *,int,double *,double *,double *)"" (?C_DPBEQU@psi@@YAHDHHPEANH000@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbrfs，该符号在函数 ""int __cdecl psi::C_DPBRFS(char,int,int,int,double *,int,double *,int,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DPBRFS@psi@@YAHDHHHPEANH0H0H0H000PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbstf，该符号在函数 ""int __cdecl psi::C_DPBSTF(char,int,int,double *,int)"" (?C_DPBSTF@psi@@YAHDHHPEANH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbsv，该符号在函数 ""int __cdecl psi::C_DPBSV(char,int,int,int,double *,int,double *,int)"" (?C_DPBSV@psi@@YAHDHHHPEANH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbsvx，该符号在函数 ""int __cdecl psi::C_DPBSVX(char,char,int,int,int,double *,int,double *,int,char,double *,double *,int,double *,int,double *,double *,double *,double *,int *)"" (?C_DPBSVX@psi@@YAHDDHHHPEANH0HD00H0H0000PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : e",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:32268,error,error,32268,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"@psi@@YAXDDDDHHNPEANH0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dtrsv，该符号在函数 ""void __cdecl psi::C_DTRSV(char,char,char,int,double *,int,double *,int)"" (?C_DTRSV@psi@@YAXDDDHPEANH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dbdsdc，该符号在函数 ""int __cdecl psi::C_DBDSDC(char,char,int,double *,double *,double *,int,double *,int,double *,int *,double *,int *)"" (?C_DBDSDC@psi@@YAHDDHPEAN00H0H0PEAH01@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dbdsqr，该符号在函数 ""int __cdecl psi::C_DBDSQR(char,int,int,int,int,double *,double *,double *,int,double *,int,double *,int,double *)"" (?C_DBDSQR@psi@@YAHDHHHHPEAN00H0H0H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 ddisna，该符号在函数 ""int __cdecl psi::C_DDISNA(char,int,int,double *,double *)"" (?C_DDISNA@psi@@YAHDHHPEAN0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgbbrd，该符号在函数 ""int __cdecl psi::C_DGBBRD(char,int,int,int,int,int,double *,int,double *,double *,double *,int,double *,int,double *,int,double *)"" (?C_DGBBRD@psi@@YAHDHHHHHPEANH000H0H0H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgbcon，该符号在函数 ""int __cdecl psi::C_DGBCON(char,int,int,int,double *,int,int *,double,double *,double *,int *)"" (?C_DGBCON@psi@@YAHDHHHPEANHPEAHN001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgbequ，该符号在函数 ""int __cdecl psi::C_DGBEQU(int,int,int,int,double *,int,double *,double *,double *,double *,double *)"" (?C_DGBEQU@psi@@YAHHHHHPEANH00000@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgbrfs，该符号在函数 ""int __cdecl psi::C_DGBRFS(char,int,int,int,int,double *,int,double *,int,int *,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DGBRFS@psi@@YAHDHHHHPEANH0HPEAH0H0H0001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgbsv，该符号在函数 ""int __cdecl psi::C_DGBSV(int,int,int,int,double *,int,int *,double *,int)"" (?C_DGBSV@psi@@YAHHHHHPEANHPEAH0H@Z) 中被引用; F",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:15661,error,error,15661,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"@raimis Thanks very much - this is exactly the information I needed, and I've been able to reproduce the Azure DevOps results in my own tests. @dgasmith The Azure DevOps failures were associated with how the MDI Library compiles and installs DLL libraries. I've fixed the problems with the library, and all the tests are finishing successfully now. The relevant commits are [here](https://github.com/MolSSI/MDI_Library/commit/25cdcb30abfb4e13ced726249f619ef8acc19582) and [here](https://github.com/MolSSI/MDI_Library/commit/2ea5621ff3ee2020276c588a9962d756cc2cfb18). Thanks for your comments; I've incorporated them in the latest commits. @loriab Thanks very much for these comments. I'll try to address them soon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1676#issuecomment-512852479:170,failure,failures,170,https://psicode.org,https://github.com/psi4/psi4/pull/1676#issuecomment-512852479,1,['failure'],['failures']
Availability,"@raimis This was working for me fine before, but when I do a clean install now on Windows 10 (1809) with Miniconda3, I get the following error when I try to run a simple test job:. `ValueError: Object arrays cannot be loaded when allow_pickle=False`. Are you seeing this? Happy to discuss on Psi4 Slack if real time discussion would be helpful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-492353928:137,error,error,137,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-492353928,2,['error'],['error']
Availability,"@raimis, I'm sorry I had to switch back some of your changes in #1348. This current PR looks to work for me. For Windows, I don't see any OpenMP configuration errors or notice OMP compiling problems in Azure. If Azure's working, are there additional things to check to make sure I didn't in turn break something you need?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1520#issuecomment-460657048:159,error,errors,159,https://psicode.org,https://github.com/psi4/psi4/pull/1520#issuecomment-460657048,1,['error'],['errors']
Availability,"@raimis, could you post here an example? if @dgasmith already spot it, maybe it's easier to track it down?; Thanks guys!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/817#issuecomment-335202988:101,down,down,101,https://psicode.org,https://github.com/psi4/psi4/issues/817#issuecomment-335202988,1,['down'],['down']
Availability,"@raimis, yes, I've tried separate outfiles for individual tests, but pytest didn't like it, so need another bout. Also confirmed that there's no such thing as a session-wide tear-down with pytest-xdist. So, you're right, will have to stay serial for the moment. Sorry for the bad commit.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1399#issuecomment-445844379:179,down,down,179,https://psicode.org,https://github.com/psi4/psi4/pull/1399#issuecomment-445844379,1,['down'],['down']
Availability,@rmcgibbo Did you track this down any further?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/716#issuecomment-308200431:29,down,down,29,https://psicode.org,https://github.com/psi4/psi4/issues/716#issuecomment-308200431,1,['down'],['down']
Availability,"@rmcgibbo I can't see why anything you have done would cause the output file to disappear, it's more likely that some changes you made have caused that test to error out before the output file was created. . Can you run mints9 locally and see what it spits out?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/721#issuecomment-304134806:160,error,error,160,https://psicode.org,https://github.com/psi4/psi4/pull/721#issuecomment-304134806,1,['error'],['error']
Availability,"@robashaw I'm really sorry to hear that. You should focus on your health, of course, and I wish you a speedy recovery. I have been able to follow your examples very easily, so getting the library shoehorned into Psi4 is going very well so far. Even without derivatives it will be a big boost for us because of the efficiency gains from screening, so thanks for taking the time to write this and make it available. Thanks also for providing clear examples for me to follow. All the best. Andy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1340#issuecomment-439522526:109,recover,recovery,109,https://psicode.org,https://github.com/psi4/psi4/pull/1340#issuecomment-439522526,4,"['avail', 'recover']","['available', 'recovery']"
Availability,"@robertodr , that seeming GCC version symbol error you reported earlier somehow came about because [psipcm was unlinked](https://github.com/psi4/psi4/pull/594/commits/f89d42b517564f4f46918488554ef889d10b9a16#diff-938e23f9a1850388684b9681e0db1a4aL14). I'll push a correction shortly. This branch (pcm) seems to have gotten commits from upstream master added not at the base. Abandoning it and pushing a new branch and PR, this one still atop lapack branch but not atop ambit.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/594#issuecomment-276525583:45,error,error,45,https://psicode.org,https://github.com/psi4/psi4/pull/594#issuecomment-276525583,1,['error'],['error']
Availability,"@robertodr ; Thanks on looking at Py3 and updating the autocmake omp. And go ahead and set `ENABLE_64BIT_INTEGERS` and anything else to sensible values. You're correct that Distelli and Travis are testing _only_ Psi4, not any addons. In fact, the addons it does test (libint, libefp, gdma) aren't getting built either. Rather (for Travis at least), it's downloaded prebuilt conda packages and just doing integration testing. PCMSolver compiles _really_ slowly (at least Release with Intel compilers), and we can't afford that. But once PCMSolver is up and running and packaged again, it can be added to the integration tests. We can certainly afford a fast test case or two.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/599#issuecomment-276677358:354,down,downloaded,354,https://psicode.org,https://github.com/psi4/psi4/pull/599#issuecomment-276677358,1,['down'],['downloaded']
Availability,"@robertodr I used the line you suggested. I guess that I should then specify; --toolset=intel-linux-cray as argument for the bootstrap script ?. The bootstrap script does not like that, it issues the error:. Unknown toolset: intel-linux-cray. You can specify the toolset as the argument, i.e.:; ./build.sh gcc. Toolsets supported by this script are:; acc, como, darwin, gcc, intel-darwin, intel-linux, kcc, kylix,; mipspro, mingw(msys), pathscale, pgi, qcc, sun, sunpro, tru64cxx, vacpp. and I believe that if I specify --toolset=intel-linux, it then just uses icc instead of the proper CC wrapper on the Cray.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/196#issuecomment-163044282:200,error,error,200,https://psicode.org,https://github.com/psi4/psi4/issues/196#issuecomment-163044282,1,['error'],['error']
Availability,"@robertodr we are making progress. The error has now morphed to:. ```; [ 97%] Linking CXX shared library ../lib/libpcm.dylib; Undefined symbols for architecture x86_64:; ""_host_writer"", referenced from:; pcm::Meddle::printer(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const in Meddle.cpp.o; pcm::Meddle::printer(std::__1::basic_ostringstream<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const in Meddle.cpp.o; ld: symbol(s) not found for architecture x86_64; clang: error: linker command failed with exit code 1 (use -v to see invocation); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/207#issuecomment-171380307:39,error,error,39,https://psicode.org,https://github.com/psi4/psi4/issues/207#issuecomment-171380307,2,['error'],['error']
Availability,"@robertodr, go for it. I put the SO link at the top of the file. I really like the colors, too. Just have to restrain myself from using them too liberally. On the test labels front, I'd suggest. #### Labels; * `optests` - ""Does psi work? tu1/scf-property/dfmp2-1/sapt1/cc1/casscf-sp only"" plus one test from each add-on and python, json, psi4numpy (""add-in""?). name definitely up for discussion.; * `quicktests` - tests that contribute to ""Best coverage possible in a 20 min envelope. (10 minutes on 2-thread travis)"" just because everyone's trained up to type ""quicktests""; * `longtests` - tests that run in 15 min or more; * in particular, if a test doesn't belong to any of the three above, it shouldn't get _any_ length label. that will help with maintenance. #### Runs; * `ctest -L optests` - runs the operational tests; * `ctest -L quicktests` - runs the decent coverage tests; * `ctest -LE longtests` - runs everything but the indiv tests that require >15 min; * `ctest` - runs ""All psi tests (including the 30 minutes - 1.5 hour tests)""",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/524#issuecomment-262017070:751,mainten,maintenance,751,https://psicode.org,https://github.com/psi4/psi4/pull/524#issuecomment-262017070,1,['mainten'],['maintenance']
Availability,"@robertodr, was using `MODULE` instead of `SHARED` deliberate? https://github.com/pybind/pybind11/blob/master/tools/pybind11Tools.cmake#L116. I confirm that v2rdm won't build in psi4's current state with same module error. @fevangelista, there's a new ambit 0.3 conda pkg available for Mac now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1640#issuecomment-489927058:216,error,error,216,https://psicode.org,https://github.com/psi4/psi4/pull/1640#issuecomment-489927058,2,"['avail', 'error']","['available', 'error']"
Availability,"@ryanmrichard, where convenient, we may want to use cmake modules from https://github.com/coderefinery/autocmake/tree/master/modules. Though potentially nice, I don't think we want to wholesale adopt @robertodr and Co.'s autocmake project (http://autocmake.readthedocs.io/en/latest/index.html) just now because this cmake rewrite is focused on CMake linking of `ExternalProject_Add` / modularity / superbuild, which isn't autocmake's focus. In particular, I'm using their safeguards (https://github.com/coderefinery/autocmake/blob/master/modules/safeguards.cmake) since the Psi4Macros one didn't actually prevent in-source builds (`STREQUAL` vs. `==`) and even with that fixed , the extra feature of Psi4Macros creating a requested build dir (`cmake -DCMAKE_BINARY_DIR=objdir2`) ran into later cmake path errors. So, as it stands (in libint), this should guide toward `cmake -H. -Bobjdir` syntax. In general, I'll be testing thoroughly in libint, then just copying into main psi4 w/o testing, so let me know of any problems you find that travis and distelli don't. Huh, cmake automatically forces two spaces after a period in their message() printing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-236387131:805,error,errors,805,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-236387131,2,['error'],['errors']
Availability,"@schiebermc was seeing problems with `scf-coverage`, but my fresh build of this branch (icpc) came back clean on full tests. So no barriers to merge on my part. Keep an eye out for `scf-coverage` errors on the 3rd test.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/742#issuecomment-326597342:196,error,errors,196,https://psicode.org,https://github.com/psi4/psi4/pull/742#issuecomment-326597342,1,['error'],['errors']
Availability,"@sgoodlett and I have been working on this and have to ask about an older PR. @tovrstra, in #1510, why did you go to **17** decimal places? I understand that we can go beyond four decimal places, but I wouldn't expect reproducibility to 17 decimal places due to finite machine precision, and indeed, we're seeing errors out that far.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1973#issuecomment-747554735:313,error,errors,313,https://psicode.org,https://github.com/psi4/psi4/issues/1973#issuecomment-747554735,1,['error'],['errors']
Availability,"@ssh2, thank you very much, I will read this article and try to use the DMRG method. . @ryanmrichard, the same calculation of Li+ at FCI/aug-cc-pVTZ was successfull. However, B+ at FCI/aug-cc-pVTZ failed suddenly with the following error:. PSIO_ERROR: unit = 51, errval = 12; PSIO_ERROR: 12 (error writing to file); Traceback (most recent call last):; File ""<string>"", line 26, in <module>; File ""./lib/python/driver.py"", line 617, in energy; procedures['energy'][lowername](lowername, **kwargs); File ""./lib/python/proc.py"", line 2300, in run_detci; psi4.detci(); RuntimeError: PSIO Error. Input file was:. memory 48000 mb; molecule B {; 1 1; B .0000000000 .0000000000 -.000000000; units bohr; }; set globals {; basis aug-cc-pVTZ; icore 0; }; thisenergy = energy('fci'). The output file is:. ```; -----------------------------------------------------------------------; Psi4: An Open-Source Ab Initio Electronic Structure Package; Psi4 (no tag) Driver. Git: Rev {(no tag)}. J. M. Turney, A. C. Simmonett, R. M. Parrish, E. G. Hohenstein,; F. A. Evangelista, J. T. Fermann, B. J. Mintz, L. A. Burns, J. J. Wilke,; M. L. Abrams, N. J. Russ, M. L. Leininger, C. L. Janssen, E. T. Seidl,; W. D. Allen, H. F. Schaefer, R. A. King, E. F. Valeev, C. D. Sherrill,; and T. D. Crawford, WIREs Comput. Mol. Sci. 2, 556-565 (2012); (doi: 10.1002/wcms.93). Additional Contributions by; A. E. DePrince, M. Saitow, U. Bozkaya, A. Yu. Sokolov; -----------------------------------------------------------------------. Psi4 started on: Sat Jan 9 01:41:42 2016. Process ID: 17178; PSI4DATADIR: ./lib; Memory level set to 256.000 MB; ```. ==> Input File <==. ---. #! 6-31G H2O Test FCI Energy Point. memory 48000 mb. molecule B {; 1 1; B .0000000000 .0000000000 -.000000000; units bohr; }. set globals {; basis aug-cc-pVTZ; icore 0; }. thisenergy = energy('fci'). ---. Input file to run:; from psi4 import *; from p4const import *; from p4util import *; from molutil import *; from aliases import *; psi4_io = psi4.IOMan",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204#issuecomment-170152270:232,error,error,232,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170152270,3,"['Error', 'error']","['Error', 'error']"
Availability,"@susilehtola . Regarding your first suggestion about charges, I would like to make that change, however, that information is not available at the time of construction of the JK object. More general changes will need to be made to the codebase for that to be possible. . Separating the Coulomb and Exchange bits in a way that does not require extra AO ERI determination is beyond me. If you have a suggestion as to how to do it, I will consider implementing it in the limited time I have left. Otherwise, I will regard the task as impossible. I'm confused about the perceived assumption that all integrals fit into memory. No such assumption is made. In fact, this code can be seen as an extension of Weigend's work to the case in which they *don't* all fit in memory, and working with the assumption that integrals do *not* fit in memory is the reason for many of the strange choices made in writing this code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2040#issuecomment-748409140:129,avail,available,129,https://psicode.org,https://github.com/psi4/psi4/pull/2040#issuecomment-748409140,1,['avail'],['available']
Availability,"@susilehtola Actually after thinking about it, shouldn't LibXC do the `nan` scan and filter out these values? The user should filter through the input set for speed, but the downstream program probably shouldn't be responsible for output massaging as this will lead to *everyone* using LibXC fiddling with this (in probably different manners) when it should be fixed in a single place.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/863#issuecomment-346123658:174,down,downstream,174,https://psicode.org,https://github.com/psi4/psi4/issues/863#issuecomment-346123658,1,['down'],['downstream']
Availability,"@susilehtola Apologies for missing the date on those remarks. For some reason I thought I saw them after your remark about annoying code. The blocking is honestly difficult to describe in comments. I will try to provide an illustration in the code, but the best remedy would be for someone trying to work on the code to consult my thesis which I will make more widely available. As for your last point about clarity of operations in the code, that can be fixed. The code was written a while ago, and there was a set of notes that went along with the code that is no longer useful. Comments that are more relevant will be added.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2040#issuecomment-748422549:368,avail,available,368,https://psicode.org,https://github.com/psi4/psi4/pull/2040#issuecomment-748422549,1,['avail'],['available']
Availability,"@susilehtola I cannot reproduce the failure on current master. Please try the _first_ input again and report back with whether the calculation succeeds. If it does, I'm going to close the issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2174#issuecomment-879962805:36,failure,failure,36,https://psicode.org,https://github.com/psi4/psi4/issues/2174#issuecomment-879962805,1,['failure'],['failure']
Availability,"@susilehtola Thank you for the explanation. Given that we want to run psi4 run on clusters where the maintenance is done by people holding permanent positions, it is quite difficult to have them do anything. I wonder if you can suggest the oldest kernel version that I can purpose them to update to? Thank you.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1792#issuecomment-607181717:101,mainten,maintenance,101,https://psicode.org,https://github.com/psi4/psi4/issues/1792#issuecomment-607181717,1,['mainten'],['maintenance']
Availability,"@susilehtola good news, thank you!. I downloaded the 3.0.1 tarball, compiled with -fPIC and replaced the libxc.a and header files in my psi4 installation with the new ones. Then re-linked psi4. Seemed the quickest way, but not 100% sure this is fully correct. Instead of a segmentation fault I get nans; ```; ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RKS iter 0: -nan -nan -nan . ```. edit: replacing C_SCAN with C_TPSS works gives normal results.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/863#issuecomment-345706660:38,down,downloaded,38,https://psicode.org,https://github.com/psi4/psi4/issues/863#issuecomment-345706660,2,"['down', 'fault']","['downloaded', 'fault']"
Availability,"@susilehtola if you get a chance, could you try running @PeterKraus's new sapt-ecp test from #1350? I think that and this PR may have conflicted in that I get `Fatal Error: Atom has more electrons than basis functions.` for the *non-ECP* case. When I switch to `set guess core` (and back off decimals to 6), it runs and passes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1458#issuecomment-455372517:166,Error,Error,166,https://psicode.org,https://github.com/psi4/psi4/pull/1458#issuecomment-455372517,1,['Error'],['Error']
Availability,"@susilehtola it does, and we do plan to interface all available integrals. I also have plans to generalize the Erfc integrals to a form like `(a + b erf(omega r)/r` so we don't have to compute two sets of integrals for the range separated functionals",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1721#issuecomment-568185446:54,avail,available,54,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-568185446,1,['avail'],['available']
Availability,"@tomspur I had a feeling you would run into something like this eventually. I would suspect that you are getting a segfault when calling these functions because the `global_dpd_` object has been broken down. When `CCEnergyWavefunction::compute_energy` is called the `DPD` object that `global_dpd_` is pointing to is constructed [(example for UHF)](https://github.com/psi4/psi4/blob/3fdf17415282884ec86e78ba34087ddd6c3645e8/psi4/src/psi4/ccenergy/ccenergy.cc#L122-L131) before iterations begin, and then [deleted](https://github.com/psi4/psi4/blob/3fdf17415282884ec86e78ba34087ddd6c3645e8/psi4/src/psi4/ccenergy/ccenergy.cc#L504) before the function returns. . So if when you do something like this:. ```python; e, wfn = psi4.energy('ccsd', return_wfn=True); t2 = wfn.T2(); ```; At the time when the python bound function is called and the code for `CCEenergyWavefunction::T2()` is executed the `global_dpd_` the dpd object that the `global_dpd_` points to has been deleted out from under it (you can see [here](https://github.com/psi4/psi4/blob/3fdf17415282884ec86e78ba34087ddd6c3645e8/psi4/src/psi4/libdpd/init.cc#L59) that `dpd_set_default` will assign the `global_dpd_` pointer to `dpd_list[0]`, and below it is the code for `dpd_close` that will delete the object. I see two possible solutions. . - The easiest to implement would be to have the getters/setters check that `global_dpd_` is not `nullptr`, and if it is construct the dpd. Before doing the geting/setting. The function would also have to free the dpd object as well as other modules will assume that `global_dpd_` is null until they initialize it and `dpd_init` will throw when they try to create it. - The other option is to simply start phasing out the `global_dpd_` entirely. A data member can be added to the `CCEnergyWavefunction` and the member functions of the class can be modified to use that data member instead of the `global_dpd_`. The initialization of the data member is moved into the construtor and the dpd will be val",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1061#issuecomment-415107978:202,down,down,202,https://psicode.org,https://github.com/psi4/psi4/pull/1061#issuecomment-415107978,2,['down'],['down']
Availability,"@uwhbliu : you can run a FCI computation from a FCIDUMP file in [forte](https://github.com/evangelistalab/forte), a psi4 plugin. I would be happy to help with the setup/compilation. A test case that runs FCI with frozen core orbitals is available [here](https://github.com/evangelistalab/forte/tree/master/tests/methods/integrals-fcidump-1).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1967#issuecomment-663099219:237,avail,available,237,https://psicode.org,https://github.com/psi4/psi4/issues/1967#issuecomment-663099219,1,['avail'],['available']
Availability,"@vymetal commit df548db seems to fix both the problems you reported, i.e. convergence failures for PCM-UHF and the discrepancies in calculated first-order properties _wrt_ finite difference calculations.; The input file you provided is now a test case for first-order properties with PCM (it's in `tests/pcm_dipole`) In case your problems persist, don't hesitate to open a new issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/198#issuecomment-172765174:86,failure,failures,86,https://psicode.org,https://github.com/psi4/psi4/issues/198#issuecomment-172765174,1,['failure'],['failures']
Availability,"@wardence has seen what look like small errors in Hartree-Fock analytic; gradients in high-symmetry molecules that make me wonder if we have some; small noise coming from our general SCF gradient machinery. She is hoping; to post an issue on that as soon as she gets a little free time. This; might be a cause of the occasional small differences between analytic and; finite difference gradients observed by @raimis. @raimis, were your tests; run with a 3 point finite difference stencil, or 5 points? 5 points should; be more numerically stable (probably good to also crank up d_convergence; like @andysim did). The check done by @andysim looks pretty clean to me and suggest that, at; least for this test case, the wB97X-D gradients are fine. On Tue, Dec 12, 2017 at 1:44 PM, Andy Simmonett <notifications@github.com>; wrote:. > Thank you very much for looking into this, @raimis; > <https://github.com/raimis> - especially the detailed benchmarks. If my; > memories from way back (circa 2010) are correct, @robparrish; > <https://github.com/robparrish> and I were trying to write a prototype DF; > gradient code and hit a very strange error. The finite difference tests we; > did for hybrids all looked good, but for range-separated functionals we; > were getting quite large noise. The direct range-separated code worked; > fine, confirming that the derivative integrals were correct, and pointing; > the fact that we somehow messed up the chain rule in our haste. Since then; > Rob did a complete rewrite of the entire SCF machinery and made it; > infinitely better so, inspired by your detailed comments, I decided to; > revisit. This input; >; > memory 6Gb; >; > molecule C4NH4 {; > -1 1; > C 0.00000000 0.00000000 2.13868804; > N 0.00000000 0.00000000 4.42197911; > C 0.00000000 0.00000000 -0.46134192; > C -1.47758582 0.00000000 -2.82593059; > C 1.47758582 0.00000000 -2.82593059; > H -2.41269553 -1.74021190 -3.52915989; > H -2.41269553 1.74021190 -3.52915989; > H 2.41269553 1.74021190 -3.5",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/867#issuecomment-351166112:40,error,errors,40,https://psicode.org,https://github.com/psi4/psi4/issues/867#issuecomment-351166112,1,['error'],['errors']
Availability,"@wpoely86 Please do a fresh full, the opt10 and sapt4 failures should be resolved. For pubchem you can try running the following python script:. ``` python; from urllib2 import urlopen; print urlopen('http://pubchem.ncbi.nlm.nih.gov/pug/pug.cgi', """").read(); ```. If you can access your server you should see some xml containing the following line:; `<PCT-Status-Message_messages_E>Status: input-error.`. If you bounce off your firewall you will likely see something along the lines of `URLError: <urlopen error [Errno 11004] getaddrinfo failed>`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/253#issuecomment-185192172:54,failure,failures,54,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-185192172,3,"['error', 'failure']","['error', 'failures']"
Availability,"@xiki-tempula there's more to the OS than just the kernel. Like @andysim said, EL7 would be a better option. EL6 is ancient. EL8 is also available, so if a reinstall is necessary then going straight to EL8 is an option.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1792#issuecomment-607346549:137,avail,available,137,https://psicode.org,https://github.com/psi4/psi4/issues/1792#issuecomment-607346549,1,['avail'],['available']
Availability,"@ymshi449, when you post error reports, _please_ be explicit. We need to know exactly what you are asking and exactly what the problem is. Including the details is more important than the grammar. > > Also, it seems that for `sadno`, `guess_mix` is not implemented.; > ; > wym? It should work out-of-the-box, since the `sadno` guess has orbitals like GWH. `huckel` is another possible choice. It might be that DIIS just pulls you back into the spin-restricted solution... @susilehtola ; Using your H2 example. ```; ==> Pre-Iterations <== . SCF Guess: Superposition of Atomic Densities' Natural Orbitals via on-the-fly atomic UHF (doi:10.1021/acs.jctc.8b01089). -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 10 10 1 1 1 0 ; -------------------------------------------------------; Total 10 10 1 1 1 0 ; -------------------------------------------------------. ==> Iterations <== . Total Energy Delta E RMS |[F,P]|. @DF-UHF iter 1: -0.82625214180248 -8.26252e-01 1.90467e-03 DIIS; @DF-UHF iter 2: -0.82648067782379 -2.28536e-04 2.30464e-04 DIIS; @DF-UHF iter 3: -0.82648407824246 -3.40042e-06 4.94088e-07 DIIS; @DF-UHF iter 4: -0.82648407827432 -3.18513e-11 3.29102e-08 DIIS; @DF-UHF iter 5: -0.82648407827446 -1.41887e-13 2.57430e-14 DIIS; Energy and wave function converged.; ```. Even though `set guess_mix True` is set in my input file, the output that _should_ appear (and does for `guess gwh` instead of `guess sadno`) when `guess_mix` runs does not.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2410#issuecomment-1016642737:25,error,error,25,https://psicode.org,https://github.com/psi4/psi4/issues/2410#issuecomment-1016642737,1,['error'],['error']
Availability,"@zachglick reports he was able to get the same seg fault with just ; `conda create -n test_env4 -c psi4 python=3.7 psi4==1.5+e9f4d6d`; and ; ```; molecule mol {; 0 1 ; O ; H 1 1.0 ; H 1 1.0 2 109.5; }. set basis sto-3g; energy, wfn = energy(""HF"", return_wfn=True); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2593#issuecomment-1145503237:51,fault,fault,51,https://psicode.org,https://github.com/psi4/psi4/issues/2593#issuecomment-1145503237,1,['fault'],['fault']
Availability,"A (much overdue) update! There is a very significant update to libecpint coming early next week (99% already available on libecpint/readecp branch) with: . - analytical 1st and 2nd derivatives; - general performance improvements; - much better API; - more robust testing. I will have a look at @andysim previous attempts and see if I can get it working, but I will probably need help hooking in the derivatives to Psi4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1340#issuecomment-698260609:109,avail,available,109,https://psicode.org,https://github.com/psi4/psi4/pull/1340#issuecomment-698260609,2,"['avail', 'robust']","['available', 'robust']"
Availability,"A couple of years ago, psi4 was on GnuMake or 1st iteration CMake build system, so plugin building (at least the `Makefile` spit out) has definitely been updated since then. Yes, I've been eyeing the libgcc conda package. Haven't tried it yet because I was so pleased to get the psi4-only binary down to only lc, ldl, lpthread, lrt, lutil system libraries. But it seems that some dynamic libgcc dependency may be necessary to assemble psi4 and add-ons and dependencies from other conda channels, so I'll likely give in soon. Fortunately, that plugin Makefile is just a template (https://github.com/psi4/psi4public/blob/master/lib/plugin/Makefile.template), so if I can get plugins working development-environment-wise, adjusting the `--new-plugin-makefile` output won't be a problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/214#issuecomment-172151258:296,down,down,296,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172151258,1,['down'],['down']
Availability,"A couple thoughts before a more thorough review:. Can you add some test cases to verify that this doesn't change the SCF energy? That set of test molecules from yesterday would be good, plus a few larger molecules. Could you do some timing to verify that this does in fact speed the SCF code up? A comparison of system size, density threshold, timing, and energy error would be good. It appears that you're calculating integrals within the master loop and doing redundant work, possibly more than the original algorithm. I think you want to calculate all (NM|NM) shells outside of the loop and use those integrals within the loop.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2062#issuecomment-743352546:363,error,error,363,https://psicode.org,https://github.com/psi4/psi4/pull/2062#issuecomment-743352546,2,"['error', 'redundant']","['error', 'redundant']"
Availability,"A few docs. What's in the conda packages psi4 & psi4-deps and the installer psi4conda?; --------------------------------------------------------------------------. psi4 - has full-featured psi4 itself and necessarily all the link-time qc addons (e.g., chemps2). Of gcc-ness, it has minimal, run-time libraries, not compilers, though, for linux, full gcc and run-time gcc are the same. It doesn't have the run-time qc addons (e.g., dftd3). psi4-deps - does not have psi4 itself (though fine to install it alongside). Does have all the link-time and run-time addons. Does have cmake and sphinx (and python). Of gcc-ness, has full packages, that is, compilers, not runtime packages. installer - has full-featured psi4 itself, all link-time qc addons, all run-time qc addons, and minimal gcc runtime libraries. How to just get Psi4 with minimal conda interaction; ---------------------------------------------------. Download one of the six installers (Linux/Mac; Py27, 35, 36; presently at http://vergil.chemistry.gatech.edu/download/). `bash` it. Follow the prompts and _do_ make the adjustments to PATH and PSI_SCRATCH that it suggests at the end. Test with `psi4 --test`. Done. How to get a pre-build Psi4 into a conda environment of an existing Ana/Miniconda installation; ----------------------------------------------------------------------------------------------. `conda create -n p4env python=x.x psi4 psi4-deps -c psi4/label/devel -c psi4`. Same for Mac/Linux. Substitute desired python version: 2.7, 3.5, 3.6. Only reason for psi4-deps is to get the qc runtime addons; could say ""dftd3 gcp v2rdm_casscf"" instead of ""psi4-deps""; or leave them out if you don't want them. Activate environment and make the adjustmets to PATH and PSI_SCRATCH that it suggests at the end. Test with `psi4 --test`. How to use all those conda packages to compile Psi4 faster and easier; ---------------------------------------------------------------------. `conda create -n p4deps python=x.x psi4-deps -c psi4`. Sa",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/466#issuecomment-292102715:913,Down,Download,913,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-292102715,1,['Down'],['Download']
Availability,"A few preliminaries:; 1. Does the optimization succeed if you don't use finite differences?; 2. Does the same error occur if you don't freeze the com and prevent rotation? I don't know if the automatically generated displacement coordinates make sense with these restrictions applied.; 3. What is at the bottom of the output file, e.g., were any optimization steps taken?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/153#issuecomment-124775223:110,error,error,110,https://psicode.org,https://github.com/psi4/psi4/issues/153#issuecomment-124775223,1,['error'],['error']
Availability,"A few updates on my progress:; - Most features I'd like to see available from adcc in Psi4 are now implemented. We're still working on UHF support for Psi4 (see adc-connect/adcc#20), which only involves adcc-side changes. With PR 20 merged, I'd consider the adcc-Psi4 interface feature complete for now as well.; - Apart from the tests requiring UHF, all tests I have committed are passing on my machine. The testdata is generated using adcc and pyscf, so no overlap with the Psi4 interface code I add here.; - Installation of adcc from the Psi4 buildsystem is untested, since it requires adcc `v0.13.2` to be tagged on our end. We'll do that after PR 20 is merged on our end. With that said: Feel free to be nitty on my code if you find something :smile:.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-552136812:63,avail,available,63,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-552136812,1,['avail'],['available']
Availability,"A little worried damping is not being applied correctly. We build JK matrices from C matrices and not the density, the only time the density is used is in the DIIS error vector and for the energy. We probably need to scale the Fock matrices as well. @jturney @andysim Did I miss something here?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/422#issuecomment-228439151:164,error,error,164,https://psicode.org,https://github.com/psi4/psi4/pull/422#issuecomment-228439151,1,['error'],['error']
Availability,"A problem was just fixed with GGAs and meta-GGAs in libxc 5, which may have caused some of the failures.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-619533547:95,failure,failures,95,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-619533547,1,['failure'],['failures']
Availability,"A restart is only possible if the _binary_ files (i.e., those in your scratch directory – probably /tmp) are also available. It is not feasible to store the CC wave function in the working directory, as it often requires too many GB of storage for routine checkpointing. This may be your problem. There is also an issue that the phases on the MOs must be consistent between computations. This is normally corrected automatically by PSI4, but I don't know if an error occurred in your job(s). ## -TDC. Prof. T. Daniel Crawford; crawdad@vt.edu; 540-231-7760. On Dec 3, 2013, at 4:34 PM, sbart76 notifications@github.com wrote:. > dear psi4 team,; > ; > i am trying to restart an interrupted coupled cluster run, but to no avail. the input file has the following keywords:; > ; > set cceom restart_eom_cc3 true; > set ccenergy restart true; > set cclambda restart true; > set ccresponse restart true; > ; > yet, in the output file in the ccenergy section i find:; > ; > Restart = No; > ; > the files psi.{pid}.\* from the previous run are in the current working directory, permissions are correct. increasing verbosity didn't seem to help me to trace the problem - i am basically not sure what file and from where psi4 wants to read, and i cannot find it in the manual. could anybody please enlighten me?; > ; > cheers,; > bartek; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/27#issuecomment-29766453:114,avail,available,114,https://psicode.org,https://github.com/psi4/psi4/issues/27#issuecomment-29766453,4,"['avail', 'checkpoint', 'error']","['avail', 'available', 'checkpointing', 'error']"
Availability,"A simple hack around this problem is to preload libkml_rt.so. If you are; using bash,; export LD_PRELOAD = libmkl_rt.so should fix it. The problem comes due to; conflict between; the mkl routines with which psi4 was installed with the numpy's mkl; routines. On Sat, Dec 17, 2016 at 6:57 AM, Ugur Bozkaya <notifications@github.com>; wrote:. > I have compiled psi4 on Linux (Centos) then I got the following run time; > error; >; > ""Intel MKL FATAL ERROR: Cannot load libmkl_avx2.so or libmkl_def.so.""; >; > I have already sourced MKL and intel compilers as usual, with the; > following lines; >; > ""source /opt/intel/parallel_studio_xe_2016.3.067/compilers_and_; > libraries_2016/linux/bin/compilervars.sh intel64; > source /opt/intel/parallel_studio_xe_2016.3.067/compilers_and_; > libraries_2016/linux/mkl/bin/mklvars.sh intel64""; >; > In old versions of psi4 I never encounter such a problem with the same; > intel package.; >; > Thanks,; >; > @loriab <https://github.com/loriab> @dgasmith; > <https://github.com/dgasmith>; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/552>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AFIK8BfN0TXGNudgDdYo90E43zTWgjgcks5rI849gaJpZM4LP3p6>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/552#issuecomment-267762083:418,error,error,418,https://psicode.org,https://github.com/psi4/psi4/issues/552#issuecomment-267762083,3,"['ERROR', 'error']","['ERROR', 'error']"
Availability,"A skipped test is not a problem -- the CI environment or resources constraints preclude running the test, so it's skipped. The failure above that of `dft_sapt1` is a problem https://dev.azure.com/psi4/psi4/_build/results?buildId=5535&view=logs&j=f237aa60-f90a-5f4e-46d5-6f838a77d991&t=4577f1f3-bc89-5040-5cf1-0f1c10ea6889&l=4664 so a good first debugging step is to try it locally.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2980#issuecomment-1583077201:127,failure,failure,127,https://psicode.org,https://github.com/psi4/psi4/pull/2980#issuecomment-1583077201,1,['failure'],['failure']
Availability,"A traceback is never adequate information for a bug report. We need a Psi4 version number, exact steps to reproduce the error, and need to know what operating system you're using.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2294#issuecomment-920805274:120,error,error,120,https://psicode.org,https://github.com/psi4/psi4/issues/2294#issuecomment-920805274,1,['error'],['error']
Availability,"ARY_DIRS}` to external/downstream/gpu_dfcc seems to do the trick and gpu_dfcc builds OK (within the psi4 tree). It does also need CMAKE_CUDA_COMPILER and CUDA_TOOLKIT_ROOT_DIR defining before it's happy (rather than having defaults). I added them to CMakeCache.txt but presumably they'd work if added to the original cmake command. Once built, it fails when trying to install gpu_dfcc within the tree:; ```; [ 64%] Performing build step for 'gpu_dfcc_external'; [100%] Built target gpu_dfcc; [ 70%] Performing install step for 'gpu_dfcc_external'; [100%] Built target gpu_dfcc; Install the project...; -- Install configuration: ""Release""; -- Up-to-date: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/lib/gpu_dfcc/gpu_dfcc.so; CMake Error at cmake_install.cmake:61 (file):; file INSTALL cannot find; ""/home/laz/build/psi4/psi4/objdir/external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external/__init__.py"". Makefile:84: recipe for target 'install' failed; make[3]: *** [install] Error 1; external/downstream/gpu_dfcc/CMakeFiles/gpu_dfcc_external.dir/build.make:73: recipe for target 'external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-stamp/gpu_dfcc_external-install' failed; make[2]: *** [external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-stamp/gpu_dfcc_external-install] Error 2; CMakeFiles/Makefile2:1419: recipe for target 'external/downstream/gpu_dfcc/CMakeFiles/gpu_dfcc_external.dir/all' failed; make[1]: *** [external/downstream/gpu_dfcc/CMakeFiles/gpu_dfcc_external.dir/all] Error 2; Makefile:140: recipe for target 'all' failed; make: *** [all] Error 2; ```; It looks like __init__.py isn't being generated from __init__.py.in for some reason. It _could_ be because I've been hacking stuff about: I'll try with a fresh tree (modified with your additions) tomorrow. Interestingly, the stand-alone version I built doesn't even link against libiomp5.so or and LAPACK or BLAS libraries (apart from the CUDA libraries):;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-400483634:1156,Error,Error,1156,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-400483634,2,"['Error', 'down']","['Error', 'downstream']"
Availability,"Actually, I think it might make sense to keep this issue open (and retitled to ""cdomp2-2 test suite failure when ATLAS is used"" or so); this is something that should be tracked down eventually.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1461#issuecomment-451669743:100,failure,failure,100,https://psicode.org,https://github.com/psi4/psi4/issues/1461#issuecomment-451669743,2,"['down', 'failure']","['down', 'failure']"
Availability,"Actually, I think this might be a bigger problem. I was able to fix the issue with 'flags' by replacing some code in /lib/python/inputparser.py. ```; future_re = re.compile('^from __future__ import .*$',flags=re.MULTILINE); temp = future_re.sub(future_replace, temp); #temp = re.sub('^from __future__ import .*$', future_replace, temp, flags=re.MULTILINE); ```. but then I get this other error message (even with the newest commit):. ```; Traceback (most recent call last):; File ""<string>"", line 6, in <module>; File ""/Users/francesco/Source/psi4/lib/python/aliases.py"", line 39, in <module>; from wrappers import *; File ""/Users/francesco/Source/psi4/lib/python/wrappers.py"", line 39, in <module>; from driver import *; File ""/Users/francesco/Source/psi4/lib/python/driver.py"", line 38, in <module>; from interface_cfour import *; File ""/Users/francesco/Source/psi4/lib/python/interface_cfour.py"", line 40, in <module>; import qcdb; File ""/Users/francesco/Source/psi4/lib/python/qcdb/__init__.py"", line 35, in <module>; from .molecule import Molecule; File ""/Users/francesco/Source/psi4/lib/python/qcdb/molecule.py"", line 39, in <module>; from .libmintsmolecule import *; File ""/Users/francesco/Source/psi4/lib/python/qcdb/libmintsmolecule.py"", line 31, in <module>; from oldpymodules import OrderedDict; ImportError: No module named oldpymodules; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/169#issuecomment-133175539:388,error,error,388,https://psicode.org,https://github.com/psi4/psi4/issues/169#issuecomment-133175539,1,['error'],['error']
Availability,"Actually, as defined above, the M11 dictionary should raise a validation error, see section 2b of `check_consistency()`...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/802#issuecomment-383216051:73,error,error,73,https://psicode.org,https://github.com/psi4/psi4/pull/802#issuecomment-383216051,1,['error'],['error']
Availability,"Actually, for the build I just tried, the real source of the error was in libdpd, which now includes libmints/mints.h, which includes (through basisset.h) libint.h. Since the libdpd/Makefiles.txt did not list mints as a dependency, the compilation tried to build libdpd before the libint header was ready, hence the crash. Running a test with the proper dependency in place now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/219#issuecomment-173202821:61,error,error,61,https://psicode.org,https://github.com/psi4/psi4/issues/219#issuecomment-173202821,1,['error'],['error']
Availability,"Actually, if this is intended, then the manual should be adjusted. 'active' is listed as a relevant keyword for CI in the ""Spaces available in the MCSCF program"" section at http://www.psicode.org/psi4manual/master/detci.html. Otherwise, the behavior should be changed that when running ci(n), the code should figure out the resulting restricted spaces..",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/600#issuecomment-278208375:130,avail,available,130,https://psicode.org,https://github.com/psi4/psi4/issues/600#issuecomment-278208375,1,['avail'],['available']
Availability,"Actually, if what I said was correct, that's not quite DNS hijacking. It's still resolving to the correct IP, but downloading a different document based on referer. This would point to a godaddy server hijacking (I would think)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/342#issuecomment-210026465:114,down,downloading,114,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210026465,1,['down'],['downloading']
Availability,"Actually, it sounds like there might be an issue in the code, although I am not sure if I fully understand stability analysis. > The instability analysis gave us the first two terms of the Taylor expansion, analytically. If you have minimized a second-order Taylor expansion, this means that you've solved the Newton-Raphson equations. Thus, in addition to having the *direction* of the instability vector, you should also have its **length**. That is, one should not have any user fed in length for the step!. Doing a line search in the direction of the instability is exactly what an orbital rotation optimizer can do. Unfortunately, I'm again pegged down by other projects...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3045#issuecomment-1706419961:653,down,down,653,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1706419961,1,['down'],['down']
Availability,"Actually, there are more failures; ```; (gdb) bt; #0 __pthread_kill_implementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0); at pthread_kill.c:44; #1 0x00007f21b9c426d3 in __pthread_kill_internal (threadid=<optimized out>, signo=6) at pthread_kill.c:78; #2 0x00007f21b9be9c4e in __GI_raise (sig=sig@entry=6) at ../sysdeps/posix/raise.c:26; #3 0x00007f21b9bd1902 in __GI_abort () at abort.c:79; #4 0x00007f21862e80af in std::__glibcxx_assert_fail (file=<optimized out>, line=<optimized out>, ; function=<optimized out>, condition=<optimized out>); at ../../../../../libstdc++-v3/src/c++11/assert_fail.cc:41; #5 0x00007f21aa275614 in std::vector<double const*, libint2::detail::ext_stack_allocator<double const*, 121ul> >::operator[] (this=0x56025b76c988, __n=6) at /usr/include/c++/14/bits/stl_vector.h:1149; #6 0x00007f21aa2a709b in psi::Libint2TwoElectronInt::compute_shell_deriv1 (this=0x56025b7bb980, s1=0, s2=0, ; s3=0, s4=0) at /home/work/psi4-1.9.1/psi4/src/psi4/libmints/eribase.cc:3245; #7 0x00007f21a9f71d73 in _ZN3psi11MintsHelper11metric_gradERSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt10shared_ptrINS_6MatrixEESt4lessIS7_ESaISt4pairIKS7_SA_EEERSE_._omp_fn.0(void) (); at /home/work/psi4-1.9.1/psi4/src/psi4/libmints/mintshelper.cc:2343; #8 0x00007f219d9a89c4 in __kmp_api_GOMP_parallel_40_alias (); from /home/susi/.conda/envs/p4env/lib/libgomp.so.1; #9 0x00007f21a9f5f757 in psi::MintsHelper::metric_grad (this=0x56025ac87f20, D=..., aux_name=...); at /home/work/psi4-1.9.1/psi4/src/psi4/libmints/mintshelper.cc:2335; #10 0x00007f21a9b85c92 in psi::scfgrad::DFJKGrad::build_AB_x_terms (this=0x56025a8b4200); at /home/work/psi4-1.9.1/psi4/src/psi4/scfgrad/jk_grad.cc:862; #11 0x00007f21a9b818c2 in psi::scfgrad::DFJKGrad::compute_gradient (this=0x56025a8b4200); --Type <RET> for more, q to quit, c to continue without paging--; at /home/work/psi4-1.9.1/psi4/src/psi4/scfgrad/jk_grad.cc:257; #12 0x00007f21a9b7595c in psi::scfgrad::SCFDeriv:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326581969:25,failure,failures,25,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326581969,1,['failure'],['failures']
Availability,"Add a new method in `share/python/procedures/proc_table.py:172` that links to a function in `share/python/procedures/proc_table.py:1710` (line number approximate) that should mimic `run_scf_gradient` right above that line. Make sure to raise a Validation error for non-RHF and DFT references for now. The Hessian should then run assuming some untested code works as expected. For frequencies: when we use finite difference Hessians its easy to assign different frequencies to different symmetries, without that it becomes much more difficult. You can guess which frequency applies to which frequency, but you cannot be certain in some cases. @loriab Do you remember the conclusion of this? I think we might have to insert our new thermo module for this. @bwb314 Hows the NumPy thermo module coming?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/437#issuecomment-230648867:255,error,error,255,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-230648867,1,['error'],['error']
Availability,Added the releasenotes from psicode downloads page to the github release: https://github.com/psi4/psi4/releases/tag/1.0,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/367#issuecomment-232781392:36,down,downloads,36,https://psicode.org,https://github.com/psi4/psi4/issues/367#issuecomment-232781392,1,['down'],['downloads']
Availability,"Adding purely for the sake of search results for anyone else who goes down this rabbit hole:. If you are getting a mismatch between Orca and Psi4 on, say, a dimer interaction energy, and your system contains Xe or I, and you've been tearing your hair out trying to reconcile the difference, **this is probably why**. Orca removes the ECPs on ghost sites.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1968#issuecomment-1764917353:70,down,down,70,https://psicode.org,https://github.com/psi4/psi4/issues/1968#issuecomment-1764917353,1,['down'],['down']
Availability,"Additional testing confirms that the error message I reported in my last message displays regardless of whether this fix is in place. This should be investigated in more detail later, but it's outside the scope of this PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1139#issuecomment-414416825:37,error,error,37,https://psicode.org,https://github.com/psi4/psi4/pull/1139#issuecomment-414416825,1,['error'],['error']
Availability,"Admittedly the error message should be updated to be more informative, but; the short answer is a single atom doesn't have a vibrational frequency. More generally any molecular system has 3 times the number of atoms, total; degrees of freedom; the difference between that and the number of external; degrees of freedom is the internal degrees of freedom, i.e. the; vibrations. An atom has three external degrees of freedom and thus in turn; has 0 internal degrees of freedom. Hope that helps.; On Mar 31, 2016 8:07 PM, ""drhaney"" notifications@github.com wrote:. > Attempting frequency() on atomic species fails irrespective of charge,; > multiplicity, and reference type.; > ; > Typical error message:; > ; > 1 displacements needed.; > 1; > ; > An error has occurred. Traceback:; > : basic_string::replace: File """", line 26, in; > ; > File ""/home/drhaney/miniconda/share/psi4/python/driver.py"", line 1840, in; > frequency; > psi4.thermo(wfn, wfn.frequencies()); > ; > Thanks,; > -drhaney, -- that's ""D. R."", not Doctor.; > ; > Typical input file attached (C atom, neutral triplet).; > C.txt https://github.com/psi4/psi4/files/198782/C.txt; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/332",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/332#issuecomment-204210196:15,error,error,15,https://psicode.org,https://github.com/psi4/psi4/issues/332#issuecomment-204210196,3,['error'],['error']
Availability,"After @andysim 's fix I get a normal print; ```; MO spaces... FC OCC VIR FV; ----------------------; 36 91 567 0. Number of basis functions in the DF-CC basis: 2548. Available memory : 61440.00 MB; Memory requirement for 3-index ints : 7413.66 MB; Memory requirement for DF-CC int trans: 23261.99 MB; Memory requirement for CC contractions: 60934.08 MB; Warning: T2 amplitudes will be stored on the disk!; Memory requirement for Wabef term : 34201.37 MB; ```. Though the calculation exceeds my 64 GiB RAM in the end. @kaljugit wow, looks like you went deep!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1764#issuecomment-561549878:166,Avail,Available,166,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-561549878,1,['Avail'],['Available']
Availability,"After a discussion, the plan is to:. * Implement SymmDFJK vs PackedDFJK logic in the DFJK constructor, thus requiring memory and wK info at initialization time that we don't now.; * Overload the constructor so that there's a default and an elaborate signature; * For methods that require PackedDFJK because of downstream data structure assumptions, that will be handled in proc.py with a force_*dfjk flag passed to scf_helper; * SymmDFJK aka Matt's will be named MemDFJK. PackedDFJK aka Rob's will be named DiskDFJK. since the actual implementations aren't as orthogonal as those names suggest, references/more explicit explanations will be in HF and/or SCF_TYPE docstrings; * `SCF_TYPE` option will have three relevant choices; * `DF` formerly went to Rob's code. now will choose the best DFJK from available info. will be conservative on memory estimation; * `MEM_DF` will always go to Matt's code so that a user can test both or be smarter than the logic depending on known hardware/mem considerations; * `DISK_DF` will always go to Rob's code; * The read_options docstring for SCF_TYPE will label the MEM_DF and DISK_DF as expert choices; * In future, other algorithms will follow similar DF|MEM_DF|DISK_DF options in their MTD_TYPE algorithm controllers. Any further ideas on labeling these things welcome. @CDSherrill . Edits:. * `SymmDF` and `DFHelper` classes shall go to Pascal case",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/961#issuecomment-382894140:310,down,downstream,310,https://psicode.org,https://github.com/psi4/psi4/pull/961#issuecomment-382894140,2,"['avail', 'down']","['available', 'downstream']"
Availability,"After further investigation, I've learned a few things. First, I was mistaken about the PCG convergence guarantees. Each iteration guarantees that you are closer to the correct solution vector. It does _not_ guarantee that your residual RMS is smaller. For a simple model, just think of z=500x^2+y^2. (1, 0) is closer to the minimum than (0, 10), but (0, 10) gives a smaller value of `z`. In this particular case, you are indeed getting close to the right `x` value, even as your residual increases. Second, when I throw exact MO hessian diagonalization at the problem, they aren't converging well either. The problem is that the MO hessian often has small, negative eigenvalues along the optimization path, causing steps that can be large and energy increasing. While I think this points out a need for more robust convergence algorithms, the behavior I'm seeing does not need an implementation error to be explained. As such, I'm inclined to close this issue and mark an item on the developer wishlist. #2183 is worth separate investigation. @susilehtola, any objections?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2204#issuecomment-869014790:809,robust,robust,809,https://psicode.org,https://github.com/psi4/psi4/issues/2204#issuecomment-869014790,4,"['error', 'robust']","['error', 'robust']"
Availability,"After installing the binary patches, I get the error; ```; psi4.driver.p4util.exceptions.MissingMethodError: Method=ccsdt is not available for any derivative level. Did you mean? ccd ccsd ccsd(t) cisd cisdt cisdtq lccsd ksdt; ```; with the above input as well as `tests/mrcc/ccsdt/input.dat`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3159#issuecomment-2071575524:47,error,error,47,https://psicode.org,https://github.com/psi4/psi4/issues/3159#issuecomment-2071575524,2,"['avail', 'error']","['available', 'error']"
Availability,"After some deep digging, the source of the `nan`s has been identified!. In the function `compute_numeric_overlap` in DFJCOSK.cc, we have this block of code:; ```; for (size_t p = 0; p < npoints_block; p++) {; for (size_t k = 0; k < nbf_block; k++) {; X_blockp[p][k] = point_values->get(p, k) * std::sqrt(w[p]);; }; }; ```. which is meant to compute a part of the X matrix, as defined in Eq. 2 of [this paper.](https://doi.org/10.1063/1.3646921) Problem is, with a ROBUST grid pruning scheme and 146 spherical points, some of the weights w seem to evaluate as negative. The resulting square-rooting of these weights during computing X_blockp, then, is what leads to the `nan`s that were observed. After some discussion with @hokru, it seems that Psi4 grid weights can indeed be negative as expected behavior, so this is a problem that could show up with other constructed grids fed into COSX. This leaves the question - how do we best handle this? One obvious start is to simply have COSX throw an exception if a grid with negative weights is used.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2890#issuecomment-1460782376:464,ROBUST,ROBUST,464,https://psicode.org,https://github.com/psi4/psi4/issues/2890#issuecomment-1460782376,1,['ROBUST'],['ROBUST']
Availability,"Agreed we'll catch it and print a clear message. However, I'm thinking of a user sending a list of molecules that includes some atoms through the optimizer, and so whether this is an ""error"", and if ""false"" is going to interrupt desirable processes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2971#issuecomment-1568719787:184,error,error,184,https://psicode.org,https://github.com/psi4/psi4/issues/2971#issuecomment-1568719787,2,['error'],['error']
Availability,"Agreed, the write error is a bug. The error is due to the number of; optimization coordinates changing. When that happens, then the old binary; file should be wiped out, and I guess it is not being removed. It is; possible this bug has been fixed in the latest version as we have looked at; this problem before, but I'm not sure. The 'dynamic_level' idea is still under development, and hasn't been much; tested.; If you look in /psi4/psi4/src/psi4/optking/set_params.cc, you can see what; the dynamic level is doing. It is changing parameters towards typically; more robust levels. You can do the same thing by changing input keywords.; For example, the behavior of dynamic_level=3 shown there can be produced by; setting the analogous keywords. Opt_params.coordinates = OPT_PARAMS::BOTH;. Opt_params.consecutive_backsteps_allowed = 1;. Opt_params.step_type = OPT_PARAMS::RFO;. Opt_params.intrafragment_step_limit = 0.1;. Opt_params.intrafragment_step_limit_min = 0.1;. Opt_params.intrafragment_step_limit_max = 0.1;. All this to say that you can skip the dynamic_level usage (or simply start; with dynamic_level = 3 [don't know if anyone has ever done that!] and I; expect the i/o error will go away. On the stability of the back-transformation, optking accounts for Delta(q); for a torsion value going from -178 to +178 degrees, etc.. However, the; formula for the derivative (B-matrix element) is undefined and also; discontinuous at 180. A real pain. I hope to try to fix this someday, but; when I do, it'll probably be in the newer python optimizer I'm developing. On Wed, Nov 15, 2017 at 5:21 PM, Chaya Stern <notifications@github.com>; wrote:. > This seems to be an error in writing rather than an error in the; > constrained optimization, isn't it?; >; > This error shows up when dynamic level is raised to 3 after the first; > convergence check when it tries to write optimization data to binary file.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email dire",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/858#issuecomment-344949158:18,error,error,18,https://psicode.org,https://github.com/psi4/psi4/issues/858#issuecomment-344949158,6,"['error', 'robust']","['error', 'robust']"
Availability,"Agreed, this should be improved. However, there are various reasons why; someone might want to optimize only along a restricted set of coordinates,; so I am not sure this should go automatically to error mode (switching to; cartesians, etc.). Certainly, I should add a WARNING at the end that the; full space wasn't optimized. On Sun, Mar 13, 2016 at 11:01 AM, Lori A. Burns notifications@github.com; wrote:. > Shouldn't the mismatch between the total gradient rms (0.04) and the; > gradient it's decided to consider (1e-7) signal to the optimizer that it; > doesn't have the full picture? Throw in some Cartesian steps or whatever; > others do?; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/310#issuecomment-195987054.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310#issuecomment-196005999:198,error,error,198,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196005999,1,['error'],['error']
Availability,"Ah yes, my fault for not suggesting posting the input file when OP asked the form for PRs. I can believe that we could stick something funny on `wfn` (or the user could) like EFP object, stray array that `save` could balk at. But, yes, we would have hit the problem if it had been in test suite. the MP2 error in CI is new this week. i'll have to look into that. but it's unrelated to this PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1706#issuecomment-524599229:11,fault,fault,11,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524599229,2,"['error', 'fault']","['error', 'fault']"
Availability,"Ah, I run a lot of the CI code that hasn't been touched since Psi3 through clang-format with google style options so that I can read it a bit better. I do wish the ignore white-space option was available online as well. I do like the idea of a style guide for the code, but it isn't particularly high on any list.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/372#issuecomment-217654331:194,avail,available,194,https://psicode.org,https://github.com/psi4/psi4/pull/372#issuecomment-217654331,2,['avail'],['available']
Availability,"Ah, I see it now. Just the decimals were not copied correctly in the email. > On Jan 8, 2016, at 5:04 PM, Daniel Smith dgasmith@icloud.com wrote:; > ; > It is also worth noting that the SCF is wrong. Although, I cannot reproduce the SCF error on my machine. Can anyone else?; > ; > > On Jan 8, 2016, at 4:54 PM, ssh2 <notifications@github.com <mailto:notifications@github.com>> wrote:; > > ; > > If really want to get FCI results for a system of this size - I would recommend to learn about the method called density matrix renormalization group (DMRG). F-/aug-cc-pvtz is within its capabilities. A reference to start with could be:; > > (1) Olivares-Amaya, R.; Hu, W.; Nakatani, N.; Sharma, S.; Yang, J.; Chan, G. K.-L. The Journal of chemical physics. 142, 034102 (2015).; > > ; > > —; > > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/204#issuecomment-170138644.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204#issuecomment-170141043:237,error,error,237,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170141043,2,['error'],['error']
Availability,"Ah, NumPy issue. Needs a rebuild after Psi4 1.3.2 release since NumPy fixed a security bug and broke quite a few downstream repos. You can try downgraded NumPy by one patch version.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-492354867:113,down,downstream,113,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-492354867,2,['down'],"['downgraded', 'downstream']"
Availability,"Ah, so it seems I made a mistake in my assumptions. The failed CI tells me this:. `/home/runner/work/psi4/psi4/objdir/external/downstream/v2rdm_casscf/v2rdm_casscf_external-prefix/src/v2rdm_casscf_external/threeindexintegrals.cc:33:10: fatal error: psi4/libmints/sieve.h: No such file or directory; #include <psi4/libmints/sieve.h>`; ; It seems that PKJK is, in fact, _not_ the only place that uses ERISieve. This v2rdm_casscf plugin does, as well.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2933#issuecomment-1527816347:127,down,downstream,127,https://psicode.org,https://github.com/psi4/psi4/pull/2933#issuecomment-1527816347,2,"['down', 'error']","['downstream', 'error']"
Availability,"Ah, so what happens is _if_ CheMPS2 is enabled, then its four tests get added, and one of those (`scf-n2`) gets added to quicktests (https://github.com/psi4/psi4/blob/master/tests/CMakeLists.txt#L113-L118, https://github.com/psi4/psi4/blob/master/tests/dmrg/scf-n2/CMakeLists.txt#L3). So there's some coverage at both levels. Admittedly, I need to check if other add-ons follow that scheme. I certainly agree that if any add-on is enabled, its failure needs to be caught at the quicktest level of testing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/474#issuecomment-249306912:444,failure,failure,444,https://psicode.org,https://github.com/psi4/psi4/issues/474#issuecomment-249306912,1,['failure'],['failure']
Availability,"Ah, we recently changed some Psi4 infrastructure and there is no longer a global wavefunction as the error mentions. This is either occurring because:; 1) Your PSIDATADIR path is pointing to an older library version; 2) You wrote a custom plugin that still uses this functionality. Please view the following topic: http://forum.psicode.org/t/wavefunction-passing-update/139. Cheers,; Daniel Smith. > On Mar 10, 2016, at 9:58 AM, hernan3009 notifications@github.com wrote:; > ; > It was possible to compile and install psi4 without problems, but the make command returned; > ; > hernan@carlos:~/Power Method/Psi4/pluginintegrales$ make; > /usr/bin/g++ -DHAVE_MM_MALLOC_H -DENABLE_CHEMPS2=1 -DFC_SYMBOL=2 -DHAVE_SYSTEM_NATIVE_LAPACK -DHAVE_SYSTEM_NATIVE_BLAS -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DRESTRICT=**restrict** -Xlinker -export-dynamic -fPIC -std=c++11 -fopenmp -O3 -DNDEBUG -Wno-unused -I/home/hernan/Programas/psi4/instalacion/interfaces/include -I/home/hernan/Programas/psi4/instalacion/src/lib -I/home/hernan/Programas/psi4/psi4/src/lib -I/home/hernan/Programas/psi4/psi4/include -I/home/hernan/Programas/psi4/instalacion/include -I/home/hernan/Programas/psi4/instalacion/boost/include -I/usr/include/python2.7 -I/usr/include -I/usr/include -I/usr/include -I/usr/include -c pluginintegrales.cc; > pluginintegrales.cc: In function ‘psi::PsiReturnType psi::pluginintegrales::pluginintegrales(psi::Options&)’:; > pluginintegrales.cc:63:64: error: ‘class psi::Process::Environment’ has no member named ‘wavefunction’; > boost::shared_ptr<Wavefunction> wfn = Process::environment.wavefunction();; > ^; > make: **\* [pluginintegrales.o] Error 1; > ; > —; > Reply to this email dire",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/308#issuecomment-194993406:101,error,error,101,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-194993406,1,['error'],['error']
Availability,"Ah, yes if `DEFAULT_SYM_TOL` was just an attribute of Molecule, that'd work just fine. That was the scheme I originally talked over with Jet, and in that case the argument to `symmetrize()` could certainly be dropped. . It was later that I noticed the separate tolerance parameter to `symmetrize()` and thought that might be a way around WebMO's problem (point group changing in the course of geom opt) _without_ major construction work on the Molecule class. Brandon was looking into this at one point. Really should reproduce the WebMO problem first.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/232#issuecomment-205865787:261,toler,tolerance,261,https://psicode.org,https://github.com/psi4/psi4/issues/232#issuecomment-205865787,1,['toler'],['tolerance']
Availability,"Ah, yes you are right. I have a class wrapper around psi4 that sets the initial configurations and that has the default value 64. That must be why I have the spikes. Because psi4 knows that is available to it because I requested it in the initial configurations. . Okay so I set up tests where I am generating an interaction energy surface scan for a dimer. I am using `mp2/cc-pvqz-ri`. I didn't know if the resolution identity error was implied like gaussian or if I had to explicitly state it. It's about 72 point single point energy scans. . **Test 1**. I reduced down the `64` to `16`. ```bash; -pe smp 16; ```. Reset the default where this is happening to set the thread to one. with the OMP and MKL flags set in the job submission script. . ```bash; export MKL_NUM_THREADS=12; export OMP_NUM_THREADS=12; ```; ```python. psi4.set_num_threads(1). ```; **Test 2**. Only rely on the flags in the job submission script. ```; export MKL_NUM_THREADS=12; export OMP_NUM_THREADS=12; ```. ```python. # psi4.set_num_threads(1); ```. It seems like so far the loads seem to be continuously used. I will get some graphs in the morning for you to look at.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2747#issuecomment-1278373201:193,avail,available,193,https://psicode.org,https://github.com/psi4/psi4/issues/2747#issuecomment-1278373201,3,"['avail', 'down', 'error']","['available', 'down', 'error']"
Availability,"Ah, yes, c-f vs. defaults is a likely cause. There are a couple ways to deal with mixing psi4 and c-f deps, but none that's simple, robust, and a one-liner. Whatever you do, `blas=*=mkl` is a must with c-f and psi. Then you can (1) maintain two channels for the two bases and mix them at the PYTHONPATH level, (2) start an env with a defaults + psi4 install, then install additional packages from c-f, (3) use an env spec file mixes a known safe combination of psi4 and c-f packages. This is admittedly aggravating for an ordinary request. It should get better soon, as I'm working on c-f packaging (there have been dependency blocks up until about a month ago). I can try to interpret any roadblocks you hit in the meantime. > reluctant to have a separate conda installation). Just to be clear, you wouldn't need a separate conda _installation_; only a separate conda _environment_.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2898#issuecomment-1468556742:132,robust,robust,132,https://psicode.org,https://github.com/psi4/psi4/issues/2898#issuecomment-1468556742,2,['robust'],['robust']
Availability,"Ah, yes, that out of core problem. It's a strange one that manifests itself in a seg fault for out of core calls to JK but, apparently, only when the L and R matrices are not the same (as is the case in CPHF). I'll just call PK instead, and add an error if out of core flags are requested. I'll squash this last flurry of commits and then this one is good to go.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/437#issuecomment-233001167:85,fault,fault,85,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-233001167,2,"['error', 'fault']","['error', 'fault']"
Availability,"All comments addressed. Unfortunately, I need to filter out renamed methods before any checks of the derivative type, since that raises a validation error if the method is invalid. Hence I need to catch the error in multiple branches of `gradient`. Isn't recursive driver wonderful?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1719#issuecomment-534816591:149,error,error,149,https://psicode.org,https://github.com/psi4/psi4/pull/1719#issuecomment-534816591,2,['error'],['error']
Availability,All newlines are removed in favour of a making a single long string that can be easily wrapped.; But one could instead wrap all lines of the error message separately to preserve these kind of formatted errors?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1867#issuecomment-613327739:141,error,error,141,https://psicode.org,https://github.com/psi4/psi4/issues/1867#issuecomment-613327739,2,['error'],"['error', 'errors']"
Availability,"All relevant error information should end up in the error box, not just `stderr`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2700#issuecomment-1226880838:13,error,error,13,https://psicode.org,https://github.com/psi4/psi4/pull/2700#issuecomment-1226880838,2,['error'],['error']
Availability,"All right, I just pushed some changes that should fix the CI! . Whether those changes are _kosher_ is a question, though. Previously, I used `option_with_flags` to handle `FORCE_PEDANTIC`.Now, I use `option_with_default` instead, and when `FORCE_PEDANTIC` is set to `ON`, it explicitly appends the `-pedantic-errors` flag in the `psi4/CMakeLists.txt` file. Is this an acceptable approach?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3150#issuecomment-2299098336:309,error,errors,309,https://psicode.org,https://github.com/psi4/psi4/pull/3150#issuecomment-2299098336,1,['error'],['errors']
Availability,"All right, bug fixed, and IncFock tests added! The new IncFock efficiency tests compare against an SCF ITERATIONS value of x+3, where x is the number of SCF iterations observed in the corresponding non-IncFock run (which also matches the iteration count seen in each output.ref file). I can reduce the 3 component down to something else if desired.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2792#issuecomment-1329450057:314,down,down,314,https://psicode.org,https://github.com/psi4/psi4/pull/2792#issuecomment-1329450057,1,['down'],['down']
Availability,All test cases pass now (using ctest). There wasn't any problem in the code. It was an issue in my perl environment settings which caused failure of some cc test cases.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/718#issuecomment-303925660:138,failure,failure,138,https://psicode.org,https://github.com/psi4/psi4/pull/718#issuecomment-303925660,1,['failure'],['failure']
Availability,"All tests ran through except for:; FAILED tests/fsapt1/test_input.py::test_fsapt1 - AssertionError: Traceback (most recent call last):; with the message:; E !----------------------------------------------------------------------------------!; E ! !; E ! Fatal Error: SCF_SUBTYPE=INCORE was specified, but there is not enough memory to !; E ! do in-core! Increase the amount of memory allocated to Psi4 or allow for !; E ! out-of-core to be used. !; E ! Error occurred in file: /home/conda/feedstock_root/build_artifacts/psi4nm_171103 !; E ! 8779956/work/psi4/src/psi4/lib3index/dfhelper.cc on line: 261 !; E ! The most recent 5 function calls were: !; E ! psi::PsiException::PsiException(std::__cxx11::basic_string<char, !; E ! std::char_traits<char>, std::allocator<char> >, char const*, int) !; E ! psi::DFHelper::initialize() !; E ! !; E !----------------------------------------------------------------------------------!. I think this is independent of this PR and the PR would be good to go",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3148#issuecomment-2013170817:260,Error,Error,260,https://psicode.org,https://github.com/psi4/psi4/pull/3148#issuecomment-2013170817,2,['Error'],['Error']
Availability,"All the CTests have passed, except two that are not related to this PR; 1.) sapt7 (Error Message: `'psi4.core.UHF' object has no attribute 'diis_manager'`). 2.) scf-cholesky-basis (Error message: `Energy with Cholesky 1e-7: computed value (-230.6415254470) does not match (-230.6415254327) to atol=1e-08 by difference (-0.0000000142).`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-946304560:83,Error,Error,83,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-946304560,2,['Error'],['Error']
Availability,"All the new packages are available. No further problems are anticipated, so lmk if there's further trouble. I'll leave this open for a few days for information.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3144#issuecomment-1984588364:25,avail,available,25,https://psicode.org,https://github.com/psi4/psi4/issues/3144#issuecomment-1984588364,1,['avail'],['available']
Availability,"All these tests are successful on my mac, which not the current version of psi4. Then, I download the latest psi4 binary on my linux cluster, then dfomp2p5-grad1 is still successful. However, dfomp3-grad2 fails. When trace the error, I saw that the SCF energies are quite different. Hence, there should be some changes in the SCF module recently. Now, I am compiling the current version of psi4, and I will update the tests that you were mentioned. . I can attribute the failure of all tests whose name ended with ""2"", which means they are open-shell molecules. However, dfomp2p5-grad1 should be successful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/190#issuecomment-157470643:89,down,download,89,https://psicode.org,https://github.com/psi4/psi4/issues/190#issuecomment-157470643,3,"['down', 'error', 'failure']","['download', 'error', 'failure']"
Availability,"All, I've gone back and forth on how to do the testing. The problem is that Psi4 has paths baked in at compile time, which need to point to the install locations to work correctly at installation. Like Lori said, I originally deemed the risk of everything breaking upon installing being a real problem for Psi4. I'm now leaning more towards what @jturney said, i.e. the canonical make cycle. I'm actually tweaking it as we speak so that it works that way (and hopefully also fixing this linking error I introduced with the math detection...). I think there's a happy medium here, where we only manually set the PSIDATADIR for tests and the install runs off the install dir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235916559:495,error,error,495,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235916559,1,['error'],['error']
Availability,"Allenes, yeah, 'too linear' and like to make trouble.; The backtransform broke the molecule, look at most of the `Change` values. They are huge!. I tried a few things and typical solutions like `set DYNAMIC_LEVEL 1` or `opt_coordinates delocalized` do not work well.; Also geomeTRIC is behaving oddly. Tested with pw6b95 instead of pwpb95. If you want something more reliable I can recommend cartesian coordinates and a computed initial hessian.; Optimisation with cartesian coordinates is usually slow, but actually OK with a decent initial hessian.; `set opt_coordinates cartesian `. Automatic initial hessian at a different (cheaper) level is easily done:; ```; set FULL_HESS_EVERY 0; optimize('pwpb95-d3bj',hessian_with='pbe0-d3bj/def2-SV(P)'); ```; usually no need to go beyond the above level, even PBE would be OK I think. Also this hessian will be numerical.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2020#issuecomment-712367091:367,reliab,reliable,367,https://psicode.org,https://github.com/psi4/psi4/issues/2020#issuecomment-712367091,1,['reliab'],['reliable']
Availability,Almost certainly because Ben took down some old qcel/qcng docs in preparation for the qcfractal release. I'll hunt down the replacement. Probably this can still join the merge queue b/c only Azure is required to pass.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2982#issuecomment-1714533318:34,down,down,34,https://psicode.org,https://github.com/psi4/psi4/pull/2982#issuecomment-1714533318,2,['down'],['down']
Availability,"Already [known and fixed](https://github.com/psi4/psi4/pull/1607) in the developer version of Psi. We're planning to release a v1.3.2 with the fix soon, though I don't have an estimate of when ""soon"" is. In the meantime, you can either downgrade NumPy, as mentioned, or use the developer version. Precise instructions on how to use the developer version depend on how you installed Psi in the first place.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1610#issuecomment-487277542:236,down,downgrade,236,https://psicode.org,https://github.com/psi4/psi4/issues/1610#issuecomment-487277542,2,['down'],['downgrade']
Availability,"Alright, I'm having a go at this - fixing the number of calculations is trivial, but knowing what we want to print is not. For the `bsse_type=[""nocp""]` case, we want to calculate `AB in AB`, `A in A` and `B in B`. We can print the total no-CP energy at nbody(1) = `A in A` + `B in B`, nbody(2) = `AB in AB`, and the interaction energy is the difference of the two. For the `bsse_type=[""cp""]` case, we want `AB in AB`, `A in AB` and `B in AB`. We _cannot_ print any total CP energies, because for those we need the monomer terms. But we _can_ print the CP interaction energy. In my view, the table as printed by the driver currently is wrong for `bsse_type=[""cp""]` case. Also, the `return_total_data` keyword has no effect on the returned energy, or the ""CURRENT ENERGY"" in the returned `wfn` object. For the `bsse_type=[""cp"", ""nocp""]` case, we want to calculate `A in A` and `B in B` in addition to the above. This allows us to calculate the counterpoise corrections to the total energies for A and B, and by extension, to AB. I think the table should be modified so that only total energies are printed in the total energies column, which means printing an empty column for `bsse_type=""cp""`, but a populated column for `bsse_type=[""cp"", ""nocp""]`. Also, it might make sense if `return_total_data=""True""` with `bsse_type=""cp""` triggered calculation essentially equivalent to `bsse_type=[""cp"", ""nocp""]`, or at least printed an error that total energies are not available with only `bsse_type=""cp""`. Thoughts?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1691#issuecomment-869394243:1425,error,error,1425,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-869394243,2,"['avail', 'error']","['available', 'error']"
Availability,"Alrighty, this one should be ready to go now. I tried to cook up a simple test using f orbitals, but they're all too costly; in the end I just added a permutation to the atom ordering in our existing cc-pVDZ water test, because this is enough to reveal the bug. The fact that we've always had a working cc-pVDZ test case shows how subtle the bug is; the affected d components in water must be zero by symmetry. I did have a distorted water in my test suite to check that case, but didn't detect problems. Oh well, live and learn I guess. This should be a trivial review, and it clearly helps to address a couple of high priority tickets, so please have at it whenever you get a chance. Sorry again for the error. Next time you see me, I'll be at a chalkboard, writing ""I will not cut and paste"", à la Bart in the Simpsons opening credits. Except, instead of writing it, I'll be cutting and pasting it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/903#issuecomment-361080182:706,error,error,706,https://psicode.org,https://github.com/psi4/psi4/pull/903#issuecomment-361080182,2,['error'],['error']
Availability,"Also fails with `set diag_method mitrushenkov`. Not completely surprised as the `olsen` and `mitrushenkov` methods have not been tested since this was integrated into Psi4 from Psi3 as far as I know. Its a bit of strange error in debugging as it looks like the H0 block was not initialized even though it was. Ill look into when I have time, but thats not likely to be soon. Do you really want something besides Davidson iterations or is this just a report that it doesn't work?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/559#issuecomment-271455005:221,error,error,221,https://psicode.org,https://github.com/psi4/psi4/issues/559#issuecomment-271455005,1,['error'],['error']
Availability,"Also perhaps of interest, I ran 150 similar calculations, many with symmetry. Without obvious issues except for the reported structure. Most DF-CCSD(T)/CBS interaction energies agree with expected errors to a lower CCSD(T) references. Some larger (expected) disagreements are the reason why I do these calculations, so I hope they are physical nature and not technical :-)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1110#issuecomment-408835725:197,error,errors,197,https://psicode.org,https://github.com/psi4/psi4/issues/1110#issuecomment-408835725,1,['error'],['errors']
Availability,"Also, here's what I get for the CI error:. `Error: The process 'C:\Miniconda\condabin\conda.bat' failed with exit code 1`. This seems unrelated to the changes in this PR?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2833#issuecomment-1346871211:35,error,error,35,https://psicode.org,https://github.com/psi4/psi4/pull/2833#issuecomment-1346871211,2,"['Error', 'error']","['Error', 'error']"
Availability,"Also, this is carried forward from [forums](http://forum.psicode.org/t/radical-anion-error-bug-in-1-6/2505/3).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2594#issuecomment-1146678498:85,error,error-bug-in-,85,https://psicode.org,https://github.com/psi4/psi4/issues/2594#issuecomment-1146678498,1,['error'],['error-bug-in-']
Availability,"Ambitious to hand-format read_options :-). What's wrong with the c-f of it, though? I can see that things like the below might need adjustment, but at a glance, it looked pretty respectful. line-break formatting isn't conveyed to the manual anyways. ```; options.add_str(""CFOUR_BASIS"", ""SPECIAL"",; ""STO-3G 3-21G 4-31G 6-31G 6-31G* 6-31G** 6-311G 6-311G* 6-311G** DZ DZP TZ TZP TZ2P PVDZ PVTZ ""; ""PVQZ PV5Z PV6Z PCVDZ PCVTZ PCVQZ PCV5Z PCV6Z AUG-PVDZ AUG-PVTZ AUG-PVTZ AUG-PVQZ AUG-PV5Z ""; ""AUG-PV6Z D-AUG-PVDZ D-AUG-PVTZ D-AUG-PVQZ D-AUG-PV5Z D-AUG-PV6Z cc-pVDZ cc-pVTZ cc-pVQZ ""; ""cc-pV5Z cc-pV6Z cc-pCVDZ cc-pCVTZ cc-pCVQZ cc-pCV5Z cc-pCV6Z PWCVDZ PWCVTZ PWCVQZ PWCV5Z ""; ""PWCV6Z PwCVDZ PwCVTZ PwCVQZ PwCV5Z PwCV6Z svp dzp tzp tzp2p qz2p pz3d2f 13s9p4d3f WMR ANO0 ""; ""ANO1 ANO2 EVEN_TEMPERED SPECIAL"");; ```. ```; if (name == ""FINDIF"" || options.read_globals()) {; /*- MODULEDESCRIPTION Performs finite difference computations of energy derivative, with respect to nuclear; displacements; for geometry optimizations and vibrational frequency analyses, where the required analytical derivatives are; not; available. -*/; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1192#issuecomment-417061812:1106,avail,available,1106,https://psicode.org,https://github.com/psi4/psi4/pull/1192#issuecomment-417061812,1,['avail'],['available']
Availability,"An error has occurred. Traceback:. <class 'Boost.Python.ArgumentError'>: Python argument types in. ```; psi4.scf(NoneType, NoneType); ```. did not match C++ signature:. ```; scf(boost::shared_ptr<psi::Wavefunction>, _object*, _object*): File; ```. ""<string>"", line 47, in <module>. This is, for example, from the opt1 test case, but all jobs fail. I; already tried removing my objdir completely and recompiling. On Sun, Mar 13, 2016 at 8:58 PM, Lori A. Burns notifications@github.com; wrote:. > The current head (0.4.156 / 7783818; > https://github.com/psi4/psi4/commit/77838182dbdf260e7f39e4e554b64ee3c05a0da7; > / 0.5.92) works fine for me on the test case above and on all the usual; > test cases. What is the nature of your broken python?; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/310#issuecomment-196104469.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310#issuecomment-196157987:3,error,error,3,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196157987,1,['error'],['error']
Availability,"An update - after a colleague rebooted the node I'd been using for testing with the `noxsave` kernel parameter (disabling AVX capability visibility in the CPU flags), I retried the same test files with the same settings and env on the same machine. ...and now I get the ""correct"" answer -- the one I'd get with `set wcombine false`. So I think despite 9163cbd08865d26129cfbaf5c302fc14f870f30f there is still a sketchy use of DGETRI or DGETRF somewhere getting pulled in by an edge-case I'm hitting (because, again, if I tweak the number of processes, or the memory, or the basis set, or the geometry ever so slightly, it goes away!). I think I should flag @andysim here?. I'll continue with `wcombine` for my genrealized fix and I'm am happy to keep testing this weird job on the same machine as patches come down-the-line.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2279#issuecomment-939372967:30,reboot,rebooted,30,https://psicode.org,https://github.com/psi4/psi4/issues/2279#issuecomment-939372967,2,"['down', 'reboot']","['down-the-line', 'rebooted']"
Availability,"And regarding the shared state issue. I did not realize that we were looking at orbital optimized methods so the example of avoiding work by intentionally sharing state here is a bad one. but the issue is still related. . The error arises when you run the modules one after the other, because the `DCFT` module is making some assumptions, probably unintentionally about the state of various psio files. However the `OMP2` module has modified that state and the assumptions `DCFT` is making are no longer valid. In this case the assumption is that the `MO Ints (OO|OV)` entry either does not exist, or if it exists it is the correct size to hold `O,O,O,V`. This is not a case of sloppy programing by the authors of either module, it is a consequence of DPD creating global state in a difficult to predict way (due to a lack of documentation), and not providing the means to program defensively around it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1288#issuecomment-435217365:226,error,error,226,https://psicode.org,https://github.com/psi4/psi4/issues/1288#issuecomment-435217365,1,['error'],['error']
Availability,And that error code (`20000_6805`) doesn't turn up anything on google either.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/923#issuecomment-368940788:9,error,error,9,https://psicode.org,https://github.com/psi4/psi4/issues/923#issuecomment-368940788,1,['error'],['error']
Availability,"And yeah, I was planning to file a ticket in here that ADIIS should be implemented. It is already available in ERKALE and I think PySCF, also, although I think PySCF also has EDIIS and I'm not sure whether either is enabled in the SCF. PySCF is in my experience excellent at finding convergent solutions to a problem; using spherical symmetry in the SAD code is an essential feature. The only issue I found recently is that DIIS in PySCF does not treat linear dependencies properly, which means that whenever you have overcompleteness, the code doesn't find the correct solution. https://github.com/pyscf/pyscf/issues/1000",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2235#issuecomment-874462682:98,avail,available,98,https://psicode.org,https://github.com/psi4/psi4/issues/2235#issuecomment-874462682,1,['avail'],['available']
Availability,And/or add to our cmake scripts a check for numpy. . It would also be useful to add cmake checks for the C++11 specific features we use and error out at configuration time. I think it tests for some but doesn't error out.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/407#issuecomment-225233909:140,error,error,140,https://psicode.org,https://github.com/psi4/psi4/issues/407#issuecomment-225233909,2,['error'],['error']
Availability,"Another case of the same issue: [same issue](http://forum.psicode.org/t/lambda-not-converged/2239). An `r_convergence` of `'6'` has no effect on the computation; `6`is required. Despite this, verbose mode _says_ the option was set just fine, and no error or warning arises that it actually was not.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1137#issuecomment-890503767:249,error,error,249,https://psicode.org,https://github.com/psi4/psi4/issues/1137#issuecomment-890503767,1,['error'],['error']
Availability,"Another instance of triggering the same ""Failed to converge"" print message, carried forward from [the forums](http://forum.psicode.org/t/failed-to-converge-error/1811). ```; memory 48 Gb. molecule {; 0 1; Au 0.456697 -1.333264 0.040916; C 2.603870 -0.838096 0.229755; H 2.763370 -0.719170 1.301892; C 2.477106 -2.135791 -0.222006; H 2.550111 -2.348345 -1.284567; H 2.591715 -2.990149 0.439107; B 2.865868 0.484463 -0.740811; F 1.800945 0.626222 -1.684345; F 2.929814 1.631672 0.055078; F 4.060740 0.285067 -1.428702. units angstrom; no_reorient; symmetry c1; }. set globals {; basis def2-svpd; }. energy('scf'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1856#issuecomment-638995737:156,error,error,156,https://psicode.org,https://github.com/psi4/psi4/issues/1856#issuecomment-638995737,1,['error'],['error']
Availability,Another reason to move molecule parsing py side so can have nicer error messages and exceptions. Potentially also simplify efp initialization being all over the place.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/731#issuecomment-306527489:66,error,error,66,https://psicode.org,https://github.com/psi4/psi4/issues/731#issuecomment-306527489,2,['error'],['error']
Availability,"Any chance it could be a disk space issue? I created a minimal env with cmake, eigen, mpfr, python, GCC, and it unpacked fine. Gnu compilers, but surely that wouldn't matter at the unpacking stage. ```; -- Found LAPACK MKL: /theoryfs2/common/software/intel2019/compilers_and_libraries_2019.4.243/linux/mkl/lib/intel64/libmkl_rt.so;...; -- Suitable pybind11 could not be located, Building pybind11 instead.; -- Suitable gau2grid could not be located, Building gau2grid instead.; -- Could NOT find Libint2 (missing: Libint2_DIR); -- Suitable Libint2 could not be located, Building Libint2 5-4-3-6-5-4 instead.; -- Suitable qcelemental could not be located, Building qcelemental instead.; -- Suitable qcengine could not be located, Building qcengine instead.; -- Suitable Libxc could not be located, Building Libxc instead.; -- Suitable BrianQC could not be located, please contact info@brianqc.com to obtain BrianQC; -- Documentation targets available: doxyman (html); -- No Sphinx, no docs. Pre-built documentation at http://psicode.org/psi4manual/master/index.html; -- No theme, no docs (try: conda install sphinx-psi-theme cloud_sptheme sphinx-automodapi graphviz python-graphviz -c conda-forge -c psi4); -- Adding test cases: Psi4; -- Running some tests requires pytest. Please install it manually (try: /home/psilocaluser/toolchainconda/envs/minbld/bin/python3.6 -m pip install pytest); -- Configuring done; -- Generating done; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2147#issuecomment-813663636:940,avail,available,940,https://psicode.org,https://github.com/psi4/psi4/issues/2147#issuecomment-813663636,1,['avail'],['available']
Availability,Any test case that actually used NumPy (mostly casscf) failed. Afraid I don't remember the error trace details.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/748#issuecomment-312328448:91,error,error,91,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-312328448,1,['error'],['error']
Availability,"Apologies if I didn't trace the logic thoroughly and correctly. But doesn't one always do region _or_ function (or flat)? From the user's perspective, could one then do. ```; /*- Select approach for pruning. Options ``ROBUST`` and ``TREUTLER`` prune based on regions (proximity to nucleus) while ... !expert -*/; options.add_str(""DFT_PRUNING_TYPE"", ""ROBUST"", ""FLAT P_GAUSSIAN D_GAUSSIAN P_SLATER D_SLATER LOG_GAUSSIAN LOG_SLATER ROBUST TREUTLER"");; ```. I think the most related option was https://github.com/psi4/psi4/blob/master/psi4/src/read_options.cc#L177 where it could have been two options but we rolled into one for the user.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1591#issuecomment-494450392:218,ROBUST,ROBUST,218,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-494450392,3,['ROBUST'],['ROBUST']
Availability,Apparently the `str(mess` error I was getting last night was from a combination of errors. Can't recreate at present. So that part will have to be reverted until I hit the problem again and fully note its circumstances.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/530#issuecomment-263304143:26,error,error,26,https://psicode.org,https://github.com/psi4/psi4/pull/530#issuecomment-263304143,2,['error'],"['error', 'errors']"
Availability,"Apparently the problem is not completely fixed. Running (H2O)30 results in:. ```; 	MO spaces... . 	 FC OCC VIR FV ; 	----------------------; 	 30 120 570 0. 	Number of basis functions in the DF-CC basis: 2520. 	Available memory : 667572.02 MB ; 	Memory requirement for 3-index ints : 7838.47 MB ; 	Memory requirement for DF-CC int trans: 24103.73 MB ; 	Memory requirement for CC contractions: 142778.32 MB ; 	Total memory requirement for DF+CC int: 150616.79 MB ; 	Memory requirement for Wabef term : 49600.59 MB . Traceback (most recent call last):; File ""/users/damatthews/apps/psi4/bin/psi4"", line 289, in <module>; exec(content); File ""<string>"", line 121, in <module>; File ""/users/damatthews/apps/psi4/lib/psi4/driver/driver.py"", line 561, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/users/damatthews/apps/psi4/lib/psi4/driver/procrouting/proc.py"", line 333, in select_mp3; return func(name, **kwargs); File ""/users/damatthews/apps/psi4/lib/psi4/driver/procrouting/proc.py"", line 1620, in run_dfocc; dfocc_wfn = core.dfocc(ref_wfn). MemoryError: std::bad_array_new_length; ```. Any ideas where to look next?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1764#issuecomment-562216701:211,Avail,Available,211,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-562216701,1,['Avail'],['Available']
Availability,"Are there other ways to deal with Douglas-Kroll-Hess (DKH) Hamiltonian? When running dk input:. molecule {; Mg; }; set basis aug-cc-pvdz-dk; set relativistic dkh; energy('scf'). ---. I got this error output:; Traceback (most recent call last):; File ""<string>"", line 20, in <module>; RuntimeError: DKH is not a valid choice",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/149#issuecomment-124904274:194,error,error,194,https://psicode.org,https://github.com/psi4/psi4/issues/149#issuecomment-124904274,1,['error'],['error']
Availability,"Are you able to make the internal stage directory optional based on a cmake option?. The internal stage directory adds complexity without providing any benefit - with or without it the files should be installed into the real stage directory, but internal stage directory makes the process more complex and error prone.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2683#issuecomment-1214289555:306,error,error,306,https://psicode.org,https://github.com/psi4/psi4/issues/2683#issuecomment-1214289555,1,['error'],['error']
Availability,"Are you trying to use a Libint2 release? Keep in mind that Psi4 needs changes to the upstream buildsystem (these can be worked around) and changes to the default upstream build configuration (such that a built library won't work with any other open-source QC package). I'll collect some links here since it's worth having an issue open on this for packagers to consult (hence pinging @mbanck, @susilehtola). * https://github.com/psi4/psi4/issues/2300 (search ""multidimensional"") for background and conda-forge; * https://github.com/evaleev/libint/issues/190 for the general open-source conundrum and current psi4 prospects toward the end; * https://github.com/psi4/psi4/blob/master/external/upstream/libint2/CMakeLists.txt#L1-L25 for libint2 build constraints for Psi4. Steps toward Psi4 using a upstream Libint2 release in common with other open-source QC programs:; - [x] transition psi4 TEI #1721; - [ ] reconcile LAB's l2 cmake (that psi uses at present) https://github.com/loriab/libint/tree/l2cmake with EFV's adaptations https://github.com/evaleev/libint/pull/205; - [ ] merge https://github.com/evaleev/libint/pull/205 and release; - [ ] expand current integrals config requirements beyond current set in notes (needed before #2388); - [ ] transition psi4 OEI #2388 ; - [ ] transition psi4 integral ordering from `gss` to `sss`; - [ ] coordinate with packagers and other QC programs for a AM and integrals types l2 config options set that is adequate for all. If I'm off base @yurivict and you're already using a psi-configured l2 and this is simply a detection issue, let me know.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2398#issuecomment-1008078498:376,ping,pinging,376,https://psicode.org,https://github.com/psi4/psi4/issues/2398#issuecomment-1008078498,2,['ping'],['pinging']
Availability,"Arrrgghhh...schoolboy error! Oops!. Now:. `cmake -H. -Bobjdir -DCMAKE_INSTALL_PREFIX=/usr/local/psi4 -DOpenMP_CXX_LIBRARY_DIRS=/opt/intel/compilers_and_libraries_2018.3.222/linux/compiler/lib/intel64_lin/`; gives:. ```; -- Math lib search order is MKL;OPENBLAS;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl; -- Found BLAS: MKL (/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so); -- LAPACK will be searched for based on MKLROOT=/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl; -- Found LAPACK: MKL (/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so); -- LAZ Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; MathOpenMP iomp5 0 ; MathOpenMP iomp5 A /opt/intel/compilers_and_libraries_2018.3.222/linux/compiler/lib/intel64_lin/libiomp5.so; MathOpenMP iomp5 B /opt/intel/compilers_and_libraries_2018.3.222/linux/compiler/lib/intel64_lin/libiomp5.so; MathOpenMP -Wl,--as-needed 0 ; MathOpenMP -Wl,--as-needed A _lib-NOTFOUND; MathOpenMP -Wl,--as-needed B _lib-NOTFOUND; MathOpenMP_LIBRARIES /opt/intel/compilers_and_libraries_2018.3.222/linux/compiler/lib/intel64_lin/libiomp5.so;-Wl,--as-needed; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so;/usr/lib/x86_64-linux-gnu/libpthread.so ; -- Found MathOpenMP: Found MathOpenMP: /opt/intel/compilers_and_libraries_2018.3.222/linux/compiler/lib/intel64_lin/libiomp5.so;-Wl,--as-needed ; -- ; Properties for TARGET tgt::MathOpenMP:; tgt::MathOpenMP.INTERFACE_COMPILE_DEFINITIONS = <NOTFOUND>; tgt::MathOpenMP.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; tgt::MathOpenMP.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; tgt::MathOpenMP.INTERFACE_LINK_LIBRARIES = ""/opt/intel/compilers_and_libraries_2018.3.222/linux/compiler/lib/int",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-396748980:22,error,error,22,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-396748980,1,['error'],['error']
Availability,"As @hokru pointed out, this is because I forgot to define fragments in my system. Perhaps we should check for that in the n-body driver somehow and print a better error message?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1649#issuecomment-493665743:163,error,error,163,https://psicode.org,https://github.com/psi4/psi4/issues/1649#issuecomment-493665743,1,['error'],['error']
Availability,"As a general note, if you are working on Psi4 please drop us a line if you are having issues. Contributing should be an easy process and we are here to help! I believe you are on our Slack channel, feel free to comment or ping me there. If not we can certainly shoot out an invite (thats general to anyone reading this).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/914#issuecomment-364107454:222,ping,ping,222,https://psicode.org,https://github.com/psi4/psi4/pull/914#issuecomment-364107454,1,['ping'],['ping']
Availability,"As a note our general take it to shuffle more up to the Python layer as well, especially [solvers](https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/solvers.py). The plugin approach is defiantly the best solution I think. It has been a bit, but we should be able to register codes with Psi4 automatically to gain functionality through `psi4.energy/gradient/etc`. @loriab Can make the final call, but I suspect if adcc is on conda, we will just add it to our meta package of `psi4-rt` that will pull down all the run time dependancies (including this one) so there shouldn't be too much of a need for close coupling. . --. The Wavefunction object has the ability to store arrays, matrices, and values in a key:value fashion. Can you give a bit of a description of how complex your return objects are? You may want to consider adding to the MolSSI [QCSchema](https://github.com/MolSSI/QCSchema) project the properties that you are returning so that we can have a schema-based definition of these objects that other codes can use and conform to. --. This looks really amazing, it is awesome to see projects adopt this kind of project structure.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-547410509:509,down,down,509,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547410509,1,['down'],['down']
Availability,"As far as I can tell, there should be enough memory available (360 GB given in the input, 1.3 TB on the machine) to keep many Fock matrices in memory here (which are 1.3 GB each). You might run out of memory if the implementation is storing matrices that have a higher scaling (e.g. N^3) or a higher prefactor in N^2. If this is the case, an error message could be helpful to users. I would be worried about a bug if the largest matrices that are kept in memory is supposed to be N_ao^2. Could be useful tracking it down if it means one can then run DF-calculations in Psi4 on systems with more than 10000 AOs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2288#issuecomment-921605913:52,avail,available,52,https://psicode.org,https://github.com/psi4/psi4/issues/2288#issuecomment-921605913,3,"['avail', 'down', 'error']","['available', 'down', 'error']"
Availability,"As for Debian and 1.2(.1), I have patched out libxc similar to what @susilehtola suggested in https://github.com/psi4/psi4/issues/1302#issuecomment-450826912 - for the next development cycle I guess psi4 will be able to use a system ilbxc, but time was running out. 1.2.1 is currently bulding here: https://buildd.debian.org/status/package.php?p=psi4 - there are a couple fo test suite failures I have not diagnosed yet, I'll try to find time over the weekend.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1302#issuecomment-451496547:386,failure,failures,386,https://psicode.org,https://github.com/psi4/psi4/issues/1302#issuecomment-451496547,1,['failure'],['failures']
Availability,"As mentioned in the documentation @loriab quotes above, there is also a test case available of a QM computation in an MM point-charge field, the extern1 test case (psi4/tests/extern1).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/341#issuecomment-209534925:82,avail,available,82,https://psicode.org,https://github.com/psi4/psi4/issues/341#issuecomment-209534925,1,['avail'],['available']
Availability,"As of 0.2.287, conda binary is building chemps2 and properly downloading dependency hdf5 from defaults and gsl from copy of asmeurer's into psi4 channel. As of 0.2.291 (42175a9cc2a2ba082c33a676c0bc518125f5f445), conda binary is building dkh and properly linking _static_ Fortran libraries so no user PATH manipulations necessary. Checked, but please report if ever otherwise.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/154#issuecomment-126863294:61,down,downloading,61,https://psicode.org,https://github.com/psi4/psi4/issues/154#issuecomment-126863294,1,['down'],['downloading']
Availability,"As of this morning, I show dfomp3-2 and dfomp2p5-2 as fixed and dfomp2p5-grad1 and dfomp3-grad2 as still broken. You can see the errors by clicking on the ""Failed"" link at https://testboard.org/cdash/viewTest.php?onlyfailed&buildid=44226.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/190#issuecomment-157786910:129,error,errors,129,https://psicode.org,https://github.com/psi4/psi4/issues/190#issuecomment-157786910,1,['error'],['errors']
Availability,"As pointed out by others, LGTM is already down. Switching LGTM as a required check off.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/520#issuecomment-265479245:42,down,down,42,https://psicode.org,https://github.com/psi4/psi4/pull/520#issuecomment-265479245,1,['down'],['down']
Availability,"At a conf, so won’t be able to examine links in depth, only respond to comments. . Neat! Yes, I commonly pull all non-qc department from conda, incl. pybind11 (-c conda-forge), mkl (defaults channel, repackaged direct from intel distribution), numpy (defaults, built with mkl). . If win is like linux and Mac, you can get the compilers from conda, and yes that will impart runtime lib deps, which presumably are also available.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-390254118:417,avail,available,417,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-390254118,1,['avail'],['available']
Availability,"At a glance, your `conda list` is fine, though you should always copy the text from screen and paste within triple backticks for formatting rather than post screenshots. > how do you mean channel order reversed? :((. `conda create -n psi16 psi4 python=3.8 -c psi4 -c conda-forge` with ""channel order reversed"" makes `conda create -n psi16 psi4 python=3.8 -c conda-forge -c psi4`. ""same error"" is hard to diagnose -- you'd have to post the solve-time or run-time error.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2614#issuecomment-1175715270:386,error,error,386,https://psicode.org,https://github.com/psi4/psi4/issues/2614#issuecomment-1175715270,2,['error'],['error']
Availability,"At end of [this page](http://www.linuxfromscratch.org/lfs/view/development/chapter06/gcc.html) is a nice run-down of what's supposed to come with a gcc. `liblto_plugin.a` (the static) seems to be an oddity. Glad the conda pkg is working. You're getting it off the `test` [subchanel](https://anaconda.org/psi4/chemps2/files), I hope? `conda install chemps2 -c psi4/label/test` . That should be a well-built one, so let me know if it acts up. Build options is conda's weakness, I think. For instance, I can't use their `git` because I'm addicted to `git add -p`, and they don't build with perl enabled. There's ""features"" in the works to counteract this, but I can't suggest any other gcc right off.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/660#issuecomment-288472702:109,down,down,109,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288472702,1,['down'],['down']
Availability,"At present you're trying to merge 288 commits and nearly 30k lines, and the commits are from many non-you authors. This means the rebase was faulty. If you made a backup branch locally before commencing rebase, restore from that. If not, you'll have to start from a fresh branch and cherry-pick over your own commits similar to https://github.com/psi4/psi4/pull/1490#issuecomment-457765390 . Another resource is http://psicode.org/psi4manual/master/build_obtaining.html#faq-githubworkflow .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1865#issuecomment-652171153:141,fault,faulty,141,https://psicode.org,https://github.com/psi4/psi4/pull/1865#issuecomment-652171153,1,['fault'],['faulty']
Availability,"At risk of encouraging procrastination, the alignment of error codes in `config.h` has been lost.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1170#issuecomment-415861364:57,error,error,57,https://psicode.org,https://github.com/psi4/psi4/pull/1170#issuecomment-415861364,1,['error'],['error']
Availability,"At the moment, just quicktests (~118) because `cc14` and `mints9` are still failing. The latter is my fault, the former is a mystery. Failures make the conda build fail, so the test suite needs to be clean before go back to running all.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/524#issuecomment-262358481:102,fault,fault,102,https://psicode.org,https://github.com/psi4/psi4/pull/524#issuecomment-262358481,2,"['Failure', 'fault']","['Failures', 'fault']"
Availability,"At the moment, the only advantage would be the cleaner separation of intra- and inter- fragment motions which could result in better convergence behavior, particularly for weakly bound complexes. My plan has been to exploit this separation by doing some fancier things such as steepest descent in the inter- modes at the same time as reliable molecular methods (like RFO) for the intra- modes. Another needed feature is a better guess for the inter- modes based on Leonard-Jones potentials or molecular mechanics, etc.. But since these have not been implemented, there is perhaps limited point to using 'multi' at present. The overall motivation is that the methods that are ideal for intra- motions (redundant internals based on chemical bonding, RFO, BFGS...) do not work well for inter- motions with flat potentials.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/680#issuecomment-295755959:334,reliab,reliable,334,https://psicode.org,https://github.com/psi4/psi4/issues/680#issuecomment-295755959,2,"['redundant', 'reliab']","['redundant', 'reliable']"
Availability,"BGVD(char,char,int,int,int,double *,int,double *,int,double *,double *,int,double *,int,int *,int)"" (?C_DSBGVD@psi@@YAHDDHHHPEANH0H00H0HPEAHH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsbgvx，该符号在函数 ""int __cdecl psi::C_DSBGVX(char,char,char,int,int,int,double *,int,double *,int,double *,int,double,double,int,int,double,int *,double *,double *,int,double *,int *,int *)"" (?C_DSBGVX@psi@@YAHDDDHHHPEANH0H0HNNHHNPEAH00H011@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsbtrd，该符号在函数 ""int __cdecl psi::C_DSBTRD(char,char,int,int,double *,int,double *,double *,double *,int,double *)"" (?C_DSBTRD@psi@@YAHDDHHPEANH000H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsgesv，该符号在函数 ""int __cdecl psi::C_DSGESV(int,int,double *,int,int *,double *,int,double *,int,double *,int *)"" (?C_DSGESV@psi@@YAHHHPEANHPEAH0H0H01@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspcon，该符号在函数 ""int __cdecl psi::C_DSPCON(char,int,double *,int *,double,double *,double *,int *)"" (?C_DSPCON@psi@@YAHDHPEANPEAHN001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspev，该符号在函数 ""int __cdecl psi::C_DSPEV(char,char,int,double *,double *,double *,int,double *)"" (?C_DSPEV@psi@@YAHDDHPEAN00H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspevd，该符号在函数 ""int __cdecl psi::C_DSPEVD(char,char,int,double *,double *,double *,int,double *,int,int *,int)"" (?C_DSPEVD@psi@@YAHDDHPEAN00H0HPEAHH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspevx，该符号在函数 ""int __cdecl psi::C_DSPEVX(char,char,char,int,double *,double,double,int,int,double,int *,double *,double *,int,double *,int *,int *)"" (?C_DSPEVX@psi@@YAHDDDHPEANNNHHNPEAH00H011@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspgst，该符号在函数 ""int __cdecl psi::C_DSPGST(int,char,int,double *,double *)"" (?C_DSPGST@psi@@YAHHDHPEAN0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspgv，该符号在函数 ""int __cdec",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:40332,error,error,40332,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,BLAS.patch ; Hmm... Looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/ConfigMath.cmake psi4/cmake/math/ConfigMath.cmake; |*** psi4_/cmake/math/ConfigMath.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/ConfigMath.cmake 2017-01-24 09:52:50.074349042 +0100; --------------------------; Patching file cmake/math/ConfigMath.cmake using Plan A...; Hunk #1 succeeded at 14.; Hmm... The next patch looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/MathLibs.cmake psi4/cmake/math/MathLibs.cmake; |*** psi4_/cmake/math/MathLibs.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/MathLibs.cmake 2017-01-24 09:28:13.812117187 +0100; --------------------------; Patching file cmake/math/MathLibs.cmake using Plan A...; Hunk #1 succeeded at 73.; done; [sfux@develop01 psi4]$; ```; The code (using OpenBLAS instead of MKL) compiles without error but fails in an installation step:. ```; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/filesystem.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty/color.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_autofrag.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_database.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/header.py; -- Installing: /scratch/,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-274762486:3426,error,error,3426,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486,1,['error'],['error']
Availability,"Based on the discussion we had today in the Psi4 dev meeting, it has been decided that the best way to fully solve this issue is simply to have COSX error out when a grid with negative weights is encountered. This is what https://github.com/psi4/psi4/pull/2906 implements, so once that PR is merged into Psi4, this issue can be closed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2890#issuecomment-1497993552:149,error,error,149,https://psicode.org,https://github.com/psi4/psi4/issues/2890#issuecomment-1497993552,2,['error'],['error']
Availability,"Based on your writing, I assume you're a student researcher. Posting error messages _like this_ is not a good way to get help. Large input files like this make it difficult for developers to find the actual problem. It's best practice to simplify the input file as much as possible while still making the error clear. Sometimes, doing that can tell _you_ where the problem is. If you don't know how to do this kind of troubleshooting, consult your seniors in your research group or your professor. I've played around with your latest input file and can confirm that you have made a fairly straightforward mistake, but you've discarded important information. As an exercise, please post a _simplified_ input that reproduces your problem, and a _complete_ error message. Once you've done that, I'll update the error message to be more explicit and offer some advice on how to bypass this. (Though once you understand the error, it's fairly straightforward.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2174102955:69,error,error,69,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2174102955,10,['error'],['error']
Availability,"Be aware that analytic Hessians are available for Hartree–Fock (and a few DFT fctls that no one uses) only. So if wB97X-D is the target, it probably is best to prototype with `freq(..., dertype='gradient')` for consistency (as you were already doing). For all those displacements, QCFractal is the proposed way to run through them in parallel. You can get an idea how it works with a ""snowflake"" calc that just uses all the threads on a single node (and doesn't require database storage setup). conda-wise you'd need to `conda install qcfractal postgresql -c conda-forge`. An example is https://github.com/psi4/psi4/blob/master/tests/ddd-deriv/input.dat#L40-L47 . Snowflake is a lightweight single-node route. The full QCFractal approach is backed by a database (yours; not MolSSI's) and handles distributing gradient jobs through your cluster's queue. It takes a little more setup.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3125#issuecomment-1909486575:36,avail,available,36,https://psicode.org,https://github.com/psi4/psi4/issues/3125#issuecomment-1909486575,1,['avail'],['available']
Availability,"Before anyone else tries to track down what's going on: I've found the ""problem"", working on a sustainable fix with @loriab 😬",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1604#issuecomment-806174930:34,down,down,34,https://psicode.org,https://github.com/psi4/psi4/issues/1604#issuecomment-806174930,1,['down'],['down']
Availability,"Before anything else, update to a more recent version of Psi4 and see if there is still an error. Psi4 1.1 is almost three years old, and there have been a lot of improvements since then. Instructions to download the latest stable version of Psi, Psi4 1.3.2, can be found [here](https://admiring-tesla-08529a.netlify.com/installs/v132/).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1828#issuecomment-593935057:91,error,error,91,https://psicode.org,https://github.com/psi4/psi4/issues/1828#issuecomment-593935057,2,"['down', 'error']","['download', 'error']"
Availability,"Between my last three PRs, there shouldn't be a need for these strange hacks. Ping me if you encounter anything strange in the densities.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1884#issuecomment-661313439:78,Ping,Ping,78,https://psicode.org,https://github.com/psi4/psi4/pull/1884#issuecomment-661313439,1,['Ping'],['Ping']
Availability,"Between the two of you, the two of us are confused about what kinds of tests you want. * Holger asked about correctness tests. Lori hasn't raised the issue. This issue wasn't raised during my earlier ""density to wavefunction"" PRs, so I don't understand why we're doubting its correctness now. This is the same code as I used to bring densities over then. If there is a bug, that's the fault of `occ` and outside the scope of this PR. (And while we _could_ test correctness for the 1RDM, that requires adding occ properties. Which we could do, but is outside the scope of this PR.); * Holger asked if FCHK can be enabled but said that would be for a different PR. Lori says that may be appropriate for this PR. This is a straight contradiction, and we're confused which you want.; * While it's also possible to test `compute_fvpi`, I cannot recall one other case of a simple Pybind requiring a test, so I'm not sure what we'd be testing. Correctness? That this function can be called Python side?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2072#issuecomment-767091324:385,fault,fault,385,https://psicode.org,https://github.com/psi4/psi4/pull/2072#issuecomment-767091324,2,['fault'],['fault']
Availability,"Bond Length (Angstrom) Energy (Hartree)\n""); for length, energy in zip(bond_lengths, energies):; file.write(f""{length:.6f} {energy:.8f}\n""). print(f""Potential energy data saved to {data_file}""). # Plot the potential energy curve; plt.figure(figsize=(8, 6)); plt.plot(bond_lengths, energies, marker='o', linestyle='-', color='b', label='First Excited State Energy Curve'); plt.xlabel('Bond Length (Angstrom)'); plt.ylabel('Energy (Hartree)'); plt.title('Potential Energy Curve for CF Molecule (First Excited State)'); plt.grid(True); plt.legend(); plt.tight_layout(). # Save the plot as an image file; plot_file = 'CF_PEC_Psi4_1.png'; plt.savefig(plot_file); print(f""Plot saved as {plot_file}""). # Display the plot; plt.show(). The error I got is: ; Error: option TDSCF_TYPE is not contained in the list of available options. Error: option TDSCF_TYPE is not contained in the list of available options. Did you mean? SCF_TYPE MCSCF_TYPE SCF_TYPE. Did you mean? SCF_TYPE MCSCF_TYPE SCF_TYPE. Error at bond length 5.000000000000004: Error setting options: {'tdscf_type': ('full', RuntimeError('\nFatal Error: TDSCF_TYPE is not a valid option.\nError occurred in file: /home/conda/feedstock_root/build_artifacts/psi4_1683815705191/work/psi4/src/psi4/liboptions/liboptions.h on line: 55\nThe most recent 5 function calls were:\n\npsi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int)\n'))}; Potential energy data saved to CF_PEC_1_data.csv; Plot saved as CF_PEC_Psi4_1.png. And here's the script I ran to see the available methods and options: ; import psi4. # Test common methods to see if they are available; methods_to_test = ['scf', 'mp2', 'ccsd', 'eom-ccsd', 'td-dft']; available_methods = []. for method in methods_to_test:; try:; psi4.energy(method); available_methods.append(method); except Exception:; pass. print(""Available Methods:""); print(available_methods). # List available options; options = psi4.core.get_global_",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845:4809,Error,Error,4809,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845,1,['Error'],['Error']
Availability,"Broadly, [psithon](http://psicode.org/psi4manual/master/tutorial.html) is when you make a molecule with `molecule name {...}`, use other non-strictly-python syntax in your input and submit the file to the executable `bin/psi4`, while [psiapi](http://psicode.org/psi4manual/master/psiapi.html) is when you `import psi4`, make a molecule with `name = psi4.geometry(...)`, use strictly python syntax, and submit the file to python interpreter. Sounds like you use psithon (only choice until Oct 2016 (dev) or May 2017 (release)), though you might like psiapi. Have you tested the fix with #818? My concern, once I looked carefully (albeit late at night, so I could be talked down), was that to handle pcm there's a snippet of code in the inputparser (only psithon passes through the input parser) that 818 _didn't_ change and a very similar snippet (that only psiapi uses) that 818 _did_ change. So I worry that 818 _didn't_ fix your problem and _did_ break pcm in psiapi mode for me (shows up in `psi4 --test` that's actually running psiapi). If 818 fixes your problem, then I'm imagining things. Could you read this over, @robertodr, and see if it raises your alarm? pcm in `psi4 --test` is broken for me, and this was my theory why.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/817#issuecomment-356713683:672,down,down,672,https://psicode.org,https://github.com/psi4/psi4/issues/817#issuecomment-356713683,1,['down'],['down']
Availability,"Btw, which OSX version do you use? . You still need to get libgfortran.dylib in there somewhere to get rid of this error. See @andysim answer above. You could also try a flag like `-DCMAKE_FFLAGS='-lgfortran'` (not sure..). If it's any consolidation, I am compiling psi4 with gcc9(homebrew) and MKL against `psi4-dev` conda and also cannot get rid of `gomp`. This breaks threading for me, but serial execution is fine and anyway enough workload for my old macbook.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1870#issuecomment-615181744:115,error,error,115,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615181744,1,['error'],['error']
Availability,"Bug; * Fix bug whereby MP2 cube files through OCC segfaulted (#2249); * Increase likelihood a misformatted basis set file will error instead of passing silently (#2254); * Fix normalization issue in Molden files (#2229); * Fix longstanding limitation where `phi_ao` function only returned correctly for Cartesian basis sets (#2210, #2262). Feature; * Add O24 database (#2252, #2154); * Move Molden writer to Python (#2229); * Make restarting SCF and saving orbitals easier (#2190)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562#issuecomment-892111323:127,error,error,127,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-892111323,1,['error'],['error']
Availability,"But adcc hasn't even been downloaded yet, so it may be a pre-adcc problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1848#issuecomment-598805685:26,down,downloaded,26,https://psicode.org,https://github.com/psi4/psi4/pull/1848#issuecomment-598805685,1,['down'],['downloaded']
Availability,But the energy is still going down all the time!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1716#issuecomment-530374708:30,down,down,30,https://psicode.org,https://github.com/psi4/psi4/issues/1716#issuecomment-530374708,1,['down'],['down']
Availability,"But yeah thanks @zachglick for pointing out the root cause. Indeed, if you specify `ints_tolerance` by hand, it works as it should. Having the default gradient threshold be 0 is just confusing, since it gets changed when you manually specify the tolerance.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1540#issuecomment-464870518:246,toler,tolerance,246,https://psicode.org,https://github.com/psi4/psi4/issues/1540#issuecomment-464870518,1,['toler'],['tolerance']
Availability,"But yes, I agree that actually lifting the restriction mentioned in the original issue is either impossible or super tricky. Perhaps just reporting a clear error message when the mol name is not a valid Py identifier is the most friendly thing (e.g. I saw http://stackoverflow.com/a/29586366). Anyways, low priority.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/650#issuecomment-286911897:156,error,error,156,https://psicode.org,https://github.com/psi4/psi4/issues/650#issuecomment-286911897,2,['error'],['error']
Availability,"But.. those parameters are available also in the presently used version of libxc. Just query cam_omega, cam_alpha and cam_beta from libxc, these will give you all the range separation parameters.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/916#issuecomment-365273795:27,avail,available,27,https://psicode.org,https://github.com/psi4/psi4/pull/916#issuecomment-365273795,1,['avail'],['available']
Availability,"By finite-difference test, I mean ""there is some property that we can compute either by finite difference of energies or by contracting appropriately defined densities against derivative integrals,"" e.g., geometry gradients and dipoles. By checking that both routes predict the same result, we can be much more confident that the densities are correctly implemented. (I recall a sign error in the CASPT2 gradients of another package. This error went uncaught for decades because the impact on calculations was relatively small.). I don't know if this is an option for transition densities. I'm not sure if EOM-CC transition properties are defined by some variational criteria, some variational criteria but neglecting orbital relaxation, or something else altogether. EDIT: The '93 Stanton and Bartlett paper explicitly says orbital relaxation is neglected, so I imagine the finite difference test is not an option. I'm not sure if there's some other technique to validate the correctness of the transition densities, other than matching other code. I know ""matching other code"" is done in the test suite.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2541#issuecomment-1094528284:384,error,error,384,https://psicode.org,https://github.com/psi4/psi4/pull/2541#issuecomment-1094528284,2,['error'],['error']
Availability,"By headers you mean DMRG, that problem is fixed. That was my own fault. Everything is ready.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/405#issuecomment-225905942:65,fault,fault,65,https://psicode.org,https://github.com/psi4/psi4/pull/405#issuecomment-225905942,1,['fault'],['fault']
Availability,"By hooking the hessian call up to the analytic RHF code, I unleashed the error message in the frequency tests that use DF and, as you said, used the incorrect keyword to request gradients. I will fix those tests when I get a chance (probably the flight back on Monday - I'm at a conference now). On my flight here I wrote some cheesy frequency code to plug the gap in our capabilities, which may or may not be useful::. ``` python; import numpy as np. mol = ref_wfn.molecule(); natoms = mol.natom(); masses = np.zeros(natoms). for atom in range(natoms):; masses[atom] = mol.mass(atom). m = np.repeat( np.divide(1.0, np.sqrt(masses)), 3); mwhess = np.einsum('i,ij,j->ij', m, H, m). fcscale = psi_hartree2J / (psi_bohr2m * psi_bohr2m * psi_amu2kg);; fc = fcscale * np.linalg.eigvalsh(mwhess); freqs = np.sqrt(np.abs(fc)); freqs *= 1.0 / (2.0 * np.pi * psi_c * 100.0); freqs[fc < 0] *= -1. freqvec = psi4.Vector.from_array(freqs[6:]); ref_wfn.set_frequencies(freqvec); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/437#issuecomment-231269168:73,error,error,73,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-231269168,1,['error'],['error']
Availability,"CC requires SCF_TYPE = DISK_DF; ```; 8. CI; - CISD/cc-pVDZ: **ALL FAILED**; ```; PSIO_ERROR: Can't find TOC Entry IWL Buffers; PSIO_ERROR: unit = 33, errval = 13; PSIO_ERROR: 13 (no such TOC entry); Traceback (most recent call last):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 28, in <module>; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 952, in select_cisd; return func(name, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 4156, in run_cepa; fnocc_wfn = core.fnocc(ref_wfn); ; RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /Users/dasirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:; ```; - MP3/cc-pVDZ & MP4/cc-pVDZ: **FAILED**; ```; PSIO_ERROR: Can't find TOC Entry IWL Buffers; PSIO_ERROR: unit = 33, errval = 13; PSIO_ERROR: 13 (no such TOC entry); Traceback (most recent call last):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 28, in <module>; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 333, in select_mp3; return func(name, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1941, in r",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081:10185,Error,Error,10185,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081,4,"['Error', 'error']","['Error', 'error']"
Availability,CI error with the recent updates: . ```; % Total % Received % Xferd Average Speed Time Time Time Current; Dload Upload Total Spent Left Speed. 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0; 100 9 100 9 0 0 46 0 --:--:-- --:--:-- --:--:-- 49; tar: Error opening archive: Unrecognized archive format; Error: Process completed with exit code 1.; ```. Seems to be the CI acting goofy again.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2833#issuecomment-1372346406:3,error,error,3,https://psicode.org,https://github.com/psi4/psi4/pull/2833#issuecomment-1372346406,3,"['Error', 'error']","['Error', 'error']"
Availability,CI failure seems to be unrelated error in compiling Psi4? The docs do build successfully on my machine.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3123#issuecomment-1899179342:3,failure,failure,3,https://psicode.org,https://github.com/psi4/psi4/pull/3123#issuecomment-1899179342,2,"['error', 'failure']","['error', 'failure']"
Availability,"CI failures are caused by Einsums v0.5. Once v0.6 goes up @jturney , hopefully, the CI checks pass.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3110#issuecomment-2182761619:3,failure,failures,3,https://psicode.org,https://github.com/psi4/psi4/pull/3110#issuecomment-2182761619,1,['failure'],['failures']
Availability,"CMake already declares those variables and they are in the build ; documentation (which is inside the top. level CMakeLists.txt at the moment). The relevant variables are PYTHON_EXECUTABLE, PYTHON_LIBRARY, and ; PYTHON_INCLUDE_DIR. on 10/11/2016 10:10 AM, David Sherrill wrote:. > Do we need to break down and insist that people specify the python to use; > via some kind of flag? It seems that cmake picking up the wrong one is a; > problem that just won't go away. And/or perhaps a little test script that; > might check the settings and verify that they will work with the user's; > PATH?; > ; > At the very least, we do certainly need updated documentation on the ; > latest; > iteration of the build system, if we don't have it yet.; > ; > On Tue, Oct 11, 2016 at 8:56 AM, Lori A. Burns notifications@github.com; > wrote:; > ; > > Glad rpath behavior is making more sense, @jgonthier; > > https://github.com/jgonthier . Unless all dependencies are isolated; > > behind one environment (conda strategy) or each dependency is ; > > isolated in; > > its own environment (a programming-using-conda strategy, but hard when; > > /usr/ involved), it can be impossible for cmake to predict a safe rpath; > > path. I regularly have to edit mine to get the right HDF5 linked. As I; > > don't know a winning strategy, I think we can't guarantee the built ; > > exe/lib; > > will run, only that the conda ones will. This does show we need better; > > notes on the matter so people can diagnose and correct.; > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly, view it on GitHub; > > https://github.com/psi4/psi4/issues/468#issuecomment-252908695, or ; > > mute; > > the thread; > > ; > > https://github.com/notifications/unsubscribe-auth/AC9Qdpv1JDnAWuPCBuGqZCqO58yiQfFyks5qy4d7gaJpZM4KA_tt; > > .; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub ; > https://github.com/psi4/ps",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-252929596:301,down,down,301,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252929596,1,['down'],['down']
Availability,"CMake is still back magic too me, but i just tried again from scratch and actually the error occurs when making psi4-core. The Simint library is installed before and cmake finds it in the correct path. ```; [ 10%] Building CXX object src/psi4/libmints/CMakeFiles/mints.dir/gshell.cc.o; [ 10%] Building CXX object src/psi4/libmints/CMakeFiles/mints.dir/integral.cc.o; In file included from /home/kruse/Progs/psi4.custom/objdir2/stage/home/kruse/Progs/psi4.deleteme/include/simint/vectorization/intrinsics_avx.h:7:0,; from /home/kruse/Progs/psi4.custom/objdir2/stage/home/kruse/Progs/psi4.deleteme/include/simint/vectorization/vectorization.h:11,; from /home/kruse/Progs/psi4.custom/objdir2/stage/home/kruse/Progs/psi4.deleteme/include/simint/ostei/ostei_config.h:3,; from /home/kruse/Progs/psi4.custom/objdir2/stage/home/kruse/Progs/psi4.deleteme/include/simint/simint.h:4,; from /home/kruse/Progs/psi4.custom/psi4/src/psi4/libmints/siminteri.h:34,; from /home/kruse/Progs/psi4.custom/psi4/src/psi4/libmints/integral.cc:55:; /home/kruse/Progs/psi4.custom/objdir2/stage/home/kruse/Progs/psi4.deleteme/include/simint/vectorization/intrinsics_sse.h:7:35: fatal error: simint/cpp_restrict.hpp: No such file or directory; #include ""simint/cpp_restrict.hpp""; ^; compilation terminated.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/890#issuecomment-356928723:87,error,error,87,https://psicode.org,https://github.com/psi4/psi4/issues/890#issuecomment-356928723,2,['error'],['error']
Availability,"CON(char,int,double *,double *,double *,double *,int *,double,double *,double *,int *)"" (?C_DGTCON@psi@@YAHDHPEAN000PEAHN001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgtrfs，该符号在函数 ""int __cdecl psi::C_DGTRFS(char,int,int,double *,double *,double *,double *,double *,double *,double *,int *,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DGTRFS@psi@@YAHDHHPEAN000000PEAH0H0H0001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgtsv，该符号在函数 ""int __cdecl psi::C_DGTSV(int,int,double *,double *,double *,double *,int)"" (?C_DGTSV@psi@@YAHHHPEAN000H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgtsvx，该符号在函数 ""int __cdecl psi::C_DGTSVX(char,char,int,int,double *,double *,double *,double *,double *,double *,double *,int *,double *,int,double *,int,double *)"" (?C_DGTSVX@psi@@YAHDDHHPEAN000000PEAH0H0H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgttrf，该符号在函数 ""int __cdecl psi::C_DGTTRF(int,double *,double *,double *,double *,int *)"" (?C_DGTTRF@psi@@YAHHPEAN000PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgttrs，该符号在函数 ""int __cdecl psi::C_DGTTRS(char,int,int,double *,double *,double *,double *,int *,double *,int)"" (?C_DGTTRS@psi@@YAHDHHPEAN000PEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dhgeqz，该符号在函数 ""int __cdecl psi::C_DHGEQZ(char,char,char,int,int,int,double *,int,double *,int,double *,double *,double *,double *,int,double *,int,double *,int)"" (?C_DHGEQZ@psi@@YAHDDDHHHPEANH0H0000H0H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dhsein，该符号在函数 ""int __cdecl psi::C_DHSEIN(char,char,char,int,double *,int,double *,double *,double *,int,double *,int,int,int *,double *,int *,int *)"" (?C_DHSEIN@psi@@YAHDDDHPEANH000H0HHPEAH011@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dhseqr，该符号在函数 ""int __cdecl psi::C_DHSEQR(char,char,int,int,int,double *,int,double *,double *,double *,int,double *,int",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:27243,error,error,27243,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,Can I see the errors from RHEL7 conda? I can't reproduce this one.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/120#issuecomment-123386691:14,error,errors,14,https://psicode.org,https://github.com/psi4/psi4/issues/120#issuecomment-123386691,2,['error'],['errors']
Availability,"Can confirm it, but had to fiddle with the input to see the error because coordinates were returning all 0s (integer rounding). This input work on my machine:; ```; molecule mol {; 0 1; symmetry c1; H 0.0 0.0 0.0; H 0.0 0.0 R1; H 0.0 0.0 R2; H 0.0 0.0 R3; }. set basis STO-3G; set ci_maxiter 100. # This crashes at R=0.68; #for ir in range(60, 80, 2):; # This crashes at R=0.74; for ir in range(68, 80, 2):; mol.R1 = 1.*(float(ir)/100.); mol.R2 = 2.*(float(ir)/100.); mol.R3 = 3.*(float(ir)/100.); ci_e=energy('fci'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/759#issuecomment-313824229:60,error,error,60,https://psicode.org,https://github.com/psi4/psi4/issues/759#issuecomment-313824229,1,['error'],['error']
Availability,Can we see download counts for Debian/Fedora package managers?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1302#issuecomment-451177986:11,down,download,11,https://psicode.org,https://github.com/psi4/psi4/issues/1302#issuecomment-451177986,1,['down'],['download']
Availability,Can you give me an example of TDDFT using finite difference gradients? I have the vague memory that I got an error the last time I tried that.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3106#issuecomment-1856865567:109,error,error,109,https://psicode.org,https://github.com/psi4/psi4/issues/3106#issuecomment-1856865567,1,['error'],['error']
Availability,Can you provide a before-and-after example of what error messages look like?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2756#issuecomment-1291191371:51,error,error,51,https://psicode.org,https://github.com/psi4/psi4/pull/2756#issuecomment-1291191371,1,['error'],['error']
Availability,"Can you try downloading the basis set from BSE, maybe psi4 doesn't come with the RI-fit for He (I don't remember). I'm seeing it available here: https://www.basissetexchange.org/basis/aug-cc-pv6z-rifit/format/psi4/?version=1&elements=2",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2989#issuecomment-1609497869:12,down,downloading,12,https://psicode.org,https://github.com/psi4/psi4/issues/2989#issuecomment-1609497869,2,"['avail', 'down']","['available', 'downloading']"
Availability,"Cannot replicate this bug. Iterations are oscillating like crazy, but no; singularity. I get similar oscillations for singlet cation in cc-pVDZ; (eventually converges) with both DF and ID. -Rob. On Fri, Apr 29, 2016 at 1:54 PM, Rob Parrish robparrish@gmail.com wrote:. > Does the singlet cation exhibit the same failure with RHF/SAD? Could be a; > bad eigenvalue in the DF metric, though I have traps in for this. Compiling; > a fork to check this out.; > ; > -Rob; > ; > On Fri, Apr 29, 2016 at 12:56 PM, Daniel Smith notifications@github.com; > wrote:; > ; > > The following either gives NaN energy or (positive) 60,000 [Eh]; > > depending on MKL version and compile options. All basis sets smaller than; > > aug-cc-pVQZ seem to check out, did not try larger.; > > ; > > molecule mol {; > > 0 2; > > C -2.83891 -0.84747 -0.20778; > > N -2.06959 -0.27604 0.77905; > > C -0.85937 -0.82512 0.74757; > > N -0.82980 -1.74677 -0.21226; > > C -2.05910 -1.77487 -0.83179; > > C -2.45490 0.86620 1.59959; > > C 0.35903 -2.49473 -0.61265; > > F -1.01767 1.46174 -1.11980; > > B 0.28985 1.63764 -0.63648; > > F 0.23738 1.82826 0.77419; > > F 0.89453 2.73957 -1.24020; > > F 1.05039 0.46734 -0.88673; > > H -0.02604 -0.54755 1.38339; > > H -2.27287 -2.45330 -1.64959; > > H -3.86751 -0.55086 -0.37733; > > H -3.45079 0.68580 2.01748; > > H -1.72185 0.98138 2.40249; > > H -2.44673 1.75972 0.96603; > > H 0.98379 -1.85263 -1.24323; > > H 0.91655 -2.78676 0.28358; > > H 0.03922 -3.39046 -1.15377; > > C 2.81822 0.12352 1.52490; > > C 3.26768 -0.78277 0.56145; > > H 3.28632 0.11977 2.50813; > > H 2.01109 0.81253 1.27433; > > N 3.64537 -1.55240 -0.23308; > > }; > > ; > > set {; > > basis cc-pVQZ; > > scf_type df; > > guess gwh; > > reference rohf; > > }; > > ; > > energy('SCF'); > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/issues/371",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/371#issuecomment-215889548:312,failure,failure,312,https://psicode.org,https://github.com/psi4/psi4/issues/371#issuecomment-215889548,1,['failure'],['failure']
Availability,"Certainly doesn't look correct... maybe one of the team knows exactly what; this is coming from. Seems like a required library that psi4 expects to be; installed is not installed (or not installed in the expected location). On Mon, Apr 3, 2017 at 2:44 PM, tanorjb <notifications@github.com> wrote:. > Hello,; >; > I am working on a university project and want to confirm that Psi4 is; > running correctly. When I run the test that the binary installation guide; > specifies I get the following error:; >; > [image: image]; > <https://cloud.githubusercontent.com/assets/26287438/24625066/cd1d8af4-187b-11e7-8cf9-ff6d285895e3.png>; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/675>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdhTNc393EsuLqC8YxKtbTATrTkzZks5rsT35gaJpZM4Mx72O>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/675#issuecomment-291237788:494,error,error,494,https://psicode.org,https://github.com/psi4/psi4/issues/675#issuecomment-291237788,2,['error'],['error']
Availability,"Change:. scf_type pk. Justin Turney, Ph.D.; Senior Research Scientist; CCQC/UGA. On Thu, Oct 1, 2015 at 10:50 AM, mberdakin notifications@github.com wrote:. > I don't want to take more of your time.; > I tried the input that you sent me and the calculation ends with the; > ; > ## following error; > ; > PSIO_ERROR: Can't find TOC Entry IWL Buffers; > PSIO_ERROR: unit = 33, errval = 13; > PSIO_ERROR: 13 (no such TOC entry); > Traceback (most recent call last):; > File """", line 23, in; > File ""/home/matias/anaconda/share/psi/python/driver.py"", line 637, in; > energy; > procedures['energy']lowername http://lowername,%20**kwargs; > File ""/home/matias/anaconda/share/psi/python/proc.py"", line 582, in run_mp2; > run_conv_omp2(name, **kwargs); > File ""/home/matias/anaconda/share/psi/python/proc.py"", line 538, in; > run_conv_omp2; > psi4.occ(); > ; > ## RuntimeError: PSIO Error; > ; > In the input you used some keywords that i'm not familiar with, so i have; > to study the manual a little more, to understand the error.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/105#issuecomment-144750805.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/105#issuecomment-144751892:291,error,error,291,https://psicode.org,https://github.com/psi4/psi4/issues/105#issuecomment-144751892,3,"['Error', 'error']","['Error', 'error']"
Availability,"Changing the nuclear charge is the easiest thing to do. But it makes me; nervous because now the nuclear charge is not really the nuclear charge,; and others who are not ""in the know"" could fail to take account of this; when accessing the nuclear charge. On Apr 19, 2017 8:58 PM, ""fevangelista"" <notifications@github.com> wrote:. > @andysim <https://github.com/andysim>: I am super excited about this; > code! I was wondering if you could answer a few questions so that I can; > start to think about how to write the interface with forte. How do you; > handle the reduced number of electrons? Do you redefine the atomic charge; > (Z) or just subtract the number of core electrons? Is this info available; > from Wavefunction? Let us know if we can be of any help!; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/681#issuecomment-295521147>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QducGsSjAdZ3Wa5g8-sa46HZa75tbks5rxq3MgaJpZM4NCEGk>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/681#issuecomment-295524802:694,avail,available,694,https://psicode.org,https://github.com/psi4/psi4/pull/681#issuecomment-295524802,1,['avail'],['available']
Availability,"CheMPS2::DMRGSCFmatrix*, CheMPS2::DMRGSCFindices*, CheMPS2::Hamiltonian*, std::shared_ptr<psi::PSIO>, std::shared_ptr<psi::Wavefunction>)’:; > /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:268:66: error: no matching function for call to ‘psi::Molecule::nuclear_repulsion_energy()’; > double Econstant = wfn->molecule()->nuclear_repulsion_energy();; > ^; > In file included from /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:34:0:; > /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate: double psi::Molecule::nuclear_repulsion_energy(const std::array<double, 3ul>&) const; > double nuclear_repulsion_energy(const std::array<double,3> &dipole_field) const;; > ^; > /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate expects 1 argument, 0 provided; > make[5]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/dmrgscf.cc.o] Error 1; > make[4]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/all] Error 2; > make[3]: *** [all] Error 2; > make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; > make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; > make: *** [all] Error 2; > The output generated by psi4-path-advisor --gcc is; > ; > /home/shouck/miniconda3/envs/p4dev/bin/cmake \; > -H. \; > -C/home/shouck/miniconda3/envs/p4dev/share/cmake/psi4/psi4DepsCache.cmake \; > -Bobjdir; > @ashutoshvt and @robertodr have narrowed the issue down to the CheMPS2 module, which is set to ON in psi4DepsCache.cmake by default; changing it to; > ; > set(ENABLE_CheMPS2 OFF CACHE BOOL """"); > set(CheMPS2_DIR ""/home/shouck/miniconda3/envs/p4dev/share/cmake/CheMPS2"" CACHE PATH """"); > allows Psi4 to compile without issues. I'm not sure, but it seems like maybe a function was changed and then not updated in CheMPS2. The error and log files are attached. Thank you!; > ; > CMakeError.log; > CMakeOutput.log; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub, or mute the thread.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/871#issuecomment-347970165:1575,Error,Error,1575,https://psicode.org,https://github.com/psi4/psi4/issues/871#issuecomment-347970165,3,['Error'],['Error']
Availability,Closing this down for now. @wadejong Please open a new PR if you want a specific implementation to get around this issue such as introducing noise to the SCF guess.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/875#issuecomment-533548739:13,down,down,13,https://psicode.org,https://github.com/psi4/psi4/issues/875#issuecomment-533548739,1,['down'],['down']
Availability,"Closing this down, this seems more of an initial guess issue than an error in default SEM algorithm and one that I don't think we can fix in a wholistic manner.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1281#issuecomment-533549591:13,down,down,13,https://psicode.org,https://github.com/psi4/psi4/issues/1281#issuecomment-533549591,2,"['down', 'error']","['down', 'error']"
Availability,"Closing this out, if someone has an input where this fails please post a new issue with the reproducible error.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/54#issuecomment-276722757:105,error,error,105,https://psicode.org,https://github.com/psi4/psi4/issues/54#issuecomment-276722757,1,['error'],['error']
Availability,"Closing. Upon rerunning the input file, I get the much saner behavior of Psi simply exiting. While one _could_ intercept the error with a manual try-except, use of `fail_on_maxiter` is the expected behavior and does not have this problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2458#issuecomment-1114879560:125,error,error,125,https://psicode.org,https://github.com/psi4/psi4/issues/2458#issuecomment-1114879560,2,['error'],['error']
Availability,"Code updated to use a C++ class as a wrapper to the Python interface. The result is _very _ similar to the old interface, but I was able to eliminate redundant arguments. There's more ripping out of old `libdiis` tech that I could do (`diisentry.cc` is now unused), but I'll wait to hear that the current interface looks good before gutting any more code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2369#issuecomment-986822136:150,redundant,redundant,150,https://psicode.org,https://github.com/psi4/psi4/pull/2369#issuecomment-986822136,1,['redundant'],['redundant']
Availability,"Confirmed to also be broken on `1.2a1.dev508` which is pre-DFHelper and pre-gau2grid. Psi's `molinstance.Z(atomindex)` returns nuclear charge (so `0.0` for ghosts), not atomic number (as one might think from the function name), so I can see room for programming error there. But I'm not seeing anywhere that CAM is singled out from other functional, so I share your confusion.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/900#issuecomment-360582523:262,error,error,262,https://psicode.org,https://github.com/psi4/psi4/issues/900#issuecomment-360582523,1,['error'],['error']
Availability,"Cool! Ill look into this later, I think I patched up Distelli with help from GT folks. Ping me if it goes down again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/681#issuecomment-295384269:87,Ping,Ping,87,https://psicode.org,https://github.com/psi4/psi4/pull/681#issuecomment-295384269,2,"['Ping', 'down']","['Ping', 'down']"
Availability,"Cool, glad to see these updates. Thanks for pinging me about the naming. I don't have a strong preference for POL vs IND. I suppose being; consistent with IND is a good thing. Does it make sense to alias these; variables so either version works? Might be less confusing for people; consulting the EFP docs. I don't really like EFP_AI_XXX. I do like pre-pending with EFP so that all; EFP keywords start with that. But AI connotes Artificial Intelligence more; easily than ab initio, which I assume it's supposed to mean. I think I; like QM better. (EFP_QM_XXX). This makes sense in a QM/MM context, which; this basically is (EFP being a very advanced MM method). Additionally, I'm not sure the docs are not totally clear... I'm not; totally sure what this means:. /*- Do include polarization energy term in EFP computation? (QMEFP_POL c.; v1.1) -*/. Is this the polarization of the EFP by the QM region, or the polarization; of the QM region by the EFP?. On Tue, May 1, 2018 at 10:38 AM, Lori A. Burns <notifications@github.com>; wrote:. > @CDSherrill <https://github.com/CDSherrill>, you might want the; > opportunity to weigh in on this commit; > <https://github.com/psi4/psi4/pull/993/commits/609a84f64a50e5dee8728fcaa9a19cfaebffb4c2>,; > as it involves keyword names for EFP and our compromise between SAPT-like; > and libefp-like. Please see top post of PR for discussion.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/993#issuecomment-385686547>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdlhxccTVCdSWeK_EOxZgrE6MEQvnks5tuHNogaJpZM4TsPv1>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/993#issuecomment-385707749:44,ping,pinging,44,https://psicode.org,https://github.com/psi4/psi4/pull/993#issuecomment-385707749,2,['ping'],['pinging']
Availability,"Cool, this should give us a base to start playing around with automatic rigid body optimizations. . Also note you can do `git pull --rebase upstream master` to rebase in the master branch of upstream. This will help cut down on the number of merges that happen. You can always fall back to merging if needed of course.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/432#issuecomment-230565713:220,down,down,220,https://psicode.org,https://github.com/psi4/psi4/pull/432#issuecomment-230565713,1,['down'],['down']
Availability,"Correction (I have a very bad cold at the moment so my mind is even less reliable than usual):; The spherical harmonics expressed in terms of cartesians in the th transformation matrix in gdma.f90 are not normalized to unity but they should be orthogonal with respect to integration over a sphere. Note that the x^i y^j z^k are not the normalized v(i,j,k) of Schlegel and Frisch but literal products of powers of x, y and z.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1574#issuecomment-472388875:73,reliab,reliable,73,https://psicode.org,https://github.com/psi4/psi4/issues/1574#issuecomment-472388875,1,['reliab'],['reliable']
Availability,Could you copy-paste the error you get from the `-jN` build? It might be the same problem I hit on some nightly builds on stallo and that I have never been able to reproduce.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/219#issuecomment-173199216:25,error,error,25,https://psicode.org,https://github.com/psi4/psi4/issues/219#issuecomment-173199216,1,['error'],['error']
Availability,"Could you ping me when you have a PR that makes `cc53` run on Windows? It will probably close #1376 as well, and I'd like to check myself.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-446192665:10,ping,ping,10,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-446192665,1,['ping'],['ping']
Availability,Could you post the whole test output please?. And do you have the `dftd3` binary available at run time?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2385#issuecomment-997238928:81,avail,available,81,https://psicode.org,https://github.com/psi4/psi4/pull/2385#issuecomment-997238928,1,['avail'],['available']
Availability,"Could you try running:. ```; scf_energy, scf_wfn = energy('scf', return_wfn=True); energy('dmrg-ci', ref_wfn=scf_wfn); ```. I see this error quite a bit, but it is usually because I forget to use an scf_type that writes the integrals to disk. I am not really confident that this would work, but it is worth a shot. . The other thing you could do is. ```; scf_energy, scf_wfn = energy('scf', return_wfn=True); mints(scf_wfn); energy('dmrg-ci', ref_wfn=scf_wfn); ```. I may have the syntax wrong for the above calls. The main thing you need to do is make sure the integrals are actually written to disk.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/464#issuecomment-244579713:135,error,error,135,https://psicode.org,https://github.com/psi4/psi4/issues/464#issuecomment-244579713,1,['error'],['error']
Availability,"Couldn't you have a configure-time check for this (in case it can be broken down to a very small testcase), same as is usual in autoconf-world?. The other option might be to use `pkg-config` and check the `Libs.private` (I guess):. ```; grep ^Libs /usr/lib/x86_64-linux-gnu/pkgconfig/lapack-openblas.pc; Libs: -L${libdir} -llapack; Libs.private: -L${libdir} -llapack -lgfortran -lpthread -lm; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1461#issuecomment-455864865:76,down,down,76,https://psicode.org,https://github.com/psi4/psi4/issues/1461#issuecomment-455864865,1,['down'],['down']
Availability,"Crash replicated. Almost certainly what's going on is that a fundamental library (gcc, mkl are the usual suspects) is in conflict between jupyter's `ldd` and psi4's (`envname/lib/pythonx.x/site-packages/psi4/core.so`). The usual hack is to switch around import order between psi4, numpy, matplotlib, etc, until one works. Indeed, if I install psi4 the way you listed into `p4env` and then create _another_ env into which I install jupyter (and same version of python; all from conda-forge) and then adjust the path (`sys.path.append('/path/to/p4env/lib/python3.6/site-packages/`), I can `import psi4` just fine. Next problem is that `psi4.test()` or any molecule specification just fails. This one is new to me, and 20 min hacking did not solve it. One suspicion is that regex is involved, and regex is the big reason psi4 ships with its own gcc (5.2) rather than the longstanding conda default of 4.8. But on the other hand, everything c++ is supposed to be statically linked in to avoid such troubles. So you've found a real problem, and I don't have a ready solution. The medium-term solution is to go with the new compilers that conda is rolling out (7.2). Then psi can rejoin the common gcc track of the rest of the conda ecosystem. Fortunately, I was working on that this week. Copying people who have had related problems. @dsirianni, @j3mdamas, Pascal (hit a `bad_cast` error)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/862#issuecomment-345402467:1378,error,error,1378,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-345402467,1,['error'],['error']
Availability,"Currently, I have been looking at featurizing frontier orbitals and electron densities in their 3d coordinate space for downstream processing in the context of small molecule binding. There was a function to do this in pyscf that was fairly straightforward, but I didn't find an in memory solution in psi4. The cube files work great, but I was just curious if there was a solution that could be done in memory, due to the io costs at scale.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3057#issuecomment-1769298953:120,down,downstream,120,https://psicode.org,https://github.com/psi4/psi4/issues/3057#issuecomment-1769298953,1,['down'],['downstream']
Availability,"D@psi@@YAHDDHHPEANH000H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsgesv，该符号在函数 ""int __cdecl psi::C_DSGESV(int,int,double *,int,int *,double *,int,double *,int,double *,int *)"" (?C_DSGESV@psi@@YAHHHPEANHPEAH0H0H01@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspcon，该符号在函数 ""int __cdecl psi::C_DSPCON(char,int,double *,int *,double,double *,double *,int *)"" (?C_DSPCON@psi@@YAHDHPEANPEAHN001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspev，该符号在函数 ""int __cdecl psi::C_DSPEV(char,char,int,double *,double *,double *,int,double *)"" (?C_DSPEV@psi@@YAHDDHPEAN00H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspevd，该符号在函数 ""int __cdecl psi::C_DSPEVD(char,char,int,double *,double *,double *,int,double *,int,int *,int)"" (?C_DSPEVD@psi@@YAHDDHPEAN00H0HPEAHH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspevx，该符号在函数 ""int __cdecl psi::C_DSPEVX(char,char,char,int,double *,double,double,int,int,double,int *,double *,double *,int,double *,int *,int *)"" (?C_DSPEVX@psi@@YAHDDDHPEANNNHHNPEAH00H011@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspgst，该符号在函数 ""int __cdecl psi::C_DSPGST(int,char,int,double *,double *)"" (?C_DSPGST@psi@@YAHHDHPEAN0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspgv，该符号在函数 ""int __cdecl psi::C_DSPGV(int,char,char,int,double *,double *,double *,double *,int,double *)"" (?C_DSPGV@psi@@YAHHDDHPEAN000H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspgvd，该符号在函数 ""int __cdecl psi::C_DSPGVD(int,char,char,int,double *,double *,double *,double *,int,double *,int,int *,int)"" (?C_DSPGVD@psi@@YAHHDDHPEAN000H0HPEAHH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspgvx，该符号在函数 ""int __cdecl psi::C_DSPGVX(int,char,char,char,int,double *,double *,double,double,int,int,double,int *,double *,double *,int,double *,int *,int *)"" (?C_DSPGVX@psi@@YAHHDDDHPEAN0NNHHNPEAH00H011@Z) 中被引用; F:\qt.l",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:40938,error,error,40938,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"DDHHHPEANH00H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormrz，该符号在函数 ""int __cdecl psi::C_DORMRZ(char,char,int,int,int,int,double *,int,double *,double *,int,double *,int)"" (?C_DORMRZ@psi@@YAHDDHHHHPEANH00H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormtr，该符号在函数 ""int __cdecl psi::C_DORMTR(char,char,char,int,int,double *,int,double *,double *,int,double *,int)"" (?C_DORMTR@psi@@YAHDDDHHPEANH00H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbcon，该符号在函数 ""int __cdecl psi::C_DPBCON(char,int,int,double *,int,double,double *,double *,int *)"" (?C_DPBCON@psi@@YAHDHHPEANHN00PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbequ，该符号在函数 ""int __cdecl psi::C_DPBEQU(char,int,int,double *,int,double *,double *,double *)"" (?C_DPBEQU@psi@@YAHDHHPEANH000@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbrfs，该符号在函数 ""int __cdecl psi::C_DPBRFS(char,int,int,int,double *,int,double *,int,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DPBRFS@psi@@YAHDHHHPEANH0H0H0H000PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbstf，该符号在函数 ""int __cdecl psi::C_DPBSTF(char,int,int,double *,int)"" (?C_DPBSTF@psi@@YAHDHHPEANH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbsv，该符号在函数 ""int __cdecl psi::C_DPBSV(char,int,int,int,double *,int,double *,int)"" (?C_DPBSV@psi@@YAHDHHHPEANH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbsvx，该符号在函数 ""int __cdecl psi::C_DPBSVX(char,char,int,int,int,double *,int,double *,int,char,double *,double *,int,double *,int,double *,double *,double *,double *,int *)"" (?C_DPBSVX@psi@@YAHDDHHHPEANH0HD00H0H0000PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbtrf，该符号在函数 ""int __cdecl psi::C_DPBTRF(char,int,int,double *,int)"" (?C_DPBTRF@psi@@YAHDHHPEANH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbtrs，该符号在函数 ""int __cdecl psi::C_DP",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:32462,error,error,32462,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"DE_DIRS = <NOTFOUND>; lapk.INTERFACE_LINK_LIBRARIES = ""/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so""; Properties for TARGET lapack:; lapack.INTERFACE_COMPILE_DEFINITIONS = ""USING_LAPACK_MKL""; lapack.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; lapack.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; lapack.INTERFACE_LINK_LIBRARIES = ""lapk;blas;tgt::MathOpenMP"". -- Found LAPACK MKL: /opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_; ```; Maybe cmake is looking for libiomp5.so under $MKLROOT (/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl for me), when it is actually is in $MKLROOT/../compiler/lib/intel64/ (or other relevant architecture)?. It looks a lot more promising. Building now... Edit: Build failed at the same point as before during ""Performing configure step for 'psi4-core':""; ```; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- LAZ Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; MathOpenMP iomp5 0 ; MathOpenMP iomp5 A _lib-NOTFOUND; MathOpenMP iomp5 B _lib-NOTFOUND; MathOpenMP_LIBRARIES MathOpenMP_LIBRARIES-NOTFOUND; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so;/usr/lib/x86_64-linux-gnu/libpthread.so ; CMake Error at /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:137 (message):; Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE); Call Stack (most recent call first):; /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:378 (_FPHSA_FAILURE_MESSAGE); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:99 (find_package_handle_standard_args); /usr/share/cmake-3.11/Modules/CMakeFindDependencyMacro.cmake:48 (find_package); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/TargetLAPACKConfig.cmake:45 (find_dependency); CMakeLists.txt:25 (find_package); ```; It looks like OpenMP_CXX_LIBRARY_DIRS doesn't get passed through to the makefile(s).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-396748980:4496,Error,Error,4496,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-396748980,1,['Error'],['Error']
Availability,"DGELQF@psi@@YAHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgels，该符号在函数 ""int __cdecl psi::C_DGELS(char,int,int,int,double *,int,double *,int,double *,int)"" (?C_DGELS@psi@@YAHDHHHPEANH0H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgelsd，该符号在函数 ""int __cdecl psi::C_DGELSD(int,int,int,double *,int,double *,int,double *,double,int *,double *,int,int *)"" (?C_DGELSD@psi@@YAHHHHPEANH0H0NPEAH0H1@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgelss，该符号在函数 ""int __cdecl psi::C_DGELSS(int,int,int,double *,int,double *,int,double *,double,int *,double *,int)"" (?C_DGELSS@psi@@YAHHHHPEANH0H0NPEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgelsy，该符号在函数 ""int __cdecl psi::C_DGELSX(int,int,int,double *,int,double *,int,int *,double,int *,double *)"" (?C_DGELSX@psi@@YAHHHHPEANH0HPEAHN10@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgeqlf，该符号在函数 ""int __cdecl psi::C_DGEQLF(int,int,double *,int,double *,double *,int)"" (?C_DGEQLF@psi@@YAHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgeqp3，该符号在函数 ""int __cdecl psi::C_DGEQP3(int,int,double *,int,int *,double *,double *,int)"" (?C_DGEQP3@psi@@YAHHHPEANHPEAH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgeqrf，该符号在函数 ""int __cdecl psi::C_DGEQRF(int,int,double *,int,double *,double *,int)"" (?C_DGEQRF@psi@@YAHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgerfs，该符号在函数 ""int __cdecl psi::C_DGERFS(char,int,int,double *,int,double *,int,int *,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DGERFS@psi@@YAHDHHPEANH0HPEAH0H0H0001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgerqf，该符号在函数 ""int __cdecl psi::C_DGERQF(int,int,double *,int,double *,double *,int)"" (?C_DGERQF@psi@@YAHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgesdd，该符号在函数 ""int __cdecl psi::C_DGESDD(char,int,in",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:20729,error,error,20729,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"DPPRFS(char,int,int,double *,double *,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DPPRFS@psi@@YAHDHHPEAN00H0H000PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dppsv，该符号在函数 ""int __cdecl psi::C_DPPSV(char,int,int,double *,double *,int)"" (?C_DPPSV@psi@@YAHDHHPEAN0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dppsvx，该符号在函数 ""int __cdecl psi::C_DPPSVX(char,char,int,int,double *,double *,char,double *,double *,int,double *,int,double *,double *,double *,double *,int *)"" (?C_DPPSVX@psi@@YAHDDHHPEAN0D00H0H0000PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpptrf，该符号在函数 ""int __cdecl psi::C_DPPTRF(char,int,double *)"" (?C_DPPTRF@psi@@YAHDHPEAN@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpptri，该符号在函数 ""int __cdecl psi::C_DPPTRI(char,int,double *)"" (?C_DPPTRI@psi@@YAHDHPEAN@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpptrs，该符号在函数 ""int __cdecl psi::C_DPPTRS(char,int,int,double *,double *,int)"" (?C_DPPTRS@psi@@YAHDHHPEAN0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dptcon，该符号在函数 ""int __cdecl psi::C_DPTCON(int,double *,double *,double,double *,double *)"" (?C_DPTCON@psi@@YAHHPEAN0N00@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpteqr，该符号在函数 ""int __cdecl psi::C_DPTEQR(char,int,double *,double *,double *,int,double *)"" (?C_DPTEQR@psi@@YAHDHPEAN00H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dptrfs，该符号在函数 ""int __cdecl psi::C_DPTRFS(int,int,double *,double *,double *,double *,double *,int,double *,int,double *,double *,double *)"" (?C_DPTRFS@psi@@YAHHHPEAN0000H0H000@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dptsv，该符号在函数 ""int __cdecl psi::C_DPTSV(int,int,double *,double *,double *,int)"" (?C_DPTSV@psi@@YAHHHPEAN00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dptsvx，该符号在函数 ""int __cdecl psi::C_DPTSVX(char,int,int,double *,double *,double",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:36643,error,error,36643,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"Dear Alfred,. Yeah, the problem is, as the code says, ""Fatal Error: There are no occupied; orbitals with beta spin."" In our program, you can't run an MP2 calculation; on an atom or molecule that doesn't have any beta spin electrons. More; generally, an MP2 calculation doesn't make any sense for systems with only; one electron. Your method is a ""double hybrid"" that includes MP2 as a part; of it. Also, it's impossible to ""optimize"" (like you are trying to do) the; geometry of an atom. It has no internal degrees of freedom to optimize. These computational chemistry programs require a little bit of training to; be able to use properly... they're not totally bulletproof black boxes. Best,; David. On Thu, Aug 27, 2020 at 12:07 PM Alfred Andersson <notifications@github.com>; wrote:. > Hi,; >; > I've been trying to calculate the energies of monoatomic compounds. All of; > the atoms ran successfully, except for hydrogen with multiplicity 2.; >; > My in-file:; >; > molecule mol_atomic_hydrogen_doublet {; > 0 2; > H 0.000000000 0.000000000 0.000000000; >; > units angstrom; > no_reorient; > }; >; > set globals {; > basis aug-cc-pVQZ; > dft_spherical_points 434; > dft_radial_points 85; > reference uhf; > }; >; > set_memory(100000000000); > try:; > optimize('pwpb95-d3bj'); > except SCFConvergenceError as e:; > unconverged_scf_wfn = e.wfn; > unconverged_scf_wfn.to_file(unconverged_scf_wfn.get_scratch_filename(180)); > set guess read; > optimize('pwpb95-d3bj'); >; > The error I got (including previous lines):; >; > *** tstart() called on host; > *** at Fri Aug 21 16:21:36 2020; >; > => Loading Basis Set <=; >; > Name: (AUG-CC-PVQZ AUX); > Role: RIFIT; > Keyword: DF_BASIS_MP2; > atoms 1 entry H line 30 file /home/username/miniconda/share/psi4/basis/aug-cc-pvqz-ri.gbs; >; > --------------------------------------------------------; > DF-MP2; > 2nd-Order Density-Fitted Moller-Plesset Theory; > UMP2 Wavefunction, 28 Threads; >; > Rob Parrish, Justin Turney, Andy Simmonett,; > Ed Hohenste",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1995#issuecomment-682586879:61,Error,Error,61,https://psicode.org,https://github.com/psi4/psi4/issues/1995#issuecomment-682586879,1,['Error'],['Error']
Availability,"Dear All,. 1) For analytic gradients, one may follow NCG or SCG formalisms, as explained in the DF-CCSD(T) paper [J. Chem. Phys., 147, 044104. DOI: 10.1063/1.4994918]. The NCG formalism is numerically more stable. As far as I remember, all grad codes in Psi4 rely on the NCG formalism. 2) The cost of NCG and SCG are the same for CCSD. But in the case of CCSD(T), SCG has a lower cost (by 25%). 3) For all methods in DFOCC, I use NCG, while for DF-CCSD(T) I replaced the earlier NCG code with the SCG code because of significant cost reduction. . 4) In SCG, frozen cores and virtuals are already included because of the structure of the formalism, while one should additionally consider frozen core/virtual terms for NCG. . 5) As far as I remember, in the beginning, I discussed it with David, and he told me that frozen cores are enough for us since we generally do not use frozen virtual. Of course, he is right. Hence, I have only implement NCG for MP2...CCSD. 6) Normally DFOCC has both formalisms now, but only one of them is activated in the module for any method. It was my TODO list for a while, to activate both SCG and NCG for all methods. But it should be performed very carefully, hence; I keep it waiting for an available time. . 7) I will try to include it in the next major revision of DFOCC. Presently, we are working on UHF based grads for CC methods. Once, we complete the UHF grads, then I can activate frozen virtuals via SCG. But, it may take a while (:. @jgonthier @JonathonMisiewicz @loriab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1912#issuecomment-636201342:1225,avail,available,1225,https://psicode.org,https://github.com/psi4/psi4/issues/1912#issuecomment-636201342,1,['avail'],['available']
Availability,"Dear Anthony,. Thank you for the detailed explanation. In terms of spherical harmonics in Psi4, there are no hard coded terms anywhere as far as I can remember: all integrals are transformed on the fly, using a general regular solid harmonic generating routine. Therefore, G and H functions are both handled by the same arbitrary-order transformation code. Your illness-addled brain is still more powerful than mine, so apologies if I'm wrong here, but I think I have confirmed my error diagnosis from last night. I found my old Mathematica code for generating (real) regular solid harmonics and can exactly match the [L=5 transformation coefficients](https://git.uis.cam.ac.uk/x/ch-stone/u/ajs1/gdma.git/blob/HEAD:/src/gdma.f90#l275), as well as the the coefficients listed in Table 1 of the GDMA manual. However, for the L<5 coefficients in gdma.f90 my RSH generating code does not match. I can get exact agreement for these lower angular momentum terms by adding a factor of; ![image](https://user-images.githubusercontent.com/201881/54278407-a47bc180-4568-11e9-8875-e9ea637c3c1b.png); to the generating code. Therefore it appears that there is an inconsistency in the Cartesian normalization convention between the {s,p,d,f,g} and the {h} functions in gdma.f90. I hope this helps,. Best regards,. Andy",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1574#issuecomment-472403253:481,error,error,481,https://psicode.org,https://github.com/psi4/psi4/issues/1574#issuecomment-472403253,1,['error'],['error']
Availability,"Dear Jonathon,; Many thanks for your support. No additional errors have occurred, but the previous one that was mentioned to. If you can let me know about the result of your running job, it would be so appreciated.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1921#issuecomment-640057899:60,error,errors,60,https://psicode.org,https://github.com/psi4/psi4/issues/1921#issuecomment-640057899,1,['error'],['errors']
Availability,"Dear Vladimir,. For OCC module ""molden_write true"" option is not active. Hence for the conventional OO methods it is not available. But, for DFOCC module it should be. Hence, for DF/CD-OO methods you should be use the ""molden_write true"" option. Best ragrds,; Ugur Bozkaya",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/185#issuecomment-152699235:121,avail,available,121,https://psicode.org,https://github.com/psi4/psi4/issues/185#issuecomment-152699235,1,['avail'],['available']
Availability,"Dear Vladimir,. We have two kind of orbital-optimized (OO) methods now. The old codes are using conventional integrals and they can be called by energy('conv-omp2'), energy('omp3'), energy('omp2.5'), and energy('ocepa). All these methods are available in the OCC module and all methods of the OCC module take advantages of real Abelian point group symmetry. Recently, I have introduced a new module for OO methods as well as standard MP and CC methods, which is called as DFOCC module. In DFOCC module, we have density-fitting and Cholesky decomposition approximations for molecular integrals. Hence, the OO methods of DFOCC module are df-omp2, cd-omp2, df-omp3, cd-omp3, df-omp2.5, and cd-omp2.5. Df/cd-ocepa methods are coming soon. These methods can be called by energy('df-omp2'), energy('df-omp3'), energy('df-omp2.5'), and cd versions can be run similarly. All methods of DFOCC module has energy and gradients (RHF and UHF). Please note that when you asked df and cd methods you should set ""scf_type df"" and ""scf_type cd"", respectively. Further, DFOCC module does NOT use the molecular symmetry. All DFOCC methods are greatly faster than their conventional counterparts. For a discussion of timing for OMP2, OO-RI-MP2 of orca, and our new DF/CD-OMP2 you may want to read our recent paper, J. Chem. Theory Comput., 2014, 10 (6), pp 2371–2378 (DOI:10.1021/ct500231c). Finally, please note when you set energy('omp2') the df-omp2 code runs, for old code you should use energy('conv-omp2'). For more details please refer to our manual section OCC/DFOCC. . As a conclusion, do not worry about the symmetry if your main concern is the efficiency . The present DF/CD-OO methods are greatly faster than the conventional OO methods. Best regards,; Ugur Bozkaya",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/186#issuecomment-152699151:242,avail,available,242,https://psicode.org,https://github.com/psi4/psi4/issues/186#issuecomment-152699151,1,['avail'],['available']
Availability,"Default on a Mac, 2.7.3 I guess. Francesco. On Aug 18, 2015, at 5:59 PM, Justin Turney <notifications@github.com<mailto:notifications@github.com>> wrote:. Hmmm, which version of Python are you using?. ## . Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/169#issuecomment-132368503. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/169#issuecomment-132368809:727,error,error,727,https://psicode.org,https://github.com/psi4/psi4/issues/169#issuecomment-132368809,1,['error'],['error']
Availability,"Default switched to `adcc`, if available. Old test cases for built-in code still use the built-in code. Fixed a bug where it was impossible to _select_ the built-in code. Docs updated accordingly. @loriab @maxscheurer @mfherbst",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2419#issuecomment-1031805700:31,avail,available,31,https://psicode.org,https://github.com/psi4/psi4/pull/2419#issuecomment-1031805700,1,['avail'],['available']
Availability,"Diazonium, I believe your assessment is correct and I have little to add here unfortunately. While thread safety in the pthread code has been improved recently, OpenMP is still considered the safer option. (Though you could try a pthread build - ideally of the current ""develop"" branch that should soon become the 0.3.0 release - with USE_SIMPLE_THREADED_LEVEL3=1 which should work around at least some of the remaining bugs.) ; Please create issues for any OpenBLAS bugs you find, ideally with some standalone code that makes it easy to reproduce and track down the problem. I am anything but an expert on multithreading, but at least there are powerful debugging tools available now that simply did not exist when K.Goto wrote; the library that OpenBLAS builds upon. ; (Incidentally my own involvement with OpenBLAS came about through dft as well, though in my case it is condensed matter codes like Elk and Wien2k)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-390436926:558,down,down,558,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-390436926,4,"['avail', 'down']","['available', 'down']"
Availability,"Did you compile the code with a Fortran compiler? One is required for using DKH. > On Jul 25, 2015, at 6:07 PM, Hassenky notifications@github.com wrote:; > ; > Are there other ways to deal with Douglas-Kroll-Hess (DKH) Hamiltonian? When running dk input:; > ; > molecule {; > Mg; > }; > set basis aug-cc-pvdz-dk; > set relativistic dkh; > energy('scf'); > ; > I got this error output:; > Traceback (most recent call last):; > File """", line 20, in ; > RuntimeError: DKH is not a valid choice; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/149#issuecomment-124907212:371,error,error,371,https://psicode.org,https://github.com/psi4/psi4/issues/149#issuecomment-124907212,1,['error'],['error']
Availability,"Different error, same module, so I'll add to this issue. Building simint afresh through psi4 on Mac w/`AppleClang 7.0.0.7000176` yields . ```; [ 0%] Building C object simint/CMakeFiles/simint.dir/ostei/gen/ostei_s_s_s_s.c.o; In file included from /Users/loriab/linux/psihub/hrw-temp/objdir/external/upstream/simint/simint_external-prefix/src/simint_external/simint/ostei/gen/ostei_s_s_s_s.c:1:; In file included from /Users/loriab/linux/psihub/hrw-temp/objdir/external/upstream/simint/simint_external-prefix/src/simint_external/simint/boys/boys.h:3:; In file included from /Users/loriab/linux/psihub/hrw-temp/objdir/external/upstream/simint/simint_external-prefix/src/simint_external/simint/vectorization/vectorization.h:11:; /Users/loriab/linux/psihub/hrw-temp/objdir/external/upstream/simint/simint_external-prefix/src/simint_external/simint/vectorization/intrinsics_avx.h:110:26: warning: ; implicit declaration of function '_mm256_set_m128d' is invalid in C99 [-Wimplicit-function-declaration]; __m256d t3 = _mm256_set_m128d( _mm256_extractf128_pd(t2, 0) + _mm256_extractf128_pd(t2, 1),; ^; /Users/loriab/linux/psihub/hrw-temp/objdir/external/upstream/simint/simint_external-prefix/src/simint_external/simint/vectorization/intrinsics_avx.h:110:21: error: ; initializing '__m256d' (vector of 4 'double' values) with an expression of incompatible type 'int'; __m256d t3 = _mm256_set_m128d( _mm256_extractf128_pd(t2, 0) + _mm256_extractf128_pd(t2, 1),; ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; /Users/loriab/linux/psihub/hrw-temp/objdir/external/upstream/simint/simint_external-prefix/src/simint_external/simint/vectorization/intrinsics_avx.h:165:21: error: ; initializing '__m256d' (vector of 4 'double' values) with an expression of incompatible type 'int'; __m256d t3 = _mm256_set_m128d( _mm256_extractf128_pd(t2, 0) + _mm256_extractf128_pd(t2, 1),; ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; 1 warning and 2 errors",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/890#issuecomment-356726977:10,error,error,10,https://psicode.org,https://github.com/psi4/psi4/issues/890#issuecomment-356726977,1,['error'],['error']
Availability,Do we allow non-integer indexing for zmat? I hadn't thought so. Same error if `I 8 3.6 9 90.0 1 90.0`?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1325#issuecomment-434793976:69,error,error,69,https://psicode.org,https://github.com/psi4/psi4/issues/1325#issuecomment-434793976,1,['error'],['error']
Availability,"Do we need to break down and insist that people specify the python to use; via some kind of flag? It seems that cmake picking up the wrong one is a; problem that just won't go away. And/or perhaps a little test script that; might check the settings and verify that they will work with the user's; PATH?. At the very least, we do certainly need updated documentation on the latest; iteration of the build system, if we don't have it yet. On Tue, Oct 11, 2016 at 8:56 AM, Lori A. Burns notifications@github.com; wrote:. > Glad rpath behavior is making more sense, @jgonthier; > https://github.com/jgonthier . Unless all dependencies are isolated; > behind one environment (conda strategy) or each dependency is isolated in; > its own environment (a programming-using-conda strategy, but hard when; > /usr/ involved), it can be impossible for cmake to predict a safe rpath; > path. I regularly have to edit mine to get the right HDF5 linked. As I; > don't know a winning strategy, I think we can't guarantee the built exe/lib; > will run, only that the conda ones will. This does show we need better; > notes on the matter so people can diagnose and correct.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/issues/468#issuecomment-252908695, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9Qdpv1JDnAWuPCBuGqZCqO58yiQfFyks5qy4d7gaJpZM4KA_tt; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-252927823:20,down,down,20,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252927823,1,['down'],['down']
Availability,Does adding https://github.com/psi4/psi4/blob/master/external/downstream/v2rdm_casscf/CMakeLists.txt#L33 to external/downstream/gpu_dfcc help?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-400472093:62,down,downstream,62,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-400472093,2,['down'],['downstream']
Availability,"Does the overall energy look sensible when you've got the additional diffuse functions? . I occasionally find that def2-TZVPD converges to some odd state with strange properties (energy, dipole etc). I'd put it down to some form of numerical difficulties as I could usually use a mixed basis of def2-TZVP on some atoms and def2-TZVPD on others and get logical values (identity of which atoms to change was system dependent, but often H is the main culprit).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3135#issuecomment-1954490698:211,down,down,211,https://psicode.org,https://github.com/psi4/psi4/issues/3135#issuecomment-1954490698,1,['down'],['down']
Availability,"Does the singlet cation exhibit the same failure with RHF/SAD? Could be a; bad eigenvalue in the DF metric, though I have traps in for this. Compiling; a fork to check this out. -Rob. On Fri, Apr 29, 2016 at 12:56 PM, Daniel Smith notifications@github.com; wrote:. > The following either gives NaN energy or (positive) 60,000 [Eh] depending; > on MKL version and compile options. All basis sets smaller than aug-cc-pVQZ; > seem to check out, did not try larger.; > ; > molecule mol {; > 0 2; > C -2.83891 -0.84747 -0.20778; > N -2.06959 -0.27604 0.77905; > C -0.85937 -0.82512 0.74757; > N -0.82980 -1.74677 -0.21226; > C -2.05910 -1.77487 -0.83179; > C -2.45490 0.86620 1.59959; > C 0.35903 -2.49473 -0.61265; > F -1.01767 1.46174 -1.11980; > B 0.28985 1.63764 -0.63648; > F 0.23738 1.82826 0.77419; > F 0.89453 2.73957 -1.24020; > F 1.05039 0.46734 -0.88673; > H -0.02604 -0.54755 1.38339; > H -2.27287 -2.45330 -1.64959; > H -3.86751 -0.55086 -0.37733; > H -3.45079 0.68580 2.01748; > H -1.72185 0.98138 2.40249; > H -2.44673 1.75972 0.96603; > H 0.98379 -1.85263 -1.24323; > H 0.91655 -2.78676 0.28358; > H 0.03922 -3.39046 -1.15377; > C 2.81822 0.12352 1.52490; > C 3.26768 -0.78277 0.56145; > H 3.28632 0.11977 2.50813; > H 2.01109 0.81253 1.27433; > N 3.64537 -1.55240 -0.23308; > }; > ; > set {; > basis cc-pVQZ; > scf_type df; > guess gwh; > reference rohf; > }; > ; > energy('SCF'); > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/371",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/371#issuecomment-215879353:41,failure,failure,41,https://psicode.org,https://github.com/psi4/psi4/issues/371#issuecomment-215879353,1,['failure'],['failure']
Availability,"Doesn't really look like a bug. Either we up the convergence criterion or; we check only 5 decimals. On Tue, Mar 1, 2016 at 5:14 PM, Lori A. Burns notifications@github.com; wrote:. > Sorry @avcopan https://github.com/avcopan, I saw all the @IRCs in that; > gist above and thought opt7 was an unlabeled IRC. But that was for; > opt-irc-2, which should be fixed now.; > ; > opt7 fails on a few systems (; > https://testboard.org/cdash/testSummary.php?project=3&name=opt7&date=2016-03-01).; > This (https://testboard.org/cdash/testDetails.php?test=7810317&build=63640); > looks like the most coherent error message (also copied below), if; > @psi-rking https://github.com/psi-rking would like to examine it.; > ; > Optimizer: Optimization complete!; > Int. Coord. RHF opt of HOOH with O-H fixed to 0.95, energy........PASSED; > Optimizer: Optimization complete!; > Int. Coord. RHF opt of HOOH with O-O-H fixed to 105, energy: computed value (-150.7861731) does not match (-150.7861769) to 6 decimal places.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/253#issuecomment-190956405.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/253#issuecomment-191034927:598,error,error,598,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-191034927,1,['error'],['error']
Availability,"Don't be alarmed if this fails tests. I'm still working out the correct sequence of `core.clean()` and `set_specific_retention` so nothing breaks. I'm currently tracking down a bug with the `full_hess_every` keyword set to something not zero, which slipped through test coverage. If it wasn't introduced by this PR, I'll post more details about it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1289#issuecomment-430832599:170,down,down,170,https://psicode.org,https://github.com/psi4/psi4/pull/1289#issuecomment-430832599,1,['down'],['down']
Availability,Don't worry about the Docs fail. I think intersphinx for scipy & numpy is down.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3078#issuecomment-1814856120:74,down,down,74,https://psicode.org,https://github.com/psi4/psi4/pull/3078#issuecomment-1814856120,1,['down'],['down']
Availability,Don't worry about the Eco/Linux error -- it's https://github.com/psi4/psi4/pull/3088#issuecomment-1831177563,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3087#issuecomment-1831252908:32,error,error,32,https://psicode.org,https://github.com/psi4/psi4/pull/3087#issuecomment-1831252908,1,['error'],['error']
Availability,"Done with that bullet, but I think also the other two. I dumped a tarball of the sirius trac website on psicode.org as trac@sirius.chem.vt.edu.tgz. In addition, I pulled the docs from the old 4.0b2, 4.0b3, 4.0b4, and 4.0b5 dockers from sirius and moved them into place in html/psi4manual on psicode.org. Please take a look and see that you're in agreement with all this. I may then shut down trac on sirius.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/112#issuecomment-121379741:387,down,down,387,https://psicode.org,https://github.com/psi4/psi4/issues/112#issuecomment-121379741,1,['down'],['down']
Availability,Downgrade numpy to 1.16.2 may work.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1611#issuecomment-487276503:0,Down,Downgrade,0,https://psicode.org,https://github.com/psi4/psi4/issues/1611#issuecomment-487276503,1,['Down'],['Downgrade']
Availability,"EAH0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtgexc，该符号在函数 ""int __cdecl psi::C_DTGEXC(int,double *,int,double *,int,double *,int,double *,int,int *,int *,double *,int)"" (?C_DTGEXC@psi@@YAHHPEANH0H0H0HPEAH10H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtgsen，该符号在函数 ""int __cdecl psi::C_DTGSEN(int,int,double *,int,double *,int,double *,double *,double *,double *,int,double *,int,int *,double *,double *,double *,double *,int,int *,int)"" (?C_DTGSEN@psi@@YAHHHPEANH0H0000H0HPEAH0000H1H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtgsja，该符号在函数 ""int __cdecl psi::C_DTGSJA(char,char,char,int,int,int,int,int,double *,int,double *,int,double,double,double *,double *,double *,int,double *,int,double *,int,double *,int *)"" (?C_DTGSJA@psi@@YAHDDDHHHHHPEANH0HNN000H0H0H0PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtgsna，该符号在函数 ""int __cdecl psi::C_DTGSNA(char,char,int,double *,int,double *,int,double *,int,double *,int,double *,double *,int,int *,double *,int,int *)"" (?C_DTGSNA@psi@@YAHDDHPEANH0H0H0H00HPEAH0H1@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtgsyl，该符号在函数 ""int __cdecl psi::C_DTGSYL(char,int,int,int,double *,int,double *,int,double *,int,double *,int,double *,int,double *,int,double *,double *,double *,int,int *)"" (?C_DTGSYL@psi@@YAHDHHHPEANH0H0H0H0H0H000HPEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtpcon，该符号在函数 ""int __cdecl psi::C_DTPCON(char,char,char,int,double *,double *,double *,int *)"" (?C_DTPCON@psi@@YAHDDDHPEAN00PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtprfs，该符号在函数 ""int __cdecl psi::C_DTPRFS(char,char,char,int,int,double *,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DTPRFS@psi@@YAHDDDHHPEAN0H0H000PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtptri，该符号在函数 ""int __cdecl psi::C_DTPTRI(char,char,int,double *)"" (?C_DTPTRI@psi@@YAHDDHPEAN@Z) 中被引",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:50898,error,error,50898,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"EANH000@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbrfs，该符号在函数 ""int __cdecl psi::C_DPBRFS(char,int,int,int,double *,int,double *,int,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DPBRFS@psi@@YAHDHHHPEANH0H0H0H000PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbstf，该符号在函数 ""int __cdecl psi::C_DPBSTF(char,int,int,double *,int)"" (?C_DPBSTF@psi@@YAHDHHPEANH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbsv，该符号在函数 ""int __cdecl psi::C_DPBSV(char,int,int,int,double *,int,double *,int)"" (?C_DPBSV@psi@@YAHDHHHPEANH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbsvx，该符号在函数 ""int __cdecl psi::C_DPBSVX(char,char,int,int,int,double *,int,double *,int,char,double *,double *,int,double *,int,double *,double *,double *,double *,int *)"" (?C_DPBSVX@psi@@YAHDDHHHPEANH0HD00H0H0000PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbtrf，该符号在函数 ""int __cdecl psi::C_DPBTRF(char,int,int,double *,int)"" (?C_DPBTRF@psi@@YAHDHHPEANH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbtrs，该符号在函数 ""int __cdecl psi::C_DPBTRS(char,int,int,int,double *,int,double *,int)"" (?C_DPBTRS@psi@@YAHDHHHPEANH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpocon，该符号在函数 ""int __cdecl psi::C_DPOCON(char,int,double *,int,double,double *,double *,int *)"" (?C_DPOCON@psi@@YAHDHPEANHN00PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpoequ，该符号在函数 ""int __cdecl psi::C_DPOEQU(int,double *,int,double *,double *,double *)"" (?C_DPOEQU@psi@@YAHHPEANH000@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dporfs，该符号在函数 ""int __cdecl psi::C_DPORFS(char,int,int,double *,int,double *,int,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DPORFS@psi@@YAHDHHPEANH0H0H0H000PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dposv，该符号在函数 ""int __cdecl psi::C_DPOSV(char,int,int,double *,in",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:33347,error,error,33347,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"EANH1HNN@Z) 中被引用; F:\qt.lib(blas_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dscal，该符号在函数 ""void __cdecl psi::C_DSCAL(unsigned __int64,double,double *,int)"" (?C_DSCAL@psi@@YAX_KNPEANH@Z) 中被引用; F:\qt.lib(blas_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 ddot，该符号在函数 ""double __cdecl psi::C_DDOT(unsigned __int64,double *,int,double *,int)"" (?C_DDOT@psi@@YAN_KPEANH1H@Z) 中被引用; F:\qt.lib(blas_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dnrm2，该符号在函数 ""double __cdecl psi::C_DNRM2(unsigned __int64,double *,int)"" (?C_DNRM2@psi@@YAN_KPEANH@Z) 中被引用; F:\qt.lib(blas_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dasum，该符号在函数 ""double __cdecl psi::C_DASUM(unsigned __int64,double *,int)"" (?C_DASUM@psi@@YAN_KPEANH@Z) 中被引用; F:\qt.lib(blas_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 idamax，该符号在函数 ""unsigned __int64 __cdecl psi::C_IDAMAX(unsigned __int64,double *,int)"" (?C_IDAMAX@psi@@YA_K_KPEANH@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dgbmv，该符号在函数 ""void __cdecl psi::C_DGBMV(char,int,int,int,int,double,double *,int,double *,int,double,double *,int)"" (?C_DGBMV@psi@@YAXDHHHHNPEANH0HN0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dgemm，该符号在函数 ""void __cdecl psi::C_DGEMM(char,char,int,int,int,double,double *,int,double *,int,double,double *,int)"" (?C_DGEMM@psi@@YAXDDHHHNPEANH0HN0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dgemv，该符号在函数 ""void __cdecl psi::C_DGEMV(char,int,int,double,double *,int,double *,int,double,double *,int)"" (?C_DGEMV@psi@@YAXDHHNPEANH0HN0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dger，该符号在函数 ""void __cdecl psi::C_DGER(int,int,double,double *,int,double *,int,double *,int)"" (?C_DGER@psi@@YAXHHNPEANH0H0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dsbmv，该符号在函数 ""void __cdecl psi::C_DSBMV(char,int,int,double,double *,int,double *,int,double,double *,int)"" (?C_DSBMV@psi@@YAXDHHNPEANH0HN0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dspmv，该符号在函数 ""void __cd",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:10702,error,error,10702,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"EG ---; ---------------------------------------------------------------------------; Coordinate Previous Force Change New; ---------- -------- ------ ------ ------; 1 R(1,2) = 1.257186 -0.000456 0.000097 1.257282; 2 R(2,3) = 1.320898 -0.000254 0.000757 1.321654; 3 R(3,4) = 1.225642 -0.003646 0.000429 1.226071; 4 R(4,5) = 1.320898 -0.000254 0.000695 1.321593; 5 R(5,6) = 1.257186 -0.000456 0.000044 1.257229; 6 B(1,2,3) = 178.583593 0.000071 0.528506 179.112099; 7 L(1,2,3) = 180.000000 0.000000 0.000000 180.000000; 8 B(2,3,4) = 179.931146 0.000000 -0.988620 178.942526; 9 B(3,4,5) = 179.931146 0.000000 -0.989069 178.942077; 10 B(4,5,6) = 178.583593 0.000071 0.528859 179.112452; 11 L(4,5,6) = 180.000000 0.000000 0.000000 180.000000; 12 L(2,3,4) = 180.000000 0.000000 0.000000 180.000000; 13 L(3,4,5) = 180.000000 0.000000 0.000000 180.000000; 14 D(2,3,4,5) = 0.000000 0.000000 -0.010006 -0.010006; ---------------------------------------------------------------------------; ERROR: Symmetry operation 1 did not map atom 1 to another atom:; Molecule:; Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; B 3.191343577854 0.013957984675 -0.026816152712 11.009305406000; N 1.934432141701 -0.005408166154 -0.003207218616 14.003074004780; C 0.613034927883 -0.005322945846 0.022855273246 12.000000000000; C -0.613034934808 -0.005324425017 0.024405755139 12.000000000000; N -1.934432149876 -0.005408605424 0.001676100671 14.003074004780; B -3.191343562754 0.013958534879 -0.018913757728 11.009305406000. attempted to find atom at; -6.030765 0.026377 0.050675; atom_map() throwing PsiException; Could not symmetrize geometry in OPT::MOLECULE::SYMMETRIZE_GEOM(). **** Optimization has failed! (in 4 steps) ****; --------------------------; OPTKING Finished Execution; --------------------------; Cleaning optimization helper files. *** PSI4 exiti",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/10#issuecomment-149031508:1073,ERROR,ERROR,1073,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-149031508,1,['ERROR'],['ERROR']
Availability,"Eco failure is, quite predictably, because it breaks `v2rdm`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2619#issuecomment-1162453607:4,failure,failure,4,https://psicode.org,https://github.com/psi4/psi4/pull/2619#issuecomment-1162453607,1,['failure'],['failure']
Availability,"Eh, always a time for merging. Just trying to cut down on all the needless merging that goes on. This looks great, I think a reference implementation for now is fine. We won't hook anything up, but it would good to have in the code. I think UHF/DFT/DF- are on a long enough time frame to not worry about in this particular PR. Especially since we move from something thats broken to something that works.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/437#issuecomment-230564166:50,down,down,50,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-230564166,1,['down'],['down']
Availability,"Elsewhere, I've added builds of all the `--new-plugin plugname +template` templates, so we'll know if they ever break. . Here (https://github.com/psi4/psi4/pull/304/files#diff-960310e869df2437e6e4b4ad1fa11867R1799) is there any more specific error to catch, or is it one of those c-side psi-exceptions that can't be caught with specificity?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/304#issuecomment-192756982:242,error,error,242,https://psicode.org,https://github.com/psi4/psi4/pull/304#issuecomment-192756982,1,['error'],['error']
Availability,"Err, that's confusing, the orbital file is already opened using the PSIO_OPEN_NEW flag, which should blow away the previous contents. The O_TRUNC flag is passed to ::open() inside PSIO::open, which is supposed to ""Delete any prior file content"". So, I don't get how we are getting an error about overwriting TOC entries in PSIO, etc.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/32#issuecomment-32648789:284,error,error,284,https://psicode.org,https://github.com/psi4/psi4/issues/32#issuecomment-32648789,1,['error'],['error']
Availability,"Error is; ```; Traceback (most recent call last):; File ""/usr/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 29, in <module>; File ""/usr/lib64//python3.9/site-packages/psi4/driver/driver.py"", line 556, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/usr/lib64//python3.9/site-packages/psi4/driver/procrouting/proc.py"", line 2002, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/usr/lib64//python3.9/site-packages/psi4/driver/procrouting/proc.py"", line 1272, in scf_helper; p4util.banner(name.upper()). AttributeError: 'dict' object has no attribute 'upper'. Printing out the relevant lines from the Psithon --> Python processed input file:; ""x_functionals"": {""GGA_X_PBE"": {}},; ""c_functionals"": {""GGA_C_PBE"": {}}; }; core.set_global_option(""BASIS"", ""pcseg-2""); core.set_global_option(""BASIS_GUESS"", ""true""); --> energy('scf', dft_functional=my_pbe); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2199#issuecomment-867164975:0,Error,Error,0,https://psicode.org,https://github.com/psi4/psi4/issues/2199#issuecomment-867164975,1,['Error'],['Error']
Availability,"Even using **guess huckel**, I am getting _Fatal Error: Monomer B: A Matrix is not SPD_ while calculatin SAPT(0) energy with UHF reference.; Using Psi4 1.3.2",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1747#issuecomment-549455459:49,Error,Error,49,https://psicode.org,https://github.com/psi4/psi4/issues/1747#issuecomment-549455459,1,['Error'],['Error']
Availability,"Eventually, I would need it in the AO basis. If it is possible to access all information (contractions, etc.) of the basis set and the matrix elements, I should be able to extract the required data, which would be great. I would already be happy to try this with the unrelaxed dm, to get things working, and then switch to the relaxed on, once it is available.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/504#issuecomment-260369576:350,avail,available,350,https://psicode.org,https://github.com/psi4/psi4/issues/504#issuecomment-260369576,1,['avail'],['available']
Availability,"Everything passes on my Linux box too, with Intel 15.0.2. I'll try a fresh checkout and see if I can reproduce the error.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/230#issuecomment-178220621:115,error,error,115,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178220621,1,['error'],['error']
Availability,Ew. Does someone have an example case of the failure?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/317#issuecomment-197560102:45,failure,failure,45,https://psicode.org,https://github.com/psi4/psi4/issues/317#issuecomment-197560102,1,['failure'],['failure']
Availability,"Exactly why I started trying to track it down: it only occurs on some processors and it shouldn't! I'm just perusing libmints/molecule.cc. In Molecule::inertia_tensor(), inertia tensor elements less that ZERO (#defined as 1e-14) are set to 0.0 before diagonalisation, presumably for similar reasons.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/678#issuecomment-292641928:41,down,down,41,https://psicode.org,https://github.com/psi4/psi4/pull/678#issuecomment-292641928,1,['down'],['down']
Availability,"Example; ```; molecule {; 0 1; Ne; }. set basis aug-cc-pV5Z; set dft_spherical_points 974; set dft_radial_points 450. camlda0 = {; ""name"": ""CAM-LDA0"",; ""xc_functionals"": { ""HYB_LDA_XC_CAM_LDA0"": {""use_libxc"": True} }; }; lda0 = {; ""name"": ""LDA0"",; ""xc_functionals"": { ""HYB_LDA_XC_LDA0"": {""use_libxc"": True} }; }; ```; I've just merged these into libxc master. The hybrid LDA family and these two functionals will appear in the next (major?) release. Unfortunately, these aren't available anywhere else, so I can't be 100% sure the functionals themselves are correct. I just checked that the energies appear to be sane, i.e. the Ne energy is somewhere around -128 hartree.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1645#issuecomment-492620323:478,avail,available,478,https://psicode.org,https://github.com/psi4/psi4/pull/1645#issuecomment-492620323,1,['avail'],['available']
Availability,"Excellent, an error!. Ok, that header is provided by `gcc_impl_linux-64` pkg and shows up for me at `/path/to/env/x86_64-conda_cos6-linux-gnu/sysroot/usr/include/sys/cdefs.h`. Same?. Note that if you hate this and just want to get on with life, drop the `--intel` from `psi4-path-advisor`, use the resulting `cmake -C/various/psi4DepsCache.cmake ... -H. -Bobjdir` command and tack on your own `-DCMAKE_CXX_COMPILER=icpc` etc. to configure against your system gcc 5.4, which will do just fine.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386646370:14,error,error,14,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386646370,1,['error'],['error']
Availability,"Excellent, thanks for your tremendous effort.; Given that my test cases were not modified and still seem to work, i do not have any complaints. > * sometimes the non-OO value (e.g., MP2, LCCD) is available as an early byproduct of the OO calc (e.g., OMP2, OLCCD). this wasn't the case with REMP, and some QCVariables that stored a purported non-OO REMP had to be removed. MP2 should also be available from the guess. But it is of course better to not print/store something than to print something wrong. I might be mistaken, but given that `occ` does coupled DIIS for amplitudes and orbitals, the canonical LCCD enery should not be available from an OLCCD calculation (lccd is never iterated on canonical orbitals). The same holds for REMP2. So yes, if there are variables pretending to be canonical results from an orbital-optimized calculation, these should probably be removed.; No problem, it was mostly my fault to put way too many changes into a single pull request based on an ancient master branch.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2653#issuecomment-1200911089:196,avail,available,196,https://psicode.org,https://github.com/psi4/psi4/pull/2653#issuecomment-1200911089,4,"['avail', 'fault']","['available', 'fault']"
Availability,"Excellent. Psi being too low by a prefactor of 2 was the exact prefactor error that I expected. QChem's eigenvalues are the correct ones. This error in Psi has no computational effect in SOSCF because our gradient has the same prefactor error, no effect in instability analysis because of normalization, and no effect in standard SCF steps because diagonalization doesn't care about orbital gradients and hessians. Psi's instability analysis returns 0.02026 and -0.0142. The lower eigenvalue does not match QChem and does not change significantly in response to increasing convergence tightness or grid points. I expect to have a busy week, but I'll do some poking at why this is. If this seems to be a rabbit hole, I'll just drop LDA-UKS support.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2766#issuecomment-1305713366:73,error,error,73,https://psicode.org,https://github.com/psi4/psi4/pull/2766#issuecomment-1305713366,3,['error'],['error']
Availability,"Except for compiling docs, the `Inc. fock build` naming issue referenced earlier, and this following issue, this PR should be good to go:. Select pytests from `tests/pytests/test_standard_suite.py::test_mp2_hessian_module` are NOT passing. Why is this the case? Is this to be expected?. All CTests passed except sapt7 and scf-cholesky-basis. The latter is fixed when envvar `MKL_CBWR=AVX`.; All pytests passed EXCEPT most of the mp2 Hessian tests (70% failure rate).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-946324182:452,failure,failure,452,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-946324182,1,['failure'],['failure']
Availability,"F:\qt.lib(blas_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 daxpy，该符号在函数 ""void __cdecl psi::C_DAXPY(unsigned __int64,double,double *,int,double *,int)"" (?C_DAXPY@psi@@YAX_KNPEANH1H@Z) 中被引用; F:\qt.lib(blas_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dcopy，该符号在函数 ""void __cdecl psi::C_DCOPY(unsigned __int64,double *,int,double *,int)"" (?C_DCOPY@psi@@YAX_KPEANH1H@Z) 中被引用; F:\qt.lib(blas_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 drot，该符号在函数 ""void __cdecl psi::C_DROT(unsigned __int64,double *,int,double *,int,double,double)"" (?C_DROT@psi@@YAX_KPEANH1HNN@Z) 中被引用; F:\qt.lib(blas_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dscal，该符号在函数 ""void __cdecl psi::C_DSCAL(unsigned __int64,double,double *,int)"" (?C_DSCAL@psi@@YAX_KNPEANH@Z) 中被引用; F:\qt.lib(blas_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 ddot，该符号在函数 ""double __cdecl psi::C_DDOT(unsigned __int64,double *,int,double *,int)"" (?C_DDOT@psi@@YAN_KPEANH1H@Z) 中被引用; F:\qt.lib(blas_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dnrm2，该符号在函数 ""double __cdecl psi::C_DNRM2(unsigned __int64,double *,int)"" (?C_DNRM2@psi@@YAN_KPEANH@Z) 中被引用; F:\qt.lib(blas_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dasum，该符号在函数 ""double __cdecl psi::C_DASUM(unsigned __int64,double *,int)"" (?C_DASUM@psi@@YAN_KPEANH@Z) 中被引用; F:\qt.lib(blas_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 idamax，该符号在函数 ""unsigned __int64 __cdecl psi::C_IDAMAX(unsigned __int64,double *,int)"" (?C_IDAMAX@psi@@YA_K_KPEANH@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dgbmv，该符号在函数 ""void __cdecl psi::C_DGBMV(char,int,int,int,int,double,double *,int,double *,int,double,double *,int)"" (?C_DGBMV@psi@@YAXDHHHHNPEANH0HN0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dgemm，该符号在函数 ""void __cdecl psi::C_DGEMM(char,char,int,int,int,double,double *,int,double *,int,double,double *,int)"" (?C_DGEMM@psi@@YAXDDHHHNPEANH0HN0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dgemv，该符号在函数 ""void __cdecl psi::C_DGEMV(char,int,int,double,double *,int,double *,int,double,d",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:10191,error,error,10191,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -qopenmp ; CMake Warning at cmake/custom_cxxstandard.cmake:22 (message):; Intel ICPC makes use of GCC (detected: 4.7; required for C++11: 4.9) so; this build won't work without GCC intervention:; https://github.com/psi4/psi4/wiki/8_FAQ_Contents#modgcc; Call Stack (most recent call first):; CMakeLists.txt:119 (include). -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl; -- Found BLAS: MKL (/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/intel64/libmkl_intel_lp64.so;/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/intel64/libmkl_intel_thread.so;/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/intel64/libmkl_core.so;/usr/lib64/libpthread.so;/usr/lib64/libm.so); -- LAPACK will be searched for based on MKLROOT=/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl; -- Found LAPACK: MKL (/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/intel64/libmkl_lapack95_lp64.a;/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/intel64/libmkl_intel_lp64.so); -- No Doxygen, no docs.; -- Documentation targets available: sphinxman (html), sphinxmini (quick html), sphinxpdf (LaTeX --> PDF); -- Adding test cases: Psi4; -- Adding test cases: Psi4 + libefp; -- Configuring done; -- Generating done; -- Build files have been written to: /home/LUCA/psi-master_18_11_2016/psi4/bii",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/522#issuecomment-261733153:4218,avail,available,4218,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261733153,1,['avail'],['available']
Availability,"FWIW, I actually was stumped by the syntax error for a couple minutes, because you can't see the generated Python code anymore. The syntax error says ""error line line 21"" (or similar), but I had no idea what was on line 21.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/650#issuecomment-286911061:43,error,error,43,https://psicode.org,https://github.com/psi4/psi4/issues/650#issuecomment-286911061,3,['error'],['error']
Availability,"Failures are my fault, and the fix is in-PR. Just to be clear, Psi4 doesn't use pylibxc -- only the compiled library API.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1645#issuecomment-492445140:0,Failure,Failures,0,https://psicode.org,https://github.com/psi4/psi4/pull/1645#issuecomment-492445140,3,"['Failure', 'fault']","['Failures', 'fault']"
Availability,"Fantastic news! I think we can probably kill this branch and concentrate on getting the latest and greatest in instead. We're doing a massive rewrite of the integrals right now, so best to wait until that's merged before working on the ECPs I think - we don't want to have any merge problems. When we have the new integrals code in (very soon, hopefully), I'll ping you and try to coordinate the ECP rewrite. Thanks for the very positive update :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1340#issuecomment-699121196:361,ping,ping,361,https://psicode.org,https://github.com/psi4/psi4/pull/1340#issuecomment-699121196,1,['ping'],['ping']
Availability,"Fewer compilers working is less of an issue as we push more users towards; the binary distribution. And is only a temporary problem, anyway. Is icpc; 15.0 recent enough to support all the standards we need?. On Wed, Feb 10, 2016 at 3:50 PM, Ben Pritchard notifications@github.com; wrote:. > For me the biggest pro of C++11 is that is reduces the amount of code I; > have to write/maintain/debug.; > - Defaulted (and deleted) constructors and assignment operators; > (mentiond by @dgasmith https://github.com/dgasmith); > - Liberal use of STL containers and unique_ptr means you should rarely; > have to write a destructor, and often don't have to write a copy constructor; > - Constructor delegation; > ; > Cons:; > - Template programming results in nasty compiler error messages that; > take experience to figure out; > - Overuse of templates, auto, decltype, etc, can result unreadable; > code; > - This can somewhat be fixed in the new PR workflow. Don't accept; > PRs which are a mess; > - Some C++11 patterns can be intimidating to people who are still; > learning basic C++; > ; > As more libraries require C++11 (I think Ambit, TiledArray, and Cyclops; > all do), it should generally be embraced, with some reservations.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/238#issuecomment-182577836.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/238#issuecomment-182588993:765,error,error,765,https://psicode.org,https://github.com/psi4/psi4/issues/238#issuecomment-182588993,2,['error'],['error']
Availability,"Final post for now, I cannot devote more time to debugging Psi4. Managed to get a stack trace with full debugging symbols:; ```; (gdb) bt full; #0 __GI_perror (s=0x7ffff6782dd8 ""LSEEK failed. Error description from the OS: "") at perror.c:48; errnum = <optimized out>; fp = <optimized out>; fd = <optimized out>; #1 0x00007ffff5ca4ee7 in psi::PSIO::wt_toclen (this=0x555555eb0a90, unit=102, len=1) at /home/gytibor/psi4/psi4/src/psi4/libpsio/toclen.cc:109; stream = -1; errcod = -1; #2 0x00007ffff5ca5cf6 in psi::PSIO::write (this=0x555555eb0a90, unit=102, key=0x7fffffffb604 ""A <ij|kl>"",; buffer=0x55555b06ac10 ""8\236\312`\310]@@_~hӲ\232\021\300\341\333\312\364\252@\a\277\026%h\212J\026\f\277\227\325\302g;\267\v?\177\311R\341M/\375?\211\377\036\342\217\363\020?\rK\245\316\305\343\n\277\371m8\363\254\230\027?\341Z\003\250\254\031\337>\244\320_\210w\036\327>\263\001'\240j\003\343\276\030 c\355PR\336>\306\345e\034\324I\344>6Z\373\306\316\023\222\276#\026\201 [gɾ\353\357i\224\240=\352?\005L\a\226\273\301*?\305D\330xK\222\063?<c\272\337\366\242\342>k\343\316\350\062hF?\245\070\243\246\313\036\""\277B\006\n\333\317k!?\275\017\327t|c\021?[C+\334\036\063\034\277""..., size=13436928, start=..., end=0x7fffffffb520) at /home/gytibor/psi4/psi4/src/psi4/libpsio/write.cc:94; this_unit = 0x555555eb4810; this_entry = 0x55555a4df9e0; last_entry = 0x20; start_toc = {page = 0, offset = 8}; start_data = {page = 0, offset = 120}; end_data = {page = 205, offset = 2168}; tocentry_size = 112; dirty = 1; #3 0x00007ffff5ca5ff4 in psi::psio_write (unit=102, key=0x7fffffffb604 ""A <ij|kl>"",; buffer=0x55555b06ac10 ""8\236\312`\310]@@_~hӲ\232\021\300\341\333\312\364\252@\a\277\026%h\212J\026\f\277\227\325\302g;\267\v?\177\311R\341M/\375?\211\377\036\342\217\363\020?\rK\245\316\305\343\n\277\371m8\363\254\230\027?\341Z\003\250\254\031\337>\244\320_\210w\036\327>\263\001'\240j\003\343\276\030 c\355PR\336>\306\345e\034\324I\344>6Z\373\306\316\023\222\276#\026\201 [gɾ\353\357i\224\240=\352?\005L\a\226\273\301*?\",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2261#issuecomment-1227164277:192,Error,Error,192,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1227164277,1,['Error'],['Error']
Availability,FindPythonModule is a home cooked file under cmake/ . I can investigate in a couple hours or you can see if there's any difference btwn it and master. That error looks like it might just need a cmake policy set.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3020#issuecomment-1668338629:156,error,error,156,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1668338629,1,['error'],['error']
Availability,"First, you've `s/PYTHON_EXECUTABLE/Python_EXECUTABLE/g cmake/FindPythonModule.cmake` already probably. maybe patch it with to get more info out of the error. ```; diff --git a/cmake/FindPythonModule.cmake b/cmake/FindPythonModule.cmake; index 2b6f93172..b2061b8a6 100644; --- a/cmake/FindPythonModule.cmake; +++ b/cmake/FindPythonModule.cmake; @@ -77,8 +77,10 @@ macro(find_python_module module); print(parse_version('${${module}_VERSION}') ${_op} parse_version('${${module}_tgtver}'))""; RESULT_VARIABLE _${module}_verenuf_status; OUTPUT_VARIABLE _${module}_verenuf; - ERROR_QUIET; + #ERROR_QUIET; OUTPUT_STRIP_TRAILING_WHITESPACE); + message(""_${module}_verenuf_status ${_${module}_verenuf_status}""); + message(""_${module}_verenuf ${_${module}_verenuf}""); if(NOT ${_${module}_verenuf_status}); if(${_${module}_verenuf} STREQUAL ""True""); set(_${module}_requested_version_found ""${Python_EXECUTABLE}""); ```. and kill off the `QUIET` in external/upstream/qcelemental/CM. ```; if(NOT (${CMAKE_DISABLE_FIND_PACKAGE_qcelemental})); include(FindPythonModule); find_python_module(qcelemental ATLEAST 0.24.0 QUIET); endif(); ```. But really, assuming you're detecting a qcel in path, the only part of external/upstream/qcelemental/CM that further cmake cares about is ` add_library(qcelemental_external INTERFACE) # dummy`, so you could set that and bypass the FindPythonModule.cmake entirely.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3020#issuecomment-1668622213:151,error,error,151,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1668622213,1,['error'],['error']
Availability,"Following up on an issue from the conference call:; The fixed `phi_ao` functions are used to form the core Hamiltonian whenever an embedding potential is read from a file. While I haven't run anything, I would expect the bug fixed by this PR to cause correctness errors in SCF energies. Definitely agree with getting this fix in for 1.4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2210#issuecomment-877192480:263,error,errors,263,https://psicode.org,https://github.com/psi4/psi4/pull/2210#issuecomment-877192480,1,['error'],['errors']
Availability,"For `2mer+0-1` the difference is super small (< 0.01 kJ) and differences in density fitting could play a role.; Is ORCA run with RIJCOSX (default) or RIJK (equivalent to psi4's DF) ? ; To eliminate density fitting errors you could run both programs with conventional integrals. If still differences remain, check the values of the D3 and gCP corrections. They should match nearly perfectly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2304#issuecomment-937524349:214,error,errors,214,https://psicode.org,https://github.com/psi4/psi4/issues/2304#issuecomment-937524349,1,['error'],['errors']
Availability,"For dunning basis sets Psi4 and MOLPRO should be using the same fitting basis set. For 99% of cases Psi will choose the ""correct"" fitting basis, especially for first row atoms and Dunning orbital bases. The differences are still a bit larger than I am comfortable with so id like to track this down. Can you post the MOLPRO output as well?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/408#issuecomment-226172089:294,down,down,294,https://psicode.org,https://github.com/psi4/psi4/issues/408#issuecomment-226172089,1,['down'],['down']
Availability,"For fun, I computed the SCF energy from these DUMP files and both sum to the same SCF energy. It looks more like a representation issue than an actual bug. Its probably worth running these through a downstream program and seeing the result.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/980#issuecomment-384474917:199,down,downstream,199,https://psicode.org,https://github.com/psi4/psi4/issues/980#issuecomment-384474917,1,['down'],['downstream']
Availability,"For future reference and for the robustness of https://github.com/psi4/psi4/pull/301, I'd like to know the answer to the standard orientation question in https://github.com/psi4/psi4/issues/298#issuecomment-191476636, if anyone in the know can supply it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/298#issuecomment-191943783:33,robust,robustness,33,https://psicode.org,https://github.com/psi4/psi4/issues/298#issuecomment-191943783,1,['robust'],['robustness']
Availability,"For future reference, please ping Lori on build related issues, rather than me. That's the one part of Psi that I refuse to touch if I can help it. 🙂",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1301#issuecomment-1325542450:29,ping,ping,29,https://psicode.org,https://github.com/psi4/psi4/issues/1301#issuecomment-1325542450,1,['ping'],['ping']
Availability,"For me the biggest pro of C++11 is that is reduces the amount of code I have to write/maintain/debug.; - Defaulted (and deleted) constructors and assignment operators (mentiond by @dgasmith); - Liberal use of STL containers and `unique_ptr` means you should rarely have to write a destructor, and often don't have to write a copy constructor; - Constructor delegation. Cons:; - Template programming results in nasty compiler error messages that take experience to figure out; - Overuse of templates, auto, decltype, etc, can result unreadable code; - This can somewhat be fixed in the new PR workflow. Don't accept PRs which are a mess; - Some C++11 patterns can be intimidating to people who are still learning basic C++. As more libraries require C++11 (I think Ambit, TiledArray, and Cyclops all do), it should generally be embraced, with some reservations.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/238#issuecomment-182577836:425,error,error,425,https://psicode.org,https://github.com/psi4/psi4/issues/238#issuecomment-182577836,2,['error'],['error']
Availability,"For me the code in the last answer of Toon (aswell as earlier tries to recompile...) didn't work to solve this issue. All seems to go well until the last command (off course). The recompilation itself ended in several compiler errors. Like. '__END_NAMESPACE_C99' does not name a type; '__END_NAMESPACE_STD' does not name a type; 'div_t' does not name a type; ... I've exactly used the code from his answer a couple of tries and also tried to checkout some tags of psi4 (v1.2, v1.2.1, v1.3) for recompilation. I've included the output of the make to stdout as an attachment.; Thanks on beforehand. [PSI4_en_am8_via_miniconda_error.txt](https://github.com/psi4/psi4/files/2568355/PSI4_en_am8_via_miniconda_error.txt)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1341#issuecomment-437578863:227,error,errors,227,https://psicode.org,https://github.com/psi4/psi4/issues/1341#issuecomment-437578863,1,['error'],['errors']
Availability,"For methods (or methods in certain circumstances, say reference or conv/df) only available through an external add-on, do we want those opt-in? That is, certainly the external must be (1) installed and detectable. But do we also want to (2) require the user to `set qc_module=mrcc|adcc|chemps2` ? CheMPS2 has a long history of not requiring (2). ADCC has a shorter history of being the preferred backend and automatic choice, if present. I just switched MRCC syntax in #2731 to yes require (2). That was in keeping with the user opt-ing in via `energy(""mrccsd"")`. I can go either way, and I guess I'm now leaning toward not requiring (2) and adjusting MRCC accordingly. But it seems like something to discuss and settle on a consistent treatment.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2737#issuecomment-1268969031:81,avail,available,81,https://psicode.org,https://github.com/psi4/psi4/pull/2737#issuecomment-1268969031,1,['avail'],['available']
Availability,For some unknown reason `psi4 --test` segment fault on Python 3.5.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1115#issuecomment-416175262:46,fault,fault,46,https://psicode.org,https://github.com/psi4/psi4/pull/1115#issuecomment-416175262,1,['fault'],['fault']
Availability,"For std::regex, I just found out that regex is not supported on gcc 4.8. You won't get any compile errors, but we get some runtime errors. All of this goes away if you use GCC 4.9 or GCC 5.2.0. . Just a heads up. Looking forward to these changes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/450#issuecomment-235349863:99,error,errors,99,https://psicode.org,https://github.com/psi4/psi4/issues/450#issuecomment-235349863,2,['error'],['errors']
Availability,"For the ""print error"" line, I get the below on a recent version. ```; ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / jun-cc-pvqz -152.13112737 xtpl_highest_1; corl mp2 / jun-cc-pv[tq]z -0.59785921 corl_xtpl_helgaker_2; delta fno-ccsd(t) - mp2 / jun-cc-pvtz -0.02698189 xtpl_highest_1; total CBS -152.75596848 ; ---------------------------------------------------------------------------------------------------------; ```. The above looks ok to me, so I suspect you've hit #455 . You can easily patch your installation by doing https://github.com/psi4/psi4/commit/2e6b373102294cd59faf47d68044ff2402376e73 , no recompile required. Let me know if you think yours is a different issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/528#issuecomment-263048284:15,error,error,15,https://psicode.org,https://github.com/psi4/psi4/issues/528#issuecomment-263048284,1,['error'],['error']
Availability,"For the failure at the end, check out `driver/driver_nbody.py:471`. Which looks like `wfn = core.Wavefunction.build(molecule, 'sto-3g')`. This should be replaced with `wfn = core.Wavefunction.build(molecule)` so that the global basis set is picked up. You may want to try a fix more like `[x if x > 1.e-10 else x + 1.e10 for x in values]` to be a bit more canonical.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/926#issuecomment-370246164:8,failure,failure,8,https://psicode.org,https://github.com/psi4/psi4/issues/926#issuecomment-370246164,1,['failure'],['failure']
Availability,For the linear dependency problems you might want to have a look at Knizia et al in 10.1021/ct200239p. Replacing the use of inverse overlap matrices with the solution of linear equations makes the algorithms much more tolerant to linear dependencies.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/43#issuecomment-252990815:218,toler,tolerant,218,https://psicode.org,https://github.com/psi4/psi4/issues/43#issuecomment-252990815,1,['toler'],['tolerant']
Availability,"For the record, the following are the tests that are terminated prematurely (with error msg) when ERD globally activated. If anyone gets the `WARNING: string truncated` with gdma, your compile dir path is too long. I think I can fix it, but that's not for this PR. ```; The following tests FAILED:; 	 12 - cbs-xtpl-freq (Failed); 	 13 - cbs-xtpl-gradient (Failed); 	 14 - cbs-xtpl-opt (Failed); 	 16 - cbs-xtpl-wrapper (Failed); 	 17 - cc1 (Failed); 	 21 - cc13 (Failed); 	 22 - cc13a (Failed); 	 23 - cc14 (Failed); 	 30 - cc21 (Failed); 	 32 - cc23 (Failed); 	 33 - cc24 (Failed); 	 34 - cc25 (Failed); 	 35 - cc26 (Failed); 	 36 - cc27 (Failed); 	 39 - cc3 (Failed); 	 78 - cepa0-grad1 (Failed); 	 79 - cepa0-grad2 (Failed); 	 95 - dcft-grad1 (Failed); 	 96 - dcft-grad2 (Failed); 	 97 - dcft-grad3 (Failed); 	 98 - dcft-grad4 (Failed); 	103 - dcft5 (Failed); 	114 - dfccd-grad1 (Failed); 	117 - dfccsd-grad1 (Failed); 	122 - dfmp2-3 (Failed); 	124 - dfmp2-grad1 (Failed); 	125 - dfmp2-grad2 (Failed); 	126 - dfmp2-grad3 (Failed); 	127 - dfmp2-grad4 (Failed); 	132 - dfomp2-grad1 (Failed); 	133 - dfomp2-grad2 (Failed); 	136 - dfomp3-grad1 (Failed); 	137 - dfomp3-grad2 (Failed); 	140 - dfomp2p5-grad1 (Failed); 	141 - dfomp2p5-grad2 (Failed); 	146 - dft-freq (Failed); 	147 - dft-grad (Failed); 	151 - dft1 (Failed); 	152 - dft1-alt (Failed); 	154 - dft3 (Failed); 	157 - extern1 (Failed); 	165 - fd-freq-energy-large (Failed); 	166 - fd-freq-gradient (Failed); 	167 - fd-freq-gradient-large (Failed); 	168 - fd-gradient (Failed); 	169 - freq-isotope (Failed); 	171 - fnocc2 (Failed); 	176 - gibbs (Failed); 	192 - mp2-1 (Failed); 	194 - mp2-grad1 (Failed); 	195 - mp2-grad2 (Failed); 	196 - mp2-module (Failed); 	197 - mp2_5-grad1 (Failed); 	198 - mp2_5-grad2 (Failed); 	199 - mp3-grad1 (Failed); 	200 - mp3-grad2 (Failed); 	206 - ocepa-grad1 (Failed); 	207 - ocepa-grad2 (Failed); 	216 - omp2-grad1 (Failed); 	217 - omp2-grad2 (Failed); 	220 - omp2_5-grad1 (Failed); 	221 - omp2_5-grad2 (Failed)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/605#issuecomment-277397753:82,error,error,82,https://psicode.org,https://github.com/psi4/psi4/pull/605#issuecomment-277397753,1,['error'],['error']
Availability,"For the reduced PBS file, I think you'll want something like the below. For psidatadir, just ensure non-interference. need to have psipath existing before appending. and jobname must match pbs name. i've tested it on dftd3 at least. ```; #!/bin/tcsh; #PBS -j oe; #PBS -l pmem=2120mb; #PBS -N jobname; #PBS -V. setenv OMP_NUM_THREADS 4; setenv MKL_NUM_THREADS 4; cd $PBS_O_WORKDIR; setenv myscratch /scratch/user/psi4.$PBS_JOBID. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end. unsetenv PSI4DATADIR; unsetenv PSIDATADIR; setenv PSI_SCRATCH $myscratch; if ! ( $?PSIPATH ) setenv PSIPATH """"; setenv PSIPATH /path/to/external/modules:${PSIPATH}; setenv PSIPATH /path/to/python/modules:${PSIPATH}; /psi/install/directory/bin/psi4 -i jobname.in -o jobname.out. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Removing scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; end; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/361#issuecomment-212251160:470,echo,echo,470,https://psicode.org,https://github.com/psi4/psi4/pull/361#issuecomment-212251160,2,['echo'],['echo']
Availability,"For what its worth 1.1 shouldn't be too far down the pipeline. This year at the very latest, but hopefully 2-3 months.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/355#issuecomment-232783553:44,down,down,44,https://psicode.org,https://github.com/psi4/psi4/issues/355#issuecomment-232783553,1,['down'],['down']
Availability,"Forgot that MOLPRO used non-augmented basis sets always for HF. Switching to `cc-pvtz-jkfit` we get:. ```; MOLPRO: -601.627052047; Psi4: -601.627052093; ```. Much better!. Now the MP2 issues comes due to the fact that Psi4 was enforcing symmetry while MOLPRO was not. Running both Psi4 and MOLPRO in C1 symmetry returns the following:. ```; MOLPRO: -603.5988606; Psi4: -603.5988594; ```. So an overall error of `1e-6`, roughly on the order of the convergence thresholds. So there is some kind of symmetry breaking operation going on here. Could be physical or could be a bug. If I recall correctly @bozkaya's code is not ""symmetry tolerant"" so it forces C1 symmetry from the start. This would explain why DFOCC is returning a result close to MOLPRO, the different SCF fitting basis sets would explain the rest. . Short version: Its a symmetry issue, specify C1 symmetry and it should fix the errors that you see.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/408#issuecomment-226325532:402,error,error,402,https://psicode.org,https://github.com/psi4/psi4/issues/408#issuecomment-226325532,3,"['error', 'toler']","['error', 'errors', 'tolerant']"
Availability,"Formatting is great, but just in case part of your goal is to compare basissets at the `.gbs` file level, I wanted to let you know about https://github.com/psi4/psi4/blob/master/psi4/share/psi4/basis/primitives/diff_gbs.py . Thhe basis set exchange has one, too, -- I think https://github.com/MolSSI-BSE/basis_set_exchange/blob/master/basis_set_exchange/curate/diff.py. I'll look into the adcc errors. I think Max updated the conda packages recently.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2937#issuecomment-1529060031:394,error,errors,394,https://psicode.org,https://github.com/psi4/psi4/pull/2937#issuecomment-1529060031,1,['error'],['errors']
Availability,From Andy: current status is that the 1e-10 errors are suspect. Want to use Ben's MIRP https://github.com/MolSSI/MIRP to gauge what's right and see if they're acceptable. Good miniproject.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/592#issuecomment-418167798:44,error,errors,44,https://psicode.org,https://github.com/psi4/psi4/pull/592#issuecomment-418167798,1,['error'],['errors']
Availability,"From psi4 command-line, default cores is 1 and more added by `-n <cores>`. From qcengine, default is all-the-machine-has and user adjusted by `local_options` (maybe name changed). The former is a traditional research code expectation and reasoning -- this is a cutting-edge and semistable code that I'm going to run cautiously at first before trying for speed. The latter is more consumer software expectation -- do your fastest on the resources available. Would that explain what you're seeing?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2600#issuecomment-1152547044:446,avail,available,446,https://psicode.org,https://github.com/psi4/psi4/issues/2600#issuecomment-1152547044,1,['avail'],['available']
Availability,"From the little I know about FreeBSD, I'm guessing that it's not fitting into either the Mac or Linux channels that our build system expects. The build is well-tested by devs with Mac+AppleClang and Linux+Intel(GCC), and CI covers Linux+GCC and Linux+Clang. It's going to be tricky to debug remotely, but if you work it out and care to submit a PR, we'd be grateful (particularly if you updated to master from 1.1). One thing to watch out for (wrt #852) is to make sure CMake can't find a different (higher than 2.0) version of pybind11 _anywhere_ on your system. We try to nail it down in CMake, but sometimes it finds and uses a wrong version installed alongside another dependency. Naturally, if I recognize the cause for an error, I'm glad to help.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/853#issuecomment-343702224:582,down,down,582,https://psicode.org,https://github.com/psi4/psi4/issues/853#issuecomment-343702224,2,"['down', 'error']","['down', 'error']"
Availability,"Full rework of SAD guess (#1451, #1452, #1456, #1458, #1477, #1479, #1481), fixing issues with fractional occupations, ECPs, and ghost atoms. Sad with spin-averaged fractional occupations is now the default guess in Psi4, yielding huge performance improvements. This is especially significant for unrestricted and restricted open-shell methods, for which the default guess was GWH which is even worse than CORE. Implemented the on-the-fly extended Huckel guess (#1498, #1529), which is based on the SAD solver. DIIS maximum absolute error criterion for SCF, instead of the default RMS error (#1460). Removed inconsistencies and bugs in formatted checkpoint files (#1475). Code assumes that the post-HF wave function contains a correlated density. Fixed inconsistencies in the passing of DF_FITTING_CONDITION; the default value is now 1e-10 in line with what was actually used by the code before.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1406#issuecomment-455544888:533,error,error,533,https://psicode.org,https://github.com/psi4/psi4/issues/1406#issuecomment-455544888,3,"['checkpoint', 'error']","['checkpoint', 'error']"
Availability,"GQL(int,int,int,double *,int,double *,double *,int)"" (?C_DORGQL@psi@@YAHHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dorgqr，该符号在函数 ""int __cdecl psi::C_DORGQR(int,int,int,double *,int,double *,double *,int)"" (?C_DORGQR@psi@@YAHHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dorgrq，该符号在函数 ""int __cdecl psi::C_DORGRQ(int,int,int,double *,int,double *,double *,int)"" (?C_DORGRQ@psi@@YAHHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dorgtr，该符号在函数 ""int __cdecl psi::C_DORGTR(char,int,double *,int,double *,double *,int)"" (?C_DORGTR@psi@@YAHDHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormbr，该符号在函数 ""int __cdecl psi::C_DORMBR(char,char,char,int,int,int,double *,int,double *,double *,int,double *,int)"" (?C_DORMBR@psi@@YAHDDDHHHPEANH00H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormhr，该符号在函数 ""int __cdecl psi::C_DORMHR(char,char,int,int,int,int,double *,int,double *,double *,int,double *,int)"" (?C_DORMHR@psi@@YAHDDHHHHPEANH00H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormlq，该符号在函数 ""int __cdecl psi::C_DORMLQ(char,char,int,int,int,double *,int,double *,double *,int,double *,int)"" (?C_DORMLQ@psi@@YAHDDHHHPEANH00H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormql，该符号在函数 ""int __cdecl psi::C_DORMQL(char,char,int,int,int,double *,int,double *,double *,int,double *,int)"" (?C_DORMQL@psi@@YAHDDHHHPEANH00H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormqr，该符号在函数 ""int __cdecl psi::C_DORMQR(char,char,int,int,int,double *,int,double *,double *,int,double *,int)"" (?C_DORMQR@psi@@YAHDDHHHPEANH00H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormr3，该符号在函数 ""int __cdecl psi::C_DORMR3(char,char,int,int,int,int,double *,int,double *,double *,int,double *)"" (?C_DORMR3@psi@@YAHDDHHHHPEANH00H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:30335,error,error,30335,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"General philosophy has been that something in the energy/grad/etc call can silently trump an option ( otherwise reference rhf + energy b3lyp wouldn’t work). I think that holds for method, basis, fc, etc for g2. The hf3c isn’t so clear cut imo b/c the basis set is constant, so easy to switch out. Though as peter points out, it’s no longer hf3c then and shouldn’t get the “hf3c total energy “ set, only perhaps “scf total energy”. Comes down to does a method suggest or require certain options. . At one point, fc in this g2 sequence were behaving very strangely for me.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1530#issuecomment-486231622:437,down,down,437,https://psicode.org,https://github.com/psi4/psi4/issues/1530#issuecomment-486231622,2,['down'],['down']
Availability,"Generally psi4 is supposed to catch those and still finish gracefully, and with upcoming psi4 v1.4 one gets also more visible error messages (see PR https://github.com/psi4/psi4/pull/1862). But here psi4 is aborted which is indeed not user friendly.; I dont know the exceptions machinery well enough to say why but it happens also in the current developer version.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2080#issuecomment-760128241:126,error,error,126,https://psicode.org,https://github.com/psi4/psi4/issues/2080#issuecomment-760128241,1,['error'],['error']
Availability,Getting pretty close to merging this in. Failing tests case should be limited to the following:. ```; 22 - cc14 (Failed); 155 - docs-psimod (Failed); 187 - mints9 (Failed); ```. Docs and mints both require changes to the test case. `cc14` remains the only undiagnosed test failure.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/481#issuecomment-254326737:273,failure,failure,273,https://psicode.org,https://github.com/psi4/psi4/pull/481#issuecomment-254326737,1,['failure'],['failure']
Availability,"Git-hooks is probably a non-starter, so +1 for avoiding that. Another +1 for clang-format, I use it internally quite a bit with Google style and 4 spaces. Im kind of on the fence about this. A few notes:. Pros:; - Completely uniform style. Cons:; - We are constantly avoided errors, the `# pyflakes` and `# noqa` messages are messier than most of our python errors IMO.; - Plenty of times when we want something other than pep8 formatting (e.g. `VARH`).; - Completely uniform style (see previous point).; - If we override a single error in pyflakes, pyflakes will continue to fail for all further commits. It would become very easy just to ignore this test. Dont get me wrong, we should do periodic style cleanups. This is needed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/530#issuecomment-263272403:275,error,errors,275,https://psicode.org,https://github.com/psi4/psi4/pull/530#issuecomment-263272403,3,['error'],"['error', 'errors']"
Availability,"Give the newly committed fix a try, then if that's not satisfactory, reopen this. `psi4 --test` is what that preloading is actually affecting, so pass along any unexpected results of that. (Though I'm not sure if an error caused by a present but broken add-on should be skipped or failed.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/656#issuecomment-288422107:216,error,error,216,https://psicode.org,https://github.com/psi4/psi4/issues/656#issuecomment-288422107,1,['error'],['error']
Availability,"Given the reporter, the geometry they input is probably garbage. While I agree attempts to optimize from this are in vain, there should be a proper error message instead of just crashing with an obscure C error code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2627#issuecomment-1179213167:148,error,error,148,https://psicode.org,https://github.com/psi4/psi4/issues/2627#issuecomment-1179213167,2,['error'],['error']
Availability,"Glad to hear that we are right on time :-) . The error handling is something central for us too as we aimed to make trexio user-friendly. Btw, if you notice something needed for Psi4 which is currently missing in the trexio format - feel free to open an issue in the repo or ping me.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2847#issuecomment-1379266385:49,error,error,49,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1379266385,4,"['error', 'ping']","['error', 'ping']"
Availability,"Glad to help, as you're actually using the feature. Note that we're doing some infrastructure reworking (on private repo for now, but private is what conda builds from, again for now) that affect plugins. Until that settles down and appears in public (which is to become our primary repo, for conda, too) with guidelines, you may want to stick with recommending the `0.3` series for your RESP plugin. (Helps that our nightly build box is down for now, so there's only one `0.4` series around https://anaconda.org/psi4/psi4/files.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/229#issuecomment-182553481:224,down,down,224,https://psicode.org,https://github.com/psi4/psi4/issues/229#issuecomment-182553481,4,['down'],['down']
Availability,"Go ahead and pull down updated versions of the packages with blas/lapack dependencies `conda update chemps2 libefp v2rdm_casscf -c psi4/label/dev -c psi4`. We switched over math handling recently from statically linked mkl to single dynamic library mkl. If you want, you can grab the whole updated list `conda update pcmsolver libxc gdma libint dkh erd simint libefp chemps2 v2rdm_casscf -c psi4/label/dev -c psi4` as they now come with more instruction sets embedded.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/764#issuecomment-318659874:18,down,down,18,https://psicode.org,https://github.com/psi4/psi4/issues/764#issuecomment-318659874,1,['down'],['down']
Availability,"Good catch!. David. On Tue, Apr 25, 2017 at 4:20 PM, Andy Simmonett <notifications@github.com>; wrote:. > You're gaining quite the reputation for hunting down difficult and obscure; > bugs. Thanks a lot! At first glance, I think you're right about the size_t; > being a good solution, but I'll hold off saying anything definitive about; > that until I can look at it in a less sleep deprived state.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/685#issuecomment-297152955>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdhY_fd5Pi2IM3dRb0-ShVYHzaVFtks5rzlWdgaJpZM4NH_3A>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/685#issuecomment-297155704:154,down,down,154,https://psicode.org,https://github.com/psi4/psi4/pull/685#issuecomment-297155704,1,['down'],['down']
Availability,"Good day Sir,. Please I am still finding it difficult to generate the potential energy; data for the CF molecule. Would you be pleased to be of help? I don't mind; having a virtual meeting with you so you can assist me. I am the one one; doing this kind of research in my school and my supervisor doesn't know; much in this area. Please help 🙏 me.; If you request any information pertaining this, I will send it across; immediately. Thank you in anticipation. Kind regards; Sanctus. On Tue, Jun 18, 2024, 02:27 Jonathon Misiewicz ***@***.***>; wrote:. > Based on your writing, I assume you're a student researcher.; >; > Posting error messages *like this* is not a good way to get help. Large; > input files like this make it difficult for developers to find the actual; > problem. It's best practice to simplify the input file as much possible; > while still making the error clear. Sometimes, doing that can tell *you*; > where the problem is. If you don't know how to do this kind of; > troubleshooting, consult your seniors in your research group or your; > professor.; >; > I've played around with your latest input file and can confirm that you; > have made a fairly straightforward mistake, but you've discarded important; > information. As an exercise, please post a *simplified* input that; > reproduces your problem, and a *complete* error message. Once you've done; > that, I'll update the error message to be more explicit and offer some; > advice on how to bypass this. (Though once you understand the error, it's; > fairly straightforward.); >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/3181#issuecomment-2174102955>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/BA3DXYANKY74HK5CYFXZ6YLZH4TB5AVCNFSM6AAAAABI5T5SNGVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDCNZUGEYDEOJVGU>; > .; > You are receiving this because you authored the thread.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2184941549:629,error,error,629,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2184941549,10,['error'],['error']
Availability,"Good find, there's some additional info in that header file that explains how the precision parameter is used to screen primitives. If we use the default libint2 engine precision parameter (`std::numeric_limits<double>::epsilon()`) we would still have a problem, since the current engine precision parameter (`std::numeric_limits<double>::epsilon() * std::pow((double)max_nprim, -4.0) * 1.e-2`) is smaller/tighter and causes convergence issues. I think we need something closer to 0.0. I've found that tightening the parameter by a factor of 10 (setting it to `std::numeric_limits<double>::epsilon() * std::pow((double)max_nprim, -4.0) * 1.e-3`) fixes all of the errors I've encountered. Any objections to this? Also, does anyone know how this parameter was chosen in the first place?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2114#issuecomment-782982394:663,error,errors,663,https://psicode.org,https://github.com/psi4/psi4/issues/2114#issuecomment-782982394,1,['error'],['errors']
Availability,"Good point -- @jeffschriber understands the issue and plans to address it sometime. The summary is that the new MBIS volume ratio functionality is only half available. The `energy(); oeprop(..., ""MBIS_VOLUME_RATIOS"")` route is fine, but `set scf_properties [mbis_volume_ratios]; energy()` fails b/c some necessary data (free atom volumes) isn't available. This isn't a regression. It'd just be nice to even up the capabilities, esp. as a qcschema run can only use the second form.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2299#issuecomment-926645575:157,avail,available,157,https://psicode.org,https://github.com/psi4/psi4/issues/2299#issuecomment-926645575,2,['avail'],['available']
Availability,"Good point, @mbanck. These release notes will be relative to 4.0beta5 from July 2013. Incremental release notes for earlier betas (though not all the way back to psi3 3.4.0) are at http://psicode.org/downloads.php .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/367#issuecomment-220846631:200,down,downloads,200,https://psicode.org,https://github.com/psi4/psi4/issues/367#issuecomment-220846631,1,['down'],['downloads']
Availability,"Good to know on the `CMAKE_PREFIX_PATH` for python detection. That should probably become the preferred way to detect Anaconda python. To have multiple items in that var, use something like `-DCMAKE_PREFIX_PATH=""${PFXE}/install-libefp-so;${PFXE}/install-libint-6-so;${PFXE}/install-pcmsolver""`, in case you hadn't already worked that out. Quite right about 2.7. At some point I stopped adapting my dictionary comprehensions for the 2.6 folks. I'm guessing it will build/link, but you'd get driver errors at runtime. Should be detecting a 2.7 minimum in cmake. One thing we want to do really soon is allow/switch to 3.5, switch to pythonlibsnew cmake module, and probably to offload python library detection to pybind11, so don't spend too much time playing around with the current python cmake, except for your own edification. Do feel free to switch that line you linked to to 2.7 .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-249720030:497,error,errors,497,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249720030,1,['error'],['errors']
Availability,"Good to know!. And naming the block and applying `set basis_relativistic mysvp` fixes the original forum issue. It would still be nice if the error message had told him the problem was needing to define `basis_relativistic`, though...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1332#issuecomment-435700102:142,error,error,142,https://psicode.org,https://github.com/psi4/psi4/issues/1332#issuecomment-435700102,1,['error'],['error']
Availability,"Good, thanks!. Assuming [this is the log](https://buildd.debian.org/status/fetch.php?pkg=psi4&arch=i386&ver=1%3A1.2.1-1&stamp=1546604357&raw=0) to look at, a few comments:; - no need for boost at all (`libboost-atomic1.67-dev libboost-atomic1.67.0 libboost-chrono-dev`); - psi 1.2 won't work with py < 3.5 (`Get:19 http://debian.csail.mit.edu/debian unstable/main i386 python2.7 i386 2.7.15-5 [299 kB]`); - production needs at least AM6 (`-DMAX_AM_ERI=4`) and preferably 7 or 8; - source is probably a little out of date as this turned to c++14 around Christmas (`-- Setting (unspecified) option psi4_CXX_STANDARD: 11`); - I think you were the one who wanted to be able to use a default theme rather than the psi custom one. this is available now (`-- Setting (unspecified) option SPHINX_THEME: sphinx_psi_theme`); - threaded blas that's not mkl can go wrong (`CMake Warning at external/common/lapack/CMakeLists.txt:50 (message):`) and unfortunately the test suite in single thread mode can't catch it. would be good to test it, perhaps with this script https://github.com/psi4/psi4/blob/master/psi4/share/psi4/scripts/test_threading.py#L270.; - it's finding an AM=5 libint (`-- [36mFound Libint 5[m: /usr/lib/libint.a (found version 1.2.0)`). this'll make it through the tests but not good for production.; - aha, you're targeting v1.2.1, not v1.3! nevermind what I said about c++14; - `ImportError: Install python module networkx`; - Unfortunately solutions to test failures aren't leaping to mind. Some are very strange for a consistent codebase (`TypeError: set_memory_bytes(): incompatible function arguments. The following argument types are supported:`)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1302#issuecomment-451508824:733,avail,available,733,https://psicode.org,https://github.com/psi4/psi4/issues/1302#issuecomment-451508824,2,"['avail', 'failure']","['available', 'failures']"
Availability,"Google's style is starting to become C++ standard from what I've seen and; would be my vote. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 7, 2016 1:32 PM, ""Daniel Smith"" notifications@github.com wrote:. > Ah, I run a lot of the CI code that hasn't been touched since Psi3 through; > clang-format with google style options so that I can read it a bit better.; > I do wish the ignore white-space option was available online as well.; > ; > I do like the idea of a style guide for the code, but it isn't; > particularly high on any list.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/pull/372#issuecomment-217654331",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/372#issuecomment-217657023:439,avail,available,439,https://psicode.org,https://github.com/psi4/psi4/pull/372#issuecomment-217657023,2,['avail'],['available']
Availability,"Got it. Expect a PR with the gory details and comments over the weekend. If anybody needs this _right away_, you need to change [these lines](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfmp2/mp2.cc#L2089-L2093) from; ```; PAbp[A][b] /= -(eps_avirp[b] - eps_fvirp[A]);; }; }. for (int B = 0; B < nfocc; B++) {; ```; to; ```; PAbp[A][b] /= (eps_avirp[b] - eps_fvirp[A]);; }; }. for (int B = 0; B < nfvir; B++) {; ```. There's a sign error, and you're looping over the wrong variable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1916#issuecomment-639869519:443,error,error,443,https://psicode.org,https://github.com/psi4/psi4/issues/1916#issuecomment-639869519,1,['error'],['error']
Availability,"Granted. I was vaguely remembering that I also use 'valid_atom_map' to test whether RFO eigenvectors are symmetric - and they can be large and asymmetric. But for valid_atom_map it looks like I pass a tolerance in from optking, so I don't forsee any problems. Give it a shot.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/195#issuecomment-189456212:201,toler,tolerance,201,https://psicode.org,https://github.com/psi4/psi4/issues/195#issuecomment-189456212,1,['toler'],['tolerance']
Availability,"Great and thanks!. Francesco. On Jul 17, 2015, at 11:04 PM, Lori A. Burns <notifications@github.com<mailto:notifications@github.com>> wrote:. Yes, if you look at the source of http://psicode.org/psi4manual/master/_sources/tutorial.txt , there's statements like .. literalinclude:: /../../../../samples/tu6-cp-ne2/input.dat that directly include sample files in the documentation. It can also be trimmed like so:. .. literalinclude:: /../../../../lib/python/p4const/physconst.py; :lines: 25-. ## . Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/149#issuecomment-122477178. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/149#issuecomment-122478325:1018,error,error,1018,https://psicode.org,https://github.com/psi4/psi4/issues/149#issuecomment-122478325,1,['error'],['error']
Availability,Great catch by @dsirianni. I'll pull this one in (with squash) and the exception error can be fixed separately.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/798#issuecomment-330655700:81,error,error,81,https://psicode.org,https://github.com/psi4/psi4/pull/798#issuecomment-330655700,1,['error'],['error']
Availability,"Great to see this capability added! A pdf in doc/external can probably be linked to from Sphinx docs, though it won't be searchable. If Stone isn't keen on the subdir of Psi4 scheme, we could arrange so that his code stays on his website, a conda recipe (or cmake Add_External_Project) curls it from the web, a patch converts it to build as a lib rather than an exe, and so libgdma.so stays outside psi4. Then the interface code between gdma and libmints stays in psi4. Would like to make the built library available from our conda channel, though.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/323#issuecomment-201110783:507,avail,available,507,https://psicode.org,https://github.com/psi4/psi4/pull/323#issuecomment-201110783,1,['avail'],['available']
Availability,"Great work tracking that one down, @bennybp et al. and thanks for the heads-up, @dkoes. Does anybody know why the CSS elements are fubared in the manual? The issues mentioned by @amjames still persist - perhaps it's a result of those modified directory permissions?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/342#issuecomment-210202336:29,down,down,29,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210202336,1,['down'],['down']
Availability,"Great work, @bennybp and @loriab. I didn't realize just how half assed my attempt to interface ERD was until reviewing this PR (I lost steam a little when I realized we weren't getting any speedup over libint). The error checking to catch bad use cases is great.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/605#issuecomment-277415985:215,error,error,215,https://psicode.org,https://github.com/psi4/psi4/pull/605#issuecomment-277415985,1,['error'],['error']
Availability,Great! I believe we will also explore ICC on top of MSVC incase the clang/MSVC compatibility with default conda channels is not robust.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-423186874:128,robust,robust,128,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-423186874,1,['robust'],['robust']
Availability,"Great! confirmed that `ctest` on libxc itself is clean for me. and in psi4, above error cleaned up, and `C_DSYEV` error cleaned up, too. For status, the 4 failing ctests are below. I'll run pytests next. ```. Printing out the relevant lines from the Psithon --> Python processed input file:; reference_wpbe_4 = -75.27504649361143; reference_wpbe_5 = -75.28530313989565; reference_wpbe_6 = -75.29249565176227; core.set_global_option(""DFT_OMEGA"", 0.4); func_call = energy('SCF', dft_functional=""wPBE""); --> compare_values(reference_wpbe_4, func_call, 6, ""wPBE0 omega=0.4""); core.set_global_option(""DFT_OMEGA"", 0.5); func_call = energy('SCF', dft_functional=""wPBE""); compare_values(reference_wpbe_5, func_call, 6, ""wPBE0 omega=0.5""); core.set_global_option(""DFT_OMEGA"", 0.6); func_call = energy('SCF', dft_functional=""wPBE""). !----------------------------------------------------------------------------------!; ! !; ! wPBE0 omega=0.4: computed value (-79.03914662) does not match !; ! (-75.27504649) to atol=1e-06 by difference (-3.76410013). !; ! !; !----------------------------------------------------------------------------------!. Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of output>; Test time = 16.57 sec; ----------------------------------------------------------; Test Failed.; ""dft-custom"" end time: Jan 05 15:36 EST; ""dft-custom"" time elapsed: 00:00:16; ----------------------------------------------------------; ```. ```; Printing out the relevant lines from the Psithon --> Python processed input file:; core.IO.set_default_namespace(""ne""); core.set_global_option(""DFT_SPHERICAL_POINTS"", 770); core.set_global_option(""D_CONVERGENCE"", 1e-5); core.set_global_option(""BASIS"", ""cc-pvdz""); activate(ne); --> edft = energy(""ft97""); compare_values(-128.850056371480, edft, 4, ""Ne: FT97""). !-------------------------------------------------------!; ! !; ! Could not converge SCF iterations in 100 iterations. !; ! !; !------------------------------------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-754900620:82,error,error,82,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-754900620,2,['error'],['error']
Availability,"Great. Let me explain the issue here. DFT does a numerical integration. If you want to compute a gradient, then _in principle_, you should include derivatives of the integration grid itself. Psi4 does not do that. (@susilehtola tells me that an open-source library in active development will handle that for us soon.) In the limit of an infinitely large grid, the error due to neglecting the geometry dependence of the grid vanishes. That error is _probably_ what you're seeing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3161#issuecomment-2075978791:364,error,error,364,https://psicode.org,https://github.com/psi4/psi4/issues/3161#issuecomment-2075978791,2,['error'],['error']
Availability,"Greetings, all. It's time to schedule Kill the Boost week! There are three major parts of this, as I see it: BoostPy, BoostNonPy, and FilterBranch. These are defined in the addendum to the top post of this ticket. I imagine the in-person and through-hangout times will be focused on the BoostPy target, though we should all be working on the BoostNonPy as convenient. So, please to add your availability to the weeks below. Reply or feel free to edit this comment. **Aug 15:** LAB, Jet-ok, best for andy; **Aug 22 (ACS Nat'l Mtg):** LAB, Jet-ok, works for andy; **Aug 29:** LAB, Jet-ok, andy traveling",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/450#issuecomment-237669294:391,avail,availability,391,https://psicode.org,https://github.com/psi4/psi4/issues/450#issuecomment-237669294,1,['avail'],['availability']
Availability,"H10@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgebrd，该符号在函数 ""int __cdecl psi::C_DGEBRD(int,int,double *,int,double *,double *,double *,double *,double *,int)"" (?C_DGEBRD@psi@@YAHHHPEANH00000H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgecon，该符号在函数 ""int __cdecl psi::C_DGECON(char,int,double *,int,double,double *,double *,int *)"" (?C_DGECON@psi@@YAHDHPEANHN00PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgeequ，该符号在函数 ""int __cdecl psi::C_DGEEQU(int,int,double *,int,double *,double *,double *,double *,double *)"" (?C_DGEEQU@psi@@YAHHHPEANH00000@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgees，该符号在函数 ""int __cdecl psi::C_DGEES(char,char,int,double *,int,int *,double *,double *,double *,int,double *,int)"" (?C_DGEES@psi@@YAHDDHPEANHPEAH000H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgeesx，该符号在函数 ""int __cdecl psi::C_DGEESX(char,char,char,int,double *,int,int *,double *,double *,double *,int,double *,double *,double *,int,int *,int)"" (?C_DGEESX@psi@@YAHDDDHPEANHPEAH000H000H1H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgeev，该符号在函数 ""int __cdecl psi::C_DGEEV(char,char,int,double *,int,double *,double *,double *,int,double *,int,double *,int)"" (?C_DGEEV@psi@@YAHDDHPEANH000H0H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgeevx，该符号在函数 ""int __cdecl psi::C_DGEEVX(char,char,char,char,int,double *,int,double *,double *,double *,int,double *,int,int *,int *,double *,double *,double *,double *,double *,int,int *)"" (?C_DGEEVX@psi@@YAHDDDDHPEANH000H0HPEAH100000H1@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgehrd，该符号在函数 ""int __cdecl psi::C_DGEHRD(int,int,int,double *,int,double *,double *,int)"" (?C_DGEHRD@psi@@YAHHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgelqf，该符号在函数 ""int __cdecl psi::C_DGELQF(int,int,double *,int,double *,double *,int)"" (?C_DGELQF@psi@@YAHH",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:18704,error,error,18704,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormqr，该符号在函数 ""int __cdecl psi::C_DORMQR(char,char,int,int,int,double *,int,double *,double *,int,double *,int)"" (?C_DORMQR@psi@@YAHDDHHHPEANH00H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormr3，该符号在函数 ""int __cdecl psi::C_DORMR3(char,char,int,int,int,int,double *,int,double *,double *,int,double *)"" (?C_DORMR3@psi@@YAHDDHHHHPEANH00H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormrq，该符号在函数 ""int __cdecl psi::C_DORMRQ(char,char,int,int,int,double *,int,double *,double *,int,double *,int)"" (?C_DORMRQ@psi@@YAHDDHHHPEANH00H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormrz，该符号在函数 ""int __cdecl psi::C_DORMRZ(char,char,int,int,int,int,double *,int,double *,double *,int,double *,int)"" (?C_DORMRZ@psi@@YAHDDHHHHPEANH00H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormtr，该符号在函数 ""int __cdecl psi::C_DORMTR(char,char,char,int,int,double *,int,double *,double *,int,double *,int)"" (?C_DORMTR@psi@@YAHDDDHHPEANH00H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbcon，该符号在函数 ""int __cdecl psi::C_DPBCON(char,int,int,double *,int,double,double *,double *,int *)"" (?C_DPBCON@psi@@YAHDHHPEANHN00PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbequ，该符号在函数 ""int __cdecl psi::C_DPBEQU(char,int,int,double *,int,double *,double *,double *)"" (?C_DPBEQU@psi@@YAHDHHPEANH000@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbrfs，该符号在函数 ""int __cdecl psi::C_DPBRFS(char,int,int,int,double *,int,double *,int,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DPBRFS@psi@@YAHDHHHPEANH0H0H0H000PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbstf，该符号在函数 ""int __cdecl psi::C_DPBSTF(char,int,int,double *,int)"" (?C_DPBSTF@psi@@YAHDHHPEANH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbsv，该符号在函数 ""int __cdecl psi::C_DPB",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:31850,error,error,31850,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"HHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgesdd，该符号在函数 ""int __cdecl psi::C_DGESDD(char,int,int,double *,int,double *,double *,int,double *,int,double *,int,int *)"" (?C_DGESDD@psi@@YAHDHHPEANH00H0H0HPEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgesv，该符号在函数 ""int __cdecl psi::C_DGESV(int,int,double *,int,int *,double *,int)"" (?C_DGESV@psi@@YAHHHPEANHPEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgesvx，该符号在函数 ""int __cdecl psi::C_DGESVX(char,char,int,int,double *,int,double *,int,int *,char,double *,double *,double *,int,double *,int,double *,double *,double *,double *,int *)"" (?C_DGESVX@psi@@YAHDDHHPEANH0HPEAHD000H0H00001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgetrf，该符号在函数 ""int __cdecl psi::C_DGETRF(int,int,double *,int,int *)"" (?C_DGETRF@psi@@YAHHHPEANHPEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgetri，该符号在函数 ""int __cdecl psi::C_DGETRI(int,double *,int,int *,double *,int)"" (?C_DGETRI@psi@@YAHHPEANHPEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgetrs，该符号在函数 ""int __cdecl psi::C_DGETRS(char,int,int,double *,int,int *,double *,int)"" (?C_DGETRS@psi@@YAHDHHPEANHPEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dggbak，该符号在函数 ""int __cdecl psi::C_DGGBAK(char,char,int,int,int,double *,double *,int,double *,int)"" (?C_DGGBAK@psi@@YAHDDHHHPEAN0H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dggbal，该符号在函数 ""int __cdecl psi::C_DGGBAL(char,int,double *,int,double *,int,int *,int *,double *,double *,double *)"" (?C_DGGBAL@psi@@YAHDHPEANH0HPEAH1000@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgges，该符号在函数 ""int __cdecl psi::C_DGEGS(char,char,int,double *,int,double *,int,double *,double *,double *,double *,int,double *,int,double *,int)"" (?C_DGEGS@psi@@YAHDDHPEANH0H0000H0H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dggesx，",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:22602,error,error,22602,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"HPEAN00H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspevd，该符号在函数 ""int __cdecl psi::C_DSPEVD(char,char,int,double *,double *,double *,int,double *,int,int *,int)"" (?C_DSPEVD@psi@@YAHDDHPEAN00H0HPEAHH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspevx，该符号在函数 ""int __cdecl psi::C_DSPEVX(char,char,char,int,double *,double,double,int,int,double,int *,double *,double *,int,double *,int *,int *)"" (?C_DSPEVX@psi@@YAHDDDHPEANNNHHNPEAH00H011@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspgst，该符号在函数 ""int __cdecl psi::C_DSPGST(int,char,int,double *,double *)"" (?C_DSPGST@psi@@YAHHDHPEAN0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspgv，该符号在函数 ""int __cdecl psi::C_DSPGV(int,char,char,int,double *,double *,double *,double *,int,double *)"" (?C_DSPGV@psi@@YAHHDDHPEAN000H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspgvd，该符号在函数 ""int __cdecl psi::C_DSPGVD(int,char,char,int,double *,double *,double *,double *,int,double *,int,int *,int)"" (?C_DSPGVD@psi@@YAHHDDHPEAN000H0HPEAHH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspgvx，该符号在函数 ""int __cdecl psi::C_DSPGVX(int,char,char,char,int,double *,double *,double,double,int,int,double,int *,double *,double *,int,double *,int *,int *)"" (?C_DSPGVX@psi@@YAHHDDDHPEAN0NNHHNPEAH00H011@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsprfs，该符号在函数 ""int __cdecl psi::C_DSPRFS(char,int,int,double *,double *,int *,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DSPRFS@psi@@YAHDHHPEAN0PEAH0H0H0001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspsv，该符号在函数 ""int __cdecl psi::C_DSPSV(char,int,int,double *,int *,double *,int)"" (?C_DSPSV@psi@@YAHDHHPEANPEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspsvx，该符号在函数 ""int __cdecl psi::C_DSPSVX(char,char,int,int,double *,double *,int *,double *,int,double *,int,double *)"" (?C_DSPSVX@psi@@YAHDDH",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:41573,error,error,41573,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"HPEANPEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsptri，该符号在函数 ""int __cdecl psi::C_DSPTRI(char,int,double *,int *,double *)"" (?C_DSPTRI@psi@@YAHDHPEANPEAH0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsptrs，该符号在函数 ""int __cdecl psi::C_DSPTRS(char,int,int,double *,int *,double *,int)"" (?C_DSPTRS@psi@@YAHDHHPEANPEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dstebz，该符号在函数 ""int __cdecl psi::C_DSTEBZ(char,char,int,double,double,int,int,double,double *,double *,int *,int *,double *,int *,int *,double *,int *)"" (?C_DSTEBZ@psi@@YAHDDHNNHHNPEAN0PEAH101101@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dstedc，该符号在函数 ""int __cdecl psi::C_DSTEDC(char,int,double *,double *,double *,int,double *,int,int *,int)"" (?C_DSTEDC@psi@@YAHDHPEAN00H0HPEAHH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dstegr，该符号在函数 ""int __cdecl psi::C_DSTEGR(char,char,int,double *,double *,double,double,int,int,double,int *,double *,double *,int,int *,double *,int,int *,int)"" (?C_DSTEGR@psi@@YAHDDHPEAN0NNHHNPEAH00H10H1H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dstein，该符号在函数 ""int __cdecl psi::C_DSTEIN(int,double *,double *,int,double *,int *,int *,double *,int,double *,int *,int *)"" (?C_DSTEIN@psi@@YAHHPEAN0H0PEAH10H011@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsteqr，该符号在函数 ""int __cdecl psi::C_DSTEQR(char,int,double *,double *,double *,int,double *)"" (?C_DSTEQR@psi@@YAHDHPEAN00H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsterf，该符号在函数 ""int __cdecl psi::C_DSTERF(int,double *,double *)"" (?C_DSTERF@psi@@YAHHPEAN0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dstev，该符号在函数 ""int __cdecl psi::C_DSTEV(char,int,double *,double *,double *,int,double *)"" (?C_DSTEV@psi@@YAHDHPEAN00H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dstevd，该符号在函数 ""int __cdecl psi::C_DSTEVD(char,int,double *,d",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:43906,error,error,43906,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"Ha, I was trying to come up with a minimal reproducible example and found the story somewhat more complicated. We're using a custom basis set, and it's nearest sibling (aug-cc-pvdz) doesn't reproduce the bug. Further, if I remove the mol.set_geometry call (which is just reloading in the same geometry, modulo some flutter from unit conversion and digit truncation (this was part of a bigger calc that keeps updating the geometry but only this section was required for reproduction), the bug goes away... Here is the file, attached so it's not GIANT in the field here b/c it has the custom basis spec:. [run.txt](https://github.com/psi4/psi4/files/7314753/run.txt). And here are the results I got running with and without wcombine:; [run_wcombine_out.txt](https://github.com/psi4/psi4/files/7314757/run_wcombine_out.txt); [run_nowcombine_out.txt](https://github.com/psi4/psi4/files/7314758/run_nowcombine_out.txt). I'm stumped here, especially by how hard it turned out to be to get the bug to happen. But it happens reliably if I run both of those files `--memory 27.3GB -n8 `. So... yeah. I've been running a few thousand jobs through now with `set wcombine false` and haven't seen any suspicious energies (I'm comparing to PNO-LCCSD(T*)-F12b in a comparable basis set, and this was producing several-kcals-of-difference vs the usual sub-kcal I was seeing in cases that didn't run into the bug), so it looks like it's a valid workaround for me. But yeah, I'm a little... baffled.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2279#issuecomment-939198359:1017,reliab,reliably,1017,https://psicode.org,https://github.com/psi4/psi4/issues/2279#issuecomment-939198359,1,['reliab'],['reliably']
Availability,"Have we changed what PSIDATADIR should point to?. On Mon, Mar 14, 2016 at 1:00 AM, Rollin King rking@bethel.edu wrote:. > An error has occurred. Traceback:; > ; > <class 'Boost.Python.ArgumentError'>: Python argument types in; > ; > ```; > psi4.scf(NoneType, NoneType); > ```; > ; > did not match C++ signature:; > ; > ```; > scf(boost::shared_ptr<psi::Wavefunction>, _object*, _object*): File; > ```; > ; > ""<string>"", line 47, in <module>; > ; > This is, for example, from the opt1 test case, but all jobs fail. I; > already tried removing my objdir completely and recompiling.; > ; > On Sun, Mar 13, 2016 at 8:58 PM, Lori A. Burns notifications@github.com; > wrote:; > ; > > The current head (0.4.156 / 7783818; > > https://github.com/psi4/psi4/commit/77838182dbdf260e7f39e4e554b64ee3c05a0da7; > > / 0.5.92) works fine for me on the test case above and on all the usual; > > test cases. What is the nature of your broken python?; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/issues/310#issuecomment-196104469.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310#issuecomment-196158996:125,error,error,125,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196158996,1,['error'],['error']
Availability,"Have you pulled in master in the last day or so? @dgasmith committed some fixes for the full test suite, which corrected about 5 or 6 failures. As far as I know, the full suite should pass with that change.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/718#issuecomment-303895491:134,failure,failures,134,https://psicode.org,https://github.com/psi4/psi4/pull/718#issuecomment-303895491,1,['failure'],['failures']
Availability,"Have you tested this against Python 2, too? I'm getting the following error at execution time on my Mac with Python 2.7:. ```; Traceback (most recent call last):; File ""<string>"", line 29, in <module>; File ""/Users/jturney/Code/Chemistry/psi4/source/lib/python/driver.py"", line 618, in energy; procedures['energy'][lowername](lowername, **kwargs); File ""/Users/jturney/Code/Chemistry/psi4/source/lib/python/proc.py"", line 2123, in run_adc; scf_helper(name, **kwargs); File ""/Users/jturney/Code/Chemistry/psi4/source/lib/python/proc.py"", line 1457, in scf_helper; e_scf = psi4.scf(precallback, postcallback); TypeError: No registered converter was able to produce a C++ rvalue of type std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > from this Python object of type unicode; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/160#issuecomment-130013400:70,error,error,70,https://psicode.org,https://github.com/psi4/psi4/pull/160#issuecomment-130013400,1,['error'],['error']
Availability,"Haven't checked, but that's a redundant input, isn't it? `basis cc-pvdz` + `relativistic x2c` triggers the primary basis to decontract. That said, the answer in the docs for the x2c example is known wrong. Were you going to address that, @WDerricotte?. Let me know if I'm mistaken about any of this, as I don't run relativistic regularly. And if there's something that _should_ work, please make a test case of it so it will continue to work.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/662#issuecomment-288812442:30,redundant,redundant,30,https://psicode.org,https://github.com/psi4/psi4/issues/662#issuecomment-288812442,1,['redundant'],['redundant']
Availability,"Hello @loriab, I have taken what you and @ajmisquitta has said and applied it to an argon dimer which worked out fine. However when attempting to apply this to a water dimer I get the following error. <code>[s.rayner@spasrv12 water_aug-cc-pvqz_psi4_deltaHF_ccsd_t]$ psi4 -n 4; Calculating for basis aug-cc-pvQZ; Calculating for coordinate set: 0; rDistance 4.72431496198; </code>. <code>; QcdbException BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 4 for role RIFIT among:; Shell Entries: ['RN']; Basis Sets: ['def2-qzvpp-ri']; File Path: , /home/s.rayner/psi4conda/share/psi4/basis; Input Blocks:; </code>; <p>; <code>; Traceback (most recent call last):; File ""/home/s.rayner/psi4conda/share/psi4/python/qcdb/libmintsbasisset.py"", line 599, in pyconstruct; bs, msg = BasisSet.construct(parser, mol, fitrole, None if fitrole == 'BASIS' else fitrole, basstrings[fitrole]); File ""/home/s.rayner/psi4conda/share/psi4/python/qcdb/libmintsbasisset.py"", line 748, in construct; (at + 1, role, text2)); qcdb.exceptions.BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 4 for role RIFIT among:; Shell Entries: ['RN']; Basis Sets: ['def2-qzvpp-ri']; File Path: , /home/s.rayner/psi4conda/share/psi4/basis; Input Blocks:</code></p>. The input.dat as the following http://pastebin.com/6kRJzc9e. Any help on this issue would be deeply appreciated.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/626#issuecomment-281360860:194,error,error,194,https://psicode.org,https://github.com/psi4/psi4/issues/626#issuecomment-281360860,1,['error'],['error']
Availability,"Hello @raimis @loriab , I built psi4-v1.3.2 with visual studio 2019，I have changed the compilation option -openmp to -openmp:experimental(Although it does not fully support the syntax of openmp4.0), and fixed some include errors in the src。I compiled all the dependency libraries successfully，but at the end of the link an error occurred. I found that `FC_SYMBOL ""The type of Fortran name mangling"" 2`，I changed the value to 1 and get the same error. It looks like a problem with the calling interface of fortran, but i have no idea to solve it. Can you give me some ideas to solve this problem, thanks. ```; Error log:; [1262/1263] Linking CXX static library src\psi4\scfgrad\scfgrad.lib; [1263/1263] Linking CXX shared library src\core.cp37-win_amd64.pyd; FAILED: src/core.cp37-win_amd64.pyd src/core.lib ; cmd.exe /C ""cd . && ""C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin\cmake.exe"" -E vs_link_dll --intdir=src\CMakeFiles\core.dir --rc=""D:\Windows Kits\10\bin\10.0.17763.0\x64\rc.exe"" --mt=""D:\Windows Kits\10\bin\10.0.17763.0\x64\mt.exe"" --manifests -- C:\PROGRA~2\MICROS~3\2019\COMMUN~1\VC\Tools\MSVC\1421~1.277\bin\Hostx64\x64\link.exe /nologo src\CMakeFiles\core.dir\export_benchmarks.cc.obj src\CMakeFiles\core.dir\export_blas_lapack.cc.obj src\CMakeFiles\core.dir\export_cubeprop.cc.obj src\CMakeFiles\core.dir\export_diis.cc.obj src\CMakeFiles\core.dir\export_fock.cc.obj src\CMakeFiles\core.dir\export_functional.cc.obj src\CMakeFiles\core.dir\export_mints.cc.obj src\CMakeFiles\core.dir\export_misc.cc.obj src\CMakeFiles\core.dir\export_oeprop.cc.obj src\CMakeFiles\core.dir\export_pcm.cc.obj src\CMakeFiles\core.dir\export_plugins.cc.obj src\CMakeFiles\core.dir\export_psio.cc.obj src\CMakeFiles\core.dir\export_trans.cc.obj src\CMakeFiles\core.dir\export_wavefunction.cc.obj src\CMakeFiles\core.dir\export_options.cc.obj src\CMakeFiles\core.dir\create_new_plugin.cc.obj src\CMakeFiles\core.dir\read_options.cc.obj s",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:222,error,errors,222,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,4,"['Error', 'error']","['Error', 'error', 'errors']"
Availability,"Hello David. Single determinant PSI4 output works pretty well and have been tested.; There is nothing special in the code for PSI4 converter https://github.com/Konjkov/molden2qmc/blob/master/molden2qmc.py#L962. CASINO multi-determinant extension composes from some single determinant (i.e. PSI4 CASSCF(3,4) MOLDEN output) and electron promotion data.; 1-st determinant:; ground state; 2-nd determinant:; up electron promote from 2 orbital to 4; down electron promote from 2 orbital to 4; 3-rd determinant:; up electron promote from 2 orbital to 5; down electron promote from 2 orbital to 5; The first determinant is taken into account with the weighting factor = 0.972153; 2-nd with = 0.165709; 3-rd with = 0.165709; as described in PSI4 output:. MCSCF Root 0 energy = -24.563671749133171. Active Space Natural occupation numbers:; ; A 1.890162 A 1.000000 A 0.054919; A 0.054919; ; The 20 most important determinants:; ; * 1 0.972153 ( 0, 0) 2AX 3AA.; * 2 0.165709 ( 4, 3) 3AA 5AX.; * 3 0.165709 ( 2, 2) 3AA 4AX. symmetry is turned out.; For this multi-determinant configuration CASINO outputs (roughly). E = -24.431(1) ; var = 5.3(1) ; Total CASINO CPU time ::: 181.2400 seconds. if I take 2-nd and 3-rd determinants with weighting factor = -0.165709; CASINO outputs (roughly). E = -24.565(1) ; var = 5.0(1) ; Total CASINO CPU time ::: 256.1500 seconds. which very well coincides with the PSI4 output energy. Best, Vladimir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/796#issuecomment-331682241:445,down,down,445,https://psicode.org,https://github.com/psi4/psi4/issues/796#issuecomment-331682241,2,['down'],['down']
Availability,"Hello Saeed. All questions about **multideterminant.py** should be asked [there](https://github.com/Konjkov/molden2qmc/issues) for this you need to apply psi4 version, input, output... this script works correctly for versions ORCA4.X and ORCA5.X. > 1 -0.445106 ( 735, 514) 6A1X* 7A1A* 8A1A* 9A1A* 1A2A* 2B1X* 3B1B* 2B2X* 3B2**X*. I don't know such notations for e-promotion rules, maybe that's why my script doesn't work correctly for PSI4. Maybe there is a link to documentation explaining this.; A - up electron; B - down electron; X - doubly occupied; also A, B can also mean irreducible representations. What do the asterisk mean? . Best wishes, Vladimir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/796#issuecomment-2425979772:519,down,down,519,https://psicode.org,https://github.com/psi4/psi4/issues/796#issuecomment-2425979772,1,['down'],['down']
Availability,"Hello everyone,; So this is for a DFT-SAPT computation I'm assuming? I'm less familiar with this code, but in Hartree-Fock based SAPT this error indicates that the orbital hessian has a negative eigenvalue, i.e. the SCF did not converge on a minimum. This would usually be solved by doing a stability analysis on the SCF before passing the correct solution to SAPT. The [advanced example](http://www.psicode.org/psi4manual/master/sapt.html#advanced-example) in the manual shows how to do that, and has the stability analysis included for monomer A in the Hartree-Fock case. Not sure any of that works for DFT. I believe the array s in the incriminated lines contains the product of the orbital hessian with the amplitudes. I haven't touched the code in some time so I may be wrong but that is my current hypothesis.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1682#issuecomment-515481737:139,error,error,139,https://psicode.org,https://github.com/psi4/psi4/issues/1682#issuecomment-515481737,1,['error'],['error']
Availability,"Hello! Thanks for the reply. I initially tried with with df SCF, but that gave the same error... changed it to direct to see if that would make a difference... but alas no.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/35#issuecomment-35249012:88,error,error,88,https://psicode.org,https://github.com/psi4/psi4/issues/35#issuecomment-35249012,1,['error'],['error']
Availability,"Hello, I'm the developer who implemented ADIIS in Psi4. Thanks for your patience. Between some life changes and issues compiling Psi4, I haven't been able to look at this issue previously. 1. Following Susi's suggestion, B3LYP converges straightforwardly. The SCF iterations takes one bad step early on, but this happens whether ADIIS is on or off.; 2. If I disable ADIIS completely using your original functional, it _still_ fails. Once the energy gets to around 284 Eh, it doesn't become negative again. **Contrary to the topic title, ADIIS is not at fault**.; 3. The title suggests that you've had previous ADIIS issues previously. If so, please send me specific examples. My experience has been that ADIIS itself is fine, but can break when other parts of the code are badly behaved. I'll do some digging to see if I can suggest an alternate protocol that will actually converge.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3051#issuecomment-1748931430:553,fault,fault,553,https://psicode.org,https://github.com/psi4/psi4/issues/3051#issuecomment-1748931430,1,['fault'],['fault']
Availability,"Hello,; Has this been resolved? I have just hit that error:; iwl_buf_init: Can't open file 33; with a straight ccsd calculation. I've been looking into coupled cluster variants for one of our users who has a monster job which is giving our programs all sorts of grief. I decided to simplify and go with something easily doable - molpro caffeine test with cc-pvtz basis (input as below) but the default psi4 calculation seems to be grinding slowly due to IO (clocking 2% cpu utilisation of 16 processors) and ""scf_type direct"" gives the aforementioned error.; I'm using a fresh build I pulled(?) yesterday.; Best wishes,; Rika. molecule caffeine {; units bohr; 0 1; C 1.50 -0.505274704 0.000000; C -0.535187033 -2.058190923 0.000000; C 2.65 -4.522014770 0.000000; C 1.346731167 2.284891446 0.000000; C -3.463010598 1.525507419 0.000000; C -1.745695607 5.842896101 0.000000; C -5.228750999 -2.835032850 0.000000; C 6.295922772 -1.343301717 0.000000; N 3.617453017 -2.104182389 0.000000; N 0.151176399 -4.614309103 0.000000; N -3.029497084 -1.135014970 0.000000; N -1.247933362 3.102880179 0.000000; O 3.102683166 3.787581194 0.000000; O -5.585618888 2.429058396 0.000000; H 3.895327083 -6.157733721 0.000000; H -2.816386000 6.395195000 -1.672580; H -2.816386000 6.395195000 1.672580; H 0.068926104 6.808767386 0.000000; H -6.392104000 -2.520913000 -1.673960; H -6.392104000 -2.520913000 1.673960; H -4.537919087 -4.771667968 0.000000; H 7.459103496 -3.040539942 0.000000; H 6.719940000 -0.221440000 1.677441; H 6.719940000 -0.221440000 -1.677441; }. set basis cc-pvtz",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/35#issuecomment-41624543:53,error,error,53,https://psicode.org,https://github.com/psi4/psi4/issues/35#issuecomment-41624543,4,['error'],['error']
Availability,Here an input file : it simply crashes with no specific error. molecule c2h3 {; C .049798 -.576272 .000000; C .049798 .710988 .000000; H -.876750 -1.151844 .000000; H .969183 -1.154639 .000000; H -.690013 1.498185 .000000; units ang; symmetry c1; }; set basis cc-pvdz ; set scf_type df; set cc_type df. set guess GWH; set reference rohf; set MAXITER 1000. set e_convergence 1e-6; set d_convergence 1e-6; set ints_tolerance 1e-8. set FROZEN_DOCC [1]; set frozen_uocc [10]; set roots_per_irrep [4]; energy('eom-cc3'),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/462#issuecomment-240187176:56,error,error,56,https://psicode.org,https://github.com/psi4/psi4/issues/462#issuecomment-240187176,2,['error'],['error']
Availability,Here is another example of this error. ```memory 2 GB; molecule {; 8 0.0000079789 0.0000000002 3.3734612294; 1 -0.7693027984 -0.0000000004 3.9669401984; 1 0.7691761670 -0.0000000031 3.9671249871; }. energy('pbe0/aug-cc-pVDZ'); ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/948#issuecomment-1315662300:32,error,error,32,https://psicode.org,https://github.com/psi4/psi4/issues/948#issuecomment-1315662300,1,['error'],['error']
Availability,"Here's a few more refs and the original discussion http://forum.psicode.org/t/naming-considerations-for-cepa-0/156 . And more ways it can confuse ppl http://forum.psicode.org/t/cepa-0-singles/1525/11 . My main consideration is that `energy(""cepa(0)"")` is running the same method in all modules. That's what's currently forced by cepa(0) directing all traffic to fnocc (since that's the only module that can do lccsd). `lccd` properly manages direction to fnocc/occ. If the opinion of `cepa0 --> lccsd` has shifted over the years to `cepa0 --> lccd`, that's ok with me, and with a lot of warnings, we can shift the definition. Or, if you'd like `cepa0` to always raise an error and demand sd/d distinction, that's ok, too. Or maybe dct could adjust to the current scheme. Basically, I think the current way is sane. But then I don't use cepa. And the current setup has shown itself to be confusing to new (thread above) and experienced (AED, Jonathon) practitioners. So strong feelings from multiple other parties could overcome my symlink.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1872#issuecomment-616805230:671,error,error,671,https://psicode.org,https://github.com/psi4/psi4/issues/1872#issuecomment-616805230,1,['error'],['error']
Availability,"Here's another case where the energy stagnates but there's still large DIIS error. I don't really understand how this is possible.; ```; memory 8 gb. molecule {; Cr 0.47834117238031 0.45636471654971 0.09285402419506; O 1.55111099616190 1.09138241759496 -0.82993325785254; O -0.61796524632964 1.38903190796852 0.67056903439165; Cl -0.44331553251777 -1.03073713008178 -0.94412856229465; Cl 1.43568861030522 -0.43101191203143 1.65244876156047; }. set basis 6-31G**; set df_basis_scf def2-svp-jfit; set geom_maxiter 250. # Use a (75,302) quadrature grid; set dft_radial_points 75; set dft_spherical_points 302. my_dft = {; ""name"": ""my lda"",; ""x_functionals"": {""lda_x"": {}},; ""c_functionals"": {""lda_c_pw"": {}}; }; energy('scf', dft_functional=my_dft); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/888#issuecomment-869728286:76,error,error,76,https://psicode.org,https://github.com/psi4/psi4/issues/888#issuecomment-869728286,1,['error'],['error']
Availability,"Here's some of the errors in frequencies pre-fix; max is for HOOH TS. I've cherry-picked the commit into pyvib2, and the tests, if handy, are [here](https://github.com/loriab/psi4/blob/a4219be5e605a8f3f92fde127fdac4c187eaa70e/tests/python/vibanalysis/input.py). * CO2; ```; 	exp: [ 761.1526 761.1526 1513.3122 2580.1495]; 	obs: [ 765.97192061+0.j 954.84604992+0.j 1511.98600598+0.j; 2577.29764966+0.j]; 	dif: [ 4.81932061+0.j 193.69344992+0.j -1.32619402+0.j -2.85185034+0.j]; ```; * Ethene; ```; 	exp: [ 885.4386 1073.4306 1080.4104 1135.9390 1328.7166 1467.8428; 1565.5328 1831.6445 3287.3173 3312.1889 3371.7974 3399.4232]; 	obs: [ 885.43769105+0.j 1073.42980093+0.j 1080.48361108+0.j; 1135.93848940+0.j 1341.57874983+0.j 1467.71701985+0.j; 1565.53257843+0.j 1831.21804884+0.j 3287.31942795+0.j; 3312.16817472+0.j 3373.24482206+0.j 3399.42544494+0.j]; 	dif: [ -9.08947590e-04+0.j -7.99067003e-04+0.j 7.32110847e-02+0.j; -5.10595379e-04+0.j 1.28621498e+01+0.j -1.25780152e-01+0.j; -2.21567931e-04+0.j -4.26451164e-01+0.j 2.12794906e-03+0.j; -2.07252822e-02+0.j 1.44742206e+00+0.j 2.24494358e-03+0.j]; ```; * CH3 & NH3 ok; * Formaldehyde; ```; 	exp: [ 1325.3286 1359.7579 1637.4774 2013.4255 3108.9786 3183.3975]; 	obs: [ 1325.82947096+0.j 1376.06130208+0.j 1637.37151242+0.j; 2010.83034420+0.j 3108.93196717+0.j 3185.06227338+0.j]; 	dif: [ 0.50087096+0.j 16.30340208+0.j -0.10588758+0.j -2.59515580+0.j; -0.04663283+0.j 1.66477338+0.j]; ```; * HOOH TS; ```; 	exp: [ 0.0000+278.6136j 1128.8155 +0.j 1364.3495 +0.j; 1698.2924 +0.j 4140.0257 +0.j 4146.4749 +0.j ]; 	obs: [ 0.00000000+273.62786912j 1122.20829758 +0.j 1385.41184315 +0.j; 1715.97750485 +0.j 4143.48648522 +0.j 4306.47193962 +0.j ]; 	dif: [ 0.00000000-4.98573088j -6.60720242+0.j 21.06234315+0.j; 17.68510485+0.j 3.46078522+0.j 159.99703962+0.j ]; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/903#issuecomment-361040047:19,error,errors,19,https://psicode.org,https://github.com/psi4/psi4/pull/903#issuecomment-361040047,1,['error'],['errors']
Availability,"Here, I kind of feel like for the returned `jobrec` the dispersion energy is the correct thing for the current energy. I would hazard that this is an issue in reintegration of this energy down the line.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1470#issuecomment-455797642:188,down,down,188,https://psicode.org,https://github.com/psi4/psi4/pull/1470#issuecomment-455797642,1,['down'],['down']
Availability,"Hey everyone,. I got the code through Valgrind for the stability test case and I did find an invalid read, but in the orbital rotation parameters that occurs after all the roots are computed. I'm correcting it now and investigating all divisions occurring in the code for small numbers. @jturney Could you just run the stability1 test case if it does not take too much time ? From what I understood the observed error was not even fully reproducible on Travis, which is going to make difficult to correct it. If you can see it on your machine you could also test the new version once I commit it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237#issuecomment-182873969:412,error,error,412,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182873969,1,['error'],['error']
Availability,"Hi @hokru, I uploaded `psi4/label/dev::dftd4-3.5.0` packages (py intf present, so these are equiv to `conda-forge::dftd4-python` and tried out this branch with a mix of packages so that I could add some more helpful error messages. So there's one commit here and two over at qcengine. Also I hopefully got around all the CI checks here, but we'll see. Locally, this passes with `c-f::gcp-correction` and `psi4::dftd4`. ```; # Any line starting with the # character is a comment line; #! Sample HF/cc-pVDZ H2O computation. memory 600 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; ene = energy('r2scan-d4'); compare_values(-76.38149185, ene, 6, 'asdf'). energy('r2scan-3c/') # slash unsets basis from above; compare_values(-76.41834614, variable('SCF TOTAL ENERGY'), 6, 'SCF energy') #TEST; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2842#issuecomment-1444523360:216,error,error,216,https://psicode.org,https://github.com/psi4/psi4/pull/2842#issuecomment-1444523360,1,['error'],['error']
Availability,"Hi @kzinovjev great job adding this. . @loriab It would be great to have these available via the qcengine interface so we could store them in QCArchive when MBIS charges are requested on a calculation, can you adviseif any other changes would be needed to be made to make this possible?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3102#issuecomment-1860206635:79,avail,available,79,https://psicode.org,https://github.com/psi4/psi4/pull/3102#issuecomment-1860206635,1,['avail'],['available']
Availability,"Hi @loriab @dgasmith,. Sorry I didn't update. I was able to compile the C code that I wanted using the newest gcc packages from conda (gcc_linux-64). From my side is all fine except that when we depend on psi4, we bring all its dependencies with us, and I was wondering if this gcc version differences may cause problems down the line. If you guys make psi4 work with the default gcc from conda, that would be ideal, but I am no one to ask for that from you guys :) you already do a very good job. I think that's all. Feel free to close this if you feel it makes no sense to continue open. Cheers,; João",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/812#issuecomment-347174011:321,down,down,321,https://psicode.org,https://github.com/psi4/psi4/issues/812#issuecomment-347174011,1,['down'],['down']
Availability,"Hi @loriab,. I promise I will find a consolidation way to reduce the source code as much as possible when I find a free time to work on it. Presently, I am more focused on the implementation and adding some new features to DFOCC. Even If we suppose that there are some redundant codes in DFOCC, it is a not big problem. It may just take a few more minutes of building time and a slightly additional storage. Further, I think the relatively large body of DFOCC w.r.t. some other modules is understandable since DFOCC includes many post-HF methods (standard and OO) including energies and gradients, and most of them are implemented for RHF and UHF refs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/382#issuecomment-221381893:269,redundant,redundant,269,https://psicode.org,https://github.com/psi4/psi4/pull/382#issuecomment-221381893,1,['redundant'],['redundant']
Availability,"Hi @loriab,. Thanks for looking carefully into this. I don't really understand the terms psithon and psiapi you use, but our use of psi4 is always through the command-line tool, and this is the functionality where we were trying to fix the pcm capabilities, because we were rather using an ugly fix of saving the working directory and changing back to it in the end. @raimis and I are available to provide any help you may need. Happy holidays to the PSI4 team!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/818#issuecomment-354305258:385,avail,available,385,https://psicode.org,https://github.com/psi4/psi4/pull/818#issuecomment-354305258,1,['avail'],['available']
Availability,"Hi @msaitow, I don't believe we ever corresponded directly back when you were adding ADC to Psi4, but I did want to thank you on behalf of all the Psi4 developers for the longstanding functionality. I think your contribution of the ADC module was one of the first prompts to this community that we could develop software in a delocalized fashion and that the early Psi4 codebase could be understood and be a good development platform. There have been a few issues detected with ADC and a capable replacement in ADCC, so I wanted to let you know that we're removing the ADC module with #2737. The code will still be available in https://github.com/psi4/psi4attic and in any version of Psi4 through v1.6.1 . Thanks again!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1033#issuecomment-1273741984:615,avail,available,615,https://psicode.org,https://github.com/psi4/psi4/issues/1033#issuecomment-1273741984,1,['avail'],['available']
Availability,"Hi @susilehtola, I was looking around the Fedora packaging site to see if there was a download counter. Didn't find one but did notice a few details from your build scripts that could be updated:. * http://pkgs.fedoraproject.org/cgit/rpms/psi4.git/tree/psi4.spec#n45 actually need Py >= 2.7, as I'm not holding back from dictionary comprehensions; * http://pkgs.fedoraproject.org/cgit/rpms/psi4.git/tree/psi4.spec#n19 more simply, `psi4/psi4`, though github re-directs; * http://pkgs.fedoraproject.org/cgit/rpms/psi4.git/tree/psi4.spec#n107 It's on by default anyway, so no change, but wrong variable https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L99; * http://pkgs.fedoraproject.org/cgit/rpms/psi4.git/tree/psi4.spec#n109 not sure if this is still working. May need to be `-DLAPACK_LIBRARIES=...`. Is there actually a monitor that you know of for Fedora package downloads? We like to track them for grant reviews.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/631#issuecomment-284125806:86,down,download,86,https://psicode.org,https://github.com/psi4/psi4/issues/631#issuecomment-284125806,4,['down'],"['download', 'downloads']"
Availability,"Hi @susilehtola, I'm sorry it doesn't look like we'll get to this in 1.1. We're busy preparing for a conference later this week, but I'll alert @CDSherrill in person that this could do with a look after the furor dies down. Do you have any known barrier-to-1.1 issues? The plan is to tag later today.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/700#issuecomment-301847966:218,down,down,218,https://psicode.org,https://github.com/psi4/psi4/pull/700#issuecomment-301847966,1,['down'],['down']
Availability,"Hi David,. My CASPT2 plugin works on psi4-0.5, so I can do it on Monday in an hour, if; jet or lori are available on skype for questions. The actual core code; won't be that hard, it's mainly the changes in the periphery. Best wishes,; Sebastian; On 20 May 2016 16:02, ""David Sherrill"" notifications@github.com wrote:. > From a strategic point of view, the answer is yes, it would be a great; > addition.; > ; > However, it would depend on the technical details ... how much work it; > would be to get this working, how soon we could do it, etc. I'll try to; > discuss with Lori and Daniel S.; > ; > We've already done a ""soft"" 1.0 release (not heavily advertized yet).; > ; > On Fri, May 20, 2016 at 6:46 AM, Sebastian Wouters <; > notifications@github.com; > ; > > wrote:; > > ; > > Are you interested in having DMRG-CASPT2 in the 1.0 release or do you; > > want; > > to stick to DMRG-SCF?; > > ; > > If you would like to, I can release an intermediate version v1.7, and you; > > can use the plugin (or copy parts of); > > ; > > https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrg.cc; > > to run the CASPT2 calculations...; > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/issues/384; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/384#issuecomment-220613816",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/384#issuecomment-220670249:104,avail,available,104,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-220670249,1,['avail'],['available']
Availability,"Hi Justin,. My /tmp was erased, so it took me a while before being able to reproduce the error.; What was happening is the following:; - I started off with a really bad geometry and a certain order of C an H atoms.; - After a while, I killed psi4 to generate a new input file with D2h symmetry. Therefore I reordered the C and H atoms to corresponding D2h pairs.; - So in the folder (the problem would happen in any folder), filename.moleculename.intco was still there from the previous atom ordering.; - Psi4 tried to combine the new molecule with the old filename.moleculename.intco, and it got nowhere. It restrained the update steps to negligibly small displacements. ==> So how about changing filename.moleculename.intco > filename.moleculename.pid.intco ?. Best,; Sebastian",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/66#issuecomment-73297994:89,error,error,89,https://psicode.org,https://github.com/psi4/psi4/issues/66#issuecomment-73297994,1,['error'],['error']
Availability,"Hi Lori,. In one of the functions, ccsd_WabefT2_cd(), I use CD factors for (ab|cd) integrals while for all the other 4-index integrals DF factors are used. In the second function, ccsd_WabefT2(), I use only DF factors for all 4-index integrals. Further, the explicit form of W_abef tensors are different for each functions. Hence, although both functions looks repeating each other, they are not in fact. At the theoretical point of view, there are significant differences between them. Hence, I prefer to keep them separate. However, it is possible to merge them. But in that case I will need if-else blocks at several places. Of course, I create common functions if I need something repeatedly. However, if I see theoretically significant difference between two functions, then I prefer separate functions. For example, instead of merged CCD and CCSD codes, I prefer to keep them separate, which looks me better organised. Alternatively, it is possible to merge all MP2, MP3, MP2.5, LCCD, and CCD into CCSD code with many if-else blocks or switch-case blocks. For each different method creating different functions appears to me more systematic and better organised. . I agree with you about avoiding repetitive codes for the sake of maintenance and build time. Presently, I am busy with CCSD(T) gradients. When I get some free time I will try to reduce repetitive codes if there are any, except for the similarities between high-order and lower-order methods, such as CCSD and MP3. @loriab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/382#issuecomment-220426701:1236,mainten,maintenance,1236,https://psicode.org,https://github.com/psi4/psi4/pull/382#issuecomment-220426701,1,['mainten'],['maintenance']
Availability,"Hi Lori,. Let us start with your first question for the HF molecule. I run your job, and it terminates ""normally"". Since it is a gradient job I do not simply grab integrals from SCF, but I compute both JKFIT and RI basis DF integrals. Hence, it does not matter to start with the conventional integrals the df-mp2 code proceeds. However, the gradient is not correct because the MO coefficients are from conventional SCF, but it should be from DF-SCF. I think in the case df-mp2 gradients, if user set the conventional SCF, then we should throw an error. Alternatively we may change the reference to DF-SCF and throw a warning for user to explain what we did. Both solutions are okay for me. DFOCC uses frozen cores properly in energy and gradients. I did not add the froze virtuals yet. But I will add them soon for FNO-DF-CCSD gradients. However, OCC does not use frozen cores in the energy and gradients. In case of OCC the problem is that you need to define different MO class with libtrans, which is not obvious how to do it. I know it is possible now. Andy explained it for me. As a result, there is no plan for OCC module. However, frozen virtuals will be added to DFOCC. In fact, I am waiting for RC1 release, then I will implement add it to Psi4. For the final question, your reference gradient is wrong (mp2tot_vals). This is a very good example how 3-point numeric gradients are unreliable for challenging systems. I reproduce problem with your input. However, if I use ""points 5"", all numeric gradient computations give the same result with the analytic gradients. I also run the same job with gausssian 09 with analytic gradients, which gives the same result with our analytic gradient. Here is the G09 result:. ---. Center Atomic Forces (Hartrees/Bohr); Number Number X Y Z. ---. ```; 1 1 0.000000000 0.000000000 -0.002819339; 2 9 0.000000000 0.000000000 0.002819339; ```. ---. and our analytic gradients:. -Total gradient:; Atom X Y Z; ------ ----------------- ----------------- ---------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/245#issuecomment-192875912:546,error,error,546,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-192875912,2,['error'],['error']
Availability,"Hi Lori,. Thank you very much for your help. I have updated my tensor class. Further, I have added delte-MP2 corrections to the energy of the method, hence it is saved to PsiVar now. I think, you may add it public repo now. However, when try to make a push I got the following error:. remote: Permission to loriab/psi4.git denied to bozkaya.; fatal: unable to access 'https://github.com/loriab/psi4.git/': The requested URL returned error: 403. As I understand you should allow me to push my changes. Let me know if we need anything else. @loriab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1390#issuecomment-446552988:277,error,error,277,https://psicode.org,https://github.com/psi4/psi4/pull/1390#issuecomment-446552988,2,['error'],['error']
Availability,"Hi Rollin,. Yes, some tips in the manual about difficult optimizations would be helpful!. David. On Tue, Aug 4, 2015 at 9:02 PM, Rollin King notifications@github.com; wrote:. > optking was aborting prematurely. I just pushed the fix to the problem.; > For this case I found consecutive_backsteps = 2 [or more], as well as; > dynamic_level = 1 to now be helpful. (Don't use both at once as that is; > somewhat redundant.) Sometime I will type up some tips on problematic; > optimizations. But now optking will at least move you substantially closer; > to the minimum. Though one may always have to restart an optimization,; > these options will minimize the manual effort necessary.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/153#issuecomment-127808983.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/153#issuecomment-128100571:409,redundant,redundant,409,https://psicode.org,https://github.com/psi4/psi4/issues/153#issuecomment-128100571,1,['redundant'],['redundant']
Availability,"Hi Sebastian,. I'm unable to reproduce the error. Could you send me the output file?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/66#issuecomment-73293029:43,error,error,43,https://psicode.org,https://github.com/psi4/psi4/issues/66#issuecomment-73293029,1,['error'],['error']
Availability,"Hi Sebastian,. Something is wrong with my DMRG-CASPT2 and DMRG-natural-orbital calculattion. This the error. Error: option WFN_IRREP is not contained in the list of available options. Did you mean? . An error has occurred python-side. Traceback (most recent call last):. File ""<string>"", line 33, in <module>. RuntimeError: ; Fatal Error: WFN_IRREP is not a valid option.; Error occurred in file: /scratch/cdsgroup/conda-builds/work/src/lib/liboptions/liboptions.h on line: 59; The most recent 5 function calls were:. psi::PsiException::PsiException(std::string, char const_, int); psi::Options::use(std::string&); py_psi_set_local_option_int(std::string const&, std::string const&, int); boost::python::objects::caller_py_function_impl<boost::python::detail::caller<bool (_)(std::string const&, std::string const&, int), boost::python::default_call_policies, boost::mpl::vector4<bool, std::string const&, std::string const&, int> > >::operator()(_object_, _object_); boost::python::objects::function::call(_object_, _object_) . For DMRG-SCF and DMRG-CI, all are fine. Best regards,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/384#issuecomment-222663666:102,error,error,102,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-222663666,6,"['Error', 'avail', 'error']","['Error', 'available', 'error']"
Availability,"Hi Vladimir,. For RHF case I build the entire OPDM, however SCF code builds only alpha-part of it. MoldenWriter is a function of libmints and it assumes that only alpha-part available, then it scale the OPDM by 2. However, for DFOCC module it is unnecessary and therefore you obtain the twice of occupation numbers. . I will fix it and push my changes in a minute. Best regards,; Ugur.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/185#issuecomment-152726098:174,avail,available,174,https://psicode.org,https://github.com/psi4/psi4/issues/185#issuecomment-152726098,1,['avail'],['available']
Availability,"Hi all! I did a little more exploration into this. It seems that, as I suspected, there are other grid configurations that can crash COSX. From the testing I did, here are some different combinations of pruning scheme and spherical points that crash the COSX code:. ROBUST: 74, 146, 230, 266; TREUTLER: 74, 230, 266; NONE: 74, 230, 266 . Given that I set these spherical points for the initial COSX grid and that the resulting exception was a DSYEV failure, as in the initial posting of this issue, my guess is that these grid configurations lead to negative weights, as well. It seems that, overall, the observed crashing is more dependent on the number of spherical points in the grid than the pruning scheme itself, although the latter has some impact.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2890#issuecomment-1468093214:266,ROBUST,ROBUST,266,https://psicode.org,https://github.com/psi4/psi4/issues/2890#issuecomment-1468093214,2,"['ROBUST', 'failure']","['ROBUST', 'failure']"
Availability,"Hi all, I added integral hashing to the direct JK class for separate J and K matrix builds, to avoid doing redundant, expensive ERI computations when building linK and then building J. I also reran all the C tests (all passing).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-981225085:107,redundant,redundant,107,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-981225085,1,['redundant'],['redundant']
Availability,"Hi all,. I am out of Country for the International Junior Science Olympiad (IJSO), hence I could not catch up with you. I know the problem for large molecules, it is because of int. I think if I change all ints to long long int, the problem will be solved. When I find an available time I can take a look. Meanwhile, you can use your patch and update dfocc as long as your patch passes all dfocc tests. Alternatively, a volunter may change all int data types to LLI for dfocc. @devinamatthews @dgasmith . Best regards,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1764#issuecomment-562608405:272,avail,available,272,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-562608405,1,['avail'],['available']
Availability,"Hi everyone,. You can use my CASPT2 test test13 (; https://github.com/SebWouters/CheMPS2/blob/master/tests/test13.cpp.in ),; but with DMRG instead of FCI as solver. Just make sure to use a very small; Davidson residual tolerance for the last sweep (1e-9 or 1e-10). Best wishes,; Sebastian",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/388#issuecomment-223890082:219,toler,tolerance,219,https://psicode.org,https://github.com/psi4/psi4/pull/388#issuecomment-223890082,1,['toler'],['tolerance']
Availability,"Hi, @raimis. We did use Boost until a couple of years ago. Its primary role was to link the C++ layer to Python, but it became extremely annoying to support and we ripped it out, using the header-only Pybind11 instead. A *lot* of users ran into build problems with mismatches in the boost versions found at configure time and that linked at compile time. These kinds of problems are easy to encounter if multiple boost implementations are available on a system, and the errors that result are very cryptic. For this reason, we went to a lot of trouble to remove all traces of Boost and it would be best not to reintroduce if possible. Looking at the list of problematic features quickly, they seem like they could be handled in C++11 (chrono library) or in the python layer. Would it be easy in your estimation to just compile away the time reporting for MSVC builds, and we can make a different PR later on to reintroduce them by using C++11 instead? Same for the stack trace. I'm not sure how/where the filesystem is used, so that could be a trickier one to handle - I'll look at it when I get a chance. We were trying to migrate OS interactions like filesystem stuff from C++ to Python where possible, so this could be good motivation for us to start seriously looking at doing so. Thanks again for your hard work with the MSVC conversion - it looks like you've had a lot of work to do. I'm not trying to make life harder for you, but I think it's fair to say that our experience with Boost was quite negative in the later years, so it is worth debating alternatives.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-403834794:439,avail,available,439,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-403834794,2,"['avail', 'error']","['available', 'errors']"
Availability,"Hi, I'm new with Psi4 so my problem could be a little naive, I'm dealing with a similar issue than @autolife , when I try to run the energy calculation of a silver containing molecule, I get stuck with basis set error (STO-3G). In the following lines I have pasted a simplified input.in and the error message. . Thanks in advance ; Matias . ---. molecule {; 1 1; Ag 0.37900000 -2.54600000 8.09100000; }. set basis sto-3g; energy('df-mp2'); set molden_write true. ## property('df-mp2', properties=['MULLIKEN_CHARGES']). qcdb.exceptions.BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for role JKFIT among:; Shell Entries: ['AG']; Basis Sets: ['cc-pvdz-ri', 'def2-qzvpp-jkfit']; File Path: , /home/matias/anaconda/share/psi/basis; Input Blocks:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/105#issuecomment-144729559:212,error,error,212,https://psicode.org,https://github.com/psi4/psi4/issues/105#issuecomment-144729559,4,['error'],['error']
Availability,"Hi, I'm one of the core developers for Psi. One of my personal objectives for this year is to _replace_ our current I/O system, which has not been significantly redesigned since its original creation in the '90s. While it fulfilled its original design goals of simplifying the API compared to its predecessor, its _steep learning curve_ and _difficult to understand error messages_ are obstacles to continued Psi development, given that our graduate student-led development inherently has high turnover. I can tell you now that your project is of immediate interest. I'll look over the project in detail and have more detailed thoughts for you by this time next week.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2847#issuecomment-1378878929:366,error,error,366,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1378878929,2,['error'],['error']
Availability,"Hi, Rob. All ECP-related issues are marked with the `ecpint-needed` tag. There are currently five open ones. I'm going to go through them and attempt to reproduce them with the v1.6 release, so we can assess if ECPs are broken. You raise a good point: debugging ECP issues is going to be harder if we also change basis functions. @loriab, can we put a moratorium on #2537 until we've had more time to investigate the ECP issues and evaluate the performance of DDD ""in the wild""? While I would not expect DDD to introduce strange correctness errors like I would expect of integral convention swaps, I am too paranoid to neglect the possibility. Say hi to Nick Stair for me. I'll report back once I've finished my preliminary investigations.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2564#issuecomment-1133518145:541,error,errors,541,https://psicode.org,https://github.com/psi4/psi4/issues/2564#issuecomment-1133518145,1,['error'],['errors']
Availability,"Hi, thank you very much for your response. > I would ordinarily advise putting psi4 is a separate conda env, not the base one. That seems awkward in colab (has to be activated per cell!) but is a possibility, https://stackoverflow.com/questions/53031430/conda-environment-in-google-colab-google-colaboratory. I tried this and am able to install psi4 and even import it without any errors. [psi4-test.txt](https://github.com/psi4/psi4/files/8883628/psi4-test.txt) contains the results of `psi4 --test`; kindly let me know if this mean that psi4 is in functional state.; Here is the `conda list` output in case it is needed.; [psi4-env_conda-list.txt](https://github.com/psi4/psi4/files/8883643/psi4-env_conda-list.txt). Now I have some compatibility issues against python3.8 but that's with other packages I am trying to use. Just to make sure, psi4 is no longer supported on python3.7, right?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2598#issuecomment-1152894724:381,error,errors,381,https://psicode.org,https://github.com/psi4/psi4/issues/2598#issuecomment-1152894724,1,['error'],['errors']
Availability,"Hi,. I suspect that this problem is related to the definition of your basis set. The `basis` block in your input file is part of psi4's special syntax to define [custom, mixed basis sets](https://psicode.org/psi4manual/1.5.0/basissets.html#mixing-basis-sets):; ```; basis {; assign def2-SVP; }; ```. I can run your inputs successfully if I swap out that `basis` block for the standard basis syntax:; ```; set {; basis def2-SVP; }; ```. Here's the SCF output from the second input, which starts the SCF from the serialized orbitals:; ```; ==> Iterations <== . Total Energy Delta E RMS |[F,P]|. @DF-RKS iter 0: -270.15381570481316 -2.70154e+02 1.44676e-07 ; @DF-RKS iter 1: -270.15381570483822 -2.50679e-11 1.66794e-07 DIIS; Energy and wave function converged.; ```. This fix should be sufficient if all of your calculations require standard, pre-defined basis sets. If you do need to use custom, mixed basis sets, we'll need to investigate this error further.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2571#issuecomment-1120477445:944,error,error,944,https://psicode.org,https://github.com/psi4/psi4/issues/2571#issuecomment-1120477445,1,['error'],['error']
Availability,"Hi,; I cannot remember correctly as I have been digging through net in search of a [different issues](http://forum.psicode.org/t/fatal-error-psioutstream-failed-to-open-file/2572) and I came across this.; It worked your way, thanks for helping me out.; M",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2668#issuecomment-1209169955:135,error,error-psioutstream-failed-to-open-file,135,https://psicode.org,https://github.com/psi4/psi4/issues/2668#issuecomment-1209169955,1,['error'],['error-psioutstream-failed-to-open-file']
Availability,"Hi. We run jupyter in a container. writing: import psi4; in a cell and then run it gives the error message (repeated at the ; bottom of mail). operating system:; NAME=""Ubuntu""; VERSION=""18.04.5 LTS (Bionic Beaver)"". psi4 version: 1.4+9485035. and. Python version = 3.9.6 | packaged by conda-forge | (default, Jul 11 ; 2021, 03:39:48); [GCC 9.3.0]; IPython version = 7.26.0. best regards; Sissel. ---------------------------------------------------------------------------; ImportError Traceback (most recent call ; last); /srv/conda/envs/notebook/lib/python3.9/site-packages/psi4/__init__.py in ; <module>; 54 try:; ---> 55 from . import core; 56 except ImportError as err:. ImportError: ; /srv/conda/envs/notebook/lib/python3.9/site-packages/psi4/core.cpython-39-x86_64-linux-gnu.so: ; undefined symbol: __svml_exp4_mask_e9. During handling of the above exception, another exception occurred:. ImportError Traceback (most recent call ; last); /tmp/ipykernel_64/253247311.py in <module>; ----> 1 import psi4. /srv/conda/envs/notebook/lib/python3.9/site-packages/psi4/__init__.py in ; <module>; 58 raise ImportError(""{0}\nLikely cause: GCC >= 4.9 not in ; [DY]LD_LIBRARY_PATH"".format(err)); 59 else:; ---> 60 raise ImportError(""{0}"".format(err)); 61; 62 from psi4.core import set_output_file, get_num_threads, ; set_num_threads. ImportError: ; /srv/conda/envs/notebook/lib/python3.9/site-packages/psi4/core.cpython-39-x86_64-linux-gnu.so: ; undefined symbol: __svml_exp4_mask_e9. On 2021-09-16 13:08, Jonathon Misiewicz wrote:; > A traceback is never adequate information for a bug report.; > ; > We need a Psi4 version number, exact steps to reproduce the error, and; > need to know what operating system you're using.; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub [1], or unsubscribe; > [2].; > Triage notifications on the go with GitHub Mobile for iOS [3] or; > Android [4].; > ; > Links:; > ------; > [1] https://github.com/p",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2294#issuecomment-921085607:93,error,error,93,https://psicode.org,https://github.com/psi4/psi4/issues/2294#issuecomment-921085607,1,['error'],['error']
Availability,"Hi~. Thanks for the responses. I create an environment and I run the command as you recommend ([link](https://psicode.org/installs/v15/)). `conda install psi4 python=3.9 -c psi4 `. But it still shows:. ```; Collecting package metadata (current_repodata.json): done; Solving environment: failed with initial frozen solve. Retrying with flexible solve.; Solving environment: failed with repodata from current_repodata.json, will retry with next repodata source.; Collecting package metadata (repodata.json): done; Solving environment: failed with initial frozen solve. Retrying with flexible solve.; Solving environment: \ ; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; failed . UnsatisfiableError: The following specifications were found to be incompatible with each other:. Output in format: Requested package -> Available versions. Package python conflicts for:; psi4 -> python[version='2.7.*|3.5.*|3.6.*|>=2.7,<2.8.0a0|>=3.5,<3.6.0a0|>=3.6,<3.7.0a0|>=3.7,<3.8.0a0|>=3.8,<3.9.0a0|>=3.9,<3.10.0a0']; python=3.9; psi4 -> libxc[version='>=5.1.5,<6.0a0'] -> python[version='3.4.*|>=3.10,<3.11.0a0|>=3.6|>=3.5|>=3.7|>=3.6.0|>=3.6,<3.7|>=3.4']The following specifications were found to be incompatible with your system:. - feature:/linux-64::__glibc==2.31=0; - feature:|@/linux-64::__glibc==2.31=0; - psi4 -> libgcc-ng[version='>=7.5.0'] -> __glibc[version='>=2.17']. Your installed version is: 2.31. Note that strict channel priority may have removed packages required for satisfiability.; ```. Is there anything wrong with my Ubuntu machine?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2390#issuecomment-1004659467:876,Avail,Available,876,https://psicode.org,https://github.com/psi4/psi4/issues/2390#issuecomment-1004659467,1,['Avail'],['Available']
Availability,"Hm, I don't get these errors when building in a proper buildroot with only Python 3 installed...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1565#issuecomment-469254424:22,error,errors,22,https://psicode.org,https://github.com/psi4/psi4/issues/1565#issuecomment-469254424,1,['error'],['errors']
Availability,"Hm, I think a solution to allow this would be very messy. . We would have to: ; 1. check for molecule names that would cause syntax errors.; 2. Figure out some way to fix the name so that is is a valid identifier ; 3. Find any mention of the original name in the rest of the input file and apply the same translation to it. Doing something like prepending `mol_` to the molecule name would allow things like you mention `2xh20` to work fine `2xh20 `—>`mol_2xh20`, but I think it would be a difficult to deal with every possible thing that a user could possibly enter. . The [documentation](http://www.psicode.org/psi4manual/master/psithoninput.html) describes the few special cases that the ""psithon"" input parser is prepared to deal with like the `molecule <name> {…}` block. It might be a good idea to mention that `molecule name {…}` essentially gets converted to `name = psi4.geometry(…)` to drive home that ""name"" needs to be a valid Python identifier, but in my opinion the syntax error makes that pretty clear.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/650#issuecomment-286904185:132,error,errors,132,https://psicode.org,https://github.com/psi4/psi4/issues/650#issuecomment-286904185,4,['error'],"['error', 'errors']"
Availability,"Hmm thats actually kind of interesting. So I think the misunderstanding here is when you make `Matrix( num_irreps, nao, nmopi )`, as we do not support different symmetries along different axises nao is replicated along the axis so you have a `([nao, nao, …]` by `[nmopi[0], nmopi[1], …])` matrix. So when you do the AOTOMO, MO_RDM, AOTOMO.T transformation what you should _should_ end up with is a (nirrep, nao, nao) matrix where the ao contribution of each irrep is in a subsequent `(nao, nao)` block. However, since AO_RDM only has one dimension that `gemm` will only collect the first dimension (irrep). What you need to do is change:; `AO_RDM = SharedMatrix( new Matrix( nao, nao ) );`. to; `AO_RDM = SharedMatrix( new Matrix( num_irreps, nao, nao ) );`. and then sum through the irreps of AO_RDM. I don’t think we currently have a built-in routine to collapse irreps like this. Im hard pressed to call this last part a bug since this follows through on the matrix algebra and automatically summing is probably not wise. The first part where calling `gemm` on different irrep matrices should probably throw an error because this only works where the LHS has less irreps than the RHS; however, if the RHS has more irreps it will seg fault. As I said before, this is an interesting error as its a strange mix of opaque code and a small bug. Hopefully this is both the truth and makes sense, coffee should kick in soon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/274#issuecomment-187694715:1114,error,error,1114,https://psicode.org,https://github.com/psi4/psi4/issues/274#issuecomment-187694715,3,"['error', 'fault']","['error', 'fault']"
Availability,"Hmm, I got an ADIIS error in windows (on a pytest) for my tests. Is this to be expected?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2550#issuecomment-1104634251:20,error,error,20,https://psicode.org,https://github.com/psi4/psi4/pull/2550#issuecomment-1104634251,1,['error'],['error']
Availability,"Hmm, I'm not getting that but do see. ```; Traceback (most recent call last):; File ""/psi/gits/hrw-l2/objdir39b/readqcsk.py"", line 19, in <module>; qcschema.validate(data=json.loads(handle.read()), schema_type=""output"") #args.schema_type); File ""/home/psilocaluser/gits/QC_JSON_Schema/qcschema/validate.py"", line 16, in validate; jsonschema.validate(data, schema); File ""/home/psilocaluser/toolchainconda/envs/py39b/lib/python3.9/site-packages/jsonschema/validators.py"", line 934, in validate; raise error; jsonschema.exceptions.ValidationError: None is not of type 'string'. Failed validating 'type' in schema['properties']['id']:; {'description': 'The optional ID for the computation.',; 'title': 'Id',; 'type': 'string'}. On instance['id']:; None; ```. Looks like more slight discrepancies btwn qcel `AtomicResult` and the hand-coded qcschema module. I thought I had reconciled those, but they may be waiting at https://github.com/MolSSI/QCSchema/pull/77/files .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2242#issuecomment-877837769:500,error,error,500,https://psicode.org,https://github.com/psi4/psi4/issues/2242#issuecomment-877837769,1,['error'],['error']
Availability,"Hmm, I'm struggling to get my tests to give me a good agreement. From the [original publication](http://dx.doi.org/10.1007/s00214-005-0681-9) for the cc-pvdz-PP pseudopotentials for the Cu (and other) metals, the ionisation energy of Cu should be 165.26 kcal/mol with CCSD(T). In Gaussian 09, with the basis set downloaded from EMSL, I get an energy of 165.75 kcal/mol, which I suppose is reasonable. In Psi4, I get an energy of 166.02 kcal/mol. In case of Au ionisation energy, the difference (200.23 kcal/mol in the paper, 202.92 kcal/mol in Psi4) is more than 1%. I'm quite stumped. If anyone has any idea what's going on, please let me know.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/937#issuecomment-376531582:312,down,downloaded,312,https://psicode.org,https://github.com/psi4/psi4/pull/937#issuecomment-376531582,1,['down'],['downloaded']
Availability,"Hmm, looks like a libint failure?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1700#issuecomment-531489364:25,failure,failure,25,https://psicode.org,https://github.com/psi4/psi4/pull/1700#issuecomment-531489364,1,['failure'],['failure']
Availability,"Hmm, so either; - the case of running higher-order SAPT on heavy atoms was never considered, in which case the `DF_BASIS_ELST` code needs copying over; - the heavy atom failure mode doesn't appear in higher-order SAPT b/c higher-order terms compensate or because the larger basis-sets targeted do their job (RI > JK for higher-zeta basis sets). Actually, this may have been what @tparker36 was recalling.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/317#issuecomment-197550795:169,failure,failure,169,https://psicode.org,https://github.com/psi4/psi4/issues/317#issuecomment-197550795,1,['failure'],['failure']
Availability,"Hmm, sounds like #1548, which I wasn't able to hunt down. Really should be installing to `<objdir>/stage/lib/${PYMOD_INSTALL_LIB}/`. Are you setting `CMAKE_INSTALL_PATH`?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1582#issuecomment-475242008:52,down,down,52,https://psicode.org,https://github.com/psi4/psi4/issues/1582#issuecomment-475242008,1,['down'],['down']
Availability,"Hmm, the build with internal Boost failed for other reasons. Nothing was printed to STDOUT, but the `$build-dir/CMakeFiles/CmakeError.log` file contains:. ```; Determining if the function MKL_Free_Buffers exists failed with the following output:; Change Dir: /scratch/ajstewart/spack-stage/spack-stage-HKaV_0/psi4-0.5/spack-build/CMakeFiles/CMakeTmp. Run Build Command:""/usr/bin/gmake"" ""cmTC_13b4e/fast""; /usr/bin/gmake -f CMakeFiles/cmTC_13b4e.dir/build.make CMakeFiles/cmTC_13b4e.dir/build; gmake[1]: Entering directory `/scratch/ajstewart/spack-stage/spack-stage-HKaV_0/psi4-0.5/spack-build/CMakeFiles/CMakeTmp'; Building C object CMakeFiles/cmTC_13b4e.dir/CheckFunctionExists.c.o; /blues/gpfs/home/software/spack/lib/spack/env/gcc/gcc -std=c99 -DRESTRICT=__restrict__ -DFUNDERSCORE=1 -fPIC -fopenmp -DCHECK_FUNCTION_EXISTS=MKL_Free_Buffers -o CMakeFiles/cmTC_13b4e.dir/CheckFunctionExists.c.o -c /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/cmake-3.5.2-vxtbzsxomc5qwe4axqm2nog2bpy5v4ya/share/cmake-3.5/Modules/CheckFunctionExists.c; Linking C executable cmTC_13b4e; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/cmake-3.5.2-vxtbzsxomc5qwe4axqm2nog2bpy5v4ya/bin/cmake -E cmake_link_script CMakeFiles/cmTC_13b4e.dir/link.txt --verbose=1; /blues/gpfs/home/software/spack/lib/spack/env/gcc/gcc -std=c99 -DRESTRICT=__restrict__ -DFUNDERSCORE=1 -fPIC -fopenmp -DCHECK_FUNCTION_EXISTS=MKL_Free_Buffers CMakeFiles/cmTC_13b4e.dir/CheckFunctionExists.c.o -o cmTC_13b4e -rdynamic; CMakeFiles/cmTC_13b4e.dir/CheckFunctionExists.c.o: In function `main':; CheckFunctionExists.c:(.text+0x15): undefined reference to `MKL_Free_Buffers'; collect2: error: ld returned 1 exit status; gmake[1]: *** [cmTC_13b4e] Error 1; gmake[1]: Leaving directory `/scratch/ajstewart/spack-stage/spack-stage-HKaV_0/psi4-0.5/spack-build/CMakeFiles/CMakeTmp'; gmake: *** [cmTC_13b4e/fast] Error 2; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/411#issuecomment-226015782:1674,error,error,1674,https://psicode.org,https://github.com/psi4/psi4/issues/411#issuecomment-226015782,3,"['Error', 'error']","['Error', 'error']"
Availability,"Hmm, tricky issues from Travis. We downcast to Wavefunction so we loose things like `cphf_solve` and `semicanonicalize` and we need to remove symmetry from not only the orbital, but also the density fitted basis sets as well. We may need to add `c1_deep_copy` to the SCF-level Wavefunctions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/737#issuecomment-312405533:35,down,downcast,35,https://psicode.org,https://github.com/psi4/psi4/pull/737#issuecomment-312405533,1,['down'],['downcast']
Availability,"Hmmm. Just looked at my implementation and saw this gem; ```; if(H->nirrep() > 1 || H->rowdim() != H->coldim() || H->rowdim() != 3*molecule->natom()); throw PSIEXCEPTION(""Molecule::symmetrize_hessian: Matrix cannot be symmetrized."");; ```; The routine is just to clean up an already symmetric Hessian, not to apply symmetry (years since I wrote it, so I'm having to trawl through code to put things back in RAM). It should be easy to use the CDSalc class to apply symmetry to the Hessian. I remember chatting with @loriab about that, btu can't find the code snippet. Will ping back when I find it. There's no reason I can think of for the cleanup code being restricted to C1 symmetry; it should only need small tweaks to work for all point groups.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/760#issuecomment-314470850:572,ping,ping,572,https://psicode.org,https://github.com/psi4/psi4/pull/760#issuecomment-314470850,1,['ping'],['ping']
Availability,"Hmmm. The fnocc2 can be explained by the following diff.... ```; -energy('g2'); -refg2 = -76.332048016380 #TEST; -refgibbs = -76.349644827450 #TEST; +energy('g2',dertype=1); +refg2 = -76.332048079709 #TEST; +refgibbs = -76.349644891507 #TEST; ```. that was part of my last set of commits. I updated the reference values to reflect that I'd switched to analytic Hessians. Then when I committed it, I realized that analytic Hessians require angular momentum beyond what Travis can handle, so I switched back to finite differences but forgot to roll back the reference values. Feel free to revert the reference values, and that'll be fine. The other two problems appear to be a seg fault, so I'll try to check out your changes and see if I can reproduce. Sorry for the hassle.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235102762:679,fault,fault,679,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235102762,1,['fault'],['fault']
Availability,"How about something like this:. - Perform SCF; - Check instability; - If unstable, rotate in the direction of the most unstable vector, according to some user-specified magnitude then...; - Compute the deviation of the new SCF energy from the 2nd order Taylor prediction, as well as the new SCF gradient; - If the 2nd order Taylor prediction was accurate enough (within some user-specified tolerance), and the magnitude of the gradient is within a comfortable range (another pair of parameters sadly...), then start SOSCF which should hopefully start going downhill.; - If the gradient is too low, increase the rotation magnitude, if too large decrease it. Recompute the new SCF energy and gradient, repeat the checks above.; - If the 2nd order Taylor prediction was inaccurate, decrease rotation magnitude. Recompute the new SCF energy and gradient, repeat the checks above.; - If the 2nd order Taylor prediction was inaccurate, **and** the gradient is too low, accept the orbital rotation, recompute the orbital Hessian at the new location (which is no longer exactly a saddle point), and repeat the entire follow process, until we find a point we can start SOSCF from. This could of course get quite expensive if a lot of Hessian recomputes are required, and relies on SOSCF not climbing back up to the saddle point, but to me it sounds easier to implement. With that said, I cannot help but feel like we are trying to reinvent a wheel. Surely, one would think that other people have already spent a lot of time thinking about the best ways to climb down from saddle points.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3045#issuecomment-1706817277:390,toler,tolerance,390,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1706817277,3,"['down', 'toler']","['down', 'downhill', 'tolerance']"
Availability,How awful would it be if did DF SCF iterations with a direct gradient evaluation? I poured over the range-separated gradient code a few times and have not figured out the error.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/867#issuecomment-396931668:171,error,error,171,https://psicode.org,https://github.com/psi4/psi4/issues/867#issuecomment-396931668,1,['error'],['error']
Availability,How would one do a complicated custom extrapolation with DFT? Ie selecting what is happening at what `component` stage.; E.g. `fctl/cc-pv[dt]z` + `dh/aug-cc-pvdz` . Is this available?; I checkout the PR out locally and playing around with it.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2132#issuecomment-965455289:173,avail,available,173,https://psicode.org,https://github.com/psi4/psi4/pull/2132#issuecomment-965455289,1,['avail'],['available']
Availability,"However, now my test run crashes with the message below. Is it trying to write a file in a directory where I don't have permissions or so?. Traceback (most recent call last):; File ""/home/apps/psi/psi4conda/bin/psi4"", line 248, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/home/apps/psi/psi4conda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/apps/psi/psi4conda/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 860, in select_ccsd_t_; return func(name, **kwargs); File ""/home/apps/psi/psi4conda/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 2197, in run_ccenergy; core.cctransort(ref_wfn). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::rw(unsigned int, char*, psi::psio_address, unsigned long, int); psi::psio_write(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::DPD::file4_mat_irrep_wrt(psi::dpdfile4*, int). *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1557#issuecomment-467172255:801,Error,Error,801,https://psicode.org,https://github.com/psi4/psi4/issues/1557#issuecomment-467172255,5,"['Error', 'error']","['Error', 'error']"
Availability,"I _suspect_ I've found the bug. The culprits are lines like [these](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/occ/t2_2nd_general.cc#L197-L203). I'm going to give a simplified presentation of the theory to explain why this particular bug caused T2 convergence problems but no other obvious problems:; In OMP3 theory, you write a Lagrangian energy functional, which is the OMP2 Lagrangian energy functional plus additional terms. In OMP2.5, you multiply those new terms by a factor of 1/2. The terms enforcing the first order amplitude constraint are all in the OMP2 part of the Lagrangian, and the terms enforcing the second order amplitude constraint are all in the additional terms of the Lagrangian. Now, the OMP2.5 in `occ` is the OMP3 implementation _except_; (1) additional terms not containing second order amplitudes are explicitly halved, and; (2) additional terms containing second order amplitudes are implicitly halved by halving the second order T2 amplitudes. Let's imagine we got the exactly right second order T2 amplitudes. We then halve them, per step 2 above. On the next iteration, of course we're going to find our second order amplitudes are off!. I've made the changes on a local branch. OMP3 tests all pass, but `omp2p5-grad2` has changed in the fifth decimal place, which is enough to cause a failure. This could indicate a problem with my changes, or that there was error in the test gradients because the second order amplitudes were not well converged. While a finite difference test should resolve this, I can't converge the relevant OMP equations in the current Psi implementation sufficiently tightly to test... I'm going to hack out a Psi4Numpy implementation to settle the matter. In the meantime, obligatory ping of @bozkaya in case I've missed something.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1808#issuecomment-583900866:1330,failure,failure,1330,https://psicode.org,https://github.com/psi4/psi4/issues/1808#issuecomment-583900866,6,"['error', 'failure', 'ping']","['error', 'failure', 'ping']"
Availability,"I added full Sphinx documentation for both the FCHK writer and for GDMA, in commit f2aca76, @CDSherrill. I heard back from Prof. Stone and he has kindly agreed to allow us to use GDMA in the way that we want to, so this PR is ready to go. In his message, he raised the issue of our output providing only kcal/mol units, and mentioned that he would like to have kJ/mol units too, in line with IUPAC guidelines. We certainly should make the hartree to kJ/mol available directly in physconst (instead of having to go through kcal/mol), but what do think about having both units available in the SAPT output?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/323#issuecomment-201394449:457,avail,available,457,https://psicode.org,https://github.com/psi4/psi4/pull/323#issuecomment-201394449,4,['avail'],['available']
Availability,"I added some documentation so I think this PR is close to being ready for a commit. I am curious: are there any ideas on how to make normal modes available via Python? From what I have seen in findif, it might be necessary to store this information somewhere. Exactly where, I don't know.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/644#issuecomment-285769962:146,avail,available,146,https://psicode.org,https://github.com/psi4/psi4/pull/644#issuecomment-285769962,1,['avail'],['available']
Availability,I added various error statistics over the S22 benchmark set.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1591#issuecomment-495132122:16,error,error,16,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-495132122,1,['error'],['error']
Availability,I admit i always skipped the orientation/symmetry handling in the cubature code. The warning is here:; https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/cubature.cc#L3505. Such an error in concerning.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2647#issuecomment-1196968300:193,error,error,193,https://psicode.org,https://github.com/psi4/psi4/issues/2647#issuecomment-1196968300,1,['error'],['error']
Availability,"I agree on modern basis sets as far as research. But for education, we want to support large swaths of the periodic table for hundreds of undergrads running the same calcs on a server, hence Pople. And yes, Karlsruhe fitting basis sets are the plan, both for adding them to the library and for defaulting to them (per-atom) when a fitting basis isn't defined for the orbital basis. On Mar 13, 2014, at 3:46 PM, Susi Lehtola notifications@github.com wrote:. > The Karlsruhe basis sets should have pretty good fitting basis sets as well.; > ; > AFAIK Pople basis sets are not really trustworthy (major deficiencies with two-electron completeness). You get better results with fewer functions with newer basis sets, and so IMHO one should play them down...; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/44#issuecomment-37579173:746,down,down,746,https://psicode.org,https://github.com/psi4/psi4/issues/44#issuecomment-37579173,1,['down'],['down']
Availability,"I agree that `ROBUST` should be the default. We might want to leave the default to no pruning and then make an issue reviewing the timings, accuracy, and change log notes before switching the default over. Whenever we change the results the DFT code obtains even if minor I do get a little nervous.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1591#issuecomment-495416288:14,ROBUST,ROBUST,14,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-495416288,1,['ROBUST'],['ROBUST']
Availability,I agree that a CMake Libint1 build failed to be least common denominator for downstream on two fronts: (1) no `.pc` files and (2) no `libr12` library. I've fixed the first one Libint-side. Second I don't particularly have time for and can't do anyways until someone volunteers to test the resulting `libr12`. The one-line patch on the packager side to use the libtool build with Psi4 is above. Closing.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1589#issuecomment-495759282:77,down,downstream,77,https://psicode.org,https://github.com/psi4/psi4/issues/1589#issuecomment-495759282,1,['down'],['downstream']
Availability,"I agree that option B is the best. The effect of the fix will be very minor. This can be easily tested by comparing to DCT code with conventional integrals (and we have done this in the past). Also, current version of the code should recover the exact DCT energy and gradient when using a very large auxiliary basis set.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1579#issuecomment-474901373:234,recover,recover,234,https://psicode.org,https://github.com/psi4/psi4/issues/1579#issuecomment-474901373,1,['recover'],['recover']
Availability,"I agree that we don't want properties computations done internally --- we; want them done in a unified way through OEProp. However, we do (I guess?); want the user syntax properties = [ ... ] or whatever Daniel C. cooked up.; My understanding is that the CC properties user input syntax only works for; CC modules, which is not good. Here's an example from cc52:. property('ccsd',properties=['roa_tensor']). The reason Daniel developed this is because different modules need to be; run depending on the requested property. This is not usually the case for; non-CC codes, but it is confusing to users to have this mechanism available; for CC properties but not for other properties. I am fine with moving this over to some other more unified github issue, so; long as it is tracked somewhere. On Fri, Feb 26, 2016 at 11:01 AM, Daniel Smith notifications@github.com; wrote:. > Effectively we have quite a few tickets relating to properties and OEProp.; > I would very much like to consolidate most of these tickets into one so we; > can figure out what actually needs to be done. In many ways we probably; > should not propagate the current way the cc codes are handling the; > properties internally (the syntax is great), especially with regard to; > properties through OEProp.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/40#issuecomment-189340270.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/40#issuecomment-189349922:623,avail,available,623,https://psicode.org,https://github.com/psi4/psi4/issues/40#issuecomment-189349922,1,['avail'],['available']
Availability,"I agree with Andy about merge-as-is. Also more people than just the listed reviewers looked at (parts of) the code according to github. Before we merge, just wanting to confirm if the right `conda install libint2 -c psi4/label/dev` is available?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1721#issuecomment-730193219:235,avail,available,235,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-730193219,1,['avail'],['available']
Availability,"I agree with the point that the code should go through and report zeros, so; we can do database stuff, etc. I think the thermo code can easily be fixed for this (in fact Brandon has a; new version that has already been tested for atoms). Looks like the first; failure we're hitting is in finite differences. @psi-rking should give; that some thought. David. On Thu, Mar 31, 2016 at 11:31 PM, drhaney notifications@github.com wrote:. > Mac's Beer & Wine confirms that they will happily reserve gift cards for; > you at the register, and you developers need to do better if you want that; > beer.; > ; > Usually, a QC app 'fails' gracefully on atomic systems.; > By 'fail', I mean that it should: _handle stupid requests gracefully._; > ; > In practice, the app returns ZPE, Ethermal, Hthermal = 0.0,0.0,0.0, and a; > reasonable total entropy 30 < S <40 cal/mol-K. Granted, Stotal = Strans and; > may be of little value. The user adds in some Boltzmann kT multiples to; > internal E,H as needed.; > ; > Total energies and enthalpies of atoms are needed for calculating; > molecular enthalpies of formation by the atomization method. I want this; > because I'm writing composite method modules for Psi4 with the goal of; > replicating Gaussian and GAMESS results.; > ; > It may be invidious to point out that Gaussian, GAMESS, and Nwchem are all; > well-behaved on the atomic cases, but those applications are why I'm here.; > [rant on egregious software licenses and general dislike of Fortran; > redacted]; > ; > Next up: CCSD(T) and the H2 molecule, MP2 correlation energy of the; > hydrogen atom. (joke!); > Thanks to all.; > -drh; > ; > —; > You are receiving this because you commented.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/332#issuecomment-204230882",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/332#issuecomment-204388708:260,failure,failure,260,https://psicode.org,https://github.com/psi4/psi4/issues/332#issuecomment-204388708,1,['failure'],['failure']
Availability,"I agree, but not going to debug this bizarre case in the C++ code. And if; you're going to catch the absurd geometry, then psi4 should never compute; the gradient. On Fri, Jul 8, 2022 at 12:24 PM Jonathon Misiewicz ***@***.***>; wrote:. > Given the reporter, the geometry they input is probably garbage.; >; > While I agree attempts to optimize from this are in vain, there should be; > a proper error message instead of just crashing with an obscure C error; > code.; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/2627#issuecomment-1179213167>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AA4C4TAGYFNA3TVUXXSR7DLVTBP4VANCNFSM53A6YHNQ>; > .; > You are receiving this because you were mentioned.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2627#issuecomment-1179416978:396,error,error,396,https://psicode.org,https://github.com/psi4/psi4/issues/2627#issuecomment-1179416978,2,['error'],['error']
Availability,"I also don't know exactly where the error array is coming from. The numbers in the README seem very few compared to the length of the error matrix. The ASCII way is still possible. But Rob was no fool when it came to optimizing the right parts. It only gets run once per SAPT, so I don't see the block of a text file, but I'm ready to believe he had a reason to go binary.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1462#issuecomment-451997357:36,error,error,36,https://psicode.org,https://github.com/psi4/psi4/issues/1462#issuecomment-451997357,2,['error'],['error']
Availability,I also tried building an external Boost version 1.57.0 but that build failed for some reason and I don't feel like tracking it down.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/411#issuecomment-226016541:127,down,down,127,https://psicode.org,https://github.com/psi4/psi4/issues/411#issuecomment-226016541,1,['down'],['down']
Availability,"I also tried reinstalling via executing the .exe file in my downloads directory and the same error pops up . ""C:\Users\erikc>psi4 --test; Traceback (most recent call last):; File ""C:\Users\erikc\psi4conda\lib\site-packages\psi4\__init__.py"", line 55, in <module>; from . import core; ImportError: DLL load failed while importing core: The specified module could not be found. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""C:\Users\erikc\psi4conda\Scripts\psi4-script.py"", line 182, in <module>; import psi4 # isort:skip; File ""C:\Users\erikc\psi4conda\lib\site-packages\psi4\__init__.py"", line 60, in <module>; raise ImportError(""{0}"".format(err)); ImportError: DLL load failed while importing core: The specified module could not be found.""",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875174721:60,down,downloads,60,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875174721,2,"['down', 'error']","['downloads', 'error']"
Availability,"I am actually performing these calculations on Google Colab. (It is for a future workshop.) You can access a Colab notebook exemplifying the error [here](https://colab.research.google.com/drive/1uTsmVcFJY5xArRbo4sQ0RGgPiT406xdM?usp=sharing). Additionally, here is the output from `conda list`. . ```; # packages in environment at /usr/local:; #; # Name Version Build Channel; _libgcc_mutex 0.1 conda_forge conda-forge; _openmp_mutex 4.5 1_gnu conda-forge; alsa-lib 1.2.3 h516909a_0 conda-forge; ambit 0.5.1 hbe8a562_1 psi4; argon2-cffi 21.3.0 pyhd8ed1ab_0 conda-forge; argon2-cffi-bindings 21.2.0 py37h5e8e339_1 conda-forge; attrs 21.4.0 pyhd3eb1b0_0 ; backcall 0.2.0 pyh9f0ad1d_0 conda-forge; backports 1.0 py_2 conda-forge; backports.functools_lru_cache 1.6.4 pyhd8ed1ab_0 conda-forge; beautifulsoup4 4.10.0 pyha770c72_0 conda-forge; blas 1.0 mkl ; bleach 4.1.0 pyhd8ed1ab_0 conda-forge; boost 1.74.0 py37h6dcda5c_3 conda-forge; boost-cpp 1.74.0 h312852a_4 conda-forge; bottleneck 1.3.4 py37hce1f21e_0 ; brotli 1.0.9 he6710b0_2 ; brotlipy 0.7.0 py37h5e8e339_1001 conda-forge; bzip2 1.0.8 h7f98852_4 conda-forge; c-ares 1.17.1 h7f98852_1 conda-forge; ca-certificates 2021.10.8 ha878542_0 conda-forge; cairo 1.16.0 hf32fb01_1 ; certifi 2021.10.8 py37h89c1867_1 conda-forge; cffi 1.15.0 py37h036bc23_0 conda-forge; chardet 4.0.0 py37h89c1867_1 conda-forge; chemps2 1.8.10 hbe8a562_0 psi4; conda 4.12.0 py37h89c1867_0 conda-forge; conda-package-handling 1.7.2 py37hb5d75c8_0 conda-forge; cryptography 3.4.5 py37h5d9358c_1 conda-forge; cudatoolkit 11.1.1 h6406543_8 conda-forge; cycler 0.11.0 pyhd3eb1b0_0 ; dbus 1.13.6 h5008d03_3 conda-forge; debtcollector 2.5.0 pyhd8ed1ab_0 conda-forge; debugpy 1.5.1 py37hcd2ae1e_0 conda-forge; decorator 5.1.1 pyhd3eb1b0_0 ; defusedxml 0.7.1 pyhd8ed1ab_0 conda-forge; dftd3 3.2.1 h84218bc_2 psi4; dkh 1.2 h173d85e_2 psi4; entrypoints 0.4 pyhd8ed1ab_0 conda-forge; expat 2.4.7 h27087fc_0 conda-forge; flit-core 3.7.1 pyhd8ed1ab_0 conda-forge; fontconfig 2.13.1 h6c099",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2510#issuecomment-1081031693:141,error,error,141,https://psicode.org,https://github.com/psi4/psi4/issues/2510#issuecomment-1081031693,1,['error'],['error']
Availability,I am adding intel ib into the PATH and it is running flawlessly right now. I am checking dkh running and will report here. //////This error happens after installing a fresh PSI4.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/154#issuecomment-126183761:134,error,error,134,https://psicode.org,https://github.com/psi4/psi4/issues/154#issuecomment-126183761,1,['error'],['error']
Availability,"I am also being re-directed from search engines. The top site shows psicode.org but will redirect if I click on it. Typing psicode.org into a browser will bring me to the correct page, but I am noticing that the “manual” link is not working properly. I have that bookmarked and I wanted to see if that would redirect. It does not re-direct but none of the CSS elements associated with the manual are being loaded properly. I see the manual appearing as plain HTML. The same thing happens if I navigate to the manual from the psicode.org homepage. The console in chrome and safari are showing 404 errors for js and css:. http://psicode.org/psi4manual/master/_static/psi4.css Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/pygments.css Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/doctools.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/underscore.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/jquery.cookie.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/jquery.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_sections.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_codeprompt.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_sidebar.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_images/psi4banner.png Failed to load resource: the server responded with a status of ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/342#issuecomment-210015028:596,error,errors,596,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210015028,1,['error'],['errors']
Availability,"I am beginning to think we should forgo Travis CI with debug and focus it solely on release builds. That's where differences between the generated binaries is going to differ the most. > Just would like to add that if we use travis, you basically must let all test cases pass before merging. This sounds great to me. We shouldn't allow code to be committed that potentially causes problems for users using compiler combinations we do not routinely use. Initially, we may have many random issues arising such as the possible memory issue in the stability code but it's better for the code and the user to investigate and fix them. > Extra fun to debug as we do not have a compiled gcc 5.0 around. This is a downside of travis. No, this is an upside of Travis CI. I have an Ubuntu box that already has gcc 5 installed. If needed, I can run Psi4 through it and Valgrind. . It's also great to have other resources for testing Psi with. We do have the [testboard](https://testboard.org/cdash/index.php?project=Psi) where additional compiler combinations can be added. However, the testboard is not holding anyone accountable to fixing the code. I propose Travis CI release builds with the following compiler versions:; - clang: 3.5, 3.6, 3.7, 3.8; - gcc: 4.8, 4.9, 5.2. clang 3.5 was released on September 3, 2014 and gcc 4.8.0 was released on March 22, 2013.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237#issuecomment-182861777:706,down,downside,706,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182861777,1,['down'],['downside']
Availability,"I am getting `forrtl: error (76): Abort trap signal` error. Is that from that line?; It stops while printing the internal coordinate overview after printing the last angle value.; Presumably it tries to print a 4-center angle, there are 4 atoms after all, but no out-of-plane angle is found in the `intco` file. In C1 symmetry there should an out-of-plane angle coordinate.; The input works for a symmetrized Cs (planar) molecule that eliminates the out-of-plane mode. I cannot track it down further for now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1924#issuecomment-641876079:22,error,error,22,https://psicode.org,https://github.com/psi4/psi4/issues/1924#issuecomment-641876079,3,"['down', 'error']","['down', 'error']"
Availability,"I am glad you were able to get it running: I failed in my attempt. I added the orbital basis sets from Grant Hill's site to your input, but there do not appear to be any auxiliary basis sets available for the density fitting procedure that's used in the SCF and, I believe, the SAPT parts. Please check your output to make sure that a reasonable auxiliary basis set is being used for the density fitting calculations: the aux basis should normally be about a factor of 3 larger than the orbital basis, but it's possible that a slightly smaller one will suffice for something as large as aug-cc-pV5Z. There is an [effort underway](https://github.com/MolSSI-BSE/basis_set_exchange) at MolSSI to curate basis sets in a more organized way and we will almost certainly be using that to update the library when it is ready to go, so I don't think a PR is needed at this time, thanks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1557#issuecomment-467169919:191,avail,available,191,https://psicode.org,https://github.com/psi4/psi4/issues/1557#issuecomment-467169919,1,['avail'],['available']
Availability,I am going to need to revise the docstrings now that we just error out instead of returning the closest match,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2465#issuecomment-1064156997:61,error,error,61,https://psicode.org,https://github.com/psi4/psi4/pull/2465#issuecomment-1064156997,1,['error'],['error']
Availability,"I am having trouble compiling these changes, @dgasmith. . I did not modify core.cc, but I am getting these errors due to PyBind11. Any idea what went wrong? . /Users/kevinhannon/Programs/psi4_cmake/psi4/src/core.cc:786:17: error: no member named; 'isinstance' in namespace 'pybind11'; if (py::isinstance<py::list>(values[n])) {; ~~~~^; /Users/kevinhannon/Programs/psi4_cmake/psi4/src/core.cc:786:36: error: expected '(' for; function-style cast or type construction; if (py::isinstance<py::list>(values[n])) {; ~~~~~~~~^; /Users/kevinhannon/Programs/psi4_cmake/psi4/src/core.cc:834:17: error: no member named; 'isinstance' in namespace 'pybind11'; if (py::isinstance<py::list>(values[n])) {; ~~~~^; /Users/kevinhannon/Programs/psi4_cmake/psi4/src/core.cc:834:36: error: expected '(' for; function-style cast or type construction; if (py::isinstance<py::list>(values[n])) {",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/520#issuecomment-265223311:107,error,errors,107,https://psicode.org,https://github.com/psi4/psi4/pull/520#issuecomment-265223311,5,['error'],"['error', 'errors']"
Availability,"I am looking to update the failing dft test where absolute energies are tested. Looking for opinions and advice:. options:; * A) reduce the comparison thresholds, where necessary. Down to 5 or 6 (from 7 or even higher); * B) make new reference values using the new BS radii. Perhaps cleanest test history about the origin of the numbers and best for gradients; * C) a mixture of both. these `ctest -L dft` fail on my machine:; 157 - dft-grad-lr1 (Failed); 159 - dft-grad-lr3 (Failed); 167 - dft-grad-meta (Failed); 169 - dft-grad1 (Failed); 170 - dft-grad2 (Failed); 171 - dft-psivar (Failed); 173 - dft1 (Failed); 174 - dft-vv10 (Failed); 178 - dft-omega (Failed); 390 - dft-custom-mgga (Failed); 423 - dftd3-grad (Failed); 431 - pcmsolver-dft (Failed)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1591#issuecomment-494012739:180,Down,Down,180,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-494012739,1,['Down'],['Down']
Availability,"I am not aware of an area that we have made branching options like this before. @loriab may have a location. Barring any prior art I think the current layout makes plenty of sense. Apologies for being MIA a bit on this PR. I am **very** happy that someone is looking into the grid files! All of the changes look good at cursory glance. Please do ping me if something specific comes up, I think these kinds of changes are very important to the future of the DFT code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1591#issuecomment-494392367:346,ping,ping,346,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-494392367,1,['ping'],['ping']
Availability,"I am only doing DFT for now Susi, thanks for the tip about those basis sets. . I've determined that the bug was definitely introduced in the libint2 PR (#1721). Prior to that PR, `INTS_TOLERANCE` worked as expected: a value of 1e-12 led to a minor speed up and a negligible change in the energy. I further narrowed the problem down to the `engine_precision` parameter passed to the libint2 engine:. https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/eri.cc#L182. If I instead set `engine_precision` to `max_precision`, the SCF calculation proceeds normally. This suggests that the current value of `engine_precision` is too loose. Does anyone know more about what this parameter is, and where the current formula comes from? I assume the `-4` is for the four indexes of an ERI.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2114#issuecomment-782463778:327,down,down,327,https://psicode.org,https://github.com/psi4/psi4/issues/2114#issuecomment-782463778,1,['down'],['down']
Availability,"I am pretty sure this is a false failure in travis due to a server being down (see log below). Can someone from @psi4/p4pub-rw restart the travis tests? I don't think I should need to push a commit just to get the build to run. . ```; $ git checkout -qf FETCH_HEAD; Adding APT Sources (BETA); $ export DEBIAN_FRONTEND=noninteractive; 0.18s$ curl -sSL ""http://llvm.org/apt/llvm-snapshot.gpg.key"" | sudo -E apt-key add -; gpg: no valid OpenPGP data found.; The command ""curl -sSL ""http://llvm.org/apt/llvm-snapshot.gpg.key"" | sudo -E apt-key add -"" failed and exited with 2 during .; Your build has been stopped. ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/395#issuecomment-222983339:33,failure,failure,33,https://psicode.org,https://github.com/psi4/psi4/pull/395#issuecomment-222983339,2,"['down', 'failure']","['down', 'failure']"
Availability,"I am reasonably sure that Azure failed due to the issue with libxc download location (while tddft.org was down), and it wasn't a problem with the `with ... as ` way. Anyway, merging.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1687#issuecomment-520571901:67,down,download,67,https://psicode.org,https://github.com/psi4/psi4/pull/1687#issuecomment-520571901,2,['down'],"['down', 'download']"
Availability,"I apologize, maybe I'm fiddling with something different that leads to the same error message. Perhaps it's better to keep the 100% reproducible case. My point was that it was still happening, even with psi 1.2 non-dev.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/948#issuecomment-442904288:80,error,error,80,https://psicode.org,https://github.com/psi4/psi4/issues/948#issuecomment-442904288,1,['error'],['error']
Availability,I believe that the problems with -jN builds is now corrected. Other errors I'm seeing arise from another bug that I'll put up in a separate issue report.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/219#issuecomment-173217907:68,error,errors,68,https://psicode.org,https://github.com/psi4/psi4/issues/219#issuecomment-173217907,1,['error'],['errors']
Availability,"I believe the problem here is not in the opening of the MO file (180) but in the attempt to write new MO energies into the existing checkpoint file. I'm looking at a possible fix that will simply delete the old checkpoint file in case the number of MOs changes, but this will likely break something else about the optimization...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/32#issuecomment-37134034:132,checkpoint,checkpoint,132,https://psicode.org,https://github.com/psi4/psi4/issues/32#issuecomment-37134034,4,['checkpoint'],['checkpoint']
Availability,"I bet this is an issue with mismatched `new`/`malloc` and `free`/`delete` in the legacy parts of the code. The newer code uses smart pointers to avoid this. The mismatched free and deletes can be tracked down using valgrind, which will also help to identify where the largest leaks are. Anybody who tackles this should consider replacing the various explicit allocations with smart pointers to avoid this mess. I'll take a pass through when I get chance.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1532#issuecomment-463195111:204,down,down,204,https://psicode.org,https://github.com/psi4/psi4/issues/1532#issuecomment-463195111,1,['down'],['down']
Availability,"I bet this is because of the calls to `exit()` in libpsio, combined with the lack of flushing of the error messages to the output. I have replaced the calls to `exit()` in #3118, which should solve this issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2970#issuecomment-1877081205:101,error,error,101,https://psicode.org,https://github.com/psi4/psi4/issues/2970#issuecomment-1877081205,1,['error'],['error']
Availability,"I can build+link against my local install of boost successfully, using the modified conda recipe to build the static libs, but only if the hombrew boost is unlinked at setup, _and_ compile time.. . If the homebrew boost is linked at the time I run the `setup` script I will end up with the same issue where the local (boost 1.59.0) headers are in the boost inc paths, but the homebrew (1.60.0) libraries end up in the boost lib paths. . If hombrew boost is unlinked at the time I run the `setup` script I will see both the include and library paths are set to the local boost install in the cmake output. However, if homebrew boost is linked when I run `make` I will get an error in the linking step. I suspect that the directory where hombrew adds the links to boost (`/usr/local/lib`) are passed as a linker argument by cmake, either by default, or because something else is installed there. Thus, if those links are present I will get the characteristic boost 1.60.0 linking errors. Hombrew installs boost-python as a separate package so to properly remove all of the links `brew unlink boost boost-python` . Interestingly I have a similar setup on a laptop running ArchLinux 4.4.5 where boost 1.60.0 was installed globally using `pacman` and I used the conda recipie to install boost 1.59.0 in `$CONDA_ENV_PATH`. If the conda virtual environment is activated and I use the `setup` args to direct cmake to boost 1.59.0 installed there I have no problems. The correct version is always found, even if I try to `make` with the conda virtual environment deactivated the cmake paths still point to the installation I want even though those paths aren't in my environment, and the build is successful. . I don't know If I would mark this as resolved, but it is at least understood to where it is predictable. . For anyone who has run into a similar problem:. If you are using a compatible version of boost installed manually on osx and your build fails to link, even if cmake reported the compatible ver",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/313#issuecomment-198164795:674,error,error,674,https://psicode.org,https://github.com/psi4/psi4/issues/313#issuecomment-198164795,2,['error'],"['error', 'errors']"
Availability,"I can confirm @robertodr's error. But it does away with CMake 3.3 (even though I can't see what the change was from the [release notes](https://cmake.org/cmake/help/v3.7/release/3.3.html)). I've sort of been wanting 3.3 because that detects the HDF5 version number, and I, at least, am susceptible to mixed 1.8.16 and 1.8.17 compilations, which the build system can now avoid. So shall we bump again?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/625#issuecomment-281106134:27,error,error,27,https://psicode.org,https://github.com/psi4/psi4/pull/625#issuecomment-281106134,1,['error'],['error']
Availability,"I can confirm that I can now build a freshly checked-out tree without needing to edit anything. (I did have to use -DOpenMP_LIBRARY_DIRS to point at the Intel version of libiomp5.so.). I did get:. `No such TARGET ""OpenMP::OpenMP_C""` and `No such TARGET ""OpenMP::OpenMP_Fortran""`. in the cmake output but it built and (the few tests before I killed it) ran fine. As a further test, I've also tried enabling lots of other optional bits (ambit, CheMPS2, dkh, libefp, simint, gdma, PCMSolver, and snsmp2) to check whether the fortran error caused any issues with them. It looks like everything builds apart from ambit (which looks like it was only just re-enabled and so probably needs tweaking somewhere). Building ambit bails out with the same lack of MathOpenMP that I was seeing before #1053:. ```; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, LANG=C;CXX;Fortran, C/CXX/Fortran=GNU/GNU/; -- Found TargetOpenMP: 1 ; CMake Error at /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:137 (message):; Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE); Call Stack (most recent call first):; /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:378 (_FPHSA_FAILURE_MESSAGE); /var/tmp/build/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:108 (find_package_handle_standard_args); /usr/share/cmake-3.11/Modules/CMakeFindDependencyMacro.cmake:48 (find_package); /var/tmp/build/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/TargetLAPACKConfig.cmake:44 (find_dependency); cmake/FindTargetLAPACK.cmake:30 (find_package); CMakeLists.txt:90 (find_package). -- Configuring incomplete, errors occurred!; See also ""/var/tmp/build/psi4/objdir/external/upstream/ambit/ambit_external-prefix/src/ambit_external-build/CMakeFiles/CMakeOutput.log"".; See also ""/var/tmp/build/psi4/objdir/external/upstream/ambit/ambit_external-prefix/src/ambit_external-build/CMakeFiles/CMakeError.log"".; external/upstream/ambit/CMakeFiles/ambit_external.dir/bu",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-400326280:530,error,error,530,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-400326280,2,"['Error', 'error']","['Error', 'error']"
Availability,I can confirm that adding `${CMAKE_CURRENT_BINARY_DIR}/` before `__init__.py` in `objdir/external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external/CMakeLists.txt` does the trick (I'd tracked down the location of `__init__.py` earlier on but had no clue how to tie that in properly!). I'll wait for your pull requests to filter through and then I'll recheck from scratch...,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-400814539:98,down,downstream,98,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-400814539,2,['down'],"['down', 'downstream']"
Availability,"I can confirm this issue. The code seg faults only when calling gradient(df-mp2). If I run energy(dfmp2), it seems to work fine.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/119#issuecomment-130327172:39,fault,faults,39,https://psicode.org,https://github.com/psi4/psi4/issues/119#issuecomment-130327172,1,['fault'],['faults']
Availability,"I can only strongly recommend to use a build system. I'm involved with [Easybuild](https://hpcugent.github.io/easybuild/) which has support for psi4. Building psi4 with the GCC 5 is reduced to a one line command: it will build everything, starting from binutils and gcc. It only requires a non-ancient version of gcc to be present (I think, no lower than 3.0 or so).; With the help of modules, you can easily support multiple versions of compilers (and software) Our HPC systems currently has 5 version of GCC available (4.6-5.1) and 11 versions of intel compiler (11-2015.1).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/97#issuecomment-105170511:510,avail,available,510,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105170511,1,['avail'],['available']
Availability,I can reproduce this and get an error message about frozen virtual DF-CCSD gradients not being implemented in `dfocc`. That is not consistent with a pb11 problem.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1912#issuecomment-635993245:32,error,error,32,https://psicode.org,https://github.com/psi4/psi4/issues/1912#issuecomment-635993245,1,['error'],['error']
Availability,"I can see how the Molden format is perhaps a good fit for this, as it; presents not only the desired quantity (AO basis density matrix) but also; the associated data required to interpret it (basis set ordering,; exponents, contractions). Of course, even then, some assumptions/standards; have to be in place, like normalization conventions for the basis; functions, etc. Indeed, we already had a discussion about normalization; conventions in https://github.com/psi4/psi4/issues/60 . One would also in; principle have to assume some standard for how to define the pure angular; momentum functions from the Cartesian functions, etc. Still, with some; choices made and documented to set a convention for all this (which is; presumably available), Molden format could be ok to pass along; self-contained one-electron properties between programs that might have; different conventions. On the other hand, I think it remains useful to be able to get at; this/similar info without having to literally write out a Molden file.; Perhaps the example from @dgasmith will work or could be built upon. On Mon, Nov 14, 2016 at 10:49 AM, Daniel Smith notifications@github.com; wrote:. > Try out the following:; > ; > molecule mol {; > He; > He 1 3.0; > symmetry c1; > }; > ; > scf_e, scf_wfn = energy('SCF/sto-3g', return_wfn=True); > ; > scf_wfn.Da().print_out(); > scf_wfn.basisset().print_detail_out(); > ; > # Accessors for Daprint scf_wfn.Da().get(0, 0) # Python to C++ accessorprint scf_wfn.Da().np # Numpy accessor; > ; > Using C1 so that we get the AO basis set, SO->AO transformations are; > pretty simple as well. You can also run python-based help on a BasisSet; > object (help(scf_wfn.basisset())) to get a better idea of how to access; > it. The docs are pretty limited, but hopefully that function names are; > somewhat self explanatory.; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/issues/504#issuecomme",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/504#issuecomment-260397625:734,avail,available,734,https://psicode.org,https://github.com/psi4/psi4/issues/504#issuecomment-260397625,2,['avail'],['available']
Availability,"I can work on this if you want. Also, Libplugin shouldn't be needed anymore. Justin. > On Jan 15, 2016, at 10:25 PM, Lori A. Burns notifications@github.com wrote:; > ; > A couple of years ago, psi4 was on GnuMake or 1st iteration CMake build system, so plugin building (at least the Makefile spit out) has definitely been updated since then.; > ; > Yes, I've been eyeing the libgcc conda package. Haven't tried it yet because I was so pleased to get the psi4-only binary down to only lc, ldl, lpthread, lrt, lutil system libraries. But it seems that some dynamic libgcc dependency may be necessary to assemble psi4 and add-ons and dependencies from other conda channels, so I'll likely give in soon.; > ; > Fortunately, that plugin Makefile is just a template (https://github.com/psi4/psi4public/blob/master/lib/plugin/Makefile.template), so if I can get plugins working development-environment-wise, adjusting the --new-plugin-makefile output won't be a problem.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/214#issuecomment-172192255:471,down,down,471,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172192255,1,['down'],['down']
Availability,"I can't reproduce this behavior on my linux installation of add49b95b6be2441c522f71bddb47f1371e16958 (icc 2017.2.050, mkl 2017.1.143, numpy is also linked to the same `libmkl_rt.so`). I turned down `thread = 20` to `threads = 4`, but regardless of the import order I see `Psi4@n1 : Psi4@n4 ratio (want ~4)` close to 4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/755#issuecomment-312377598:193,down,down,193,https://psicode.org,https://github.com/psi4/psi4/issues/755#issuecomment-312377598,1,['down'],['down']
Availability,"I cannot install psi4 v1.8 from conda. I get the following error. I'm on Ubuntu 22.04. Is this a known issue? Workarounds?. ```sh; ❯ conda create --name psi4-2 --channel conda-forge 'psi4==1.8' 35s  base; Collecting package metadata (current_repodata.json): done; Solving environment: failed with repodata from current_repodata.json, will retry with next repodata source.; Collecting package metadata (repodata.json): done; Solving environment: | ; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; failed . UnsatisfiableError: The following specifications were found to be incompatible with each other:. Package qcengine conflicts for:; psi4==1.8 -> qcengine[version='>=0.26.0,<0.27.0a0']; Package libint conflicts for:; psi4==1.8 -> libint=2.7.3dev1; Package _openmp_mutex conflicts for:; psi4==1.8 -> _openmp_mutex[version='*,>=4.5',build=*_llvm]; Package python_abi conflicts for:; psi4==1.8 -> python_abi[version='3.10.*|3.11.*|3.8.*|3.9.*',build='*_cp311|*_cp310|*_cp38|*_cp39']; Package libxc-c conflicts for:; psi4==1.8 -> libxc-c[version='>=6.1.0,<7.0a0',build=cpu_*]; Package qcelemental conflicts for:; psi4==1.8 -> qcelemental[version='>=0.25.1,<0.26.0a0']; Package python conflicts for:; psi4==1.8 -> python[version='>=3.10,<3.11.0a0|>=3.11,<3.12.0a0|>=3.8,<3.9.0a0|>=3.9,<3.10.0a0']; Package pytest conflicts for:; psi4==1.8 -> pytest[version='>=7.0.1']; Package pyddx conflicts for:; psi4==1.8 -> pyddx[version='>=0.4.1']; Package pymdi conflicts for:; psi4==1.8 -> pymdi[version='>=1.2']; Package mkl conflicts for:; psi4==1.8 -> mkl[version='>=2022.2.1,<2023.0a0']; Package dkh conflicts for:; psi4==1.8 -> dkh[version='>=1.2,<1.3.0a0']; Package adcc conflicts for:; psi4==1.8 -> adcc[version='>=0.15.16']; Package networkx conflicts for:; psi4==1.8 -> networkx; Package numpy conflicts for:; psi4==1.8 -> numpy; Package libblas conflicts for:; psi4==1.8 -> libblas=[build=*mkl]; Package pybind11-abi conflicts for:; psi4==1.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2991#issuecomment-1697915972:59,error,error,59,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1697915972,1,['error'],['error']
Availability,"I checked `ctest -R sapt` because I was expecting sapt6 to fail, being the most thorough per-term and per-sapt-level test. However, the Ind30 fault doesn't show up at that level because (1) we check elst/exch/ind/disp components but not e.g., elst10, elst20 terms and (2) the deltaHF term by definition compensates for (read: hides) the induction term problem. So current test suite is ok, though that itself is a failure demanding more tests. :-)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1803#issuecomment-582743062:142,fault,fault,142,https://psicode.org,https://github.com/psi4/psi4/pull/1803#issuecomment-582743062,2,"['failure', 'fault']","['failure', 'fault']"
Availability,"I checked with an earlier version of the code, before my changes were merged. Your example file dies at the same place, with the same error.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/786#issuecomment-323533197:134,error,error,134,https://psicode.org,https://github.com/psi4/psi4/issues/786#issuecomment-323533197,1,['error'],['error']
Availability,"I compiled this PR with clang, ran `gibbs`, and still got the exact same error as Travis reports. ```; Structure for next step:; Cartesian Geometry (in Angstrom); C 0.0000000000 0.0000000000 0.0000000000; H 0.0000000000 0.8836649185 -0.6248454599; H 0.8836649185 0.0000000000 0.6248454599; H -0.8836649185 0.0000000000 0.6248454599; H 0.0000000000 -0.8836649185 -0.6248454599; ; Fatal Error: User specified point group (C2v(Z)) is not a subgroup of the highest detected point group (Cs(Z)). If this is because the symmetry increased, try to start the calculation again from the last geometry, after checking any symmetry-dependent input, such as DOCC.; ```. This problem is not specific to gcc compilers, and it looks to be a bug in finding the highest point group. I'm puzzled how the original test didn't run into this problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1429#issuecomment-449682307:73,error,error,73,https://psicode.org,https://github.com/psi4/psi4/pull/1429#issuecomment-449682307,2,"['Error', 'error']","['Error', 'error']"
Availability,"I completely agree with @bgpeyton and @amjames that there are probably misuses of Z & mass in the code resulting from unclear or inconsistent definitions (I think there's even cases where the `Mol.property()` fn differs in behavior from the `Mol.fproperty()` fn (that includes dummy atoms). It would be great to survey the code and hunt these down. My trepidation comes in because Mol is delicate w/the two versions of ghosting (type A (not reversible): `@C`, type B (reversible): `extract_subset(1, 2)`) and I worry that changes would start an avalanche. In fact I definitely recommend _not_ ""fixing"" `Mol.Z()` the way I would like (`C` and `@C` both return 6) because lots of places in the Mol code depend on using that fn as a test for type A ghostedness. > I'm very unfamiliar with how masses and fragment identities are passed around. Is there a case in which having the ghost masses zero would keep you from making a properly-massed all-real-atoms copy of that molecule? That would definitely preclude any option of setting them zero permanently. What happens is that every atom at parse-time gets read into a CoordEntry object that holds Z, ghost, charge, mass, element symbol, coords, etc. If the atom is type-A ghost, then Z, ghost, and charge get set accordingly. There is no other info so type-A is not eligible to return to reality. The fragmentation pattern is also stored at parse-time with all-`Real`. For a trimer, when you `extract_subsets(1, 2)`, the `Mol.fragment_types_` gets reset to `[Real, Ghost, Absent]`. The CoordEntries don't change, but every function in Mol is trained to iterate over the frags, and handle Ghost or Absent differently, so that in the fn output, they _appear_ ghosted (type B) or absent. Because the mass, Z info in the CoordEntry is unchanged, this ghostedness is reversible. So in the type B sense, mass must not be set to 0 permanently b/c then type B would be irreversible. I suppose you're advocating zeroing mass for type A? That'd be more consistent",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/909#issuecomment-363473061:343,down,down,343,https://psicode.org,https://github.com/psi4/psi4/issues/909#issuecomment-363473061,1,['down'],['down']
Availability,I completely agree. Which downstream packages should I check for usage of the functionality?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2266#issuecomment-966582267:26,down,downstream,26,https://psicode.org,https://github.com/psi4/psi4/pull/2266#issuecomment-966582267,1,['down'],['downstream']
Availability,"I currently plan to combine the three geometry generators into one because their logic is so similar. Could you be more specific about the interface changes and desired new features _after_ the C++ code is moved over? If combining the geometry generators is obviously going to break something down the road, best to find out now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/884#issuecomment-360926158:293,down,down,293,https://psicode.org,https://github.com/psi4/psi4/issues/884#issuecomment-360926158,1,['down'],['down']
Availability,"I decided to take an intermediate step regarding this issue by making a PR wherein the error messages received upon breaking COSX with negative grid weights are more informative to the end user. Not a full fix, but at least with that, an end user that runs into this issue can know how to get around it. In the meantime, what do we all think the _best_ fix for this issue would be? Discussion in this chat has different reformulations of the X matrix to be able to handle grids with negative grid weights, while recent discussion in the Psi4 dev Slack has suggested the possibility of simply removing grid configurations that lead to negative weights. Which approach is the best, I do not immediately know. Also worth sharing in this chat, it seems that the negative grid weights that were observed as part of this issue, are _not_ an explicit bug, but rather a consequence of how the grids weights are determined.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2890#issuecomment-1481617013:87,error,error,87,https://psicode.org,https://github.com/psi4/psi4/issues/2890#issuecomment-1481617013,2,['error'],['error']
Availability,"I did a couple more things here:. 1) At the suggestion of the reviewers, I added individual reference energies for the current composite methods (which were acquired at tight tolerances - 1e-10 for D and E convergence, and 1e-14 for ERI screening). The COSX and LinK methods now test against these corresponding reference energies at the normal 1e-6 atol. . 2) With 1) in mind, I made more sweeping changes as well. First, the reference energies are now kept in a dictionary rather than spread out across different variables. This improves readability and should facilitate the addition of new methods, Composite or otherwise, to the scf5 testing suite. Additionally, composite methods are tested in a loop per test case. This will facilitate the testing of new Composite methods added to Psi4, as will happen in the future.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2768#issuecomment-1310496110:175,toler,tolerances,175,https://psicode.org,https://github.com/psi4/psi4/pull/2768#issuecomment-1310496110,1,['toler'],['tolerances']
Availability,"I didn't examine the code in detail; does it use aliasing? I think Neese and coworkers use it a lot, the idea is to make the integrand smoother so that the quadrature errors are smaller and one can get away with smaller grids.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2567#issuecomment-1120063699:167,error,errors,167,https://psicode.org,https://github.com/psi4/psi4/pull/2567#issuecomment-1120063699,1,['error'],['errors']
Availability,I didn't know psi5 already existed :laughing: . I do prefer to start with a version number that is clearly 'newer' then the previous ones (like 4.0b5). And 1.0 seems like a downgrade.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/213#issuecomment-182947030:173,down,downgrade,173,https://psicode.org,https://github.com/psi4/psi4/issues/213#issuecomment-182947030,2,['down'],['downgrade']
Availability,"I didn't think of that, @loriab. These Hessians come in peace (although they could well impart the occasional seg fault). I was within epsilon of having the code done last week (literally; I screwed up some orbital energy scaling term somehow) so I came very close to beating `1.0`. Still, this code is almost useless until we get DF and KS terms in there, so no sense in hurrying it into a new release version.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/437#issuecomment-230548237:114,fault,fault,114,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-230548237,1,['fault'],['fault']
Availability,"I do need to do H-by-E here. I wish there were analytic rohf gradients available. I'm not in need of a fix for this immediately, just something I came across and wanted to raise it as an issue. If this will get fixed by the aforementioned PR and future efforts, that sounds good to me.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1897#issuecomment-632986963:71,avail,available,71,https://psicode.org,https://github.com/psi4/psi4/issues/1897#issuecomment-632986963,1,['avail'],['available']
Availability,"I don't comment here all that often anymore, which is bittersweet (and I very much miss both my colleagues on PSI4 and the Vortex). We have gone through my old notes on CCA (sketch at best, we know), and many nested references therein. For Cartesian AOs, CCA matters - this lets you use a single normalization coefficient for everything, and tolerate non-normalized off-diagonal cartesian tensor components (i.e, xx is normalized in D, xy is not normalized in D, xxx is normalized in F, xxy or xyz is not normalized in F) - Jet taught me this and it is one of the coolest tricks in the book. For spherical AOs, as far as we can tell, there is *no* CCA convention except that everything be normalized (as literally all codes do). The one ""CCA"" paper we can find on this topic itself glancingly cites an older Schlegel / Frisch paper (I think before the big happening), which itself is outdated by about > two dozen articles on solid harmonics. Everyone who codes integrals deals with basis ordering - what you shudder about is weird normalization factors (particularly non-diagonal ones), not rigid permutations. . The message is this: I am not convinced there is a standard. So maybe not optimal to follow to follow an implied one. Show me a reference of a real, used standard, and Lightspeed and Tachyon will be there tomorrow. . [report (7).pdf](https://github.com/psi4/psi4/files/8746880/report.7.pdf); [jcc.20815.pdf](https://github.com/psi4/psi4/files/8746882/jcc.20815.pdf); [sh.pdf](https://github.com/psi4/psi4/files/8746881/sh.pdf)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2537#issuecomment-1133519662:342,toler,tolerate,342,https://psicode.org,https://github.com/psi4/psi4/pull/2537#issuecomment-1133519662,1,['toler'],['tolerate']
Availability,"I don't have a chance to compile with icpc 18 right now, but we do have it; at NIH. One way to narrow this problem down is to wrap half of the; matrix.h functions in preprocessor pragmas to kill optimization (; https://software.intel.com/en-us/node/524550), leaving the rest compiled as; normal with -O2 or higher. By eliminating half of the functions'; optimization each time, it should be quite easy to figure out which; function is causing problems by bisection. On Mon, Feb 26, 2018 at 4:11 PM, Justin Turney <notifications@github.com>; wrote:. > I'm hitting a similar error message with dcft_gradient_UHF.cc but it; > reports that the error is in libmints/matrix.h. Reducing the optimization; > level was the only way I could get it to compile. Even compiling with -O2; > gives the error, -O1 is the only way to resolve it.; >; > I see no issue with the compiler- and file-specific flags for this.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/923#issuecomment-368651645>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AAMUmdYwvJwuQd4BJz52tlrgzOg8dBWUks5tYx3YgaJpZM4SPiMy>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/923#issuecomment-368659317:115,down,down,115,https://psicode.org,https://github.com/psi4/psi4/issues/923#issuecomment-368659317,4,"['down', 'error']","['down', 'error']"
Availability,"I don't know if it's relevant or not, but that error message was produced with the `psi4/linux-64::psi4-1.3.2+ecbda83-py37h31b3128_0` build from the `psi4` conda channel.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2080#issuecomment-759704666:47,error,error,47,https://psicode.org,https://github.com/psi4/psi4/issues/2080#issuecomment-759704666,1,['error'],['error']
Availability,"I don't know if this is the same problem, but how did you clone the repo? . In the manual, it says that you should do a git --recursive clone rather than just a git clone. We had trouble with pcm if we didn't do this, but the error appeared during compilation of pcm.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/207#issuecomment-170788018:226,error,error,226,https://psicode.org,https://github.com/psi4/psi4/issues/207#issuecomment-170788018,1,['error'],['error']
Availability,"I don't know why clang was so slow here. When I was testing on a working branch, the clangs finished in 42 min or so (27 & 35). [This](https://anaconda.org/conda-forge/llvmdev/files) might be a 3.9 clang. It's hard to tell without downloading the packages. On the whole, I expect travis to have a more diverse compiler selection. Should we ultimately aim for:; - clang 3.6, python 2.7; - clang 3.9, python 3.5; - gcc 4.9, python 2.7; - gcc 6, python 3.5",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/510#issuecomment-259565547:231,down,downloading,231,https://psicode.org,https://github.com/psi4/psi4/pull/510#issuecomment-259565547,1,['down'],['downloading']
Availability,"I don't know, but it should presumably download that tar file from the appropriate place (sourceforge?). Perhaps you can set up the tar file where it expects. I'm not a psi4 developer - I only use it for comparing energies occasionally. Perhaps someone else has sorted that error out?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/55#issuecomment-40240628:39,down,download,39,https://psicode.org,https://github.com/psi4/psi4/issues/55#issuecomment-40240628,2,"['down', 'error']","['download', 'error']"
Availability,"I don't like the error message.; 1. ""nuclear fusion"" makes me think of the process that happens in a reactor, and ""near nuclear fusion"" is confusing. Please reword.; 2. This function should have no reference to symmetry detection tolerance. It's more abstract than that.; 3. There should be a comma between the words ""error"" and ""please.""; 4. I do not approve the ""please open an issue"" error message here. There are many possible features somebody could ask for Psi, and developer time is very limited. I read this message as promising to give ""turn error into warning"" priority for development if anybody requests. That's not a promise I want to fulfill when I'm not even convinced that ""turn error into warning"" is a good idea. I would much prefer removing that part of the error message entirely and leaving it to the user to post a feature request _without_ special encouragement.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2465#issuecomment-1068171547:17,error,error,17,https://psicode.org,https://github.com/psi4/psi4/pull/2465#issuecomment-1068171547,7,"['error', 'toler']","['error', 'tolerance']"
Availability,"I don't quite understand what the numbers in brackets mean; * 1 -0.972087 ( 0, 0) 2AX 3AA.; * 2 -0.165902 ( 2, 2) 3AA 4AX.; * 3 -0.165902 ( 4, 3) 3AA 5AX.; I'm also not sure that 3AA 4AX means 1-st up active space electron in 3-rd orbital, 2-nd up electron on 4-th orbital, 1-st down electron on 4-th orbital. This would explain the sign of the determinant, since in ORCA order is reversed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/796#issuecomment-439626447:279,down,down,279,https://psicode.org,https://github.com/psi4/psi4/issues/796#issuecomment-439626447,1,['down'],['down']
Availability,I don't really see if the CI failures are related to my changes. @loriab Any ideas?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2967#issuecomment-1560779360:29,failure,failures,29,https://psicode.org,https://github.com/psi4/psi4/pull/2967#issuecomment-1560779360,1,['failure'],['failures']
Availability,I don't reproduce a failure of `tests/pytests/test_standard_suite.py::test_mp2_hessian_module` on master. I don't have enough details to say more. `sapt7` is indeed unrelated to this PR. See #2327.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-946763755:20,failure,failure,20,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-946763755,1,['failure'],['failure']
Availability,I don't see a limitation for spherical functions? Only for cartesian where psi4 would throw an error.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1574#issuecomment-471974294:95,error,error,95,https://psicode.org,https://github.com/psi4/psi4/issues/1574#issuecomment-471974294,1,['error'],['error']
Availability,"I don't see any wB97X-D3/def2-TZVP energies from Psi4 1.4.1 in your data, just wB97X-D/def2-SVP. . Looking at the data you have from Psi4 1.4.1, the wB97X-D/def2-SVP energies relative to the minimum energy conformer for each molecule are similar to the relative energies from ORCA. Though some conformers have significant differences for the relative energy from ORCA vs from Psi4, most differences are around 1 kcal/mol or less. I would expect similar deviations between wB97X-D/def2-SVP and wB97X-D/def2-TZVP results that were both computed using the same software. The energy is sensitive to the quality of the basis set. Using a different dispersion correction than the 'reference' ORCA energies doesn't help either. The differences compound with different implementations of various algorithms between different software packages. For molecules with conformers that are all close in energy, these deviations will bring the r<sup>2</sup> way down.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2351#issuecomment-974333804:946,down,down,946,https://psicode.org,https://github.com/psi4/psi4/issues/2351#issuecomment-974333804,1,['down'],['down']
Availability,"I don't think the ROHF orbital energies are incorrect, but they're [ambiguously defined](https://aip.scitation.org/doi/10.1063/1.4849615) due to an arbitrary choice of coupling between same-symmetry closed and open shell blocks. We do have [CUHF](https://aip.scitation.org/doi/full/10.1063/1.3503173) available, which gives an S^2 eigenfunction (i.e. ROHF) with the orbital energies emerging the same as what would come from semicanonicalization; either that or the default ROHF (followed by semicanonicalization) should be equally good references for SAPT, I think.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1975#issuecomment-675473265:301,avail,available,301,https://psicode.org,https://github.com/psi4/psi4/issues/1975#issuecomment-675473265,1,['avail'],['available']
Availability,"I don't think this has anything to do with the projection; but rather the use of the second-order convergence acceleration scheme. Orca's `FMatrix` guess also misses the core electrons (since they don't exist in the orbitals), but the first diagonalization should reintroduce them. Of course, a question is, how is the projection implemented in Orca? You can either project the full Fock matrix, in which case the null space will be zero, or you could just project the XC part in which case the null space will essentially be the core Hamiltonian. The latter scheme would restore the core orbitals, but they wouldn't be screened at all; you might also introduce spurious valence states which will ruin the performance of the guess... Probably the best scheme would be to do the mixed-basis version in which you compute the Fock matrix in the new basis by the orbitals in the old basis without any projection operators. However, this method requires the capability to compute mixed-basis integrals which is not available in Psi4; see equation 2 in [Chem. Phys. Lett. 531, 229 (2012)](https://doi.org/10.1016/j.cplett.2012.02.012).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1972#issuecomment-664972020:1010,avail,available,1010,https://psicode.org,https://github.com/psi4/psi4/issues/1972#issuecomment-664972020,1,['avail'],['available']
Availability,"I don't think you've pulled from github since the plugin fix was added. As long as your `printmo.cc` has `Process::environment.wavefunction();` in it, you'll keep getting this error. This (https://github.com/psi4/psi4/blob/master/share/plugin/mointegrals.cc.template) is the corrected template.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/308#issuecomment-195795181:176,error,error,176,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-195795181,1,['error'],['error']
Availability,"I don't understand what Peter means by ""separate tests from docs"". I suspect the word ""tests"" should be ""samples,"" and I have no concrete idea as to how this PR combines them. My best guess is have ""a build of the documentation target"" not be what re-generates `samples`. I strongly disagree with removing git command line instructions. They will work in 99% of cases, and not following these instructions could cause merge conflicts that will take more effort from core devs to shepherd new devs through. For the sample regeneration section: Give examples of why changes might not be okay. Move the bullet point explaining the point of the auto-commit up a level. For the documentation section: I don't understand the point of the first bullet point. Explain why an edit to this branch might be needed. Explain the difference between deploy-preview and the `sphinxman-html` download. Make clear that editing the PR branch is also needed for the `sphinxman-html` download.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2364#issuecomment-981993088:875,down,download,875,https://psicode.org,https://github.com/psi4/psi4/pull/2364#issuecomment-981993088,4,['down'],['download']
Availability,"I don't want to take more of your time.; I tried the input that you sent me and the calculation ends with the following error. ---. PSIO_ERROR: Can't find TOC Entry IWL Buffers; PSIO_ERROR: unit = 33, errval = 13; PSIO_ERROR: 13 (no such TOC entry); Traceback (most recent call last):; File ""<string>"", line 23, in <module>; File ""/home/matias/anaconda/share/psi/python/driver.py"", line 637, in energy; procedures['energy'][lowername](lowername, **kwargs); File ""/home/matias/anaconda/share/psi/python/proc.py"", line 582, in run_mp2; run_conv_omp2(name, **kwargs); File ""/home/matias/anaconda/share/psi/python/proc.py"", line 538, in run_conv_omp2; psi4.occ(); RuntimeError: PSIO Error. ---. In the input you used some keywords that i'm not familiar with, so i have to study the manual a little more, to understand the error.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/105#issuecomment-144750805:120,error,error,120,https://psicode.org,https://github.com/psi4/psi4/issues/105#issuecomment-144750805,3,"['Error', 'error']","['Error', 'error']"
Availability,I don't wholly trust the libint/libmints error messages to trigger when requested angmom too high. you've ruled out the libint compilation?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1992#issuecomment-681079304:41,error,error,41,https://psicode.org,https://github.com/psi4/psi4/issues/1992#issuecomment-681079304,1,['error'],['error']
Availability,"I echo Daniel on using the Wavefunction.variables map for storage of the pcm energy. Eventually, Wfn.variables will be primary and P::e dropped, but for now, make them mirror. https://github.com/psi4/psi4/blob/master/doc/sphinxman/source/pcmsolver.rst seems a good place for all Psi4+PCMSolver documentation. And maybe mention on the CC page that CC+PCM is available if PCMSolver enabled.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/683#issuecomment-296845920:2,echo,echo,2,https://psicode.org,https://github.com/psi4/psi4/pull/683#issuecomment-296845920,2,"['avail', 'echo']","['available', 'echo']"
Availability,"I find it troubling that on my computer the nuclear repulsion energy is ""inf"":. ```; Running in c1 symmetry. Rotational constants: A = 0.00468 B = 0.00339 C = 0.00276 [cm^-1]; Rotational constants: A = 140.36411 B = 101.76200 C = 82.71015 [MHz]; Nuclear repulsion = inf; ```. Looking at your input I see duplicated atoms. I've modified my local copy of Psi4 to report the duplicated atoms:. ```; ERROR: Atom 51 near to atom 26.; ERROR: Atom 52 near to atom 27.; ERROR: Atom 53 near to atom 28.; ERROR: Atom 54 near to atom 29.; ERROR: Atom 55 near to atom 30.; ERROR: Atom 56 near to atom 31.; ERROR: Atom 57 near to atom 32.; ERROR: Atom 58 near to atom 33.; ERROR: Atom 59 near to atom 34.; ERROR: Atom 60 near to atom 35.; ERROR: Atom 61 near to atom 36.; ERROR: Atom 62 near to atom 37.; ERROR: Atom 63 near to atom 38.; ERROR: Atom 64 near to atom 39.; ERROR: Atom 65 near to atom 40.; ERROR: Atom 66 near to atom 41.; ERROR: Atom 67 near to atom 42.; ERROR: Atom 68 near to atom 43.; ERROR: Atom 69 near to atom 44.; ERROR: Atom 70 near to atom 45.; ERROR: Atom 71 near to atom 46.; ERROR: Atom 72 near to atom 47.; ERROR: Atom 73 near to atom 48.; ERROR: Atom 74 near to atom 49.; ERROR: Atom 75 near to atom 50.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/158#issuecomment-129556718:396,ERROR,ERROR,396,https://psicode.org,https://github.com/psi4/psi4/issues/158#issuecomment-129556718,25,['ERROR'],['ERROR']
Availability,"I get this error when running `cmake -H. -Bobjdir_simint -DCMAKE_BUILD_TYPE=Debug -DENABLE_simint=ON` on my laptop with CMake 3.2.2; ```; CMake Error at /usr/share/cmake-3.2/Modules/ExternalProject.cmake:2027 (get_property):; INTERFACE_LIBRARY targets may only have whitelisted properties. The; property ""_EP_IS_EXTERNAL_PROJECT"" is not allowed.; Call Stack (most recent call first):; /usr/share/cmake-3.2/Modules/ExternalProject.cmake:2324 (_ep_add_configure_command); CMakeLists.txt:154 (ExternalProject_Add); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/625#issuecomment-281017579:11,error,error,11,https://psicode.org,https://github.com/psi4/psi4/pull/625#issuecomment-281017579,2,"['Error', 'error']","['Error', 'error']"
Availability,"I got a high AM version generated. It built all its files (some indiv files take 10h to compile) and then it failed on the link step. I've still got the directory, so I'm hoping to investigate more next week. The generated code is at [Libint2-export-7-7-4-8-8-5_mm4f12ob2.tgz](https://github.com/loriab/libint/releases/download/v0.1/Libint2-export-7-7-4-8-8-5_mm4f12ob2.tgz) if you're feeling adventurous.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1341#issuecomment-1130271539:319,down,download,319,https://psicode.org,https://github.com/psi4/psi4/issues/1341#issuecomment-1130271539,1,['down'],['download']
Availability,I got it. It is my fault. I comment out the wrong line):. @loriab,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/428#issuecomment-229627679:19,fault,fault,19,https://psicode.org,https://github.com/psi4/psi4/issues/428#issuecomment-229627679,1,['fault'],['fault']
Availability,"I got that appveyor py27 error, too. Rebasing to bring in #1278 fixed it. No urgency, just when you're ready.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1235#issuecomment-427007974:25,error,error,25,https://psicode.org,https://github.com/psi4/psi4/pull/1235#issuecomment-427007974,1,['error'],['error']
Availability,"I got the static_assert error again now. The file it's triggering on hasn't had recent changes, so I don't know why it's popping up now, unless it's an intermittant/brownout strategy to push upgrades. Anyways, switching the llvm version https://github.com/psi4/psi4/pull/2791/files#diff-9f5f8e4d87a7d1fbb0e8f30d1c680c5f42f6af10c04aa81d342c7dfa5af9a99fR10 at least gets the build started.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2808#issuecomment-1333200894:24,error,error,24,https://psicode.org,https://github.com/psi4/psi4/pull/2808#issuecomment-1333200894,1,['error'],['error']
Availability,"I had no problems with compilation on my laptop (clang 4.0.0) and on our cluster (gcc-4.9, g++-4.9). However, I am not able to generate plugins. This command gives the following error:. ```; $PSI4HOME --new-plugin-makefile psi4_inversion; raise KeyError(""The file %s does not exist."" % args[""input""]); KeyError: 'The file input.dat does not exist.'; ```. If I create a blank input.dat file, it does not quit without an error, but it doesn't read the --new-plugin-makefile option.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-254667012:178,error,error,178,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-254667012,2,['error'],['error']
Availability,"I had the same issue when I tested cdomp2-2. Here's the list of all my failed tests:; 76:cdomp2-2; 123:dfmp2-grad2; 125:dfmp2-grad4; 127:dfomp2-2; 129:dfomp2-4; 131:dfomp2-grad2; 303:stability2. I am using Ubuntu 14.04 with ATLAS for BLAS and LAPACK. Update:; After I changed to Intel MKL, the only failed case in tests is 303:stability2. Because it's just a value off, I just ignore it and continue installing. > ## Output:; > ; > Nuclear repulsion energy..........................................PASSED; > Reference energy..................................................PASSED; > Stability eigenvalues with symmetry: computed value (0.094068) does not match (0.0940977919192).; > Check your output file for reporting of the matrices.; > An error has occurred python-side. Traceback (most recent call last):; > ; > File ""<string>"", line 58, in <module>; > ; > File ""/home/mrabsence/Downloads/soft/psi4/share/python/p4util/util.py"", line 209, in compare_matrices; > raise TestComparisonError(""\n""); > ; > TestComparisonError: ; > ; > Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); > <end of output>; > Test time = 1.80 sec",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/391#issuecomment-223730550:744,error,error,744,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-223730550,2,"['Down', 'error']","['Downloads', 'error']"
Availability,I have a computer at work with openSUSE 13.2 (Newer version compared to your 12.3) I have recently compiled psi4 on it without this error. Maybe it's an issue with that version of ld? Your error message seems to indicate that ld knows this behavior is a bug. My version of ld is newer than yours also:; $ ld --version; GNU ld (GNU Binutils; openSUSE 13.2) 2.24.0.20140403-6.1,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/785#issuecomment-323494378:132,error,error,132,https://psicode.org,https://github.com/psi4/psi4/issues/785#issuecomment-323494378,2,['error'],['error']
Availability,"I have added a test case similar to the test case for the gradient. I do not know of other codes that have this capability but the test case enumerate all the necessary terms and check for the correct expansion formula for a trimer truncated at the two-body level. Without this PR, the many-body expansion terms for the Hessian are not summed up correctly if the VMFC basis set superposition error scheme is used. The `_sum_cluster_ptype_data` function is supposed to construct the total cluster gradient or Hessian from the fragment computations. Documentation is beyond the scope of this trivial PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2389#issuecomment-1003755930:392,error,error,392,https://psicode.org,https://github.com/psi4/psi4/pull/2389#issuecomment-1003755930,1,['error'],['error']
Availability,"I have adjusted the case accordingly and I'm still encountering an error message: . ```; import psi4; import numpy as np. # Set Psi4 options for the calculation; psi4.set_options({; 'basis': 'cc-pVtz',; 'reference': 'rohf',; 'docc': [5, 0, 1, 1], # Doubly occupied orbitals; 'socc': [0, 0, 1, 0], # Singly occupied orbitals; 'restricted_docc': [5, 0, 0, 0], # Core orbitals; 'active': [0, 0, 2, 0], # Active orbitals; 'MCSCF_MAXITER': 100; }). # Set memory; psi4.set_memory('8000 MB'). # Define CF molecule geometry template; cf_geometry = """"""; 0 2; C; F 1 {0}; symmetry c2v; """""". # Define R values for scanning; a_end = 1.325; b_start = 1.355; b_num = 20; aa = np.linspace(1, 1.2, 6); a = np.linspace(1.25, a_end, 3); b = np.linspace(b_start, 2.5, b_num); c = np.linspace(2.6, 10, 8); Rvals = np.concatenate((aa, a, b, c), axis=None). # Dictionary to store energies; ecp = {}. # Loop over R values; for R in Rvals:; if R <= a_end:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 0, 'NUM_DETS_PRINT': 40}); elif R >= b_start:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 1, 'NUM_DETS_PRINT': 40}). # Create CF molecule geometry; cf = psi4.geometry(cf_geometry.format(R)); ; # Run CASSCF calculation; try:; casscf_energy = psi4.energy('casscf'); ; # Store energies; ecp[R] = [; casscf_energy,; psi4.core.variable('ci root %d TOTAL ENERGY' % 0),; psi4.core.variable('ci root %d TOTAL ENERGY' % 1),; psi4.core.variable('ci root %d TOTAL ENERGY' % 2); ]; except Exception as e:; print(f""Error at R={R}: {e}""); ; # Clean up Psi4 core; psi4.core.clean(); ```; The new error message is: ; ```; Warning: iopen=0,opentype!=closed. Making iopen=1; ras_set3():Warning:Occupied electrons beyond ACTIVE orbs!; (set_ras_parms): detecting 1 alpha electrons in RAS III for irrep 3.; Some parts of DETCI assume all elec in I and II; Traceback (most recent call last):; File ""cf_casscf_pec.py"", line 50, in <module>; casscf_energy = psi4.energy('casscf'); File ""/home/sanctus/psi4",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2153825631:67,error,error,67,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2153825631,1,['error'],['error']
Availability,"I have also had trouble with intel 16.0.3 on my mac. I have not been able to compile PSI4 with intel. . Here is what appears if I do, icpc -v. ```; icpc version 16.0.3 (gcc version 4.9.0 compatibility) ; ```. I got a bunch of errors in dcft/dcft_df_tensor.cc about how the compiler can't recognize "">>"", so I changed all instances of "">>"" to ""> >"". This seems to work, but I get another error in detci/ciwave.h. . ```; In file included from /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc(49):; /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/ciwave.h(414): error: namespace ""std"" has no member ""tuple""; std::vector<std::tuple<int, int> > states_vec);; ^. In file included from /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc(49):; /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/ciwave.h(414): error: expected a "">""; std::vector<std::tuple<int, int> > states_vec);; ^. In file included from /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc(49):; /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/ciwave.h(414): error: expected a "")""; std::vector<std::tuple<int, int> > states_vec);; ^. In file included from /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc(49):; /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/ciwave.h(434): error: namespace ""std"" has no member ""tuple""; std::vector<std::tuple<int, int, double> > states_vec);; ^. In file included from /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc(49):; /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/ciwave.h(434): error: expected a "">""; std::vector<std::tuple<int, int, double> > states_vec);; ^. In file included from /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc(49):; /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/ciwave.h(434): error: expected a "")""; std::vector<std::tuple<int, int, double> > states_vec);; ^. compilation aborted for /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/param",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/444#issuecomment-232825635:226,error,errors,226,https://psicode.org,https://github.com/psi4/psi4/issues/444#issuecomment-232825635,4,['error'],"['error', 'errors']"
Availability,"I have been meaning to mention this for a while actually. . If we require c++11, why is there an option in setup to disable c++11 support? Also, why can CMake revert to the older standard?. with intell 13.1, I will see this during the configure step: ; `-- Buggy compiler support for C++11. Using Older Standard.` . If I edit this line in CMakeCache.txt; `CMAKE_CXX_FLAGS:STRING=-DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=gnu++98`; to `-std=c++11` before I make I can build successfully, but if I don't I will get the same errors mentioned above. . CMake should produce an error if C++11 support is not detected, fail at the configuration step, and report why to the user. I think the current behavior is very confusing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/188#issuecomment-156910025:540,error,errors,540,https://psicode.org,https://github.com/psi4/psi4/issues/188#issuecomment-156910025,2,['error'],"['error', 'errors']"
Availability,"I have built it from the recent master, this is the HEAD:; ```git; commit d7529df57c2815cfb43a88d9b739c94c3a2322c4 (HEAD -> master, origin/master, origin/HEAD); Author: Susi Lehtola <susi.lehtola@alumni.helsinki.fi>; Date: Thu Aug 15 15:55:09 2019 +0300. Add some short and simple tests to make sure calculations work in weird basis sets. (#1701); ```. cmake options I used. ```bash; CC=icc CXX=icc FC=ifort cmake .. -DCMAKE_INSTALL_PREFIX=/home/filip/software/psi4-1.4rc-opt -DMAX_AM_ERI=7 -DBLAS_TYPE=MKL -DENABLE_OPENMP=ON -DENABLE_simint=ON -DCMAKE_CXX_FLAGS=""-march=haswell"" -DCMAKE_C_FLAGS=""-march=haswell"" -DSIMINT_VECTOR=avxfma; ```. To the second point, I've stripped down my test case, in which I noticed this issue, as it has some external dependencies (not publicly available yet, cause it's WIP). I can confirm I'm seeing a crash with the script I have provided. See below:; EDIT: conda pre-built binaries 1.3.2 works fine. Is it my build issue?; ```;  python minimal.py . *** tstart() called on filip-ThinkPad-E495; *** at Sun Aug 25 15:47:40 2019. //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Guess SCF, 3-21G Basis //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. => Loading Basis Set <=. Name: 3-21G; Role: ORBITAL; Keyword: BASIS; atoms 1-2 entry HE line 28 file /home/filip/software/psi4-1.4rc-opt/share/psi4/basis/3-21g.gbs . ---------------------------------------------------------; SCF Castup computation ; ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; UHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C_inf_v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; HE 0.000000000000 0.000000000000 -1.481692970000 4.002603254130; Gh(HE) 0.000000000000 0.000000000000 1.4816",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282:677,down,down,677,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282,4,"['avail', 'down']","['available', 'down']"
Availability,"I have discovered that this crash actually happens when Psi4 is only given a small amount of memory.; The input from original report did not try to set the memory limit, while my input is not setting it correctly, so everything so far has been run with the default 500 MB. After a round of RTFM on my part, it looks like `set memory 16GB` is _not_ an acceptable way to, well, set the memory limit, and it is silently ignored by Psi4. If I correctly set the memory to 4GB or something big enough, this crash does not happen. There are still multiple bugs to be found _somewhere_:. 1. DPD/PSIO should realize that there is not enough memory and lower the cachelevel; 2. If the cachelevel is set too high compared to the amount of memory it should be an error exit with a meaningful error message, not an obscure PSIO error.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2261#issuecomment-1257167331:751,error,error,751,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1257167331,3,['error'],['error']
Availability,"I have fixed the code that connects the initial, separated fragments in; optking. The CH3F case now runs fine. The code was very much in error. I; will submit the correction whenever the main psi4 trunk runs again. At the; moment, the python there seems broken. On Sun, Mar 13, 2016 at 2:52 PM, Rollin King rking@bethel.edu wrote:. > The current code detected 4 different fragments for the extended CH3F.; > Then it tried to connect them. It really should have been able to do so.; > I don't see why it didn't work, and I'm looking for a bug.; > ; > On Sun, Mar 13, 2016 at 2:00 PM, Lori A. Burns notifications@github.com; > wrote:; > ; > > Certainly the flexibility of the optimizer oughtn't be reduced. In the; > > absence of fixed/frozen keywords or user supplied/edited intco (do you need; > > a keyword to signal do-read-intco instead of accepting any it finds?), it's; > > probably reasonable to assume a full optimization is desired. Maybe grep; > > '~' needs to catch a gradient.rms(), too, next to the optking-active rms; > > gradient.; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/issues/310#issuecomment-196021110.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310#issuecomment-196087369:137,error,error,137,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196087369,1,['error'],['error']
Availability,"I have installed mkl-devel, but now I have a new issue:. ```; CMake Error at tests/fsapt-terms/CMakeLists.txt:4 (file):; file COPY cannot find; ""/server-home1/.../psi4/tests/fsapt-terms/../../psi4/share/psi4/fsapt/fsapt.py"". CMake Error at tests/fsapt-allterms/CMakeLists.txt:6 (file):; file COPY cannot find; ""/server-home1/.../psi4/tests/fsapt-allterms/../../psi4/share/psi4/fsapt/fsapt.py"".; ```. Is there a cmake comment I should look at in the psi4 documentation?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/954#issuecomment-381277308:68,Error,Error,68,https://psicode.org,https://github.com/psi4/psi4/issues/954#issuecomment-381277308,2,['Error'],['Error']
Availability,"I have no horse in this race in terms of is the behavior of `Molecule.mass` or `Molecule.Z` acting strangely, but the inconstancy is a problem. If we took every property test in the suite and added a test where ghost atoms are involved I think we would turn up some failures since the way molecular weight is calculated in `optrot.cc` as @bgpeyton described does not properly ignore ghosted atoms and i wouldn't be surprised if there were others.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/909#issuecomment-363463003:266,failure,failures,266,https://psicode.org,https://github.com/psi4/psi4/issues/909#issuecomment-363463003,1,['failure'],['failures']
Availability,"I have reap.py in tests/ now, and pywrap-db2 is working in addition to pywrap-freq-e-sowreap, but pywrap-opt-sowreap is still failing. That appears to be a bug or an error in the input file since I can't even run that one ""by-hand"". ; Error shown below:. ```; Traceback (most recent call last):; File ""<string>"", line 24, in <module>; File ""/home/ajay/psi4/source/lib/python/driver.py"", line 1191, in optimize; thisenergy = gradient(name, **kwargs); File ""/home/ajay/psi4/source/lib/python/driver.py"", line 824, in gradient; fmaster.write(p4util.format_options_for_input().encode('utf-8')); TypeError: format_options_for_input() takes exactly 1 argument (0 given); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/192#issuecomment-157864804:166,error,error,166,https://psicode.org,https://github.com/psi4/psi4/pull/192#issuecomment-157864804,2,"['Error', 'error']","['Error', 'error']"
Availability,"I have revised the footnote. On Wed, Jul 8, 2015 at 11:53 PM, David Sherrill notifications@github.com; wrote:. > Footnote [2] of the capabilities table in the manual is a little unclear; > about what methods are available:; > ; > RHF and UHF reference are available, however the latter one should be; > requsted from DFOCC module. DF-MP2 is recommended as a faster; > alternative.; > ; > Update and revise manual. Check with Ugur about ROHF. Make appropriate; > defaults.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/106. ## . Assoc. Prof. Ugur Bozkaya; Department of Chemistry,; Ataturk University,; 25240 Erzurum, Turkey,; Tel: +90 442 231 41 14,; E-mail: ugrbzky@gmail.com,; ugur.bozkaya@atauni.edu.tr.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/106#issuecomment-119739035:212,avail,available,212,https://psicode.org,https://github.com/psi4/psi4/issues/106#issuecomment-119739035,2,['avail'],['available']
Availability,"I have reworked this PR to a general renovation of `toclen.cc`. All errors are now handled by calling `psio_error()`, OS-provided messages are decoded by a new fn that may be useful elsewhere later and the toclen fns now first check if the stream is ought to be open and error out early with a more specific error message.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2700#issuecomment-1250060587:68,error,errors,68,https://psicode.org,https://github.com/psi4/psi4/pull/2700#issuecomment-1250060587,3,['error'],"['error', 'errors']"
Availability,"I have the same issue:; ```; Python 3.6.4 |Anaconda custom (64-bit)| (default, Jan 16 2018, 18:10:19) ; [GCC 7.2.0] on linux. Ubuntu 16.04.2 LTS. python -c 'import psi4; print(psi4.__version__)'; 1.1; ```. It works under terminal and `ipython ` but crashes immediately in `jupyter notebook` with `bad_cast` error",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/862#issuecomment-369560595:307,error,error,307,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-369560595,1,['error'],['error']
Availability,I have tried the example you used and it also reported such error. Maybe it is the version of numpy that leads to this problem. Which version of numpy do you use. I use the 1.20.3.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2281#issuecomment-902411466:60,error,error,60,https://psicode.org,https://github.com/psi4/psi4/issues/2281#issuecomment-902411466,1,['error'],['error']
Availability,I have updated my psi4 program and still got the message BasisSetNotFound; How can I download and install new basis set list,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/917#issuecomment-364853728:85,down,download,85,https://psicode.org,https://github.com/psi4/psi4/issues/917#issuecomment-364853728,1,['down'],['download']
Availability,I have updated the body of the issue with details about the error message. Thanks in advance!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2916#issuecomment-1495254238:60,error,error,60,https://psicode.org,https://github.com/psi4/psi4/issues/2916#issuecomment-1495254238,1,['error'],['error']
Availability,I have updated the call points for the new signature of `triplet/doublet` and tests pass locally with warnings converted to errors. So this is ready for final review + merge. @psi4/maintainers,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1349#issuecomment-456894587:124,error,errors,124,https://psicode.org,https://github.com/psi4/psi4/pull/1349#issuecomment-456894587,1,['error'],['errors']
Availability,I have updated the docstrings and extended the error message just in case someone runs into a legitimate situation where it needs to be bypassed.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2465#issuecomment-1068147767:47,error,error,47,https://psicode.org,https://github.com/psi4/psi4/pull/2465#issuecomment-1068147767,1,['error'],['error']
Availability,"I haven't encountered this behavior myself, but it does sound faulty. Since there's the binary as fallback and more and more pieces are using c++11, I don't think we're avoiding it anymore. @robertodr was talking about the feasibility of using some advanced cmake features to handle this problem more logically (https://cmake.org/cmake/help/v3.1/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.html). They will require bumping our required cmake version, but, for developers, that's not so bad.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/188#issuecomment-157058625:62,fault,faulty,62,https://psicode.org,https://github.com/psi4/psi4/issues/188#issuecomment-157058625,1,['fault'],['faulty']
Availability,"I haven't had a chance to look into it, but yes, I suspect the version check isn't tight enough for libxc. We only recently added some that weren't available in v5. I've been using v6.2 fwiw. I'll figure out the right min pin.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3099#issuecomment-1848408260:148,avail,available,148,https://psicode.org,https://github.com/psi4/psi4/issues/3099#issuecomment-1848408260,1,['avail'],['available']
Availability,"I haven't seen any articles advocating the new workflow, but will let you know if I stumble upon them. I just skimmed the link you sent, and it looks like it raises some good points. My motivation for pushing the PR-based workflow is to make it much easier to validate (via Travis) contributions. By finding issues at the PR stage, we can avoid problems entering the codebase; pushing the new CC transform code as a PR would have prevented that simple missing ""return"" statement from affecting any users, for example. That turned out to be a non-issue, but it serves as a nice example of how apparently good code can still introduce problems that can be difficult to hunt down without our new workflow. The PR mechanism just serves to utilize the contributor's fork as a staging area for validation, which takes a lot of responsibility off the shoulders of the maintainer that clicks that ""accept"" button. A very nice side effect of all of this, is that is brings us in line with most projects on GH, and lowers the barrier to getting contributions from outside the usual suspects.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/254#issuecomment-187310350:672,down,down,672,https://psicode.org,https://github.com/psi4/psi4/pull/254#issuecomment-187310350,2,['down'],['down']
Availability,"I haven't tested it, but one issues seems (as far as I read the traceback docs) that the exception message from the `SyntaxError` contains the offending line before the normal content, which is `ExceptionName: <text>`. . Though syntax errors usually crash for me like this:. ```; Traceback (most recent call last):; File ""/Users/kruse/qc/psi4.bin/bin/psi4"", line 331, in <module>; exec(content); File ""<string>"", line 29; print '1'; ^; SyntaxError: Missing parentheses in call to 'print'. Did you mean print('1')?. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""/Users/kruse/qc/psi4.bin/bin/psi4"", line 348, in <module>; suspect_lineno = traceback.extract_tb(exc_traceback)[1].lineno - 1 # -1 for 0 indexing; IndexError: list index out of range; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1920#issuecomment-639484204:235,error,errors,235,https://psicode.org,https://github.com/psi4/psi4/issues/1920#issuecomment-639484204,1,['error'],['errors']
Availability,I haven’t rebased in a few months but I’ve no reason not to think this is ready to go if only libxc would do a tag with the changes we need. Namespaced headers would also be nice since they think the changes are API breaking anyways. And that’d be a comparatively easy adjustment for their downstream.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-449589424:290,down,downstream,290,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-449589424,1,['down'],['downstream']
Availability,"I hit your error today in building the rc3 installer. It didn't happen when the rc2 installer was originally built or for recent plain `conda install psi4` installations like you ended up with, so it has to do with available packages upstream. I've fixed it by switching channel order in the installer. If you should try a Psi4conda install again with rc3, I'd be interested to hear success/failure.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-877510349:11,error,error,11,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-877510349,3,"['avail', 'error', 'failure']","['available', 'error', 'failure']"
Availability,"I honestly don't recognize what you're trying to contribute. Are you proposing a course of action? Are you listing potentially relevant considerations for a more robust solution? Are you trying to say that ""algorithms that are both more robust and harder to implement exist""?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3045#issuecomment-1706998523:162,robust,robust,162,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1706998523,2,['robust'],['robust']
Availability,"I implemented OMP2.5 gradients with obsessively tight convergence criteria.; The fixed-Psi implementation agrees with Psi4Numpy OMP2.5 gradients within testing tolerance, but the current-Psi implementation does not. Note that `omp2p5-grad2` only has one independent gradient parameter, being a diatomic. The values the three implementations give for this parameter are:; ```; Psi4Num: 0.011650390674; New Psi: 0.011650262043; ^; Old Psi: 0.011614594883; ^; ```. My conclusion is that my fix is correct, and the reference values are not correct to within testing values, although close enough to correct to not have caused a problem for most users.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1808#issuecomment-584134023:160,toler,tolerance,160,https://psicode.org,https://github.com/psi4/psi4/issues/1808#issuecomment-584134023,1,['toler'],['tolerance']
Availability,"I incorrectly wrote that down, `property` was killed off in favor of `properties`. I do like the former better as well, but it messes with Python.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/934#issuecomment-371659678:25,down,down,25,https://psicode.org,https://github.com/psi4/psi4/issues/934#issuecomment-371659678,1,['down'],['down']
Availability,I just fixed the issue with xrange and the frozen MOs. Will go over some of @dgasmith's comments soon. I just realized I could access the spaces from ciwfn instead of mcscf_obj. I'll remove the python bindings that I added since they seem redundant now.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/722#issuecomment-304475473:239,redundant,redundant,239,https://psicode.org,https://github.com/psi4/psi4/pull/722#issuecomment-304475473,1,['redundant'],['redundant']
Availability,"I just had a look at the tests, I realise I had been using a string as the input for the solvent, but it should be float/int type! So this was indeed user error.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3119#issuecomment-1906149071:155,error,error,155,https://psicode.org,https://github.com/psi4/psi4/issues/3119#issuecomment-1906149071,1,['error'],['error']
Availability,"I just ran both ""source activate p4env"" and ""export LD_LIBRARY_PATH=/path/to/miniconda/envs/p4env/bin/../lib:$LD_LIBRARY_PATH"" to no avail, still get the symbol lookup error.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/675#issuecomment-291267736:133,avail,avail,133,https://psicode.org,https://github.com/psi4/psi4/issues/675#issuecomment-291267736,2,"['avail', 'error']","['avail', 'error']"
Availability,"I just ran it another few times and I'm seeing the behavior you mentioned, including once where it failed with a convergence error (i.e. on the Python side).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/989#issuecomment-385126008:125,error,error,125,https://psicode.org,https://github.com/psi4/psi4/issues/989#issuecomment-385126008,1,['error'],['error']
Availability,"I just ran the input, and it produces (admittedly unhelpful) error message `Fatal Error: UHF Density fitting NYI`. The CC3 code is not set up to use density fitting yet, unfortunately. If you remove the `cc_type` keyword, it runs correctly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/462#issuecomment-240188822:61,error,error,61,https://psicode.org,https://github.com/psi4/psi4/issues/462#issuecomment-240188822,2,"['Error', 'error']","['Error', 'error']"
Availability,I just tried 1.3 ```(Rev {HEAD} 20e5c7e)``` and get the same failures.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1590#issuecomment-479987948:61,failure,failures,61,https://psicode.org,https://github.com/psi4/psi4/issues/1590#issuecomment-479987948,1,['failure'],['failures']
Availability,"I just tried this with the very latest version of the code, and it works fine for me. The code will almost never have an I/O error after passing through a few iterations, unless your disk is full. Although this computation won't really require much scratch space, nevertheless, it's important to make sure an adequate scratch space has been set up (usually dedicated disks... not the default /tmp directory). http://www.psicode.org/psi4manual/master/external.html#scratch-files-psirc-file-and-elementary-restart",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204#issuecomment-170186608:125,error,error,125,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170186608,1,['error'],['error']
Availability,"I just tried to recompile from scratch as well, and got the same error:. Scanning dependencies of target versioned_code; [ 98%] Building CXX object; src/bin/psi4/CMakeFiles/versioned_code.dir/version.cc.o; [ 98%] Building CXX object; src/bin/psi4/CMakeFiles/versioned_code.dir/python.cc.o; /home/seba/psi4public/src/bin/psi4/python.cc(764): error: identifier; ""PSI_VERSION"" is undefined; return PSI_VERSION;; ^. /home/seba/psi4public/src/bin/psi4/python.cc(1217): warning #1011: missing; return statement at end of non-void function ""py_psi_get_normalmodes""; }; ^. compilation aborted for /home/seba/psi4public/src/bin/psi4/python.cc (code; 2); make[2]: **\* [src/bin/psi4/CMakeFiles/versioned_code.dir/python.cc.o] Error; 2; make[1]: **\* [src/bin/psi4/CMakeFiles/versioned_code.dir/all] Error 2; make: **\* [all] Error 2. 2015-05-26 10:52 GMT+02:00 wpoely86 notifications@github.com:. > The gitversion.h does #undef PSI_VERSION which makes the file; > src/bin/psi4/python.cc fail to build as it needs a PSI_VERSION.; > ; > What is the idea here? Why no PSI_VERSION?; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/100. ## . ---. dr. ir. Sebastian Wouters; Fellow of the Belgian American Educational Foundation; Princeton University; (address) Department of Chemistry; Frick Laboratory 351; Princeton, NJ 08544, USA; (e-mail) sebastianwouters@gmail.com. ---",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/100#issuecomment-105456704:65,error,error,65,https://psicode.org,https://github.com/psi4/psi4/issues/100#issuecomment-105456704,5,"['Error', 'error']","['Error', 'error']"
Availability,"I know it takes a long time to track these things down, so thank you very much for the effort.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/719#issuecomment-303780789:50,down,down,50,https://psicode.org,https://github.com/psi4/psi4/issues/719#issuecomment-303780789,1,['down'],['down']
Availability,"I leave most of the environment variable stuff for PSI4 in the hands of conda. I have a modified/compiled version of PSI4 on just one of my machines, but PSI4 crashes on all of them for one electron properties. I saw the crash while I was running a testing script, so I know that it printed correct results for HF, PBE0, gradient, and PBE0+point-charges calculations. The only test of mine that failed involved recovering charges from a QM calculation. ```; [input file]. set_num_threads(8); memory 256 mb; set reference rhf; set basis 6-31G*; set guess sad; set scf_type df. psi4_io.set_specific_path(32,'./'); psi4_io.set_specific_retention(32,True); psi4_io.set_specific_path(180,'./'); psi4_io.set_specific_retention(180,True). molecule LICHM_0 {; 0 1; O 0.87273600000000 0.00000000000000 -1.2467539999999; H 0.28827300000000 0.00000000000000 -2.0108530000000; H 0.28827300000000 0.00000000000000 -0.4826550000000; symmetry c1; no_reorient; no_com; }. Chrgfield = QMMM(); Chrgfield.extern.addCharge(-1.3062266666666,-0.6489658001839,0.00000001660701,1.10730418839000); Chrgfield.extern.addCharge(0.35180666666666,-0.7534241883900,-0.0000000536004,1.26252019981607); Chrgfield.extern.addCharge(0.86636000000000,-0.7788030060160,0.13229430272998,1.13268305579077); Chrgfield.extern.addCharge(-1.3062266666666,-0.9086401998160,-0.0000000166070,1.15806181160999); Chrgfield.extern.addCharge(0.10176666666666,-0.8041818116099,0.00000005360047,1.00284580018392); Chrgfield.extern.addCharge(0.86636000000000,-0.7788029939839,-0.1322943027299,1.13268294420922); Chrgfield.extern.addCharge(0.51284666666666,-0.7965191998160,0.76409898339298,1.73166981160999); Chrgfield.extern.addCharge(-1.7440911751517,-0.6778443974775,0.64528811991560,1.64918444879139); Chrgfield.extern.addCharge(0.85696271562354,-0.6894742127334,0.82228626070531,1.58968679653742); Chrgfield.extern.addCharge(0.51284666666666,-0.5368448001839,0.76409901660701,1.68091218839000); Chrgfield.extern.addCharge(-0.5989622639259,-0.65551960",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/240#issuecomment-182660528:411,recover,recovering,411,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182660528,1,['recover'],['recovering']
Availability,"I looked at the original error and thought that the debugger was throwing on the wrong line, so this is a really great catch!. Yes, most of the CI code was overhauled last year; however, parts that deal with determinants have not been touched in awhile. I need to pull it down and double check, but I think this all looks great. Thanks for the contribution.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/607#issuecomment-277871699:25,error,error,25,https://psicode.org,https://github.com/psi4/psi4/pull/607#issuecomment-277871699,2,"['down', 'error']","['down', 'error']"
Availability,"I may have been unclear. It already works with multiple "":"" characters. Not sure if there is already such an error message somewhere. Format always seems: `<exception name>: <exception message>`, so the splitting the string at the first "":"" in 2 parts and then taking the second (=last) part should work well.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1862#issuecomment-611520933:109,error,error,109,https://psicode.org,https://github.com/psi4/psi4/pull/1862#issuecomment-611520933,1,['error'],['error']
Availability,"I may need some help building a new Windows L2 library with the extra OEI hessians; the VM that I had set up is no longer available after the IT folks kindly sent a security patch that bricked my laptop. I should be able to get Parallels running again if needed, but would appreciate help from anyone with a Windows machine. The failure in ADCC is something I see locally too; I get `ImportError: /u/andysim/anaconda3/envs/psi4dev/lib//python3.9/site-packages/../.././libmkl_sequential.so.1: undefined symbol: mkl_lapack_xzlaswp_i4`, so it looks like some kind of Conda dependency problem. If I try and build ADCC instead, I get problems finding `libtensorlight`, which I have installed via Conda. Any clues about this are welcome, before I head down the rabbithole.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2388#issuecomment-1004856298:122,avail,available,122,https://psicode.org,https://github.com/psi4/psi4/pull/2388#issuecomment-1004856298,3,"['avail', 'down', 'failure']","['available', 'down', 'failure']"
Availability,"I modified the error message from being about ""core electrons"" to just ""electrons."" Aside from that, @susilehtola's comments addressed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2859#issuecomment-1398810600:15,error,error,15,https://psicode.org,https://github.com/psi4/psi4/pull/2859#issuecomment-1398810600,1,['error'],['error']
Availability,"I note that our EOM-CC3 test cases do not include one in which states of; different symmetries are obtained in the same job, so this seems likely to; be a genuine bug (though I could have sworn that we had such calculations; working initially). The EOM-CC3 algorithm we use computes one state at a; time, but the scratch quantities are likely to be different sizes for; different irreps. To get around this for now, I suggest simply running the two states in; separate jobs. -TDC. P.S. I removed the scf_type keyword and reproduced the error, so that's not; the problem. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Wed, Mar 9, 2016 at 12:40 PM, Andrew James notifications@github.com; wrote:. > @Konjkov https://github.com/Konjkov could you show some of the output; > above the PSIO_ERROR? I am not sure that DF integrals is the culprit; > here. It would be easier to track down if I could see where in the second; > exited state it is failing. I ran the input you posted but I don't see the; > same PSIO_ERROR.; > ; > It is strange that the first excited state would be able to run if the; > integrals were incompatible. Also, the file number 128 is a temporary file; > used by the CC codes to store things with a short lifetime. If the; > integrals were the source of the problem I would expect this kind of error; > to show up when trying to read some persistent quantity, which would then; > be used to compute the values that would go into file 128.; > ; > @kannon92 https://github.com/kannon92 do you have an input that will; > cause the PSIO_ERROR if DF is used? The driver should probably soft-fail; > with a warning to turn DF off in these cases. It would be very frustrating; > for a job to run this far just to fail.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/307#issuecomment-194417745.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/307#issuecomment-194423967:536,error,error,536,https://psicode.org,https://github.com/psi4/psi4/issues/307#issuecomment-194423967,6,"['down', 'error']","['down', 'error']"
Availability,I noticed that sapt8 test case is broken (no idea if it's because of me or not). It has 0.0 stored in `SAPT IND ENERGY` Psivar instead of the actual uncoupled value. I tried to modify sapt_util.py to make it compute the uncoupled induction energy for `SAPT IND ENERGY`but that did not fix the test case. I don't see where else `SAPT IND ENERGY` is set. Are the uncoupled energy values even available to sapt_util.py ?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/908#issuecomment-364643141:390,avail,available,390,https://psicode.org,https://github.com/psi4/psi4/pull/908#issuecomment-364643141,1,['avail'],['available']
Availability,"I now have a version that compiles at home, though I'm not getting the narrowing warning-as-error that the auto-builder is. Still I've patched for it. This *should work* now...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2736#issuecomment-1271938459:92,error,error,92,https://psicode.org,https://github.com/psi4/psi4/pull/2736#issuecomment-1271938459,1,['error'],['error']
Availability,"I pretty much agree with this. One thing to keep in mind is [Rollin's problem](https://travis-ci.org/psi4/psi4public/builds/105540128) that was only picked up with debug settings, so I think that a solitary debug build for GCC and clang could be worth keeping in mind. If we do go that route, they should be the first ones built, so the time to failure is low if it's a compile error. Clang 3.8 isn't stable yet and will seg fault with optimization turned on, but the [final release](http://llvm.org/) is slated for a week from now, so I expect that to change very soon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237#issuecomment-182874560:345,failure,failure,345,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182874560,3,"['error', 'failure', 'fault']","['error', 'failure', 'fault']"
Availability,I pretty much echo what AJ said. @amjames I see you have been reading `import this`.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/627#issuecomment-281991612:14,echo,echo,14,https://psicode.org,https://github.com/psi4/psi4/pull/627#issuecomment-281991612,1,['echo'],['echo']
Availability,"I pushed changes to address the discussions on the original diffs. If you look through [this discussion](http://lists.llvm.org/pipermail/llvm-foundation/2016-May/000020.html) from the llvm mailing list. It looks like their servers are being overwhelmed with requests (which I suspect are originating from travis) so they have shut them down. Anyway, all travis builds using clang are going to fail until that gets resolved. . Whenever the clang builds are working again this is ready to go.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/395#issuecomment-223085146:336,down,down,336,https://psicode.org,https://github.com/psi4/psi4/pull/395#issuecomment-223085146,1,['down'],['down']
Availability,"I put a patch to DF-MP2 code, so it computes the one-electron properties with property() function. I also added capability to use property() for the DETCI one-electron and transition properties. An example would be something like this:; property('cisd', properties=['transition_dipole']); As in the CC code, the properties=[] argument has to be specified, otherwise python throws an error. The list of properties for DETCI so far is limited to 'dipole', 'quadrupole', 'transition_dipole', and 'transition_quadrupole', but can be augmented easily if needed. Let me know if more functionality is needed. ; In the next few days I'll add support of property() for DCFT. I'll e-mail Ugur and ask if he can do the same. I'll also modify the manual and create a table with methods and references that can be used with property() function. But, besides that, we can probably close this issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/40#issuecomment-38212166:383,error,error,383,https://psicode.org,https://github.com/psi4/psi4/issues/40#issuecomment-38212166,1,['error'],['error']
Availability,"I ran `sapt1` on an s390x box now and compared the output to `output.ref` and one thing is weird:. ```; - Geometry (in Bohr), charge = 0, multiplicity = 1:; + Geometry (in Bohr), charge = 0, multiplicity = 2:; ```. Nothing else much stands out besides `output.ref` being from an older version so having some other strings here and there. When SAPT would start. ```; - SAPT0 ; - Ed Hohenstein; - 6 June 2009; ```; I immediately get the backtrace:; ```; +Traceback (most recent call last):; + File ""/usr/bin/psi4"", line 269, in <module>; + exec(content); + File ""<string>"", line 53, in <module>; + File ""/usr/lib/s390x-linux-gnu/psi4/driver/driver.py"", line 492, in energy; + wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); + File ""/usr/lib/s390x-linux-gnu/psi4/driver/procrouting/proc.py"", line 3438, in run_sapt; + e_sapt = core.sapt(dimer_wfn, monomerA_wfn, monomerB_wfn); +; +RuntimeError: ; +Fatal Error: Laplace Quadrature requested for (E_HUMO - E_LOMO)/(E_LUMO-E_HOMO) > 7.0 * 10^12, quadratures are not designed for this range.; ```. I checked and adding `DENOMINATOR_ALGORITHM CHOLESKY` to `input.dat` makes the test pass:. ```; Nuclear Repulsion Energy..........................................PASSED; SAPT0 Eelst.......................................................PASSED; SAPT0 Eexch.......................................................PASSED; SAPT0 Eind........................................................PASSED; SAPT0 Edisp.......................................................PASSED; SAPT0 Etotal......................................................PASSED; ```. I'll try to step through the code first before I start recompiling with the patches you suggested.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1462#issuecomment-451695207:932,Error,Error,932,https://psicode.org,https://github.com/psi4/psi4/issues/1462#issuecomment-451695207,1,['Error'],['Error']
Availability,"I ran some tests to try to reproduce the error, and I found that the point where the error started _differed_ between runs. Sometimes, it ended after printing B(2, 1, 3), sometimes it printed *R(0,1) as infinity and said the optimization failed, sometimes it said it was generating an empirical Hessian for each fragment and failed after that... Is this what you're seeing?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/989#issuecomment-385065247:41,error,error,41,https://psicode.org,https://github.com/psi4/psi4/issues/989#issuecomment-385065247,2,['error'],['error']
Availability,"I realized that having PSI4DATADIR set to """" causes this error. Instead, I had to make sure that PSI4DATADIR was not set at all.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/565#issuecomment-271978256:57,error,error,57,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271978256,1,['error'],['error']
Availability,"I really agree those files are annoying because they also recompile when; you install. There's got to be a better way to do this. From what I; understand, and @loriab can correct me if I'm wrong, the idea is to keep; track of modifications to the source in the event that people obtained it; in some backwaters way (like a tar ball off GitHub, which apparently; doesn't include the .git files). That way we know how many changes since; the git hash have occurred for versioning purposes. If everyone obtained; it through normal manners, i.e. git clone, then you can just ask git how; many revisions have occurred since the hash and update the tag that way. On Wed, Aug 10, 2016 at 7:24 PM, Ben Pritchard notifications@github.com; wrote:. > In doing some development with the branch, I only have one more complaint; > (so far). Whenever I make a change to a file (in my case, in libmints),; > running make will compile several files before my changed file. This; > happens every time I make a change. The files are in versioned_code:; > ; > version.cc; > psi_start.cc; > python.cc; > ; > I know they have to be compiled every time, but it's annoying that they; > are compiled _before_ my changed files. Ie, these files are compiled; > before any self-induced compiler errors will surface. If you are fixing; > multiple errors, it's annoying (since some of them take a little while); > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/442#issuecomment-239034822, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AFCRi8Tzhn7tnmOB6CZousGrZoVr20xrks5qel27gaJpZM4JHR4P; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-239042342:1267,error,errors,1267,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-239042342,2,['error'],['errors']
Availability,"I rebased the PR. In addition to eliminating the redundant argument, I did some `const` marking.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2525#issuecomment-1087975547:49,redundant,redundant,49,https://psicode.org,https://github.com/psi4/psi4/pull/2525#issuecomment-1087975547,1,['redundant'],['redundant']
Availability,"I reinstalled with the rc2 installer and the same error persists. I am looking in the psi4 python module and the ""core"" file seems to not have been compiled correctly? I am guessing it should be a .py file but in my directory its a .pyd file and has a name ""core.cp38-win_amd64.pyd"". Can anyone confirm this and/or point me to where the corrrect file is here so I can download and replace?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875007336:50,error,error,50,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875007336,2,"['down', 'error']","['download', 'error']"
Availability,"I remarked at PsiCon that PSIO errors were public enemy no. 2, and I view this as further evidence. I'll investigate.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1482#issuecomment-455580837:31,error,errors,31,https://psicode.org,https://github.com/psi4/psi4/issues/1482#issuecomment-455580837,1,['error'],['errors']
Availability,"I remember the episode but not the exact error (though it was in sapt and cubeprop tests). Something about pybind's behavior being less forgiving than boost's. Also psi4 modules behaved differently wrt how much control they took upon themselves vs giving to the AIOHandler lib. I think I standardized that aspect a bit. Good news is that I think you can adjust the synchronization again, so long as the tests pass (since it was broken test cases before that prompted the change). Or the inversion may have spontaneously healed the problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/596#issuecomment-277503822:41,error,error,41,https://psicode.org,https://github.com/psi4/psi4/issues/596#issuecomment-277503822,1,['error'],['error']
Availability,"I remove these two channels. But after running; `conda create --override-channels -n p4env psi4 python=3.9 -c psi4 -c defaults`. It remains the same...; ```. Collecting package metadata (current_repodata.json): done; Solving environment: failed with repodata from current_repodata.json, will retry with next repodata source.; Collecting package metadata (repodata.json): done; Solving environment: | ; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; failed . UnsatisfiableError: The following specifications were found to be incompatible with each other:. Output in format: Requested package -> Available versions. Package python conflicts for:; python=3.9; psi4 -> python[version='2.7.*|3.5.*|3.6.*|>=2.7,<2.8.0a0|>=3.5,<3.6.0a0|>=3.6,<3.7.0a0|>=3.7,<3.8.0a0|>=3.8,<3.9.0a0|>=3.9,<3.10.0a0']; psi4 -> mkl-service[version='>=2.3.0,<3.0a0'] -> python[version='>=3.10,<3.11.0a0|>=3.7|>=3.6|>=3.5|>=3.6.0|>=3.6,<3.7']The following specifications were found to be incompatible with your system:. - feature:/linux-64::__glibc==2.31=0; - feature:|@/linux-64::__glibc==2.31=0; - psi4 -> libgcc-ng[version='>=7.5.0'] -> __glibc[version='>=2.17']. Your installed version is: 2.31. Note that strict channel priority may have removed packages required for satisfiability. ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2390#issuecomment-1005448113:655,Avail,Available,655,https://psicode.org,https://github.com/psi4/psi4/issues/2390#issuecomment-1005448113,1,['Avail'],['Available']
Availability,I saw one like that before. I'll try to track it down. I haven't tested this PR against py2 though. Do you have any idea if any custom from_python typemaps / convereters are registered currently registered?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/160#issuecomment-130014713:49,down,down,49,https://psicode.org,https://github.com/psi4/psi4/pull/160#issuecomment-130014713,1,['down'],['down']
Availability,"I scale the DIIS B matrix diagonals based on the suggestion made by Pulay (JCP, 84, 5728, 1986). It is expected to improve convergence in problematic cases, where B matrix is not diagonally dominant. However, it slightly slow down the diis. @JonathonMisiewicz",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1777#issuecomment-571630492:226,down,down,226,https://psicode.org,https://github.com/psi4/psi4/issues/1777#issuecomment-571630492,1,['down'],['down']
Availability,"I second combining the components as TDC suggests if possible. Comparing them is no problem -- `compare_values(ndarray_xptd, ndarray_cptd, ...` can handle the 3x3x3. Storing them c-side isn't perfectly straightforward b/c Wavefunctions.arrays only takes Matrix. So I think it'd have to be akin to octupole, as you anticipated. c-side, the tensor stays stacked into a 3x9. Then in python-helpers.py, the Matrix gets intercepted and reshaped into 3x3x3, and same on reverse. The qcvars so treated are a little different from the others in that they're only available as ndarrays, not Matrix _or_ ndarray, but no one's complained in practice.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2508#issuecomment-1079731553:555,avail,available,555,https://psicode.org,https://github.com/psi4/psi4/pull/2508#issuecomment-1079731553,1,['avail'],['available']
Availability,"I see that this goes a lot further than I was expecting it to; some day that will stop surprising me. It's a shame about the apparent necessity to keep the inconsistent definitions, but you're probably right when you say lots of downstream code is going to rely on the current behavior, whether or not we see it as ""correct."" The dual-identity of type-A and type-B ghosts only complicates matters further, though I definitely see the need for it. It would almost be better if type-A ghosts didn't exist and at parse-time any ""default"" ghosts are treated as type-B ghosts somehow, but this is likely more complicated then it sounds. Either way, the ability to go back-and-forth between real and ghost is absolutely necessary, and type-B is the only one that can consistently do that. . Fixing only type-A ghosts to return zero mass may only confuse things further. If nothing else, the functions should at least do the same thing for type-A and type-B ghosts. Consistency between `Molecule.mass` and `Molecule.Z` could be worked on later, though as you pointed out it's probably not a good idea to change `Molecule.Z`. . As for a new `Molecule` function to ensure the user knows what they're going to get, are you referring specifically to a `molecular_weight` function or more generally a function to return either the mass or Z val as either zero or real depending on input? I could get behind either of those, though with `molecular_weight` I would suggest simply setting a default for ghost atoms to return zero mass as I can't imagine anyone would want a molecular weight including ghost atom masses. . EDIT: I just saw what you said about ACS and DGAS nre edit in [#844](https://github.com/psi4/psi4/pull/844). That could work, requiring the argument c-side and giving a default py-side, though I wonder how many places we'd have to update c-side calls to conform to this. Might be the best answer with the least pain involved.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/909#issuecomment-363495902:229,down,downstream,229,https://psicode.org,https://github.com/psi4/psi4/issues/909#issuecomment-363495902,2,['down'],['downstream']
Availability,"I see three different questions here:; 1. Is it possible to carry out MRCI in Psi?; 2. Can we get an error message better than a segfault, or for this not to segfault?; 3. Does the energy error indicate you've landed on the wrong electronic state? If so, how do you land on the right one?. My thoughts:. 1. Reading that paper, it looks like Sherrill and Piecuch did (as you suspected), a two-step computation. First, they did a CASSCF computation. Then they used the orbitals from that computation to do a RASCI computation. Then they fed those orbitals into a RAS computation to do their MRCI. That said, I cannot figure out what keywords they might have used to specify the right excitation levels. None of the keywords in the manual level.; 2. I would expect that the program should be able to accept orbitals this way. Unless another developer more experienced in detci sees otherwise, this looks to me a like a bug. I'll give some time for them to comment before investigating further myself.; 3. Just to be clear, do you have any reason to think that you landed on the C electronic state? If not, you may have landed on a different electronic state entirely. I recommend you look at the section of your SCF computation marked ""Final Occupation by Irrep"". Is that consistent with your desired electronic state? Is there any other low-lying electronic state that occupation could match?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1907#issuecomment-634602517:101,error,error,101,https://psicode.org,https://github.com/psi4/psi4/issues/1907#issuecomment-634602517,4,['error'],['error']
Availability,"I see we have a plugin error here https://dev.azure.com/psi4/psi4/_build/results?buildId=5535&view=logs&j=f237aa60-f90a-5f4e-46d5-6f838a77d991&t=e678ab3d-f7fc-50f0-56d8-3349f4950165&l=9304 . That's very possibly pre-existing -- I should have retained skeletons in ctest when I deduplicated the ctest and pytest calls. The ""missing packages"" link doesn't work for me. What is the text? Does running the `test_sapt_dft1` test in particular work for you locally?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2980#issuecomment-1583061943:23,error,error,23,https://psicode.org,https://github.com/psi4/psi4/pull/2980#issuecomment-1583061943,1,['error'],['error']
Availability,"I see. Yes, you can forget the conda binary question. Interesting that you're using psi4 from the Ubuntu repository. I think you're the first report we've had of someone actually doing that. Unfortunately, it means you're using the beta5 version that's two years old and pre GnuMake --> CMake transition. And the plugin system I wouldn't expect to work from the Ubuntu repo. You see, the plugin Makefile relies on info about the build conditions and unless whoever packaged psi up for Ubuntu/Debian (not us) knew about that aspect and planned for it, that build condition info is not going to be in the distribution you've got. Your error involving ""MakeVars"" reflects this. I'd strongly recommend cloning from GitHub (you'll get a far newer version of the code), building psi4, and _then_ creating a new plugin. https://github.com/psi4/psi4/wiki/1_Obtaining#clone-from-public-github-repository. If you're not comfortable with compiling, there's another way that I know to work, but its a bit experimental.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/308#issuecomment-194615624:633,error,error,633,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-194615624,1,['error'],['error']
Availability,"I seemingly successfully commented out the inclusion of `libint/libint.h` in the following files. Is there any known reason that that's a Bad Idea?; - psi4/src/bin/ccenergy/ccenergy.cc; - psi4/src/bin/ccenergy/local.cc; - psi4/src/bin/cceom/local.cc; - psi4/src/bin/cclambda/local.cc; - psi4/src/bin/ccresponse/local.cc. That header is also included in `ccsort/local.cc` for at least the purpose of getting `LIBINT_MAX_AM`. If that is the sole purpose, is it better to continue including the header or to apply the compiler definitions that now ship with libint: `-USING_libint;-DMAX_AM_ERI=N` (`N` is value from linked lib, not value spec to psi4 cmake)?. That pair of compiler defs are not presently used by anything, so they can be tossed if you all turn against them. I'm still not sure if they pass the bar of ""requirements, not merely recommendations"" (https://cmake.org/cmake/help/v3.6/manual/cmake-buildsystem.7.html#build-specification-and-usage-requirements). The `USING_libint` I thought could be useful down the road as libmints interfaces to more integrals packages. The `USING_`s are replacing the double use of `ENABLE_` as cmake option and compile definition that was going on earlier. If you'd all like HAVE, WITH, ENABLED, or whatever, instead, let me know.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-240423295:1015,down,down,1015,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-240423295,1,['down'],['down']
Availability,"I should add that a 5 min search didn't find precedent or format for ECP info in cube files. But if anyone knows of any up/downstream software that writes/reads this info, we should follow that format. Maybe `Total core: 10 [e] from 1-indexed atoms (4, 8) electrons (6, 4)`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1136#issuecomment-412949138:123,down,downstream,123,https://psicode.org,https://github.com/psi4/psi4/issues/1136#issuecomment-412949138,1,['down'],['downstream']
Availability,I should have been clear. We want this tagged in the same BasisSet family even though there are no corresponding DF/RI basis for those particular atoms so that we get a better failure message.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/331#issuecomment-205812617:176,failure,failure,176,https://psicode.org,https://github.com/psi4/psi4/pull/331#issuecomment-205812617,2,['failure'],['failure']
Availability,"I simplified the omega setter interface for the `HJS_PBE` https://github.com/psi4/psi4/pull/1101/files#diff-375f534fffdbfb11f5ae38dace0c3ab71230ea1f9eed95df51d21fdfd2589e4aL218-R221 and that fixed custom and smoke. Is that what you had in mind with ""named parameter setter"", @susilehtola?. Now only the ft97 is a problem among ctests. pytests were clean before, but I'll check again. Are any of these now available in v5.1 that I should be activating?. ```; SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: B3TLAP not in Psi4.; SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: BP86VWN not in Psi4.; SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: LDA0 not in Psi4.; SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: CAM-LDA0 not in Psi4.; SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: LRC-BOP not in Psi4.; SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: PBEsol not in Psi4.; SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: t-HCTH not in Psi4.; SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: t-HCTHh not in Psi4.; SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: wM05-D not in Psi4.; SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: wM06-D3 not in Psi4.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-755032163:405,avail,available,405,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-755032163,2,['avail'],['available']
Availability,"I still get an error entering 'conda create -n p4env python=3.8 psi4 -c psi4/label/dev' into anaconda prompt. does my computer being a windows have anything to do with this failed installation?. `(base) C:\Users\erikc>conda create -n p4env python=3.8 psi4 -c psi4/label/dev; WARNING: A directory already exists at the target location 'C:\Users\erikc\anaconda3\envs\p4env'; but it is not a conda environment.; Continue creating environment (y/[n])? y. Collecting package metadata (current_repodata.json): done; Solving environment: failed with repodata from current_repodata.json, will retry with next repodata source.; Collecting package metadata (repodata.json): done; Solving environment: -; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; failed. UnsatisfiableError: The following specifications were found to be incompatible with each other:. Output in format: Requested package -> Available versions. Package python conflicts for:; psi4 -> msgpack-python -> python[version='>=2.7,<2.8.0a0|>=3.6,<3.7.0a0|>=3.8,<3.9.0a0|>=3.9,<3.10.0a0|>=3.7,<3.8.0a0|>=3.5,<3.6.0a0|>=3.6|>=3.5|>=3.6.0']; python=3.8; psi4 -> python=3.8`. I would appreciate any help to get psi4 up and running. thanks",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1979#issuecomment-874806341:15,error,error,15,https://psicode.org,https://github.com/psi4/psi4/issues/1979#issuecomment-874806341,2,"['Avail', 'error']","['Available', 'error']"
Availability,"I suspect that in several of these, the problem is that the downstream; codes need the (conventional or DF) integrals written to disk. This got; handled by some logic where necessary for scf_type = disk_df, apparently,; but did not get handled for mem_df. Works ok for ccenergy? It also needs conventional integrals written to; disk. Maybe that is getting intercepted correctly. On Mon, May 14, 2018 at 6:14 PM, Lori A. Burns <notifications@github.com>; wrote:. > Posting Dom's very nice summary for easier perusal and searchability.; > Effective scf_type df Testing: mem_df & disk_df; >; > All tests listed below examine calls to both energy() and gradient() when; > employing the scf_type mem_df and scf_type disk_df settings. Each test; > employs a different model chemistry (indicated in the test description); > and the; > Physicists' water molecule, unless otherwise indicated.; >; > 1. Physicists' water, HF/6-31G; > - *TEST FAILED*; > - Error message:; >; > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 30, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 444, in energy; > return driver_cbs._cbs_gufunc(energy, name, ptype='energy', **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver_cbs.py"", line 1818, in _cbs_gufunc; > ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 2038, in run_scf; > scf_wfn = scf_helper(name, post_scf=False, **kwargs)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128:60,down,downstream,60,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128,1,['down'],['downstream']
Availability,"I suspect the fitting condition does not get passed down. ```; void DFTensor::build_metric() {; auto met = std::make_shared<FittingMetric>(auxiliary_, true);; met->form_eig_inverse(); ; metric_ = met->get_metric();. ```; without argument `form_eig_inverse()` does 1e-10. There are multiple occasions in psi4 where this is the case (sapt,DiskJK). I guess it was never meant to be changed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1545#issuecomment-465267190:52,down,down,52,https://psicode.org,https://github.com/psi4/psi4/issues/1545#issuecomment-465267190,1,['down'],['down']
Availability,"I suspect this has to do with the python3 fixes. Will take a look tomorrow. . Sent from my iPhone. > On Aug 20, 2015, at 5:08 PM, fevangelista notifications@github.com wrote:; > ; > Actually, I think this might be a bigger problem. I was able to fix the issue with 'flags' by replacing some code in /lib/python/inputparser.py; > ; > ```; > future_re = re.compile('^from __future__ import .*$',flags=re.MULTILINE); > temp = future_re.sub(future_replace, temp); > #temp = re.sub('^from __future__ import .*$', future_replace, temp, flags=re.MULTILINE); > ```; > ; > but then I get this other error message (even with the newest commit):; > ; > Traceback (most recent call last):; > File ""<string>"", line 6, in <module>; > File ""/Users/francesco/Source/psi4/lib/python/aliases.py"", line 39, in <module>; > from wrappers import *; > File ""/Users/francesco/Source/psi4/lib/python/wrappers.py"", line 39, in <module>; > from driver import *; > File ""/Users/francesco/Source/psi4/lib/python/driver.py"", line 38, in <module>; > from interface_cfour import *; > File ""/Users/francesco/Source/psi4/lib/python/interface_cfour.py"", line 40, in <module>; > import qcdb; > File ""/Users/francesco/Source/psi4/lib/python/qcdb/**init**.py"", line 35, in <module>; > from .molecule import Molecule; > File ""/Users/francesco/Source/psi4/lib/python/qcdb/molecule.py"", line 39, in <module>; > from .libmintsmolecule import *; > File ""/Users/francesco/Source/psi4/lib/python/qcdb/libmintsmolecule.py"", line 31, in <module>; > from oldpymodules import OrderedDict; > ImportError: No module named oldpymodules; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/169#issuecomment-133179959:590,error,error,590,https://psicode.org,https://github.com/psi4/psi4/issues/169#issuecomment-133179959,1,['error'],['error']
Availability,I suspect this was fixed in #1414 that made sure dftd3-using tests weren't run if dftd3 not available.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1418#issuecomment-451602694:92,avail,available,92,https://psicode.org,https://github.com/psi4/psi4/issues/1418#issuecomment-451602694,1,['avail'],['available']
Availability,"I suspect we just never got around to adapting the higher order codes. But; maybe @tparker36 has numerical evidence that it's not as big a deal as we; thought?. On Wednesday, March 16, 2016, Lori A. Burns notifications@github.com; wrote:. > Hmm, so either; > - the case of running higher-order SAPT on heavy atoms was never; > considered, in which case the DF_BASIS_ELST code needs copying over; > - the heavy atom failure mode doesn't appear in higher-order SAPT b/c; > higher-order terms compensate or because the larger basis-sets targeted do; > their job (RI > JK for higher-zeta basis sets). Actually, this may have; > been what @tparker36 https://github.com/tparker36 was recalling.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/317#issuecomment-197550795",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/317#issuecomment-197551790:415,failure,failure,415,https://psicode.org,https://github.com/psi4/psi4/issues/317#issuecomment-197551790,1,['failure'],['failure']
Availability,"I switched it to 1024 MiB so that numbers stay as they were _and_ numbers match units (already in this PR). My fault for falsely stating MB was the reporting convention in psi4 in the first place. RTG, I think.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1097#issuecomment-406433677:111,fault,fault,111,https://psicode.org,https://github.com/psi4/psi4/pull/1097#issuecomment-406433677,1,['fault'],['fault']
Availability,"I tend to agree that turning off the projection in that case is the most sensible. The fock matrix projection in ORCA seems to 'work' in the sense that it convergences to the same result as the default guess (PModel) in some fewer iterations. The guess energy is quite far off, though. General robustness is thus questionable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1972#issuecomment-664961848:294,robust,robustness,294,https://psicode.org,https://github.com/psi4/psi4/issues/1972#issuecomment-664961848,1,['robust'],['robustness']
Availability,"I tested my code after rebasing, still looks just like it did before. I updated the timings and errors graphs based on the results of my rebased code (I used an intel compiler this time, rather than GCC)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2187#issuecomment-855159767:96,error,errors,96,https://psicode.org,https://github.com/psi4/psi4/pull/2187#issuecomment-855159767,1,['error'],['errors']
Availability,"I think ""symmetry tolerant"" is an odd description to apply to a method that; takes a symmetrical input and produces an asymmetrical output (e.g., the; DF-SCF gradient generating asymmetrical noise in the 9th decimal). If; numerical approximation is introducing the asymmetry, isn't the; symmetrization, if done evenly, likely to improve the accuracy of the; result, besides avoiding the risk of collateral damage? I appreciate; symmetrizing other types of objects may not be as simple. On Thu, Mar 3, 2016 at 2:47 PM, Justin Turney notifications@github.com; wrote:. > Yeah, the one in molecule used to be like the one in deriv when I; > originally wrote it 5 years ago. Then @psi-rking; > https://github.com/psi-rking expanded on it to assume non-standard; > orientation. A centralized one sounds good since I just found another on in; > matrix.cc.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/298#issuecomment-191955685.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/298#issuecomment-191991936:18,toler,tolerant,18,https://psicode.org,https://github.com/psi4/psi4/issues/298#issuecomment-191991936,2,['toler'],['tolerant']
Availability,"I think I would leave the `OptimizationResult` with `""success"": ""false""`. Adding something optking side would be better imo especially if the goal is just a comprehensible error message.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2971#issuecomment-1568683214:172,error,error,172,https://psicode.org,https://github.com/psi4/psi4/issues/2971#issuecomment-1568683214,1,['error'],['error']
Availability,I think I'm going to have a look at the mysterious segfault since I've been doing quite some libmints/libint2-related debugging for #2414 etc. It should not be too hard to track down (hopefully) 😄,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2767#issuecomment-1307045497:178,down,down,178,https://psicode.org,https://github.com/psi4/psi4/pull/2767#issuecomment-1307045497,1,['down'],['down']
Availability,"I think I've stumbled across this problem when trying to get hessians for comparison with finite difference code. The below input completes on our cluster in under a minute, operating on dev199. It took about 1.8 hours for jobs to finish when I didn't change the scf_type. Curiously, this is the same amount of time it took when I forgot to include the memory line. Could the bug be the DF code not using all the memory it has available? If so, then the bug OP saw wasn't the computation getting eternally stuck, but that trying to get an analytic hessian with around 1500 basis functions and only 500 MiB feels like an eternity. ```; #! SCF DZ finite difference frequencies by energies for C4NH4; memory 30gb. molecule c4nh4 {; units angstrom; -1 1; C 0.000000000000 0.000000000000 1.119905811674; N 0.000000000000 0.000000000000 2.310087277449; C 0.000000000000 0.000000000000 -0.231085072523; C -0.781617287494 0.000000000000 -1.483869398827; C 0.781617287494 0.000000000000 -1.483869398827; H -1.274488047821 -0.899961499592 -1.835960153318; H -1.274488047821 0.899961499592 -1.835960153318; H 1.274488047821 0.899961499592 -1.835960153318; H 1.274488047821 -0.899961499592 -1.835960153318; }. # *** Test all frequencies by 3-pt formula.; set {; basis dz; d_convergence 13; scf_type pk; }. scf_e, scf_wfn = frequencies('scf', dertype=2, return_wfn=True); fd_freqs = scf_wfn.frequencies(); clean(); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1145#issuecomment-429553898:427,avail,available,427,https://psicode.org,https://github.com/psi4/psi4/issues/1145#issuecomment-429553898,1,['avail'],['available']
Availability,"I think downgrade OS before trying to solve Boost problems so as to avoid wasting more time on something that's nearly gone. Need a ""Kill the Boost!"" graphic a la Disney's ""Beauty and the Beast.""",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235151809:8,down,downgrade,8,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235151809,1,['down'],['downgrade']
Availability,"I think for a locally compiled psi4 you also have to remove the install dir, if one exists. Susi Lehtola; Sent from my phone so excuse my brevity. On 14 Feb 2019, at 3.40, Lori A. Burns <notifications@github.com<mailto:notifications@github.com>> wrote:. TL;DR If conda psi4 is acting up, update libint, too: conda update libint -c psi4/label/dev. If locally compiled psi4 is acting up, trigger a partial recompile: cd objdir && rm -rf external/upstream/libint/ && make. We've been planning for a while to distribute conda psi4 with libint compiled at MAX_AM_ERI 8, not 6. I have rebuilt the libint package and now the v1.3rc1 will be the first psi4 package with extended AM. Unfortunately, both libint of different AM are not hot-swappable and AM not detectable at runtime. That is, a built psi4 is perfectly happy to link (in the ldd sense) to a libint.so that is inconsistent with fixed data dimensions in psi4 libmints, and libmints can't even throw an error for enlightenment. I could throw additional constraints on the psi4 pkg to make sure it picked the right libint build, but that would be misusing the tools a bit, would constrain things in future, and would only solve a third of the problem. I believe you can handle this transition manually with a couple commands. which libints are out there?. conda list. # v notice 5 vs 4 here; # v; libint: 1.2.1-hb4a4fd4_5 # AM ** 8 **, compatible with conda psi4 >= 1.3rc1, new!; libint: 1.2.1-h87b9b30_4 # AM ** 6 **, compatible with conda psi4 < 1.3rc1, 8 mo old; libint: 1.2.1-am8_1 # AM ** 8 **, compatible with compile-yourself psi4 only, deprecated, 19 mo old. what can go wrong with conda psi4?. * Both latest psi4 and latest libint conda packages are compatible, so a fresh install conda update psi4 libint -c psi4/label/dev will be fine.; * However, if you have a conda environment and you update psi4 but not libint, then you'll have a >=1.3rc1 psi4 and the _4 (see above) AM6 libint, which is trouble. Easy to solve by updating libint: co",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1533#issuecomment-463524773:956,error,error,956,https://psicode.org,https://github.com/psi4/psi4/issues/1533#issuecomment-463524773,1,['error'],['error']
Availability,"I think in terms of trying not to interrupt a high throughput scenario that we should still return an error in the `OptimizationResult` and set `""success"": ""false""` to warn the user that trying to grab something from `""return_result""` won't work. If we're giving json output back, optking failing shouldn't result in an error being returned to the user. They should be able to keep going naturally. If they try to check `'return_result'` though without checking for success they'd likely get a `NoneType` error or something which could kill whatever scripts they're running. The question in my mind is whether we should actually run a simple energy calc at the requested level of theory an place the `AtomicResult` in the `""trajectory""` so that they have some results to work with.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2971#issuecomment-1570349119:102,error,error,102,https://psicode.org,https://github.com/psi4/psi4/issues/2971#issuecomment-1570349119,6,['error'],['error']
Availability,"I think it should be possible, provided the optimizer cooperates. Have you hit any errors yet? If the molecule gives trouble, you can define it within the loop like https://github.com/psi4/psi4/issues/2880#issuecomment-1444654883 so that each step is independent. You could also try the geomeTRIC optimizers instead of default optking. Also note that OpenFF runs oodles of psi4/geomeTRIC torsion scans through QCArchive, if you need to scale up.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2910#issuecomment-1485812391:83,error,errors,83,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1485812391,1,['error'],['errors']
Availability,"I think it's a bad interaction between mixed-cart/zmat + counterpoise. The below triggers it, but it's fine w/o cp or with pure zmat frags. ```; molecule {; He 0 0 0; He 1 0 0; He 2 0 0; --; He 1 2.0 2 90.0 3 176.0; }. basis {; assign He def2-tzvpp; }. energy(""mp2"", bsse_type=""cp""); ```. A bug, but probably one to be warded off rather than hunted down?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1325#issuecomment-434799053:349,down,down,349,https://psicode.org,https://github.com/psi4/psi4/issues/1325#issuecomment-434799053,1,['down'],['down']
Availability,I think pull this in after 3rd review -- the Azure error has nothing to do with the PR,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1717#issuecomment-531880609:51,error,error,51,https://psicode.org,https://github.com/psi4/psi4/pull/1717#issuecomment-531880609,1,['error'],['error']
Availability,"I think someone would just need to make the code recalculate the number of alpha and beta electrons and set socc and docc accordingly. However, IMHO it doesn't make sense to do any kind of guess between different ECP settings. What the code should do instead is check whether the number of electrons in the guess and in the actual basis, and throw an error if they don't match. Otherwise, one would have to implement both; 1) delete deepest orbitals if guess has more electrons than full calculation and; 2) ???? if guess has less electrons than full calculation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1439#issuecomment-455798830:351,error,error,351,https://psicode.org,https://github.com/psi4/psi4/issues/1439#issuecomment-455798830,1,['error'],['error']
Availability,"I think that I know where the linking against the Python library comes from. Usually when using CMake to build software, I am using the ccmake GUI and use the toggle option to show all available variables (as I usually also add compiler flags etc.). I noticed that cmake detected the correct Python interpreter (2.7.12), but it also had a variable for the Python library, which was pointing to /usr/lib64/libpython2.6.so (system Python that was installed with the operating system). In order to avoid mixing between different Python versions, I have set the CMake variable to the 2.7.12 version of the library. Maybe CMake picked it up this way and added it to the libraries that are linked. Thank you for pointing me to the tests in the samples directory. Best regards",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-275138618:185,avail,available,185,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-275138618,1,['avail'],['available']
Availability,I think that should have done the trick. (I ran the tdscf tests and then overwrote the respective output.ref files with the generated output.dat files.) I think the only differences are numerical errors during SCF and then formatting of the output. All final results should be unchanged.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2605#issuecomment-1155599085:196,error,errors,196,https://psicode.org,https://github.com/psi4/psi4/pull/2605#issuecomment-1155599085,1,['error'],['errors']
Availability,"I think the main issue is that `detci` is somehow relying on the data in `Wavefunction`, but it's not checking whether its configuration is valid. There is actually a preceding error message ; ```; (set_ras_parms): detecting 1 electrons in RAS III for irrep 0.; Some parts of DETCI assume all elec in I and II; ```; but this really should crash the code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1693#issuecomment-520836143:177,error,error,177,https://psicode.org,https://github.com/psi4/psi4/issues/1693#issuecomment-520836143,1,['error'],['error']
Availability,"I think the problem is the MOs appearing in the output file in addition to the FCHK file. Should be an easy one to track down, I hope.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1272#issuecomment-426246961:121,down,down,121,https://psicode.org,https://github.com/psi4/psi4/issues/1272#issuecomment-426246961,1,['down'],['down']
Availability,"I think the verbose output is ok here, @hokru , because pytest suppresses the output by default. If the test happens to fail, running that test with output enabled could help with debugging possibly. I totally agree that the CTests inputs should stay minimal because they ultimately get converted into sample inputs for users to have as starting points for job inputs. The Windows test failure looks like we need a `using_resp` like mechanism to conditionally activate resp; I'm sure you have it under control, Lori.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2065#issuecomment-744433410:386,failure,failure,386,https://psicode.org,https://github.com/psi4/psi4/pull/2065#issuecomment-744433410,1,['failure'],['failure']
Availability,"I think there's more variations and potential collisions, even within one user's environment, than can really be predicted and caught. In the inversion branch, we've started catching the gcc <4.9 error signature and printing a this-is-probably-what's-wrong message. Expanding that error catching and printing the customized path to the `link.txt` file is probably the best bet. [This](https://github.com/psi4/psi4/blob/master/psi4/share/psi4/scripts/setenv.py) is a runtime env diagnosis script I wrote once. It didn't catch on, but it could be expanded for rpath.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-252942976:196,error,error,196,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252942976,2,['error'],['error']
Availability,"I think this PR is next on your list, since #2155 merge is imminent. Rebase, fix the merge conflicts, and ping me when this is ready for review.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2187#issuecomment-973168059:106,ping,ping,106,https://psicode.org,https://github.com/psi4/psi4/pull/2187#issuecomment-973168059,1,['ping'],['ping']
Availability,I think this is ready. I assigned auxiliary basis sets that I deem reliable and which I used for calculations already.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1346#issuecomment-439903848:67,reliab,reliable,67,https://psicode.org,https://github.com/psi4/psi4/pull/1346#issuecomment-439903848,1,['reliab'],['reliable']
Availability,"I think this must also be the default in The Code That Shall Not Be Mentioned. At least the 1999 paper by Rabuck and Scuseria, ""Improving self-consistent field convergence by varying occupation numbers"" states that. > The DIIS error factor is used to determine the status of the SCF iteration process and reaches zero at convergence. This factor is the maximum element in the commutator of the density matrix and the Fock matrix, (FPS-SPF), where F is the Fock matrix, P is the density matrix and S is the overlap matrix.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1460#issuecomment-453203727:227,error,error,227,https://psicode.org,https://github.com/psi4/psi4/pull/1460#issuecomment-453203727,1,['error'],['error']
Availability,I think we're on the same page (certainly for the headers). Installed changes:; - agreed; - `share/psi/* --> share/psi4/*`. Source changes:; - `top-source-dir/lib/* --> top-source-dir/share/psi4/*`. I'd like to have the two directory levels to keep the source and install tree similar could keep confusion down when setting `PSIDATADIR`.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/215#issuecomment-173961471:306,down,down,306,https://psicode.org,https://github.com/psi4/psi4/issues/215#issuecomment-173961471,1,['down'],['down']
Availability,"I thought this was fixed long ago, but upon testing, that must have been `gradient`, `hessian`, and `frequency`, as `optimize` is indeed faulty. @psi-rking, I can intercept this in the psi driver, but would you prefer to intercept in optking?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2971#issuecomment-1566364965:137,fault,faulty,137,https://psicode.org,https://github.com/psi4/psi4/issues/2971#issuecomment-1566364965,1,['fault'],['faulty']
Availability,"I took a quick look at dfocc, and removing these lines; ```cpp; #include ""psi4/libciomr/libciomr.h""; #include ""psi4/libiwl/iwl.h""; #include ""psi4/libpsio/psio.hpp""; ```; from `array.h` doesn't cause any build failures. This was the only file I looked at, but reducing dependencies in that code should help to bring down the long build time.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/525#issuecomment-262108439:209,failure,failures,209,https://psicode.org,https://github.com/psi4/psi4/issues/525#issuecomment-262108439,2,"['down', 'failure']","['down', 'failures']"
Availability,"I tried `conda create -n p4env python=3.8 psi4 -c psi4` to no avail:. ```; UnsatisfiableError: The following specifications were found to be incompatible with each other:. Output in format: Requested package -> Available versions. Package python conflicts for:; psi4 -> python[version='2.7.*|3.5.*|3.6.*|>=2.7,<2.8.0a0|>=3.5,<3.6.0a0|>=3.6,<3.7.0a0|>=3.7,<3.8.0a0']; psi4 -> networkx -> python[version='>=3.5|>=3.8,<3.9.0a0|>=3.6.0|>=3.6']; python=3.8; ```. I'm out of my depths here, but it seems that networkx already works in python3.8, so I'm not sure why that would show up as a conflict. A Python 3.8 build would be great, since it seems to be the default python in Conda now (and it will allow people to start arguing over walrus operators in their code). Installing with `python=3.7` works.; Thanks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1979#issuecomment-671585693:62,avail,avail,62,https://psicode.org,https://github.com/psi4/psi4/issues/1979#issuecomment-671585693,2,"['Avail', 'avail']","['Available', 'avail']"
Availability,"I tried it, but I got the following:. Ugurs-MacBook-Pro:psijob ugur$ lldb python /Users/ugur/psi4/objdir/stage/Users/ugur/psi4install/psi4cmake/bin/psi4 input.dat ; (lldb) target create ""python""; Current executable set to 'python' (x86_64).; (lldb) settings set -- target.run-args ""/Users/ugur/psi4/objdir/stage/Users/ugur/psi4install/psi4cmake/bin/psi4"" ""input.dat""; (lldb) r; error: process exited with status -1 (cannot attach to process due to System Integrity Protection); (lldb) . However, I can debug my old psi4. @dgasmith",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/491#issuecomment-258441424:378,error,error,378,https://psicode.org,https://github.com/psi4/psi4/issues/491#issuecomment-258441424,1,['error'],['error']
Availability,"I tried running it again with `opt_coordinates = cartesian` with a restrained dihedral and `dynamic_level = 1`. However, it crashed again, this time when it raises dynamic level to 3 it crashed when it tries to write the optimization data to binary file. [Here's](https://github.com/ChayaSt/torsionfit_examples/blob/torsion_drive/torsion_drive/biphenyl/phepyr/4_10_11_6/15/phepyr_4_10_11_6_15.out#L12821-L12831) the traceback:. ```; 	Writing optimization data to binary file.; 	; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495011512596/work/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::write(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::PSIO::write_entry(unsigned int, char const*, char*, unsigned long); psi::psio_write_entry(unsigned int, char const*, char*, unsigned long); ```. Also, it still seems to be using internal coordinates (unless I'm not understanding the output file). ; Here is the new [input](https://github.com/ChayaSt/torsionfit_examples/blob/torsion_drive/torsion_drive/biphenyl/phepyr/4_10_11_6/15/phepyr_4_10_11_6_15.dat) and [output](https://github.com/ChayaSt/torsionfit_examples/blob/torsion_drive/torsion_drive/biphenyl/phepyr/4_10_11_6/15/phepyr_4_10_11_6_15.out)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/858#issuecomment-344334581:486,Error,Error,486,https://psicode.org,https://github.com/psi4/psi4/issues/858#issuecomment-344334581,4,"['Error', 'error']","['Error', 'error']"
Availability,"I trimmed this down as much as I could and played with the headers to kill off the files that took an extremely long time (30-50 seconds). Each file now takes 2-8 seconds to compile, but we simply have a lot of them. Without moving more into separate modules the compile time is not likely not going to come down much.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/525#issuecomment-305371303:15,down,down,15,https://psicode.org,https://github.com/psi4/psi4/issues/525#issuecomment-305371303,4,['down'],['down']
Availability,"I understand now. It's supposed to print something like the below, which is helpful and intelligible. (I think -- can change the wording if there's a suggestion.) This error message _is_ raised, but because the parser tries all formats (e.g., xyz, psi4) in turn, when it fails them all, it raises an error message with the whole molecule string, which is less helpful, and that last error message is what psi4 repeats to you.; ```; Traceback (most recent call last):; File ""/psi/gits/QCElemental/i2287.py"", line 22, in <module>; ans = qcel.molparse.from_string(xyz, dtype=""psi4""); File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 228, in from_string; molstr, molinit = parse_as_psi4_ish(molstr, unsettled=False); File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 217, in parse_as_psi4_ish; raise MoleculeFormatError(""""""Unprocessable Molecule remanents under {}:\n{}"""""".format(dtype, molstr)); qcelemental.exceptions.MoleculeFormatError: Unprocessable Molecule remnants under psi4:; H6 1.51000000 0.78000000 0 44000000; ```. I've handled this better now to raise the shortest error message among the formats with https://github.com/MolSSI/QCElemental/pull/274, and the psi message looks like:; ```; Traceback (most recent call last):; File ""/psi/gits/hrw-l2/objdir39b/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 35, in <module>; File ""/psi/gits/hrw-l2/objdir39b/stage/lib/psi4/driver/molutil.py"", line 258, in geometry; molrec = qcel.molparse.from_string(; File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 262, in from_string; raise(e); File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 256, in from_string; molstr, molinit = parse_as_psi4_ish(molstr, unsettled=True); File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 217, in parse_as_psi4_ish; raise MoleculeFormatError(f""""""Unprocessable Molecule remnants under {dtype}:\n{molstr}""""""). qcelemental.exceptions.M",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2287#issuecomment-910395723:168,error,error,168,https://psicode.org,https://github.com/psi4/psi4/issues/2287#issuecomment-910395723,3,['error'],['error']
Availability,I want to download windows WSL,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1586#issuecomment-478012648:10,down,download,10,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478012648,1,['down'],['download']
Availability,"I wanted Brandon to make sure that expected passes were passing, expected fails that we're ok with (e.g., matches Q-Chem exactly but matches Psi 1.1 with fewer decimals) were arranged to pass (back off on tolerance), and expected fails that we're not complacent to (i.e., wB97X-D3 and one other, iirc) were arranged to fail. . I think I'd rather this was pulled in with expected fails failing (to be fixed up later) than to have fake passes. But as soon as pass/fail is straightened out, lgtm.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/880#issuecomment-369644222:205,toler,tolerance,205,https://psicode.org,https://github.com/psi4/psi4/pull/880#issuecomment-369644222,1,['toler'],['tolerance']
Availability,I was able to get the json file down to 5MB. . It's a little challenging to get it smaller since I wanted a comprehensive test (up through d-orbitals) for four different two-electron integral tensors.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2502#issuecomment-1091841264:32,down,down,32,https://psicode.org,https://github.com/psi4/psi4/pull/2502#issuecomment-1091841264,1,['down'],['down']
Availability,"I was able to get the potential energy curve (PEC) for the ground state of the CF molecule but then once I include a method that could get the PEC for the excited state I kept getting an error. Then I wrote a script that could check the available methods and options for the excited states, I got a return message showing the available options but no available methods was shown. Here's the script I ran to obtain the ground state PEC:. import numpy as np; import psi4; import matplotlib.pyplot as plt. # Set Psi4 memory; psi4.set_memory('2 GB'). def compute_energy(bond_length):; molecule = psi4.geometry(f""""""; 0 2; C 0.000000000 0.000000000 0.000000000; F 0.000000000 0.000000000 {bond_length:.6f}; """"""). psi4.set_options({; 'basis': 'cc-pVTZ',; 'reference': 'uhf', # Use UHF for open-shell systems; 'scf_type': 'pk',; 'maxiter': 100,; 'e_convergence': 1e-8,; 'd_convergence': 1e-8; }). # Compute SCF energy; energy = psi4.energy('scf'); return energy. def generate_potential_energy_curve():; bond_lengths = np.arange(0.7, 5.02, 0.02); energies = []. for bond_length in bond_lengths:; try:; energy = compute_energy(bond_length); energies.append(energy); print(f""Bond length: {bond_length:.2f}, Energy: {energy:.8f}""); except Exception as e:; print(f""Error at bond length {bond_length}: {e}""); energies.append(float('nan')). return bond_lengths, energies. # Generate potential energy curve; bond_lengths, energies = generate_potential_energy_curve(). # Save bond lengths and energies to a text file; data_file = 'CF_PEC_0_data.csv'; with open(data_file, 'w') as file:; file.write(""Bond Length (Angstrom) Energy (Hartree)\n""); for length, energy in zip(bond_lengths, energies):; file.write(f""{length:.6f} {energy:.8f}\n""). print(f""Potential energy data saved to {data_file}""). # Plot the potential energy curve; plt.figure(figsize=(8, 6)); plt.plot(bond_lengths, energies, marker='o', linestyle='-', color='b', label='SCF Energy Curve'); plt.xlabel('Bond Length (Angstrom)'); plt.ylabel('Energy (Hartr",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845:187,error,error,187,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845,4,"['avail', 'error']","['available', 'error']"
Availability,"I was like ""what's a correct copy-paste error message"" until I read the change, and realized that this meant rectifying a copy-pasted error message in detci...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1811#issuecomment-586557996:40,error,error,40,https://psicode.org,https://github.com/psi4/psi4/pull/1811#issuecomment-586557996,2,['error'],['error']
Availability,"I went ahead and resubmitted the PR from that other branch, so this one can just be closed down. That way we're not force pushing to your fork master.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/386#issuecomment-225038318:91,down,down,91,https://psicode.org,https://github.com/psi4/psi4/pull/386#issuecomment-225038318,1,['down'],['down']
Availability,"I went to the link and typed ""which psi4"" in my terminal and got a return synonymous with the path being correct, I believe (so it said the code for the path should be redundant): [If you installed the Psi4conda distribution or installed the PSI4 conda package into the main environment of an Anaconda or Miniconda distribution and added that to your [PATH](https://psicode.org/psi4manual/master/external.html#envvar-PATH), as prompted, then which psi4 likely yields condadist/bin/psi4 and the PATH setting lines below are redundant.] . which psi4; /home/emkal/psi4conda/bin/psi4. Additionally, trying the two commands suggested also had errors in syntax I believe? I also tried psi4 --psiapi which gave me the path and pythonpath; I tried copying the output in substitution of the ""PYTHONPATH"" but it didn't make a difference. [1] export PYTHONPATH <conda-env-prefix-with-psi4>/lib/python3.10/site-packages/; File ""/tmp/ipykernel_10582/3886179417.py"", line 1; export PYTHONPATH <conda-env-prefix-with-psi4>/lib/python3.10/site-packages/; ^; SyntaxError: invalid syntax. [2] sys.path.append(<same>); File ""/tmp/ipykernel_10582/3391378744.py"", line 1; sys.path.append(<same>); ^; SyntaxError: invalid syntax",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3188#issuecomment-2195298996:168,redundant,redundant,168,https://psicode.org,https://github.com/psi4/psi4/issues/3188#issuecomment-2195298996,3,"['error', 'redundant']","['errors', 'redundant']"
Availability,"I will add some timings and check the gradient soon(TM).; The various dft gradient tests do generally _not_ pass with `ROBUST` pruning. Didn't check errors, but those tests are often very tight. Finally, pruning _on_ by default (`ROBUST` scheme)?? I'd argue that is what users expect since most (all?) big QM programs do this. Possibly wants more thorough testing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1591#issuecomment-495351118:119,ROBUST,ROBUST,119,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-495351118,3,"['ROBUST', 'error']","['ROBUST', 'errors']"
Availability,I will run this a few times on my system to see if I can reproduce. The sporadic nature and the fact that happens at many different points could take a bit to track down.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1590#issuecomment-482109929:165,down,down,165,https://psicode.org,https://github.com/psi4/psi4/issues/1590#issuecomment-482109929,1,['down'],['down']
Availability,"I wish there was a way to cut down the repetition in variable description, but from the user standpoint, that probably is the way to go... I'll get docs up and un-draft this (hopefully tonight) and save test pass for tomorrow.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2569#issuecomment-1129511560:30,down,down,30,https://psicode.org,https://github.com/psi4/psi4/pull/2569#issuecomment-1129511560,1,['down'],['down']
Availability,"I wonder if it would be better if we moved the pre-iterations down so that it generated the one-electron quantities in the ""pre-iterations"" and then the the occupations. . We would have a `==> JK Setup <==` area where the JK builds would be moved down to after the occupation printing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1713#issuecomment-528746372:62,down,down,62,https://psicode.org,https://github.com/psi4/psi4/pull/1713#issuecomment-528746372,2,['down'],['down']
Availability,"I would consider not making VV10 throw an error, since it has negligible effects on the electron density. Najibi and Goerigk write in [doi:10.1021/acs.jctc.8b00842](https://doi.org/10.1021/acs.jctc.8b00842). > While in a strictest sense, energy calculations with vdW-DFAs should be carried out fully self-consistently, we demonstrate conclusively for a total of 11 methods that such a strategy only increases the computational time eﬀort without having any signiﬁcant eﬀect on energetic properties, electron densities, or orbital-energy diﬀerences. The recent analytical frequencies study by Feng, Liang and Head-Gordon in [arXiv:2208.14639](https://arxiv.org/abs/2208.14639) states. > The contribution of VV10 to simulating harmonic frequencies is shown to be small for small molecules but important for systems where weak interactions are important, such as water clusters. That manuscript does have analytical second derivatives, so I guess one could extend it to TDDFT as well?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2849#issuecomment-1380190083:42,error,error,42,https://psicode.org,https://github.com/psi4/psi4/pull/2849#issuecomment-1380190083,1,['error'],['error']
Availability,"I would love to see an algorithm for trying to locate the global minimum of the SCF energy, preferably an automated one. This feature would be especially useful for using Psi4 as a backend for _ab-initio_ MD applications. The random orbital rotation scheme (described in [10.1021/acs.jctc.7b00011](https://dx.doi.org/10.1021/acs.jctc.7b00011)) seems like a simple and sensible approach, as it can nudge the SCF out of saddle points, as well as local minima.; This method might also be useful as a last-resort option for cases where the SCF seems impossible to converge: random rotations could be applied to the initial guess. A reference implementation is available at https://github.com/ReiherGroup/OrbitalPerturbation. (under LGPL3, so no worries there)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/888#issuecomment-352274531:656,avail,available,656,https://psicode.org,https://github.com/psi4/psi4/issues/888#issuecomment-352274531,2,['avail'],['available']
Availability,I would prefer to use `do_LinK` as user facing option over a general `do_linear_exchange`. LinK is not the only available linear scaling exchange implementation in the literature. Also please let the user know that LinK is active. At least I didn't see it in the test output files.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-976673987:112,avail,available,112,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-976673987,1,['avail'],['available']
Availability,I wrote and pushed my own commit implementing them (fixing the copy-paste error). See the latest commit. I don't see an issue here.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2859#issuecomment-1399466230:74,error,error,74,https://psicode.org,https://github.com/psi4/psi4/pull/2859#issuecomment-1399466230,1,['error'],['error']
Availability,"I ~~started~~ finished rebuilding our stack (`gcp`, `dftd4`, `s-dftd3`, ...) for Windows on conda-forge (just recently rebuild the whole thing for OSX/Arm64). Executables as well as Python bindings available are now available for all platforms supported on conda-forge. If anyone can give me some pointers on https://github.com/MolSSI/QCEngine/issues/341 I can also make the first step to resolve https://github.com/psi4/psi4/issues/2360.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-1019170409:198,avail,available,198,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1019170409,2,['avail'],['available']
Availability,"I'd also vote for catching and aborting with a descriptive error, as opposed to temporarily unsetting and carrying on. If the method is part-FC part-all electron, then FC shouldn't be touched in the input.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1530#issuecomment-462905555:59,error,error,59,https://psicode.org,https://github.com/psi4/psi4/issues/1530#issuecomment-462905555,1,['error'],['error']
Availability,"I'd love to have RKS GGA hessians for the 1.10 release next May (and I'd probably be the one who codes it). I'm currently tracking down some errors in integrals, which is higher priority.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3068#issuecomment-1787026243:131,down,down,131,https://psicode.org,https://github.com/psi4/psi4/issues/3068#issuecomment-1787026243,2,"['down', 'error']","['down', 'errors']"
Availability,"I'd prefer not needing to throw in a prefactor at all, but I suppose that's necessary given that `occ` and `dfocc` measure the ""residual"" as the size of the first order update, not the size of the residual proper. No issues there. My thoughts about the CEPA issue are unchanged from my previous comment; as best as I can tell, the energy being within convergence tolerance does not mean all of its spin components are. As for why this doesn't afflict other modules:; * `fnocc` and `occ` compute the energy differently. `fnocc` uses an energy functional that is variational in the amplitudes, where `occ` uses the normal CCD-like energy functional. They'll both agree at convergence, but not at other amplitudes. This difference seems to give `fnocc` its better behaved spin-components.; * There don't seem to be `dfocc` LCCD eneries in the standard suite, so of course those aren't raising errors.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1980#issuecomment-676587339:363,toler,tolerance,363,https://psicode.org,https://github.com/psi4/psi4/pull/1980#issuecomment-676587339,2,"['error', 'toler']","['errors', 'tolerance']"
Availability,"I'd prefer to keep the blurb simple, and if at all possible, separate tests from docs. Why not go with something like:; ```; @loriab : ; Your PR is modifying Psi4's documentation. To make your life easier, we've built ; the updated docs for you. You can preview your changes online at [netlify/...](), ; or locally by downloading [this zip archive](). Please incorporate any further changes by adding commits to this PR.; ```. The samples issue is more complex. I'd avoid trying to teach folks how to use git in an automated blurb. ```; @loriab:; Your PR is modifying Psi4's test suite. To keep the `samples` suite in sync with; `tests`, we have created an automated commit [checksum]() to your PR branch. Please review, merge, or otherwise address the changes proposed in the automated commit ; into your PR before merging the PR into Psi4's `master`. Feel free to ask for help in ; the PR if you have any questions.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2364#issuecomment-981706469:318,down,downloading,318,https://psicode.org,https://github.com/psi4/psi4/pull/2364#issuecomment-981706469,2,['down'],['downloading']
Availability,"I'd suggest trying to identify what the ""header"" to remove in a given error message is for a large variety of error messages, those raised C-side and those raised Py-side. Once you have that, look into the source to confirm the error messages follow that pattern, and when it's confirmed, remove what matches that pattern. Then you should be able to handle the case that an error message contains a colon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1862#issuecomment-611486697:70,error,error,70,https://psicode.org,https://github.com/psi4/psi4/pull/1862#issuecomment-611486697,4,['error'],['error']
Availability,"I'd trust sapt0 over ssapt0 in general. But the large difference btwn them and even btwn sapt0 and HF raises suspicion that the molecule or the distances involved aren't in the perturbation theory regime. SAPT0 should be around the HF and MP2 supermolecular interaction energies. Also, sapt0 is going to have better error cancelation with smaller double-zeta (like jun-cc-pvdz) so maybe svp.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2869#issuecomment-1411453257:316,error,error,316,https://psicode.org,https://github.com/psi4/psi4/issues/2869#issuecomment-1411453257,1,['error'],['error']
Availability,I'd try updating pydantic to v1.10 or downgrading typing_extensions to 4.5.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3062#issuecomment-1767177402:38,down,downgrading,38,https://psicode.org,https://github.com/psi4/psi4/issues/3062#issuecomment-1767177402,1,['down'],['downgrading']
Availability,"I'll review later today. For now, I'll just say that I'm vehemently opposed to opening the first DLPNO-CCSD PR in Psi. I would much prefer a publicly available Psi4Numpy implementation first.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2851#issuecomment-1441901797:150,avail,available,150,https://psicode.org,https://github.com/psi4/psi4/pull/2851#issuecomment-1441901797,1,['avail'],['available']
Availability,"I'll review this once it passes tests. `test_cppe.py:test_cppe_tdscf_uhf` is currently failing. Based on the error message, this has nothing to do with CPPE but represents an indexing error in the code. For a first debug attempt, I would recommend removing both CPPE and the comparison against reference energies, and make sure the TDSCF completes in the first place. Let me know if you need assistance.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2605#issuecomment-1153836192:109,error,error,109,https://psicode.org,https://github.com/psi4/psi4/pull/2605#issuecomment-1153836192,2,['error'],['error']
Availability,"I'll work on that one. What needs to be done:; 1) All codes that have relaxed density available (DCFT, OCC, DF-MP2(RHF), others?) should be able to compute one-electron properties using property() function. This is easy, the relaxed one-particle density matrix should be stored on disk and OEPROP should then be called. OEPROP title needs to be updated.; 2) Manual needs to be updated. More description of property() capabilities needs to be written, the description of OEPROP should be only for developers.; 3) Methods that do not compute the one-particle density for the reference requested by the user should throw.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/40#issuecomment-37993139:86,avail,available,86,https://psicode.org,https://github.com/psi4/psi4/issues/40#issuecomment-37993139,1,['avail'],['available']
Availability,"I'm a little worried about the 0 coefficient handling. The 0 coefficient means ""no local potential."" (See the discussion in #newdev on Nov. 9.) Replacing that with a ""really small but existing local potential"" just _sounds_ like it will create nasty surprises down the road. Good luck getting the tests passing!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/937#issuecomment-373309541:260,down,down,260,https://psicode.org,https://github.com/psi4/psi4/pull/937#issuecomment-373309541,1,['down'],['down']
Availability,"I'm afraid I have a habit of finding obscure bugs! :-) I'd forgotten about needing the additional vectors for linear bends. I'll poke about a bit more to see if I can track it down a bit more. As an aside, is there any real advantage of ""multi"" mode over ""single"" mode, apart form the former appearing to be (in my mind!) more of a logical way of thinking? I'll do some more tests...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/680#issuecomment-295595920:176,down,down,176,https://psicode.org,https://github.com/psi4/psi4/issues/680#issuecomment-295595920,1,['down'],['down']
Availability,"I'm all for locking down permissions at top-level and specifying them per-job. Are the proposed edits taking into account that the write permission is needed not for this repo but for the docs one `psi4/psi4docs` that's governed by its own token, not the `GITHUB_TOKEN`? So perhaps only `read` needed for the per-job permissions. I don't understand tokens too well, so I'm wondering how specialized an analysis is behind the PR? Thanks for proposing it!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2723#issuecomment-1252577899:20,down,down,20,https://psicode.org,https://github.com/psi4/psi4/pull/2723#issuecomment-1252577899,1,['down'],['down']
Availability,"I'm building Libint2 via Psi4; I wouldn't have this error otherwise ;). I'm waiting on Ed to release a stable updated version of Libint2, so that I can package it in Fedora.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2046#issuecomment-737416449:52,error,error,52,https://psicode.org,https://github.com/psi4/psi4/issues/2046#issuecomment-737416449,1,['error'],['error']
Availability,"I'm closing this in favor of #1548. If anyone sees this, please stop and ping me to discuss your build environment, as I can't figure out how it's coming about.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1582#issuecomment-495759920:73,ping,ping,73,https://psicode.org,https://github.com/psi4/psi4/issues/1582#issuecomment-495759920,1,['ping'],['ping']
Availability,"I'm compiling everything by myself. I think the error might be because I got rid of the ```libstdc++``` flag, because I configured with:; ```-DCMAKE_CXX_FLAGS=""-march=native"" ```. This might be an issue related to:; https://stackoverflow.com/questions/35006614/what-does-symbol-not-found-expected-in-flat-namespace-actually-mean. But when I kept it I couldn't configure if I remember correctly. I will check this again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1870#issuecomment-614779248:48,error,error,48,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-614779248,1,['error'],['error']
Availability,"I'm confused, too, as that doesn't seem congruent with your reported . ```; test_paths = [os.getcwd(), os.path.join(os.path.expanduser(""~""), "".qcarchive"")]; FileNotFoundError: [Errno 2] No such file or directory; ```. Unless you have a stray `/tmp/qcengine.yaml`, I'd expect https://github.com/MolSSI/QCEngine/blob/master/qcengine/config.py#L186 to be invoked. Here's a CI run on psi4 1.7 that shows up in qcengine info https://github.com/MolSSI/QCEngine/actions/runs/3654021638/jobs/6174071225#step:9:19 and there's no special configuration or `qcengine.yaml` files. So all I can think of to debug on your setup is to print stuff until the error becomes clear. Sorry for the trouble.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2830#issuecomment-1343786199:641,error,error,641,https://psicode.org,https://github.com/psi4/psi4/issues/2830#issuecomment-1343786199,2,['error'],['error']
Availability,"I'm expecting C++ lgtm to fail for the foreseeable future b/c the additional analysis of libxc is exceeding the 4h time limit. Not sure why it's running out of disk space <3h, but probably not the fault of this PR. will merge.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2092#issuecomment-769547918:197,fault,fault,197,https://psicode.org,https://github.com/psi4/psi4/pull/2092#issuecomment-769547918,1,['fault'],['fault']
Availability,"I'm fine defaulting it to `OFF`, to be honest! Probably safer that way, in regards to unforeseen errors/issues.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3145#issuecomment-2018359606:97,error,errors,97,https://psicode.org,https://github.com/psi4/psi4/pull/3145#issuecomment-2018359606,1,['error'],['errors']
Availability,"I'm getting one other error when I try to use `psi4==1.8.1` alongside some other packages. Any idea what this is about?. ```sh. raised unexpected: TypeError('Error 1 retrieving Psi4 version: stdout: , stderr: Traceback (most recent call last):\n File ""/opt/conda/bin/psi4"", line 213, in <module>\n import psi4 # isort:skip\n File ""/opt/conda/lib/python3.10/site-packages/psi4/__init__.py"", line 68, in <module>\n from . import core\nImportError: /opt/conda/lib/python3.10/site-packages/psi4/core.cpython-310-x86_64-linux-gnu.so: undefined symbol: __dkh_main_MOD_dkh\n'); Traceback (most recent call last):; File ""/opt/conda/lib/python3.10/site-packages/celery/app/trace.py"", line 477, in trace_task; R = retval = fun(*args, **kwargs); File ""/opt/conda/lib/python3.10/site-packages/celery/app/trace.py"", line 760, in __protected_call__; return self.run(*args, **kwargs); File ""/code/bigchem/tasks.py"", line 52, in compute; return qcop_compute(program, inp_obj, raise_exc=raise_exc, **kwargs); File ""/opt/conda/lib/python3.10/site-packages/qcop/main.py"", line 35, in compute; return adapter.compute(; File ""/opt/conda/lib/python3.10/site-packages/qcop/adapters/base.py"", line 143, in compute; results, stdout = self.compute_results(; File ""/opt/conda/lib/python3.10/site-packages/qcop/adapters/qcengine.py"", line 42, in compute_results; qcng_output = qcng_compute(; File ""/opt/conda/lib/python3.10/site-packages/qcengine/compute.py"", line 108, in compute; output_data = executor.compute(input_data, config); File ""/opt/conda/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 141, in compute; pversion = parse_version(self.get_version()); File ""/opt/conda/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 111, in get_version; raise TypeError(f""Error {rc} retrieving Psi4 version: stdout: {so}, stderr: {se}""); TypeError: Error 1 retrieving Psi4 version: stdout: , stderr: Traceback (most recent call last):; File ""/opt/conda/bin/psi4"", line 213, in <module>; import psi4 # isort:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2991#issuecomment-1701672124:22,error,error,22,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1701672124,2,"['Error', 'error']","['Error', 'error']"
Availability,"I'm going over DFOCC now. It may not help, but certainly won't hurt. The reduced dependencies will improve parallelization, which may not help on Travis but will locally. The redundant files list is super useful, @dgasmith. We should certainly make sure that any functions contained therein are either tested (DFOCC, PSIMRCC, CC*, etc.) or removed (libqt, libciomr).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/525#issuecomment-262127128:175,redundant,redundant,175,https://psicode.org,https://github.com/psi4/psi4/issues/525#issuecomment-262127128,1,['redundant'],['redundant']
Availability,"I'm going to put together a psi-hosted libxc 4.0 + patch for psi to build from, in case that's helpful. Congrats for tracking that down.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/900#issuecomment-379371277:131,down,down,131,https://psicode.org,https://github.com/psi4/psi4/issues/900#issuecomment-379371277,1,['down'],['down']
Availability,"I'm having the same problem. I've tracked the problem down to the path of the library not being passed to. `external/common/lapack/FindMathOpenMP.cmake`. Setting `-DOpenMP_LIBRARY_DIRS` solves the issue, but I believe this is not the intended behavior.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1118#issuecomment-410307625:54,down,down,54,https://psicode.org,https://github.com/psi4/psi4/issues/1118#issuecomment-410307625,1,['down'],['down']
Availability,"I'm hitting a similar error message with `dcft_gradient_UHF.cc` but it reports that the error is in `libmints/matrix.h`. Reducing the optimization level was the only way I could get it to compile. Even compiling with -O2 gives the error, -O1 is the only way to resolve it. I see no issue with the compiler- and file-specific flags for this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/923#issuecomment-368651645:22,error,error,22,https://psicode.org,https://github.com/psi4/psi4/issues/923#issuecomment-368651645,3,['error'],['error']
Availability,I'm just referring to the overhead associated with setup & teardown of the calculation. It could slow things down if the calculations are fast (which might be the case with semiempirical methods or minimal basis sets).,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1813#issuecomment-615104789:109,down,down,109,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-615104789,1,['down'],['down']
Availability,"I'm looking for anharmonic modes of vibration of complexes. Good point on the optimization and frequency, for testing purposes I bring the level of theory down to hartree-fock just to make it go faster. On production code runs, the level of theory and basis set are consistent. . I have been playing around with both `frequency()` and `hessian()`. I chose the hessian last night because of this:. https://psicode.org/psi4manual/master/api/psi4.driver.qcdb.vib.harmonic_analysis.html#psi4.driver.qcdb.vib.harmonic_analysis. https://psicode.org/psi4manual/master/freq.html. Where the harmonic analysis is documented showing the IR intensities. The first parameter was a hessian matrix so I went back to go look at how to produce that. Maybe I went down a different rabbit hole. . https://github.com/psi4/psi4/blob/821134f62396ba27f9bcb8fbfa93ea2c370b7616/tests/pytests/test_vibanalysis.py. Line 17-40 I kind of copied your guys test to get the code running. I was actually confused with dipole derivatives and how to produce them and pass them in appropriately. . Ah okay! the frequency has it built in and I can see it. I got confused on the docs. . ```python; theory = 'hf/6-31g*'; ; energy, wave_function = psi4.optimize(; theory,; return_wfn = 'yes',; molecule=universe; ). frequencies = psi4.frequencies(; theory,; ref_gradient=wave_function.gradient(),; molecule=universe. ); ```. Ouput:. ```python; Freq [cm^-1] 1557.5017 4053.2831 4197.9898 ; Irrep A1 A1 B2 ; Reduced mass [u] 1.0830 1.0449 1.0829 ; Force const [mDyne/A] 1.5478 10.1143 11.2435 ; Turning point v=0 [a0] 0.2672 0.1686 0.1627 ; RMS dev v=0 [a0 u^1/2] 0.1966 0.1219 0.1198 ; IR activ [km/mol] 92.6794 13.8599 85.5429 ; Char temp [K] 2240.8982 5831.7720 6039.9727 ; ----------------------------------------------------------------------------------; 1 O 0.00 -0.00 -0.07 0.00 -0.00 0.05 0.00 -0.07 -0.00 ; 2 H -0.00 0.43 0.56 0.00 0.59 -0.39 0.00 0.56 -0.43 ; 3 H 0.00 -0.43 0.56 0.00 -0.59 -0.39 0.00 0.56 0.43 ; ```. So I want to ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2698#issuecomment-1227099808:155,down,down,155,https://psicode.org,https://github.com/psi4/psi4/issues/2698#issuecomment-1227099808,2,['down'],['down']
Availability,"I'm not seeing any change in `compute_fcpi()` in 6 years -- https://github.com/psi4/psi4/blame/master/psi4/src/psi4/libscf_solver/hf.cc#L772-L801 . I also did a fresh clone and compile of master earlier today, and it was fine, so I'm not sure what circumstances could lead to your error. If you're rebuilding psi4 after a long interval, I'd suggest a new objdir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3185#issuecomment-2179665836:281,error,error,281,https://psicode.org,https://github.com/psi4/psi4/issues/3185#issuecomment-2179665836,1,['error'],['error']
Availability,"I'm not sure how big of an issue numpy/BLAS/LAPACK would be for windows, because it would appear that mkl-linked numpy, mkl, and mkl-dev packages for windows are all available on the intel conda channel. So if numpy is able to link correctly I'm sure we would be able to as well. . I think @TiborGY thoughts on I/O related code are spot on, but I don't think we would have that much code elsewhere that would be incompatible, maybe some assumptions are made in driver code about how paths are formatted and those would be fairly simple to find/fix. . I actually don't think it would be terribly difficult for us to get psi working at least with *some* compiler on windows, really the only serious obstacle I see is that none of the developers have windows hardware to do the necessary leg work to get things working. Once things are set up we can probably rely on CI testing for windows keeping things working.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-381759781:166,avail,available,166,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-381759781,2,['avail'],['available']
Availability,"I'm not sure if it's related but I just ran a conda upgrade an a fresh, clean anaconda install, and this happened:; ```; QuickSilver:~ > conda update --prefix /Users/andysim/anaconda3 anaconda; Solving environment: done. ## Package Plan ##. environment location: /Users/andysim/anaconda3. added / updated specs: ; - anaconda. The following packages will be downloaded:. package | build; ---------------------------|-----------------; mkl-2018.0.3 | 1 149.2 MB. The following packages will be DOWNGRADED:. mkl: 2019.0-118 --> 2018.0.3-1; ```; Maybe this means that there's a known problem with mkl2019 and it's being rolled back?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1408#issuecomment-445278710:357,down,downloaded,357,https://psicode.org,https://github.com/psi4/psi4/pull/1408#issuecomment-445278710,2,"['DOWN', 'down']","['DOWNGRADED', 'downloaded']"
Availability,"I'm not sure if there are any Gaussian codes that have the Yukawa kernels. However, I do have the Yukawa kernels in HelFEM for atomic calculations, and for `hyb_gga_xc_camy_b3lyp` I get the following energies. | atom | energy |; |--------|-----------|; | He | -2.90309239 |; | N | -54.59195697 |; | Ne | -128.96948058 |. If you run the calculations in Psi4 with the AHGBS-9 basis (available from the BSE) and a large quadrature grid like (250, 590), you should be able to match these to sub-microhartree accuracy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2386#issuecomment-997412944:381,avail,available,381,https://psicode.org,https://github.com/psi4/psi4/pull/2386#issuecomment-997412944,1,['avail'],['available']
Availability,I'm not sure what's wrong with this. It works fine locally (gcc 9) with new l2. With old l2 I get other unrelated build errors. pausing investigation.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2429#issuecomment-1033094388:120,error,errors,120,https://psicode.org,https://github.com/psi4/psi4/pull/2429#issuecomment-1033094388,1,['error'],['errors']
Availability,"I'm not sure why, but it might be a sol'n. ```(py310) psilocaluser@bash:psinet:/psi/gits/hrw-detangle/objdir_py310: (r2scan) conda list dftd; # packages in environment at /psi/toolchainconda/envs/py310:; #; # Name Version Build Channel; dftd3 3.2.1 h84218bc_2 psi4; (py310) psilocaluser@bash:psinet:/psi/gits/hrw-detangle/objdir_py310: (r2scan) conda list gcp; # packages in environment at /psi/toolchainconda/envs/py310:; #; # Name Version Build Channel; gcp 2.0.2 he991be0_2 psi4; gcp-correction 2.3.1 h1990efc_3 conda-forge; (py310) psilocaluser@bash:psinet:/psi/gits/hrw-detangle/objdir_py310: (r2scan) pytest ../tests/pytests/test_psi4.py ; ================================================================================== test session starts ==================================================================================; platform linux -- Python 3.10.4, pytest-7.1.2, pluggy-1.0.0; rootdir: /psi/gits/hrw-detangle, configfile: pytest.ini; plugins: forked-1.3.0, xdist-2.5.0; collected 0 items / 1 error . ======================================================================================== ERRORS =========================================================================================; ______________________________________________________________________ ERROR collecting tests/pytests/test_psi4.py ______________________________________________________________________; ImportError while importing test module '/psi/gits/hrw-detangle/tests/pytests/test_psi4.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; ../tests/pytests/test_psi4.py:4: in <module>; import psi4; stage/lib/psi4/__init__.py:75: in <module>; from .driver import endorsed_plugins; stage/lib/psi4/driver/__init__.py:46: in <module>; from psi4.driver.molutil import *; stage/lib/psi4/driver/molutil.py:36: in <module>; from psi4.driver.p4util import temp_circular_import_blocker; stage/lib/psi4/driver/p4util/__init__.py:35: in <module>; from .fcidump import *; stage/lib/psi4",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2842#issuecomment-1444984342:1244,error,error,1244,https://psicode.org,https://github.com/psi4/psi4/pull/2842#issuecomment-1444984342,1,['error'],['error']
Availability,"I'm of the opinion that we should either hunt it down or leave an error message describing how the input _should_ have been written. Given what the user is trying to do, the approach they took is the one I would have tried first.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1325#issuecomment-434799841:49,down,down,49,https://psicode.org,https://github.com/psi4/psi4/issues/1325#issuecomment-434799841,2,"['down', 'error']","['down', 'error']"
Availability,"I'm ok with adding a throw for Cartesian auxiliary basis sets, although; post-PR I'd like work to continue on trying to track this down. On Sun, Apr 29, 2018 at 10:08 AM, Daniel Smith <notifications@github.com>; wrote:. > @loriab <https://github.com/loriab> @schiebermc; > <https://github.com/schiebermc> If you force a DISK_DFJK do you see this; > issue? Should tell us where the issue lies.; >; > @psi4/maintainers <https://github.com/orgs/psi4/teams/maintainers> I; > think this is good to go, the only remaining issue is the cartesian; > auxiliary basis set. For this I would like to just add a throw and; > additional if statements in the JK constructor to force DISK_DFJK for now; > and throw in the MEM_DFJK object.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/961#issuecomment-385254164>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdqoEE36eTVxnpwiSXLzRlMcsWKKBks5ttclxgaJpZM4TTiAA>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/961#issuecomment-385255339:131,down,down,131,https://psicode.org,https://github.com/psi4/psi4/pull/961#issuecomment-385255339,1,['down'],['down']
Availability,"I'm running this on my cluster. If your cluster returns additional error and output files other than the standard `output.dat`, could you check to see if those have any content?. Definitely let us know if the words ""Failed to converge"" show up. I have a suspicion as to what part of the code is the problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1921#issuecomment-640054780:67,error,error,67,https://psicode.org,https://github.com/psi4/psi4/issues/1921#issuecomment-640054780,1,['error'],['error']
Availability,"I'm sure Stanton knows what he is talking about here, but I am not sure; there is a discrepancy between what he is saying and what I am saying.; Perhaps he never coded the minimal displacement approach, as we have never; coded it either. He may have decided the robustness and simplicity of +2/3; gradients was better than the complexity and complication of solving all; these little equations. I don't see a problem with you going ahead as you; are planning for pyvib2. We could revisit to try to reduce the; computational cost slightly at a later time. On Fri, Jan 19, 2018 at 12:43 PM, Lori A. Burns <notifications@github.com>; wrote:. > @psi-rking <https://github.com/psi-rking>, my concern is your insistence; > that the rot SALCs *aren't* needed at non-stationary geometries (""3; > rotational degrees for which the energy is invariant"", ""don't have to do; > the extra displacements"") vs. Stanton's insistence that they *are* (""At a; > stationary point on the potential energy surface, both options will give; > equivalent harmonic force fields, but OFF [retains the rotational degrees; > of freedom] should be used at non-stationary points."" Since pyvib2 has to; > start from Cartesian Hessians (findif or anal.), I'm just trying to gauge; > what situations the former is valid for.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/884#issuecomment-359053844>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/ADguTPrMzI8UDltN7yLjOYyEfycGPrnAks5tMOJIgaJpZM4REtHr>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/884#issuecomment-359059459:262,robust,robustness,262,https://psicode.org,https://github.com/psi4/psi4/issues/884#issuecomment-359059459,2,['robust'],['robustness']
Availability,I'm suspecting that also. One odd thing is that it only did it for me (and others) from a search engine. It's hijacking based on the referer in the header (no idea if this is common). compare:. ```; wget --referer www.google.com psicode.org; ```. vs. ```; wget psicode.org; ```. The first will download an html document that is just a redirect. The second gets me the real psicode.org,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/342#issuecomment-210023458:294,down,download,294,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210023458,1,['down'],['download']
Availability,"I'm taking a look at this in pyoptking and hit the scf issue described above (after deactivating the torsion error). @loriab `""guess"" : ""read""` is being sent to psi4 in the `AtomicInput`. Is `read` expected to work with a standard energy call followed by a call through `run_qcschema`?. I get:; `Unable to find file 180, defaulting to SAD guess.` . If psi4 is looking in `$PSI_SCRATCH` I don't see file 180 there.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2213#issuecomment-870088078:109,error,error,109,https://psicode.org,https://github.com/psi4/psi4/issues/2213#issuecomment-870088078,1,['error'],['error']
Availability,"I'm trying to compile your branch, to test on my machine, but keep hitting an incompatibility related to a `toupper` macro. Have you ever seen this before?. ```; In file included from /Users/andysim/rmrpsi4/psi4/src/lib/libparallel/p_fprintf.cc:30:; In file included from /Users/andysim/rmrpsi4/psi4/src/lib/libparallel/parallel.h:40:; In file included from /Users/andysim/rmrpsi4/psi4/src/lib/libparallel/process.h:38:; In file included from /Users/andysim/rmrpsi4/psi4/src/lib/liboptions/liboptions.h:43:; In file included from /Users/andysim/rmrpsi4/psi4/src/lib/libpsi4util/exception.h:33:; In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/sstream:174:; In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/ostream:138:; In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/ios:216:; /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/__locale:466:15: error: C++ requires a type; specifier for all declarations; char_type toupper(char_type __c) const; ^; /Users/andysim/miniconda/include/python2.7/pyport.h:731:29: note: expanded from macro 'toupper'; #define toupper(c) towupper(btowc(c)); ```. Both the HomeBrew and Conda versions of Python seem to have this issue. I just did a simple `cmake -DCMAKE_BUILD_TYPE=Debug ..` to configure, and it found the appropriate Python libs (I also removed the HomeBrew Python completely, to force Conda to be used.). I can see what the problem is, but I have no idea why it's occuring now, _i.e._, which flags we used before to avoid the problem. Any ideas?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235109795:1136,error,error,1136,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235109795,2,['error'],['error']
Availability,"I've PR'd to this PR a fix for all the recent ghost/ECP issues (https://github.com/PeterKraus/psi4/pull/2). This is all sidestepping the true problem, which is that we're overloading `mol->Z()` to be atomic number, ghostedness, and non-ECP charge. Errors downstream of libmints Molecule are going to keep popping up, methinks. In fact, I should probably check the mol->json procedure. Thoughts on a forward strategy?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1109#issuecomment-409411582:248,Error,Errors,248,https://psicode.org,https://github.com/psi4/psi4/pull/1109#issuecomment-409411582,2,"['Error', 'down']","['Errors', 'downstream']"
Availability,I've added a test for UHF integral dumps. The tests are in both as PsiAPI _and_ as Psithon. The former is failing without any particularly informative error message. Suggestions on how to troubleshoot?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/872#issuecomment-355999602:151,error,error,151,https://psicode.org,https://github.com/psi4/psi4/pull/872#issuecomment-355999602,1,['error'],['error']
Availability,"I've been able to reproduce a disagreement between Psi4 and PySCF integrals. I've reached out to the `libecpint` developer to figure out if this may be an issue of numerical tightness. As far as I can tell, there's no mechanism for Psi4 to tell `libecpint` that we want our integrals to within a certain tolerance. That may be the issue for the iron pentacarbonyl system. The disagreement for your second system is much more disturbing, but my policy with debugging is to start with the simple cases first.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2564#issuecomment-1157785855:304,toler,tolerance,304,https://psicode.org,https://github.com/psi4/psi4/issues/2564#issuecomment-1157785855,2,['toler'],['tolerance']
Availability,"I've been playing build bisect today on the conda package and narrowed this problem down to `-static-libstdc++`. Troublesome, since the build will have to become less static, but hardly the worst outcome. So by the time new conda packages are public again, this will be fixed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/862#issuecomment-379955622:84,down,down,84,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-379955622,1,['down'],['down']
Availability,"I've decided that this bugfix will require some discussion before we can act because changes to the number of MOs resulting from changing linear dependencies in the basis can yield a number of different errors. If nmo increases (as in this test case), then HF::dump_to_checkpoint() fails when it attempts to write too many orbital energies. However, if nmo decreases, then the use of the previous set of MOs will fail because they will be mis-read, producing an incorrect initial guess. We should put this down as a topic for discussion at the next hack-a-thon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/32#issuecomment-37137150:203,error,errors,203,https://psicode.org,https://github.com/psi4/psi4/issues/32#issuecomment-37137150,2,"['down', 'error']","['down', 'errors']"
Availability,"I've discussed this PR with Yi. This is just to confirm that we want to change the default exch-disp scaling scheme, as the new one appears to be more reliable. Apparently the previous test case didn't break because the exch-disp scheme was manually selected in the test case, rather than utilizing the (updated) default.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1281369067:151,reliab,reliable,151,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1281369067,1,['reliab'],['reliable']
Availability,"I've fixed this, but the changes haven't been synched to psi4public yet. Will do that this week. . Sent from my iPhone. > On May 3, 2015, at 8:00 AM, wpoely86 notifications@github.com wrote:; > ; > psi4 --version gives:; > ; > (gdb) r; > Starting program: /home/ward/tmp/psi4release/build2/bin/psi4 --version; > [Thread debugging using libthread_db enabled]; > Using host libthread_db library ""/lib64/libthread_db.so.1"".; > ; > Program received signal SIGSEGV, Segmentation fault.; > std::ostream::sentry::sentry (this=0x7fffffffcea0, __os=...) at /usr/src/debug/gcc-4.9.2-20150212/obj-x86_64-redhat-linux/x86_64-redhat-linux/libstdc++-v3/include/bits/ostream.tcc:51; > 51 if (__os.tie() && __os.good()); > Missing separate debuginfos, use: debuginfo-install python-libs-2.7.8-9.fc21.x86_64; > (gdb) bt; > #0 std::ostream::sentry::sentry (this=0x7fffffffcea0, __os=...) at /usr/src/debug/gcc-4.9.2-20150212/obj-x86_64-redhat-linux/x86_64-redhat-linux/libstdc++-v3/include/bits/ostream.tcc:51; > #1 0x000000390e699869 in std::__ostream_insert<char, std::char_traits<char> > (__out=..., __s=__s@entry=0x2baeb60 "" "", '-' <repeats 71 times>, ""\n"", __n=76); > at /usr/src/debug/gcc-4.9.2-20150212/obj-x86_64-redhat-linux/x86_64-redhat-linux/libstdc++-v3/include/bits/ostream_insert.h:82; > #2 0x0000000001e6bd18 in operator<< std::char_traits<char > (__s=0x2baeb60 "" "", '-' <repeats 71 times>, ""\n"", __out=...) at /usr/include/c++/4.9.2/ostream:535; > #3 Write2Buffer<char*> (Input=<synthetic pointer>, this=0x0) at /home/ward/tmp/psi4release/src/lib/libparallel/PsiOutStream.h:157; > #4 psi::PsiOutStream::Printf (this=0x0, format=format@entry=0x204e9c0 "" "", '-' <repeats 71 times>, ""\n"") at /home/ward/tmp/psi4release/src/lib/libparallel/PsiOutStream.cc:82; > #5 0x00000000008a79bf in psi::print_version () at /home/ward/tmp/psi4release/build2/src/bin/psi4/version.cc:38; > #6 0x00000000008e2d57 in psi::psi_start (argc=argc@entry=2, argv=argv@entry=0x7fffffffd798) at /home/ward/tmp/psi4release/src/bin/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/88#issuecomment-98488186:474,fault,fault,474,https://psicode.org,https://github.com/psi4/psi4/issues/88#issuecomment-98488186,1,['fault'],['fault']
Availability,"I've got a branch that's only two days removed from master, and its smoke tests are clean. There is a problem with psi4 and qcng 0.28, but I'm sure you're on linux. After pulling tags, one does have to rebuild for the versioning to take effect. But if you're sure that's not it, go ahead and execute the results of `<objdir>/stage/bin/psi4 --psiapi`. It shouldn't be necessary for ctest, but considering those failures are those tests running the python command _and_ those that use qcengine, best to make sure of paths. Beyond that, see if `<objdir>/Testing/Temporary/LastTest.log` has some output clues.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3028#issuecomment-1683215745:410,failure,failures,410,https://psicode.org,https://github.com/psi4/psi4/issues/3028#issuecomment-1683215745,1,['failure'],['failures']
Availability,"I've got all the parts that affect REMP ready. Final stage is to persuade dfocc to converge simple molecules to default tolerance under default conditions :-) . I'll update this PR as the amalgamation, then break off just `occ` changes for you and other to look over, @behnle. A couple easy questions:; * Do you want REMP controlled by `mp_type` (covers all MPn > 2 and ZAPT) or `cc_type` (covers CEPA and CC)? Either is sensible, so your call.; * Any need to future-proof QCVariables with `REMP2` (or `REMP2,3`!)?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2633#issuecomment-1198695727:120,toler,tolerance,120,https://psicode.org,https://github.com/psi4/psi4/pull/2633#issuecomment-1198695727,2,['toler'],['tolerance']
Availability,"I've gotten that once today, too. Then I've gotten distracted by other matters. Even if a restart fixes it, another CI failure will crop up later on, so please rebase, and we'll see if this is a consistent issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2808#issuecomment-1332827250:119,failure,failure,119,https://psicode.org,https://github.com/psi4/psi4/pull/2808#issuecomment-1332827250,1,['failure'],['failure']
Availability,"I've just noticed that this is meant for the 1.3 release. I'll have another look at it and will implement both `freeze_core True/False` and `freeze_core 0/-1/-2/-3` options, where `False == 0` witout FC, `True` is the ""smart handling"" (previous rare gas of each atom, taking into account charge), and `-1/-2/-3` would be ""strict"" N-th previous rare gas, ignoring charge but throwing a reasonable error when all electrons are frozen. I will have it done by Monday, if that's OK?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1350#issuecomment-451187734:396,error,error,396,https://psicode.org,https://github.com/psi4/psi4/pull/1350#issuecomment-451187734,1,['error'],['error']
Availability,"I've made a new PR #2743 to JUST fix the hang bug, and then we can keep bikeshedding here on what we actually want to do about `RadialGrid` and `SphericalGrid` but have a fix in the codebase that actually stops the nasty hang that took me down this rabbit hole in the first place. - @susilehtola this initializes with an initializer list like you requested; - @hokru this loses NO information over the prior state-of-the-world like you suggested was desirable (if I was reading correctly); - @JonathonMisiewicz I guess you won't like it because spaghetti didn't go away but it's short and sweet, at least. Obviously this patch would undo all of that patch but I think the scope of this discussion exceeded the original PR statement.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2736#issuecomment-1273725391:239,down,down,239,https://psicode.org,https://github.com/psi4/psi4/pull/2736#issuecomment-1273725391,2,['down'],['down']
Availability,"I've made a nofortran py37 Mac build accessible through `conda create -n amber3 ambertools=20 blas=*=mkl psi4/label/dev::libxc psi4 -c conda-forge -c psi4/label/nofortran -c psi4/label/dev`. It won't get automatically updated regularly, but I can do so upon pinging. Hopefully this'll do for CI. lmk if a different python preferred.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2024#issuecomment-723231235:258,ping,pinging,258,https://psicode.org,https://github.com/psi4/psi4/issues/2024#issuecomment-723231235,1,['ping'],['pinging']
Availability,"I've rebased this so that dev psi4 is working with dev libxc (soon to be libxc v5). Haven't tried fixing up psi for xc changes in the last year+, so there are failing tests at present. * Libxc master is still labeled 4.3.4, which is the same as the very different release branch current psi is accustomed to. Probably the easiest way to work with clones of both projects and be sure of what you're getting is to build libxc master (`-DBUILD_SHARED_LIBS=ON`), install it, edit the `ConfigVersion.cmake` file to `4.4`, go to psi, force uninstall libxc conda package if libxc is in your active env, edit external/upstream/libxc/CM to 4.4, build psi passing `-DLibxc_DIR=/path/to/dir/of/ConfigVersion`, build psi, check you've got the right one with `ldd stage/lib/psi4/core`.; * Errors at present:; ```; 	158 - dft-grad-lr1 (Failed); 	159 - dft-grad-lr2 (Failed); 	160 - dft-grad-lr3 (Failed); 	175 - dft1 (Failed); 	177 - dft1-alt (Failed); 	179 - dft3 (Failed); 	180 - dft-omega (Failed); 	213 - frac-ip-fitting (Failed); 	338 - sapt-dft-lrc (Failed); 	364 - soscf-dft (Failed); 	397 - dft-custom-hybrid (Failed); 	399 - dft-custom-gga (Failed); 	443 - dftd3-energy (Failed); ```; ```; >>> pytest ../tests/pytests/test_dft_benchmarks.py -rws -v -n12; [gw8] [ 5%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[B5050LYP- - ]; [gw7] [ 18%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[MN12-SX- - ]; [gw5] [ 22%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[SCAN0- - ]; [gw8] [ 33%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[wB97- - ]; [gw6] [ 36%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[wB97X-D- - ]; [gw6] [ 43%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[wB97X-V- - ]; [gw2] [ 47%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[SCAN- - ]; [gw8] [ 54%] FAILED ../tests/pytests/test_dft_benchm",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-601509105:776,Error,Errors,776,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-601509105,1,['Error'],['Errors']
Availability,"I've reinstalled everything and indicated the path to the libstdc++, so this might fix the issue I had before (I'm running the tests now and I'll see). Just a small question. I did the ```otool -L``` as follows, does the output looks good to you ?. ```; otool -L /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so; /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so:; 	@rpath/core.cpython-37m-darwin.so (compatibility version 0.0.0, current version 0.0.0); 	/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1252.250.1); 	@rpath/libmkl_rt.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libiomp5.dylib (compatibility version 5.0.0, current version 5.0.0); 	/usr/local/opt/gcc@8/lib/gcc/8/libgomp.1.dylib (compatibility version 2.0.0, current version 2.0.0); 	/usr/local/opt/gcc@8/lib/gcc/8/libstdc++.6.dylib (compatibility version 7.0.0, current version 7.25.0); 	/usr/local/lib/gcc/8/libgcc_s.1.dylib (compatibility version 1.0.0, current version 1.0.0); ```. About numpy, I have something like this, does it look good as well ?; ```; otool -L /usr/local/lib/python3.7/site-packages/numpy/core/_multiarray_umath.cpython-37m-darwin.so; /usr/local/lib/python3.7/site-packages/numpy/core/_multiarray_umath.cpython-37m-darwin.so:; 	@loader_path/../.dylibs/libopenblasp-r0.3.7.dylib (compatibility version 0.0.0, current version 0.0.0); 	/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1252.50.4); ```. Otherwise, do you advise me to download the INTEL distribution ? https://software.intel.com/en-us/distribution-for-python/choose-download",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1870#issuecomment-614842621:1590,down,download,1590,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-614842621,2,['down'],['download']
Availability,"I've removed the work-in-progress marker as this first step is reasonably complete. The `Tensor` class as storage object has an acceptable interface both on the C++ and the Python side (I think!) I can use this to work further on the `linalg` namespace, add BLAS/LAPACK wrappers, and eventually transition the SCF to xtensor. I have tried to fix Azure CI, to no avail. I can't quite figure out whether I need to change the xtensor source or the CI setup.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-484270023:362,avail,avail,362,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-484270023,1,['avail'],['avail']
Availability,"I've run full tests with both py27 & py36 and both report the following. The last two are b/c hungarian not installed – not a problem. The first two are b/c MemDFJK isn't handling Cartesian basis sets right. I'm not sure how those other errors you were seeing came about, @schiebermc. Was there a point in this branch where full tests was clean? There's been upheaval to `master`, so we could reason from there. ```; The following tests FAILED:; 	187 - fd-freq-energy-large (Failed); 	212 - mints8 (Failed); 	375 - pywrap-align (Failed); 	376 - pywrap-align-chiral (Failed); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/961#issuecomment-384197920:237,error,errors,237,https://psicode.org,https://github.com/psi4/psi4/pull/961#issuecomment-384197920,1,['error'],['errors']
Availability,"I've run this test with both SCF and B3LYP and, although neither; successfully identifies a TS, neither throws an error either. On Tue, Mar 29, 2016 at 2:24 PM, Daniel Smith notifications@github.com; wrote:. > @psi-rking https://github.com/psi-rking Just FYI this bug occurs with; > SCF/DFT or MP2 for a cheaper.; > ; > For me, the primary concern is the symmetry mapping error is fairly; > generic. I think a bit clearer error message (if possible) would be; > sufficient.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/10#issuecomment-203062097",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/10#issuecomment-203440132:114,error,error,114,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-203440132,6,['error'],['error']
Availability,"I've seen similar errors when Python versions are mixed. Use which python and which python-config to check your shell versions. Use ldd bin/psi4 to check the linked version. Boost also could have been built against a diff Python. If there's any mismatch identified or possible, try passing --python to setup (setup --help for details) and letting psi4 build the packaged boost. No turning off Python for psi4, I'm afraid. It's integral to the executable. . Sent from my iPhone. > On May 11, 2015, at 12:11 AM, Vladimir notifications@github.com wrote:; > ; > Dear Pis4 developers.; > ; > I've got in issue when link psi4 binary:; > ; > /usr/local/lib/libpython2.7.a(posixmodule.o): In function `posix_tmpnam':; > /home/kbob/bin/Python-2.7.5/./Modules/posixmodule.c:7515: warning: the use of`tmpnam_r' is dangerous, better use `mkstemp'; > /usr/local/lib/libpython2.7.a(posixmodule.o): In function`posix_tempnam':; > /home/kbob/bin/Python-2.7.5/./Modules/posixmodule.c:7462: warning: the use of `tempnam' is dangerous, better use`mkstemp'; > /home/kbob/git/psi4release/build/boost/lib/libboost_python-1_57.a(builtin_converters.o): In function `boost::python::converter::(anonymous namespace)::slot_rvalue_from_python<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >, boost::python::; > builtin_converters.cpp:(.text+0x1286): undefined reference to`PyUnicodeUCS4_AsWideChar'; > /home/kbob/git/psi4release/build/boost/lib/libboost_python-1_57.a(builtin_converters.o): In function `encode_string_unaryfunc':; > builtin_converters.cpp:(.text+0x455): undefined reference to`PyUnicodeUCS4_FromEncodedObject'; > collect2: error: ld returned 1 exit status; > make[2]: **\* [bin/psi4] Ошибка 1; > make[1]: **\* [src/bin/psi4/CMakeFiles/psi4.dir/all] Ошибка 2; > make: **\* [all] Ошибка 2; > I'm running on Ubuntu 14.04 with cmake installed from ppa:george-edison55/cmake-3.x; > ; > Since the default version available in 14.04 is boost-1.54, used to compile boost_1_57_0.tar.bz2 th",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/94#issuecomment-100760375:18,error,errors,18,https://psicode.org,https://github.com/psi4/psi4/issues/94#issuecomment-100760375,1,['error'],['errors']
Availability,I've shut down the trac pages of sirius.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/112#issuecomment-121439521:10,down,down,10,https://psicode.org,https://github.com/psi4/psi4/issues/112#issuecomment-121439521,1,['down'],['down']
Availability,"I've tracked this down to ""GGA_X_ITYH"", which is the range-separated GGA part - this exchange functional just doesn't converge for the above system, even when I run something like 100% X_ITYH + 100% C_VWN without range separation. @susilehtola, is there any reason the 3.0.0 version could be broken?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/900#issuecomment-379370522:18,down,down,18,https://psicode.org,https://github.com/psi4/psi4/issues/900#issuecomment-379370522,1,['down'],['down']
Availability,"I've tweaked the https://github.com/MolSSI/QCEngine/pull/393/files PR slightly, and I think it's ready for merge. Here, I've added a few tests (b97-3c, r2scan2-3c, and r2scan2-d4) and tried them with several combinations of old/new gcp, old/new dftd3, and 3.4/3.5 dftd4, so I'm semi-confident they run when they ought and give helpful errors when they can't. The tests I added cover energy and gradient, but they're purely internal -- no reference values from a separate implementation. What further tests are wanted?. The labels/selectors for pytest should be in good shape (that is, tests will skip if wrong gcp/d3/d4 detected). CTest selectors aren't in good shape, so if you get helpful ""can't run"" errors, that's expected; wrong values aren't expected.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2842#issuecomment-1672766348:335,error,errors,335,https://psicode.org,https://github.com/psi4/psi4/pull/2842#issuecomment-1672766348,2,['error'],['errors']
Availability,"I, too, am worried that dummy atoms and adjusted geometries weren't designed to work together, as none of the scanning examples use dummy atoms. (In which case we need an error message.) However, there is a workaround. You could define the molecule as a string, then instantiate the molecule anew for each step in the scan, like below. Would this help? Thanks for trying psi!. ```; sdimer = """"""; He; X 1 {R} ; He 2 1.0 1 180 ; """""". set basis 6-31G(d). Rvals = [1.4, 1.5]; ref_nre = {1.4: 0.8819620, 1.5: 0.8466835}. ### Compute; ecp = {}; nre = {}; for R in Rvals:; dimer = geometry(sdimer.format(R=R)); ene = energy(""mp2""); ecp[R] = ene; nre[R] = dimer.nuclear_repulsion_energy(); print(R, ene, dimer.nuclear_repulsion_energy()); ; for R in Rvals:; compare_values(ref_nre[R], nre[R], 5, f'nre {R}'). ```; ```; 1.4 -5.732454436415538 0.8819620177833327; 1.5 -5.7325858447838085 0.846683537072; nre 1.4...............................................................................PASSED; nre 1.5...............................................................................PASSED; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2880#issuecomment-1444654883:171,error,error,171,https://psicode.org,https://github.com/psi4/psi4/issues/2880#issuecomment-1444654883,1,['error'],['error']
Availability,"I, too, would like to see at least a token Mac build eventually. But when Mac and python3 get added to the build matrix, the number of builds starts to get really high, considering our compile time. So I slightly favor the thinning. Also, master is already a protected branch. After the closing down of private master into read-only, should we activate that we _can't_ merge PR w/o them passing CI?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237#issuecomment-182576134:295,down,down,295,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182576134,1,['down'],['down']
Availability,"IS; @DF-RKS iter 6: -76.33541735566205 -1.04765e-08 1.19390e-06 DIIS; @DF-RKS iter 7: -76.33541735595242 -2.90370e-10 2.40194e-07 DIIS. ==> Post-Iterations <==. Orbital Energies (a.u.); -----------------------. Doubly Occupied: . 1A -19.184718 2A -1.000452 3A -0.509499 ; 4A -0.360493 5A -0.281933 . Virtual: . 6A 0.113651 7A 0.212439 8A 0.827371 ; 9A 0.915633 10A 0.937398 11A 0.938267 ; 12A 1.123156 13A 1.234184 14A 1.763048 ; 15A 1.774444 16A 1.811716 17A 2.329295 ; 18A 2.632599 19A 3.611500 . Final Occupation by Irrep:; A ; DOCC [ 5 ]. Energy converged. @DF-RKS Final Energy: -76.33541735595242. => Energetics <=. Nuclear Repulsion Energy = 8.9272515369995578; One-Electron Energy = -122.8414514085261118; Two-Electron Energy = 44.6070248999700425; DFT Exchange-Correlation Energy = -7.0282423843959076; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -76.3354173559524156. Alert: EFP and PCM quantities not currently incorporated into SCF psivars. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; ==> Properties <==. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 14.2834 Y: 0.0000 Z: -23.5602. Electronic Dipole Moment: (a.u.); X: -15.1523 Y: -0.0000 Z: 23.6231. Dipole Moment: (a.u.); X: -0.8689 Y: -0.0000 Z: 0.0628 Total: 0.8712. Dipole Moment: (Debye); X: -2.2085 Y: -0.0000 Z: 0.1597 Total: 2.2143. Saving occupied orbitals to File 180. *** tstop() called on machtiani1 at Wed Feb 10 19:35:42 2016; Module time:; user time = 23.90 seconds = 0.40 minutes; system time = 1.02 seconds = 0.02 minutes; total time = 4 seconds = 0.07 minutes; Total time:; user time = 23.90 seconds = 0.40 minutes; system time = 1.02 seconds = 0.02 minutes; total time = 4 seconds = 0.07 minutes; [Error prints before oeprop]; ```. The other crash I saw was just the input/output from the conda install test. Let me know if you need more information.; -kratz",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/240#issuecomment-182660528:9187,Error,Error,9187,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182660528,1,['Error'],['Error']
Availability,"Ideally, the list of functionals in Psi4 would depend on the version of libxc available. And yes, it would be nice to be able to compile Psi4 without modifications against the distribution version of libint. The Fedora package supports very large angular momentum, whereas the default libint that's automatically compiled by Psi4 can't handle density fitting basis sets for transition metals...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1302#issuecomment-451102082:78,avail,available,78,https://psicode.org,https://github.com/psi4/psi4/issues/1302#issuecomment-451102082,1,['avail'],['available']
Availability,"Ideally, you should know what kind of basis set you're using, as you're presumably going to cite it in your work; the details about the number of core `e-`'s treated as effective potentials will be included there. There are also all-electron basis sets available for almost any element; some of them are shipped with Psi4 (eg. 3-21g). Psi4 tells you the basis has an ECP in the `=> Loading Basis Set <=` section, and the details are printed later on under `==> Primary Basis <==`. As for the question of 28 vs 36 electrons: the first 28 electrons are the 1s2 + 2s2, 2p6 + 3s2, 3p6, 3d10 shells - ie. full 1st, 2nd and 3rd shell. The additional 8 electrons you're thinking about are from the 4th period shells, where the 4d10 part is in your 5th valence shell - so you don't really want to replace any of those with a potential. (At least that's my rather limited understanding.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1113#issuecomment-412880178:253,avail,available,253,https://psicode.org,https://github.com/psi4/psi4/issues/1113#issuecomment-412880178,1,['avail'],['available']
Availability,If I build this PR locally it takes the (old) libxc header from `miniconda/include/` (Lapack include dir in CMakeCache) instead of the new from `stage/include`. See below. I suppose users would need to make sure there is no old libxc around in their conda env.; So maybe more of an Azure setup problem for now?. ```; [ 42%] Building CXX object src/psi4/libfunctional/CMakeFiles/functional.dir/LibXCfunctional.cc.o; cd /Users/kruse/qc/psi4/objdir_LIBXC/psi4-core-prefix/src/psi4-core-build/src/psi4/libfunctional && /Users/kruse/homebrew/bin/g++-9 -DUSING_LAPACK_MKL -DUSING_Libxc -I/Users/kruse/qc/psi4/psi4/include -I/Users/kruse/qc/psi4/psi4/src -isystem /Users/kruse/qc/miniconda3/include -isystem /Users/kruse/qc/psi4/objdir_LIBXC/stage/include -march=native -O3 -DNDEBUG -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.15.sdk -fPIC -fvisibility=hidden -fvisibility-inlines-hidden -fopenmp -std=c++14 -o CMakeFiles/functional.dir/LibXCfunctional.cc.o -c /Users/kruse/qc/psi4/psi4/src/psi4/libfunctional/LibXCfunctional.cc; /Users/kruse/qc/psi4/psi4/src/psi4/libfunctional/LibXCfunctional.cc: In member function 'void psi::LibXCFunctional::set_tweak(std::vector<double>)':; /Users/kruse/qc/psi4/psi4/src/psi4/libfunctional/LibXCfunctional.cc:256:69: error: invalid conversion from 'const xc_func_info_type*' to 'xc_func_info_type*' [-fpermissive]; 256 | int npars = xc_func_info_get_n_ext_params(xc_functional_.get()->info);; | ~~~~~~~~~~~~~~~~~~~~~~^~~~; | |; | const xc_func_info_type*; In file included from /Users/kruse/qc/psi4/psi4/src/psi4/libfunctional/LibXCfunctional.cc:43:; /Users/kruse/qc/miniconda3/include/xc.h:124:54: note: initializing argument 1 of 'int xc_func_info_get_n_ext_params(xc_func_info_type*)'; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-621118524:1308,error,error,1308,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-621118524,1,['error'],['error']
Availability,"If an error occurs, it occurs again when you call ""make"". So if you now call ""make VERBOSE=1"" instead, you should get the specific info you're looking for.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/82#issuecomment-95674415:6,error,error,6,https://psicode.org,https://github.com/psi4/psi4/issues/82#issuecomment-95674415,1,['error'],['error']
Availability,If conda is used you will likely need to run this:; `update psi4 libefp libint erd simint pcmsolver chemps2 gdma dkh libxc -c psi4/label/dev` or else; you will get this error: http://forum.psicode.org/t/psi4-error-after-upgrade/662/2. (I happend to run into this today morning),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/936#issuecomment-373034538:169,error,error,169,https://psicode.org,https://github.com/psi4/psi4/issues/936#issuecomment-373034538,2,['error'],"['error', 'error-after-upgrade']"
Availability,"If only. I added #include <tuple> to src/bin/detci/ciwave.h (and params), but I still get the error.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/444#issuecomment-232855724:94,error,error,94,https://psicode.org,https://github.com/psi4/psi4/issues/444#issuecomment-232855724,1,['error'],['error']
Availability,"If the above works, and you think it'd be helpful, I can edit https://github.com/psi4/psi4/blob/master/share/python/proc.py#L825 to something like. ``` python; elif reference == 'ROHF':; if mtd_type == 'CONV':; if module == 'DETCI': # no default for this case; func = run_detci; elif module in ['']:; psi4.print_out(""""""This method is available inefficiently as a byproduct of a CISDT computation. Add ""set qc_module detci"" to input to access this route.""""""); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/282#issuecomment-189441001:334,avail,available,334,https://psicode.org,https://github.com/psi4/psi4/issues/282#issuecomment-189441001,1,['avail'],['available']
Availability,"If the tests can be fixed and we can go back to testing all test cases; soon, that's fine. If there are persistent problems then the troublesome; tests could be removed from the list temporarily while they get patched up. On Tue, Nov 22, 2016 at 3:37 PM, Lori A. Burns notifications@github.com; wrote:. > At the moment, just quicktests (~118) because cc14 and mints9 are still; > failing. The latter is my fault, the former is a mystery. Failures make the; > conda build fail, so the test suite needs to be clean before go back to; > running all.; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/524#issuecomment-262358481, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9Qdm1_eSI8ptMLf1jUlyVER46R1xZpks5rA1J3gaJpZM4K4Unt; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/524#issuecomment-262370710:406,fault,fault,406,https://psicode.org,https://github.com/psi4/psi4/pull/524#issuecomment-262370710,2,"['Failure', 'fault']","['Failures', 'fault']"
Availability,"If we don't print the number of implied core electrons in the output; somewhere when using an ECP basis, it wouldn't be a bad idea to do so. On Tue, Aug 14, 2018 at 9:56 AM Peter Kraus <notifications@github.com>; wrote:. > Ideally, you should know what kind of basis set you're using, as you're; > presumably going to cite it in your work; the details about the number of; > core e-'s treated as effective potentials will be included there. There; > are also all-electron basis sets available for almost any element; some of; > them are shipped with Psi4 (eg. 3-21g). Psi4 tells you the basis has an ECP; > in the => Loading Basis Set <= section, and the details are printed later; > on under ==> Primary Basis <==.; >; > As for the question of 28 vs 36 electrons: the first 28 electrons are the; > 1s2 + 2s2, 2p6 + 3s2, 3p6, 3d10 shells - ie. full 1st, 2nd and 3rd shell.; > The additional 8 electrons you're thinking about are from the 4th period; > shells, where the 4d10 part is in your 5th valence shell - so you don't; > really want to replace any of those with a potential. (At least that's my; > rather limited understanding.); >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1113#issuecomment-412880178>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9Qdo2cyTQSSl9yOfKzl_lCPspYyi6jks5uQtbpgaJpZM4VoV4l>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1113#issuecomment-412881311:483,avail,available,483,https://psicode.org,https://github.com/psi4/psi4/issues/1113#issuecomment-412881311,1,['avail'],['available']
Availability,"If you go to psicode.org, downloads, then select “source”, it’ll give an example of using conda compilers. . Other person on this thread: I have an 6.7 system where at last check the binary worked fine. You’re on 6.5, so I’ll pursue that lead.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1088#issuecomment-406323889:26,down,downloads,26,https://psicode.org,https://github.com/psi4/psi4/issues/1088#issuecomment-406323889,1,['down'],['downloads']
Availability,"If you haven't rebased recently, I wouldn't worry about the Windows error immediately, but Peter's right about tests. The test_psi4_qcschema.py is awkward to work with, so `tests/json/` is a good place to add tests. There's a lot of `run_json` in there to preserve backwards compatibility, but use `run_qcschema` instead.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2126#issuecomment-790260786:68,error,error,68,https://psicode.org,https://github.com/psi4/psi4/pull/2126#issuecomment-790260786,1,['error'],['error']
Availability,"If you need some help working out what's going wrong, please send over the test output you're getting. I've just looked through your changes and I'm not seeing anything that looks out of place. . I remember there being one bug that I fixed in libecpint that will have been in the Psi4 code, but it will have only been noticeable with a specific class of ECPs (those that have an n=1 term (or n=-1 depending on your convention). The line is https://github.com/psi4/psi4/blob/d16d02e69238f1b0d90a2f1283f38e818873e748/psi4/src/psi4/libmints/ecpint.cc#L473 and should be changed to . ```tooSmall = tooSmall || ( intValues(l, i) < tolerance );```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2135#issuecomment-802994469:626,toler,tolerance,626,https://psicode.org,https://github.com/psi4/psi4/pull/2135#issuecomment-802994469,1,['toler'],['tolerance']
Availability,"If you're running py38 and you want an answer quickly, it's worth trying a py36 or py37 environment. There's an error in our use of pb11 binding that throws an error that looks like what you post that has to be corrected by inelegant python syntax. https://github.com/psi4/psi4/commit/8f2d9937b18ce4ad49067af3b762c7aa05653b66#diff-57fb1f3fea72e48dabd650189cf0fa94 Tends to show up for py38 and not earlier. More likely, it's a involved error. In either case, thanks for the report!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1912#issuecomment-635991349:112,error,error,112,https://psicode.org,https://github.com/psi4/psi4/issues/1912#issuecomment-635991349,3,['error'],['error']
Availability,"If, upon `conda list psi4` the hash-like build string ends in `_2`, then all's well. [linux-64/psi4-1.8.1-py39hd162a35_2.conda](https://anaconda.org/conda-forge/psi4/1.8.1/download/linux-64/psi4-1.8.1-py39hd162a35_2.conda) is one such. That's probably what you got since the solver tries hard to pick the most recent build and only won't if other constraints get in the way. If you wanted to specify it directly, it'd be `conda create ... 'psi4=1.8.1=*_2'` to specify the version exactly and the build ending in `_2`. I should have been clearer.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2991#issuecomment-1699379644:172,down,download,172,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1699379644,2,['down'],['download']
Availability,"Im actually getting the errors after make -j\`..\`. The output of make -j... is ; [make errors.txt](https://github.com/psi4/psi4/files/1159909/make.errors.txt). And the output of cmake is. ```; pc0108717:psi4 edq$ sudo cmake -H. -Bobjdir -DPYTHON_EXECUTABLE=/opt/local/bin/python -DPYTHON_LIBRARY=/opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/libpython3.6m.dylib -DPYTHON_INCLUDE_DIR=/opt/local/Library/Frameworks/Python.framework/Versions/3.6/include/python3.6m; -- The C compiler identification is AppleClang 8.0.0.8000042; -- The CXX compiler identification is AppleClang 8.0.0.8000042; -- Check for working C compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc; -- Check for working C compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++; -- Check for working CXX compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; -- Setting (unspecified) option ENABLE_PLUGIN_TESTING: OFF; -- Setting (unspecified) option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, App",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/768#issuecomment-316450754:24,error,errors,24,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754,3,['error'],['errors']
Availability,"Im guessing this is due to the fact that the DF JK algorithm runs in C1 symmetry. . It looks like the errors are exceedingly small, can we just resymmetrize the molecule using built in functions after a optking step to retain the symmetry?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/298#issuecomment-191455202:102,error,errors,102,https://psicode.org,https://github.com/psi4/psi4/issues/298#issuecomment-191455202,1,['error'],['errors']
Availability,"Im still not completely sure that there is a way to bridge the two. Ultimately the modification in-place leads to quite a few errors; however, the Psithon API make the in-place a logical operation. It would be better to do something like:; ```; new_mol = molecule.update({""var1"": 5, ""var2"": 6}); ```; or something similar. Getting that across in something like Psithon would be difficult I think.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/782#issuecomment-332298418:126,error,errors,126,https://psicode.org,https://github.com/psi4/psi4/issues/782#issuecomment-332298418,1,['error'],['errors']
Availability,"Importantly the RKS/UKS Hessian vector products are available as well, so root following will be enabled for all SCF Wavefunctions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1005#issuecomment-396930932:52,avail,available,52,https://psicode.org,https://github.com/psi4/psi4/issues/1005#issuecomment-396930932,1,['avail'],['available']
Availability,"In case we do ever switch to tarball+sha256 downloading in ExternalProject, here's a GH blogpost on accessing non-tagged versions. https://github.com/blog/651-annotated-downloads",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/856#issuecomment-350826018:44,down,downloading,44,https://psicode.org,https://github.com/psi4/psi4/pull/856#issuecomment-350826018,2,['down'],"['downloading', 'downloads']"
Availability,"In doing some development with the branch, I only have one more complaint (so far). Whenever I make a change to a file (in my case, in libmints), running `make` will compile several files before my changed file. This happens every time I make a change. The files are in versioned_code:. version.cc; psi_start.cc; python.cc. I know they have to be compiled every time, but it's annoying that they are compiled **before** my changed files. Ie, these files are compiled before any self-induced compiler errors will surface. If you are fixing multiple errors, it's annoying (since some of them take a little while)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-239034822:500,error,errors,500,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-239034822,2,['error'],['errors']
Availability,"In hindsight, I should have noticed this earlier:; OPTKING numbers atoms starting from 1, so the value in your options dict should be `1 2`, not `0 1`. Due to how the optimizer works, it will treat `1 2` and `1 3` as symmetry equivalent, so for actual code, you would need to manually specify Cs symmetry if you really wanted to fix only one bond. When I run the optimization with that change, it works just fine. I'm guessing that OPTKING doesn't know how to handle a request to process ""atom 0,"" which leads us to the choose-your-own-error-message adventure. This is definitely not the most graceful way to handle an invalid atom request, but I'll leave it to the core devs to decide what fix would be most appropriate, since OPTKING is scheduled to be replaced soon anyways.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/989#issuecomment-385130211:536,error,error-message,536,https://psicode.org,https://github.com/psi4/psi4/issues/989#issuecomment-385130211,1,['error'],['error-message']
Availability,"In my case cc55 is the one that fails. On Jul 15, 2015, at 11:26 AM, psi4 <notifications@github.com<mailto:notifications@github.com>> wrote:. https://testboard.org/cdash/viewTest.php?onlyfailed&buildid=21549 shows cc54 for me. —; Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/130#issuecomment-121651794. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/130#issuecomment-121658832:751,error,error,751,https://psicode.org,https://github.com/psi4/psi4/issues/130#issuecomment-121658832,1,['error'],['error']
Availability,"In my case, there is a dependency on Python 2.7 library in /usr/lib64. It might be the problem since when using Python 3.5 out of my miniconda, I had no problems with GCC. The only other thing that changes is my `PATH` variable where `/usr/bin` has a higher priority so that Python 2.7 is default instead of 3.5, but that should not change the library paths. My problem with `source activate` was indeed because of the `tcsh` shell. Finally, Psi4 with Python 2.7 compiled and tested successfully, only `psimrcc-fd-freq2` fails. With Python 3.5, there are more test failures, namely:; The following tests FAILED:; 9 - cbs-delta-energy (Failed); 10 - cbs-xtpl-energy (Failed); 12 - cbs-xtpl-gradient (Failed); 13 - cbs-xtpl-opt (Failed); 14 - cbs-xtpl-func (Failed); 15 - cbs-xtpl-wrapper (Failed); 118 - dfmp2-1 (Failed); 168 - freq-isotope (Failed); 170 - fnocc2 (Failed); 175 - gibbs (Failed); 192 - mp2-def2 (Failed); 202 - nbody-he-cluster (Failed); 203 - numpy-array-interface (Failed); 255 - psimrcc-fd-freq2 (Failed); 259 - psithon2 (Failed); 260 - pubchem1 (Failed); 261 - pubchem2 (Failed); 262 - pywrap-alias (Failed); 263 - pywrap-all (Failed); 265 - pywrap-cbs1 (Failed); 270 - pywrap-db1 (Failed); 271 - pywrap-db2 (Failed); 273 - pywrap-freq-e-sowreap (Failed); 274 - pywrap-freq-g-sowreap (Failed); 275 - pywrap-molecule (Failed); 276 - pywrap-opt-sowreap (Failed); 287 - sapt6 (Failed); 307 - tu6-cp-ne2 (Failed); 312 - options1 (Failed); 317 - psi4numpy-rhf (Failed); 318 - psi4numpy-dfmp2 (Failed); 319 - dftd3-energy (Failed); 320 - dftd3-grad (Failed); 321 - dftd3-psithon2 (Failed); 322 - dftd3-version (Failed). I looked at one of them and the problem was the formatting of some printing command. I didn't investigate further.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-252852440:565,failure,failures,565,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252852440,1,['failure'],['failures']
Availability,"In particular, 1.8.1 `_2` is pydantic v1/v2 tolerant . likewise qcel v0.26 and qcng v0.27 and v0.28 . qcf next is pinned to pydantic v1, iirc. There's a possibility that 1.8.2 will be pydantic v2 API if we can make a plan to do the whole qca stack at once. If that sounds appealing or alarming to anyone, please chime in.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2991#issuecomment-1698293203:44,toler,tolerant,44,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1698293203,1,['toler'],['tolerant']
Availability,"In reply to @WDerricotte's last post. This runs on my laptop too. ```; basis cc-pvdz-decon; basis_relativistic cc-pvdz-decon; ```; but ; ```; basis cc-pvdz-dk-decon; basis_relativistic cc-pvdz-dk-decon; ```; does not. The second version (not working) should be the preferred one because the non-DK basis are not meant to be used for relativistic computations. This is the error that I get and it looks like a problem with DF, since if I add the keyword `scf_type = pk` it runs.; ```; CHE-FEVANGE-01I:x2c-double-decontract fevange$ psi4; Traceback (most recent call last):; File ""/Users/fevange/Source/psi4-fork-bin-Debug/bin/psi4"", line 247, in <module>; exec(content); File ""<string>"", line 29, in <module>; File ""/Users/fevange/Source/psi4-fork-bin-Debug/lib//psi4/driver/driver.py"", line 454, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/fevange/Source/psi4-fork-bin-Debug/lib//psi4/driver/procrouting/proc.py"", line 2794, in run_dft; scf_wfn = run_scf(name, **kwargs); File ""/Users/fevange/Source/psi4-fork-bin-Debug/lib//psi4/driver/procrouting/proc.py"", line 1938, in run_scf; scf_wfn = scf_helper(name, **kwargs); File ""/Users/fevange/Source/psi4-fork-bin-Debug/lib//psi4/driver/procrouting/proc.py"", line 1250, in scf_helper; scf_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); File ""/Users/fevange/Source/psi4-fork-bin-Debug/lib//psi4/driver/procrouting/proc.py"", line 1028, in scf_wavefunction_factory; puream=wfn.basisset().has_puream()); File ""/Users/fevange/Source/psi4-fork-bin-Debug/lib//psi4/driver/p4util/python_helpers.py"", line 64, in pybuild_basis; key, target, fitrole, other, return_atomlist=return_atomlist); File ""/Users/fevange/Source/psi4-fork-bin-Debug/lib//psi4/driver/qcdb/libmintsbasisset.py"", line 641, in pyconstruct; return_atomlist=return_atomlist); File ""/Users/fevange/Source/psi4-fork-bin-Debug/lib//psi4/driver/qcdb/libmintsbasisset.py"", line 742, in construct; tmp.append(c",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/662#issuecomment-288840729:372,error,error,372,https://psicode.org,https://github.com/psi4/psi4/issues/662#issuecomment-288840729,1,['error'],['error']
Availability,"In response to @loriab 's call for issues, I'm going to bump this thread. Moving forward to a massively parallel program something has to be done about the way we handle files. You have to remember, as Psi4 stands, each MPI process spawns its own files. For massively parallel runs this is too much. In my experience most supercomputer have network mounted disk and the `psi.<pID>.clean` files alone are hammering it. I've gotten lucky in that I have access to a supercomputer that has disk on each node, so I've been able to generate data, but long term I don't think we want to limit ourselves to supercomputers with local disk. I think we need a whole new way of handling files, in particular I'd like to see:; - Less files. Things should only be written to disk in the event of checkpointing or because the value simply does not fit in memory.; - Virtual files. The reality is the previous bullet is probably going to be difficult to obtain in practice, which is where support for so-called virtual files comes in. Basically our file manager would decide whether your file is going to disk or memory and then do the above for you, but as far as your code is concerned you're reading from an actual file. Thus you get to be agnostic to the details.; - Different numbering/naming scheme. PID is not a great naming scheme as the possibility of a naming conflict is pretty great (see my last update to this thread).; - The MPI standard also covers disk I/O we should adhere to that...; - Exceptional error messages/detection. There are a bajillion reasons why file I/O can't occur.; - Compression. I don't think we compress our files at all, do we?. For the record HDF5 supports virtual files, parallel I/O through MPI, and compression. Seeing whether it meets our file needs overall is on my todo list, but if someone else wants to take a stab at it in the meantime go for it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/81#issuecomment-119230390:782,checkpoint,checkpointing,782,https://psicode.org,https://github.com/psi4/psi4/issues/81#issuecomment-119230390,4,"['checkpoint', 'error']","['checkpointing', 'error']"
Availability,"In the ""enable (or psi4 requires it)"" case, I think there _is_ a dummy library from https://github.com/ryanmrichard/psi4/blob/CMakeRewrite/external/gdma/CMakeLists.txt#L21. Regarding the ""is for dependency resolution"", good to know, I'll try not to break that. :-). Regarding Note 2, I think that's the other dummy library, https://github.com/ryanmrichard/psi4/blob/CMakeRewrite/cmake/Psi4Macros.cmake#L184. I've got it so a successful `find_package(gdma CONFIG)` introduces a `gdma::gdma` target replete with libs, includes, and `-DUSE_GDMA` in it's INTERFACE w/o any subsequent `add_library()`. Big restriction I've found so far is that such target is scope of found dir and below (no subsequent `add_library(target_again UNKNOWN IMPORTED GLOBAL)`). I'm just seeing how this fits into the superbuild and if cuts down some logic.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-238061055:814,down,down,814,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238061055,1,['down'],['down']
Availability,"Incidentally, an independent PR of mine just ran into this particular error message. I'm eager to get this in.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2700#issuecomment-1251226972:70,error,error,70,https://psicode.org,https://github.com/psi4/psi4/pull/2700#issuecomment-1251226972,1,['error'],['error']
Availability,"Including the _order of magnitude_ in a corner of the plot is highly non-standard and leads to the confusion I just went through. Choose units that are of the proper order of magnitude, and include any needed decimals on the axis directly. According to your axes, you have 2 hartree error, which is utterly unacceptable. 0.2 microhartree error is much more reasonable. What you're describing confirms that the error is small. That is different from confirming correctness. Are you able to compare the numbers to some other implementation and show agreement? Is there some rare property that the exact scheme has, which you can numerically reproduce?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-821194121:283,error,error,283,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-821194121,3,['error'],['error']
Availability,"Indeed it does, for both libint and erd. _Thank you._ (I'm still getting a `WARNING: string truncated` error when run through CTest, but that won't have anything to do with the code. I'll work on it. Just a warning that the CI may still fail.). Do you want to cherry-pick my commits over from #605? Or shall I cherry-pick this last fix over to there, and merge from there?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/587#issuecomment-277381511:103,error,error,103,https://psicode.org,https://github.com/psi4/psi4/pull/587#issuecomment-277381511,1,['error'],['error']
Availability,"Indeed, @JonathonMisiewicz , the terms coming from the derivatives of two-electron integrals are not trivially available or easy to cast into one-body form. However, the total terms (Nuclear, Core, Coulomb...) should, and that would be enough to make me happy. I do think that accessing these terms can be useful for the userbase. . Exposing the one-electron terms for Overlap etc. should also be possible, but this is both silly and shaky as a feature (i.e. not consistent across levels of theory) and sometimes a picky user should have to differentiate like a grown-up!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2130#issuecomment-796719993:111,avail,available,111,https://psicode.org,https://github.com/psi4/psi4/issues/2130#issuecomment-796719993,1,['avail'],['available']
Availability,"Indeed, that's the question to ask 😄 ; Varying `scf_type`, I only get failures for `disk_df` (`mem_df` and `pk` are fine), but again, at least for TDSCF, the problem is triggered by system size ☹️ Seems like a rabbit hole to me...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1604#issuecomment-800490149:70,failure,failures,70,https://psicode.org,https://github.com/psi4/psi4/issues/1604#issuecomment-800490149,1,['failure'],['failures']
Availability,"Independent of the options issues -- should something be patched/changed such that if the user/a program/etc passes a nonsense `num_frozen_docc`, the program gives a sensible error rather than segfaulting?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2631#issuecomment-1193156348:175,error,error,175,https://psicode.org,https://github.com/psi4/psi4/issues/2631#issuecomment-1193156348,1,['error'],['error']
Availability,Intel 2016.1.150 for the compilation failure reported above.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/660#issuecomment-288583765:37,failure,failure,37,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288583765,1,['failure'],['failure']
Availability,"Interesting on OMP v2, OMP v5 is coming out soonish with much needed changes. Does the current code cause errors? I usually try to be verbose even with defaults and does the `size_t` cause issues?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1224#issuecomment-419078896:106,error,errors,106,https://psicode.org,https://github.com/psi4/psi4/pull/1224#issuecomment-419078896,1,['error'],['errors']
Availability,"Inversion branch got rebased to master today. It's going in Monday, so this'll be after inversion but before history re-write. I foresee a few minor conflicts, esp. with the docs, wrt inversion, but nothing big. It pains me to mislabel things, but I think you're right about the ROHF unrelaxed induction. Thanks for surrounding it with warnings. I think this is a first for warding against errors caused by bypassing the driver. Thanks for preparing the PR. LGTM",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/479#issuecomment-253109899:390,error,errors,390,https://psicode.org,https://github.com/psi4/psi4/pull/479#issuecomment-253109899,1,['error'],['errors']
Availability,"Is DSWAP deprecated upstream or is there another reason to prune it? I think part of the plan with the libqt exports was to provide a full blas/lapack interface, even if not everything got used by psi internally. That was before `np.linalg` and Eigen were around/prominent, so perhaps it's not so vital, but it's nice for downstream to know if psi is exporting the full set or as-needed. fwiw, I've no strong opinion on `Matrix::swap_rows` and `Matrix::swap_columns`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2909#issuecomment-1483079896:322,down,downstream,322,https://psicode.org,https://github.com/psi4/psi4/pull/2909#issuecomment-1483079896,1,['down'],['downstream']
Availability,Is `psimrcc-fd-freq2` failing due to the error reported in #1521?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1522#issuecomment-460737948:41,error,error,41,https://psicode.org,https://github.com/psi4/psi4/pull/1522#issuecomment-460737948,1,['error'],['error']
Availability,"Is anyone presently working on this? I see it's gotten moved from milestone to milestone, just curious what priority level this is (or isn't). I've gotten some dimer interaction energy mismatches of >0.1 kcal/mol due to this bug in CP-corrected dimer interaction energies, though these errors are still << the error of DFT vs a CCSD(T)-level method, so it's not a big deal, just a little obnoxious.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1968#issuecomment-1764883227:286,error,errors,286,https://psicode.org,https://github.com/psi4/psi4/issues/1968#issuecomment-1764883227,2,['error'],"['error', 'errors']"
Availability,"Is it enough to suppress the can't-find-library, etc. output from when faulty externals preload? Or is their failure actually crashing the psi4 run? I like the `subprocess` ""which"" b/c it's closer to what the real run does and I can modify the path, but I can switch if need be.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/656#issuecomment-288185174:71,fault,faulty,71,https://psicode.org,https://github.com/psi4/psi4/issues/656#issuecomment-288185174,2,"['failure', 'fault']","['failure', 'faulty']"
Availability,Is it likely that this would also affect SAPT calculations where an ECP is used? I'm seeing some very odd errors and trying to track down what the issue is. I'm using 1.8.2.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1968#issuecomment-1825642004:106,error,errors,106,https://psicode.org,https://github.com/psi4/psi4/issues/1968#issuecomment-1825642004,2,"['down', 'error']","['down', 'errors']"
Availability,"Is it possible to use `options=None` in the class definition? Then the options are mostly not required at all in the current commits above. Yes, I implemented the Client so that you always can calculate the current energy/force of the initialised molecule, which enables testing of the passed on configuration. When ipi is available, it will also be used for communicating back to the driver.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1057#issuecomment-654485806:323,avail,available,323,https://psicode.org,https://github.com/psi4/psi4/pull/1057#issuecomment-654485806,1,['avail'],['available']
Availability,"Is that file also empty if you exit at line 486 of cctransort.cc? It's populated by the code above there. I don't see any TOC errors in the Valgrind outputs from Travis, so I don't think it's the same problem. It looks like there's an illegal instruction in the Clang code that GCC doesn't generate.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/230#issuecomment-178810449:126,error,errors,126,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178810449,1,['error'],['errors']
Availability,"Is that the 0.2.278 from 9 hours ago or 20 hours ago? The earlier one I can believe has that problem (as does 0.2.279 if you had caught it before I erased it. But the 278 that's available now I thought was ok. (Note that if you had downloaded the earlier 278, you would need to `conda remove psi4`, `rm` the packages from `miniconda/pkgs`, and `conda install psi4` to force the download and installation of the new 278.). The `libifport` error arises when trying to mix in Fortran code (for dkh) with static compilation (for conda). They're not wanting to play nicely together: https://public.kitware.com/Bug/bug_relationship_graph.php?bug_id=13249&graph=dependency . I can hand-link a mostly static exe but haven't gotten the build system to do it yet. Please keep on reporting these library errors. I really thought the current conda package should be clean (if Fortran-less).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/154#issuecomment-126180494:178,avail,available,178,https://psicode.org,https://github.com/psi4/psi4/issues/154#issuecomment-126180494,5,"['avail', 'down', 'error']","['available', 'download', 'downloaded', 'error', 'errors']"
Availability,Is the second block missing occupation numbers or is that a copy error?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/584#issuecomment-275674287:65,error,error,65,https://psicode.org,https://github.com/psi4/psi4/pull/584#issuecomment-275674287,1,['error'],['error']
Availability,Is there a performance benefit over running the program in the command line? Nuclear forces / hessians i/o is inconsequential compared to the quantum chemistry part. Any savings would come from reusing checkpoint information for the Fock / density matrices... right?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1813#issuecomment-615084584:202,checkpoint,checkpoint,202,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-615084584,1,['checkpoint'],['checkpoint']
Availability,"Is there an advantage to doing. gradient('b3lyp'). instead of. set reference rks; set dft_functional b3lyp; gradient('scf')?. I guess the former is certainly shorter. But primarily I'm wondering; whether one is easier to check than the other regarding whether the; gradient is available. We need to know on a functional-by-functional basis; whether we have analytic gradients or not. If that's much easier to handle; with one style vs the other, that would be an argument for doing it that; way. Then we can decide what to do with the HF cases to make them play; nicely with our desired solution for the DFT ones. David. On Mon, Jun 8, 2015 at 8:46 PM, Lori A. Burns notifications@github.com; wrote:. > Without The-7 (hf/rhf/uhf/rohf/rscf/roscf/uscf), one can do:; > ; > # (a) for HF; > ; > energy(‘scf’); > ; > # (b) for unrestricted HF; > ; > set reference uhf; > energy(‘scf’); > ; > # (c) for B3LYP; > ; > set dft_functional b3lyp; > set reference rks; > energy(‘scf’); > ; > # (d) also for B3LYP; > ; > energy(‘b3lyp’); > ; > # but this gets you HF (b/c ks reference is the hf/dft toggle control); > ; > set dft_functional b3lyp; > energy(‘scf'); > ; > # (e) for unrestricted B3LYP; > ; > set dft_functional b3lyp; > set reference uks; > energy(‘scf’); > ; > # (f) also for unrestricted B3LYP; > ; > set reference uks; > energy(‘b3lyp’); > ; > # (g) also for unrestricted B3LYP (since energy command trumps options,; > ; > uhf gets translated to uks); > set reference uhf; > energy(‘b3lyp’); > ; > But most people do (a), (b), (d), and (f/g) I think. rhf/uhf/rohf let you; > wrap reference into the energy() call for HF. rscf/uscf/roscf let you wrap; > reference into the energy() call for HF or DFT (though for the latter you’d; > have to use dft_functional keyword.; > ; > Francesco brings up a related and overdue point. If you specify an; > open-shell molecule and no reference, it complains at you b/c rhf (the; > default) is unsuitable. I couldn’t say concretely, but some other programs; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/103#issuecomment-110194494:277,avail,available,277,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110194494,1,['avail'],['available']
Availability,Is this Windows native or Windows WSL?. > WARNING: A directory already exists at the target location 'C:\Users\erikc\anaconda3\envs\p4env'; > but it is not a conda environment. Does the error persists if you delete the old environment or directory first?; Or use a different name than `p4env`.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1979#issuecomment-874812821:186,error,error,186,https://psicode.org,https://github.com/psi4/psi4/issues/1979#issuecomment-874812821,1,['error'],['error']
Availability,Issue #786 also has a PSIO error.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/789#issuecomment-325218257:27,error,error,27,https://psicode.org,https://github.com/psi4/psi4/issues/789#issuecomment-325218257,1,['error'],['error']
Availability,"It [looks like](https://pubs.acs.org/doi/pdf/10.1021/jp9802432) the MP2 part should have the core correlated (even though the basis set is ill suited to describing the core), with the single point energy being performed with a frozen core. If that's prescribed by the method, setting the `freeze_core` keyword doesn't really make sense. Perhaps we can catch if it's been set and print an error message?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1530#issuecomment-462816339:388,error,error,388,https://psicode.org,https://github.com/psi4/psi4/issues/1530#issuecomment-462816339,1,['error'],['error']
Availability,"It depends on which ones you're targeting and how you're getting psi4. If you're building from src, you'd `-D ENABLE_<addon>=ON` as described here https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L69-L108 . (Note that ""addon""s is what you'd want to search; ""plugins"" are different in psi4.). If you're using the conda binary, it varies by the nature of the addon. Addons that have to be enabled/disabled at psi4-build-time tend to be already in the psi4 binary. Unfortunately CheMPS2 is one that hasn't been transitioned to conda-forge yet due to license issues. You could grab psi4 v1.7 to use it. Ambit is available to install from c-f. Other addons that psi4 doesn't need to know about at compile time, like cppe or dftd3, can be conda installed at any time. That's the general picture. I can probably help on specifics if you run into difficulties.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3094#issuecomment-1836419087:615,avail,available,615,https://psicode.org,https://github.com/psi4/psi4/issues/3094#issuecomment-1836419087,1,['avail'],['available']
Availability,"It does not necessarily always cause an abort of the python process.; My test fails during libmints writing out integrals at the end of an SCF and gives a normal error message. (`cc11` test with cc-pVQZ basis set in a 50MiB RAMDISK). ```; [...]. !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: PSIO_ERROR: 12 (error writing to file) !; ! Error occurred in file: /Users/kruse/qc/psi4/psi4/src/psi4/libpsio/error.cc on !; ! line: 131 !; ! The most recent 5 function calls were: !; ! !; !----------------------------------------------------------------------------------!. Psi4 stopped on: Sunday, 06 November 2022 04:44PM; [...]; ```. I would suggest to merge and see how it behaves for our users.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2756#issuecomment-1304902426:162,error,error,162,https://psicode.org,https://github.com/psi4/psi4/pull/2756#issuecomment-1304902426,5,"['Error', 'error']","['Error', 'error']"
Availability,"It doesnt look like there is a huge impetus to close this down so were just going to leave `psi4/psi4private` up. However, note that these branches are no longer valid due to the many changes and history rewriting since they have been edited. All history `psi4private` history (but not the dev branches) will be public [here](https://github.com/psi4/psi4archive).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/508#issuecomment-305370267:58,down,down,58,https://psicode.org,https://github.com/psi4/psi4/issues/508#issuecomment-305370267,1,['down'],['down']
Availability,"It gives the diagnosis semi-gracefully, `Fatal Error: ndocc must be less than nvirt`. If you're wanting to run detci, add `set qc_module detci`. What behaviour are you looking for?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/546#issuecomment-266516539:47,Error,Error,47,https://psicode.org,https://github.com/psi4/psi4/issues/546#issuecomment-266516539,1,['Error'],['Error']
Availability,"It hits the troublesome geometry a couple optimization iterations in, so not guaranteed. But given that this error hasn't popped up for 10 years, micro-wiggle is a good bet. btw, `conda install psi4 -c psi4/label/agg` will get you a working `-ng`-compiler package at the moment. Though that's my sandbox channel and so the latest package mayn't always be working.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/948#issuecomment-380151298:109,error,error,109,https://psicode.org,https://github.com/psi4/psi4/issues/948#issuecomment-380151298,1,['error'],['error']
Availability,"It is also worth noting that the SCF is wrong. Although, I cannot reproduce the SCF error on my machine. Can anyone else?. > On Jan 8, 2016, at 4:54 PM, ssh2 notifications@github.com wrote:; > ; > If really want to get FCI results for a system of this size - I would recommend to learn about the method called density matrix renormalization group (DMRG). F-/aug-cc-pvtz is within its capabilities. A reference to start with could be:; > (1) Olivares-Amaya, R.; Hu, W.; Nakatani, N.; Sharma, S.; Yang, J.; Chan, G. K.-L. The Journal of chemical physics. 142, 034102 (2015).; > ; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/204#issuecomment-170138644.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204#issuecomment-170140825:84,error,error,84,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170140825,2,['error'],['error']
Availability,"It is printed... I know which basis set I use, but would just like upfront; to make my chargemol job-control file ready for my basis set choise. Thank; you all!. On Tue, 14 Aug 2018, 15.59 David Sherrill, <notifications@github.com> wrote:. > If we don't print the number of implied core electrons in the output; > somewhere when using an ECP basis, it wouldn't be a bad idea to do so.; >; > On Tue, Aug 14, 2018 at 9:56 AM Peter Kraus <notifications@github.com>; > wrote:; >; > > Ideally, you should know what kind of basis set you're using, as you're; > > presumably going to cite it in your work; the details about the number of; > > core e-'s treated as effective potentials will be included there. There; > > are also all-electron basis sets available for almost any element; some; > of; > > them are shipped with Psi4 (eg. 3-21g). Psi4 tells you the basis has an; > ECP; > > in the => Loading Basis Set <= section, and the details are printed later; > > on under ==> Primary Basis <==.; > >; > > As for the question of 28 vs 36 electrons: the first 28 electrons are the; > > 1s2 + 2s2, 2p6 + 3s2, 3p6, 3d10 shells - ie. full 1st, 2nd and 3rd shell.; > > The additional 8 electrons you're thinking about are from the 4th period; > > shells, where the 4d10 part is in your 5th valence shell - so you don't; > > really want to replace any of those with a potential. (At least that's my; > > rather limited understanding.); > >; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly, view it on GitHub; > > <https://github.com/psi4/psi4/issues/1113#issuecomment-412880178>, or; > mute; > > the thread; > > <; > https://github.com/notifications/unsubscribe-auth/AC9Qdo2cyTQSSl9yOfKzl_lCPspYyi6jks5uQtbpgaJpZM4VoV4l; > >; > > .; > >; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1113#issuecomment-412881311>, or mute; > the thread; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1113#issuecomment-412883315:746,avail,available,746,https://psicode.org,https://github.com/psi4/psi4/issues/1113#issuecomment-412883315,1,['avail'],['available']
Availability,It is running on my system as I write this. One thing to note is that the error can occur very early on on our system. With a fairly high variability. So I do not think it is memory creeping up. It looks more like a memory allocation amount that is overwritten by a wrong pointer operation or something like that.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1590#issuecomment-481894673:74,error,error,74,https://psicode.org,https://github.com/psi4/psi4/issues/1590#issuecomment-481894673,1,['error'],['error']
Availability,It is still gives an error:; ```; Error in atexit._run_exitfuncs:; PermissionError: [WinError 32] The process cannot access the file because it is being used by another process: 'pytest_output.dat'; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1276#issuecomment-430541097:21,error,error,21,https://psicode.org,https://github.com/psi4/psi4/pull/1276#issuecomment-430541097,2,"['Error', 'error']","['Error', 'error']"
Availability,"It is still possible to create the ""ADIIS minimization failed"" error with the input file below (only changes to the above are correcting the coordinates' units and changing VV10 parameters), but I imagine this is because the values for (b,c) are now so extreme that it's no longer physical. . ```; set num_frozen_docc 12; set {; dft_vv10_b 0.01; dft_vv10_c 0.01; }; set {; basis def2-tzvppd; guess sad; dft_nuclear_scheme SBECKE; dft_radial_scheme EM; dft_radial_points 99; dft_spherical_points 590; dft_vv10_radial_points 50; dft_vv10_spherical_points 194; dft_pruning_scheme robust; }; set {; wcombine False; }; molecule mol {; 0 1; C -0.49280516 -1.34928891 1.93251153; C 0.84810575 -1.10523761 2.10967679; C 1.26836829 0.29972931 2.0863085 ; C 0.33631373 1.28766879 2.06605249; C -1.0593442 1.02559068 1.99570094; C -1.46753033 -0.25217665 2.08599284; H -0.8366212 -2.3512709 1.85597882; H 1.65258993 -1.81487491 2.11488685; H 2.30066607 0.63566923 1.9769963 ; H 0.6336208 2.42220895 1.85607739; H -1.79244121 1.74937993 2.11242291; H -2.68362171 -0.43063144 2.07823169; C -0.8151077 -1.09341082 -1.9012646 ; C -1.16492239 0.31096713 -2.00016775; C -0.29873999 1.38082172 -1.68134071; C 0.91640784 1.08513712 -1.22645142; C 1.30080416 -0.26891269 -1.09865272; C 0.4588141 -1.39278819 -1.38251659; H -1.3834194 -1.9058937 -2.16792859; H -2.20012949 0.38972302 -2.19448924; H -0.48864896 2.51613661 -1.54574084; H 1.66750317 1.87858355 -1.04866167; H 2.23050409 -0.51844162 -0.70388782; H 0.9799473 -2.25156744 -1.27023577; units angstrom; no_reorient; no_com; symmetry c1; }; mol.update_geometry(); e, wf = energy('wb97m-v',return_wfn=True,); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2641#issuecomment-1192984871:63,error,error,63,https://psicode.org,https://github.com/psi4/psi4/issues/2641#issuecomment-1192984871,2,"['error', 'robust']","['error', 'robust']"
Availability,"It looks like I forgot to add `CMAKE_BUILD_PARALLEL_LEVEL=2` to the docs CI. I learned that when a Ninja build of Psi4 gives up in the early 200s of 1200 files, it's because it's out of memory on CI nodes when compiling libmints. Ninja automatically oversubscribes the available cores, so throttling down to allocated cores helps. Docs were recently converted to Ninja CMake generator (from Makefiles CMake generator).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3123#issuecomment-1899318634:269,avail,available,269,https://psicode.org,https://github.com/psi4/psi4/pull/3123#issuecomment-1899318634,4,"['avail', 'down']","['available', 'down']"
Availability,It looks like Psi is providing wrappers for `dtzrqf` but not actually using the function (unless some downstream plugins are using it). So shouldn't be too hard. Thanks for the notice!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1290#issuecomment-430281547:102,down,downstream,102,https://psicode.org,https://github.com/psi4/psi4/issues/1290#issuecomment-430281547,1,['down'],['downstream']
Availability,"It looks like an interesting optimization problem, and a memory error. I; will take a detailed look at it when I get back from vacation next week. On Thu, Jul 30, 2015 at 8:11 AM, Lori A. Burns notifications@github.com; wrote:. > Yes, I agree it looks messed up. Added the further info in last post for; > @psi-rking https://github.com/psi-rking; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/153#issuecomment-126342063.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/153#issuecomment-126509903:64,error,error,64,https://psicode.org,https://github.com/psi4/psi4/issues/153#issuecomment-126509903,1,['error'],['error']
Availability,"It looks like the entire `ERISieve` class is marked as `PSI_API`, so AFAIK that is giving downstream the permission to rely on both the object and all of its public members being a stable API, not just a few functions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2935#issuecomment-1527938536:90,down,downstream,90,https://psicode.org,https://github.com/psi4/psi4/pull/2935#issuecomment-1527938536,1,['down'],['downstream']
Availability,"It looks like the numpy/scipy issue on Azure has healed with upstream packages without intervention here, so closing. otoh, GHA Linux just hit our old friend CFI error during compile ...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2702#issuecomment-1227384055:162,error,error,162,https://psicode.org,https://github.com/psi4/psi4/pull/2702#issuecomment-1227384055,1,['error'],['error']
Availability,It looks like there's no error in Psi here. Happy to reopen if I'm mistaken.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1574#issuecomment-869220808:25,error,error,25,https://psicode.org,https://github.com/psi4/psi4/issues/1574#issuecomment-869220808,1,['error'],['error']
Availability,"It looks like those changes did the trick. The tests passed fairly quickly on travis, but i'm not sure what the timings were like before so i don't know how much impact the header refactoring had. When you think this one's good, could you ping us on Slack, please? The seg fault seems to be hitting a few people so it would be good to get it in quickly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1398#issuecomment-444294885:239,ping,ping,239,https://psicode.org,https://github.com/psi4/psi4/pull/1398#issuecomment-444294885,2,"['fault', 'ping']","['fault', 'ping']"
Availability,"It looks like yesterday's PR was intended to address only some of the reviewer comments. Ping me again when you've addressed everything, and I'll give it another look.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-938639822:89,Ping,Ping,89,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-938639822,1,['Ping'],['Ping']
Availability,It means part of the coordinate input is not understood.; In this case H6 misses a decimal point in the z coordinate. Not sure if the error could be made more explicit by highlighting the specific line(s).,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2287#issuecomment-910161049:134,error,error,134,https://psicode.org,https://github.com/psi4/psi4/issues/2287#issuecomment-910161049,1,['error'],['error']
Availability,It might well be you've downloaded the stable version (psi4 version 1.1) and the mid-bond functionality might have been introduced afterwards (so it's available only in the dev releases). What does `psi4 --version` return?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/936#issuecomment-373018664:24,down,downloaded,24,https://psicode.org,https://github.com/psi4/psi4/issues/936#issuecomment-373018664,2,"['avail', 'down']","['available', 'downloaded']"
Availability,"It seems like in a couple of cases we go from an optimized contraction to one that is not. For example, here a s-gaussian with exponent 0.0230700 was added to the core orbital. However, this function is redundant because it is already included in the basis. This introduces a slight performance penalty when computing integrals. Do we have a policy for contraction optimization?. ```; -Na 0 ; -S 11 1.00; - 31700.0000000 0.458878D-03 ; - 4755.0000000 0.355070D-02 ; - 1082.0000000 0.182618D-01 ; - 306.4000000 0.716650D-01 ; - 99.5300000 0.212346D+00 ; - 35.4200000 0.416203D+00 ; - 13.3000000 0.373020D+00 ; - 4.3920000 0.625054D-01 ; - 1.6760000 -0.624532D-02 ; - 0.5889000 0.243374D-02 ; - 0.0564000 -0.442381D-03 ; ```. ```; +Na 0; +S 12 1.00; + 31700.0000000 4.5887800e-04; + 4755.0000000 3.5507000e-03; + 1082.0000000 1.8261800e-02; + 306.4000000 7.1665000e-02; + 99.5300000 2.1234600e-01; + 35.4200000 4.1620300e-01; + 13.3000000 3.7302000e-01; + 4.3920000 6.2505400e-02; + 1.6760000 -6.2453200e-03; + 0.5889000 2.4337400e-03; + 0.0564000 -4.4238100e-04; + 0.0230700 2.4192400e-04. S 1 1.00; - 0.0230700 1.0000000 ; + 0.0230700 1.0000000e+00; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/728#issuecomment-307875382:203,redundant,redundant,203,https://psicode.org,https://github.com/psi4/psi4/pull/728#issuecomment-307875382,1,['redundant'],['redundant']
Availability,"It seems like the kernel is not running in the env it is suposed to. When I run `jupyter kernelspec list`, I get; ```; File ""C:\Users\Usuario\AppData\Local\Temp/ipykernel_13636/728349862.py"", line 1; jupyter kernelspec list; ```; But when I check the jupyter kernel spec list, ; ```; (base) C:\Users\Usuario>jupyter kernelspec list; Available kernels:; p4env C:\Users\Usuario\AppData\Roaming\jupyter\kernels\p4env; python3 C:\Users\Usuario\miniconda3\share\jupyter\kernels\python3; ```; So the path to the kernel in the env should be pointing to `C:\Users\Usuario\AppData\Roaming\jupyter\kernels\p4env`, or something?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2329#issuecomment-948193452:333,Avail,Available,333,https://psicode.org,https://github.com/psi4/psi4/issues/2329#issuecomment-948193452,1,['Avail'],['Available']
Availability,"It seems that I am having some trouble with PSIO. . ```; Traceback (most recent call last):; File ""/Users/kevinhannon/Programs/psi4_test_cmake/Build/stage/Users/kevinhannon/Programs/psi4_test_cmake/Install/bin/psi4"", line 210, in <module>; exec(content); File ""<string>"", line 34, in <module>; File ""/Users/kevinhannon/Programs/psi4_test_cmake/Build/stage/Users/kevinhannon/Programs/psi4_test_cmake/Install/bin/../lib//psi4/driver/driver.py"", line 447, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File; ""/Users/kevinhannon/Programs/psi4_test_cmake/Build/stage/Users/kevinhannon/Programs/psi4_test_cmake/Install/bin/../lib//psi4/driver/procedures/proc.py"", line 4005, in run_detcas; ref_wfn = scf_helper(name, **kwargs); File ""/Users/kevinhannon/Programs/psi4_test_cmake/Build/stage/Users/kevinhannon/Programs/psi4_test_cmake/Install/bin/../lib//psi4/driver/procedures/proc.py"", line 1306, in scf_helper; e_scf = scf_wfn.compute_energy(). RuntimeError:; Fatal Error: PSIO Error; ```. This error is happening randomly. I had to run the ctest -R ""ao"" a few times to get this error. . @dgasmith, what should I change in proc.py for detcas if I want the JK object to handle the initialization of the integrals?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/520#issuecomment-261257394:1005,Error,Error,1005,https://psicode.org,https://github.com/psi4/psi4/pull/520#issuecomment-261257394,4,"['Error', 'error']","['Error', 'error']"
Availability,"It seems that the process of creating the geometry was at fault—in particular, in a production run, I created molecules with the ""units angstrom"" tag, and then called `molecule.set_full_geometry(xyzs)` on each of them. This seems to have had the effect of assuming that the coordinates were in bohr, then converting them to angstroms (dividing by 1.889). This, I think, produces the rough factor of 2 difference observed. I had missed that set_full_geometry assumes that the coordinates are in Bohr. I will try rerunning the fixed version in production to see if I end up with any similar errors. It takes a rather long time to converge (currently at 35 iterations; it's not converged yet), and it is quite low in energy—currently, -905 Hartree.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2641#issuecomment-1192972026:58,fault,fault,58,https://psicode.org,https://github.com/psi4/psi4/issues/2641#issuecomment-1192972026,2,"['error', 'fault']","['errors', 'fault']"
Availability,"It seems to work fine with the chemps-1.7 in debian, all three tests pass. One thing I noticed is that the `dmrg-caspt2-n2` test case takes a long time to run - can it be scaled down a bit? I guess @dgasmith created that test case?. ```; Test project /«PKGBUILDDIR»/builddir/tests; Start 319: dmrg-scf-n2; 1/3 Test #319: dmrg-scf-n2 ...................... Passed 9.36 sec; Start 320: dmrg-ci-h2o; 2/3 Test #320: dmrg-ci-h2o ...................... Passed 15.42 sec; Start 321: dmrg-caspt2-n2; 3/3 Test #321: dmrg-caspt2-n2 ................... Passed 594.31 sec. 100% tests passed, 0 tests failed out of 3; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/384#issuecomment-222313007:178,down,down,178,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-222313007,1,['down'],['down']
Availability,"It seems unlikely a numpy interface would change. You might try running one of the tests that runs `fsapt.py` internally like `fsapt-terms`. You'll have to move the fsapt.py file to the launch directory or hardwire its path in the test. If your numpy error shows up there, I'd believe numpy or env problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2281#issuecomment-902432397:251,error,error,251,https://psicode.org,https://github.com/psi4/psi4/issues/2281#issuecomment-902432397,1,['error'],['error']
Availability,"It should be noted that the keywords did change slightly and all tests had to be tweaked. I am guessing that the Psi4 and ChemPS2 binary versions are out of sync at the moment. Ill look into this today. Cheers,; Daniel Smith. > On May 31, 2016, at 7:51 AM, Hassenky notifications@github.com wrote:; > ; > The DMRG-natural-orbital calculation also has the same error.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub https://github.com/psi4/psi4/issues/384#issuecomment-222666388, or mute the thread https://github.com/notifications/unsubscribe/ABsBcX6MG6G0p8O-MC63teMY64rE_uWKks5qHCDcgaJpZM4IjFna.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/384#issuecomment-222667765:360,error,error,360,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-222667765,1,['error'],['error']
Availability,"It shouldn't ""print a stern warning."" It should raise an error. You should never ever have two atoms that are at the same point in space within symmetry tolerance. As for qcdb, that's a @loriab question. I can never remember why we have both.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2465#issuecomment-1064048522:57,error,error,57,https://psicode.org,https://github.com/psi4/psi4/pull/2465#issuecomment-1064048522,2,"['error', 'toler']","['error', 'tolerance']"
Availability,"It triggers just fine, but gives a python error because I did not handle the dict object.; The `if (name.lower() == 'hf'):` does not work then. I plan to fix it in about 2 weeks when going to a conference.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1188#issuecomment-417863698:42,error,error,42,https://psicode.org,https://github.com/psi4/psi4/issues/1188#issuecomment-417863698,1,['error'],['error']
Availability,"It was possible to compile and install psi4 without problems, but the `make` command returned. `hernan@carlos:~/Power Method/Psi4/pluginintegrales$ make; /usr/bin/g++ -DHAVE_MM_MALLOC_H -DENABLE_CHEMPS2=1 -DFC_SYMBOL=2 -DHAVE_SYSTEM_NATIVE_LAPACK -DHAVE_SYSTEM_NATIVE_BLAS -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -fopenmp -O3 -DNDEBUG -Wno-unused -I/home/hernan/Programas/psi4/instalacion/interfaces/include -I/home/hernan/Programas/psi4/instalacion/src/lib -I/home/hernan/Programas/psi4/psi4/src/lib -I/home/hernan/Programas/psi4/psi4/include -I/home/hernan/Programas/psi4/instalacion/include -I/home/hernan/Programas/psi4/instalacion/boost/include -I/usr/include/python2.7 -I/usr/include -I/usr/include -I/usr/include -I/usr/include -c pluginintegrales.cc; pluginintegrales.cc: In function ‘psi::PsiReturnType psi::pluginintegrales::pluginintegrales(psi::Options&)’:; pluginintegrales.cc:63:64: error: ‘class psi::Process::Environment’ has no member named ‘wavefunction’; boost::shared_ptr<Wavefunction> wfn = Process::environment.wavefunction();; ^; make: *** [pluginintegrales.o] Error 1`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/308#issuecomment-194954608:1275,error,error,1275,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-194954608,2,"['Error', 'error']","['Error', 'error']"
Availability,"It was tested with higher angular momentum, which is why I’m confused. Lori and I sat down at the last hackathon to try and find problem cases, but couldn’t reproduce the error. What I’m really struggling with is the origin of the importance of atom order in the test provided in #901. It’s probably related to the fact that I only take derivatives on center A and use translational invariance relations to get the rest, but my flu addled brain is failing me right now. For the same reason, yes, this took me a while to track down. Oh well, hopefully this is the last bug we ever have in the hessians. Or anywhere... > On Jan 27, 2018, at 8:16 PM, Daniel Smith <notifications@github.com> wrote:; > ; > @dgasmith commented on this pull request.; > ; > Awesome.; > ; > In psi4/src/psi4/libmints/overlap.cc:; > ; > > @@ -336,7 +336,7 @@ void OverlapInt::compute_pair_deriv2(const GaussianShell& s1, const GaussianShel; > buffer_[(0*size)+ao12] += (4.0*a1*a1*x[l1+2][l2]*y[m1][m2]*z[n1][n2] -; > 2.0*a1*(2*l1+1)*x[l1][l2]*y[m1][m2]*z[n1][n2]) * over_pf;; > if (l1 > 1); > Hmm, I think you just never tested anything beyond P orbitals. This if statement will not be hit without D or higher.; > ; > I wish we could put weights on commits so that we could crank this one up. Three lines changed, but I am sure quite a bit of time looking into it.; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub, or mute the thread.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/903#issuecomment-361030347:86,down,down,86,https://psicode.org,https://github.com/psi4/psi4/pull/903#issuecomment-361030347,3,"['down', 'error']","['down', 'error']"
Availability,"It works for me locally, but you're right that the `==` doesn't make for a robust test. I'll improve that -- thanks for the notice.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3014#issuecomment-1636633947:75,robust,robust,75,https://psicode.org,https://github.com/psi4/psi4/issues/3014#issuecomment-1636633947,1,['robust'],['robust']
Availability,"It would be nice if you could add the code. I don't need to show up as a contributor (as the changes are based on code in the autocmake github repo). But can you please wait before adding the code, until we could verify that the compilation with OpenBLAS works. After getting the error, I have run make a second time and then I did not get the error any more. I have therefore deleted the installation and redid it from scratch. This time, I am running make serially. The compilation is still ongoing. I will provide you an update once it finished and after having verified that the code is properly linked against OpenBLAS. Best regards. Sam",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-274828765:280,error,error,280,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274828765,2,['error'],['error']
Availability,"It's missing finding the `libiomp5.so`. In a oneapi installation, it's in a different directory than `libmkl_rt.so`, so you source the whole oneapi install or add more to ld_library_path. Alternately, all this can be got from conda. If you have the `mkl-devel` and `mkl` packages installed, the iomp5 lib should be available. Second alternately, you can specify the location of the dir containing iomp5 by `-D OpenMP_LIBRARY_DIRS=""/path/to/dir/containing/iomp5_lib`. There's some additional notes in #2965 in case helpful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2998#issuecomment-1620754430:315,avail,available,315,https://psicode.org,https://github.com/psi4/psi4/issues/2998#issuecomment-1620754430,1,['avail'],['available']
Availability,"It's not _really_ a Psi4 error message. Psi uses [QCElemental](https://github.com/MolSSI/QCElemental) for molecule parsing. It's QCElemental that raises the difficult error message, and it bubbles up through Psi. As such, I'm inclined to say this issue belongs on QCElemental's repo, not Psi's. @loriab is involved with both and is better equipped to judge where this belongs and whether it's even possible to identify the problematic line in general.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2287#issuecomment-910282508:25,error,error,25,https://psicode.org,https://github.com/psi4/psi4/issues/2287#issuecomment-910282508,2,['error'],['error']
Availability,"It's not clear to me that ""re-request review"" did anything, so pinging @davpoolechem again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-1031453049:63,ping,pinging,63,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-1031453049,2,['ping'],['pinging']
Availability,"It's not too complicated. The below is equivalent and slightly preferred. ```; set {; basis sto-3g # minimal orbital basis set; df_scf_guess false # usually, psi4 saves time by doing most of the HF iterations using density fitting then only a few with the full integrals. Since fitting basis sets aren't available, this skips the density fitting iterations.; scf_type direct # selects a non-density-fitting algorithm for the HF; guess sad # a better guess to start the HF iterations; sad is nearly always the best guess; mp2_type conv # selects a non-density-fitting algorithm for the MP2; }; energy('mp2'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/105#issuecomment-144769489:304,avail,available,304,https://psicode.org,https://github.com/psi4/psi4/issues/105#issuecomment-144769489,1,['avail'],['available']
Availability,"It's on master already, you can just clone from github. On Dec 17, 2017 16:38, ""João M. Damas"" <notifications@github.com> wrote:. > thanks @robertodr <https://github.com/robertodr> and all. In which; > version will this be available? @raimis <https://github.com/raimis>, we; > should change our code when it's available.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/818#issuecomment-352287559>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/ADiXEcgYF_RXeb88yNyaVqEJorcDgpuwks5tBYnJgaJpZM4PyztD>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/818#issuecomment-352470152:223,avail,available,223,https://psicode.org,https://github.com/psi4/psi4/pull/818#issuecomment-352470152,2,['avail'],['available']
Availability,"It's possible recent changes have introduced errors with the v15 Intel compilers. See, e.g.,. https://testboard.org/cdash/buildSummary.php?buildid=24529. The overall dashboard is here, and you can see that all instances of the v15 builds have started dying in libscfsolver/hf.cc.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/155#issuecomment-126317935:45,error,errors,45,https://psicode.org,https://github.com/psi4/psi4/issues/155#issuecomment-126317935,1,['error'],['errors']
Availability,"It's possible the problem is with the DNS servers. It happens pretty reliably if I google psi4 and click on the top hit. It happens on my desktop and mobile, including if I disconnect from the wireless and use T-Mobile's network.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/342#issuecomment-209994658:69,reliab,reliably,69,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-209994658,1,['reliab'],['reliably']
Availability,"It's sort of hard to follow the code. You should remove all the stuff about charges; the algorithm needs to do the memory estimate based on the actual occupied orbitals. You should separate the Coulomb and exchange bits, since Coulomb can be computed as a dot product, while exchange is a matrix multiplication. Range-separated exchange should be supported. You also can't assume that you can fit all the integrals into memory in a big system; you need to batch over the occupied orbitals based on the amount of memory that's available. . Please check Weigend's paper on how to do RI-HF optimally.; https://pubs.rsc.org/en/content/articlelanding/2002/cp/b204199p",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2040#issuecomment-733280957:526,avail,available,526,https://psicode.org,https://github.com/psi4/psi4/pull/2040#issuecomment-733280957,1,['avail'],['available']
Availability,"It's very minor and does nothing else but dumping that JSON file. I set it to `ON` without introducing an option also because having the file always available might encourage use of `clang-tidy`. And to actually answer your question, the file is a little short of 1 megabyte. :sweat_smile:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1312#issuecomment-433149675:149,avail,available,149,https://psicode.org,https://github.com/psi4/psi4/pull/1312#issuecomment-433149675,1,['avail'],['available']
Availability,"It’s running compare_cubes in approx psi4/driver/p4utils/? . I think it’s doing a numpy value diff, so maybe print out and post. We just tightened down the tolerances last fall, so they may need loosening. If all the errors are at the top or bottom, that’s more concerning. . Can alternatively just command line diff wrt the reference cube.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-404234491:147,down,down,147,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-404234491,3,"['down', 'error', 'toler']","['down', 'errors', 'tolerances']"
Availability,"Just a followup on the fnocc2 error. I had passed in the `dertype=1` flag to reduce AM requirements; that flag got lost in your merge of my PR. I think the current solution is better; we now use analytic frequencies in that test case because the AM requirements have been reduced since I fixed the erroneous AM check in libmints. The clang-3.8 failure is caused by two things: 1) the Boost detection fails and 2) building Boost fails because of [this bug](https://bugzilla.redhat.com/show_bug.cgi?id=1120995), which was fixed in clang 3.4. For some crazy reason, Travis is providing 3.4 even though we specifically request 3.8. I noticed that some of the tests do get version 3.8, so I'm not sure it's a problem with out YML but will poke around a little. This will all go away (and our build time will drop) when the Boost detection works with Travis again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235144008:30,error,error,30,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235144008,2,"['error', 'failure']","['error', 'failure']"
Availability,Just a general git point: This one and #534 are tied to the same branch history so neither should be rebased. Its one of the downsides of a rebase team policy. Merges are fine.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/527#issuecomment-263865276:125,down,downsides,125,https://psicode.org,https://github.com/psi4/psi4/pull/527#issuecomment-263865276,1,['down'],['downsides']
Availability,"Just a little update: unless jturney has an opposition, I think we can safely delete the error message. I'm now trying to clean up the synchronization issues. I found the problem with cubeprop, and I'm working on the errors in the sapt tests, which seem to be even more subtle.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/596#issuecomment-278105814:89,error,error,89,https://psicode.org,https://github.com/psi4/psi4/issues/596#issuecomment-278105814,2,['error'],"['error', 'errors']"
Availability,"Just a note to confirm, that error looks like a mismatch between an old version of Psi4 and new version of the test. Midbonds were added fairly recently.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/936#issuecomment-373023252:29,error,error,29,https://psicode.org,https://github.com/psi4/psi4/issues/936#issuecomment-373023252,1,['error'],['error']
Availability,"Just a quick update - I'm making a little bit of progress. I hacked my local branch to get valgrind info from the test machines. Here's the pertinent section of the resulting error:. `vex amd64->IR: unhandled instruction bytes: 0xF 0xB 0x89 0xD1 0x48 0x89 0x45 0xC8; ==20864== valgrind: Unrecognised instruction at address 0x22fd55c.; ==20864== at 0x22FD55C: psi::DPD::buf4_sort(psi::dpdbuf4*, int, psi::indices, std::string, std::string, char const*) (buf4_sort.cc:1977); ==20864== by 0x191AEB0: psi::cctransort::sort_tei_rhf(boost::shared_ptr<psi::PSIO>, int) (sort_tei_rhf.cc:35); ==20864== by 0x18F8C81: psi::cctransort::cctransort(psi::Options&) (cctransort.cc:472); ==20864== by 0x1434733: py_psi_cctransort() (python.cc:497); ==20864== by 0x144C47D: _object* boost::python::detail::invoke<boost::python::to_python_value<double const&>, double (*)()>(boost::python::detail::invoke_tag_<false, false>, boost::python::to_python_value<double const&> const&, double (*&)()) (invoke.hpp:75)`. I'm digging around now, because I can't see anything obviously wrong in those lines of code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/230#issuecomment-178350753:175,error,error,175,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178350753,1,['error'],['error']
Availability,"Just be aware that there aren't fitting basis sets available for 6Z & 7Z orbital basis sets (https://github.com/psi4/psi4/issues/144), so switching to df-oo won't really work.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/185#issuecomment-190770304:51,avail,available,51,https://psicode.org,https://github.com/psi4/psi4/issues/185#issuecomment-190770304,1,['avail'],['available']
Availability,"Just like the error message warns, SCF is not set up to restart from a wavefunction because there's need-to-project?, need-to-orthogonalize?, etc. issues that have to be handled. The wavefunction passing is set up to the level that the old `bypass_scf` kwarg handled. That is, a _completed_ scf_wfn can be passed into CC, CI, etc.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/419#issuecomment-227828506:14,error,error,14,https://psicode.org,https://github.com/psi4/psi4/issues/419#issuecomment-227828506,1,['error'],['error']
Availability,"Just observed a separate issue, commenting here to raise awareness before merge at the advice of @loriab. . If the OPTKING bad-step exception occurs in the highest dynamic level (7), e.g.,; ```; Current energy : -154.6485078443. Energy change for the previous step:; Projected : -0.0449999979; Actual : 0.0000000000; The BAD_STEP_EXCEPTion handler:; Energy has increased in a minimization. Dynamic level is 7.; Consecutive backsteps is 1.; The INTCO_EXCEPTion handler:; Too many bad steps.; Dynamic level is 7.; exc.g_really_quit() is 0. **** Optimization has failed! (in 9 steps) ****; --------------------------; OPTKING Finished Execution; --------------------------; ```; the error isn't translated to a Py-side exception, and the program prints the ""Buy a developer a beer!"" successful exit message even though the optimization has, in fact, failed. This should raise some error, akin to the new `ConvergenceError` exception, so that the output does not fly under the radar as successful. **UPDATE**: Migrated this comment to #800 to expedite the merging of this PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/798#issuecomment-330583293:680,error,error,680,https://psicode.org,https://github.com/psi4/psi4/pull/798#issuecomment-330583293,2,['error'],['error']
Availability,"Just to document this here as well, there's no convergence issue with any of the guesses with the default SCF options: SAD converges in 1+16 iterations, Huckel in 18. However, SAD lands on a saddle point, Huckel does not. The problem is the SCF after the stability analysis in SAD: the DIIS error starts out small at 8e-4, dips down, but soon comes back up and plateaus at 6e-4 all the while the energy converges. My first bet would be that something screws up orbital orthonormality in the stability code for UHF.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1747#issuecomment-548850482:291,error,error,291,https://psicode.org,https://github.com/psi4/psi4/issues/1747#issuecomment-548850482,2,"['down', 'error']","['down', 'error']"
Availability,"Just to make sure I understand how the library works:; During the installation procedure, there will be a `trex.json` file added. The contents of this file change the _groups_ and _variables available within each group_. (For Psi devs, this is equivalent to libpsio file and libpsio entry name.) So by editing the file and then re-compiling (`make`, `make check` and then `make install`?), we can edit the entries available to `trexio`. Is that all right?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2847#issuecomment-1397079466:191,avail,available,191,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1397079466,2,['avail'],['available']
Availability,"Just try typing `conda list` on the command line. If that gives you an error, show us the error.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3109#issuecomment-1856789682:71,error,error,71,https://psicode.org,https://github.com/psi4/psi4/issues/3109#issuecomment-1856789682,2,['error'],['error']
Availability,"Just watching Travis it looks like we get a mix of old and new nodes with a variety of computational loads. I kind of would like to do Python 3.5 across the board and then say gcc 4.9, Python 2.7. So that we can isolate between Python errors and compiler errors.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/510#issuecomment-259569411:235,error,errors,235,https://psicode.org,https://github.com/psi4/psi4/pull/510#issuecomment-259569411,2,['error'],['errors']
Availability,"Justin, can you send me the input where you disabled DKH? An SCF read of converged orbitals from the same molecule should never provide such a bad guess that you get an energy error on the order of Hartrees. Even if it's a naughty molecule like FeH. This points to an error in the way that PSI4 is reading orbitals for the set scf guess read procedure.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/899#issuecomment-360834609:176,error,error,176,https://psicode.org,https://github.com/psi4/psi4/issues/899#issuecomment-360834609,2,['error'],['error']
Availability,"Keep in mind that the optimizer (at least this one!) is not trying to; overcome any barriers except possibly one in the 'fixed coordinate'; direction. It's not an IRC computation or a global search. It's trying to; go downhill in all other directions, and it is subject to all the strange; behavior (discontinuities, etc.) present in scans by constrained; optimizations. If you generate your own initial guesses to a constrained; optimization, you will get, in general, different results. On Thu, Mar 23, 2017 at 7:25 PM, Andy Simmonett <notifications@github.com>; wrote:. > This <https://github.com/psi4/psi4/files/866534/torsion.pdf> is the sort; > of geometry I get, which is very reasonable looking. If you compare the; > 'good' and 'bad' geometries, is the different in the orientation of the; > methyl hydrogens? If so, it's likely that your starting guess has them; > oriented with steric clashes, but the barrier to rotation is too high for; > the optimizer to be able to overcome.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/647#issuecomment-288899587>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/ADguTEGE7UVrDtnMjCBGDwRX1AuB-aYZks5row2IgaJpZM4Mbq9X>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/647#issuecomment-288900538:218,down,downhill,218,https://psicode.org,https://github.com/psi4/psi4/issues/647#issuecomment-288900538,1,['down'],['downhill']
Availability,"Kind of an interesting edge case, since the SOCC orbitals area always assumed to be of the same spin the sorting breaks the multiplicity. This could be widely considered a ""bug"" as the sorting *should* be aware of this in a perfect world. At the same time, CUHF for closed shell doesn't make a ton of sense so perhaps the other way to do it is have CUHF complain if a closed shell molecule is given? We can likely find similar errors when running UHF in singlet mode. Some logic to switch between RHF and UHF can be added if a user doesnt specify a reference.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/738#issuecomment-307631551:427,error,errors,427,https://psicode.org,https://github.com/psi4/psi4/issues/738#issuecomment-307631551,1,['error'],['errors']
Availability,"Kind of looks like your convergence is getting tight enough that some sort of denominator is getting small enough for instabilities (not sure how this is solved, but alpha/beta in CG for examples). This is probably exacerbated by the very loose integral tolerance. @amjames Any comments?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/603#issuecomment-301266040:254,toler,tolerance,254,https://psicode.org,https://github.com/psi4/psi4/issues/603#issuecomment-301266040,1,['toler'],['tolerance']
Availability,"LNK2019: 无法解析的外部符号 dggesx，该符号在函数 ""int __cdecl psi::C_DGGESX(char,char,char,char,int,double *,int,double *,int,int *,double *,double *,double *,double *,int,double *,int,double *,double *,double *,int,int *,int)"" (?C_DGGESX@psi@@YAHDDDDHPEANH0HPEAH0000H0H000H1H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dggev，该符号在函数 ""int __cdecl psi::C_DGEGV(char,char,int,double *,int,double *,int,double *,double *,double *,double *,int,double *,int,double *,int)"" (?C_DGEGV@psi@@YAHDDHPEANH0H0000H0H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dggevx，该符号在函数 ""int __cdecl psi::C_DGGEVX(char,char,char,char,int,double *,int,double *,int,double *,double *,double *,double *,int,double *,int,int *,int *,double *,double *,double *,double *,double *,double *,double *,int,int *)"" (?C_DGGEVX@psi@@YAHDDDDHPEANH0H0000H0HPEAH10000000H1@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dggglm，该符号在函数 ""int __cdecl psi::C_DGGGLM(int,int,int,double *,int,double *,int,double *,double *,double *,double *,int)"" (?C_DGGGLM@psi@@YAHHHHPEANH0H0000H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgghrd，该符号在函数 ""int __cdecl psi::C_DGGHRD(char,char,int,int,int,double *,int,double *,int,double *,int,double *,int)"" (?C_DGGHRD@psi@@YAHDDHHHPEANH0H0H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgglse，该符号在函数 ""int __cdecl psi::C_DGGLSE(int,int,int,double *,int,double *,int,double *,double *,double *,double *,int)"" (?C_DGGLSE@psi@@YAHHHHPEANH0H0000H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dggqrf，该符号在函数 ""int __cdecl psi::C_DGGQRF(int,int,int,double *,int,double *,double *,int,double *,double *,int)"" (?C_DGGQRF@psi@@YAHHHHPEANH00H00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dggrqf，该符号在函数 ""int __cdecl psi::C_DGGRQF(int,int,int,double *,int,double *,double *,int,double *,double *,int)"" (?C_DGGRQF@psi@@YAHHHHPEANH00H00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : err",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:24554,error,error,24554,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"Last time we tried with py3.8 some dependencies were not yet available for python 3.8. Might be solved now. Adcc should not be a problem, since with pypi packages 3.8 is already supported.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1848#issuecomment-598880741:61,avail,available,61,https://psicode.org,https://github.com/psi4/psi4/pull/1848#issuecomment-598880741,1,['avail'],['available']
Availability,"Let me know if I can help here, it would be great to get something like this in. The iterations are now in Python so implementing a new solver should be much more accessible to new developers as well. This could be a fun project to tackle... . Feel free to ping someone to add occupation smearing to the density formation which would likely need to happen C side, should be very straightforward to do.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1646#issuecomment-492649900:257,ping,ping,257,https://psicode.org,https://github.com/psi4/psi4/issues/1646#issuecomment-492649900,1,['ping'],['ping']
Availability,"Let me make sure I have this right: you're plotting energy errors on the order of 1e-7, but you only converged the energy to 1e-6? If so, then your plots are pure noise. If not, then what am I getting wrong?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-821212583:59,error,errors,59,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-821212583,1,['error'],['errors']
Availability,"Let me rephrase: I tried to make my own wavefunction file, but when I succeed in that, I get a different error when setting up the active space, likely because the number of MOs in the basis set I'm picking isn't consistent with the active space defined in the input file. Anyways, this bug is the result of the exact same deep design issue in the Wavefunction class that led to #1851. **I don't know what the Wavefunction ""contract"" is, and wavefunction serialization disagrees about what the contract is with every single module that's having these problems.**. #1851 : Some modules assume that every wavefunction must have a PSIO object. Wavefunction serialization disagrees.; bsenjean's original report : The JK object constructors force callers to pass in an auxiliary basis set, even when the JK object will never use it. `detci` responds by assuming that every reference wavefunction must have a `DF_BASIS_SCF` set. Wavefunction serialization disagrees. Holger's previous analysis is right on for the mechanism of this.; Holger's new report : The properties code [assumes that every wavefunction has a matrix factory](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/oeprop.cc#L88) and uses that to create an [OperatorSymmetry object](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/oeprop.cc#L1256). Wavefunction serialization disagrees. It doesn't attach a matrix factory, so libmints is left trying to create matrices out of `nullptr`. That segmentation faults, unsurprisingly. I don't have time to deal with these, because I have the gradient code to worry about, and I'm sure nobody else has time because _getting 1.4 out soon is kind of important_. I will say that this is not a good state of affairs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1871#issuecomment-615460041:105,error,error,105,https://psicode.org,https://github.com/psi4/psi4/issues/1871#issuecomment-615460041,2,"['error', 'fault']","['error', 'faults']"
Availability,"Looking at the CI failure logs, it seems that the issue is with the package ""Pint"":. `ImportError: cannot import name 'quantity' from 'pint' (C:\Miniconda\envs\baseenv\lib\site-packages\pint\__init__.py). This particular error seems to commonly show up for the failed CI tests.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2762#issuecomment-1293471883:18,failure,failure,18,https://psicode.org,https://github.com/psi4/psi4/pull/2762#issuecomment-1293471883,2,"['error', 'failure']","['error', 'failure']"
Availability,"Looking at the Window's error message, I think libmint's integral.cc needs to use C++14, too.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2392#issuecomment-1006506298:24,error,error,24,https://psicode.org,https://github.com/psi4/psi4/pull/2392#issuecomment-1006506298,1,['error'],['error']
Availability,"Looking at the commit history, this was added by DGAS years ago as part of a commit that suffered scope creep and was never actually used for anything. Let's check to see if anybody uses it downstream, but if not, I say remove it until we have an actual use case.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2266#issuecomment-966542107:190,down,downstream,190,https://psicode.org,https://github.com/psi4/psi4/pull/2266#issuecomment-966542107,1,['down'],['downstream']
Availability,"Looking at your GitHub account, I suspect that you have a background in machine learning rather than quantum chemistry, so I'll try to keep this simple. DFT methods (like WB97X-D) rely on an expensive numerical integration procedure, and different codes use different integration grids with different schemes to remove points to reduce computational time. Chemists are usually interested in _differences_ of energies and will prune points if doing so means energy _differences_ are unchanged, even if individual energies changes. Fair comparisons of DFT energies across different programs, like Psi4 and ORCA, are thus very difficult and can only be reliably accomplished by an expert. Your data for 1.3.2 vs 1.4 does not convince me that anything is wrong. Maybe you're just observing noise because you haven't converged the equations fully tightly. Report the largest differences between the 1.4.1 energy and the 1.4 energies. Since you have the full dataset, that should be a simple Python script to write. If we're seeing differences much above the convergence thresholds, then we should look deeper into this. There was a [bugfix](https://github.com/psi4/psi4/pull/2283) between 1.4 and 1.4.1 that specifically affected computations with density-fitted integrals (which you use by default), an omega functional, and a linearly dependent auxiliary basis set like you would see in large systems. @andysim would know more, but the 1.4.1 numbers should be more reliable than the 1.3.2 or 1.4 numbers.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2351#issuecomment-966269475:650,reliab,reliably,650,https://psicode.org,https://github.com/psi4/psi4/issues/2351#issuecomment-966269475,4,['reliab'],"['reliable', 'reliably']"
Availability,"Looking great, @andysim! Gone from 1 pass, 1 fail w/normco errors in the tenths, and 3 radically fail to 4 pass and 1 fail with normco errors in the ten thousandths. Systems are formaldehyde, ammonia, methane, ethene, carbon dioxide. I think HOOH was the original suspicious one, so I'll dig that up.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/903#issuecomment-361037317:59,error,errors,59,https://psicode.org,https://github.com/psi4/psi4/pull/903#issuecomment-361037317,2,['error'],['errors']
Availability,"Looks fine to me. Thanks Lori!. -Rob. On Thu, Sep 22, 2016 at 8:32 PM, Lori A. Burns notifications@github.com; wrote:. > Description; > ; > Documents F/I-SAPT capabilities, adds F/I-SAPT test cases and samples, and; > makes F/I-SAPT postprocessing scripts available in install/share.; > Todos; > ; > Notable points that this PR has either accomplished or will accomplish.; > - Enables the average citizen to quickly begin using F/I-SAPT.; > ; > Status; > - Ready to go. Looks ready to me, though there may well be further; > reST changes after viewing the docs build. @robparrish; > https://github.com/robparrish may want to look it over. We'll close; > the other PR.; > ; > ---; > ; > You can view, comment on, or merge this pull request online at:; > ; > https://github.com/psi4/psi4/pull/470; > Commit Summary; > - FISAPT does not need INTS_TOLERANCE 0.0 any more (bug fixed in; > LibFock previously); > - Removed extra pymol file in fsapt; > - Remove dependency on absolute path from copy_pymol scripts in fsapt; > - Short correctness test (1s) of fsapt0; > - Full example of fsapt0; > - Full example of fisapt0; > - Shorter version of tests/isapt1; > - Example of fsapt0 difference analysis; > - Hook up and clean fisapt test makefiles; > - Added a good bit of sphinx docs on FISAPT; > - update samples. docstring f/isapt tests; > - a few mods to fisapt docs that I can detect w/o seeking the built; > docs; > ; > File Changes; > - _M_ doc/sphinxman/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-0 (6); > - _A_ doc/sphinxman/source/Total.png; > https://github.com/psi4/psi4/pull/470/files#diff-1 (0); > - _A_ doc/sphinxman/source/VA.png; > https://github.com/psi4/psi4/pull/470/files#diff-2 (0); > - _M_ doc/sphinxman/source/bibliography.rst; > https://github.com/psi4/psi4/pull/470/files#diff-3 (16); > - _A_ doc/sphinxman/source/fisapt.rst; > https://github.com/psi4/psi4/pull/470/files#diff-4 (351); > - _M_ doc/sphinxman/source/methods.rst; > https://github.com/psi4/psi4",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/470#issuecomment-249267903:256,avail,available,256,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903,1,['avail'],['available']
Availability,"Looks good. This is background work, not ready-to-go method algorithm, right?. Sometimes the code in dfocc tends to repeat (e.g., below <10 lines of the 138 added really differ between newly added and existing member functions). Would you want to consider consolidating such functions in future for ease of maintenance? It might also help the module's build time. ``` cpp; 2c2; < // CD-WabefT2: ; ---; > // WabefT2 ; 4c4; < void DFOCC::ccsd_WabefT2_cd(); ---; > void DFOCC::ccsd_WabefT2(); 6,8d5; < ; < timer_on(""WabefT2"");; < ; 11c8; < SharedTensor2d V, Vs, Ts, Va, Ta, bQ;; ---; > SharedTensor2d V, Vs, Ts, Va, Ta;; 12a10; > timer_on(""WabefT2"");; 44,48c42,44; < bQ = SharedTensor2d(new Tensor2d(""L <Q|AB>"", nQ_cd, navirA, navirA));; < bQ->read(psio_, PSIF_DFOCC_INTS, true, true);; < K = SharedTensor2d(new Tensor2d(""DF_BASIS_CC B (AB|Q)"", navirA * navirA, nQ_cd));; < K = bQ->transpose();; < bQ.reset();; ---; > K = SharedTensor2d(new Tensor2d(""DF_BASIS_CC B (AB|Q)"", navirA * navirA, nQ));; > K = bQabA->transpose();; > bQabA.reset();; 65c61; < I->contract(false, true, navirA*nb, navirA, nQ_cd, K, K, 0, a*navirA*nQ_cd, 1.0, 0.0);; ---; > I->contract(false, true, navirA*nb, navirA, nQ, K, K, 0, a*navirA*nQ, 1.0, 0.0);; 134a131,134; > // Read B(Q,ab); > bQabA = SharedTensor2d(new Tensor2d(""DF_BASIS_CC B (Q|AB)"", nQ, navirA, navirA));; > bQabA->read(psio_, PSIF_DFOCC_INTS, true, true);; > ; 137c137; < }// end ccsd_WabefT2_cd; ---; > }// end ccsd_WabefT2; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/382#issuecomment-220406272:307,mainten,maintenance,307,https://psicode.org,https://github.com/psi4/psi4/pull/382#issuecomment-220406272,1,['mainten'],['maintenance']
Availability,"Looks like @jturney and @lothian picked up some frac faults just as I’ve managed to squelch all of mine. The problem is that the scf convergence goes haywire occasionally at different fractional occupations on different computers (sometimes just failing to converge, sometimes converging to wrong values). Fiddling with `frac_start` and `mom_start` around https://github.com/psi4/psi4public/blob/master/tests/frac/input.dat#L126 for different points usually helps. If you could identify which point is giving trouble (`grep electron.`) that’d help in devising an input file that works everywhere. Or in commenting out the points most likely to offend. https://testboard.org/cdash/viewTest.php?onlyfailed&buildid=23176; https://testboard.org/cdash/viewTest.php?onlyfailed&buildid=23168; https://testboard.org/cdash/viewTest.php?onlyfailed&buildid=23173",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/129#issuecomment-124147126:53,fault,faults,53,https://psicode.org,https://github.com/psi4/psi4/issues/129#issuecomment-124147126,1,['fault'],['faults']
Availability,"Looks like I didn't ask you a fundamental enough question at the start of this diagnosis. Are you trying to install the last stable release (July 2016; 1.0; `conda install psi4 --channel psi4`) or the current development head (April 2017; ~1.1rc1; `conda install psi4 --channel psi4/label/devel --channel psi4`)? The former doesn't need a conda gcc and automatically installs the libgcc 4.8.5 package. The latter needs, and so comes with a gcc 5.2 package from the psi4 channel (borrowed from msarahan). So when psi4 ~1.1 is properly installed, `which psi4 python gcc` should all be pointing to side-by-side executables in your conda environment. The error you just reported is what happens when you mix libraries built against pre- and post-gcc-5.1 `std::string`. I'd abandon your psi4-env environment and start the installation again with something like the below (assuming psi4 ~1.1 is what you're after). ```; conda create -n p4env python=x.x psi4 psi4-deps -c psi4/label/devel -c psi4; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/675#issuecomment-297062748:651,error,error,651,https://psicode.org,https://github.com/psi4/psi4/issues/675#issuecomment-297062748,1,['error'],['error']
Availability,"Looks like Travis is still feeling ill: the failure is caused by; ```; > raise ResourceError(f""MP2D version '{self.get_version()}' too old. Please update to at least '1.1'.""); E qcengine.exceptions.ResourceError: MP2D version '' too old. Please update to at least '1.1'.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1665#issuecomment-503905741:44,failure,failure,44,https://psicode.org,https://github.com/psi4/psi4/pull/1665#issuecomment-503905741,1,['failure'],['failure']
Availability,Looks like mostly range-separated failures. @susilehtola any ideas on what may have changed?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-601793342:34,failure,failures,34,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-601793342,1,['failure'],['failures']
Availability,Looks like the MKL header is always being included:. ```; /psi4/psi4/src/psi4/libparallel/process.cc:36:17: fatal error: mkl.h: No such file or directory; #include <mkl.h>; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/615#issuecomment-278961359:114,error,error,114,https://psicode.org,https://github.com/psi4/psi4/pull/615#issuecomment-278961359,1,['error'],['error']
Availability,"Looks like the azure failure was caused by something else in psi4, which has now been fixed by a rebase. Ready to merge.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1760#issuecomment-565795100:21,failure,failure,21,https://psicode.org,https://github.com/psi4/psi4/pull/1760#issuecomment-565795100,1,['failure'],['failure']
Availability,"Looks like the failure is a Distelli issue, so LGTM.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/486#issuecomment-258135820:15,failure,failure,15,https://psicode.org,https://github.com/psi4/psi4/pull/486#issuecomment-258135820,1,['failure'],['failure']
Availability,"Looks like the formatted checkpoints don't carry post-SCF densities, though, which would be nice. Also, it looks like psi4 spits out also spin-restricted checkpoints in spin-polarized form. For a more thorough study, I could try and check if the formatted checkpoints pass inspection through ERKALE, which I've checked in a previous life against the code that shall not be mentioned.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/708#issuecomment-301913196:25,checkpoint,checkpoints,25,https://psicode.org,https://github.com/psi4/psi4/issues/708#issuecomment-301913196,3,['checkpoint'],['checkpoints']
Availability,"Looks like there are some unrelated test failures, but this one is ready to go. As shown by the changes in the pytest guess energies, the new code reaches a considerably lower SAD guess energy for the HF molecule: -100.02909951427 vs -99.63941801281894. Large improvements are expected especially for systems containing hydrogen atoms, since the existing code only includes 0.5 electrons on those atoms.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3138#issuecomment-2149267707:41,failure,failures,41,https://psicode.org,https://github.com/psi4/psi4/pull/3138#issuecomment-2149267707,1,['failure'],['failures']
Availability,"Looks like this still doesn't quite work. We did not copy the point group originally because a molecule does not have a PG until `update_geometry` is called. This can cause a seg fault as is. Also, it appears we are missing some symmetry information. I think we are going to have to unlock the frame and allow for a full update to get this to work.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/299#issuecomment-196887129:179,fault,fault,179,https://psicode.org,https://github.com/psi4/psi4/pull/299#issuecomment-196887129,1,['fault'],['fault']
Availability,"Lori and I had a discussion about this a while back. I _think_ my; conclusion was to remove ROHF MP4 as a listed capability. _Technically_; DETCI can run it, but it will fail for any but the very tiniest of systems,; and in my opinion this will cause more user grief than it would to say we; can't do it. I think the correct solution is to get rid of MP4 in the; Psi4Education module... which one was it?. David. On Fri, Feb 26, 2016 at 8:41 AM, Justin Turney notifications@github.com; wrote:. > One of our students has been working through the Psi4Education site and; > one of the labs requires the user to run MP4 on boron.; > ; > If I'm reading the managed method matrix; > http://psicode.org/psi4manual/master/proc_py.html#table-managedmethods; > correctly then the user should specify an ROHF reference and Psi4 will use; > DETCI. However on we receive the following error:; > ; > Input file: h2o_mp4.txt; > https://github.com/psi4/psi4/files/148253/h2o_mp4.txt; > ; > An error has occurred Py-side; > Traceback:; > <class 'p4xcpt.ManagedMethodError'>: select_mp4: Method 'mp4' with MP_TYPE 'CONV' and REFERENCE 'ROHF' not available: File ""<string>"", line 27, in <module>; > ; > File ""/Users/jturney/Code/Chemistry/psi4/source/share/python/driver.py"", line 586, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > ; > File ""/Users/jturney/Code/Chemistry/psi4/source/share/python/proc.py"", line 831, in select_mp4; > raise ManagedMethodError(['select_mp4', name, 'MP_TYPE', mtd_type, reference, module]); > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/282.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/282#issuecomment-189282404:872,error,error,872,https://psicode.org,https://github.com/psi4/psi4/issues/282#issuecomment-189282404,3,"['avail', 'error']","['available', 'error']"
Availability,"Lori, This is a problem that I have long wished to solve. Perhaps we can do it together. I've scribbled down some notes on the attached pdf. The primary problem is that the transformation to the cartesian hessian is not a linear one at non-stationary points. However, given the constraint that the energy is independent of rotations and translations, we don't have to do the extra displacements. The bad news is that it is not trivial. We need the 'derivative B matrix' or the second derivative of the external coordinates wrt cartesian displacements. Perhaps these are 0 for the COM coordinates, and your scheme will therefore work out of the box. But they are not for rotations. However, if we can find them or figure them out, then we can construct the Cartesian Hessian from a minimal number of displacements. Solving a 6x6 for each element is a good tradeoff I would say. The only real pain I forsee might be accommodating the linear molecules. In those cases one might be able to revert to not projecting the rotations at all as you planned. My notation is an inconsistent compromise between what I'm used to and the notation in WDA, JCP, 98, 1993. [cartesian hessians.pdf](https://github.com/psi4/psi4/files/1644627/cartesian.hessians.pdf)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/884#issuecomment-358800415:104,down,down,104,https://psicode.org,https://github.com/psi4/psi4/issues/884#issuecomment-358800415,1,['down'],['down']
Availability,"Lori, if you have time, could you please describe briefly what the main reasons were for switching to targets as the mechanism to link to external libraries? What becomes easier? Are there known pitfalls/gotchas? I think targets look more robust than a string which could be (accidentally) modified on the way. In the initial math detection implementation we wanted to be close to how CMake finds libraries. Later I went a bit off course to make it easier for CMake-unaware colleagues to extend the detection. Now I feel I want to go back to more modular and CMake-like but I want to do it ""right"" this time so I would love to learn the advantages of using targets for this. Maybe you have a document you can point me to.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/591#issuecomment-276161205:239,robust,robust,239,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276161205,2,['robust'],['robust']
Availability,"Lori, is there a way to link examples in the manual to test case input files?. Francesco. On Jul 17, 2015, at 8:50 PM, Lori A. Burns <notifications@github.com<mailto:notifications@github.com>> wrote:. Thanks, @ssh2https://github.com/ssh2. @tmpchemhttps://github.com/tmpchem hunted down all the malfunctioning manual entries this week. Two bullets fixed by psi4/psi4@e1bae5bhttps://github.com/psi4/psi4/commit/e1bae5b028c15aef889480978e4f70d247f8821e. ## . Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/149#issuecomment-122461767. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/149#issuecomment-122476853:281,down,down,281,https://psicode.org,https://github.com/psi4/psi4/issues/149#issuecomment-122476853,2,"['down', 'error']","['down', 'error']"
Availability,"Lovely. @dgasmith do you have an outfile? Would be also interested to see; the eigenspectrum of the DF metric from the failing case. -Rob. On Fri, Apr 29, 2016 at 3:04 PM, Lori A. Burns notifications@github.com; wrote:. > Ok, curious. Ours are 15.0.3. @dgasmith https://github.com/dgasmith; > tried it on a couple architectures and executables, but good to know the; > error isn't seen everywhere. May have to wait for a calmer development; > environment here to examine again.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/371#issuecomment-215894127",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/371#issuecomment-215894587:369,error,error,369,https://psicode.org,https://github.com/psi4/psi4/issues/371#issuecomment-215894587,1,['error'],['error']
Availability,"MBIS is Georgia Tech's department, so obligatory @loriab ping - I'm not sure who has taken over MBIS now that Jeff has left. Is there a legitimate reason for us not to support MBIS for iodine? It looks to me like we just need to extend the `get_mbis_params` table one more row of the periodic table and then update the `mA` setting. If so, this is an easy project for one of your developers who is still learning Psi.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2728#issuecomment-1262298053:57,ping,ping,57,https://psicode.org,https://github.com/psi4/psi4/issues/2728#issuecomment-1262298053,2,['ping'],['ping']
Availability,"Main thing to watch for mol-wise is that if atoms are near and all the tolerances aren't even, internal molecule processing will take in all your coordinates, then effectively zero them without warning, so `geometry()` is an array of zeros, and downstream is right to protest that atoms are overlapping.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1843#issuecomment-595911780:71,toler,tolerances,71,https://psicode.org,https://github.com/psi4/psi4/pull/1843#issuecomment-595911780,2,"['down', 'toler']","['downstream', 'tolerances']"
Availability,"Make sure you install. Sent from my Android (without spellcheck). Please forgive the brevity. On Jul 25, 2016 7:40 PM, ""Andy Simmonett"" notifications@github.com wrote:. > The patch I just pushed allows it to compile. The tests all fail instantly; > on my laptop, so I still have some more work to do, but that's almost; > certainly user error.; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/442#issuecomment-235119557, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AFCRi08tfysGPjLLYYwmAXVcqfjyQ7CVks5qZUlygaJpZM4JHR4P; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235119690:337,error,error,337,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235119690,1,['error'],['error']
Availability,"Make sure you're making a new object directory, not reusing the py27 one. And post everything from `cmake` command through error, please.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/768#issuecomment-316433982:123,error,error,123,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316433982,1,['error'],['error']
Availability,Makes sense since it's finding the conda mkl_rt. Will look into where the `mkl.h` ever actually came from. The distelli fault is hdf5 – altered reasoning too late at night. Looking at that now.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/615#issuecomment-278965098:120,fault,fault,120,https://psicode.org,https://github.com/psi4/psi4/pull/615#issuecomment-278965098,1,['fault'],['fault']
Availability,"Many thanks for your answers and support. We basically want to export the two-electron integrals, and use them with other programs. So the integrals will be written to a binary file together with other 1el matrices. The code snippet that is working at the moment:. ``` c++; MintsHelper mints(ref_wfn->basisset(), options, 0);; auto intFactory = mints.integral();; auto basis = mints.basisset();; auto tBO = intFactory->eri();; AOShellCombinationsIterator shellIter = intFactory->shells_iterator();. std::vector<double> intval;; std::vector<int> intnums;. for (shellIter.first(); shellIter.is_done() == false; shellIter.next()) {; tBO->compute_shell(shellIter.p(),shellIter.q(),shellIter.r(),shellIter.s());; double cutOff = 1E-12;; auto aoIter = intFactory->integrals_iterator(shellIter.p(),shellIter.q(),shellIter.r(),shellIter.s());; for (aoIter.first(); aoIter.is_done() == false; aoIter.next()) {; int i = aoIter.i();; int j = aoIter.j();; int k = aoIter.k();; int l = aoIter.l();. if (fabs(tBO->buffer()[aoIter.index()])>cutOff){; intval.push_back(tBO->buffer()[aoIter.index()]);; intnums.push_back(i); ; intnums.push_back(j);; intnums.push_back(k);; intnums.push_back(l);. }. }; // Continue Sorting + Exporting; ````. If we use the conda install, we get an error that the symbol cannot be found. Compiling with modified integral.h works as expected. Thanks again!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2239#issuecomment-876632135:1263,error,error,1263,https://psicode.org,https://github.com/psi4/psi4/issues/2239#issuecomment-876632135,1,['error'],['error']
Availability,"Matt,. You accidentally typed. scf(‘energy’). instead of. energy(‘scf’). Normally you’d get a more useful python error related to calling an undefined function but, unfortunately, the scf function does exist in this case so you got a more obscure error message. Andy. > On Apr 19, 2015, at 9:53 PM, Matt Ernst notifications@github.com wrote:; > ; > Normally Psi4 gives me helpful error messages but in this case I have poked around a bit and can't figure out how to fix my input. I'm trying to create input files with all basis data supplied from within the file itself, so old jobs are self-documenting. I am trying to run the input below with the latest binary installed via conda. It crashes with the message; > ; > Traceback (most recent call last):; > File ""<string>"", line 59, in <module>; > Boost.Python.ArgumentError: Python argument types in; > psi4.scf(str); > did not match C++ signature:; > scf(void); > scf(P7_object, P7_object); > Here is the input I am trying to run. I've made some mistake trying to implement what I read in the docs, but I can't figure out what. I retrieved the basis set data in Gaussian 94 format from the EMSL Basis Set Exchange.; > ; > #methane test; > ; > molecule {; > #charge multiplicity; > 0 1; > C0 0.000000 0.000000 0.000000; > H0 1.092199 0.000000 -0.000001; > H0 -0.364063 0.138497 1.020380; > H0 -0.364067 -0.952923 -0.390247; > H0 -0.364068 0.814425 -0.630132; > }; > ; > set globals {; > reference RHF; > maxiter 999; > }; > ; > basis {; > assign C0 C0bas; > assign H0 H0bas; > #C 3-21G; > [ C0bas ]; > cartesian; > ; > ---; > ; > C 0 ; > S 3 1.00; > 172.2560000 0.0617669 ; > 25.9109000 0.3587940 ; > 5.5333500 0.7007130 ; > SP 2 1.00; > 3.6649800 -0.3958970 0.2364600 ; > 0.7705450 1.2158400 0.8606190 ; > SP 1 1.00; > 0.1958570 1.0000000 1.0000000 ; > ; > ---; > ; > #H 3-21G; > [ H0bas ]; > cartesian; > ; > ---; > ; > H 0 ; > S 2 1.00; > 5.4471780 0.1562850 ; > 0.8245470 0.9046910 ; > S 1 1.00; > 0.1831920 1.0000000 ; > ; > ---; > ; > }; > ; > ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/79#issuecomment-94352477:113,error,error,113,https://psicode.org,https://github.com/psi4/psi4/issues/79#issuecomment-94352477,3,['error'],['error']
Availability,"Maybe the TOC data is read into memory before the O_TRUNC bit?. -Rob. On Fri, Jan 17, 2014 at 4:23 PM, David Sherrill notifications@github.comwrote:. > Err, that's confusing, the orbital file is already opened using the; > PSIO_OPEN_NEW flag, which should blow away the previous contents. The; > O_TRUNC flag is passed to ::open() inside PSIO::open, which is supposed to; > ""Delete any prior file content"". So, I don't get how we are getting an; > error about overwriting TOC entries in PSIO, etc.; > ; > —; > Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4release/issues/32#issuecomment-32648789; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/32#issuecomment-32649241:448,error,error,448,https://psicode.org,https://github.com/psi4/psi4/issues/32#issuecomment-32649241,1,['error'],['error']
Availability,"Maybe:; - Switch out Pople basis fitting bases to appropriate-zeta def2-*-ri/jkfit, rather than Dunning ri/jkfit, as former has fewer element holes.; - Create another layer of defaulting so that aug-cc-pvdz orbital uses aug-cc-pvdz-ri/jkfit when available (as at present), then def2-tzvp-ri/jkfit (not at present), then the ultimate default def2-qzvpp-ri/jkfit (as at present). This way don't get high AM cost on supposedly cheap orbital basis sets.; - Disqualify default for 5Z and 6Z basis sets. if aug-cc-pv5/6Z-ri/jkfit aren't defined for a certain element, we've nothing to put in their place.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/144#issuecomment-163827788:246,avail,available,246,https://psicode.org,https://github.com/psi4/psi4/issues/144#issuecomment-163827788,1,['avail'],['available']
Availability,"Might get past the PSIO error if second basis is smaller than first, but that's not the likely case.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1329#issuecomment-451559368:24,error,error,24,https://psicode.org,https://github.com/psi4/psi4/issues/1329#issuecomment-451559368,1,['error'],['error']
Availability,Mild reminder to throw in an [extra Windows test](https://github.com/psi4/psi4/pull/1760#issuecomment-568071614) to debug what I hope is a borderline tolerance instability.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1760#issuecomment-571203823:150,toler,tolerance,150,https://psicode.org,https://github.com/psi4/psi4/pull/1760#issuecomment-571203823,1,['toler'],['tolerance']
Availability,"Mmh, how many parallel processes do you have ? aio_handler.cc spawns a new thread that is specifically for writing the integrals to disk. When there is no writing left to do, the thread should die, and a new one is generated when further writing is needed. Here it looks like it's trying to generate the thread when it already exists... Or maybe the threads are not properly dying, and it gets to the maximum number of threads. Does your computation seem to proceed normally in spite of the error message ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/596#issuecomment-277489656:491,error,error,491,https://psicode.org,https://github.com/psi4/psi4/issues/596#issuecomment-277489656,1,['error'],['error']
Availability,"More details:; ```; ==10585==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x603000319fd8 at pc 0x7f3580353a82 bp 0x7fffa79ccfc0 sp 0x7fffa79cc778; READ of size 72 at 0x603000319fd8 thread T0; #0 0x7f3580353a81 in __interceptor_write /opt/conda/conda-bld/compilers_linux-64_1534514838838/work/.build/x86_64-conda_cos6-linux-gnu/src/gcc/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1036; #1 0x7f356f2bdc52 in psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int) /home/raimis/prj/psi4.git/psi4/src/psi4/libpsio/rw.cc:86; #2 0x7f356f2c10b7 in psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*) /home/raimis/prj/psi4.git/psi4/src/psi4/libpsio/write.cc:137; #3 0x7f356f2c1324 in psi::PSIO::write_entry(unsigned long, char const*, char*, unsigned long) /home/raimis/prj/psi4.git/psi4/src/psi4/libpsio/write_entry.cc:46; #4 0x7f356f2c13bd in psi::psio_write_entry(unsigned long, char const*, char*, unsigned long) /home/raimis/prj/psi4.git/psi4/src/psi4/libpsio/write_entry.cc:56; #5 0x7f356cf5301c in psi::ccresponse::roa() /home/raimis/prj/psi4.git/psi4/src/psi4/cc/ccresponse/roa.cc:238; #6 0x7f356cf2a1e3 in psi::ccresponse::ccresponse(std::shared_ptr<psi::Wavefunction>, psi::Options&) /home/raimis/prj/psi4.git/psi4/src/psi4/cc/ccresponse/ccresponse.cc:136; #7 0x7f356cac7528 in py_psi_ccresponse(std::shared_ptr<psi::Wavefunction>) /home/raimis/prj/psi4.git/psi4/src/core.cc:396; #8 0x7f356cb7fe9a in double pybind11::detail::argument_loader<std::shared_ptr<psi::Wavefunction> >::call_impl<double, double (*&)(std::shared_ptr<psi::Wavefunction>), 0ul, pybind11::detail::void_type>(double (*&)(std::shared_ptr<psi::Wavefunction>), std::integer_sequence<unsigned long, 0ul>, pybind11::detail::void_type&&) /home/raimis/opt/conda/envs/psi4/include/python3.6m/pybind11/cast.h:1870; #9 0x7f356cb726e6 in std::enable_if<!std::is_void<double>::value, double>::type pybind11::detail::argument_loader<st",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1476#issuecomment-454165133:29,ERROR,ERROR,29,https://psicode.org,https://github.com/psi4/psi4/pull/1476#issuecomment-454165133,1,['ERROR'],['ERROR']
Availability,"More errors if I continue. In file included from /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/Timer.cc:29:; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:147: sorry, unimplemented: cannot expand ‘Args ...’ into a fixed-length argument list; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h: In constructor ‘psi::Table<T, Args>::Table(int, int, int, const T&, Args& ...)’:; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:221: sorry, unimplemented: cannot expand ‘Args ...’ into a fixed-length argument list; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:221: error: expected ‘{’ before ‘(’ token; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h: At global scope:; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:221: error: expected ‘)’ before ‘,’ token; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:221: error: expected constructor, destructor, or type conversion before ‘,’ token; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:221: error: expected constructor, destructor, or type conversion before ‘+’ token; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h: In member function ‘std::string psi::Table<T, Args>::PrintOut(int) const’:; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:228: sorry, unimplemented: cannot expand ‘Args ...’ into a fixed-length argument list; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h: In constructor ‘psi::Table<T, Args>::Table(int, const T&, Args& ...)’:; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:235: sorry, unimplemented: cannot expand ‘Args ...’ into a fixed-length argument list; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:235: error: expected ‘{’ before ‘(’ token; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h: At global scope:; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Tab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/404#issuecomment-224865906:5,error,errors,5,https://psicode.org,https://github.com/psi4/psi4/issues/404#issuecomment-224865906,3,['error'],"['error', 'errors']"
Availability,"More playing with the same issue: [this](https://gist.github.com/JonathonMisiewicz/d7b294c34f3200c3150b1a43812e9d54) input file fails as written, but it works fine if I comment the assign line at the bottom and uncomment the lines in the basis block. I can't imagine why one case works but the other doesn't. This may be related to the failure initially reported [here](http://forum.psicode.org/t/problems-with-dkh-calculations/915/5)?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1332#issuecomment-435695580:336,failure,failure,336,https://psicode.org,https://github.com/psi4/psi4/issues/1332#issuecomment-435695580,1,['failure'],['failure']
Availability,"Most errors appear to be related to formatting, which is likely caused by a mismatch of formatters used by Psi4 upstream and FreeBSD. The latter could have an older version, for example. There are errors related to missing functionals in Libxc. Looks like FreeBSD only has Libxc 6.0.0 released over a year ago. E.g. HYB_GGA_XC_R2SCAN0 was only added in Libxc 6.1.0. Is the version check in Psi4 not stringent enough or was it disabled in the FreeBSD build?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3099#issuecomment-1848328400:5,error,errors,5,https://psicode.org,https://github.com/psi4/psi4/issues/3099#issuecomment-1848328400,2,['error'],['errors']
Availability,"Most of tests include well-behaved molecules such as H2O. However, cd-omp2-2 includes the NO molecule, which has a problematic electronic structure. I tried it both on may mac and linux cluster (centos 6.3). In linux I used intel compiler and MKL. It is difficult to guess the source problem unless debugging the source code. I would debug the code but I can not reproduce the error on my machines. Therefore, I suspect that it might be related to the blas library.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/391#issuecomment-222317064:377,error,error,377,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-222317064,1,['error'],['error']
Availability,"Moved from #476 so as to not clutter issues.; - [ ] Here lie uses for general Cholesky machinery.; - [ ] Fock-type terms in DF-SAPT, particularly higher-order, see #317 ; - [ ] If you care about 6-zeta accuracy, you probably oughtn't to be using density fitting. Nevertheless, having orbital basis sets for which _no_ auxiliary is appropriate (even as overkill, like QZ for sto-3g) is troubling for the auxiliary defaulting machinery. On-the-fly construction could help. Maybe a more plausible case is when auxiliary basis sets aren't available for a particular element or for tight functions. Moreover, Susi Lehtola comments:. Well, you could do compact atomic Cholesky to construct a fitting basis for an arbitrary orbital basis set on-the-fly. [doi 10.1063/1.3116784]",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/402#issuecomment-251571266:535,avail,available,535,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-251571266,1,['avail'],['available']
Availability,"My apologies on the late reply. I am unable to replicate this problem with icpc 16.0.2. Admittedly I used the version of Psi4 in #442. That being said, I am skeptical that fully scoping the function is actually causing @edeustua's compile error (I am fairly certain that you can always fully scope a function/type in C++). @edeustua, can you post the actual error log, as well as the configure command you used?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/444#issuecomment-232716913:239,error,error,239,https://psicode.org,https://github.com/psi4/psi4/issues/444#issuecomment-232716913,2,['error'],['error']
Availability,"My errors appeared before the code even loads – at the Python stage – and; happens on both my laptop and desktop Macs. I'm going to grab a fresh; clone and try it again (though I doubt that will fix the problem, given; that the error also occurs on my nightly test builds). But first I have to; land in Atlanta. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Tue, Feb 2, 2016 at 2:18 PM, Justin Turney notifications@github.com; wrote:. > Yup, that was our problem. The test cases are passing.; > ; > Not sure if @lothian https://github.com/lothian is doing something; > similar.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/230#issuecomment-178825893.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/230#issuecomment-178826938:3,error,errors,3,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178826938,2,['error'],"['error', 'errors']"
Availability,"My fault for not realizing you had only seen one half of the `PSI_API` additions. Yes, please add any you need psi-side and PR 'em all. [Here's](https://github.com/psi4/psi4/pull/955/files) more examples.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/971#issuecomment-384378754:3,fault,fault,3,https://psicode.org,https://github.com/psi4/psi4/issues/971#issuecomment-384378754,1,['fault'],['fault']
Availability,"My feeling is that gradient('mp2') should probably default to DF in the SCF; and the MP2, so that we have a nice user experience. We know very well by; now that the DF errors are essentially zero, and the DF algorithm is way; faster. We should print some warning to the user to explain what we did, because; admittedly this solution will cause some degree of confusion. For more advanced users, they should be able to specify where they want; conventional integrals for the SCF and/or MP2. And if they pick an; unsupported combination (conventional SCF plus DF MP2 gradients) we should; print an error message explaining that's not available. Are we still defaulting to DF for SCF? (at least when there is no post HF; module that wants the conventional ints)? Probably should until / unless; we get efficient conventional SCF, and arguably even then. David. On Sunday, March 6, 2016, Ugur Bozkaya notifications@github.com wrote:. > Hi Lori,; > ; > Let us start with your first question for the HF molecule. I run your job,; > and it terminates ""normally"". Since it is a gradient job I do not simply; > grab integrals from SCF, but I compute both JKFIT and RI basis DF; > integrals. Hence, it does not matter to start with the conventional; > integrals the df-mp2 code proceeds. However, the gradient is not correct; > because the MO coefficients are from conventional SCF, but it should be; > from DF-SCF. I think in the case df-mp2 gradients, if user set the; > conventional SCF, then we should throw an error. Alternatively we may; > change the reference to DF-SCF and throw a warning for user to explain what; > we did. Both solutions are okay for me.; > ; > DFOCC uses frozen cores properly in energy and gradients. I did not add; > the froze virtuals yet. But I will add them soon for FNO-DF-CCSD gradients.; > However, OCC does not use frozen cores in the energy and gradients. In case; > of OCC the problem is that you need to define different MO class with; > libtrans, which is not obvious ho",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/245#issuecomment-192920861:168,error,errors,168,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-192920861,6,"['avail', 'error']","['available', 'error', 'errors']"
Availability,"My first try on Ubuntu with clang-3.7 wasn't able to reproduce the errors. My valgrind output was clean, too.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/230#issuecomment-180494377:67,error,errors,67,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-180494377,1,['error'],['errors']
Availability,"My issue was trying to use a `psi4` executable built inside a container from the `psi4` python client from my host machine--i.e., to treat the `psi4` executable as an external executable I could call from `python`; however, the `psi4` python client requires close coupling to the executable (access to shared files) so this separation was not possible because the client has to access files shared with the executable, which are only available inside the container :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3126#issuecomment-1915917267:434,avail,available,434,https://psicode.org,https://github.com/psi4/psi4/issues/3126#issuecomment-1915917267,1,['avail'],['available']
Availability,"My only concern was that symmetrize uses atom_map, and optking uses symmetrize to remove numerical noise. However, since the tolerance is passed through as an optional argument, I have no objection.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/195#issuecomment-189390629:125,toler,tolerance,125,https://psicode.org,https://github.com/psi4/psi4/issues/195#issuecomment-189390629,1,['toler'],['tolerance']
Availability,"My original issue was for a mac, but I see the same error on linux with intel18 compilers:. deprince_root@ed7:~/does_jk_work$ psi4; Attention! This SCF may be density-fitted.; /usr/bin/python3: symbol lookup error: /edfs/users/deprince/does_jk_work/does_jk_work.so: undefined symbol: _ZN3psi4PKJKC1ESt10shared_ptrINS_8BasisSetEERNS_7OptionsE. I don't understand what is going on. For previously functioning plugins, symbols are missing for only certain classes. I've noticed this for PK/DFJK and VBase so far.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/971#issuecomment-384319120:52,error,error,52,https://psicode.org,https://github.com/psi4/psi4/issues/971#issuecomment-384319120,2,['error'],['error']
Availability,My setup options. ```; ./setup --cc icc --cxx icpc --fc ifort --pcmsolver on --chemps2 on --hdf5-dir /usr psi4build; ```. with boost 1.55. The error is reproducible on my end.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/463#issuecomment-241330989:143,error,error,143,https://psicode.org,https://github.com/psi4/psi4/issues/463#issuecomment-241330989,1,['error'],['error']
Availability,"My sincerest apologies to the Psi4 community, I didn't even begin to fathom that these timers were going to be such a fiasco. I dropped the sampling down to 1 point per timer so I expect they should be invisible now, but I can't confirm this at the moment. If someone wants to check this and close the issue if it's been resolved I would appreciate it. In the meantime I'll have to look into VTune as it appears to do everything I was making these timers do, but with a pretty GUI interface.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/89#issuecomment-98518253:149,down,down,149,https://psicode.org,https://github.com/psi4/psi4/issues/89#issuecomment-98518253,1,['down'],['down']
Availability,"NH00H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormlq，该符号在函数 ""int __cdecl psi::C_DORMLQ(char,char,int,int,int,double *,int,double *,double *,int,double *,int)"" (?C_DORMLQ@psi@@YAHDDHHHPEANH00H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormql，该符号在函数 ""int __cdecl psi::C_DORMQL(char,char,int,int,int,double *,int,double *,double *,int,double *,int)"" (?C_DORMQL@psi@@YAHDDHHHPEANH00H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormqr，该符号在函数 ""int __cdecl psi::C_DORMQR(char,char,int,int,int,double *,int,double *,double *,int,double *,int)"" (?C_DORMQR@psi@@YAHDDHHHPEANH00H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormr3，该符号在函数 ""int __cdecl psi::C_DORMR3(char,char,int,int,int,int,double *,int,double *,double *,int,double *)"" (?C_DORMR3@psi@@YAHDDHHHHPEANH00H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormrq，该符号在函数 ""int __cdecl psi::C_DORMRQ(char,char,int,int,int,double *,int,double *,double *,int,double *,int)"" (?C_DORMRQ@psi@@YAHDDHHHPEANH00H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormrz，该符号在函数 ""int __cdecl psi::C_DORMRZ(char,char,int,int,int,int,double *,int,double *,double *,int,double *,int)"" (?C_DORMRZ@psi@@YAHDDHHHHPEANH00H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormtr，该符号在函数 ""int __cdecl psi::C_DORMTR(char,char,char,int,int,double *,int,double *,double *,int,double *,int)"" (?C_DORMTR@psi@@YAHDDDHHPEANH00H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbcon，该符号在函数 ""int __cdecl psi::C_DPBCON(char,int,int,double *,int,double,double *,double *,int *)"" (?C_DPBCON@psi@@YAHDHHPEANHN00PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbequ，该符号在函数 ""int __cdecl psi::C_DPBEQU(char,int,int,double *,int,double *,double *,double *)"" (?C_DPBEQU@psi@@YAHDHHPEANH000@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbrfs，该符号在函数 ""int ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:31415,error,error,31415,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"NH00H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormr3，该符号在函数 ""int __cdecl psi::C_DORMR3(char,char,int,int,int,int,double *,int,double *,double *,int,double *)"" (?C_DORMR3@psi@@YAHDDHHHHPEANH00H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormrq，该符号在函数 ""int __cdecl psi::C_DORMRQ(char,char,int,int,int,double *,int,double *,double *,int,double *,int)"" (?C_DORMRQ@psi@@YAHDDHHHPEANH00H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormrz，该符号在函数 ""int __cdecl psi::C_DORMRZ(char,char,int,int,int,int,double *,int,double *,double *,int,double *,int)"" (?C_DORMRZ@psi@@YAHDDHHHHPEANH00H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormtr，该符号在函数 ""int __cdecl psi::C_DORMTR(char,char,char,int,int,double *,int,double *,double *,int,double *,int)"" (?C_DORMTR@psi@@YAHDDDHHPEANH00H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbcon，该符号在函数 ""int __cdecl psi::C_DPBCON(char,int,int,double *,int,double,double *,double *,int *)"" (?C_DPBCON@psi@@YAHDHHPEANHN00PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbequ，该符号在函数 ""int __cdecl psi::C_DPBEQU(char,int,int,double *,int,double *,double *,double *)"" (?C_DPBEQU@psi@@YAHDHHPEANH000@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbrfs，该符号在函数 ""int __cdecl psi::C_DPBRFS(char,int,int,int,double *,int,double *,int,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DPBRFS@psi@@YAHDHHHPEANH0H0H0H000PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbstf，该符号在函数 ""int __cdecl psi::C_DPBSTF(char,int,int,double *,int)"" (?C_DPBSTF@psi@@YAHDHHPEANH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbsv，该符号在函数 ""int __cdecl psi::C_DPBSV(char,int,int,int,double *,int,double *,int)"" (?C_DPBSV@psi@@YAHDHHHPEANH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbsvx，该符号在函数 ""int __cdecl psi::C_DPBSVX(char,char,int,int,int,d",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:32066,error,error,32066,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"NK2019: 无法解析的外部符号 dsyevx，该符号在函数 ""int __cdecl psi::C_DSYEVX(char,char,char,int,double *,int,double,double,int,int,double,int *,double *,double *,int,double *,int,int *,int *)"" (?C_DSYEVX@psi@@YAHDDDHPEANHNNHHNPEAH00H0H11@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsygst，该符号在函数 ""int __cdecl psi::C_DSYGST(int,char,int,double *,int,double *,int)"" (?C_DSYGST@psi@@YAHHDHPEANH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsygv，该符号在函数 ""int __cdecl psi::C_DSYGV(int,char,char,int,double *,int,double *,int,double *,double *,int)"" (?C_DSYGV@psi@@YAHHDDHPEANH0H00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsygvd，该符号在函数 ""int __cdecl psi::C_DSYGVD(int,char,char,int,double *,int,double *,int,double *,double *,int,int *,int)"" (?C_DSYGVD@psi@@YAHHDDHPEANH0H00HPEAHH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsygvx，该符号在函数 ""int __cdecl psi::C_DSYGVX(int,char,char,char,int,double *,int,double *,int,double,double,int,int,double,int *,double *,double *,int,double *,int,int *,int *)"" (?C_DSYGVX@psi@@YAHHDDDHPEANH0HNNHHNPEAH00H0H11@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsyrfs，该符号在函数 ""int __cdecl psi::C_DSYRFS(char,int,int,double *,int,double *,int,int *,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DSYRFS@psi@@YAHDHHPEANH0HPEAH0H0H0001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsysv，该符号在函数 ""int __cdecl psi::C_DSYSV(char,int,int,double *,int,int *,double *,int,double *,int)"" (?C_DSYSV@psi@@YAHDHHPEANHPEAH0H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsysvx，该符号在函数 ""int __cdecl psi::C_DSYSVX(char,char,int,int,double *,int,double *,int,int *,double *,int,double *,int,double *)"" (?C_DSYSVX@psi@@YAHDDHHPEANH0HPEAH0H0H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsytrd，该符号在函数 ""int __cdecl psi::C_DSYTRD(char,int,double *,int,double *,double *,double *,double *,int)"" (?C_DSYTRD@psi@@Y",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:47436,error,error,47436,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"NK2019: 无法解析的外部符号 dsyev，该符号在函数 ""int __cdecl psi::C_DSYEV(char,char,int,double *,int,double *,double *,int)"" (?C_DSYEV@psi@@YAHDDHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsyevd，该符号在函数 ""int __cdecl psi::C_DSYEVD(char,char,int,double *,int,double *,double *,int,int *,int)"" (?C_DSYEVD@psi@@YAHDDHPEANH00HPEAHH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsyevr，该符号在函数 ""int __cdecl psi::C_DSYEVR(char,char,char,int,double *,int,double,double,int,int,double,int *,double *,double *,int,int *,double *,int,int *,int)"" (?C_DSYEVR@psi@@YAHDDDHPEANHNNHHNPEAH00H10H1H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsyevx，该符号在函数 ""int __cdecl psi::C_DSYEVX(char,char,char,int,double *,int,double,double,int,int,double,int *,double *,double *,int,double *,int,int *,int *)"" (?C_DSYEVX@psi@@YAHDDDHPEANHNNHHNPEAH00H0H11@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsygst，该符号在函数 ""int __cdecl psi::C_DSYGST(int,char,int,double *,int,double *,int)"" (?C_DSYGST@psi@@YAHHDHPEANH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsygv，该符号在函数 ""int __cdecl psi::C_DSYGV(int,char,char,int,double *,int,double *,int,double *,double *,int)"" (?C_DSYGV@psi@@YAHHDDHPEANH0H00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsygvd，该符号在函数 ""int __cdecl psi::C_DSYGVD(int,char,char,int,double *,int,double *,int,double *,double *,int,int *,int)"" (?C_DSYGVD@psi@@YAHHDDHPEANH0H00HPEAHH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsygvx，该符号在函数 ""int __cdecl psi::C_DSYGVX(int,char,char,char,int,double *,int,double *,int,double,double,int,int,double,int *,double *,double *,int,double *,int,int *,int *)"" (?C_DSYGVX@psi@@YAHHDDDHPEANH0HNNHHNPEAH00H0H11@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsyrfs，该符号在函数 ""int __cdecl psi::C_DSYRFS(char,int,int,double *,int,double *,int,int *,double *,int,double *,int,double *,double *,double *,int *)"" (",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:46825,error,error,46825,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"Nevermind, possibly. I had tried one increase of user memory and it still failed but when I double it, it works fine. So this test can be easily fixed. But the real question is are we willing to have more jobs pass through the in-core/disk choice stage with a false negative and instead hit the error further on. I'm thinking that's not good.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1233#issuecomment-428756860:295,error,error,295,https://psicode.org,https://github.com/psi4/psi4/pull/1233#issuecomment-428756860,1,['error'],['error']
Availability,New page for downloading DFTD3 is located at:. https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/dft-d3/get-the-current-version-of-dft-d3,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1084#issuecomment-403753049:13,down,downloading,13,https://psicode.org,https://github.com/psi4/psi4/issues/1084#issuecomment-403753049,1,['down'],['downloading']
Availability,New page for downloading gCP source code:. https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/getgcp. wrong link listed in. https://github.com/psi4/psi4/blob/master/doc/sphinxman/source/gcp.rst,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1084#issuecomment-403774285:13,down,downloading,13,https://psicode.org,https://github.com/psi4/psi4/issues/1084#issuecomment-403774285,1,['down'],['downloading']
Availability,"Nice job tracking this one down, everyone. David. On Sun, Feb 21, 2016 at 3:53 PM, Daniel Smith notifications@github.com; wrote:. > Closed #244 https://github.com/psi4/psi4/issues/244 via fc721a2; > https://github.com/psi4/psi4/commit/fc721a29611cee4de7dfa4d96cf9707317191860; > .; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/244#event-558642745.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/244#issuecomment-187302588:27,down,down,27,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-187302588,1,['down'],['down']
Availability,"No errors building with ambit enabled when I add those two lines to external/upstream/ambit/CMakeLists.txt (with just ambit added as an extra option). Adding gpu_dfcc into the build (and restarting from scratch with CMAKE_CUDA_COMPILER, CUDA_TOOLKIT_ROOT_DIR, and c and c++ compilers set to gcc-4.9) fails when building with:; ```; [ 82%] Performing configure step for 'gpu_dfcc_external'; loading initial cache file /home/laz/build/psi4/psi4/objdir/external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/tmp/gpu_dfcc_external-cache-Release.cmake; -- Psi4 script: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/bin/psi4; -- Psi4 headers: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/include; -- Psi4 library: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/lib//psi4/core.so; -- Psi4 sys.path: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/lib/; -- Psi4 components: ; -- Python executable: /usr/bin/python2.7; CMake Error at /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/psi4/psi4Config.cmake:148 (find_package):; Could not find a package configuration file provided by ""TargetLAPACK"" with; any of the following names:. TargetLAPACKConfig.cmake; targetlapack-config.cmake. Add the installation prefix of ""TargetLAPACK"" to CMAKE_PREFIX_PATH or set; ""TargetLAPACK_DIR"" to a directory containing one of the above files. If; ""TargetLAPACK"" provides a separate development package or SDK, be sure it; has been installed.; Call Stack (most recent call first):; CMakeLists.txt:6 (find_package). -- Configuring incomplete, errors occurred!; See also ""/home/laz/build/psi4/psi4/objdir/external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-build/CMakeFiles/CMakeOutput.log"".; See also ""/home/laz/build/psi4/psi4/objdir/external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-build/CMakeFiles/CMakeError.log"".; external/downstream/gpu_dfcc/CMakeFiles/gpu_dfcc_external.dir/build.make:107: recipe for target 'external/down",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-400445022:3,error,errors,3,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-400445022,3,"['Error', 'down', 'error']","['Error', 'downstream', 'errors']"
Availability,"No idea what is causing DSYEV to fail, but before I implemented the new wrapper this would have gone undetected, so if anyone tried to `git bisect` it crash/no crash would not be a good indicator. The old wrapper ignored the info value from LAPACK and let execution continue despite the diagonalization failure.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3096#issuecomment-1840889085:303,failure,failure,303,https://psicode.org,https://github.com/psi4/psi4/issues/3096#issuecomment-1840889085,1,['failure'],['failure']
Availability,No kidding. A 2k diff is tolerable. 15k libmints was trying. I don't know if I can face 40k cctriples.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1201#issuecomment-419286789:25,toler,tolerable,25,https://psicode.org,https://github.com/psi4/psi4/pull/1201#issuecomment-419286789,1,['toler'],['tolerable']
Availability,"No need, @susilehtola, as the azure error has to do with azure, clang-cl, and gau2grid, not SAP.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1700#issuecomment-531648876:36,error,error,36,https://psicode.org,https://github.com/psi4/psi4/pull/1700#issuecomment-531648876,1,['error'],['error']
Availability,"No reason you should know this, but `gcc-5-mp` is sign that the solver can't install a recent psi4 into the existing environment and so is instead going back 5+ years to a time when packages were less defensively pinned and conda only had gcc v4 available on defaults channel. I'd suggest creating a new env and specifying the python. If needed, you can specify the psi4 version. And if you've got your setup pulling from conda-forge at higher priority than defaults, you can clobber that, too. So something along the lines of the below, to be over-explicit. Also see https://psicode.org/installs/v17/ if you haven't already. If that works, but you really don't want a separate environment, then try the more explicit install into your working env and/or post back here with your `conda list`, and I'll try to see if there's any red flags. ```; conda create -n p4env python=3.9 psi4=1.7 -c defaults -c psi4; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2898#issuecomment-1468521746:246,avail,available,246,https://psicode.org,https://github.com/psi4/psi4/issues/2898#issuecomment-1468521746,1,['avail'],['available']
Availability,"Nope, I don't know of any reference implementation for these. LC-wPBE08 is available in Q-Chem, though, and it matched my new libxc implementation. LC-wPBE is just way too common of a name, since several versions have been published in the literature.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1260#issuecomment-424384308:75,avail,available,75,https://psicode.org,https://github.com/psi4/psi4/pull/1260#issuecomment-424384308,1,['avail'],['available']
Availability,"Nope, just an oversight on my part. Good catch. Most of the changes to the tests that I made were a result of high precision checks failing (3 point f.d. vs. analytic can be a little noisy), so I was just doing trial and error to figure out where things needed to be updated. I must have missed this one, because I just saw that it timed out on my machine. Sorry about that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/437#issuecomment-235365542:221,error,error,221,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-235365542,1,['error'],['error']
Availability,"Not a big deal. My preference would be to produce an equivalent file to; CFOUR. For example, the Crawford group has some chiroptical scripts; related to ROA that use second derivatives (file15-like) or dipole moment; derivatives (file17-like) but the headers vary slightly between PSI and; CFOUR, and this causes headaches, or worse, incorrect results if errors; aren't thrown. On Sun, Apr 15, 2018 at 10:03 PM, Lori A. Burns <notifications@github.com>; wrote:. > Origin aside, do I gather correctly that optking (or its successors;; > optking being the only visible consumer of the .hess file) isn't; > dependent on the 6 and if I could absorb the format into FCMFINAL, it'd; > be ok with your code, @psi-rking <https://github.com/psi-rking>?; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/953#issuecomment-381467223>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/ADguTLfdpPdF-9uBf3JwnOPE52-M4vmYks5tpAoPgaJpZM4TPKkE>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/953#issuecomment-381624417:355,error,errors,355,https://psicode.org,https://github.com/psi4/psi4/pull/953#issuecomment-381624417,1,['error'],['errors']
Availability,"Not a fluke, but not your fault either. Ask again when [Lori's patch](https://github.com/psi4/psi4/pull/2815) is merged in.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727#issuecomment-1332748782:26,fault,fault,26,https://psicode.org,https://github.com/psi4/psi4/pull/2727#issuecomment-1332748782,1,['fault'],['fault']
Availability,"Not completely sure this is fixable besides using a different basis or tuning the overlap tolerance in the SCF. You can suggest a user changing the `s_tolerance`, but beyond that we cannot really reproduce or do much about it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1682#issuecomment-515269174:90,toler,tolerance,90,https://psicode.org,https://github.com/psi4/psi4/issues/1682#issuecomment-515269174,1,['toler'],['tolerance']
Availability,"Not looking good for a compatible patch at [GL 61](https://gitlab.com/libxc/libxc/issues/61). Sounds like best hope would be static library as discussed around https://gitlab.com/libxc/libxc/issues/59#note_84144469 . If by ""libxc included in tarball"" you mean any copying of libxc code into psi4 repo as code or tarball such that the source download produced by github has libxc, @mbanck, then that's not likely. But if you mean a special hand-constructed psi4 release tarball that includes req'd deps, then that's possible.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1302#issuecomment-451262059:341,down,download,341,https://psicode.org,https://github.com/psi4/psi4/issues/1302#issuecomment-451262059,1,['down'],['download']
Availability,"Not quite so great as it looks on the testing front, as I'm copying tests from one repo to another. Properly, I wanted to shift psi's testing so that each native ctest dir has a one-line mirror run through pytest. Then pytest can automatically pick up other projects' (also pytest) tests from their install locations. Thus no test duplication, tests stay synched, and all testing available for _installed_ software, too. But that seemed like a deep rabbit hole, so just copied the tests :-) Maybe at least I can keep v2rdm in working order now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/866#issuecomment-350503264:380,avail,available,380,https://psicode.org,https://github.com/psi4/psi4/pull/866#issuecomment-350503264,1,['avail'],['available']
Availability,"Not sure what you exactly mean. Setting vv10_b in the superfunctional is straightforward. I followed what was done for the LRC omega. . Ideally the user has not do anything for the pre-defined functionals once I get the -nl dashparam to work. The manual setting is more for developers who want to fit the vv10_b for a new functional. Using DFT-NL should be like using DFT-D. Having the vv10 integrator exposed to python and supplying a user-defined density would be nice. And for a post-scf VV10 correction that is probably the way to go for the scfitertopy implementation. Though this pybind is currently a level too much for me, i dont even understand the errors i get. Small steps for me ;-)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/914#issuecomment-364091920:658,error,errors,658,https://psicode.org,https://github.com/psi4/psi4/pull/914#issuecomment-364091920,1,['error'],['errors']
Availability,Not sure what's going on. In your `/Users/crawdad/psi4/bin/psi4` do you have lines like https://github.com/psi4/psi4/blob/master/psi4/run_psi4.py#L142-L144 in there? The `KeyError` that's being raised is handled in the lines following. Could you also add a `print(args)` before the error and paste the results in (from your error message above the KeyError is raised near line 110)?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/503#issuecomment-258684467:282,error,error,282,https://psicode.org,https://github.com/psi4/psi4/issues/503#issuecomment-258684467,2,['error'],['error']
Availability,"Not surprising that DETCI leaks as it was created before the days of RAII and the DETCI module was expected to be run as a system process so all small leaks were non-issues then. I moved some of it to RAII, but there is a lot there and it is unlikely it will have a complete overhaul in the near future. I remember this was an issue before and we cleaned at least the most egregious leaks we can likely continue cleaning up leaks to meet an ""acceptable"" tolerance.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1532#issuecomment-463724464:454,toler,tolerance,454,https://psicode.org,https://github.com/psi4/psi4/issues/1532#issuecomment-463724464,1,['toler'],['tolerance']
Availability,Not tagged PSI_API and not exported means there's no risk of breaking downstream.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2348#issuecomment-964161630:70,down,downstream,70,https://psicode.org,https://github.com/psi4/psi4/pull/2348#issuecomment-964161630,1,['down'],['downstream']
Availability,"Not too helpful: https://testboard.org/cdash/testDetails.php?test=1588753&build=22769 https://testboard.org/cdash/testDetails.php?test=1588753&build=22769. And when I run it outright (not nightly build) it passes. End of output file from nightly build below. But it’s not showing up as timed out. **\* tstart() called on psinet; **\* at Tue Jul 21 03:07:41 2015. ```; *******************************************************; * *; * QCISD(T) *; * *; *******************************************************. num_threads: 1; available memory: 244.14 mb; memory requirements: 0.52 mb. Number of ijk combinations: 20. Computing (T) correction... % complete total time; ```. > On Jul 21, 2015, at 12:08 PM, Eugene DePrince notifications@github.com wrote:; > ; > Can I see the errors from RHEL7 conda? I can't reproduce this one.; > ; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/121#issuecomment-123386880.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/121#issuecomment-123394642:522,avail,available,522,https://psicode.org,https://github.com/psi4/psi4/issues/121#issuecomment-123394642,2,"['avail', 'error']","['available', 'errors']"
Availability,"Note that I have no doubt Mol was thoroughly tested for all these things in its development and was in pristine working order. But we didn't have the notion of preserving those unit tests for a future refactoring. So I'm just trying to convey that downstream may rely on the inconsistency and changes that in class development may have been a ""fix"" are now a ""refactoring"".",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/909#issuecomment-363476390:248,down,downstream,248,https://psicode.org,https://github.com/psi4/psi4/issues/909#issuecomment-363476390,1,['down'],['downstream']
Availability,"Note that I've done parts of this (but by no means all) in another branch, so ping me if you'd like to take this up.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/883#issuecomment-376539966:78,ping,ping,78,https://psicode.org,https://github.com/psi4/psi4/issues/883#issuecomment-376539966,1,['ping'],['ping']
Availability,"Note that the SAD guess in Psi4 is not the best one possible, as it is not symmetry aware. Such a SAD guess is available in PySCF, and it is also directly accessible from Python. I have planned to rectify the situation in Psi4 in the future, but I have some other projects to finish before that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2897#issuecomment-1467564524:111,avail,available,111,https://psicode.org,https://github.com/psi4/psi4/issues/2897#issuecomment-1467564524,1,['avail'],['available']
Availability,"Note to Self: Optimizations do not play nicely with this. It sets the orbital guess type to read, so it displays the following error message...; ```; Warning! Guess was READ without Ca set, switching to CORE! ; This option should have been configured at the driver level.; ```. ...even though it should not have been set at the driver level! Within the assumption that we have no way to cast orbitals between symmetries, the best option seems to be to have the big basis read from the projected orbitals while the small basis uses a core guess during any findif computations and reads during optimizations. Thoughts? This will probably end with a lot of poking at the driver code. EDIT: I thought this error message was exclusively post this fix, but I was able to get the error message pre this fix on the cluster. Investigate after I get this SCF finally converged.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1139#issuecomment-414016149:127,error,error,127,https://psicode.org,https://github.com/psi4/psi4/pull/1139#issuecomment-414016149,3,['error'],['error']
Availability,"Now I also get it :). Incremental Fock builds can show numerical error accumulation. Adding a reset frequency is sensible, e.g. after 20 incremental builds do a full Fock build from scratch. The actual number should be a (expert) user option. The incremental Fock build can be compared against a standard build. They have to agree.; Comparing density screening to other programs can probably only be done for HF calculations and even then I would expect that one can only see 'similar errors' and no exact number agreement.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-821200775:65,error,error,65,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-821200775,2,['error'],"['error', 'errors']"
Availability,"Now nothings works anymore. I update psi4 using conda update psi4 libefp libint erd simint pcmsolver chemps2 gdma dkh libxc -c psi4/label/dev it finish ok, but when I try to run psi4 I got the following error:. File ""/opt/psi4/bin/psi4"", line 158, in <module>; import psi4; File ""/opt/psi4/lib//python3.6/site-packages/psi4/__init__.py"", line 81, in <module>; from .driver import endorsed_plugins; File ""/opt/psi4/lib//python3.6/site-packages/psi4/driver/endorsed_plugins.py"", line 32, in <module>; import v2rdm_casscf; File ""/opt/psi4/lib//python3.6/site-packages/v2rdm_casscf/__init__.py"", line 39, in <module>; psi4.core.plugin_load(sofile); RuntimeError: ; Fatal Error: load_plugin: Cannot open library: /opt/psi4/lib/python3.6/site-packages/v2rdm_casscf/v2rdm_casscf.so: undefined symbol: _ZNK3psi12Wavefunction26tpdm_gradient_contributionEv; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1514132855674/work/psi4/src/psi4/libplugin/load_plugin.cc on line: 51; The most recent 5 function calls were:. psi::plugin_load(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&); py_psi_plugin_load(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >); pybind11::cpp_function::dispatcher(_object*, _object*, _object*). forrtl: severe (174): SIGSEGV, segmentation fault occurred; Image PC Routine Line Source ; libpcm.so.1 00002AC3069B82CD Unknown Unknown Unknown; libpthread.so.0 00002AC301BBD1F0 Unknown Unknown Unknown; ld-linux-x86-64.s 00002AC30148A0D1 Unknown Unknown Unknown; ld-linux-x86-64.s 00002AC3014847A6 Unknown Unknown Unknown; libdl.so.2 00002AC301DCB5EC Unknown Unknown Unknown; libdl.so.2 00002AC301DCB10F Unknown Unknown Unknown; core.so 00002AC303C6DC02 Unknown Unknown Unknown; core.so 00002AC303DC58E2 Unknown Unknown Unknown; core.so 00002AC303DE4A13 Unknown Unknown Unknown; core.so 00002AC303955DEC Unknown Unknown Unknown; libpython3.6m.so. 00002AC30175D1C9 Unknown Unknown Unknown; libpython3.6m.so. 0000",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/936#issuecomment-373052900:203,error,error,203,https://psicode.org,https://github.com/psi4/psi4/issues/936#issuecomment-373052900,3,"['Error', 'error']","['Error', 'error']"
Availability,"Now that all the tests pass (travis working again), I think this can be merged. ping @loriab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1401#issuecomment-528733056:80,ping,ping,80,https://psicode.org,https://github.com/psi4/psi4/pull/1401#issuecomment-528733056,1,['ping'],['ping']
Availability,"Now that the Linux binary is now available, I'm comfortable having stronger; C++11 requirements. David. On Wed, Nov 18, 2015 at 12:50 PM, Roberto Di Remigio <; notifications@github.com> wrote:. > @jturney https://github.com/jturney could you post a small example of; > using target_compile_features?; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/188#issuecomment-157798532.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/188#issuecomment-157802143:33,avail,available,33,https://psicode.org,https://github.com/psi4/psi4/issues/188#issuecomment-157802143,1,['avail'],['available']
Availability,"Now throws `ValidationError: Inconsistent or unspecified chg/mult: sys chg: -2.0, frag chg: [None, None], sys mult: 1, frag mult: [None, None]` at parse-time rather than mysterious SCF error at Runtime.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/114#issuecomment-381460426:185,error,error,185,https://psicode.org,https://github.com/psi4/psi4/issues/114#issuecomment-381460426,1,['error'],['error']
Availability,"O install it last week, so I should be using de last version. I download the script version py3.6.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/936#issuecomment-373016592:64,down,download,64,https://psicode.org,https://github.com/psi4/psi4/issues/936#issuecomment-373016592,1,['down'],['download']
Availability,OK I ran the same 495 minimizations with B3LYP and here is the summary:; ```; wB97X: Success: 0 Failed: 495; B3LYP: Success: 224 Failed: 271; ```; The error messages are similar between b3lyp and wb97x. Mostly: ; ```; slurmstepd: error: Detected 1 oom-kill event(s) in step 4420716.batch cgroup. Some of your processes may have been killed by the cgroup out-of-memory handler.; ```; with a few:; ```; Bus error (core dumped) psi4; ```; and ; ```; Fatal Error: PSIO Error; ```. I am running these requesting 10GB from slurm and asking psi4 to use 8GB.; I also used sacct to query the memory usage for one failed example each:; wB97x:; ```; JobID State NodeLi NN Parti NCPU State ReqMe MaxRSS MaxVMSize Elapsed CPUTime Exit Start End JobName; ------------ ---------- ------ -- ----- ---- ---------- ----- --------- --------- ---------- ---------- ---- ------------------- ------------------- ----------------------------------------; 4420706.bat+ OUT_OF_ME+ nc130 1 2 OUT_OF_ME+ 10Gn 10314128K 225460K 00:16:07 00:32:14 0:1+ 04/04/19 09:42:32 04/04/19 09:58:39 batch; ```. B3LYP:; ```; JobID State NodeLi NN Parti NCPU State ReqMe MaxRSS MaxVMSize Elapsed CPUTime Exit Start End JobName; ------------ ---------- ------ -- ----- ---- ---------- ----- --------- --------- ---------- ---------- ---- ------------------- ------------------- ----------------------------------------; 4494794.bat+ OUT_OF_ME+ nc153 1 2 OUT_OF_ME+ 10Gn 8825012K 225600K 00:02:07 00:04:14 0:1+ 04/09/19 09:43:57 04/09/19 09:46:04 batch; ```; Both exceed the 8GB psi4 is supposed to use but wB97x does this to a higher level. As mentioned the failures occur at different points in time:; - ```==> Integral Setup <==```; - Before the first SCF itteration of the first geomety optimization step completes; - ``` ==> DFJKGrad: Density-Fitted SCF Gradients <==```; - I also repeated one of the failed B3LYP. The initial time around it did not print the first SCF cycle of the first geometry optimization; The second time around it fa,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1590#issuecomment-481479677:151,error,error,151,https://psicode.org,https://github.com/psi4/psi4/issues/1590#issuecomment-481479677,5,"['Error', 'error']","['Error', 'error']"
Availability,"OK, I had a copy-paste error.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1477#issuecomment-498268278:23,error,error,23,https://psicode.org,https://github.com/psi4/psi4/pull/1477#issuecomment-498268278,1,['error'],['error']
Availability,"OK, I had only run the default 50 steps. On Wed, Mar 30, 2016 at 9:53 AM, Daniel Smith notifications@github.com; wrote:. > @psi-rking https://github.com/psi-rking Thats very odd, I get a failure; > at a large number of steps for both SCF and DFT. I guess you can consider; > that this doesn't identify the TS, but it should still fail with a; > understandable error message.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/10#issuecomment-203471756",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/10#issuecomment-203487706:187,failure,failure,187,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-203487706,2,"['error', 'failure']","['error', 'failure']"
Availability,"OK, I have finally managed to get a pair of builds (current master and this PR's branch) that do not entirely swallow the exception messages for write errors in the PK integral calculation. For me, it took building Psi4 entirely from source, with nothing from conda at all. stdout/stderr before this PR:. ```; PSIO_ERROR: unit = 34, errval = 12; terminate called after throwing an instance of 'psi::PsiException'; what():; Fatal Error: PSIO_ERROR: 12 (error writing to file). Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/error.cc on line: 131; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*). Aborted (core dumped); ```; stdout/stderr after this PR:; ```; PSIO_ERROR: unit = 34, errval = 12; terminate called after throwing an instance of 'psi::PsiException'; what():; Fatal Error: WRITE failed. Only some of the bytes were written!; Error writing the first partial page, unit 34.; PSIO_ERROR: 12 (error writing to file). Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/error.cc on line: 131; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*). Aborted (core dumped); ```; The reason why there is no ""disk is full"" error message, is because `SYSTEM_WRITE` only reports a failure and sets errno if the disk is already full when it is called. As long as it can write at least one out of _however many_ bytes it does not set errno. I both cases there is no e",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2756#issuecomment-1304899857:151,error,errors,151,https://psicode.org,https://github.com/psi4/psi4/pull/2756#issuecomment-1304899857,5,"['Error', 'error']","['Error', 'error', 'errors']"
Availability,"OK, another change of plan. The only reason to symmetrize the response terms is to be able to use JK instances that use symmetry under the hood (which, AFAIK, is only `OUT_OF_CORE`). I'm half way through doing this, but it makes the code very messy and I only just realized that `OUT_OF_CORE` can't even handle non-symmetric density matrices. I think the best plan at this point is for me to abandon the symmetrization, clean the code up, squash the last few commits and add a py-side error message if `OUT_OF_CORE` is requested. Does anybody disagree? If more important integral technologies were affected, I'd say we go ahead an symmetrize. As it is, we'd be introducing a lot of messy code, just to cover an unimportant corner case.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/437#issuecomment-234048374:485,error,error,485,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-234048374,1,['error'],['error']
Availability,"OK, downloading the full log file I see that the error in ```mp2-module``` is on the line; ```--> compare_matrices(mp2totg, retG, 6, theme) ```. and the largest error is actually 1.91e-6, and 2.76e-6 to what I get on my workstation with ```master```. Looks like the numerical tolerance is just set too tight for the finite-difference algorithm.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1429#issuecomment-447944642:4,down,downloading,4,https://psicode.org,https://github.com/psi4/psi4/pull/1429#issuecomment-447944642,4,"['down', 'error', 'toler']","['downloading', 'error', 'tolerance']"
Availability,"OK, switched to python 2.7 and all is fine.; -Rollin. On Mon, Mar 14, 2016 at 9:48 AM, Lori A. Burns notifications@github.com; wrote:. > Oh bother, python 2.6 doesn't have dictionary comprehensions. I updated; > qcdb within the last couple weeks with accumulated improvements and python; > 3.5 prep.; > ; > It doesn't look like I use dictionary comprehensions all that much, so you; > can try the following, then report any subsequent errors.; > ; > ```; > return {db: odb.integer_reactions() for db, odb in self.dbdict.items()} # replace this; > return dict((db, odb.integer_reactions()) for db, odb in self.dbdict.items()) # with this; > ```; > ; > Or, would you like to give python 2.7 a try? Do the binary instructions (; > http://psicode.org/psi4manual/master/conda.html#quick-installation); > through the conda update step (replace ""Linux"" with ""MacOSX"" in installer; > file name, if on Mac), be sure your which python points to 2.7, then; > compile psi4 with --python $MINICONDA/bin/python. When we get around to; > supporting python3.5, python2.6 support may go.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/310#issuecomment-196346044.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310#issuecomment-196569625:435,error,errors,435,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196569625,1,['error'],['errors']
Availability,"OK, thanks I tracked it down it was a stray copy of forte. Thanks for the replies, appreciate it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3010#issuecomment-1631582263:24,down,down,24,https://psicode.org,https://github.com/psi4/psi4/issues/3010#issuecomment-1631582263,1,['down'],['down']
Availability,"OK... I managed to get gpu_dfcc built as a separate tree using gcc/g++ 5.5.0 by adding; `-DCMAKE_PREFIX_PATH` (pointing at `psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK`); and; `-DOpenMP_LIBRARY_DIRS=/opt/intel/compilers_and_libraries_2018.3.222/linux/compiler/lib/intel64_lin` ; to the do-configure script. (I'm not sure how that would translate into building it within the psi4 build.). gcc/g++-4.9 gave me compile errors about missing symbols and gcc/g++-6 triggers a known bug with the version of CUDA I have on Debian (9.1.85). (If I had gcc/g++-6 installed and told it to use 4.9, cmake still tried to pull in a load of headers from V6!). It's built, installed into my installed psi4 tree and the gpu_dfcc test jobs run happily with reasonable looking bits about the GPU in the output file. I suspect I'll need to try a bigger job to see what it's really doing, though.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-400462333:430,error,errors,430,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-400462333,1,['error'],['errors']
Availability,Obligatory @andysim ping. @ymshi449 : Can I ask what you're trying to get? It looks like you want to get just the integrals on a certain block of atoms of a single molecule. There may be a better way to do this.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2439#issuecomment-1038487993:20,ping,ping,20,https://psicode.org,https://github.com/psi4/psi4/issues/2439#issuecomment-1038487993,1,['ping'],['ping']
Availability,Obligatory @hokru ping.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2890#issuecomment-1452015040:18,ping,ping,18,https://psicode.org,https://github.com/psi4/psi4/issues/2890#issuecomment-1452015040,1,['ping'],['ping']
Availability,Obligatory ping to @fevangelista on things Forte.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3094#issuecomment-1837151573:11,ping,ping,11,https://psicode.org,https://github.com/psi4/psi4/issues/3094#issuecomment-1837151573,1,['ping'],['ping']
Availability,"Of the dozen or so headers on my computer by that name, only the ones supplied by the conda clang compilers (which I'm not using) have that set. So error makes some sense. Only thing I can think of is I haven't done a simint build on this machine since the default switched from `sse` to `avx`, though, as that happened 9 months ago, shows that I've been _really_ linux or mac-psinet bound of late. ##### psi4 cmake; ```; -- Setting (unspecified) option SIMINT_VECTOR: avx; ```. ##### simint cmake; ```; -- Maximum AM: 6; -- Maximum Derivative: 0; -- CMAKE_C_FLAGS: -march=native; -- CMAKE_CXX_FLAGS: -stdlib=libc++ -march=native; -- SIMINT_C_INCLUDES: /Users/loriab/linux/psihub/hrw-temp/objdir/external/upstream/simint/simint_external-prefix/src/simint_external;/Users/loriab/linux/psihub/hrw-temp/objdir/external/upstream/simint/simint_external-prefix/src/simint_external-build/stage; -- SIMINT_C_FLAGS: -std=c99;-Wall;-Wextra;-pedantic;-Wno-unused-parameter;-Wno-unused-variable;-mavx; -- SIMINT_LINK_FLAGS: ; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/890#issuecomment-356761851:148,error,error,148,https://psicode.org,https://github.com/psi4/psi4/issues/890#issuecomment-356761851,1,['error'],['error']
Availability,"Oh bother, python 2.6 doesn't have dictionary comprehensions. I updated qcdb within the last couple weeks with accumulated improvements and python 3.5 prep. It doesn't look like I use dictionary comprehensions all that much, so you can try the following, then report any subsequent errors. ```; return {db: odb.integer_reactions() for db, odb in self.dbdict.items()} # replace this; return dict((db, odb.integer_reactions()) for db, odb in self.dbdict.items()) # with this; ```. Or, would you like to give python 2.7 a try? Do the binary instructions (http://psicode.org/psi4manual/master/conda.html#quick-installation) through the `conda update` step (replace ""Linux"" with ""MacOSX"" in installer file name, if on Mac), be sure your `which python` points to 2.7, then compile psi4 with `--python $MINICONDA/bin/python`. When we get around to supporting python3.5, python2.6 support may go.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310#issuecomment-196346044:282,error,errors,282,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196346044,1,['error'],['errors']
Availability,"Oh dear, it looks like this PR has been contaminated by non-you commits. See if you can follow the healing advice here https://github.com/psi4/psi4/pull/1490#issuecomment-457765390 . Ping if there are any problems. Thanks!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2328#issuecomment-1040547746:183,Ping,Ping,183,https://psicode.org,https://github.com/psi4/psi4/pull/2328#issuecomment-1040547746,1,['Ping'],['Ping']
Availability,"Oh look at that; I wonder how I've managed to miss that. However, the documentation states ""MP2 natural orbitals only available for DF-RHF reference"". Does the fno code have these restrictions?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/829#issuecomment-339624297:118,avail,available,118,https://psicode.org,https://github.com/psi4/psi4/issues/829#issuecomment-339624297,1,['avail'],['available']
Availability,Oh that's right. But shouldn't psi4 throw an error if both basis_guess and guess read have been set?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/612#issuecomment-278718646:45,error,error,45,https://psicode.org,https://github.com/psi4/psi4/issues/612#issuecomment-278718646,1,['error'],['error']
Availability,"Oh wow, I haven't experienced this error before. It detected the xz- and yz- mirror plane and nothing else. It should probably gracefully report the issue and then find a point group that best matches it. Even though you told Psi4 to use C1 symmetry it still attempts to detect the highest point group for reporting purposes. I'll see what I can do to fix this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/948#issuecomment-380139496:35,error,error,35,https://psicode.org,https://github.com/psi4/psi4/issues/948#issuecomment-380139496,1,['error'],['error']
Availability,"Oh, and I meant to add that docs should say whether un-mass-weighted vs. mass-weighted and normalized vs. unnormalized normal coordinates are printed to the molden file. Pretty sure that it's the former on both choices. On the Python accessibility issue, there's some discussion [here](https://github.com/psi4/psi4/issues/347) (start in the paragraph above ""Future""). Findif's vibrational analysis capabilities have to be moved out of that module because it's organized on the assumption the psi4 has _no_ analytic Hessians available. Some of the shift to py-side is already in the works (@bwb314), and I expect this molden-writing can be moved py-side, too, once the data is accessible.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/644#issuecomment-286431537:524,avail,available,524,https://psicode.org,https://github.com/psi4/psi4/pull/644#issuecomment-286431537,1,['avail'],['available']
Availability,"Oh, sorry I missed the message about the TOCLEN. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Mon, Apr 4, 2016 at 10:21 AM, Daniel Smith notifications@github.com; wrote:. > The job did not have enough memory and failed due to a TOCLEN error. I; > shot you a gchat about this awhile back, but did not receive a response and; > consequently forgot about it.; > ; > > On Apr 4, 2016, at 10:03 AM, T. Daniel Crawford <; > > notifications@github.com> wrote:; > > ; > > What was the bug in cc5?; > > ; > > ## ; > > ; > > Prof. T. Daniel Crawford; > > crawdad@vt.edu; > > ; > > On Mon, Apr 4, 2016 at 9:32 AM, Daniel Smith notifications@github.com; > > wrote:; > > ; > > > @lothian https://github.com/lothian I fixed cc5 in this branch. cc5; > > > now; > > > runs, passes, and the output.ref is updated.; > > > ; > > > —; > > > You are receiving this because you were mentioned.; > > > Reply to this email directly or view it on GitHub; > > > https://github.com/psi4/psi4/pull/315#issuecomment-205297042; > > > ; > > > —; > > > You are receiving this because you authored the thread.; > > > Reply to this email directly or view it on GitHub <; > > > https://github.com/psi4/psi4/pull/315#issuecomment-205307609>; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/pull/315#issuecomment-205318258",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/315#issuecomment-205319180:240,error,error,240,https://psicode.org,https://github.com/psi4/psi4/pull/315#issuecomment-205319180,1,['error'],['error']
Availability,"Ok I got the following test failures:. ```; 252:nbody-convergence; 306:psimrcc-ccsd_t-4; 420:psi4numpy-cphf; 421:psi4numpy-dfmp2; 422:psi4numpy-rhf; 423:psi4numpy-rhf-gradient; 424:psi4numpy-rhf-hessian; 425:psi4numpy-fci; 429:python-energy; 430:python-curve; 431:python-pubchem; 432:python-mints9; 433:python-mints2; 434:python-cc54; 435:python-3-index-transforms; 436:python-mints13; 437:python-cc_amps; 438:json-schema-1-energy; 439:json-schema-1-ghost; 440:json-schema-1-orient; 441:json-schema-1-throws; 442:json-schema-1-gradient; 443:json-schema-1-properties; 444:gcp-pbeh3c; 445:gcp-hf3c; 446:gcp-hf3c-gradient; 447:gcp-hf3c-hessian; 448:gcp-dft-custom-hybrid; ```. And now my problem is on the import psi4. I tried adding the correct PYTHONPATH as follows:. ```; export PATH=/usr/local/bin:$PATH # python interpreter; export PATH=/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/bin:$PATH # psi4 executable; export PYTHONPATH=/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib//:$PYTHONPATH # psi4 pymodule; ```. But I get a new kind of error. Any idea how to fix it? :. ```; >>> import psi4; Traceback (most recent call last):; File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/__init__.py"", line 55, in <module>; from . import core; ImportError: dlopen(/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so, 2): Symbol not found: __gfortran_concat_string; Referenced from: /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so; Expected in: flat namespace; in /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/__init__.py"", line 60, in <module>; raise ImportError(""{0}"".format(err)); Im",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1870#issuecomment-614773796:28,failure,failures,28,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-614773796,1,['failure'],['failures']
Availability,"Ok so I think we are reading garbage from `PSIDATADIR/quadratures/1_x/R_avail.bin`:. On amd64 (my notebook):. ```; 588	 R_avail_file.read((char *)R_availp, nR * sizeof(double));; (gdb) ; 590	 auto err_table = std::make_shared<Matrix>(""Error Table (nR x nk)"", nR, nk);; (gdb) p *R_availp; $8 = 2; ```. And on s390x:. ```; 588 R_avail_file.read((char *)R_availp, nR * sizeof(double));; (gdb) ; 590 auto err_table = std::make_shared<Matrix>(""Error Table (nR x nk)"", nR, nk);; (gdb) p *R_availp; $21 = 3.1620201333839779e-322; ```. Not sure how this results in the exception (`indR` is optimized out), but there surely is a problem here. Is there anything odd with the way it is reading that? This looks a bit fragile to me:. ```; R_avail_file.read((char *)R_availp, nR * sizeof(double));; ```. OK, I guess the problem is that we are reading binary data, but there's no provision for big/little endian conversion, so it just gets garbage on other-endian architectures. Those two `*.bin` files in `quadratures/` are rather small, couldn't they be converted to text or what is their purpose?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1462#issuecomment-451697801:235,Error,Error,235,https://psicode.org,https://github.com/psi4/psi4/issues/1462#issuecomment-451697801,2,['Error'],['Error']
Availability,"Ok thanks for the summary. I agree the current behavior is logical, and; also that there is an inconsistency between Zmat and Cartesians that could; confuse a user. I am very happy there is a little warning printed by the; code if the user is updating the Cartesian coordinates. Perhaps that; warning could be updated to say something like ""(multipole moments of; charged molecules may be affected)"" or something? And/or a sentence or two; in whatever section of the manual might cover something like this?. I also recommend expanding the comment in the props2/input.dat from ""#; Force COM for pole computation"" to the more detailed ""# Force COM; translation so multipoles of charged molecule will match reference values"". On Tue, Sep 26, 2017 at 2:50 PM, Daniel Smith <notifications@github.com>; wrote:. > Im still not completely sure that there is a way to bridge the two.; > Ultimately the modification in-place leads to quite a few errors; however,; > the Psithon API make the in-place a logical operation.; >; > It would be better to do something like:; >; > new_mol = molecule.update({""var1"": 5, ""var2"": 6}); >; > or something similar. Getting that across in something like Psithon would; > be difficult I think.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/782#issuecomment-332298418>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9Qdlu-db-VElBfiw-oAMiX7_n0LAOsks5smUeIgaJpZM4O79qb>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/782#issuecomment-332340271:936,error,errors,936,https://psicode.org,https://github.com/psi4/psi4/issues/782#issuecomment-332340271,1,['error'],['errors']
Availability,"Ok the build is finally over with the new options I provided in the configure steps and now it works ! It was indeed, as many of you suggested already, this libgfortran.dylib issue. After some trials and errors (that's why I took so much time, sorry about that), here is the configure options that worked for me:. ```; cmake -H. -Bobjdir -DOpenMP_LIBRARY_DIRS=/opt/intel/lib -DCMAKE_Fortran_FLAGS=""-L/usr/local/opt/gcc@8/lib/gcc/8 -lgfortran""; ```. @JonathonMisiewicz now the restart with ```'fci'``` works ! But for ```'casscf'``` I get the following error:. ```; Could not find requested basisset (DF_BASIS_SCF).Traceback (most recent call last):; File ""PSI4_CAS_sim.py"", line 89, in <module>; CASSCF_energy = psi4.energy('casscf', molecule=mol, ref_wfn=original_wfn, return_wfn=False); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 570, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 4804, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/procrouting/mcscf/mcscf_solver.py"", line 100, in mcscf_solver; mcscf_obj = ciwfn.mcscf_object(); RuntimeError: ; Fatal Error: Wavefunction::get_basisset: Requested basis set (DF_BASIS_SCF) was not set!. Error occurred in file: /Users/bsenjean/Documents/Git_repositories/psi4/psi4/src/psi4/libmints/wavefunction.cc on line: 670; ```. Though that's not related to the issue here so I guess I can ask it on the forum or in another github issue ?. Thanks a lot, all of you, for your precious help !",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1870#issuecomment-615271611:204,error,errors,204,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615271611,4,"['Error', 'error']","['Error', 'error', 'errors']"
Availability,"Ok yes Daniel was right, it was an error writing to file 32 not file 180 (I was misled because the last thing in output.dat was a line about file 180). If nmo increases, the problem can be fixed by just replacing file32 each time SCF finishes. I've implemented this and all test cases pass. If nmo decreases, the scf guess might fail, but in a couple of test cases it seems ok. I'm checking in these changes and adding a new test case that checks what happens when nmo increases during a geometry optimization. Pushing this to the psiworkweek branch but will incorporate into public branch in a few days.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/32#issuecomment-38125711:35,error,error,35,https://psicode.org,https://github.com/psi4/psi4/issues/32#issuecomment-38125711,1,['error'],['error']
Availability,"Ok, @andysim and @rmcgibbo, try out a mkl-built psi4 for Mac and see if it fixes both, either, or none of your problems. This is a minimal build with libint (am4) and libxc as internal dylibs. Install into a new env with. ```; >>> conda create -n idp35 psi4test python=3 -c intel -c psi4; >>> source activate idp35; ```. ```; >>> otool -L lib/python3.5/site-packages/psi4/core.so ; lib/python3.5/site-packages/psi4/core.so:; 	@rpath/core.so (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libxc.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libderiv.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libint.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libmkl_rt.dylib (compatibility version 0.0.0, current version 0.0.0); 	/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1226.10.1); 	/usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 120.1.0); ```. The env should look like this. Note that py36 is _not_ avail. Also, do _not_ install this into the main env of an anaconda or miniconda – subenvs only.; ```; >>> conda list; # packages in environment at /Users/loriab/linux/miniconda3/envs/idp35:; #; icc_rt 16.0.3 intel_6 [intel] intel; intelpython 2017.0.3 4 intel; mkl 2017.0.3 intel_6 [intel] intel; numpy 1.12.1 py35_intel_8 [intel] intel; openmp 2017.0.3 intel_8 intel; openssl 1.0.2k intel_3 [intel] intel; pip 9.0.1 py35_intel_0 [intel] intel; psi4test 1.2a1.dev370+d9c89ae py35_6 psi4; py 1.4.34 py35_0 defaults; pytest 3.1.2 py35_0 defaults; python 3.5.3 intel_1 [intel] intel; setuptools 27.2.0 py35_intel_0 [intel] intel; sqlite 3.13.0 intel_14 [intel] intel; tcl 8.6.4 intel_16 [intel] intel; tk 8.6.4 intel_26 [intel] intel; wheel 0.29.0 py35_intel_5 [intel] intel; xz 5.2.2 intel_15 [intel] intel; zlib 1.2.11 intel_2 [intel] intel; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/748#issuecomment-311866695:1026,avail,avail,1026,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-311866695,1,['avail'],['avail']
Availability,"Ok, @bennybp and @ryanmrichard, take a look at https://github.com/loriab/psi4/commit/ea33ace7bcfcf7aff42f07a1399ae022508ca757, please. Sorry it's not so clean as I'd like, but our server's going down soon. **What it does**; - when libgdma is dynamic and; - `ENABLE_gdma` is on and `CMAKE_PREFIX_PATH` and `gdma_DIR` unspecified, builds externalproject downloaded from www.github.com/loriab/gdma and detects it and links it properly (no real change from your setup besides origin of code from user perspective); - `ENABLE_gdma` is on and `CMAKE_PREFIX_PATH` points to a pre-built installation, detects that and links to it properly; - The gdmaConfig exports all the usual suspect CMake variables (library, libraries, include_dir, include_dirs) (see below) but also; - manages requesting static shared, e.g., `find_package(gmda CONFIG REQUIRED COMPONENTS shared)`; - manages version requests; - exports a target `gdma::gdma` that has all its location, includes, `-DUSING_gdma` compiler definition, properties attached.; - so, after `find_package(gdma CONFIG REQUIRED)`, you don't have to add a library or use the usual suspects. Instead, just attach as needed (though I still think the second one should be simpler); - `target_link_libraries(psi4_exe PUBLIC gdma::gdma)`; - `target_compile_definitions(gdma_interface PRIVATE $<TARGET_PROPERTY:gdma::gdma,INTERFACE_COMPILE_DEFINITIONS>)`. ```; gdma_FOUND : 1; gdma_VERSION : 2.2.06; gdma_INCLUDE_DIRS : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/include; gdma_INCLUDE_DIR : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/include; gdma_LIBRARIES : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/lib/libgdma.so; gdma_LIBRARY : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/sta",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-238370429:195,down,down,195,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238370429,4,['down'],"['down', 'downloaded']"
Availability,"Ok, I checked the wrong repo. Sorry, miscommunication my fault.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/534#issuecomment-265801248:57,fault,fault,57,https://psicode.org,https://github.com/psi4/psi4/pull/534#issuecomment-265801248,1,['fault'],['fault']
Availability,"Ok, I have a [fix](https://github.com/raimis/psi4/pull/4) that works. The problem is that a new(ish) constructor was added [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libtrans/integraltransform.cc#L112-L193), which expects the frozen occ, active occ, active vir, and frozen vir orbitals to be passed in that order. The DETCI code passes spaces (constructed [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/detci/ints.cc#L84-L87)) that are not consistent with this; the second space holds all the active orbitals in the `cisd-h2o+-0` test, while the third is empty:; ```; Irrep: 0 Space1: 1 Space2: 11 Space3: 0 Space4: 0; Irrep: 1 Space1: 0 Space2: 2 Space3: 0 Space4: 0; Irrep: 2 Space1: 0 Space2: 4 Space3: 0 Space4: 0; Irrep: 3 Space1: 0 Space2: 7 Space3: 0 Space4: 0; ```; The number of occupied per irrep is computed from the dimensions of these things, leading to an incorrect distribution of electrons. I tried to pass in different spaces from [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/detci/ciwave.cc#L171-L257) but couldn't find a set of spaces that didn't break at least one DETCI test. The occupation info is used to build the density matrix (from which the Fock matrix is built) during presorting of the integrals, which is where the seg fault happens. This Fock build is really vestigial code that was only ever there to make sure libtrans did the same thing as the Psi3 code it replaced at the time, so I decided to simply make the Fock build optional. It's clear that DETCI doesn't use the Fock matrix from Libtrans because it gets the right answer despite having bad occupation info. The frozen core density is correct; this seems to be all that DETCI uses, so I think this fix is good. Requesting reviews from @CDSherrill and @dgasmith to make sure this is reasonable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1469#issuecomment-454523627:1301,fault,fault,1301,https://psicode.org,https://github.com/psi4/psi4/pull/1469#issuecomment-454523627,2,['fault'],['fault']
Availability,"Ok, I see. 1.1a1 should do nicely for you. Tagged versions _are_ static once pushed to the repo. On the main repo, we'll probably change `1.0 to 1.0approx` and clear out the old ones, since the history re-write has rendered them defunct. But the history rewrite was a once-in-many-years event that cut our download size by 90%, so tags hereafter should be stable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-273811816:306,down,download,306,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-273811816,2,['down'],['download']
Availability,"Ok, I think the RHF code is ready to go now. It can run out of core, and is symmetry tolerant. Adding UHF will take a quite a bit of time to debug. Density fitting should be quite fast to code up, as it's only really needed in the second derivatives and the G terms in the response code. Per the above discussion, we can save those tasks for another day. I will let these tests run, then you can merge whenever is most convenient for the new CMake infrastructure. Also, let me know if you'd rather me squash all these commits, which go back all the way to November 2015 and could cause some issues.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/437#issuecomment-231160542:85,toler,tolerant,85,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-231160542,1,['toler'],['tolerant']
Availability,"Ok, I've cleared up the last two missing items.; - [x] user dft dicts `dft_functional={..., 'dispersion': {...}}` now work. they go through the same route, but the pieces are treated a little differently. ""params"" are the final say -- the user option `DFT_DISPERSION_PARAMETERS` has no effect. ""name"" and ""citation"" aren't ""blessed"" like the official ones, so they're not going to get printed unless they match official ones. I think that's reasonable -- don't want to be printing citations unquestioned.; - [x] now tracing citations again. see below for examples. always printing the disp level citation. printing the dash param citation if available (not listed for many common functionals. No opportunity for user-defined citation. It can be put it, but I didn't see the point of trusting unverified values.; - [x] put in a few more checks that'll catch some problems when adding new official fctl dictionaries.; - [x] renamed some files based on slack discussion. ```; ================================================================================; => DLDF+D09: Empirical Dispersion <=. Podeszwa and Szalewicz Dispersion Correction; Pernal, K.; Podeszwa, R.; Patkowski, K.; Szalewicz, K. (2009), Phys. Rev. Lett., 103: 263201. s6 = 1.000000. ================================================================================; => OTPSS-D: Empirical Dispersion <=. Grimme's -D2 Dispersion Correction; Grimme, S. (2006), J. Comp. Chem., 27: 1787-1799; Parametrisation from: L. Goerigk, S. Grimme, J. Chem. Theory. Comput. 6, 107-126, 2010. s6 = 1.000000; alpha6 = 20.000000; sr6 = 1.150000. ================================================================================; => Custom: Empirical Dispersion <=. Grimme's -D2 Dispersion Correction; Grimme, S. (2006), J. Comp. Chem., 27: 1787-1799. s6 = 2.750000; alpha6 = 20.000000; sr6 = 1.100000. ================================================================================; ```. Also been rebased. Windows is failing b/c it's downloading py27. I'",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1151#issuecomment-426866307:642,avail,available,642,https://psicode.org,https://github.com/psi4/psi4/pull/1151#issuecomment-426866307,2,['avail'],['available']
Availability,"Ok, Nov 2014 (around https://github.com/psi4/psi4private/commit/986b28fdeabeabf43a79b08de5b5e79141719d84 ), the new basis set handling went in. When an auxiliary basis set isn't explicitly specified by the user (in fact explicitly setting is not reccommended as the internal defaults are superior), it looks on a per-atom basis (other def.) for the correct auxiliary basis for that orbital basis (e.g., `aug-cc-pvdz-ri` for `aug-cc-pvdz` and `cc-pvdz-ri` for `sto-3g`), then failing that uses ~ `def2-qzvpp` fitting basis sets. The def2's are defined through Kr w/o ECPs (psi4 has no ECPs), so you should never get an ""auxilliary basis not available"" for elements <=Kr. I think that's fulfilling our educational obligation. You still can get some oddities (see https://github.com/psi4/psi4public/issues/144), but the intent of this ticket is met.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/44#issuecomment-182604995:640,avail,available,640,https://psicode.org,https://github.com/psi4/psi4/issues/44#issuecomment-182604995,1,['avail'],['available']
Availability,"Ok, as promised, the QC deps for Psi4 are now available on conda-forge natively for `osx-arm64`. Note that these are cross-compiled on regular `osx-64`, so don't get tested. I'd be glad to hear if/how they're working. You can either build psi4 master and still provide your own libint or use the libint package and build a special branch of psi4. There's a c-f tracker for osx-arm64 packages at https://github.com/orgs/psi4/projects/2/views/5. #### psi4 master; `conda install gau2grid libxc-c optking qcengine -c conda-forge`; #### psi4 with #2861 ; * `conda install gau2grid libxc-c optking qcengine conda-forge/label/libint_dev::libint -c conda-forge`; * or `conda install gau2grid libxc-c optking qcengine libint -c conda-forge/label/libint_dev -c conda-forge` (channel order matters)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2333#issuecomment-1474685603:46,avail,available,46,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-1474685603,1,['avail'],['available']
Availability,"Ok, checked a AM=4 from the current state against a pre-CMakeRewrite AM=4. Conclusion, we're dealing with the same-sized library.; - `libint.h` and `libderiv.h` identical; - generated libint and libderiv file lists identical. Nevertheless, there _is_ a problem. The AM catches in libmints/eribase.cc are up for discussion; - AM=4, as-is: 'quick' all pass. 'full' all but the usual ones pass but only irc (deriv catch) cases report a ERI AM problem; - @andysim changed all the checks recently from `>=` to `>` in https://github.com/psi4/psi4/commit/fb42b53e3aec742cf0c45b7ff3c35f4051b77b81#diff-911b4dff3a9d02cf3541610b10f56ea3L1811; - If I change the _energy_ check back to `>=` and build as AM=4, cbs-xtpl-wrapper and dft-b2plyp (both int catches) join the irc tests in reporting ERI AM problems. So they're fixed by undoing the comparison change.; - But there are still some tests (scf11-freq-freom-energies, fd-freq-energy-large, opt-lindep-change) that fail at AM=4 _without_ reporting an ERI error, in fact they just quit after `=> Auxiliary Basis Set <=` block, yet these tests work just fine with AM=5, so their problem (a) is a AM one and (b) was reported as a AM one pre-CMakeRewrite. So, (1) what led to those changes to the AM comparisons, Andy, and is it possible you're more confident about one than about all? (2) What else are we not comparing right to still have lindep-change, etc. broken?. Ryan, add the '=' back, and in practical terms, you should be back in business.; For the future, irc test cases are failing for me (once they have sufficient AM), probably because they're not playing nicely with the analytic Hessian. Get @avcopan to investigate once code is in a more useable state.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-240647129:997,error,error,997,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-240647129,2,['error'],['error']
Availability,"Ok, curious. Ours are 15.0.3. @dgasmith tried it on a couple architectures and executables, but good to know the error isn't seen everywhere. May have to wait for a calmer development environment here to examine again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/371#issuecomment-215894127:113,error,error,113,https://psicode.org,https://github.com/psi4/psi4/issues/371#issuecomment-215894127,1,['error'],['error']
Availability,"Ok, four failures:. ```; The following tests FAILED:; 	269 - props2 (Failed); 	270 - props3 (Failed); 	324 - soscf-dft (Failed); 	349 - scf-coverage (Failed); ```. props3 and scf-coverage could be healed by slight relaxation:; ```; TestComparisonError: 	Lithium anion stability: computed value (-7.4168185) does not match (-7.4168196) to 6 digits.; ```. ```; TestComparisonError: 	64-pole ZZZZZZ: computed value (-20544.12046) does not match (-20544.12057) to 4 digits.; ```. But props2 is really off:; ```; TestComparisonError: Y Component of Dipole 0: computed value (21.592762) does not match (17.775955) to 5 digits.; ```. And soscf-dft is fine energy-wise but oscillates more that the test allows on iterations in the next-to-last (PBE) subtest:; ```; @DF-RKS iter 0: -148.97585698578987 -1.48976e+02 2.56136e-01 ; @DF-RKS iter 1: -148.95093820938956 2.49188e-02 1.50011e-01 ; @DF-RKS iter 2: -149.39705073850598 -4.46113e-01 1.11947e-01 DIIS; @DF-RKS iter 3: -150.12875309470365 -7.31702e-01 7.57889e-03 DIIS; @DF-RKS iter 4: -150.12714697276095 1.60612e-03 1.00558e-02 SOKS, nmicro = 4; @DF-RKS iter 5: -150.13120148446785 -4.05451e-03 1.42232e-05 DIIS; @DF-RKS iter 6: -150.12700529520501 4.19619e-03 1.02055e-02 SOKS, nmicro = 4; @DF-RKS iter 7: -150.13120147305844 -4.19618e-03 2.10040e-05 DIIS; @DF-RKS iter 8: -150.12394657944893 7.25489e-03 1.34190e-02 SOKS, nmicro = 4; @DF-RKS iter 9: -150.13120141103812 -7.25483e-03 4.21385e-05 DIIS; @DF-RKS iter 10: -150.12366619982981 7.53521e-03 1.36759e-02 SOKS, nmicro = 4; @DF-RKS iter 11: -150.13120140228156 -7.53520e-03 4.43841e-05 DIIS; @DF-RKS iter 12: -150.11089835193317 2.03031e-02 2.24444e-02 SOKS, nmicro = 4; @DF-RKS iter 13: -150.13120064244808 -2.03023e-02 1.38615e-04 DIIS; @DF-RKS iter 14: -150.10407305304250 2.71276e-02 2.59404e-02 SOKS, nmicro = 4; @DF-RKS iter 15: -150.13119989205700 -2.71268e-02 1.91309e-04 DIIS; @DF-RKS iter 16: -150.08734658173793 4.38533e-02 3.29682e-02 SOKS, nmicro = 5; @DF-RKS iter 17: -150.13119968",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/773#issuecomment-321913106:9,failure,failures,9,https://psicode.org,https://github.com/psi4/psi4/issues/773#issuecomment-321913106,1,['failure'],['failures']
Availability,"Ok, hopefully the latest commit has made Psi4 safe for Accelerate again. I wasn't able to recreate the missing symbol error on Linux, but I think these workarounds will suffice. I at least got the CMake to find the MKL fns and then not find them under a different name.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2895#issuecomment-1520885541:118,error,error,118,https://psicode.org,https://github.com/psi4/psi4/pull/2895#issuecomment-1520885541,1,['error'],['error']
Availability,"Ok, relevant PR is in. And I tried an internal gpu_dfcc build, hit your cannot find TargetLAPACK error, and fixed it by passing CMAKE_PREFIX_PATH to the external project. gpu_Dfcc built correctly, but of course I can't run it. So I'm hopeful that it'll work for you.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-400824451:97,error,error,97,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-400824451,1,['error'],['error']
Availability,"Ok, since last review round, this adds tests for CCSD gradients and CCSD(T) energies. As there's more items stored and printed from the cc* modules (i.e., mp2 & ccsd singles), @lothian should have a chance to review. All conventional values actively compared against cfour downstream. All matchable except for _CCSD_ energy in the course of _CCSD(T)_ energy for ROHF FC (see below), though this is the realm where differences expected. I haven't experimented much, but if these differences surprise anyone or if more toggles besides canonicalize come to mind, I'd be glad to hear of them. ```; AssertionError: 	test_ccsd_prt_pr_energy_module[ccsd_t_ rohf conv fc: * ccenergy-dz-ene0] CCSD CORRELATION ENERGY: computed value (-0.08256310) does not match (-0.08256719) to atol=1e-06 by difference (0.00000409).; AssertionError: 	test_ccsd_prt_pr_energy_module[ccsd_t_ rohf conv fc: * ccenergy-adz-ene0] CCSD CORRELATION ENERGY: computed value (-0.17599322) does not match (-0.17598849) to atol=1e-06 by difference (-0.00000473).; AssertionError: 	test_ccsd_prt_pr_energy_module[ccsd_t_ rohf conv fc: * ccenergy-qz2p-ene0] CCSD CORRELATION ENERGY: computed value (-0.19283228) does not match (-0.19282621) to atol=1e-06 by difference (-0.00000607).; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1850#issuecomment-627499447:273,down,downstream,273,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-627499447,1,['down'],['downstream']
Availability,"Ok, so in the `ijij` case I see this difference between s390 and amd64 when parsing the third character, also note the different length and content of `labels`:. amd64:. ```; Breakpoint 3, get_combined_dims_view (labels=0x7fffffffcd20 ""ij\376\376"", iop=0, op=<optimized out>) at numpy/core/src/multiarray/einsum.c.src:2114; 2114	 int label = (signed char)labels[idim];; (gdb) n; 2116	 if (label < 0) {; (gdb) p label; $43 = -2; (gdb) p idim; $44 = 3; (gdb) p labels[idim]; $45 = -2 '\376'; (gdb) p labels; $46 = 0x7fffffffcd20 ""ij\376\376""; ```. s390x:. ```; Breakpoint 7, get_combined_dims_view (labels=0x3ffffffcdf8 ""ij\376\377\375\377\061\340"", iop=0, op=<optimized out>) at numpy/core/src/multiarray/einsum.c.src:2114; 2114 int label = (signed char)labels[idim];; (gdb) n; 2116 if (label < 0) {; (gdb) p label; $278 = -1; (gdb) p idim; $279 = 3; (gdb) p labels[idim]; $280 = 255 '\377'; (gdb) p labels ; $281 = 0x3ffffffcdf8 ""ij\376\377\375\377\061\340""; ```. If I then go on on s390 by mangling the `label` variable, it exits fine. ```; (gdb) set variable label = -2; (gdb) c; Continuing.; 47.048397425357216; [Inferior 1 (process 26977) exited normally]; ```. So I guess the `int label = (signed char)labels[idim];` is to fault here.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1465#issuecomment-452063263:1228,fault,fault,1228,https://psicode.org,https://github.com/psi4/psi4/issues/1465#issuecomment-452063263,1,['fault'],['fault']
Availability,"Ok, thank you Susi. @loriab I see that you have added a synchronization step in AIOHandler::write, see former commit id c205621. Do you remember the reason for that ? As far as I can remember, the way AIOHandler is designed we should never need a synchronization here. @jturney From the git history, the error message Susi is seeing was added by you during KTB. Do you remember why you put it there ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/596#issuecomment-277502940:304,error,error,304,https://psicode.org,https://github.com/psi4/psi4/issues/596#issuecomment-277502940,1,['error'],['error']
Availability,"Ok, thanks to your very detailed examples, I was able to track down the problem(s). If you pull the latest version of the code, it should be fixed. There's a new test case, extern1, that confirms the correctness of the gradients by finite differences. The PBE results don't seem to match the Gaussian results that you posted; I don't have access to Gaussian so I can't investigate that any further, I'm afraid. A good place to start would be an SCF calculation, because DFT grids are not uniform between packages. It's also a good idea to manually specify the basis set (Psi4 uses the G94 standard) to ensure that both packages are using the exact same functions. With these changes, the energies and gradients should match exactly; if not it's probably confusion between A/Bohr in the Gaussian input for the TIP3P fragment. Until these fixes, Psi4 assumed that the external potential was always in Bohr, but now the code will assume the same units as those used to specify the QM molecule. Good luck!. Andy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/184#issuecomment-156220388:63,down,down,63,https://psicode.org,https://github.com/psi4/psi4/issues/184#issuecomment-156220388,1,['down'],['down']
Availability,"Ok, thanks. Should I open a different issue for the sapt4 error?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/260#issuecomment-184839252:58,error,error,58,https://psicode.org,https://github.com/psi4/psi4/issues/260#issuecomment-184839252,1,['error'],['error']
Availability,"Ok, that makes sense. I got Psi4 by cloning the repo as usual, and it seems like I'm pulling CheMPS2 from the Miniconda p4dev (Psi4 development) environment. Using `conda update chemps2` doesn't show any available updates; the button on the CheMPS2 page says the most recent version is 1.8.4, but the Conda site says it's 1.8.3. I'll try pulling from GitHub and see if that fixes anything. Thanks for the help!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/871#issuecomment-347979916:204,avail,available,204,https://psicode.org,https://github.com/psi4/psi4/issues/871#issuecomment-347979916,1,['avail'],['available']
Availability,"Ok, the big merge is in. If you'd like to work on Py3/conda, that'd be great. Note that the python bindings are now through pybind11 and there is (this issue)[https://github.com/pybind/pybind11/pull/227] that I haven't looked into. The existing conda recipes for psi4 are (here)[https://github.com/psi4/psi4meta/tree/master/conda-recipes] and though they were in pristine shape at the beginning of July, they haven't had CMakeRewrite/KillTheBoost applied to them yet. And ignore the `LIBC_INTERJECT` business. Basically, if you'd like to work on this, wonderful, and if you have any problems, ping me. But in any case, I will get to this eventually (see, #111).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/466#issuecomment-249032322:593,ping,ping,593,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-249032322,1,['ping'],['ping']
Availability,"Ok, the error is a combination of utc & snowflake. Nothing to worry about, I think. Python 3.12 changed some things and Ben replaced some utc commands in the last couple of days. _But_ there was a snowflake bug that he also fixed, and we're grabbing inconsistent qcportal and fractal pieces: https://github.com/psi4/psi4/blob/master/.github/workflows/ecosystem.yml#L234 @bennybp's doing a v0.52 release in the next couple days that should fix all this. Fine to merge with these errors until then. ```; E --> snowflake = FractalSnowflake(); E client = snowflake.client(); E h2o = geometry(""""""; E O; E H 1 1.0; E H 1 1.0 2 104.5; E ; E ; E !----------------------------------------------------------------------------------!; E ! !; E ! cannot import name 'now_at_utc' from 'qcportal.utils' !; E ! (/usr/share/miniconda3/envs/p4build/lib/python3.12/site- !; E ! packages/qcportal/utils.py) !; E ! !; E !----------------------------------------------------------------------------------!; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3088#issuecomment-1831177563:8,error,error,8,https://psicode.org,https://github.com/psi4/psi4/pull/3088#issuecomment-1831177563,2,['error'],"['error', 'errors']"
Availability,"Ok, the test case error is fixed in #1495; this one's ready IMHO",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1488#issuecomment-457265162:18,error,error,18,https://psicode.org,https://github.com/psi4/psi4/pull/1488#issuecomment-457265162,1,['error'],['error']
Availability,"Ok, tracked down the whole DFHelper metric error in cartesian basis sets. Turns out that this was not an error after all in DFHelper and had to do with the fact that DiskDFJK never passed in it's metric condition tolerance to the FittingHelper. This *was* a bug. This lead to quite a few other changes in the past 5 commits and quite a bit of time to track down. This does mean we have a decision to make DFJK has been using a `1.e-10` tolerance for about two years now rather than a `1.e-12` tolerance. Should we consider changing these tolerances at all?. @loriab Yup, patched up opt13.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1446#issuecomment-449669501:12,down,down,12,https://psicode.org,https://github.com/psi4/psi4/pull/1446#issuecomment-449669501,8,"['down', 'error', 'toler']","['down', 'error', 'tolerance', 'tolerances']"
Availability,"Ok, we're up on c-f at https://anaconda.org/conda-forge/psi4/files . For now, you'll need `conda install psi4 -c conda-forge -c conda-forge/label/libint_dev -c conda-forge/label/psi4_dev`. After the v1.8 release, you can drop the `psi4_dev` but not the `libint_dev`. It'll be changing often as I need to add osx_arm64 and py311. And there's stuff in master it doesn't have, and stuff in it that master doesn't have. But all the main functionality should be fine. ### Please report *any* problems or oddities. None of the docs reflect new build/install procedures yet. I'll be making a list of where folks go awry. First one (that's bitten me and Jonathon):; * To start an environment with conda compilers from c-f, don't use `conda create -n mydev gxx_linux-64 ... -c conda-forge` as the c-f analog to the usual procedure. That will work to form the env, but if you look in `conda list`, there's some deep pieces like the sysroot still present from `defaults`. When you start compiling, it will give you obscure C++ errors outside your code. Instead, use `conda create -n mydev cxx-compiler ... -c conda-forge` (same for all platforms) which will give a cohesive compiler stack.; * (Added 28 Apr) If you use the c-f dep packages to _compile_ psi4, remember to mind libints: `master` + `psi4/label/dev::libint2` or `cf_iterations` + `conda_forge/label/libint_dev::libint` (also note `libint2` vs `libint`).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-1523559384:1016,error,errors,1016,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1523559384,1,['error'],['errors']
Availability,"Okay thanks! I will close :). On Fri, Jan 29, 2021 at 10:54 AM Lori A. Burns <notifications@github.com>; wrote:. > Those comments aren't always 1:1 with the contents.; >; > But what's happening for 6-311+G* in particular is that 3 partial basis; > sets are getting merged: the 6-311 defined through Kr, the polarization; > defined through Kr, and the diffuse only defined through Ca. Only elements; > with partial basis sets available for all three pieces show up in the full; > basis file, so Kr, etc. are missing. Looking at 6-311+G* at; > https://www.basissetexchange.org/, that ends at Ca, too, so nothing to; > update. Does this clear up what's going on?; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/2097#issuecomment-769922422>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AKNB26P7KNIQBAOTKDLTCETS4LR4DANCNFSM4WZDDXEA>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2097#issuecomment-769932213:425,avail,available,425,https://psicode.org,https://github.com/psi4/psi4/issues/2097#issuecomment-769932213,2,['avail'],['available']
Availability,"Okay, I got something to run, but it's getting inf's and nan's. Looks like built-in basis sets cause errors, while with custom ones the calculation runs, but something weird happens. The matrices look alright: the Cholesky procedure builds MOs, the Fock matrix is built and looks fine, but in the next iteration the density and Fock matrices are full of NaNs....; ```; import psi4. mol = psi4.core.Molecule.from_arrays(; elez=[2, 4, 2],; #fix_com=True,; #fix_orientation=True,; fix_symmetry='c1',; tooclose=1.e-6,; real=[True, False, True],; geom=[; 1.0, 0.0, -0.05,; 1.0, 0.0, 0.0,; 1.0, 0.0, 0.05]); activate(mol); set s_orthogonalization partialcholesky; set df_scf_guess false; set scf_type direct; set basis ugbs; #set basis cc-pvdz # fails with SOBasis: shell changed; #set basis cc-pvdz-decon # fails with SOBasis: shell changed; set debug 10; set guess core; energy('scf'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1843#issuecomment-595998279:101,error,errors,101,https://psicode.org,https://github.com/psi4/psi4/pull/1843#issuecomment-595998279,1,['error'],['errors']
Availability,"Okay, I think (hope) I sorted it out. My test was checking the last computed energy, not the last converged IRC point. The latter should be more robust. The mechanism that checks for a minimum runs on the first step of the next IRC-point optimization -- that was the energy being compared. Since the gradient is small so near the minimum, I guess it isn't surprising that that step direction isn't well-defined. My changes are [here](https://github.com/avcopan/psi4/commit/ab07fd3e1c5242ca58bba12230ce7f1077392102). If tests pass on my machine and you approve (@loriab), I'll do a pull request.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/290#issuecomment-189916188:145,robust,robust,145,https://psicode.org,https://github.com/psi4/psi4/issues/290#issuecomment-189916188,1,['robust'],['robust']
Availability,"Okay, I was able to build after I updated to the latest Psi4 master and changed the git tag in `external/downstream/v2rdm_casscf/CMakeLists.txt`. Thanks!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1426#issuecomment-451784852:105,down,downstream,105,https://psicode.org,https://github.com/psi4/psi4/issues/1426#issuecomment-451784852,1,['down'],['downstream']
Availability,"Okay, I'll report back any failures I have.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/160#issuecomment-130115735:27,failure,failures,27,https://psicode.org,https://github.com/psi4/psi4/pull/160#issuecomment-130115735,1,['failure'],['failures']
Availability,"Okay, so I think the problem is that i did not have ```gcc``` in the ```/home/artfin/miniconda/envs/psi4-env/bin```. So I installed it with ```conda install -c anaconda gcc=4.8.5``` in the ```psi4-env``` environment. ; After rerunning ```psi4``` I still get:. ```psi4: symbol lookup error: psi4: undefined symbol:```; ```_ZTTSt19basic_ostringstreamIcSt11char_traitsIcESaIcEE```. ```export LD_LIBRARY_PATH=/home/artfin/miniconda/envs/psi4-env/lib:$LD_LIBRARY_PATH``` does not change anything.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/675#issuecomment-297042835:283,error,error,283,https://psicode.org,https://github.com/psi4/psi4/issues/675#issuecomment-297042835,1,['error'],['error']
Availability,"Okay, so this is not built in a conda environment, but using system compiler etc. In that case, libtensorlight is downloaded and put into ~/.local, as the compiler flags suggest, too. Hard to debug for me, but concerning this PR, there is no harm in bumping the reqd adcc version. Please merge this if you agree @loriab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2785#issuecomment-1322484515:114,down,downloaded,114,https://psicode.org,https://github.com/psi4/psi4/pull/2785#issuecomment-1322484515,1,['down'],['downloaded']
Availability,"Okey dokey, I pushed a downgrade to 3.7, which will hopefully fix it. A bit off topic, but I don't think props4 is running, which has the `quicktests` label. Any idea why that might be the case? The are a number of tests, including props1-3, that have the `shorttests` label, but not `quicktests`. Now we're all Travisified we should look over those and see which ones are quick enough to run for every PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235152988:23,down,downgrade,23,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235152988,1,['down'],['downgrade']
Availability,"On ECP front, input:; ```; memory 12 gb. set basis def2-qzvp; set basis_guess def2-svp. database('b3lyp-d2', 'heavy28'); ```; yields:; ```; ==> Requested Energy <==. --------------------------------------------------------------------------------------------------------------------------; Reaction Reaction Energy Reaction Error Reagent 1 Reagent 2 Reagent 3; Ref Calc [kcal/mol] [kJ/mol] [Eh] Wt [Eh] Wt [Eh] Wt; --------------------------------------------------------------------------------------------------------------------------; HEAVY28-1 1.2900 0.1427 -1.1473 -4.8005 -432.98126591 -1 -216.49051929 2; HEAVY28-2 2.4200 2.6044 0.1844 0.7717 -292.96755189 -1 -216.49051929 1 -76.47288217 1; HEAVY28-3 1.4000 0.7130 -0.6870 -2.8744 -615.93287983 -1 -216.49051929 1 -399.44122431 1; HEAVY28-4 0.8500 0.2787 -0.5713 -2.3904 -677.34282211 -1 -216.49051929 1 -460.85185870 1; HEAVY28-5 1.1600 0.5208 -0.6392 -2.6745 -2791.33529091 -1 -216.49051929 1 -2574.84394169 1; HEAVY28-6 1.4200 0.3997 -1.0203 -4.2690 -514.89833461 -1 -216.49051929 1 -298.40717839 1; HEAVY28-7 0.6900 0.3720 -0.3180 -1.3306 -273.08491143 -1 -216.49051929 1 -56.59379936 1; HEAVY28-8 1.3200 0.0652 -1.2548 -5.2502 -390.55270102 -1 -195.27629857 2; HEAVY28-9 0.6800 -0.0169 -0.6969 -2.9160 -411.76679086 -1 -195.27629857 1 -216.49051929 1; HEAVY28-10 0.4400 0.1562 -0.2838 -1.1876 -271.74942958 -1 -195.27629857 1 -76.47288217 1; HEAVY28-11 0.8000 0.1821 -0.6179 -2.5853 -656.12844746 -1 -195.27629857 1 -460.85185870 1; HEAVY28-12 1.0400 0.4064 -0.6336 -2.6510 -2770.12088792 -1 -195.27629857 1 -2574.84394169 1; HEAVY28-13 1.2900 0.0679 -1.2221 -5.1133 -493.68358516 -1 -195.27629857 1 -298.40717839 1; HEAVY28-14 0.7000 0.1020 -0.5980 -2.5019 -464.58500012 -1 -195.27629857 1 -269.30853894 1; HEAVY28-15 1.3000 0.2426 -1.0574 -4.4240 -484.24282026 -1 -242.12121680 2; HEAVY28-16 1.7000 1.7156 0.0156 0.0653 -318.59683296 -1 -242.12121680 1 -76.47288217 1; HEAVY28-17 1.1400 0.7054 -0.4346 -1.8184 -641.56356522 -1 -242.121",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/795#issuecomment-326351281:324,Error,Error,324,https://psicode.org,https://github.com/psi4/psi4/pull/795#issuecomment-326351281,1,['Error'],['Error']
Availability,"On RDR's point 2,. * Looks like CMake has the following hash algorithms available `file(<MD5|SHA1|SHA224|SHA256|SHA384|SHA512> filename variable)`; * And ExternalProject has `URL_HASH ALGO=value` to specify them; * `conda install openssl -c conda-forge` followed by `openssl sha256 your_sdist.tar.gz` to compute them. Only problem is that I suspect that's a tarball (single file) procedure, not the GH hash we usually do.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/856#issuecomment-344288297:72,avail,available,72,https://psicode.org,https://github.com/psi4/psi4/pull/856#issuecomment-344288297,1,['avail'],['available']
Availability,"On further thought, I am not sure this is an error. In UHF there's no guarantee that the orbitals are spin-paired; the beta spatial orbitals are allowed to differ from the alpha ones. This naturally leads to spin contamination, but that's a feature not a bug!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2476#issuecomment-1073334686:45,error,error,45,https://psicode.org,https://github.com/psi4/psi4/issues/2476#issuecomment-1073334686,1,['error'],['error']
Availability,"On my machine, the tests fail with a segfault. Using gdb it seems to originate somewhere in Python. Backtrace below for test case adc1, fails right after the SCF without errors, looks similar to Travis failure.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/387#issuecomment-222263701:170,error,errors,170,https://psicode.org,https://github.com/psi4/psi4/pull/387#issuecomment-222263701,2,"['error', 'failure']","['errors', 'failure']"
Availability,"On the SAPT wavefunction: right now, we do not know what SAPT should return. I see that you have added an error message reading ""SAPT incomplete wavefunction is only dimer SCF"", which is a bit confusing because at first I thought SAPT had a problem _reading_ the wavefunction in. Maybe a message reading ""SAPT returns incomplete wavefunction, only dimer SCF"" would be better. Also, I don't think SAPT can meaningfully return a wavefunction, at least not in its current state... Do you think it would be better if methods like that just returned an empty structure or the equivalent of a NULL pointer in Python ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/259#issuecomment-184846709:106,error,error,106,https://psicode.org,https://github.com/psi4/psi4/issues/259#issuecomment-184846709,1,['error'],['error']
Availability,"On the `clean` issue, I don't see a change in behavior from your PR. The below (on master) also requires the intervening `clean()` to avoid a PSIO error. Maybe the rules of how much the user should need to call clean need rethinking, but at least they are steady (one used to have to call it after practically everything). ```; molecule ne2 {; 0 1; Ne 0 0 0; --; 0 1; Ne 2 0 0; }. set basis cc-pvdz; sapt_global = energy(""sapt2+(3)"", molecule=ne2). clean() # PSIO error without this line. # these two calls are equivalent; #cbs_string = energy(""mp2/6-311++G** + D:ccsd/6-311+G""); cbs_string = energy(cbs, corl_wfn='mp2', corl_basis='6-311++G**', delta_wfn='ccsd', delta_basis='6-311+G'); compare_values(-257.50097969, cbs_string, 5, 'cbs'); ```. On the caspt2, runs fine for me, too. If you want to see the error try [looking in the testing log file](http://psicode.org/psi4manual/master/build_planning.html#faq-testsoutput). But it's certainly outside the scope of this PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/949#issuecomment-379830469:147,error,error,147,https://psicode.org,https://github.com/psi4/psi4/pull/949#issuecomment-379830469,3,['error'],['error']
Availability,"On the `exception.message`, change https://github.com/psi4/psi4/blob/master/psi4/driver/procedures/proc.py#L3934 from `== False` to `is False`, then run cepa2. You should get an exception that doesn't have a message, so it throws another exception. On the Cons, yes, there are rather more kept errors than I would have expected. We can ignore them more broadly in `.flake8` if we choose, including all line lengths and imports not used. The noqa for things like VARH don't bother me too much. On the overriding a single error, yes, would have to insert to ignore code fairly promptly to keep getting good results. I've had the driver to within a few chosen exceptions of pep8 compliant, so maintaining it as such I don't think is too onerous.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/530#issuecomment-263290760:294,error,errors,294,https://psicode.org,https://github.com/psi4/psi4/pull/530#issuecomment-263290760,2,['error'],"['error', 'errors']"
Availability,"On the driver: Presently, `select_` methods (e.g., https://github.com/psi4/psi4/blob/master/share/python/procedures/proc.py#L127) are only used for post-scf, but it may be worthwhile to put such in for scf. Their purpose is to organize and filter availability based on reference (rhf, etc.), algorithm (conv, df, etc.), and module (irrelevant here- all scf). `gradient()` knows how to play nicely with `select_` methods, using analytic when avail. and falling back to findif if not. That's the behavior we want for hessian, too. Lines like https://github.com/psi4/psi4/blob/master/share/python/driver.py#L567 could also be absorbed into a `select_`. Basically, the procedures dict calls the `select_scf_grad/hess` and that passes along to `run_scf` which calls `scf_helper`. On the vibrational analysis/symm sorting:; Andy and I were chatting about this after your talk, @dgasmith. He found the libmints matrix to transform the Cart Hessian back to symmetry blocked. So then can readily classify. That should do for the Abelian PGs. @bwb314 has been commissioned. ```; mints = MintsHelper(wfn.basisset()); cdsalcs = mints.cdsalcs(15, True, True); that does it; U = cdsalcs.matrix(); well, the 15 should really be 0xF; Hsymm = U^T H U; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/437#issuecomment-230652637:247,avail,availability,247,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-230652637,2,['avail'],"['avail', 'availability']"
Availability,"On the first item, yes, that's what DFMP2 module does now, and that's what DFOCC will do when I get through with it. In effect yes, but there's enough combinations of scf_type/higher_type and variation among modules (some may be equipped to handle mixed df&conv) that I'm not going to reset the types bluntly. Let's see how mp2 goes first. Ok, good to know there's a plausible reason. Here's the magnitude of the error (for BH3+), if that helps, @CDSherrill . ```; mp2 rohf conv: 2 occ*.............................................PASSED # HF; mp2 rohf conv: 2 occ*: computed value (-0.0594063) does not match (-0.0609392) to 6 decimal places. # MP2 corl; mp2 rohf conv: 2 occ*: computed value (-26.0030128) does not match (-26.0045457) to 6 decimal places. # MP2 tot; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/245#issuecomment-192951491:413,error,error,413,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-192951491,1,['error'],['error']
Availability,"On the one hand, for cases like SAPT/auto-CP/etc, I'd be fine with just disabling `num_frozen_docc` -- it's clearly inappropriate in any supersystem calculation where the user knows at the `energy` call that it's going to run sub-systems. But going upthread back to the original issue, there's use-cases like `MBIS_VOLUME_RATIOS` that are an add-on to what would otherwise be a valid standalone calculation to use `num_frozen_docc` with (a monomer calc), and there's still the question of what should happen there. You can't just guess based on calc name, because you don't know if the user is going to call `oeprop` down-stream. Disabling `num_frozen_docc` for any calculation where this *could* happen would effectively ban the keyword. . A reasonableness check, or a good guess, could be inserted before any calculation done on a new mol if `num_frozen_docc` is set in the global scope -- with a warning. Or simply error out if a new mol is calculated without `num_frozen_docc` having been updated (not sure how reasonable that is?). . This is but one user's thoughts, of course.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2631#issuecomment-1212141916:617,down,down-stream,617,https://psicode.org,https://github.com/psi4/psi4/issues/2631#issuecomment-1212141916,4,"['down', 'error']","['down-stream', 'error']"
Availability,"On the test failures, can you find out why through http://psicode.org/psi4manual/master/build_planning.html#faq-testsoutput? Especially the ""align"" ones, it might just be something not installed. The ""cubeprop"" ones have a history of being compiler sensitive, too.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-402524125:12,failure,failures,12,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-402524125,1,['failure'],['failures']
Availability,"On the test suite error, it's a good idea to turn convergences way down (e.g., 10 or 12) to compute the reference values, then remove conv settings for the final test case and do the compare_values check to the number or fewer decimals than the default for the calc type (energy, gradient, etc.). You're checking the latter to 6, so probably better ref vals will do the trick.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1346#issuecomment-437675136:18,error,error,18,https://psicode.org,https://github.com/psi4/psi4/pull/1346#issuecomment-437675136,2,"['down', 'error']","['down', 'error']"
Availability,"One RFO step is taken and MOLECULE::validate_angles() detects no ""new"" lin bends on Frag 1 but one ""new"" one in Frag 2: L/l(18,25,26)) (that are already there!). These get added through the INTCO_EXCEPTion handler and a rebuild of internal coordinates is triggered. MOLECULE::add_intrafragment_simples_by_connectivity() calls FRAG::add_simples_by_connectivity() for each fragment(), and then FRAG::add_bend_by_connectivity(). The latter function loops through opt::INTCO_EXCEPT::linear_angles[], adding any new lin bends that are not currently defined for that fragment. On the first pass through, it detects 57 int coords in each fragment; on the second, Frag 1 has 59 (the two extra linear bends...) and Frag 2 has 57. The problem is that opt::INTCO_EXCEPT::linear_angles[] is indexed for the whole molecule, whereas FRAG is indexed just for that fragment, i.e. atom_offsets are used whenever int coords are printed, etc. The linear bend to be added as an exception, L/l(18,25,26), does not exist in Frag 1 (it only has 13 atoms!) so gets added to it. When the int coords are printed out, a seg fault results when an attempt is made to calculate a value using coordinates off the end of the Frag arrays. I'm not sure of the easiest solution here: INTCO_EXCEPT only has molecule-based rather than fragment-based indexing. It could have a fragment index added to it and then use fragment-based indexing for the new lin bends. I think this would also need each FRAG object to contain it's fragment index and/or an atom_offset to the first atom within it. A more involved solution might have an INTCO_EXCEPT per fragment so that it's all a bit more in the spirit of object orientation. I'm a little puzzled as to why it detected a new linear bend in Frag 2 (one that was already there!) but not in Frag 1, i.e. whether it found it but ignored it had distorted far enough away from being linear, in which case, surely it should have deleted it and replaced it with a normal bend! I'll keep on digging...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/680#issuecomment-296160675:1459,fault,fault,1459,https://psicode.org,https://github.com/psi4/psi4/issues/680#issuecomment-296160675,1,['fault'],['fault']
Availability,"One kicked down to future work, but all others applied.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2551#issuecomment-1105931246:11,down,down,11,https://psicode.org,https://github.com/psi4/psi4/pull/2551#issuecomment-1105931246,1,['down'],['down']
Availability,One more thing. I ran this with valgrind and no notable errors popped up. So no uninitialized memory use or buffer overflow here.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2261#issuecomment-1228512946:56,error,errors,56,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1228512946,1,['error'],['errors']
Availability,"One of my runs had one of the fnocc's failing. I'm wondering if a run; through Valgrind is needed. Justin Turney, Ph.D.; Senior Research Scientist; CCQC/UGA. On Tue, Jul 21, 2015 at 12:07 PM, Eugene DePrince notifications@github.com; wrote:. > Can I see the errors from RHEL7 conda? I can't reproduce this one.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/120#issuecomment-123386691.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/120#issuecomment-123392969:258,error,errors,258,https://psicode.org,https://github.com/psi4/psi4/issues/120#issuecomment-123392969,1,['error'],['errors']
Availability,"One of the comments in this chain referred to unrelaxed densities. We should check with @lothian, but I think typically we want relaxed densities (where available) for the purposes of computing properties.... dipole moments, for example, should be more accurate when computed using relaxed densities. (There's an old Bartlett paper that does this comparison for CCSD, as I recall). On the other hand, I do not know that relaxed densities are the appropriate ones if we want to compute natural orbitals (which is more the context of the current discussion). For example, I'm not sure if relaxed densities satisfy Tr(\gamma) = N. Will we wind up needing to keep both relaxed and unrelaxed densities in wfn?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/504#issuecomment-260131540:153,avail,available,153,https://psicode.org,https://github.com/psi4/psi4/issues/504#issuecomment-260131540,1,['avail'],['available']
Availability,"One thing that I would like to note is that prior to https://github.com/psi4/psi4/pull/2686 this DSYEV failure would not have been caught, and Psi4 would have carried on with whatever the failed diagonalization returned.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2890#issuecomment-1468114267:103,failure,failure,103,https://psicode.org,https://github.com/psi4/psi4/issues/2890#issuecomment-1468114267,1,['failure'],['failure']
Availability,"OpenBLAS and MKL can be easily switched out by the usual conda-forge mechanism, not sure about OpenMP. Is there Intel OpenMP available on conda-forge?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1898#issuecomment-785910480:125,avail,available,125,https://psicode.org,https://github.com/psi4/psi4/issues/1898#issuecomment-785910480,1,['avail'],['available']
Availability,"Opportunity to avoid Libxc5 surprises ourselves and help Libxc out by testing their new parameters interface: https://gitlab.com/libxc/libxc/-/merge_requests/284 . I'll get to it later this week, but if anyone wants to play with the p4/xc connection, go for testing. Ping me on any setup issues.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-604007934:267,Ping,Ping,267,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-604007934,1,['Ping'],['Ping']
Availability,"Optimization flags come from [another source](https://github.com/AnacondaRecipes/aggregate/blob/master/ctng-compilers-activation-feedstock/recipe/conda_build_config.cos6.x86_64.yaml#L46), but yes, I see what you mean that they look to be clobbered. I can rebuild openblas locally to see if that helps. But I'd be surprised if there were fundamental accuracy errors in the openblas package that weren't noticed by the whole conda-forge-dependent community (where openblas is their default blas_impl) or conda defaults (which still has `nomkl` options)`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-387081840:358,error,errors,358,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-387081840,1,['error'],['errors']
Availability,"Or, an even simpler fix would be to store the ```R_avail``` and ```error``` arrays as ASCII, like the quadrature rules themselves.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1462#issuecomment-451995913:67,error,error,67,https://psicode.org,https://github.com/psi4/psi4/issues/1462#issuecomment-451995913,2,['error'],['error']
Availability,"Other than seeing python test failures caused by psi4 being compiled with python3 not python2 assumed by the tests, nothing big comes out. dft-grad-meta is failing, but that might be due to me using a different version of libxc. Some tests are also failing for me due to the default libint parameters. If you have a setup that can run all tests, you might want to double check.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1458#issuecomment-451606476:30,failure,failures,30,https://psicode.org,https://github.com/psi4/psi4/pull/1458#issuecomment-451606476,1,['failure'],['failures']
Availability,"PBSTF(char,int,int,double *,int)"" (?C_DPBSTF@psi@@YAHDHHPEANH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbsv，该符号在函数 ""int __cdecl psi::C_DPBSV(char,int,int,int,double *,int,double *,int)"" (?C_DPBSV@psi@@YAHDHHHPEANH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbsvx，该符号在函数 ""int __cdecl psi::C_DPBSVX(char,char,int,int,int,double *,int,double *,int,char,double *,double *,int,double *,int,double *,double *,double *,double *,int *)"" (?C_DPBSVX@psi@@YAHDDHHHPEANH0HD00H0H0000PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbtrf，该符号在函数 ""int __cdecl psi::C_DPBTRF(char,int,int,double *,int)"" (?C_DPBTRF@psi@@YAHDHHPEANH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbtrs，该符号在函数 ""int __cdecl psi::C_DPBTRS(char,int,int,int,double *,int,double *,int)"" (?C_DPBTRS@psi@@YAHDHHHPEANH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpocon，该符号在函数 ""int __cdecl psi::C_DPOCON(char,int,double *,int,double,double *,double *,int *)"" (?C_DPOCON@psi@@YAHDHPEANHN00PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpoequ，该符号在函数 ""int __cdecl psi::C_DPOEQU(int,double *,int,double *,double *,double *)"" (?C_DPOEQU@psi@@YAHHPEANH000@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dporfs，该符号在函数 ""int __cdecl psi::C_DPORFS(char,int,int,double *,int,double *,int,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DPORFS@psi@@YAHDHHPEANH0H0H0H000PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dposv，该符号在函数 ""int __cdecl psi::C_DPOSV(char,int,int,double *,int,double *,int)"" (?C_DPOSV@psi@@YAHDHHPEANH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dposvx，该符号在函数 ""int __cdecl psi::C_DPOSVX(char,char,int,int,double *,int,double *,int,char,double *,double *,int,double *,int,double *,double *,double *,double *,int *)"" (?C_DPOSVX@psi@@YAHDDHHPEANH0HD00H0H0000PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:33695,error,error,33695,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"PEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgbsvx，该符号在函数 ""int __cdecl psi::C_DGBSVX(char,char,int,int,int,int,double *,int,double *,int,int *,char,double *,double *,double *,int,double *,int,double *,double *,double *,double *,int *)"" (?C_DGBSVX@psi@@YAHDDHHHHPEANH0HPEAHD000H0H00001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgbtrf，该符号在函数 ""int __cdecl psi::C_DGBTRF(int,int,int,int,double *,int,int *)"" (?C_DGBTRF@psi@@YAHHHHHPEANHPEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgbtrs，该符号在函数 ""int __cdecl psi::C_DGBTRS(char,int,int,int,int,double *,int,int *,double *,int)"" (?C_DGBTRS@psi@@YAHDHHHHPEANHPEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgebak，该符号在函数 ""int __cdecl psi::C_DGEBAK(char,char,int,int,int,double *,int,double *,int)"" (?C_DGEBAK@psi@@YAHDDHHHPEANH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgebal，该符号在函数 ""int __cdecl psi::C_DGEBAL(char,int,double *,int,int *,int *,double *)"" (?C_DGEBAL@psi@@YAHDHPEANHPEAH10@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgebrd，该符号在函数 ""int __cdecl psi::C_DGEBRD(int,int,double *,int,double *,double *,double *,double *,double *,int)"" (?C_DGEBRD@psi@@YAHHHPEANH00000H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgecon，该符号在函数 ""int __cdecl psi::C_DGECON(char,int,double *,int,double,double *,double *,int *)"" (?C_DGECON@psi@@YAHDHPEANHN00PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgeequ，该符号在函数 ""int __cdecl psi::C_DGEEQU(int,int,double *,int,double *,double *,double *,double *,double *)"" (?C_DGEEQU@psi@@YAHHHPEANH00000@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgees，该符号在函数 ""int __cdecl psi::C_DGEES(char,char,int,double *,int,int *,double *,double *,double *,int,double *,int)"" (?C_DGEES@psi@@YAHDDHPEANHPEAH000H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgeesx，该符号在函数 ""int __cdec",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:17678,error,error,17678,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"PRs psi-rking/optking#24 and psi4/psi4#1335 are a pair. Together, they get most optimizations working for Psi. In particular have working:. - [x] ordinary, opt-is-full job optimizations; - [x] collecting all the psivars so psi can read them in. basically, collecting enough to generate a skeleton (mol, basis, psivars) that can be passed back from `psi4.optimize(..., return_wfn=True)`; - [x] inlining optking's logging output into the psi4 output file; - [x] resetting psi4's options on either side of the `optking.run_json_dict()` call. The trouble was that the psi4-s imported by optking were clearing and setting options (as is proper for indep json runs) such that the calling psi4 didn't have its original options in globals upon optking termination; - [x] starting to catch optking errors (str in json) and re-raising them as psi4 errors. Yes, that AlgError vs OptError for exceeding geom_maxiter really stumped me for a while b/c I only got the final error (""dynamic level exceeded"") and I thought it was behaving differently btwn direct optking and psi4 initiated runs. To me it seems clear that if geom_maxiter is exceeded, then optimizer quits directly (though perhaps that's clearer when geom_maxiter=2 than =200). @psi-rking @AlexHeide",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1335#issuecomment-436437450:789,error,errors,789,https://psicode.org,https://github.com/psi4/psi4/pull/1335#issuecomment-436437450,6,['error'],"['error', 'errors']"
Availability,"PS: In #2997 I added the band-aid workaround of printing to `stderr` for PSIO errors, since those are quite common due to disks getting full and whatnot, but doing that globally in `PSIEXCEPTION` itself seems inelegant.; Users who are not affected by the missing error message would get the entire stack trace, etc. twice, which would make the already quite noisy error exits worse.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3117#issuecomment-1876924785:78,error,errors,78,https://psicode.org,https://github.com/psi4/psi4/pull/3117#issuecomment-1876924785,3,['error'],"['error', 'errors']"
Availability,"PSIO error 12 means write error:; https://github.com/psi4/psi4/blob/58efb602ee9fdf3d774a3a6f073dbf47f2ac249b/psi4/src/psi4/libpsio/config.h#L55. Unfortunately your environment does not seem to give you the rest of the error message, so we dont actually know why a write has failed. Are you sure you have enough free disk space for the temporary files?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2970#issuecomment-1565302915:5,error,error,5,https://psicode.org,https://github.com/psi4/psi4/issues/2970#issuecomment-1565302915,3,['error'],['error']
Availability,"PSIO errors are notoriously difficulty to understand, but my intuition is to say that this is a memory issue, if it's dependent on the size of the active space. What do you mean by ""I ask for 16gb memory on the cluster""? I'm not debugging your queuing system, but does that mean you're changing `psi4.set_memory(int(2e9))`? That looks closer to 1.6 than 16 GB.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1959#issuecomment-660255900:5,error,errors,5,https://psicode.org,https://github.com/psi4/psi4/issues/1959#issuecomment-660255900,2,['error'],['errors']
Availability,"Packages are ticking along steadily (follow graphs/views/labels at tracker above). If anyone wants to try out very early versions of the psi4 package, you can download artifacts from a commit that works at https://github.com/conda-forge/staged-recipes/pull/22328",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-1483659817:159,down,download,159,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1483659817,1,['down'],['download']
Availability,"Parts are arriving for an AMD server in our lab, so this may get more testing. But for now, OpenBLAS is going to go the way of Accelerate (on Mac) and just get a nice Use At Your Own Risk warning. I daresay Psi could use openblas directives better, but the stack of difficulties (wrong fctls, scaling, numpy compatibility, conda compatibility) is too high when there's a free, compatible, and working alternative in place. Glad to revisit periodically. P. S. There might be a further technical choice why the conda openblas package isn't building the Fortran/LAPACK code with optimizations (https://github.com/psi4/psi4/issues/1009#issuecomment-387075271), but an immediate technical reason is that conda gfortran 7.2.0 isn't distributing `omp_lib.[h|mod]`, so threading isn't avail.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-391015669:777,avail,avail,777,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-391015669,1,['avail'],['avail']
Availability,Passes all tests but:; ```; The following tests FAILED:; 	370 - pywrap-align (Failed); 	371 - pywrap-align-chiral (Failed); ```; The two crash with import error; I guess that's just an environment issue.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/963#issuecomment-383096630:155,error,error,155,https://psicode.org,https://github.com/psi4/psi4/pull/963#issuecomment-383096630,1,['error'],['error']
Availability,"Perhaps a good idea. PSIO should mainly be disk issues IMO. And only memory issues if the C code made bad estimates, right? Unless there are there virtual files that are written to RAM.; `PSIO_ERROR: 12 (error writing to file)` should in most cases be a disk space issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1959#issuecomment-661786049:204,error,error,204,https://psicode.org,https://github.com/psi4/psi4/issues/1959#issuecomment-661786049,1,['error'],['error']
Availability,Ping @loriab I think all showstoppers have been resolved,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-618303217:0,Ping,Ping,0,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-618303217,1,['Ping'],['Ping']
Availability,"Ping for @CDSherrill to weigh in, per DGAS recommendation. I can fix this issue myself if you have nothing to add.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1890#issuecomment-632034182:0,Ping,Ping,0,https://psicode.org,https://github.com/psi4/psi4/issues/1890#issuecomment-632034182,1,['Ping'],['Ping']
Availability,Ping me for review after Pt 1.5 gets merged in. I'm worried about possible merge conflicts.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2808#issuecomment-1332351744:0,Ping,Ping,0,https://psicode.org,https://github.com/psi4/psi4/pull/2808#issuecomment-1332351744,1,['Ping'],['Ping']
Availability,Ping me for review after merge conflict resolve.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2670#issuecomment-1230399537:0,Ping,Ping,0,https://psicode.org,https://github.com/psi4/psi4/pull/2670#issuecomment-1230399537,1,['Ping'],['Ping']
Availability,Ping me for review again when you have this passing tests.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1084556386:0,Ping,Ping,0,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1084556386,1,['Ping'],['Ping']
Availability,"Ping me when merge conflicts are fixed, and I'll review it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2536#issuecomment-1092773416:0,Ping,Ping,0,https://psicode.org,https://github.com/psi4/psi4/pull/2536#issuecomment-1092773416,1,['Ping'],['Ping']
Availability,"Ping me when this could use another review from me. From tests, it looks like there's a bug in the current code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2385#issuecomment-1027259299:0,Ping,Ping,0,https://psicode.org,https://github.com/psi4/psi4/pull/2385#issuecomment-1027259299,1,['Ping'],['Ping']
Availability,"Pinging @loriab once again, requesting review",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3157#issuecomment-2091855931:0,Ping,Pinging,0,https://psicode.org,https://github.com/psi4/psi4/pull/3157#issuecomment-2091855931,1,['Ping'],['Pinging']
Availability,"Pinging @lothian, who said he'd look into the issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2308#issuecomment-936911249:0,Ping,Pinging,0,https://psicode.org,https://github.com/psi4/psi4/issues/2308#issuecomment-936911249,1,['Ping'],['Pinging']
Availability,Pinging @msaitow in case he has time to help.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1033#issuecomment-511126630:0,Ping,Pinging,0,https://psicode.org,https://github.com/psi4/psi4/issues/1033#issuecomment-511126630,1,['Ping'],['Pinging']
Availability,Pinging @psi4/editors again. Please review!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-572037768:0,Ping,Pinging,0,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-572037768,1,['Ping'],['Pinging']
Availability,"Pinging... Well, @lothian?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1686#issuecomment-515268274:0,Ping,Pinging,0,https://psicode.org,https://github.com/psi4/psi4/issues/1686#issuecomment-515268274,1,['Ping'],['Pinging']
