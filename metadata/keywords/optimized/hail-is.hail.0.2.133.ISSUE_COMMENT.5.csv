quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,wiki,url,total_similar,target_keywords,target_matched_words
Testability,"> Minor styling fixes as well (Hail logo is tiny). Where is the Hail logo tiny? You mean the ""Hail"" in the center the / page?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7064#issuecomment-532254581:36,log,logo,36,https://hail.is,https://github.com/hail-is/hail/pull/7064#issuecomment-532254581,2,['log'],['logo']
Testability,"> No tests for this right now, although I can write . I think an UnsafeSuite test for this should be easy and effective.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6500#issuecomment-506490357:5,test,tests,5,https://hail.is,https://github.com/hail-is/hail/pull/6500#issuecomment-506490357,2,['test'],"['test', 'tests']"
Testability,"> Not sure what to do about wait for and ghost. rather silly of ghost to refuse connections on http when the base url is set to https. > The test failure that I'm running into currently has to do with the fact that the wait command there queries the endpoint without going through either the router or the gateway, (since it's e.g. hitting http://blog.wang/wang/blog/ directly), so it's getting the 301 redirect to https because the X-Forwarded-Proto header isn't set. I'm not sure what the right fix is in this case. I still don't quite understand why the wait command doesn't hit gateway. Isn't it just issuing an http request to `f'{base_url}/{endpoint)`? Why doesn't that hit gateway?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7381#issuecomment-548104962:141,test,test,141,https://hail.is,https://github.com/hail-is/hail/pull/7381#issuecomment-548104962,1,['test'],['test']
Testability,"> Oh, I misunderstood, I thought you were suggesting changing our FROM to stretch/9.6.; > ; > I think that should be fine, but can we do it as a separate PR since it seems orthogonal to this change which we're trying to get in for the demo tomorrow? (And in general orthogonal changes should be separate PRs so discussion on one part doesn't hold up the other parts.). Yes, although the gzip settings issued in this pr will be different between the two version. 1.10.3 doesn't have gzip on by default. I understand the value of conservative updates before public demonstrations, so will do what you ask. Btw, the full config if relying on nginx:10.15.8 goes from:. ```; FROM debian:9.5. RUN apt-get update -y && \; apt-get install -y nginx && \; rm -rf /var/lib/apt/lists/*. RUN rm -f /etc/nginx/sites-enabled/default; ADD @nginx_conf@ /etc/nginx/conf.d/hail.conf; ADD gzip.conf /etc/nginx/conf.d/gzip.conf. RUN ln -sf /dev/stdout /var/log/nginx/access.log; RUN ln -sf /dev/stderr /var/log/nginx/error.log. CMD [""nginx"", ""-g"", ""daemon off;""]; ```. to . ```; FROM nginx:1.15.8. RUN rm -f /etc/nginx/sites-enabled/default; ADD @nginx_conf@ /etc/nginx/conf.d/hail.conf; ADD gzip.conf /etc/nginx/conf.d/gzip.conf; ```. kind of neat.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5244#issuecomment-460378467:936,log,log,936,https://hail.is,https://github.com/hail-is/hail/pull/5244#issuecomment-460378467,4,['log'],['log']
Testability,"> Ok, so what you said makes sense. In that case, why do we also have a In(_, Type) constructor (def apply(i: Int, typ: Type): In = In(i, PType.canonical(typ)))?. My guess is that there are hundreds of lines of tests that used the old `In(i, virtual type)` and we didn't want to change those all at once. As long as the ptype is constructed using `canonical` both in the `In` and the call to `Compile`, this should be fine.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7868#issuecomment-574658178:211,test,tests,211,https://hail.is,https://github.com/hail-is/hail/pull/7868#issuecomment-574658178,1,['test'],['tests']
Testability,"> Re: testing, I wanted to wait on the spawned batch and ensure that it passed, but I had trouble doing that because it looks like the new rich progress bars are printed to stdout so I can't make use of json output and `jq`. Can we print the progress bars to stderr instead?. I think this is possible but I haven't looked into it. I'm opposed to stderr in Notebooks because I don't want it to appear with red background. I've recently realized that a lot of users find it concerning that we print so much red background text. You might also have a quiet mode? If you don't `wait` on the batch, do you still get a progress bar?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12471#issuecomment-1324145967:6,test,testing,6,https://hail.is,https://github.com/hail-is/hail/pull/12471#issuecomment-1324145967,1,['test'],['testing']
Testability,"> Regarding longs, to deal with alignment: right now we assume we're int aligned. To read longs, could we read the first 4 bytes as an int, then switch to longs, then do bits for the remaining length. Should be as terse. since the array is 4-byte-aligned, you can't read 4 bytes and switch to longs -- it's possible that the missing bits begin on an address that would produce aligned long reads. You'll need to compute whether you need to read an integer or not. This logic is somewhat complex, and I find the staged version harder to reason about (it took 5 minutes or so to understand the control flow). I would prefer the unstaged version, so that we can reason about correctness more easily, test the function more easily, and maintain it better in the future.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7646#issuecomment-561605053:469,log,logic,469,https://hail.is,https://github.com/hail-is/hail/pull/7646#issuecomment-561605053,2,"['log', 'test']","['logic', 'test']"
Testability,"> Relatedly, the auth system and the front end are not in this pull request (and AFACIT aren't in master yet?), which makes it harder to reason about the overall system. The auth system make sense as an independent PR (is that what #5162 is?). The changes that expose / use this new API (i.e. the UI component) should be a part of this PR so we can reason about the entire proposed change. I'm not sure how to really avoid this, some of it is the nature of our pull request goal (small, single-principle), and the other is the tradeoff of decoupling. This is also why I spend more time writing comments about the intended consumption of the notebook updates. Use those comments to reason about the overall system, and if that doesn't help, ask me to write more helpful comments.; ; The auth system is part of the Greenfield web pull request. That will be split up into something like 10-20 pull requests once the system is fully working, as mentioned in that repo. The auth-gateway will be in 2 of those (one for package-lock, one for the business logic). I've added the gateway changes to this particular pull request; that effectively shows the interface for authorization. I have mixed feelings about mixing that with the rest of this PR, happy to remove and issue separate PR.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5215#issuecomment-460065641:1048,log,logic,1048,https://hail.is,https://github.com/hail-is/hail/pull/5215#issuecomment-460065641,1,['log'],['logic']
Testability,"> Remaining issues:; >; > *WithIndexRespectsTransposition should test indices. Done. > Not currently using Gen.denseMatrix. Done. > isn't the block size always smaller than the size?. Good point. I took the square root of `Gen.interestingPosInt` to put them on the same length scale. This seems to generate OK results:. I ran the matrix generator 100 times [1] and found not terrible results. Unfortunately there's a preponderance of 31s, which comes whenever the random int exceeds 1000. Perhaps `interestingPosInt` is too often `Int.MaxValue` for use as a side length:; ```; def interestingPosInt: Gen[Int] = oneOfGen(; oneOf(1, 2, Int.MaxValue - 1, Int.MaxValue),; choose(1, 100),; posInt); ```. I also looked into the multipliable matrices method which similarly needs a `blockSize`, but this time the length scale is `x^1/3` because I have to generate a cube that fits in the Generator's `size`. I modified this to use the cubic root of an `Gen.interestingPosInt` as the `blockSize`. The results look not terrible [2]. > rebase changes in LDMatrix. done. > rename arbitraryHailBlockMatrix to arbitraryBlockMatrix. done. ## Footnotes. [1] Side length and `blockSize` of `squareBlockMatrixGen`:; ```; 6 46340; 31 1; 31 6; 2 38034; 31 15952; 1 36238; 31 1; 9 9; 3 28651; 31 2; 31 22272; 3 1; 6 46340; 31 26784; 31 27398; 8 46340; 31 1; 31 9; 31 32687; 1 39405; 9 11037; 31 46340; 31 10892; 9 25211; 1 46340; 7 7; 5 46340; 31 34790; 7 7; 8 46340; 31 46340; 1 2; 31 22021; 6 46340; 31 46340; 8 43459; 6 39273; 4 45617; 4 14821; 8 1; 31 7; 31 46340; 31 8; 31 24342; 31 34365; 31 42445; 6 8; 9 38891; 31 43108; 31 46142; 31 41962; 1 17392; 8 6; 31 46340; 31 4; 1 3; 31 43917; 3 44938; 7 1; 5 20769; 31 43156; 31 7; 31 21938; 31 45249; 1 31406; 1 40071; 31 7; 1 41043; 1 9; 1 1; 9 1; 31 1; 31 46022; 10 40633; 8 46340; 31 46340; 1 8; 1 42934; 31 1; 1 9; 3 1; 31 46340; 31 39641; 31 36241; 31 7; 31 1; 31 5; 31 43977; 31 4; 31 46340; 31 28129; 31 24906; 31 1; 31 7; 1 38660; 31 36026; 1 39369; 31 5; 31 18",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2270#issuecomment-337358741:65,test,test,65,https://hail.is,https://github.com/hail-is/hail/pull/2270#issuecomment-337358741,1,['test'],['test']
Testability,"> Should I get rid of that option?. Yes. For security, I don't think we should ever make our production database public, even in a limited way. For testing, we have a few options: use a test one as you say (in a non-production project?), use Cloud SQL proxy, spin up one locally, or make in-cluster testing easier. You can grant specific privileges to a user to a database in MySQL. I'm guessing you granted all on *.* which will allow them to create tables (among everything else). Basically, we should have an admin user that can create databases, and then individual users for each role that have read or read/write access to specific databases. Yeah, let's talk about it more today.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5618#issuecomment-473946373:148,test,testing,148,https://hail.is,https://github.com/hail-is/hail/pull/5618#issuecomment-473946373,3,['test'],"['test', 'testing']"
Testability,"> So error propagation from CI back to hailctl isn't great right now. (Something worth fixing!) If it an error in what you're trying to deploy (e.g. branch not found, syntax error in build.yaml, etc.) you can find it in the CI log. I should fix it!. edit: Yeah, I could see it in the logs, I just didn't understand some of the syntax, so dug around CI and deploy codebase, figured it out. Monitoring wasn't expected, thanks.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7015#issuecomment-540028930:227,log,log,227,https://hail.is,https://github.com/hail-is/hail/pull/7015#issuecomment-540028930,2,['log'],"['log', 'logs']"
Testability,"> Some small comments, but I'm also not sure I totally understand what's going on with the new pdf function. I can explain in person, it's pretty cool (I think). That might also help me figure out something to say in the documentation, though since it's experimental I don't think it needs complete documentation for now. > Would it be possible to add some python tests for the new stuff?. Do you think tests that just check that the `_compaction_counts` field exists are worth having? Beyond that, everything is non-deterministic and hard to test, and I don't know how to test plotting methods either. But I've been playing with them and they are working extremely well.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6039#issuecomment-490169359:364,test,tests,364,https://hail.is,https://github.com/hail-is/hail/pull/6039#issuecomment-490169359,4,['test'],"['test', 'tests']"
Testability,"> Sorry, I wasn't clear before. The Batch LD Clumping example does not require Hail Query (and, more importantly, a JVM) to be installed on *the computer that submits the batch*. Hail is imported and used inside of the Batch task that performs GWAS. That task runs inside a Docker container that has Hail installed (its derived from `hailgenetics/hail`).; > ; > ; > ; > I'm hesitant to make the *submission* of a batch dependent on the Hail Query library. Particularly when we have relatively low-effort alternative approaches. I'm delighted any time I see batch tasks use Hail Query! Konrad's Pan UKB work also does this. Right I realize this, why I mentioned unit test (to make unit tests work without calling hail, we would need to wrap each function we want to test in a cli interface, and then containerise those functions...this seems not so friendly to contributors). A 2nd question: how would a contributor submit write hybrid hail query/batch code that called batch from within a hail query script? So hail transforms data, say generates pc's, writes table, and then issues some batch commands that use a pre-built image, as opposed to requiring them to containerise their hail cod3. This will be useful: containerisation is the stated biggest pain point of batch, from my interviews. And one of the biggest hail issues is shuttling data between hail and other processes, which has led people to ask for tighter integration, or more statistical tools (so that they don't need to go out to those other tools, like plink). Showing Batch working from within hail-query scripts would be useful because it will show a much easier integration, and those examples or contributed modules should live somewhere (and that seems not to be hailtop, because this requires batch to be called from code that is calling hail directly, rather than through an image).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9194#issuecomment-671459432:666,test,test,666,https://hail.is,https://github.com/hail-is/hail/pull/9194#issuecomment-671459432,3,['test'],"['test', 'tests']"
Testability,"> Thanks for sharing this detailed plan!; > ; > So, I don't currently have any plan for, I suppose, ""applications"" that use Batch. Since we plan to support, maintain, and test the Hail Batch regenie implementation, I think it doesn't belong in a ""contrib"" directory. The hail python package has a `genetics` module for genetics-specific Hail Query functionality, let's mirror that structure. Let's move REGENIE and any non-Python dependencies of it into `hailtop/batch/genetics/regenie`. Sure. > How is the Dockerfile meant to be used? As written it doesn't appear that it would work because there doesn't exist any regenie source code to COPY in. It's meant to create a Regenie docker image that we could use. It's a copy of the regenie c++ repo's dockerfile, with the removal of the ENTRYPOINT /usr/local/bin/regenie, so that I could issue a command that included an executable, which is convenient to give me the ability to check that intermediate files are actually created (wc, ls) by batch, and because that seems more idiomatic for batch. I don't think there is a published regenie image, but docker hub is down so can't double check. . You're right, I shouldn't have deleted the bulk of the repo, kept as is. Didn't want to deal with submodules. > I've made some other in-line comments in the python file. It's not clear to me how all those other files are related to the python files and I'm a bit uncomfortable adding a whole directory with a LICENSE file, especially when not all the files in the directory fall under that license (e.g. the regenie py file) and moreover the license makes claims about things linking to BGEN, which none of our code here does. The license is only contained within the folder with the licensed files. In a previous conversation with Nate/Cotton, if we use any open-source software, best to keep those files segregated, alongside their license (license must be kept alongside the code, easier to see the demarcation if in a separate folder). > We have some BG",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9194#issuecomment-668357987:171,test,test,171,https://hail.is,https://github.com/hail-is/hail/pull/9194#issuecomment-668357987,1,['test'],['test']
Testability,"> Thanks, added with one tweak. Sadly I don't know how to convince your code analyser that using `randint` to make test cases in test code is not a security issue…. Me neither :shrug: . > Feel free to push to PR branches directly, or just to add things while merging. . I don't have write access to the `populationgenomics` fork, hence the PR :)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14700#issuecomment-2402897043:115,test,test,115,https://hail.is,https://github.com/hail-is/hail/pull/14700#issuecomment-2402897043,2,['test'],['test']
Testability,"> The 9 is about stopping the exponential backoff. At i=9, (0.1 * 2^9 is roughly half a second) we stop backing off and keep polling with delays uniformly chosen between 0 and half second.; > ; > We might actually want a hard limit on the number of backoffs, as written this test could trigger an infinite loop. I'll add a max number of iterations. What does a failure indicate? The only concern I have is that we have a stochastic process, but I don’t know whether 14 indicates a 99.99% success target, or something else. Also, if this test fails for a future batch PR, should we pass the contribution under some circumstances.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5503#issuecomment-470262025:275,test,test,275,https://hail.is,https://github.com/hail-is/hail/pull/5503#issuecomment-470262025,2,['test'],['test']
Testability,"> The 9 is about stopping the exponential backoff. At i=9, (0.1 * 2^9 is roughly half a second) we stop backing off and keep polling with delays uniformly chosen between 0 and half second.; > ; > We might actually want a hard limit on the number of backoffs, as written this test could trigger an infinite loop. I'll add a max number of iterations. What does a failure indicate? The only concern I have is that we have a stochastic process, but I don’t know whether 14 indicates a 99.99% success target, or something else. Also, if this test fails for a future batch PR, should we pass the contribution under some circumstances. > Ok, what do you think of this?; > ; > ```; > i = 0; > while len(output) != 4:; > time.sleep(0.100 * (3/2) ** i); > i = i + 1; > if i > 14:; > break; > assert len(output) != 4; > ```; > We exponentially back off with base 3/2. We break as soon as the condition is satisfied. If we wait more than a minute (`0.1 * (3/2)^14` is roughly 30s, so we've waited about a minute in total), we bail (and the assert will fail). Seems completely reasonable to prevent infinite loops in CI. I don’t really understand under which circumstances this should fail, and whether 30s is enough to ensure that we get rare false positive test failures. I trust your judgment on this, so if you say 30s is good enough, I think we should start there and adjust if test failures on batch PRs pile up.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5503#issuecomment-470263694:275,test,test,275,https://hail.is,https://github.com/hail-is/hail/pull/5503#issuecomment-470263694,6,"['assert', 'test']","['assert', 'test']"
Testability,"> The failure isn't the dataproc delete, that's just what you get when you try to delete a cluster that wasn't created. You had an import error:; > ; > ```; > File ""/hail/repo/hail/python/hail/fs/google_fs.py"", line 3, in <module>; > import gcsfs; > ModuleNotFoundError: No module named 'gcsfs'; > ```. I see. gcsfs is already dynamically imported. If the apiserver tests are being run by CI, it needs to have the gcsfs module, unless we want to make fs lazy.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5878#issuecomment-485522267:366,test,tests,366,https://hail.is,https://github.com/hail-is/hail/pull/5878#issuecomment-485522267,1,['test'],['tests']
Testability,"> The one thing I'd say is just that when we make a user facing change, we try to make one of the commits look like:; >; > CHANGELOG: Added or_error method to SwitchBuilder; >; > This ends up being helpful when I have to go through and generate the change log for a new version release. Good to know, updated the commit message. It would be nice to document conventions like this in the [docs for software developers](https://hail.is/docs/0.2/getting_started_developing.html#contributing) and/or a [contributing file](https://docs.github.com/en/free-pro-team@latest/github/building-a-strong-community/setting-guidelines-for-repository-contributors).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9749#issuecomment-735921468:256,log,log,256,https://hail.is,https://github.com/hail-is/hail/pull/9749#issuecomment-735921468,1,['log'],['log']
Testability,"> They are? Where is the type set?. don't know what you mean here, sorry. I meant that all of this logic exists in functions.py on the expression stuff!",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5082#issuecomment-451950109:99,log,logic,99,https://hail.is,https://github.com/hail-is/hail/pull/5082#issuecomment-451950109,1,['log'],['logic']
Testability,"> This doesn't track the length if known like the old code. That will make some things e.g. ToArray much more expensive. I think you should finish all the stream processing nodes to unblock lowering and then return to this. Right, I was waiting to get the hard parts right first. This should be easy to add back. > Finally, this seems a silent on the the question of region management. What's your picture here? The region management write had consumers passing regions to producers, but I don't see how that fits in here. I put the region management on hold when I realized there was no way to make a stream free any regions it owns when its consumer stops pulling from it. So the new stream design is just to expose those setup and finalization hooks, where creating and freeing regions can go. When I start moving the region management logic I had over to the new design, I'll have to see if regions have to be baked into streams, or if they can be orthogonal. My plan was to first try making `EmitStream` return `Stream[Region => EmitTriplet]`.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8129#issuecomment-589676137:839,log,logic,839,https://hail.is,https://github.com/hail-is/hail/pull/8129#issuecomment-589676137,1,['log'],['logic']
Testability,"> This has significantly improved the simplicity of the parser, so much so that much of the logic therein could be simplified further, though I think that's beyond the scope of this change. Agreed. But as my follow up will be a complete rewrite of the parser, I definitely don't want to do more to simplify the current one. > I like the separation of type-checking and parsing, however I'd prefer in your implementations of `typecheck` that you assert one thing at a time. That way when things fail, it'll be clear which assertion was fired (ie if `(a && b && c)` fails, you don't know if it's `a` or `b` or `c`, whereas; > ; > ```scala; > assert(a); > assert(b); > assert(c); > ```; > ; > would give you that information. Good suggestion. I only moved assertions here, didn't add any new ones, but I don't mind splitting up some that I moved.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13990#issuecomment-1809203400:92,log,logic,92,https://hail.is,https://github.com/hail-is/hail/pull/13990#issuecomment-1809203400,7,"['assert', 'log']","['assert', 'assertion', 'assertions', 'logic']"
Testability,"> This is probably fine for now that we don't have sameWithinTolerance for unkeyed tables. _same is only used by us in tests. If we want that functionality, then the table must be keyed and the keyed field won't be approximately compared for equality. Weird, Github isn't letting me respond to this comment. Are you requesting a change? To make `Table.same` require the table to by keyed? I'm okay with that, I just want to clarify.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3442#issuecomment-385969197:119,test,tests,119,https://hail.is,https://github.com/hail-is/hail/pull/3442#issuecomment-385969197,1,['test'],['tests']
Testability,"> Use os.environ in the test (and remember to set it back to its old value it afterward). This won't work. Hail has already been initialized. We definitely want to set these for every benchmark, at least for now -- this could be responsible for docker blowing limits (we only allocate 1.5 cores, I think)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8050#issuecomment-583462187:24,test,test,24,https://hail.is,https://github.com/hail-is/hail/pull/8050#issuecomment-583462187,2,"['benchmark', 'test']","['benchmark', 'test']"
Testability,"> We have a 35K cohort. The VCF format of chr1 is 2.4T. Heh. So, yes, ""project"" VCFs grow super-linearly in the number of samples. I (and others) are currently pushing very hard for the VCF spec to support two sparse representations: ""local alleles"" (samtools/hts-specs#434) and ""reference blocks"" (samtools/hts-specs#435). When using these two sparse representations, you should be able to store 35,000 whole genomes in ~10TiB of GZIP-compressed VCF. What is your calling pipeline? Do you generate GVCFs? If yes, I strongly recommend you use the [VDS Combiner](https://hail.is/docs/0.2/vds/hail.vds.combiner.VariantDatasetCombiner.html#hail.vds.combiner.VariantDatasetCombiner) to produce a [VDS](https://hail.is/docs/0.2/vds/index.html). You can read more details in [this recent preprint we wrote](https://www.biorxiv.org/content/10.1101/2024.01.09.574205v1.full.pdf), but a VDS of 35,000 whole genomes should be a few terabytes. I'd guess 4 TiB, but it depends on your reference block granularity. I strongly recommend using size 10 GQ buckets. ---. > I don't know the Kryo JAR. I tested on both docker images hailgenetics/hail:0.2.126-py3.11 and hailgenetics/hail:0.2.127-py3.11. Those should use Kryo 4.0.2. OK. My conclusion is that Kryo still has a bug preventing the serialization of very large objects. This becomes a limitation in Hail: we cannot support PLINK files with tens of millions of variants. Our community is largely transitioning to GVCFs and VDS, so I doubt we'll improve our PLINK1 importer to support such large PLINK1 files. That said, PRs are always welcome if loading such large PLINK1 files is a hard requirement for you all.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/14168#issuecomment-1922048526:1085,test,tested,1085,https://hail.is,https://github.com/hail-is/hail/issues/14168#issuecomment-1922048526,1,['test'],['tested']
Testability,> We have to apply the TF before we can test this right because the secrets are missing?. I already applied this terraform since I didn't see another practical way to go about it and it doesn't mutate any existing resources.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13202#issuecomment-1608203331:40,test,test,40,https://hail.is,https://github.com/hail-is/hail/pull/13202#issuecomment-1608203331,1,['test'],['test']
Testability,> We should run R's PCRelate on a few randomly generated test datasets and save them into hail's repo and use them for testing. omg yes please,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4439#issuecomment-424486040:57,test,test,57,https://hail.is,https://github.com/hail-is/hail/issues/4439#issuecomment-424486040,2,['test'],"['test', 'testing']"
Testability,"> We will. But good news! Old 100 exome chr1 test: 38 min, new test: 15 min. Shhhhh don't tell whoever pays our cloud bill",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7252#issuecomment-540803531:45,test,test,45,https://hail.is,https://github.com/hail-is/hail/pull/7252#issuecomment-540803531,2,['test'],['test']
Testability,"> Well yes. What I mean is in an automated fashion. We haven't deployed any builds in around a day because of this error, the deploy job keeps restarting and it was very difficult for me to interrogate what was going on. yeah, sorry, that's on me. I didn't notice because the pod's log didn't change between the first PR, which didn't have libsass, and the next, which did; assumed CI hadn't deployed it because it was backed up.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5489#issuecomment-468435191:282,log,log,282,https://hail.is,https://github.com/hail-is/hail/pull/5489#issuecomment-468435191,1,['log'],['log']
Testability,"> What do you mean by ""a maintenance error is generated in Ghost""? I kind of assumed that the website wasn't working right now because the tests finished and `cleanup_deploy_blog` shut down the blog in the PR namespace.; > ; > The ""endpoint"" that I'm passing in to the `wait` command for the blog in build.yaml is `/`, which _should_ do the right thing interally because the URL that's actually being constructed in `wait-for.py` becomes `http://{service}.{namespace}/{namespace}/{service}{endpoint}`, which gives you the right thing.; > ; > The test failure that I'm running into currently has to do with the fact that the wait command there queries the endpoint without going through either the router or the gateway, (since it's e.g. hitting http://blog.wang/wang/blog/ directly), so it's getting the 301 redirect to https because the `X-Forwarded-Proto` header isn't set. I'm not sure what the right fix is in this case.; ```; [2019-10-30 20:03:15] [36mINFO[39m Ghost boot 5.169s; [2019-10-30 20:03:16] [31mERROR[39m ""GET /pr-7381-default-sx9ail9zkm77/blog/"" [31m503[39m 40ms; [31m; [31mSite is starting up, please wait a moment then retry.[39m. [1m[37mError ID:[39m[22m; [90m4f8b8590-fb50-11e9-ab7c-9dd7e9eff310[39m. [90m----------------------------------------[39m. [90mMaintenanceError: Site is starting up, please wait a moment then retry.; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7381#issuecomment-548102772:139,test,tests,139,https://hail.is,https://github.com/hail-is/hail/pull/7381#issuecomment-548102772,2,['test'],"['test', 'tests']"
Testability,"> What happens? I just tested it and it works fine for me. Although we probably shouldn't have spaces in workshop names, maybe I'll do that if/when I add validation. It would claim deletion without deleting. Must have been resolved or caused by a separate issue.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7162#issuecomment-536318084:23,test,tested,23,https://hail.is,https://github.com/hail-is/hail/pull/7162#issuecomment-536318084,1,['test'],['tested']
Testability,"> What is the best way to test gateway?. Deploy the new gateway. Yes, it's live. Yes, it might break stuff. Good luck.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7015#issuecomment-541104331:26,test,test,26,https://hail.is,https://github.com/hail-is/hail/pull/7015#issuecomment-541104331,1,['test'],['test']
Testability,"> What were the errors? It should be OK to hold the job object around and e.g. use it to ask for logs even if the job is deleted. We were setting the Job id attribute to None on deletion. ci then queried various properties of the job, passing None as the job id in the URL. That caused batch to 500 converting the id to an integer (this is itself a bug). Leaving the id in the Job might also fix it, but it seems wrong in the REST setting to delete an object, but still be able to query it.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5655#issuecomment-476227436:97,log,logs,97,https://hail.is,https://github.com/hail-is/hail/pull/5655#issuecomment-476227436,1,['log'],['logs']
Testability,"> What's the pressing reason for this to join the mainline?. Ben has wanted this for a while, and there's interest from the group. > I'd prefer to stick to the usual process on services team where thorough code review of code and test-code is done for stuff under our purview (as things in hailtop/batch do). Sure. Regarding testing, in my experience regenie (the C++ program) crashes when given improper inputs, rather than writing anything out, so there is a reduced testing need (we should. verify the expected number of non-empty outputs are created I think, and some basic tests that we parse inputs). My plan for getting regenie in is roughly 4 part, of which this is 1. ; 1) Get the most basic / canonical version of regenie up, on the local backend. This version should take all of the arguments demonstrated in the [regenie tutorial / example](https://rgcgithub.github.io/regenie/options/), pass them to step 1 and step 2, and write an output. ; * Here I'm mostly interested in making sure I'm using Batch Resource classes correctly.; 2) Get the same working for the ServiceBackend.; 3) Expand the service offering to run the paper's example (may require some tweaks to the input handling code), and test that we can run this at scale; 4) Introduce a per-phenotype parallelism mode, which loses a bit of per-core efficiency in favor of greater scale out, benchmark that.; 5) Handle all other combinations of inputs.; 6) Optimize performance (local RAID-0 SSDs up to 9TB, larger instances). So, if at all possible, I would like to stay focused on the first task, within the bounds of what you need to accomplish as leader of the services team; I'd really appreciate your help.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9194#issuecomment-667434082:230,test,test-code,230,https://hail.is,https://github.com/hail-is/hail/pull/9194#issuecomment-667434082,6,"['benchmark', 'test']","['benchmark', 'test', 'test-code', 'testing', 'tests']"
Testability,"> Whoops, sorry clipboard malfunction. I meant [here](https://github.com/hail-is/hail/blob/e6728b812e73a8bd636046bed22f97c5b47a5f12/hail/src/main/scala/is/hail/lir/X.scala#L416), when trying to add code to an lir block after a terminating control op. This was turning into quite a hairy change. I'm going to merge this as its own thing and work on fixing the fallout from the assertion in a follow-up change.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13674#issuecomment-1734185921:376,assert,assertion,376,https://hail.is,https://github.com/hail-is/hail/pull/13674#issuecomment-1734185921,1,['assert'],['assertion']
Testability,"> Why is writing the hail table first more efficient than just directly exporting from the grouped matrixtable?. We take special care to ensure our system is as efficient as possible when reading or writing to this native format. So, it's partly a sociological thing. On the practical end of things, Hail's native formats (for Tables and Matrix Tables) are a partitioned binary format. The partitioned part means Hail can use many cores in parallel to process and write the dataset. The binary part means that Hail need not use unnecessarily large (in terms of bytes) representations of values. These three things together make writing the native formats use less time, use less memory, and be more reliable. ---. > One thing I noticed is the mt_hwe_vals variable in my code below is a MatrixTable and not a GroupedMatrixTable. Is this correct?. Yes, after you aggregate you get back an MT with a different column key. ---. The `entries` method converts your matrix table from a compact and efficient matrix into a ""long"" and inefficient table. I generally recommend avoiding it if you can. However, if you only have a handful of ancestries, I wouldn't expect this to be *that* bad. You can just write the MT itself:. ```python3; ancestry_table = hl.Table.from_pandas(ancestry.astype({""person_id"":str}), key='person_id'); mt = mt.annotate_cols(ancestry = ancestry_table[mt.s].ancestry); mt_hwe_vals = mt.group_cols_by(mt.ancestry).aggregate(hwe = hl.agg.hardy_weinberg_test(mt.GT)); mt_hwe_vals = mt_hwe_vals.select_rows().select_cols() # drop irrelevant row and column fields; mt_hwe_vals.write(bucket + '/hwe.ht'); ```. ---. > I tried modifying the code to what is shown below but I'm still having the same issue. Just to be clear it's the exact same error ""Container exited with a non-zero exit code 137. ""? This makes me think we have an issue with `entries`, because, even though it's not great, it shouldn't be blowing RAM here. Can you share the log file from your previous or next attempt?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13287#issuecomment-1679755636:1953,log,log,1953,https://hail.is,https://github.com/hail-is/hail/issues/13287#issuecomment-1679755636,1,['log'],['log']
Testability,"> Yeah this is my bad, I thought we were good to go with the new UI @cseed ?. Yes, eventually. But the old code works and is tested. The new stuff isn't done, reviewed or in yet. There's no sense deleting the working thing until the new thing is ready to replace it, esp. with a workshop coming up.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5215#issuecomment-464226078:125,test,tested,125,https://hail.is,https://github.com/hail-is/hail/pull/5215#issuecomment-464226078,1,['test'],['tested']
Testability,"> Yeah, I imagine we do. `InferPType` isn't used right now, correct? I'll add the new case, just checking if there's a test that would have caught this. Yeah, I edited my comment. Totally not used right now, which is why you didn't notice. I think making an issue is also fine, like you said it would be an enhancement, not something necessary for what you wrote to work. Looks really cool btw.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7682#issuecomment-562812319:119,test,test,119,https://hail.is,https://github.com/hail-is/hail/pull/7682#issuecomment-562812319,1,['test'],['test']
Testability,"> You need to add a test to ensure `last` works. You'll find a method called `test_array_head` in `test_expr.py`. I'd change that to `test_array_first`, call `first` instead. Then I'd add `test_array_last` and make sure there's a test for empty and nonempty arrays. Thanks. Tests were included in e2fcfb61a5df5ab497269d32c12a5d5fb652ddd4. Are there more checks that should be added to those?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9474#issuecomment-694955390:20,test,test,20,https://hail.is,https://github.com/hail-is/hail/pull/9474#issuecomment-694955390,3,"['Test', 'test']","['Tests', 'test']"
Testability,"> Your tool should also examine the first word of the MAKEFLAGS variable and look for the character n. If this character is present then make was invoked with the ‘-n’ option and your tool should stop without performing any operations. Added. > Your tool should be sure to write back the tokens it read, even under error conditions. This includes not only errors in your tool but also outside influences such as interrupts (SIGINT), etc. You may want to install signal handlers to manage this write-back. I mean, I doubt anyone is sending signals other than SIGKILL to our build system, but I added some signal handlers that just `sys.exit(0)` which triggers the finally (I checked). > We also get a lot of ‘warning: jobserver unavailable: using -j1. Add +' to parent make rule.’warnings when runningmake jvm-test`. This is because our C++ backend uses make to drive compilation (wtf‽). I strip MAKEFLAGS before calling gradle now.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6923#issuecomment-524446104:809,test,test,809,https://hail.is,https://github.com/hail-is/hail/pull/6923#issuecomment-524446104,1,['test'],['test']
Testability,"> ah yes - the identity used to create the SAS token needs to have a control plane role on the Storage Account - Owner, Contributor, or (most specific) Storage Account Key Operator Service Role... Is that a manageable role to configure for testing or should I try to explore alternatives in the generation?. Thanks! This is totally fine, I'll just configure the SP that we use for the inter-cloud tests with the key operator role and re-run the tests.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13140#issuecomment-1579202097:240,test,testing,240,https://hail.is,https://github.com/hail-is/hail/pull/13140#issuecomment-1579202097,3,['test'],"['testing', 'tests']"
Testability,"> ah---that's just a log message from the readinessProbe sending requests before the server is fully up, I believe. So partly it looks like that, especially with Ghost timing itself as >5s to actually listen on the port after the container starts up (or really after Ghost starts running which may be different). The strange this is the timing. I thought the timestamps were supposed to correspond to the time the request was received/log message was generated (the log messages themselves can be printed out of order, but I think the timestamps should be accurate).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7381#issuecomment-548103795:21,log,log,21,https://hail.is,https://github.com/hail-is/hail/pull/7381#issuecomment-548103795,3,['log'],['log']
Testability,"> all options that are also gcloud options (such as --project)? [That] could be difficult. Yes, this is what I was thinking. `hailctl` could parse (as much as is needed) the `gcloud` options to find options (like `--project`) and modify others (like `--initialization-actions`). The latter is somewhat surprising since one expects everything after the `--` to pass through unchanged. OK, summarizing our options so far:. - hailctl has no options that are also gcloud options. gcloud options go after the `--`, and get modified as needed by hailctl (with a message).; - hailctl has no gcloud options that are simply pass through. gcloud options that are needed by hailctl commands are hailctl options (like `--project`). When a gcloud option is needed by some hailctl command, all hailctl commands take that option (when it makes sense), even if in some cases that makes them simply pass through. This fixes the inconsistency issues, but the user still needs to keep track of which gcloud options needs to be passed to hailctl and which are passed to gcloud directly. If you specify an option twice, once to hailctl and once to gcloud, we invoke gcloud with the option duplicated. Pros and cons:; - The first option has the most consistent interface.; - The first option modifies options after the --, which is surprising.; - The first option involves replication (some of) the gcloud option parsing semantics, which is annoying.; - The second option requires the user to know which gcloud options need to be passed to hailctl instead (but globally, not per-command).; - With the second option, if we want to warn (or error) on duplicate options, we're back to duplicating the gcloud option parsing logic. I think I'm coming around to the second option. > so that hailctl dataproc submit cluster -- --script-options would work. I see, so if there is only one `--` it refers to script options, and if there are two, the first one corresponds to gcloud options? I think that should be doable.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9842#issuecomment-758128554:1698,log,logic,1698,https://hail.is,https://github.com/hail-is/hail/pull/9842#issuecomment-758128554,1,['log'],['logic']
Testability,"> another assertion to remove. Could have missed others, this is a big diff. Will double check for others in all modified files, one min (I don't think I added any new ones however)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7904#issuecomment-576364613:10,assert,assertion,10,https://hail.is,https://github.com/hail-is/hail/pull/7904#issuecomment-576364613,1,['assert'],['assertion']
Testability,> bump. Failing a test,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7694#issuecomment-565620376:18,test,test,18,https://hail.is,https://github.com/hail-is/hail/pull/7694#issuecomment-565620376,1,['test'],['test']
Testability,"> can pass down an allocator that returns regions backed by a single fixed RegionMemory, with no-op freeing. Even this may be expensive when we're doing something like ToArray(StreamRange). Let's start by benchmarking and seeing where we're at with the current benchmarks?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9106#issuecomment-661888188:205,benchmark,benchmarking,205,https://hail.is,https://github.com/hail-is/hail/pull/9106#issuecomment-661888188,2,['benchmark'],"['benchmarking', 'benchmarks']"
Testability,"> do we have tests that catch when we pass out-of-scope refs into the comparison func? I think scala won't catch that (see my comment about Binds) but maybe we already do in Python (should still fix binds). We don't, but I'm confident that the changes I make to the parser env when parsing the tiebreaker will catch issues. https://github.com/chrisvittal/hail/blob/03c36f3980412fd62cf623fc75deefdc8d79afe9/hail/src/main/scala/is/hail/expr/ir/Parser.scala#L976C7-L989",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12295#issuecomment-1431690407:13,test,tests,13,https://hail.is,https://github.com/hail-is/hail/pull/12295#issuecomment-1431690407,1,['test'],['tests']
Testability,> gidgethub. Will remove dependencies in separate PR so I don't want to wait for all the images to rebuild. Can't quite get rid of Flask yet as it is used in callback tests. Could you help me understand what the benefit of gidgethub is over our previous strategy? Since we generally prefer minimal deps,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7064#issuecomment-531938132:167,test,tests,167,https://hail.is,https://github.com/hail-is/hail/pull/7064#issuecomment-531938132,1,['test'],['tests']
Testability,> how it's impossible to use timings currently inside cleanup blocks because it could accidentally re-raise a deleted error. Can you explain this to me? I saw Dan had a comment as well in the JVMJob that stated this. Our code seems to be always this:. ```; try:; with self.step('running'):; self.run_until_deleted or completed(); finally:; with self.step('uploading log'):; self.upload_log(); ```. The upload log step should propagate the deletion error from above.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11429#issuecomment-1054581169:366,log,log,366,https://hail.is,https://github.com/hail-is/hail/pull/11429#issuecomment-1054581169,2,['log'],['log']
Testability,"> looks like a compile error in TestUtils.scala.; > ; > The rest looks good, will approve when tests pass. I fixed `TestUtils.scala`; the issue was a missing parameter in a call to the (changed) `MatrixVCFReader`. Should I rebase and squash all of my commits into a single commit, or are you OK with merging my branch with the discrete feature commits (i.e., non-""Merge remote-tracking branch"" commits)?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5077#issuecomment-453215900:32,Test,TestUtils,32,https://hail.is,https://github.com/hail-is/hail/pull/5077#issuecomment-453215900,3,"['Test', 'test']","['TestUtils', 'tests']"
Testability,"> make install-wheel and then PYTHONPATH="""" python -c ""import hail; hail.init()"". Should this be an automated test?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6437#issuecomment-504550511:110,test,test,110,https://hail.is,https://github.com/hail-is/hail/pull/6437#issuecomment-504550511,1,['test'],['test']
Testability,"> one design comment, otherwise looks great. Can you point me to the file (gs path is fine) that includes the latest benchmarks for this branch?. gs://hail-benchmarks-2/ehigham/compute-or-reload-partitions",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12821#issuecomment-1509140605:117,benchmark,benchmarks,117,https://hail.is,https://github.com/hail-is/hail/pull/12821#issuecomment-1509140605,2,['benchmark'],"['benchmarks', 'benchmarks-']"
Testability,"> oops, forgot to request changes.; > ; > assertion should move into getNestedElementPTypes as something like the following:; > ; > ```scala; > val vTypes = values.iterator.map(_.virtualType).toSet; > if (vTypes.size != 1); > throw new AssertionError(s""invalid call to getNestedElementPTypes: $vTypes""); > ```. Should we check isOfType instead of virtual type, for case when we say try to coalesce canonical and non-canonical implementations.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7842#issuecomment-574208348:42,assert,assertion,42,https://hail.is,https://github.com/hail-is/hail/pull/7842#issuecomment-574208348,2,"['Assert', 'assert']","['AssertionError', 'assertion']"
Testability,"> runtime in the container status is a little confusing. It's fine for now, but for user interface, runtime should be a top level state, and starting and running should be substates. But again, this is fine for now. I'm a little confused by this. runtime isn't a state, it is rough the runtime of the container. Note, isn't the full runtime: it doesn't include image pull or log upload, for example. I included it in timing because it was something I timed. I included it because (1) it is comparable to `docker run` for comparison, and (2) I think it is what we should change the user for the runtime of the container ... I think? pull is also non trivial, as well as the storage of the image while it is running. Billing is going to be a challenge.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7354#issuecomment-545167038:375,log,log,375,https://hail.is,https://github.com/hail-is/hail/pull/7354#issuecomment-545167038,1,['log'],['log']
Testability,"> since the array is 4-byte-aligned, you can't read 4 bytes and switch to longs -- it's possible that the missing bits begin on an address that would produce aligned long reads. You'll need to compute whether you need to read an integer or not. Right, my proposal would be to first read an int (provided the length has at least 32 bits left), at which point I think I'm 8-byte aligned (address xxx4, to address xxx8). Then the rest of the loops logic is effectively the same as you had, except reading longs instead of bytes in the middle loop. So this version would have 2 loops and 3 length checks, as opposed to 3 loops and 3 length checks, and be 2x as fast in the limit.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7646#issuecomment-561694360:445,log,logic,445,https://hail.is,https://github.com/hail-is/hail/pull/7646#issuecomment-561694360,1,['log'],['logic']
Testability,"> submit 50-way parallel bunch, with a maximum of (by default) 10 individual request failures; > if any request fails, raise an exception, which is caught by outer submit, which retries a configurable number of times, logging a configurable number of errors. I haven't dug into the PR yet, but will just remark I'm going to argue pretty strenuously to maintain our current model here: infinitely retry transient errors with exponential backoff and no retry of non-transient errors.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7875#issuecomment-574377227:218,log,logging,218,https://hail.is,https://github.com/hail-is/hail/pull/7875#issuecomment-574377227,1,['log'],['logging']
Testability,"> test/test-ci.py::test_pull_request_trigger FAILED. This is the flakey one, right? Can we disable it until we get it fixed? Flakey tests are not OK.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5638#issuecomment-474571477:2,test,test,2,https://hail.is,https://github.com/hail-is/hail/pull/5638#issuecomment-474571477,3,['test'],"['test', 'test-ci', 'tests']"
Testability,"> the TableIR doesn't define partitionCounts. statically known partition counts are used to optimize `.count()` when we know the partition sizes. Here that doesn't apply, so I don't think you need to define that method (it inherits `def partitionCounts = None`). > perhaps ""LiftLiterals"" was changed to ""LiftNonCompilable"". Yes, it was. No need to write a rule for this. Separately, I think we should delete the checklist. It'll never be correct, since it's not checked against the codebase. To add an IR node, one needs to understand the compiler, and we can't adequately document that in a bullet list right now (over time, things should get simpler). . If a node is missing from somewhere it needs to appear, then tests should catch that case.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6689#issuecomment-513935766:717,test,tests,717,https://hail.is,https://github.com/hail-is/hail/pull/6689#issuecomment-513935766,1,['test'],['tests']
Testability,"> the data should be really deterministic so I'm not sure why those counts are off, but at least those counts and times are more accurate to what we are seeing so probably it means your test environment is reasonable. I guess the exact query isn't important, more the code shape and the kinds of operations hail's doing. Given the timings, it may be more-or-less representative.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13882#issuecomment-1821675042:186,test,test,186,https://hail.is,https://github.com/hail-is/hail/issues/13882#issuecomment-1821675042,1,['test'],['test']
Testability,"> the speed test shows it still slower than printf. FWIW, that benchmark is dominated by floating-point formatting where fmt falls back to `snprintf` at the moment. For other argument types fmt is faster than glibc's (s)printf. In particular, integer formatting is significantly faster: http://www.zverovich.net/2013/09/07/integer-to-string-conversion-in-cplusplus.html",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3973#issuecomment-413243985:12,test,test,12,https://hail.is,https://github.com/hail-is/hail/pull/3973#issuecomment-413243985,2,"['benchmark', 'test']","['benchmark', 'test']"
Testability,"> they got bundled into assertEvalsTo. Yes, and assertEvalSame. Quite a bit of stuff is running through that, and it is definitely getting tested because I had to squash a bunch of bugs.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4663#issuecomment-434466425:24,assert,assertEvalsTo,24,https://hail.is,https://github.com/hail-is/hail/pull/4663#issuecomment-434466425,3,"['assert', 'test']","['assertEvalSame', 'assertEvalsTo', 'tested']"
Testability,"> this is the parsable type. It's not requiredness, it's entry array index. Oops, you're totally right, I scanned too fast. Right, it's that the rvRowType changed. So the rvRowType being part of the MatrixType is really a workaround until we have physical types. It shouldn't be part of the ""visible"" state of the MatrixType. Yeah, upcast via MatrixMapRows can do it:. ```; val newRVRow = newRow.typ.asInstanceOf[TStruct].fieldOption(MatrixType.entriesIdentifier) match {; case Some(f) =>; assert(f.typ == child.typ.entryArrayType); newRow; case None =>; InsertFields(newRow, Seq(; MatrixType.entriesIdentifier -> GetField(Ref(""va"", child.typ.rvRowType), MatrixType.entriesIdentifier))); }; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4527#issuecomment-429190070:490,assert,assert,490,https://hail.is,https://github.com/hail-is/hail/issues/4527#issuecomment-429190070,1,['assert'],['assert']
Testability,"> we don't have a way to test this right now, right? (we could write something that templates with mock data); > ; > I want to next add something that colors the status link - but this will involve a bit of jinja language which I'll probably get wrong at first. Yeah, we have no ui-related tests. Jackie had previously made a suggestion to output the rendered web page as a build artifact, which would be nice.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6105#issuecomment-491844758:25,test,test,25,https://hail.is,https://github.com/hail-is/hail/pull/6105#issuecomment-491844758,3,"['mock', 'test']","['mock', 'test', 'tests']"
Testability,"> what ends up in /home/cotton/hail-20200407-1502-0.2.36-75a0f869d72d.log? What happens to the usual Spark/Hail master logs?. The client and the server are now separated by a machine boundary, so just the Python client logs end up in the client log. That's basically nothing and can probably be removed when using the client with the service. There are no Spark logs, the service is 100% Spark-free. The Hail master logs end up in the query service logs. Obviously a lot of this needs to be rethough and improved. The error checking and reporting needs to get improved at the service boundary, errors should be relative to the input, and clients probably shouldn't get a server-side stack trace. We're going to need additional tools for debugging pipelines on the master, and probably want an admin UI where you get the logs for each query, the IR getting executed, how it was transformed with lowering/optimization, statistics on timing of its execution, etc.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8485#issuecomment-610628050:70,log,log,70,https://hail.is,https://github.com/hail-is/hail/pull/8485#issuecomment-610628050,8,['log'],"['log', 'logs']"
Testability,"> you also don't need to add another resource VCF to make this fail. Yeah, I wasn't sure if the array_elements_required would be overridden if no missingness was found in the data. I wanted to test that possibility (updated my comment with the results of that test). > ah, crap, there's a simplify rule that turns a TableCount(TableUnion(...)) into the sum of the TableCounts for each child. Thanks!",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8008#issuecomment-581049805:193,test,test,193,https://hail.is,https://github.com/hail-is/hail/pull/8008#issuecomment-581049805,2,['test'],['test']
Testability,>; <Package expr>; <Module test_expr.py>; <UnitTestCase Tests>; <TestCaseFunction test_aggregators>; <TestCaseFunction test_densify_table>; <TestCaseFunction test_scan>; <Package genetics>; <Module test_reference_genome.py>; <Function test_reference_genome>; <Function test_reference_genome_sequence>; <Function test_reference_genome_liftover>; <Function test_read_custom_reference_genome>; <Package matrixtable>; <Module test_grouped_matrix_table.py>; <UnitTestCase Tests>; <TestCaseFunction test_joins_work_correctly>; <Module test_matrix_table.py>; <UnitTestCase Tests>; <TestCaseFunction test_collect_cols_by_key>; <TestCaseFunction test_naive_coalesce>; <TestCaseFunction test_range_count>; <Package methods>; <Module test_family_methods.py>; <UnitTestCase Tests>; <TestCaseFunction test_trio_matrix_1>; <Module test_impex.py>; <UnitTestCase VCFTests>; <TestCaseFunction test_glob>; <TestCaseFunction test_import_gvcfs>; <Module test_qc.py>; <UnitTestCase Tests>; <TestCaseFunction test_sample_qc>; <TestCaseFunction test_variant_qc>; <Module test_skat.py>; <Function test_logistic_skat_phenotypes_are_binary>; <Function test_logistic_skat_no_weights_R_truth>; <Module test_statgen.py>; <UnitTestCase Tests>; <TestCaseFunction test_impute_sex_same_as_plink>; <TestCaseFunction test_linreg_basic>; <Package relatedness>; <Module test_identity_by_descent.py>; <Function test_ibd_default_arguments>; <Module test_pc_relate.py>; <Function test_pc_relate_simple_example>; <Package table>; <Module test_grouped_table.py>; <UnitTestCase GroupedTableTests>; <TestCaseFunction test_aggregate_by>; <Module test_table.py>; <UnitTestCase Tests>; <TestCaseFunction test_aggregate1>; <TestCaseFunction test_annotate>; <Function test_lowered_persist>; <Function test_lowered_shuffle>; <Package utils>; <Module test_hl_hadoop_and_hail_fs.py>; <Function test_hadoop_methods_1[remote]>; <Function test_hadoop_methods_1[local]>; <Function test_hadoop_methods_2[remote]>; <Function test_hadoop_methods_2[local]>; <F,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13620#issuecomment-1720268851:2473,Test,Tests,2473,https://hail.is,https://github.com/hail-is/hail/pull/13620#issuecomment-1720268851,3,['Test'],"['TestCaseFunction', 'Tests']"
Testability,">Did you test submitting jobs to the cluster itself? This can be quite a different environment than the >tests. Not as such. I ssh'ed in to the master node (after explicitly running a gcloud command to get a cluster with the 1.2 image rather than the default 1.2-deb9). I wasn't confident about ; how to get my own hail.jar to run in the cluster environment instead of the deployed version.; But since NativeModule.cpp is the biggest user of string's, I confirmed that we could run tests; *and* see codegen'ed files showing up in /tmp/hail_*/*.cpp, indicating that C++ decoders were; being generated and were working correctly. >Also, is there a plan about how users (or we) control this in the Dataproc setting? E.g. how do we >submit cluster_sanity_check.py with and without C++ codegen enabled?. I don't have a specific plan, just imagined that it wouldn't be difficult to arrange, and I don't; have any particular opinion about the best way to control it.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4422#issuecomment-424835504:9,test,test,9,https://hail.is,https://github.com/hail-is/hail/pull/4422#issuecomment-424835504,3,['test'],"['test', 'tests']"
Testability,@GreatBrando tomorrow remind me to talk about how to test this,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6531#issuecomment-509430798:53,test,test,53,https://hail.is,https://github.com/hail-is/hail/pull/6531#issuecomment-509430798,1,['test'],['test']
Testability,"@Sun-shan According to the error message you posted, Spark itself cannot find `/hail/test/BRCA1.raw_indel.vcf`:; ```; py4j.protocol.Py4JJavaError: An error occurred while calling z:org.apache.spark.api.python.PythonRDD.collectAndServe.; : org.apache.hadoop.mapred.InvalidInputException: Input path does not exist: file:/hail/test/BRCA1.raw_indel.vcf; ```. Looking at that error message, it looks like Spark is interpreting your path as a local file system path, _not_ a hadoop path. Moreover, earlier in your posted output this line:; ```; 17/08/15 08:58:31 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable; ```; suggests that you're not actually connecting to a Spark cluster with a properly configured Hadoop installation. ---. Your Spark cluster appears improperly configured. I'm not sure if `pyspark` is even connecting to your cluster. You might try looking at [this StackOverflow post](https://stackoverflow.com/questions/34642292/cant-connect-pyspark-to-master) about connecting `pyspark` to a Spark cluster. I strongly recommend running `pyspark` again and executing:; ```; spark.sparkContext.master; ```; This should print the URL of your Spark master node. If this prints a String starting with `local`, then you're definitely not connecting to a Spark cluster.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/2076#issuecomment-322539635:85,test,test,85,https://hail.is,https://github.com/hail-is/hail/issues/2076#issuecomment-322539635,2,['test'],['test']
Testability,"@Sun-shan Can you try starting `pyspark` and executing:. ```; sc.textFile(""/hail/test/BRCA1.raw_indel.vcf"").count(); ```. and share with us the results.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/2076#issuecomment-322217747:81,test,test,81,https://hail.is,https://github.com/hail-is/hail/issues/2076#issuecomment-322217747,1,['test'],['test']
Testability,"@akotlar : @danking and I discussed this in person and we can add the test once the service account infrastructure is in place in Batch. Until then, this approach will not work.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5762#issuecomment-479631417:70,test,test,70,https://hail.is,https://github.com/hail-is/hail/pull/5762#issuecomment-479631417,1,['test'],['test']
Testability,"@akotlar Ok, so I finally managed to remove the internal requests. The asyncio learning curve was higher than I expected. The final product is a lot tighter than I expected. I eliminated all the run_forever and run_once stuff, all the threading, and I was able to move the log back into server.py. It involves three new things:; - [kill the whole loop if anything goes wrong](https://github.com/hail-is/hail/pull/5844/files#diff-14c16d042ba8b8608b60b3fcd1029869R899), which works wonderfully with k8s' automatic pod restarting; - [use a concurrent thread pool](https://github.com/hail-is/hail/pull/5844/files#diff-14c16d042ba8b8608b60b3fcd1029869R904) for any legacy blocking operations; - [a blocking-to-async convertor](https://github.com/hail-is/hail/pull/5844/files#diff-14c16d042ba8b8608b60b3fcd1029869R823) and a [blocking iterator to async iterator](https://github.com/hail-is/hail/pull/5844/files#diff-14c16d042ba8b8608b60b3fcd1029869R828) both of which stick blocking operations on a separate thread pool. Legacy blocking operations might end up queueing behind one another in the ""blocking pool"", but the rest of the application continues without interruption on the main event loop. I took the chance to reorder the k8s refresh and the k8s watch functions to be closer together, but that made the diff worse :/. Probably demands another review on Monday. cc: @cseed, possibly some asyncio engineering best practices in this",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5844#issuecomment-482744047:273,log,log,273,https://hail.is,https://github.com/hail-is/hail/pull/5844#issuecomment-482744047,1,['log'],['log']
Testability,"@akotlar is right, I tested this locally.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5489#issuecomment-468433413:21,test,tested,21,https://hail.is,https://github.com/hail-is/hail/pull/5489#issuecomment-468433413,1,['test'],['tested']
Testability,@akotlar where are the other whitelists? I'll have him log into auth0 now.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6265#issuecomment-499142223:55,log,log,55,https://hail.is,https://github.com/hail-is/hail/pull/6265#issuecomment-499142223,1,['log'],['log']
Testability,"@akotlar, I just realized now you've been putting these tests in `test_linalg`. We have a file called `test_nd` where all the ndarray tests are. We should probably be putting them there instead.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9117#issuecomment-662625763:56,test,tests,56,https://hail.is,https://github.com/hail-is/hail/pull/9117#issuecomment-662625763,2,['test'],['tests']
Testability,@ammekk You have to fix documentation for this method. The documentation contains an example which is failing tests,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11213#issuecomment-1021566609:110,test,tests,110,https://hail.is,https://github.com/hail-is/hail/pull/11213#issuecomment-1021566609,1,['test'],['tests']
Testability,"@asvetlov thanks for your reply, and for your work on the Sanic project! I was really curious about the Techempower issue. Do you know why Sanic, on past rounds failed to complete test subsets without error? I haven’t had much of a chance to look into that yet, but https://github.com/huge-success/sanic/issues/53 doesn’t divulge much, and my own attempts to give Sanic problems haven’t yielded anything worrisome (i.e asyncpg works great under 2000 simultaneous connection load, request standard deviation is about as tight as aiohttp, and number of extremes / timeouts is smaller than aiohttp). Techwmpower benchmark was on version 0.7, if not earlier (the linked file in the Techempower issue is 0.7), and that version may have been affected by the issue described here: https://github.com/huge-success/sanic/issues/1176 which seems to have been largely addressed. . Edit: furthermore, other recent tests showed no significant issues with Sanic https://fgimian.github.io/blog/2018/06/05/python-api-framework-benchmarks/. Still the addressing the Techempower issues may help people feel more confident.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5242#issuecomment-461425481:180,test,test,180,https://hail.is,https://github.com/hail-is/hail/pull/5242#issuecomment-461425481,4,"['benchmark', 'test']","['benchmark', 'benchmarks', 'test', 'tests']"
Testability,"@bw2 that package name is a lie, sadly. The [maven repository page](https://mvnrepository.com/artifact/org.elasticsearch/elasticsearch-spark-20_2.11/5.5.1) for `org.elasticsearch:elasticsearch-spark-20_2.11:5.5.1` lists `org.apache.spark:spark-core_2.11:2.1.0` as a dependency, which is decidedly not 2.0. We'll have to use elasticsearch-spark 5.1.2. It's a bit annoying. You'll have to extend the [spark version-specific logic](https://github.com/hail-is/hail/pull/2049/files#diff-c197962302397baf3a4cc36463dce5eaR44) in `build.gradle`. You'll want to bind a new name, something like `elasticsearchSparkVersion`.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2049#issuecomment-320335957:422,log,logic,422,https://hail.is,https://github.com/hail-is/hail/pull/2049#issuecomment-320335957,1,['log'],['logic']
Testability,"@catoverdrive I dismissed your review because I added more changes to address your comment on the FIXME. I think addRegionValue now does a minimal amount of work. In particular, if you write add a region value at the top level to the same region (rvb.start(t); rvb.addRegionValue(rv); rvb.end), it doesn't modify the region but simply sets start = rv.offset. This means that rvb.start can't actually do anything, and some other add routines need to check if they need to allocate. This adds some overhead that should get compiled away in the staged version. I also improved the tests to test adding to the same as well as a different region.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2299#issuecomment-336900902:578,test,tests,578,https://hail.is,https://github.com/hail-is/hail/pull/2299#issuecomment-336900902,2,['test'],"['test', 'tests']"
Testability,"@catoverdrive I looked over this, but in a diff vs ordrdd2rb where I can't make comments. Can you reopen this as a PR against cseed:ordrdd2rb and I'll review it there? Sorry for the logistic difficulty on this one.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2246#issuecomment-332519180:182,log,logistic,182,https://hail.is,https://github.com/hail-is/hail/pull/2246#issuecomment-332519180,1,['log'],['logistic']
Testability,"@catoverdrive I pushed a fix on here. I'll let Patrick review I think, unless you want to review my piece. Unfortunately, this kills performance. The no-key benchmark is about 5-6x faster (20s) than the keyed benchmark (110s)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6267#issuecomment-499585600:157,benchmark,benchmark,157,https://hail.is,https://github.com/hail-is/hail/pull/6267#issuecomment-499585600,2,['benchmark'],['benchmark']
Testability,"@catoverdrive I pushed more improvements just as you approved, would you mind taking a look at them as well (it's minimal). Sorry about that, thanks! I also want to clarify testing with Cotton before merging, let me know if you have any thoughts on the matter.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2544#issuecomment-350770505:173,test,testing,173,https://hail.is,https://github.com/hail-is/hail/pull/2544#issuecomment-350770505,1,['test'],['testing']
Testability,@catoverdrive This looks like it's been running for 2 hours now. I would have expected it to be merged already as well. Could this cause an infinite loop -- you didn't test it locally correct?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5723#issuecomment-478703255:168,test,test,168,https://hail.is,https://github.com/hail-is/hail/pull/5723#issuecomment-478703255,1,['test'],['test']
Testability,"@catoverdrive and I discussed 0.2 interfaces and agreed that the single_key logic will be stripped from group_rows_by and group_cols_by, and we'll add explode_rows and explode_cols. This will happen in a future PR",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2497#issuecomment-348280201:76,log,logic,76,https://hail.is,https://github.com/hail-is/hail/pull/2497#issuecomment-348280201,1,['log'],['logic']
Testability,@catoverdrive looks like the tests still expect a seed,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4166#issuecomment-415881986:29,test,tests,29,https://hail.is,https://github.com/hail-is/hail/pull/4166#issuecomment-415881986,1,['test'],['tests']
Testability,"@chrisvittal ; ```; test/hail/conftest.py:10: in <module>; from hail import current_backend, init, reset_global_randomness; /usr/local/lib/python3.9/dist-packages/hail/__init__.py:54: in <module>; from . import vds # noqa: E402; /usr/local/lib/python3.9/dist-packages/hail/vds/__init__.py:1: in <module>; from . import combiner; /usr/local/lib/python3.9/dist-packages/hail/vds/combiner/__init__.py:2: in <module>; from .variant_dataset_combiner import new_combiner, load_combiner, VariantDatasetCombiner, VDSMetadata; /usr/local/lib/python3.9/dist-packages/hail/vds/combiner/variant_dataset_combiner.py:15: in <module>; from hail.vds import VariantDataset; E ImportError: cannot import name 'VariantDataset' from partially initialized module 'hail.vds' (most likely due to a circular import) (/usr/local/lib/python3.9/dist-packages/hail/vds/__init__.py); =========================== short test summary info ============================; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14087#issuecomment-1847877295:20,test,test,20,https://hail.is,https://github.com/hail-is/hail/pull/14087#issuecomment-1847877295,2,['test'],['test']
Testability,"@chrisvittal I hit a segfault on this PR in the decoder trying to do; ```; mt = hl.read_matrix_table(filename); summarized = hl.experimental.densify(mt). summarized.write(output1, overwrite=True); summarized2 = hl.read_matrix_table(output1). def test1():; 	summarized._force_count_rows(). def test2():; 	summarized2._force_count_rows(); 	; print(timeit.repeat(test1, number=1, repeat=5)); print(timeit.repeat(test2, number=1, repeat=5)); ```; The weird thing is that it appears to be sporadic, since it successfully ran all 5 iterations of test 1 and was on the last iteration of test2, judging by the number of spark stages, and it ran successfully when I just ran it a second time.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6824#issuecomment-518855752:540,test,test,540,https://hail.is,https://github.com/hail-is/hail/pull/6824#issuecomment-518855752,1,['test'],['test']
Testability,"@chrisvittal I took the plunge and also created a `MatrixHybridReader`. Changes (including above):. - FunctionBuilder now accepts `Code[Unit]` to be added to the `init` method of the function object; - SRVB now has an `init` method that should be called in the `init` method of a function object if many methods will share the SRVB; - `CodeChar` now exists; - `TextMatrixReader` exists which mimics `TextTableReader`; these should get unified at some point; - minor documentation fixes to `import_matrix_table`; - better error messages wrt using the name `row_id`, which is reserved for use by `import_matrix_table` when there are no keys specified; - several new tests, including:; - extensive testing of the product space of `header`, `delimiter`, `header`, and `entry_type` (including such weird things as using `9` as the missing value); - a pathological file: `9`-separated values with `8` representing the missing value; - several tests that trigger the pruner; - rename `LoadMatrix.scala` to `TextMatrixReader.scala`",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6987#issuecomment-529001365:664,test,tests,664,https://hail.is,https://github.com/hail-is/hail/pull/6987#issuecomment-529001365,3,['test'],"['testing', 'tests']"
Testability,@chrisvittal I won't have time to do any work on this PR for the next two weeks. Can you take over testing + benchmarking?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7951#issuecomment-580336498:99,test,testing,99,https://hail.is,https://github.com/hail-is/hail/pull/7951#issuecomment-580336498,2,"['benchmark', 'test']","['benchmarking', 'testing']"
Testability,"@chrisvittal This is all garbage, the failure makes little sense. I've started back from scratch with master, and have re-implemented all of the functionality, from this branch, needed to have the Dataproc test run (which relies on LoadVCF). . It works fine. Something else is amiss. I'm going to finish reimplementing everything in that clean slate, and when everything is running close this PR and reissue. The diff between them will show the problem area, which is in some kind of global state affecting sparkContext or RDD",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6083#issuecomment-498334543:206,test,test,206,https://hail.is,https://github.com/hail-is/hail/pull/6083#issuecomment-498334543,1,['test'],['test']
Testability,"@chrisvittal Would you mind reviewing at least the changes since @tpoterba's approval, since he's out this week? Summary of the original changes is at the top. The main changes since that, which I made while debugging failing tests, are:; * Add `PType.loadCheapSCodeField`. Both this and `loadCheapSCode` now return an `SValue`, with the former using fields instead of locals.; * `SingleCodeSCode.loadToSValue` uses fields",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10797#issuecomment-908587926:226,test,tests,226,https://hail.is,https://github.com/hail-is/hail/pull/10797#issuecomment-908587926,1,['test'],['tests']
Testability,@chrisvittal all tests passing,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6263#issuecomment-498938995:17,test,tests,17,https://hail.is,https://github.com/hail-is/hail/pull/6263#issuecomment-498938995,1,['test'],['tests']
Testability,@chrisvittal can you test again on the changes in #4809? (either on that branch or on master once it goes in?),MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4718#issuecomment-440537473:21,test,test,21,https://hail.is,https://github.com/hail-is/hail/issues/4718#issuecomment-440537473,1,['test'],['test']
Testability,"@chrisvittal not sure what this error is. Doesn’t happen on local (on local all tests pass, besides the one that also fails on master, `is.hail.methods.IBDSuite.ibdPlinkSameOnRealVCF`, because I don't have Plink installed). Will try to investigate tomorrow, first step is accessing the log, but if you have suggestions I’m interested!. 2019-05-16 00:23:41 Hail: INFO: test is.hail.expr.ir.ForwardLetsSuite.testAggregators SUCCESS; 2019-05-16 00:23:41 Hail: INFO: starting test is.hail.expr.ir.ForwardLetsSuite.testForwardingOps...; dlopen: /tmp/hail_dJAhNQ/hm_fd419e9b11e18f87ceb4.so: undefined symbol: _ZN4hail2FSC1EP8_jobject",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6083#issuecomment-492892219:80,test,tests,80,https://hail.is,https://github.com/hail-is/hail/pull/6083#issuecomment-492892219,6,"['log', 'test']","['log', 'test', 'testAggregators', 'testForwardingOps', 'tests']"
Testability,"@chrisvittal, these tests actually pass the local backend. I changed the tests to reflect this, but wanted to ping you to make sure that seems reasonable.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11345#issuecomment-1059604289:20,test,tests,20,https://hail.is,https://github.com/hail-is/hail/pull/11345#issuecomment-1059604289,2,['test'],['tests']
Testability,"@chrisvittal: Ed has already used mill on his machine, and helped with the PR. It would be great to both get your eyes on the changes, as well as checking out the branch and testing the setup instructions above (I've been using a seperate git worktree to avoid clobbering my gradle based intellij project).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14147#issuecomment-1912321464:174,test,testing,174,https://hail.is,https://github.com/hail-is/hail/pull/14147#issuecomment-1912321464,1,['test'],['testing']
Testability,"@cjllanwarne I tested that the `yum` commands work in the shell for the image with the `docker run` command, and the other component of the testing is that the pipeline step is now passing on this branch :)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14677#issuecomment-2338994256:15,test,tested,15,https://hail.is,https://github.com/hail-is/hail/pull/14677#issuecomment-2338994256,2,['test'],"['tested', 'testing']"
Testability,"@cseed - this PR has a bad interaction with the changes made to [optimize inside ArrayAgg emit](https://github.com/hail-is/hail/pull/5765/files). . I've added a [test that catches the problem](https://github.com/hail-is/hail/pull/5710/files#diff-3273df362c814023cfa64428acf395cfR1122). The root of the issue is that we **cannot run NormalizeNames again** inside of that optimization pass -- it generates references that collide/overwrite existing bindings available when ArrayAgg is emitted. We should be creating globally-unique names inside ForwardLets, not normalized names.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5710#issuecomment-483001172:162,test,test,162,https://hail.is,https://github.com/hail-is/hail/pull/5710#issuecomment-483001172,1,['test'],['test']
Testability,@cseed ; ```; AccessDeniedException: 403 vdc-sa@hail-vdc.iam.gserviceaccount.com does not have storage.objects.list access to hail-ci-test.; ```. The CI tests use this hail-ci-test bucket as a fake deploy area. We'll need to fix that before we can merge any CI-related PRs.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4603#issuecomment-435938023:134,test,test,134,https://hail.is,https://github.com/hail-is/hail/pull/4603#issuecomment-435938023,3,['test'],"['test', 'tests']"
Testability,"@cseed @akotlar, ok comments addressed, thanks for the improvements. re: the env var, there is now just one env var, HAIL_APISERVER_URL. no special env var for the tests. I kept the backend test.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5893#issuecomment-484171424:164,test,tests,164,https://hail.is,https://github.com/hail-is/hail/pull/5893#issuecomment-484171424,2,['test'],"['test', 'tests']"
Testability,"@cseed @danking . Hi, I tried the following command , and configured the log path , but it still not worked, are there any suggestions?. spark-submit --executor-memory 16g --executor-cores 4 --class org.broadinstitute.hail.driver.Main ******/hail-all-spark.jar --master yarn-client importvcf --log-file /user/hail/hail.log /user/hail/split_test.vcf splitmulti write -o /user/hail/split_test_1_1.vds exportvcf -o /user/hail/split_test_1_1.vcf. **ERROR:**; WARNING: Running spark-class from user-defined location.; hail: info: running: importvcf /user/hail/sample.vcf; hail: info: Coerced sorted dataset; hail: info: running: splitmulti; hail: info: running: write -o /user/hail/sample_1008.vds; hail: write: caught exception: org.apache.spark.SparkException: Job aborted.; .........; at org.apache.spark.deploy.SparkSubmit.main(SparkSubmit.scala)org.apache.spark.SparkException: Job aborted due to stage failure: Task 0 in stage 2.0 failed 4 times, most recent failure: Lost task 0.3 in stage 2.0 (TID 5, bio-x-3): java.io.IOException: The file being written is in an invalid state. Probably caused by an error thrown previously. Current state: COLUMN; ...........; at org.apache.spark.deploy.SparkSubmit.main(SparkSubmit.scala)java.io.IOException: The file being written is in an invalid state. Probably caused by an error thrown previously. Current state: COLUMN. [splitmulti_1_1.txt](https://github.com/hail-is/hail/files/521087/splitmulti_1_1.txt)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/825#issuecomment-252825829:73,log,log,73,https://hail.is,https://github.com/hail-is/hail/issues/825#issuecomment-252825829,3,['log'],"['log', 'log-file']"
Testability,"@cseed @johnc1231 Ok here's the final iteration. One more look over is appreciated, I added a bunch of tests. Commentary very welcome on testing strategy and code.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1895#issuecomment-312064471:103,test,tests,103,https://hail.is,https://github.com/hail-is/hail/pull/1895#issuecomment-312064471,2,['test'],"['testing', 'tests']"
Testability,@cseed @tpoterba I added several tests around binding that make me feel much more comfortable with the correctness.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1637#issuecomment-296274513:33,test,tests,33,https://hail.is,https://github.com/hail-is/hail/pull/1637#issuecomment-296274513,1,['test'],['tests']
Testability,"@cseed Added the redirect logic. It feels much slower (although there may be some small optimizations available). What do you think about using popup as the default, and then catch on error and send to redirect method? https://github.com/auth0/auth0.js/issues/868. This could work well as long as blocking happened rarely. So far, I haven't been able to trigger the block in any browser (Safari, Chrome, Firefox, all latest v), with content blockers enabled (which definitely block popups on other sites).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5162#issuecomment-456667812:26,log,logic,26,https://hail.is,https://github.com/hail-is/hail/pull/5162#issuecomment-456667812,1,['log'],['logic']
Testability,@cseed Back to you. Is there a good way to test if it's actually working?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2086#issuecomment-321899435:43,test,test,43,https://hail.is,https://github.com/hail-is/hail/pull/2086#issuecomment-321899435,1,['test'],['test']
Testability,@cseed Back to you; addressed & rebased except for comment about binary log and pow.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/807#issuecomment-248978679:72,log,log,72,https://hail.is,https://github.com/hail-is/hail/pull/807#issuecomment-248978679,1,['log'],['log']
Testability,"@cseed How did you verify only one is created? `eq` is literally the JVM's `if_acmpne`. I include a snippet below. I also checked that if I explicitly define `equals`, I still get `if_acmpne`. At the very least, I'd like the issue to be replicated as a test. I agree that the right solution is for this not to be a case class if we're using reference equality. Maybe we need equals_for_tests or something?. ```; (hail) 130 dking@wmb16-359 # cat foo.scala ; case class Fizzle(x: Int, y: String). class Foo {; def fizzle(x: Fizzle, y: Fizzle): Boolean = {; return x eq y; }; def anyref(x: AnyRef, y: AnyRef): Boolean = {; return x eq y; }; }; (hail) dking@wmb16-359 # scalac foo.scala; (hail) dking@wmb16-359 # javap -c foo; Warning: Binary file foo contains Foo; Compiled from ""foo.scala""; public class Foo {; public boolean fizzle(Fizzle, Fizzle);; Code:; 0: aload_1; 1: aload_2; 2: if_acmpne 9; 5: iconst_1; 6: goto 10; 9: iconst_0; 10: ireturn. public boolean anyref(java.lang.Object, java.lang.Object);; Code:; 0: aload_1; 1: aload_2; 2: if_acmpne 9; 5: iconst_1; 6: goto 10; 9: iconst_0; 10: ireturn. public Foo();; Code:; 0: aload_0; 1: invokespecial #22 // Method java/lang/Object.""<init>"":()V; 4: return; }; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5471#issuecomment-468472896:253,test,test,253,https://hail.is,https://github.com/hail-is/hail/pull/5471#issuecomment-468472896,1,['test'],['test']
Testability,@cseed I changed `includeStart` to `includesStart` everywhere except the JSON because it broke the backwards compatibility tests. Let me know if you'd prefer I only renamed the Python attributes.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3054#issuecomment-371308286:123,test,tests,123,https://hail.is,https://github.com/hail-is/hail/pull/3054#issuecomment-371308286,1,['test'],['tests']
Testability,@cseed I changed the BGEN test to work in the case where entries table does not return rows with missing entries. Feel free to ignore my comment on your BGEN PR #3743 with regards to this test.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3720#issuecomment-397801185:26,test,test,26,https://hail.is,https://github.com/hail-is/hail/pull/3720#issuecomment-397801185,2,['test'],['test']
Testability,"@cseed I had to make the CloudSQL instance have a public IP in order for testing locally (not in the cluster) to work. Should I get rid of that option? Or can we have a separate test database? As for permissions for the databases, I couldn't find a way to say a specific user could not create a database. I think we can lock down a database with SQL commands after the database has been created. This will be good to discuss on Monday. See #5615",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5618#issuecomment-473591074:73,test,testing,73,https://hail.is,https://github.com/hail-is/hail/pull/5618#issuecomment-473591074,2,['test'],"['test', 'testing']"
Testability,"@cseed I moved unwrapping of the nested insert before the TableAnnotate node, as we talked about. The code is pretty messy and I'm still tidying it up, but it's now there if you wanted to take a look. re: splats---I talked to Tim about this earlier and he didn't think that annotate needed to support them, but I added a test case anyway and it seems to work fine.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2638#issuecomment-356122522:321,test,test,321,https://hail.is,https://github.com/hail-is/hail/pull/2638#issuecomment-356122522,1,['test'],['test']
Testability,@cseed I shrunk the PR down to the minimal code change and it's still failing the `LDPruneSuite.testNoPrune` test. Do I misunderstand how to use the Encoder/Decorder stuff?. The failure isn't an assertion error. I've somehow changed the number of records that result from an LDPrune.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3391#issuecomment-382377269:96,test,testNoPrune,96,https://hail.is,https://github.com/hail-is/hail/pull/3391#issuecomment-382377269,3,"['assert', 'test']","['assertion', 'test', 'testNoPrune']"
Testability,"@cseed I think this is probably ready for review. There's a couple of things that I'm going to look at/do more that aren't in this PR:; - add better docs for how random functions behave; - add more tests for randomness in various IR nodes; - add more tests and make sure that the optimization rules preserve the context that random functions are going to be evaluated in. @tpoterba and I talked briefly about the last one and it might involve restructuring simplify, since some rules are fine in isolation but will return different results when performed in combination (and sometimes one of the rules in question doesn't even involve the random node, which is kind of difficult to account for currently)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4104#issuecomment-411878967:198,test,tests,198,https://hail.is,https://github.com/hail-is/hail/pull/4104#issuecomment-411878967,2,['test'],['tests']
Testability,@cseed I think we need to bump the Batch test time limit to 360. The tests passed in 328 seconds but wait-for.py marked it as a failure as it was over 300 seconds.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6015#issuecomment-489803786:41,test,test,41,https://hail.is,https://github.com/hail-is/hail/pull/6015#issuecomment-489803786,2,['test'],"['test', 'tests']"
Testability,@cseed I was planning to dig into this to find a small IR-only test that fails (removing the need for a dataset) but I'm feeling a bit oversubscribed right now.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4522#issuecomment-429133433:63,test,test,63,https://hail.is,https://github.com/hail-is/hail/issues/4522#issuecomment-429133433,1,['test'],['test']
Testability,@cseed I will make a follow up PR that changes testing to make the checked version run. This at least allows developers to turn on this behavior when debugging locally.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9217#issuecomment-669211553:47,test,testing,47,https://hail.is,https://github.com/hail-is/hail/pull/9217#issuecomment-669211553,1,['test'],['testing']
Testability,"@cseed I'm really happy with the interface now! Could you please look over this again and let me know if there are any suggestions you have before I write some tests and give this to someone to code review. I also called this `pyapi` for lack of a better name and it's currently in the batch module... ```python3; from pyapi import Pipeline, resource_group_builder. p = Pipeline() # initialize a pipeline. # Define resource group builders (used with `declare_resource_group`); rgb_bfile = resource_group_builder(bed=""{root}.bed"",; bim=""{root}.bim"",; fam=""{root}.fam""). rgb_shapeit = resource_group_builder(haps=""{root}.haps"",; log=""{root}.log""). # Import a file as a resource; file = p.write_input('gs://hail-jigold/random_file.txt'). # Import a set of input files as a resource group; input_bfile = p.write_input_group(bed='gs://hail-jigold/input.bed',; bim='gs://hail-jigold/input.bim',; fam='gs://hail-jigold/input.fam'). # Remove duplicate samples from a PLINK dataset; subset = p.new_task(); subset = (subset; .label('subset'); .declare_resource_group(tmp1=rgb_bfile, ofile=rgb_bfile); .command(f'plink --bfile {input_bfile} --make-bed {subset.tmp1}'); .command(f""awk '{{ print $1, $2}}' {subset.tmp1.fam} | sort | uniq -c | awk '{{ if ($1 != 1) print $2, $3 }}' > {subset.tmp2}""); .command(f""plink --bed {input_bfile.bed} --bim {input_bfile.bim} --fam {input_bfile.fam} --remove {subset.tmp2} --make-bed {subset.ofile}""; )). # Run shapeit for each contig from 1-3 with the output from subset; for contig in [str(x) for x in range(1, 4)]:; shapeit = p.new_task(); shapeit = (shapeit; .label('shapeit'); .declare_resource_group(ofile=rgb_shapeit); .command(f'shapeit --bed-file {subset.ofile} --chr {contig} --out {shapeit.ofile}')). # Merge the shapeit output files together; merger = p.new_task(); merger = (merger; .label('merge'); .command('cat {files} >> {ofile}'.format(files="" "".join([t.ofile.haps for t in p.select_tasks('shapeit')]),; ofile=merger.ofile))). # Write the result of the merg",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4937#issuecomment-452753741:160,test,tests,160,https://hail.is,https://github.com/hail-is/hail/pull/4937#issuecomment-452753741,3,"['log', 'test']","['log', 'tests']"
Testability,"@cseed I've fixed string slicing to do the thing you describe (converting to utf16, slicing, converting back). The Java default is to replace invalid codepoints (e.g. if only one codepoint from a two-codepoint character is kept) with the replacement character \ufffd, but when converted back to UTF8 the replacement character is just `?`. I've written a test to reflect this, but this seems pretty encoding dependent and maybe like something we should just keep in mind and pick a consistent solution for.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4844#issuecomment-473490897:354,test,test,354,https://hail.is,https://github.com/hail-is/hail/issues/4844#issuecomment-473490897,1,['test'],['test']
Testability,"@cseed I've split the packages up so they can be imported from within the appropriate init method. Edit: re-running ./gradlew shadowJar fixes this. Tests are not passing, but seemingly not because of any of these changes. If I checkout last commit in master, they also fail. Furthermore, I can restore all changes from last FS PR manually, and no benefit. ```; HEAD is now at 117c365c3 [ci] also handle batch Ready state (#5909); (hail) alex:~/projects/hail/hail/python:$ pytest test/ -x; ======================================================================================= test session starts ========================================================================================; platform darwin -- Python 3.6.8, pytest-3.8.0, py-1.7.0, pluggy-0.8.1; rootdir: /Users/alex/projects/hail/hail/python, inifile:; plugins: xdist-1.22.2, metadata-1.8.0, html-1.19.0, forked-1.0.2; collected 591 items . test/hail/test_context.py E. ============================================================================================== ERRORS ==============================================================================================; _______________________________________________________________________ ERROR at setup of Tests.test_init_hail_context_twice _______________________________________________________________________. def startTestHailContext():; global _initialized; if not _initialized:; url = os.environ.get('HAIL_TEST_SERVICE_BACKEND_URL'); if url:; hl.init(master='local[2]', min_block_size=0, quiet=True, _backend=hl.backend.ServiceBackend(url)); else:; > hl.init(master='local[2]', min_block_size=0, quiet=True). test/hail/helpers.py:18: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; hail/typecheck/check.py:561: in wrapper; return __original_func(*args_, **kwargs_); hail/context.py:264: in init; _optimizer_iterations,_backend)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5878#issuecomment-484651928:148,Test,Tests,148,https://hail.is,https://github.com/hail-is/hail/pull/5878#issuecomment-484651928,4,"['Test', 'test']","['Tests', 'test']"
Testability,@cseed Should be done now. `assembly:single` will build both jars into `target/hail-0.2-sha-jar-with-dependencies.jar` and `target/hail-0.2-sha-test-jar-with-dependencies.jar`,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5906#issuecomment-484685725:144,test,test-jar-with-dependencies,144,https://hail.is,https://github.com/hail-is/hail/pull/5906#issuecomment-484685725,1,['test'],['test-jar-with-dependencies']
Testability,"@cseed Should the behavior of the logs be to not have a link if the job is ready or pending or to report None? Right now, we report None for `status` if it's ready or pending and have a web.HTTPNotFound error for logs when it's pending or ready. I think we should have it be consistent between logs and status and I think having no links in the ready and pending case is clearer.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7449#issuecomment-549440769:34,log,logs,34,https://hail.is,https://github.com/hail-is/hail/pull/7449#issuecomment-549440769,3,['log'],['logs']
Testability,"@cseed The CI tests rely on the service waiting functionality. In particular, they do not have permissions to use `kubectl rollout status` so I can't switch to waiting for a deployment.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7564#issuecomment-557584616:14,test,tests,14,https://hail.is,https://github.com/hail-is/hail/pull/7564#issuecomment-557584616,1,['test'],['tests']
Testability,"@cseed The only test failing now is that Java test, so we should be at a point where the next thing to think about is how to have a separate ""debug"" build of Hail that uses the checked allocator. And then we'd specify that the failing test should only run on the checked allocator.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8878#issuecomment-663084550:16,test,test,16,https://hail.is,https://github.com/hail-is/hail/pull/8878#issuecomment-663084550,3,['test'],['test']
Testability,@cseed This is ready for review. Please check the logic for _create_pod. I added a Try/Except that sets the pod to failure if pod_creation fails.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6075#issuecomment-491011207:50,log,logic,50,https://hail.is,https://github.com/hail-is/hail/pull/6075#issuecomment-491011207,1,['log'],['logic']
Testability,"@cseed This should now be sufficient for Wed. I will probably add 2 features before then: reconnecting web sockets (though connection should infrequently drop, shouldn't affect workshop), and an admin panel to blow out users / delete notebooks. And maybe SSL. Edit: my commit https://github.com/hail-is/hail/pull/5162/commits/bac155c9713d99c68cd7d0605eb59585656c14ea makes reference to csrf. This may not be necessary: inspecting the login request I notice a nonce, generated by the auth0-js lib, sent with login and silent token rotation / refresh, which is nice. Assuming it's used to prevent replay attacks, in this case it has the same purpose as a CSRF token. Yay auth0. Edit2: Regarding performance. Scorecard page, before server-side caching takes 100ms on refresh, and 50ms on navigation from another page. This effectively means no overhead from my web implementation. Why? It takes ~50ms to return *anything* (including favicon.ico of 0 bytes), i.e 50ms is the time it takes from my computer to kubernetes and back, with no additional work done. We have 2 such requests currently when visiting app.hail.is/scorecard: one to to the web app server, one to scorecard/json. After caching (which is invalidated every 3 minutes), takes 50ms. So, if current scorecard.hail.is needed to hit a json endpoint to get data for its template, we would expect it to be no faster. Alternatively if we placed the json-generating function in the web-app's nodejs server it's response time would drop by ~50ms.; * I also am trying to use the internal DNS (SSR phase routes to http://scorecard/json, so should use kubernetes DNS; still take ~50ms to get the json... before caching).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5162#issuecomment-460071524:434,log,login,434,https://hail.is,https://github.com/hail-is/hail/pull/5162#issuecomment-460071524,2,['log'],['login']
Testability,@cseed You can take this for a spin at https://internal.hail.is/dking/website/ . It's a bit sluggish. the end-to-end timing at gateway for `api.html` (the API reference) hovers around 125ms. About 35ms is website / jinja2 rendering. Router adds anywhere from 5ms to 20ms. It seems like hitting the router-resolver and whatever else `gateway` does makes up the rest. [Service logs here](https://console.cloud.google.com/logs/query;query=labels.%22k8s-pod%2Fapp%22%3D%22gateway%22%20OR%20labels.%22k8s-pod%2Fapp%22%3D%22router%22%20OR%20labels.%22k8s-pod%2Fapp%22%3D%22website%22%0AjsonPayload.message:%22%2Fdking%2Fwebsite%2Fdocs%2F0.2%2Fapi.html%22;summaryFields=labels%252F%2522k8s-pod%252Fapp%2522:false:32:beginning?project=hail-vdc&query=%0A). I think in production it will be fine because there's a fair bit less indirection.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10056#issuecomment-780248628:375,log,logs,375,https://hail.is,https://github.com/hail-is/hail/pull/10056#issuecomment-780248628,2,['log'],['logs']
Testability,@cseed an issue remains: not sure if this is the cause:. `ls: cannot access 'PARK_HOME/python/lib/py4j-*-src.zip': No such file or directory` as a result of `make test`,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5929#issuecomment-485140905:163,test,test,163,https://hail.is,https://github.com/hail-is/hail/pull/5929#issuecomment-485140905,1,['test'],['test']
Testability,@cseed back to you test hopefully pass now,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1902#issuecomment-321381973:19,test,test,19,https://hail.is,https://github.com/hail-is/hail/pull/1902#issuecomment-321381973,1,['test'],['test']
Testability,@cseed back to you. I'm open to suggestions on how to structure the tests locations / file naming.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1827#issuecomment-302134641:68,test,tests,68,https://hail.is,https://github.com/hail-is/hail/pull/1827#issuecomment-302134641,1,['test'],['tests']
Testability,"@cseed bump. This is blocking further testing on dbuf. Without this, there's a race condition where the image is deleted by CI before the entire StatefulSet starts.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7564#issuecomment-558382580:38,test,testing,38,https://hail.is,https://github.com/hail-is/hail/pull/7564#issuecomment-558382580,1,['test'],['testing']
Testability,@cseed do you have tests for this? I don't see any right now.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4663#issuecomment-434401329:19,test,tests,19,https://hail.is,https://github.com/hail-is/hail/pull/4663#issuecomment-434401329,1,['test'],['tests']
Testability,@cseed done. @jbloom22 I believe I've addressed everything except for the PCs spark matrix comment and making a test value be a field.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2270#issuecomment-335644547:112,test,test,112,https://hail.is,https://github.com/hail-is/hail/pull/2270#issuecomment-335644547,1,['test'],['test']
Testability,@cseed how about `ci-test-$(cat /dev/urandom | base64 | head -c 40)`?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4241#issuecomment-417791819:21,test,test,21,https://hail.is,https://github.com/hail-is/hail/pull/4241#issuecomment-417791819,1,['test'],['test']
Testability,@cseed it looks like tests are failing with `I == Z`. Is there another place you need to carry through the Boolean as Int thing?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8537#issuecomment-612563478:21,test,tests,21,https://hail.is,https://github.com/hail-is/hail/pull/8537#issuecomment-612563478,1,['test'],['tests']
Testability,@cseed looks like something is wrong I the docs / python tests.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2236#issuecomment-330897057:57,test,tests,57,https://hail.is,https://github.com/hail-is/hail/pull/2236#issuecomment-330897057,1,['test'],['tests']
Testability,@cseed please hold off on this until I incorporate changes in the export branch. I want to make sure everything is working with the import/export test.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1698#issuecomment-298988120:146,test,test,146,https://hail.is,https://github.com/hail-is/hail/pull/1698#issuecomment-298988120,1,['test'],['test']
Testability,"@cseed please see comments above and look at testToKeyGsWeightRdd(), let me know if you think it's enough. (I was able to rip out the SparseVector code that was supporting the GT case as well now that we've gone generic)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2544#issuecomment-350838973:45,test,testToKeyGsWeightRdd,45,https://hail.is,https://github.com/hail-is/hail/pull/2544#issuecomment-350838973,1,['test'],['testToKeyGsWeightRdd']
Testability,@cseed surely now it will pass; set --ignore fs/google_fs.py in the doctest run. Previous error was caused by the testing of this file (since CI doesn't yet have gcsfs). https://storage.googleapis.com/hail-ci-0-1/ci/4d17fb5a7df0bb9d766eb80f4a2926b3ed7bbb70/564ab40014a5aa349a517a8353d09eac4a5273f7/index.html,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5878#issuecomment-485139453:114,test,testing,114,https://hail.is,https://github.com/hail-is/hail/pull/5878#issuecomment-485139453,1,['test'],['testing']
Testability,@cseed tests are failing because you didn't check that the indexee was type tarray,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5359#issuecomment-464059636:7,test,tests,7,https://hail.is,https://github.com/hail-is/hail/pull/5359#issuecomment-464059636,1,['test'],['tests']
Testability,@cseed tests pass,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3895#issuecomment-405725628:7,test,tests,7,https://hail.is,https://github.com/hail-is/hail/pull/3895#issuecomment-405725628,1,['test'],['tests']
Testability,"@cseed the tests compare skat and R which computes stats one group at a time, so I can compare product / explode / skat to product / explode / rskat, but that’s still only testing skat and product / explode independently. I could get some numbers out from the previous version with single_key=True and hardcode those into a test of the new version. I'd added testToKeyGsWeightRdd() specifically to check that the grouping by key checks out. I think it'd make more sense to expand that test to a case that uses product / explode. Do you agree?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2544#issuecomment-350392288:11,test,tests,11,https://hail.is,https://github.com/hail-is/hail/pull/2544#issuecomment-350392288,5,['test'],"['test', 'testToKeyGsWeightRdd', 'testing', 'tests']"
Testability,@cseed what tests do you want to see?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5201#issuecomment-459189555:12,test,tests,12,https://hail.is,https://github.com/hail-is/hail/pull/5201#issuecomment-459189555,1,['test'],['tests']
Testability,"@cseed yes, if you do something like `log.info(""hi"", extra_field=31)` that will be easy to parse.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8149#issuecomment-592103445:38,log,log,38,https://hail.is,https://github.com/hail-is/hail/pull/8149#issuecomment-592103445,1,['log'],['log']
Testability,"@cseed, digesting from this and our in-person conversation:. I added a steps about job dependencies and batch closure. Regarding ""a way to refer to individual inputs/outputs"", in the original post, I gave the example of:. ```; - type: exec; name: build-jar; image: hail-pr-builder; namespace: ns; command: [""./gradlew"", ""test"", ""shadowJar""]; outputs:; - ""build/libs/hail-all-spark.jar""; - type: exec; name: pytests; image: hail-pr-builder; dependsOn:; - build-jar; command: [""./run-python-tests-using-input-jar.sh""]; ```. The outputs of a job are stated explicitly by the definition. For the `pytests` job in the example above, the input from `build-jar` is placed at `/inputs/build-jar`. Regarding ""specify a series of stacked containers to execute"", I don't see a straightforward way to implement this. It's tricky enough to have a ""anti-init""/""finalizer"" container. Inter-job I/O will be handled by batch. The user controls the image and the command and the environment variables of the build step, so they can arrange for permission to copy results to a bucket they own. Are we worried about the setting of user's wanting to run untrustworthy software? They already run arbitrary software on cloud instances that have plenty of latent credentials. I think we can at least punt on this until other functionality is in. Local disk sounds like a nice thing to add eventually. Agreed, that sounds like a nice model. I'll consider it as I envision a persistent batch system.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/5193#issuecomment-459537502:321,test,test,321,https://hail.is,https://github.com/hail-is/hail/issues/5193#issuecomment-459537502,2,['test'],"['test', 'tests-using-input-jar']"
Testability,"@cseed, so I looked into it this morning and somehow your implementation failed as prev.partitions always returns null in this context (not sure why). I modified the implementation of HeadRDD and hopefully you'll like it: It can now either return an approximately the number of variants based on the number of variants in the 1st partition or an exact number of variants with a pass to compute the number of variants (in parallel and using approximation from the 1st partition -- so pretty fast). In any case, it never goes through the whole dataset and my tests indicate that it's pretty fast (see below for ExAC on Cray). Also, it retains the same partitioning as the parent RDD. Approximate version:; nSamples 60,706; nVariants 11,804; hail: info: timing:; read: 7.579s; head: 5.413s; count: 47.792s. Exact version:; nSamples 60,706; nVariants 10,000; hail: info: timing:; read: 4.472s; head: 5.283s; count: 54.490s",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/446#issuecomment-235344742:557,test,tests,557,https://hail.is,https://github.com/hail-is/hail/pull/446#issuecomment-235344742,1,['test'],['tests']
Testability,"@cseed,. > The point isn't to save the few untars, the point is to make the general facilities performant for everyone. Basically, I think directory outputs are untenable in the current design unless they are very small, which is why you're doing all this for your use case, and the tar is still probably as good (if not better) in that case. Fix it for everyone's use case so nobody has to go through this in the future. I agree directory outputs with large file counts are untenable. Are you suggesting we do this at the batch level for any directory? That feels a bit opaque, because users may expect that if they specify their output is a directory that they can selectively download certain subdirectories. At the build.yaml level, I see a couple explicit options:; ```; outputs:; - from: /io/repo/hail/resources; to: /resources.tgz; codec: gzip; ```; and; ```; inputs:; - from: /resources.tgz; to: /io/resources; codec: gzip; ```; ?. There's also this, which irks me a bit because it's punny, but:; ```; outputs:; - from: /io/repo/hail/resources; to: /resources.tgz; ```; and. ```; inputs:; - from: /resources.tgz; to: /io/resources; extract:; - .; ```; ```; inputs:; - from: /resources.tgz; to: /io/resources; extract:; - foo; - bar; ```. A little bit my reaction to this is that we're creating a DSL that provides minor value relative to the user using `tar` in their `runImage` steps. E.g. build hail is explicit and not verbose:; ```; ...; tar czf test.tar.gz -C python test; tar czf resources.tar.gz -C src/test resources; tar czf data.tar.gz -C python/hail/docs data; tar czf www-src.tar.gz www; tar czf cluster-tests.tar.gz python/cluster-tests; ```; and `test_hail_java` is fine:; ```; ...; tar xzf resources.tar.gz -C src/test; ...; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7626#issuecomment-560470857:1458,test,test,1458,https://hail.is,https://github.com/hail-is/hail/pull/7626#issuecomment-560470857,6,['test'],"['test', 'tests']"
Testability,"@cseed: It would be great if we could merge this into master soon -- there's a lot of changes here!. Highlight of major changes:; 1. Dosage is implemented in Genotype.scala; - A user can get either dosages `.dosage` or PLs `.pl`; - To go from PLs to Dosages: rescale each PL (10^(-PL/10)), take the sum of the rescaled numbers, then divide by the sum. This is assuming equal weights prior (can incorporate alternate prior later); - To go from Dosages to PLs: same transformation as before; 2. INFO score is implemented in variantqc; - No tests for info score yet as still uncertain which method to use; - My computation agrees with SNPTEST but not QCTOOL; 3. `importgen` and `exportgen` are now implemented; 4. SplitMulti will split dosages correctly except for the setting of false ref. If the original dosage with N genotypes had more than one maximum value [ex: (0.2, 0.2, 0.1, 0.1, 0.1, 0.3)], then the original genotype is -1. But after combining dosages, then there is one unique maximum value. The fakeref flag is not set in this case, but the genotype is > 0.; 5. A randomly generated genotype can have two values very close together (0.4035, 0.4036, 0.2...) that when read back in via gen file or bgen file will have rounding error (0.4035, 0.4035, 0.2...) so there is no maximal genotype anymore (gt = -1). I don't think this is a huge concern as it can only happen if the max dosage is <= 0.5, and these will get filtered out by most users anyways. **To-Do:; 1. Finalize INFO score calculation and write tests; 2. Fix null variant in PLINK code (want to do this in separate branch); 3. Modify variant qc to read parameter about data so info score only calculated for dosage data and likewise for statistics about depth, gq etc.; 4. Handle sex chromosome names in import PLINK properly (do we need to map ""23"" to ""X"", etc.?); 5. Update the readFam function in `importplink` to utilize functionality Jon wrote already",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/243#issuecomment-218212906:538,test,tests,538,https://hail.is,https://github.com/hail-is/hail/pull/243#issuecomment-218212906,2,['test'],['tests']
Testability,@cseed:; 1. We talked about finding a better way to implement this so that it's faster. I have thus far focused only on the tests and the core algorithm. The `Command` and associated docs are not yet written.; 2. I will extract `assertSameElements` and the fuzzy equality stuff into separate PRs before submitting this for review.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/738#issuecomment-245359022:124,test,tests,124,https://hail.is,https://github.com/hail-is/hail/pull/738#issuecomment-245359022,2,"['assert', 'test']","['assertSameElements', 'tests']"
Testability,"@daniel-goldstein , I tagged you because the QoB java code (everything in `is.hail.backend.service`) should really be owned by services team. @johnc1231 , I tagged you because this is a pervasive change to Query. You may want to confer with Chris and Patrick S before approving in light of Tim's absence. I'll apply WIP. Whoever approves second, please remove the WIP tag. I expect the test time to roughly halve with this change.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11212#issuecomment-1039418045:386,test,test,386,https://hail.is,https://github.com/hail-is/hail/pull/11212#issuecomment-1039418045,1,['test'],['test']
Testability,"@daniel-goldstein @danking CI is showing this as failing, but afaict all the tests are passing? is this a problem we've seen?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5837#issuecomment-482289824:77,test,tests,77,https://hail.is,https://github.com/hail-is/hail/pull/5837#issuecomment-482289824,1,['test'],['tests']
Testability,"@daniel-goldstein After this lands in main, can we do a lets encrypt rotation just to smoke test that flow while this is all front of find? Thanks!",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12095#issuecomment-1255548750:92,test,test,92,https://hail.is,https://github.com/hail-is/hail/pull/12095#issuecomment-1255548750,1,['test'],['test']
Testability,@daniel-goldstein Can you take a quick look at this and make sure none of the deleted log statements are used in your monitoring infrastructure? Thanks!,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11904#issuecomment-1164536883:86,log,log,86,https://hail.is,https://github.com/hail-is/hail/pull/11904#issuecomment-1164536883,1,['log'],['log']
Testability,@daniel-goldstein Does this command in `gcloud -q auth activate-service-account --key-file=/test-gsa-key/key.json` in a `delete_gcp_batch_instances` CI job still work after your auth changes?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13554#issuecomment-1737439794:92,test,test-gsa-key,92,https://hail.is,https://github.com/hail-is/hail/issues/13554#issuecomment-1737439794,1,['test'],['test-gsa-key']
Testability,"@daniel-goldstein Here's my thoughts. Sound good?; I think we simply need to add an `is_rate_limit` check to `retry_transient_errors` in hailtop, and pass rather than logging it.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/14595#issuecomment-2200975779:167,log,logging,167,https://hail.is,https://github.com/hail-is/hail/issues/14595#issuecomment-2200975779,1,['log'],['logging']
Testability,@daniel-goldstein I added an exit 1 after argument validation and removed the test-dataproc and wheel dependencies in the Makefile to demonstrate the functionality in these examples:. ```sh; # HAIL_PIP_VERSION=0.2.123 \; HAIL_VERSION=0.2.123-abcdef123 \ ; GIT_VERSION=abcdef123 \; REMOTE=origin \; WHEEL=/path/to/the.whl \; GITHUB_OAUTH_HEADER_FILE=/path/to/github/oauth/header/file \; HAIL_GENETICS_HAIL_IMAGE=docker://us-docker.pkg.dev/hail-vdc/hail/hailgenetics/hail:deploy-123abc \; HAIL_GENETICS_HAIL_IMAGE_PY_3_10=docker://us-docker.pkg.dev/hail-vdc/hail/hailgenetics/hail:deploy-123abc \; HAIL_GENETICS_HAIL_IMAGE_PY_3_11=docker://us-docker.pkg.dev/hail-vdc/hail/hailgenetics/hail:deploy-123abc \; HAIL_GENETICS_HAILTOP_IMAGE=docker://us-docker.pkg.dev/hail-vdc/hail/hailgenetics/hailtop:deploy-123abc \; HAIL_GENETICS_VEP_GRCH37_85_IMAGE=docker://us-docker.pkg.dev/hail-vdc/hail/hailgenetics/vep-grch37-85:deploy-123abc \; HAIL_GENETICS_VEP_GRCH38_95_IMAGE=docker://us-docker.pkg.dev/hail-vdc/hail/hailgenetics/vep-grch38-95:deploy-123abc \; WHEEL_FOR_AZURE= \; WEBSITE_TAR=/path/to/www.tar.gz \; hail/scripts/release.sh. +++ dirname -- hail/scripts/release.sh; ++ cd -- hail/scripts; ++ pwd; + SCRIPT_DIR=/Users/dking/projects/hail/hail/scripts; + arguments='HAIL_PIP_VERSION HAIL_VERSION GIT_VERSION REMOTE WHEEL GITHUB_OAUTH_HEADER_FILE HAIL_GENETICS_HAIL_IMAGE HAIL_GENETICS_HAIL_IMAGE_PY_3_10 HAIL_GENETICS_HAIL_IMAGE_PY_3_11 HAIL_GENETICS_HAILTOP_IMAGE HAIL_GENETICS_VEP_GRCH37_85_IMAGE HAIL_GENETICS_VEP_GRCH38_95_IMAGE WHEEL_FOR_AZURE WEBSITE_TAR'; + for varname in '$arguments'; + '[' -z 0.2.123 ']'; + echo HAIL_PIP_VERSION=0.2.123; HAIL_PIP_VERSION=0.2.123; + for varname in '$arguments'; + '[' -z 0.2.123-abcdef123 ']'; + echo HAIL_VERSION=0.2.123-abcdef123; HAIL_VERSION=0.2.123-abcdef123; + for varname in '$arguments'; + '[' -z abcdef123 ']'; + echo GIT_VERSION=abcdef123; GIT_VERSION=abcdef123; + for varname in '$arguments'; + '[' -z origin ']'; + echo REMOTE=origin; REMOTE=o,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14323#issuecomment-1955223409:78,test,test-dataproc,78,https://hail.is,https://github.com/hail-is/hail/pull/14323#issuecomment-1955223409,1,['test'],['test-dataproc']
Testability,@daniel-goldstein I anticipate it will pass the tests now.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11040#issuecomment-965507019:48,test,tests,48,https://hail.is,https://github.com/hail-is/hail/pull/11040#issuecomment-965507019,1,['test'],['tests']
Testability,@daniel-goldstein I found an error in async_cancel that was exposed by the new version of nest_asyncio. I'm 99% sure the change is correct. Feel free to ask Dan to double check it. The issue was that `fetch_coro` is a Task and not a Future. Cancelling a task just adds the cancellation event to the event loop. You have to actually wait for it to finish before the state of the task will be cancelled. Dan wrote a bunch of tests that asserted `cancel` results in `cancelled == True`.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10705#issuecomment-888513583:423,test,tests,423,https://hail.is,https://github.com/hail-is/hail/pull/10705#issuecomment-888513583,2,"['assert', 'test']","['asserted', 'tests']"
Testability,"@daniel-goldstein I think I am fine with this change in theory. However, it is unclear to me how this would work if we added our encoded files to the repository. Would other forks have overwrite ours each time they merged changes? Would you want me to follow the new directions in my hail-jigold test project to verify the new changes are good?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11724#issuecomment-1144078361:296,test,test,296,https://hail.is,https://github.com/hail-is/hail/pull/11724#issuecomment-1144078361,1,['test'],['test']
Testability,"@daniel-goldstein Let's see if the tests pass now, but should be really close!!!",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12199#issuecomment-1252805285:35,test,tests,35,https://hail.is,https://github.com/hail-is/hail/pull/12199#issuecomment-1252805285,1,['test'],['tests']
Testability,"@daniel-goldstein The logs show this:. ```; insertId: ""88db8ey9nom69366""; jsonPayload: {; asctime: ""2022-02-16 23:07:40,794""; exc_info: ""Traceback (most recent call last):; File ""/usr/local/lib/python3.7/dist-packages/batch/driver/job.py"", line 65, in notify_batch_job_complete; await request(session); File ""/usr/local/lib/python3.7/dist-packages/batch/driver/job.py"", line 56, in request; await session.post(callback, json=batch_record_to_dict(record)); File ""/usr/local/lib/python3.7/dist-packages/batch/batch.py"", line 18, in batch_record_to_dict; elif record['n_failed'] > 0:; KeyError: 'n_failed'""; filename: ""job.py""; funcNameAndLine: ""notify_batch_job_complete:69""; hail_log: 1; levelname: ""ERROR""; message: ""callback for batch 1731 failed, will not retry.""; ```. `notify_batch_job_complete` just needs to join against the volatile table.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11352#issuecomment-1049107348:22,log,logs,22,https://hail.is,https://github.com/hail-is/hail/pull/11352#issuecomment-1049107348,1,['log'],['logs']
Testability,"@daniel-goldstein When you get a chance, I'd appreciate your high level opinion on this addition before I start thoroughly testing everything. Goal is to have something before the ATGU Welcome Workshop September 5th. I know the import locations are an issue in `initialize.py`. I mainly want feedback on whether the code passes the high level smell test and whether I've over designed this with too many checks and prompts or am forgetting something that would be nice to check for.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13279#issuecomment-1648236180:123,test,testing,123,https://hail.is,https://github.com/hail-is/hail/pull/13279#issuecomment-1648236180,2,['test'],"['test', 'testing']"
Testability,@daniel-goldstein looks like there's still a test failure,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5686#issuecomment-477168302:45,test,test,45,https://hail.is,https://github.com/hail-is/hail/pull/5686#issuecomment-477168302,1,['test'],['test']
Testability,"@daniel-goldstein sorry I was a dummy, what I had didn't actually do what I thought it did. It's a bit complex to get access to test information in a fixture, but there's some docs on how to do it. I did that. Now the fixture checks and only tears down a batch when the test failed.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13326#issuecomment-1664664775:128,test,test,128,https://hail.is,https://github.com/hail-is/hail/pull/13326#issuecomment-1664664775,2,['test'],['test']
Testability,@daniel-goldstein sorry can you re-approve? I got angry at the flakiness of the event loop and considered rewriting some of the batch tests that are particularly bad offenders but then thought better of it and just retried.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14091#issuecomment-1856210907:134,test,tests,134,https://hail.is,https://github.com/hail-is/hail/pull/14091#issuecomment-1856210907,1,['test'],['tests']
Testability,@daniel-goldstein still got some parser errors in the python tests.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5662#issuecomment-476883070:61,test,tests,61,https://hail.is,https://github.com/hail-is/hail/pull/5662#issuecomment-476883070,1,['test'],['tests']
Testability,"@daniel-goldstein sure, functors.reduce with a backwards iterator does the trick. I also added some tests, including one that ensures we do not evaluate arguments after the non-null one.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5560#issuecomment-471116569:100,test,tests,100,https://hail.is,https://github.com/hail-is/hail/pull/5560#issuecomment-471116569,1,['test'],['tests']
Testability,@daniel-goldstein this is a one-line change that will alleviate some of our log alerts.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11383#issuecomment-1049165930:76,log,log,76,https://hail.is,https://github.com/hail-is/hail/pull/11383#issuecomment-1049165930,1,['log'],['log']
Testability,"@daniel-goldstein, here's a much smaller test-case, though the VDS is quite large. You might try this on `gs://neale-bge/bge-wave-1.vds` to see if we can replicate.; ```python3; import hail as hl; hl.init(default_reference='GRCh38', idempotent=True); vds = hl.vds.read_vds(""gs://...""); test_intervals = ['chr13:32355250-32355251']; vds = hl.vds.filter_intervals(; vds,; [hl.parse_locus_interval(x,); for x in test_intervals]); ```. Log statements like; ```; java.net.UnknownHostException: Invalid host name: local host is: ""...-w-1/10.128.0.50""; destination host is: ""...-m.c.terra-vpc-sc-...internal."":8051; ```; suggest to me that the master node is dying, then its removed from DNS, then workers are unable to communicate with it.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13960#issuecomment-1802638976:41,test,test-case,41,https://hail.is,https://github.com/hail-is/hail/issues/13960#issuecomment-1802638976,2,"['Log', 'test']","['Log', 'test-case']"
Testability,"@danking - At first glance I do not see any installation of pyspark. * `pip show pyspark` -> WARNING: Package(s) not found: pyspark. * I see mention of `pyspark 3.3.3` in `/hail/hail/python/pinned-requirements.txt` but it seems not installed as per the logs (see below); ```; pyspark==3.3.3; # via -r hail/hail/python/requirements.txt`; ``` . * I do not see any `pyspark` in `/hail/hail/python/hailtop/hailctl/deploy.yaml`. * Checking in `/usr/lib/spark` I see reference of scala 2.12.15 same as in the hail logs; ```sh; $ cat /usr/lib/spark/RELEASE ; Spark 3.3.2-amzn-0.1 built for Hadoop 3.3.3-amzn-3.1; Build flags: -Divy.home=/home/release/.ivy2 -Dsbt.ivy.home=/home/release/.ivy2 -Duser.home=/home/release -Drepo.maven.org= -Dreactor.repo=file:///home/release/.m2/repository -Dhadoop.version=3.3.3-amzn-3.1 -Dyarn.version=3.3.3-amzn-3.1 -Dhive.version=2.3.9-amzn-3 -Dparquet.version=1.12.2-amzn-3 -Dprotobuf.version=2.5.0 -Dfasterxml.jackson.version=2.13.4 -Dfasterxml.jackson.databind.version=2.13.4 -Dcommons.httpclient.version=4.5.9 -Dcommons.httpcore.version=4.4.11 -Daws.java.sdk.version=1.12.446 -Daws.kinesis.client.version=1.12.0 -Daws.kinesis.producer.version=0.12.9 -Dscala.version=2.12.15 -DrecompileMode=all -Dmaven.deploy.plugin.version=2.8.2 -Dmaven.scaladoc.skip -Pyarn -Phadoop-3.2 -Phive -Phive-thriftserver -Psparkr -Pspark-ganglia-lgpl -Pnetlib-lgpl -Pscala-2.12 -Pkubernetes -Pvolcano -Pkinesis-asl -DskipTests; ```; I still did not found why scala is downgraded to 2.12.13. <details><summary>Hail logs</summary>; <p>; # Build Hail #; WARNING: Package(s) not found: hail; REVISION is set to ""13536b531342a263b24a7165bfeec7bd02723e4b"" which is different from old value """"; printf ""13536b531342a263b24a7165bfeec7bd02723e4b"" > env/REVISION; echo 13536b531342a263b24a7165bfeec7bd02723e4b > python/hail/hail_revision; SHORT_REVISION is set to ""13536b531342"" which is different from old value """"; printf ""13536b531342"" > env/SHORT_REVISION; HAIL_PIP_VERSION is set to ""0.2.124"" whic",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13837#issuecomment-1770502221:253,log,logs,253,https://hail.is,https://github.com/hail-is/hail/issues/13837#issuecomment-1770502221,2,['log'],['logs']
Testability,"@danking . The redirect was caused by lack of X-Forwarded-Host + X-Forwarded-Proto; * https://github.com/expressjs/express/blob/b8e50568af9c73ef1ade434e92c60d389868361d/lib/request.js#L429; * remoteAddress is the url from the last hop, not any forwarded address. > I'll revisit why ghost issues redirects with the new changes this afternoon.; Ghost doesn't read this header. They use X-Forwarded* headers, via Express: https://expressjs.com/en/guide/behind-proxies.html ; * Expresses finds ips using proxy-addr package (the getter is req.ips): https://github.com/expressjs/express/blob/3ed5090ca91f6a387e66370d57ead94d886275e1/lib/request.js#L349; * The test: https://github.com/expressjs/express/blob/3ed5090ca91f6a387e66370d57ead94d886275e1/test/req.ip.js; * proxy-addr does not support x-real-ip: https://github.com/jshttp/proxy-addr/issues/15. Ghost apparently uses X-Forwarded-For to rate limit malicious addresses:. * ""6. Include the X-Forwarded-For header, populated with the remote IP of the original request.; Without this, we aren't able to detect spam traffic patterns and your site risks being rate limited or incorrectly restricted.""; * https://ghost.org/faq/can-i-run-ghost-from-a-subdirectory/",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8107#issuecomment-587687066:654,test,test,654,https://hail.is,https://github.com/hail-is/hail/pull/8107#issuecomment-587687066,2,['test'],['test']
Testability,"@danking ; The info is as follows:; ```; [root@mg hail]# su hdfs; bash-4.2$ pyspark --jars $HAIL_HOME/build/libs/hail-all-spark.jar --conf=spark.driver.extraClassPath=$HAIL_HOME/build/libs/hail-all-spark.jar --conf=spark.executor.extraClassPath=./hail-all-spark.jar; WARNING: User-defined SPARK_HOME (/opt/cloudera/parcels/SPARK2-2.2.0.cloudera1-1.cdh5.12.0.p0.142354/lib/spark2) overrides detected (/opt/cloudera/parcels/SPARK2/lib/spark2).; WARNING: Running pyspark from user-defined location.; Python 2.7.5 (default, Aug 4 2017, 00:39:18) ; [GCC 4.8.5 20150623 (Red Hat 4.8.5-16)] on linux2; Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; Setting default log level to ""WARN"".; To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).; 17/10/19 08:45:43 WARN util.Utils: Service 'SparkUI' could not bind on port 4040. Attempting port 4041.; Welcome to; ____ __; / __/__ ___ _____/ /__; _\ \/ _ \/ _ `/ __/ '_/; /__ / .__/\_,_/_/ /_/\_\ version 2.2.0.cloudera1; /_/. Using Python version 2.7.5 (default, Aug 4 2017 00:39:18); SparkSession available as 'spark'.; >>> import hail; >>> hc = hail.HailContext(); log4j:ERROR setFile(null,false) call failed.; java.io.FileNotFoundException: hail.log (Permission denied); 	at java.io.FileOutputStream.open0(Native Method); 	at java.io.FileOutputStream.open(FileOutputStream.java:270); 	at java.io.FileOutputStream.<init>(FileOutputStream.java:213); 	at java.io.FileOutputStream.<init>(FileOutputStream.java:133); 	at org.apache.log4j.FileAppender.setFile(FileAppender.java:294); 	at org.apache.log4j.FileAppender.activateOptions(FileAppender.java:165); 	at org.apache.log4j.config.PropertySetter.activate(PropertySetter.java:307); 	at org.apache.log4j.config.PropertySetter.setProperties(PropertySetter.java:172); 	at org.apache.log4j.config.PropertySetter.setProperties(PropertySetter.java:104); 	at org.apache.log4j.PropertyConfigurator.parseAppender(PropertyConfigurator.java:842); 	at org.apa",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/2076#issuecomment-337768198:683,log,log,683,https://hail.is,https://github.com/hail-is/hail/issues/2076#issuecomment-337768198,2,['log'],"['log', 'logging']"
Testability,@danking @cseed I think all comments addressed. . This has all been tested on the production cluster. up to https://github.com/hail-is/hail/pull/5215/commits/d2fa301644eda2434f9cfa679a452b8e24117a04,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5215#issuecomment-463037660:68,test,tested,68,https://hail.is,https://github.com/hail-is/hail/pull/5215#issuecomment-463037660,1,['test'],['tested']
Testability,"@danking @cseed should be ready for testing soon. pruned portions we're not using atm, wrote docker files, tested. if you want to run both packages on your local machine, you could use the top-level docker file (or each package's). To start a local instance of the web app, simply run:; `npm install && npm bootstrap`. To get a hot-reloading version of the web app (links to your browser, refreshes all changes): `cd packages/public && npm run dev`. To start the gateway: `cd packages/hail-api-gateway && nodemon index.js`. Dev mode routing is slow. To see a production, minified build: `cd packages/public && npm run build && npm run prod-test`.; * Build is a kind of compilation process. Dev dependencies are pruned, the app is split into static bundles, and minified. Some optimizations, like inlining of some React functions also occurs. This is independent of anything V8 does . This will also show a neat readout of all bundles:; ```; Browser assets sizes after gzip:. 2.79 kB .next/static/gZEz****/pages/_app.js; 2.42 kB .next/static/gZEz****/pages/_error.js; 502 B .next/static/gZEz****/pages/auth0callback.js; 349 B .next/static/gZEz****/pages/index.js; 745 B .next/static/gZEz****/pages/notebook.js; 856 B .next/static/gZEz****/pages/scorecard.js; 243 B .next/static/gZEz****/pages/tutorial.js; 99.4 kB .next/static/chunks/commons.294f****.js; 101 B .next/static/chunks/styles.9f25****.js; 450 B .next/static/css/commons.b770adbe.chunk.css; 5.74 kB .next/static/css/styles.4f393762.chunk.css; 6.93 kB .next/static/runtime/main-76ed****.js; 737 B .next/static/runtime/webpack-8917****.js; ```. Bundling cutoffs can be tweaked, but basically any common dependencies between pages are placed into one chunk. Chunks are loaded in parallel, and no chunks are needed to load the page; it's just HTML on initial render. At least some of the chunks could theoretically be served from a CDN (styles of course, some js). Each package expects a .env file, which organizes the environment variables used",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4931#issuecomment-454271935:36,test,testing,36,https://hail.is,https://github.com/hail-is/hail/pull/4931#issuecomment-454271935,3,['test'],"['test', 'tested', 'testing']"
Testability,"@danking @tpoterba OK, I think I fixed this. I. - stripped out all support for required types in promoteNumeric matching the rest of expr, and assert that there are none,; - deeply strip all required types from types in the symbol table in the EvalContext constructor,; - don't generate required types in an the sample, variant annotations or on any struct fields in the genotype annotations in VSM.gen. Happy?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2455#issuecomment-346422442:143,assert,assert,143,https://hail.is,https://github.com/hail-is/hail/pull/2455#issuecomment-346422442,1,['assert'],['assert']
Testability,@danking @tpoterba This should be good to go. I tested it on the cloud.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3095#issuecomment-372359670:48,test,tested,48,https://hail.is,https://github.com/hail-is/hail/pull/3095#issuecomment-372359670,1,['test'],['tested']
Testability,"@danking Apologies for the rapid bump, but it would be great if I could test the envoy changes again tonight if you have no further requests.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12402#issuecomment-1301103637:72,test,test,72,https://hail.is,https://github.com/hail-is/hail/pull/12402#issuecomment-1301103637,1,['test'],['test']
Testability,"@danking Can you give it a second look? If you're happy with this structure, then I can test it in my namespace.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13098#issuecomment-1559743010:88,test,test,88,https://hail.is,https://github.com/hail-is/hail/pull/13098#issuecomment-1559743010,1,['test'],['test']
Testability,@danking Can you give this another look from a **high level**. I haven't tested it at all and can flesh out the smaller stuff later on.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12428#issuecomment-1320568267:73,test,tested,73,https://hail.is,https://github.com/hail-is/hail/pull/12428#issuecomment-1320568267,1,['test'],['tested']
Testability,"@danking Can you take another look? The only thing I didn't address is the `Phenotypes -> List[Phenotype], VariantChunks -> List[VariantChunk]`. I don't want to rip it out yet in case Wei comes out with the new SAIGE implementation with phenotype groupings. Again, just looking for a green light to start testing it. We can figure out the question about the CLI later on.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13804#issuecomment-1771696190:305,test,testing,305,https://hail.is,https://github.com/hail-is/hail/pull/13804#issuecomment-1771696190,1,['test'],['testing']
Testability,@danking Can you take one more look before I start testing again?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11249#issuecomment-1021604713:51,test,testing,51,https://hail.is,https://github.com/hail-is/hail/pull/11249#issuecomment-1021604713,1,['test'],['testing']
Testability,"@danking Comments addressed. I also added tests for the getAuthToken function. I was on the fence about adding that to this pr, but thought it would make it easier for you to verify that substring is acting appropriately, and to see what I had in mind for query handling.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5369#issuecomment-465624040:42,test,tests,42,https://hail.is,https://github.com/hail-is/hail/pull/5369#issuecomment-465624040,1,['test'],['tests']
Testability,"@danking Do you know what's up with this test? https://ci.hail.is/batches/5921822/jobs/68 Is the test wrong? I didn't change anything about the test in this PR so I feel like I must have somehow broken a dependency, but I'm unsure how because we don't use the google client library and I doubt it's a problem with aiohttp.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11974#issuecomment-1276770148:41,test,test,41,https://hail.is,https://github.com/hail-is/hail/pull/11974#issuecomment-1276770148,3,['test'],['test']
Testability,"@danking Do you want dockerfile, makefile in this pr? Do you want unit tests in this PR? Or in separate PR?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5369#issuecomment-465230568:71,test,tests,71,https://hail.is,https://github.com/hail-is/hail/pull/5369#issuecomment-465230568,1,['test'],['tests']
Testability,@danking FYI. Let me know if you want to incorporate these fixes into your own branch and close this PR. I made the same fix you made to the list_batches test.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6726#issuecomment-515074154:154,test,test,154,https://hail.is,https://github.com/hail-is/hail/pull/6726#issuecomment-515074154,1,['test'],['test']
Testability,@danking Failing tests,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10856#issuecomment-916193815:17,test,tests,17,https://hail.is,https://github.com/hail-is/hail/pull/10856#issuecomment-916193815,1,['test'],['tests']
Testability,@danking Have you actually seen anymore of these errors after your fix of the hadoop tests erasing each others' files? I considering closing this because I've not seen further evidence that hadoop isn't properly addressing transient errors.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12411#issuecomment-1349563987:85,test,tests,85,https://hail.is,https://github.com/hail-is/hail/pull/12411#issuecomment-1349563987,1,['test'],['tests']
Testability,@danking I added a change log for Batch. I assume this change will be released in the next version 0.2.42.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8795#issuecomment-630925598:26,log,log,26,https://hail.is,https://github.com/hail-is/hail/pull/8795#issuecomment-630925598,1,['log'],['log']
Testability,@danking I also have a PR onto your branch with randomized testing and comparison against Breeze here : https://github.com/danking/hail/pull/1,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1895#issuecomment-306268836:59,test,testing,59,https://hail.is,https://github.com/hail-is/hail/pull/1895#issuecomment-306268836,1,['test'],['testing']
Testability,"@danking I have unit + integration tests for 2 methods in this package. Do you want me to add them here, or in a separate PR?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5369#issuecomment-465392000:35,test,tests,35,https://hail.is,https://github.com/hail-is/hail/pull/5369#issuecomment-465392000,1,['test'],['tests']
Testability,@danking I need to address the benchmark storage requests to not be 100 Gi.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9076#issuecomment-664619127:31,benchmark,benchmark,31,https://hail.is,https://github.com/hail-is/hail/pull/9076#issuecomment-664619127,1,['benchmark'],['benchmark']
Testability,@danking I still think the name of 'jobs' should be 'job_states' and 'jobs' should be a list of the job ids. But we can figure that out in a separate PR. At least this will make testing easier for me.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5200#issuecomment-457222830:178,test,testing,178,https://hail.is,https://github.com/hail-is/hail/pull/5200#issuecomment-457222830,1,['test'],['testing']
Testability,"@danking I think I addressed most of your comments. Everything is passing. Can you look if you like the interface for `sync_check_call` etc.? If so, then can I translate your TLS commands in lists into a single string? Is there ever a reason to want to pass the list explicitly in this case?. Once you're happy with the changes, then I'll do another test round with dev deploy to make sure the cache is actually doing its thing and the garbage collection loop is working.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9095#issuecomment-665855101:350,test,test,350,https://hail.is,https://github.com/hail-is/hail/pull/9095#issuecomment-665855101,1,['test'],['test']
Testability,"@danking I think I know what is happening. If you log into a notebook, and then issue a reachability check, you get a 302, else 405. I need to support both.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5526#issuecomment-470314061:50,log,log,50,https://hail.is,https://github.com/hail-is/hail/pull/5526#issuecomment-470314061,1,['log'],['log']
Testability,@danking I think I've finally fixed everything s.t. the tests are passing,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2384#issuecomment-342374655:56,test,tests,56,https://hail.is,https://github.com/hail-is/hail/pull/2384#issuecomment-342374655,1,['test'],['tests']
Testability,@danking I tried the latest version of testng and it didn't fix the problem see my PR #3964,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3948#issuecomment-407168009:39,test,testng,39,https://hail.is,https://github.com/hail-is/hail/pull/3948#issuecomment-407168009,1,['test'],['testng']
Testability,"@danking I'm assigning this to you if you want to start looking, but I want to add some more tests before we merge it, and I think it will need to go in after #4076.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4094#issuecomment-411077664:93,test,tests,93,https://hail.is,https://github.com/hail-is/hail/pull/4094#issuecomment-411077664,1,['test'],['tests']
Testability,@danking I'm getting this error. Do you see any problem with granting that capability to the test service account?. ```; + retry gcloud -q auth activate-service-account '--key-file=/gsa-key/key.json'; + gcloud -q auth activate-service-account '--key-file=/gsa-key/key.json'; Activated service account credentials for: [test-665@hail-vdc.iam.gserviceaccount.com]; + mkdir -p /io/batch/27b395/inputs/wjDTI; + retry gsutil -u hail-vdc -m cp -R gs://hail-services-requester-pays/hello /io/batch/27b395/inputs/wjDTI/hello; + gsutil -u hail-vdc -m cp -R gs://hail-services-requester-pays/hello /io/batch/27b395/inputs/wjDTI/hello; AccessDeniedException: 403 test-665@hail-vdc.iam.gserviceaccount.com does not have serviceusage.services.use access to the Google Cloud project.; CommandException: 1 file/object could not be transferred.; + sleep 2; + gsutil -u hail-vdc -m cp -R gs://hail-services-requester-pays/hello /io/batch/27b395/inputs/wjDTI/hello; AccessDeniedException: 403 test-665@hail-vdc.iam.gserviceaccount.com does not have serviceusage.services.use access to the Google Cloud project.; CommandException: 1 file/object could not be transferred.; + sleep 5; + gsutil -u hail-vdc -m cp -R gs://hail-services-requester-pays/hello /io/batch/27b395/inputs/wjDTI/hello; AccessDeniedException: 403 test-665@hail-vdc.iam.gserviceaccount.com does not have serviceusage.services.use access to the Google Cloud project.; CommandException: 1 file/object could not be transferred.; ```,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9096#issuecomment-662085952:93,test,test,93,https://hail.is,https://github.com/hail-is/hail/pull/9096#issuecomment-662085952,5,['test'],"['test', 'test-']"
Testability,@danking I'm not sure I like this new test. We're only testing it works locally. I'm not sure this `NotADirectoryError` is actually raised in the cloud. This is a bit worrisome to me and I think we should move the tests to the test_copy suite where we can test against all clouds once Carolin has finished what you asked for.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11227#issuecomment-1015700143:38,test,test,38,https://hail.is,https://github.com/hail-is/hail/pull/11227#issuecomment-1015700143,4,['test'],"['test', 'testing', 'tests']"
Testability,"@danking I'm not sure if I understood your point, but I noticed some potential mismatches between versions that I've now corrected. The tests don't seem to be running to completion though. They've been running for ~ 24 hours. Is that expected?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2049#issuecomment-320089871:136,test,tests,136,https://hail.is,https://github.com/hail-is/hail/pull/2049#issuecomment-320089871,1,['test'],['tests']
Testability,"@danking I'm pretty sure using UnsafeRows doesn't work in this case. When I changed from UnsafeRow to SafeRow, the tests were passing on a saved random dataset that wasn't previously working. This depends on #3724 so you can ignore changes in Relational.scala and the python tests.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3720#issuecomment-395741181:115,test,tests,115,https://hail.is,https://github.com/hail-is/hail/pull/3720#issuecomment-395741181,2,['test'],['tests']
Testability,"@danking It looks like that github change you made means reviews are invalidated by further commits to the branch. Is that what we want? I misunderstood, I thought further commits to master invalidate the checks. It's really the latter I want. Either way, I need a fresh approval (minor fix to a test).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1778#issuecomment-302273874:296,test,test,296,https://hail.is,https://github.com/hail-is/hail/pull/1778#issuecomment-302273874,1,['test'],['test']
Testability,@danking Service tests all passed. I think this is ready for review!,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12428#issuecomment-1487359963:17,test,tests,17,https://hail.is,https://github.com/hail-is/hail/pull/12428#issuecomment-1487359963,1,['test'],['tests']
Testability,"@danking Set auth0 callback based on window (this turns out to be cleanest), cleaned up styles, further reduced bundle size a bit by removing use of a state management tool (that wraps any arbitrary object in an observable that can be watched), and added a basic header menu to allow logout. I think the most challenging part of using this web architecture will be managing actions on server vs browser. That is probably the only piece that isn't obvious. I added a few comments that may help; namely _app.js 's constructor runs before everything else (as it wraps all other components), but lifecycle functions (componentDidMount) run from the inner child out to the parent. Constructor runs both on server and client (since the class contains the needed functions that are translated into HTML). getInitialProps is the only lifecycle event that runs on both server and client. All other events are client only. To require something to only run on the server or browser, from getInitialProps, or constructor, check for (typeof window === 'undefined'). Not incredibly elegant, but not terribly problematic either.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4931#issuecomment-454606562:284,log,logout,284,https://hail.is,https://github.com/hail-is/hail/pull/4931#issuecomment-454606562,1,['log'],['logout']
Testability,@danking Should I be able to see the `ci-test` failure details when using my Broad affiliation?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11698#issuecomment-1087141587:41,test,test,41,https://hail.is,https://github.com/hail-is/hail/pull/11698#issuecomment-1087141587,1,['test'],['test']
Testability,"@danking Sorry to keep making you break things out, but it is really helpful for me and the changes will go in faster. Can you make a separate PR with the following changes that don't relate to passing the indices and the new index code? Specifically, the following items from your list:. ```; added row_fields which prevents reading and allocation of LID and RSID (also improved python-type-checking for row_fields and entry_fields). I changed several asserts to if's with fatals, so as not to allocate strings. We no longer copy the genotype data into a buffer in the block reader. This was forcing the fastKeys to do an unnecessary data copy. I changed the contract on BgenRecord to require that getValue is called to ""consume"" the record before the next record is taken. getValue(null) just skips bytes (no copy, no decompression). I added RegionValueBuilder.unsafeAdvance which can be used when you're creating an array of empty structs but don't want to do all the unnecessary RVB bookkeeping work. I use RegionValueBuilder.unsafeAdvance to make loading a BGEN without entry fields very fast. I fixed Table.index to not trigger a partition key info gathering; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3727#issuecomment-397281018:453,assert,asserts,453,https://hail.is,https://github.com/hail-is/hail/pull/3727#issuecomment-397281018,1,['assert'],['asserts']
Testability,@danking Tests are passing!,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5330#issuecomment-463317409:9,Test,Tests,9,https://hail.is,https://github.com/hail-is/hail/pull/5330#issuecomment-463317409,1,['Test'],['Tests']
Testability,"@danking Tests are passing. What's the problem?. Strange, cloudtools is showing 2.0.0 available, but pip is installing 1.1.6. ```; + pip search cloudtools; cloudtools (2.0.0) - Collection of utilities for working on the Google Cloud Platform.; datawire-cloudtools (0.2.6) - Datawire Cloud Tools; cloudseed (0.0.1) - Cloudtools; + pip install -U cloudtools; Collecting cloudtools; Downloading https://files.pythonhosted.org/packages/47/f1/bec895151ea74b2117c66620840e9a86436b376927b557b080289b61f754/cloudtools-1.1.16-py3-none-any.whl; Installing collected packages: cloudtools; Successfully installed cloudtools-1.1.16; ```. Ah, cloudtools 1.2.0 and 2.0.0 were set up as python 2 packages, see https://pypi.org/simple/cloudtools/:. ```; cloudtools-1.1.16-py2-none-any.whl; cloudtools-1.1.16-py3-none-any.whl; cloudtools-1.2.0-py2-none-any.whl; cloudtools-2.0.0-py2-none-any.whl; ```. 1.1.16 is set up for both. @liameabbott I assume we're only supporting Python 3?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4240#issuecomment-419786154:9,Test,Tests,9,https://hail.is,https://github.com/hail-is/hail/pull/4240#issuecomment-419786154,1,['Test'],['Tests']
Testability,"@danking Thanks a lot! Is it possible that our Hail Batch accounts aren't fully set up yet? @illusional and I are getting a 401 when trying to log into https://batch.hail.is, typically after a redirect loop.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11954#issuecomment-1173221705:143,log,log,143,https://hail.is,https://github.com/hail-is/hail/pull/11954#issuecomment-1173221705,1,['log'],['log']
Testability,"@danking Thanks for taking this over! I commented out the mark_unscheduled if the sidecar fails for debugging. The sidecar is running, but I'm getting an error because it's trying to run the top level code in batch.py. Either sidecar.py needs to be separate or we need to reconfigure batch.py so it doesn't run that code. ```; Traceback (most recent call last):; File ""/usr/lib/python3.6/runpy.py"", line 193, in _run_module_as_main; ""__main__"", mod_spec); File ""/usr/lib/python3.6/runpy.py"", line 85, in _run_code; exec(code, run_globals); File ""/usr/local/lib/python3.6/dist-packages/batch/sidecar.py"", line 14, in <module>; from .batch import REFRESH_INTERVAL_IN_SECONDS, HAIL_POD_NAMESPACE, KUBERNETES_TIMEOUT_IN_SECONDS; File ""/usr/local/lib/python3.6/dist-packages/batch/batch.py"", line 83, in <module>; db = BatchDatabase.create_synchronous('/batch-user-secret/sql-config.json'); File ""/usr/local/lib/python3.6/dist-packages/batch/database.py"", line 23, in create_synchronous; run_synchronous(cls.__init__(db, config_file)); File ""/usr/local/lib/python3.6/dist-packages/batch/database.py"", line 15, in run_synchronous; return loop.run_until_complete(coro); File ""uvloop/loop.pyx"", line 1451, in uvloop.loop.Loop.run_until_complete; File ""/usr/local/lib/python3.6/dist-packages/batch/database.py"", line 210, in __init__; await super().__init__(config_file); File ""/usr/local/lib/python3.6/dist-packages/batch/database.py"", line 27, in __init__; with open(config_file, 'r') as f:; FileNotFoundError: [Errno 2] No such file or directory: '/batch-user-secret/sql-config.json'; ```. To see the logs `kubectl -n namespace logs pod_name cleanup`",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6600#issuecomment-510272888:1595,log,logs,1595,https://hail.is,https://github.com/hail-is/hail/pull/6600#issuecomment-510272888,2,['log'],['logs']
Testability,@danking Thanks to Nick there were a fair number of basic mocking tests for the dataproc CLI and I think they cover the superficial changes that comprise this PR pretty well. I altered them a bit to use the typer/click `CLIRunner` which is pretty neat! I also managed to run `test-dataproc-37` successfully. I manually tested the rest of the `hailctl` commands. It would be nice to expand this test suite to the rest of `hailctl`.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13109#issuecomment-1583277456:58,mock,mocking,58,https://hail.is,https://github.com/hail-is/hail/pull/13109#issuecomment-1583277456,5,"['mock', 'test']","['mocking', 'test', 'test-dataproc-', 'tested', 'tests']"
Testability,"@danking This is far from done, evidenced by the fact that for some reason I'm getting tons of QoB test failures (but some are passing! :/) but I would appreciate a first pass on this if you want to do a high-level review. I do have a rough RFC that is not up to date, so let me know if you'd prefer to start the discussion from such a doc instead of the code.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13131#issuecomment-1581539600:99,test,test,99,https://hail.is,https://github.com/hail-is/hail/pull/13131#issuecomment-1581539600,1,['test'],['test']
Testability,@danking This is passing tests now,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11617#issuecomment-1112543974:25,test,tests,25,https://hail.is,https://github.com/hail-is/hail/pull/11617#issuecomment-1112543974,1,['test'],['tests']
Testability,"@danking This should be ready for a second look. I think it's pretty close to being done and I'm happy with how the code turned out. I tested it with the checks on and everything passed with 0.1% maximum difference. I hand computed one example from the database and got the same exact cost as msec_mcpu to the limit of the database precision which was 10 decimal places. . And I ran the tests first with master and found that cost about $0.0018 and then running it with the new branch cost around $0.0021 (the test job timed out right before it completed). So I'm happy I got the same order of magnitude both ways. If you have any additional ideas for checks, would be happy to put that in. I think we should leave the checking code in for now.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8759#issuecomment-629431482:135,test,tested,135,https://hail.is,https://github.com/hail-is/hail/pull/8759#issuecomment-629431482,3,['test'],"['test', 'tested', 'tests']"
Testability,@danking This should be really close to having the tests passing. The only other thing left to do once it passes in GCP is to copy the data over to Azure and make a default Azure configuration.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12428#issuecomment-1339804624:51,test,tests,51,https://hail.is,https://github.com/hail-is/hail/pull/12428#issuecomment-1339804624,1,['test'],['tests']
Testability,@danking We can delete this right? No more Cray plus Dataflow seems like it's not something we wanna be using. Plus we run tests on cloud.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/743#issuecomment-287896407:123,test,tests,123,https://hail.is,https://github.com/hail-is/hail/issues/743#issuecomment-287896407,1,['test'],['tests']
Testability,"@danking Yeah I do. I also realized that the way I'm constructing the object now uses an apply method, not a constructor. So I'll have to fiddle with the reflection a bit too. Sorry about that. Could have sworn I hit test button before submitting.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1638#issuecomment-291887240:217,test,test,217,https://hail.is,https://github.com/hail-is/hail/pull/1638#issuecomment-291887240,1,['test'],['test']
Testability,"@danking and I are giving feedback on this branch. Patrick, the test failure is due to you testing on files in scratch that are only local to your system. You should remove the test annotation @Test on scratch before pushing.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1697#issuecomment-297083904:64,test,test,64,https://hail.is,https://github.com/hail-is/hail/pull/1697#issuecomment-297083904,4,"['Test', 'test']","['Test', 'test', 'testing']"
Testability,"@danking back to you. I made progress on cleaning up linreg and logreg suites, there's more I can do in logreg especially but I'd like to keep that as a later PR. I made all changes except these:; ```; def readGt(flags: Int): Int; def skipAdDp(flags: Int): Unit; ```; I'd appreciate if you look more closely at what would be involved, I'm not sure it'd be an improvement.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1634#issuecomment-294068059:64,log,logreg,64,https://hail.is,https://github.com/hail-is/hail/pull/1634#issuecomment-294068059,2,['log'],['logreg']
Testability,@danking back to you. restarted the integration test.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1748#issuecomment-298957026:48,test,test,48,https://hail.is,https://github.com/hail-is/hail/pull/1748#issuecomment-298957026,1,['test'],['test']
Testability,@danking bump this is passing tests now. See comment.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12327#issuecomment-1292250346:30,test,tests,30,https://hail.is,https://github.com/hail-is/hail/pull/12327#issuecomment-1292250346,1,['test'],['tests']
Testability,@danking could you help me get this merged? this isn't being picked up/tested by CI,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9243#issuecomment-672397590:71,test,tested,71,https://hail.is,https://github.com/hail-is/hail/pull/9243#issuecomment-672397590,1,['test'],['tested']
Testability,"@danking danking There is a lot of things going on in this dataset that makes PCs challenging. This has 3 replicate related samples (mother and 2 children). It also contains EA, AA and Dominicans. So there is lots of recent admixture. Among the 5000 samples, there are 800 related samples. We ran eigenstrat with the 5000 samples + 2500 1000 genomes samples and those PCs look good. . So I am not sure it is the replicates that are the underlying cause. It may simply be the lack of the 1000 Genomes samples in the dataset for the PCs. I am will try adding the 1000 genomes samples to see if that fixes things. If that works, the docs would just need to recommend merging in the 1000 genomes data. I will get back to you on those results. That would be great to implement PC-Air in Hail to help streamline the processing of this type of dataset! I will be glad to test it out.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/3490#issuecomment-391760451:864,test,test,864,https://hail.is,https://github.com/hail-is/hail/issues/3490#issuecomment-391760451,1,['test'],['test']
Testability,@danking fyi- looks like the test case you added is failing?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8867#issuecomment-634848956:29,test,test,29,https://hail.is,https://github.com/hail-is/hail/pull/8867#issuecomment-634848956,1,['test'],['test']
Testability,"@danking img: https://github.com/genuinetools/img. ""Standalone, daemon-less, unprivileged Dockerfile and OCI compatible container image builder. img is more cache-efficient than Docker and can also execute multiple build stages concurrently, as it internally uses BuildKit's DAG solver. The commands/UX are the same as docker {build,tag,push,pull,login,logout,save} so all you have to do is replace docker with img in your scripts, command line, and/or life."". Oops, seems it doesn't quite work unprivileged yet, see: https://github.com/genuinetools/img#running-with-docker. Waiting on an upstream docker change, no movement in two months. Hrm.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5623#issuecomment-474189290:347,log,login,347,https://hail.is,https://github.com/hail-is/hail/pull/5623#issuecomment-474189290,2,['log'],"['login', 'logout']"
Testability,@danking looks like the test is still running into GC issues?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5626#issuecomment-475318506:24,test,test,24,https://hail.is,https://github.com/hail-is/hail/pull/5626#issuecomment-475318506,1,['test'],['test']
Testability,@danking looks like this is passing tests on the newest version of cloudtools.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4240#issuecomment-419237692:36,test,tests,36,https://hail.is,https://github.com/hail-is/hail/pull/4240#issuecomment-419237692,1,['test'],['tests']
Testability,@danking off by 1 error in test:; `org.scalatest.exceptions.TestFailedException: Some(-9223372036854775807) did not contain -9223372036854775808`,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1115#issuecomment-262351018:27,test,test,27,https://hail.is,https://github.com/hail-is/hail/pull/1115#issuecomment-262351018,2,"['Test', 'test']","['TestFailedException', 'test']"
Testability,@danking reassigned you since Richard is on vacation. He approved it before I added a few more code comments and added more tests.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3974#issuecomment-410283581:124,test,tests,124,https://hail.is,https://github.com/hail-is/hail/pull/3974#issuecomment-410283581,1,['test'],['tests']
Testability,@danking shouldn't this be getting tested / merged?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4151#issuecomment-415795977:35,test,tested,35,https://hail.is,https://github.com/hail-is/hail/pull/4151#issuecomment-415795977,1,['test'],['tested']
Testability,"@danking this is ready for a look now!. There's some slight changes to interface, etc to take advantage of the new key design--mostly now it takes row fields instead of an expr. There's also a small fix to some of the partitioner/interval stuff. The python interface is gone now, and I'll put it back in a separate PR, with real docs this time. And I pulled out all the parsing logic into its own thing.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2804#issuecomment-366001940:378,log,logic,378,https://hail.is,https://github.com/hail-is/hail/pull/2804#issuecomment-366001940,1,['log'],['logic']
Testability,@danking we should merge the delta change anyway as that's a bug that may result in test failures in the future (I just made PR of fix to 0.1). I think the log reg change is fine to go in as well.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2132#issuecomment-326109741:84,test,test,84,https://hail.is,https://github.com/hail-is/hail/pull/2132#issuecomment-326109741,2,"['log', 'test']","['log', 'test']"
Testability,"@danking you are a golden god. that is all. also, i will test it out for you this weekend",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2821#issuecomment-360964083:57,test,test,57,https://hail.is,https://github.com/hail-is/hail/pull/2821#issuecomment-360964083,1,['test'],['test']
Testability,"@danking: I addressed a few outstanding issues, and added a new test for coercion of unsorted-within-partitions RDDs.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/799#issuecomment-247485500:64,test,test,64,https://hail.is,https://github.com/hail-is/hail/pull/799#issuecomment-247485500,1,['test'],['test']
Testability,"@danking:. > Hey @shengqh !; > ; > Yeah, this is a bug in Kryo, a serialization library used by Spark, which cannot handle the size of data you're producing.; > ; > This is partly a deficiency in Hail: we assume that PLINK files are relatively small, in particular that the number of variants is small.; > ; > This issue was supposedly resolved in Spark 2.4.0+ and 3.0.0+ by [apache/spark@3e03303](https://github.com/apache/spark/commit/3e033035a3c0b7d46c2ae18d0d322d4af3808711) . You appear to be running Apache Spark version 3.3.2, so I'm surprised you encountered this. Can you confirm which version of the Kryo JAR you have in your environment?. I don't know the Kryo JAR. I tested on both docker images hailgenetics/hail:0.2.126-py3.11 and hailgenetics/hail:0.2.127-py3.11. > ; > Can you also share a bit of information about this PLINK file? `import_plink` could obviously be modified to support 30M+ variant PLINK files, but I'd like to understand better why such large PLINK files exist. Do you expect these files to continue to grow in size? Do other consumers of these PLINK files want one PLINK file per chromosome? Would it be possible to generate many PLINK files per chromosome such that all the PLINK files have roughly the same size in bytes?. We have a 35K cohort. The VCF format of chr1 is 2.4T. So we prefer to deliver plink bed format and hail matrix. And, the cohort will continue to grow in future. I will prefer to keep one file per chromosome. For large cohort, which format do you prefer? Hail matrix or Hail VDS?. > ; > Thanks for your feedback and help improving Hail!; > ; > Related issue: #5564 .",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/14168#issuecomment-1904727993:679,test,tested,679,https://hail.is,https://github.com/hail-is/hail/issues/14168#issuecomment-1904727993,1,['test'],['tested']
Testability,"@danking; ```; [root@mg hail]# echo $HAIL_HOME; /opt/Software/hail; [root@mg hail]# echo $PYTHONPATH; :/opt/Software/hail/python:/opt/cloudera/parcels/SPARK2/lib/spark2/python:/opt/cloudera/parcels/SPARK2/lib/spark2/python/lib/py4j-0.10.4-src.zip; [root@mg hail]# cd /opt/Software/hail/python; [root@mg python]# ls; hail; [root@mg python]# cd /opt/cloudera/parcels/SPARK2/lib/spark2/python; [root@mg python]# ls; docs lib MANIFEST.in pylintrc pyspark README.md run-tests run-tests.py setup.cfg setup.py test_support; [root@mg python]# cd /opt/cloudera/parcels/SPARK2/lib/spark2/python/lib/; [root@mg lib]# ls; py4j-0.10.4-src.zip PY4J_LICENSE.txt pyspark.zip; [root@mg lib]# echo $SPARK_CLASSPATH; /opt/Software/hail/build/libs/hail-all-spark.jar; [root@mg lib]# cd /opt/Software/hail/build/libs/; [root@mg libs]# ls; hail-all-spark.jar; ```; the configuration file:; ```; export SPARK_HOME=/opt/cloudera/parcels/SPARK2/lib/spark2; export HAIL_HOME=/opt/Software/hail; export PYTHONPATH=""$PYTHONPATH:$HAIL_HOME/python:$SPARK_HOME/python:`echo $SPARK_HOME/python/lib/py4j*-src.zip`""; export SPARK_CLASSPATH=$HAIL_HOME/build/libs/hail-all-spark.jar; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/2076#issuecomment-337442177:465,test,tests,465,https://hail.is,https://github.com/hail-is/hail/issues/2076#issuecomment-337442177,2,['test'],['tests']
Testability,"@gtiao here's how you can use this to log:. ```; ht.show(10, handler=lambda x: logging.info(x)); ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4303#issuecomment-420030281:38,log,log,38,https://hail.is,https://github.com/hail-is/hail/pull/4303#issuecomment-420030281,2,['log'],"['log', 'logging']"
Testability,@iris-garden Can you review again when you get a chance? Tests are all passing now,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13812#issuecomment-1883649177:57,Test,Tests,57,https://hail.is,https://github.com/hail-is/hail/pull/13812#issuecomment-1883649177,1,['Test'],['Tests']
Testability,"@iris-garden as I understand it, the root of this problem is that `batch.hail.is` and `auth.hail.is` are no longer (since #14180) sharing the same CSRF tokens, so as far as auth is concerned any action from `batch.hail.is` is treated the same as an action/redirect from `www.evilsite.com`. So I think our options would be - . 1. Logout redirects to an auth page, but we need one more user action from the page they land on to confirm log out; 2. Logout from batch can redirect to an auth page which automatically logs them out, but so could a redirect from `evilsite.com`, or someone could embed a `<img src=""https://auth.hail.is/user?logout"" />` tag in an email you receive.; - Do we care if people can log other users out by sending a bad email? Feels like ""yes"" but not the absolute end of the world",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14639#issuecomment-2263413023:329,Log,Logout,329,https://hail.is,https://github.com/hail-is/hail/pull/14639#issuecomment-2263413023,6,"['Log', 'log']","['Logout', 'log', 'logout', 'logs']"
Testability,@iris-garden can you grab that log file and upload here? it should live on the `CLUSTER_NAME-m` machine.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13690#issuecomment-1731820793:31,log,log,31,https://hail.is,https://github.com/hail-is/hail/issues/13690#issuecomment-1731820793,1,['log'],['log']
Testability,@jbloom this is my fault. I changed the expression to code without ensuring the VDS actually had the relevant fields. The doc test correctly points this out. I'll fix Monday.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1598#issuecomment-290987968:126,test,test,126,https://hail.is,https://github.com/hail-is/hail/pull/1598#issuecomment-290987968,1,['test'],['test']
Testability,"@jbloom22 Addressed first round of comments (though I haven't yet played with distributing the multiply in the solving for U from V case). I added a ""filterVariantsExpr"" to allow for the LOCO situation we're interested in allowing for, though I haven't tested any per-variant betas / pvals in cases where LDMatrix was used yet.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1984#issuecomment-314625073:253,test,tested,253,https://hail.is,https://github.com/hail-is/hail/pull/1984#issuecomment-314625073,1,['test'],['tested']
Testability,"@jbloom22 Ah right of course, I inadvertently had required 2.2.0 tests for 0.1, which doesn't support 2.2.0. Requirement off.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2842#issuecomment-362325035:65,test,tests,65,https://hail.is,https://github.com/hail-is/hail/pull/2842#issuecomment-362325035,1,['test'],['tests']
Testability,@jbloom22 Could you double check my `logreg` language?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2783#issuecomment-360241486:37,log,logreg,37,https://hail.is,https://github.com/hail-is/hail/pull/2783#issuecomment-360241486,1,['log'],['logreg']
Testability,"@jbloom22 OK, I put the test back in.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2422#issuecomment-344035511:24,test,test,24,https://hail.is,https://github.com/hail-is/hail/pull/2422#issuecomment-344035511,1,['test'],['test']
Testability,@jbloom22 That would be great. We have made Nirvana even faster recently. Also we are working on reduce the overhead (i.e. time used to load the Cache) for each Nirvana process. I will test on the best blockSize again when this is done.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3266#issuecomment-391058985:185,test,test,185,https://hail.is,https://github.com/hail-is/hail/pull/3266#issuecomment-391058985,1,['test'],['test']
Testability,"@jbloom22 This is a good change. Could you please check in a small VDS from 0.1 (perhaps name it as `0.1-commithash.vds`) and add a test that checks for a `HailException` containing the text ""invalid metadata""?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2173#issuecomment-327232866:132,test,test,132,https://hail.is,https://github.com/hail-is/hail/pull/2173#issuecomment-327232866,1,['test'],['test']
Testability,"@jbloom22 We lost our AWS EC2 instance I used for performance testing previously. I tried to build HAIL on our cluster, but was out of luck due to some Python issues. We just get another EC2 instance very recently and I haven't had a chance to test the block size yet. One thing I want to mention is that every Nirvana process will spend several seconds on reading the Cache file and Nirvana can process 10k+ variants per second (on my laptop). (I deleted my estimation as it is incorrect... ) So Nirvana prefers larger chunks of data due to the overhead of loading Cache file and relatively faster annotation speed. With other possible overhead like disk I/O (I tested HAIL with Spark running in Standalone mode, which may not be ideal) and merging the results of different Nirvana process, more Nirvana processes do not always lead a shorter processing time.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3266#issuecomment-386642917:62,test,testing,62,https://hail.is,https://github.com/hail-is/hail/pull/3266#issuecomment-386642917,3,['test'],"['test', 'tested', 'testing']"
Testability,@jbloom22 can you give the latest commit on this PR a second set of eyes? I had to fiddle with some tolerances due to https://storage.googleapis.com/hail-ci-0-1/ci/7a0732726e6873e2c0d85fed5183324ac9441d52/194ea22cd9f744a5463340130e799c8a65ca885e/index.html . I expected the test I added (`test_pcrelate_issue_5263`) to be exactly the same but it differed out at the 10th or so position.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5250#issuecomment-461123275:274,test,test,274,https://hail.is,https://github.com/hail-is/hail/pull/5250#issuecomment-461123275,1,['test'],['test']
Testability,"@jbloom22 disregard, I'm a dummy, I was compiling on the CI server and then submitting which, of course, resulted in a binary that had AVX2 instructions and the clusters we use don't have AVX2-capable processors. For the record, the useful information is stored in `/var/log/hadoop-yarn/userlogs/`.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2132#issuecomment-325737476:271,log,log,271,https://hail.is,https://github.com/hail-is/hail/pull/2132#issuecomment-325737476,1,['log'],['log']
Testability,@jbloom22 test fail was due to `NaN != NaN`. I improved the test.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2270#issuecomment-334234954:10,test,test,10,https://hail.is,https://github.com/hail-is/hail/pull/2270#issuecomment-334234954,2,['test'],['test']
Testability,"@jigold , so, I know how to fix this this, but why didn't it fail in the PR that made this change?; ```; ________________________________ test_callback _________________________________. client = <hailtop.batch_client.client.BatchClient object at 0x7f9cbc23b610>. async def test_callback(client):; import nest_asyncio # pylint: disable=import-outside-toplevel; ; nest_asyncio.apply(); ; app = web.Application(); callback_bodies = []; callback_event = asyncio.Event(); ; def url_for(uri):; host = os.environ['HAIL_BATCH_WORKER_IP']; port = os.environ['HAIL_BATCH_WORKER_PORT']; return f'http://{host}:{port}{uri}'; ; async def callback(request):; body = await request.json(); callback_bodies.append(body); callback_event.set(); return web.Response(); ; app.add_routes([web.post('/test', callback)]); runner = web.AppRunner(app); await runner.setup(); site = web.TCPSite(runner, '0.0.0.0', 5000); await site.start(); ; try:; token = secrets.token_urlsafe(32); b = create_batch(; client, callback=url_for('/test'), attributes={'foo': 'bar', 'name': 'test_callback'}, token=token; ); head = b.create_job('alpine:3.8', command=['echo', 'head']); b.create_job('alpine:3.8', command=['echo', 'tail'], parents=[head]); b.submit(); await asyncio.wait_for(callback_event.wait(), 5 * 60); callback_body = callback_bodies[0]; ; # verify required fields present; callback_body.pop('cost'); callback_body.pop('msec_mcpu'); callback_body.pop('time_created'); callback_body.pop('time_closed'); callback_body.pop('time_completed'); callback_body.pop('duration'); callback_body.pop('duration_ms'); callback_body.pop('cost_breakdown'); > assert callback_body == {; 'id': b.id,; 'user': 'test',; 'billing_project': 'test',; 'token': token,; 'state': 'success',; 'complete': True,; 'closed': True,; 'n_jobs': 2,; 'n_completed': 2,; 'n_succeeded': 2,; 'n_failed': 0,; 'n_cancelled': 0,; 'attributes': {'foo': 'bar', 'name': 'test_callback'},; }, callback_body; E AssertionError: {'attributes': {'client_job': '8051758-182',",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13739#issuecomment-1739224427:779,test,test,779,https://hail.is,https://github.com/hail-is/hail/pull/13739#issuecomment-1739224427,1,['test'],['test']
Testability,"@jigold Can you elaborate on this one? Timeout to me means testing times out, which does happen in our current CI. Should it be closed?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/5745#issuecomment-555097320:59,test,testing,59,https://hail.is,https://github.com/hail-is/hail/issues/5745#issuecomment-555097320,1,['test'],['testing']
Testability,@jigold Changes look good (approved) but something broke in the tests.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1446#issuecomment-283500834:64,test,tests,64,https://hail.is,https://github.com/hail-is/hail/pull/1446#issuecomment-283500834,1,['test'],['tests']
Testability,"@jigold Cotton is on vacation and I need to get this merged to unblock work on dbuf & shuffler. I believe I've addressed Cotton's concerns. You can see my modification to the CI tests as evidence of that. I'd like your review. Don't approve just yet though, I need to ensure any build.yaml rule for directories has the new `directory: recursive` annotation.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7626#issuecomment-566260967:178,test,tests,178,https://hail.is,https://github.com/hail-is/hail/pull/7626#issuecomment-566260967,1,['test'],['tests']
Testability,"@jigold Doesn't this suggest that the error's message is `'job_id'`? ; ```; > assert data['check_resource_aggregation_error'] is None, data; E AssertionError: {'check_incremental_error': None, 'check_resource_aggregation_error': ""'job_id'""}; E assert ""'job_id'"" is None; ```; The select statement for `attempt_by_job_group_resources` doesn't include a `job_id` column.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14282#issuecomment-1940328506:78,assert,assert,78,https://hail.is,https://github.com/hail-is/hail/pull/14282#issuecomment-1940328506,3,"['Assert', 'assert']","['AssertionError', 'assert']"
Testability,@jigold I added `LogStore` and `GCS` to manage non-blocking interaction with GCS.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6175#issuecomment-496662137:17,Log,LogStore,17,https://hail.is,https://github.com/hail-is/hail/pull/6175#issuecomment-496662137,1,['Log'],['LogStore']
Testability,"@jigold I fixed the tests (things got broken rebasing onto breaking, unsurprisingly). I also incorporated a change to `Table.view_join_rows` allowing for implicit joins with `Locus` and `Interval` keyed tables into `Variant` keyed datasets (cf. @cseed @tpoterba), which I needed for the skat test.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2812#issuecomment-361667453:20,test,tests,20,https://hail.is,https://github.com/hail-is/hail/pull/2812#issuecomment-361667453,2,['test'],"['test', 'tests']"
Testability,"@jigold I made sure that all the tests from `hail.tests.test_expr.Tests.test_cond` are both passing and going through the IR (except the first one, which has strings).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3210#issuecomment-375776769:33,test,tests,33,https://hail.is,https://github.com/hail-is/hail/pull/3210#issuecomment-375776769,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"@jigold I removed all the tests, so I think this is good to go in for now.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6454#issuecomment-505216094:26,test,tests,26,https://hail.is,https://github.com/hail-is/hail/pull/6454#issuecomment-505216094,1,['test'],['tests']
Testability,@jigold I removed the pca_join test here. Might make more sense for that change to be part of the pca test rework.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3613#issuecomment-390661244:31,test,test,31,https://hail.is,https://github.com/hail-is/hail/pull/3613#issuecomment-390661244,2,['test'],['test']
Testability,"@jigold I stood up batch/ci in my own project from `hail-is/hail:main` and then deployed this branch, taking notes of any changes I needed to make and all seemed to work out OK. I think that's about as much as I can properly test this without trying things out in haildev/hail-vdc. The steps were as follows:. 1. Generate the configmaps used by gateway/internal-gateway. These will have the routing configuration for production services (I've edited the bootstrap instructions to match); `make -C gateway envoy-xds-config && make -C internal-gateway envoy-xds-config`; 2. … wait a few seconds for CI to quietly update these configmaps with information about testing namespaces … (can manually verify changes with `download-configmap gateway-xds-config`); 3. Deploy the new versions of gateway/internal-gateway; `make -C gateway deploy NAMESPACE=default && make -C internal-gateway NAMESPACE=default`. This worked for me in my project with no downtime, but either way I would probably do the same thing as with the previous PR where I test it in azure before making changes to hail-vdc.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12095#issuecomment-1293703346:225,test,test,225,https://hail.is,https://github.com/hail-is/hail/pull/12095#issuecomment-1293703346,3,['test'],"['test', 'testing']"
Testability,@jigold I think I'd prefer we close all PRs lower in the stack and just focus on this one PR. I feel like these changes are a logical unit and I'd rather consume them together. What do you think of that?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14170#issuecomment-1919807627:126,log,logical,126,https://hail.is,https://github.com/hail-is/hail/pull/14170#issuecomment-1919807627,1,['log'],['logical']
Testability,@jigold I think the merging of orMissing to function registry in master now makes a test fail here.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1506#issuecomment-284930607:84,test,test,84,https://hail.is,https://github.com/hail-is/hail/pull/1506#issuecomment-284930607,1,['test'],['test']
Testability,"@jigold Lets see if it builds. I added a hail-ci-build.sh to vdc, since that is a project root (I don't know whether I can specify in projects vdc/scripts/user , and vdc already existed as project). I am seeing a slightly weird accumulation of gcp service accounts that look like they're being created by my script, but I'm not really sure why that's happening; each run of the script generate 1, and this hasn't been under CI (under build log nothing suggests this script was running)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5618#issuecomment-478149347:440,log,log,440,https://hail.is,https://github.com/hail-is/hail/pull/5618#issuecomment-478149347,1,['log'],['log']
Testability,"@jigold Notebook has no tests, so it doesn't have an environment.yml that needs to be updated in the hail-ci-build-image. This configuration is only for the run-time service.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5451#issuecomment-467637462:24,test,tests,24,https://hail.is,https://github.com/hail-is/hail/pull/5451#issuecomment-467637462,1,['test'],['tests']
Testability,"@jigold OK, so here's the summary of what I learned:. We don't have tabix files for GRCh38 and we only test on small positions. Many large positions without tabix files seems to cause a problem for VEP (and make it slow, unsurprisingly). Fix seems to be to download the *indexed* homo_sapiens cache https://ftp.ensembl.org/pub/release-95/variation/indexed_vep_cache/ and upload that to our QoB VEP bucket. I presume you copied from the data we use in Dataproc? If yes, we should update that to also have tabix files. Also, in Dataproc, we use highmem machines for VEP. We should change _service_vep to also use highmem machines. <details><summary>Listing the tabix files for GRCh38 and GRCh37</summary>. ```; (base) dking@wm28c-761 /tmp % gsutil ls gs://hail-qob-vep-grch38-us-central1/homo_sapiens/95_GRCh38/\*/\*.tbi; CommandException: One or more URLs matched no objects.; ```. ```; (base) dking@wm28c-761 /tmp % gsutil ls gs://hail-qob-vep-grch37-us-central1/homo_sapiens/85_GRCh37/\*/\*.tbi; gs://hail-qob-vep-grch37-us-central1/homo_sapiens/85_GRCh37/1/all_vars.gz.tbi; gs://hail-qob-vep-grch37-us-central1/homo_sapiens/85_GRCh37/10/all_vars.gz.tbi; gs://hail-qob-vep-grch37-us-central1/homo_sapiens/85_GRCh37/11/all_vars.gz.tbi; gs://hail-qob-vep-grch37-us-central1/homo_sapiens/85_GRCh37/12/all_vars.gz.tbi; gs://hail-qob-vep-grch37-us-central1/homo_sapiens/85_GRCh37/13/all_vars.gz.tbi; gs://hail-qob-vep-grch37-us-central1/homo_sapiens/85_GRCh37/14/all_vars.gz.tbi; gs://hail-qob-vep-grch37-us-central1/homo_sapiens/85_GRCh37/15/all_vars.gz.tbi; gs://hail-qob-vep-grch37-us-central1/homo_sapiens/85_GRCh37/16/all_vars.gz.tbi; gs://hail-qob-vep-grch37-us-central1/homo_sapiens/85_GRCh37/17/all_vars.gz.tbi; gs://hail-qob-vep-grch37-us-central1/homo_sapiens/85_GRCh37/18/all_vars.gz.tbi; gs://hail-qob-vep-grch37-us-central1/homo_sapiens/85_GRCh37/19/all_vars.gz.tbi; gs://hail-qob-vep-grch37-us-central1/homo_sapiens/85_GRCh37/2/all_vars.gz.tbi; gs://hail-qob-vep-grch37-us-central1/homo_sapi",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13989#issuecomment-1830868145:103,test,test,103,https://hail.is,https://github.com/hail-is/hail/issues/13989#issuecomment-1830868145,1,['test'],['test']
Testability,"@jigold OK, this is ready for review again. Just ripping out the user bucket logic now.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8834#issuecomment-645084393:77,log,logic,77,https://hail.is,https://github.com/hail-is/hail/pull/8834#issuecomment-645084393,1,['log'],['logic']
Testability,"@jigold Ok I changed this in a way that will hopefully be more clear. The rules are as follows:. 1. We only use `ci-intermediate` for anonymous images. Images are named auth, batch, etc. even when they are in tests or dev deploys.; 1. Every image draws from the main branch cache tag, named `<DOCKER_PREFIX>/<image_name>:cache`; 2. Every image has an additional cache tag that it draws from and pushes to. For deploys, that is the same as the main branch cache, for PRs, it is `cache-pr-<pr_number>`, for dev deploys it is `cache-<dev_username>`, and for deploys conducted by CIs in a non-default namespace, it is `cache-<namespace-CI-is-in>-deploy`.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11999#issuecomment-1177641450:209,test,tests,209,https://hail.is,https://github.com/hail-is/hail/pull/11999#issuecomment-1177641450,1,['test'],['tests']
Testability,"@jigold The initial scan now seems comparable, doing just `bgen_import` I get:. 0.1:; vds = hc.import_bgen('test.bgen'); real	0m29.815s; user	0m0.260s; sys	0m0.368s. 0.2:; mt = hl.import_bgen('test.bgen', ['dosage']); real	0m26.712s; user	0m0.705s; sys	0m0.119s. This is on 4 cores with a 37GB test BGEN. 0.2 seems ~15% faster now. Can you rerun the time test again once this goes and and verify you get a reasonable number of partitions to get parallelism (I'm seeing 293.) Thanks!",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3945#issuecomment-405771538:108,test,test,108,https://hail.is,https://github.com/hail-is/hail/pull/3945#issuecomment-405771538,4,['test'],['test']
Testability,"@jigold and @danking, I can't see why `ci-test` is failing, unfortunately. Can you take a look?. (and I should look into setting up Hail CI in our infra as well :-))",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11435#issuecomment-1058675021:42,test,test,42,https://hail.is,https://github.com/hail-is/hail/pull/11435#issuecomment-1058675021,1,['test'],['test']
Testability,"@jigold it's passing. It’s critical to process the group and agg joins at the same time, and to not reprocess the group joins or re-analyze when updating the key to the groups. i’ve added an additional test to confirm that it works when joins happen on both group and agg expressions (with the group expression of a different type (bool) than the original key (int) so that it would fail if key_by were done before processing the agg joins). I'll work on fixing the matrix table versions in another PR.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3730#issuecomment-397160205:202,test,test,202,https://hail.is,https://github.com/hail-is/hail/pull/3730#issuecomment-397160205,1,['test'],['test']
Testability,"@jigold not sure why this test is being marked as ""failed""---maybe because there are currently no tests in that filter?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9581#issuecomment-705649534:26,test,test,26,https://hail.is,https://github.com/hail-is/hail/pull/9581#issuecomment-705649534,2,['test'],"['test', 'tests']"
Testability,"@jigold one of these commits (the last one, I believe?) borrows a line from #3427 to get the tests working. I can wait for that to go in and then remove from this, if you prefer.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3431#issuecomment-384131910:93,test,tests,93,https://hail.is,https://github.com/hail-is/hail/pull/3431#issuecomment-384131910,1,['test'],['tests']
Testability,"@jigold poke on re-review, I addressed your commends in 667ff7e, created and moved the functions to linalg/utils in 3fdeaa1, and broke out the bit that finds the contig start indices into its own function in ec3a50f so I could test its behavior more rigorously. @tpoterba poking again on whether you're happy with where I moved the command (see above)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3873#issuecomment-403562202:227,test,test,227,https://hail.is,https://github.com/hail-is/hail/pull/3873#issuecomment-403562202,1,['test'],['test']
Testability,@jigold rightly pointed out I didn't add a regression test for this. @jigold next time request changes! @jbloom22 next time request tests! @cseed write tests for failures!,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1272#issuecomment-273972707:54,test,test,54,https://hail.is,https://github.com/hail-is/hail/pull/1272#issuecomment-273972707,3,['test'],"['test', 'tests']"
Testability,@jigold since you already took a look I sent back to you. It passed tests on last run other than the MovieLens issue.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11589#issuecomment-1072665478:68,test,tests,68,https://hail.is,https://github.com/hail-is/hail/pull/11589#issuecomment-1072665478,1,['test'],['tests']
Testability,"@jigold test are fixed, properly clean up; I think the test should be improved to check that deletion properly cleans up expected resources (rather than simply doesn't throw an error, which will happen if deletion fails for any reason other than 404), but I think that could wait for a subsequent PR, because as written, the only way they will fail to do so is if the wrong name or namespace are supplied (else they will throw an error and the test will fail).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5618#issuecomment-478175367:8,test,test,8,https://hail.is,https://github.com/hail-is/hail/pull/5618#issuecomment-478175367,3,['test'],['test']
Testability,"@jigold that's a great suggestion. To test that this code is acutally idempotent, I wanted to do this:. Duplicate the test database createDatabase task in `ci/test/resources/build.yaml` (but with a new step name). The jobs have the same parents so they race to run first. They have distinct passwords, so the resulting secret will non-deterministically have the wrong password (e.g. A creates the user, A writes its password first, B ignores already created user, then B writes its password second), but if everything but the secret works, then I'm confident repeated attempts sharing the same secret should work!. Unfortunately, I can't test CI itself in this way because test CIs (whether in dev or in a PR) are not permitted to create databases. I took your suggestion and copied the SQL query out and ran it twice instead. That worked fine. Everything was created once.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8833#issuecomment-631672719:38,test,test,38,https://hail.is,https://github.com/hail-is/hail/pull/8833#issuecomment-631672719,5,['test'],['test']
Testability,@jigold this should be simple. Last thing Dan wanted was that I fix the test,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11777#issuecomment-1170350346:72,test,test,72,https://hail.is,https://github.com/hail-is/hail/pull/11777#issuecomment-1170350346,1,['test'],['test']
Testability,"@jigold you won the lottery, but DO NOT approve until Konrad has responded with regard to whether he's happy with the result of my manual tests.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4150#issuecomment-415225079:138,test,tests,138,https://hail.is,https://github.com/hail-is/hail/pull/4150#issuecomment-415225079,1,['test'],['tests']
Testability,"@jigold you won't see the output on this job, this is a change to CI so that every PR that CI builds lists the logs. If the internal links worked and we had a test for ci2, then you'd be able to see it at the newly tested CI's website at: https://ci2.pr-6094-default-q0023anv9fmd.internal.hail.is, but neither do we test ci2 nor do these internal links seem to work.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6094#issuecomment-491899622:111,log,logs,111,https://hail.is,https://github.com/hail-is/hail/pull/6094#issuecomment-491899622,4,"['log', 'test']","['logs', 'test', 'tested']"
Testability,"@jigold. > I ran a test job with the copy tool on a 10 Gi random file and matched 1.2 Gibit / second. Does this mean something like:; ```; j = b.new_job(); j.image('hailgenetics/hail:0.2.118'); j.command('python3 -m hailtop.copy ...'); ```; Or did you use a `read_input`? I'm curious if something about how we configure the input container could affect this. I doubt it, but wanted to confirm.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12923#issuecomment-1599420578:19,test,test,19,https://hail.is,https://github.com/hail-is/hail/issues/12923#issuecomment-1599420578,1,['test'],['test']
Testability,"@jjfarrell Thanks, this is good information. Can you also get the YARN container logs from a failing run? those should have more details on what exactly went wrong. Also the hail.log file might have more information on the root cause of the `ExecutorLostFailure` issue. Also, there's been about 7 weeks of development since `d602a3d`, perhaps there's some issue with that version. (I suspect it's not that, but worth trying).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4733#issuecomment-456486653:81,log,logs,81,https://hail.is,https://github.com/hail-is/hail/issues/4733#issuecomment-456486653,2,['log'],"['log', 'logs']"
Testability,"@jmarshall, thanks doing this - would you mind adding a simple unit test to lock down the behaviour?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14700#issuecomment-2397543555:68,test,test,68,https://hail.is,https://github.com/hail-is/hail/pull/14700#issuecomment-2397543555,1,['test'],['test']
Testability,"@johnc1231 Do you have a preference on how we fix this issue? I'd prefer not to manually edit the pip package just to get the test passing, and I'm questioning the value of those checks to begin with.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11502#issuecomment-1061893668:126,test,test,126,https://hail.is,https://github.com/hail-is/hail/pull/11502#issuecomment-1061893668,1,['test'],['test']
Testability,"@johnc1231 I uncommented some of the tests that I'd commented out before because they don't hit the prune error. I had to implement some stuff on PNDArray (mostly copy, and adding a case for setRequired) in order to make it work; let me know if those were missing for a reason and I'll take it out.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8073#issuecomment-585372375:37,test,tests,37,https://hail.is,https://github.com/hail-is/hail/pull/8073#issuecomment-585372375,1,['test'],['tests']
Testability,"@johnc1231 I updated this, after discovering that HadoopFS does mkdir -p, but only during writes. I also made some small changes related to backend.py and ServiceBackend, to make it at least formally possible to use ServiceBackend (issue opened to this effect). Given the state of ServiceBackend and apiserver, I did not update test_google_fs_utils.py to explicitly check mkdir -p behavior, but this is implicitly checked in the local version of the file creation test.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6887#issuecomment-531924944:464,test,test,464,https://hail.is,https://github.com/hail-is/hail/pull/6887#issuecomment-531924944,1,['test'],['test']
Testability,"@johnc1231 I've addressed these changes in the branch I'm working with to test, so I can merge them if you agree with Dan's comments. In particular, do you have evidence the caching matters? (I've removed it)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2040#issuecomment-319675886:74,test,test,74,https://hail.is,https://github.com/hail-is/hail/pull/2040#issuecomment-319675886,1,['test'],['test']
Testability,@johnc1231 It should be now. I expect this latest commit to pass tests.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8864#issuecomment-640909201:65,test,tests,65,https://hail.is,https://github.com/hail-is/hail/pull/8864#issuecomment-640909201,1,['test'],['tests']
Testability,"@johnc1231 You can approve. It's actually already deployed, I did that to test it.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6973#issuecomment-526698057:74,test,test,74,https://hail.is,https://github.com/hail-is/hail/pull/6973#issuecomment-526698057,1,['test'],['test']
Testability,@johnc1231 `make test-dataproc` succeeded,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8150#issuecomment-591026741:17,test,test-dataproc,17,https://hail.is,https://github.com/hail-is/hail/pull/8150#issuecomment-591026741,1,['test'],['test-dataproc']
Testability,"@johnc1231 you already peeked at this, so do you mind properly reviewing it? It passes the tests now.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8511#issuecomment-613040116:91,test,tests,91,https://hail.is,https://github.com/hail-is/hail/pull/8511#issuecomment-613040116,1,['test'],['tests']
Testability,@konradjk Python tests exist. https://github.com/hail-is/hail/blob/master/hail/python/test/hail/utils/test_utils.py#L114. https://github.com/hail-is/hail/blob/d65959f65fe7c8018fcd83615e60ba8ef8233b96/hail/python/hail/fs/fs.py#L75. edit: GitHub is fancy,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7611#issuecomment-558450046:17,test,tests,17,https://hail.is,https://github.com/hail-is/hail/pull/7611#issuecomment-558450046,2,['test'],"['test', 'tests']"
Testability,@konradjk Tested,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7861#issuecomment-573827957:10,Test,Tested,10,https://hail.is,https://github.com/hail-is/hail/pull/7861#issuecomment-573827957,1,['Test'],['Tested']
Testability,"@konradjk thanks for the succinct test case, I can reproduce.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/2178#issuecomment-326819191:34,test,test,34,https://hail.is,https://github.com/hail-is/hail/issues/2178#issuecomment-326819191,1,['test'],['test']
Testability,@lgruen This breaks the `test_hailctl_batch` test. You need to make sure this message doesn't get printed when running `hailctl batch submit` with the `-o json` option.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12612#issuecomment-1400479921:45,test,test,45,https://hail.is,https://github.com/hail-is/hail/pull/12612#issuecomment-1400479921,1,['test'],['test']
Testability,"@lgruen to address your question directly, AFAIK, if you set `GOOGLE_APPLICATION_CREDENTIALS`, tools will use those credentials. That's at least the intended behavior of all Hail tools. I think `gcloud auth activate-service-account` is primarily used to tell gcloud & gsutil about a key. `gcloud auth application-default login` likewise seems to be useful for getting ADC credentials if one lacks them but not necessary for using credentials with tools that check the env var.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12526#issuecomment-1338187502:321,log,login,321,https://hail.is,https://github.com/hail-is/hail/pull/12526#issuecomment-1338187502,1,['log'],['login']
Testability,"@maccum you were right that there are multiple variants at the same position, so `position = 0` can filter. (this also means the test for `r2=1.0, bp_window_size=0` is getting lucky, since you could, in principle, have perfectly correlated variants at the same position)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3704#issuecomment-394413114:129,test,test,129,https://hail.is,https://github.com/hail-is/hail/pull/3704#issuecomment-394413114,1,['test'],['test']
Testability,@natestockham As to your more specific issue can you tell me the output of this:. ```bash; echo $SPARK_HOME; echo $HAIL_HOME; echo $PYTHONPATH; ```. Can you also post the invocation you're using to trigger this test failure? I assume you're in a clone of the Hail repository and running:. ```bash; ./gradlew test -Dspark.version=2.1.0; ```. in a shell with `$SPARK_HOME` pointing to a `2.1.0` installation of Spark.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1419#issuecomment-281828119:211,test,test,211,https://hail.is,https://github.com/hail-is/hail/issues/1419#issuecomment-281828119,2,['test'],['test']
Testability,"@natestockham there's been some data science-y investigations on our end, final results not yet ready, but it looks like that test is way over constrained. Our confidence in the LMM method has not yet changed as a result of this failure. I'll be pushing a commit to remove the test failure by Monday.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1419#issuecomment-282453922:126,test,test,126,https://hail.is,https://github.com/hail-is/hail/issues/1419#issuecomment-282453922,2,['test'],['test']
Testability,"@natestockham, I cannot reproduce your issue with this master commit:. ```; dking@wmb16-359 # git log | head -n 3; commit ee646dc7fce6131dffbe86e6ebafc6e9fd224659; Author: John Compitello <johnc@broadinstitute.org>; Date: Tue Feb 21 17:15:13 2017 -0500; ```; and this invocation of gradle (the `SPARK_HOME` path is, of course, peculiar to my machine):; ```; SPARK_HOME=/Users/dking/borg/spark-2.1.0-bin-hadoop2.7 gradle test -Dspark.version=2.1.0; ```. However, the above innovation fails in the `LinearMixedRegressionSuite`:. ```; Gradle suite > Gradle test > is.hail.methods.LinearMixedRegressionSuite.genAndFitLMM FAILED; org.scalatest.exceptions.TestFailedException at LinearMixedRegressionSuite.scala:370. 1 test completed, 1 failed; ```. The test verifies that the fit beta is equivalent, within a certain precision, to `0.8410147169942509`. The fit beta produced with Spark 2.0.2 passes this test. The fit beta produced with Spark 2.1.0 is `1.3081684472318504`. I'm on Mac OS version 10.11.6. Processor is Intel Core i7. I have not yet tried on cloud machines or a GNU/Linux VM.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1419#issuecomment-281760653:98,log,log,98,https://hail.is,https://github.com/hail-is/hail/issues/1419#issuecomment-281760653,7,"['Test', 'log', 'test']","['TestFailedException', 'log', 'test']"
Testability,"@patrick-schultz , shift = -1 can lead to some pretty ugly graphs when the range of log transformed y values is small (i.e. between 0 and 1); <img width=""1093"" alt=""Screen Shot 2022-01-26 at 2 12 03 PM"" src=""https://user-images.githubusercontent.com/13773586/151230782-3e930e56-f3c7-44f0-807c-6048bea0e1ee.png"">",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11268#issuecomment-1022511402:84,log,log,84,https://hail.is,https://github.com/hail-is/hail/pull/11268#issuecomment-1022511402,1,['log'],['log']
Testability,"@patrick-schultz @tpoterba I removed the dependence on #6534 and wrote a test to exercise the IR nodes and all the aggregators we had written. This can now be reviewed/go in independently of the other one, which was failing on a match error in Emit. (I'll request changes to block the other one from going in until we've discussed a plan for using it, since that's now the one that will send everything through the new path.)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6535#issuecomment-509383664:73,test,test,73,https://hail.is,https://github.com/hail-is/hail/pull/6535#issuecomment-509383664,1,['test'],['test']
Testability,"@patrick-schultz Alright. This passes tests locally. I'm happy with the docs verbiage. I am eager for your review!. <img width=""1105"" alt=""Screen Shot 2023-02-01 at 17 54 00"" src=""https://user-images.githubusercontent.com/106194/216184499-6b30a121-9e07-40a6-8825-dc6e7c6194bf.png"">. <img width=""1105"" alt=""Screen Shot 2023-02-01 at 17 54 10"" src=""https://user-images.githubusercontent.com/106194/216184498-5f9eaeaf-fa76-4161-acdd-81682e06aa3f.png"">",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12637#issuecomment-1412855103:38,test,tests,38,https://hail.is,https://github.com/hail-is/hail/pull/12637#issuecomment-1412855103,1,['test'],['tests']
Testability,"@patrick-schultz Are you okay with where the checkpoints are? If yes, then I'll do one last set of benchmarks and then this is ready to go!",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12629#issuecomment-1409418048:99,benchmark,benchmarks,99,https://hail.is,https://github.com/hail-is/hail/pull/12629#issuecomment-1409418048,1,['benchmark'],['benchmarks']
Testability,"@patrick-schultz I added some tests and fixed behavior as a result. I think this is a valuable change, but since I've edited it directly seems like someone else should do review as well.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12735#issuecomment-1449276699:30,test,tests,30,https://hail.is,https://github.com/hail-is/hail/pull/12735#issuecomment-1449276699,1,['test'],['tests']
Testability,@patrick-schultz I addressed your comments in the second commit and added sum/count aggregators. I also refactored the tests to test them; they're otherwise still the same.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6501#issuecomment-506923400:119,test,tests,119,https://hail.is,https://github.com/hail-is/hail/pull/6501#issuecomment-506923400,2,['test'],"['test', 'tests']"
Testability,@patrick-schultz I can add more tests if you think we need it.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5355#issuecomment-463775654:32,test,tests,32,https://hail.is,https://github.com/hail-is/hail/pull/5355#issuecomment-463775654,1,['test'],['tests']
Testability,"@patrick-schultz I made sure that a failing test would show up correctly on the report, but I forgot to save the link to the build report so I can't show it to you :(",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4809#issuecomment-440756951:44,test,test,44,https://hail.is,https://github.com/hail-is/hail/pull/4809#issuecomment-440756951,1,['test'],['test']
Testability,"@patrick-schultz I wrote this up when debugging some other stuff. With this, my other stuff encounters hard to debug array index issues. That makes me a bit apprehensive to merge it b/c I can't tell if those issues are in my other stuff or real BM issues. . My specific question: how comfortable are you with the tests of BlockMatrix. Do you think it's well tested enough to just trust this PR is correct?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13807#issuecomment-1765336270:313,test,tests,313,https://hail.is,https://github.com/hail-is/hail/pull/13807#issuecomment-1765336270,2,['test'],"['tested', 'tests']"
Testability,@patrick-schultz I'm closing this for now because there's something erroring in the python tests that I don't understand. I'll re-open once I've fixed that and am more certain that I actually understand what's happening.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4165#issuecomment-413875178:91,test,tests,91,https://hail.is,https://github.com/hail-is/hail/pull/4165#issuecomment-413875178,1,['test'],['tests']
Testability,"@patrick-schultz I'm sending this back to you because I made some pretty drastic changes trying to fix some errors. The biggest non-refactoring change that the original this introduces is that we can't parse IR for a persisted block matrix reader if the persisted block matrix doesn't exist. (This makes some amount of sense if you consider that we also can't parse the IR for a native block matrix reader if the file doesn't exist.). This led me down a rabbit hole of test failures since we're parsing IR/types a fair number of times, through the execution and after we get the result. After fiddling with it for a little bit, I removed UnpersistBlockMatrix. I'm not sure what I was thinking when I added it. I re-added an ""unpersist"" function to the backend to handle unpersisting BlockMatrices. It differs from the current Table/MatrixTable unpersist functions in that we only pass the id of the thing we want to unpersist, not the entire IR, since that's all we need.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9421#issuecomment-691300692:469,test,test,469,https://hail.is,https://github.com/hail-is/hail/pull/9421#issuecomment-691300692,1,['test'],['test']
Testability,@patrick-schultz I've updated this PR so that OrderedRVD.union() uses better logic to avoid the shuffling the RVDs that it's trying to merge. I did this by merging the partitioners so that each resulting partition only gets information from one original partition per input RVD. I've removed the unionDisjoint stuff because this merge logic should automatically do that in the case of disjoint RVDs.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4043#issuecomment-409679487:77,log,logic,77,https://hail.is,https://github.com/hail-is/hail/pull/4043#issuecomment-409679487,2,['log'],['logic']
Testability,@patrick-schultz Looks like some tests are failing / docs conflicts,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7134#issuecomment-542277918:33,test,tests,33,https://hail.is,https://github.com/hail-is/hail/pull/7134#issuecomment-542277918,1,['test'],['tests']
Testability,@patrick-schultz Lots of test failures,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10848#issuecomment-914526677:25,test,test,25,https://hail.is,https://github.com/hail-is/hail/pull/10848#issuecomment-914526677,1,['test'],['test']
Testability,"@patrick-schultz What should the behavior here be like?; During the execution of the above, we are getting the following message in the log:; ```; 2020-03-04 18:34:38 root: INFO: invalid partitioner: !lteqWithOverlap(-1)([[]-[]].right, [[]-[]].left); ```; These are empty range bounds, I feel like in this particular case, `lteqWithOverlap` should be true.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/8138#issuecomment-594938133:136,log,log,136,https://hail.is,https://github.com/hail-is/hail/issues/8138#issuecomment-594938133,1,['log'],['log']
Testability,"@patrick-schultz do we expect that after the randomness PR we need to update random tests (in this case, balding Nichols) because the sequence of generated numbers has changed?. (Context: it appears the randomness PR accidentally disabled the test_statgen.py tests which included a balding Nichols test)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12588#issuecomment-1397329460:84,test,tests,84,https://hail.is,https://github.com/hail-is/hail/pull/12588#issuecomment-1397329460,3,['test'],"['test', 'tests']"
Testability,@patrick-schultz looks like some of the tests are failing because the implementation in Emit is missing in this PR. I don't know if you wanted to swap the order of the two PRs and write a manual test or two for the other one to test that the codegen is doing the correct thing?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6534#issuecomment-509260234:40,test,tests,40,https://hail.is,https://github.com/hail-is/hail/pull/6534#issuecomment-509260234,3,['test'],"['test', 'tests']"
Testability,@patrick-schultz this is tested in the IRSuite tests for ArraySort/ToSet/ToDict. Do you want c++ tests for the ArraySorter class?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5534#issuecomment-472072730:25,test,tested,25,https://hail.is,https://github.com/hail-is/hail/pull/5534#issuecomment-472072730,3,['test'],"['tested', 'tests']"
Testability,"@patrick-schultz, sorry, I missed this in-line comment. For the sake of unifying the discussion, I'll reply in PR comment so we can continue in one thread for both discussions (which I think are intimately related). > Right, but this is on the generic key_by path, and this is no longer an obvious optimization in all cases. I think my real question is: what is the new semantics for key_by? If I want to change my key from [A, B] to [B], then probably it will shuffle and choose balanced partitions, keeping roughly the same amount of parallelism, but if the existing partitioner satisfies a somewhat obscure condition that I don't have much control over, it will instead coalesce partitions.; >; > What if we gate this behavior behind a flag on TableKeyBy, and expose a way to opt in to the optimization in python?. This behavior is only accessible when TableKeyBy isSorted=true. If you've used a hidden field (only accessible through a) my newly exposed `_key_by_assert_sorted` or b) writing IR yourself) to assert that your dataset is already in the order of the new key, I'm certain you would *not* want to shuffle. Moreover, switching from `[A, B]` to `[B]` could very well reduce your effective parallelism even after a shuffle because keys are not permitted to be split across partitions. Consider a dataset keyed by `[Locus, Alleles, Gene]` with 10k partitions. If we re-key to `[Gene]` and we only have 1000 genes annotated, we'll lose partitions. In fact, in the 1:1 partition case (the case we're optimizing here) you *must* lose parallelism because each partition contains exactly one value for the key `B`. Indeed, each partition contains only one record at all!",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8864#issuecomment-637177344:1011,assert,assert,1011,https://hail.is,https://github.com/hail-is/hail/pull/8864#issuecomment-637177344,1,['assert'],['assert']
Testability,@rcownie I addressed your comments and added some comments in the code and more tests.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3974#issuecomment-409673277:80,test,tests,80,https://hail.is,https://github.com/hail-is/hail/pull/3974#issuecomment-409673277,1,['test'],['tests']
Testability,@shulik7 just checking in. Thanks for updating the docs! Have you had a chance to test the block size?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3266#issuecomment-386617096:82,test,test,82,https://hail.is,https://github.com/hail-is/hail/pull/3266#issuecomment-386617096,1,['test'],['test']
Testability,"@tmwong2003 OK, some progress on the CI front. Thanks for your patience. A team member needs to kick off the CI job. The assigned reviewer will be responsible for that. Right now, the tests involve some sensitive tokens which need more work to be protected, so the CI logs aren't public yet. Again, the assigned reviewer should be able to share the relevant part of the logs for failures, etc. @tpoterba I kicked off the build. Can you take another look, it looks like the comments were addressed. Finally, it looks like the PR history is a bit tangled. Is it possible to clean it up so we can a reasonable commit message? Thanks!",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6262#issuecomment-501887788:184,test,tests,184,https://hail.is,https://github.com/hail-is/hail/pull/6262#issuecomment-501887788,3,"['log', 'test']","['logs', 'tests']"
Testability,"@tomwhite I rebased and modified the code to use the recently added `AnnotationImpex` (import/export) interface. I ran the tests again the quickstart and it looks good. If you're happy with the changes, I'll merge it in. Is there plan for arrays in Kudu? We might consider serializing as JSON, say, rather than the fixed array size.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/450#issuecomment-232474916:123,test,tests,123,https://hail.is,https://github.com/hail-is/hail/pull/450#issuecomment-232474916,1,['test'],['tests']
Testability,"@tpoterba . This would some uses a bit more difficult:. (Ex: ExportBGen); ```scala; class GenAnnotationView(rowType: PStruct) extends View {; private val rsidField = rowType.fieldByName(""rsid""); private val varidField = rowType.fieldByName(""varid""). private val rsidIdx = rsidField.index; private val varidIdx = varidField.index. private var region: Region = _; private var rsidOffset: Long = _; private var varidOffset: Long = _. private var cachedVarid: String = _; private var cachedRsid: String = _. def setRegion(region: Region, offset: Long) {; this.region = region. assert(rowType.isFieldDefined(region, offset, varidIdx)); assert(rowType.isFieldDefined(region, offset, rsidIdx)); this.rsidOffset = rowType.loadField(region, offset, rsidIdx); this.varidOffset = rowType.loadField(region, offset, varidIdx). cachedVarid = null; cachedRsid = null; }. def varid(): String = {; if (cachedVarid == null); cachedVarid = PString.loadString(region, varidOffset); cachedVarid; }. def rsid(): String = {; if (cachedRsid == null); cachedRsid = PString.loadString(region, rsidOffset); cachedRsid; }; }; ``` . I could fix this by:. ```scala; class GenAnnotationView(rowType: PStruct) extends View {; private val rsidField = rowType.fieldByName(""rsid""); private val rsidFieldType = rsidField.typ.asInstanceOf[PString]; private val varidField = rowType.fieldByName(""varid""); private val varidFieldType = varidField.typ.asInstanceOf[PString]. # ... def varid(): String = {; if (cachedVarid == null); cachedVarid = varidFieldType.loadString(region, varidOffset); cachedVarid; }. def rsid(): String = {; if (cachedRsid == null); cachedRsid = rsidFieldType.loadString(region, rsidOffset); cachedRsid; }; }; ```. However, it's a bit clunkier than the utility method, and will cost a bit more memory. What do you think about keeping the method as a static method? Would you prefer it be moved off PString to some other location?. Also, this is probably a good time to discuss whether we want region in the construct",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/7754#issuecomment-567164437:573,assert,assert,573,https://hail.is,https://github.com/hail-is/hail/issues/7754#issuecomment-567164437,2,['assert'],['assert']
Testability,"@tpoterba ; Hi Tim , thank you ,I tried the plink1.9, and it works. but when I use the ""importvcf"" command, there are some issues, I took the advice in ""http://www.slf4j.org/codes.html"", added one of the jars in my classpath,but the issue still appeared. (1) command and the info:; root hail $ ./build/install/hail/bin/hail importvcf src/test/resources/sample.vcf.gz -f write -o sample_4.vds; hail: info: running: importvcf src/test/resources/sample.vcf.gz -f; hail: info: running: write -o sample_4.vds; SLF4J: Failed to load class ""org.slf4j.impl.StaticLoggerBinder"".; SLF4J: Defaulting to no-operation (NOP) logger implementation; SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.; hail: info: while importing:; file:/***/hail/src/test/resources/sample.vcf.gz import clean; hail: info: timing:; importvcf: 736.849ms; write: 2.463s. (2) modify the classpath; I add the ""slf4j-nop.jar"" in the CLASSPATH,as follows:; root hail $ echo $CLASSPATH; .:/usr/share/java/slf4j/slf4j-nop.jar:/opt/BioDir/jdk/jdk1.8.0_91/lib/dt.jar:/opt/BioDir/jdk/jdk1.8.0_91/lib/tools.jar",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/457#issuecomment-230429438:338,test,test,338,https://hail.is,https://github.com/hail-is/hail/issues/457#issuecomment-230429438,4,"['log', 'test']","['logger', 'test']"
Testability,"@tpoterba ; Hi, Tim; I installed plink, and set the pathas follows,but when excute ""gradle check"",still have problems,I don't know how I should do ?; ------------------(1) ; root ***\* $ plink --file test. @----------------------------------------------------------@; | PLINK! | v1.07 | 10/Aug/2009 |; |----------------------------------------------------------|; | (C) 2009 Shaun Purcell, GNU General Public License, v2 |; |----------------------------------------------------------|; | For documentation, citation & bug-report instructions: |; | http://pngu.mgh.harvard.edu/purcell/plink/ |; @----------------------------------------------------------@. Web-based version check ( --noweb to skip ); ......-----------------------------------------------------------------------------------; (2) The path; export PLINK_HOME=/***/plink. ## export PATH=$PLINK_HOME:$PATH. (3) The errors:; Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportPlinkSuite.testBiallelic FAILED; java.io.FileNotFoundException at ExportPlinkSuite.scala:17; Running test: Test method test(org.broadinstitute.hail.methods.ExportSuite); Gradle suite > Gradle test > org.broadinstitute.hail.driver.GRMSuite.test FAILED; java.io.FileNotFoundException at GRMSuite.scala:20; Running test: Test method testGenotypeStream(org.broadinstitute.hail.variant.GenotypeStreamSuite); Gradle suite > Gradle test > org.broadinstitute.hail.methods.ImputeSexSuite.testImputeSexPlinkVersion FAILED; java.io.FileNotFoundException at ImputeSexSuite.scala:17; Running test: Test method test(org.broadinstitute.hail.variant.IntervalListSuite)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/457#issuecomment-230191234:200,test,test,200,https://hail.is,https://github.com/hail-is/hail/issues/457#issuecomment-230191234,16,"['Test', 'test']","['Test', 'test', 'testBiallelic', 'testGenotypeStream', 'testImputeSexPlinkVersion']"
Testability,"@tpoterba @cseed . Has the latest 0.2 version been tested on Centos 6 yet? While we have compiled and run it locally, we are unable to get the compiled version running on our Centos 6 hadoop cluster. An upgrade to Centos 7 is not planned to the spring so it would be great to verify that this can run on Centos 6.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4733#issuecomment-453607151:51,test,tested,51,https://hail.is,https://github.com/hail-is/hail/issues/4733#issuecomment-453607151,1,['test'],['tested']
Testability,"@tpoterba @cseed . If y'all can take a look at the docs, tests, and implementation, I want to merge this. I included a log of running on `profile.vcf.bgz` (which has 2500 samples) below, total time is about 3.5 minutes. I expect it to scale roughly like `O(nSamples^2)`. For Kyle's use case this performance is acceptable. Further performance, model, and usability improvements will be separate PRs. ```; dking@wmb16-359 # hail read -i profile.vds ibd -o foo; hail: info: running: read -i profile.vds; [Stage 0:==============> (1 + 3) / 4]SLF4J: Failed to load class ""org.slf4j.impl.StaticLoggerBinder"".; SLF4J: Defaulting to no-operation (NOP) logger implementation; SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.; [Stage 1:============================================> (3 + 1) / 4]hail: info: running: ibd -o foo; [Stage 8:==================================================> (197 + 4) / 214]hail: info: timing:; read: 3.523s; ibd: 3m33.8s. ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/738#issuecomment-250288185:57,test,tests,57,https://hail.is,https://github.com/hail-is/hail/pull/738#issuecomment-250288185,3,"['log', 'test']","['log', 'logger', 'tests']"
Testability,"@tpoterba @cseed @jigold I tested this commend in dataflow, but this does not work.; Script; `hail importbgen -s impv1.hail.sample chr21impv1.bgen \; variantqc \; annotatevariants expr -c 'va.infoMetrc = gs.infoScore()' \; exportvariants -c 'Chrom=v.contig,rsID = va.rsid,info=infoScore,Pos=v.start,Ref=v.ref,Alt=v.alt,MAF=va.qc.AF' -o file:///medpop/afib/schoi/projects/ukbb/Result/QC/variantQC.tsv`. Log; `hail: info: running: importbgen -s impv1.hail.sample chr21impv1.bgen; hail: info: Number of BGEN files parsed: 1; hail: info: Number of samples in BGEN files: 152249; hail: info: Number of variants across all BGEN files: 982854; [Stage 0:======================================================>(155 + 1) / 156]hail: info: Coerced almost-sorted dataset; hail: info: running: variantqc; hail: info: running: annotatevariants expr -c 'va.infoMetrc = gs.infoScore()'; hail: fatal: annotatevariants expr: 'no matching signature for 'infoScore()' on 'Aggregable[Genotype]'; <input>:1:va.infoMetrc = gs.infoScore()`. Thank you",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/685#issuecomment-251701348:27,test,tested,27,https://hail.is,https://github.com/hail-is/hail/issues/685#issuecomment-251701348,2,"['Log', 'test']","['Log', 'tested']"
Testability,"@tpoterba @jbloom22 I figured out the test problem---GRM currently filters out all variants that are all gt=0 or gt=2, which is not what the old code did. (The old code kept them in as all-zero rows). This means that the number of variants used to scale the the normalized genotypes is different, and so that's why we were seeing the different behavior against PLINK. I don't particularly want to count the old dataset pre-filter, and this is what we're doing for PCA, so I think that it's probably the correct thing to do in this case, also. Maybe I can just put a note in the docs that grm will filter out all monomorphic sites?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2697#issuecomment-357055805:38,test,test,38,https://hail.is,https://github.com/hail-is/hail/pull/2697#issuecomment-357055805,1,['test'],['test']
Testability,"@tpoterba @jbloom22 I think you're off the hook for the moment, we're waiting on Jon for tests. Once this goes in, I'll rebase/revise mine.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3872#issuecomment-410486447:89,test,tests,89,https://hail.is,https://github.com/hail-is/hail/pull/3872#issuecomment-410486447,1,['test'],['tests']
Testability,"@tpoterba Another hail script ran into this too many files open issue running pc_relate. ```; pc_relate_pop2.py; import pandas as pd; import numpy as np; from scipy.special import chdtri; from numpy import median; from math import log,isnan; import matplotlib as mpl; import matplotlib.pyplot as plt; import seaborn as sns; import sys; import hail as hl; from bokeh.io import output_notebook, show, export_png, output_file, save; from pprint import pprint. pop=sys.argv[1]; maf_cutoff=0.10. # input files; #. # pfn=""file:///restricted/projectnb/adgc/imp.topmed_adsp5k/analysis/adgc.aa.pheno.txt""; # apoe_fn=""file:///restricted/projectnb/ukbiobank/ad/apoe/ukbb_hg38_imputed_phased.tsv""; mt_fn='/project/adgc/topmed2.2020_07/pop/adgc.'+pop+'.autosome.dose.mt'; mt_ld_fn='/project/adgc/topmed2.2020_07/pop/adgc.'+pop+'.autosome.dose.ld_pruned.mt'; pfn=""file:///restricted/projectnb/adgc/topmed.r2.analysis/pheno/ADGC_ea_aa_eas_hisp_graace_pheno.qced.txt""; #; # Initialize Hail for GRCh38. # hl.init(default_reference='GRCh38',log=""results/adgc_pc_relate.autosome.log"",tmp_dir=""file:///restricted/projectnb/ukbiobank/ad/analysis/ad.v1/tmp""). hl.init(default_reference='GRCh38',log=""logs/adgc_pc_relate.autosome_""+pop+"".log""); table = (hl.import_table(pfn,impute=True, missing=['','.','NA'],types={; 'FID': hl.tstr,; 'IID': hl.tstr,; 'vcfID': hl.tstr,; 'status': hl.tfloat,; 'age': hl.tfloat,; 'sex': hl.tfloat,; 'apoe': hl.tstr,; 'cohort': hl.tstr,; 'pop':hl.tstr,; 'omit':hl.tint,; 'AD': hl.tint,; 'MCI': hl.tint,; 'e2': hl.tint,; 'e3': hl.tint,; 'e4': hl.tint,; 'e44': hl.tint,; 'e34': hl.tint,; 'e33': hl.tint,; 'e24': hl.tint,; 'e23': hl.tint,; 'e22': hl.tint,; 'ACT_aa': hl.tint,; 'ACT1_ea': hl.tint,; 'ACT2_ea': hl.tint,; 'ADC1_ea': hl.tint,; 'ADC10_aa': hl.tint,; 'ADC10_eas': hl.tint,; 'ADC10_ea': hl.tint,; 'ADC10_hisp': hl.tint,; 'ADC12_aa': hl.tint,; 'ADC2_ea': hl.tint,; 'ADC3_aa': hl.tint,; 'ADC3_ea': hl.tint,; 'ADC4_ea': hl.tint,; 'ADC5_ea': hl.tint,; 'ADC6_ea': hl.tint,; 'ADC7_ea': hl.tin",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/9293#issuecomment-677718403:231,log,log,231,https://hail.is,https://github.com/hail-is/hail/issues/9293#issuecomment-677718403,1,['log'],['log']
Testability,"@tpoterba Back to you. Addressed comments. Nuked MemoryBlock, moved the array to MemoryBuffer. I think I made the safety tests in MemoryBuffer complete. I changed the array to Array[Byte]. It is working. There might still be an alignment issue (x86 supports unaligned loads but with possible performance penalty) but I'm OK leaving it to be addressed separately. I think ComplexType is good but I agree we can remove representation and just fundamentalType.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2074#issuecomment-321090734:121,test,tests,121,https://hail.is,https://github.com/hail-is/hail/pull/2074#issuecomment-321090734,1,['test'],['tests']
Testability,@tpoterba Copy suggestions expected. I'm also confused by the test failures... Different tests are failing each time. Is master green? Random tests fail for me when I run unit tests against master locally as well.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4068#issuecomment-411199374:62,test,test,62,https://hail.is,https://github.com/hail-is/hail/pull/4068#issuecomment-411199374,4,['test'],"['test', 'tests']"
Testability,"@tpoterba Do you have a specific example where this fails? I think the columns are already unkeyed before export with this line:. ```; dataset = dataset._select_all(col_exprs=fam_exprs,; col_key=[],; row_exprs=bim_exprs,; entry_exprs=entry_exprs); ```. I tried making the Python test more robust where I permute the columns first so not in alphabetical order before exporting, but couldn't replicate the error. The same is true for `export_gen`.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4508#issuecomment-428976439:279,test,test,279,https://hail.is,https://github.com/hail-is/hail/issues/4508#issuecomment-428976439,1,['test'],['test']
Testability,"@tpoterba Done. A few differences from your suggestion: ; 1) No real need to check at the byte level, because modulus will be at most 3 for non-4-divisible lengths (at the byte level...and we only need to check (nBits - (m1*32)) / 8 bytes anyway), and so we would test a max of 3 bytes, and usually less than that in practice.; 2) Cotton had suggested the unstated function live on Memory...but since Memory appears to only call into unsafe, Region calls its own functions, and this code relied on Region, I put the unstaged function in Region rather than Memory. . The tests live in PContainerTest. I can move them to Region, but as we need to allocate some memory, and the easiest way to do that is through ScalaToRegionValue, which requires a ptype, and we're interested in the missing bytes at the moment, the easiest translation would have the Region test calling into PContainer, so it didn't seem to matter much. Let me know if you see it differently.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7646#issuecomment-561757839:264,test,test,264,https://hail.is,https://github.com/hail-is/hail/pull/7646#issuecomment-561757839,3,['test'],"['test', 'tests']"
Testability,"@tpoterba FYI, I added MatrixTable._same (I never thought that should be user-visible.) and set min_block_size=0 in the tests so we can load sample.vcf with more than one partition. Let me know if you have objections.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2650#issuecomment-355372066:120,test,tests,120,https://hail.is,https://github.com/hail-is/hail/pull/2650#issuecomment-355372066,1,['test'],['tests']
Testability,"@tpoterba Fixed the tests and tutorials. Ready for a look. Just a rebase of 0.2 that you already reviewed, should just need a sanity check.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2039#issuecomment-318789172:20,test,tests,20,https://hail.is,https://github.com/hail-is/hail/pull/2039#issuecomment-318789172,1,['test'],['tests']
Testability,@tpoterba How do I get the java stack trace to debug the error in the docs build (failed in the Tutorial testing)?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1430#issuecomment-282137009:105,test,testing,105,https://hail.is,https://github.com/hail-is/hail/pull/1430#issuecomment-282137009,1,['test'],['testing']
Testability,@tpoterba I added a test and an issue that described the problem. I verified the test fails on `dcf43490c` a recent `master` commit.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5250#issuecomment-460729545:20,test,test,20,https://hail.is,https://github.com/hail-is/hail/pull/5250#issuecomment-460729545,2,['test'],['test']
Testability,@tpoterba I didn't see that you fixed this already. I was going to make a PR that includes an additional test. Please add the test to your commit or I can make a separate PR. https://github.com/jigold/hail/commit/024482f2917ee887542c90219b60aa67c9e96f5d,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2630#issuecomment-353794485:105,test,test,105,https://hail.is,https://github.com/hail-is/hail/pull/2630#issuecomment-353794485,2,['test'],['test']
Testability,"@tpoterba I fiat assigned you, let me know if you want me to spin the wheel of review fortune instead. doctest_setup.py has these four lines commented out:. ````; # geneskt = methods.import_interval_list('data/genes.interval_list'); # genekt = methods.import_interval_list('data/gene.interval_list'); # ds = ds.annotate_rows(genes = ???); # ds = ds.annotate_rows(gene = genekt[ds.v.locus()]); ```. which will be used by the skat tests/docs (https://github.com/hail-is/hail/pull/2812) and maybe some burden tests/examples? They require interval joins (@patrick-schultz is working on that) and product=True (I will make a separate PR). But since things are working now, I thought I'd try to get this in first.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2829#issuecomment-361425978:429,test,tests,429,https://hail.is,https://github.com/hail-is/hail/pull/2829#issuecomment-361425978,2,['test'],['tests']
Testability,"@tpoterba I had everything working locally, but hadn't updated master. Unfortunately, there's a test failure in the new test you added for `index_globals` and I can't figure out how to fix it. I tried creating the environment separately and the `pli` field was there. Could you please take a look?. ```; _____________ [doctest] hail.matrixtable.MatrixTable.index_globals _____________; [gw0] darwin -- Python 3.6.1 //anaconda/envs/py36/bin/python; UNEXPECTED EXCEPTION: AttributeError(""StructExpression instance has no field, method, or property 'pli'\n Hint: use 'describe()' to show the names of all data fields."",); Traceback (most recent call last):. File ""//anaconda/envs/py36/lib/python3.6/doctest.py"", line 1330, in __run; compileflags, 1), test.globs). File ""<doctest hail.matrixtable.MatrixTable.index_globals[0]>"", line 1, in <module>. File ""/Users/jigold/hail/build/tmp/doctest/python/hail/expr/expressions/typed_expressions.py"", line 1161, in __getattr__; raise AttributeError(get_nice_attr_error(self, item)). AttributeError: StructExpression instance has no field, method, or property 'pli'; Hint: use 'describe()' to show the names of all data fields. /Users/jigold/hail/build/tmp/doctest/python/hail/matrixtable.py:2197: UnexpectedException; ============== 1 failed, 420 passed, 13 skipped in 79.03 seconds ===============; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3620#issuecomment-390841993:96,test,test,96,https://hail.is,https://github.com/hail-is/hail/pull/3620#issuecomment-390841993,3,['test'],['test']
Testability,@tpoterba I just realized I forgot to propagate the FUSE config through to worker jobs. Should I be and I got lucky that the singular test is just doing everything driver-side? Or is there a test we can write to ensure that worker jobs access the FASTA data?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12736#issuecomment-1478404495:134,test,test,134,https://hail.is,https://github.com/hail-is/hail/pull/12736#issuecomment-1478404495,2,['test'],['test']
Testability,@tpoterba I made it lazily check for nullness so that users can still run the Java & Scala tests without installing spark.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1119#issuecomment-264290702:91,test,tests,91,https://hail.is,https://github.com/hail-is/hail/pull/1119#issuecomment-264290702,1,['test'],['tests']
Testability,@tpoterba I think your assertion was backwards. Please take a look at my changes.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11937#issuecomment-1163818592:23,assert,assertion,23,https://hail.is,https://github.com/hail-is/hail/pull/11937#issuecomment-1163818592,1,['assert'],['assertion']
Testability,"@tpoterba I'm leaving the WIP label on this for now, because I'd like to make a careful pass over everything now that it's done, to make sure late bugfixes are handled consistently throughout. But tests are passing, and should be ready for you to start digging in.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12031#issuecomment-1211202371:197,test,tests,197,https://hail.is,https://github.com/hail-is/hail/pull/12031#issuecomment-1211202371,1,['test'],['tests']
Testability,@tpoterba Instead of using `hailtop/requirements.txt` + `hail/requirements.txt` you can use `hail/pinned-requirements.txt`. It includes all the fully-pinned requirements to install hail (it is the union of the hailtop and hail requirements) and is the version of the requirements that we test with.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12829#issuecomment-1500285929:288,test,test,288,https://hail.is,https://github.com/hail-is/hail/pull/12829#issuecomment-1500285929,1,['test'],['test']
Testability,@tpoterba Is there a way to test the pip package still works?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6437#issuecomment-504535236:28,test,test,28,https://hail.is,https://github.com/hail-is/hail/pull/6437#issuecomment-504535236,1,['test'],['test']
Testability,"@tpoterba Next step for me is to get hail build jobs into a batch dag format, teach CI to read such a format, and restructure our builds to use this. Then all this log stuff will be much more straightforward.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4823#issuecomment-440801981:164,log,log,164,https://hail.is,https://github.com/hail-is/hail/pull/4823#issuecomment-440801981,1,['log'],['log']
Testability,"@tpoterba OK, this is ready for final review. Flags are now duplicated in Python so that service backend can perform all actions without starting a JVM. I have a test that verifies the flag sets, their envvars, and the default values, are all the same. I preserved the randomness behavior. We can address that in a separate PR. The flags now use the Hail `configuration_of` machinery which checks, in order:; - an explicit value (not relevant to flags); - a deprecated environment variable (these are the current flag envvars); - an environment variable with a mechanically derived name (e.g. `HAIL_QUERY_NO_WHOLE_STAGE_CODEGEN`); - the hail configuration file (usually: ""~/.config/hail/config.ini"") under the section ""query"". FWIW, hail configuration files look like this:. ```; (base) dking@wm28c-761 hail % cat ~/.config/hail/config.ini ; [query]; backend = spark; jar_url = gs://hail-query/jars/dking/0wfcw2e6sma9/f4fb19e3d387d6efc6cf0f19b95bec59c95b793a.jar. [batch]; remote_tmpdir = gs://1-day/dktmp/; billing_project = hail. ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12423#issuecomment-1411200434:162,test,test,162,https://hail.is,https://github.com/hail-is/hail/pull/12423#issuecomment-1411200434,1,['test'],['test']
Testability,"@tpoterba OK, this is ready for review. It passes with Jon's VEP test setup:. ```; Checking 'hl.vep' replicates on 'gs://hail-common/vep/vep/vep_examplars/vep_35d9e30.mt'; 2018-08-10 22:02:28 Hail: INFO: vep: annotated 1196 variants; TEST PASSED; ```. invoked as:. ```; actual = hl.vep(expected.select(), 'gs://hail-common/vep/vep/vep85-gcloud.json'); ```. I will prepare a discuss post for when it is ready to merge.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3872#issuecomment-412219934:65,test,test,65,https://hail.is,https://github.com/hail-is/hail/pull/3872#issuecomment-412219934,2,"['TEST', 'test']","['TEST', 'test']"
Testability,@tpoterba Tests are passing,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12139#issuecomment-1335247646:10,Test,Tests,10,https://hail.is,https://github.com/hail-is/hail/pull/12139#issuecomment-1335247646,1,['Test'],['Tests']
Testability,"@tpoterba That example loses the singletons (nodes with no edges that are not passed to the maximal_independent_set method). With the old method, we worked around this by collecting all the nodes in python (both nodes with edges and singleton nodes) and then filtering to remove the nodes returned by maximal_independent_set. But collecting all the nodes in python and then passing them to filter_rows is slow. So I'm moving the logic of collecting all the nodes and filtering down to Scala.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2975#issuecomment-368108496:429,log,logic,429,https://hail.is,https://github.com/hail-is/hail/pull/2975#issuecomment-368108496,1,['log'],['logic']
Testability,"@tpoterba That test doesn't pass, even with this fix:. ```; 2021-04-26 15:57:13 Hail: INFO: Running Hail version 0.2.65-77eb6e1a1cf4; 2021-04-26 15:57:14 Hail: ERROR: error from strategy JvmCompile. java.lang.RuntimeException: unrealizable value unused asymmetrically: eos=false, ped=true. 	at is.hail.expr.ir.streams.StreamProducer$.defineUnusedLabels(EmitStream.scala:29); 	at is.hail.expr.ir.Emit.$anonfun$emitI$68(Emit.scala:1080); 	at is.hail.expr.ir.IEmitCodeGen.map(Emit.scala:304); 	at is.hail.expr.ir.Emit.emitI(Emit.scala:1065); 	at is.hail.expr.ir.Emit.emitInNewBuilder$1(Emit.scala:674); 	at is.hail.expr.ir.Emit.$anonfun$emitI$26(Emit.scala:816); 	at is.hail.expr.ir.EmitCode$.fromI(Emit.scala:391); 	at is.hail.expr.ir.Emit.$anonfun$emitI$25(Emit.scala:816); 	at scala.collection.TraversableLike.$anonfun$map$1(TraversableLike.scala:286); 	at scala.collection.mutable.ResizableArray.foreach(ResizableArray.scala:62); 	at scala.collection.mutable.ResizableArray.foreach$(ResizableArray.scala:55); 	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:49); 	at scala.collection.TraversableLike.map(TraversableLike.scala:286); 	at scala.collection.TraversableLike.map$(TraversableLike.scala:279); 	at scala.collection.AbstractTraversable.map(Traversable.scala:108); 	at is.hail.expr.ir.Emit.emitI(Emit.scala:815); 	at is.hail.expr.ir.Emit$.$anonfun$apply$4(Emit.scala:99); 	at is.hail.expr.ir.EmitCodeBuilder$.scoped(EmitCodeBuilder.scala:19); 	at is.hail.expr.ir.EmitCodeBuilder$.scopedCode(EmitCodeBuilder.scala:24); 	at is.hail.expr.ir.EmitMethodBuilder.emitWithBuilder(EmitClassBuilder.scala:1044); 	at is.hail.expr.ir.WrappedEmitMethodBuilder.emitWithBuilder(EmitClassBuilder.scala:1095); 	at is.hail.expr.ir.WrappedEmitMethodBuilder.emitWithBuilder$(EmitClassBuilder.scala:1095); 	at is.hail.expr.ir.EmitFunctionBuilder.emitWithBuilder(EmitClassBuilder.scala:1192); 	at is.hail.expr.ir.Emit$.apply(Emit.scala:97); 	at is.hail.expr.ir.Compile$.apply(Compile.scala:78); 	at",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10330#issuecomment-827119604:15,test,test,15,https://hail.is,https://github.com/hail-is/hail/pull/10330#issuecomment-827119604,1,['test'],['test']
Testability,@tpoterba The only things that come to mind are shuffle issues and shared filesystem bugs. Regardless we already start a cluster and it's not hard to use that existing functionality run a non-local test.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5033#issuecomment-449491735:198,test,test,198,https://hail.is,https://github.com/hail-is/hail/pull/5033#issuecomment-449491735,1,['test'],['test']
Testability,"@tpoterba The tests now all pass. I'd appreciate your input on 32965c8 , the last commit in this sequence. It shortens the names of methods, possibly truncating them more than we already do, but I had found that something was blowing memory related to large classes/constants and once the types are much larger than a few KB, they're not really that useful. Thanks!",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9371#issuecomment-684054912:14,test,tests,14,https://hail.is,https://github.com/hail-is/hail/pull/9371#issuecomment-684054912,1,['test'],['tests']
Testability,"@tpoterba This should be ready for a look. It doesn't currently support InitOp, etc., but I will follow up with that once it's finished. Let me know if you want me to push TableIR tests to this PR or to split out those nodes into a separate PR.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8602#issuecomment-622126422:180,test,tests,180,https://hail.is,https://github.com/hail-is/hail/pull/8602#issuecomment-622126422,1,['test'],['tests']
Testability,"@tpoterba When you get a chance, could you please look over the PruneDeadFields code I added and also the test suite for it? I wasn't sure what to do.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4131#issuecomment-412149140:106,test,test,106,https://hail.is,https://github.com/hail-is/hail/pull/4131#issuecomment-412149140,1,['test'],['test']
Testability,@tpoterba You have a failing test when trying to TypeCheck an IR.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11155#issuecomment-994941723:29,test,test,29,https://hail.is,https://github.com/hail-is/hail/pull/11155#issuecomment-994941723,1,['test'],['test']
Testability,"@tpoterba did a quick pass of tests. Goal for the testGetNestedElement* was to test the minimal set that would prove correctness: 1) base case with 1 element, 2) collection of elements, 3) collection of nested elements, since from this we can deduce that we can handle any nested depth (although we cannot guarantee this; the tests don't account for stopping conditions by depth)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6990#issuecomment-532417330:30,test,tests,30,https://hail.is,https://github.com/hail-is/hail/pull/6990#issuecomment-532417330,4,['test'],"['test', 'testGetNestedElement', 'tests']"
Testability,@tpoterba failing the test you wrote,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11023#issuecomment-956312369:22,test,test,22,https://hail.is,https://github.com/hail-is/hail/pull/11023#issuecomment-956312369,1,['test'],['test']
Testability,"@tpoterba fixed the config issue and changed n_partitions to ensure workers are scheduled for the FASTA reading. I tested this on a single batch worker so the jobs overlapped and flexed the shared mount code, but we don't really have a guarantee in our test setup because batch has no way to force collocation of jobs (and even so we can't exactly force that the runtimes will overlap). I suppose if there's an issue here it will bubble up as a nondeterministic failure. Not great but perhaps good enough for now?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12736#issuecomment-1499151688:115,test,tested,115,https://hail.is,https://github.com/hail-is/hail/pull/12736#issuecomment-1499151688,2,['test'],"['test', 'tested']"
Testability,@tpoterba is what I changed the current test to sufficient?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5855#issuecomment-482689656:40,test,test,40,https://hail.is,https://github.com/hail-is/hail/pull/5855#issuecomment-482689656,1,['test'],['test']
Testability,"@tpoterba last time I looked at this it was good to go, but failing on a bad test that I'm fixing with #5442. If you rebase I'll approve this.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5283#issuecomment-467525836:77,test,test,77,https://hail.is,https://github.com/hail-is/hail/pull/5283#issuecomment-467525836,1,['test'],['test']
Testability,@tpoterba please take a look at the last commit: I created `linalg/utils` and put both functions inside. I also moved the tests to `test_linalg`. Are you happy with these changes?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3873#issuecomment-402296977:122,test,tests,122,https://hail.is,https://github.com/hail-is/hail/pull/3873#issuecomment-402296977,1,['test'],['tests']
Testability,"@tpoterba ready for another look. I killed isGenericGenotype. filterGenotypes just makes filtered cells null. GenotypeStream now supports null genotypes, this is a breaking change. I bumped the file version (to 0x101) and nuked the 0.1 and other legacy tests. The merge target is now the 0.2 branch. Once the CI is correctly handling 0.1 and devel/0.2, we can merge 0.2 into the master and just work out of master.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1872#issuecomment-304126037:253,test,tests,253,https://hail.is,https://github.com/hail-is/hail/pull/1872#issuecomment-304126037,1,['test'],['tests']
Testability,"@tpoterba see changes, I made it backwards compatible by adding a parameter. I'm using the Konrad xmas present now. Let's not approve until I test against local UKBB and test in a cluster (I want to ensure it works at scale too).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5078#issuecomment-452503149:142,test,test,142,https://hail.is,https://github.com/hail-is/hail/pull/5078#issuecomment-452503149,2,['test'],['test']
Testability,"@tpoterba the changes you proposed cause tests to fail (OrderingSuite.testBinarySearchOnDict) . Also, I'm confused by the proposal, because arrayRep has no fundamental type, and while we could add one, the fundamental types in PSet and PDict were constructed differently in master (PSet's elementType is not necessarily a PStruct in master). edit: Ah, I think I misunderstood, you wanted `override val fundamentalType: PArray = arrayRep.fundamentalType` I think. I could place a lazy fundamentalType on arrayRep that used whatever elementType was defined, and completely remove fundamentalType from PSet and PDict",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7687#issuecomment-565554122:41,test,tests,41,https://hail.is,https://github.com/hail-is/hail/pull/7687#issuecomment-565554122,2,['test'],"['testBinarySearchOnDict', 'tests']"
Testability,"@tpoterba the doctests are tests, no?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6841#issuecomment-519709334:27,test,tests,27,https://hail.is,https://github.com/hail-is/hail/pull/6841#issuecomment-519709334,1,['test'],['tests']
Testability,"@tpoterba this actually fails tests, am I being overly optimistic about what extract intervals can achieve? The following are the failures and they're all about the number of partitions after a filter.; ```; FAILED test/hail/extract_intervals/test_full_key.py::test_mt_lt[locus] - assert 20 == 15; FAILED test/hail/extract_intervals/test_full_key.py::test_mt_le[locus] - assert 20 == 15; FAILED test/hail/extract_intervals/test_full_key.py::test_mt_ge[locus] - assert 20 == 6; FAILED test/hail/extract_intervals/test_full_key.py::test_mt_gt[locus] - assert 20 == 6; FAILED test/hail/extract_intervals/test_full_key.py::test_ht_lt[locus] - assert 20 == 15; FAILED test/hail/extract_intervals/test_full_key.py::test_ht_le[locus] - assert 20 == 15; FAILED test/hail/extract_intervals/test_full_key.py::test_ht_ge[locus] - assert 20 == 6; FAILED test/hail/extract_intervals/test_full_key.py::test_ht_gt[locus] - assert 20 == 6; FAILED test/hail/extract_intervals/test_full_key.py::test_mt_lt[Locus] - assert 20 == 15; FAILED test/hail/extract_intervals/test_full_key.py::test_mt_le[Locus] - assert 20 == 15; FAILED test/hail/extract_intervals/test_full_key.py::test_mt_ge[Locus] - assert 20 == 6; FAILED test/hail/extract_intervals/test_full_key.py::test_mt_gt[Locus] - assert 20 == 6; FAILED test/hail/extract_intervals/test_full_key.py::test_ht_lt[Locus] - assert 20 == 15; FAILED test/hail/extract_intervals/test_full_key.py::test_ht_le[Locus] - assert 20 == 15; FAILED test/hail/extract_intervals/test_full_key.py::test_ht_ge[Locus] - assert 20 == 6; FAILED test/hail/extract_intervals/test_full_key.py::test_ht_gt[Locus] - assert 20 == 6; ======================================================================================================================================= 16 failed, 34 passed in 19.17s =======================================================================================================================================; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12484#issuecomment-1319322867:30,test,tests,30,https://hail.is,https://github.com/hail-is/hail/pull/12484#issuecomment-1319322867,33,"['assert', 'test']","['assert', 'test', 'tests']"
Testability,@tpoterba this appears to break several tests.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4125#issuecomment-412540177:40,test,tests,40,https://hail.is,https://github.com/hail-is/hail/pull/4125#issuecomment-412540177,1,['test'],['tests']
Testability,@tpoterba this is now tested / ready (I'll add a doc example and a bit more documentation later). Let's discuss reconciliation,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4501#issuecomment-429380091:22,test,tested,22,https://hail.is,https://github.com/hail-is/hail/pull/4501#issuecomment-429380091,1,['test'],['tested']
Testability,@tpoterba this only changed the site so there were no artifacts https://storage.googleapis.com/hail-ci-0-1/ci/3a49ac588e2ffd20f6cee2fbc795b3b1fb668f3a/81c08e2d6376d6ebdf2f9e5c990137cd3ec6fdb3/job-log,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4459#issuecomment-424869066:196,log,log,196,https://hail.is,https://github.com/hail-is/hail/pull/4459#issuecomment-424869066,1,['log'],['log']
Testability,@tpoterba was it not testing before? Looks like build 37 is running now. It's gonna test everything because a file was modified in the root of the repository.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4944#issuecomment-446448431:21,test,testing,21,https://hail.is,https://github.com/hail-is/hail/pull/4944#issuecomment-446448431,2,['test'],"['test', 'testing']"
Testability,@tpoterba with the table agg counter benchmark:; ```; old aggs	9.915	9.818	0.246; new aggs	9.706	9.501	0.375; ```,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6727#issuecomment-521003645:37,benchmark,benchmark,37,https://hail.is,https://github.com/hail-is/hail/pull/6727#issuecomment-521003645,1,['benchmark'],['benchmark']
Testability,"@tpoterba, these are great. We should create a service that accepts and write logs so we can write a command line `hl.send_log_to_hail_team()`. (Maybe shorter.)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4421#issuecomment-424189518:78,log,logs,78,https://hail.is,https://github.com/hail-is/hail/pull/4421#issuecomment-424189518,1,['log'],['logs']
Testability,"@tpoterba. I am sorry to replied too late! ; I was going to write to a HDFS file system. In the command:; ```; spark-submit --executor-memory 16g --executor-cores 4 --class org.broadinstitute.hail.driver.Main ******/hail-all-spark.jar --master yarn-client importvcf --log-file /user/hail/hail.log /user/hail/split_test.vcf splitmulti write -o /user/hail/split_test_1_1.vds exportvcf -o /user/hail/split_test_1_1.vcf; ```; /user/hail was the HDFS path. The spark version is :; ```; root ~ $ spark-shell; Welcome to; ____ __; / __/__ ___ _____/ /__; _\ \/ _ \/ _ `/ __/ '_/; /___/ .__/\_,_/_/ /_/\_\ version 1.6.0; /_/. Using Scala version 2.10.5 (Java HotSpot(TM) 64-Bit Server VM, Java 1.8.0_91); Type in expressions to have them evaluated.; Type :help for more information.; ```; Thank you very much for help!. *************************From Digital China Health***********************",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1003#issuecomment-261481148:268,log,log-file,268,https://hail.is,https://github.com/hail-is/hail/issues/1003#issuecomment-261481148,2,['log'],"['log', 'log-file']"
Testability,@tpoterba: I fixed everything except the null variant in bgen block reader. The Jenkins tests are running now.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/243#issuecomment-215215199:88,test,tests,88,https://hail.is,https://github.com/hail-is/hail/pull/243#issuecomment-215215199,1,['test'],['tests']
Testability,@tpoterba: It looks like multiple tests failed on Jenkins. I should have time later this afternoon to look into this.; @cseed: It took 21 minutes for this commit to be tested. Gradle suite > Gradle test > org.broadinstitute.hail.io.LoadBgenSuite.testBgenImportRandom FAILED; org.broadinstitute.hail.FatalException at LoadBgenSuite.scala:139. Gradle suite > Gradle test > org.broadinstitute.hail.io.LoadBgenSuite.testGavinExample FAILED; org.broadinstitute.hail.FatalException at LoadBgenSuite.scala:37. Gradle suite > Gradle test > org.broadinstitute.hail.methods.RenameSamplesSuite.test FAILED; org.broadinstitute.hail.FatalException at RenameSamplesSuite.scala:59,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/291#issuecomment-210432089:34,test,tests,34,https://hail.is,https://github.com/hail-is/hail/pull/291#issuecomment-210432089,8,['test'],"['test', 'testBgenImportRandom', 'testGavinExample', 'tested', 'tests']"
Testability,"@vladsaveliev , we've had a bit of CI instability here which is causing tests to fail. Looks like it's merged now, I'll do a release.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11435#issuecomment-1059199901:72,test,tests,72,https://hail.is,https://github.com/hail-is/hail/pull/11435#issuecomment-1059199901,1,['test'],['tests']
Testability,A billing limit test failed which is concerning. I'm going to get rid of the approval until I understand why.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12283#issuecomment-1271739403:16,test,test,16,https://hail.is,https://github.com/hail-is/hail/pull/12283#issuecomment-1271739403,1,['test'],['test']
Testability,"A checklist of things to make this robust:. - [x] https://github.com/Nealelab/cloudtools/issues/72; - [x] we need more permissions:; ```; ++ cluster start ci-test-4d8a9b262c3687f33359d92afdae693c819dfb09-e9e8a40bb4f0c2337e5088c26186a4da4948bed2 --version devel --spark 2.2.0 --jar build/libs/hail-all-spark.jar --zip build/distributions/hail-python.zip; ERROR: (gcloud.dataproc.clusters.create) PERMISSION_DENIED: Request had insufficient authentication scopes.; ```; - [x] be certain clusters don't stick around. I am not too concerned about the latter. We should look carefully, but it appears that, by default, processes on pods [get 30s notice via TERM](https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods) before they're killed. All `cluster` needs to do is to send google a termination request. Although the command takes forever to exit after `cluster stop`, this is because it waits for the cluster to shut down before returning. I regularly issue `cluster stop` and then force-kill the `cluster` command instead of waiting for the cluster to shutdown.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4241#issuecomment-417653146:158,test,test-,158,https://hail.is,https://github.com/hail-is/hail/pull/4241#issuecomment-417653146,1,['test'],['test-']
Testability,"A couple changes I made in my branch daniel-goldstein:artefact-registry-upstream need to be merged into this branch before the tests will pass. Notably [this](https://github.com/hail-is/hail/pull/10347/commits/68d7ba1cdf6ba0b49c9d4a4714217b1eeb8182c3) (I'm going to follow up about putting that in a devbin function). We can also just merge #10347 and close this PR instead, whichever you prefer.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10107#issuecomment-824919037:127,test,tests,127,https://hail.is,https://github.com/hail-is/hail/pull/10107#issuecomment-824919037,1,['test'],['tests']
Testability,"A couple of notes:. - I moved the actual writing of the InsnNodes to the method's InsnList onto the MethodBuilder (MethodBuilder.close()) itself, per Dan's suggestion. This is a little weird because it gets called in fb.classAsBytes(), and so calling it earlier will basically add the instructions again, and we should never do this. I'm thinking of adding some logic to check that a method isn't ""closed"", or at least clearing out the instruction buffer afterwards.; - I want to implement `<init>` in terms of the method builder, but we don't have a way to deal with Unit return types well yet. Dan's made a crack at this as part of #2555, so I'm going to hold off on that until I can use that.; - We realized that the auto-adding of a return op at the end of the method was causing some extra bytecode to be added at the end of the method if you explicitly called Code._return() to return the last Code object in the method. We decided that keeping the return op in MethodBuilder and just not calling _return unless returning in the middle of a method was nicer, since Scala doesn't use return x either.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2569#issuecomment-351811149:362,log,logic,362,https://hail.is,https://github.com/hail-is/hail/pull/2569#issuecomment-351811149,1,['log'],['logic']
Testability,"A few new test failures coming from better generators, I assume. IBD one looks like a weird corner case where we differ from plink when there are only three variants. I'll look at the rest soon.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1902#issuecomment-306294818:10,test,test,10,https://hail.is,https://github.com/hail-is/hail/pull/1902#issuecomment-306294818,1,['test'],['test']
Testability,"A few observations:; - `Prop` is essentially a named `Gen[Unit]`; - The type of `Prop.forAll` is `Gen[T] -> (U -> Boolean) -> Prop`; - The first two observations suggest: `Prop.forAll` has type: `Gen[T] -> (U -> Boolean) -> Gen[Unit]`; - A `Gen[Unit]` is a bit artificial because the test framework halts execution (presumably with an exception) when a counter-example is found. I instead prefer that `Prop.forAll` has type: `Gen[T] -> (U -> Boolean) -> Gen[Boolean]`; - Now `Prop.forAll` has the same type as `Gen.flatMap[Boolean]`. It seems the difference between `forAll` and `flatMap` is that `forAll` conceptually preforms a product operation while `flatMap` performs a sampling. However, I think they are, in reality, the same operation: sampling. The implementation for `GenProp3` looks like:. ``` scala; for (i <- 0 until p.count) {; val v1 = g1(p); val v2 = g2(p); val v3 = g3(p); val r = f(v1, v2, v3); if (!r) {; println(s""! ${prefix}Falsified after $i passed tests.""); println(s""> ARG_0: $v1""); println(s""> ARG_1: $v2""); println(s""> ARG_2: $v3""); assert(r); }; }; ```. Which could be re-written as:. ``` scala; for (i <- 0 until p.count) {; (for (v1 <- g1; v2 <- g2; v3 <- g3) {; if (!r) {; println(s""! ${prefix}Falsified after $i passed tests.""); println(s""> ARG_0: $v1""); println(s""> ARG_1: $v2""); println(s""> ARG_2: $v3""); assert(r); }; })(p); }; ```. The primary difference between `flatMap` and `forAll` seems to be in error reporting. We can fix this by noting `Gen[T]` is currently a Reader monad on `Parameters`. If we add a ""forAll stack"" to `Parameters` we could implement `forAll` as:. ``` scala; def forAll[T,U](gt: Gen[T], gu: T -> Gen[U]): Gen[U] =; for (t <- gt; u <- local(pushQuantified(t), gu(t)) yield u. def pushQuantified(x: Any)(Parameters p): Paramters =; new Parameters(p.rng, p.size, p.count, (x :: p.quanitifed)); ```. We complete the Reader monad transformation by adding the `local` operation to `class Gen[T]`. ``` scala; // in class Gen; def local(modify: Par",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/400#issuecomment-238901220:284,test,test,284,https://hail.is,https://github.com/hail-is/hail/issues/400#issuecomment-238901220,2,['test'],"['test', 'tests']"
Testability,"A little more context, this is the number of batch resources per project, per user. Ci and test are an order of magnitude more than Ben W. who is two orders of magnitude above his nearest competitors.; ```; +------------------------+-----------+----------+; | billing_project | user | count(*) |; +------------------------+-----------+----------+; | benchmark | benchmark | 1595 |; | broad-mpg-gnomad | mwilson | 17 |; | ci | ci | 328597 |; | daly-neale-sczmeta | fgulamal | 292 |; | daly-neale-sczmeta | tsingh | 71 |; | hail | dking | 1610 |; | hail | johnc | 5932 |; | test | test | 126717 |; | test | test-dev | 2347 |; | tgg-rare-disease | weisburd | 10534 |; | ukb-pharma-browser-dev | msolomon | 161 |; +------------------------+-----------+----------+; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9809#issuecomment-742845557:91,test,test,91,https://hail.is,https://github.com/hail-is/hail/pull/9809#issuecomment-742845557,7,"['benchmark', 'test']","['benchmark', 'test', 'test-dev']"
Testability,"A miracle. It finally passed. That was a real slog. I pushed a bunch of non-trivial changes, so it is probably good if you give a skeptical, fresh look. Summary of new changes:; - added PType.literalPType that infers PTypes from Scala literals, use in a few places (emit for Literal, BroadcastRegionValue constructor from annotation, etc.); - require Table global and row types to be required; - same for MatrixValue, but also cols and entries (the entries array, not individual entries, which an be missing); - Don't upcast globals in TableKeyBy and TableOrderBy; - added EType setRequired; - AbstractCodecSpecs assert row and global etypes are present at the toplevel, and setRequired(true) if they are coming from encoders written by previous versions; - rename PType.copyFromType to PType.copyFromAdddres. Modify it so it can ""downcast"": convert to a PType with greater requiredness. This is used in converting TableValues to MatrixValues to satisfy the requiredness assertions. Let me know if you have any questions.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8371#issuecomment-609070509:613,assert,assert,613,https://hail.is,https://github.com/hail-is/hail/pull/8371#issuecomment-609070509,2,['assert'],"['assert', 'assertions']"
Testability,"A quick and dirty local test of different performances:; ```; 2017-09-22 18:05:57 Hail: INFO: baldingnichols: generating genotypes for 20 populations, 1000 samples, and 10000 variants...; [Stage 0:> (0 + 10) / 10]2017-09-22 18:05:58 Hail: INFO: Coerced sorted dataset; [Stage 374:==========================================> (3 + 1) / 4]. phi 27.4091310501. 2017-09-22 18:06:24 Hail: INFO: baldingnichols: generating genotypes for 20 populations, 1000 samples, and 10000 variants...; 2017-09-22 18:06:24 Hail: INFO: Coerced sorted dataset; [Stage 735:==========================================> (3 + 1) / 4]. phik2 34.3392460346. 2017-09-22 18:06:58 Hail: INFO: baldingnichols: generating genotypes for 20 populations, 1000 samples, and 10000 variants...; 2017-09-22 18:06:59 Hail: INFO: Coerced sorted dataset; [Stage 1192:==========================================> (3 + 1) / 4]. phik2k0 67.0002729893. 2017-09-22 18:08:05 Hail: INFO: baldingnichols: generating genotypes for 20 populations, 1000 samples, and 10000 variants...; 2017-09-22 18:08:06 Hail: INFO: Coerced sorted dataset; [Stage 1561:==========================================> (3 + 1) / 4]. all 102.006611109. ```. Time is in seconds. The most painful operation is clearly k0, but I bet most people will only want phi, maybe phi and k2.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2249#issuecomment-331572653:24,test,test,24,https://hail.is,https://github.com/hail-is/hail/pull/2249#issuecomment-331572653,1,['test'],['test']
Testability,A root file was modified so it has to test every piece. One of its batch jobs gets stuck in the queue and triggers a timeout. Hopefully this passes since there's no traffic right now.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4924#issuecomment-447199915:38,test,test,38,https://hail.is,https://github.com/hail-is/hail/pull/4924#issuecomment-447199915,1,['test'],['test']
Testability,"A test failed because `hailctl config unset` now returns an error if the config variable does not exist. Let me know if you think we should maintain the current behavior -- otherwise, I slightly modified the tests.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13224#issuecomment-1677602623:2,test,test,2,https://hail.is,https://github.com/hail-is/hail/pull/13224#issuecomment-1677602623,2,['test'],"['test', 'tests']"
Testability,"AFAICT, this has not happened since and I'm unaware of any way to programmatically check this state. I think we've essentially resolved this issue by having GitHub be aware that we are using these tests for automated tests. It appears they flagged us as OK since then.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4533#issuecomment-433530686:197,test,tests,197,https://hail.is,https://github.com/hail-is/hail/issues/4533#issuecomment-433530686,2,['test'],['tests']
Testability,"AFAICT, you didn't edit the release.sh script; do I misunderstand what you're worried about?. Can you run the dataproc tests via dev deploy and post the batch links here? I think this should do it. ```; hailctl dev deploy --branch jigold/fix-vep-grch38-cache -s test_dataproc-38 -s test_dataproc-37; ```. If those pass then I'm confident `vep-GRCh38.sh` is correct.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14071#issuecomment-1883942042:119,test,tests,119,https://hail.is,https://github.com/hail-is/hail/pull/14071#issuecomment-1883942042,1,['test'],['tests']
Testability,"AFAIK, we don't test credential discovery. A little tricky because you want to modify the file system, which isn't kosher on a developer's laptop. Also not clear what to do about, e.g., the metadata server. You could mock it, but I've always felt pretty negative about the value of mocking. You might try adding some build.yaml steps that use docker to replicate some common environments?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11207#issuecomment-1007489641:16,test,test,16,https://hail.is,https://github.com/hail-is/hail/pull/11207#issuecomment-1007489641,3,"['mock', 'test']","['mock', 'mocking', 'test']"
Testability,AHH!; ```; [gw1] PASSED test/hail/methods/test_qc.py::Tests::test_vep_grch37_against_dataproc ; ```,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12428#issuecomment-1487367426:24,test,test,24,https://hail.is,https://github.com/hail-is/hail/pull/12428#issuecomment-1487367426,2,"['Test', 'test']","['Tests', 'test']"
Testability,"AIK, no other part of our system deletes these repositories. [1]:; ```; {; ""id"": 152339517,; ""node_id"": ""MDEwOlJlcG9zaXRvcnkxNTIzMzk1MTc="",; ""name"": ""ci-test-p4a9fxo7"",; ""full_name"": ""hail-ci-test/ci-test-p4a9fxo7"",; ""private"": false,; ""owner"": {; ""login"": ""hail-ci-test"",; ""id"": 43152710,; ""node_id"": ""MDEyOk9yZ2FuaXphdGlvbjQzMTUyNzEw"",; ""avatar_url"": ""https://avatars1.githubusercontent.com/u/43152710?v=4"",; ""gravatar_id"": """",; ""url"": ""https://api.github.com/users/hail-ci-test"",; ""html_url"": ""https://github.com/hail-ci-test"",; ""followers_url"": ""https://api.github.com/users/hail-ci-test/followers"",; ""following_url"": ""https://api.github.com/users/hail-ci-test/following{/other_user}"",; ""gists_url"": ""https://api.github.com/users/hail-ci-test/gists{/gist_id}"",; ""starred_url"": ""https://api.github.com/users/hail-ci-test/starred{/owner}{/repo}"",; ""subscriptions_url"": ""https://api.github.com/users/hail-ci-test/subscriptions"",; ""organizations_url"": ""https://api.github.com/users/hail-ci-test/orgs"",; ""repos_url"": ""https://api.github.com/users/hail-ci-test/repos"",; ""events_url"": ""https://api.github.com/users/hail-ci-test/events{/privacy}"",; ""received_events_url"": ""https://api.github.com/users/hail-ci-test/received_events"",; ""type"": ""Organization"",; ""site_admin"": false; },; ""html_url"": ""https://github.com/hail-ci-test/ci-test-p4a9fxo7"",; ""description"": null,; ""fork"": false,; ""url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7"",; ""forks_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/forks"",; ""keys_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/keys{/key_id}"",; ""collaborators_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/collaborators{/collaborator}"",; ""teams_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/teams"",; ""hooks_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/hooks"",; ""issue_events_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/issues/events{/numbe",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858:1808,test,test,1808,https://hail.is,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858,1,['test'],['test']
Testability,"AIL_DEBUG_MODE which does not exist; ELASTIC_MAJOR_VERSION is set to ""7"" which is different from old value """"; printf ""7"" > env/ELASTIC_MAJOR_VERSION; make -C src/main/c prebuilt; make[1]: Entering directory `/mnt/tmp/hail/hail/src/main/c'; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux Upcalls.cpp -MG -M -MF build/Upcalls.d -MT build/Upcalls.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux testutils/unit-tests.cpp -MG -M -MF build/testutils/unit-tests.d -MT build/testutils/unit-tests.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux test.cpp -MG -M -MF build/test.d -MT build/test.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux Region_test.cpp -MG -M -MF build/Region_test.d -MT build/Region_test.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux Region.cpp -MG -M -MF build/Region.d -MT build/Region.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux PartitionIterators.cpp -MG -M -MF build/PartitionIterators.d -MT build/PartitionIterators.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13837#issuecomment-1770502221:5342,test,test,5342,https://hail.is,https://github.com/hail-is/hail/issues/13837#issuecomment-1770502221,1,['test'],['test']
Testability,"AWS retry logic was implemented in https://github.com/hail-is/hail/commit/ceb343b22ef9096c3b06428c10ca6886fea3581f. Jackie's #13368 merged. This should squash the rest of what we've been seeing. https://github.com/hail-is/hail/pull/13883 When that's merged, I think we call this issue complete.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13351#issuecomment-1773552129:10,log,logic,10,https://hail.is,https://github.com/hail-is/hail/issues/13351#issuecomment-1773552129,1,['log'],['logic']
Testability,Activating the service account in the test locally screwed up my local permissions. Need to fix before merging.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5762#issuecomment-479569572:38,test,test,38,https://hail.is,https://github.com/hail-is/hail/pull/5762#issuecomment-479569572,1,['test'],['test']
Testability,Actual root cause: the new logic to handle triggering a pod when a parent finished incorrectly started a pod even if the job was cancelled,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/5168#issuecomment-456621353:27,log,logic,27,https://hail.is,https://github.com/hail-is/hail/issues/5168#issuecomment-456621353,1,['log'],['logic']
Testability,"Actually I get a different error when doing a small reproducible example, but looks related:. ```; ht = hl.utils.range_table(10).annotate_globals(test='yay'); ht2 = hl.utils.range_table(10).annotate_globals(test='yay'); ht.join(ht2).show(); ```; gives:; ```; Hail version: devel-c2508f35dc41; Error summary: HailException: optimization changed type!; before: Table{global:Struct{test:String,test_1:String},key:[idx],row:Struct{idx:Int32}}; after: Table{global:Struct{test:String},key:[idx],row:Struct{idx:Int32}}; Before IR:; ----------; (TableHead 11; (TableJoin inner 1; (TableMapGlobals; (TableRange 10 8); (InsertFields; (Ref Struct{} global); (test; (Str ""yay"")))); (TableMapGlobals; (TableRange 10 8); (InsertFields; (Ref Struct{} global); (test; (Str ""yay"")))))); After IR:; ---------; (TableHead 11; (TableJoin inner 1; (TableMapGlobals; (TableRange 10 8); (InsertFields; (Ref Struct{} global); (test; (Str ""yay"")))); (TableMapGlobals; (TableRange 10 8); (InsertFields; (Ref Struct{} global))))); ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4311#issuecomment-420251986:146,test,test,146,https://hail.is,https://github.com/hail-is/hail/issues/4311#issuecomment-420251986,7,['test'],['test']
Testability,"Actually also fixed in 3.0.2, so will test with that for now. Trying to get all tests passing in anticipation of Google's dataproc image update and Spark 3.1.1 release.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10054#issuecomment-788986746:38,test,test,38,https://hail.is,https://github.com/hail-is/hail/pull/10054#issuecomment-788986746,2,['test'],"['test', 'tests']"
Testability,Actually deleted the test altogether. It's an overlap with another test in aggregatorsuite,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3485#issuecomment-387058400:21,test,test,21,https://hail.is,https://github.com/hail-is/hail/pull/3485#issuecomment-387058400,2,['test'],['test']
Testability,"Actually, comparing singular vectors is not a robust test, even accounting for sign. Suppose `A` has two equal (or nearly equal) singular values. Then there is a 2-dimensional subspace of vectors, all of which are equally good singular vectors for that singular value. If the singular values are sufficiently separated, then comparing singular vectors should be safe, but I don't think it's necessary; the other checks should force that. I think we only need to check (all approximate comparisons),; * we got the right singular values, by comparing with numpy (unless we constructed a test matrix with known singular values); * the singular vectors are orthonormal (i.e. `Ut U = Id` and `Vt V = Id`); * the factorization `A = U Sigma Vt`. Then it follows that for each right singular vector `V_i`, `A v_i = sigma_i u_i` holds approximately, so `v_i` is a good singular vector, i.e. it really does capture `sigma_i` variance, and we checked that `sigma_i` is close to the true singular value.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9727#issuecomment-730626936:53,test,test,53,https://hail.is,https://github.com/hail-is/hail/pull/9727#issuecomment-730626936,2,['test'],['test']
Testability,"Actually, it looks like you got rid of logs entirely for the JVM entryway?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11471#issuecomment-1058066720:39,log,logs,39,https://hail.is,https://github.com/hail-is/hail/pull/11471#issuecomment-1058066720,1,['log'],['logs']
Testability,"Actually, maybe we just don't want to push to any cache at all for test deployments.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11907#issuecomment-1152522572:67,test,test,67,https://hail.is,https://github.com/hail-is/hail/pull/11907#issuecomment-1152522572,1,['test'],['test']
Testability,"Actually, the change log doesn't make sense as the version of the service isn't related to the documentation/hail pip version. Thoughts on removing the change log here and just having client interface changes?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8844#issuecomment-631683697:21,log,log,21,https://hail.is,https://github.com/hail-is/hail/pull/8844#issuecomment-631683697,2,['log'],['log']
Testability,Add test please.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1373#issuecomment-279190312:4,test,test,4,https://hail.is,https://github.com/hail-is/hail/pull/1373#issuecomment-279190312,1,['test'],['test']
Testability,Added Jackie's test!,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2630#issuecomment-353816303:15,test,test,15,https://hail.is,https://github.com/hail-is/hail/pull/2630#issuecomment-353816303,1,['test'],['test']
Testability,"Added Pruner tests, and update the add-ir-checklist.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8520#issuecomment-612126069:13,test,tests,13,https://hail.is,https://github.com/hail-is/hail/pull/8520#issuecomment-612126069,1,['test'],['tests']
Testability,Added a test.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7478#issuecomment-551083244:8,test,test,8,https://hail.is,https://github.com/hail-is/hail/pull/7478#issuecomment-551083244,1,['test'],['test']
Testability,"Added another commit. This should fix the math rendering problem. Works for me on all Safari, Firefox and Chrome now. Since it was hard to reproduce, not linking to the issue, we should get the community to test it first.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/637#issuecomment-241093024:207,test,test,207,https://hail.is,https://github.com/hail-is/hail/pull/637#issuecomment-241093024,1,['test'],['test']
Testability,Added docs and tests,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1645#issuecomment-292270329:15,test,tests,15,https://hail.is,https://github.com/hail-is/hail/pull/1645#issuecomment-292270329,1,['test'],['tests']
Testability,"Added index file:. ```; $ cat /tmp/test/index.tsv; /tmp/test/part-00.tsv.bgz	{""col_idx"":0}; /tmp/test/part-01.tsv.bgz	{""col_idx"":1}; /tmp/test/part-02.tsv.bgz	{""col_idx"":2}; /tmp/test/part-03.tsv.bgz	{""col_idx"":3}; /tmp/test/part-04.tsv.bgz	{""col_idx"":4}; /tmp/test/part-05.tsv.bgz	{""col_idx"":5}; /tmp/test/part-06.tsv.bgz	{""col_idx"":6}; /tmp/test/part-07.tsv.bgz	{""col_idx"":7}; /tmp/test/part-08.tsv.bgz	{""col_idx"":8}; /tmp/test/part-09.tsv.bgz	{""col_idx"":9}; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5208#issuecomment-458989639:35,test,test,35,https://hail.is,https://github.com/hail-is/hail/pull/5208#issuecomment-458989639,11,['test'],['test']
Testability,Added logging support (logs no longer written to stderr),MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1085#issuecomment-260388521:6,log,logging,6,https://hail.is,https://github.com/hail-is/hail/pull/1085#issuecomment-260388521,2,['log'],"['logging', 'logs']"
Testability,Added more tests and single_key option. Ready for review.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1708#issuecomment-296492792:11,test,tests,11,https://hail.is,https://github.com/hail-is/hail/pull/1708#issuecomment-296492792,1,['test'],['tests']
Testability,Added new test that checks summing mix of regular and transposed data to make sure that future changes respect striding.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9209#issuecomment-669232370:10,test,test,10,https://hail.is,https://github.com/hail-is/hail/pull/9209#issuecomment-669232370,1,['test'],['test']
Testability,Added requested test. Back to you @danking,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1046#issuecomment-258220342:16,test,test,16,https://hail.is,https://github.com/hail-is/hail/pull/1046#issuecomment-258220342,1,['test'],['test']
Testability,"Added server blocks. @cseed. Added the proxy forwarding headers for consistency (and may provide more information in logs), although they're not strictly necessary. Prometheus doesn't seem to be working, but behavior is identical without move to server blocks (namely it redirects to a default Nginx page on internal.hail.is ; same behavior with and without this change). Behavior of redirecting to ""service"".internal if missing slash still occurs; this seems to occur without hitting the namespace monitoring router (meaning `k logs router-868b794f58-r49hr -n monitoring` shows nothing). So this appears to be happening upstream. Had surprising amount of trouble /monitoring from the routes, even with corresponding changes in monitoring.yaml, and trying to rewrite in a /monitoring block (meaning tried location / and location /monitoring/*, both with and without rewrite rule `rewrite /monitoring/grafana/ /` or similar with a capture group). Something I don't quite understand, insight appreciated because I would prefer not to spend more time experimenting with this. Also, would it be reaonsalbe to not propagate the /namespace/service to internal routes (so rewrite before sending)? It seems like internal server blocks receive the full url, which means that they would need to handle those subpaths when used internally, but not when used normally (for instance I'm not sure how notebook deployed to a namespace gets away with not having a special path for `akotlar/`. Does the last commit address the goal?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7015#issuecomment-540393516:117,log,logs,117,https://hail.is,https://github.com/hail-is/hail/pull/7015#issuecomment-540393516,2,['log'],['logs']
Testability,"Added test + docs page, addressed all comments. Back to you.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1696#issuecomment-297134678:6,test,test,6,https://hail.is,https://github.com/hail-is/hail/pull/1696#issuecomment-297134678,1,['test'],['test']
Testability,"Added test, ready for review.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1720#issuecomment-297238390:6,test,test,6,https://hail.is,https://github.com/hail-is/hail/pull/1720#issuecomment-297238390,1,['test'],['test']
Testability,Added testing build steps as well.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5962#issuecomment-490193339:6,test,testing,6,https://hail.is,https://github.com/hail-is/hail/pull/5962#issuecomment-490193339,1,['test'],['testing']
Testability,"Added the non-blocked buffer spec to `baseBufferSpecs` which now all get tested in `NativeDecoderSuite` and `NativeEncoderSuite`. `NativeEncoderSuite` used to assert that the compressed bytes produced by the Scala and C++ buffer specs were the same, which is not necessarily true. Changed it so it uses Scala buffer spec to decompress both the Scala compressed and C++ compressed outputs to assert they decompress to the same thing. The decoder suite already asserts that something encoded through Scala is decoded correctly in C++",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5890#issuecomment-484914074:73,test,tested,73,https://hail.is,https://github.com/hail-is/hail/pull/5890#issuecomment-484914074,4,"['assert', 'test']","['assert', 'asserts', 'tested']"
Testability,"Added the python test, it returns bogus results in `main` so it's a good one.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10695#issuecomment-886712569:17,test,test,17,https://hail.is,https://github.com/hail-is/hail/pull/10695#issuecomment-886712569,1,['test'],['test']
Testability,Added the tests you suggested,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8377#issuecomment-605284219:10,test,tests,10,https://hail.is,https://github.com/hail-is/hail/pull/8377#issuecomment-605284219,1,['test'],['tests']
Testability,Added to daniels tested omnibus,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11554#issuecomment-1063202778:17,test,tested,17,https://hail.is,https://github.com/hail-is/hail/pull/11554#issuecomment-1063202778,1,['test'],['tested']
Testability,Added to tested omnibus,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11526#issuecomment-1061064639:9,test,tested,9,https://hail.is,https://github.com/hail-is/hail/pull/11526#issuecomment-1061064639,1,['test'],['tested']
Testability,"Adding ""WIP"" tag since I had a test failure from `make test-dataproc`. Seems like I have a mix of reference genomes somewhere.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8268#issuecomment-596564071:31,test,test,31,https://hail.is,https://github.com/hail-is/hail/pull/8268#issuecomment-596564071,2,['test'],"['test', 'test-dataproc']"
Testability,"Adding a simple reproducible example. ```python; ht = hl.Table.from_pandas(pd.DataFrame({""variant"":['chr1:123:C:T']})); ht = ht.key_by(**hl.parse_variant(ht.variant)); pd_table = ht.to_pandas(); pd_table.to_pickle(os.path.join(bucket, 'test.pkl')); ```. The two examples below do not cause the same error. ; ```python; ht = hl.Table.from_pandas(pd.DataFrame({""foo"":['bar']})); ht = hl.Table.from_pandas(pd.DataFrame({""foo"":[1, 2, 3]})); ```. Hope this helps.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/14004#issuecomment-1808416604:236,test,test,236,https://hail.is,https://github.com/hail-is/hail/issues/14004#issuecomment-1808416604,1,['test'],['test']
Testability,Adding the WIP label to prevent merging until Tim has given the ok on benchmarks,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8292#issuecomment-597808897:70,benchmark,benchmarks,70,https://hail.is,https://github.com/hail-is/hail/pull/8292#issuecomment-597808897,1,['benchmark'],['benchmarks']
Testability,Addressed all comments except for the addition of property-based tests. Will loop back around when adding those to all my test suites soon if that's OK.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/80#issuecomment-161827387:65,test,tests,65,https://hail.is,https://github.com/hail-is/hail/pull/80#issuecomment-161827387,2,['test'],"['test', 'tests']"
Testability,"Addressed both comments: testRegionValue now tests all types, not just structs, and exercises the visitor (by calling pretty).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2299#issuecomment-336567541:25,test,testRegionValue,25,https://hail.is,https://github.com/hail-is/hail/pull/2299#issuecomment-336567541,2,['test'],"['testRegionValue', 'tests']"
Testability,"Addressed comments, ready for another look. Change to `Gen.partition` revealed a few other bugs in master, which don't have elegant solutions:; 1. orderedPartitioner either needs an `empty` boolean flag, or a special `EmptyOrderedPartitioner` where `partitioner.nPartitions` is 0. Otherwise, rdd.fullOuterJoin(other) crashes because it looks at partitioner nPartitions instead of rdd nPartitions. This fix involves more logic in VSM.read as well.; 2. OrderedLeftJoinRDD needs to cache partitions and pass them to OrderedRDDIterator. There is no guarantee that `getPartitions` can be called on an executor, and this was crashing in particular for ParallelCollectionRDDs.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/717#issuecomment-244904495:420,log,logic,420,https://hail.is,https://github.com/hail-is/hail/pull/717#issuecomment-244904495,1,['log'],['logic']
Testability,Addressed comments. ; - Refactored to a separate module and added module-level tests. ; - Cleaned up TypeChecker interface to call recursively down,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1727#issuecomment-299293790:79,test,tests,79,https://hail.is,https://github.com/hail-is/hail/pull/1727#issuecomment-299293790,1,['test'],['tests']
Testability,Addressed comments. My question about it being sufficiently tested still stands.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11151#issuecomment-1018000957:60,test,tested,60,https://hail.is,https://github.com/hail-is/hail/pull/11151#issuecomment-1018000957,1,['test'],['tested']
Testability,Addressed comments. That test was messed up. Added typecheck and fixed everything up so it passes.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2294#issuecomment-336480884:25,test,test,25,https://hail.is,https://github.com/hail-is/hail/pull/2294#issuecomment-336480884,1,['test'],['test']
Testability,"Addressed, want me to benchmark again?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10766#issuecomment-929489998:22,benchmark,benchmark,22,https://hail.is,https://github.com/hail-is/hail/pull/10766#issuecomment-929489998,1,['benchmark'],['benchmark']
Testability,Admittedly a debatable choice but worthwhile in the context of tests which generate tiny pipelines dominated by CDA overhead,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12736#issuecomment-1485548034:63,test,tests,63,https://hail.is,https://github.com/hail-is/hail/pull/12736#issuecomment-1485548034,1,['test'],['tests']
Testability,"After looking more at the build logs here, as I was curious as to how the tests passed, when `make` was run in compilation, it ran the target for `simd/simd.h`, which ran the `$(LIBSIMDPP)` target, which ran `tar xzf $(LIBSIMDPP).tar.gz`. Thus accidentally creating the necessary dependencies before the `test` target is run later in the CI build.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5331#issuecomment-463907719:32,log,logs,32,https://hail.is,https://github.com/hail-is/hail/pull/5331#issuecomment-463907719,3,"['log', 'test']","['logs', 'test', 'tests']"
Testability,"After merge, addition of Let, RunAggScan, and ArrayFold2 all tests pass besides testMakeArrayWithDifferentRequiredeness (result mismatch). Will fix tomorrow. org.scalatest.exceptions.TestFailedException: t.valuesSimilar(res, expected, t.valuesSimilar$default$3, t.valuesSimilar$default$4) was false; result=WrappedArray(null, [0,null]); expect=WrappedArray(null, [2,WrappedArray(1)]); strategy=JvmCompile). However, I'm still concerned about the complexity of the lowering step, for instance, the Let should not be needed, but in practice was. Also need to understand why/whether the other IR, besides the child, of ArrayFold, and ArrayFold2 need/do not need to be streamified. Followed Streamify.ArrayFold here, and investigated some (for instance in ArrayFold2 streamifying the seq IR breaks typecheck), but should be more principled. edit: One difference from master run of this test is that we're generating MakeStream instead of MakeArray. for:. MakeTuple(ArrayBuffer((0,MakeArray(ArrayBuffer(GetTupleElement(In(0,PCTuple[0:PCStruct{a:PInt32,b:PCArray[PInt32]},1:+PCStruct{a:+PInt32,b:+PCArray[PInt32]}]),0), GetTupleElement(In(0,PCTuple[0:PCStruct{a:PInt32,b:PCArray[PInt32]},1:+PCStruct{a:+PInt32,b:+PCArray[PInt32]}]),1)),array<struct{a: int32, b: array<int32>}>))))",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8063#issuecomment-583812669:61,test,tests,61,https://hail.is,https://github.com/hail-is/hail/pull/8063#issuecomment-583812669,4,"['Test', 'test']","['TestFailedException', 'test', 'testMakeArrayWithDifferentRequiredeness', 'tests']"
Testability,"After spending a couple of hours reading about g++ ABI versions, I'm feeling much less; positive about the plan of building multiple libraries. It seems there are 11 different ABI versions; (most of them are minor bugfixes which were never default behavior for any version of g++,; but still ...). I'm mulling an alternative plan of saying ""well, you've got to have g++, c++, or clang++ somewhere; on your $PATH, or else you've got to define CXX, and also make, but I've got the C++ sources in the ; jarfile and I'll build you a fresh libboot.so and libhail.so if I haven't done it already"". That would involve a little bit more jarfile/Resource magic - but nothing any harder than I've already; done with the header files; avoid a big testing headache; and I hope get us past the whole; ""locking-down"" argument. And then at a later date I'll think about how to have the option of packaging; a recent clang so that we can get C++17 (and perhaps more consistent compile speed than g++); across a wide range on Linuxes. Accordingly I'll close this for now and re-open it when I have a working solution for the library issue.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3973#issuecomment-410111491:736,test,testing,736,https://hail.is,https://github.com/hail-is/hail/pull/3973#issuecomment-410111491,1,['test'],['testing']
Testability,"Agh, failing one of my memory tests. Will dig in to it",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8315#issuecomment-600173212:30,test,tests,30,https://hail.is,https://github.com/hail-is/hail/pull/8315#issuecomment-600173212,1,['test'],['tests']
Testability,"Agh, mostly unrelated tests are failing because of a bug that I've fixed in a different PR. I'll wait for that to go in (should go in tomorrow), then rebase and dismiss",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7209#issuecomment-539190745:22,test,tests,22,https://hail.is,https://github.com/hail-is/hail/pull/7209#issuecomment-539190745,1,['test'],['tests']
Testability,Agreed on both of these. I'll write some doc and add a few tests (maybe one for the long format and one for the matrix one).,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/837#issuecomment-249248847:59,test,tests,59,https://hail.is,https://github.com/hail-is/hail/pull/837#issuecomment-249248847,1,['test'],['tests']
Testability,"Agreed that `hailctl init` is maybe the wrong name b/c `hailctl` also controls Dataproc. `hailctl batch init` seems right to me. I agree that `hailctl config init` seems wrong if we're creating buckets. On the issue of login, I think we can appease both points of view. If you're not logged in, have `hailctl batch init` do this:; ```; You are not currently logged in to Hail. Redirecting you to a login screen. ... user does login flow ... In the future, you can use hailctl auth login to login to Hail. ... continue with hailctl batch init ...; ```. I think we should punt on addressing domain. Broad users don't need to interact with it at all. What are the other concerns about how this is developing?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13279#issuecomment-1662837421:219,log,login,219,https://hail.is,https://github.com/hail-is/hail/pull/13279#issuecomment-1662837421,7,['log'],"['logged', 'login']"
Testability,"Agreed, much better. Can we add some tests for some of this functionality?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13506#issuecomment-1695719128:37,test,tests,37,https://hail.is,https://github.com/hail-is/hail/pull/13506#issuecomment-1695719128,1,['test'],['tests']
Testability,Agreed. So we leave the instance_id in until persistence is in and we have alternate service accounts for tests.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5866#issuecomment-485469027:106,test,tests,106,https://hail.is,https://github.com/hail-is/hail/pull/5866#issuecomment-485469027,1,['test'],['tests']
Testability,Ah great. I just wanted to make sure the new code was getting exercised by the IR tests.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5534#issuecomment-472084593:82,test,tests,82,https://hail.is,https://github.com/hail-is/hail/pull/5534#issuecomment-472084593,1,['test'],['tests']
Testability,"Ah ok. I was seeing some `kill -9` that are now gone when excluding the `current_task`. > It is problematic because somewhere else we're not properly stopping an infinite loop. Ideally we'll get to a place where we try to kill a pod and if it doesn't terminate in, say, 5 seconds, we fail the CI tests. Ya it might not deliver great clarity on where the error is coming from but at least we can actively kill and log an error if it's unable to do the ""right"" thing within say 5 seconds. That and I'm unsure how else to solve this problem",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9944#issuecomment-769239445:296,test,tests,296,https://hail.is,https://github.com/hail-is/hail/pull/9944#issuecomment-769239445,2,"['log', 'test']","['log', 'tests']"
Testability,"Ah shit, that's in `-Wextra`? @chrisvittal do you know if that patch also passes the tests? I was worried that change would break something.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5354#issuecomment-464148672:85,test,tests,85,https://hail.is,https://github.com/hail-is/hail/pull/5354#issuecomment-464148672,1,['test'],['tests']
Testability,"Ah there is some upcast that happens before we get to case class TableUnion:. ```scala; case class TableUnion(children: IndexedSeq[TableIR]) extends TableIR {; assert(children.forall(c => c.typ.rowType == children.head.typ.rowType)); println(""ALL SAME""); ```. If this is added, ""ALL SAME"" gets printed 16 times after ""RESULT"". Not sure why that isn't 8 (maybe due to a lowering pass causing a copy?) or 24, but that's less important. edit: Nope, these tables must be interpreted as being of both non-missing types in the ""maybeNull"" column by the import function, or I'm specifying the type wrong:. ```python; def union(...):; left_key = self.key.dtype; for i, ht, in enumerate(tables):; if left_key != ht.key.dtype:; raise ValueError(...); ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8008#issuecomment-580777705:160,assert,assert,160,https://hail.is,https://github.com/hail-is/hail/pull/8008#issuecomment-580777705,1,['assert'],['assert']
Testability,"Ah yeah good point I forgot about that. You have to construct a string to avoid truncation a la:; ```; (base) dking@wm28c-761 /tmp % cat foo.py; def test():; assert False, 'b' * 1000; =========================================== test session starts ============================================; (base) dking@wm28c-761 /tmp % pytest foo.py; platform darwin -- Python 3.10.9, pytest-7.4.3, pluggy-1.3.0; rootdir: /private/tmp; configfile: pytest.ini; plugins: xdist-2.5.0, timeout-2.2.0, instafail-0.5.0, devtools-0.12.2, asyncio-0.21.1, timestamper-0.0.9, metadata-3.0.0, html-1.22.1, anyio-4.2.0, forked-1.6.0, accept-0.1.9, image-diff-0.0.11; asyncio: mode=strict; collected 1 item . foo.py F [100%]. ================================================= FAILURES =================================================; ___________________________________________________ test ___________________________________________________. def test():; > assert False, 'b' * 1000; E AssertionError: bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb; E assert False. foo",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14151#issuecomment-1889800019:149,test,test,149,https://hail.is,https://github.com/hail-is/hail/pull/14151#issuecomment-1889800019,4,"['assert', 'test']","['assert', 'test']"
Testability,"Ah, I also nuked testBgenImportRandom with no replacement. Is there any reason to think Gavin's example is not a complete test?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3743#issuecomment-396455388:17,test,testBgenImportRandom,17,https://hail.is,https://github.com/hail-is/hail/pull/3743#issuecomment-396455388,2,['test'],"['test', 'testBgenImportRandom']"
Testability,"Ah, I forgot this is potentially a laptop-running test and not in a batch job! Definitely would require some more thought.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11207#issuecomment-1007491902:50,test,test,50,https://hail.is,https://github.com/hail-is/hail/pull/11207#issuecomment-1007491902,1,['test'],['test']
Testability,"Ah, I might have to add type stubs to the right requirements file. Let me try that and if that works I'll request you for a review.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11502#issuecomment-1062081951:29,stub,stubs,29,https://hail.is,https://github.com/hail-is/hail/pull/11502#issuecomment-1062081951,1,['stub'],['stubs']
Testability,"Ah, I understand. Yeah, I think comparing to dataproc is a sufficient test. A handful of variants is probably fine. It looks like we at one point had test data, but John C commented that out when he made VEP requester pays. I'm not sure why. Look in hail/python/cluster-tests.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12428#issuecomment-1446791627:70,test,test,70,https://hail.is,https://github.com/hail-is/hail/pull/12428#issuecomment-1446791627,3,['test'],"['test', 'tests']"
Testability,"Ah, I understand. You're correct that pushing to the `cache` tag disassociates that tag with any image that was previously associated with it. That image is still in the registry though. I thought that was sufficient for the cache to work. (I was wrong, see below!). AFAICT, this change doesn't prevent PR tests from pushing to the `cache` tag. This change just makes the tests run by the CI-in-the-PR not overwrite the cache. Every image build for a PR (which is tested by default namespace CI) will still overwrite the cache tag. AFAICT, this; ```; --import-cache type=registry,ref=gcr.io/hail-vdc/foo; ```; Will use as a cache source the `latest` tag in the `gcr.io/hail-vdc/foo` repository. It is *not* sufficient for an image to be present in the repository and untagged or with a different tag from `latest`. In particular, every push to the `cache` tag prevents us from using other images even though they are in the registry! For example, I pushed two images to `cache`:. ```; (base) # gcloud container images list-tags gcr.io/hail-vdc/dktest; DIGEST TAGS TIMESTAMP; fb551d9bdb94 2022-06-10T14:16:39; afb4c5ad2d7b cache,latest 2022-06-10T14:15:55; ```. If I rebuild [1] the most recently pushed image with; ```; --import-cache type=registry,ref=gcr.io/hail-vdc/dktest:cache; ```; it succeeds in getting the cache. If I rebuild the other image with the same import-cache, it does not see that the (untagged) image is already there! . ---. This all suggests that all our attempts at image caching are failing terribly. Options:; 1. Only deploy builds push to a `:cache` tag, everyone uses that tag.; 2. List all the tags in the repository and include them all as --cache-from's (this doesn't actually work: https://github.com/moby/moby/issues/34715#issuecomment-425933774); 3. Push a tag for each git SHA and then include as --cache-from's the last ten git SHAs on this branch, the most recent common commit with main (i.e. `git merge-base origin/main this-branch`), maybe the current main, and ",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11907#issuecomment-1152646800:306,test,tests,306,https://hail.is,https://github.com/hail-is/hail/pull/11907#issuecomment-1152646800,3,['test'],"['tested', 'tests']"
Testability,"Ah, I was accidentally modifying an installed version of Hail. I recovered the files and brought them in. I deleted that other debug_info. It doesn't include the batch information. Now every batch test in batch/ and in hail/ should be consistently using `Batch.debug_info`",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10953#issuecomment-939112813:197,test,test,197,https://hail.is,https://github.com/hail-is/hail/pull/10953#issuecomment-939112813,1,['test'],['test']
Testability,"Ah, I was hoping the pca tests would start passing on the local backend with this change, but there are of course pruner issues. I'll have to try and craft a test that runs into this error.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10330#issuecomment-820620715:25,test,tests,25,https://hail.is,https://github.com/hail-is/hail/pull/10330#issuecomment-820620715,2,['test'],"['test', 'tests']"
Testability,"Ah, I've been running into this as well and didn't know why. Testing all the hooks seems reasonable.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13875#issuecomment-1773441587:61,Test,Testing,61,https://hail.is,https://github.com/hail-is/hail/issues/13875#issuecomment-1773441587,1,['Test'],['Testing']
Testability,"Ah, OK, this is actually quite sensible. I have to tell gradle that this is a test jar, I do that by saying I want my class path to look like the test class path at runtime. A wrinkle is that I have to explicitly request our own code too (that's the first diff line). I'm actually quite pleased that our grade file has become a bit more standard and less custom.; ```diff; task shadowTestJar(type: ShadowJar) {; archiveClassifier = 'spark-test'; + from sourceSets.test.output; + configurations = [project.configurations.testRuntimeClasspath]; }; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13551#issuecomment-1710347695:78,test,test,78,https://hail.is,https://github.com/hail-is/hail/pull/13551#issuecomment-1710347695,5,['test'],"['test', 'testRuntimeClasspath']"
Testability,"Ah, `test_define_function` isn't marked as part of the QoB test suite. It needs a `@qobtest`",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14579#issuecomment-2174366715:59,test,test,59,https://hail.is,https://github.com/hail-is/hail/pull/14579#issuecomment-2174366715,1,['test'],['test']
Testability,"Ah, and this isn't a bug in `main` because `test_batch_invariants` depends on the QoB tests.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13353#issuecomment-1660807887:86,test,tests,86,https://hail.is,https://github.com/hail-is/hail/pull/13353#issuecomment-1660807887,1,['test'],['tests']
Testability,"Ah, duh, thanks! And ya I do want to make it easier to get to error logs from the PR namespace.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11352#issuecomment-1049187048:68,log,logs,68,https://hail.is,https://github.com/hail-is/hail/pull/11352#issuecomment-1049187048,1,['log'],['logs']
Testability,"Ah, edit them specifically in the linear regression benchmark test? Is there a reason we'd want that as opposed to just setting them in the benchmark suite's dockerfile or something?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8050#issuecomment-583461086:52,benchmark,benchmark,52,https://hail.is,https://github.com/hail-is/hail/pull/8050#issuecomment-583461086,3,"['benchmark', 'test']","['benchmark', 'test']"
Testability,"Ah, good catch! Yep, this is a bug in the current master. That logic should be replaced with the conversions, and `makeDouble` and `makeLong` should go away.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/758#issuecomment-245465288:63,log,logic,63,https://hail.is,https://github.com/hail-is/hail/pull/758#issuecomment-245465288,1,['log'],['logic']
Testability,"Ah, it was just a new test file that used `setUpModule = startTestHailContext`. Btw, after this merges, no need to do that anymore. Now pytest fixtures always ensure there's a hail context.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12139#issuecomment-1332740641:22,test,test,22,https://hail.is,https://github.com/hail-is/hail/pull/12139#issuecomment-1332740641,1,['test'],['test']
Testability,"Ah, nice -- it had been a little while since I've done log arithmetic and it was fun to work out the formula equivalence :)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2369#issuecomment-341190936:55,log,log,55,https://hail.is,https://github.com/hail-is/hail/pull/2369#issuecomment-341190936,1,['log'],['log']
Testability,"Ah, service backend tests need to depend on deploy_memory",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11471#issuecomment-1059462873:20,test,tests,20,https://hail.is,https://github.com/hail-is/hail/pull/11471#issuecomment-1059462873,1,['test'],['tests']
Testability,"Ah, so I had run make prebuilt in src/main/c after the last master merge (https://github.com/hail-is/hail/pull/6083/commits/acc617674d1e023c7ef514180edf0e9cb86701df), but running it again seemed to change the dylib. Maybe I didn't commit the correct change. Pushing. Also, could this be caused by the fact that this is compiled on OSX?. edit: I see nativeLibPrebuilt just runs make prebuilt, so this is either a platform difference or didn't commit the correct prebuilt files during merge. edit2: maybe not surprisingly, running this changes `prebuilt/lib/darwin/*.dylib` , but not `prebuilt/lib/linux-x86-64/*.so`. edit3: in the makefile:. ```make; UNAME_S :=$(shell uname -s). # ... stuff; ifeq ($(UNAME_S),Linux); LIBFLAGS += -rdynamic -shared; LIBBOOT := lib/linux-x86-64/libboot.so; LIBHAIL := lib/linux-x86-64/libhail.so; ifneq ($(filter %86,$(UNAME_P)),); LIBBOOT := lib/linux-x86/libboot.so; LIBHAIL := lib/linux-x86/libhail.so; endif; endif; ifeq ($(UNAME_S),Darwin); LIBFLAGS += -dynamiclib -Wl,-undefined,dynamic_lookup; LIBBOOT := lib/darwin/libboot.dylib; LIBHAIL := lib/darwin/libhail.dylib; endif; ```. So as it stands, I think we would need to have CI run make prebuilt before running hail tests (since anything I check in won't matter), or cross-compile. I must be wrong...",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6083#issuecomment-492897454:1206,test,tests,1206,https://hail.is,https://github.com/hail-is/hail/pull/6083#issuecomment-492897454,1,['test'],['tests']
Testability,"Ah, the fix was just merged, CI should test and merge this within 30 minutes.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9875#issuecomment-759878545:39,test,test,39,https://hail.is,https://github.com/hail-is/hail/pull/9875#issuecomment-759878545,1,['test'],['test']
Testability,"Ah, the mix of reference genomes is coming from me running all the ""cluster_tests"" for GRCh38 cluster as well. One of the tests hardcodes 37",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8268#issuecomment-596593742:122,test,tests,122,https://hail.is,https://github.com/hail-is/hail/pull/8268#issuecomment-596593742,1,['test'],['tests']
Testability,"Ah, the reason this never went in is a lint failure. . ```; /usr/local/lib/python3.7/dist-packages/hailtop/hailctl/dataproc/submit.py:27:59: E713 test for membership should be 'not in'; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10863#issuecomment-941145164:146,test,test,146,https://hail.is,https://github.com/hail-is/hail/pull/10863#issuecomment-941145164,1,['test'],['test']
Testability,"Ah, yeah. `StreamAgg` doesn't have an interpret case. I think the only way to implement it would be to compile the aggregator, as we do in the `TableAggregate` case. Probably about a day of work. But I don't see any great reason Interpret needs to support this. I'd vote to change the test to be like testRelationalLetMatrixTable, forcing it to be interpreted as a `TableAggregate`.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13336#issuecomment-1665623861:285,test,test,285,https://hail.is,https://github.com/hail-is/hail/pull/13336#issuecomment-1665623861,2,['test'],"['test', 'testRelationalLetMatrixTable']"
Testability,"Ah. We haven't tested against Spark 2.2 yet, so that could be the issue. We currently test / deploy against 2.0.2 and 2.1.0, though I imagine we'll update these versions to 2.1.x and 2.2.x soon.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/2062#issuecomment-319677826:15,test,tested,15,https://hail.is,https://github.com/hail-is/hail/issues/2062#issuecomment-319677826,2,['test'],"['test', 'tested']"
Testability,"All 10 seconds are saved in the one test that uses volumes. That test takes ~2 minutes (four pods, each takes about 30 seconds to mount the volume and execute). The 10 seconds are presumably volume creation time (which happens in the background while non-volume using tests run).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5852#issuecomment-481821270:36,test,test,36,https://hail.is,https://github.com/hail-is/hail/pull/5852#issuecomment-481821270,3,['test'],"['test', 'tests']"
Testability,"All of the linreg, logreg, lmm, skat field names need to be converted. Feel free to push back for future PR.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3000#issuecomment-369023286:19,log,logreg,19,https://hail.is,https://github.com/hail-is/hail/pull/3000#issuecomment-369023286,1,['log'],['logreg']
Testability,All python tests are failing with import errors.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8656#issuecomment-621225819:11,test,tests,11,https://hail.is,https://github.com/hail-is/hail/pull/8656#issuecomment-621225819,1,['test'],['tests']
Testability,"All test/checks for this pr pass. There is a CI related error, a cluster being issued a delete operation when existing delete operations:. """"""; + gcloud dataproc clusters delete ci-test-n42my5i1 --async; The cluster 'ci-test-n42my5i1' and all attached disks will be deleted. Do you want to continue (Y/n)? ; ERROR: (gcloud.dataproc.clusters.delete) FAILED_PRECONDITION: Cannot delete cluster 'ci-test-n42my5i1' while it has other pending delete operations.; """"""",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5878#issuecomment-485153266:4,test,test,4,https://hail.is,https://github.com/hail-is/hail/pull/5878#issuecomment-485153266,4,['test'],"['test', 'test-']"
Testability,All tests pass,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7904#issuecomment-575935878:4,test,tests,4,https://hail.is,https://github.com/hail-is/hail/pull/7904#issuecomment-575935878,1,['test'],['tests']
Testability,"All that messy state twiddling is because Scala's `Iterator` is the wrong model for most things we use it for, which is why I made `FlipbookIterator`. Using that, what you have would become; ```scala; private class BgenRecordStateMachine(; ctx: RVDContext,; p: BgenPartition,; settings: BgenSettings; ) extends StateMachine[RegionValue] {; private[this] val bfis = p.makeInputStream; private[this] val rv = RegionValue(ctx.region); private[this] val rvb = ctx.rvb; ; def isValid: Boolean = p.isValid; def value: RegionValue = rv; def advance() { p.advance(); findNextVariant() }; private def findNextVariant() {; // same as existing advance(), but without advancing p; }. findNextVariant() // make sure iterator is initialized in first valid state; }; ```; giving `BgenPartition` a `FlipbookIterator` style interface, with `isValid`, `value`, and `advance()` instead of `hasNext()` and `next()`. Then to create a new iterator `FlipbookIterator(new BgenRecordStateMachine(...))`. But honestly, what you had was clear enough, so if you benchmarked and the allocation isn't an issue, you should do whatever you find most readable. I've been conditioned to avoid `Option` in low-level code, but I don't have a good intuition for when it is or isn't actually a problem.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3893#issuecomment-404156507:1034,benchmark,benchmarked,1034,https://hail.is,https://github.com/hail-is/hail/pull/3893#issuecomment-404156507,1,['benchmark'],['benchmarked']
Testability,All the tests are passing but something is hanging.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12731#issuecomment-1518359172:8,test,tests,8,https://hail.is,https://github.com/hail-is/hail/pull/12731#issuecomment-1518359172,1,['test'],['tests']
Testability,"Allow the Genotype in VSM to be null. This means you can't call `g.gt` anymore, since `g` might be null. Moved the user-visible Genotype functions to the Genotype companion object and made them null-safe. This makes the behavior of filterGenotypes between VariantDataset and GenericDataset consistent. Fixed the tests. @tpoterba ready for another look.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1872#issuecomment-305223718:312,test,tests,312,https://hail.is,https://github.com/hail-is/hail/pull/1872#issuecomment-305223718,1,['test'],['tests']
Testability,Alright alright jeez I can't program any more. I also needed to explicitly request that all the test and main classes from our project should be in the JAR.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13551#issuecomment-1710705353:96,test,test,96,https://hail.is,https://github.com/hail-is/hail/pull/13551#issuecomment-1710705353,1,['test'],['test']
Testability,Alright cool. I'll hold off on handling the failing test until you do that.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1590#issuecomment-288752989:52,test,test,52,https://hail.is,https://github.com/hail-is/hail/pull/1590#issuecomment-288752989,1,['test'],['test']
Testability,"Alright, I've addressed all of the above, you were right I was able to move things up to PContainer and simplify some of the code there. I didn't do the one decorator to test cxx and java in this PR because the cxx shape test ended up using some things I haven't implemented on jvm side yet so for now I just made a separate test. I'll add that in a separate PR.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6874#issuecomment-523600895:170,test,test,170,https://hail.is,https://github.com/hail-is/hail/pull/6874#issuecomment-523600895,3,['test'],['test']
Testability,"Alright, adjusted this to also make sure we don't pass a 0 into `dgeqrf` as the `LDA` argument and also to make sure that we test multiplying when only the inner dimension is a 0. Should be good for review now.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8621#issuecomment-620162545:125,test,test,125,https://hail.is,https://github.com/hail-is/hail/pull/8621#issuecomment-620162545,1,['test'],['test']
Testability,"Alright, all tested, should be good :+1:",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7862#issuecomment-574322586:13,test,tested,13,https://hail.is,https://github.com/hail-is/hail/pull/7862#issuecomment-574322586,1,['test'],['tested']
Testability,"Alright, replaced it with `throw new AssertionError(...)` because Scala can't infer that `assert(false)` always fails.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7682#issuecomment-566206151:37,Assert,AssertionError,37,https://hail.is,https://github.com/hail-is/hail/pull/7682#issuecomment-566206151,2,"['Assert', 'assert']","['AssertionError', 'assert']"
Testability,"Alrighty @danking, I was able to spin up a dataproc cluster and open a notebook:. ```python; hailctl dataproc start --region us-central1 my-first-cluster-2; hailctl dataproc connect my-first-cluster-2 notebook; ```. and paste the example analysis script from the [dataproc page](https://hail.is/docs/0.2/install/dataproc.html) in the docs into the notebook, and it ran successfully!. Any other tests you think are warranted here, or is this fix all set?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12965#issuecomment-1536483087:394,test,tests,394,https://hail.is,https://github.com/hail-is/hail/pull/12965#issuecomment-1536483087,1,['test'],['tests']
Testability,Also add test case for unterminated string with nice error message (use `interceptFatal`).,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/493#issuecomment-235044203:9,test,test,9,https://hail.is,https://github.com/hail-is/hail/issues/493#issuecomment-235044203,1,['test'],['test']
Testability,"Also added fix for issue #389 . Removed withScope function from implementation of leftOuterJoin. Not sure what the effect of leaving this function out, but the tests worked fine.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/398#issuecomment-220695888:160,test,tests,160,https://hail.is,https://github.com/hail-is/hail/pull/398#issuecomment-220695888,1,['test'],['tests']
Testability,Also added google-cloud-logging,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6934#issuecomment-524422872:24,log,logging,24,https://hail.is,https://github.com/hail-is/hail/pull/6934#issuecomment-524422872,1,['log'],['logging']
Testability,"Also added:. test namespace; test-svc service account with all privileges in test, use for test batch jobs by CI; disabled livenessProbe while restarting creates new pods",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4596#issuecomment-431735363:13,test,test,13,https://hail.is,https://github.com/hail-is/hail/pull/4596#issuecomment-431735363,4,['test'],"['test', 'test-svc']"
Testability,Also all the tests need to be fixed.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6083#issuecomment-491423332:13,test,tests,13,https://hail.is,https://github.com/hail-is/hail/pull/6083#issuecomment-491423332,1,['test'],['tests']
Testability,"Also big change, going to test this manually",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11522#issuecomment-1061048298:26,test,test,26,https://hail.is,https://github.com/hail-is/hail/pull/11522#issuecomment-1061048298,1,['test'],['test']
Testability,"Also deleted `test_blanczos_against_hail`, no reason to compare them, that test can never work on the service, and we want to delete the Spark one soon.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10383#issuecomment-827607930:75,test,test,75,https://hail.is,https://github.com/hail-is/hail/pull/10383#issuecomment-827607930,1,['test'],['test']
Testability,Also moved pipeline to hailtop so it is including in the Hail package. The tests remain in the pipeline/ subproject directory. @konradjk You'll have to import pipeline with `from hailtop import pipeline` after this. FYI @jigold,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6445#issuecomment-504701295:75,test,tests,75,https://hail.is,https://github.com/hail-is/hail/pull/6445#issuecomment-504701295,1,['test'],['tests']
Testability,Also need to see benchmarks.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6266#issuecomment-506857050:17,benchmark,benchmarks,17,https://hail.is,https://github.com/hail-is/hail/pull/6266#issuecomment-506857050,1,['benchmark'],['benchmarks']
Testability,"Also not the most sophisticated thing but littering the test and the things it calls with print statements, making sure the tests print in real-time, and kicking off another test is something else I'd try.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12731#issuecomment-1507073010:56,test,test,56,https://hail.is,https://github.com/hail-is/hail/pull/12731#issuecomment-1507073010,3,['test'],"['test', 'tests']"
Testability,Also removed 2.1.0 from deployed versions. When this goes in I'll remove the CI tests againt 2.1.0.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2656#issuecomment-355463197:80,test,tests,80,https://hail.is,https://github.com/hail-is/hail/pull/2656#issuecomment-355463197,1,['test'],['tests']
Testability,Also that step=0 fails (@patrick-schultz has some nice exception asserts coming for the IR tests),MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/3648#issuecomment-391577744:65,assert,asserts,65,https://hail.is,https://github.com/hail-is/hail/issues/3648#issuecomment-391577744,2,"['assert', 'test']","['asserts', 'tests']"
Testability,Also! Chris' zstd change should make a modest across the board improvement to test times.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13076#issuecomment-1563164408:78,test,test,78,https://hail.is,https://github.com/hail-is/hail/pull/13076#issuecomment-1563164408,1,['test'],['test']
Testability,"Also, I double checked and the only place the deletion logic was used was `upload_logs`.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11429#issuecomment-1054582071:55,log,logic,55,https://hail.is,https://github.com/hail-is/hail/pull/11429#issuecomment-1054582071,1,['log'],['logic']
Testability,"Also, I forgot to test that the query that does the audit doesn't lock any tables from writes.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11990#issuecomment-1172526665:18,test,test,18,https://hail.is,https://github.com/hail-is/hail/pull/11990#issuecomment-1172526665,1,['test'],['test']
Testability,"Also, I just tested this out with my own jar/zip and it does exactly what I wanted it to! So at least there's one empirical test",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5819#issuecomment-481007218:13,test,tested,13,https://hail.is,https://github.com/hail-is/hail/pull/5819#issuecomment-481007218,2,['test'],"['test', 'tested']"
Testability,"Also, I see there are no tests for the new features.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1157#issuecomment-266540995:25,test,tests,25,https://hail.is,https://github.com/hail-is/hail/pull/1157#issuecomment-266540995,1,['test'],['tests']
Testability,"Also, I think you've referenced the wrong log, the one from your original reporting email is: https://storage.googleapis.com/hail-ci-0-1/ci/7aa524504b8bafe0a4af859e73bc4f9efdaa052c/414f3f183bd5f2ec04e1c732522cbc0b8b1fca31/job-log. The log you referenced appears to be failing because another process (presumably `batch`) has already bound to port 5000. Perhaps `batch`'s `hail-ci-build.sh` is not properly cleaning up processes when it exits.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4517#issuecomment-429026174:42,log,log,42,https://hail.is,https://github.com/hail-is/hail/issues/4517#issuecomment-429026174,3,['log'],['log']
Testability,"Also, I wanna take another run through on Monday before we merge this. I think it will pass the tests, but I also think it needs another careful look to ensure its resetting in all the right places and serializing in all the right places.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3414#issuecomment-383249693:96,test,tests,96,https://hail.is,https://github.com/hail-is/hail/pull/3414#issuecomment-383249693,1,['test'],['tests']
Testability,"Also, I'll check the SQL carefully once the tests pass.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13372#issuecomment-1673793639:44,test,tests,44,https://hail.is,https://github.com/hail-is/hail/pull/13372#issuecomment-1673793639,1,['test'],['tests']
Testability,"Also, I'm not opposed to doing a migration of the existing batches to having rows in the updates table. It will just take some work to write a chunking script because we don't want to do the migration all in one transaction. Luckily this code doesn't have to be as well tested as other migrations.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12010#issuecomment-1219917934:270,test,tested,270,https://hail.is,https://github.com/hail-is/hail/pull/12010#issuecomment-1219917934,1,['test'],['tested']
Testability,"Also, I'm not sure why `test_define_function` doesn't fail in the service backend tests. We should figure that out. If we could modify that to fail before this fix, I think that would be enough to merge this.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14579#issuecomment-2174365088:82,test,tests,82,https://hail.is,https://github.com/hail-is/hail/pull/14579#issuecomment-2174365088,1,['test'],['tests']
Testability,"Also, a quick look at the log shows some AST operations you're using don't have IR conversions, namely: annotate, drop, abs and contains (which @catoverdrive has a PR for: https://github.com/hail-is/hail/pull/3458). Those would be good additions (maybe as a separate PR.)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3335#issuecomment-385312916:26,log,log,26,https://hail.is,https://github.com/hail-is/hail/pull/3335#issuecomment-385312916,1,['log'],['log']
Testability,"Also, can you add a larger test with 1024 elements? Maybe check 557th element is correct after 556 extractMax operations?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2147#issuecomment-324725390:27,test,test,27,https://hail.is,https://github.com/hail-is/hail/pull/2147#issuecomment-324725390,1,['test'],['test']
Testability,"Also, consider whether you can use RegressionUtils.toHWENormalizedGtArray in the main code, not just the test.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1648#issuecomment-293415826:105,test,test,105,https://hail.is,https://github.com/hail-is/hail/pull/1648#issuecomment-293415826,1,['test'],['test']
Testability,"Also, do we test emitter stuff like this anywhere?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7587#issuecomment-557233459:12,test,test,12,https://hail.is,https://github.com/hail-is/hail/pull/7587#issuecomment-557233459,1,['test'],['test']
Testability,"Also, do you have tests to know this is working?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4630#issuecomment-432739112:18,test,tests,18,https://hail.is,https://github.com/hail-is/hail/pull/4630#issuecomment-432739112,1,['test'],['tests']
Testability,"Also, interesting to note: . Home page (with menu bar, dark icon, not logged in): 1.5KB .gz . Logged in: 3.1KB. Bundle size: on order of 100KB. However, 30% of this is the auth0 client library; we can modify it to save space. I've commented on an issue with some light guidance on how to save 5.5KB of that. Effectively 70KB for React + React-Dom + Webpack tooling + all page js compares quite favorably with a jquery-only solution, while being faster than jQuery (https://github.com/jonmiles/react-performance-tests, https://medium.com/thothzocial-engineering/rendering-speed-performance-challenge-with-famous-front-end-framework-196c876a68af), far easier to manage, and with a much large ecosystem (and jquery-only solution would do nothing for universal rendering). The React side should drop this year substantially. They are also interested in writing a compiler to completely remove the vdom, compiling to optimized javascript or maybe web assembly. That may be something interesting to us as well.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4931#issuecomment-454608700:70,log,logged,70,https://hail.is,https://github.com/hail-is/hail/pull/4931#issuecomment-454608700,3,"['Log', 'log', 'test']","['Logged', 'logged', 'tests']"
Testability,"Also, just to make sure, you tested this with dev deploy?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11798#issuecomment-1125272065:29,test,tested,29,https://hail.is,https://github.com/hail-is/hail/pull/11798#issuecomment-1125272065,1,['test'],['tested']
Testability,"Also, looks like tests are unhappy.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1973#issuecomment-317271753:17,test,tests,17,https://hail.is,https://github.com/hail-is/hail/pull/1973#issuecomment-317271753,1,['test'],['tests']
Testability,"Also, needs the test for hanging when trying to contact another ""worker""",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10796#issuecomment-905768874:16,test,test,16,https://hail.is,https://github.com/hail-is/hail/pull/10796#issuecomment-905768874,1,['test'],['test']
Testability,"Also, wrt the `hail` alias, that only sets the environment variable for that single execution of `python`. You will need to run:; ```bash; export PYTHONPATH=$SPARK_HOME/python:$SPARK_HOME/python/lib/py4j-0.10.4-src.zip:$HAIL_HOME/python; ```; before running `./gradlew test`, otherwise it's very likely that you will see a variety of errors related to Spark. I am surprised that you saw an error about Breeze natives. An inappropriate `$PYTHON_PATH` should trigger a failure much earlier than the section of code that uses of Breeze natives.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1419#issuecomment-281862423:269,test,test,269,https://hail.is,https://github.com/hail-is/hail/issues/1419#issuecomment-281862423,1,['test'],['test']
Testability,"Also, you can use `haildev` for the RG and `22cd45fe-f996-4c51-af67-ef329d977519` for the subscription id for these tests. The changes to the tests you made seem totally reasonable.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12877#issuecomment-1522222236:116,test,tests,116,https://hail.is,https://github.com/hail-is/hail/pull/12877#issuecomment-1522222236,2,['test'],['tests']
Testability,Alternate hypothesis that I'm not sure whether we can test: we forgot to unfreeze azure CI for a week?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13050#issuecomment-1561903635:54,test,test,54,https://hail.is,https://github.com/hail-is/hail/issues/13050#issuecomment-1561903635,1,['test'],['test']
Testability,"Alternatively, I could set default `covariates=[1.0]` in lin, log, and skat. I feel like you, @tpoterba and I discussed this but I can't recall if/what we concluded. I'll post explanation of changes on discuss once in.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4067#issuecomment-409990215:62,log,log,62,https://hail.is,https://github.com/hail-is/hail/pull/4067#issuecomment-409990215,1,['log'],['log']
Testability,"Although the test is still running now, I am pretty sure the following solution solved the problem. ```; #https://discuss.hail.is/t/i-get-a-negativearraysizeexception-when-loading-a-plink-file/899. export PYSPARK_SUBMIT_ARGS=""--driver-java-options '-XX:hashCode=0' --conf 'spark.executor.extraJavaOptions=-XX:hashCode=0' pyspark-shell"". ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/14168#issuecomment-1897770087:13,test,test,13,https://hail.is,https://github.com/hail-is/hail/issues/14168#issuecomment-1897770087,1,['test'],['test']
Testability,An additional detail that I fixed in this change is that we no longer need to load the log file into memory on the worker in order to send it to the batch pod (by using `FileResponse`). It would also be nice to do this; - when the worker is uploading the file; - on the batch pod by somehow chaining the StreamResponse from the worker/blob storage to the client. but these felt like bigger changes that would've needed to touch more of the code so I left those out for now.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12666#issuecomment-1422737869:87,log,log,87,https://hail.is,https://github.com/hail-is/hail/pull/12666#issuecomment-1422737869,1,['log'],['log']
Testability,"An example of a script that currently fails on `main` but passes in this PR:. ```python; import hailtop.batch as hb. def test_python_function(*values):; # making this function smaller with 102 jobs submits successfully?; print(*values); h = hash(values); print(f'Hash is {h}'); # this return is important, otherwise it submits successfully; return h. if __name__ == '__main__':; b = hb.Batch('Scale size recursion test'); # 101 submits, 102 fails; for i in range(101):; j = b.new_python_job(f'Function call {i+1}'); j.call(test_python_function, i + 1). submitted = b.run(wait=False); ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14576#issuecomment-2161133045:414,test,test,414,https://hail.is,https://github.com/hail-is/hail/pull/14576#issuecomment-2161133045,1,['test'],['test']
Testability,"An update. I'm working with debugging info from the AoU VDS creation cluster. A VDS creation was run using an n1-highmem-8 driver. The cluster is created by hailctl with no custom driver settings; <details><summary>template for hailctl dataproc start</summary>. [Source](https://github.com/broadinstitute/gatk/blob/ah_var_store/scripts/variantstore/wdl/extract/run_in_hail_cluster.py#L36C1-L48C1). ```; hailctl dataproc start ; --autoscaling-policy={autoscaling_policy}; --worker-machine-type {worker_machine_type}; --region {region}; --project {gcs_project}; --service-account {account}; --num-master-local-ssds 1; --num-worker-local-ssds 1 ; --max-idle=60m; --max-age=1440m; --subnet=projects/{gcs_project}/regions/{region}/subnetworks/subnetwork; {cluster_name}; ```. </details>. I have the driver node syslogs as well as the Hail log file. For some reason all logs other than the Hail logs are missing from this file. We separately need to determine why all the Spark logs etc. are missing. Based on the syslog, after system start up and just before the Jupyter notebook starts, the system is already using ~8,500MiB:; ```; Nov 22 14:29:51 vds-cluster-91f3f4c1-b737-m earlyoom[4115]: mem avail: 43808 of 52223 MiB (83.89%), swap free: 0 of 0 MiB ( 0.00%); ```; So, the effective maximum memory that Hail could possibly use is around 43808MiB. After the Notebook and Spark initialize we're down to 42,700 MiB (about ~1000MiB more in use).; ```; Nov 22 14:30:06 vds-cluster-91f3f4c1-b737-m earlyoom[4115]: mem avail: 42760 of 52223 MiB (81.88%), swap free: 0 of 0 MiB ( 0.00%); ```. `hailctl` sets the VM RAM limit to 80% of the instance type's memory, so 80% * 52GiB = 42598MiB. This means the JVM is permitted to effectively use all the remaining memory. At time of sigkill the total memory allocated by the JVM was about 2000MiB below the max heap size. Note that the heap is contained within all memory allocated by the JVM.; ```; Nov 22 15:31:05 vds-cluster-91f3f4c1-b737-m earlyoom[4115]: mem ",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13960#issuecomment-1832531419:834,log,log,834,https://hail.is,https://github.com/hail-is/hail/issues/13960#issuecomment-1832531419,4,['log'],"['log', 'logs']"
Testability,And I removed the genAndFitTest as this new test is an exact comparison of fit h2 with another tool rather than a statistical check. We will keep the issue of why the old test was flaky open here #1416,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1475#issuecomment-284275408:44,test,test,44,https://hail.is,https://github.com/hail-is/hail/pull/1475#issuecomment-284275408,2,['test'],['test']
Testability,And I think all the tests are passing now as well,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6874#issuecomment-523602549:20,test,tests,20,https://hail.is,https://github.com/hail-is/hail/pull/6874#issuecomment-523602549,1,['test'],['tests']
Testability,And I'll add this test.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/3748#issuecomment-396727910:18,test,test,18,https://hail.is,https://github.com/hail-is/hail/issues/3748#issuecomment-396727910,1,['test'],['test']
Testability,And a typical interaction for a current 2.0.2 user:. ```bash; dking@wmb16-359 # gradle compileScala . FAILURE: Build failed with an exception. * Where:; Build file '/Users/dking/projects/hail2/build.gradle' line: 39. * What went wrong:; A problem occurred evaluating root project 'hail'.; > Please generate a gradle.properties file first by executing ./configure. * Try:; Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. BUILD FAILED. Total time: 1.413 secs; 1 dking@wmb16-359 # ./configure; With what version of Spark will you run Hail? (default: 2.0.2); ; using default version: 2.0.2; dking@wmb16-359 # gradle compileScala; The Task.leftShift(Closure) method has been deprecated and is scheduled to be removed in Gradle 5.0. Please use Task.doLast(Action) instead.; at build_2mbp15794fq4sj14khxclz0wz.run(/Users/dking/projects/hail2/build.gradle:168); :compileJava UP-TO-DATE; :nativeLib; (cd libsimdpp-2.0-rc2 && cmake .); -- Configuring done; -- Generating done; -- Build files have been written to: /Users/dking/projects/hail2/src/main/c/libsimdpp-2.0-rc2; :compileScala UP-TO-DATE. BUILD SUCCESSFUL. Total time: 4.418 secs,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1613#issuecomment-290201637:471,log,log,471,https://hail.is,https://github.com/hail-is/hail/pull/1613#issuecomment-290201637,1,['log'],['log']
Testability,"And conversely, the fact that test_table is split up suggests to me that table.py should probably be split to match. But this pr should probably stick to test reorganization.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3887#issuecomment-402166053:154,test,test,154,https://hail.is,https://github.com/hail-is/hail/pull/3887#issuecomment-402166053,1,['test'],['test']
Testability,"And here's a dev deploy that runs the dataproc tests. Don't approve until these tests pass! We don't run them on ordinary PRs because they're expensive and slow. We do run them on main commits. For this PR, the chance of having broken dataproc is high enough that we should ensure the tests pass before merging into main. https://ci.hail.is/batches/8121061",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14158#issuecomment-1930642516:47,test,tests,47,https://hail.is,https://github.com/hail-is/hail/pull/14158#issuecomment-1930642516,3,['test'],['tests']
Testability,"And if you have performance benchmarks already, make a note of them here.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1884#issuecomment-304078746:28,benchmark,benchmarks,28,https://hail.is,https://github.com/hail-is/hail/pull/1884#issuecomment-304078746,1,['benchmark'],['benchmarks']
Testability,"And indeed:. > Cluster name 'ci-test-7ncBRTSJAgu1t8kTtltIXse5A1RwFFih0cIBma6T' must match pattern `(?:[a-z](?:[-a-z0-9]{0,49}[a-z0-9])?)`. And indeed, no upper case.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4241#issuecomment-417797285:32,test,test-,32,https://hail.is,https://github.com/hail-is/hail/pull/4241#issuecomment-417797285,1,['test'],['test-']
Testability,And let there be tests!. @patrick-schultz sending to you since Tim is a bit overloaded on PRs.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12768#issuecomment-1478134967:17,test,tests,17,https://hail.is,https://github.com/hail-is/hail/pull/12768#issuecomment-1478134967,1,['test'],['tests']
Testability,"And the block it's failing on:. ```; if not args.skip_filtering:; pruned_mt = hl.read_matrix_table(qc_mt_path('joint', ld_pruned=True)); exome_project_table = hl.read_table(qc_ht_path('exomes', 'hard_filters')).select('data_type', 's', 'project_id'); genome_project_table = hl.read_table(qc_ht_path('genomes', 'hard_filters')).select('data_type', 's', 'project_id'); project_table = exome_project_table.union(genome_project_table); exome_pop_table = hl.read_table(qc_ht_path('exomes', 'pop_platform')).select('data_type', 's', 'pop'); genome_pop_table = hl.read_table(qc_ht_path('genomes', 'pop_platform')).select('data_type', 's', 'pop'); pop_table = exome_pop_table.union(genome_pop_table); pop_table = pop_table.annotate(project_id=project_table[pop_table.key].project_id); pruned_mt = pruned_mt.annotate_cols(meta=pop_table[pruned_mt.col_key]); variants, samples = pruned_mt.count(); logger.info(f'{samples} samples, {variants} variants found in original joint MT'). if args.population == 'all':; sample_criteria = True; elif args.population == 'eur':; sample_criteria = (pruned_mt.meta.pop == ""nfe"") | (pruned_mt.meta.pop == ""fin""); else:; sample_criteria = pruned_mt.meta.pop == args.population. pruned_mt = pruned_mt.filter_cols(sample_criteria); variants, samples = pruned_mt.count(); logger.info(f'{samples} samples, {variants} variants found in {args.population} in joint MT'). pca_mt, related_mt = split_mt_by_relatedness(pruned_mt). pca_mt = pca_mt.filter_rows((hl.agg.mean(pca_mt.GT.n_alt_alleles()) / 2 > 0.001) &; (hl.agg.fraction(hl.is_defined(pca_mt.GT)) > 0.999)); pca_mt = hl.ld_prune(pca_mt, r2=0.1, n_cores=args.num_cores); related_mt = related_mt.filter_rows(hl.is_defined(pca_mt[related_mt.row_key, :])); pca_mt.write(f""{qc_temp_data_prefix('joint')}.{args.population}.unrelated.filtered.mt"", args.overwrite); related_mt.write(f""{qc_temp_data_prefix('joint')}.{args.population}.related.filtered.mt"", args.overwrite). ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/3446#issuecomment-384672067:888,log,logger,888,https://hail.is,https://github.com/hail-is/hail/issues/3446#issuecomment-384672067,2,['log'],['logger']
Testability,"And we have linear mixed regression. So I consider this closed as further single-variant linear and logistic methods will be by demand, not by EPACTS support.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/133#issuecomment-279516849:100,log,logistic,100,https://hail.is,https://github.com/hail-is/hail/issues/133#issuecomment-279516849,1,['log'],['logistic']
Testability,"And we plan to enable the test long-term in the follow up PR, right?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8960#issuecomment-644218677:26,test,test,26,https://hail.is,https://github.com/hail-is/hail/pull/8960#issuecomment-644218677,1,['test'],['test']
Testability,"Another set of eyes on this would be great. My current thoughts on this:. I only looked at the failure in PCA. I was never able to reproduce. My next step to try to reproduce was to run PCA on Lindo's full dataset on dataproc (can't use batch because the error is in spark PCA). I did look carefully through the stack trace, trying to understand what could possibly be happening. The number 177860 from the error isn't either matrix dimension, which is 210234 by 8893. Everything in `org.apache.spark.mllib.linalg.EigenValueDecomposition$.symmetricEigs(EigenValueDecomposition.scala:106)` is independent of the number of rows, so only the number 8893 of cols should be relevent. I wrote a simple test to execute spark PCA with 8893 rows in scala, so I could step through with a debugger:; ```scala; var mt = rangeMatrix(10000, 8893); mt = MatrixMapEntries(mt, InsertFields(Ref(""g"", mt.typ.entryType), Seq(""a"" -> F64(1)))); val t = MatrixToTableApply(mt, PCA(""a"", 10, false)); val n = TableToValueApply(t, ForceCountTable()); assertEvalsTo(n, 8893L); ```; The array `v` in `symmetricEigs` has length 177860 = 8893*20, and I didn't find anything else with that size. The only line I could find that could generate an exception that looks like this is line 555 of `dev.ludovic.netlib.arpack.AbstractARPACK.dsaupd`; ```scala; public void dsaupd(org.netlib.util.intW ido, String bmat, int n, String which, int nev, org.netlib.util.doubleW tol, double[] resid, int offsetresid, int ncv, double[] v, int offsetv, int ldv, int[] iparam, int offsetiparam, int[] ipntr, int offsetipntr, double[] workd, int offsetworkd, double[] workl, int offsetworkl, int lworkl, org.netlib.util.intW info) {; if (debug) System.err.println(""dsaupd"");; checkArgument(""DSAUPD"", 2, lsame(""I"", bmat) || lsame(""G"", bmat));; checkArgument(""DSAUPD"", 3, n >= 0);; checkArgument(""DSAUPD"", 4, lsame(""LA"", which) || lsame(""SA"", which) || lsame(""LM"", which) || lsame(""SM"", which) || lsame(""BE"", which));; checkArgument(""DSAUPD"", 5, 0 < ne",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13688#issuecomment-1760360313:696,test,test,696,https://hail.is,https://github.com/hail-is/hail/issues/13688#issuecomment-1760360313,1,['test'],['test']
Testability,"Another strange dataproc failure:. ```; + cluster submit ci-test-e8jon1wrnx2o python/cluster-tests/cluster-read-vcfs-check.py; Job [38fe2b2b5b92430d9961e3226e0c0731] submitted.; Waiting for job output...; WARNING: Job terminated, but output did not finish streaming.; ERROR: (gcloud.dataproc.jobs.submit.pyspark) Job [38fe2b2b5b92430d9961e3226e0c0731] failed with error:; Task not found; ```. I'm not even sure what a task is in this context. Will bump to retest.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6010#issuecomment-489360265:60,test,test-,60,https://hail.is,https://github.com/hail-is/hail/pull/6010#issuecomment-489360265,2,['test'],"['test-', 'tests']"
Testability,Any info from the log file? Spark is usually pretty noisy about what it's up to,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/10832#issuecomment-914321577:18,log,log,18,https://hail.is,https://github.com/hail-is/hail/issues/10832#issuecomment-914321577,1,['log'],['log']
Testability,"Apologies, I should have caught this in review. This at least lets you filter the tests, but they should also be properly executable. I'll fix that.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8557#issuecomment-614089797:82,test,tests,82,https://hail.is,https://github.com/hail-is/hail/pull/8557#issuecomment-614089797,1,['test'],['tests']
Testability,"Approved, but it seems like this test is in fact passing the local backend, so you remove `fails_local_backend`.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11563#issuecomment-1065535308:33,test,test,33,https://hail.is,https://github.com/hail-is/hail/pull/11563#issuecomment-1065535308,1,['test'],['test']
Testability,"Approving since the semantics didn't change, but we're not running the R test?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6194#issuecomment-496509626:73,test,test,73,https://hail.is,https://github.com/hail-is/hail/pull/6194#issuecomment-496509626,1,['test'],['test']
Testability,Are the benchmarks you posted on #11061 for this branch?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11060#issuecomment-971550658:8,benchmark,benchmarks,8,https://hail.is,https://github.com/hail-is/hail/pull/11060#issuecomment-971550658,1,['benchmark'],['benchmarks']
Testability,"Are there tests for the existence of these files? (I can see how that would be counterproductive if tests fail because the files move, but on the other hand, it's information you may want to know - maybe an ""optional"" test?)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9693#issuecomment-724919692:10,test,tests,10,https://hail.is,https://github.com/hail-is/hail/pull/9693#issuecomment-724919692,3,['test'],"['test', 'tests']"
Testability,As I briefly mentioned over Zulip we’d may want to increase the proxy_timeout above 60s default (it appears you hit the limit in your test). There may be some other parameters to address as well,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6454#issuecomment-505182631:134,test,test,134,https://hail.is,https://github.com/hail-is/hail/pull/6454#issuecomment-505182631,1,['test'],['test']
Testability,"As an example of this slash issue, the following config (deployed right now) doesn't work. ```; location /monitoring/grafana {; proxy_pass http://grafana/;; }. location /monitoring/grafana/ {; proxy_pass http://grafana/;; }; ```. Routing to https://internal.hail.is/monitoring/grafana appears to not hit the router (`k logs router-759c675b98-8mp67 -n monitoring -f`). Suggests problem is upstream of router-759. https://internal.hail.is/monitoring/grafana/ works fine, as expected. Trailing slash on GF_SERVER_ROOT_URL has no effect, as expect, since before grafana gets anything, the router should receive the request.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7015#issuecomment-540645336:319,log,logs,319,https://hail.is,https://github.com/hail-is/hail/pull/7015#issuecomment-540645336,1,['log'],['logs']
Testability,"As an extra safety net that this PR doesn't change any binding semantics, the ""split up matrix/table/value"" commit passed ci with an assertion on every bindings query that the old and new implementations agree.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14404#issuecomment-2027600400:133,assert,assertion,133,https://hail.is,https://github.com/hail-is/hail/pull/14404#issuecomment-2027600400,1,['assert'],['assertion']
Testability,Assertion error in RVB,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7693#issuecomment-563585896:0,Assert,Assertion,0,https://hail.is,https://github.com/hail-is/hail/pull/7693#issuecomment-563585896,1,['Assert'],['Assertion']
Testability,AssertionsHelper.macroAssert(Assertions.scala:501); at is.hail.io.fs.FSSuite.largeDirectoryOperations(FSSuite.scala:445); at is.hail.io.fs.FSSuite.largeDirectoryOperations$(FSSuite.scala:430); at is.hail.io.fs.GoogleStorageFSSuite.largeDirectoryOperations(GoogleStorageFSSuite.scala:10); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:498); at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:136); at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:658); at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:219); at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50); at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:923); at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:192); at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146); at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128); at java.util.ArrayList.forEach(ArrayList.java:1259); at org.testng.TestRunner.privateRun(TestRunner.java:808); at org.testng.TestRunner.run(TestRunner.java:603); at org.testng.SuiteRunner.runTest(SuiteRunner.java:429); at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:423); at org.testng.SuiteRunner.privateRun(SuiteRunner.java:383); at org.testng.SuiteRunner.run(SuiteRunner.java:326); at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95); at org.testng.TestNG.runSuitesSequentially(TestNG.java:1249); at org.testng.TestNG.runSuitesLocally(TestNG.java:1169); at org.testng.TestNG.runSuites(TestNG.java:1092); at org.testng.TestNG,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13827#issuecomment-1957725547:1531,Test,TestInvoker,1531,https://hail.is,https://github.com/hail-is/hail/issues/13827#issuecomment-1957725547,1,['Test'],['TestInvoker']
Testability,Assigned Dan but feel free to look as well @cseed . Admittedly I'm not 100% sure that the CLI code is correct because I just changed it to make a request instead of just calling the function and I cannot test it until the endpoint exists.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6612#issuecomment-510549867:204,test,test,204,https://hail.is,https://github.com/hail-is/hail/pull/6612#issuecomment-510549867,1,['test'],['test']
Testability,Assigning to Tim so it shows up in his review queue. He has some fixes he wanted to get released that probably need to be added to the change log.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12891#issuecomment-1514980397:142,log,log,142,https://hail.is,https://github.com/hail-is/hail/pull/12891#issuecomment-1514980397,1,['log'],['log']
Testability,"Assuming the tests are passing, this should be pretty close to being done. I propose we both sleep on it and relook at it tomorrow morning, triple check we're only modifying the `v3` tables and then merge it once we both feel good about it.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1622103825:13,test,tests,13,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1622103825,1,['test'],['tests']
Testability,"At first glance, the tests look fine to me. More thorough tests could be done using the data files here; https://github.com/broadinstitute/picard/blob/e0bb690d57f73fd2495fc5a77b497e9696f51f81/src/test/java/picard/util/LiftoverVcfTest.java#L65-L99. The interface also looks fine in terms of a non-breaking way to add strand info.; Is the plan to use this to implement a hl.liftover(mt) function that includes the checks from https://github.com/broadinstitute/picard/blob/master/src/main/java/picard/vcf/LiftoverVcf.java#L350-L397 ?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4895#issuecomment-444648897:21,test,tests,21,https://hail.is,https://github.com/hail-is/hail/pull/4895#issuecomment-444648897,3,['test'],"['test', 'tests']"
Testability,At least the Batch tests are catching things. My change caused always_run jobs to not be run...,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6128#issuecomment-493586302:19,test,tests,19,https://hail.is,https://github.com/hail-is/hail/pull/6128#issuecomment-493586302,1,['test'],['tests']
Testability,"At some point, we should think about how to improve the discoverability and machine-verifiability of our APIs. Currently the tightest type of job log is rather complex. If the performance is OK, I think we should move towards classes that define the request and response types of each call. ---. The main difference is `hail-pip-install` having `retry`. If pip exits with a non-zero exit code, we'll just rerun the command exactly, at most four more times. This mitigates missing retry logic in `pip` itself. For example, [this job](https://ci.hail.is/batches/167314/jobs/27) failed because pip encountered a connection reset while downloading a file. Ideally, pip would simply retry the download. Since we don't control the pip source code, I use a retry that treats all of pip as a black box. There's definitely a failure mode: if you specify a package that doesn't exist, pip will error five times in a row and take ~30 seconds before the retry logic gives up. I'm OK with this because pip should basically never fail for legitimate reasons.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9906#issuecomment-775241278:146,log,log,146,https://hail.is,https://github.com/hail-is/hail/pull/9906#issuecomment-775241278,3,['log'],"['log', 'logic']"
Testability,"Azure is currently running this internal-gateway/gateway, and PRs seem to be doing no worse, and sometimes better afaict, than the nginx in GCP, save for the Connection reset retrying which once in a handful of PRs will stall the test until timeout. If we decide to merge this I would want to watch a few subsequent PRs to confirm that they're not stalling and if so I would feel confident rolling out envoy to gcp as well (and can resize the k8s pool immediately after!)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12425#issuecomment-1303825690:230,test,test,230,https://hail.is,https://github.com/hail-is/hail/pull/12425#issuecomment-1303825690,1,['test'],['test']
Testability,"Back to you, merged to master and passing all tests.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/136#issuecomment-184786953:46,test,tests,46,https://hail.is,https://github.com/hail-is/hail/pull/136#issuecomment-184786953,1,['test'],['tests']
Testability,"Back to you. I made some inline comments before starting review, see both. Test failure is due to not changing high_kin to related_pairs on the right hand side, etc. in doc example.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2148#issuecomment-326106858:75,Test,Test,75,https://hail.is,https://github.com/hail-is/hail/pull/2148#issuecomment-326106858,1,['Test'],['Test']
Testability,"Back to you. I've added `require(vds.wasSplit)` to LinearRegression, LogisticRegression, and LinearMixedRegression, ToNormalizedRowMatrix, ToNormalizedIndexedRowMatrix, ToHWENormalizedIndexedRowMatrix. I think this is more reasonable than a fatal since the existing fatals would be tripped through the Python or Scala APIs. I've also noted `// requires bi-allelic` above the corresponding functions in RegressionUtils.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1425#issuecomment-286551014:69,Log,LogisticRegression,69,https://hail.is,https://github.com/hail-is/hail/pull/1425#issuecomment-286551014,1,['Log'],['LogisticRegression']
Testability,"Back to you. Looks great! Still needs tests. Sounds like you have independent python code: put that in `src/test/resources` along with the output on a non-trivial example with missingness and compare against that. Finally, it would be good to have a graphical comparison with PLINK after these changes a la Kyle's plots from before.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/202#issuecomment-188772599:38,test,tests,38,https://hail.is,https://github.com/hail-is/hail/pull/202#issuecomment-188772599,2,['test'],"['test', 'tests']"
Testability,"Back to you. Overall, looks great, esp. the test vs R.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/455#issuecomment-232711401:44,test,test,44,https://hail.is,https://github.com/hail-is/hail/pull/455#issuecomment-232711401,1,['test'],['test']
Testability,Back to you. There's also an ExprSuite test failing due to the switch from Double to Int.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1733#issuecomment-299016246:39,test,test,39,https://hail.is,https://github.com/hail-is/hail/pull/1733#issuecomment-299016246,1,['test'],['test']
Testability,Balding-Nichols is used in `lmmreg` tests.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/32#issuecomment-279513351:36,test,tests,36,https://hail.is,https://github.com/hail-is/hail/issues/32#issuecomment-279513351,1,['test'],['tests']
Testability,Balding-Nichols test is failing. Perhaps the seed is not propagating to all generators now?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1086#issuecomment-260404138:16,test,test,16,https://hail.is,https://github.com/hail-is/hail/pull/1086#issuecomment-260404138,1,['test'],['test']
Testability,Batch hung again. [ci.log](https://github.com/hail-is/hail/files/2693248/ci.log); [batch.log](https://github.com/hail-is/hail/files/2693249/batch.log),MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4984#issuecomment-448465860:22,log,log,22,https://hail.is,https://github.com/hail-is/hail/issues/4984#issuecomment-448465860,4,['log'],['log']
Testability,"Because of the unpredictable way that git clone might realize the requirements files, I removed the pinned-requirements file as a dependency of the changed targets. In both cases, regenerating that file (either in CI as part of the deploy.yaml target or on a cluster for `install-on-cluster`) could cause a dataproc cluster running with untested dependency versions even if the requirements.txt files are unchanged. I do, however, require that the pinned-requirements files be compatible using the same check we do in CI. I performed the following manual testing:; 1. Creating a dataproc cluster through `hailctl dataproc start`; 2. ssh'ing into said cluster, cloning this branch and running `make -C hail install-on-cluster` to completion; 3. Updating the requirements.txt file to something incompatible and successfully installing on cluster again with updated pinned requirements. However, I'm not sure I'm actually doing this right. I checked that in step 2 I was *not* regenerating any pinned-requirments files, but in step 3 make updated the pinned requirements without me telling it to, I'm guessing because of the wheel's dependence on `PY_FILES` and I changed the source under hail/python. So I don't entirely understand why I have this desirable result.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12510#issuecomment-1338482256:555,test,testing,555,https://hail.is,https://github.com/hail-is/hail/pull/12510#issuecomment-1338482256,1,['test'],['testing']
Testability,"Before change:. ```; {""config"": {""cores"": 1, ""version"": ""0.2.57-e20c00f05c78"", ""timestamp"": ""2020-09-24 08:27:24.863298"", ""system"": ""darwin""}, ""benchmarks"": [{""name"": ""hwe_normalized_pca_blanczos_small_data_10_iterations"", ""failed"": false, ""timed_out"": false, ""times"": [54.736854666000006, 46.213391341000005, 52.75462794499998]}]}; ```. After change: . ```; {""config"": {""cores"": 1, ""version"": ""0.2.57-c013f70fe868"", ""timestamp"": ""2020-09-24 08:32:23.991129"", ""system"": ""darwin""}, ""benchmarks"": [{""name"": ""hwe_normalized_pca_blanczos_small_data_10_iterations"", ""failed"": false, ""timed_out"": false, ""times"": [28.998368115000005, 40.65512770199999, 28.816323178000005]}]}; ```. Obvious improvement, nearly 2x.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9498#issuecomment-698315046:144,benchmark,benchmarks,144,https://hail.is,https://github.com/hail-is/hail/pull/9498#issuecomment-698315046,2,['benchmark'],['benchmarks']
Testability,Benchmark is now like 80s. Not sure why it got slower from before.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2253#issuecomment-334887071:0,Benchmark,Benchmark,0,https://hail.is,https://github.com/hail-is/hail/pull/2253#issuecomment-334887071,1,['Benchmark'],['Benchmark']
Testability,"Benchmarking:. Generated 100k by 10k IndexedRowMatrix of random doubles between 0 and 1, converted to BlockMatrix and multiplied it by its transpose. This was on 128 cores. . The multiplication took 35 seconds using my new method. It took 252 seconds without changes.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1595#issuecomment-289141495:0,Benchmark,Benchmarking,0,https://hail.is,https://github.com/hail-is/hail/pull/1595#issuecomment-289141495,1,['Benchmark'],['Benchmarking']
Testability,Benchmarks look good now.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10539#issuecomment-869920597:0,Benchmark,Benchmarks,0,https://hail.is,https://github.com/hail-is/hail/pull/10539#issuecomment-869920597,1,['Benchmark'],['Benchmarks']
Testability,Benchmarks look identical:; ```; Harmonic mean: 98.8%; Geometric mean: 99.1%; Arithmetic mean: 99.3%; Median: 99.4%; ```,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9253#issuecomment-673068628:0,Benchmark,Benchmarks,0,https://hail.is,https://github.com/hail-is/hail/pull/9253#issuecomment-673068628,1,['Benchmark'],['Benchmarks']
Testability,"Benchmarks on this are not good, still investigating.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10001#issuecomment-780674239:0,Benchmark,Benchmarks,0,https://hail.is,https://github.com/hail-is/hail/pull/10001#issuecomment-780674239,1,['Benchmark'],['Benchmarks']
Testability,"Benchmarks show that this doesn't change performance, with the exception of making linear_regression_rows_nd about 4x slower. the unreliability of ndarray performance is being solved separately.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10490#issuecomment-846021565:0,Benchmark,Benchmarks,0,https://hail.is,https://github.com/hail-is/hail/pull/10490#issuecomment-846021565,1,['Benchmark'],['Benchmarks']
Testability,"Benchmarks: https://gist.github.com/tpoterba/7b41c0e8c48ea7b1dec03dee8bce1c72. It looks like this change made Hail slower, but I'm pretty sure this is noise. These:; ```; join_p1000_p10 130.8% 132.532 173.404; union_p1000_p10 129.7% 107.998 140.027; union_p10_p1000 128.6% 116.013 149.201; ``` . Don't have any stream IRs!",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10229#issuecomment-814324282:0,Benchmark,Benchmarks,0,https://hail.is,https://github.com/hail-is/hail/pull/10229#issuecomment-814324282,1,['Benchmark'],['Benchmarks']
Testability,Benchmarks:; https://gist.github.com/johnc1231/7f59fe3a1684f2dc6321eff2a3ec2841,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11306#issuecomment-1049052019:0,Benchmark,Benchmarks,0,https://hail.is,https://github.com/hail-is/hail/pull/11306#issuecomment-1049052019,1,['Benchmark'],['Benchmarks']
Testability,Benchmarks:; https://gist.github.com/tpoterba/f74d9428a58b3ab705ded53be35e207d,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10482#issuecomment-902179489:0,Benchmark,Benchmarks,0,https://hail.is,https://github.com/hail-is/hail/pull/10482#issuecomment-902179489,1,['Benchmark'],['Benchmarks']
Testability,"Besides the question to Jackie, I'd still like a bit of clarity on https://github.com/hail-is/hail/pull/9219#discussion_r469015358 (if you want me to add an entrypoint-override image and test). The question there: is the appropriate place a buildImage step (and dependency for test_hailtop_batch), or in Makefile as you stated (I couldn't see how batch/Makefile was being used by CI, may have missed it)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9219#issuecomment-673080598:187,test,test,187,https://hail.is,https://github.com/hail-is/hail/pull/9219#issuecomment-673080598,1,['test'],['test']
Testability,"Better attempt at fixing this issue compared to #9298, will benchmark.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9304#issuecomment-675747090:60,benchmark,benchmark,60,https://hail.is,https://github.com/hail-is/hail/pull/9304#issuecomment-675747090,1,['benchmark'],['benchmark']
Testability,"Better place to post things like this would be discuss.hail.is (because it's probably a configuration issue with your cluster and not a bug in hail). I'd guess you don't have BLAS installed on your cluster. If you check the hail.log file, do you have lines like. ```; Failed to load implementation from: com.github.fommil.netlib.NativeSystemLAPACK; Failed to load implementation from: com.github.fommil.netlib.NativeSystemBLAS; ```. ?. See here: https://hail.is/docs/0.2/getting_started.html#common-installation-issues",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/7008#issuecomment-529008947:229,log,log,229,https://hail.is,https://github.com/hail-is/hail/issues/7008#issuecomment-529008947,1,['log'],['log']
Testability,"Between `BlockMatrixIRSuite.scala`, `test_linalg.py`, and the methods that use BlockMatrix, I think the BlockMatrix lowering is decently tested. And this change is certainly one we have to make. I can give it a careful review to look for potential issues.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13807#issuecomment-1766527794:137,test,tested,137,https://hail.is,https://github.com/hail-is/hail/pull/13807#issuecomment-1766527794,1,['test'],['tested']
Testability,"BinarySearch no longer exists. #2974 adds a test for this case, I believe.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/2876#issuecomment-369430474:44,test,test,44,https://hail.is,https://github.com/hail-is/hail/issues/2876#issuecomment-369430474,1,['test'],['test']
Testability,"Bowing out of this one as it is too spicy for my taste. Happy to test it on my pipelines once its passing tests and ready, but someone else should probably do the code review.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4128#issuecomment-413510162:65,test,test,65,https://hail.is,https://github.com/hail-is/hail/pull/4128#issuecomment-413510162,2,['test'],"['test', 'tests']"
Testability,"Btw, I actually don't understand how one would use this function (not clear to me from the docs nor the test)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8865#issuecomment-641489296:104,test,test,104,https://hail.is,https://github.com/hail-is/hail/pull/8865#issuecomment-641489296,1,['test'],['test']
Testability,"Building locally confirmed it ran for Spark 3.2 with commons lang fix. Will follow up later with some kind of compilation test against Spark 3.2, but for now let's just do this.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11410#issuecomment-1050116738:122,test,test,122,https://hail.is,https://github.com/hail-is/hail/pull/11410#issuecomment-1050116738,1,['test'],['test']
Testability,Bump on this. Request for benchmark was 20 days ago.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4396#issuecomment-434065807:26,benchmark,benchmark,26,https://hail.is,https://github.com/hail-is/hail/pull/4396#issuecomment-434065807,1,['benchmark'],['benchmark']
Testability,Bump. This needs to go into production before we do massive scale tests since Standard_SSD charges per IO operation.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11123#issuecomment-990100370:66,test,tests,66,https://hail.is,https://github.com/hail-is/hail/pull/11123#issuecomment-990100370,1,['test'],['tests']
Testability,Bump. Will be awesome to get this in. Let me know if you want help. Looks like the tests are passing but there's a python problem.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2374#issuecomment-344966947:83,test,tests,83,https://hail.is,https://github.com/hail-is/hail/pull/2374#issuecomment-344966947,1,['test'],['tests']
Testability,"Bumping this PR, I'd like it to land so I can nail down exactly why my flags PR is causing BN tests to fail.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12139#issuecomment-1317326725:94,test,tests,94,https://hail.is,https://github.com/hail-is/hail/pull/12139#issuecomment-1317326725,1,['test'],['tests']
Testability,"CI logic is around the assignee, not requested reviewer (still not sure what that means / how the API looks)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6346#issuecomment-501841086:3,log,logic,3,https://hail.is,https://github.com/hail-is/hail/pull/6346#issuecomment-501841086,1,['log'],['logic']
Testability,"CI test failure means not known to be safe to merge into master. Agreed re: minimizing false failures (i.e. failure due to system load but it's actually an OK change). I think in practice much less than 30s is fine, this test has been in for a month or two and this is the first time I saw it fail.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5503#issuecomment-470264865:3,test,test,3,https://hail.is,https://github.com/hail-is/hail/pull/5503#issuecomment-470264865,2,['test'],['test']
Testability,CI will automatically merge once the tests pass!,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11747#issuecomment-1095250569:37,test,tests,37,https://hail.is,https://github.com/hail-is/hail/pull/11747#issuecomment-1095250569,1,['test'],['tests']
Testability,CPU use is flat after that test completes successfully.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12731#issuecomment-1518360615:27,test,test,27,https://hail.is,https://github.com/hail-is/hail/pull/12731#issuecomment-1518360615,1,['test'],['test']
Testability,"Call(a, phased=True); for a in [; [0, 1], [0, 0], [0, 1], [0, 0], [1, 0],; [1, 1], [0, 1], [1, 1], [0, 0], [0, 1],; [1, 0], [0, 0], [1, 0], [0, 0], [0, 0],; [1, 1], [1, 1], [1, 0], [0, 1], [1, 1],; [1, 1], [1, 1], [1, 1], [1, 1], [1, 1]]]; > assert actual == expected; E assert [Call(alleles=[0, 0], phased=True), Call(alleles=[0, 0], phased=True), Call(alleles=[0, 0], phased=True), Call(alleles=[0, 0], phased=True), Call(alleles=[0, 0], phased=True), Call(alleles=[0, 0], phased=True), Call(alleles=[0, 0], phased=True), Call(alleles=[0, 0], phased=True), Call(alleles=[0, 0], phased=True), Call(alleles=[0, 0], phased=True), Call(alleles=[1, 0], phased=True), Call(alleles=[1, 0], phased=True), Call(alleles=[1, 1], phased=True), Call(alleles=[1, 0], phased=True), Call(alleles=[0, 1], phased=True), Call(alleles=[1, 1], phased=True), Call(alleles=[1, 1], phased=True), Call(alleles=[1, 1], phased=True), Call(alleles=[1, 1], phased=True), Call(alleles=[1, 1], phased=True), Call(alleles=[1, 1], phased=True), Call(alleles=[1, 1], phased=True), Call(alleles=[1, 1], phased=True), Call(alleles=[1, 1], phased=True), Call(alleles=[1, 1], phased=True)] == [Call(alleles=[0, 1], phased=True), Call(alleles=[0, 0], phased=True), Call(alleles=[0, 1], phased=True), Call(alleles=[0, 0], phased=True), Call(alleles=[1, 0], phased=True), Call(alleles=[1, 1], phased=True), Call(alleles=[0, 1], phased=True), Call(alleles=[1, 1], phased=True), Call(alleles=[0, 0], phased=True), Call(alleles=[0, 1], phased=True), Call(alleles=[1, 0], phased=True), Call",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12588#issuecomment-1397330495:696,assert,assert,696,https://hail.is,https://github.com/hail-is/hail/pull/12588#issuecomment-1397330495,2,['assert'],['assert']
Testability,"Can I ask you to add the same scan test here for rows and cols? This will mostly help protect against us trying to introduce an optimization that inadvertently breaks scans, which we've done in the past for e.g. filter intervals.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7394#issuecomment-547637893:35,test,test,35,https://hail.is,https://github.com/hail-is/hail/pull/7394#issuecomment-547637893,1,['test'],['test']
Testability,Can I close this and create an asana task to add a BOM test?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/6342#issuecomment-658296305:55,test,test,55,https://hail.is,https://github.com/hail-is/hail/issues/6342#issuecomment-658296305,1,['test'],['test']
Testability,Can I close this if the other PR is passing tests?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12263#issuecomment-1267520808:44,test,tests,44,https://hail.is,https://github.com/hail-is/hail/pull/12263#issuecomment-1267520808,1,['test'],['tests']
Testability,"Can approve this now if you want, but really we should have a test that we respect Spark confs being passed in at least.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11691#issuecomment-1080623876:62,test,test,62,https://hail.is,https://github.com/hail-is/hail/pull/11691#issuecomment-1080623876,1,['test'],['test']
Testability,"Can confirm that at least locally, the environment variable caused a table to be written with packed integers, and the tests passed with the flag on (I assume).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7821#issuecomment-595913767:119,test,tests,119,https://hail.is,https://github.com/hail-is/hail/pull/7821#issuecomment-595913767,1,['test'],['tests']
Testability,"Can confirm that this ""fixes"" it, since current master results in:; ```; Hail version: devel-f4fc571b4570; Error summary: AssertionError: assertion failed: type mismatch:; name: global; actual: +Struct{}; expect: Struct{}; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4128#issuecomment-412775955:122,Assert,AssertionError,122,https://hail.is,https://github.com/hail-is/hail/pull/4128#issuecomment-412775955,2,"['Assert', 'assert']","['AssertionError', 'assertion']"
Testability,"Can we add a test something like:; ```; mt = hl.utils.range_matrix_table(1,1); mt = mt.annotate_entries(x = 1); mt = mt.key_cols_by(col_idx = mt.col_idx + 10); assert str(mt.show()) == '''+---------+-------+; | row_idx | 10.x |; +---------+-------+; | int32 | int32 |; +---------+-------+; | 0 | 1 |; +---------+-------+; '''; ```; ?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9123#issuecomment-662709112:13,test,test,13,https://hail.is,https://github.com/hail-is/hail/pull/9123#issuecomment-662709112,2,"['assert', 'test']","['assert', 'test']"
Testability,Can we add a test that triggers it? I think Nick's example from Zulip should do it.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9631#issuecomment-714582672:13,test,test,13,https://hail.is,https://github.com/hail-is/hail/pull/9631#issuecomment-714582672,1,['test'],['test']
Testability,"Can we follow up with a test that creates one job which echos its IP and port and then listens, then the test will try to curl the public IP and port?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11250#issuecomment-1021554196:24,test,test,24,https://hail.is,https://github.com/hail-is/hail/pull/11250#issuecomment-1021554196,2,['test'],['test']
Testability,Can we have a test that catches it?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5033#issuecomment-449469191:14,test,test,14,https://hail.is,https://github.com/hail-is/hail/pull/5033#issuecomment-449469191,1,['test'],['test']
Testability,Can you add a test that drops rsid and lid fields? See message above.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3779#issuecomment-398382290:14,test,test,14,https://hail.is,https://github.com/hail-is/hail/pull/3779#issuecomment-398382290,1,['test'],['test']
Testability,Can you add the method wrapping and run benchmarks?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10510#issuecomment-867194564:40,benchmark,benchmarks,40,https://hail.is,https://github.com/hail-is/hail/pull/10510#issuecomment-867194564,1,['benchmark'],['benchmarks']
Testability,Can you benchmark this on profile225?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3503#issuecomment-386722408:8,benchmark,benchmark,8,https://hail.is,https://github.com/hail-is/hail/pull/3503#issuecomment-386722408,1,['benchmark'],['benchmark']
Testability,Can you benchmark?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11060#issuecomment-967201497:8,benchmark,benchmark,8,https://hail.is,https://github.com/hail-is/hail/pull/11060#issuecomment-967201497,1,['benchmark'],['benchmark']
Testability,Can you confirm there are already existing tests for each of the code paths used in this code?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13253#issuecomment-1640372916:43,test,tests,43,https://hail.is,https://github.com/hail-is/hail/pull/13253#issuecomment-1640372916,1,['test'],['tests']
Testability,"Can you describe the issue with TContainer nodes, and possibly create a test with an example that makes sure we streamify it properly?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8063#issuecomment-586537288:72,test,test,72,https://hail.is,https://github.com/hail-is/hail/pull/8063#issuecomment-586537288,1,['test'],['test']
Testability,"Can you double check we don't need to explicitly tell nginx to use more than 1 core? I'm looking here:. https://www.nginx.com/blog/thread-pools-boost-performance-9x/#Configuring-Thread-Pools; https://www.nginx.com/blog/thread-pools-boost-performance-9x/#Benchmarking. Otherwise, I think this change is fine, although we do already have a minimum of two copies of internal-gateway at any time. Is this change better than increasing the number of copies of internal-gateway? I assume that the response time to increases in load will be faster with your proposed change.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11876#issuecomment-1145004769:254,Benchmark,Benchmarking,254,https://hail.is,https://github.com/hail-is/hail/pull/11876#issuecomment-1145004769,1,['Benchmark'],['Benchmarking']
Testability,Can you give an example or a test case you think will fail?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2060#issuecomment-322262037:29,test,test,29,https://hail.is,https://github.com/hail-is/hail/pull/2060#issuecomment-322262037,1,['test'],['test']
Testability,Can you include a failing test?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1207#issuecomment-268570534:26,test,test,26,https://hail.is,https://github.com/hail-is/hail/pull/1207#issuecomment-268570534,1,['test'],['test']
Testability,Can you make the same change to benchmark/Makefile?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13957#issuecomment-1789596118:32,benchmark,benchmark,32,https://hail.is,https://github.com/hail-is/hail/pull/13957#issuecomment-1789596118,1,['benchmark'],['benchmark']
Testability,Can you run benchmarks to make sure the code size doesn't cause any corresponding slowdown?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10905#issuecomment-941238170:12,benchmark,benchmarks,12,https://hail.is,https://github.com/hail-is/hail/pull/10905#issuecomment-941238170,1,['benchmark'],['benchmarks']
Testability,Can you share the latest benchmarks (even if just restricted to the previously slow ones)?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12981#issuecomment-1569142143:25,benchmark,benchmarks,25,https://hail.is,https://github.com/hail-is/hail/pull/12981#issuecomment-1569142143,1,['benchmark'],['benchmarks']
Testability,"Can you take a look at the new structure and see if it's better? If so, then I'll test everything again making sure there's no errors in the logs.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10920#issuecomment-949956416:82,test,test,82,https://hail.is,https://github.com/hail-is/hail/pull/10920#issuecomment-949956416,2,"['log', 'test']","['logs', 'test']"
Testability,"Can you take another look now?. I added two new fields to the jobs table to help with indexing and order bys. This should make the queries simpler and allow us to revert back to the old scheduler that Cotton wrote that was optimitzed. The regions_bits_rep is just a 0/1 for each region. So [us-east1, us-central1] could be ""1100000"". I also realized that I could aggregate the ready cores per user and then order them after unioning each user. I think this will perform better. From small tests, the autoscaler query seemed much better, but I'll want to do one last load test once you're okay with this approach.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12221#issuecomment-1274632733:489,test,tests,489,https://hail.is,https://github.com/hail-is/hail/pull/12221#issuecomment-1274632733,2,['test'],"['test', 'tests']"
Testability,"Can you take another look, Cotton? This PR:; - sets up the conf as we did in Main (fixes the issues Konrad has had in the last days); - sets up logging properly; - handles exceptions correctly. All new methods that call into scala VDS operations need to wrap in try/except",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1085#issuecomment-261416007:144,log,logging,144,https://hail.is,https://github.com/hail-is/hail/pull/1085#issuecomment-261416007,1,['log'],['logging']
Testability,Can you take another look? I'm getting test errors in other PRs that I hope this PR fixes.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10696#issuecomment-887830765:39,test,test,39,https://hail.is,https://github.com/hail-is/hail/pull/10696#issuecomment-887830765,1,['test'],['test']
Testability,"Can you test how much time this adds to `test_pipeline`? The original problem should be fixed now that this would have caught (spec in database too big). I'm a little worried about every ci build adding 500 spec, status, and log files, but those are going into a 1 day bucket now and it's probably not very expensive for the API calls. Maybe this should be part of a separate batch benchmark suite that's run before major changes?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7864#issuecomment-580346915:8,test,test,8,https://hail.is,https://github.com/hail-is/hail/pull/7864#issuecomment-580346915,3,"['benchmark', 'log', 'test']","['benchmark', 'log', 'test']"
Testability,"Can't fail the assertion if it's not there to check. We still need the other parts of this change, because otherwise, we were reading too much.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9304#issuecomment-677864463:15,assert,assertion,15,https://hail.is,https://github.com/hail-is/hail/pull/9304#issuecomment-677864463,1,['assert'],['assertion']
Testability,Can't see why the tests are failing :( Perhaps the CI app needs to be redeployed manually first.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10107#issuecomment-797361165:18,test,tests,18,https://hail.is,https://github.com/hail-is/hail/pull/10107#issuecomment-797361165,1,['test'],['tests']
Testability,Caused by: java.lang.AssertionError: assertion failed; 	at scala.Predef$.assert(Predef.scala:156); 	at is.hail.variant.GenotypeBuilder.write(Genotype.scala:1269); 	at is.hail.variant.GenotypeStreamBuilder.$plus$eq(GenotypeStream.scala:156); 	at is.hail.variant.GenotypeStreamBuilder.$plus$eq(GenotypeStream.scala:148); 	at scala.collection.generic.Growable$$anonfun$$plus$plus$eq$1.apply(Growable.scala:59); 	at scala.collection.generic.Growable$$anonfun$$plus$plus$eq$1.apply(Growable.scala:59); 	at scala.collection.Iterator$class.foreach(Iterator.scala:893); 	at is.hail.utils.richUtils.RichIterable$$anon$3$$anon$9.foreach(RichIterable.scala:38),MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2004#issuecomment-318079424:21,Assert,AssertionError,21,https://hail.is,https://github.com/hail-is/hail/pull/2004#issuecomment-318079424,3,"['Assert', 'assert']","['AssertionError', 'assert', 'assertion']"
Testability,Changed list of tests in hail/build.gradle testCppCodegen,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4326#issuecomment-422401985:16,test,tests,16,https://hail.is,https://github.com/hail-is/hail/pull/4326#issuecomment-422401985,2,['test'],"['testCppCodegen', 'tests']"
Testability,"Changes look good, thanks for that! We need to add automated tests if we're going to keep this functionality.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3122#issuecomment-372146159:61,test,tests,61,https://hail.is,https://github.com/hail-is/hail/pull/3122#issuecomment-372146159,1,['test'],['tests']
Testability,"Changes since last review:; - Method now takes expressions for call and (optionally) scores.; - Block matrix and table of scores annotated and collected from source.cols() sent to Python, processed using int indices, column names restored on python side (thanks @tpoterba); - Fixed bug that silently dropped `n_samples / block_size` proportion of pairs, Python test checks it; - Extended Python tests to compare k and scores paths, test counts, min_kinship, maf, block_size; - Tuned tolerances on comparison with R from Python; - Extended to general column key, removing unique key check, noted in docs; - MEMORY_AND_DISK caching as default (thanks @konradjk) on Scala side; - The diagonal fix meant phi is computed with parallelism up to the number of diagonal blocks, rather than parallelism 1. But that's still likely a bottleneck as phi requires computing and point-wise dividing two big gram matrices. I now write phi to disk and read it back in, which squares the parallelism up to the number of blocks in phi. I think this should also improve the stability of the many downstream calculations derived from phi, esp. if pre-emptibles are used. No longer cacheing phi, but I left caching on the other matrices. @konradjk let us know how this version compares next time you run it.; - Noted in FIXME room for further improvement when fusing blocks: `replace join with zipPartitions, throw away lower triangular blocks sooner, avoid the nulls`; - Updated docs accordingly; - Deleted a bunch of code in PCRelate and PCRelateSuite",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3211#issuecomment-376725104:361,test,test,361,https://hail.is,https://github.com/hail-is/hail/pull/3211#issuecomment-376725104,3,['test'],"['test', 'tests']"
Testability,"Changes:. - Rename Pipeline class to Batch; - Rename Task class to Job; - Rename pipeline module to batch; - Update getting started page to reflect module is at hailtop.batch; - Update website location (build.yaml, Makefile, web_common); - Update conf.py to use batch as the docs name; - Fix all examples in docs to use batch, job; - Go through docs text and change references to pipelines to batches and tasks to jobs; - Move pipeline/test/test_pipeline.py to hail/python/test/hailtop/batch/; - Update tests to use batch, job; - Update benchmark suite; - Rename BatchBackend to ServiceBackend; - Consolidate test_pipeline into test_hailtop_batch; - Update Hail makefile to build batch docs rather than pipeline docs. I did *NOT* change the navbar to point to the batch docs since it won't exist until the next release.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8453#issuecomment-610595606:436,test,test,436,https://hail.is,https://github.com/hail-is/hail/pull/8453#issuecomment-610595606,4,"['benchmark', 'test']","['benchmark', 'test', 'tests']"
Testability,"Checked https://internal.hail.is/cseed/notebook2/notebook. Crash on trying to create a notebook. Minor styling fixes as well (Hail logo is tiny), can be delayed for future PR.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7064#issuecomment-532038340:131,log,logo,131,https://hail.is,https://github.com/hail-is/hail/pull/7064#issuecomment-532038340,1,['log'],['logo']
Testability,Checked that PartitioningSuite doesn't get an out of memory error on bgen branch and ExprSuite.testImpexes takes less than a second now.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1748#issuecomment-298948635:95,test,testImpexes,95,https://hail.is,https://github.com/hail-is/hail/pull/1748#issuecomment-298948635,1,['test'],['testImpexes']
Testability,"Checkpointing the VCF made it, if anything, slower.; ```; 254.81s call hail/methods/relatedness/test_pc_relate.py::test_pc_relate_against_R_truth; 189.52s call hail/methods/test_pca.py::test_spectra_2[triplet0]; 95.37s call hail/vds/test_vds.py::test_truncate_reference_blocks; 92.80s call hail/methods/test_qc.py::Tests::test_vep_grch38_against_dataproc; 86.83s call hail/backend/test_service_backend.py::test_tiny_driver_has_tiny_memory; 68.86s call hail/matrixtable/test_matrix_table.py::test_read_write_balding_nichols_model; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13076#issuecomment-1564883408:315,Test,Tests,315,https://hail.is,https://github.com/hail-is/hail/pull/13076#issuecomment-1564883408,1,['Test'],['Tests']
Testability,"Chris, the main thing that needs reviewing is the implementation of `sizeToStoreInBytes`. The `EmitStreamDistribute` stuff is just adding `sizeInBytes` to every write out, and the `LowerDistributedSort` stuff is mostly logic to track sizes and make sure that if a single row is bigger than our size cutoff, we don't get stuck in an infinite loop",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11381#issuecomment-1054617159:219,log,logic,219,https://hail.is,https://github.com/hail-is/hail/pull/11381#issuecomment-1054617159,1,['log'],['logic']
Testability,Citation for log4j1 programmatic configuration breaking log4j2: https://logging.apache.org/log4j/2.x/manual/migration.html#limitations-of-the-log4j-1-x-bridge,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12941#issuecomment-1524328047:72,log,logging,72,https://hail.is,https://github.com/hail-is/hail/pull/12941#issuecomment-1524328047,1,['log'],['logging']
Testability,Class(ClassLoader.java:756); 	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142); 	at java.net.URLClassLoader.defineClass(URLClassLoader.java:468); 	at java.net.URLClassLoader.access$100(URLClassLoader.java:74); 	at java.net.URLClassLoader$1.run(URLClassLoader.java:369); 	at java.net.URLClassLoader$1.run(URLClassLoader.java:363); 	at java.security.AccessController.doPrivileged(Native Method); 	at java.net.URLClassLoader.findClass(URLClassLoader.java:362); 	at java.lang.ClassLoader.loadClass(ClassLoader.java:418); 	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352); 	at java.lang.ClassLoader.loadClass(ClassLoader.java:351); 	at org.testng.internal.ClassHelper.forName(ClassHelper.java:94); 	at org.testng.xml.XmlClass.loadClass(XmlClass.java:78); 	at org.testng.xml.XmlClass.getSupportClass(XmlClass.java:89); 	at org.testng.internal.ClassInfoMap.<init>(ClassInfoMap.java:25); 	at org.testng.internal.ClassInfoMap.<init>(ClassInfoMap.java:18); 	at org.testng.TestRunner.initMethods(TestRunner.java:408); 	at org.testng.TestRunner.init(TestRunner.java:235); 	at org.testng.TestRunner.init(TestRunner.java:205); 	at org.testng.TestRunner.<init>(TestRunner.java:153); 	at org.testng.SuiteRunner$DefaultTestRunnerFactory.newTestRunner(SuiteRunner.java:536); 	at org.testng.SuiteRunner.init(SuiteRunner.java:159); 	at org.testng.SuiteRunner.<init>(SuiteRunner.java:113); 	at org.testng.TestNG.createSuiteRunner(TestNG.java:1299); 	at org.testng.TestNG.createSuiteRunners(TestNG.java:1286); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); Caused by: java.lang.ClassNotFoundException: is.hail.relocated.org.apache.commons.math3.distribution.AbstractIntegerDistribution; 	at java.net.URLClassLoader.findClass(URLClassLoader.java:382); 	at java.lang.ClassLoader.loadClass(ClassLoader.java:418); 	at sun.misc.Lau,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8700#issuecomment-624324460:1571,test,testng,1571,https://hail.is,https://github.com/hail-is/hail/pull/8700#issuecomment-624324460,1,['test'],['testng']
Testability,ClassLoader.defineClass(URLClassLoader.java:468); 	at java.net.URLClassLoader.access$100(URLClassLoader.java:74); 	at java.net.URLClassLoader$1.run(URLClassLoader.java:369); 	at java.net.URLClassLoader$1.run(URLClassLoader.java:363); 	at java.security.AccessController.doPrivileged(Native Method); 	at java.net.URLClassLoader.findClass(URLClassLoader.java:362); 	at java.lang.ClassLoader.loadClass(ClassLoader.java:418); 	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352); 	at java.lang.ClassLoader.loadClass(ClassLoader.java:351); 	at org.testng.internal.ClassHelper.forName(ClassHelper.java:94); 	at org.testng.xml.XmlClass.loadClass(XmlClass.java:78); 	at org.testng.xml.XmlClass.getSupportClass(XmlClass.java:89); 	at org.testng.internal.ClassInfoMap.<init>(ClassInfoMap.java:25); 	at org.testng.internal.ClassInfoMap.<init>(ClassInfoMap.java:18); 	at org.testng.TestRunner.initMethods(TestRunner.java:408); 	at org.testng.TestRunner.init(TestRunner.java:235); 	at org.testng.TestRunner.init(TestRunner.java:205); 	at org.testng.TestRunner.<init>(TestRunner.java:153); 	at org.testng.SuiteRunner$DefaultTestRunnerFactory.newTestRunner(SuiteRunner.java:536); 	at org.testng.SuiteRunner.init(SuiteRunner.java:159); 	at org.testng.SuiteRunner.<init>(SuiteRunner.java:113); 	at org.testng.TestNG.createSuiteRunner(TestNG.java:1299); 	at org.testng.TestNG.createSuiteRunners(TestNG.java:1286); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); Caused by: java.lang.ClassNotFoundException: is.hail.relocated.org.apache.commons.math3.distribution.AbstractIntegerDistribution; 	at java.net.URLClassLoader.findClass(URLClassLoader.java:382); 	at java.lang.ClassLoader.loadClass(ClassLoader.java:418); 	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352); 	at java.lang.ClassLoader.loadClass(ClassLoader.java:351); 	... 30 more,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8700#issuecomment-624324460:1691,Test,TestRunner,1691,https://hail.is,https://github.com/hail-is/hail/pull/8700#issuecomment-624324460,1,['Test'],['TestRunner']
Testability,ClassLoader.java:142); 	at java.net.URLClassLoader.defineClass(URLClassLoader.java:468); 	at java.net.URLClassLoader.access$100(URLClassLoader.java:74); 	at java.net.URLClassLoader$1.run(URLClassLoader.java:369); 	at java.net.URLClassLoader$1.run(URLClassLoader.java:363); 	at java.security.AccessController.doPrivileged(Native Method); 	at java.net.URLClassLoader.findClass(URLClassLoader.java:362); 	at java.lang.ClassLoader.loadClass(ClassLoader.java:418); 	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352); 	at java.lang.ClassLoader.loadClass(ClassLoader.java:351); 	at org.testng.internal.ClassHelper.forName(ClassHelper.java:94); 	at org.testng.xml.XmlClass.loadClass(XmlClass.java:78); 	at org.testng.xml.XmlClass.getSupportClass(XmlClass.java:89); 	at org.testng.internal.ClassInfoMap.<init>(ClassInfoMap.java:25); 	at org.testng.internal.ClassInfoMap.<init>(ClassInfoMap.java:18); 	at org.testng.TestRunner.initMethods(TestRunner.java:408); 	at org.testng.TestRunner.init(TestRunner.java:235); 	at org.testng.TestRunner.init(TestRunner.java:205); 	at org.testng.TestRunner.<init>(TestRunner.java:153); 	at org.testng.SuiteRunner$DefaultTestRunnerFactory.newTestRunner(SuiteRunner.java:536); 	at org.testng.SuiteRunner.init(SuiteRunner.java:159); 	at org.testng.SuiteRunner.<init>(SuiteRunner.java:113); 	at org.testng.TestNG.createSuiteRunner(TestNG.java:1299); 	at org.testng.TestNG.createSuiteRunners(TestNG.java:1286); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); Caused by: java.lang.ClassNotFoundException: is.hail.relocated.org.apache.commons.math3.distribution.AbstractIntegerDistribution; 	at java.net.URLClassLoader.findClass(URLClassLoader.java:382); 	at java.lang.ClassLoader.loadClass(ClassLoader.java:418); 	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352); 	at java.lang.ClassLoader.loadC,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8700#issuecomment-624324460:1654,Test,TestRunner,1654,https://hail.is,https://github.com/hail-is/hail/pull/8700#issuecomment-624324460,1,['Test'],['TestRunner']
Testability,Close for now? Doesn't make sense to merge if it makes tests slower.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3450#issuecomment-385005092:55,test,tests,55,https://hail.is,https://github.com/hail-is/hail/pull/3450#issuecomment-385005092,1,['test'],['tests']
Testability,Closing since it makes linreg benchmark much slower and I don't understand why yet.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10465#issuecomment-834383154:30,benchmark,benchmark,30,https://hail.is,https://github.com/hail-is/hail/pull/10465#issuecomment-834383154,1,['benchmark'],['benchmark']
Testability,Closing this so we don't have to keep re-testing. @alexb-3 resubmit after you're reviewed it and you are ready to get it in to the master.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/593#issuecomment-248638035:41,test,testing,41,https://hail.is,https://github.com/hail-is/hail/pull/593#issuecomment-248638035,1,['test'],['testing']
Testability,Closing this while I dev deploy test it.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7910#issuecomment-576348264:32,test,test,32,https://hail.is,https://github.com/hail-is/hail/pull/7910#issuecomment-576348264,1,['test'],['test']
Testability,Closing while I address test failure.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1548#issuecomment-286622901:24,test,test,24,https://hail.is,https://github.com/hail-is/hail/pull/1548#issuecomment-286622901,1,['test'],['test']
Testability,Closing while I resolve test failures and do some clean up,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2254#issuecomment-332244947:24,test,test,24,https://hail.is,https://github.com/hail-is/hail/pull/2254#issuecomment-332244947,1,['test'],['test']
Testability,Closing while I test out changes.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10656#issuecomment-885229140:16,test,test,16,https://hail.is,https://github.com/hail-is/hail/pull/10656#issuecomment-885229140,1,['test'],['test']
Testability,Closing while we set up testing.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2127#issuecomment-325806107:24,test,testing,24,https://hail.is,https://github.com/hail-is/hail/pull/2127#issuecomment-325806107,1,['test'],['testing']
Testability,"Cloud benchmark: with 20k-gene-annotated 1k genomes hardcall VDS (37.2 million variants, 2535 samples, 3 covariates), using 1000 partitions and 342 cores (24 workers, 16 cores each) on GCP, it takes about 60s to do linear burden test and output linregKT to TSV, and another 60s to output the sampleKT to TSV. ```; linreg_kt, sample_kt = (hc.read('gs://jbloom/ALL.1KG.qc.hardcalls.p1000.burden.vds'); .linreg_burden('gene',; 	 'va.geneSet',; 	 'gs.map(g => va.weight * g.gt).sum()',; 'sa.pheno',; ['sa.cov1', 'sa.cov2'])). linreg_kt.export('gs://jbloom/burden_linreg.tsv.gz'); sample_kt.export('gs://jbloom/burden_samples.tsv.gz'); ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1708#issuecomment-296402338:6,benchmark,benchmark,6,https://hail.is,https://github.com/hail-is/hail/pull/1708#issuecomment-296402338,2,"['benchmark', 'test']","['benchmark', 'test']"
Testability,Code looks good. It looks like there's something wrong with the gradle cpp test configuration.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4594#issuecomment-433123340:75,test,test,75,https://hail.is,https://github.com/hail-is/hail/pull/4594#issuecomment-433123340,1,['test'],['test']
Testability,"Commented out the phased test -- this was meant to fail, and I didn't intend to fix that in this PR (it's hard, we need to change the Call representation...)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11023#issuecomment-958005579:25,test,test,25,https://hail.is,https://github.com/hail-is/hail/pull/11023#issuecomment-958005579,1,['test'],['test']
Testability,"Comments addressed. You asked about scalars so I've rounded that out with support for any combination of scalar and block matrix, as well as unary + and -, testing in notebook along the way. I've marked the class with experimental.rst until I've stabilized the interface with robust testing of all operations in subsequent broadcasting PR. I fixed the process_joins bug as noted, but stopped there in this PR since just switching to select_entries will end up calling the expression machinery twice. The right solution requires simultaneous changes on the Scala side. I'll make a PR to check if `entry_expr` is a field, if not to use `select_entries` to make it one, and then change `MatrixTable.writeBlockMatrix` to take a field rather than an expression. Sound good?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3072#issuecomment-370569833:156,test,testing,156,https://hail.is,https://github.com/hail-is/hail/pull/3072#issuecomment-370569833,2,['test'],['testing']
Testability,"Comments should be addressed, but I wasn't able to test it locally so there could still be problems...",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5981#issuecomment-488026847:51,test,test,51,https://hail.is,https://github.com/hail-is/hail/pull/5981#issuecomment-488026847,1,['test'],['test']
Testability,Commit log is the description of what changed.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7004#issuecomment-528714248:7,log,log,7,https://hail.is,https://github.com/hail-is/hail/pull/7004#issuecomment-528714248,1,['log'],['log']
Testability,Confirmed that test K8s SAs cannot list secrets outside their namespace,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13000#issuecomment-1536852243:15,test,test,15,https://hail.is,https://github.com/hail-is/hail/pull/13000#issuecomment-1536852243,1,['test'],['test']
Testability,"Confirmed that this prebuilt libhail.so can run tests with HAIL_ENABLE_CPP_CODEGEN=1; on a dataproc node with the default 1.2 image (debian8 and g++-4.9.2). The dataproc nodes have g++ and make already installed, so this PR should suffice to; make them work with C++ codegen.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4422#issuecomment-424477261:48,test,tests,48,https://hail.is,https://github.com/hail-is/hail/pull/4422#issuecomment-424477261,1,['test'],['tests']
Testability,"Confirmed, this failure is not happening on local. . ```sh; (base) alex:~/projects/hail/hail:$ ./gradlew test --tests is.hail.expr.ir.ForwardLetsSuite.testForwardingOps; :checkSettings; check: seed = 1, size = 1000, count = 10; :compileJava UP-TO-DATE; :generateBuildInfo; :nativeLib; c++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/include -I/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/include/darwin Region.cpp -MG -M -MF build/Region.d -MT build/Region.o; c++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/include -I/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/include/darwin Hadoop.cpp -MG -M -MF build/Hadoop.d -MT build/Hadoop.o; c++ -o build/Region.o -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/include -I/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/include/darwin -MD -MF build/Region.d -MT build/Region.o -c Region.cpp; c++ -o build/Hadoop.o -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/include -I/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/include/darwin -MD -MF build/Hadoop.d -MT build/Hadoop.o -c Hadoop.cpp; c++ -fvisibility=default -dynamiclib -Wl,-undefined,dynamic_lookup -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/include -I/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6083#issuecomment-492893925:105,test,test,105,https://hail.is,https://github.com/hail-is/hail/pull/6083#issuecomment-492893925,3,['test'],"['test', 'testForwardingOps', 'tests']"
Testability,"Cool, tests pass now. Turns out that the issue was not the changes that I made to `context.py`, not the scala side changes. The python side initialization steps are not actually idempotent, so if the context has already been set up, we immediately return instead of running them again.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4068#issuecomment-411239262:6,test,tests,6,https://hail.is,https://github.com/hail-is/hail/pull/4068#issuecomment-411239262,1,['test'],['tests']
Testability,"Cool. There's some things that I want to rework, namely the split logic for `Group()` (either splitting it into a separate IR node as you suggested or reworking some of the CodeAggregator stuff so that the logic becomes the same), but I think that doesn't affect the workingness of this code so I was going to leave that part as-is for now.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4555#issuecomment-430448925:66,log,logic,66,https://hail.is,https://github.com/hail-is/hail/pull/4555#issuecomment-430448925,2,['log'],['logic']
Testability,"Cotton -- I fixed the changes you suggested and it should be ready to be merged. For the multiarray of size 0, I tested that you can create the object, but using the apply for (0,0) throws an error.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/79#issuecomment-161677715:113,test,tested,113,https://hail.is,https://github.com/hail-is/hail/pull/79#issuecomment-161677715,1,['test'],['tested']
Testability,"Cotton and I discussed several weeks ago that we should build a debugging allocator for testing/debugging issues like the above. You were a natural candidate to work on this, given how you were digging pretty deeply into region stuff, and even started working on something similar. Shall we set up a chat in the next day or two to talk about this? Sounds like it's now a high-prio need.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8957#issuecomment-644136378:88,test,testing,88,https://hail.is,https://github.com/hail-is/hail/pull/8957#issuecomment-644136378,1,['test'],['testing']
Testability,Cotton has a vcf he generated for testing BGZipCodec: see BGZipCodecSuite. This has a lot of the edge cases.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9304#issuecomment-676497772:34,test,testing,34,https://hail.is,https://github.com/hail-is/hail/pull/9304#issuecomment-676497772,1,['test'],['testing']
Testability,Could also do a scala test that asserts about memory usage.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10695#issuecomment-886215090:22,test,test,22,https://hail.is,https://github.com/hail-is/hail/pull/10695#issuecomment-886215090,2,"['assert', 'test']","['asserts', 'test']"
Testability,Could we add a specific test for compatibilty on JDK 8 and move the default forward? We're on a crash course of incompatibility with the current python3.6 / ubuntu:18.04 / Java 8 restrictions. From Oracle's pages it feels like Java 8 will simply never die...,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11046#issuecomment-965471326:24,test,test,24,https://hail.is,https://github.com/hail-is/hail/pull/11046#issuecomment-965471326,1,['test'],['test']
Testability,"Could you give some context on the two different places in the driver we're checking the number of attempts? What are those two places, and why do we need two?. Also, have you done anything to test how much adding joins with the `attempts` table slows down those queries?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14682#issuecomment-2356218496:193,test,test,193,https://hail.is,https://github.com/hail-is/hail/pull/14682#issuecomment-2356218496,1,['test'],['test']
Testability,Could you please do one more broad look over this before I start testing again with the new changes?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13279#issuecomment-1677683100:65,test,testing,65,https://hail.is,https://github.com/hail-is/hail/pull/13279#issuecomment-1677683100,1,['test'],['testing']
Testability,Could you run benchmarks?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10867#issuecomment-920949276:14,benchmark,benchmarks,14,https://hail.is,https://github.com/hail-is/hail/pull/10867#issuecomment-920949276,1,['benchmark'],['benchmarks']
Testability,"Created https://github.com/hail-is/hail/issues/4533 to track testing for account liveliness. There's no good solution to bullet two, I just email GitHub support and ask them to unblock. I guess this page is now the documentation for that.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4517#issuecomment-429135514:61,test,testing,61,https://hail.is,https://github.com/hail-is/hail/issues/4517#issuecomment-429135514,1,['test'],['testing']
Testability,"Curious, did you benchmark this change, in particular the local/field business?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9089#issuecomment-666769626:17,benchmark,benchmark,17,https://hail.is,https://github.com/hail-is/hail/pull/9089#issuecomment-666769626,1,['benchmark'],['benchmark']
Testability,"Currently pruning dependencies, forking NextJS to remove poly fills for older browsers, and focusing on bundle size. Investigated using Inferno.js as a lighter alternative to React. Saves ~20-30KB bundle size, and is somewhat faster. However, main Inferno dev moved to React core team, and React is focusing on the optimizations present in Inferno for 2019 (DOM: move to native events where possible), as well as introducing optimizations not found in Inferno (compile time targets: initially inlining, future maybe web assembly binaries; move rendering work to separate thread / concurrent rendering). Furthermore, React ecosystem is orders of magnitude larger, so we can save a huge amount of dev time by avoiding Inferno (N modules * time to develop bespoke module avg), and have greater likelihood of LTS. Notably, I realized that most of my bundle size was coming from inefficient bundling of Material UI and due to Apollo's insanely large graphQL bundle. Removing these now. Lastly, React is actually very efficient. jQuery is ~31.1KB minified. React is 3KB, while React DOM is 33.8KB. In 2019 React DOM will shrink. In any case, given that React is both faster than jQuery, dramatically simplifies development, and introduces development structure, 4KB cost is imo worth it. Related issues:; https://github.com/zeit/next.js/issues/5923. Bundle (with header, authentication logic including jks-rsa verification of token, styles). Index.js is 336 B, _app is 2.89, and that is all that is needed for first page render. _app amortized over all other pages. Scorecard template w/fetch logic is 1.67KB. <img width=""341"" alt=""screen shot 2018-12-19 at 3 43 23 pm"" src=""https://user-images.githubusercontent.com/5543229/50247084-f3202200-03a4-11e9-8232-f1cd2a35958c.png"">",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4931#issuecomment-448652812:1380,log,logic,1380,https://hail.is,https://github.com/hail-is/hail/pull/4931#issuecomment-448652812,2,['log'],['logic']
Testability,"Currently there are some tests failures, but they are stemming from me running more tests than I expect to it would seem (i.e. trying to run the NDArray write tests in JVM byte code world). General review of the byt ecode generation stuff would still be appreciated, I'll debug the testing stuff when I get a chance.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6874#issuecomment-521662062:25,test,tests,25,https://hail.is,https://github.com/hail-is/hail/pull/6874#issuecomment-521662062,4,['test'],"['testing', 'tests']"
Testability,D.map(RDD.scala:286); at org.broadinstitute.hail.methods.MendelErrors.writeMendel(MendelErrors.scala:143); at org.broadinstitute.hail.methods.MendelErrorsSuite.test(MendelErrorsSuite.scala:50); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:497); at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); at org.testng.TestRunner.privateRun(TestRunner.java:767); at org.testng.TestRunner.run(TestRunner.java:617); at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); at org.testng.SuiteRunner.run(SuiteRunner.java:254); at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); at org.testng.TestNG.run(TestNG.java:1057); at org.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:72); at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:122); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:497); at com.i,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/68#issuecomment-155304880:1782,test,testng,1782,https://hail.is,https://github.com/hail-is/hail/pull/68#issuecomment-155304880,1,['test'],['testng']
Testability,"Dan thanks for the comments, some great suggestions. I've addressed some, will get to the rest by Monday. I owe you at least one unit test. You can check the app out at app.hail.is (no SSL yet). Let me know if you have a problem logging in. Currently no one knows the workshop password but me (we can set this to whatever needed), but all team members, besides maybe Dan Goldstein should have access through the normal login. . Login will appear a bit slow because we've decided to not go the popup route, so there's an extra 2 apparent redirects. Also, safari causes some issues if ""Cross-site tracking"" protection is on. A satisfactory solution will be made in time, until then, either another browser, or disable that protection.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5215#issuecomment-460040036:134,test,test,134,https://hail.is,https://github.com/hail-is/hail/pull/5215#issuecomment-460040036,4,"['Log', 'log', 'test']","['Login', 'logging', 'login', 'test']"
Testability,Daniel -- I haven't tested this beyond dev deploy. Can you take a look first to make sure everything makes sense before I do the last test of both the attempt_resources format version < 3 PR changes and these changes to populate the by_date tables?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11996#issuecomment-1178112385:20,test,tested,20,https://hail.is,https://github.com/hail-is/hail/pull/11996#issuecomment-1178112385,2,['test'],"['test', 'tested']"
Testability,"Dataproc tests passed, woohoo!. I'm gonna hold off on merging until some bug fixes land:; 1. https://github.com/hail-is/hail/pull/13505; 2. https://github.com/hail-is/hail/pull/13500; 3. https://github.com/hail-is/hail/pull/13523; 4. https://github.com/hail-is/hail/pull/13536",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13529#issuecomment-1701663726:9,test,tests,9,https://hail.is,https://github.com/hail-is/hail/pull/13529#issuecomment-1701663726,1,['test'],['tests']
Testability,Definitely need a benchmark. Will write one. How long is a benchmark allowed to take?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7962#issuecomment-578311507:18,benchmark,benchmark,18,https://hail.is,https://github.com/hail-is/hail/pull/7962#issuecomment-578311507,2,['benchmark'],['benchmark']
Testability,DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:497); at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); at org.testng.TestRunner.privateRun(TestRunner.java:767); at org.testng.TestRunner.run(TestRunner.java:617); at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); at org.testng.SuiteRunner.run(SuiteRunner.java:254); at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); at org.testng.TestNG.run(TestNG.java:1057); at org.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:72); at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:122); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:497); at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144); Caused by: java.lang.reflect.InvocationTargetException; at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43),MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/68#issuecomment-155304880:2137,test,testng,2137,https://hail.is,https://github.com/hail-is/hail/pull/68#issuecomment-155304880,1,['test'],['testng']
Testability,"Depending on how long the benchmark takes, you might want to make it work harder by setting k to something bigger, like 500 to 1000.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9888#issuecomment-761060616:26,benchmark,benchmark,26,https://hail.is,https://github.com/hail-is/hail/pull/9888#issuecomment-761060616,1,['benchmark'],['benchmark']
Testability,"Deploy commits don't need to cleanup which adds some latency to this PR. We should probably use xargs -P4 to delete instances 4-way parallel. This PR is ~46 minutes, including all the cleanup time, where as deploys are 46 minutes *without the cleanup time*. Notice two things: (1) the service backend is again the critical path (2) some local backend tests took quite a while to get scheduled. Seems fishy to me that it took ~16 minutes to find a core for the local backend tests to run on. Anyway, seems good to use more fine-grained parallelism. This should help keep the cluster large-ish and turning over fast so that users get a great experience during the work day. ---. A deploy commit:. <img width=""2032"" alt=""Screen Shot 2023-05-17 at 17 30 55"" src=""https://github.com/hail-is/hail/assets/106194/9c00365e-1079-451c-bd85-e10561e715c1"">. This PR:. <img width=""2032"" alt=""Screen Shot 2023-05-17 at 17 34 40"" src=""https://github.com/hail-is/hail/assets/106194/fa7751be-3986-4361-89ea-e322760176bf"">",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13076#issuecomment-1552119464:351,test,tests,351,https://hail.is,https://github.com/hail-is/hail/pull/13076#issuecomment-1552119464,2,['test'],['tests']
Testability,"Did I never PR the VEP splitting logic? I don't see it, so I must not have. I'll wait for this to go in and then do it then",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4076#issuecomment-411258192:33,log,logic,33,https://hail.is,https://github.com/hail-is/hail/pull/4076#issuecomment-411258192,1,['log'],['logic']
Testability,"Did my best, the behavior of this lowering functionality is complex, and it's hard to come up with a universal solution. The current issue I'm struggling with is the failure it testArrayAggContexts, which finds a ToArray(StreamRange()) being passed to EmitStream, instead of a StreamRange. TLDR: my ArrayAgg rule is stupid and fucked. Options: 1) Fix this rule, 2) (Seems not as good) In Emit have ArrayAgg needs to pass its child through Emit.emit a second time to match on ToArray, 3) make unstreamify more specific, such that ArrayAgg is allowed to take streams directly. ToArray definitely needs to wrap StreamRange in some cases (for instance MakeTuple(ToArray(StreamRange)), else get issues with the stream passed to SRVB. it would be helpful to have the intended (but currently applicable) design of stream/array semantics written down for all nodes (maybe it exists, I'll dig through design docs). Besides this 2 more failures.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8063#issuecomment-583795904:177,test,testArrayAggContexts,177,https://hail.is,https://github.com/hail-is/hail/pull/8063#issuecomment-583795904,1,['test'],['testArrayAggContexts']
Testability,Did you add the example above or similar as a regression test?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/3763#issuecomment-400038312:57,test,test,57,https://hail.is,https://github.com/hail-is/hail/issues/3763#issuecomment-400038312,1,['test'],['test']
Testability,"Did you confirm that the behaviors being tested in the deleted `checkedConvertFrom` tests are tested elsewhere for `copyFromType`? Otherwise, looks good.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9503#issuecomment-699076394:41,test,tested,41,https://hail.is,https://github.com/hail-is/hail/pull/9503#issuecomment-699076394,3,['test'],"['tested', 'tests']"
Testability,Did you do a benchmark on this one vs main? Might be interesting after the first splitting caused general improvements.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10566#issuecomment-856828775:13,benchmark,benchmark,13,https://hail.is,https://github.com/hail-is/hail/pull/10566#issuecomment-856828775,1,['benchmark'],['benchmark']
Testability,"Dismissed the review so that CI would focus on other PRs, but feel free to re-enable. We can chat tomorrow about how to test the query service with a custom JAR",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11345#issuecomment-1057659976:120,test,test,120,https://hail.is,https://github.com/hail-is/hail/pull/11345#issuecomment-1057659976,1,['test'],['test']
Testability,"Disregard the message above. The auto increment would not work. Now the critical check to make sure no duplicates are added is this line:. ```python3; job_id = parameters.get('job_id'); has_record = await db.jobs.has_record(batch_id, job_id); if has_record:; log.info(f""database has record for ({batch_id}, {job_id})""); abort(400, f'invalid request: batch {batch_id} already has a job_id={job_id}'); ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6238#issuecomment-498043583:259,log,log,259,https://hail.is,https://github.com/hail-is/hail/pull/6238#issuecomment-498043583,1,['log'],['log']
Testability,"Do I need to do something on my end in order to test copying from my computer rather than through CI? I keep getting a 400 regardless of whether I use my bucket `hail-jigold` or the test bucket `hail-test-dmk9z`. The only information I can get is ""Bad Request"" which I think is from this:. > The request cannot be completed based on your current Cloud Storage settings. For example, you cannot lock a retention policy if the requested bucket doesn't have a retention policy, and you cannot set ACLs if the requested bucket has Bucket Policy Only enabled. I don't think this is the real error as we know copying works fine with the Hail test bucket.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10218#issuecomment-813514852:48,test,test,48,https://hail.is,https://github.com/hail-is/hail/pull/10218#issuecomment-813514852,4,['test'],"['test', 'test-']"
Testability,Do I need to take action on this PR? I'm OK with this change if it passes the tests.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11397#issuecomment-1070987703:78,test,tests,78,https://hail.is,https://github.com/hail-is/hail/pull/11397#issuecomment-1070987703,1,['test'],['tests']
Testability,Do java tests run with the debug allocator? I'm just getting a segfault.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10583#issuecomment-859774905:8,test,tests,8,https://hail.is,https://github.com/hail-is/hail/pull/10583#issuecomment-859774905,1,['test'],['tests']
Testability,Do our tests pass with the flag on?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11302#issuecomment-1026259006:7,test,tests,7,https://hail.is,https://github.com/hail-is/hail/pull/11302#issuecomment-1026259006,1,['test'],['tests']
Testability,Do we have a benchmark or similar to show the improvement here?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9011#issuecomment-648947947:13,benchmark,benchmark,13,https://hail.is,https://github.com/hail-is/hail/pull/9011#issuecomment-648947947,1,['benchmark'],['benchmark']
Testability,Do we have a logging agent installed inside the containers themselves? I'd have thought that was on the worker VM. Seems like we could go to 22.04 in all the containers. It does mean our worker VM is out of sync with the containers.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11859#issuecomment-1138723739:13,log,logging,13,https://hail.is,https://github.com/hail-is/hail/pull/11859#issuecomment-1138723739,1,['log'],['logging']
Testability,"Do you have an alternative suggestion? We test export/import is the identity, which is a nice property.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4147#issuecomment-415026464:42,test,test,42,https://hail.is,https://github.com/hail-is/hail/issues/4147#issuecomment-415026464,1,['test'],['test']
Testability,"Do you have an error message other than that failed post? I'm not seeing why that would stop a deploy. In #13115, the PR healing code is after the `_heal_deploy` code, so I don't know why an exception when healing a PR would stop a deploy from occurring. This POST error is also occurring on GCP. Definitely something to fix but I'm not sure why it's related. > This caused problems because the next merge candidates CI was selecting was causing bad GitHub rate limit requests for exceeding the number of statuses. So it kept retrying that same merge candidate. Unfortunately I'm not sure if this is relevant in Azure. Azure CI thinks about merge candidate when it comes to testing PRs, but it doesn't merge any PRs and whether or not it does a deploy just depends if there's a new commit on `main`, it shouldn't have to do with PRs.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13050#issuecomment-1561903065:674,test,testing,674,https://hail.is,https://github.com/hail-is/hail/issues/13050#issuecomment-1561903065,1,['test'],['testing']
Testability,Do you have the log handy?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/446#issuecomment-234642726:16,log,log,16,https://hail.is,https://github.com/hail-is/hail/pull/446#issuecomment-234642726,1,['log'],['log']
Testability,"Do you mean when showing the log in the UI or the final upload to blob storage?. I think that's a great idea for the UI, where we show a truncated view in the page and the download button provides a way to stream the log file without loading it into memory on the front-end. In terms of the final upload, I'm a little wary about making a breaking change like that. It's probably true that if you're spewing tons of logs as a user you probably want to not do that. But if we move later to hosting logs in user-provided buckets instead of our own bucket there's no reason why they shouldn't be able to write large logs if they want to.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12852#issuecomment-1570846197:29,log,log,29,https://hail.is,https://github.com/hail-is/hail/issues/12852#issuecomment-1570846197,5,['log'],"['log', 'logs']"
Testability,"Do you the cumulative transmitted and untransmitted counts per trio? If so,; what would you do with said information?. On Nov 3, 2016 5:40 PM, ""Tarjinder Singh"" notifications@github.com wrote:. > The current TDT command tests for transmission disequilibrium for each; > variant across a number of trios. However, it would be helpful to get; > transmission information on each parent-proband trio as well, similar to; > how Mendelian-inconsistent variants are identified on Hail. Would this be; > possible?; > Thanks :); > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/hail-is/hail/issues/1055, or mute the thread; > https://github.com/notifications/unsubscribe-auth/AFZ8NdTOzvtMjAnFJ5N9Ann-ohY0EM8Iks5q6lTdgaJpZM4Ko8yy; > .",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1055#issuecomment-258307806:220,test,tests,220,https://hail.is,https://github.com/hail-is/hail/issues/1055#issuecomment-258307806,1,['test'],['tests']
Testability,Do you want me to create a user in the test namespace? The user creation script supports arbitrary namespaces.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5866#issuecomment-482268052:39,test,test,39,https://hail.is,https://github.com/hail-is/hail/pull/5866#issuecomment-482268052,1,['test'],['test']
Testability,"Docs and a bunch of other updates are done. Ready for review!. Once it's in, I'll refactor linreg, logreg, and lmmreg commands to put the phenotype and covariate extraction logic in one place under stats.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1064#issuecomment-260219957:99,log,logreg,99,https://hail.is,https://github.com/hail-is/hail/pull/1064#issuecomment-260219957,2,['log'],"['logic', 'logreg']"
Testability,"Does not work (passes) with PL present in all rows, which surprised me since type should be virtual type should be taken as stated, I believe. Haven't investigated further (stats day) to see what the IR generated is. Also does not work if I edit the VCF file and insert a bogus PL of .,.,. for each sample. An upcast seems to be happening in the mt1 child, because PL is clearly missing in mt2:. <img width=""705"" alt=""Screenshot 2020-01-31 12 40 13"" src=""https://user-images.githubusercontent.com/5543229/73561429-f9e1eb00-4426-11ea-9bb8-0cec77398d92.png"">. code in updated, pushed test. edit, to show that mt1 does have expected entries (though this shouldn't matter unless array_elements_required doesn't loosen requiredeness over the imputed type):. MT1:; <img width=""170"" alt=""Screenshot 2020-01-31 12 47 00"" src=""https://user-images.githubusercontent.com/5543229/73561943-07e43b80-4428-11ea-847e-65f2f3771af8.png"">; MT2:; <img width=""208"" alt=""Screenshot 2020-01-31 12 47 05"" src=""https://user-images.githubusercontent.com/5543229/73561944-087cd200-4428-11ea-8968-6daf53291d83.png"">",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8008#issuecomment-580834992:582,test,test,582,https://hail.is,https://github.com/hail-is/hail/pull/8008#issuecomment-580834992,1,['test'],['test']
Testability,Does the Hail local backend hold things in memory longer than it should? Or maybe the tests do?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12981#issuecomment-1562909597:86,test,tests,86,https://hail.is,https://github.com/hail-is/hail/pull/12981#issuecomment-1562909597,1,['test'],['tests']
Testability,"Does this fix https://github.com/hail-is/hail/blob/master/hail/python/test/hail/expr/test_expr.py#L1829 ?. ```; # FIXME: this next line triggers a bug: None should be sorted last!; # self.assertEqual(hl.sorted([0, 1, 4, hl.null(tint), 3, 2], lambda x: x, reverse=True).collect()[0], [4, 3, 2, 1, 0, None]); ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5084#issuecomment-453185348:70,test,test,70,https://hail.is,https://github.com/hail-is/hail/pull/5084#issuecomment-453185348,2,"['assert', 'test']","['assertEqual', 'test']"
Testability,Does this need a test?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1972#issuecomment-315444947:17,test,test,17,https://hail.is,https://github.com/hail-is/hail/pull/1972#issuecomment-315444947,1,['test'],['test']
Testability,Doing and administrator merge override because I'm afraid CI won't be alive long enough to successfully test this PR.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4572#issuecomment-430813198:104,test,test,104,https://hail.is,https://github.com/hail-is/hail/pull/4572#issuecomment-430813198,1,['test'],['test']
Testability,Don't forget to remind me that we need to look at the CI logs and make sure the test suite actually got ran.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11227#issuecomment-1013357056:57,log,logs,57,https://hail.is,https://github.com/hail-is/hail/pull/11227#issuecomment-1013357056,2,"['log', 'test']","['logs', 'test']"
Testability,Don't know why the diff looks so weird -- I just dropped benchmark down one level into `benchmark/run`.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6588#issuecomment-509640521:57,benchmark,benchmark,57,https://hail.is,https://github.com/hail-is/hail/pull/6588#issuecomment-509640521,2,['benchmark'],['benchmark']
Testability,"Don't merge it yet, I want to sort out the testing issues even though I think that's a local problem.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/294#issuecomment-210115731:43,test,testing,43,https://hail.is,https://github.com/hail-is/hail/pull/294#issuecomment-210115731,1,['test'],['testing']
Testability,"Don't think all the tests pass yet, but its single digit python tests failing now.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9825#issuecomment-769978628:20,test,tests,20,https://hail.is,https://github.com/hail-is/hail/pull/9825#issuecomment-769978628,2,['test'],['tests']
Testability,Don't worry about approving this yet. I still need to test it.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4836#issuecomment-444967849:54,test,test,54,https://hail.is,https://github.com/hail-is/hail/pull/4836#issuecomment-444967849,1,['test'],['test']
Testability,Done: https://github.com/broadinstitute/hail/commit/5a3981eec849e5b2046d62fb867cfc18eb22952c. Can run tests with gradle -Dhail.master=<master> or with spark-submit.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/130#issuecomment-172673947:102,test,tests,102,https://hail.is,https://github.com/hail-is/hail/issues/130#issuecomment-172673947,1,['test'],['tests']
Testability,Done: see ExprSuite.testTypePretty.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/230#issuecomment-208688839:20,test,testTypePretty,20,https://hail.is,https://github.com/hail-is/hail/issues/230#issuecomment-208688839,1,['test'],['testTypePretty']
Testability,Double check that the test is what you want. I made the bounds pretty wide to make sure we never had an unlucky sporadic test failure.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10748#issuecomment-893816262:22,test,test,22,https://hail.is,https://github.com/hail-is/hail/pull/10748#issuecomment-893816262,2,['test'],['test']
Testability,"Drat, it appears that pyspark doesn't work with Python 3.8. https://stackoverflow.com/a/58849063/342839. A simpler reproduction to demonstrate that this is a pyspark issues:. ```; snafu$ python -m pyspark.cloudpickle; Traceback (most recent call last):; File ""/usr/lib/python3.8/runpy.py"", line 185, in _run_module_as_main; mod_name, mod_spec, code = _get_module_details(mod_name, _Error); File ""/usr/lib/python3.8/runpy.py"", line 111, in _get_module_details; __import__(pkg_name); File ""/home/reece/sandbox/hail/venv/3.8/lib/python3.8/site-packages/pyspark/__init__.py"", line 51, in <module>; from pyspark.context import SparkContext; File ""/home/reece/sandbox/hail/venv/3.8/lib/python3.8/site-packages/pyspark/context.py"", line 31, in <module>; from pyspark import accumulators; File ""/home/reece/sandbox/hail/venv/3.8/lib/python3.8/site-packages/pyspark/accumulators.py"", line 97, in <module>; from pyspark.serializers import read_int, PickleSerializer; File ""/home/reece/sandbox/hail/venv/3.8/lib/python3.8/site-packages/pyspark/serializers.py"", line 71, in <module>; from pyspark import cloudpickle; File ""/home/reece/sandbox/hail/venv/3.8/lib/python3.8/site-packages/pyspark/cloudpickle.py"", line 145, in <module>; _cell_set_template_code = _make_cell_set_template_code(); File ""/home/reece/sandbox/hail/venv/3.8/lib/python3.8/site-packages/pyspark/cloudpickle.py"", line 126, in _make_cell_set_template_code; return types.CodeType(; TypeError: an integer is required (got type bytes); ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/10197#issuecomment-800647452:500,sandbox,sandbox,500,https://hail.is,https://github.com/hail-is/hail/issues/10197#issuecomment-800647452,6,['sandbox'],['sandbox']
Testability,"Due to a noisy co-occurring batch from a user, we discovered several of our tests that assumed they could burst into mostly unused cpu. I backed off on their timeouts and also restricted them to their limited number of cores.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13277#issuecomment-1644771781:76,test,tests,76,https://hail.is,https://github.com/hail-is/hail/pull/13277#issuecomment-1644771781,1,['test'],['tests']
Testability,"E=hadoop; QTLIB=/usr/lib64/qt-3.3/lib; SSH_CONNECTION=103.37.196.84 60539 192.168.124.160 22; LESSOPEN=||/usr/bin/lesspipe.sh %s; XDG_RUNTIME_DIR=/run/user/995; _=/usr/bin/env; ```; </p>; </details> . ```sh ; /usr/bin/which: no scala in (/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/opt/aws/puppet/bin/); ```. ## Debug mode. ```sh; $ set -x; ++ printf '\033]0;%s@%s:%s\007' hadoop ip-192-168-124-160 '~'; $ spark-shell; + spark-shell; SLF4J: No SLF4J providers were found.; SLF4J: Defaulting to no-operation (NOP) logger implementation; SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.; SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.; SLF4J: Ignoring binding found at [jar:file:/usr/lib/spark/jars/log4j-slf4j-impl-2.17.2.jar!/org/slf4j/impl/StaticLoggerBinder.class]; SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.; Setting default log level to ""WARN"".; To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).; Exception in thread ""main"" java.lang.NoSuchMethodError: 'scala.reflect.internal.settings.MutableSettings scala.reflect.internal.settings.MutableSettings$.SettingsOps(scala.reflect.internal.settings.MutableSettings)'; at scala.tools.nsc.interpreter.ILoop.$anonfun$chooseReader$1(ILoop.scala:914); at scala.tools.nsc.interpreter.ILoop.mkReader$1(ILoop.scala:920); at scala.tools.nsc.interpreter.ILoop.$anonfun$chooseReader$4(ILoop.scala:926); at scala.tools.nsc.interpreter.ILoop.$anonfun$chooseReader$3(ILoop.scala:926); at scala.tools.nsc.interpreter.ILoop.chooseReader(ILoop.scala:926); at org.apache.spark.repl.SparkILoop.$anonfun$process$1(SparkILoop.scala:138); at scala.Option.fold(Option.scala:251); at org.apache.spark.repl.SparkILoop.newReader$1(SparkILoop.scala:138); at org.apache.spark.repl.SparkILoop.preLoop$1(SparkILoop.scala:142); at org.apache.spark.repl.SparkILoop.$anonfun$process$10(SparkILoop.scala:20",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13837#issuecomment-1772153045:9470,log,logging,9470,https://hail.is,https://github.com/hail-is/hail/issues/13837#issuecomment-1772153045,1,['log'],['logging']
Testability,"E_FILE__20} '; '--sparseSigmaFile=${__RESOURCE_FILE__9} '; '--IsSingleVarinGroupTest=TRUE '; '--IsOutputAFinCaseCtrl=TRUE 2>&1 | tee '; '${__RESOURCE_FILE__749}'],; 'env': [{'name': 'POD_IP',; 'value': None,; 'value_from': {'config_map_key_ref': None,; 'field_ref': {'api_version': 'v1',; 'field_path': 'status.podIP'},; 'resource_field_ref': None,; 'secret_key_ref': None}},; {'name': 'POD_NAME',; 'value': None,; 'value_from': {'config_map_key_ref': None,; 'field_ref': {'api_version': 'v1',; 'field_path': 'metadata.name'},; 'resource_field_ref': None,; 'secret_key_ref': None}}],; 'env_from': None,; 'image': 'konradjk/saige:0.35.8.2.2',; 'image_pull_policy': 'IfNotPresent',; 'lifecycle': None,; 'liveness_probe': None,; 'name': 'main',; 'ports': None,; 'readiness_probe': None,; 'resources': {'limits': None,; 'requests': {'cpu': '1',; 'memory': '500M'}},; 'security_context': None,; 'stdin': None,; 'stdin_once': None,; 'termination_message_path': '/dev/termination-log',; 'termination_message_policy': 'File',; 'tty': None,; 'volume_devices': None,; 'volume_mounts': [{'mount_path': '/gsa-key',; 'mount_propagation': None,; 'name': 'gsa-key',; 'read_only': None,; 'sub_path': None},; {'mount_path': '/io',; 'mount_propagation': None,; 'name': 'batch-2554-job-4-8vvgl',; 'read_only': None,; 'sub_path': None},; {'mount_path': '/var/run/secrets/kubernetes.io/serviceaccount',; 'mount_propagation': None,; 'name': 'default-token-8h99c',; 'read_only': True,; 'sub_path': None}],; 'working_dir': None}],; 'dns_config': None,; 'dns_policy': 'ClusterFirst',; 'enable_service_links': True,; 'host_aliases': None,; 'host_ipc': None,; 'host_network': None,; 'host_pid': None,; 'hostname': None,; 'image_pull_secrets': None,; 'init_containers': None,; 'node_name': 'gke-vdc-preemptible-pool-9c7148b2-4gq2',; 'node_selector': None,; 'priority': 500000,; 'priority_class_name': 'user',; 'readiness_gates': None,; 'restart_policy': 'Never',; 'runtime_class_name': None,; 'scheduler_name': 'default-schedule",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/6466#issuecomment-505429649:3931,log,log,3931,https://hail.is,https://github.com/hail-is/hail/issues/6466#issuecomment-505429649,1,['log'],['log']
Testability,Eh. This has gotten pretty easy with `http://ci.hail.is/ui/job-log/NUMBER`. I'm not sure the rest of this is all that important.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4620#issuecomment-451593136:63,log,log,63,https://hail.is,https://github.com/hail-is/hail/issues/4620#issuecomment-451593136,1,['log'],['log']
Testability,"Er, wait, sorry, this thread was about the JAR. That indeed should have been deployed under the current steps (because we run QoB tests). So this is a separate issue, but leaving my comment up for posterity",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13050#issuecomment-1572661584:130,test,tests,130,https://hail.is,https://github.com/hail-is/hail/issues/13050#issuecomment-1572661584,1,['test'],['tests']
Testability,"Erm, actually our tests never upload such a large file.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7024#issuecomment-529590702:18,test,tests,18,https://hail.is,https://github.com/hail-is/hail/pull/7024#issuecomment-529590702,1,['test'],['tests']
Testability,"Error message starting up Batch:. ```; raise ApiException(http_resp=r); kubernetes.client.rest.ApiException: (403); Reason: Forbidden; HTTP response headers: HTTPHeaderDict({'Audit-Id': 'fc886821-4fc7-4697-b8d2-a4bc656b45f6', 'Content-Type': 'application/json', 'X-Content-Type-Options': 'nosniff', 'Date': 'Thu, 25 Apr 2019 22:18:26 GMT', 'Content-Length': '252'}); HTTP response body: b'{""kind"":""Status"",""apiVersion"":""v1"",""metadata"":{},""status"":""Failure"",""message"":""pods is forbidden: User \\""system:serviceaccount:batch-pods:default\\"" cannot watch pods in the namespace \\""test\\"""",""reason"":""Forbidden"",""details"":{""kind"":""pods""},""code"":403}\n'; ```. Going to retest, but it seems like this was a one time thing...",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5956#issuecomment-487075273:577,test,test,577,https://hail.is,https://github.com/hail-is/hail/pull/5956#issuecomment-487075273,1,['test'],['test']
Testability,"Every run_image_step that was changed tests hail using `hl.init(master='local[2]')`. This means they all use at least two cores (for some reason, some appear to use >2 cores, I don't know why, I'll investigate as I gather more data about this). This change makes the pod's CPU requests reflect their real usage. This change was motivated by watching the Grafana metric for ""CPU Oversubscription"" and seeing these pods constantly using more than their request.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7022#issuecomment-529556683:38,test,tests,38,https://hail.is,https://github.com/hail-is/hail/pull/7022#issuecomment-529556683,1,['test'],['tests']
Testability,"Exactly, this always works in local mode. We definitely need more ways to test behavior in the non-local environment, but I have no concrete ideas right now.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5033#issuecomment-449473700:74,test,test,74,https://hail.is,https://github.com/hail-is/hail/pull/5033#issuecomment-449473700,1,['test'],['test']
Testability,"Example VCF parse error now looks like:. ```; Error summary: HailException: sample.vcf:column 1862: invalid character 'x' in integer literal; ... :80,0:80:13:0,13,2219 0/1:65,19:94:9x9:233,0,1732 0/0:34,3:45:74:0,74,12 ...; ^; offending line: 20	10273694	.	CT	C	29059.60	VQSRTrancheINDEL97.00to99.00	HWP...; see the Hail log for the full offending line; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2421#issuecomment-343983297:321,log,log,321,https://hail.is,https://github.com/hail-is/hail/pull/2421#issuecomment-343983297,1,['log'],['log']
Testability,"Example batch job created (1 burn in, 1 iteration, 1 job per benchmark). Failures are legit test failures.; https://batch.hail.is/batches/8181721",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14565#issuecomment-2142867787:61,benchmark,benchmark,61,https://hail.is,https://github.com/hail-is/hail/pull/14565#issuecomment-2142867787,2,"['benchmark', 'test']","['benchmark', 'test']"
Testability,"Example logged timings:; ```; timing is.hail.backend.BackendHttpHandler#handle x$3 total 1.426s self 157.884ms children 1.268s %children 88.93%; timing is.hail.backend.BackendHttpHandler#handle x$3/is.hail.expr.ir.TypeCheck.apply total 23.246ms self 23.246ms children 0.000ms %children 0.00%; timing is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute total 1.245s self 3.019ms children 1.242s %children 99.76%; timing is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.TypeCheck.apply total 0.327ms self 0.327ms children 0.000ms %children 0.00%; timing is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.analyses.SemanticHash.apply total 29.792ms self 6.254ms children 23.538ms %children 79.01%; timing is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.analyses.SemanticHash.apply/is.hail.expr.ir.NormalizeNames.apply total 23.538ms self 23.538ms children 0.000ms %children 0.00%; timing is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.backend.spark.SparkBackend#_jvmLowerAndExecute total 0.053ms self 0.053ms children 0.000ms %children 0.00%; timing is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply total 1.211s self 27.866ms children 1.183s %children 97.70%; timing is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/Optimize: relationalLowerer, initial IR total 37.247ms self 0.358ms children 36.889ms %children 99.04%; timing is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/Optimize: relationalLowerer, initial IR/Verify total 0.268ms self 0.268ms children 0.000ms %children 0.00%; timing is.hail.backe",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14679#issuecomment-2341990966:8,log,logged,8,https://hail.is,https://github.com/hail-is/hail/pull/14679#issuecomment-2341990966,1,['log'],['logged']
Testability,Example output in logs:; ```; INFO: timing is.hail.backend.BackendHttpHandler#handle x$3 total 1m42.0s self 20.824ms children 1m42.0s %children 99.98%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.expr.ir.IRParser.parse_value_ir total 179.902ms self 157.170ms children 22.733ms %children 12.64%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.expr.ir.IRParser.parse_value_ir/is.hail.expr.ir.TypeCheck.apply total 22.733ms self 22.733ms children 0.000ms %children 0.00%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute total 1m41.8s self 3.404ms children 1m41.8s %children 100.00%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.TypeCheck.apply total 0.211ms self 0.211ms children 0.000ms %children 0.00%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.analyses.SemanticHash.apply total 31.924ms self 6.413ms children 25.511ms %children 79.91%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.analyses.SemanticHash.apply/is.hail.expr.ir.NormalizeNames.apply total 25.511ms self 25.511ms children 0.000ms %children 0.00%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.backend.spark.SparkBackend#_jvmLowerAndExecute total 0.073ms self 0.073ms children 0.000ms %children 0.00%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply total 1m41.8s self 1m40.6s children 1.127s %children 1.11%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply total 1.106s self 33.060ms children 1.072s %children 97.01%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAnd,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14731#issuecomment-2417774141:18,log,logs,18,https://hail.is,https://github.com/hail-is/hail/pull/14731#issuecomment-2417774141,1,['log'],['logs']
Testability,"Exciting, first code-related pull request review! It seems correct. I was wondering how you're testing table.py, backend.py, java.py, and would it be worthwhile to write unit or integration tests for these sections? I'd be happy to work on that if desired.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5019#issuecomment-449156617:95,test,testing,95,https://hail.is,https://github.com/hail-is/hail/pull/5019#issuecomment-449156617,2,['test'],"['testing', 'tests']"
Testability,"Extremely nice @lfrancioli, very elegantly done. Rebase and address the minor comments, and it should be good to go. A simple test would be nice, too, but I'll put that on our todo list if you don't get to it.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1147#issuecomment-265653872:126,test,test,126,https://hail.is,https://github.com/hail-is/hail/pull/1147#issuecomment-265653872,1,['test'],['test']
Testability,F build/ibs.d -MT build/ibs.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux FS.cpp -MG -M -MF build/FS.d -MT build/FS.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux Encoder.cpp -MG -M -MF build/Encoder.d -MT build/Encoder.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux Decoder.cpp -MG -M -MF build/Decoder.d -MT build/Decoder.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux cache-tests.cpp -MG -M -MF build/cache-tests.d -MT build/cache-tests.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux ApproximateQuantiles_test.cpp -MG -M -MF build/ApproximateQuantiles_test.d -MT build/ApproximateQuantiles_te; st.o; make[1]: Leaving directory `/mnt/tmp/hail/hail/src/main/c'; make[1]: Entering directory `/mnt/tmp/hail/hail/src/main/c'; g++ -o build/NativeBoot.o -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux -MD -MF build/NativeBoot.d -MT build/NativeBoot.o -c NativeBoot.cpp; g++ -fvisibility=default -rdynamic -shared -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux build/Na,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13837#issuecomment-1770502221:9527,test,tests,9527,https://hail.is,https://github.com/hail-is/hail/issues/13837#issuecomment-1770502221,1,['test'],['tests']
Testability,"FO: RegionPool: REPORT_THRESHOLD: 128.2M allocated (192.0K blocks / 128.0M chunks), regions.size = 3, 0 current java objects, thread 8: pool-1-thread-1\n2022-11-15 20:31:41.506 root: INFO: RegionPool: REPORT_THRESHOLD: 256.2M allocated (192.0K blocks / 256.0M chunks), regions.size = 3, 0 current java objects, thread 8: pool-1-thread-1\n2022-11-15 20:31:41.910 root: INFO: RegionPool: REPORT_THRESHOLD: 512.0M allocated (111.9M blocks / 400.1M chunks), regions.size = 5, 0 current java objects, thread 8: pool-1-thread-1\n2022-11-15 20:31:42.730 root: INFO: RegionPool: REPORT_THRESHOLD: 1.2G allocated (439.1M blocks / 781.5M chunks), regions.size = 5, 0 current java objects, thread 8: pool-1-thread-1""}, 'service_backend_debug_info': {'batch_attributes': {'name': 'test_tiny_driver_has_tiny_memory'}, 'billing_project': 'test', 'driver_cores': None, 'driver_memory': None, ...}} or 'batch.worker.jvm_entryway_protocol.EndOfStream' in {'batch_status': {'attributes': {'name': 'test_tiny_driver_has_tiny_memory'}, 'billing_project': 'test', 'closed': True, 'complete': True, ...}, 'job_status': {'attributes': {'name': 'driver'}, 'batch_id': 6627669, 'billing_project': 'test', 'cost': 0.0015413897092729028, ...}, 'log': {'main': ""2022-11-15 20:30:18.004 Tokens: INFO: tokens found for namespaces {default}\n2022-11-15 20:30:18.004 tls: INFO: ssl config file found at /batch/2bbb233e4e3c4a96bbffb515019daac9/secrets/ssl-config/ssl-config.json\n2022-11-15 20:30:18.006 GoogleStorageFS$: INFO: Initializing google storage client from service account key\n2022-11-15 20:30:18.114 root: INFO: RegionPool: initialized for thread 8: pool-1-thread-1\n2022-11-15 20:30:18.114 ServiceBackend$: INFO: executing: cEPZ5IV9gUtSnCiAiHXOPs None\n2022-11-15 20:30:18.127 root: INFO: optimize optimize: darrayLowerer, initial IR: before: IR size 17: \n(Let __rng_state\n (RNGStateLiteral (0 0 0 0))\n (MakeTuple (0)\n (TableAggregate\n (TableMapRows\n (TableOrderBy (Aidx) (TableRange 100000000 50))\n (InsertField",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:64671,test,test,64671,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,1,['test'],['test']
Testability,"FWIW it does go into the container logs which is how I've always pulled out the true error, but I'm not sure how to get that on every system. For future reference, there's an even more pernicious issue, which is that when running VEP with `-o STDOUT` it actually suppresses certain error messages too - and there's not much you can do about that unless you actually go in and run VEP manually without that, in the environment that hail uses.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/8146#issuecomment-591009197:35,log,logs,35,https://hail.is,https://github.com/hail-is/hail/issues/8146#issuecomment-591009197,1,['log'],['logs']
Testability,"FWIW, I often grab the PR name from the `default_ns` job and search like this in the logs viewer:; ```; resource.labels.namespace_name=""PR_NAME""; labels.""k8s-pod/app"":""batch""; ```. EDIT: Maybe the default_ns should just include a URL that links directly to logs viewer with that search?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11352#issuecomment-1049107749:85,log,logs,85,https://hail.is,https://github.com/hail-is/hail/pull/11352#issuecomment-1049107749,2,['log'],['logs']
Testability,"FWIW, when I added the MySQL pods I made sure to install the client config in them so you don't need the admin-pod for test namespaces, just `kssh db <NAMESPACE>` and `mysql` should work",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13150#issuecomment-1581414024:119,test,test,119,https://hail.is,https://github.com/hail-is/hail/pull/13150#issuecomment-1581414024,1,['test'],['test']
Testability,"FWIW:; ```sh; echo 'this is \; a test'; this is \; a test; # vs; echo ""this is \; a test""; this is a test; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6956#issuecomment-525798414:33,test,test,33,https://hail.is,https://github.com/hail-is/hail/pull/6956#issuecomment-525798414,4,['test'],['test']
Testability,FYI @danking . I tested this is all working by making max_pods = 1 and queue_size = 5 and having a test that created 20 jobs.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6694#issuecomment-513396135:17,test,tested,17,https://hail.is,https://github.com/hail-is/hail/pull/6694#issuecomment-513396135,2,['test'],"['test', 'tested']"
Testability,FYI The last build failed due to a transient error (aiohttp.ServerDisconnectedError). I added it to the retry logic.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7605#issuecomment-557905128:110,log,logic,110,https://hail.is,https://github.com/hail-is/hail/pull/7605#issuecomment-557905128,1,['log'],['logic']
Testability,"FYI, I performance tested this + https://github.com/hail-is/hail/pull/8326 and gained a few percent:. ```; Harmonic mean: 91.0%; Geometric mean: 95.3%; Arithmetic mean: 96.8%; Median: 97.8%; ```. So this should go in and we leave the memoization optimization as a TODO.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8245#issuecomment-601652867:19,test,tested,19,https://hail.is,https://github.com/hail-is/hail/pull/8245#issuecomment-601652867,1,['test'],['tested']
Testability,"FYI, I tested this by hand on a small example against ES 6.2.4.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3455#issuecomment-385023610:7,test,tested,7,https://hail.is,https://github.com/hail-is/hail/pull/3455#issuecomment-385023610,1,['test'],['tested']
Testability,"FYI, I'm getting the scale test working and pushing some additional changes. I will follow up when it is stable.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7112#issuecomment-534569631:27,test,test,27,https://hail.is,https://github.com/hail-is/hail/pull/7112#issuecomment-534569631,1,['test'],['test']
Testability,"FYI, git clone can clone a single branch: https://stackoverflow.com/questions/1778088/how-do-i-clone-a-single-branch-in-git. > k run. Might be worth benchmarking in batch2, since that is where it will run. (k run! Shame on you!). > But the download drops from 4.7 to ~1.5. I don't understand this. Drops compared to what? Where'd the 4.7 come from?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7626#issuecomment-560446660:149,benchmark,benchmarking,149,https://hail.is,https://github.com/hail-is/hail/pull/7626#issuecomment-560446660,1,['benchmark'],['benchmarking']
Testability,Failed log here: [constraint_pipeline.log](https://github.com/hail-is/hail/files/12486909/constraint_pipeline.log),MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13486#issuecomment-1701112173:7,log,log,7,https://hail.is,https://github.com/hail-is/hail/issues/13486#issuecomment-1701112173,3,['log'],['log']
Testability,Failing Java tests,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7578#issuecomment-557229025:13,test,tests,13,https://hail.is,https://github.com/hail-is/hail/pull/7578#issuecomment-557229025,1,['test'],['tests']
Testability,"Failing Java tests (also, looking at the `test_hail_java` log, looks like we print a lot during this stream stuff?)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8520#issuecomment-612907568:13,test,tests,13,https://hail.is,https://github.com/hail-is/hail/pull/8520#issuecomment-612907568,2,"['log', 'test']","['log', 'tests']"
Testability,Failing a local backend test,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9549#issuecomment-702888995:24,test,test,24,https://hail.is,https://github.com/hail-is/hail/pull/9549#issuecomment-702888995,1,['test'],['test']
Testability,Failing all the hail tests,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8345#issuecomment-603569487:21,test,tests,21,https://hail.is,https://github.com/hail-is/hail/pull/8345#issuecomment-603569487,1,['test'],['tests']
Testability,Failing due to some mypy silliness but only in the pip installed images. Need to somehow modify this to make sure we have all appropriate stubs available and/or ignore missing stubs?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11502#issuecomment-1059677772:138,stub,stubs,138,https://hail.is,https://github.com/hail-is/hail/pull/11502#issuecomment-1059677772,2,['stub'],['stubs']
Testability,Failing flake tests,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7213#issuecomment-539510518:14,test,tests,14,https://hail.is,https://github.com/hail-is/hail/pull/7213#issuecomment-539510518,1,['test'],['tests']
Testability,Failing hail tests,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8565#issuecomment-615221048:13,test,tests,13,https://hail.is,https://github.com/hail-is/hail/pull/8565#issuecomment-615221048,1,['test'],['tests']
Testability,Failing java test,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8692#issuecomment-623511128:13,test,test,13,https://hail.is,https://github.com/hail-is/hail/pull/8692#issuecomment-623511128,1,['test'],['test']
Testability,Failing scala tests in PruneSuite,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7792#issuecomment-570291808:14,test,tests,14,https://hail.is,https://github.com/hail-is/hail/pull/7792#issuecomment-570291808,1,['test'],['tests']
Testability,"Failing some python tests, I had only run Scala tests, which all passed, will look Tuesday",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7958#issuecomment-578252764:20,test,tests,20,https://hail.is,https://github.com/hail-is/hail/pull/7958#issuecomment-578252764,2,['test'],['tests']
Testability,"Failing test, otherwise looks great! Exciting stuff.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1116#issuecomment-262237543:8,test,test,8,https://hail.is,https://github.com/hail-is/hail/pull/1116#issuecomment-262237543,1,['test'],['test']
Testability,Failing tests,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8230#issuecomment-597107650:8,test,tests,8,https://hail.is,https://github.com/hail-is/hail/pull/8230#issuecomment-597107650,2,['test'],['tests']
Testability,"Failing tests are resolved, should be good to review again.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11381#issuecomment-1067233262:8,test,tests,8,https://hail.is,https://github.com/hail-is/hail/pull/11381#issuecomment-1067233262,1,['test'],['tests']
Testability,Failing tests for real,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8156#issuecomment-594139749:8,test,tests,8,https://hail.is,https://github.com/hail-is/hail/pull/8156#issuecomment-594139749,1,['test'],['tests']
Testability,"Failing tests likely due to recent commit, should be simple fix and re-push.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1648#issuecomment-294171904:8,test,tests,8,https://hail.is,https://github.com/hail-is/hail/pull/1648#issuecomment-294171904,1,['test'],['tests']
Testability,Failing tests.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10202#issuecomment-810242199:8,test,tests,8,https://hail.is,https://github.com/hail-is/hail/pull/10202#issuecomment-810242199,1,['test'],['tests']
Testability,Failing the NDArray tests,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8633#issuecomment-619997334:20,test,tests,20,https://hail.is,https://github.com/hail-is/hail/pull/8633#issuecomment-619997334,1,['test'],['tests']
Testability,Failures:; - a Java test I created that should fail to make sure the memory checks are happening; - Python test_ld_score; - A docs test,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8878#issuecomment-635336858:20,test,test,20,https://hail.is,https://github.com/hail-is/hail/pull/8878#issuecomment-635336858,2,['test'],['test']
Testability,Fair point. I think asserting this behavior works on a local FS is good. I think a follow up to this PR that parameterized the other tests by filesystem is also great. That follow up PR can just leave the local-only test unchanged.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11227#issuecomment-1015881708:20,assert,asserting,20,https://hail.is,https://github.com/hail-is/hail/pull/11227#issuecomment-1015881708,3,"['assert', 'test']","['asserting', 'test', 'tests']"
Testability,"Faster versions for the record:; ``` ; // returns all blocks intersecting the rectangle [firstRow, lastRow] x [firstCol, lastCol]; def rectangularBlocks(firstRow: Long, lastRow: Long, firstCol: Long, lastCol: Long): Array[Int] = {; require(firstRow >= 0 && firstRow <= lastRow && lastRow <= nRows); require(firstCol >= 0 && firstCol <= lastCol && lastCol <= nCols); ; val firstBlockRow = blockIndex(firstRow); val lastBlockRow = blockIndex(lastRow); val firstBlockCol = blockIndex(firstCol); val lastBlockCol = blockIndex(lastCol). val blocks = new Array[Int]((lastBlockRow - firstBlockRow + 1) * (lastBlockCol - firstBlockCol + 1)); ; var k = 0; var j = firstBlockCol; while (j <= lastBlockCol) {; val offset = j * nBlockRows; var i = firstBlockRow; while (i <= lastBlockRow) {; blocks(k) = offset + i; k += 1; i += 1; }; j += 1; }; ; blocks; }. // returns all blocks intersecting the union of rectangles; def rectangularBlocks(rectangles: Array[Array[Long]]): Array[Int] = {; val keep = new Array[Boolean](numPartitions); ; rectangles.foreach { r =>; assert(r.length == 4); val rBlocks = rectangularBlocks(r(0), r(1), r(2), r(3)); var i = 0; while (i < rBlocks.length) {; keep(rBlocks(i)) = true; i += 1; }; }; ; val blocks = new ArrayBuilder[Int](); var block = 0; while (block < numPartitions) {; if (keep(block)); blocks += block; block += 1; }; ; blocks.result(); }; }; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3094#issuecomment-372728393:1053,assert,assert,1053,https://hail.is,https://github.com/hail-is/hail/pull/3094#issuecomment-372728393,1,['assert'],['assert']
Testability,"Few things:. If we get rid of annotatevariants json, how do we deal with _0 problem? (Related, but not directly, to this PR.). To use this to export/reimport annotations, it seems not quite trivial to get the annotations back in the right place. What's the intended command line? Can we get that as a test case?. Otherwise, back to you.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/488#issuecomment-235089575:301,test,test,301,https://hail.is,https://github.com/hail-is/hail/pull/488#issuecomment-235089575,1,['test'],['test']
Testability,"FileSystem(conf)](https://ci2.hail.is/jobs/17044/log). This calls hadoop.fs.FileSystem.get , which in turn calls Configuration.get (instance method). ```java; // In Path.java; public FileSystem getFileSystem(Configuration conf) throws IOException {; return FileSystem.get(this.toUri(), conf);; }. // In FileSystem.java; public static FileSystem get(Configuration conf) throws IOException {; return get(getDefaultUri(conf), conf);; }. public static FileSystem get(final URI uri, final Configuration conf,; final String user) throws IOException, InterruptedException {; String ticketCachePath =; conf.get(CommonConfigurationKeys.KERBEROS_TICKET_CACHE_PATH);; UserGroupInformation ugi =; UserGroupInformation.getBestUGI(ticketCachePath, user);; return ugi.doAs(new PrivilegedExceptionAction<FileSystem>() {; @Override; public FileSystem run() throws IOException {; return get(uri, conf);; }; });; }; ```. For some reasons the line numbers reported in CI log don't quite match up (using either IntelliJ's goto def - which could say be the result of referencing a different copy on the system - or the [2.7.1 branch on GitHub](https://github.com/apache/hadoop/blob/branch-2.7.1/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java)), so I followed the parameterization. Still need to figure out why lines reported don't match, but I've seen line number differences before between that reported for the compiled binary, and the uncompiled source. Lines of evidence:; 1) The line specified in the ci log suggests that Hadoop's fileSystem.open() command fails. It appears from examining the line and source, that the Hadoop Configuration object could be null, which suggests a serialization error in HadoopFS. However, there are many others tests that by touch HadoopFS serialization, and none of them have problems. If it's not a serialization error (say the URI object that hadoop looks for is null, or CACHE is null), it would not seem PR specific. 2) On local, with or wi",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6083#issuecomment-494037803:1292,log,log,1292,https://hail.is,https://github.com/hail-is/hail/pull/6083#issuecomment-494037803,1,['log'],['log']
Testability,"FileSystem>() {; @Override; public FileSystem run() throws IOException {; return get(uri, conf);; }; });; }; ```. For some reasons the line numbers reported in CI log don't quite match up (using either IntelliJ's goto def - which could say be the result of referencing a different copy on the system - or the [2.7.1 branch on GitHub](https://github.com/apache/hadoop/blob/branch-2.7.1/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java)), so I followed the parameterization. Still need to figure out why lines reported don't match, but I've seen line number differences before between that reported for the compiled binary, and the uncompiled source. Lines of evidence:; 1) The line specified in the ci log suggests that Hadoop's fileSystem.open() command fails. It appears from examining the line and source, that the Hadoop Configuration object could be null, which suggests a serialization error in HadoopFS. However, there are many others tests that by touch HadoopFS serialization, and none of them have problems. If it's not a serialization error (say the URI object that hadoop looks for is null, or CACHE is null), it would not seem PR specific. 2) On local, with or without the google storage connector, I cannot replicate the error in cluster-read-vcfs.py. Attempts to replicate:; 1) Local hail install, not using google storage connector, and reading 2 local vcfs:. ```python; gvcfs = ['./HG00096.g.vcf.gz',; './HG00268.g.vcf.gz']; hl.init(default_reference='GRCh38'); parts = [; {'start': {'locus': {'contig': 'chr20', 'position': 17821257}},; 'end': {'locus': {'contig': 'chr20', 'position': 18708366}},; 'includeStart': True,; 'includeEnd': True},; {'start': {'locus': {'contig': 'chr20', 'position': 18708367}},; 'end': {'locus': {'contig': 'chr20', 'position': 19776611}},; 'includeStart': True,; 'includeEnd': True},; {'start': {'locus': {'contig': 'chr20', 'position': 19776612}},; 'end': {'locus': {'contig': 'chr20', 'position': 21144633}},; 'in",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6083#issuecomment-494037803:2108,test,tests,2108,https://hail.is,https://github.com/hail-is/hail/pull/6083#issuecomment-494037803,1,['test'],['tests']
Testability,"Final conclusion here: Since batch 1 is discontinued in favor of batch 2, and we don't know how prometheus will react to batch 2's logging load (should be better since there's not constant kubernetes junk), let's not start a new node pool for now, and request 20 Gbs of memory as done here.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6774#issuecomment-521758111:131,log,logging,131,https://hail.is,https://github.com/hail-is/hail/pull/6774#issuecomment-521758111,1,['log'],['logging']
Testability,"Finally got a lead on Christina's bug:; ```; # hailctl dataproc submit dk foo.py; Submitting to cluster 'dk'...; gcloud command:; gcloud dataproc jobs submit pyspark foo.py \; --cluster=dk \; --files= \; --py-files=/var/folders/cq/p_l4jm3x72j7wkxqxswccs180000gq/T/pyscripts_yg_wzlu0.zip \; --properties=; Job [66c1d088108948b2b76bb607f61d7b3f] submitted.; Waiting for job output...; Initializing Spark and Hail with default parameters...; using hail jar at /opt/conda/default/lib/python3.6/site-packages/hail/hail-all-spark.jar; Running on Apache Spark version 2.4.3; SparkUI available at http://dk-m.c.broad-ctsa.internal:4041; Welcome to; __ __ <>__; / /_/ /__ __/ /; / __ / _ `/ / /; /_/ /_/\_,_/_/_/ version 0.2.16-277ccc7aec45; LOGGING: writing to /tmp/66c1d088108948b2b76bb607f61d7b3f/hail-20190703-2330-0.2.16-277ccc7aec45.log; yo dawg. [Stage 0:> (0 + 1) / 1]OpenJDK 64-Bit Server VM warning: INFO: os::commit_memory(0x00007f2e73b00000, 1035468800, 0) failed; error='Cannot allocate memory' (errno=12); #; # There is insufficient memory for the Java Runtime Environment to continue.; # Native memory allocation (mmap) failed to map 1035468800 bytes for committing reserved memory.; # An error report file with more information is saved as:; # /tmp/66c1d088108948b2b76bb607f61d7b3f/hs_err_pid10896.log; ERROR: (gcloud.dataproc.jobs.submit.pyspark) Job [66c1d088108948b2b76bb607f61d7b3f] failed with error:; Google Cloud Dataproc Agent reports job failure. If logs are available, they can be found in 'gs://dataproc-7f9e9d5e-03bd-4e95-bea1-fe0321239b35-us/google-cloud-dataproc-metainfo/f03fbc39-c07f-4e3e-8f21-47ffa986058e/jobs/66c1d088108948b2b76bb607f61d7b3f/driveroutput'.; Traceback (most recent call last):; File ""/usr/local/bin/hailctl"", line 10, in <module>; sys.exit(main()); File ""/usr/local/lib/python3.7/site-packages/hailtop/hailctl/__main__.py"", line 91, in main; cli.main(args); File ""/usr/local/lib/python3.7/site-packages/hailtop/hailctl/dataproc/cli.py"", line 99, in main; jmp[",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/6565#issuecomment-508289815:733,LOG,LOGGING,733,https://hail.is,https://github.com/hail-is/hail/issues/6565#issuecomment-508289815,2,"['LOG', 'log']","['LOGGING', 'log']"
Testability,"Finally got around to adding the tests, should be good now.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8038#issuecomment-585830759:33,test,tests,33,https://hail.is,https://github.com/hail-is/hail/pull/8038#issuecomment-585830759,1,['test'],['tests']
Testability,"Finally working! Ugh, that was painful. Changes I made since I closed:; - You can't broadcast an object which has a reference to its own broadcast (e.g. ReferenceGenome => locusType => rgBc). I made locusType transient and recompute after serialization.; - Removed BroadcastSerializable. I can't figure out how to check ReferenceGenome/RVDPartitioner are only serialized during partitioning. This is basically a failure of the Kryo interface. I might try again sometime when I'm feeling beat down by serialization.; - Removed removeReference. This just isn't something we can support (except in isolated situations like tests, and I fixed those.) Now, if you add a reference, it only throws an error if an existing reference exists by that name and is incompatible.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5512#issuecomment-473088362:620,test,tests,620,https://hail.is,https://github.com/hail-is/hail/pull/5512#issuecomment-473088362,1,['test'],['tests']
Testability,"First cut: https://github.com/broadinstitute/hail/commit/f5e93963844656449259ad893ec3ce7ddcef2f3c. Still needed: testing, implicit option manipulation, access to INFO field and QC results.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/16#issuecomment-156226289:113,test,testing,113,https://hail.is,https://github.com/hail-is/hail/issues/16#issuecomment-156226289,1,['test'],['testing']
Testability,"First step: #4347 automates VEP testing (for vep85, GRCh37)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4021#issuecomment-422545491:32,test,testing,32,https://hail.is,https://github.com/hail-is/hail/issues/4021#issuecomment-422545491,1,['test'],['testing']
Testability,"First test-passing version with Array[Array[GenotypeType]] drops time to 1m37s, not as much as expected. I'll look more closely to see if there are obvious inefficiencies, and may try unboxing GenotypeType to Int. If you look, let me know if you see something obvious. Output looks good. But there are only 6 complete trios in profile225, so after filtering out samples not in complete trios in .filterSamples(isTrioSample) , there is very little data to process. Here is the contents of profile225.fmendel:. ```; FID PAT MAT CHLD N; VN049 HG02026 HG02025 1 2009; SH074 HG00656 HG00657 1 5669; m009 NA19679 NA19678 1 3953; m008 NA19661 NA19660 1 5240; Y117 NA19239 NA19238 1 6499; PR05 HG00731 HG00732 1 1506; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/68#issuecomment-154742941:6,test,test-passing,6,https://hail.is,https://github.com/hail-is/hail/pull/68#issuecomment-154742941,1,['test'],['test-passing']
Testability,"FitLMM FAILED`. It fails out with 244 tests completed and 5 failed. I've attached the test report ; [tests.zip](https://github.com/hail-is/hail/files/795132/tests.zip). There are two differences that I can tell between the current build and the previous times I've tried. 1. I was using a local installation of spark when it worked, whereas now I am using the HPC's version of spark 2.1.0. However, it passed the tests just fine when I was using a local copy of spark 2.0.2 on both my laptop and HPC. . 2. Initially I followed the recommendations on the doc pages to setup the python path references to py4j under `alias hail=""PYTHONPATH=$SPARK_HOME/python:$SPARK_HOME/python/lib/py4j-0.10.4-src.zip:$HAIL_HOME/python SPARK_CLASSPATH=$HAIL_HOME/build/libs/hail-all-spark.jar python""` This perhaps didn't export the PYTHONPATH to the py4j 10.4 .zip library if I hadn't run the `hail` command before I tried testing. My initial reaction was to just install a local copy of py4j via pip in my local copy of python since the tests were failing out with complaints about missing py4j module. That worked to get a little farther in the test script, to the point where it was failing out with the breeze function. But, since then I've re-jiggered the PYTHONPATH in the .bash_profile to always be defined to point to the SPARK_HOME version of py4j. This doesn't seem like it would be a problem as the py4j versions via pip and and SPARK_HOME are both 10.4, and moreover this setup worked with spark 2.0.2, but a possible confound. Perhaps change the getting started docs so the PYTHONPATH is always defined to point to the spark version of py4j?. Anyway, here are the current paths as you requested. . `echo $SPARK_HOME /share/sw/free/spark.2.1.0/spark-2.1.0-bin-hadoop2.7`. `echo $PYTHONPATH; /home/stockham/bin/python/Python-2.7.12:/share/sw/free/spark.2.1.0/spark-2.1.0-bin-hadoop2.7/python:/share/sw/free/spark.2.1.0/spark-2.1.0-bin-hadoop2.7/python/lib/py4j-0.10.4-src.zip:/scratch/PI/dpwall/computeEnvi",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1419#issuecomment-281846721:1645,test,tests,1645,https://hail.is,https://github.com/hail-is/hail/issues/1419#issuecomment-281846721,1,['test'],['tests']
Testability,"Fixed a bunch of things, improved it a bit, ~30s for the small test now. when combined with the changes from #5107",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5078#issuecomment-455017270:63,test,test,63,https://hail.is,https://github.com/hail-is/hail/pull/5078#issuecomment-455017270,1,['test'],['test']
Testability,Fixed all the tests.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1872#issuecomment-305741770:14,test,tests,14,https://hail.is,https://github.com/hail-is/hail/pull/1872#issuecomment-305741770,1,['test'],['tests']
Testability,Fixed and test updated.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12990#issuecomment-1540350149:10,test,test,10,https://hail.is,https://github.com/hail-is/hail/pull/12990#issuecomment-1540350149,1,['test'],['test']
Testability,Fixed the test. Feel free to look over whenever,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1590#issuecomment-288834232:10,test,test,10,https://hail.is,https://github.com/hail-is/hail/pull/1590#issuecomment-288834232,1,['test'],['test']
Testability,Fixed. I'll debug the tests shortly.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2459#issuecomment-346149083:22,test,tests,22,https://hail.is,https://github.com/hail-is/hail/pull/2459#issuecomment-346149083,1,['test'],['tests']
Testability,"Fixing MakeNDArray to not double allocate cut my laptop benchmark time by more than 50%, it's only a bit slower than main now (~5-10%), so we should probably try and get it in. Feel free to review again when you get a chance.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10001#issuecomment-781709108:56,benchmark,benchmark,56,https://hail.is,https://github.com/hail-is/hail/pull/10001#issuecomment-781709108,1,['benchmark'],['benchmark']
Testability,"For a bit of extra confidence, I ran test-dataproc on this branch: https://ci.hail.is/batches/7960963. The clusters created successfully and the tests are running now.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13573#issuecomment-1709195201:37,test,test-dataproc,37,https://hail.is,https://github.com/hail-is/hail/pull/13573#issuecomment-1709195201,2,['test'],"['test-dataproc', 'tests']"
Testability,"For posterity, I ran this test:; ```python; ds = hl.read_matrix_table('gs://danking/ALL.chip.omni_broad_sanger_combined.20140818.snps.genotypes-hail-bff300d475ac.mt'); gp = (ds.group_rows_by(contig=ds.locus.contig, pos=ds.locus.position/1000); .aggregate(n_non_ref = hl.agg.count_where(ds.GT.is_non_ref()))); gp = gp.filter_entries((gp.n_non_ref != 0) & hl.is_defined(gp.n_non_ref)); gp.n_non_ref.show(); ```; ```bash; (hail) 1 dking@wmb16-359 # gsutil du -sh gs://danking/ALL.chip.omni_broad_sanger_combined.20140818.snps.genotypes-hail-bff300d475ac.mt; 1.23 GiB gs://danking/ALL.chip.omni_broad_sanger_combined.20140818.snps.genotypes-hail-bff300d475ac.mt; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3546#issuecomment-389964885:26,test,test,26,https://hail.is,https://github.com/hail-is/hail/pull/3546#issuecomment-389964885,1,['test'],['test']
Testability,"For reference, here was the plink output from one of those tests:. ```. @----------------------------------------------------------@; | PLINK! | v1.07 | 10/Aug/2009 |; |----------------------------------------------------------|; | (C) 2009 Shaun Purcell, GNU General Public License, v2 |; |----------------------------------------------------------|; | For documentation, citation & bug-report instructions: |; | http://pngu.mgh.harvard.edu/purcell/plink/ |; @----------------------------------------------------------@. Web-based version check ( --noweb to skip ); Recent cached web-check found...Problem connecting to web. Writing this text to log file [ /tmp/hail.3ouc7OzAKpSQ/plink.00001.log ]; Analysis started: Mon Jul 4 11:38:41 2016. ** Unused command line option: --vcf; ** Unused command line option: src/test/resources/sample.vcf; ** Unused command line option: --const-fid; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/457#issuecomment-230289474:59,test,tests,59,https://hail.is,https://github.com/hail-is/hail/issues/457#issuecomment-230289474,4,"['log', 'test']","['log', 'test', 'tests']"
Testability,"For testing, we start a server with `python ci/ci.py`. That doesn't appear to work. Do we need to pip install it instead?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4709#issuecomment-435169908:4,test,testing,4,https://hail.is,https://github.com/hail-is/hail/pull/4709#issuecomment-435169908,1,['test'],['testing']
Testability,"For the partitioning algorithm, I updated the test to confirm that all the individuals in the unrelated set are mutually unrelated. For PC-AiR, I updated the test to compare the loadings to PCA on just the unrelated individuals. The loadings are NumPy close. The scores are slightly different though because they are calculated differently. When there are related individuals, the scores are calculated by multiplying the loadings and the standardized genotypes. When there are no related individuals, the scores are calculated by multiplying the columns of the appropriate singular matrix with the eigenvalues. So for the scores, I just add a regression test. (In my testing, I observed that most of the scores were less than 1% different. However, there were a few differences that were larger around 20% or 30%. Not sure if this is a cause for concern because the calculation approaches are different and the SVD is approximate.)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14326#issuecomment-1977943502:46,test,test,46,https://hail.is,https://github.com/hail-is/hail/pull/14326#issuecomment-1977943502,4,['test'],"['test', 'testing']"
Testability,"For the record, mt.count, and mt.force_count in that test, both say that the matrix is empty. So I have no Idea what's going on",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11450#issuecomment-1059484035:53,test,test,53,https://hail.is,https://github.com/hail-is/hail/pull/11450#issuecomment-1059484035,1,['test'],['test']
Testability,"For the record, until we have a fix for GRCh38 VEP image building, we have to manually copy the 0.2.118 tag to the 0.2.119 tag for vep-grch38-95.; ```; skopeo copy docker://us-docker.pkg.dev/hail-vdc/hail/hailgenetics/vep-grch38-95:0.2.118 docker://us-docker.pkg.dev/hail-vdc/hail/hailgenetics/vep-grch38-95:0.2.119 ; ```. I have done this and retried the ci-test.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13216#issuecomment-1608425471:359,test,test,359,https://hail.is,https://github.com/hail-is/hail/pull/13216#issuecomment-1608425471,1,['test'],['test']
Testability,"For ~1500 joint caller inputs, on what was a frankenbranch (I merged a bunch of stuff together, haven't pushed it). I saw that IR construction in python took around a minute. I'm not entirely sure where the time was being spent though. Also 1 minute is nothing compared to the amount of time we spend actually joint calling. Anyways, `run_combiner.py`; ```python3; def run_combiner(sample_list, json, out_path, tmp_path, summary_path=None, overwrite=False):; # make the temp path a directory, no matter what; tmp_path += f'/combiner-temporary/{uuid.uuid4()}/'; vcfs = [comb.transform_one(vcf); for vcf in hl.import_vcfs(sample_list, json, array_elements_required=False)]; combined = [comb.combine_gvcfs(mts) for mts in chunks(vcfs, MAX_COMBINER_LENGTH)]; if len(combined) == 1:; combined[0].write(out_path, overwrite=overwrite); else:; hl.utils.java.info(f'Writing combiner temporary files to: {tmp_path}'); ... # do more, but this stage isn't huge yet so :man_shrugging: ; ```; Relevant log:; ```; 2019-03-01 22:09:20 DAGScheduler: INFO: Job 0 finished: collect at LoadVCF.scala:1295, took 88.076400 s; 2019-03-01 22:10:19 Hail: INFO: Writing combiner temporary files to: gs://cdv-hail/combiner/tmp//combiner-temporary/dc741728-fdfd-49d9-a66e-94bd7b541879/; ```; Stage zero is tabix reading `sc.parallelize`. The next line is the logging line that I added, almost a minute apart. After that it's 30 seconds for the Optimizer and Lowerer and (printing hundreds of thousands of lines of IR).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5465#issuecomment-469789122:988,log,log,988,https://hail.is,https://github.com/hail-is/hail/pull/5465#issuecomment-469789122,2,['log'],"['log', 'logging']"
Testability,Force merged because tests won't pass without this fix in production.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14549#issuecomment-2108111768:21,test,tests,21,https://hail.is,https://github.com/hail-is/hail/pull/14549#issuecomment-2108111768,1,['test'],['tests']
Testability,Force merging because we keep failing in service backend or in those damn copy tests.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10173#issuecomment-796819618:79,test,tests,79,https://hail.is,https://github.com/hail-is/hail/pull/10173#issuecomment-796819618,1,['test'],['tests']
Testability,Force merging since both this and https://github.com/hail-is/hail/pull/9390 are both needed for successful tests.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9389#issuecomment-684910606:107,test,tests,107,https://hail.is,https://github.com/hail-is/hail/pull/9389#issuecomment-684910606,1,['test'],['tests']
Testability,Force merging this. All other tests besides callback tests are passing.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10668#issuecomment-880963568:30,test,tests,30,https://hail.is,https://github.com/hail-is/hail/pull/10668#issuecomment-880963568,2,['test'],['tests']
Testability,Forgot about the difference between rmtree and remove. I fixed and improved the tests to distinguish between these two.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11599#issuecomment-1069658326:80,test,tests,80,https://hail.is,https://github.com/hail-is/hail/pull/11599#issuecomment-1069658326,1,['test'],['tests']
Testability,"From a fresh clone, the above (modified with `rm -f`) fails with: ; ```bash; $ rm -f hail/upload-remote-test-resources && make -C hail upload-remote-test-resources; make: Entering directory '/home/edmund/.local/src/hail/hail'; # # If hailtop.aiotools.copy gives you trouble:; # gcloud storage cp -r src/test/resources/\* gs://hail-test-ezlis/edmund/hail-test-resources/test/resources/; # gcloud storage cp -r python/hail/docs/data/\* gs://hail-test-ezlis/edmund/hail-test-resources/doctest/data/; python3 -m hailtop.aiotools.copy -vvv 'null' '[\; {""from"":""src/test/resources"",""to"":""gs://hail-test-ezlis/edmund/hail-test-resources/test/resources/""},\; {""from"":""python/hail/docs/data"",""to"":""gs://hail-test-ezlis/edmund/hail-test-resources/doctest/data/""}\; ]' --timeout 600; /home/edmund/.local/src/hail/.venv/bin/python3: Error while finding module specification for 'hailtop.aiotools.copy' (ModuleNotFoundError: No module named 'hailtop'); make: *** [Makefile:355: upload-remote-test-resources] Error 1; make: Leaving directory '/home/edmund/.local/src/hail/hail'; ```. I'll try again with `hailtop` installed - just wanted to point out the dependency failure in `Makefile`.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14138#issuecomment-1887719777:104,test,test-resources,104,https://hail.is,https://github.com/hail-is/hail/pull/14138#issuecomment-1887719777,15,['test'],"['test', 'test-ezlis', 'test-resources']"
Testability,Funny I actually did this a few weeks ago and then realized it was logged further down. It's around line 76 in a random log I just looked at. I could move it to log from python early on?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/7644#issuecomment-561201747:67,log,logged,67,https://hail.is,https://github.com/hail-is/hail/issues/7644#issuecomment-561201747,3,['log'],"['log', 'logged']"
Testability,"Further pruned. Removed all GraphQL libraries, besides graphql-tag, which I like, because 1) simple hash-based cache: no need to walk complex graph to normalize cache, because in most cases I'm perfectly fine with not re-using cache across different queries (that may have some shared fields). Apollo does something ""smarter"", but much slower: walks a query, checks that the requested fields for a node are the same, and that the node's id is the same, as some other query. 2) no runtime validation of query shape via graphql-tag...uses simple template strings, which are free. We don't care about schema validation in the client...because the server will error when schema is invalid. This should be compile time validated instead, in this case via integration tests. Also removed react-icons... I was going to use this in place of material-design-icons, because I thought loading the full font, when I needed only a few icons, would be unnecessarily expensive. It turns out that I cannot find a library where a single icon import (react-icons or MaterialUI) is smaller than Google's entire material design font: a single font (there are several needed to cover all icons) is ~500B. A single react-icons icon is ~2KB on dev (production may be smaller due to tree shaking). Also, am opposed to CSS-in-JS: slower, worse tooling, larger. Benefits are dynamic selectors, which are really no advantage that I can see (without them can still dynamically apply classes, as in the yee ol days of pleb vanilla js). Home page down to <2kb when not logged in, and 3.1KB logged in. This includes header, simple body, and dark mode button.; <img width=""2636"" alt=""screen shot 2018-12-19 at 11 49 59 pm"" src=""https://user-images.githubusercontent.com/5543229/50264482-ed4c3000-03e8-11e9-80d1-81d195a7b37a.png"">; <img width=""2636"" alt=""screen shot 2018-12-19 at 11 50 33 pm"" src=""https://user-images.githubusercontent.com/5543229/50264483-ed4c3000-03e8-11e9-8180-1409ca16573f.png"">. edit: Further .1KB shaved (gzipp",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4931#issuecomment-448868665:762,test,tests,762,https://hail.is,https://github.com/hail-is/hail/pull/4931#issuecomment-448868665,1,['test'],['tests']
Testability,"Gah, OK, I think I have it now, but there was one more detail:. The gradle configuration `testCompileOnly` [1] *does not* inherit from the `shadow` configuration (as evidence see [this search](https://github.com/search?q=repo%3Ajohnrengelman%2Fshadow%20extendsFrom&type=code) of the shadow repo). We must explicitly request that `shadow` dependencies are included in the compile-time class path of the tests. This is as it should be: the things in `shadow` are things which are provided to us by our runtime environment. That's true of both the *test* runtime environment and the normal runtime environment. The Gradle Shadow plugin takes a different perspective by default, it suggests that `shadow` dependencies shouldn't be used in the tests at all. [1] NB: `testCompile` does not exist but you don't get an error if you try to use it, thanks for nothing gradle.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13551#issuecomment-1710414563:90,test,testCompileOnly,90,https://hail.is,https://github.com/hail-is/hail/pull/13551#issuecomment-1710414563,5,['test'],"['test', 'testCompile', 'testCompileOnly', 'tests']"
Testability,Ghost does not respect the `X-Forwarded` headers. It should not have a `url` parameter but a `pathPrefix` and the protocol should be set from `X-Forwarded-Proto`. Thanks to this design bug we cannot test connectivity to the blog in PRs until the internal gateway is configured to use TLS. I'll revisit this PR when that happens.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8117#issuecomment-589741905:199,test,test,199,https://hail.is,https://github.com/hail-is/hail/pull/8117#issuecomment-589741905,1,['test'],['test']
Testability,"Glad to hear we're not crazy! Please let us know if there's any external; testing we can do to help. On Wed, Jun 24, 2020 at 1:21 PM John Compitello <notifications@github.com>; wrote:. > Confirmed that I'm able to replicate this, also seeing 354 as the cutoff.; > Looking into it.; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/hail-is/hail/issues/8944#issuecomment-649049500>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AAARLWJCO43V5BGEELQSWE3RYJN3BANCNFSM4N2T543Q>; > .; >",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/8944#issuecomment-649050351:74,test,testing,74,https://hail.is,https://github.com/hail-is/hail/issues/8944#issuecomment-649050351,1,['test'],['testing']
Testability,"Good catch! This is something that's not tested as part of CI, but we should do that (eventually). Will fix this bug, though.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4063#issuecomment-409737215:41,test,tested,41,https://hail.is,https://github.com/hail-is/hail/issues/4063#issuecomment-409737215,1,['test'],['tested']
Testability,Good comments. Addressed:. - renamed bit_flip to bit_not; - added logical flag to bit_rshift; - added more tests with negative numbers; - expanded docs around differences between Python and Hail,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5149#issuecomment-454862527:66,log,logical,66,https://hail.is,https://github.com/hail-is/hail/pull/5149#issuecomment-454862527,2,"['log', 'test']","['logical', 'tests']"
Testability,"Good idea, I'll check. I feel like I initially found this in deep in a redhat tutorial, but ultimately found it again at the bottom of the [man page](https://man7.org/linux/man-pages/man8/xfs_quota.8.html). I was following this example:; ```; Enabling project quota on an XFS filesystem (restrict files in; log file directories to only using 1 gigabyte of space). # mount -o prjquota /dev/xvm/var /var; # echo 42:/var/log >> /etc/projects; # echo logfiles:42 >> /etc/projid; # xfs_quota -x -c 'project -s logfiles' /var; # xfs_quota -x -c 'limit -p bhard=1g logfiles' /var. Same as above without a need for configuration files. # rm -f /etc/projects /etc/projid; # mount -o prjquota /dev/xvm/var /var; # xfs_quota -x -c 'project -s -p /var/log 42' /var; # xfs_quota -x -c 'limit -p bhard=1g 42' /var; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10467#issuecomment-834771396:307,log,log,307,https://hail.is,https://github.com/hail-is/hail/pull/10467#issuecomment-834771396,6,['log'],"['log', 'logfiles']"
Testability,"Good point, re: tests. OK, I'll go ahead and do the rest of the methods.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2590#issuecomment-352193460:16,test,tests,16,https://hail.is,https://github.com/hail-is/hail/pull/2590#issuecomment-352193460,1,['test'],['tests']
Testability,Good point. I'm going to first make sure that it would have failed on a sparse matrix with the `.get` and then show that the same test (hopefully!) passes for the updated PR.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/5500#issuecomment-468696410:130,test,test,130,https://hail.is,https://github.com/hail-is/hail/issues/5500#issuecomment-468696410,1,['test'],['test']
Testability,Got it green. Going to benchmark.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12981#issuecomment-1540483249:23,benchmark,benchmark,23,https://hail.is,https://github.com/hail-is/hail/pull/12981#issuecomment-1540483249,1,['benchmark'],['benchmark']
Testability,"Got it! You need to add the loop device. Now how to parse the correct thing from the xfs_info output is another story... ```; jigold@jg-file-cache:~$ xfs_info /mnt/test_xfs; meta-data=/dev/loop2 isize=512 agcount=4, agsize=65536 blks; = sectsz=512 attr=2, projid32bit=1; = crc=1 finobt=1 spinodes=0 rmapbt=0; = reflink=1; data = bsize=4096 blocks=262144, imaxpct=25; = sunit=0 swidth=0 blks; naming =version 2 bsize=4096 ascii-ci=0 ftype=1; log =internal bsize=4096 blocks=2560, version=2; = sectsz=512 sunit=0 blks, lazy-count=1; realtime =none extsz=4096 blocks=0, rtextents=0; ```. ```; jigold@jg-file-cache:~$ sudo docker run --rm --mount type=bind,source=/mnt/test_xfs,target=/host --cap-add SYS_ADMIN --security-opt apparmor:unconfined --device ""/dev/loop2:/dev/loop2:rwm"" test-xfs /bin/bash -c 'xfs_quota -x -c ""report -h"" /host'; Project quota on /host (/dev/loop2); Blocks; Project ID Used Soft Hard Warn/Grace; ---------- ---------------------------------; #0 4K 0 0 00 [------]; #200 0 0 0 00 [------]; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9076#issuecomment-662462004:441,log,log,441,https://hail.is,https://github.com/hail-is/hail/pull/9076#issuecomment-662462004,2,"['log', 'test']","['log', 'test-xfs']"
Testability,"Got it, I just realized it hard way during the test run. Had no clue about that -Dspark.version option. Thanks for the prompt responses. 👍",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1327#issuecomment-302838927:47,test,test,47,https://hail.is,https://github.com/hail-is/hail/issues/1327#issuecomment-302838927,1,['test'],['test']
Testability,Got through that now. Now hitting:; ```; Java stack trace:; java.lang.AssertionError: assertion failed; 	at scala.Predef$.assert(Predef.scala:156); 	at is.hail.rvd.OrderedRVDPartitioner.getPartitionPK(OrderedRVDPartitioner.scala:59); 	at is.hail.sparkextras.OrderedDependency$.getDependencies(OrderedRDD2.scala:22); 	at is.hail.sparkextras.OrderedJoinDistinctRDD2$$anonfun$getPartitions$1.apply(OrderedRDD2.scala:42); 	at is.hail.sparkextras.OrderedJoinDistinctRDD2$$anonfun$getPartitions$1.apply(OrderedRDD2.scala:39); 	at scala.Array$.tabulate(Array.scala:331); 	at is.hail.sparkextras.OrderedJoinDistinctRDD2.getPartitions(OrderedRDD2.scala:39); 	at org.apache.spark.rdd.RDD$$anonfun$partitions$2.apply(RDD.scala:252); 	at org.apache.spark.rdd.RDD$$anonfun$partitions$2.apply(RDD.scala:250); 	at scala.Option.getOrElse(Option.scala:121); 	at org.apache.spark.rdd.RDD.partitions(RDD.scala:250); 	at org.apache.spark.rdd.MapPartitionsRDD.getPartitions(MapPartitionsRDD.scala:35); 	at org.apache.spark.rdd.RDD$$anonfun$partitions$2.apply(RDD.scala:252); 	at org.apache.spark.rdd.RDD$$anonfun$partitions$2.apply(RDD.scala:250); 	at scala.Option.getOrElse(Option.scala:121); 	at org.apache.spark.rdd.RDD.partitions(RDD.scala:250); 	at org.apache.spark.rdd.MapPartitionsRDD.getPartitions(MapPartitionsRDD.scala:35); 	at org.apache.spark.rdd.RDD$$anonfun$partitions$2.apply(RDD.scala:252); 	at org.apache.spark.rdd.RDD$$anonfun$partitions$2.apply(RDD.scala:250); 	at scala.Option.getOrElse(Option.scala:121); 	at org.apache.spark.rdd.RDD.partitions(RDD.scala:250); 	at org.apache.spark.rdd.RDD.getNumPartitions(RDD.scala:266); 	at is.hail.rvd.RVD$class.getNumPartitions(RVD.scala:128); 	at is.hail.rvd.OrderedRVD.getNumPartitions(OrderedRVD.scala:19); 	at is.hail.sparkextras.OrderedJoinDistinctRDD2.getPartitions(OrderedRDD2.scala:39); 	at org.apache.spark.rdd.RDD$$anonfun$partitions$2.apply(RDD.scala:252); 	at org.apache.spark.rdd.RDD$$anonfun$partitions$2.apply(RDD.scala:250); 	at scala.Option.getOr,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/3074#issuecomment-370494908:70,Assert,AssertionError,70,https://hail.is,https://github.com/hail-is/hail/issues/3074#issuecomment-370494908,3,"['Assert', 'assert']","['AssertionError', 'assert', 'assertion']"
Testability,"Gotcha. Yes, your test works. I'll throw an error for now, since this sounds like not a use case we want to support.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/7384#issuecomment-546397181:18,test,test,18,https://hail.is,https://github.com/hail-is/hail/issues/7384#issuecomment-546397181,1,['test'],['test']
Testability,"Gradle test > org.broadinstitute.hail.methods.HWESuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.IntervalListSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.utils.LEB128Suite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.exactTestsTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.meanTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.modeTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.pmfTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.varianceTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.LinearRegressionSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.MendelErrorsSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.MultiArray2Suite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.PedigreeSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.SampleQCSuite.testStoreAfterFilter PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.vcf.SplitSuite.SplitTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.utils.UtilsSuite.testD_$eq$eq PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.utils.UtilsSuite.testFlushDouble PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.vsm.VSMSuite.testFilterSamples PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.vsm.VSMSuite.testSame PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.VariantSuite.testVariant PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.gqDpStatsSuite.test PASSED; :check. BUILD SUCCESSFUL; ```. **TIMING**. import, write chr22; - Current master, best of 3: 1m48.5s; - map-any, best of 3: 1m43.1s. read, filtervariants --",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/158#issuecomment-173700450:2264,test,test,2264,https://hail.is,https://github.com/hail-is/hail/pull/158#issuecomment-173700450,1,['test'],['test']
Testability,"Great change. Still an error related to hail_pip_version in the tests, though. Can you make a discuss post when this goes in to alert people compiling their own builds?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5194#issuecomment-457196817:64,test,tests,64,https://hail.is,https://github.com/hail-is/hail/pull/5194#issuecomment-457196817,1,['test'],['tests']
Testability,"Great questions. The larger change here is that we're trying to decouple the Python front end from Scala/Java. Therefore, instead of calling directly into Python (e.g. getReferenceGenome), we're constructing a MatrixRead IR, which can either be passed to a service (ServiceBackend) or passed to Java as we did before (SparkBackend). I should also remark, py4j is incredibly slow, so batching calls to Python greatly improves performance in the current setup. So, for example, building an IR in Python, serializing it and parsing on Java is much faster than a series of py4j calls that builds the corresponding objects on the Java side one at a time. Some functions which used to be called from Python like importBgens are no longer used, but are still used by the Scala tests. Those got moved to TestUtils and are being phased out.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5150#issuecomment-456682522:770,test,tests,770,https://hail.is,https://github.com/hail-is/hail/pull/5150#issuecomment-456682522,2,"['Test', 'test']","['TestUtils', 'tests']"
Testability,"Great suggestion, I added an assertion and some code to the rmtree test to verify that deleting a subdirectory does not affect the sibling or avuncular directories.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11072#issuecomment-975908963:29,assert,assertion,29,https://hail.is,https://github.com/hail-is/hail/pull/11072#issuecomment-975908963,2,"['assert', 'test']","['assertion', 'test']"
Testability,Great! I think we should run the integration tests as part of `testAll` and kill the integration tests in the CI.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1827#issuecomment-302116530:45,test,tests,45,https://hail.is,https://github.com/hail-is/hail/pull/1827#issuecomment-302116530,3,['test'],"['testAll', 'tests']"
Testability,"Great! I will test it out on our cluster. First, I have question on the; Spark version that is recommended. At the very top of the *Getting Started; with Python API*, the document indicates the latest version of Spark 2; should be used. But later on under the *Running on a Spark cluster and in; the cloud section,* it indicates only Spark 1.5 and 1.6 are supported.; Which version would be the best to use? Or does it really depend on whether; it is run locally or on a cluster?. On Thu, Jan 12, 2017 at 11:21 PM, cseed <notifications@github.com> wrote:. > We now have a Getting Started the python API:; >; > https://hail.is/pyhail/getting_started.html; >; > Please give it a spin and let us know if you run into any problems. The; > documentation for the python API is nearly complete, but the Tutorial and; > General Reference section are still being ported to python and will need; > another week or so. Thanks for your patience!; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/hail-is/hail/issues/1218#issuecomment-272357689>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AB3rDZjYATb82CmTNeP61RpKxMCFMhInks5rRvvYgaJpZM4La8Pf>; > .; >. -- ; John Farrell, Ph.D.; Biomedical Genetics-Evans 218; Boston University Medical School; 72 East Concord Street; Boston, MA. ph: 617-638-5491",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1218#issuecomment-272494749:14,test,test,14,https://hail.is,https://github.com/hail-is/hail/issues/1218#issuecomment-272494749,1,['test'],['test']
Testability,Great! I'll still test the changes by hand later if for no other reason to make sure the UI still works and I know how to use the query service.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11471#issuecomment-1058148308:18,test,test,18,https://hail.is,https://github.com/hail-is/hail/pull/11471#issuecomment-1058148308,1,['test'],['test']
Testability,Great! Looking forward to testing out PyHail.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1218#issuecomment-270732339:26,test,testing,26,https://hail.is,https://github.com/hail-is/hail/issues/1218#issuecomment-270732339,1,['test'],['testing']
Testability,"Great! So here's what the docs look like now:; https://hail.is/docs/devel/methods/genetics.html#hail.methods.nirvana. Here's the Python source:; https://github.com/hail-is/hail/blob/master/python/hail/methods/qc.py. You can see the built docs of this PR by clicking on Details next to the passing 2.2.0 test, and then clicking on Docs, e.g.:; https://ci.hail.is/viewLog.html?buildId=63354&buildTypeId=HailSourceCode_PRsOnly_HailTestJarSpark220&tab=report_project8_Docs. I'd appreciate if you could:; - ensure the docs are still accurate and add information on what version(s) of Nirvana is compatible.; - update the schema in the documentation to match your changes in Scala; - try running the same pipeline with a few block sizes to see whether its reasonable to reduce the default block size so that users will get more parallelism by default. I suspect a user with a 1 million variant VCF would prefer running 100 cores with 10k variants each to 2 cores with 500k variants each. I'd be surprised if the per-block overhead is so high to outweigh the benefit.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3266#issuecomment-379138339:303,test,test,303,https://hail.is,https://github.com/hail-is/hail/pull/3266#issuecomment-379138339,1,['test'],['test']
Testability,"Great, thank you! I've just checked out your branch and will do some manual testing this morning and let you know how that goes. I noticed that the VEP logic didn't have test coverage right now, but had a few ideas for some modest refactoring so unit tests are possible. I'll see if I can get that working!",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/3790#issuecomment-400314076:76,test,testing,76,https://hail.is,https://github.com/hail-is/hail/issues/3790#issuecomment-400314076,4,"['log', 'test']","['logic', 'test', 'testing', 'tests']"
Testability,"Great. So what I'm also interested in comparing is, if I just need, say, hail/pipeline/test, what's the download full tar and extract (of just hail/pipeline/test) vs download just hail/pipeline/test tar with full extract?. > There's something to be said for tar'ing everything except for .git, but I didn't carefully check which steps need it and which steps do not. I would have hoped no downstream steps need .git, but some build steps do trivially (e.g. look at the hash). Hrm.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7626#issuecomment-560458090:87,test,test,87,https://hail.is,https://github.com/hail-is/hail/pull/7626#issuecomment-560458090,3,['test'],['test']
Testability,"HAIL_TOKEN_FILE still exists in . ```sh; apiserver/test-apiserver-pod.yaml; 21: - name: HAIL_TOKEN_FILE. notebook2/notebook/notebook.py; 73: env=[kube.client.V1EnvVar(name='HAIL_TOKEN_FILE',. notebook2/notebook/kubeclient.py; 46: env=[kube.client.V1EnvVar(name='HAIL_TOKEN_FILE',. hail/python/hail/backend/backend.py; 216: os.environ.get('HAIL_TOKEN_FILE') or; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6892#issuecomment-528876155:51,test,test-apiserver-pod,51,https://hail.is,https://github.com/hail-is/hail/pull/6892#issuecomment-528876155,1,['test'],['test-apiserver-pod']
Testability,"Hail 0.1 isn't tested against or believed to work with Spark 2.2. Can you update to Hail 0.2 (devel)? 0.1 will be fully deprecated when 0.2 is released, and is already in its end of life process.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/3946#issuecomment-405779642:15,test,tested,15,https://hail.is,https://github.com/hail-is/hail/issues/3946#issuecomment-405779642,1,['test'],['tested']
Testability,Hail defaults to logging to `hail.log` in the working directory of the Spark process. Apparently the user running spark doesn't have permission to create files in its working directory. You might try ; ```python; hc = hail.HailContext(log='/tmp/hail.log'); ```. Or any other file to which you have write access.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/2076#issuecomment-337912555:17,log,logging,17,https://hail.is,https://github.com/hail-is/hail/issues/2076#issuecomment-337912555,4,['log'],"['log', 'logging']"
Testability,Hand deploy successful. Monitoring logs.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8424#issuecomment-607417090:35,log,logs,35,https://hail.is,https://github.com/hail-is/hail/pull/8424#issuecomment-607417090,1,['log'],['logs']
Testability,Happened again; [batch.log](https://github.com/hail-is/hail/files/2635158/batch.log),MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4608#issuecomment-443356287:23,log,log,23,https://hail.is,https://github.com/hail-is/hail/issues/4608#issuecomment-443356287,2,['log'],['log']
Testability,"Happy to commit this if it passes tests. Looks like you've got a rebase error, though",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5485#issuecomment-468401938:34,test,tests,34,https://hail.is,https://github.com/hail-is/hail/pull/5485#issuecomment-468401938,1,['test'],['tests']
Testability,"Haven't been able to have pipeline benchmarks finish, but from the looks of things this change does not make things significantly slower or faster.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7060#issuecomment-535609382:35,benchmark,benchmarks,35,https://hail.is,https://github.com/hail-is/hail/pull/7060#issuecomment-535609382,1,['benchmark'],['benchmarks']
Testability,"Haven't stress tested it yet. But just did a quick check and yes, this is exactly what I've wanted. So so so so good. As I mentioned to @tpoterba, the ability to write this out as an object (granted, not necessarily trival) would officially close the book on the @konradjk 0.2 wishlist.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5044#issuecomment-450278433:15,test,tested,15,https://hail.is,https://github.com/hail-is/hail/pull/5044#issuecomment-450278433,1,['test'],['tested']
Testability,"Having run through a test myself, it looks like we'll actually need to add back all the deleted config aside from the last bit that starts up the jupyter server. Aside from the last block that starts up jupyter, the rest is important logic to configure extensions and content management.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12788#issuecomment-1472586228:21,test,test,21,https://hail.is,https://github.com/hail-is/hail/pull/12788#issuecomment-1472586228,2,"['log', 'test']","['logic', 'test']"
Testability,"Heh, I separately discovered the test failure and fixed at https://github.com/hail-is/hail/pull/13477",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13470#issuecomment-1688883263:33,test,test,33,https://hail.is,https://github.com/hail-is/hail/pull/13470#issuecomment-1688883263,1,['test'],['test']
Testability,"Heh, so turns out that `test_weird_urls` is missing the `@pytest.mark.asyncio` decorator, and so it was getting skipped with a warning this whole time. The pytest upgrade added auto-detection of async tests and so it ran this broken test for the first time. I'm PR'ing to treat most warnings as errors in #12322.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11974#issuecomment-1278201498:201,test,tests,201,https://hail.is,https://github.com/hail-is/hail/pull/11974#issuecomment-1278201498,2,['test'],"['test', 'tests']"
Testability,"Heh. At least in my version of Docker, those are implicitly relative to the root not the WORKDIR:; ```; (base) dking@wm28c-761 /tmp % cat Dockerfile ; FROM ubuntu:20.04; WORKDIR /foo/bar; VOLUME baz; (base) dking@wm28c-761 /tmp % docker build -t foo . ; [+] Building 0.1s (6/6) FINISHED ; => [internal] load build definition from Dockerfile 0.0s; => => transferring dockerfile: 34B 0.0s; => [internal] load .dockerignore 0.0s; => => transferring context: 2B 0.0s; => [internal] load metadata for docker.io/library/ubuntu:20.04 0.0s; => [1/2] FROM docker.io/library/ubuntu:20.04 0.0s; => CACHED [2/2] WORKDIR /foo/bar 0.0s; => exporting to image 0.0s; => => exporting layers 0.0s; => => writing image sha256:217748640e5c53f72b8de9917010e5742fb8bef99a37dcb13ec59a903cb5834c 0.0s; => => naming to docker.io/library/foo 0.0s. Use 'docker scan' to run Snyk tests against images to find vulnerabilities and learn how to fix them; (base) dking@wm28c-761 /tmp % docker run foo /bin/sh -c 'pwd && ls -l . && ls -l / && ls -l /baz'; /foo/bar; total 0; total 56; drwxr-xr-x 2 root root 4096 May 9 15:06 baz; lrwxrwxrwx 1 root root 7 Oct 19 2022 bin -> usr/bin; drwxr-xr-x 2 root root 4096 Apr 15 2020 boot; drwxr-xr-x 5 root root 340 May 9 15:06 dev; drwxr-xr-x 1 root root 4096 May 9 15:06 etc; drwxr-xr-x 3 root root 4096 May 9 15:01 foo; drwxr-xr-x 2 root root 4096 Apr 15 2020 home; lrwxrwxrwx 1 root root 7 Oct 19 2022 lib -> usr/lib; drwxr-xr-x 2 root root 4096 Oct 19 2022 media; drwxr-xr-x 2 root root 4096 Oct 19 2022 mnt; drwxr-xr-x 2 root root 4096 Oct 19 2022 opt; dr-xr-xr-x 238 root root 0 May 9 15:06 proc; drwx------ 2 root root 4096 Oct 19 2022 root; drwxr-xr-x 5 root root 4096 Oct 19 2022 run; lrwxrwxrwx 1 root root 8 Oct 19 2022 sbin -> usr/sbin; drwxr-xr-x 2 root root 4096 Oct 19 2022 srv; dr-xr-xr-x 13 root root 0 May 9 15:06 sys; drwxrwxrwt 2 root root 4096 Oct 19 2022 tmp; drwxr-xr-x 10 root root 4096 Oct 19 2022 usr; drwxr-xr-x 11 root root 4096 Oct 19 2022 var; total 0; (base) dki",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12990#issuecomment-1540332989:852,test,tests,852,https://hail.is,https://github.com/hail-is/hail/pull/12990#issuecomment-1540332989,1,['test'],['tests']
Testability,"Heh. I checked the range test with `vcf.bgz` and it's embarrassingly slow. In terms of compressed output bytes, it's 251 KiB/s. In terms of decompressed output bytes it's 80 MiB/s. I guess this makes sense though: we can't generate data fast enough to keep up with bgzip. I seem to recall bgzip writes at ~50 MiB/s. At those compression ratios we'd need to generate data at ~15GiB/s, which we are _so_ far from doing.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12733#issuecomment-1444597452:25,test,test,25,https://hail.is,https://github.com/hail-is/hail/pull/12733#issuecomment-1444597452,1,['test'],['test']
Testability,"Here are the alternatives that I see:. The original design:; ```scala; object LowerArrayToStream {; private def boundary(node: IR): IR = {; var streamified = streamify(node). if (streamified.typ.isInstanceOf[TStream] && node.typ.isInstanceOf[TArray]); streamified = ToArray(streamified). if (streamified.typ.isInstanceOf[TArray] && node.typ.isInstanceOf[TStream]); streamified = ToStream(streamified). assert(streamified.typ == node.typ); streamified; }. private def toStream(node: IR): IR = {; node match {; case _: ToStream => node; case _ => {; if(node.typ.isInstanceOf[TArray]); ToStream(node); else; node; }; }; }. private def streamify(node: IR): IR = {; node match {; //...; case _ =>; val newChildren = node.children.map(child => boundary(child.asInstanceOf[IR])); val x = if ((node.children, newChildren).zipped.forall(_ eq _)); node; else; node.copy(newChildren). if(x.typ.isInstanceOf[TArray]); ToStream(x); else; x; }; }. def apply(node: IR): IR = boundary(node); }; ````. the above has plenty of errors, surrounding attempts to cast PCanonicalArray to PStream. This can be fixed using TContainer instead of TArray. But as soon as you do this, you need to make sure you're never generating ToArray(ToStream(something of type TDict or TSet)), which means you need the if check in the present PR.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8063#issuecomment-586598280:402,assert,assert,402,https://hail.is,https://github.com/hail-is/hail/pull/8063#issuecomment-586598280,1,['assert'],['assert']
Testability,Here are the benchmarks: https://gist.github.com/johnc1231/3e576bf2e8a39cb73785af0faa451976. @tpoterba should be good for review.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9675#issuecomment-741826512:13,benchmark,benchmarks,13,https://hail.is,https://github.com/hail-is/hail/pull/9675#issuecomment-741826512,1,['benchmark'],['benchmarks']
Testability,"Here is a Hail log.... I will work on getting the YARN container logs next. . more /restricted/projectnb/ukbiobank/ad/analysis/ukb.v3/hail-20190122-1311-0.2.4-d602a3d7472d.log; ```; 2019-01-22 13:11:20 SparkContext: INFO: Running Spark version 2.2.1; 2019-01-22 13:11:20 NativeCodeLoader: WARN: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable; 2019-01-22 13:11:21 SparkContext: INFO: Submitted application: Hail; 2019-01-22 13:11:21 SparkContext: INFO: Spark configuration:; spark.app.name=Hail; spark.driver.extraClassPath=""/restricted/projectnb/genpro/github/hail/hail/build/libs/hail-all-spark.jar""; spark.driver.memory=5G; spark.executor.cores=4; spark.executor.extraClassPath=./hail-all-spark.jar; spark.executor.instances=10; spark.executor.memory=40G; spark.hadoop.io.compression.codecs=org.apache.hadoop.io.compress.DefaultCodec,is.hail.io.compress.BGzipCodec,is.hail.io.compress.BGzipCodecTbi,org.apache.hadoop.io.compress.GzipCodec; spark.hadoop.mapreduce.input.fileinputformat.split.minsize=1048576; spark.kryo.registrator=is.hail.kryo.HailKryoRegistrator; spark.logConf=true; spark.master=yarn; spark.repl.local.jars=file:/restricted/projectnb/genpro/github/hail/hail/build/libs/hail-all-spark.jar; spark.serializer=org.apache.spark.serializer.KryoSerializer; spark.submit.deployMode=client; spark.ui.showConsoleProgress=false; spark.yarn.appMasterEnv.LD_LIBRARY_PATH=/share/pkg/lz4/1.8.3/install/lib:/share/pkg/gcc/7.2.0/install/lib64:/share/pkg/gcc/7.2.0/install/lib; spark.yarn.appMasterEnv.PATH=/share/pkg/spark/2.2.1/install/bin:/share/pkg/lz4/1.8.3/install/bin:/share/pkg/gcc/7.2.0/install/bin:/usr3/bustaff/farrell/anaconda_envs/hail2/bin:/share/pkg/anaconda3/5.2.0/install/bin:/usr/java/default/jre/bin:/usr/java; /default/bin:/usr/lib64/qt-3.3/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:/opt/dell/srvadmin/bin:/usr3/bustaff/farrell/bin:/usr3/bustaff/farrell/bin; spark.yarn.appMasterEnv.PYTHONPATH=/share",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4733#issuecomment-456534587:15,log,log,15,https://hail.is,https://github.com/hail-is/hail/issues/4733#issuecomment-456534587,3,['log'],"['log', 'logs']"
Testability,Here is the problematic command:. `annotateglobal table \; -i file:///humgen/atgu1/fs03/wip/aganna/HCSCORE/genelists/all_scores.scores \; -r global.all_scores \; annotateglobal expr -c 'global.GWAS_height = global.all_scores.filter(x => x.GWAS_HEIGHT == '1').map(x => x.V1)' \; annotatevariants expr -c 'va.andrea.test = global.GWAS_height.toSet.contains(va.andrea.genename)' \`. The shell was eliding the single quote and we were comparing a String and an Int. That should be an error.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/388#issuecomment-219845067:314,test,test,314,https://hail.is,https://github.com/hail-is/hail/issues/388#issuecomment-219845067,1,['test'],['test']
Testability,"Here is what I get when invoking pyspark. $ pyspark; Python 2.7.13 (default, Jul 18 2017, 09:16:53) ; [GCC 4.2.1 Compatible Apple LLVM 8.0.0 (clang-800.0.42.1)] on darwin; Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; Using Spark's default log4j profile: org/apache/spark/log4j-defaults.properties; Setting default log level to ""WARN"".; To adjust logging level use sc.setLogLevel(newLevel).; 17/08/02 13:56:47 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable; 17/08/02 13:56:47 WARN SparkConf: ; SPARK_CLASSPATH was detected (set to '/Users/ih/languages/hail.is/build/libs/hail-all-spark.jar').; This is deprecated in Spark 1.0+. Please instead use:; - ./spark-submit with --driver-class-path to augment the driver classpath; - spark.executor.extraClassPath to augment the executor classpath; ; 17/08/02 13:56:47 WARN SparkConf: Setting 'spark.executor.extraClassPath' to '/Users/ih/languages/hail.is/build/libs/hail-all-spark.jar' as a work-around.; 17/08/02 13:56:47 WARN SparkConf: Setting 'spark.driver.extraClassPath' to '/Users/ih/languages/hail.is/build/libs/hail-all-spark.jar' as a work-around.; Welcome to; ____ __; / __/__ ___ _____/ /__; _\ \/ _ \/ _ `/ __/ '_/; /__ / .__/\_,_/_/ /_/\_\ version 2.0.2; /_/. Using Python version 2.7.13 (default, Jul 18 2017 09:16:53); SparkSession available as 'spark'",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/2062#issuecomment-319749996:341,log,log,341,https://hail.is,https://github.com/hail-is/hail/issues/2062#issuecomment-319749996,2,['log'],"['log', 'logging']"
Testability,Here's a clear instance of buffer corruption after a transient error (in this case an SSLException). https://batch.hail.is/batches/7996481/jobs/182741; ```; 2023-09-13 16:37:36.612 JVMEntryway: INFO: is.hail.JVMEntryway received arguments:; 2023-09-13 16:37:36.613 JVMEntryway: INFO: 0: /hail-jars/gs:__hail-query-ger0g_jars_be9d88a80695b04a2a9eb5826361e0897d94c042.jar.jar; 2023-09-13 16:37:36.613 JVMEntryway: INFO: 1: is.hail.backend.service.Main; 2023-09-13 16:37:36.613 JVMEntryway: INFO: 2: /batch/1c00c7157d4d41bcbf508f12d75329b1; 2023-09-13 16:37:36.613 JVMEntryway: INFO: 3: /batch/1c00c7157d4d41bcbf508f12d75329b1/log; 2023-09-13 16:37:36.613 JVMEntryway: INFO: 4: gs://hail-query-ger0g/jars/be9d88a80695b04a2a9eb5826361e0897d94c042.jar; 2023-09-13 16:37:36.613 JVMEntryway: INFO: 5: worker; 2023-09-13 16:37:36.613 JVMEntryway: INFO: 6: gs://gnomad-tmp-4day/parallelizeAndComputeWithIndex/s_yyHm37RY7YTSWH29gP5SM0RwKxgs9EXbg9_YMf7ho=; 2023-09-13 16:37:36.613 JVMEntryway: INFO: 7: 38854; 2023-09-13 16:37:36.613 JVMEntryway: INFO: 8: 47960; 2023-09-13 16:37:36.613 JVMEntryway: INFO: Yielding control to the QoB Job.; 2023-09-13 16:37:36.614 Worker$: INFO: is.hail.backend.service.Worker be9d88a80695b04a2a9eb5826361e0897d94c042; 2023-09-13 16:37:36.614 Worker$: INFO: running job 38854/47960 at root gs://gnomad-tmp-4day/parallelizeAndComputeWithIndex/s_yyHm37RY7YTSWH29gP5SM0RwKxgs9EXbg9_YMf7ho= with scratch directory '/batch/1c00c7157d4d41bcbf508f12d75329b1'; 2023-09-13 16:37:36.617 GoogleStorageFS$: INFO: Initializing google storage client from service account key; 2023-09-13 16:37:36.821 services: WARN: A limited retry error has occured. We will automatically retry 4 more times. Do not be alarmed. (next delay: 1938). The most recent error was javax.net.ssl.SSLException: Connection reset.; 2023-09-13 16:37:38.893 WorkerTimer$: INFO: readInputs took 2278.496020 ms.; 2023-09-13 16:37:38.893 : INFO: RegionPool: initialized for thread 9: pool-2-thread-1; 2023-09-13 16:37:38.903 ,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13356#issuecomment-1719508553:624,log,log,624,https://hail.is,https://github.com/hail-is/hail/issues/13356#issuecomment-1719508553,1,['log'],['log']
Testability,"Here's a larger rewrite of Github readme, ready for feedback. The gitter links reflect hail and hail-dev as we want them to be, so before merging we should rename hail to hail-dev and create hail. I also think it'd be good to give a bit more context for users on what ""pre-alpha, very active dev"" does and does not mean. In particular, that Hail is usable and tested now, but liable to change in non backward-compatible ways. Thoughts on including / wording this?. We should also consider moving the Roadmap somewhere on the forum. I think the development forum is a good place for more detailed instructions on collaboration (forking, etc) and best practices.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/699#issuecomment-243136925:360,test,tested,360,https://hail.is,https://github.com/hail-is/hail/pull/699#issuecomment-243136925,1,['test'],['tested']
Testability,"Here's a link with an absolute time window: https://cloudlogging.app.goo.gl/gXAWZpZtUiV8jphXA. This is the assertion's stack trace:; ```; at scala.Predef$.assert(Predef.scala:208); at is.hail.QoBOutputStreamManager.createOutputStream(QoBAppender.scala:38); at org.apache.logging.log4j.core.appender.OutputStreamManager.getOutputStream(OutputStreamManager.java:165); at org.apache.logging.log4j.core.appender.OutputStreamManager.writeToDestination(OutputStreamManager.java:250); at org.apache.logging.log4j.core.appender.OutputStreamManager.flushBuffer(OutputStreamManager.java:283); at org.apache.logging.log4j.core.appender.OutputStreamManager.flush(OutputStreamManager.java:294); at org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender.directEncodeEvent(AbstractOutputStreamAppender.java:217); at org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender.tryAppend(AbstractOutputStreamAppender.java:208); at org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender.append(AbstractOutputStreamAppender.java:199); at org.apache.logging.log4j.core.config.AppenderControl.tryCallAppender(AppenderControl.java:161); ```. And the line of our code that triggers the logger appender:; ```; is.hail.JVMEntryway$2.run(JVMEntryway.java:139); ```. On that line, we should have already evaluated line 97:; ```; QoBOutputStreamManager.changeFileInAllAppenders(logFile);; ```; Which updates the filename for all `QoBOutputStreamManager`s. We should be the only ones allocating `QoBOutputStreamManager` (it has no magic annotations, we don't pass its constructor anywhere). We should only allocate `QoBOutputStreamManager` in its associated object. We always put it into the map in `getInstance`. We don't synchronize the other methods though, so that could be the issue? If we have a stale version of that map?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13242#issuecomment-1703383030:107,assert,assertion,107,https://hail.is,https://github.com/hail-is/hail/issues/13242#issuecomment-1703383030,12,"['assert', 'log']","['assert', 'assertion', 'logFile', 'logger', 'logging']"
Testability,"Here's a typical interaction for a current 2.1.0 user:; ```bash; dking@wmb16-359 # gradle -Dspark.verison=2.1.0 compileScala. FAILURE: Build failed with an exception. * Where:; Build file '/Users/dking/projects/hail2/build.gradle' line: 39. * What went wrong:; A problem occurred evaluating root project 'hail'.; > Please generate a gradle.properties file first by executing ./configure. * Try:; Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. BUILD FAILED. Total time: 1.781 secs; 1 dking@wmb16-359 # ./configure; With what version of Spark will you run Hail? (default: 2.0.2); 2.1.0; dking@wmb16-359 # gradle -Dspark.version=2.1.0 compileScala. FAILURE: Build failed with an exception. * Where:; Build file '/Users/dking/projects/hail2/build.gradle' line: 42. * What went wrong:; A problem occurred evaluating root project 'hail'.; > The spark version must now be explicitly specified in the `gradle.properties`; file. Do *not* specify it with `-Dspark.version`. This version *must* match the; version of the spark installed on the machine or cluster that will execute; hail. You can override the setting in `gradle.properties` with a command line; like:. ./gradlew -PsparkVersion=2.1.1 shadowJar. The previous implicit, default spark version was 2.0.2. * Try:; Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. BUILD FAILED. Total time: 1.778 secs; dking@wmb16-359 # gradle compileScala; The Task.leftShift(Closure) method has been deprecated and is scheduled to be removed in Gradle 5.0. Please use Task.doLast(Action) instead.; at build_2mbp15794fq4sj14khxclz0wz.run(/Users/dking/projects/hail2/build.gradle:168); :compileJava UP-TO-DATE; :nativeLib; (cd libsimdpp-2.0-rc2 && cmake .); -- Configuring done; -- Generating done; -- Build files have been written to: /Users/dking/projects/hail2/src/main/c/libsimdpp-2.0-rc2; :compileScala UP-TO-DATE. BUILD SUCCESSFUL. Total ",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1613#issuecomment-290201020:495,log,log,495,https://hail.is,https://github.com/hail-is/hail/pull/1613#issuecomment-290201020,1,['log'],['log']
Testability,"Here's an executable test script. ```; import timeit; import hail as hl. setup = '''; import hail as hl; '''; hl.utils.get_1kg('data/'). print(""variant QC""); vqc = timeit.timeit('''; mt = hl.read_matrix_table('data/1kg.mt'); mt = hl.variant_qc(mt); mt.write(""variant_qc.mt"", overwrite=True); ''', number=1, setup=setup); print(""filter variants for QC""); filter = timeit.timeit('''; mt = hl.read_matrix_table('variant_qc.mt'); non_autosomal = [hl.parse_locus_interval(x); for x in (hl.get_reference(""GRCh37"").mt_contigs +; hl.get_reference(""GRCh37"").x_contigs +; hl.get_reference(""GRCh37"").y_contigs)]; mt = hl.filter_intervals(mt, non_autosomal, keep=False); mt = mt.filter_rows(hl.is_snp(mt.alleles[0], mt.alleles[1])); mt = mt.filter_rows(~ hl.is_mnp(mt.alleles[0], mt.alleles[1])); mt = mt.filter_rows(~ hl.is_indel(mt.alleles[0], mt.alleles[1])); mt = mt.filter_rows(~ hl.is_complex(mt.alleles[0], mt.alleles[1])); mt = mt.filter_rows(mt.variant_qc.AF[1] >= 0.01); mt = mt.filter_rows(mt.variant_qc.AF[1] <= 0.99); mt = mt.filter_rows(mt.variant_qc.call_rate >= 0.98); mt.write(""mt.filtered"", overwrite=True); ''', number=1, setup=setup); print(""repartition""); repart = timeit.timeit('''; mt = hl.read_matrix_table('mt.filtered'); mt = mt.repartition(100); mt.write(""repartitioned.mt"", overwrite=True); ''', number=1, setup=setup); print(""extract pruned set of variants""); ldprune = timeit.timeit('''; mt = hl.read_matrix_table('repartitioned.mt'); pruned_tbl = hl.ld_prune(mt.GT, r2 = 0.2, bp_window_size = 1000000, memory_per_core = 1000); pruned_tbl.write(""pruned_tbl.ht""); ''', number=1, setup=setup); print(""write filtered matrix table""); writefilt = timeit.timeit('''; mt = hl.read_matrix_table('repartitioned.mt'); pruned_tbl = hl.read_table('pruned_tbl.ht'); mt = mt.filter_rows(hl.is_defined(pruned_tbl[mt.row_key])); mt.write('pruned.mt', overwrite=True); ''', number=1, setup=setup). print(f'''; vqc {vqc}; filter {filter}; repart {repart}; ldprune {ldprune}; writefilt {writefilt}; '''",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4506#issuecomment-451536640:21,test,test,21,https://hail.is,https://github.com/hail-is/hail/issues/4506#issuecomment-451536640,1,['test'],['test']
Testability,"Here's an implementation of a *split* SVCF-VCF courtesy of Tim P:; ```python3; import hail as hl. from constants import *. hl.init(log='/tmp/hail.log'). vds = hl.vds.read_vds(vds_path). hl.get_reference('GRCh38').add_sequence(get_fasta()). # load metadata structure from arbitrary input GVCF; metadata = hl.get_vcf_metadata(gvcf_paths[0]); metadata['format']['LEN'] = {; 'Description': 'Reference block length',; 'Number': '1',; 'Type': 'Integer',; }. # create reference VCF; rd = vds.reference_data; rd = rd.key_rows_by(locus=rd.locus, alleles=[rd.locus.sequence_context()]); rd = rd.transmute_entries(LEN=rd.END - rd.locus.position + 1); hl.export_vcf(rd, reference_svcr_vcf_path, metadata=metadata,; tabix=True). # create variant VCF; vd = vds.variant_data. # recode gvcf_info struct to top-level fields for compatibility with VCF format limitations; info_fields = list(vd.gvcf_info); mt = vd.transmute_entries(**{f'INFO_{x}': vd.gvcf_info[x] for x in info_fields}). # recode boolean info fields as integers to support VCF spec; bool_fields = [fd for fd in mt.entry if mt[fd].dtype == hl.tbool]; mt = mt.transmute_entries(**{fd: hl.int(mt[fd]) for fd in bool_fields}). def transform_number(number):; if number in {'A', 'R', 'G'}:; return f'LOCAL_{number}'; return number. for info_fd in info_fields:; info = metadata['info'][info_fd]; if info['Type'] == 'Flag':; info['Type'] = 'Integer'; info['Number'] = '1'; metadata['format'][f'INFO_{info_fd}'] = info. for d in metadata['format'].values():; d['Number'] = transform_number(d.get('Number')). hl.export_vcf(mt, variant_svcr_vcf_path, metadata=metadata,; tabix=True); ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/14010#issuecomment-1823581472:131,log,log,131,https://hail.is,https://github.com/hail-is/hail/issues/14010#issuecomment-1823581472,2,['log'],['log']
Testability,Here's another example batch of selecting all parameterisations of one benchmark and overriding the number of jobs and iterations to just one; https://batch.hail.is/batches/8182105,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14565#issuecomment-2145750060:71,benchmark,benchmark,71,https://hail.is,https://github.com/hail-is/hail/pull/14565#issuecomment-2145750060,1,['benchmark'],['benchmark']
Testability,"Here's my current rough list of things to be done before hail2 is as usable as hail1. It's still pretty long!. ## Necessary code work:; - Add the rest of the core methods from VDS/KT to api2 (#2591 does most for KT, order_by is the only outstanding KT method that's not moved to table there. Same needs to be done for VDS, this isn't too hard); - Add the non-core methods to `hail.methods` / `hail.genetics.methods`; - some stuff here is much harder than the rest, like `filter_alleles`; - This is mostly just labor, but some require more thought than others, like moving TDT to use hail2 expr; - Support intervals in the `index_*` methods. It's possible now to join by locus, but not using the `annotateLociTable` fast path.; - Move to Python 3 so argument order is preserved; - Test the hail2 api much more rigorously than we do now (at the very least, call each parameter branch for each method!; - Typecheck the expression language. This isn't super trivial, and making a nice system to integrate our `typecheck` module and expressions will require some thoughtful design work.; - Some more organization around the package: monkey patching with `import hail.genetics` is an idea I like, but want to think about the edge cases first. ## Documentation; - Document the `index_*` methods / joins; - Translate the _Hail Overview_ tutorial; - Make new tutorials to replace the 2 expr ones we have; - Fill in docs on api2 methods (they're not all there yet); - Fill in docs on expression language (things like __mul__ on NumericExpression haven't been documented); - Write ""integrative docs"" that provide how-tos for common types of workflows. Show the power of annotate / select / group_by/aggregate, etc. ## Longer term QoL:; - Move over tests to Python as much as possible. I looked at the linear regression suite and it can be moved entirely into Python without many problems.; - Write a type parser in Python. The nested calls into the JVM for Type._from_java make the library feel extremely sluggis",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2588#issuecomment-352190554:780,Test,Test,780,https://hail.is,https://github.com/hail-is/hail/pull/2588#issuecomment-352190554,1,['Test'],['Test']
Testability,"Here's my proposed interface (names to be changed, I'm terrible at those). ```; case class WithSource[T](value: T, source: InputSource) {; def map[U](f: T => U): WithSource[U] = {; try {; copy[U](value = f(value)); } catch {; case e: Exception => source.wrapError(e); }; }; }. abstract class InputSource {; def wrapError(e: Exception): Nothing; }. case class TextSource(line: String, file: String, position: Option[Int]) extends InputSource {; def wrapError(e: Exception): Nothing = {; val msg = e match {; case _: FatalException => e.getMessage; case _ => s""caught $e""; }; val lineToPrint =; if (line.length > 62); line.take(59) + ""...""; else; line. log.error(; s""""""; |$file${position.map(ln => "":"" + (ln + 1)).getOrElse("""")}: $msg; | offending line: $line"""""".stripMargin); fatal(; s""""""; |$file${position.map(ln => "":"" + (ln + 1)).getOrElse("""")}: $msg; | offending line: $lineToPrint"""""".stripMargin); }; }; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/462#issuecomment-233012302:651,log,log,651,https://hail.is,https://github.com/hail-is/hail/pull/462#issuecomment-233012302,1,['log'],['log']
Testability,"Here's some examples:. Original:; ```; from hail import *; hc = HailContext(min_block_size=6); test_resources = 'src/test/resources'. cov = hc.import_table(test_resources + '/regressionLinear.cov',; types={'Cov1': TDouble(), 'Cov2': TDouble()}).key_by('Sample'). phen1 = hc.import_table(test_resources + '/regressionLinear.pheno', missing='0',; types={'Pheno': TDouble()}).key_by('Sample'); phen2 = hc.import_table(test_resources + '/regressionLogisticBoolean.pheno', missing='0',; types={'isCase': TBoolean()}).key_by('Sample'). regression = (hc.import_vcf(test_resources + '/regressionLinear.vcf'); .split_multi(); .annotate_samples_table(cov, root='sa.cov'); .annotate_samples_table(phen1, root='sa.pheno.Pheno'); .annotate_samples_table(phen2, root='sa.pheno.isCase')).with_id('regression'). vds_assoc = (regression; .annotate_samples_expr('sa.culprit = gs.filter(g => v == Variant(""1"", 1, ""C"", ""T"")).map(g => g.gt).collect()[0]'); .annotate_samples_expr('sa.pheno.PhenoLMM = (1 + 0.1 * sa.cov.Cov1 * sa.cov.Cov2) * sa.culprit').with_id('vds_assoc')). vds_kinship = vds_assoc.filter_variants_expr('v.start < 4'); km = vds_kinship.rrm(False, False).with_id('km'); vds_assoc = vds_assoc.lmmreg(km, 'sa.pheno.PhenoLMM', ['sa.cov.Cov1', 'sa.cov.Cov2']); vds_assoc.export_variants('/tmp/lmmreg3.tsv', 'Variant = v, va.lmmreg.*'); ```. History output:; ```; # 2017-08-01T20:23:38.202686; # version: devel-37d32d3. hc = (HailContext(min_block_size=6)). regression = (hc; .import_vcf('src/test/resources/regressionLinear.vcf'); .split_multi(); .annotate_samples_table(hc; .import_table('src/test/resources/regressionLinear.cov', types={'Cov1': TDouble(), 'Cov2': TDouble()}); .key_by('Sample'), root='sa.cov'); .annotate_samples_table(hc; .import_table('src/test/resources/regressionLinear.pheno', types={'Pheno': TDouble()}, missing='0'); .key_by('Sample'), root='sa.pheno.Pheno'); .annotate_samples_table(hc; .import_table('src/test/resources/regressionLogisticBoolean.pheno', types={'isCase': TBoolean(",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2060#issuecomment-319533736:117,test,test,117,https://hail.is,https://github.com/hail-is/hail/pull/2060#issuecomment-319533736,1,['test'],['test']
Testability,Here's the output of grepping for `dmk9z` in the root of the hail repo:; ```; config.mk:HAIL_TEST_GCS_BUCKET := hail-test-dmk9z. ```,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10807#issuecomment-905867503:117,test,test-,117,https://hail.is,https://github.com/hail-is/hail/pull/10807#issuecomment-905867503,1,['test'],['test-']
Testability,"Here's what _local_ looks like now. Note that I've already converted to a `vds` this time. ```; dking@wmb16-359 # rm -rf foo && time ../hail/build/install/hail/bin/hail read -i profile.vds ibd -o 'foo' ; hail: info: running: read -i profile.vds; [Stage 1:> (0 + 0) / 4]SLF4J: Failed to load class ""org.slf4j.impl.StaticLoggerBinder"".; SLF4J: Defaulting to no-operation (NOP) logger implementation; SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.; [Stage 1:============================================> (3 + 1) / 4]hail: info: running: ibd -o foo; [Stage 8:=====================================================> (210 + 4) / 214]hail: info: timing:; read: 3.047s; ibd: 4m35.1s; ../hail/build/install/hail/bin/hail read -i profile.vds ibd -o 'foo' 924.50s user 16.11s system 333% cpu 4:42.04 total; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/738#issuecomment-249995538:375,log,logger,375,https://hail.is,https://github.com/hail-is/hail/pull/738#issuecomment-249995538,1,['log'],['logger']
Testability,"Hey @cseed,. I tried running it as I need a test version of the 5.5K WGS data but it fails:; `hail-spark-lf read -i MacArthur_Merck_Finns.vds head --keep 10000 write -o MacArthur_Merck_Finns.head.vds; hail: info: running: read -i MacArthur_Merck_Finns.vds; [Stage 0:======================================================>(134 + 1) / 135]hail: info: running: head --keep 10000; hail: info: running: write -o MacArthur_Merck_Finns.head.vds; hail: write: caught exception: Job aborted.`. Got the same error on both dataflow and Cray. Also, my implementation somehow fails on Cray (different error) but not on dataflow....yay!",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/446#issuecomment-234642054:44,test,test,44,https://hail.is,https://github.com/hail-is/hail/pull/446#issuecomment-234642054,1,['test'],['test']
Testability,"Hey @daniel-goldstein, super keen for this fix! Anything we can do on our side to test this, or ease this PR getting merged and triggering a release?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14576#issuecomment-2177245584:82,test,test,82,https://hail.is,https://github.com/hail-is/hail/pull/14576#issuecomment-2177245584,1,['test'],['test']
Testability,"Hey @daniel-goldstein, the `ci-test` is marked as failing on GitHub, but the CI job looks like it finished in a complete state.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12889#issuecomment-1512194141:31,test,test,31,https://hail.is,https://github.com/hail-is/hail/pull/12889#issuecomment-1512194141,1,['test'],['test']
Testability,"Hey @natestockham,. I'm glad you resolved the breeze issue. I imagine you were encountering a situation where the native libraries were not extant / not where expected / not the correct architecture. Three of the newly failing tests are related to plink. The output included in `tests.zip` indicates that you're using a fairly old version of plink,; ```; PLINK v1.90b1b 64-bit (20 May 2014); ```; Our testing server uses versions of plink from 2016. It's possible these tests are over constrained and need to be relaxed. I will investigate the precision required to pass the two tests in `IBDSuite`. However, part of one failure in the `IBDSuite` and the failure in the `ImputeSexSuite` are both caused by plink failing to produce output on certain input files. I strongly suspect these are bugs in plink version `1.90b1b` because plink `1.90b3.38` (from 2016, the version used on our test server) does not err on such files. This leaves one final test: `LinearMixedRegressionSuite.genAndFitLMM`. This is the test I have been writing about above and I can confirm that this is a bug (or, perhaps, overly precise test) **on our end** that we are actively investigating. Hail is usable even though the tests do not pass (you can run `./gradlew shadowJar` to produce a working jar), but I will advise you against relying on the results of `lmmreg` until we can confirm why this test is failing.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1419#issuecomment-281861771:227,test,tests,227,https://hail.is,https://github.com/hail-is/hail/issues/1419#issuecomment-281861771,11,['test'],"['test', 'testing', 'tests']"
Testability,"Hey @poneill !. `-O`/`PYTHONOPTIMIZE` is explicitly defined as the ""turn off asserts"" option in [the docs](https://docs.python.org/3/using/cmdline.html#cmdoption-O). If you disable asserts, you'll get even more inscrutable errors. I recommend against doing that. If you see any `assert(x, y)` in the code base, please file a PR or a bug. We'll fix it. We will not replace asserts with if-raise. ---. As to the bug you've found: yes this is a bug in Hail. We incorrectly assume that if there is at least one dataset with the right version and at least one dataset with the right reference genome that there's a dataset with the right version *and* reference genome. That logic is obviously false. I'll have someone fix this in the next couple weeks. As to the root issue: the Hail annotation database doesn't have a GRCh38 version of `gnomad_pca_variant_loadings` version 2.1. This is because [gnomAD](https://gnomad.broadinstitute.org/downloads#v2-liftover) hasn't published a GRCh38 version of their 2.1 variant loadings.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12952#issuecomment-1530239230:77,assert,asserts,77,https://hail.is,https://github.com/hail-is/hail/issues/12952#issuecomment-1530239230,5,"['assert', 'log']","['assert', 'asserts', 'logic']"
Testability,"Hey @tmwong2003, we recently changed our CI setup and there's a little more work to do to test external PRs. I'll try to have someone finish this in the next couple of days. Thanks for your patience.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6262#issuecomment-500610415:90,test,test,90,https://hail.is,https://github.com/hail-is/hail/pull/6262#issuecomment-500610415,1,['test'],['test']
Testability,"Hey @tomwhite, sorry for the massive delay. There was some concern about not having instructions generic to any cluster in the docs, so I've restructured your PR a bit more to capture the generic Spark cluster instructions and then have a separate section on getting started with a Cloudera cluster. I also opted for ""Cloudera"" instead of ""CDH"" because I don't think our users will recognize the acronym. Does that seem OK to you?. I made my changes as [a PR into your branch](https://github.com/tomwhite/hail/pull/1/files). Also, don't worry about the failing integration test, that's a CI issue on our end. It should resolve it self after the next new commit to your branch.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1452#issuecomment-290546429:573,test,test,573,https://hail.is,https://github.com/hail-is/hail/pull/1452#issuecomment-290546429,1,['test'],['test']
Testability,"Hi @Sun-shan,. First, I should note that we do not currently test hail against Spark version 2.2.0, I recommend using Spark 2.1.1 or 2.0.2. Spark versions aside, the error you encountered is unrelated to Spark, as far as I know. What version of the `decorator` package is installed on your machine? `decorator` version 4.0.10 should work correctly. Unfortunately, we are still looking for a python dependency management solution. My apologies that you've run into this issue.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/2076#issuecomment-336903534:61,test,test,61,https://hail.is,https://github.com/hail-is/hail/issues/2076#issuecomment-336903534,1,['test'],['test']
Testability,"Hi @Sun-shan,. I am unsure what is wrong. I tried to replicate your environment as follows:; - I downloaded the CentOS 7.2 1511 [""everything ISO""](http://isoredirect.centos.org/centos/7/isos/x86_64/CentOS-7-x86_64-Everything-1511.iso); - On a VM, I installed CentOS using that iso; - I downloaded the Gradle ""Binary distribution"" from the [Gradle website](https://gradle.org/gradle-download/); - I downloaded a zip file of the hail repository from github; - In the hail directory, I issued `gradle installDist`, which succeeded; - In the hail directory, I issued `gradle check`, which succeeded except for the five tests that require PLINK or R. I did not see any undefined symbol errors. Unfortunately, further debugging your environment is outside of the scope of this project. The only remaining recommendation I can give is to use the (slow) reference implementations of BLAS functions. To use the reference implementations, run the following command instead of `gradle check`:. ``` bash; gradle -Dcom.github.fommil.netlib.BLAS=com.github.fommil.netlib.NativeRefBLAS check; ```. ---. The following details about the VM may be helpful if you attempt to modify your system. ```; [dking@cg-router1 hail-master]$ rpm --query centos-release; centos-release-7-2.1511.el7.centos.2.10.x86_64; ```. ```; [dking@cg-router1 hail-master]$ hostnamectl; Static hostname: cg-router1.broadinstitute.org; Icon name: computer-vm; Chassis: vm; Machine ID: 0d856e1616ee4961bfc1b76c6ec420a1; Boot ID: 1fc0d1ffc3d24218a81ea8fc5abd9776; Virtualization: kvm; Operating System: CentOS Linux 7 (Core); CPE OS Name: cpe:/o:centos:centos:7; Kernel: Linux 3.10.0-327.el7.x86_64; Architecture: x86-64; ```. The output of `yum list installed` is in [installed-packages.txt](https://github.com/broadinstitute/hail/files/422887/installed-packages.txt)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/565#issuecomment-240446097:615,test,tests,615,https://hail.is,https://github.com/hail-is/hail/issues/565#issuecomment-240446097,1,['test'],['tests']
Testability,Hi @daniel-goldstein! I'm actually running this through Amazon CodeBuild so these are logs from an actual Amazon Linux 2 Image running on an EC2 instance build... So I don't know if that makes a difference here. I see what you're saying about the `xargs -0` however wouldn't this still be a change to the installation files for Hail or is that something that's likely happening in one of the files that I'm using and just haven't found it yet?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12136#issuecomment-1255333669:86,log,logs,86,https://hail.is,https://github.com/hail-is/hail/pull/12136#issuecomment-1255333669,1,['log'],['logs']
Testability,Hi @danking! Do you know which test is failing?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10647#issuecomment-876152547:31,test,test,31,https://hail.is,https://github.com/hail-is/hail/pull/10647#issuecomment-876152547,1,['test'],['test']
Testability,"Hi @danking, I see the initial CI result failed, but I'm unable to login and see what the failure is. I signed in to google with my popgen account, and get 504 Gateway Time-out on the `auth.hail.is/oauth2callback`, I imagine because I don't have an account there.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10085#issuecomment-784542735:67,log,login,67,https://hail.is,https://github.com/hail-is/hail/pull/10085#issuecomment-784542735,1,['log'],['login']
Testability,"Hi @danking, sorry this took me a little to test. I think there's a problem with the latest changes, in my dev-deploy, it failed on the '`create_certs` and `create_accounts`, with the error:. ```; FileNotFoundError: [Errno 2] No such file or directory: '/usr/local/lib/python3.7/dist-packages/hailtop/hail_version'; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10085#issuecomment-791067814:44,test,test,44,https://hail.is,https://github.com/hail-is/hail/pull/10085#issuecomment-791067814,1,['test'],['test']
Testability,"Hi @danking, thanks for this. On the topic of asserts, there are really two interacting issues:. 1. Asserts are intended to ensure invariants, i.e. conditions that should always be true. In correct code, assertions should never raise so disabling them should have no consequences at runtime. In practice, however, they are often casually used to catch value errors, which can be expected to occur if a user-facing method receives bad/nonsensical inputs (e.g. here: https://github.com/hail-is/hail/blob/1940547d35ddddb084ad52684e36153c1e03a331/hail/python/hailtop/hailctl/dataproc/diagnose.py#L62); 2. Python's language design allows anyone calling your code to disable asserts for optimization purposes, because disabling asserts should never change the semantics of the program. Putting these two features together, you can arrive at a situation where a user thinks they're turning off asserts (which should never raise anyway) and instead stops catching value errors (whose absence can never be guaranteed). All that said, if the final answer is: ""if you invoke `-O` you deserve what's coming"", I'm happy to drop it :). Thanks for taking a look at the example. If I understand you correctly, it sounds like I passed the wrong inputs to the function, in which case it might be clearer to raise a ValueError instead of an AssertionError in the end. On a closer look, it seems like most of the instances of `assert(x, y)` are actually in scala code-- my mistake. Thanks again for looking into this.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12952#issuecomment-1531675665:46,assert,asserts,46,https://hail.is,https://github.com/hail-is/hail/issues/12952#issuecomment-1531675665,8,"['Assert', 'assert']","['AssertionError', 'Asserts', 'assert', 'assertions', 'asserts']"
Testability,"Hi @pettyalex, thank you for the detailed and thoughtful issue. Hopefully I can shed some light and address all your concerns. I think the assertion on Java 8 and 11 was an overly defensive precaution put in place some time ago, as hail uses some unsafe JVM APIs that have been deprecated for a while. But as you noted, the world goes on in Java 17 and I don't see a reason Hail shouldn't be compatible. Since most of our closest users use Hail on GCP Dataproc, we generally keep in lock-step with their platform which is unfortunately still on Java 11 so that is what we test against and officially support. Nevertheless, we should remove the restriction and add some light validation in CI against Java 17 and advertise it as unofficially supported until such a time that Dataproc moves to Java 17. Hopefully Spark 3.6 will force their hand. The release process for 0.2.129 is already underway but expect this to be resolved in 0.2.130. Thanks for your suggestions regarding bundling the JRE and the GC options, we'll definitely consider them. Regarding the `module-info.class` nonsense, my apologies. That just seems like a bug we should fix. I will create a separate tracking issue for that but I'm not yet sure where that will get prioritized. If it is more than an annoyance for you, please let us know. Regarding conda-forge, I don't think we currently have the bandwidth or demand (that we know of) to add more distribution systems. Again, this is something where hearing from the community is the best way to figure out how to direct our efforts. Hopefully this addresses your concerns. Please do follow up if I've missed anything or open more issues if you encounter new problems.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/14433#issuecomment-2030358704:139,assert,assertion,139,https://hail.is,https://github.com/hail-is/hail/issues/14433#issuecomment-2030358704,2,"['assert', 'test']","['assertion', 'test']"
Testability,"Hi @williambrandler, it does seem like everyone is getting hit with this issue. We pinned Jinja2 to 3.0.3 once this broke our tests and it should be fixed now. I'm going to close this issue but if you still experience these problems on the latest release please re-open and we'll address it promptly.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/11705#issuecomment-1099734097:126,test,tests,126,https://hail.is,https://github.com/hail-is/hail/issues/11705#issuecomment-1099734097,1,['test'],['tests']
Testability,"Hi Chris, would you mind taking a look when you get a chance? I believe you might know the most about the functionality these are exercising. Do the new implementations look ok? Are they benchmarking equivalent functionality?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13956#issuecomment-1787480719:187,benchmark,benchmarking,187,https://hail.is,https://github.com/hail-is/hail/pull/13956#issuecomment-1787480719,1,['benchmark'],['benchmarking']
Testability,"Hi Jerome, this `AnnotationPathException` issue is something we've seen before. It seems to be caused sporadically by gradle's build caching, and can usually be fixed by running `gradle clean`. The tests that failed are probably the ones that require external tools available on the command line:; FisherExactSuite (requires Rscript); ImportPlinkSuite (requires plink 1.9); ExportPlinkSuite (requires plink 1.9); LoadBgenSuite (requires qctool)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/594#issuecomment-240384398:198,test,tests,198,https://hail.is,https://github.com/hail-is/hail/issues/594#issuecomment-240384398,1,['test'],['tests']
Testability,"Hi Tim,. What's the problem with this implementation? I've tested it and it works... On Wed, Sep 21, 2016 at 11:07 AM, Tim Poterba notifications@github.com; wrote:. > Laurent, I was totally wrong about being able to do this per-command --; > I'm really sorry. I thought that it would be possible to create a new; > configuration just for this command and use that, but this is only possible; > for HadoopConfigurations and not SparkContexts. Can you reopen the old; > PR? That model is our only option.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/hail-is/hail/pull/826#issuecomment-248641543, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/ADVxgcPW4xK16W3DlZfdE5U6RTcVmJthks5qsUhMgaJpZM4KC1O-; > .",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/826#issuecomment-248643185:59,test,tested,59,https://hail.is,https://github.com/hail-is/hail/pull/826#issuecomment-248643185,1,['test'],['tested']
Testability,"Hi Vlad, thanks for the PR! I'm afraid there are some internal migrations we're making that are probably not clear from just looking at the codebase. Are you up to date on our `main`? We've found working with `config.mk` cumbersome because it can be stale if you switch between different instances of Batch (e.g. one deployed in azure and the other in GCP). > DOCKER_ROOT_IMAGE used to build batch workers and benchmark. I've recently updated the scripts for building the batch worker VM image to query kubernetes directly and we should probably do the same for benchmark. > HAIL_TEST_GCS_BUCKET used to build query; KUBERNETES_SERVER_URL used to build amundsen. These services are both currently deleted in our `main`. > PROJECT, ZONE, REGION are probably not need, but might make sense to add for consistency. These will fail in an Azure deployment, and while we want to move away from `config.mk` entirely, we would at least want it to contain configurations that are valid across clouds.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11371#issuecomment-1041941055:410,benchmark,benchmark,410,https://hail.is,https://github.com/hail-is/hail/pull/11371#issuecomment-1041941055,2,['benchmark'],['benchmark']
Testability,"Hi all,. Here's the error message that I get when I go to install all of my python packages (scipy/uvloop/etc). ```; cp -f build/libs/hail-all-spark.jar python/hail/backend/hail-all-spark.jar; --; 872 | amazon-ebs: rm -rf build/deploy; 873 | amazon-ebs: mkdir -p build/deploy; 874 | amazon-ebs: mkdir -p build/deploy/src; 875 | amazon-ebs: cp ../README.md build/deploy/; 876 | amazon-ebs: rsync -r \; 877 | amazon-ebs: --exclude '.eggs/' \; 878 | amazon-ebs: --exclude '.pytest_cache/' \; 879 | amazon-ebs: --exclude '__pycache__/' \; 880 | amazon-ebs: --exclude 'benchmark_hail/' \; 881 | amazon-ebs: --exclude '.mypy_cache/' \; 882 | amazon-ebs: --exclude 'docs/' \; 883 | amazon-ebs: --exclude 'dist/' \; 884 | amazon-ebs: --exclude 'test/' \; 885 | amazon-ebs: --exclude '*.log' \; 886 | amazon-ebs: python/ build/deploy/; 887 | amazon-ebs: # Clear the bdist build cache before building the wheel; 888 | amazon-ebs: cd build/deploy; rm -rf build; python3 setup.py -q sdist bdist_wheel; 889 | ==> amazon-ebs: /usr/local/lib/python3.7/site-packages/setuptools/installer.py:30: SetuptoolsDeprecationWarning: setuptools.installer is deprecated. Requirements should be satisfied by a PEP 517 installer.; 890 | ==> amazon-ebs: SetuptoolsDeprecationWarning,; 891 | ==> amazon-ebs: /usr/local/lib/python3.7/site-packages/setuptools/command/install.py:37: SetuptoolsDeprecationWarning: setup.py install is deprecated. Use build and pip and other standards-based tools.; 892 | ==> amazon-ebs: setuptools.SetuptoolsDeprecationWarning,; 893 | amazon-ebs: sed '/^pyspark/d' python/requirements.txt \| grep -v '^#' \| xargs python3 -m pip install -U; 894 | amazon-ebs: Collecting aiohttp==3.8.1; 895 | amazon-ebs: Downloading aiohttp-3.8.1-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl (1.1 MB); 896 | amazon-ebs: ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 1.1/1.1 MB 68.3 MB/s eta 0:00:00; 897 | amazon-ebs: Collecting aiohttp_session<2.8,>=2.7; 898 | amazon-eb",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12136#issuecomment-1255177691:737,test,test,737,https://hail.is,https://github.com/hail-is/hail/pull/12136#issuecomment-1255177691,2,"['log', 'test']","['log', 'test']"
Testability,"Hi thanks for the bug report, I'm investigating now. Unfortunately, Spark 2.1.0 is not included in our automated testing system. I will also set up automated testing of Spark 2.1.0 to prevent future regressions like this.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1419#issuecomment-281713988:113,test,testing,113,https://hail.is,https://github.com/hail-is/hail/issues/1419#issuecomment-281713988,2,['test'],['testing']
Testability,"Hi there @BioDCH, I reformatted your comment using [markdown code blocks](https://guides.github.com/features/mastering-markdown/#syntax). It looks like the unix user running `hail` does not have permission to edit `hail.log` file, this likely caused the other two errors. Please add `--log-file PATH` where `PATH` is a file path to which you have write access. For example:. ```; spark-submit --executor-memory 16g --executor-cores 4 --class org.broadinstitute.hail.driver.Main ******/hail-all-spark.jar ; --master yarn-client importvcf --log-file /user/hail/hail.log /user/hail/split_test.vcf splitmulti write -o /user/hail/split_test_1_1.vds exportvcf -o /user/hail/split_test_1_1.vcf; ```. Assuming you have write access to `/user/hail/hail.log`.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/825#issuecomment-250746848:220,log,log,220,https://hail.is,https://github.com/hail-is/hail/issues/825#issuecomment-250746848,5,['log'],"['log', 'log-file']"
Testability,"Hi!; This is an odd error message to get -- is your repository updated to the current master? There was an update to the `importannotations table` module a few weeks ago, before which the `-e` option didn't exist. . We are in the midst of a documentation reorganization, so I apologize if it's difficult to find things at the moment. From the cloned repository, all test files are at `src/test/resources/*`. . This command worked for me just now:. ```; hail importannotations table src/test/resources/variantAnnotations.alternateformat.tsv --impute -e '`Chromosome:Position:Ref:Alt`' write -o tmp.vds; ```. The `-e` argument uses an expression to specify how to construct a `Variant`, which in this case is just the column name since the type of that column is `Variant`. If we don't use the `--impute` argument, we can construct it with . ```; -e 'Variant(`Chromosome:Position:Ref:Alt`)'; ```. More info on that [here](https://github.com/broadinstitute/hail/blob/master/docs/commands/ImportAnnotations.md)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/561#issuecomment-238502640:366,test,test,366,https://hail.is,https://github.com/hail-is/hail/issues/561#issuecomment-238502640,3,['test'],['test']
Testability,"Hi, @danking ; I reconfigurated the spark cluster, with the cloudera spark : version 2.2.0.cloudera1; But I can't import hail this time, How can I fix it?. The test:; ```; >>> spark.sparkContext.master; u'yarn'. bash-4.2$ pyspark; WARNING: User-defined SPARK_HOME (/opt/cloudera/parcels/SPARK2-2.2.0.cloudera1-1.cdh5.12.0.p0.142354/lib/spark2) overrides detected (/opt/cloudera/parcels/SPARK2/lib/spark2).; WARNING: Running pyspark from user-defined location.; Python 2.7.5 (default, Nov 6 2016, 00:28:07) ; [GCC 4.8.5 20150623 (Red Hat 4.8.5-11)] on linux2; Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; Setting default log level to ""WARN"".; To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).; Welcome to; ____ __; / __/__ ___ _____/ /__; _\ \/ _ \/ _ `/ __/ '_/; /__ / .__/\_,_/_/ /_/\_\ version 2.2.0.cloudera1; /_/. Using Python version 2.7.5 (default, Nov 6 2016 00:28:07); SparkSession available as 'spark'.; >>> spark.sparkContext.master; u'yarn'; >>> import hail; Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; File ""/opt/Software/hail/python/hail/__init__.py"", line 1, in <module>; import hail.expr; File ""/opt/Software/hail/python/hail/expr.py"", line 3, in <module>; from hail.representation import Variant, AltAllele, Genotype, Locus, Interval, Struct, Call; File ""/opt/Software/hail/python/hail/representation/__init__.py"", line 1, in <module>; from hail.representation.variant import Variant, Locus, AltAllele; File ""/opt/Software/hail/python/hail/representation/variant.py"", line 2, in <module>; from hail.typecheck import *; File ""/opt/Software/hail/python/hail/typecheck/__init__.py"", line 1, in <module>; from check import *; File ""/opt/Software/hail/python/hail/typecheck/check.py"", line 1, in <module>; from decorator import decorator, getargspec; ImportError: cannot import name getargspec; >>> ; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/2076#issuecomment-336722486:160,test,test,160,https://hail.is,https://github.com/hail-is/hail/issues/2076#issuecomment-336722486,3,"['log', 'test']","['log', 'logging', 'test']"
Testability,"Hi, @danking; I follow the instruction in hail website to set the environment:; export SPARK_HOME=/opt/cloudera/parcels/SPARK2/lib/spark2;; Actually, the SPARK2 above is a soft link of the ""SPARK2-2.2.0.cloudera1-1.cdh5.12.0.p0.142354/"" in the same directory; Anyway,I will try to change it and test later",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/2076#issuecomment-337627831:295,test,test,295,https://hail.is,https://github.com/hail-is/hail/issues/2076#issuecomment-337627831,1,['test'],['test']
Testability,"Hi, Is there a plan to merge this branch in soon? We are testing out HAIL for some of our in-house pipelines and an ability to import bgens would be really handy.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/243#issuecomment-233953902:57,test,testing,57,https://hail.is,https://github.com/hail-is/hail/pull/243#issuecomment-233953902,1,['test'],['testing']
Testability,"Hi, danking, @danking I tried two log file pathes ,all had access permission, but the error still appeared. （1）HDFS file path ：/user/hail/hail.log， have access permission; -rwxrwxrwx 3 hdfs supergroup 0 2016-10-08 10:54 /user/hail/hail.log; （2）log file：local PATH， hava access permission; -rwxrwxrwx 1 root root 48523 Oct 8 11:42 hail.log. The error message was attached as follows ; [splitmulti_1_1.txt](https://github.com/hail-is/hail/files/517467/splitmulti_1_1.txt)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/825#issuecomment-252404979:34,log,log,34,https://hail.is,https://github.com/hail-is/hail/issues/825#issuecomment-252404979,5,['log'],['log']
Testability,"Hi, danking, the result is as follows:; ```; [root@tele-1 ~]# pyspark; Python 2.7.5 (default, Nov 6 2016, 00:28:07) ; [GCC 4.8.5 20150623 (Red Hat 4.8.5-11)] on linux2; Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; Using Spark's default log4j profile: org/apache/spark/log4j-defaults.properties; Setting default log level to ""WARN"".; To adjust logging level use sc.setLogLevel(newLevel).; 17/08/15 08:58:31 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable; 17/08/15 08:58:31 WARN SparkConf: ; SPARK_CLASSPATH was detected (set to '/opt/Software/hail/build/libs/hail-all-spark.jar').; This is deprecated in Spark 1.0+. Please instead use:; - ./spark-submit with --driver-class-path to augment the driver classpath; - spark.executor.extraClassPath to augment the executor classpath; ; 17/08/15 08:58:31 WARN SparkConf: Setting 'spark.executor.extraClassPath' to '/opt/Software/hail/build/libs/hail-all-spark.jar' as a work-around.; 17/08/15 08:58:31 WARN SparkConf: Setting 'spark.driver.extraClassPath' to '/opt/Software/hail/build/libs/hail-all-spark.jar' as a work-around.; Welcome to; ____ __; / __/__ ___ _____/ /__; _\ \/ _ \/ _ `/ __/ '_/; /__ / .__/\_,_/_/ /_/\_\ version 2.0.2; /_/. Using Python version 2.7.5 (default, Nov 6 2016 00:28:07); SparkSession available as 'spark'.; >>> sc.textFile(""/hail/test/BRCA1.raw_indel.vcf"").count(); Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; File ""/opt/Software/spark/spark-2.0.2-bin-hadoop2.6/python/pyspark/rdd.py"", line 1008, in count; return self.mapPartitions(lambda i: [sum(1 for _ in i)]).sum(); File ""/opt/Software/spark/spark-2.0.2-bin-hadoop2.6/python/pyspark/rdd.py"", line 999, in sum; return self.mapPartitions(lambda x: [sum(x)]).fold(0, operator.add); File ""/opt/Software/spark/spark-2.0.2-bin-hadoop2.6/python/pyspark/rdd.py"", line 873, in fold; vals = self.mapPartitions(func).collect(); File ""/opt/Software/",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/2076#issuecomment-322349367:338,log,log,338,https://hail.is,https://github.com/hail-is/hail/issues/2076#issuecomment-322349367,2,['log'],"['log', 'logging']"
Testability,"Hi, not sure if this is the right avenue, but I'd also like to report a similar `orjson.JSONDecodeError: unexpected character: line 1 column 1 (char 0)` bug first reported by https://discuss.hail.is/t/hail-fails-after-installing-it-on-a-single-computer/3653. Hail installed from https://anaconda.org/sfe1ed40/hail; EDIT: the same error occurs after `pip install hail` into a fresh conda env, which produced hail `version 0.2.130-bea04d9c79b5`. Terminal output: ; ```; Python 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0] on linux; Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; >>> import hail as hl; hl.init(); >>> hl.init(); SLF4J: Failed to load class ""org.slf4j.impl.StaticLoggerBinder"".; SLF4J: Defaulting to no-operation (NOP) logger implementation; SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.; Running on Apache Spark version 3.4.1; SparkUI available at http://xxxx:xxxx; Welcome to; __ __ <>__; / /_/ /__ __/ /; / __ / _ `/ / /; /_/ /_/\_,_/_/_/ version 0.2.127-d18228b9bc5b; LOGGING: writing to xxxx.log; >>> hl.utils.range_table(10).collect(); Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; File ""<decorator-gen-1234>"", line 2, in collect; File ""/xxxx/lib/python3.10/site-packages/hail/typecheck/check.py"", line 584, in wrapper; return __original_func(*args_, **kwargs_); File ""/xxxx/lib/python3.10/site-packages/hail/table.py"", line 2213, in collect; return Env.backend().execute(e._ir, timed=_timed); File ""/xxxx/lib/python3.10/site-packages/hail/backend/backend.py"", line 188, in execute; result, timings = self._rpc(ActionTag.EXECUTE, payload); File ""/xxxx/lib/python3.10/site-packages/hail/backend/py4j_backend.py"", line 219, in _rpc; error_json = orjson.loads(resp.content); orjson.JSONDecodeError: unexpected character: line 1 column 1 (char 0); ```. Log file:; ```; 2024-04-25 16:07:16.773 Hail: INFO: SparkUI: http://xxxx:xxxx; 2024-04-25 16:07:21.589 Hail: I",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/14049#issuecomment-2077624076:791,log,logger,791,https://hail.is,https://github.com/hail-is/hail/issues/14049#issuecomment-2077624076,1,['log'],['logger']
Testability,"Hi,; When I remove plink from my path I get a bit of a different error. Can you rerun `gradle check` with the `--info` argument? It'll vomit a bunch of details, but the output from those tests should tell us what's going on.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/457#issuecomment-230192783:187,test,tests,187,https://hail.is,https://github.com/hail-is/hail/issues/457#issuecomment-230192783,1,['test'],['tests']
Testability,"Hi,; here the log, it failed again (after ~12h running).; cheers,. > > On Apr 17, 2016, at 11:03 PM, cseed <notifications@github.com <mailto:notifications@github.com>> wrote:; > > ; > > Is the attached log file correct? It is for a job that never got assigned cores on the cluster. I don't see anything about NoClassDefFoundError in it.; > > ; > > —; > > You are receiving this because you authored the thread.; > > Reply to this email directly or view it on GitHub https://github.com/broadinstitute/hail/issues/303#issuecomment-211167105",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/303#issuecomment-211658957:14,log,log,14,https://hail.is,https://github.com/hail-is/hail/issues/303#issuecomment-211658957,2,['log'],['log']
Testability,"High level and the tests look great. I'll try to take a closer look tonight, but I'm basically ready to approve once the tests pass. I thought about throwing an error on hl.agg.filter if there isn't an aggregator inside, and I think I agree with you now. At least, if you use an hl.agg.filter, etc. inside an aggregation, like hl.agg.sum(hl.agg.filter(...)), that should given error rather than doing nothing. This is important given that this was the old syntax.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4555#issuecomment-430448109:19,test,tests,19,https://hail.is,https://github.com/hail-is/hail/pull/4555#issuecomment-430448109,2,['test'],['tests']
Testability,"Hi，cseed @cseed , I configured the java related to the Spark cluster, as follows：. ```; scala> System.getProperty(""java.version""); res0: String = 1.8.0_91. scala> val rdd = sc.parallelize(0 to 1000, 4); rdd: org.apache.spark.rdd.RDD[Int] = ParallelCollectionRDD[0] at parallelize at <console>:27. scala> rdd.mapPartitions { it => Iterator(System.getProperty(""java.version"")) }.collect(); res1: Array[String] = Array(1.8.0_91, 1.8.0_91, 1.8.0_91, 1.8.0_91) ; ```. but when testing the `split multi` command， use the `split_test.vcf` in the test file hail offered:. ```; spark-submit --executor-memory 16g --executor-cores 4 --class org.broadinstitute.hail.driver.Main ******/hail-all-spark.jar ; --master yarn-client importvcf /user/hail/split_test.vcf splitmulti write -o /user/hail/split_test_1_1.vds exportvcf -o /user/hail/split_test_1_1.vcf; ```. there appeared some errors：; 1. `java.io.FileNotFoundException: hail.log (Permission denied)`; 2. `Job aborted due to stage failure: Task 0 in stage 2.0 failed 4 times, most recent failure: Lost task 0.3 in stage 2.0 (TID 5, bio-x-3): ; java.io.IOException: The file being written is in an invalid state. Probably caused by an error thrown previously. Current state: COLUMN`; 3. `The file being written is in an invalid state. Probably caused by an error thrown previously. Current state: COLUMN`. I tested several different vcf files, the errors always existed.; The whole error message was attached as follows ; [splitmulti.txt](https://github.com/hail-is/hail/files/502516/splitmulti.txt) . How can I solve it ?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/825#issuecomment-250697347:472,test,testing,472,https://hail.is,https://github.com/hail-is/hail/issues/825#issuecomment-250697347,4,"['log', 'test']","['log', 'test', 'tested', 'testing']"
Testability,"Hm, I added timestamper and merged main and the tests passed… getting retested now though",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12731#issuecomment-1513805552:48,test,tests,48,https://hail.is,https://github.com/hail-is/hail/pull/12731#issuecomment-1513805552,1,['test'],['tests']
Testability,"Hm, I guess I just don't personally see the value in one command instead of two. If the workshop is meant to teach users how to use batch, and one aspect of using batch is knowing how to log in, shouldn't they go through the motions?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13279#issuecomment-1662872608:187,log,log,187,https://hail.is,https://github.com/hail-is/hail/pull/13279#issuecomment-1662872608,1,['log'],['log']
Testability,"Hm, weird. When I try these tests out against default I get:. ```; FatalError: batch id was 2271614; HailException: Hail off-heap memory exceeded maximum threshold: limit 2.25 GiB, allocated 3.35 GiB; Report: 3.4G allocated (192.0K blocks / 3.4G chunks), regions.size = 3, 0 current java objects, thread 9: pool-1-thread-2; is.hail.utils.HailException: Hail off-heap memory exceeded maximum threshold: limit 2.25 GiB, allocated 3.35 GiB; Report: 3.4G allocated (192.0K blocks / 3.4G chunks), regions.size = 3, 0 current java objects, thread 9: pool-1-thread-2; 	at is.hail.utils.ErrorHandling.fatal(ErrorHandling.scala:17); 	at is.hail.utils.ErrorHandling.fatal$(ErrorHandling.scala:17); 	at is.hail.utils.package$.fatal(package.scala:78); 	at is.hail.annotations.RegionPool.closeAndThrow(RegionPool.scala:58); 	at is.hail.annotations.RegionPool.incrementAllocatedBytes(RegionPool.scala:73); 	at is.hail.annotations.ChunkCache.newChunk(ChunkCache.scala:75); 	at is.hail.annotations.ChunkCache.getChunk(ChunkCache.scala:130); 	at is.hail.annotations.RegionPool.getChunk(RegionPool.scala:96); 	at is.hail.annotations.RegionMemory.allocateBigChunk(RegionMemory.scala:62); 	at is.hail.annotations.RegionMemory.allocate(RegionMemory.scala:96); 	at is.hail.annotations.Region.allocate(Region.scala:332); 	at __C35collect_distributed_array.__m61split_ToArray(Unknown Source); 	at __C35collect_distributed_array.__m54split_StreamFor(Unknown Source); 	at __C35collect_distributed_array.__m49begin_group_0(Unknown Source); 	at __C35collect_distributed_array.apply(Unknown Source); 	at __C35collect_distributed_array.apply(Unknown Source); 	at is.hail.backend.BackendUtils.$anonfun$collectDArray$2(BackendUtils.scala:31); 	at is.hail.utils.package$.using(package.scala:638); 	at is.hail.annotations.RegionPool.scopedRegion(RegionPool.scala:162); 	at is.hail.backend.BackendUtils.$anonfun$collectDArray$1(BackendUtils.scala:30); 	at is.hail.backend.service.Worker$.$anonfun$main$13(Worker.scala:142); 	at scala.ru",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11777#issuecomment-1110147573:28,test,tests,28,https://hail.is,https://github.com/hail-is/hail/pull/11777#issuecomment-1110147573,1,['test'],['tests']
Testability,"Hm:. <img width=""484"" alt=""Screen Shot 2020-01-31 at 10 17 03 AM"" src=""https://user-images.githubusercontent.com/5543229/73550580-d614aa00-4412-11ea-82b9-4dd11825cc59.png"">. (for the pushed test). specifying the type as hl.null(hl.tint32), neither did hl.null('int32') (which doesn't feel as ergonomic, but is advertised under the [Missingness section](https://hail.is/docs/0.2/overview/expressions.html#missingness)), doesn't work sadly. As a dev using Hail I miss being able to specify data types exactly. I may want to specify that data is dense, or sparse.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8008#issuecomment-580774813:190,test,test,190,https://hail.is,https://github.com/hail-is/hail/pull/8008#issuecomment-580774813,1,['test'],['test']
Testability,"Hmm, so I've been using a branch to run some 10k and 100k scale tests of /bin/true https://github.com/hail-is/hail/pull/7783 and I've found deadlocks to be rather rare?. In that PR, I only changed the known deadlocking calls to be deadlock resilient. However, deadlock errors seem to be a feature of mysql and it seems were always intended to retry them, so I think this PR (7782) is the right solution.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7782#issuecomment-568579582:64,test,tests,64,https://hail.is,https://github.com/hail-is/hail/pull/7782#issuecomment-568579582,1,['test'],['tests']
Testability,"Hmm, some issue with logs of a running job.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11652#issuecomment-1080092497:21,log,logs,21,https://hail.is,https://github.com/hail-is/hail/pull/11652#issuecomment-1080092497,1,['log'],['logs']
Testability,"Hmm, tested locally and this didn't work. Will investigate. Marking WIP.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8448#issuecomment-608331163:5,test,tested,5,https://hail.is,https://github.com/hail-is/hail/pull/8448#issuecomment-608331163,1,['test'],['tested']
Testability,"Hmm. @johnc1231, We should probably pick some time to go through all the BM functionality and verify that we have adequate tests for it all. It feels like we've had a never ending series of bugs discovered by users.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7146#issuecomment-536017411:123,test,tests,123,https://hail.is,https://github.com/hail-is/hail/pull/7146#issuecomment-536017411,1,['test'],['tests']
Testability,Hmm. I thought we made you a full fledged developer. If you log in via https://auth.hail.is/login first does it work?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8805#issuecomment-629377509:60,log,log,60,https://hail.is,https://github.com/hail-is/hail/pull/8805#issuecomment-629377509,2,['log'],"['log', 'login']"
Testability,"Hmm. I trust the code now. I test against several R SKAT runs. I'm not sure I understand how we derive that Q is generalized chi-squared distributed. We use the residual phenotypes in the calculation of Q, but those are inverse-logit transformed normal variables. The derivation for the linear case doesn't apply, as far as I can tell. I assume the residuals are Bernoulli distributed? Maybe not. I guess the phenotypes are Bernoulli but the errors aren't? I'm not sure.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12643#issuecomment-1419295599:29,test,test,29,https://hail.is,https://github.com/hail-is/hail/pull/12643#issuecomment-1419295599,2,"['log', 'test']","['logit', 'test']"
Testability,"Hmm. I'd think that Int + Float would be promoted to Double, is that not so? Maybe we've got an issue somewhere else. . I think putting that example in the expr test you added would be a great idea!",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/758#issuecomment-245462802:161,test,test,161,https://hail.is,https://github.com/hail-is/hail/pull/758#issuecomment-245462802,1,['test'],['test']
Testability,"Hmm. I'm having a real hard time figuring out how the fast path has affected this new test. Checkpointing before the group by makes this pass. Removing the union/filter_partitions line makes it pass.; ```; t = hl.utils.range_table(8, n_partitions=8); t = t._filter_partitions([7]).union(t._filter_partitions([7], keep=False)); t = t.group_by(_key=t.idx).aggregate(t_value=hl.agg.collect(t.row_value)); expected = [; hl.Struct(_key=0, t_value=[hl.Struct()]),; hl.Struct(_key=1, t_value=[hl.Struct()]),; hl.Struct(_key=2, t_value=[hl.Struct()]),; hl.Struct(_key=3, t_value=[hl.Struct()]),; hl.Struct(_key=4, t_value=[hl.Struct()]),; hl.Struct(_key=5, t_value=[hl.Struct()]),; hl.Struct(_key=6, t_value=[hl.Struct()]),; hl.Struct(_key=7, t_value=[hl.Struct()]); ]; actual = t.collect(); assert actual == expected. ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11785#issuecomment-1106757367:86,test,test,86,https://hail.is,https://github.com/hail-is/hail/pull/11785#issuecomment-1106757367,2,"['assert', 'test']","['assert', 'test']"
Testability,Hmm. I'm perhaps a bit too clever with my image tests. They differ between linux and OS X and its not easy to see the difference given the way our CI works.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12768#issuecomment-1478610969:48,test,tests,48,https://hail.is,https://github.com/hail-is/hail/pull/12768#issuecomment-1478610969,1,['test'],['tests']
Testability,Hmm. I’ll have to sort this out tomorrow. Not sure what’s going on with that. It seems like the shadowTestJar target is probably not correctly pulling in the testImolemebtation configuration.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13551#issuecomment-1709453126:158,test,testImolemebtation,158,https://hail.is,https://github.com/hail-is/hail/pull/13551#issuecomment-1709453126,1,['test'],['testImolemebtation']
Testability,"Hmm. One of the test PR builds appears to have taken 6 minutes to run. These [don't really do anything](https://github.com/hail-is/hail/blob/master/ci/test-repo/hail-ci-build.sh), so it's likely the k8s nodes were overloaded and it couldn't start the job for a while. `kubectl describe pod job-29-z5mpw` (based on the job number in the logs, I'm pretty sure this is the pod in question), doesn't show any useful information.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4474#issuecomment-425942111:16,test,test,16,https://hail.is,https://github.com/hail-is/hail/pull/4474#issuecomment-425942111,3,"['log', 'test']","['logs', 'test', 'test-repo']"
Testability,"Hmm. Seems like the ArraySorter still isn't quite right?. I also saw some issues with sockets timing out but I don't know what to make of those yet.; ```; _______________________________ test_union_rows1 _______________________________. @test_timeout(local=3 * 60); def test_union_rows1():; vds = hl.vds.read_vds(os.path.join(resource('vds'), '1kg_chr22_5_samples.vds')); ; vds1 = hl.vds.filter_intervals(vds,; [hl.parse_locus_interval('chr22:start-10754094', reference_genome='GRCh38')],; split_reference_blocks=True); vds2 = hl.vds.filter_intervals(vds,; [hl.parse_locus_interval('chr22:10754094-end', reference_genome='GRCh38')],; split_reference_blocks=True); ; ; vds_union = vds1.union_rows(vds2); > assert hl.vds.to_dense_mt(vds)._same(hl.vds.to_dense_mt(vds_union)). test/hail/vds/test_vds.py:597: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; <decorator-gen-1386>:2: in _same; ???; /usr/local/lib/python3.9/dist-packages/hail/typecheck/check.py:587: in wrapper; return __original_func(*args_, **kwargs_); /usr/local/lib/python3.9/dist-packages/hail/matrixtable.py:3762: in _same; return self._localize_entries(entries_name, cols_name)._same(; <decorator-gen-1276>:2: in _same; ???; /usr/local/lib/python3.9/dist-packages/hail/typecheck/check.py:587: in wrapper; return __original_func(*args_, **kwargs_); /usr/local/lib/python3.9/dist-packages/hail/table.py:3658: in _same; mismatched_globals, mismatched_rows = t.aggregate(hl.tuple((; <decorator-gen-1216>:2: in aggregate; ???; /usr/local/lib/python3.9/dist-packages/hail/typecheck/check.py:587: in wrapper; return __original_func(*args_, **kwargs_); /usr/local/lib/python3.9/dist-packages/hail/table.py:1285: in aggregate; return Env.backend().execute(hl.ir.MakeTuple([agg_ir]))[0]; /usr/local/lib/python3.9/dist-packages/hail/backend/py4j_backend.py:86: in execute; raise e.maybe_user_error(ir) from None; /usr/local/lib/python3.9/dist-packages/hail/backend/py4j_backend.py:76: in execute; result_tuple",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13814#issuecomment-1771905198:705,assert,assert,705,https://hail.is,https://github.com/hail-is/hail/pull/13814#issuecomment-1771905198,2,"['assert', 'test']","['assert', 'test']"
Testability,Hmm. Those two tests still fail. They don't fail on my laptop when I run them in isolation.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12423#issuecomment-1314243953:15,test,tests,15,https://hail.is,https://github.com/hail-is/hail/pull/12423#issuecomment-1314243953,1,['test'],['tests']
Testability,"Hope you don't mind, I fixed a bug (rename conflict) and merged in the last two stages. Final tests running now.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2386#issuecomment-342701706:94,test,tests,94,https://hail.is,https://github.com/hail-is/hail/pull/2386#issuecomment-342701706,1,['test'],['tests']
Testability,"How are you running the tests? We have the following in `hail/testng.xml`:. ```; <suite name=""SuiteAll"" verbose=""1"">; <test name=""TestAll""> ; <packages> ; <package name=""is.hail.*"">; <exclude name=""is.hail.scheduler""></exclude>; <exclude name=""is.hail.backend.distributed""></exclude>; 	 </package>; </packages>; </test>; </suite>; ```. These tests are explicitly executed by `scheduler/testng.xml`.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6734#issuecomment-514880263:24,test,tests,24,https://hail.is,https://github.com/hail-is/hail/pull/6734#issuecomment-514880263,7,"['Test', 'test']","['TestAll', 'test', 'testng', 'tests']"
Testability,How do I test this? I don't know how to make vep fail.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8150#issuecomment-590993084:9,test,test,9,https://hail.is,https://github.com/hail-is/hail/pull/8150#issuecomment-590993084,1,['test'],['test']
Testability,"How do we want to handle the case where one of the tasks does not have timing information?. ```; log.warning(f'job {self.id} has pod {pod.metadata.name} which is '; f'terminated but has no timing information. {pod}'); ```. I think it should be None for all tasks, which is not the behavior I have now.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6129#issuecomment-493776631:97,log,log,97,https://hail.is,https://github.com/hail-is/hail/pull/6129#issuecomment-493776631,1,['log'],['log']
Testability,How does this prevent logging in to the workers?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7978#issuecomment-578955557:22,log,logging,22,https://hail.is,https://github.com/hail-is/hail/pull/7978#issuecomment-578955557,1,['log'],['logging']
Testability,"However, somehow the job did transition to `Running` even though there's no log of it.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/6617#issuecomment-510673350:76,log,log,76,https://hail.is,https://github.com/hail-is/hail/issues/6617#issuecomment-510673350,1,['log'],['log']
Testability,"Hrm. ci-test is ""Pending"" but it should actually say ""Success"" (click through to the status page). Who would like to grant the final approval to the glorious future of Hail?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11194#issuecomment-1035106987:8,test,test,8,https://hail.is,https://github.com/hail-is/hail/pull/11194#issuecomment-1035106987,1,['test'],['test']
Testability,"Huh! I seem to have reliably broken unicode ordering and/or en/de-coding. I've marked as fails for now. Hopefully all the remaining tests will now pass.; ```; _________________________ Tests.test_unicode_ordering __________________________; [gw1] linux -- Python 3.7.12 /usr/bin/python3. self = <test.hail.table.test_table.Tests testMethod=test_unicode_ordering>. def test_unicode_ordering(self):; a = hl.literal([""é"", ""e""]); ht = hl.utils.range_table(1, 1); ht = ht.annotate(fd=hl.sorted(a)); > assert ht.fd.collect()[0] == [""e"", ""é""]; E AssertionError: assert ['?', 'e'] == ['e', 'é']; E At index 0 diff: '?' != 'e'; E Full diff:; E - ['e', 'é']; E + ['?', 'e']. ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11194#issuecomment-1034968369:132,test,tests,132,https://hail.is,https://github.com/hail-is/hail/pull/11194#issuecomment-1034968369,8,"['Assert', 'Test', 'assert', 'test']","['AssertionError', 'Tests', 'assert', 'test', 'testMethod', 'tests']"
Testability,"Huh, quite confused as to why the local backend test hung in GCP and not azure. As far as I can tell the test that hung is `test/hail/utils/test_utils.py::Tests::test_hadoop_ls_glob_2` but it passed in azure and locally. Any ideas?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12731#issuecomment-1507043318:48,test,test,48,https://hail.is,https://github.com/hail-is/hail/pull/12731#issuecomment-1507043318,4,"['Test', 'test']","['Tests', 'test']"
Testability,"Huh, you can't request changes on your own PR. So, right now the hail/apiserver dependency is cyclic. I'll need to fix that to get testing and deploying working right.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5624#issuecomment-473961308:131,test,testing,131,https://hail.is,https://github.com/hail-is/hail/pull/5624#issuecomment-473961308,1,['test'],['testing']
Testability,"Huh. Theories on what happened to shuffles?. > On May 16, 2023, at 17:39, Christopher Vittal ***@***.***> wrote:; > ; > ; > 1 is main, 2 is this branch; > ; > $ python -m benchmark_hail compare 2023-05-16-0.2.116-a2b070f715d8-zstd-main-cmp.json 2023-05-16-0.2.116-78a43d968e7b-zstd.json; > Failed benchmarks in run 1:; > pc_relate; > king; > Failed benchmarks in run 2:; > king; > Benchmark Name Ratio Time 1 Time 2 Mem Ratio Mem 1 (MB) Mem 2 (MB); > -------------- ----- ------ ------ --------- ---------- ----------; > table_foreign_key_join_same_cardinality 302.7% 13.710 41.502 100.0% 3 3; > table_foreign_key_join_left_higher_cardinality 280.9% 13.990 39.294 100.0% 3 3; > table_key_by_shuffle 250.0% 5.910 14.778 100.0% 2 2; > shuffle_order_by_10m_int 235.5% 61.407 144.602 100.0% 2 2; > shuffle_key_by_aggregate_bad_locality 195.9% 67.872 132.991 100.0% 2 2; > table_take 155.3% 1.018 1.581 100.0% 1 1; > shuffle_key_rows_by_4096_byte_rows 151.9% 10.150 15.412 100.0% 2 2; > read_force_count_p1000 142.0% 3.998 5.678 100.0% 1 1; > read_force_count_p10 140.8% 1.803 2.539 100.0% 1 1; > join_p100_p100 138.4% 3.702 5.123 100.0% 1 1; > join_p100_p10 134.2% 13.166 17.671 100.0% 1 1; > test_inner_join_region_memory 129.9% 2.362 3.069 100.0% 382 382; > large_range_matrix_table_sum 129.1% 206.853 266.961 100.0% 17 17; > table_annotate_many_flat 125.9% 1.134 1.428 100.0% 1 1; > test_map_filter_region_memory 121.7% 2.176 2.647 100.0% 382 382; > import_vcf_count_rows 121.5% 7.532 9.150 100.0% 1 1; > join_p10_p100 121.1% 14.040 17.000 100.0% 1 1; > shuffle_key_rows_by_mt 119.1% 33.339 39.722 100.0% 3 3; > table_aggregate_downsample_worst_case 118.3% 21.323 25.229 100.0% 1 1; > variant_and_sample_qc_nested_with_filters_2 118.2% 25.267 29.873 100.0% 1 1; > union_p1000_p1000 118.0% 8.160 9.625 100.0% 1 1; > read_force_count_p100 117.9% 2.336 2.754 100.0% 1 1; > mt_group_by_memory_usage 117.5% 25.597 30.069 100.0% 136 136; > matrix_table_filter_entries_unfilter 116.9% 10.308 12.052 100.0% 1 1",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12981#issuecomment-1550513642:297,benchmark,benchmarks,297,https://hail.is,https://github.com/hail-is/hail/pull/12981#issuecomment-1550513642,3,"['Benchmark', 'benchmark']","['Benchmark', 'benchmarks']"
Testability,I *think* I've addressed all concerns. It would help if @danking could test all functions; I only have a partially configured environment.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4994#issuecomment-448388700:71,test,test,71,https://hail.is,https://github.com/hail-is/hail/pull/4994#issuecomment-448388700,1,['test'],['test']
Testability,I added a BGEN cluster test to this PR.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5676#issuecomment-475758539:23,test,test,23,https://hail.is,https://github.com/hail-is/hail/pull/5676#issuecomment-475758539,1,['test'],['test']
Testability,"I added a Scala test like we discussed, but it's not as thorough as I want it to be. `totalAllocatedBytes` checking just checks that we cleaned up all the intermediate garbage before returning. It doesn't ensure that we never used more than a certain amount of memory.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10233#issuecomment-811969275:16,test,test,16,https://hail.is,https://github.com/hail-is/hail/pull/10233#issuecomment-811969275,1,['test'],['test']
Testability,I added a basic test.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7306#issuecomment-543238818:16,test,test,16,https://hail.is,https://github.com/hail-is/hail/pull/7306#issuecomment-543238818,1,['test'],['test']
Testability,I added a cloudtools version pin in the cluster tests.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5756#issuecomment-480369608:48,test,tests,48,https://hail.is,https://github.com/hail-is/hail/pull/5756#issuecomment-480369608,1,['test'],['tests']
Testability,I added a front-end batch test. I think we should delete the test I added in this PR in favor of the one in #8961 once we know it's working. This PR as it stands passed the tests.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8960#issuecomment-644225287:26,test,test,26,https://hail.is,https://github.com/hail-is/hail/pull/8960#issuecomment-644225287,3,['test'],"['test', 'tests']"
Testability,I added a separate stress test of the aggregator state.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6942#issuecomment-525946036:26,test,test,26,https://hail.is,https://github.com/hail-is/hail/pull/6942#issuecomment-525946036,1,['test'],['test']
Testability,I added a test for always run job private cancellation.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13372#issuecomment-1673767815:10,test,test,10,https://hail.is,https://github.com/hail-is/hail/pull/13372#issuecomment-1673767815,1,['test'],['test']
Testability,"I added a test in StagedRegionValue suite, with the rest of the SRVB tests. It only generates structs, but since all of the deepCopy methods will call into each other and will get tested on the struct fields, I cranked the test up to run 1000 times to ensure we were (probably) hitting all the edge cases.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6500#issuecomment-506790438:10,test,test,10,https://hail.is,https://github.com/hail-is/hail/pull/6500#issuecomment-506790438,4,['test'],"['test', 'tested', 'tests']"
Testability,"I added a tiny 0.1 VDS formed from regressionLinear.vcf, forcing 2 partitions, and a test in VSMSuite. Back to you.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2173#issuecomment-327335081:85,test,test,85,https://hail.is,https://github.com/hail-is/hail/pull/2173#issuecomment-327335081,1,['test'],['test']
Testability,I added an separate test of correctness of toKeyGsWeightRdd since this function is used in both the Hail and R routes in the end-to-end comparison,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2248#issuecomment-332873098:20,test,test,20,https://hail.is,https://github.com/hail-is/hail/pull/2248#issuecomment-332873098,1,['test'],['test']
Testability,"I added some more logic since the criteria (at the IR level) of ""this works as an interval join"" is different if you're joining to a Table vs joining to a MatrixTable. I also feel like the interval logic MatrixAnnotateRowsTable IR node should get pulled out into its own separate node (and be the same as a table interval join?), but I will follow up with that later and not here.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4197#issuecomment-416761645:18,log,logic,18,https://hail.is,https://github.com/hail-is/hail/pull/4197#issuecomment-416761645,2,['log'],['logic']
Testability,I added some old vs. new tests.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5828#issuecomment-482244062:25,test,tests,25,https://hail.is,https://github.com/hail-is/hail/pull/5828#issuecomment-482244062,1,['test'],['tests']
Testability,"I added the cli. I kind of winged it looking at how `hailctl dev deploy` was done. It seems to work though:. ```; (base) wmecc-475:hail jigold$ hailctl batch billing; usage: hailctl batch billing [-h] {list,get} ... Manage billing on the service managed by the Hail team. positional arguments:; {list,get}; list List billing projects; get Get a particular billing project's info. optional arguments:; -h, --help show this help message and exit; (base) wmecc-475:hail jigold$ hailctl batch billing fake; usage: hailctl batch billing [-h] {list,get} ...; hailctl batch billing: error: invalid choice: 'fake' (choose from 'list', 'get'); Unclosed client session; client_session: <aiohttp.client.ClientSession object at 0x111288208>; (base) wmecc-475:hail jigold$ hailctl batch billing list; - accrued_cost: 0.0; billing_project: ci; cost: null; limit: null; users: [ci]; - accrued_cost: 0.0012024241022130966; billing_project: test; cost: 0.0012024241022130966; limit: null; users: [test]; - accrued_cost: 9.62974093086927e-05; billing_project: test-tiny-limit; cost: 9.62974093086927e-05; limit: 1.0e-05; users: [test]; - accrued_cost: 0.0; billing_project: test-zero-limit; cost: null; limit: 0.0; users: [test]. (base) wmecc-475:hail jigold$ hailctl batch billing get; usage: hailctl batch billing get [-h] [-o {yaml,json}] billing_project; hailctl batch billing get: error: the following arguments are required: billing_project; Unclosed client session; client_session: <aiohttp.client.ClientSession object at 0x10a635208>; (base) wmecc-475:hail jigold$ hailctl batch billing get test-tiny-limit; accrued_cost: 9.62974093086927e-05; billing_project: test-tiny-limit; cost: 9.62974093086927e-05; limit: 1.0e-05; users: [test]. (base) wmecc-475:hail jigold$ hailctl batch billing get test-tiny-limit; accrued_cost: 9.62974093086927e-05; billing_project: test-tiny-limit; cost: 9.62974093086927e-05; limit: 1.0e-05; users: [test]. Unclosed client session; client_session: <aiohttp.client.ClientSession o",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9385#issuecomment-684964006:924,test,test,924,https://hail.is,https://github.com/hail-is/hail/pull/9385#issuecomment-684964006,2,['test'],['test']
Testability,"I added the command name, and switched to printing the readable string rather than the `StorageLevel(true, false, false, false, 1)` by adding a RichStorageLevel with toReadableString(). Also added a test in UtilsSuite. @tpoterba back to you",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1028#issuecomment-257649514:199,test,test,199,https://hail.is,https://github.com/hail-is/hail/pull/1028#issuecomment-257649514,1,['test'],['test']
Testability,"I added the error for each container to the logs output. I think that's fine, but maybe we need separate section for errors?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10545#issuecomment-853153867:44,log,logs,44,https://hail.is,https://github.com/hail-is/hail/pull/10545#issuecomment-853153867,1,['log'],['logs']
Testability,"I addressed comments apart from improving the tests on VSM. There are two options regarding plan for writing out a Spark IRM:; 1) just delete it; 2) keep it, pass partStarts through for efficiency, and cut down on code duplication. I tried the latter, creating KeyedIndexedRowMatrix as abstraction to handle both PCA and writing, and pushing common structure to an object WriteBlocksRDD.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2559#issuecomment-351252274:46,test,tests,46,https://hail.is,https://github.com/hail-is/hail/pull/2559#issuecomment-351252274,1,['test'],['tests']
Testability,"I addressed the comment and made a data source that's a GB (defined like: . ```; n_rows = 60_000; n_cols = 4_000; mt = hl.utils.range_matrix_table(n_rows, n_cols); mt = mt.annotate_entries(unif = hl.rand_unif(0, 1)); ```; ). Tests only take like 20 seconds though.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8050#issuecomment-583136594:225,Test,Tests,225,https://hail.is,https://github.com/hail-is/hail/pull/8050#issuecomment-583136594,1,['Test'],['Tests']
Testability,I addressed the grafana situation. I dev deployed into my namespace and I'm able to log in. I cannot test that I've addressed the issue because the default namespace is still using the old version and thus I hit 401s there before even reaching the dev namespace.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12380#issuecomment-1297584226:84,log,log,84,https://hail.is,https://github.com/hail-is/hail/pull/12380#issuecomment-1297584226,2,"['log', 'test']","['log', 'test']"
Testability,"I agree it shouldn't be able to write to a production bucket. But right now, we only have 1 test service account with 1 bucket.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5866#issuecomment-485466724:92,test,test,92,https://hail.is,https://github.com/hail-is/hail/pull/5866#issuecomment-485466724,1,['test'],['test']
Testability,"I agree! The docs are being tested in 2 places. The first is easy to fix; make a new build task that is identical to `makeHailDocs` with a command line of `make clean html` instead. The second place is the tutorial iPython notebook. There is an option `nbsphinx_execute = 'never'` that could be added to `conf.py`, but I haven't figured out what the best way to pass a custom parameter argument to Sphinx is as we are not running `conf.py` directly when we call Sphinx.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1472#issuecomment-284199231:28,test,tested,28,https://hail.is,https://github.com/hail-is/hail/issues/1472#issuecomment-284199231,1,['test'],['tested']
Testability,"I agree. I'll study up on testing this stuff. Scorecard isn't tested, either. A few thoughts:; - I don't feel quite so bad having some of this untested (scorecard, etc.) while we get up to speed since they are internal tools (and not too complicated, unlike ci), but at the very least we need to test hl.upload_log() since that's the user facing bit.; - It will get easier to run tests if we can deploy the service in a test namespace to mirror the production namespace. I'll bump up the priority on looking into this.; - We need authentication without oauth2 for the tests. I'm at a total loss about how to automate testing of oauth2 login. The internet has some thoughts: https://stackoverflow.com/questions/39180008/automated-api-testing-of-oauth2-openid-connect-protected-api, including using headless automation: https://medium.com/@vicusbass/api-testing-with-rest-assured-oauth2-flow-with-redirect-uri-ba48b5953823; - Flask has a test fixture, so at least I can write local tests: http://flask.pocoo.org/docs/1.0/testing/; - Created an issue to track these: https://github.com/hail-is/hail/issues/4539",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4509#issuecomment-429338595:26,test,testing,26,https://hail.is,https://github.com/hail-is/hail/pull/4509#issuecomment-429338595,13,"['log', 'test']","['login', 'test', 'tested', 'testing', 'testing-of-', 'testing-with-rest-assured-', 'tests']"
Testability,"I already had cases in tests that ran the underscore version tests if it's on the service or local backends, so tests didn't need changing.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11648#issuecomment-1076567913:23,test,tests,23,https://hail.is,https://github.com/hail-is/hail/pull/11648#issuecomment-1076567913,3,['test'],['tests']
Testability,"I already have these packages installed, and there was no `netcdf` issue with my version of R. @maccum is going to install the latest version of R fresh and try to add all the packages and see if tests pass. Thanks Meredith!",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3281#issuecomment-379056688:196,test,tests,196,https://hail.is,https://github.com/hail-is/hail/pull/3281#issuecomment-379056688,1,['test'],['tests']
Testability,"I also added VariantDataset.make_keytable. With this, one can create keytables with genotype-level values, for example:. ```; vds = hc.import_vcf('/home/cotton/sample.vcf'); (vds.make_keytable('v = v, info = va.info', 'gt = g.gt', ['v']); .export('test.txt')); ```. test.txt will have a `s.gt` column, one for each sample `s`. This functionality was already in the Solr and Cassandra export modules, which should now be moved to KeyTable. The user needs more control over how the KeyTable column names are formed in flatten and make_keytable.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1157#issuecomment-266346469:248,test,test,248,https://hail.is,https://github.com/hail-is/hail/pull/1157#issuecomment-266346469,2,['test'],['test']
Testability,I also added some debugging logs to try and figure out why you were getting a batch with no jobs when you dev deployed.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6670#issuecomment-512577477:28,log,logs,28,https://hail.is,https://github.com/hail-is/hail/pull/6670#issuecomment-512577477,1,['log'],['logs']
Testability,I also added some more tests since I accidentally broke things while developing this and would like that to happen less in the future.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11380#issuecomment-1045069860:23,test,tests,23,https://hail.is,https://github.com/hail-is/hail/pull/11380#issuecomment-1045069860,1,['test'],['tests']
Testability,"I also broke out routines to create examples of values (tables, matrix tables) with all types, and added a test case that runs expand_types on the table of values of all types.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5021#issuecomment-451248463:107,test,test,107,https://hail.is,https://github.com/hail-is/hail/pull/5021#issuecomment-451248463,1,['test'],['test']
Testability,"I also compared `variant_and_sample_qc_nested_with_filters_2` (33% worse on batch) between the two branches on my laptop, and could not detect a difference. I do think the make_ndarray range speedup is real -- there are a few benchmarks that indicate improvement that all are heavily dependent on the performance of the `StreamRange` implementation, which I think slightly improved.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10229#issuecomment-814325646:226,benchmark,benchmarks,226,https://hail.is,https://github.com/hail-is/hail/pull/10229#issuecomment-814325646,1,['benchmark'],['benchmarks']
Testability,"I also converted stress into a proper test which we can start running on every PR. I'll PR that separately. I'm currently running that test on my changes. You can see all the changes here: https://github.com/hail-is/hail/pull/11029/commits/8d4c7a22a19ae0a79527eae790d537cf020c1cca. The diff is bad because I merged in main. I removed all the global_config things and tried to keep the minimal diff from main. We can make those changes, if desired, at a later date.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10920#issuecomment-956501512:38,test,test,38,https://hail.is,https://github.com/hail-is/hail/pull/10920#issuecomment-956501512,2,['test'],['test']
Testability,I also couldn't remove the flags from Scala because of the Scala tests.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12423#issuecomment-1302624425:65,test,tests,65,https://hail.is,https://github.com/hail-is/hail/pull/12423#issuecomment-1302624425,1,['test'],['tests']
Testability,"I also created a Starlette branch; which may be preferable, as Sanic brings with it a bit of controversy and a bunch of errors generate on Techempower benchmarks. I took a brief look at the bench source didn't see an immediate issue, so worry a bit about. Sanic. Starlette is a light layer on top of Uvicorn, one of the leading ASGI web servers. Similar to Sanic/Flaks interface:. https://www.techempower.com/benchmarks/#section=data-r17&hw=ph&test=fortune&l=zijzen-1. Branch here, can issue a separate pr and close this one: https://github.com/akotlar/hail/tree/scorecard-starlette",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5242#issuecomment-461188115:151,benchmark,benchmarks,151,https://hail.is,https://github.com/hail-is/hail/pull/5242#issuecomment-461188115,3,"['benchmark', 'test']","['benchmarks', 'test']"
Testability,"I also do not know how to run our tests in cluster-mode, but I know how to add a python file to this repo and submit it to the cluster in hail-ci-build.sh ;)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5033#issuecomment-449506106:34,test,tests,34,https://hail.is,https://github.com/hail-is/hail/pull/5033#issuecomment-449506106,1,['test'],['tests']
Testability,"I also feel like we should have some tests that assert correctness of very simple comparisons. Like 0 < 1, NA != 1, NA == NA. Do these exist in python?. In the pain of my recent work on contextrdd and off heap regions I've spent a lot of time reducing our test cases to actual minimal examples. It would save engineering time in the long run to add simple, tiny examples every time we make changes or add functionality.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3582#issuecomment-389883212:37,test,tests,37,https://hail.is,https://github.com/hail-is/hail/pull/3582#issuecomment-389883212,3,"['assert', 'test']","['assert', 'test', 'tests']"
Testability,I also made a new test bucket specifically for the tests -- gs://hail-services-requester-pays/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9096#issuecomment-660163759:18,test,test,18,https://hail.is,https://github.com/hail-is/hail/pull/9096#issuecomment-660163759,2,['test'],"['test', 'tests']"
Testability,I also need to test this on dataproc.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14071#issuecomment-1875981027:15,test,test,15,https://hail.is,https://github.com/hail-is/hail/pull/14071#issuecomment-1875981027,1,['test'],['test']
Testability,"I also now suspect that the strange behavior I was seeing was due to caching on Chrome's side. This would explain why I was seeing nothing in server logs, and why behavior was inconsistent between browsers. I even watched logs of all 6 gateways (3 gateway, 3 internal), and the monitoring router, nothing. I also saw differences in redirect behavior between Safari and Chrome. Cleared browser cache (hard refreshes weren't doing anything), and started also testing in Firefox. Lastly, the proxy_set_header Host does not appear to be needed for Grafana or Prometheus to operate, so I have excluded it (tested with the Cluster dashboard). This also reduces the number of places we need to specify which external domain Grafana/Prometheus sit behind. edit: To be clear I also tried to find documentation on the use of GF_SERVER_DOMAIN and could not. GF_SERVER_DOMAIN doesn't even appear in Grafan's repository (at least, GitHub search doesn't find it, although it does find GF_SERVER_ROOT_URL)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7015#issuecomment-541336418:149,log,logs,149,https://hail.is,https://github.com/hail-is/hail/pull/7015#issuecomment-541336418,4,"['log', 'test']","['logs', 'tested', 'testing']"
Testability,"I also verified the test fails against current batch, both in dev namespace and in default.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7886#issuecomment-574780144:20,test,test,20,https://hail.is,https://github.com/hail-is/hail/pull/7886#issuecomment-574780144,1,['test'],['test']
Testability,I am so glad I added those requester pays tests. They changed the exception type for requester pays failures and that broke our try-catch. The requester pays situation in GCP is so harebrained.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12555#issuecomment-1397345833:42,test,tests,42,https://hail.is,https://github.com/hail-is/hail/pull/12555#issuecomment-1397345833,1,['test'],['tests']
Testability,I am unfamiliar with Hail's test infrastructure so it would be more time efficient for the maintainers to add a test themselves.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14700#issuecomment-2397555427:28,test,test,28,https://hail.is,https://github.com/hail-is/hail/pull/14700#issuecomment-2397555427,2,['test'],['test']
Testability,"I apologize for not responding sooner to this. I've been mulling over what to do here as it's been over 4 years since I wrote the first interface. I think your changes are fine, but I need to go through the tests again and figure out what `_mentioned` was originally intended for to make sure this change doesn't break anything subtle. I'm going to have our CI run this SHA so I can see what the failures are.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13192#issuecomment-1603274953:207,test,tests,207,https://hail.is,https://github.com/hail-is/hail/pull/13192#issuecomment-1603274953,1,['test'],['tests']
Testability,"I attempted to use the TLS stuff and I've decided against it for this PR. It appears that the batch tests do not work locally at all. The whole essence of this PR is getting the shuffler IR tested and into the mainline. I started making the fixes necessary to support local testing of a local server and when that proved complicated investigated how BatchClientSuite works locally. It seems that using the existing TLS stuff would require fixing all the TLS stuff to allow for at least local->remote testing, if not local->local testing. This PR is already very complex, I'd like to get it merged so we can move forward separately with deploying and eventually harmonizing with the existing TLS infrastructure.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8726#issuecomment-650380852:100,test,tests,100,https://hail.is,https://github.com/hail-is/hail/pull/8726#issuecomment-650380852,5,['test'],"['tested', 'testing', 'tests']"
Testability,"I backed off the support for treating deep NAs as nonequal. That makes the change simpler, and also easier to test.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8859#issuecomment-634159069:110,test,test,110,https://hail.is,https://github.com/hail-is/hail/pull/8859#issuecomment-634159069,1,['test'],['test']
Testability,I backed out the iota optimzations to make this PR less controversial -- it now only introduces and tests StreamTakeWhile and StreamDropWhile. The other functionality will be a stacked PR.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10773#issuecomment-900335924:100,test,tests,100,https://hail.is,https://github.com/hail-is/hail/pull/10773#issuecomment-900335924,1,['test'],['tests']
Testability,I believe I've addressed all of your comments now. The test failure is some spurious batch thing. I'll rerun when it's approved.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9487#issuecomment-697554339:55,test,test,55,https://hail.is,https://github.com/hail-is/hail/pull/9487#issuecomment-697554339,1,['test'],['test']
Testability,"I believe I've addressed your comments, the benchmarks against 0.2.34 look normal, somehow there are no conflicts at this exact moment. Once #8474 goes in let's get this in.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8315#issuecomment-609962053:44,benchmark,benchmarks,44,https://hail.is,https://github.com/hail-is/hail/pull/8315#issuecomment-609962053,1,['benchmark'],['benchmarks']
Testability,I believe it is. I did some tests taking that part of my script out and they didn't get generated,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/5266#issuecomment-460788621:28,test,tests,28,https://hail.is,https://github.com/hail-is/hail/issues/5266#issuecomment-460788621,1,['test'],['tests']
Testability,I believe this will be covered by doc tests.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14572#issuecomment-2150952491:38,test,tests,38,https://hail.is,https://github.com/hail-is/hail/pull/14572#issuecomment-2150952491,1,['test'],['tests']
Testability,"I broke out the underlying BTree implementation and wrote some tests for it, so this is now stacked on #6771.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6727#issuecomment-516690783:63,test,tests,63,https://hail.is,https://github.com/hail-is/hail/pull/6727#issuecomment-516690783,1,['test'],['tests']
Testability,"I can see a fix using _annotate_all and then a select directly before entering the logreg, though.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4941#issuecomment-446173200:83,log,logreg,83,https://hail.is,https://github.com/hail-is/hail/issues/4941#issuecomment-446173200,1,['log'],['logreg']
Testability,"I can stack this change with the change that defines the function, I do test that the `vcf_combiner` pipeline runs in `test_impex.py::VCFTests::test_combiner_works`. That may be sufficient, since it would fail without this change.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5471#issuecomment-469340908:72,test,test,72,https://hail.is,https://github.com/hail-is/hail/pull/5471#issuecomment-469340908,1,['test'],['test']
Testability,I can take a look tomorrow - can you point me to the test that's failing?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9604#issuecomment-713144645:53,test,test,53,https://hail.is,https://github.com/hail-is/hail/pull/9604#issuecomment-713144645,1,['test'],['test']
Testability,"I can test whether I'm finding natives for NDArray expressions, but that doesn't mean I know what natives netlib is using.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/5040#issuecomment-570313646:6,test,test,6,https://hail.is,https://github.com/hail-is/hail/issues/5040#issuecomment-570313646,1,['test'],['test']
Testability,"I can't easily tell whether the change to emitted code does not change behavior, looked a bit, so will wait for tests, but besides that, looks good",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8057#issuecomment-583558504:112,test,tests,112,https://hail.is,https://github.com/hail-is/hail/pull/8057#issuecomment-583558504,1,['test'],['tests']
Testability,"I can't figure out why I'm getting an error in one test. But I also am not sure what to do with the `/batches` endpoint. I want the UI default to only show you your batches with the default query string 'user:jigold`. However, what should the REST endpoint be? All batches in all billing projects you have access for?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9954#issuecomment-770063101:51,test,test,51,https://hail.is,https://github.com/hail-is/hail/pull/9954#issuecomment-770063101,1,['test'],['test']
Testability,"I can't figure out why my out of memory test isn't working. It's reporting exit code 0 and no out of memory error even though when I do the same thing locally on my computer with docker run or on an instance in the cluster, I get exit code 137 and out of memory. I'm limiting the docker run command to the same amount of bytes that the docker command in the worker should be limiting it to (looked at the docker output in the worker logs). I think the next step is to try using curl to run docker containers rather than the docker cli.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7583#issuecomment-557686216:40,test,test,40,https://hail.is,https://github.com/hail-is/hail/pull/7583#issuecomment-557686216,2,"['log', 'test']","['logs', 'test']"
Testability,"I can't figure out why the tests aren't passing yet. It's failing on test_ci because the code to remove files is failing (KeyError???). Otherwise, I'm good with it, except I might take out the run_if_done_or_deleted for now so we don't get infinite loops while this code is still in flux.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11397#issuecomment-1071030226:27,test,tests,27,https://hail.is,https://github.com/hail-is/hail/pull/11397#issuecomment-1071030226,1,['test'],['tests']
Testability,"I can't find good tests either, can you add some tests in the spirit of my shared ipython session?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13405#issuecomment-1673732741:18,test,tests,18,https://hail.is,https://github.com/hail-is/hail/pull/13405#issuecomment-1673732741,2,['test'],['tests']
Testability,I can't see the test logs though and what is failing exactly :(,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11747#issuecomment-1096596402:16,test,test,16,https://hail.is,https://github.com/hail-is/hail/pull/11747#issuecomment-1096596402,2,"['log', 'test']","['logs', 'test']"
Testability,I changed my PR so the tests will run. I narrowed down the change in behavior occurs when removing just the commit #3426. Should we look into this further?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3417#issuecomment-385512355:23,test,tests,23,https://hail.is,https://github.com/hail-is/hail/pull/3417#issuecomment-385512355,1,['test'],['tests']
Testability,"I checked CI, the test is run in test_hail_python.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11227#issuecomment-1013474804:18,test,test,18,https://hail.is,https://github.com/hail-is/hail/pull/11227#issuecomment-1013474804,1,['test'],['test']
Testability,"I checked the [logs for this PR](https://console.cloud.google.com/logs/query;query=logName:%22worker%22%0Alabels.namespace:%22pr-10467%22;timeRange=PT6H;cursorTimestamp=2021-05-07T19:35:43.101282634Z?project=hail-vdc&folder=true&organizationId=548622027621&query=%0A), both normal logs and just ERRORs and didn't see anything abnormal. If there's a particular stress test you'd like me to try out I'm happy to test it",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10467#issuecomment-834787593:15,log,logs,15,https://hail.is,https://github.com/hail-is/hail/pull/10467#issuecomment-834787593,6,"['log', 'test']","['logName', 'logs', 'test']"
Testability,I checked the test failure should be fixed by #8131,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8193#issuecomment-592584656:14,test,test,14,https://hail.is,https://github.com/hail-is/hail/pull/8193#issuecomment-592584656,1,['test'],['test']
Testability,"I conducted tests on my laptop and on the cluster. I made these comments at https://github.com/hail-is/hail/pull/7534 and on [Zulip](https://hail.zulipchat.com/#narrow/stream/123011-Hail-Dev/topic/ci/near/180856479). From Zulip:; > By comparison, on my wired laptop (which should be strictly slower than in GCP), I can download and extract a tar -cvzf archive in 7.2 seconds; > ...; > The 20 seconds is: clone from github.com, git-merge; > The 7.2 seconds is: download from GCS, untar; > Just ran the test in the cloud using the google cloud sdk image started by k run, 3.7 seconds; > The download is super fast, like a second; > the untar is about the same in both contexts, 1.2 seconds; > But the download drops from 4.7 to ~1.5. Chris pointed out I should skip going to disk and pipe into tar, I have not timed that yet. I was seeing fetch being more like 8 minutes to my repository. My repository is significantly larger than Alex's. I could delete some old branches to address this. ---. > for inputs/outputs, I wonder if we should have a flag that indicates it is an archive and do the archive/extract automatically (like you've done here but more generally), and stop using cp -r. I almost went down this route. It would save a couple lines of tar/untar in runImage steps. I felt the savings wasn't worth the effort of implementing it. In the buildImage case (what this PR addressed), I think it's worth it to keep images small. > for downstream steps that only need a small part of the repo, is it better to copy out different pieces (archived or no) rather than copy the whole thing and extra the parts you need?. I haven't investigated this. I agree, there exists an inflection point where the size of data overcomes GCS latency and GCS-throughput / tar-decompress is the bottleneck. There's something to be said for tar'ing everything except for `.git`, but I didn't carefully check which steps need it and which steps do not. ---. In conclusion, I'd say this PR is necessary for #7534, and",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7626#issuecomment-560442927:12,test,tests,12,https://hail.is,https://github.com/hail-is/hail/pull/7626#issuecomment-560442927,2,['test'],"['test', 'tests']"
Testability,I confirmed the test_utils test I added is being run.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8679#issuecomment-622567618:27,test,test,27,https://hail.is,https://github.com/hail-is/hail/pull/8679#issuecomment-622567618,1,['test'],['test']
Testability,I confirmed with @jbloom22 the tests I modified should be `absolute=True`.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3364#issuecomment-380973165:31,test,tests,31,https://hail.is,https://github.com/hail-is/hail/pull/3364#issuecomment-380973165,1,['test'],['tests']
Testability,"I copied all the secrets from batch-pods into default that (1) didn't already exist (by name) in default, and (2) weren't k8s service account tokens (which are batch-pods specific). I also fixed the remaining test failures so this should be ready to go.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9718#issuecomment-729993692:209,test,test,209,https://hail.is,https://github.com/hail-is/hail/pull/9718#issuecomment-729993692,1,['test'],['test']
Testability,"I created a modified version of `profile225.vds`:. ```; from hail import *; hc = HailContext(); (hc.read('/Users/jbloom/data/profile225.vds'); .filter_multi(); .variant_qc(); .hardcalls(); .annotate_samples_expr('sa.pheno = pcoin(0.5), sa.cov1 = rnorm(0,1), sa.cov2 = rnorm(0,1), sa.cov3 = rnorm(0,1), sa.cov4 = rnorm(0,1), sa.cov5 = rnorm(0,1), sa.cov6 = rnorm(0,1), sa.cov7 = rnorm(0,1), sa.cov8 = rnorm(0,1)'); .write('/Users/jbloom/data/profile225.prelogreg.vds')); ```. And ran all the tests with two samples covariates (note these are all mapVariants so just stacking tranformations):; ```; (hc.read('/Users/jbloom/data/profile225.prelogreg.vds'); 	.linreg('sa.pheno', ['sa.cov1', 'sa.cov2']); 	.logreg('wald', 'sa.pheno', ['sa.cov1', 'sa.cov2'], root='va.wald'); 	.logreg('lrt', 'sa.pheno', ['sa.cov1', 'sa.cov2'], root='va.lrt'); 	.logreg('score', 'sa.pheno', ['sa.cov1', 'sa.cov2'], root='va.score'); 	.logreg('firth', 'sa.pheno', ['sa.cov1', 'sa.cov2'], root='va.firth'); 	.export_variants('/Users/jbloom/data/logreg.tsv', 'Variant = v, va.qc.*, linBeta = va.linreg.beta, waldBeta = va.wald.wald.beta, lrtBeta = va.lrt.lrt.beta, firthBeta = va.firth.firth.beta, linPval = va.linreg.pval, waldPval = va.wald.wald.pval, lrtPval = va.lrt.lrt.pval, firthPval = va.firth.firth.pval, scorePval = va.score.score.pval, waldIter = va.wald.fit.nIter, lrtIter = va.lrt.fit.nIter, firthIter = va.firth.fit.nIter')); ```. Beta for all variants, note that Firth resolves quasi-separation issues and regresses toward the zero:; ![logregbetalrtfirth](https://cloud.githubusercontent.com/assets/3201642/22867286/9e219bc2-f153-11e6-896a-c49e55593312.png). Pvals for all variants, note that Firth is more conservative:; ![logregpvallrtfirth](https://cloud.githubusercontent.com/assets/3201642/22867294/a86b012c-f153-11e6-8155-23004f9127fe.png). Beta for variants with at least 20 hets, basically the same:; ![logregbeta20hets](https://cloud.githubusercontent.com/assets/3201642/22859644/23feabb6-f0b1-11e6-88d5",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1375#issuecomment-279196409:491,test,tests,491,https://hail.is,https://github.com/hail-is/hail/pull/1375#issuecomment-279196409,5,"['log', 'test']","['logreg', 'tests']"
Testability,"I created a new multi-branch configuration that should be better for what we are trying to accomplish. This should fix issues 2 and 3. . For the reproducibility of errors, that will probably take both setting the random seed parameter in Hail for all random tests and getting Jenkins to give better error messages.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/335#issuecomment-214377125:258,test,tests,258,https://hail.is,https://github.com/hail-is/hail/issues/335#issuecomment-214377125,1,['test'],['tests']
Testability,"I decided to try to do this in two passes since making changes to deploy logic always finnicky on its own. I think this does the right thing though. . Does build.yaml support a way to say ""depend on this step x if we are doing x at all""? Redeploying the website will have to happen after the `deploy` step runs in the future and publishes the latest version of the docs to hail-common.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11294#issuecomment-1024606310:73,log,logic,73,https://hail.is,https://github.com/hail-is/hail/pull/11294#issuecomment-1024606310,1,['log'],['logic']
Testability,"I deleted the LinearRegressionFromHcsCommand and associated tests as it'd fallen out of sync with how hcs evolved for T2D, it's independent of the rest of the PR and I can add this functionality back later (at which point I imagine there will be other changes both to hcs and to the stats interfaces more generally).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/517#issuecomment-236385122:60,test,tests,60,https://hail.is,https://github.com/hail-is/hail/pull/517#issuecomment-236385122,1,['test'],['tests']
Testability,"I deleted the pod; ```; # k delete pod batch-2554-job-4-main-cc8d4 -n batch-pods; ```; Batch logs when batch discovered 2554 task 4 ""failed"":; ```; INFO | 2019-06-25 12:37:07,611 | batch.py | update_job_with_pod:976 | update job (2554, 4) with pod batch-2554-job-4-main-cc8d4; INFO | 2019-06-25 12:37:07,671 | batch.py | update_job_with_pod:976 | update job (2554, 4) with pod batch-2554-job-4-main-cc8d4; INFO | 2019-06-25 12:37:07,671 | batch.py | update_job_with_pod:989 | job (2554, 4) mark complete; WARNING | 2019-06-25 12:37:07,676 | batch.py | mark_complete:495 | job (2554, 4) has pod batch-2554-job-4-main-cc8d4 which is terminated but has no timing information. {'api_version': 'v1',; 'kind': 'Pod',; 'metadata': {'annotations': None,; 'cluster_name': None,; 'creation_timestamp': datetime.datetime(2019, 6, 25, 3, 9, 4, tzinfo=tzlocal()),; 'deletion_grace_period_seconds': 30,; 'deletion_timestamp': datetime.datetime(2019, 6, 25, 12, 37, 37, tzinfo=tzlocal()),; 'finalizers': None,; 'generate_name': 'batch-2554-job-4-main-',; 'generation': None,; 'initializers': None,; 'labels': {'app': 'batch-job',; 'hail.is/batch-instance': 'cd50b95a89914efb897965a5e982a29d',; 'uuid': '3bf0b121f62d4cfea15cf187a21bc0ed'},; 'name': 'batch-2554-job-4-main-cc8d4',; 'namespace': 'batch-pods',; 'owner_references': None,; 'resource_version': '72793521',; 'self_link': '/api/v1/namespaces/batch-pods/pods/batch-2554-job-4-main-cc8d4',; 'uid': '968b4ba5-96f6-11e9-8aa3-42010a80015f'},; 'spec': {'active_deadline_seconds': None,; 'affinity': None,; 'automount_service_account_token': None,; 'containers': [{'args': None,; 'command': ['/bin/bash',; '-c',; 'set -ex; mkdir -p '; '/io/pipeline/pipeline-f559bb010746/__TASK__3/; '; '__RESOURCE_FILE__747=/io/pipeline/pipeline-f559bb010746/inputs/5fa554a9; '; '__RESOURCE_FILE__19=/io/pipeline/pipeline-f559bb010746/inputs/eaaeaee5.vcf.gz.tbi; '; '__RESOURCE_FILE__18=/io/pipeline/pipeline-f559bb010746/inputs/eaaeaee5.vcf.gz; '; '__RESOURCE_FILE__6=/io/pipelin",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/6466#issuecomment-505429649:93,log,logs,93,https://hail.is,https://github.com/hail-is/hail/issues/6466#issuecomment-505429649,1,['log'],['logs']
Testability,"I did a benchmarking experiment.; My inputs:; **VDS**: vds created from `seq 1 100 300000000` mapped to ""1 $i A T NA"", and imported with `hail importannotations`. This is a 3M variant sites vds.; **interval file**: exome capture regions provided by Monkol. Seems like pretty random non-overlapping interval over chr1. 39K variants fall in these intervals, slightly over 1%. My cmd line:; `hail read -i <vds> filtervariants intervals --keep -i <interval list> count`, with the read/filter/count repeated 10 times. I ran this on the current master and this branch on one core on my laptop. I then calculated the time per iteration. **Benchmark results**; current master: 4.876s, with a std dev of 0.18; this branch: 4.716s, with a std dev of 0.18; mean ratio: 0.967. **Conclusion**: this branch is faster than master for interval queries by a minimum of 3-4%",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/441#issuecomment-231229379:8,benchmark,benchmarking,8,https://hail.is,https://github.com/hail-is/hail/pull/441#issuecomment-231229379,2,"['Benchmark', 'benchmark']","['Benchmark', 'benchmarking']"
Testability,"I did a little more digging into this today. I tried printing the size of the largest method in a class before splitting, before emitting bytecode. In the failing `test_can_process_wide_tables` test, the comparison of before/after this pr was consistent across all table widths in the test: some methods stay the same size, some increase by 7.4%. Only the largest table width triggers a ClassTooLarge exception. It's looking like this just created a small constant increase in code size, which we could make up with optimizations like constant folding, or longer term just fix the root problem by splitting up these giant classes. @tpoterba What are your thoughts on just disabling the largest wide-table test, vs spending more time understanding exactly how this is generating larger classes?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10905#issuecomment-937106437:194,test,test,194,https://hail.is,https://github.com/hail-is/hail/pull/10905#issuecomment-937106437,3,['test'],['test']
Testability,"I did debug this, though. The failing test (which succeeds in Spark, but fails in local backend) collects a table and asserts that the result is equal to a list of expected rows. The failure is caused by an ordering issue - the rows are the same, but the order is slightly different between the Spark backend (which produces the expected output) and the local backend. However, I think that actually *both* orders are valid under Hail's guarantees. I'll bring this to our next team meeting for group discussion.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9618#issuecomment-777080408:38,test,test,38,https://hail.is,https://github.com/hail-is/hail/pull/9618#issuecomment-777080408,2,"['assert', 'test']","['asserts', 'test']"
Testability,"I did make sure it renders as I intended, and the round trip test means it produces valid type grammar. but I'm hesitant to add a test for exact characters, since if we want to change spacing or something cosmetic then we have to change the test. I feel the same way about assertRaisesRegex checks -- we should be able to make error messages nicer.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2998#issuecomment-368885849:61,test,test,61,https://hail.is,https://github.com/hail-is/hail/pull/2998#issuecomment-368885849,4,"['assert', 'test']","['assertRaisesRegex', 'test']"
Testability,"I did the check against MMAP results using this R code on the grids in global from lmmreg analysis:; ```; ##### delta.tsv has two columns; # logDelta given by global.lmmreg.fit.logDeltaGrid; # logLkhd given by global.lmmreg.fit.logLkhdVals; df = read.table('delta.m.25.tsv', header=T, sep=""\t""). ##### method to estimate sigma, the standard deviation of normal approximation of confidence interval for h2; ### h2 = sigmoid(-ln(delta)); df$h2 = 1 / (1 + exp(df$logDelta)). ### fit parabola near maximum logLkhd of h2; maxRow = which.max(df$logLkhd). # h2; x1 = df$h2[maxRow - 1]; x2 = df$h2[maxRow]; x3 = df$h2[maxRow + 1]. # logLkhd at h2; y1 = df$logLkhd[maxRow - 1]; y2 = df$logLkhd[maxRow]; y3 = df$logLkhd[maxRow + 1]. # find a in logLkhd = a * x^2 + b * x + c; a = (x3 * (y2 - y1) + x2 * (y1 - y3) + x1 * (y3 - y2)) / ((x2 - x1) * (x1 - x3) * (x3 - x2)). # logLkhd = - (x - mu)^2 / (2 * sigma^2) + const = -1 / (2 * sigma^2) * x^2 + lower order terms; sigma2 = 1 / (-2 * a); sigma = sqrt(sigma2). ##### Method to plot normalized likelihood function of h2 and normal approximation; # shift log lkhd to have max of 0, to prevent numerical issues; maxLogLkhd = max(df$logLkhd); df$logLkhd = df$logLkhd - maxLogLkhd. ### integrate in h2 coordinates; df$width = df$h2 * (1 - df$h2) # d(h2) / d (ln(delta)) = - h2 * (1 - h2); total = sum(exp(df$logLkhd) * df$width) # normalization constant; df$posterior = exp(df$logLkhd) * df$width / total # normalized likelihood of h2 = posterior of h2 with uniform prior. ### normal approximation; meanPost = sum(df$h2 * df$posterior); sdPost = sqrt(sum((df$h2 - meanPost)**2 * df$posterior)); df$normalApproxPost = dnorm(df$h2, meanPost, sdPost). ### plots; qplot(x = logDelta, y = logLkhd, data = df, geom = 'line', xlab='ln(delta)', ylab='logLkhd(delta)'); qplot(x = h2 , y = logLkhd, data = df, xlim =c(0,1), geom = 'line', xlab = 'h2', ylab='logLkhd(h2)'); qplot(x = h2 , y = posterior, data = df, xlim =c(0,1), geom = 'line', xlab = 'h2', ylab='posterior(h2)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1720#issuecomment-297590538:141,log,logDelta,141,https://hail.is,https://github.com/hail-is/hail/pull/1720#issuecomment-297590538,13,['log'],"['logDelta', 'logDeltaGrid', 'logLkhd', 'logLkhdVals']"
Testability,"I did update all the random tests in the randomness PR, if I disabled any it was definitely unintentional.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12588#issuecomment-1397385080:28,test,tests,28,https://hail.is,https://github.com/hail-is/hail/pull/12588#issuecomment-1397385080,1,['test'],['tests']
Testability,I didn't claim to have fixed this one yet. Mentioned I had not pushed because it will fail tests due to per-variant beta being wrong.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1929#issuecomment-311341764:91,test,tests,91,https://hail.is,https://github.com/hail-is/hail/pull/1929#issuecomment-311341764,1,['test'],['tests']
Testability,I disabled the two tests that are failing because of this set/dict comparison issue.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6050#issuecomment-491048694:19,test,tests,19,https://hail.is,https://github.com/hail-is/hail/pull/6050#issuecomment-491048694,1,['test'],['tests']
Testability,"I discovered this when I tried to run a vcf combiner pipeline. To me, this signals that we need better knowledge of where integration tests live and how to add to them.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5033#issuecomment-449468618:134,test,tests,134,https://hail.is,https://github.com/hail-is/hail/pull/5033#issuecomment-449468618,1,['test'],['tests']
Testability,"I don't believe I have access to look at the test failures. If you let me know what failed, I'll do my best to fix it!",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13129#issuecomment-1581212490:45,test,test,45,https://hail.is,https://github.com/hail-is/hail/pull/13129#issuecomment-1581212490,1,['test'],['test']
Testability,"I don't believe there were any glaring problems on the Spark 2 side, but some the Python tests on Spark 3 are failing, notably in `test/hail/linalg/test_linalg.py`. I can't quite diagnose the issue off the top of my head.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9524#issuecomment-701074089:89,test,tests,89,https://hail.is,https://github.com/hail-is/hail/pull/9524#issuecomment-701074089,2,['test'],"['test', 'tests']"
Testability,"I don't disagree. However, we need toString on (scalar) Type because they are used for error messages all over. MatrixTable used to have a bunch of separate types, now it just has a MatrixType. I think some error messages could now use the matrix type. Python also has some matrix type printing logic, these should probably get unified. Once I have printing for the user, it seemed easier to write a (admittedly small) parser than a separate to/from JSON. I admit, apart from user error messages, JSON is natural since that's what we're storing in the metadata file. Do you have a concrete suggestion? I'm not sure quite what to do that's better than this.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2825#issuecomment-362082473:295,log,logic,295,https://hail.is,https://github.com/hail-is/hail/pull/2825#issuecomment-362082473,1,['log'],['logic']
Testability,"I don't have evidence that it matters, feel like it would though. If it's out for now that's fine, I'll do a test on Friday if needed.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2040#issuecomment-319677861:109,test,test,109,https://hail.is,https://github.com/hail-is/hail/pull/2040#issuecomment-319677861,1,['test'],['test']
Testability,"I don't know the system or the test suite well any more. What parts of our system are not well tested by the automated tests?. No need for adoption, just review!",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13372#issuecomment-1673676748:31,test,test,31,https://hail.is,https://github.com/hail-is/hail/pull/13372#issuecomment-1673676748,3,['test'],"['test', 'tested', 'tests']"
Testability,"I don't quite understand this. To take advantage of this, it seems like we need also parallelize the tests. Where's the test parallelism set? Can we get a performance comparison, e.g. this PR test vs master?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7022#issuecomment-529491736:101,test,tests,101,https://hail.is,https://github.com/hail-is/hail/pull/7022#issuecomment-529491736,3,['test'],"['test', 'tests']"
Testability,"I don't see an assert in the linked code. Either way, I'll try to look at this tonight or after my talk in the morning.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5435#issuecomment-467652863:15,assert,assert,15,https://hail.is,https://github.com/hail-is/hail/pull/5435#issuecomment-467652863,1,['assert'],['assert']
Testability,"I don't see the issue. ```scala; def stringSampleIds: IndexedSeq[String] = {; val colKeyTypes = typ.colKeyStruct.types; assert(colKeyTypes.length == 1 && colKeyTypes(0).isInstanceOf[TString], colKeyTypes.toSeq); val querier = typ.colType.query(typ.colKey(0)); colValues.value.map(querier(_).asInstanceOf[String]); }. def requireUniqueSamples(method: String) {; val dups = stringSampleIds.counter().filter(_._2 > 1).toArray; if (dups.nonEmpty); fatal(s""Method '$method' does not support duplicate column keys. Duplicates:"" +; s""\n @1"", dups.sortBy(-_._2).map { case (id, count) => s""""""($count) ""$id"""""""" }.truncatable(""\n "")); }; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/6062#issuecomment-490088444:120,assert,assert,120,https://hail.is,https://github.com/hail-is/hail/issues/6062#issuecomment-490088444,1,['assert'],['assert']
Testability,"I don't think it is bad to have both. They have two different use cases. I envisioned `head` as being a mechanism to test pipelines on small amounts of data. `take` seems to be useful if someone actually wants to look at each object in the first n rows of data. However, it does add extra methods to VariantDataset when `take` is equivalent to `head().collect()`. Thinking back to the group/ungroup discussion, we decided to add those methods even though they could be implemented by the user in expr. However, I think those operations were more complicated than `take`. I don't have strong feelings either way.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2204#issuecomment-328148402:117,test,test,117,https://hail.is,https://github.com/hail-is/hail/pull/2204#issuecomment-328148402,1,['test'],['test']
Testability,"I don't think so. The change is clearly fixes an issue and is an improvement. That said, write failures are rare and I just want to flush out any other rare errors so the tests are reliable.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10023#issuecomment-776868666:171,test,tests,171,https://hail.is,https://github.com/hail-is/hail/pull/10023#issuecomment-776868666,1,['test'],['tests']
Testability,I don't think these tests will pass. I'll address the issues when I come back from vacation. Feel free to reopen if you want.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10218#issuecomment-807414189:20,test,tests,20,https://hail.is,https://github.com/hail-is/hail/pull/10218#issuecomment-807414189,1,['test'],['tests']
Testability,I don't think we should hold up this PR for that. Benchmarks are run rarely and they should be setting their limits using PYSPARK_SUBMIT_ARGS anyway.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9076#issuecomment-664654683:50,Benchmark,Benchmarks,50,https://hail.is,https://github.com/hail-is/hail/pull/9076#issuecomment-664654683,1,['Benchmark'],['Benchmarks']
Testability,"I don't understand how this PR can have the following test failures!. ```; =================================== FAILURES ===================================; ____________________________ Test.test_list_batches ____________________________. self = <test.test_batch.Test testMethod=test_list_batches>. def test_list_batches(self):; tag = secrets.token_urlsafe(64); b1 = self.client.create_batch(attributes={'tag': tag, 'name': 'b1'}); b1.create_job('alpine', ['sleep', '30']); b1.close(); ; b2 = self.client.create_batch(attributes={'tag': tag, 'name': 'b2'}); b2.create_job('alpine', ['echo', 'test']); b2.close(); ; def assert_batch_ids(expected, complete=None, success=None, attributes=None):; batches = self.client.list_batches(complete=complete, success=success, attributes=attributes); # list_batches returns all batches for all prev run tests; actual = set([batch.id for batch in batches]).intersection({b1.id, b2.id}); self.assertEqual(actual, expected); ; assert_batch_ids({b1.id, b2.id}, attributes={'tag': tag}); ; b2.wait(); ; > assert_batch_ids({b1.id}, complete=False, attributes={'tag': tag}). test/test_batch.py:93: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; test/test_batch.py:87: in assert_batch_ids; self.assertEqual(actual, expected); E AssertionError: Items in the second set but not the first:; E 19; ________________________________ test_callback _________________________________. client = <batch.client.BatchClient object at 0x7f0d1363ee80>. def test_callback(client):; from flask import Flask, request; app = Flask('test-client'); output = []; ; @app.route('/test', methods=['POST']); def test():; output.append(request.get_json()); return Response(status=200); ; try:; server = ServerThread(app); server.start(); batch = client.create_batch(callback=server.url_for('/test')); head = batch.create_job('alpine:3.8', command=['echo', 'head']); left = batch.create_job('alpine:3.8', command=['echo', 'left'], parents=[head]); right = batch.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6260#issuecomment-498852506:54,test,test,54,https://hail.is,https://github.com/hail-is/hail/pull/6260#issuecomment-498852506,8,"['Test', 'assert', 'test']","['Test', 'assertEqual', 'test', 'testMethod', 'tests']"
Testability,"I don't understand why my code is causing timeouts, and only in that one test slice.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14391#issuecomment-2098885167:73,test,test,73,https://hail.is,https://github.com/hail-is/hail/pull/14391#issuecomment-2098885167,1,['test'],['test']
Testability,"I don't understand why the Python tests are failing yet. They are failing on master as well, and at least some of the errors are identical (NullPointerException in HailContext.apply). Scala tests are passing. Wondering if this is due to py4j version mismatch.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6083#issuecomment-493192123:34,test,tests,34,https://hail.is,https://github.com/hail-is/hail/pull/6083#issuecomment-493192123,2,['test'],['tests']
Testability,"I don't want to add a larger test to scala, since we're ripping it all out of scala soon. Currently this functionality isn't exposed to Python, and it should be tested when it's exposed.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2884#issuecomment-365378540:29,test,test,29,https://hail.is,https://github.com/hail-is/hail/pull/2884#issuecomment-365378540,2,['test'],"['test', 'tested']"
Testability,I double checked the test database.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9668#issuecomment-722676096:21,test,test,21,https://hail.is,https://github.com/hail-is/hail/pull/9668#issuecomment-722676096,1,['test'],['test']
Testability,I duplicated globals.py so I can get the tests going. I'll think about how to organize sharing between the client in the server. Might just be to install the client on the server image.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6423#issuecomment-504153212:41,test,tests,41,https://hail.is,https://github.com/hail-is/hail/pull/6423#issuecomment-504153212,1,['test'],['tests']
Testability,"I endorse such a feature! In the meantime, I think we now have a PR that restores job logs for new versions of Hail. Let's get it out to the users post-haste!",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12941#issuecomment-1529980071:86,log,logs,86,https://hail.is,https://github.com/hail-is/hail/pull/12941#issuecomment-1529980071,1,['log'],['logs']
Testability,"I eventually found the command line below that worked. It would be helpful to update the Getting Started page to include any necessary command line --conf parameters. ` spark-submit --jars build/libs/hail-all-spark.jar --conf ""spark.driver.extraClassPath=file:///restricted/projectnb/genpro/github/hail/build/libs/hail-all-spark.jar"" --conf ""spark.executor.extraClassPath=file:////restricted/projectnb/genpro/github/hail/build/libs/hail-all-spark.jar"" --conf spark.kryo.registrator=is.hail.kryo.HailKryoRegistrator --py-files build/distributions/hail-python.zip --num-executors 6 test.py; `",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/3342#issuecomment-380210064:580,test,test,580,https://hail.is,https://github.com/hail-is/hail/issues/3342#issuecomment-380210064,1,['test'],['test']
Testability,"I expect this to fail tests, then I'll go debug and fix up the IRs that serialize children.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5142#issuecomment-454423215:22,test,tests,22,https://hail.is,https://github.com/hail-is/hail/pull/5142#issuecomment-454423215,1,['test'],['tests']
Testability,"I feel like I probably ought to have more tests, but wasn't sure what else to include. I didn't want to make the `StreamLen` tests depend on the correctness of more complicated IR nodes like `StreamZip`",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8783#issuecomment-628105025:42,test,tests,42,https://hail.is,https://github.com/hail-is/hail/pull/8783#issuecomment-628105025,2,['test'],['tests']
Testability,"I figured, noticed the double post :). ```; The exception in your above message is coming from the Apply node being inferred as a PVoid by your case _ => PVoid code. Writing the rule for the apply node should fix that.; ```. Right. It's just that I tried to write the rule, and quickly ran across the fact that Seq[IR] would be inferred such that the first IR had a different type from the 2nd or Nth. This is what I had written:. ```scala; case ApplySpecial(name, irs) => {; val it = irs.iterator; val head = it.next(); head.inferSetPType(env). while(it.hasNext) {; val value = it.next(). value.inferSetPType(env); assert(value.pType2 == head.pType2); }. head.pType2; }; ```. With the result in one case that `head.pType2` was bool, `value.pType2` was something else. Without a type union, it wasn't clear to me what to return. One possibility was that I shouldn't handle this node, so I started with that possibility, which I know understand isn't right. The other was that the implementation was wrong, and my first guess there is that one of the IRs dictates the type (say the first), the 2nd is that there is a simple precedence rule, the 3rd is that the type inference procedure has some branching logic over the collection.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6594#issuecomment-513007861:616,assert,assert,616,https://hail.is,https://github.com/hail-is/hail/pull/6594#issuecomment-513007861,2,"['assert', 'log']","['assert', 'logic']"
Testability,"I find it compelling that this fixed the downloads. But I'd also like to understand why this changed worked. I will approve it to see if it unblocks Lindo while we keep discussing. > We needed to await cancelled tasks to handle the error that was raised inside the task. Right. We want to cancel the task and wait for it to finish, but we don't want any exceptions to be raised out. Your code appears to do that, but so does the previous code. Nothing in the documentation for `asyncio.wait` indicates it will raise exceptions: https://docs.python.org/3/library/asyncio-task.html#asyncio.wait. I also tested a short example:. ```; import asyncio; import sys. async def foo():; try:; print('A'); await asyncio.sleep(5); print('B'); return 5; finally:; print(sys.exc_info()). async def async_main():; print('creating task...'); t = asyncio.ensure_future(foo()); # wait for foo to sleep; await asyncio.sleep(1). # cancel foo in sleep; print('cancelling task...'); t.cancel(). print('waiting for task...'); await asyncio.wait([t]). print('done.'). asyncio.run(async_main()); ```. which prints:. ```; $ python3 foo.py; creating task...; A; cancelling task...; waiting for task...; (<class 'concurrent.futures._base.CancelledError'>, CancelledError(), <traceback object at 0x7f8cdef65e10>); done.; ```. The task is cancelled, and CancelledError is raised, but not propagated out. > 75% of his jobs would fail with this error. I'm actually confused where the cancellation error is coming from in the first place. If the code you're changing is the issue (and I think it is, too) then we only cancel if some other exception was raised, either by a task or in `__aexit__`. What's that exception? Can we print it out (enable more logging) in your test setup?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10534#issuecomment-853115655:601,test,tested,601,https://hail.is,https://github.com/hail-is/hail/pull/10534#issuecomment-853115655,3,"['log', 'test']","['logging', 'test', 'tested']"
Testability,"I fixed that last thing, I will add benchmark comment when I have it.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1457#issuecomment-286524152:36,benchmark,benchmark,36,https://hail.is,https://github.com/hail-is/hail/pull/1457#issuecomment-286524152,1,['benchmark'],['benchmark']
Testability,I fixed the failing test by merging in #8142. This will have to wait for that to go in.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8156#issuecomment-594161055:20,test,test,20,https://hail.is,https://github.com/hail-is/hail/pull/8156#issuecomment-594161055,1,['test'],['test']
Testability,"I forgot that we still had cron jobs running gcr-cleaner daily. This could have been conflicting with the new cleanup policy deletion settings. Let's reopen if this occurs again. Posting the job configurations here before I delete the jobs. ```; {""repos"":[""us-docker.pkg.dev/hail-vdc/hail/auth"",""us-docker.pkg.dev/hail-vdc/hail/base"",""us-docker.pkg.dev/hail-vdc/hail/base_spark_3_2"",""us-docker.pkg.dev/hail-vdc/hail/batch"",""us-docker.pkg.dev/hail-vdc/hail/batch-driver-nginx"",""us-docker.pkg.dev/hail-vdc/hail/batch-worker"",""us-docker.pkg.dev/hail-vdc/hail/benchmark"",""us-docker.pkg.dev/hail-vdc/hail/blog_nginx"",""us-docker.pkg.dev/hail-vdc/hail/ci"",""us-docker.pkg.dev/hail-vdc/hail/ci-intermediate"",""us-docker.pkg.dev/hail-vdc/hail/ci-utils"",""us-docker.pkg.dev/hail-vdc/hail/create_certs_image"",""us-docker.pkg.dev/hail-vdc/hail/echo"",""us-docker.pkg.dev/hail-vdc/hail/grafana"",""us-docker.pkg.dev/hail-vdc/hail/hail-base"",""us-docker.pkg.dev/hail-vdc/hail/hail-build"",""us-docker.pkg.dev/hail-vdc/hail/hail-buildkit"",""us-docker.pkg.dev/hail-vdc/hail/hail-run"",""us-docker.pkg.dev/hail-vdc/hail/hail-run-tests"",""us-docker.pkg.dev/hail-vdc/hail/hail-pip-installed-python37"",""us-docker.pkg.dev/hail-vdc/hail/hail-pip-installed-python38"",""us-docker.pkg.dev/hail-vdc/hail/hail-ubuntu"",""us-docker.pkg.dev/hail-vdc/hail/memory"",""us-docker.pkg.dev/hail-vdc/hail/monitoring"",""us-docker.pkg.dev/hail-vdc/hail/notebook"",""us-docker.pkg.dev/hail-vdc/hail/notebook_nginx"",""us-docker.pkg.dev/hail-vdc/hail/prometheus"",""us-docker.pkg.dev/hail-vdc/hail/service-base"",""us-docker.pkg.dev/hail-vdc/hail/service-java-run-base"",""us-docker.pkg.dev/hail-vdc/hail/test-ci"",""us-docker.pkg.dev/hail-vdc/hail/test-monitoring"",""us-docker.pkg.dev/hail-vdc/hail/test-benchmark"",""us-docker.pkg.dev/hail-vdc/hail/test_hello_create_certs_image"",""us-docker.pkg.dev/hail-vdc/hail/website"",""us-docker.pkg.dev/hail-vdc/hail/ci-hello"",""us-docker.pkg.dev/hail-vdc/hail/hailgenetics/vep-grch37-85"",""us-docker.pkg.dev/hail-vdc/hail/hailgenetics/vep",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13603#issuecomment-1734249545:556,benchmark,benchmark,556,https://hail.is,https://github.com/hail-is/hail/issues/13603#issuecomment-1734249545,1,['benchmark'],['benchmark']
Testability,I forgot the Java tests were split in the same way as the batch tests and had forgot to add the new env variable in each split.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10807#issuecomment-905458230:18,test,tests,18,https://hail.is,https://github.com/hail-is/hail/pull/10807#issuecomment-905458230,2,['test'],['tests']
Testability,"I got `Aggregators2Suite.testTakeBy` to pass, so we're probably good?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8671#issuecomment-622046822:25,test,testTakeBy,25,https://hail.is,https://github.com/hail-is/hail/pull/8671#issuecomment-622046822,1,['test'],['testTakeBy']
Testability,"I gotta figure out how to write tests for this, but I've pushed so that Ally can take a look.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12768#issuecomment-1458962137:32,test,tests,32,https://hail.is,https://github.com/hail-is/hail/pull/12768#issuecomment-1458962137,1,['test'],['tests']
Testability,"I guess it depends whether you want up to date or just compatible, the maintainers seem to be of the opinion that you should either always update the lock file immediately or set upper bounds if you're not ok with a certain upgrade, seen [here](https://github.com/jazzband/pip-tools/issues/882). Continuous work, but maybe the right way to go honestly. In that case trivially make a build.yaml step that asserts the lock file is valid and up to date.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11842#issuecomment-1131859471:404,assert,asserts,404,https://hail.is,https://github.com/hail-is/hail/pull/11842#issuecomment-1131859471,1,['assert'],['asserts']
Testability,I guess the design of the whole artifacts system doesn't really account for anything but hail/hail. We need to fix up the index page to account for other projects and add another level of testing indirection,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4514#issuecomment-428563325:188,test,testing,188,https://hail.is,https://github.com/hail-is/hail/issues/4514#issuecomment-428563325,1,['test'],['testing']
Testability,I had done this a while ago in a throwaway after talking to Tim. This causes more failures than just the new test that I added. I'm at a loss for how to proceed.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4585#issuecomment-434111128:109,test,test,109,https://hail.is,https://github.com/hail-is/hail/pull/4585#issuecomment-434111128,1,['test'],['test']
Testability,I had to add `TrivialContext` which is just a dummy context for when I'm not really using regions. I guess I could also add tests that use the context in some meaningful way. The tension is that the context-using-functionality should already be tested via MatrixTable and Table.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3310#issuecomment-379903357:124,test,tests,124,https://hail.is,https://github.com/hail-is/hail/pull/3310#issuecomment-379903357,2,['test'],"['tested', 'tests']"
Testability,I had to change the delete log test in my SQL branch because I changed the meaning of delete. I haven't had problems with that test previously. The only one I have problems with is `test_callback`. I ran `test_callback` 100 times and it seems like it failed approx 2 times locally. So that's going to be a pain to figure out if I can't make it happen more often...,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5852#issuecomment-481823759:27,log,log,27,https://hail.is,https://github.com/hail-is/hail/pull/5852#issuecomment-481823759,3,"['log', 'test']","['log', 'test']"
Testability,I had to fix the tests to test equality rather than the expected set itself.; https://docs.python.org/3.5/library/doctest.html#warnings,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6028#issuecomment-491035884:17,test,tests,17,https://hail.is,https://github.com/hail-is/hail/pull/6028#issuecomment-491035884,2,['test'],"['test', 'tests']"
Testability,"I had to make a few changes to CI to make it test against a local version of the latest batch. Long term, we'll actually deploy batch and CI into a fresh namespace to do testing. For now, we explicitly start batch in the test container for CI to test against.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4930#issuecomment-446008184:45,test,test,45,https://hail.is,https://github.com/hail-is/hail/pull/4930#issuecomment-446008184,4,['test'],"['test', 'testing']"
Testability,I had to merge https://github.com/hail-is/hail/pull/11589 into this one to pass all the tests,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11599#issuecomment-1073060172:88,test,tests,88,https://hail.is,https://github.com/hail-is/hail/pull/11599#issuecomment-1073060172,1,['test'],['tests']
Testability,"I had to remove the ui tests for now. The ui is protected by a session ID in the aiohttp session cookie (not the auth header I was trying to use), and I need a bit more infrastructure to cook up a valid one of those in the tests.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7270#issuecomment-541263068:23,test,tests,23,https://hail.is,https://github.com/hail-is/hail/pull/7270#issuecomment-541263068,2,['test'],['tests']
Testability,I hand-tested the UI and everything looks good.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7606#issuecomment-557902950:7,test,tested,7,https://hail.is,https://github.com/hail-is/hail/pull/7606#issuecomment-557902950,1,['test'],['tested']
Testability,"I have a branch where I've upgraded the dependency to libsimdpp-2.1 and resolved issues around depreciation warnings, this does solve the issue. We would need to discuss if we want to upgrade the dependency, and benchmark against the new version to see if it causes any performance regression. Branch is [here](https://github.com/chrisvittal/hail/tree/libsimdpp-2.1)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/3955#issuecomment-406297780:212,benchmark,benchmark,212,https://hail.is,https://github.com/hail-is/hail/issues/3955#issuecomment-406297780,1,['benchmark'],['benchmark']
Testability,"I have a fix for this. We shouldn't run these tests in production. I added the `pytest.mark.test_scope_only`. Then I added this flag to the existing test_batch_* jobs: `-m ""not test_scope_only""`. Finally, I added a new step that just runs those tests in the test and dev scopes. `-m ""test_scope_only""` with. ```; + scopes:; + - dev; + - test; ```. If you're okay with this strategy, I'll make a separate PR so that we can both use this in our respective PRs. Can you also make a separate PR for the `_token_file` change and having the dev and regular client?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9553#issuecomment-705604419:46,test,tests,46,https://hail.is,https://github.com/hail-is/hail/pull/9553#issuecomment-705604419,4,['test'],"['test', 'tests']"
Testability,I have a follow-up PR that ~halves the run-time of the service backend tests: https://github.com/hail-is/hail/pull/11212,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11194#issuecomment-1015479543:71,test,tests,71,https://hail.is,https://github.com/hail-is/hail/pull/11194#issuecomment-1015479543,1,['test'],['tests']
Testability,"I have a implemented a highly concurrent Python asyncio filesystem that supports GCS and the local file system (and soon S3). It is my intention to ultimately replace the hadoop_* functions with this. The new thing feels pretty fast: copy benchmarks 2-5x faster than gsutil for example, esp. when working with lots of files. Some remarks:; - It is designed to do the minimal number of system calls/API calls per operation so there is serial loops like this anywhere in the code.; - Our short term goal is to use this for the input/output steps in Batch.; - It doesn't support Hadoop (and I'm not super exciting about maintaining that).; - Some things will be much faster because no round trip the JVM. ; - The interface is fully async, so we'll need to build some wrappers if you want a synchronous interface. The async interface will get you concurrency within operations (copy, rmtree), the sync interface only gets you currency within operations.; - The list files operation doesn't support globbing yet.; - There are no docs yet.; - Compared to Hadoop/POSIX, the interface is slightly lower level but it was designed to map well onto the filesystems we want to support. There is no `stat`, for example, but is statfile (which requires the input to be a file) and listfiles (which requires it to be a directory), although we could build that.; - I'd say the code is beta and not quite completely solid but getting close. Here is the AsyncFS interface: https://github.com/hail-is/hail/blob/main/hail/python/hailtop/aiotools/fs.py#L70. Here is an example creating a router filesystem that supports GCS and the local file system: https://github.com/hail-is/hail/blob/main/hail/python/test/hailtop/test_aiogoogle.py#L17. I'd be happy to chat more about what would make this attractive for you guys to switch to.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10043#issuecomment-778364838:239,benchmark,benchmarks,239,https://hail.is,https://github.com/hail-is/hail/pull/10043#issuecomment-778364838,2,"['benchmark', 'test']","['benchmarks', 'test']"
Testability,"I have an RFC proposal to just handle the ambiguity: https://github.com/hail-is/hail-rfcs/blob/main/rfc/0008-handle-vcf-array-field-ambiguity. I proposed a PR to fix this: https://github.com/hail-is/hail/pull/13465 However, I missed a key issue: many VCF's *elide* fields to indicate missingness. That is not ambiguous: a field that is entirely elided is clearly missing, not an array of one missing value. You can't do this in a FORMAT (aka entry aka genotype) field, but you can do this in an INFO field a la:; ```; ##fileformat=VCFv4.2; ##INFO=<ID=AC,Number=A,Type=Integer,Description=""Allele count in genotypes, for each ALT allele, in the same order as listed"">; ##INFO=<ID=NUMS,Number=*,Type=Float,Description=""some numbers"">; ##INFO=<ID=AN,Number=1,Type=Integer,Description=""Total number of alleles in called genotypes"">; #CHROM	POS	ID	REF	ALT	QUAL	FILTER	INFO	FORMAT ...; ... AC=1,1;AN=1 ...; ```; the `NUMS` field should be read as missing. My PR considered it unacceptably ambiguous because it thought it had been `NUMS=.`. I don't think we can fix this problem entirely from Python. We need to use Scala-side logic because after we parse in Scala, we lose the knowledge that a field was entirely elided versus a single missing dot.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13346#issuecomment-1773555545:1120,log,logic,1120,https://hail.is,https://github.com/hail-is/hail/issues/13346#issuecomment-1773555545,1,['log'],['logic']
Testability,"I have commit `a451e1aaa5d1dd4cc055f8e7c1e261aa59eabeca`, I built the jar as `cd hail && ./gradlew shadowJar`. I have this file:; ```; (foo) # cat /tmp/failure.R ; data(mtcars); hail_jar <- ""/Users/bking/projects/hail/hail/build/libs/hail-all-spark.jar""; classpath_vars <-; c(spark.driver.extraClassPath=paste(hail_jar, collapse=.Platform$path.sep),; spark.executor.extraClassPath=paste(basename(hail_jar),; collapse=.Platform$path.sep)); config <- list(sparklyr.jars.default=hail_jar,; sparklyr.shell.conf=paste0(names(classpath_vars), ""='"",; classpath_vars, ""'""),; spark.serializer=""org.apache.spark.serializer.KryoSerializer"",; spark.kryo.registrator=""is.hail.kryo.HailKryoRegistrator""); sc <- sparklyr::spark_connect(""local"", version=""2.2.0"", config=config); sdf <- sparklyr::spark_dataframe(dplyr::copy_to(sc, mtcars)); hc <- sparklyr::invoke_static(sc, ""is.hail.HailContext"", ""apply"",; sparklyr::spark_context(sc), ""Hail"", NULL,; ""local[*]"", ""hail.log"", TRUE, FALSE, 1L, 50L,; tempdir()); keys <- sparklyr:::invoke_static(sc, ""is.hail.utils"", ""arrayToArrayList"",; array(character(0L))); ht <- sparklyr::invoke_static(sc, ""is.hail.table.Table"", ""fromDF"", hc, sdf,; keys); sessionInfo(); sparklyr::invoke(ht, ""count""); ```. it generates this output:; ```; (foo) # Rscript /tmp/failure.R; R version 3.5.1 (2018-07-02); Platform: x86_64-apple-darwin17.6.0 (64-bit); Running under: macOS High Sierra 10.13.6. Matrix products: default; BLAS: /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib; LAPACK: /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libLAPACK.dylib. locale:; [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8. attached base packages:; [1] stats graphics grDevices utils datasets methods base . loaded via a namespace (and not attached):; [1] Rcpp_0.12.19 dbplyr_1.2.2 compiler_3.5.1 pillar_1.3.0 ; [5] later_0.7.5 bindr_0.1.1 r2d3_0.2.2 base64enc_0.1-3 ; [9",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4513#issuecomment-430702977:954,log,log,954,https://hail.is,https://github.com/hail-is/hail/issues/4513#issuecomment-430702977,1,['log'],['log']
Testability,"I have forthcoming changes that make the router only accept HTTPS. I've been testing this in my dev namespace. Unfortunately, my batch workers cannot speak to my batch instance anymore. The workers speak to internal-gateway who then tries to proxy to my router over HTTP, but nobody is listening on that port. As long as there is a mix of HTTP-only and HTTPS-only routers, internal-gateway needs a way to know which protocol to use with which router. It's temporary because I intend everyone to speak HTTPS.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8490#issuecomment-610644390:77,test,testing,77,https://hail.is,https://github.com/hail-is/hail/pull/8490#issuecomment-610644390,1,['test'],['testing']
Testability,"I have no idea what this means. ```; Caused by: is.hail.shadedazure.com.azure.storage.blob.models.BlobStorageException: If you are using a StorageSharedKeyCredential, and the server returned an error message that says 'Signature did not match', you can compare the string to sign with the one generated by the SDK. To log the string to sign, pass in the context key value pair 'Azure-Storage-Log-String-To-Sign': true to the appropriate method call.; If you are using a SAS token, and the server returned an error message that says 'Signature did not match', you can compare the string to sign with the one generated by the SDK. To log the string to sign, pass in the context key value pair 'Azure-Storage-Log-String-To-Sign': true to the appropriate generateSas method call.; Please remember to disable 'Azure-Storage-Log-String-To-Sign' before going to production as this string can potentially contain PII.; Status code 403, (empty body); ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13032#issuecomment-1542906073:318,log,log,318,https://hail.is,https://github.com/hail-is/hail/pull/13032#issuecomment-1542906073,5,"['Log', 'log']","['Log-String-To-Sign', 'log']"
Testability,I have on my list to test Nirvana but need a couple days so let's get it in now.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5835#issuecomment-481736843:21,test,test,21,https://hail.is,https://github.com/hail-is/hail/pull/5835#issuecomment-481736843,1,['test'],['test']
Testability,I have one thing left to do: I need to rebuild pr-builder because the apiserver test depends on Flask. I'll do that shortly. Rest of it is ready for review.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5386#issuecomment-466480945:80,test,test,80,https://hail.is,https://github.com/hail-is/hail/pull/5386#issuecomment-466480945,1,['test'],['test']
Testability,"I have the FET in the expr language done. Also in this branch is the linear regression code refactoring. I removed the docs for the group tests, but left the code for creating groups and the FET and linear regression group tests in this branch.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/423#issuecomment-226914280:138,test,tests,138,https://hail.is,https://github.com/hail-is/hail/pull/423#issuecomment-226914280,2,['test'],['tests']
Testability,"I have to add some tests, but where I got hung up on this a few months ago is that it created a ton of code duplication that I wasn't sure how to abstract away",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7795#issuecomment-570321116:19,test,tests,19,https://hail.is,https://github.com/hail-is/hail/pull/7795#issuecomment-570321116,1,['test'],['tests']
Testability,"I haven't checked for performance regressions. Tim, do you have a standard way of doing this? Given that you're on vacation tomorrow, @danking, could you help me understand your performance testing procedures?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5075#issuecomment-453376506:190,test,testing,190,https://hail.is,https://github.com/hail-is/hail/pull/5075#issuecomment-453376506,1,['test'],['testing']
Testability,"I haven't looked into it, but it looks like the libhail for cpp5 got built differently than the other prebuilt .so in a way that's incompatible with dataproc. If we rebuild it on a dataproc head node, for example, it should probably be good to go. Before we do that, I would like to see dataproc testing get set up ... which of course @danking is already on: https://github.com/hail-is/hail/pull/4241. Nice!",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4240#issuecomment-417521786:296,test,testing,296,https://hail.is,https://github.com/hail-is/hail/pull/4240#issuecomment-417521786,1,['test'],['testing']
Testability,"I haven't read over this, but I don't like the behavior. Assert and friends are for unexpected errors, and fatal is for expected errors. How is abort different from assert?. All errors should give full JVM + Python stack traces. I see this necessary for two reasons: It makes it much easier for users to report bugs to us, which means they get faster turnaround and we spend less time going back and forth about log files (which usually were ephemeral or they've overwritten) and often ""expected"" bugs are actually correct behavior on the user's end and a bug on our side, but no context is given for us to diagnose the real problem. For usability, it is obviously best if the user-visible error appears at the bottom.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1552#issuecomment-287147990:57,Assert,Assert,57,https://hail.is,https://github.com/hail-is/hail/pull/1552#issuecomment-287147990,3,"['Assert', 'assert', 'log']","['Assert', 'assert', 'log']"
Testability,I haven't tested at all yet. Might have a catastrophic problem.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1558#issuecomment-287173180:10,test,tested,10,https://hail.is,https://github.com/hail-is/hail/pull/1558#issuecomment-287173180,1,['test'],['tested']
Testability,"I haven't tested it, but I think that should work",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7536#issuecomment-555197402:10,test,tested,10,https://hail.is,https://github.com/hail-is/hail/pull/7536#issuecomment-555197402,1,['test'],['tested']
Testability,I haven't tested the refactored code yet -- would like to see if this was the refactoring you had in mind with Enums.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13224#issuecomment-1664685352:10,test,tested,10,https://hail.is,https://github.com/hail-is/hail/pull/13224#issuecomment-1664685352,1,['test'],['tested']
Testability,"I haven't tested this error message, as I'm not sure how to replicate the bug scenario, but I think it should work.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11321#issuecomment-1031552946:10,test,tested,10,https://hail.is,https://github.com/hail-is/hail/pull/11321#issuecomment-1031552946,1,['test'],['tested']
Testability,I haven’t seen the callback test be flaky. I’m mildly concerned that it’s become flaky.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5563#issuecomment-473569649:28,test,test,28,https://hail.is,https://github.com/hail-is/hail/pull/5563#issuecomment-473569649,1,['test'],['test']
Testability,"I implemented Table.globals, too, and added a couple tests.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3027#issuecomment-369460837:53,test,tests,53,https://hail.is,https://github.com/hail-is/hail/pull/3027#issuecomment-369460837,1,['test'],['tests']
Testability,I implemented it in python and just moved filter entries to tests in scala,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3354#issuecomment-380560289:60,test,tests,60,https://hail.is,https://github.com/hail-is/hail/pull/3354#issuecomment-380560289,1,['test'],['tests']
Testability,"I installed latest hail (0.2.120-f00f916faf78), gnomad (e6f042a74c91e462b77fca24d070c815e02f6f5b), and gnomad_qc (0c52cf47e48fa5b503d874e96482ea4286474c71). I cloned the repo in question; ```bash; pip3 uninstall hail gnomad gnomad_qc. pip3 install -U \; hail \; git+https://github.com/broadinstitute/gnomad_methods.git \; git+https://github.com/broadinstitute/gnomad_qc.git. git clone git@github.com:broadinstitute/gnomad-readviz.git; ```. I applied this patch:; ```diff; diff --git a/step1__select_samples.py b/step1__select_samples.py; index c159207..9ba1812 100644; --- a/step1__select_samples.py; +++ b/step1__select_samples.py; @@ -38,14 +38,7 @@ def hemi_expr(mt):; ; def main(args):; ; - hl.init(log=""/select_samples"", default_reference=""GRCh38"", idempotent=True, tmp_dir=args.temp_bucket); - meta_ht = hl.import_table(args.sample_metadata_tsv, force_bgz=True); - meta_ht = meta_ht.key_by(""s""); - meta_ht = meta_ht.filter(hl.is_defined(meta_ht.cram_path) & hl.is_defined(meta_ht.crai_path), keep=True); - meta_ht = meta_ht.repartition(1000); - meta_ht = meta_ht.checkpoint(; - re.sub("".tsv(.b?gz)?"", """", args.sample_metadata_tsv) + "".ht"", overwrite=True, _read_if_exists=True); -; + hl.init(log=""/tmp/select_samples"", default_reference=""GRCh38"", idempotent=True, tmp_dir=args.temp_bucket); vds = gnomad_v4_genotypes.vds(); ; # see https://github.com/broadinstitute/ukbb_qc/pull/227/files; @@ -55,19 +48,8 @@ def main(args):; ; v4_qc_meta_ht = meta.ht(); ; - mt = vds.variant_data; - #mt = vds.variant_data._filter_partitions([41229]); -; - mt = mt.filter_cols(v4_qc_meta_ht[mt.s].release); -; - meta_join = meta_ht[mt.s]; - mt = mt.annotate_cols(; - meta=hl.struct(; - sex_karyotype=meta_join.sex_karyotype,; - cram=meta_join.cram_path,; - crai=meta_join.crai_path,; - ); - ); + #mt = vds.variant_data; + mt = vds.variant_data._filter_partitions([41229]); ; logger.info(""Adjusting samples' sex ploidy""); lgt_expr = hl.if_else(; @@ -88,9 +70,9 @@ def main(args):; logger.info(""Filter variants wi",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13248#issuecomment-1703383664:703,log,log,703,https://hail.is,https://github.com/hail-is/hail/issues/13248#issuecomment-1703383664,1,['log'],['log']
Testability,"I installed pandas 1.5.2 and ran every test with the word pandas in the name:; ```; =============================================== short test summary info ===============================================; PASSED test/hail/table/test_table.py::Tests::test_from_pandas_mismatched_object_rows; PASSED test/hail/table/test_table.py::Tests::test_from_pandas_missing_and_nans; PASSED test/hail/table/test_table.py::Tests::test_from_pandas_objects; PASSED test/hail/table/test_table.py::Tests::test_from_pandas_works; PASSED test/hail/table/test_table.py::test_to_pandas; PASSED test/hail/table/test_table.py::test_to_pandas_flatten; PASSED test/hail/table/test_table.py::test_to_pandas_null_ints; PASSED test/hail/table/test_table.py::test_to_pandas_nd_array; PASSED test/hail/table/test_table.py::test_literal_of_pandas_NA_and_numpy_int64; PASSED test/hail/table/test_table.py::test_literal_of_pandas_NA_and_numpy_int32; ======================================== 10 passed, 1357 deselected in 40.40s =========================================; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12580#issuecomment-1396345811:39,test,test,39,https://hail.is,https://github.com/hail-is/hail/pull/12580#issuecomment-1396345811,16,"['Test', 'test']","['Tests', 'test']"
Testability,"I just meant we should test that VEP still works on this branch. Like, do we have automated tests for VEP?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8150#issuecomment-591007231:23,test,test,23,https://hail.is,https://github.com/hail-is/hail/pull/8150#issuecomment-591007231,2,['test'],"['test', 'tests']"
Testability,I just tested on Dataproc and it works there just fine.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2063#issuecomment-319959888:7,test,tested,7,https://hail.is,https://github.com/hail-is/hail/pull/2063#issuecomment-319959888,1,['test'],['tested']
Testability,"I kept having issues with non-local `sc.broadcast`; the @transient conf wouldn't be populated. Serialization worked fine, but this wouldn't. The solution I implemented was to pass a serializableHadoopConfiguration, but it feels like there should be a more elegant solution. However, given that Spark is leaving us forever, I'm not sure it's worth further investigation. Still, if there is a use case for this, I would like to find out why the previous solution was insufficient. . Edit:nvm, not the cause I don’t believe. There’s a bug somewhere, but maybe not serialization. Need to find a better way to replicate locally; has been getting stuck at 0/2 stage. . edit2: resolved testing issue, will find root of bug. cc @cseed",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6083#issuecomment-496305166:679,test,testing,679,https://hail.is,https://github.com/hail-is/hail/pull/6083#issuecomment-496305166,1,['test'],['testing']
Testability,"I know how to fix this this, but why didn't it fail in the PR that made this change?; ```; ________________________________ test_callback _________________________________. client = <hailtop.batch_client.client.BatchClient object at 0x7f9cbc23b610>. async def test_callback(client):; import nest_asyncio # pylint: disable=import-outside-toplevel; ; nest_asyncio.apply(); ; app = web.Application(); callback_bodies = []; callback_event = asyncio.Event(); ; def url_for(uri):; host = os.environ['HAIL_BATCH_WORKER_IP']; port = os.environ['HAIL_BATCH_WORKER_PORT']; return f'http://{host}:{port}{uri}'; ; async def callback(request):; body = await request.json(); callback_bodies.append(body); callback_event.set(); return web.Response(); ; app.add_routes([web.post('/test', callback)]); runner = web.AppRunner(app); await runner.setup(); site = web.TCPSite(runner, '0.0.0.0', 5000); await site.start(); ; try:; token = secrets.token_urlsafe(32); b = create_batch(; client, callback=url_for('/test'), attributes={'foo': 'bar', 'name': 'test_callback'}, token=token; ); head = b.create_job('alpine:3.8', command=['echo', 'head']); b.create_job('alpine:3.8', command=['echo', 'tail'], parents=[head]); b.submit(); await asyncio.wait_for(callback_event.wait(), 5 * 60); callback_body = callback_bodies[0]; ; # verify required fields present; callback_body.pop('cost'); callback_body.pop('msec_mcpu'); callback_body.pop('time_created'); callback_body.pop('time_closed'); callback_body.pop('time_completed'); callback_body.pop('duration'); callback_body.pop('duration_ms'); callback_body.pop('cost_breakdown'); > assert callback_body == {; 'id': b.id,; 'user': 'test',; 'billing_project': 'test',; 'token': token,; 'state': 'success',; 'complete': True,; 'closed': True,; 'n_jobs': 2,; 'n_completed': 2,; 'n_succeeded': 2,; 'n_failed': 0,; 'n_cancelled': 0,; 'attributes': {'foo': 'bar', 'name': 'test_callback'},; }, callback_body; E AssertionError: {'attributes': {'client_job': '8051758-182', 'foo': 'bar'",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13739#issuecomment-1739224427:1004,test,test,1004,https://hail.is,https://github.com/hail-is/hail/pull/13739#issuecomment-1739224427,1,['test'],['test']
Testability,I left in google_storage.py in for now because Benchmark uses it and I didn't want to rewrite that right now.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10331#issuecomment-820662160:47,Benchmark,Benchmark,47,https://hail.is,https://github.com/hail-is/hail/pull/10331#issuecomment-820662160,1,['Benchmark'],['Benchmark']
Testability,"I let it go at the end of a long string of commands overnight and it looked to get stuck in the same place, still at (0 + 25) / 25 after what I estimate was about three hours on the grm. A glance at the log shows the same error. I killed it to free up the cluster. . Log here: humgen/atgu1/fs03/satterst/DBS_v2.3/hail.kryo.log",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/321#issuecomment-212885679:203,log,log,203,https://hail.is,https://github.com/hail-is/hail/issues/321#issuecomment-212885679,3,"['Log', 'log']","['Log', 'log']"
Testability,I like the tests,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12275#issuecomment-1268734693:11,test,tests,11,https://hail.is,https://github.com/hail-is/hail/pull/12275#issuecomment-1268734693,1,['test'],['tests']
Testability,"I like this. That + depending on the `release` step ensures that we only submit the benchmarks on the exact sha that we release. When we eventually split these steps out into their own release pipeline, we can just delete the file and use the normal `depends_on: release` behavior to achieve the same result.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14398#issuecomment-2027251314:84,benchmark,benchmarks,84,https://hail.is,https://github.com/hail-is/hail/pull/14398#issuecomment-2027251314,1,['benchmark'],['benchmarks']
Testability,I looked at the Spark worker logs by setting up the SSH tunnel (according to laurent's cloud post) and going to the Executor tab of the spark history server page. It seems we're running into this issue: https://issues.apache.org/jira/browse/SPARK-16845. This is definitely because Andrea's VDS has lots of annotations. Here's a quote from that Spark issue:. > I've been struggling to duplicate this and finally came up with a strategy that duplicates it in a spark-shell. It's a combination of a wide dataset with nested (array) structures and performing a union that seem to trigger it.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1186#issuecomment-267428726:29,log,logs,29,https://hail.is,https://github.com/hail-is/hail/issues/1186#issuecomment-267428726,1,['log'],['logs']
Testability,I looked at the log. Looks like it is running fine. Is it running slowly? How long do you expect it to take? How many variants in the DILI controls?. VEP is never going to run fast in this form. We're going to merge pre-computed annotations for SNPs and only run VEP on indels. That should make it about 20x faster.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/302#issuecomment-210947424:16,log,log,16,https://hail.is,https://github.com/hail-is/hail/issues/302#issuecomment-210947424,1,['log'],['log']
Testability,"I looked at the picard tests and realized they just made a fake chain file with one interval that mapped to the negative strand in the destination reference. My existing test covers this scenario -- one interval maps to the positive strand of the destination and the other to the negative strand. Since I'm only passing the strand information from Picard, I'm happy with the tests I have already.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4895#issuecomment-445015697:23,test,tests,23,https://hail.is,https://github.com/hail-is/hail/pull/4895#issuecomment-445015697,3,['test'],"['test', 'tests']"
Testability,"I looked at the yarn logs. It looks like it is not finding the GLIBCXX_3.4.18 lib. This is how the hail script is being submitted... ```; module load anaconda3/5.2.0; source activate hail2; module load gcc/7.2.0; module load lz4/1.8.3; module load spark/2.2.1; echo ""Export env vars""; export HAIL_HOME=/restricted/projectnb/genpro/github/hail/hail; export PYTHONPATH=""${PYTHONPATH:+$PYTHONPATH:}$HAIL_HOME/build/distributions/hail-python.zip""; export PYTHONPATH=""$PYTHONPATH:$SPARK_HOME/python""; export PYTHONPATH=""$PYTHONPATH:$SPARK_HOME/python/lib/py4j-*-src.zip""; echo ""Submitting Spark job""; spark-submit\; --executor-cores 4\; --executor-memory 40G\; --driver-memory 10g\; --driver-cores 2\; --num-executors 10\; --conf spark.yarn.appMasterEnv.LD_LIBRARY_PATH=$LD_LIBRARY_PATH\; --conf spark.yarn.appMasterEnv.PYTHONPATH=$PYTHONPATH\; --conf spark.yarn.appMasterEnv.PATH=$PATH\; --jars $HAIL_HOME/build/libs/hail-all-spark.jar \; --master yarn\; --deploy-mode client \; --conf spark.driver.memory=5G\; --conf spark.executor.memory=30G\; --conf spark.driver.extraClassPath=\""$HAIL_HOME/build/libs/hail-all-spark.jar\"" \; --conf spark.executor.extraClassPath=./hail-all-spark.jar \; --conf spark.serializer=org.apache.spark.serializer.KryoSerializer \; --conf spark.kryo.registrator=is.hail.kryo.HailKryoRegistrator\; ""$@"". spark-submit\; --executor-cores 4\; --executor-memory 40G\; --driver-memory 10g\; --driver-cores 2\; --num-executors 10\; --conf spark.yarn.appMasterEnv.LD_LIBRARY_PATH=$LD_LIBRARY_PATH\; --conf spark.yarn.appMasterEnv.PYTHONPATH=$PYTHONPATH\; --conf spark.yarn.appMasterEnv.PATH=$PATH\; --jars $HAIL_HOME/build/libs/hail-all-spark.jar \; --master yarn\; --deploy-mode client \; --conf spark.driver.memory=5G\; --conf spark.executor.memory=30G\; --conf spark.driver.extraClassPath=\""$HAIL_HOME/build/libs/hail-all-spark.jar\"" \; --conf spark.executor.extraClassPath=./hail-all-spark.jar \; --conf spark.serializer=org.apache.spark.serializer.KryoSerializer \; --conf spark.k",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4733#issuecomment-456518258:21,log,logs,21,https://hail.is,https://github.com/hail-is/hail/issues/4733#issuecomment-456518258,1,['log'],['logs']
Testability,"I looked closer at the logic in the old combiner and realized it was permitting things within 1 window-size of the window to be binned. I wasn't doing this at all, so implemented it. This has nice performance properties, but uses more memory than the user requests, so I'm using just a 25% ""grace window"" plus the buffer to have both good performance and low memory usage. ```; Name Ratio Time 1 Time 2; ---- ----- ------ ------; table_aggregate_downsample_worst_case 39.5% 57.617 22.773; table_aggregate_downsample_dense 26.6% 127.079 33.843; ----------------------; Geometric mean: 32.4%; Simple mean: 33.1%; Median: 33.1%; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7197#issuecomment-538549413:23,log,logic,23,https://hail.is,https://github.com/hail-is/hail/pull/7197#issuecomment-538549413,1,['log'],['logic']
Testability,"I looked over the code and it looks fine, but I'm having trouble understanding the bigger picture of what you're trying to accomplish. I see that you have a new step that creates a test database in the default namespace in the test scope. Then you create the database config secret from this new database. And then deploy_ci depends on it, which makes sense because it needs the secret to be able to create new databases. And this is all only in the test scope. It looks like you cleaned up the build database in the case of dev deploy, which is fine too. > we also create a ""test_instance"" database that will be used as the database instance inside the tests. I don't understand what you wrote here because test_instance database doesn't seem to be used at all. Aren't we still creating the same batch and ci databases? I don't see what the test_instance database is buying you except to be able to make the database config secret that doesn't have the root username and password. I also don't quite understand what's going on in the build_cant_create_database build step. Shouldn't those secrets already exist? Won't this fail?. I'm sorry if I'm missing something obvious.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7683#issuecomment-562887906:181,test,test,181,https://hail.is,https://github.com/hail-is/hail/pull/7683#issuecomment-562887906,4,['test'],"['test', 'tests']"
Testability,"I made a branch which I think fixes this (and makes the 'root' variable actually used), but will PR once I have testing going.; https://github.com/jbloom22/hail/tree/vep_csq_global",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4050#issuecomment-409401666:112,test,testing,112,https://hail.is,https://github.com/hail-is/hail/issues/4050#issuecomment-409401666,1,['test'],['testing']
Testability,I made a new PR from #7833 because I know this has been tested except for the three extra commits to remove testing infrastructure.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7838#issuecomment-573179477:56,test,tested,56,https://hail.is,https://github.com/hail-is/hail/pull/7838#issuecomment-573179477,2,['test'],"['tested', 'testing']"
Testability,"I made a small test example that fails. Still in Python -- couldn't replicate it in the IRSuite. ```; t = hl.utils.range_table(1); t = t.annotate(s=hl.set({'foo'}), nested=hl.null(hl.tstruct(elt=hl.tstr))); t = t.key_by().drop('idx'); t.filter(t.s.contains(t.nested.elt))._force_count(); ```. - Doesn't matter if the set has one element or is empty; - Doesn't matter if it's an `annotate_globals` versus `annotate`; - If `nested` is a string, null value, or a struct with a null value, it works",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4522#issuecomment-430000941:15,test,test,15,https://hail.is,https://github.com/hail-is/hail/issues/4522#issuecomment-430000941,1,['test'],['test']
Testability,I made some changes. I had to rewrite the audits to not fill up the temp disk space and account for a bug in billing that was fixed for job private instances #10069. I'll test this afternoon after I figure out how to revert my first attempt.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11996#issuecomment-1201421379:171,test,test,171,https://hail.is,https://github.com/hail-is/hail/pull/11996#issuecomment-1201421379,1,['test'],['test']
Testability,"I made some edits that I think helped to reduce the number of places that are aware of the notion of a default_region. It's really now just isolated to the `InstanceCollectionManager`, since that's the piece of code that's making the decision ""use the default region when the cluster is small"". I didn't quite like the pattern of retrieving a default from a `LocationMonitor` just to give it right back to the location monitor in the next line. I think this way the `LocationMonitor` API is much simpler, and we can actually remove its `default_location` method entirely as I believe it is no longer used. I can do that in a follow-up PR if you like this approach. One other thing is I wanted to articulate the distinction between the ""region CI needs its jobs in"" and the ""default region that batch will spin up workers in for small clusters"". While they are in practice the same, I found that treating them both as the ""default_region"" tied the logic around jobs for CI closely with internal Batch decisions and made it more confusing for me to reason about. I tried to separate out these two concepts so that in the future when jobs support region-specific scheduling it will be easier to excise the CI-specific code from the Batch scheduler. Another thing that I realized during this process is that Azure has regions and zones just like GCP, though they may differ slightly since we don't need to specify a zone for a VM and such. I am fine with using the term ""location"" to mean ""where we scheduled the VM, either zone or region depending on the cloud provider"", but I would also like to follow up with a sweep that makes this language more precise where possible. For example, the `possible_cloud_locations` function is really just `possible_cloud_regions`, and we could even go so far as mandating a `region` field in the global config instead of having `azure_location` and `gcp_region`, which are synonymous even though named differently. It also leads me to wonder why we only schedule in a",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12078#issuecomment-1207095240:947,log,logic,947,https://hail.is,https://github.com/hail-is/hail/pull/12078#issuecomment-1207095240,1,['log'],['logic']
Testability,"I made some mostly minor, stylistic comments. Back to you!. Also, there are conflicts so you will need to rebase against the current master. You'll also need to do that to pick up ""Jenkinsfile"" so the automated tests get run. Finally, we're trying to keep the git history clean, so single conceptual changes should go in as single commits. Can you squash all these commits into a single one? (Use `git rebase -i` and squash.)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/446#issuecomment-237269843:211,test,tests,211,https://hail.is,https://github.com/hail-is/hail/pull/446#issuecomment-237269843,1,['test'],['tests']
Testability,"I made the requested changes, improved the docs a bit more, removed the rank testing for now (may bring back in later PR), and am keeping the covariate field as list of expressions, even for one expression. I feel this is more natural in the regression setting, where one can even have no covariates (default is []), and I prefer to pass an array of string into RegressionUtils, though we should make another pass on parsing later (right now, I do still concatenate with ',' just before sending into the parser but would to not merge only to split).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1259#issuecomment-275096710:77,test,testing,77,https://hail.is,https://github.com/hail-is/hail/pull/1259#issuecomment-275096710,1,['test'],['testing']
Testability,I made the timeout for the standing workers to be 5 minutes for the test scope and 2 hours for the deploy scope.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8850#issuecomment-632344001:68,test,test,68,https://hail.is,https://github.com/hail-is/hail/pull/8850#issuecomment-632344001,1,['test'],['test']
Testability,I marked the balding Nichols test as failing for now because its far more important that we actually run the statgen tests.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12588#issuecomment-1407889708:29,test,test,29,https://hail.is,https://github.com/hail-is/hail/pull/12588#issuecomment-1407889708,2,['test'],"['test', 'tests']"
Testability,"I mean, anything that's touching the BTree is broken, so the following works:. is.hail.expr.ir.Aggregators2Suite.testCollectAsSet",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9604#issuecomment-713603033:113,test,testCollectAsSet,113,https://hail.is,https://github.com/hail-is/hail/pull/9604#issuecomment-713603033,1,['test'],['testCollectAsSet']
Testability,I might see the issue. The group by in the test queries doesn't actually do a group by like I wanted because there's no aggregation...,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14282#issuecomment-1941714742:43,test,test,43,https://hail.is,https://github.com/hail-is/hail/pull/14282#issuecomment-1941714742,1,['test'],['test']
Testability,"I modified the artifacts to include the two uber jars:. ```; +:build/docs => docs; +:build/libs/hail-all-spark.jar; +:build/libs/hail-all-spark-test.jar; ```. The latest successful master build of `hail-all-spark.jar` is available at:. https://ci.hail.is/httpAuth/app/rest/builds/buildType:(id:HailSourceCode_HailCi),count:1,status:SUCCESS/artifacts/content/hail-all-spark.jar",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/754#issuecomment-245692697:144,test,test,144,https://hail.is,https://github.com/hail-is/hail/issues/754#issuecomment-245692697,1,['test'],['test']
Testability,"I mostly think if we're actually using reprs meaningfully, we need to test them. At least for types, variants + loci + intervals, etc.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2060#issuecomment-322267032:70,test,test,70,https://hail.is,https://github.com/hail-is/hail/pull/2060#issuecomment-322267032,1,['test'],['test']
Testability,"I moved the info score calculation to the stats package, got rid of the combiner class, and used `mapAnnotations` to modify the VDS. Let me know if I should use `mapAnnotationsWithAggregate` instead. I also removed the RDD join in the test suite. The reason for not comparing to QCTOOL is how Cotton and I decided to handle missing values (0,0,0). QCTOOL uses the MAF estimate from the other samples to mean impute the dosage for samples with missing values. We do not include those samples at all in the computation.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/765#issuecomment-248466826:235,test,test,235,https://hail.is,https://github.com/hail-is/hail/pull/765#issuecomment-248466826,1,['test'],['test']
Testability,"I need to investigate further, but now I see a segfault and I think it's coming from the LMM tests. I need to fix the `test-gcp.sh` script so that it looks for the coredump file in the case of a seg fault. ```; [Stage 2225:==========================================> (3 + 1) / 4]2017-08-28 21:47:32 Hail: INFO: No multiallelics detected.; 2017-08-28 21:47:32 Hail: INFO: Ordering unsorted dataset with network shuffle; 2017-08-28 21:47:33 Hail: WARN: called redundant split on an already split VDS; 2017-08-28 21:47:33 Hail: INFO: using 2 trios for transmission analysis; [Stage 2229:==========================================> (3 + 1) / 4]2017-08-28 21:47:35 Hail: INFO: while writing:; file:/tmp/hail.16cpq9RzwI7a/out.00000.txt; merge time: 65.459ms; 2017-08-28 21:47:35 Hail: INFO: No multiallelics detected.; 2017-08-28 21:47:35 Hail: INFO: Ordering unsorted dataset with network shuffle; [Stage 2234:============================================> (4 + 1) / 5]2017-08-28 21:47:37 Hail: WARN: Found 2 samples with missing sex information (not 1 or 2).; Missing sex identifiers: [ 0 ]; 2017-08-28 21:47:37 Hail: WARN: 2 samples discarded from .fam: sex of child is missing.; 2017-08-28 21:47:38 Hail: INFO: Found 250 samples in fam file.; 2017-08-28 21:47:38 Hail: INFO: Found 2000 variants in bim file.; 2017-08-28 21:47:38 Hail: INFO: Coerced sorted dataset; 2017-08-28 21:47:38 Hail: INFO: Modified the genotype schema with annotateGenotypesExpr.; Original: Struct{GT:Call}; New: Genotype; 2017-08-28 21:47:38 Hail: INFO: Reading table to impute column types; [Stage 2258:============================> (1 + 1) / 2]2017-08-28 21:47:40 Hail: INFO: Finished type imputation; Loading column `f0' as type String (imputed); Loading column `f1' as type String (imputed); Loading column `f2' as type Float64 (imputed); 2017-08-28 21:47:41 Hail: INFO: Reading table to impute column types; 2017-08-28 21:47:41 Hail: INFO: Finished type imputation; Loading column `f0' as type String (imputed); Loading colu",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2132#issuecomment-325495835:93,test,tests,93,https://hail.is,https://github.com/hail-is/hail/pull/2132#issuecomment-325495835,2,['test'],"['test-gcp', 'tests']"
Testability,I need to rethink the test-tiny-limit and test-zero-limit. This is going to fail every time after the first merge on the deployment.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9354#issuecomment-705066148:22,test,test-tiny-limit,22,https://hail.is,https://github.com/hail-is/hail/pull/9354#issuecomment-705066148,2,['test'],"['test-tiny-limit', 'test-zero-limit']"
Testability,I need to see the index page (with the build log) to try to fix this. Everything on that page is rightfully green,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4514#issuecomment-428408138:45,log,log,45,https://hail.is,https://github.com/hail-is/hail/issues/4514#issuecomment-428408138,1,['log'],['log']
Testability,"I need to test out the last change I made to fix a potential forward compatibility issue when we do one last final test. But for now, I think it would be good to keep reviewing further up the stack to make sure we are happy with all of the changes before I do one last test.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11990#issuecomment-1176255053:10,test,test,10,https://hail.is,https://github.com/hail-is/hail/pull/11990#issuecomment-1176255053,3,['test'],['test']
Testability,I never hit test before submitting. 😁,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1638#issuecomment-291888209:12,test,test,12,https://hail.is,https://github.com/hail-is/hail/pull/1638#issuecomment-291888209,1,['test'],['test']
Testability,"I noticed something else, really long running jobs don't look great. That second blue line is a 6 minute job and it extends past the end of the page. Can we maybe put all of these divs into something that scrolls? Maybe a `div` with an `overflow: scroll`? I'm not sure exactly what should happen or how to do it, but I think we need a solution for this situation.; ![Screen Shot 2021-02-26 at 1 57 37 AM](https://user-images.githubusercontent.com/106194/109244152-17be8280-77d6-11eb-8f00-c124f9c2a5c7.png). I created this example with:; ```; import hailtop.batch as hb ; b = hb.Batch(backend=hb.ServiceBackend('test')) ; for i in range(1): ; b.new_job().command('sleep 360') ; b.run() ; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10060#issuecomment-786356423:611,test,test,611,https://hail.is,https://github.com/hail-is/hail/pull/10060#issuecomment-786356423,1,['test'],['test']
Testability,"I now pass the scores_table through as a Table rather than localizing and passing through colKeys, colKeyType, and scores annotations. The column key can now be any type. Both string and integer keys are tested from Python. However, `requireUniqueSamples` still requires a single string ID (this was the remaining problem of going generic), so I've removed this check and would appreciate feedback on the best approach to checking uniqueness, preferably on the localized `keys` in PCRelate so as not to trigger additional actions. I could use keyType.valuesSimilar to compare any two elements...it's a bit weird to have a tolerance on floats here. As noted, I'm also a bit wary that I'm relying on `scores` from `pca` to be in the same order as the columns on the matrix table. This is currently true, but could change. @danking I think the joins in `fuse` should also be zipPartitions, I've noted it in a FIXME. I'm also concerned that the number of diagonal blocks is an upper bound on parallelism for the matrix multiply. We should be able to fix that by immediately writing and then reading phi.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3211#issuecomment-376385065:204,test,tested,204,https://hail.is,https://github.com/hail-is/hail/pull/3211#issuecomment-376385065,1,['test'],['tested']
Testability,"I now see an ""anyMissing"" method, which was merged yesterday, written by @patrick-schultz. It looks similar to your proposal, although my tests do not pass with it (using `sourceType.anyMissing(mb, sourceOffset).cne(const(false)).orEmpty(Code._fatal(msg))`). As an aside, I do not find it easier to read, although it is terser. There is the question of whether we want embed 4's in place of a class attribute (or instance attribute) representing that value. If that is made to work I'm ok with replacing the ensure function, although I would still prefer that align the address to 8 byte (reading bytes until that point) and check 8 byte sections for as long as possible",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7646#issuecomment-561492434:138,test,tests,138,https://hail.is,https://github.com/hail-is/hail/pull/7646#issuecomment-561492434,1,['test'],['tests']
Testability,"I observed this in my namespace while testing fixes for a different transient error.; https://internal.hail.is/dking/batch/batches/5/jobs/7034 (this URL will obviously not last long). The worker actually successfully wrote the correct output to GCS, but it received this error anyway which caused the job to fail. Since QoB checks for the results files first, it didn't even notice that the worker job had failed. That seems not great. We should probably fail if an worker job fails, even if we find output because that output could be corrupt. ```; (base) dking@wm28c-761 hail % hexdump -C foo ; 00000000 01 82 00 00 00 7e 00 00 00 67 73 3a 2f 2f 31 2d |.....~...gs://1-|; 00000010 64 61 79 2f 74 6d 70 2f 68 61 69 6c 2f 54 53 4f |day/tmp/hail/TSO|; 00000020 66 4f 72 67 5a 55 6d 62 56 69 78 6e 52 69 4b 57 |fOrgZUmbVixnRiKW|; 00000030 51 46 42 2f 61 67 67 72 65 67 61 74 65 5f 69 6e |QFB/aggregate_in|; 00000040 74 65 72 6d 65 64 69 61 74 65 73 2f 2d 50 74 33 |termediates/-Pt3|; 00000050 67 4e 74 51 57 35 57 6f 42 64 43 54 44 50 51 69 |gNtQW5WoBdCTDPQi|; 00000060 77 48 64 61 39 63 32 36 35 66 32 2d 66 62 64 38 |wHda9c265f2-fbd8|; 00000070 2d 34 66 31 62 2d 62 63 64 65 2d 66 62 66 32 39 |-4f1b-bcde-fbf29|; 00000080 31 38 30 63 33 34 37 00 00 00 00 |180c347....|; 0000008b; ```. code:; ```ipython3; In [1]: import hail as hl; ...: import gnomad.utils.sparse_mt; ...: ; ...: ; ...: tmp_dir = 'gs://danking/tmp/'; ...: vds_file = 'gs://neale-bge/bge-wave-1.vds'; ...: out = 'gs://danking/foo.vcf.bgz'; ...: ; ...: vds = hl.vds.read_vds(vds_file); ...: mt = hl.vds.to_dense_mt(vds); ...: t = gnomad.utils.sparse_mt.default_compute_info(mt); ...: t = t.annotate(info=t.info.drop('AS_SB_TABLE')); ...: t = t.annotate(info = t.info.drop(; ...: 'AS_QUALapprox', 'AS_VarDP', 'AS_SOR', 'AC_raw', 'AC', 'AS_SB'; ...: )); ...: t = t.drop('AS_lowqual'); ...: ; ...: hl.methods.export_vcf(dataset = t, output = out, tabix = True); ```; worker failure:; ```; 2023-09-27 16:43:10.389 JVMEntryway: INFO: is.hail",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13721#issuecomment-1737788943:38,test,testing,38,https://hail.is,https://github.com/hail-is/hail/issues/13721#issuecomment-1737788943,1,['test'],['testing']
Testability,I only use install-benchmark,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9567#issuecomment-704535423:19,benchmark,benchmark,19,https://hail.is,https://github.com/hail-is/hail/pull/9567#issuecomment-704535423,1,['benchmark'],['benchmark']
Testability,"I originally tried to test against SnpSift (another tool that does the same type of outer join on variants and inner join on samples), but encountered an inconsistent behavior in that tool and so wrote a slightly less rigorous unit test.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/972#issuecomment-254070715:22,test,test,22,https://hail.is,https://github.com/hail-is/hail/pull/972#issuecomment-254070715,2,['test'],['test']
Testability,I picked ld score regression and two randomish other tests to be the tests that we run with the unchecked allocator. Let me know if there are others you'd like to see added.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9568#issuecomment-704997544:53,test,tests,53,https://hail.is,https://github.com/hail-is/hail/pull/9568#issuecomment-704997544,2,['test'],['tests']
Testability,I ported the `import_plink` test to methods/tests.py in #2843,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2841#issuecomment-362351992:28,test,test,28,https://hail.is,https://github.com/hail-is/hail/pull/2841#issuecomment-362351992,2,['test'],"['test', 'tests']"
Testability,"I prefer ""of"" to ""for"" (test of equilibrium like test of independence). I made all the other changes.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3875#issuecomment-401478918:24,test,test,24,https://hail.is,https://github.com/hail-is/hail/pull/3875#issuecomment-401478918,2,['test'],['test']
Testability,I prefer just hail.log.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/377#issuecomment-240002560:19,log,log,19,https://hail.is,https://github.com/hail-is/hail/issues/377#issuecomment-240002560,1,['log'],['log']
Testability,"I probably missed some, let's see what the tests find.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10119#issuecomment-786779371:43,test,tests,43,https://hail.is,https://github.com/hail-is/hail/pull/10119#issuecomment-786779371,1,['test'],['tests']
Testability,"I promise the tests all work. It's this TestNG nonsense. I'll back out my use of DataProvider, which is apparently breaking TestNG 6.8.21, but any newer version of TestNG breaks our test jar.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8803#issuecomment-629593748:14,test,tests,14,https://hail.is,https://github.com/hail-is/hail/pull/8803#issuecomment-629593748,5,"['Test', 'test']","['TestNG', 'test', 'tests']"
Testability,I pushed a couple fixes for the errant tests and the drop key issue,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11665#issuecomment-1079501491:39,test,tests,39,https://hail.is,https://github.com/hail-is/hail/pull/11665#issuecomment-1079501491,1,['test'],['tests']
Testability,I pushed a test to this branch,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11675#issuecomment-1079495632:11,test,test,11,https://hail.is,https://github.com/hail-is/hail/pull/11675#issuecomment-1079495632,1,['test'],['test']
Testability,"I pushed some addition changes: push requestedType into TableRead, expose (private) in Python for performance testing. On a chunk of gnomAD sites file, read count went from 19s (all fields) to 12s (keys + 1 int field). The Python changes should get removed once prune dead fields goes in. MatrixRead will require a bit more work (with the recent unification of matrix read/import IR nodes).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3667#issuecomment-392303741:110,test,testing,110,https://hail.is,https://github.com/hail-is/hail/pull/3667#issuecomment-392303741,1,['test'],['testing']
Testability,"I pushed the logic #2861 down so I can remove this copy. I'll add that change to that PR once this is merged (good catch) since I may need to rebase anyway. See here:; https://github.com/hail-is/hail/pull/2861/files#diff-912e03c9c34a874ecdc0e520a13cb572R133. This avoids the copy if the BDM is compact, which blocks always are. If the BDM is not compact, then we could add logic to stream out the bytes without an intermediate compactification but I don't want to add that complexity now.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2848#issuecomment-363553946:13,log,logic,13,https://hail.is,https://github.com/hail-is/hail/pull/2848#issuecomment-363553946,2,['log'],['logic']
Testability,"I put point_type back. Should be ready to go now. Also, fixed the close definition, good catch. I also removed an additional use of _convert_to_j in import_bgen to get the tests to pass from this PR (sorry my stacking got a bit mixed up): https://github.com/hail-is/hail/pull/5150/files#diff-36d21c1427efe06a781cd36ef5aa8678R961. You can also wait for that to go in and I'll rebase if you're worried about the change. Finally, the imports are a bit of a mess since I wanted to use hail_type in interval.py which is also imported by the types and expr files. @tpoterba I think we should remove types from expr and remove java from utils (we're confusing user utils like hadoop_* and Interval from internal utils like Env and java stuff which don't seem related) and have a clear ""import"" graph: javautils > types > utils > expr.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5152#issuecomment-456684801:172,test,tests,172,https://hail.is,https://github.com/hail-is/hail/pull/5152#issuecomment-456684801,1,['test'],['tests']
Testability,I put the time_updated field in. I'll test it with dev deploy once everything else is ready to go.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12199#issuecomment-1252827587:38,test,test,38,https://hail.is,https://github.com/hail-is/hail/pull/12199#issuecomment-1252827587,1,['test'],['test']
Testability,I ran a full benchmark comparison and didn't see any significant changes. I realize now there are no benchmarks for `to_matrix_table_row_major`. I'm adding such a benchmark and running it now.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9328#issuecomment-679425628:13,benchmark,benchmark,13,https://hail.is,https://github.com/hail-is/hail/pull/9328#issuecomment-679425628,3,['benchmark'],"['benchmark', 'benchmarks']"
Testability,I ran into this today...spent a bit of time debugging and was able to ssh to one of the workers and poke around the `docker` logs. The issue appears to be some kind of race between the `docker` install that the `VEP` initialization script does and the limited number of retries by `systemd` to get the `docker` daemon up and running. . Adding `sudo service docker restart` at the end of the the `VEP` initialization bash script worked as a short term fix.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12936#issuecomment-1589956412:125,log,logs,125,https://hail.is,https://github.com/hail-is/hail/issues/12936#issuecomment-1589956412,1,['log'],['logs']
Testability,"I ran the python tests with my latest changes and they all passed. I'll work on addressing comments and adding tests, but this should be ready for another round of code review.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6266#issuecomment-504217666:17,test,tests,17,https://hail.is,https://github.com/hail-is/hail/pull/6266#issuecomment-504217666,2,['test'],['tests']
Testability,"I ran the stress test. It finished in 8 minutes which makes for a paltry 2 jobs per second. That was largely driven by three jobs that took 5 minutes (!!!) to upload their logs to GCS. No idea what's going on there, but clearly unrelated to these DB changes. If you ignore those jobs and the private jobs, which required VM spin up, it only took 3 minutes, which is still an unfortunate 6 jobs per second, but I have more speed coming.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10985#issuecomment-954864994:17,test,test,17,https://hail.is,https://github.com/hail-is/hail/pull/10985#issuecomment-954864994,2,"['log', 'test']","['logs', 'test']"
Testability,I ran the unit tests locally with no issues - what failed?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6676#issuecomment-512932609:15,test,tests,15,https://hail.is,https://github.com/hail-is/hail/pull/6676#issuecomment-512932609,1,['test'],['tests']
Testability,"I ran two tests. The one you suggested, 10k/10k, and one with a better work-to-partition ratio: 1M/1k. I was a bit surprised to see that the cost ratio is larger with fewer partitions and more work. We range from 15x to 3x slower. . This branch:; ```python; In [3]: %%time ; ...: ; ...: import hail as hl ; ...: ht = hl.utils.range_table(10000, n_partitions=10000) ; ...: ht = ht.annotate(rank = hl.scan.count())._force_count() ; CPU times: user 17 ms, sys: 6.36 ms, total: 23.4 ms; Wall time: 1min 16s. In [1]: %%time ; ...: ; ...: import hail as hl ; ...: ht = hl.utils.range_table(1000000, n_partitions=1000) ; ...: ht = ht.annotate(rank = hl.scan.count())._force_count() ; CPU times: user 1.42 s, sys: 303 ms, total: 1.73 s; Wall time: 15.2 s. ```. Master `0.2.14-4da055db5a7b`; ```python; In [1]: %%time ; ...: ; ...: import hail as hl ; ...: ht = hl.utils.range_table(10000, n_partitions=10000) ; ...: ht = ht.annotate(rank = hl.scan.count())._force_count() ; CPU times: user 1.45 s, sys: 333 ms, total: 1.78 s; Wall time: 24.6 s; In [3]: %%time ; ...: ; ...: import hail as hl ; ...: ht = hl.utils.range_table(1000000, n_partitions=1000) ; ...: ht = ht.annotate(rank = hl.scan.count())._force_count() ; CPU times: user 6.23 ms, sys: 1.96 ms, total: 8.19 ms; Wall time: 1.33 s; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6291#issuecomment-500453080:10,test,tests,10,https://hail.is,https://github.com/hail-is/hail/pull/6291#issuecomment-500453080,1,['test'],['tests']
Testability,I really like that the test methods mirror the source code structure. Were there other changes? I see this `..helpers` thing collects a few different test related things. Seems good.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3887#issuecomment-402119610:23,test,test,23,https://hail.is,https://github.com/hail-is/hail/pull/3887#issuecomment-402119610,2,['test'],['test']
Testability,I remember having to fix the balding_nichols test multiple times. It's possible there's some issue with it I didn't properly diagnose.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12588#issuecomment-1397387396:45,test,test,45,https://hail.is,https://github.com/hail-is/hail/pull/12588#issuecomment-1397387396,1,['test'],['test']
Testability,"I removed `test_hail_java` parallelism since the array ordering both fails & segfaults when multiple threads are executing the tests. This seems really bad, but I also don't care to fix it in this PR.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6863#issuecomment-521659615:127,test,tests,127,https://hail.is,https://github.com/hail-is/hail/pull/6863#issuecomment-521659615,1,['test'],['tests']
Testability,I removed a test that asserted it didn't work on datasets with unknown fields. Maybe we should print a warning with the list of fields that weren't modified?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3625#issuecomment-390310387:12,test,test,12,https://hail.is,https://github.com/hail-is/hail/pull/3625#issuecomment-390310387,2,"['assert', 'test']","['asserted', 'test']"
Testability,"I removed the assertions about the chain of IRState properties. We could take the parameters in OptimizePass, but that seems a bit hacky/unnecessary. The IRStates are checked at runtime, so I'm confident we'll still be able to debug issues.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9030#issuecomment-651918109:14,assert,assertions,14,https://hail.is,https://github.com/hail-is/hail/pull/9030#issuecomment-651918109,1,['assert'],['assertions']
Testability,"I removed window.history.scrollRestoration = 'manual'. This has the effect of making Chrome and Firefox exhibit the same behavior (overshoot), and Safari show the ""correct"" behavior (no overshoot). 1 fewer change, the same amount of consistency across tested browsers.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7385#issuecomment-546427387:252,test,tested,252,https://hail.is,https://github.com/hail-is/hail/pull/7385#issuecomment-546427387,1,['test'],['tested']
Testability,"I replicated the issue with this:; ```; In [1]: grch37 = hl.get_reference('GRCh37'). In [2]: grch37.add_liftover('src/test/resources/grch37_to_grch38_chr20.over.chain.gz', 'GRCh38'). In [3]: i = hl.parse_locus_interval('1:10000-10000'). In [4]: hl.eval(hl.liftover(i)); ```. The issue is this interval is `Interval(10000, 10000, includesStart=True, includesEnd=False)` which has a length of zero. @patrick-schultz Should this be a valid interval? i.e. start==end and includesStart = True and includesEnd = False. Otherwise, if it is a valid Hail interval, then I'll throw a nicer error message.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/5174#issuecomment-455713308:118,test,test,118,https://hail.is,https://github.com/hail-is/hail/issues/5174#issuecomment-455713308,1,['test'],['test']
Testability,I reproduced this by running all the tests together. There's some inter-test leakage.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11637#issuecomment-1078451016:37,test,tests,37,https://hail.is,https://github.com/hail-is/hail/pull/11637#issuecomment-1078451016,2,['test'],"['test', 'tests']"
Testability,"I reran the benchmarks with nothing else running on my laptop. I think this should work right?. ```; git checkout pc-relate && \; git status && \; python3 -m benchmark_hail run -t pc_relate,pc_relate_big && \; git checkout master && \; (cd ../../hail && make install) && \; git status && \; git checkout pc-relate && \; python3 -m benchmark_hail run -t pc_relate,pc_relate_big; ```; Benchmark should import the installed hail. pc-relate branch:; ```; 2020-01-24 18:38:08,147: INFO: burn in: 30.09s; 2020-01-24 18:38:35,904: INFO: run 1: 27.75s; 2020-01-24 18:39:03,001: INFO: run 2: 27.09s; 2020-01-24 18:39:29,144: INFO: run 3: 26.14s; ```; master:; ```; 2020-01-24 18:41:08,254: INFO: burn in: 32.71s; 2020-01-24 18:41:37,239: INFO: run 1: 28.98s; 2020-01-24 18:42:05,393: INFO: run 2: 28.15s; 2020-01-24 18:42:33,411: INFO: run 3: 28.01s; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7962#issuecomment-578344916:12,benchmark,benchmarks,12,https://hail.is,https://github.com/hail-is/hail/pull/7962#issuecomment-578344916,2,"['Benchmark', 'benchmark']","['Benchmark', 'benchmarks']"
Testability,"I resolved conflicts. There were two issues in ir.py and one in aggregators.py. The former were resolved by: replace if with assert, add a new field about needing randomness. The latter is visible in the diff and switches from frozenset to set.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12139#issuecomment-1314255082:125,assert,assert,125,https://hail.is,https://github.com/hail-is/hail/pull/12139#issuecomment-1314255082,1,['assert'],['assert']
Testability,I restarted hail ci and then saw batch claim to create jobs that never appear in `kubectl get pods`. [batch.log](https://github.com/hail-is/hail/files/2498270/batch.log); [hail-ci.log](https://github.com/hail-is/hail/files/2498271/hail-ci.log),MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4591#issuecomment-431590377:108,log,log,108,https://hail.is,https://github.com/hail-is/hail/issues/4591#issuecomment-431590377,4,['log'],['log']
Testability,I reworked the test so no longer connected to this issue,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/3785#issuecomment-399810479:15,test,test,15,https://hail.is,https://github.com/hail-is/hail/issues/3785#issuecomment-399810479,1,['test'],['test']
Testability,"I saw this again today in a fairly simple and isolated test. I'm beginning to wonder if this is just a new form of transient error. We pick 22 random characters from a 62 character alphabet. Odds of collision are minuscule:; ```; In [2]: (1/62)**22; Out[2]: 3.693029961058969e-40; ```; I verified `SecureRandom` with no constructor uses a randomly chosen seed. There's three exceptions there (all the same one). The deepest one came during a write. The next two came during closes. The outermost exception is from the `using` cleaning up. I'm not sure where the middle exception comes from, I can't imagine who would try to `close` the stream other than `using`. Regardless, it appears that the upload fails in some unrecoverable way. We're writing 2GiB in 256 8MiB chunks in this test, so we have more chances for something to go wrong. Maybe we just have to retry the entire partition when this happens?. https://ci.hail.is/batches/7404773/jobs/145; ```; starting test is.hail.fs.gs.GoogleStorageFSSuite.testSeekMoreThanMaxInt...; Exception:; is.hail.relocated.com.google.cloud.storage.StorageException: Unable to recover in upload.; This may be a symptom of multiple clients uploading to the same upload session. For debugging purposes:; uploadId: https://storage.googleapis.com/upload/storage/v1/b/hail-test-ezlis/o?name=fs-suite-tmp-6BO4gZ18Lheigp3ir9RSOh&uploadType=resumable&upload_id=ADPycduiXx2Jtiy_0Ll131_pPeEYKnnA23Hlk28_9TFESUMaubA9OqLK_n8Td5rPhTXnlpssGo796Q4bJxUeblhmSaYcCSWAMg2k; chunkOffset: 16777216; chunkLength: 8388608; localOffset: 1325400064; remoteOffset: 1342177280; lastChunk: false. 	at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.unrecoverableState(BlobWriteChannel.java:131); 	at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.unrecoverableState(BlobWriteChannel.java:87); 	at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.access$1000(BlobWriteChannel.java:35); 	at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel$1.run",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756:55,test,test,55,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756,3,['test'],['test']
Testability,I say we just merge it and then your change (with the test) will go in.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5471#issuecomment-469341988:54,test,test,54,https://hail.is,https://github.com/hail-is/hail/pull/5471#issuecomment-469341988,1,['test'],['test']
Testability,"I search the google logs for the pull request in question. For example,. ```; (resource.labels.namespace_name=""pr-11471-default-fn1xhr9ahy9v"" AND; labels.""k8s-pod/app"":""batch""; ) OR (; labels.""compute.googleapis.com/resource_name"":""batch-worker-pr-11471-default-fn1xhr9ahy9v"" AND; logName:""worker.log""); ```. That PR seems to have a worker stuck alive: `batch-worker-pr-11471-default-fn1xhr9ahy9v-standard-ux0sp`.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11471#issuecomment-1059448548:20,log,logs,20,https://hail.is,https://github.com/hail-is/hail/pull/11471#issuecomment-1059448548,3,['log'],"['log', 'logName', 'logs']"
Testability,"I searched [here](https://portal.azure.com#@d6c9f2ea-d3bb-4ca9-8b14-231bac999aa6/blade/Microsoft_OperationsManagementSuite_Workspace/Logs.ReactView/resourceId/%2Fsubscriptions%2F22cd45fe-f996-4c51-af67-ef329d977519%2Fresourcegroups%2Fhaildev%2Fproviders%2Fmicrosoft.operationalinsights%2Fworkspaces%2Fhaildev-logs/source/LogsBlade.AnalyticsShareLinkToQuery/q/H4sIAAAAAAAAA21Sy27CMBC88xVbLiRSqNprUSpVgFpUVCraOzLxJhgcO7LNI2r7710nKRBoDokzmp2dnbVEB6%252FbJb5rPtWZhRiCQnPFciwMpuLwYJ0RKovAQ7ZgCR4RqTOJO5QNEMJXB%252BiRpDjUyjGh0Ez4VFhHqk2PidqhctqUFfUb9is0CG%252BkDdYx4%252BxeuBUdTcJc20gE3X43bJURTaIKTs1G4ePdlXBlGuL4NEFD4eRMqOTc7SgCHwRbooxOxRU4KWpkUFUfSyi0Rg4PDhUHGs%252BUccGMxcXaahUQY%252ByxsM0jbcsyjCv%252BbfPXMn9mC4SC4CLUdha1jKV9GOFKP%252B7fev6h4SFZCJVquElqTQvdj5enbkOVWm%252B2BWyE4rHE1OmtQ3PdH7Q699gUF0avMXF9tmclTHIaKqo%252Fn4zuzBwLbYW%252FAHWaEXyKHGfpUOc5U%252FxCw6DfmU%252Ffc2P%252Fuu%252F8DDpnFzboJaIXQY9jyrbS%252BeN4Pp%252FNeyHpaMPJ%252BLKsmjwj2WQOOXC0yS9DxlTe%252BAIAAA%253D%253D/timespan/2023-04-16T20%3A37%3A28.000Z%2F2023-04-28T20%3A37%3A28.000Z) and couldn't really find anything insightful. It does feel odd that we went that long with so *few* error messages, so maybe some silent error.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13050#issuecomment-1561910142:133,Log,Logs,133,https://hail.is,https://github.com/hail-is/hail/issues/13050#issuecomment-1561910142,3,"['Log', 'log']","['Logs', 'LogsBlade', 'logs']"
Testability,"I see what is happening. . The Hail cluster install instructions specify the following for a spark cluster:. export PYSPARK_SUBMIT_ARGS=""\; --jars $HAIL_HOME/build/libs/hail-all-spark.jar \; --conf spark.driver.extraClassPath=\""$HAIL_HOME/build/libs/hail-all-spark.jar\"" \; --conf spark.executor.extraClassPath=./hail-all-spark.jar \; --conf spark.serializer=org.apache.spark.serializer.KryoSerializer \; --conf spark.kryo.registrator=is.hail.kryo.HailKryoRegistrator; pyspark-shell"". On our cluster, this will run as a local job. It needs a ""--master yarn"" for an argument. Running it locally probably is related to the out of memory error and the limited cores. I will rerun this with the --master yarn argument. . Regarding the bgen file versus matrix table, are you suggesting, it would be faster to run an analysis such as a logistic regression starting with the bgen file instead of the imported bgen mt file. The phenotypes would need to annotated the imported bgen mt every time. Just trying to understand the trade offs.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4780#issuecomment-439414395:830,log,logistic,830,https://hail.is,https://github.com/hail-is/hail/issues/4780#issuecomment-439414395,1,['log'],['logistic']
Testability,"I see, so you receive an access denied when there are no artifacts. The build log has a long list of commands, starting with a git clone. It sounds like this isn't an issue then.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/5546#issuecomment-472479806:78,log,log,78,https://hail.is,https://github.com/hail-is/hail/issues/5546#issuecomment-472479806,1,['log'],['log']
Testability,I see. It's a bug in that the debug information if the test had failed would have been wrong / thrown an error. But the actual test right now was testing the right thing. Is this correct?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11203#issuecomment-1006756945:55,test,test,55,https://hail.is,https://github.com/hail-is/hail/pull/11203#issuecomment-1006756945,3,['test'],"['test', 'testing']"
Testability,I semi-tested this as follows: deployed in auth and created a user. The logic then failed with 403 Forbidden because the dev namespace gsa can't create service accounts.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8798#issuecomment-628891104:7,test,tested,7,https://hail.is,https://github.com/hail-is/hail/pull/8798#issuecomment-628891104,2,"['log', 'test']","['logic', 'tested']"
Testability,I should add the test first!,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4846#issuecomment-442536971:17,test,test,17,https://hail.is,https://github.com/hail-is/hail/pull/4846#issuecomment-442536971,1,['test'],['test']
Testability,I should also note that I've already done this and verified that my IP appears in the logs.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8045#issuecomment-582620130:86,log,logs,86,https://hail.is,https://github.com/hail-is/hail/pull/8045#issuecomment-582620130,1,['log'],['logs']
Testability,"I should have removed it when I was done. I used it to debug a bunch of stuff. I do not understand why, but, by default, no messages are printed. Setting the level to WARNING at least got my `log.warn` messages to print, of which I temporarily added many during debugging of insert. Anyway, I agree with the latter statement.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7990#issuecomment-579967208:192,log,log,192,https://hail.is,https://github.com/hail-is/hail/pull/7990#issuecomment-579967208,1,['log'],['log']
Testability,"I should have tests in python for the functionality I need, so if those are passing it should be OK, but let's talk tomorrow. It turns out caitlin's hack is getting spread around a bit because lots of folks want to do PRS, it would be good to go from hack to the better solution in one PR.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4102#issuecomment-411237753:14,test,tests,14,https://hail.is,https://github.com/hail-is/hail/pull/4102#issuecomment-411237753,1,['test'],['tests']
Testability,I should think more about how to benchmark this properly.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7962#issuecomment-578338479:33,benchmark,benchmark,33,https://hail.is,https://github.com/hail-is/hail/pull/7962#issuecomment-578338479,1,['benchmark'],['benchmark']
Testability,"I spot checked, and noticed that [`log-b.png`](https://github.com/hail-is/hail/blob/aa3cd5c4a64247a550e9fd61e79c0b7de7713559/graphics/32x32/log-b.png) looks like just blue?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9382#issuecomment-684007827:35,log,log-b,35,https://hail.is,https://github.com/hail-is/hail/pull/9382#issuecomment-684007827,2,['log'],['log-b']
Testability,"I started looking into the test failures last week, but I can't reproduce them locally; I'm very confused. Anyways, I'm working on it.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7134#issuecomment-542281084:27,test,test,27,https://hail.is,https://github.com/hail-is/hail/pull/7134#issuecomment-542281084,1,['test'],['test']
Testability,I still need to test this on the real database. Will do once the PR this is stacked on goes in.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12006#issuecomment-1211067004:16,test,test,16,https://hail.is,https://github.com/hail-is/hail/pull/12006#issuecomment-1211067004,1,['test'],['test']
Testability,"I still need to test this with dev deploy, but at least it's on the radar again.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12848#issuecomment-1680688341:16,test,test,16,https://hail.is,https://github.com/hail-is/hail/pull/12848#issuecomment-1680688341,1,['test'],['test']
Testability,"I suppose I'm a bit confused about what happens if you await the completion of yourself. We should probably filter out the `asyncio.current_task()`. I agree with the spirit of your sentence. It is problematic because somewhere *else* we're not properly stopping an infinite loop. Ideally we'll get to a place where we try to kill a pod and if it doesn't terminate in, say, 5 seconds, we fail the CI tests.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9944#issuecomment-769104764:399,test,tests,399,https://hail.is,https://github.com/hail-is/hail/pull/9944#issuecomment-769104764,1,['test'],['tests']
Testability,"I suppose this is where I started getting entangled with the domain issue. If the Australians run a workshop, what should happen if their users run `hailctl batch init`? Should they have to supply some additional argument so that _if_ they're not authenticated they get sent somewhere other than `hail.is`? Maybe that's ok, seems kind of awkward though. While it doesn't work this way today, I imagine that we should ultimately configure `hailctl auth login` to accept a domain. I feel like that would make the AUS scenario slightly less awkward, and the tool more consistent, though I admit it is conceding some of our own convenience.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13279#issuecomment-1663110567:452,log,login,452,https://hail.is,https://github.com/hail-is/hail/pull/13279#issuecomment-1663110567,1,['log'],['login']
Testability,I switched the test to use a balding_nichols_model dataset (positions are unique) with `r2=0.1`.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3704#issuecomment-394866711:15,test,test,15,https://hail.is,https://github.com/hail-is/hail/pull/3704#issuecomment-394866711,1,['test'],['test']
Testability,I talked to Cotton about it and he said not to. But it's not clear how much of a difference that makes yet anyway. I think this version is pretty good and an improvement. Plus it'll add a benchmark which we can work on optimizing.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9209#issuecomment-668622849:188,benchmark,benchmark,188,https://hail.is,https://github.com/hail-is/hail/pull/9209#issuecomment-668622849,1,['benchmark'],['benchmark']
Testability,"I temporarily added this test to `OrderedRDD.coerce`:. ```; fastKeys match {; case Some(fastKeys) =>; assert(fastKeys.partitions.length == rdd.partitions.length). val A = fastKeys.mapPartitionsWithIndex { case (i, it) =>; Iterator((i, it.toSet)); }.collectAsMap(); val B = rdd.map(_._1); .mapPartitionsWithIndex { case (i, it) =>; Iterator((i, it.toSet)); }.collectAsMap(); assert(A == B); case None =>; }; ```. It is too expensive to run all the time. It also fails for `LoadVCF`, which doesn't filter the symbolic variants in `justVariants`. This can be fixed by filtering once beforehand.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/824#issuecomment-248632396:25,test,test,25,https://hail.is,https://github.com/hail-is/hail/pull/824#issuecomment-248632396,3,"['assert', 'test']","['assert', 'test']"
Testability,"I tested `wget http://batch/jobs` from within the cluster...that works fine. However, I do see something potentially relevant in the output, pertaining to it seems a CI deployment attempt of batch (I don't see a timestamp, but this is the last job run). ```; deployment.yaml\nkubectl delete persistentvolumeclaim --all --namespace test\nError from server (Forbidden): persistentvolumeclaims is forbidden: User \""system:serviceaccount:batch-pods:deploy-svc\"" cannot list persistentvolumeclaims in the namespace \""test\""\nMakefile:70: recipe for target 'deploy' failed\nmake: *** [deploy] Error 1\n""},""state"":""Complete""}]; ```. Namely `system:serviceaccount:batch-pods:deploy-svc cannot list persistentvolumeclaims in the namespace \""test\`",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5503#issuecomment-468935751:2,test,tested,2,https://hail.is,https://github.com/hail-is/hail/pull/5503#issuecomment-468935751,4,['test'],"['test', 'tested']"
Testability,"I tested deploy locally, and things worked great.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6136#issuecomment-494081311:2,test,tested,2,https://hail.is,https://github.com/hail-is/hail/pull/6136#issuecomment-494081311,1,['test'],['tested']
Testability,I tested everything by hand in my namespace including the UI and it all looked good.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11397#issuecomment-1067362173:2,test,tested,2,https://hail.is,https://github.com/hail-is/hail/pull/11397#issuecomment-1067362173,1,['test'],['tested']
Testability,"I tested it against this:. ```; ht = hl.read_table('gs://danking/ALL.chip.omni_broad_sanger_combined.20140818.snps.genotypes-hail-bff300d475ac-sites.t'); context_mt = hl.read_matrix_table('gs://danking/ALL.chip.omni_broad_sanger_combined.20140818.snps.genotypes-hail-bff300d475ac.mt'); ht.annotate(**context_mt[ht.key, :])._force_count(); ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3609#issuecomment-390215942:2,test,tested,2,https://hail.is,https://github.com/hail-is/hail/pull/3609#issuecomment-390215942,1,['test'],['tested']
Testability,I tested on my local machine and it indeed modified the native lib prebuilt file and did so before running `shadowJar`.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6134#issuecomment-494054260:2,test,tested,2,https://hail.is,https://github.com/hail-is/hail/pull/6134#issuecomment-494054260,1,['test'],['tested']
Testability,I tested the commands by creating a service account with 0 permissions and making sure that I could give it access and could read/write to the bucket and gcr.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8840#issuecomment-631733744:2,test,tested,2,https://hail.is,https://github.com/hail-is/hail/pull/8840#issuecomment-631733744,1,['test'],['tested']
Testability,"I tested this by adding an assertion error that would get hit just before the while loop.With the old code, we always hit the assertion, with the new code, we do not.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8497#issuecomment-610732635:2,test,tested,2,https://hail.is,https://github.com/hail-is/hail/pull/8497#issuecomment-610732635,3,"['assert', 'test']","['assertion', 'tested']"
Testability,I tested this by applying it to the cluster directly (I ran make deploy in the `gateway/` project). It will continue to run until a master deploy blows it away.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4645#issuecomment-433180843:2,test,tested,2,https://hail.is,https://github.com/hail-is/hail/pull/4645#issuecomment-433180843,1,['test'],['tested']
Testability,I tested this by applying it to the cluster directly (I ran make deploy in the gateway/ project). It will continue to run until a master deploy blows it away.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4648#issuecomment-433191315:2,test,tested,2,https://hail.is,https://github.com/hail-is/hail/pull/4648#issuecomment-433191315,1,['test'],['tested']
Testability,I tested this by creating 100 batches with my username and then running exactly the code here but with `dking` in place of `test`. It cancelled all 100 batches quickly (a couple seconds).,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11679#issuecomment-1079739091:2,test,tested,2,https://hail.is,https://github.com/hail-is/hail/pull/11679#issuecomment-1079739091,2,['test'],"['test', 'tested']"
Testability,I tested this by hand by replacing the actual function call with throwing a TimeoutError and making sure both the client and the batch-driver gave the appropriate warning in the log message and didn't proceed.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7850#issuecomment-573430599:2,test,tested,2,https://hail.is,https://github.com/hail-is/hail/pull/7850#issuecomment-573430599,2,"['log', 'test']","['log', 'tested']"
Testability,"I tested this by hand with the following schenario:. 1. Deployed this branch and set the standard pool to use 4-core workers. Then submitted two jobs, with a total of 3 cores requested between them. The state looked as follows after a worker spun up:; <img width=""643"" alt=""Screenshot 2023-05-15 at 5 16 30 PM"" src=""https://github.com/hail-is/hail/assets/24440116/28d94a41-ff37-4331-8f4f-c2e649fd1c62"">. 2. I then bumped the instance version and redeployed. Then submitted a 1 core job. This should be able to fit on the existing worker, but batch instead spins up a new worker because the instance version has changed to 25 and the existing worker is version 24.; <img width=""639"" alt=""Screenshot 2023-05-15 at 5 19 41 PM"" src=""https://github.com/hail-is/hail/assets/24440116/92460dae-6aee-40b6-b6f3-46363dbdb12a"">. <img width=""643"" alt=""Screenshot 2023-05-15 at 5 20 59 PM"" src=""https://github.com/hail-is/hail/assets/24440116/5256762f-b361-40a7-a6d2-1aaa61f7b4ae"">. 3. The following steps I consider additional verification. I submitted another job, and observed it falling on the new worker instead of the most utilized worker. <img width=""641"" alt=""Screenshot 2023-05-15 at 5 21 36 PM"" src=""https://github.com/hail-is/hail/assets/24440116/176a9055-6ba7-49f1-88dc-c8496147db07"">. 4. I then cancelled the first batch and submitted another job and observed it fell on the new worker instead of the least utilized worker. So this step and the previous step confirm that regardless of utilization the old worker is not considered. We also see that the old worker receives no more work and successfully deactivates.; <img width=""644"" alt=""Screenshot 2023-05-15 at 5 23 03 PM"" src=""https://github.com/hail-is/hail/assets/24440116/d671a947-da44-4f05-bcdb-2fe6df28a655"">",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13055#issuecomment-1548633947:2,test,tested,2,https://hail.is,https://github.com/hail-is/hail/pull/13055#issuecomment-1548633947,1,['test'],['tested']
Testability,"I tested this by running `make deploy` in the `image-fetcher/` directory. You can take a look at the pods with `kubectl`, they are in the default namespace.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4647#issuecomment-433188993:2,test,tested,2,https://hail.is,https://github.com/hail-is/hail/pull/4647#issuecomment-433188993,1,['test'],['tested']
Testability,"I tested this by submitting 64 true, 10 Gi 0.25 core jobs on one node with a local SSD. It took 7 minutes for the whole batch to finish. This is a bit disappointing, but at least there were no errors. We can potentially revisit using get instead of wait for the polling loop, but the default sleep backoff method we have quickly blew our quota.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10630#issuecomment-871705329:2,test,tested,2,https://hail.is,https://github.com/hail-is/hail/pull/10630#issuecomment-871705329,1,['test'],['tested']
Testability,I tested this in my namespace and it should be good to go.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10732#issuecomment-895582030:2,test,tested,2,https://hail.is,https://github.com/hail-is/hail/pull/10732#issuecomment-895582030,1,['test'],['tested']
Testability,I tested this locally by building the image.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4694#issuecomment-434726391:2,test,tested,2,https://hail.is,https://github.com/hail-is/hail/pull/4694#issuecomment-434726391,1,['test'],['tested']
Testability,I tested this locally by downloading the HTML for the UI page and tinkering.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6430#issuecomment-504241795:2,test,tested,2,https://hail.is,https://github.com/hail-is/hail/pull/6430#issuecomment-504241795,1,['test'],['tested']
Testability,"I tested this on my branch that had a bunch of deadlock errors and those were replaced with CallError in schedule job because the job was running, cancelled, or instance not active.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7782#issuecomment-568575288:2,test,tested,2,https://hail.is,https://github.com/hail-is/hail/pull/7782#issuecomment-568575288,1,['test'],['tested']
Testability,"I tested this on the latest version of master, and it seems it has been fixed since the docker image with the workshop tutorial was created.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/5207#issuecomment-457700818:2,test,tested,2,https://hail.is,https://github.com/hail-is/hail/issues/5207#issuecomment-457700818,1,['test'],['tested']
Testability,"I tested this with a hard-hitting batch that used a bunch of storage, looked through the UI and didn't get any 500s, and checked the logs on both the k8s pods and the instances for errors. I also commented out each part of the garbage collection loops and made sure everything got cleaned up. For example, commenting out the activity logs loop or the monitor instances loop with the deactivate API point not doing anything.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10920#issuecomment-942374466:2,test,tested,2,https://hail.is,https://github.com/hail-is/hail/pull/10920#issuecomment-942374466,3,"['log', 'test']","['logs', 'tested']"
Testability,I tested this works with dev deploy.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8760#issuecomment-626929606:2,test,tested,2,https://hail.is,https://github.com/hail-is/hail/pull/8760#issuecomment-626929606,1,['test'],['tested']
Testability,"I tested with dev deploy, this looks good.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8002#issuecomment-580248649:2,test,tested,2,https://hail.is,https://github.com/hail-is/hail/pull/8002#issuecomment-580248649,1,['test'],['tested']
Testability,I think I addressed most of the comments. I haven't tested the new code -- I don't want to do that until we're happy with it. I don't know that I like how this is turning out. I think we're conflating what `hailctl config init` should be which is intitializing an environment configuration file versus a quick start to using Hail Batch and QoB. My intention for this feature was to idiot proof the latter especially for the ATGU workshop and make it as few commands as possible. I worry that needing to run `hailctl auth login` before this is not a just run this single command and then you can get going with little effort. I don't think `hailctl config init` is the right place for what I have written. Maybe it should be `hailctl batch quick-start`???,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13279#issuecomment-1662716382:52,test,tested,52,https://hail.is,https://github.com/hail-is/hail/pull/13279#issuecomment-1662716382,2,"['log', 'test']","['login', 'tested']"
Testability,I think I blew it away when I rebased. All the index bgen tests fail anyway because the index bgen code hasn't been lowered yet.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11597#issuecomment-1076488428:58,test,tests,58,https://hail.is,https://github.com/hail-is/hail/pull/11597#issuecomment-1076488428,1,['test'],['tests']
Testability,"I think I got everything, but I still want to test it again by hand in the morning once we're sure there's no other changes to make. I was testing the before migration by running dev deploy from master and cancelling a batch while it was submitting along with some completed ones and then tried to deploy the new version and made sure the ready cores etc. were now correct.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7851#issuecomment-574442792:46,test,test,46,https://hail.is,https://github.com/hail-is/hail/pull/7851#issuecomment-574442792,2,['test'],"['test', 'testing']"
Testability,"I think I had the misunderstanding. I know Prometheus dies when we do big tests, but I thought that was just because we requested no resources at all in the past. I didn't understand that it consistently uses 30Gb + of memory at those times. In that case, it seems constantly running a bigger node is unavoidable",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6774#issuecomment-519178381:74,test,tests,74,https://hail.is,https://github.com/hail-is/hail/pull/6774#issuecomment-519178381,1,['test'],['tests']
Testability,"I think I know the problem! We are testing against Plink 1.9, but you have the old version 1.07 (which is my fault for linking the plink base page). Install it from the link below and please try again:. [https://www.cog-genomics.org/plink2](https://www.cog-genomics.org/plink2)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/457#issuecomment-230288836:35,test,testing,35,https://hail.is,https://github.com/hail-is/hail/issues/457#issuecomment-230288836,1,['test'],['testing']
Testability,I think I now understand what you're looking for. I set out to build a drop-in replacement for the current AST so that when Jackie's python UI changes were done we could hook this up in place of AST. I will instead build something that will operate on the new Unsafe representations you're introducing. I'll close for now because after removing `DetailedTypeInfo` many tests are broken because the current IR has no way to return `NA` to its caller. I'll reopen when I have something that includes primitives for the Unsafe data.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2224#issuecomment-332360962:369,test,tests,369,https://hail.is,https://github.com/hail-is/hail/pull/2224#issuecomment-332360962,1,['test'],['tests']
Testability,"I think I'd flip the logic. I'm not sure if this one is wrong:. ```; In [9]: hl.eval((p, hl.range(2).map(lambda x: p))); Out[9]: (0.46124206583236194, [0.46124206583236194, 0.46124206583236194]); ```. But if it's right, clearly this one is wrong:. ```; In [7]: p = 1 - r. In [8]: hl.eval(hl.range(2).map(lambda x: p)); Out[8]: [0.46124206583236194, 0.06052003544873086]; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/7572#issuecomment-557020739:21,log,logic,21,https://hail.is,https://github.com/hail-is/hail/issues/7572#issuecomment-557020739,1,['log'],['logic']
Testability,I think I'm just setting the docker script ones for now in this PR. Anything else seems out of scope of adding this random benchmark,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8050#issuecomment-583468345:123,benchmark,benchmark,123,https://hail.is,https://github.com/hail-is/hail/pull/8050#issuecomment-583468345,1,['benchmark'],['benchmark']
Testability,"I think it was wrong -- the buffered thing probably already implements it in terms of write. I didn't even define flush on the java side, so it wasn't getting called in my tests (or it would have errored)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1645#issuecomment-294269949:172,test,tests,172,https://hail.is,https://github.com/hail-is/hail/pull/1645#issuecomment-294269949,1,['test'],['tests']
Testability,"I think it will actually just work out of the box. In particular, the updated file paths that specify the full destination also work with gsutil. The build.yaml changes are being run by the production batch, so we already know those are working with gsutil. I'm running some benchmarks vs gsutil now and will have numbers in a while. If that all looks good, I vote to merge this.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10131#issuecomment-790877506:275,benchmark,benchmarks,275,https://hail.is,https://github.com/hail-is/hail/pull/10131#issuecomment-790877506,1,['benchmark'],['benchmarks']
Testability,I think my ideal is a file with freshly written tests that state what we expect of QoB. The current state of our tests is just a kind of jungle of things we've ever thought were important at some point. I'm not sure how to incentivize us to curate our test suite a bit more intentionally.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13620#issuecomment-1721373570:48,test,tests,48,https://hail.is,https://github.com/hail-is/hail/pull/13620#issuecomment-1721373570,3,['test'],"['test', 'tests']"
Testability,"I think one of the following needs to happen:; 1. we document the pc relate setup sufficiently; 2. we precompute results somewhere that PC-Relate runs and test against that. I feel strongly that any PRs that introduce new testing dependencies must also include the relevant information to install those dependencies, probably in the ""getting started developing"" doc or somewhere like that.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3274#issuecomment-377932960:155,test,test,155,https://hail.is,https://github.com/hail-is/hail/pull/3274#issuecomment-377932960,2,['test'],"['test', 'testing']"
Testability,"I think scorecard has been broken for a while w.r.t. the ""failing tests"" category. That's just not showing up.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7134#issuecomment-555510546:66,test,tests,66,https://hail.is,https://github.com/hail-is/hail/pull/7134#issuecomment-555510546,1,['test'],['tests']
Testability,"I think test-test-gsa-key is pretty awful sounding but I'm not sure how better to call a test user for test namespaces and it's consistent with the test-auth, test-batch, etc. names.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13202#issuecomment-1603124469:8,test,test-test-gsa-key,8,https://hail.is,https://github.com/hail-is/hail/pull/13202#issuecomment-1603124469,5,['test'],"['test', 'test-auth', 'test-batch', 'test-test-gsa-key']"
Testability,"I think that addresses the concerns. This is great, what other automated checks can we add to make us more confident in our tests?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13372#issuecomment-1673768514:124,test,tests,124,https://hail.is,https://github.com/hail-is/hail/pull/13372#issuecomment-1673768514,1,['test'],['tests']
Testability,"I think that brittleness is gone now, and was fixed by us doing method; splitting in compiler. But double checking would be great. On Wed, Nov 17, 2021, 5:04 PM Patrick Schultz ***@***.***>; wrote:. > Yeah, I guess I should benchmark, since you've observed some strange; > brittleness in the linreg performance before.; >; > —; > You are receiving this because you were assigned.; > Reply to this email directly, view it on GitHub; > <https://github.com/hail-is/hail/pull/11070#issuecomment-972121769>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ADJCWES5I5IHLD7O6ECMZIDUMQRFBANCNFSM5IICVNFQ>; > .; >",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11070#issuecomment-972127901:224,benchmark,benchmark,224,https://hail.is,https://github.com/hail-is/hail/pull/11070#issuecomment-972127901,1,['benchmark'],['benchmark']
Testability,"I think that should cover everything, however I am still failing one test. I think the current docker approach has a convenient quirk of retrying the docker daemon, which allows container deletion to stop a container while it's running, which in turn allows the loop that checks the running container to `raise` and exit. In the subprocess structure that I lifted from `JVMJob`, I'm unconvinced that this is happening correctly. What I thought would happen is that the `delete_container` coroutine would `kill` the container process while the coroutine running the container is still on `await self.process.wait()`. I would hope that means `self.process.wait` would soon raise but I'm now consistently seeing `test_cancel_left_after_tail` time out, indicating that it wasn't able to successfully cancel the sleeping job. EDIT: Jackie and I investigated and think that `kill` causes the `stdout/stderr` streams not to send EOF but rather set an exception, which means that the `run` coroutine can hang on gathering the output of the container. Going to run this test repeatedly to see if the intermittent timeouts stop and that this is actually the cause of the problem. EDIT2: ugh didn't seem to fix the problem. There's something still wrong in cancel/deleting containers where we intermittently wait until the job timeout regardless.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10376#issuecomment-857271742:69,test,test,69,https://hail.is,https://github.com/hail-is/hail/pull/10376#issuecomment-857271742,2,['test'],['test']
Testability,I think the callback test is the unreliable one? Looks like it got retested and is fine now.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5563#issuecomment-473473364:21,test,test,21,https://hail.is,https://github.com/hail-is/hail/pull/5563#issuecomment-473473364,1,['test'],['test']
Testability,I think the code looks fine. Somehow a setting on Jenkins got messed up and new branches weren't being built. It should be working now. Wait for the test results before merging with master.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/356#issuecomment-215227188:149,test,test,149,https://hail.is,https://github.com/hail-is/hail/pull/356#issuecomment-215227188,1,['test'],['test']
Testability,I think the current Scala tests I've written roughly do that,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11151#issuecomment-1018609478:26,test,tests,26,https://hail.is,https://github.com/hail-is/hail/pull/11151#issuecomment-1018609478,1,['test'],['tests']
Testability,I think the docs you're referencing aren't the Compute Engine API docs: https://cloud.google.com/compute/docs/api-rate-limits. The audit logs also show 403s: https://console.cloud.google.com/logs/query;query=%22403%22%0A%22Rate%20Limit%20Exceeded%22;timeRange=2021-05-04T00:05:00.000Z%2F2021-05-04T01:06:00.000Z;pinnedLogId=2021-05-04T00:40:25.985091Z%2F-1xc71ve6z9k6;cursorTimestamp=2021-05-04T00:40:31.308803Z?project=hail-vdc&query=%0A,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10432#issuecomment-833010496:137,log,logs,137,https://hail.is,https://github.com/hail-is/hail/pull/10432#issuecomment-833010496,2,['log'],['logs']
Testability,"I think the force_ir flag would be good. I had a hallway conversation with Dan today about how even though our changes are partially designed to give us control over memory, we actually have _no idea_ what our memory usage patterns look like. I think we should add some logging information about region sizes. It could be very illuminating.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3258#issuecomment-377379681:270,log,logging,270,https://hail.is,https://github.com/hail-is/hail/pull/3258#issuecomment-377379681,1,['log'],['logging']
Testability,"I think the interval and partitioner logic is all correct. I think the problem is that the `naiveCoalesce` implementation is wrong when the key is empty. In that case, it computes a new partitioner, which will just be fewer partitions with range bounds [[]-[]], then tries to repartition to that. It's right to refuse, because the repartitioner works under the assumption that each key is contained in at most one target partition's interval.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/8138#issuecomment-597279382:37,log,logic,37,https://hail.is,https://github.com/hail-is/hail/issues/8138#issuecomment-597279382,1,['log'],['logic']
Testability,I think the tests are grinding to a halt due to a too low memory limit see service backend here: https://batch.hail.is/batches/7484164/jobs/108 and then local backend actually hits the hard limit: https://batch.hail.is/batches/7484164/jobs/69.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12981#issuecomment-1562908225:12,test,tests,12,https://hail.is,https://github.com/hail-is/hail/pull/12981#issuecomment-1562908225,1,['test'],['tests']
Testability,I think they're supposed to? The python tests definitely do.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10583#issuecomment-859777792:40,test,tests,40,https://hail.is,https://github.com/hail-is/hail/pull/10583#issuecomment-859777792,1,['test'],['tests']
Testability,"I think this PR is just about as good as it's going to get for now. From looking at the Grafana API metrics, I think I was hitting the maximum scheduler throughput. The get running cancellable jobs is around 40ms each call for 5000 jobs while the getting the job head queue is 123ms. If the 40ms becomes a problem, then we can pull less records (see explanation below) or we can not do a json array agg and figure out the regions using bit shifting. When we did the load tests yesterday getting the job head queue was around 1-2 seconds with us each having 20k records. I think we just have to keep an eye on it. I did some further optimization of the scheduler by allowing it to pull up to 10000 jobs from the database to try and schedule before it hits its fair share of jobs scheduled. This helps a lot with efficiency to use the existing capacity if there are jobs further down the queue that are schedulable. I know it's a bit of a departure from what we've done in the past, but I think since we're going in order of fair share now and pulling more jobs from the database isn't that expensive, then this is fine. Happy to make this number 1000 even. 300 was too small though. Jobs at the front of the queue will eventually be able to run because the next iteration of the autoscaler will create the correct instances for those jobs.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12221#issuecomment-1276546928:471,test,tests,471,https://hail.is,https://github.com/hail-is/hail/pull/12221#issuecomment-1276546928,1,['test'],['tests']
Testability,I think this builds. Gotta make it pass tests.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9825#issuecomment-754781031:40,test,tests,40,https://hail.is,https://github.com/hail-is/hail/pull/9825#issuecomment-754781031,1,['test'],['tests']
Testability,"I think this could interact badly with Spark's partitioning logic. That would appear in the text file imports. We should probably rewrite the text file stuff the same way we rewrote import_bgen to use our own, sensible, partitioning logic. I guess the worst thing that happens is a small text file is broken into one partition per-line.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5698#issuecomment-476796791:60,log,logic,60,https://hail.is,https://github.com/hail-is/hail/pull/5698#issuecomment-476796791,2,['log'],['logic']
Testability,"I think this is closer to the right interface, so I want to think about how to get it in while allowing for future changes that don't break interface. I think `RegressionModel` should be initialized with the data of `y` and `covariates`. It should have a `fit` method that returns a struct with the multivariate regression result, which I can add later without breaking interface. The underlying math is already there (e.g. when computing the null model), just a matter of packaging. It'd be nice for this to work on Tables too. And then `regress_rows`, renamed fit_rows, should only take `x` and other parameters like `test` and `block_size`. This is basically how LMM works, but with the multivariate global math all on the python side.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4535#issuecomment-429487447:620,test,test,620,https://hail.is,https://github.com/hail-is/hail/pull/4535#issuecomment-429487447,1,['test'],['test']
Testability,I think this is dependent on the authorization PR going in so I can test it's working.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6719#issuecomment-514341053:68,test,test,68,https://hail.is,https://github.com/hail-is/hail/pull/6719#issuecomment-514341053,1,['test'],['test']
Testability,"I think this is equivalent to the 0-1 knapsack problem. Think about doing it in log-space. Let s be the size. Let (x_i) be the scaled dirichlet that sums to log(s). Let l_i = log floor(e^x_i) and u_i = log (floor(e^x_i) + 1). Let f_i = l_i - x_i be the ""fractional"" part and F = sum f_i. You want to find a subset of d_i = u_i - l_i whose sum is maximized but <= F. A 1-pass greedy algorithm seems good enough.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1998#issuecomment-316252831:80,log,log-space,80,https://hail.is,https://github.com/hail-is/hail/issues/1998#issuecomment-316252831,4,['log'],"['log', 'log-space']"
Testability,I think this is fine without tests if the issues I was seeing were in the interpreter.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3745#issuecomment-396989892:29,test,tests,29,https://hail.is,https://github.com/hail-is/hail/pull/3745#issuecomment-396989892,1,['test'],['tests']
Testability,"I think this is good to go, once MatrixIR.scala comments pertaining to execute are removed. I would like to know, as an aside, more about execute. Coverage of modified join functionality seems good!. Breaking line 1505, using; ```python; join_table = src.rows(); ```. generates a test error in; test/hail/matrixtable/test_matrix_table.py:490. Breaking line 1529, using; ```python; joiner = lambda left: 1; ```; triggers an error in test/hail/matrixtable/test_matrix_table.py:905",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5075#issuecomment-453375974:280,test,test,280,https://hail.is,https://github.com/hail-is/hail/pull/5075#issuecomment-453375974,3,['test'],['test']
Testability,"I think this is happening from the below line in ci/ci.py (~674). When ci finds a `wait` step of `kind: Service`, its rollout command checks a `deployment` resource of `name` (name here is blog), which we of course don't have. I think we need to not hardcode `deployment` here, either through a config property in the wait step, or by checking whether the deploy `config` for the build step has a `StatefulSet`, or `Deployment`. ```python; if self.wait:; for w in self.wait:; # ... redacted ...; elif w['kind'] == 'Service':; assert w['for'] == 'alive', w['for']; port = w.get('port', 80); timeout = w.get('timeout', 60); script += f'''; set +e; kubectl -n {self.namespace} rollout status --timeout=1h deployment {name} && \; kubectl -n {self.namespace} wait --timeout=1h --for=condition=available deployment {name} && \; python3 wait-for.py {timeout} {self.namespace} Service -p {port} {name}; EC=$?; kubectl -n {self.namespace} logs --tail=999999 -l app={name} | {pretty_print_log}; set -e; (exit $EC); '''; ```. edit: A possible config/ci change:. build.yaml; ```yaml; wait:; - kind: Service; name: blog; for: alive; resource_type: statefulset; ```. ci/ci.py:. ```python; if self.wait:; for w in self.wait:; name = w['name']; resource_type = w.get(""resource_type"", ""deployment""); # ... redacted ...; elif w['kind'] == 'Service':; # ... redacted; script += f'''; set +e; kubectl -n {self.namespace} rollout status --timeout=1h {resource_type} {name} && \; kubectl -n {self.namespace} wait --timeout=1h --for=condition=available {resource_type} {name} && \; python3 wait-for.py {timeout} {self.namespace} Service -p {port} {name}; EC=$?; kubectl -n {self.namespace} logs --tail=999999 -l app={name} | {pretty_print_log}; set -e; (exit $EC); '''; ```. @cseed does this seem a reasonable change?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7381#issuecomment-546407626:526,assert,assert,526,https://hail.is,https://github.com/hail-is/hail/pull/7381#issuecomment-546407626,3,"['assert', 'log']","['assert', 'logs']"
Testability,"I think this is ready for another look but I put a WIP label on it because I don't want to merge it today while there's still workshop things happening. After it goes in I'll run another scale test. The nginx config is mostly just lifted over from router, with a couple small changes. I wasn't able to just proxy to localhost because notebook couldn't figure out which subdomain the request was going to and everything would 404. Adding a Host header fixed the 404, but messed with the requests to notebook pods so instead I added `workshop.local` and `notebook.local` to `/etc/hosts` on the pod, which I kind of like, which did the trick. I needed two ssl configs, one for nginx and one for aiohttp to use internally, and ended up changing the `ssl-config-notebook` secret to `nginx` and creating a second `ssl-config-notebook-python`, but let me know if this seems off.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10204#issuecomment-806087347:193,test,test,193,https://hail.is,https://github.com/hail-is/hail/pull/10204#issuecomment-806087347,1,['test'],['test']
Testability,I think this is ready for another look. I'll cleanup the database once we're happy with everything and I no longer need to test with dev deploy (I don't want to have to nuke the database).,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12221#issuecomment-1276247643:123,test,test,123,https://hail.is,https://github.com/hail-is/hail/pull/12221#issuecomment-1276247643,1,['test'],['test']
Testability,"I think this is ready. Adds a createDatabase2 step that adds database migrations. What's a database migration? The idea is that a database starts as an empty database and is built up or modified over time by a series of patches or migrations. The database has a version which is the number of migrations applied (starting from 1). This is stored in the table `{database_name}_migration_version`. Each migration involves running a `.sql` or `.py` script. The logic that applies migrations computes a checksum of these scripts and stores them in the database in table `{database_name}_migrations`. When applying migrations again in the future, these checksums are verified. A create database step now looks like (from the CI tests):. ```; - kind: createDatabase2; name: hello2_database; databaseName: hello2; migrations:; - name: create-tables; script: /io/sql/create-hello2-tables.sql; - name: insert; script: /io/sql/insert.py; inputs:; - from: /repo/ci/test/resources/sql; to: /io/; namespace:; valueFrom: default_ns.name; dependsOn:; - default_ns; - copy_files; ```. migrations is a the list of migrations that need to be applied to get the current version. So the idea is, if you want to change the schema of the database, you just add another migration at the end to make the changes you want. After this goes in, I'll make a separate PR to switch everything to this new createDatabase2 step.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7674#issuecomment-562891346:458,log,logic,458,https://hail.is,https://github.com/hail-is/hail/pull/7674#issuecomment-562891346,3,"['log', 'test']","['logic', 'test', 'tests']"
Testability,"I think this may fix it:. ```yaml; apiVersion: v1; kind: Role; apiVersion: rbac.authorization.k8s.io/v1; metadata:; namespace: test; name: list-test-pvc; rules:; - apiGroups: [""""]; resources: [""persistentvolumeclaims""]; verbs: [""list""]; ---; apiVersion: v1; kind: RoleBinding; apiVersion: rbac.authorization.k8s.io/v1; metadata:; name: deploy-svc-list-test-pvc; namespace: test; subjects:; - kind: ServiceAccount; name: deploy-svc; namespace: batch-pods; roleRef:; kind: Role; name: list-test-pvc; apiGroup: ""rbac.authorization.k8s.io""; ```. I don't have permissions to create the role however. Another solution would be to modify the existing role to include ""list"" permissions. ```yaml; ---; apiVersion: v1; kind: Role; apiVersion: rbac.authorization.k8s.io/v1; metadata:; namespace: test; name: delete-test-pvc; rules:; - apiGroups: [""""]; resources: [""persistentvolumeclaims""]; verbs: [""list"", ""delete""]; ---; ```. `""get""` may also be needed",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5503#issuecomment-468958060:127,test,test,127,https://hail.is,https://github.com/hail-is/hail/pull/5503#issuecomment-468958060,7,['test'],"['test', 'test-pvc']"
Testability,"I think this might break the one test where we query batches / jobs based on name. I'll take a look at the tests later, but otherwise, this seems fine to me.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12884#issuecomment-1507487049:33,test,test,33,https://hail.is,https://github.com/hail-is/hail/pull/12884#issuecomment-1507487049,2,['test'],"['test', 'tests']"
Testability,I think this might fail tests with an xpass on local backend.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10697#issuecomment-885855540:24,test,tests,24,https://hail.is,https://github.com/hail-is/hail/pull/10697#issuecomment-885855540,1,['test'],['tests']
Testability,"I think tying the reset to the iterator is a mistake. First, iterator is the wrong abstraction here. Whole-stage code generation should use the aggregator/array strategy we're using in Emit to generate nothing, conditionals and loops for map, filter and flatMap, respectively. Ideally read ... do stuff ... write will generate an RDD with no per-element iterators at all. I want to make sure this picture is clear. Second, we want to vectorize in the database sense: we want to process multiple rows together in batches. Then overall structure of a stage is a loop over the batches, and and a loop within batches. Thus, the common case should not be we reset after every element, so I think it's the wrong direction to bake it in. The place where we do this should be interface points with the Spark stack which should be looked at with scorn and derision and as the organizing model. Finally, this points to an ongoing difference in our views about the meaning of context. I see context as serving two purposes (neither of which involve reset):. - First, context is a set of resources needed to process a partition that should be released when the partition is complete. For example, I'm working on GenomicsDB which needs to localize a GenomicsDB shard to a local file that needs to be cleaned up when the partition is complete. - Second, it is a way to tell an iterator where to return its value. (This is the ""current"" region business.). I'd be happy to separate these, but I don't see clean way. In no case do I see generic logic to manage the lifetime of regions (e.g. knowing when to call reset) inside the Context.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3365#issuecomment-381180739:1528,log,logic,1528,https://hail.is,https://github.com/hail-is/hail/pull/3365#issuecomment-381180739,1,['log'],['logic']
Testability,"I think we also need to be clear when installing something that will break everyone's local tests (email, dev post, something).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/3273#issuecomment-377700023:92,test,tests,92,https://hail.is,https://github.com/hail-is/hail/issues/3273#issuecomment-377700023,1,['test'],['tests']
Testability,I think we are a very long way from any system that reserves resources for a test job and in the meantime knowing the ci works is valuable.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5639#issuecomment-474817750:77,test,test,77,https://hail.is,https://github.com/hail-is/hail/pull/5639#issuecomment-474817750,1,['test'],['test']
Testability,I think we may need to rethink our compat tests at some point -- a few more bumps and that test will take minutes to run,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7261#issuecomment-543191626:42,test,tests,42,https://hail.is,https://github.com/hail-is/hail/pull/7261#issuecomment-543191626,2,['test'],"['test', 'tests']"
Testability,"I think we need this fix:; ```; commit 4cb998d1c7cbc9954d66c6e39d7fd48b0e936f51 (HEAD -> add-version-endpoint); Author: Daniel King <dking@broadinstitute.org>; Date: Mon Mar 22 17:47:22 2021 -0400. fix. diff --git a/build.yaml b/build.yaml; index 7a100adec8..256ca99c91 100644; --- a/build.yaml; +++ b/build.yaml; @@ -86,7 +86,7 @@ steps:; mkdir repo; cd repo; {{ code.checkout_script }}; - make -C hail python/hail/hail_version python/hail/hail_pip_version; + make -C hail python-version-info; git rev-parse HEAD > git_version; outputs:; - from: /io/repo/auth/sql; diff --git a/ci/test/resources/build.yaml b/ci/test/resources/build.yaml; index 3b1df5214c..b994d2787c 100644; --- a/ci/test/resources/build.yaml; +++ b/ci/test/resources/build.yaml; @@ -27,10 +27,13 @@ steps:; mkdir repo; cd repo; {{ code.checkout_script }}; + make -C hail python-version-info; timeout: 300; outputs:; - from: /io/repo; to: /; + - from: /io/repo/hail/python/hail/hail_version; + to: /hail_version; dependsOn:; - inline_image; - kind: buildImage; @@ -52,6 +55,10 @@ steps:; publishAs: service-base; dependsOn:; - base_image; + - copy_files; + inputs:; + - from: /hail_version; + to: /hail_version; - kind: buildImage; name: hello_image; dockerFile: ci/test/resources/Dockerfile; ```; EDIT: updated with more changes",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10085#issuecomment-804418107:582,test,test,582,https://hail.is,https://github.com/hail-is/hail/pull/10085#issuecomment-804418107,5,['test'],['test']
Testability,I think we need to at least manually test it.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8150#issuecomment-590976833:37,test,test,37,https://hail.is,https://github.com/hail-is/hail/pull/8150#issuecomment-590976833,1,['test'],['test']
Testability,I think we really just need to test/maintain this file and point to it in the docs:; https://github.com/hail-is/hail/blob/master/python/hail/environment.yml. Would that have helped?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/2978#issuecomment-370498224:31,test,test,31,https://hail.is,https://github.com/hail-is/hail/issues/2978#issuecomment-370498224,1,['test'],['test']
Testability,"I think we should add a new check for `check_batch_invariants` that the counts all sum to 0 when the tests are all finished running in the `user_inst_coll_resources` table. I think we have enough tests with `always_run` and cancellation for pool jobs, but I don't think we test the interaction between always_run and job private (""creating"" jobs).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13372#issuecomment-1673724680:101,test,tests,101,https://hail.is,https://github.com/hail-is/hail/pull/13372#issuecomment-1673724680,3,['test'],"['test', 'tests']"
Testability,"I think we should continue with another review and then a load test. I'm still a bit hesitant about the query change, but we can keep an eye on it. I'm still get errors with the typing:. ```; (venv) jigold@wm349-8c4 hail % make -C hail/python check; python3 -m flake8 --config ../../setup.cfg hail; python3 -m flake8 --config ../../setup.cfg hailtop; python3 -m pylint --rcfile ../../pylintrc hailtop --score=n; python3 -m mypy --config-file ../../setup.cfg hailtop; hailtop/batch/backend.py:481: error: Incompatible types in assignment (expression has type ""Union[str, List[str], None]"", variable has type ""Optional[List[str]]""); Found 1 error in 1 file (checked 146 source files); ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12221#issuecomment-1271807464:63,test,test,63,https://hail.is,https://github.com/hail-is/hail/pull/12221#issuecomment-1271807464,1,['test'],['test']
Testability,"I think we should have the following design that runs the benchmarks in k8s because then we are using google's internal network to transmit data (compared to running on my local computer via a cloud proxy):. - Have a `db-benchmark` namespace in k8s specifically for this. 1. create_db.py; a. This will take the parameters needed for `gcloud sql instances create` including database flags, disk space, cores, etc. and create an instance; b. Get the IP address of the instance (hopefully the REST API works for this); c. Create a database; d. Create user and password for the database; e. Create config file; f. Create secret in the db-benchmark namespace from the config file; ; 2. run.py; a. Build the docker image with the benchmark.py code and installs aiomysql, etc.; b. Create pod which mounts the correct secret with the sql config for the instance to use. Environment variables specify the n_replicates, etc. Print out the pod name.; c. Wait for the pod to complete (you have code in CI that does this); d. Download logs; e. Delete the pod. 3. cleanup.py; a. Delete mysql instance; b. Delete kubernetes secret in db-benchmark namespace. Thoughts? . I tried to think about how to use the current build system and what I would do is add a new CreateSQLInstance step, CreateDatabase takes the instance name and IP address as a parameter, and have CI take a path to the build.yaml file to build from. But this wasn't straightforward with how to do this, so I thought the above was simpler to reason about.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7181#issuecomment-538453887:58,benchmark,benchmarks,58,https://hail.is,https://github.com/hail-is/hail/pull/7181#issuecomment-538453887,6,"['benchmark', 'log']","['benchmark', 'benchmarks', 'logs']"
Testability,"I think we should just merge this, so we can do more read testing until the writes are fixed.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10111#issuecomment-790701123:58,test,testing,58,https://hail.is,https://github.com/hail-is/hail/pull/10111#issuecomment-790701123,1,['test'],['testing']
Testability,I think we're generally happy with TSV testing now.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/46#issuecomment-316222854:39,test,testing,39,https://hail.is,https://github.com/hail-is/hail/issues/46#issuecomment-316222854,1,['test'],['testing']
Testability,"I think you can push to this branch directly, then CI will test for you.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5354#issuecomment-464160988:59,test,test,59,https://hail.is,https://github.com/hail-is/hail/pull/5354#issuecomment-464160988,1,['test'],['test']
Testability,"I think your comment was good, I'm going to add asserts but haven't gotten to it yet. Thanks!",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2476#issuecomment-347668454:48,assert,asserts,48,https://hail.is,https://github.com/hail-is/hail/pull/2476#issuecomment-347668454,1,['assert'],['asserts']
Testability,"I thought about changing this to a `log.info`, but I'm quite worried about what happens when the IR is large (possibly quadratic logging).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7691#issuecomment-563439003:36,log,log,36,https://hail.is,https://github.com/hail-is/hail/pull/7691#issuecomment-563439003,2,['log'],"['log', 'logging']"
Testability,"I thought about this some more. I think the correct solution is to have two values for `n_jobs` in the `job_groups` table. There should be `n_jobs` (direct child jobs) and `n_jobs_recursive` (all descendent jobs). This way the UI and the status will make sense for whichever use case is most applicable. To do this, we'll need to write a migration that adds the new column and backfills the column. Right now, those two values are the same so it's just a copy of one column to another column. We might actually be able to do this migration in one update command. The other tables had hundreds of millions of rows and would have taken days and crashed the db if there was not enough memory. I can test this locally on my laptop by creating a test database and inserting 10 million records and then seeing how long it takes to do the update. ```; mysql> select count(*) from job_groups limit 10;; +----------+; | count(*) |; +----------+; | 8122788 |; +----------+; 1 row in set (16.75 sec); ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14170#issuecomment-1934138382:696,test,test,696,https://hail.is,https://github.com/hail-is/hail/pull/14170#issuecomment-1934138382,2,['test'],['test']
Testability,"I thought self.steps was still used. For example in `build`:. ```; def build(self, batch, code, scope):; assert scope in ('deploy', 'test', 'dev'). for step in self.steps:; if step.scopes is None or scope in step.scopes:; step.build(batch, code, scope). if scope == 'dev':; return. step_to_parent_steps = defaultdict(set); for step in self.steps:; for dep in step.all_deps():; step_to_parent_steps[dep].add(step). for step in self.steps:; parent_jobs = flatten([parent_step.wrapped_job() for parent_step in step_to_parent_steps[step]]). log.info(f""Cleanup {step.name} after running {[parent_step.name for parent_step in step_to_parent_steps[step]]}""). if step.scopes is None or scope in step.scopes:; step.cleanup(batch, scope, parent_jobs); ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7722#issuecomment-568536375:105,assert,assert,105,https://hail.is,https://github.com/hail-is/hail/pull/7722#issuecomment-568536375,3,"['assert', 'log', 'test']","['assert', 'log', 'test']"
Testability,"I thought the fix was the void-typed logic for the service execute. Looks like that's not in main, is it in your branch?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/9856#issuecomment-772014076:37,log,logic,37,https://hail.is,https://github.com/hail-is/hail/issues/9856#issuecomment-772014076,1,['log'],['logic']
Testability,"I thought the purpose of the cache was to cache the latest version in production. Let's take service-base as an example. There's the deployment in production that we care about. But every PR is now going to change the cache each time to what it thinks service-base is. This means that the last 4 layers for service-base will change for every time we run a test PR and it changes hailtop, gear, or web-common. If you don't like this change, then feel free to close it.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11907#issuecomment-1152568213:356,test,test,356,https://hail.is,https://github.com/hail-is/hail/pull/11907#issuecomment-1152568213,1,['test'],['test']
Testability,"I thought there might be an easier way than changing the database schema / batch/ci logic to have ignored batches, but maybe not.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/6582#issuecomment-509638201:84,log,logic,84,https://hail.is,https://github.com/hail-is/hail/issues/6582#issuecomment-509638201,1,['log'],['logic']
Testability,I took a look at what we are currently outputting. I think this is relatively straightforward except for the HWE test. I don't know of a multiallelic version of HWE. A simple approach would be to compute HWE for each alternate allele compared to the reference allele. Where this gets tricky is how to handle heterozygotes where the second allele is not the reference allele. Example: 1/2 genotype.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/2206#issuecomment-328648857:113,test,test,113,https://hail.is,https://github.com/hail-is/hail/issues/2206#issuecomment-328648857,1,['test'],['test']
Testability,"I tossed this up in my namespace and this is what seems to be the issue:; ```. Job Step	Image Pulling Time (s)	Running Time (s)	Error Type	State; main	0.135	30.011	timed out	error; Logs; Main; Log; executable file `sleep 5` not found in $PATH: No such file or directory; Error; Traceback (most recent call last):; File ""/usr/local/lib/python3.7/dist-packages/batch/worker/worker.py"", line 680, in _run; raise ContainerTimeoutError(f'timed out after {self.timeout}s'); ContainerTimeoutError: timed out after Nones",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11397#issuecomment-1076793811:181,Log,Logs,181,https://hail.is,https://github.com/hail-is/hail/pull/11397#issuecomment-1076793811,2,['Log'],"['Log', 'Logs']"
Testability,I tried again:. hail-new-vep importvcf /user/satterst/DILI/DILI_controls.vcf.bgz repartition -n 1000 splitmulti vep --config /psych/genetics_data/working/cseed/vep.properties write -o /user/satterst/DILI/DILI_split_vep.vds. It's taking wayyyy too long. log here: /humgen/atgu1/fs03/satterst/hail.log,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/302#issuecomment-210941562:253,log,log,253,https://hail.is,https://github.com/hail-is/hail/issues/302#issuecomment-210941562,2,['log'],['log']
Testability,"I tried to benchmark 100M rows against Spark:. ```; $ spark-shell; scala> val df = spark.range(100000000); df: org.apache.spark.sql.Dataset[Long] = [id: bigint]. scala> val df2 = df.select(df.col(""id""), functions.rand().as(""x"")); df2: org.apache.spark.sql.DataFrame = [id: bigint, x: double]. scala> df2.write.parquet(""df2.parquet""); 18/07/29 13:47:09 ERROR Executor: Exception in task 2.0 in stage 0.0 (TID 2); Caused by: java.lang.OutOfMemoryError: Java heap space; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4030#issuecomment-408697268:11,benchmark,benchmark,11,https://hail.is,https://github.com/hail-is/hail/pull/4030#issuecomment-408697268,1,['benchmark'],['benchmark']
Testability,"I used filters for the following images when I've run the Azure cleanup script, but we should double check these make sense still in light of changing how we use ""cache"" and there aren't any additional images or ones that we don't want to delete that are in this list:. ```; --filter 'auth:.*' \; --filter 'base:.*' \; --filter 'base_spark_3_2:.*' \; --filter 'batch:.*' \; --filter 'batch-driver-nginx:.*' \; --filter 'batch-worker:.*' \; --filter 'benchmark:.*' \; --filter 'blog_nginx:.*' \; --filter 'ci:.*' \; --filter 'ci-intermediate:.*' \; --filter 'ci-utils:.*' \; --filter 'create_certs_image:.*' \; --filter 'echo:.*' \; --filter 'grafana:.*' \; --filter 'hail-base:.*' \; --filter 'hail-build:.*' \; --filter 'hail-buildkit:.*' \; --filter 'hail-run:.*' \; --filter 'hail-run-tests:.*' \; --filter 'hail-pip-installed-python37:.*' \; --filter 'hail-pip-installed-python38:.*' \; --filter 'hail-ubuntu:.*' \; --filter 'memory:.*' \; --filter 'monitoring:.*' \; --filter 'notebook:.*' \; --filter 'notebook_nginx:.*' \; --filter 'prometheus:.*' \; --filter 'service-base:.*' \; --filter 'service-java-run-base:.*' \; --filter 'test-ci:.*' \; --filter 'test-monitoring:.*' \; --filter 'test-benchmark:.*' \; --filter 'website:.*' \; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12211#issuecomment-1255120349:450,benchmark,benchmark,450,https://hail.is,https://github.com/hail-is/hail/pull/12211#issuecomment-1255120349,5,"['benchmark', 'test']","['benchmark', 'test-benchmark', 'test-ci', 'test-monitoring', 'tests']"
Testability,I used the gsutil storage bandwidth tool and confirmed we get 1.2 Gibit / second upload and download speeds from within a 1 core job and 10 Gi storage. Adding more cores didn't change anything. I ran a test job with the copy tool on a 10 Gi random file and matched 1.2 Gibit / second. I'm wondering if the problem is actually workload-dependent and is based on the number of jobs / number of files. The GCS best practices states the initial capacity is 5000 read requests / second per bucket including list operations until the bucket has time to scale up its capacity. https://cloud.google.com/storage/docs/request-rate#best-practices. ```. ==============================================================================; DIAGNOSTIC RESULTS ; ==============================================================================. ------------------------------------------------------------------------------; Latency ; ------------------------------------------------------------------------------; Operation Size Trials Mean (ms) Std Dev (ms) Median (ms) 90th % (ms); ========= ========= ====== ========= ============ =========== ===========; Delete 0 B 5 43.1 6.4 40.9 50.9 ; Delete 1 KiB 5 44.2 12.7 42.5 58.1 ; Delete 100 KiB 5 44.7 10.4 42.8 56.3 ; Delete 1 MiB 5 41.5 3.7 40.2 45.7 ; Download 0 B 5 74.6 7.9 73.2 84.0 ; Download 1 KiB 5 84.3 15.9 80.6 103.4 ; Download 100 KiB 5 81.9 16.0 82.7 99.6 ; Download 1 MiB 5 90.6 6.5 94.5 96.8 ; Metadata 0 B 5 23.6 2.7 23.6 26.3 ; Metadata 1 KiB 5 25.5 2.1 26.9 27.4 ; Metadata 100 KiB 5 26.2 3.6 27.3 29.9 ; Metadata 1 MiB 5 24.0 3.7 23.3 28.4 ; Upload 0 B 5 98.1 16.6 95.5 117.9 ; Upload 1 KiB 5 116.7 21.8 115.5 142.1 ; Upload 100 KiB 5 116.5 17.8 115.1 135.1 ; Upload 1 MiB 5 168.2 18.5 179.6 185.6 . ------------------------------------------------------------------------------; Write Throughput ; ------------------------------------------------------------------------------; Copied 5 512 MiB file(s) for a total transfer size of 2.5 GiB.; Write thr,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12923#issuecomment-1577071597:202,test,test,202,https://hail.is,https://github.com/hail-is/hail/issues/12923#issuecomment-1577071597,1,['test'],['test']
Testability,I verified that I can now run the batch tests on my laptop from the hail directory with:; ```; hailctl config set batch/billing_project hail # only needed once; make pytest PYTEST_ARGS='-k BatchTests'; ```,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8559#issuecomment-614205652:40,test,tests,40,https://hail.is,https://github.com/hail-is/hail/pull/8559#issuecomment-614205652,1,['test'],['tests']
Testability,I verified this by testing directly in my namespace,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12940#issuecomment-1524116301:19,test,testing,19,https://hail.is,https://github.com/hail-is/hail/pull/12940#issuecomment-1524116301,1,['test'],['testing']
Testability,"I verified this now works and also verified it fails on current main:; ```; In [2]: from hailtop.hail_logging import *; ...: import logging; ...: configure_logging(); ...: logging.getLogger('foo').info(""hello!""); ...: ; ...: try:; ...: raise ValueError('boom!'); ...: except:; ...: logging.getLogger('foo').exception(""hello!""); {""severity"":""INFO"",""levelname"":""INFO"",""asctime"":""2023-05-10 09:54:36,474"",""filename"":""<ipython-input-2-740eb5422cd6>"",""funcNameAndLine"":""<module>:4"",""message"":""hello!"",""hail_log"":1}; {""severity"":""ERROR"",""levelname"":""ERROR"",""asctime"":""2023-05-10 09:54:36,474"",""filename"":""<ipython-input-2-740eb5422cd6>"",""funcNameAndLine"":""<module>:9"",""message"":""hello!"",""exc_info"":""Traceback (most recent call last):\n File \""<ipython-input-2-740eb5422cd6>\"", line 7, in <module>\n raise ValueError('boom!')\nValueError: boom!"",""hail_log"":1}; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13023#issuecomment-1542260535:132,log,logging,132,https://hail.is,https://github.com/hail-is/hail/pull/13023#issuecomment-1542260535,3,['log'],['logging']
Testability,"I want cancel_after_n_failures to be on a job group. The things a job group doesn't have which maybe it should is:; - callback; - attributes; - updates. I think updates should be on a batch and not part of a job group. An update can add jobs to multiple job groups. Otherwise, the batches table should only have static fields that apply to the entire batch. I think we can do callbacks and attributes on a job group. I added a PATCH endpoint to be able to update a job group's cancel_after_n_attributes as the hailtop.batch interface was going to automatically generate job groups without any configuration settings. As for the full text search, I think prefix searches are faster with full text search than with a regular index, but I could be wrong. We'd have to benchmark it. > If we made batches simpler, does that ease complexity and decrease code duplication? In particular, what if batches didn't contain jobs at all? Instead, a batch contains exactly one job group. That job group contains zero or more job groups. Job groups manage: resource aggregation, cancellation, etc. I believe my plan is basically already doing this. It might not be clear because I didn't put the migrations in. But basically all of the current batches tables are now indexed by batch_id, job_group_id where the current ""batch"" has job_group_id = 1.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12697#issuecomment-1450603163:765,benchmark,benchmark,765,https://hail.is,https://github.com/hail-is/hail/pull/12697#issuecomment-1450603163,1,['benchmark'],['benchmark']
Testability,I want to add some tests first.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10314#issuecomment-819561603:19,test,tests,19,https://hail.is,https://github.com/hail-is/hail/pull/10314#issuecomment-819561603,1,['test'],['tests']
Testability,"I was able to assist Jackie in generating a core on my machine using the snipped she posted. In examining the core, I saw that we call `Unsafe_GetNativeLong` with an `addr` argument of 8. A quick examination of the JVM code showed that this addr is promptly cast to a `void*` via `uintptr_t`, and then deferenced. Attached is the jvm crash log showing the java stack trace. [hs_err_pid13461.log](https://github.com/hail-is/hail/files/2480716/hs_err_pid13461.log)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4522#issuecomment-430029805:340,log,log,340,https://hail.is,https://github.com/hail-is/hail/issues/4522#issuecomment-430029805,3,['log'],['log']
Testability,"I was able to figure out how to remove all the ""network shuffle""s and ""coerced sorted dataset""s and that improved the time down to 73 seconds, so a big improvement! I would still hope to improve performance a bit more, being reliably under a minute would be helpful. Here are the logs from that search, let me know what else I can do to help improve the performance or to help you figure it out: ; [hail-search.log](https://github.com/hail-is/hail/files/13310449/hail-search.log). PR is here if you are interested: https://github.com/broadinstitute/seqr/pull/3717",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13882#issuecomment-1804152779:280,log,logs,280,https://hail.is,https://github.com/hail-is/hail/issues/13882#issuecomment-1804152779,3,['log'],"['log', 'logs']"
Testability,"I was able to get the doctests running locally, and I got `PASSED hail/expr/functions.py::hail.expr.functions.cochran_mantel_haenszel_test`. As Dan mentioned, I cannot see the output of the CI tests. I will try rebasing onto the main branch.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14255#issuecomment-1984908694:193,test,tests,193,https://hail.is,https://github.com/hail-is/hail/pull/14255#issuecomment-1984908694,1,['test'],['tests']
Testability,"I was having trouble figuring out how to handle the token and the attributes in hailtop.batch_client.aioclient.Batch. When we create an update from a Batch that already existed perhaps in a different process, we don't have the attributes and token. I made a contract where `commit_update` always returns the token and attributes regardless of whether the BatchBuilder already has that infromation. However, we could also get that information available lazily and cache the result. In addition, the `n_jobs` returned to the client are the number of jobs that are committed and not the same as the `n_jobs` in the batches table. Things to do before merging:; 1. Get rid of the batch updates additions to the UI2. ; 2. Double check the GCP LogsExplorer to make sure there are no silent error messages especially with regards to cancellation.; 3. Have @danking look over the SQL stored procedure for `commit_batch_update` to make sure that query is going to perform as good as what is possible given the complexity of the check.; 4. Run a test batch with the old client (I just checked out the current version of main). You need to make sure both create and create-fast are accounted for and succeed. I've been using the following script to make sure we're using the slow path in addition to the fast path with a regular small test job:. ```python3; from hailtop.batch import ServiceBackend, Batch; import secrets. backend = ServiceBackend(billing_project='hail'); b = Batch(backend=backend); # 8 * 256 * 1024 = 2 MiB > 1 MiB max bunch size; for i in range(8):; j1 = b.new_job(); long_str = secrets.token_urlsafe(256 * 1024); j1.command(f'echo ""{long_str}"" > /dev/null'); batch = b.run(); ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12010#issuecomment-1226043347:737,Log,LogsExplorer,737,https://hail.is,https://github.com/hail-is/hail/pull/12010#issuecomment-1226043347,3,"['Log', 'test']","['LogsExplorer', 'test']"
Testability,I was just concerned that I hadn't tested dataproc after the changes and didn't want the release to fail. There wasn't anything about the actual release I changed.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14071#issuecomment-1885047981:35,test,tested,35,https://hail.is,https://github.com/hail-is/hail/pull/14071#issuecomment-1885047981,1,['test'],['tested']
Testability,"I was never clear on what `sign == 0` meant, but it appears not to be used: the tightened assertion passes everything.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8655#issuecomment-620651570:90,assert,assertion,90,https://hail.is,https://github.com/hail-is/hail/pull/8655#issuecomment-620651570,1,['assert'],['assertion']
Testability,I was playing whack-a-mole with randomness tests and adding the GCS_REQUESTER_PAYS_BUCKET flag and the flags interface and testing infrastructure was making it impossible for the VEP tests to pass or the other tests for randomness that were failing. I'll revisit this PR again next week to see if your flags PR actually fixed the issue.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12428#issuecomment-1426177281:43,test,tests,43,https://hail.is,https://github.com/hail-is/hail/pull/12428#issuecomment-1426177281,4,['test'],"['testing', 'tests']"
Testability,"I was surprised to see this didn't fail by fixing some fails_local_backend tests. It turns out that we're writing out invalid files with the lowered matrix writer:; ```; def test_indexed_read(self):; mt = hl.utils.range_matrix_table(2000, 100, 10); f = new_temp_file(extension='mt'); mt.write(f); mt2 = hl.read_matrix_table(f, _intervals=[; hl.Interval(start=150, end=250, includes_start=True, includes_end=False),; hl.Interval(start=250, end=500, includes_start=True, includes_end=False),; ]); self.assertEqual(mt2.n_partitions(), 2); self.assertTrue(mt.filter_rows((mt.row_idx >= 150) & (mt.row_idx < 500))._same(mt2)). mt2 = hl.read_matrix_table(f, _intervals=[; hl.Interval(start=150, end=250, includes_start=True, includes_end=False),; hl.Interval(start=250, end=500, includes_start=True, includes_end=False),; ], _filter_intervals=True); self.assertEqual(mt2.n_partitions(), 3); self.assertTrue(mt.filter_rows((mt.row_idx >= 150) & (mt.row_idx < 500))._same(mt2)). E Java stack trace:; E is.hail.utils.HailException: `intervals` specified on an unindexed matrix table.; E This matrix table was written using an older version of hail; E rewrite the matrix in order to create an index to proceed; E 	at is.hail.utils.ErrorHandling$class.fatal(ErrorHandling.scala:11); E 	at is.hail.utils.package$.fatal(package.scala:77); E 	at is.hail.expr.ir.MatrixNativeReader$.apply(MatrixIR.scala:166); E 	at is.hail.expr.ir.MatrixNativeReader$.fromJValue(MatrixIR.scala:184); ...; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10111#issuecomment-790698282:75,test,tests,75,https://hail.is,https://github.com/hail-is/hail/pull/10111#issuecomment-790698282,5,"['assert', 'test']","['assertEqual', 'assertTrue', 'tests']"
Testability,I will add a test for this as a separate PR bug I want to get it in to get Konrad unblocked.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2456#issuecomment-345867674:13,test,test,13,https://hail.is,https://github.com/hail-is/hail/pull/2456#issuecomment-345867674,1,['test'],['test']
Testability,I will add a test.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5895#issuecomment-483942926:13,test,test,13,https://hail.is,https://github.com/hail-is/hail/pull/5895#issuecomment-483942926,1,['test'],['test']
Testability,"I will do a quick sanity check on this before dismissing the review and requesting anew. Right now no tests cover this, but @jbloom22's framework could if we really wanted (annotate a multi-allelic, split it using this, and assert that each allele has at least one annotation)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4218#issuecomment-416754740:102,test,tests,102,https://hail.is,https://github.com/hail-is/hail/pull/4218#issuecomment-416754740,2,"['assert', 'test']","['assert', 'tests']"
Testability,I will follow up with tests to make sure I test this case.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10150#issuecomment-791836974:22,test,tests,22,https://hail.is,https://github.com/hail-is/hail/pull/10150#issuecomment-791836974,2,['test'],"['test', 'tests']"
Testability,I will make the sparsifying rename/doc update a separate PR. @konradjk I also added another test along the same vein but for a matrix that has been filtered for a subset of rows and columns.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5511#issuecomment-469262861:92,test,test,92,https://hail.is,https://github.com/hail-is/hail/pull/5511#issuecomment-469262861,1,['test'],['test']
Testability,"I will work on the test. . However, there’s a related issue: should we be designing the ToStream behavior in this lowering pass to comply with our type system’s invariant, or not?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8063#issuecomment-586586489:19,test,test,19,https://hail.is,https://github.com/hail-is/hail/pull/8063#issuecomment-586586489,1,['test'],['test']
Testability,"I would like to actually have a test, but nothing seemed to replicate the behavior.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13400#issuecomment-1684176484:32,test,test,32,https://hail.is,https://github.com/hail-is/hail/pull/13400#issuecomment-1684176484,1,['test'],['test']
Testability,I'd like to test this on the real database just to make sure it all works first.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12365#issuecomment-1310795651:12,test,test,12,https://hail.is,https://github.com/hail-is/hail/pull/12365#issuecomment-1310795651,1,['test'],['test']
Testability,"I'd propose to do an implicit dependency audit every time you push a new commit. You can still pin versions on published packages, but use unpinned dependencies for CI testing.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/7299#issuecomment-542208997:168,test,testing,168,https://hail.is,https://github.com/hail-is/hail/issues/7299#issuecomment-542208997,1,['test'],['testing']
Testability,I'd really like to see size + performance benchmarks here -- I think the `matrix_table_decode_and_count` and `matrix_table_decode_and_count_just_gt` ones will be interesting.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7803#issuecomment-571308864:42,benchmark,benchmarks,42,https://hail.is,https://github.com/hail-is/hail/pull/7803#issuecomment-571308864,1,['benchmark'],['benchmarks']
Testability,I'll add a test.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8286#issuecomment-597354835:11,test,test,11,https://hail.is,https://github.com/hail-is/hail/pull/8286#issuecomment-597354835,1,['test'],['test']
Testability,I'll add your test on my branch. Sorry for the communication breakdown!,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2630#issuecomment-353795965:14,test,test,14,https://hail.is,https://github.com/hail-is/hail/pull/2630#issuecomment-353795965,1,['test'],['test']
Testability,I'll change my test somehow.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8801#issuecomment-629593684:15,test,test,15,https://hail.is,https://github.com/hail-is/hail/pull/8801#issuecomment-629593684,1,['test'],['test']
Testability,"I'll close it for now, but if I have to test new changes and ci is overloaded again, then I'll reopen it.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12263#issuecomment-1267530105:40,test,test,40,https://hail.is,https://github.com/hail-is/hail/pull/12263#issuecomment-1267530105,1,['test'],['test']
Testability,"I'll do a performance test, but there's still foreign key constraints on these rows. They're just redundant. We don't need a check on both `batches` and `attempts`. The rows in `attempts` wouldn't have been inserted without the check in `batches`. All of these proposed changes don't change anything about data integrity.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11938#issuecomment-1163224811:22,test,test,22,https://hail.is,https://github.com/hail-is/hail/pull/11938#issuecomment-1163224811,1,['test'],['test']
Testability,I'll get before/after benchmarks with compressed CDA vs Uncompressed.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12981#issuecomment-1570902781:22,benchmark,benchmarks,22,https://hail.is,https://github.com/hail-is/hail/pull/12981#issuecomment-1570902781,1,['benchmark'],['benchmarks']
Testability,"I'll leave the issue open for now, but this isn't really feasible. You'll get the same problem with GNU pipes: . ``` bash; wm9f1-8cf:tmp tpoterba$ echo ""hello"" > test; wm9f1-8cf:tmp tpoterba$ cat test; hello; wm9f1-8cf:tmp tpoterba$ cat test > test; wm9f1-8cf:tmp tpoterba$ cat test; wm9f1-8cf:tmp tpoterba$; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/747#issuecomment-256325883:162,test,test,162,https://hail.is,https://github.com/hail-is/hail/issues/747#issuecomment-256325883,5,['test'],['test']
Testability,I'll look at this when the tests are passing.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11044#issuecomment-961837291:27,test,tests,27,https://hail.is,https://github.com/hail-is/hail/pull/11044#issuecomment-961837291,1,['test'],['tests']
Testability,I'll make a PR now that axes this test in favor of a test that compares delta results with FastLMM,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1474#issuecomment-284267067:34,test,test,34,https://hail.is,https://github.com/hail-is/hail/pull/1474#issuecomment-284267067,2,['test'],['test']
Testability,"I'll make a quick Discuss post when this goes in. Here is a quick example of renaming as before with a mapping file:. ```; m2 = {r._0: r._1 for r in hc.import_keytable(test_resources + '/sample2_rename.tsv',; config=TextTableConfig(noheader=True)); .collect()}; self.assertEqual(sample2.join(sample2.rename_samples(m2)); .count()['nSamples'], 200); ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1463#issuecomment-283826241:267,assert,assertEqual,267,https://hail.is,https://github.com/hail-is/hail/pull/1463#issuecomment-283826241,1,['assert'],['assertEqual']
Testability,"I'll merge this when the tests are done and announce on slack, gitter, and discourse.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1263#issuecomment-273224085:25,test,tests,25,https://hail.is,https://github.com/hail-is/hail/pull/1263#issuecomment-273224085,1,['test'],['tests']
Testability,I'll reopen this when benchmarks are done,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7736#issuecomment-574196142:22,benchmark,benchmarks,22,https://hail.is,https://github.com/hail-is/hail/pull/7736#issuecomment-574196142,1,['benchmark'],['benchmarks']
Testability,"I'll retry, but Azure is doing something weird right now:; ```; FAILED; _____________________ test_pool_highcpu_instance_cheapest ______________________. client = <hailtop.batch_client.client.BatchClient object at 0x7f97f907d690>. def test_pool_highcpu_instance_cheapest(client: BatchClient):; bb = create_batch(client); resources = {'cpu': '0.25', 'memory': '50Mi'}; j = bb.create_job(DOCKER_ROOT_IMAGE, ['true'], resources=resources); b = bb.submit(); status = j.wait(); assert status['state'] == 'Success', str((status, b.debug_info())); > assert 'highcpu' in status['status']['worker'], str((status, b.debug_info())); E AssertionError: ({'batch_id': 74, 'job_id': 1, 'name': None, 'user': 'test', 'billing_project': 'test', 'state': 'Success', 'exit_code': 0, 'duration': 609, 'cost': 1.1510333711392028e-06, 'msec_mcpu': 0, 'status': {'version': 5, 'worker': 'batch-worker-pr-12955-default-rrlcxki12v8r-standard-0e2wl', 'batch_id': 74, 'job_id': 1, 'attempt_id': 'gAaTm8', 'user': 'test', 'state': 'succeeded', 'format_version': 7, 'resources': [{'name': 'az/vm/Standard_D8ds_v4/spot/eastus/1682899200000', 'quantity': 32}, {'name': 'az/disk/E4_LRS/eastus/1546300800000', 'quantity': 1024}, {'name': 'az/ip-fee/1024/2021-12-01', 'quantity': 32}, {'name': 'az/service-fee/2021-12-01', 'quantity': 250}], 'region': 'eastus', 'start_time': 1682966178997, 'end_time': 1682966179606, 'container_statuses': {'main': {'name': 'batch-74-job-1-main', 'state': 'succeeded', 'timing': {'pulling': {'start_time': 1682966179035, 'finish_time': 1682966179224, 'duration': 189}, 'setting up overlay': {'start_time': 1682966179224, 'finish_time': 1682966179253, 'duration': 29}, 'setting up network': {'start_time': 1682966179253, 'finish_time': 1682966179253, 'duration': 0}, 'running': {'start_time': 1682966179253, 'finish_time': 1682966179340, 'duration': 87}, 'uploading_log': {'start_time': 1682966179340, 'finish_time': 1682966179361, 'duration': 21}, 'uploading_resource_usage': {'start_time': 1682966179",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12955#issuecomment-1530133228:473,assert,assert,473,https://hail.is,https://github.com/hail-is/hail/pull/12955#issuecomment-1530133228,5,"['Assert', 'assert', 'test']","['AssertionError', 'assert', 'test']"
Testability,"I'll run benchmarks this morning. Do we have benchmarks from an earlier commit saved somewhere, or do I need to run two?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10797#issuecomment-909140072:9,benchmark,benchmarks,9,https://hail.is,https://github.com/hail-is/hail/pull/10797#issuecomment-909140072,2,['benchmark'],['benchmarks']
Testability,I'll run benchmarks when I get to Broad.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8067#issuecomment-584124068:9,benchmark,benchmarks,9,https://hail.is,https://github.com/hail-is/hail/pull/8067#issuecomment-584124068,1,['benchmark'],['benchmarks']
Testability,I'll run the evil test case 😈,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1558#issuecomment-287174326:18,test,test,18,https://hail.is,https://github.com/hail-is/hail/pull/1558#issuecomment-287174326,1,['test'],['test']
Testability,I'll test manually when I rebase.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12318#issuecomment-1479855493:5,test,test,5,https://hail.is,https://github.com/hail-is/hail/pull/12318#issuecomment-1479855493,1,['test'],['test']
Testability,I'll test on VEP once you resolve the conflicts,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4189#issuecomment-414839713:5,test,test,5,https://hail.is,https://github.com/hail-is/hail/pull/4189#issuecomment-414839713,1,['test'],['test']
Testability,I'll unassign you and assign Chris when I finish testing it.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9217#issuecomment-669202128:49,test,testing,49,https://hail.is,https://github.com/hail-is/hail/pull/9217#issuecomment-669202128,1,['test'],['testing']
Testability,I'll verify in a namespace once the tests verify that this isn't completely insane.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11144#issuecomment-990016240:36,test,tests,36,https://hail.is,https://github.com/hail-is/hail/pull/11144#issuecomment-990016240,1,['test'],['tests']
Testability,I'll wait for benchmark-service to get rm -rf'ed. I addressed the other CDN issue and I dismissed the false positive. I'll check-in again once benchmark-service is removed.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12269#issuecomment-1270398986:14,benchmark,benchmark-service,14,https://hail.is,https://github.com/hail-is/hail/pull/12269#issuecomment-1270398986,2,['benchmark'],['benchmark-service']
Testability,I'll write a test,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3310#issuecomment-379888005:13,test,test,13,https://hail.is,https://github.com/hail-is/hail/pull/3310#issuecomment-379888005,1,['test'],['test']
Testability,I'm a bit dubious on editing the change log. Seems like it should really be an append only log.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5960#issuecomment-487212648:40,log,log,40,https://hail.is,https://github.com/hail-is/hail/pull/5960#issuecomment-487212648,2,['log'],['log']
Testability,"I'm a bit perplexed why other keys changed. This is the setting for the non-secret keys.; ```json; 	""deploy_steps"": [],; 	""github_context"": ""ci-test"",; 	""storage_uri"": ""gs://hail-ci-bpk3h"",; 	""bucket_location"": ""us-central1"",; 	""bucket_storage_class"": ""STANDARD"",; 	""test_oauth2_callback_urls"": ""[\""https://internal.hail.is/alpha/oauth2callback\"",\""https://internal.hail.is/beta/oauth2callback\"",\""https://internal.hail.is/gamma/oauth2callback\"",\""https://internal.hail.is/delta/oauth2callback\"",\""https://internal.hail.is/epsilon/oauth2callback\"",\""https://internal.hail.is/zeta/oauth2callback\"",\""https://internal.hail.is/eta/oauth2callback\"",\""https://internal.hail.is/theta/oauth2callback\"",\""https://internal.hail.is/iota/oauth2callback\"",\""https://internal.hail.is/kappa/oauth2callback\"",\""https://internal.hail.is/lambda/oauth2callback\"",\""https://internal.hail.is/mu/oauth2callback\"",\""https://internal.hail.is/nu/oauth2callback\"",\""https://internal.hail.is/xi/oauth2callback\"",\""https://internal.hail.is/omicron/oauth2callback\"",\""https://internal.hail.is/pi/oauth2callback\"",\""https://internal.hail.is/rho/oauth2callback\"",\""https://internal.hail.is/sigma/oauth2callback\"",\""https://internal.hail.is/tau/oauth2callback\"",\""https://internal.hail.is/upsilon/oauth2callback\"",\""https://internal.hail.is/phi/oauth2callback\"",\""https://internal.hail.is/chi/oauth2callback\"",\""https://internal.hail.is/psi/oauth2callback\"",\""https://internal.hail.is/omega/oauth2callback\""]\n"",; 	""watched_branches"": [; 		[; 			""hail-is/hail:main"",; 			true,; 			true; 		]; 	],; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14384#issuecomment-1971802176:144,test,test,144,https://hail.is,https://github.com/hail-is/hail/pull/14384#issuecomment-1971802176,1,['test'],['test']
Testability,I'm also missing agglet extraction logic in StagedExtractAggs,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5307#issuecomment-462502047:35,log,logic,35,https://hail.is,https://github.com/hail-is/hail/pull/5307#issuecomment-462502047,1,['log'],['logic']
Testability,"I'm also running the tests in a loop on a VM to try to flush out any rare, sporadic bugs.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10023#issuecomment-776865190:21,test,tests,21,https://hail.is,https://github.com/hail-is/hail/pull/10023#issuecomment-776865190,1,['test'],['tests']
Testability,I'm also seeing this in my PR that removes most spark-only annotations (in favor of fails_service). I think we must have some logic that spins forever.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11345#issuecomment-1057656473:126,log,logic,126,https://hail.is,https://github.com/hail-is/hail/pull/11345#issuecomment-1057656473,1,['log'],['logic']
Testability,"I'm also surprised we didn't hit earlier. In doing my linear regression debugging, I had added assertions in every call to memoize and rebuild that we are maintaining the expected supertype relationships, which is how I found most of these. I originally thought all of the problems I found were uncovered by IR changes from #9633, but I now suspect that actually we just have/had cases in `PruneDeadFields` where we break the supertype rules temporarily, but it gets cancelled out by some higher IR and doesn't end up mattering. Would be nice if when debugging / testing we could run those asserts to make sure these things don't slip through in the future, as finding all of these bugs was a big headache.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9625#issuecomment-715578188:95,assert,assertions,95,https://hail.is,https://github.com/hail-is/hail/pull/9625#issuecomment-715578188,3,"['assert', 'test']","['assertions', 'asserts', 'testing']"
Testability,"I'm broadly OK with this, but I suspect we need to do something more careful to ensure that the worker exception is connected to the driver exception. It appears that some tests are failing for this reason.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12318#issuecomment-1278123036:172,test,tests,172,https://hail.is,https://github.com/hail-is/hail/pull/12318#issuecomment-1278123036,1,['test'],['tests']
Testability,"I'm closing because this ticket merely notes that the artifact page is only representative of hail. This is expected behavior. The build log is the source of truth, the artifact page is only helpful for the `hail` subproject. In the future, the CI can define a DAG of jobs for the different subproject. The associated UI will enable users to quickly see what failed.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4514#issuecomment-451512691:137,log,log,137,https://hail.is,https://github.com/hail-is/hail/issues/4514#issuecomment-451512691,1,['log'],['log']
Testability,"I'm closing for now. After more careful benchmarking, this is a slight regression. I think this is the right approach, but we don't have enough facilities for writing performant linear algebra in python/hail yet.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11070#issuecomment-973300626:40,benchmark,benchmarking,40,https://hail.is,https://github.com/hail-is/hail/pull/11070#issuecomment-973300626,1,['benchmark'],['benchmarking']
Testability,I'm closing this PR for now so that I'm not testing it for every commit I make.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7101#issuecomment-534707540:44,test,testing,44,https://hail.is,https://github.com/hail-is/hail/pull/7101#issuecomment-534707540,1,['test'],['testing']
Testability,"I'm concerned about merging this PR if it's going to resort the dataset. I don't see why I am getting that warning even with the code I have in TestUtils (below). Maybe there is a problem somewhere else?. ```; def exportPlink(mt: MatrixTable, path: String): Unit = {; mt.selectCols(""""""{fam_id: ""0"", id: sa.s, mat_id: ""0"", pat_id: ""0"", is_female: ""0"", pheno: ""NA""}""""""); .annotateRowsExpr(; ""varid"" -> """"""let l = va.locus and a = va.alleles in [l.contig, str(l.position), a[0], a[1]].mkString("":"")"""""",; ""pos_morgan"" -> ""0""); .exportPlink(path); }; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3417#issuecomment-383622964:144,Test,TestUtils,144,https://hail.is,https://github.com/hail-is/hail/pull/3417#issuecomment-383622964,1,['Test'],['TestUtils']
Testability,I'm confused. I was ready to approve this pending the test passing. Now there's stacked PRs that include these changes. What PR should I look at?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9862#issuecomment-759793573:54,test,test,54,https://hail.is,https://github.com/hail-is/hail/pull/9862#issuecomment-759793573,1,['test'],['test']
Testability,"I'm curious how you would test this. I've manually tested and confirmed it works with the currently commented out test. That test is kind of slow and heavy though, and it's hard to write a good version if I don't know how much memory someone has available. Do you think it's worth adding a new CI job to run certain tests in constrained memory environment to verify they stay below a prescribed limit?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10233#issuecomment-808504566:26,test,test,26,https://hail.is,https://github.com/hail-is/hail/pull/10233#issuecomment-808504566,5,['test'],"['test', 'tested', 'tests']"
Testability,"I'm currently running this branch of CI on a pull request of itself on my own fork of hail, and it nearly passes all tests except for hailtop_batch_* because of requester pays permissions issues and monitoring, because I don't have a service account in my project with all the permissions for broad-ctsa. So unfortunately haven't fully validated that it will _not_ merge a passing PR, but this seemed good enough that we can push it through for azure (since both of these errors are gcp-dependent). If this goes through I can put in a follow-up PR that mirrors the infra resources that CI needs in azure (blob storage, acr permissions, etc.)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11053#issuecomment-964437539:117,test,tests,117,https://hail.is,https://github.com/hail-is/hail/pull/11053#issuecomment-964437539,1,['test'],['tests']
Testability,"I'm fairly certain I know understand this and the AoU VDS creation issue. In Dataproc versions 1.5.74, 2.0.48, and 2.1.0, Dataproc introduced ""memory protection"" which is a euphemism for a newly aggressive OOMKiller. When the OOMKiller kills the JVM driver process, there is no hs_err_pid...log file, no exceptional log statements, and no clean shutdown of any sockets. The process is simply SIGTERM'ed and then SIGKILL'ed. From Hail 0.2.83 through Hail 0.2.109 (released February 2023), Hail was pinned to Dataproc 2.0.44. From Hail 0.2.15 onwards, `hailctl dataproc`, by default, reserves 80% of the advertised memory of the driver node for the use of the Hail Query Driver JVM process. For example, Google advertises that an n1-highmem-8 has 52 GiB of RAM, so Hail sets the `spark:spark.driver.memory` property to `41g` (we always round down). Before aggressive memory protection, this setting was sufficient to protect the driver from starving itself of memory. Unfortunately, Hail 0.2.110 upgraded to Dataproc 2.1.2 which enabled ""memory protection"". Moreover, in the years since Hail 0.2.15, the memory in use by system processes on Dataproc driver nodes appears to have increased. Due to these two circumstances, the driver VM's memory usage can grow high enough to trigger the OOMKiller before the JVM triggers a GC. Consider, for example, these slices of the syslog of the n1-highmem-8 driver VM of a Dataproc cluster:. ```; Nov 22 14:26:51 vds-cluster-91f3f4c1-b737-m earlyoom[4115]: earlyoom v1.6.2; Nov 22 14:26:51 vds-cluster-91f3f4c1-b737-m earlyoom[4115]: mem total: 52223 MiB, swap total: 0 MiB; Nov 22 14:26:51 vds-cluster-91f3f4c1-b737-m earlyoom[4115]: sending SIGTERM when mem <= 0.12% and swap <= 1.00%,; Nov 22 14:26:51 vds-cluster-91f3f4c1-b737-m earlyoom[4115]: SIGKILL when mem <= 0.06% and swap <= 0.50%; ...; Nov 22 14:30:05 vds-cluster-91f3f4c1-b737-m post-hdfs-startup-script[7747]: + echo 'All done'; Nov 22 14:30:05 vds-cluster-91f3f4c1-b737-m post-hdfs-startup-script[7",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13960#issuecomment-1836844790:291,log,log,291,https://hail.is,https://github.com/hail-is/hail/issues/13960#issuecomment-1836844790,2,['log'],['log']
Testability,I'm fixing the failing tests now..,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1517#issuecomment-285446701:23,test,tests,23,https://hail.is,https://github.com/hail-is/hail/pull/1517#issuecomment-285446701,1,['test'],['tests']
Testability,"I'm going to benchmark this today and if nothing has changed since Cotton's benchmarks, I think we're good for a merge. I had hoped to begin working with Grace's team to use this tool on Thursday. I can build a wheel, since I don't anticipate a release happening so fast.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10752#issuecomment-896959032:13,benchmark,benchmark,13,https://hail.is,https://github.com/hail-is/hail/pull/10752#issuecomment-896959032,2,['benchmark'],"['benchmark', 'benchmarks']"
Testability,"I'm going to close this and break it up once I see how tests shake out. I think it's fixed now, but half of this PR has become pruner fixes that probably ought to be their own PR.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9578#issuecomment-713770349:55,test,tests,55,https://hail.is,https://github.com/hail-is/hail/pull/9578#issuecomment-713770349,1,['test'],['tests']
Testability,"I'm going to run this migration again on my test database later this afternoon, but in the meantime, can you look over it again?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11990#issuecomment-1195696923:44,test,test,44,https://hail.is,https://github.com/hail-is/hail/pull/11990#issuecomment-1195696923,1,['test'],['test']
Testability,"I'm going to start testing, but I think the only thing that wasn't clear to me was how to resolve these sorts of comments. Do I try and fix them now or in a separate PR with an issue to make sure it gets noted? https://github.com/hail-is/hail/pull/14170#discussion_r1473442106",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14170#issuecomment-1929629871:19,test,testing,19,https://hail.is,https://github.com/hail-is/hail/pull/14170#issuecomment-1929629871,1,['test'],['testing']
Testability,I'm going to test this with dev deploy.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7909#issuecomment-575790241:13,test,test,13,https://hail.is,https://github.com/hail-is/hail/pull/7909#issuecomment-575790241,1,['test'],['test']
Testability,I'm gonna kill this in favor of something that also asserts the status is success.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8471#issuecomment-609873949:52,assert,asserts,52,https://hail.is,https://github.com/hail-is/hail/pull/8471#issuecomment-609873949,1,['assert'],['asserts']
Testability,"I'm gonna push a change that puts a hard 2 minute limit on all tests, we'll see which ones timeout, then I'll mark the ones that are legitimately slow with a per-test timeout. Hopefully this will isolate us down to both the test and particular portion of code that's getting stuck.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13122#issuecomment-1568417144:63,test,tests,63,https://hail.is,https://github.com/hail-is/hail/pull/13122#issuecomment-1568417144,3,['test'],"['test', 'tests']"
Testability,I'm gonna run test-dataproc-37 and -38 before I merge.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13529#issuecomment-1701490177:14,test,test-dataproc-,14,https://hail.is,https://github.com/hail-is/hail/pull/13529#issuecomment-1701490177,1,['test'],['test-dataproc-']
Testability,I'm gonna see if this code works on the full test suite. I'm finding it pretty tricky to work with this stuff. The code I wrote for the last remaining elements in the non-required case seems to be wrong.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13776#issuecomment-1749445909:45,test,test,45,https://hail.is,https://github.com/hail-is/hail/pull/13776#issuecomment-1749445909,1,['test'],['test']
Testability,I'm gonna submit a new PR which subsumes this and #12927 because they're both entangled in a bunch of the same issues and its increasingly apparent that I need them together to pass all the tests.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12908#issuecomment-1520876419:190,test,tests,190,https://hail.is,https://github.com/hail-is/hail/pull/12908#issuecomment-1520876419,1,['test'],['tests']
Testability,"I'm good with this, but I want my service PR to merge first so that we can adjust the test failure annotations accordingly.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10421#issuecomment-831299029:86,test,test,86,https://hail.is,https://github.com/hail-is/hail/pull/10421#issuecomment-831299029,1,['test'],['test']
Testability,"I'm happy with the code here, and Jon and Alex have looked at math, so I think this is more or less good to go in. Will approve after discussing with Jon whether the possibility of the maximum log liklhood falling on a grid point is something worth worrying about.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1720#issuecomment-297446909:193,log,log,193,https://hail.is,https://github.com/hail-is/hail/pull/1720#issuecomment-297446909,1,['log'],['log']
Testability,"I'm happy with this. And as we move our tests out of Scala and into Python, things will make even more sense.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2590#issuecomment-352192930:40,test,tests,40,https://hail.is,https://github.com/hail-is/hail/pull/2590#issuecomment-352192930,1,['test'],['tests']
Testability,I'm having a lot of trouble getting the memory tests to pass...,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10331#issuecomment-837285025:47,test,tests,47,https://hail.is,https://github.com/hail-is/hail/pull/10331#issuecomment-837285025,1,['test'],['tests']
Testability,"I'm hitting default & my local build is latest hi/main (`15a45cfb9b0f8da01b2d0408993556f8391749e3`), still broke. I started hail this way:; ```; hailctl config set batch/billing_project hail; hailctl dev config set default_namespace default; HAIL_QUERY_BACKEND=service ipython; ```; ```ipython; In [1]: In [1]: import hail as hl ; ...: ...: ; ...: ...: temp = hl.utils.range_table(100) ; ...: ...: temp.write('gs://danking/workshop-test/1kg.mt', overwrite=True) ; ...: ; Initializing Hail with default parameters...; Welcome to; __ __ <>__; / /_/ /__ __/ /; / __ / _ `/ / /; /_/ /_/\_,_/_/_/ version 0.2.61-15a45cfb9b0f; LOGGING: writing to /Users/dking/projects/hail/hail-20210202-1642-0.2.61-15a45cfb9b0f.log; Traceback (most recent call last):; File ""<ipython-input-1-92be8dd8c99f>"", line 4, in <module>; temp.write('gs://danking/workshop-test/1kg.mt', overwrite=True); File ""</Users/dking/miniconda3/lib/python3.7/site-packages/decorator.py:decorator-gen-1094>"", line 2, in write; File ""/Users/dking/projects/hail/hail/python/hail/typecheck/check.py"", line 577, in wrapper; return __original_func(*args_, **kwargs_); File ""/Users/dking/projects/hail/hail/python/hail/table.py"", line 1271, in write; Env.backend().execute(ir.TableWrite(self._tir, ir.TableNativeWriter(output, overwrite, stage_locally, _codec_spec))); File ""/Users/dking/projects/hail/hail/python/hail/backend/service_backend.py"", line 103, in execute; bucket=self._bucket); File ""/Users/dking/projects/hail/hail/python/hail/backend/service_backend.py"", line 48, in request; return async_to_blocking(retry_transient_errors(self.async_request, endpoint, **data)); File ""/Users/dking/projects/hail/hail/python/hailtop/utils/utils.py"", line 116, in async_to_blocking; return asyncio.get_event_loop().run_until_complete(coro); File ""/Users/dking/miniconda3/lib/python3.7/asyncio/base_events.py"", line 587, in run_until_complete; return future.result(); File ""/Users/dking/projects/hail/hail/python/hailtop/utils/utils.py"", line 395, in ",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/9856#issuecomment-772011601:432,test,test,432,https://hail.is,https://github.com/hail-is/hail/issues/9856#issuecomment-772011601,4,"['LOG', 'log', 'test']","['LOGGING', 'log', 'test']"
Testability,I'm inclined to not change the test and fix the entries issue. this seems like a good smoke test.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4242#issuecomment-417780296:31,test,test,31,https://hail.is,https://github.com/hail-is/hail/pull/4242#issuecomment-417780296,2,['test'],['test']
Testability,"I'm just waiting for benchmarks to run, but otherwise I think so",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8315#issuecomment-604459713:21,benchmark,benchmarks,21,https://hail.is,https://github.com/hail-is/hail/pull/8315#issuecomment-604459713,1,['benchmark'],['benchmarks']
Testability,"I'm looking at `worker.py` now and it looks like you worked around this with the addition of `ignore_job_deletion`, which maybe Dan wasn't aware of but is still a workaround since Timings just shouldn't care about deletion in the first place. Without that flag you'd get this:. 1. Running step would start; 2. Job is cancelled, so `Job.deleted` would be set to `True`.; 3. Job would set the Container's `deleted_event`, which would abort the run function inside `run_until_done_or_deleted`; 4. Container would jump to the uploading logs step, which would raise a job deleted error before running `upload_log`.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11429#issuecomment-1054613946:532,log,logs,532,https://hail.is,https://github.com/hail-is/hail/pull/11429#issuecomment-1054613946,1,['log'],['logs']
Testability,"I'm merging this so Sali can use the new interface and better performance, and I am going to add an additional test in another PR.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2544#issuecomment-351097552:111,test,test,111,https://hail.is,https://github.com/hail-is/hail/pull/2544#issuecomment-351097552,1,['test'],['test']
Testability,I'm missing something. Why shouldn't test deployments benefit from and contribute to the cache? Why isolate them somewhere else?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11907#issuecomment-1152542361:37,test,test,37,https://hail.is,https://github.com/hail-is/hail/pull/11907#issuecomment-1152542361,1,['test'],['test']
Testability,I'm not 100% confident in the glob code yet. Do you have any additional tests to add?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8626#issuecomment-619252781:72,test,tests,72,https://hail.is,https://github.com/hail-is/hail/pull/8626#issuecomment-619252781,1,['test'],['tests']
Testability,"I'm not 100% sure, but I did this locally. I'd like to test it with aiodocker as well to make sure and confirm on the worker before merging. I couldn't find anything online that 100% confirmed, but my understanding of associated volumes was those created by the container create command based on this behavior. ```; (base) wmecc-475:ci jigold$ docker volume ls; DRIVER VOLUME NAME; (base) wmecc-475:ci jigold$ docker volume create foo; foo; (base) wmecc-475:ci jigold$ docker volume ls; DRIVER VOLUME NAME; local foo; (base) wmecc-475:ci jigold$ docker create -v foo:/foo google/cloud-sdk:237.0.0-alpine echo hello; 1b10e2a6f6a2f7eb6a6fbe06ce5a6bcae85c00174aa3790267935f91714aa7f7; (base) wmecc-475:ci jigold$ docker volume ls; DRIVER VOLUME NAME; local b4b0706c4dfd3ed1907c1fd3325303578f4805a626b88ecbc4935852440577aa; local foo; (base) wmecc-475:ci jigold$ curl --unix-socket /var/run/docker.sock -H ""Content-Type: application/json"" -X DELETE http:/v1.40/containers/1b10e2a6f6a2f7eb6a6fbe06ce5a6bcae85c00174aa3790267935f91714aa7f7?v=true; (base) wmecc-475:ci jigold$ docker volume ls; DRIVER VOLUME NAME; local foo; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7359#issuecomment-545193658:55,test,test,55,https://hail.is,https://github.com/hail-is/hail/pull/7359#issuecomment-545193658,1,['test'],['test']
Testability,"I'm not able to test this against real-sized data yet due to UNIX permissions issues, but I want to start getting code critique.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/658#issuecomment-241537793:16,test,test,16,https://hail.is,https://github.com/hail-is/hail/pull/658#issuecomment-241537793,1,['test'],['test']
Testability,"I'm not entirely sure how to test this. I think I need to create a table with a row beginning exactly on a block boundary, not fully sure how to do that. I've tested this and it does work on the table that I found the issue. I will be making another change soon to prevent this ambiguity.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6633#issuecomment-511213010:29,test,test,29,https://hail.is,https://github.com/hail-is/hail/pull/6633#issuecomment-511213010,2,['test'],"['test', 'tested']"
Testability,I'm not going to read 7000 lines of deletions. Fine with me if it passes! And fine to delete tests conditional on audit soon.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3990#issuecomment-407914682:93,test,tests,93,https://hail.is,https://github.com/hail-is/hail/pull/3990#issuecomment-407914682,1,['test'],['tests']
Testability,I'm not in an environment where I can easily run tests right now. Let's see what CI has to say about these changes.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4891#issuecomment-444528789:49,test,tests,49,https://hail.is,https://github.com/hail-is/hail/pull/4891#issuecomment-444528789,1,['test'],['tests']
Testability,"I'm not really sure, either. I figured as long as every type was in there somewhere at least once and some things were missing, it would be fine. This is just to check backward compatibility, so it's hard to imagine that (1) the current version passes all the tests, (2) it can load a reasonable collections of types and values from an old version, but (3) only, say, missing calls are broken.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3043#issuecomment-369993008:260,test,tests,260,https://hail.is,https://github.com/hail-is/hail/pull/3043#issuecomment-369993008,1,['test'],['tests']
Testability,"I'm not sure I follow. Can you elaborate more on ""We aren't including the test repo on deploy""? I thought we were always testing everything on deploy (ie running Hail, batch, pipeline tests etc).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7814#issuecomment-571721872:74,test,test,74,https://hail.is,https://github.com/hail-is/hail/pull/7814#issuecomment-571721872,3,['test'],"['test', 'testing', 'tests']"
Testability,"I'm not sure I understand. `hail/python/hail/docs/_templates/layout.html` references `/navbar.css` which should be present on the deployed site. I might misunderstand `conf.py`, but, AFAICT, this makes unused copies of navbar.css and the PNG: https://hail.is/docs/0.2/navbar.css and https://hail.is/docs/0.2/hail-logo-cropped.png. The page at https://hail.is/docs/0.2/ loads `hail.is/navbar.css`.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8956#issuecomment-644213411:313,log,logo-cropped,313,https://hail.is,https://github.com/hail-is/hail/pull/8956#issuecomment-644213411,1,['log'],['logo-cropped']
Testability,I'm not sure either. I want to keep the explicit logging of when this happens for now.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6477#issuecomment-505891762:49,log,logging,49,https://hail.is,https://github.com/hail-is/hail/pull/6477#issuecomment-505891762,1,['log'],['logging']
Testability,I'm not sure how to actually test these changes.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10732#issuecomment-891315108:29,test,test,29,https://hail.is,https://github.com/hail-is/hail/pull/10732#issuecomment-891315108,1,['test'],['test']
Testability,"I'm not sure what the best/easiest thing to do is. I think we can accomplish the same thing by copying and pasting the delete tables step (runImage) into a dev branch while testing. . The other easiest thing I can think of is to add a `run_if_requested=True` option to each build step config and modify ci to skip over steps that aren't specifically requested in dev deploy. I don't think a new step is a good idea because what if I want an optional runImage step or an optional Deploy step, etc.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7705#issuecomment-565009061:173,test,testing,173,https://hail.is,https://github.com/hail-is/hail/pull/7705#issuecomment-565009061,1,['test'],['testing']
Testability,"I'm not sure what the problem is you're referring to with TStruct is. ```; In [1]: from hail import *; In [2]: from hail.expr import *; In [3]: hc = HailContext(); Using Spark's default log4j profile: org/apache/spark/log4j-defaults.properties; Setting default log level to ""WARN"".; To adjust logging level use sc.setLogLevel(newLevel).; hail: info: SparkUI: http://172.20.20.20:4040; Welcome to; __ __ <>__; / /_/ /__ __/ /; / __ / _ `/ / /; /_/ /_/\_,_/_/_/ version devel-5d97891. In [4]: s = TStruct(['a', 'b'], [TGenotype(), TStruct(['c', 'd'], [TInt32(), TString()])]); In [5]: s; Out[5]: TStruct(['a', 'b'], [TGenotype(), TStruct(['c', 'd'], [TInt(), TString()])]); In [6]: struct = Struct({'a': 5, 'b': 10, 'c': 'hello'}); In [7]: print(struct._history); # 2017-08-14T12:17:18.033131; # version: devel-5d97891. (Struct(attributes={'a': 5, 'c': 'hello', 'b': 10})). In [8]: struct._history; Out[8]: Struct(attributes={'a': 5, 'c': 'hello', 'b': 10}); ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2060#issuecomment-322237507:261,log,log,261,https://hail.is,https://github.com/hail-is/hail/pull/2060#issuecomment-322237507,2,['log'],"['log', 'logging']"
Testability,"I'm not sure whether we should add this proactively or not, and to be clear I don't intend users to generally use this, but this is the best solution I can think of so far for @illusional's question about what to do when we have removed support for the old hail access tokens but users still are forced to run a pipeline on an old hail version. Old hail access tokens are stored in JSON in `~/.hail/tokens.json`, so I believe (though have not yet tested, that the following should allow a user to use an old version of hail against a version of batch that only supports cloud access tokens:. On the *new* version of hail, run. ```; hailctl auth login; hailctl auth print-access-token | jq -R -c '{ default: . }' > ~/.hail/tokens.json; ```. Then switch to an old version and proceed as usual (but don't run `hailctl auth login`!).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13934#issuecomment-1783136528:447,test,tested,447,https://hail.is,https://github.com/hail-is/hail/pull/13934#issuecomment-1783136528,3,"['log', 'test']","['login', 'tested']"
Testability,"I'm not sure, but it's the only difference I could find between session messages that worked on the front end and the messages not showing up from the driver. I want to test this explicitly, but my namespace is currently messed up in Azure with previous database changes.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11094#issuecomment-984813805:169,test,test,169,https://hail.is,https://github.com/hail-is/hail/pull/11094#issuecomment-984813805,1,['test'],['test']
Testability,I'm pretty sure I fixed the issue. Yay for tests!,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12283#issuecomment-1271808059:43,test,tests,43,https://hail.is,https://github.com/hail-is/hail/pull/12283#issuecomment-1271808059,1,['test'],['tests']
Testability,I'm pretty sure this is broken and the batch tests are going into an infinite loop.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4586#issuecomment-433087824:45,test,tests,45,https://hail.is,https://github.com/hail-is/hail/pull/4586#issuecomment-433087824,1,['test'],['tests']
Testability,"I'm pretty sure we do need to fix evaluation, too -- the java type of the result needs to be consistent, because the way we box things means it can't be implicitly converted the way numeric types can in java. So if an `Int`/`Long` if statement is promoted to `Long`, the result of evaluation needs to be a long in both cases. I think you can add this case to ExprSuite and it'll show the problem:. ``` scala; def checkTypeConcordance(s: String) {; val (t, result) = evalWithType[Any](s); assert(t.asInstanceOf[Type].typeCheck(result)); }; checkTypeConcordance(""""""if (true) 0 else 0.toLong""""""); ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/748#issuecomment-245383248:488,assert,assert,488,https://hail.is,https://github.com/hail-is/hail/pull/748#issuecomment-245383248,1,['assert'],['assert']
Testability,I'm putting a wip tag on this so we make sure we dev deploy and test the behavior one last time before merging.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10630#issuecomment-872355294:64,test,test,64,https://hail.is,https://github.com/hail-is/hail/pull/10630#issuecomment-872355294,1,['test'],['test']
Testability,I'm putting the WIP tag for Monday. I changed the code slightly from before. I checked and the test PR driver logs were at least clean.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12654#issuecomment-1426351960:95,test,test,95,https://hail.is,https://github.com/hail-is/hail/pull/12654#issuecomment-1426351960,2,"['log', 'test']","['logs', 'test']"
Testability,I'm putting the WIP tag to remind ourselves to turn off the Azure tests before merging.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13368#issuecomment-1664637939:66,test,tests,66,https://hail.is,https://github.com/hail-is/hail/pull/13368#issuecomment-1664637939,1,['test'],['tests']
Testability,"I'm ready to approve, but I'm not sure why the build is failing, and I don't know what the protocol is now for approving PRs failing tests. Seems like it increases the chances of merging a dumb mistake.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4123#issuecomment-412981153:133,test,tests,133,https://hail.is,https://github.com/hail-is/hail/pull/4123#issuecomment-412981153,1,['test'],['tests']
Testability,I'm still looking at this. I'm having a hard time with the test code. I'll try and spend more time tomorrow so I can either figure out what's going on myself or have specific questions.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9822#issuecomment-759790742:59,test,test,59,https://hail.is,https://github.com/hail-is/hail/pull/9822#issuecomment-759790742,1,['test'],['test']
Testability,"I'm still looking, but I could only find the logs for PR 13509 as PR 13458 is too old. There are no batch worker logs at all for these two instances, but there are a bunch of sys logs. I didn't see an obvious error message, but there's 1000s of sys log messages in there. https://console.cloud.google.com/logs/query;query=resource.type%3D%22gce_instance%22%0Alabels.%22compute.googleapis.com%2Fresource_name%22:%22batch-worker-pr-13509-default-p2aogbaogrsp-highmem-np-zx6w4%22;summaryFields=:false:32:beginning;cursorTimestamp=2023-08-29T20:39:28Z;aroundTime=2023-08-29T20:16:33.950Z;duration=PT24H?project=hail-vdc",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13554#issuecomment-1736282516:45,log,logs,45,https://hail.is,https://github.com/hail-is/hail/issues/13554#issuecomment-1736282516,5,['log'],"['log', 'logs']"
Testability,"I'm taking some old tickets from Jon. For this, we just want to combine the two tests into one test method instead of two?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4922#issuecomment-570346582:80,test,tests,80,https://hail.is,https://github.com/hail-is/hail/issues/4922#issuecomment-570346582,2,['test'],"['test', 'tests']"
Testability,"I'm testing out the dev deploy now, but realized this is super slow because Dan's PR changing how the base image is done with a new hail_ubuntu image is in now. Just FYI.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9684#issuecomment-723127410:4,test,testing,4,https://hail.is,https://github.com/hail-is/hail/pull/9684#issuecomment-723127410,1,['test'],['testing']
Testability,I'm testing the JPI real quick to make sure that is fine as well.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10617#issuecomment-869729427:4,test,testing,4,https://hail.is,https://github.com/hail-is/hail/pull/10617#issuecomment-869729427,1,['test'],['testing']
Testability,"I'm waiting until the full stack is done so I can benchmark and make sure there aren't regressions. I have one more commit to go, I think.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10804#issuecomment-914546008:50,benchmark,benchmark,50,https://hail.is,https://github.com/hail-is/hail/pull/10804#issuecomment-914546008,1,['benchmark'],['benchmark']
Testability,"I'm yanking out this test in PR #1475 in favor of a direct comparison of h2 with FaST-LMM. That said, we should still understand what was causing different runs to give different values.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1416#issuecomment-284279573:21,test,test,21,https://hail.is,https://github.com/hail-is/hail/issues/1416#issuecomment-284279573,1,['test'],['test']
Testability,I've added a note to add a test for this later. Thanks John!,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9627#issuecomment-713899121:27,test,test,27,https://hail.is,https://github.com/hail-is/hail/pull/9627#issuecomment-713899121,1,['test'],['test']
Testability,"I've added a second commit that fixes the remainder of #13191, marking the individual JobResourceFiles within the ResourceGroup as `_mentioned` and hence preventing the “undefined resource” BatchException previously observed. (Some of the tests in _hail/python/test/hailtop/batch/test_batch.py_ would also need adjusting to account for the re-imagined `_mentioned`.). Having now studied f6fe19c085a9d9ebee23866961cb582a713cc1ad, which introduced `_mentioned` and this error message hint, IMHO this is a reasonable fix. Apart from the code in _backend.py_ to do with `symlink_input_resource_group`, which I haven't looked at, `_mentioned` is maintained solely to decide whether to emit this BatchException hinting to the user that the resource ought to be defined if you're going to use it in `write_output`. In this case, because the filenames are related, `foo.gz.tbi` may well have been created even though only `foo.gz` appears explicitly in the command text, so it may be a false positive (as in #13191's case) to raise the exception. So the conservative thing to do is to suppress the message in these `declare_resource_group` cases.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13192#issuecomment-1600755633:239,test,tests,239,https://hail.is,https://github.com/hail-is/hail/pull/13192#issuecomment-1600755633,2,['test'],"['test', 'tests']"
Testability,"I've added real tests, that check that setup and finalization are correctly paired. If it's okay to wait on refactoring COption (which I don't think will be any harder to do later), then this should be ready for review.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8129#issuecomment-589715873:16,test,tests,16,https://hail.is,https://github.com/hail-is/hail/pull/8129#issuecomment-589715873,1,['test'],['tests']
Testability,"I've added some more information. I haven't quite figured out a good way to present all this. There seems to be three distinct things:; - the mounting of secrets to paths in the pods (documented as code in `deployment.yaml`s); - the name of k8s secrets, their contents, and the meaning of the contents (specifically what the applications expect of it). The latter would be best documented with scripts that regenerate the secrets from some root secret. We can [programmatically generate oauth tokens](https://developer.github.com/v3/oauth_authorizations/) (which are different from personal access tokens) with username and password authentication. A recreation script could use one privileged key that has access to username/password for each hail test user. That is used to generate auth-tokens (we might need to adapt our code to use oauth tokens instead of personal access tokens). GCP service account keys can be generated programmatically. Unfortunately, there seems to be a little bit of work involved in using OAuth instead of personal access tokens. We have to register our ""app"". I can look into this sometime soon. I'll create an issue.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4552#issuecomment-430432141:749,test,test,749,https://hail.is,https://github.com/hail-is/hail/pull/4552#issuecomment-430432141,1,['test'],['test']
Testability,"I've addressed the comments, but I can't run the benchmark anymore, I get weird errors about partitions being empty that I expected to be non-empty. I will continue to investigate.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2253#issuecomment-332664586:49,benchmark,benchmark,49,https://hail.is,https://github.com/hail-is/hail/pull/2253#issuecomment-332664586,1,['benchmark'],['benchmark']
Testability,I've authorized another test of this PR.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6825#issuecomment-521290991:24,test,test,24,https://hail.is,https://github.com/hail-is/hail/pull/6825#issuecomment-521290991,1,['test'],['test']
Testability,I've authorized sha `600826710afb8dfef5fcbf19f440a43f263ec0ee` in CI so we should get a test run through soon.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14700#issuecomment-2407899242:88,test,test,88,https://hail.is,https://github.com/hail-is/hail/pull/14700#issuecomment-2407899242,1,['test'],['test']
Testability,"I've done some extensive remodeling of Pedigree and MendelErrors, shorter and conceptually cleaner now, got to delete a bunch of code. But I'm having a serialization issue, which may be related to changing MendelError to include the CompleteTrio rather than the sample. For example, if I replace ""implicatedSample"" by pasting the body in the closure instead, then the serialization error at that point goes away. but there are a bunch of other ones from the toLine below. ```; org.apache.spark.SparkException: Task not serializable; at org.apache.spark.util.ClosureCleaner$.ensureSerializable(ClosureCleaner.scala:166); at org.apache.spark.util.ClosureCleaner$.clean(ClosureCleaner.scala:158); at org.apache.spark.SparkContext.clean(SparkContext.scala:1622); at org.apache.spark.rdd.RDD.map(RDD.scala:286); at org.broadinstitute.hail.methods.MendelErrors.writeMendel(MendelErrors.scala:143); at org.broadinstitute.hail.methods.MendelErrorsSuite.test(MendelErrorsSuite.scala:50); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:497); at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); at org.testng.TestRunner.privateRun(TestRunner.java:767); at org.testng.TestRunner.run(TestRunner.java:617); at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); at org.testng.SuiteRunner.privateRun(SuiteRunner.java",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/68#issuecomment-155304880:945,test,test,945,https://hail.is,https://github.com/hail-is/hail/pull/68#issuecomment-155304880,1,['test'],['test']
Testability,I've expanded the tests and fixed the join logic. It'll be much easier to test when we can easily define our own row/col keys with the `annotate/select` methods.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2605#issuecomment-352825562:18,test,tests,18,https://hail.is,https://github.com/hail-is/hail/pull/2605#issuecomment-352825562,3,"['log', 'test']","['logic', 'test', 'tests']"
Testability,"I've got some weird testing issues I'm working out. Once those are fixed, I'll kick it back to Jackie (probably today / early tomorrow)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/291#issuecomment-210106396:20,test,testing,20,https://hail.is,https://github.com/hail-is/hail/pull/291#issuecomment-210106396,1,['test'],['testing']
Testability,"I've gut-renovated the TDT implementation and improved docs and tests. The t=0, u=0 case is now handed generically, giving NaN and NaN instead of 0.0 and 1.0 for chi2 and pval. I've also normalized the pedigree and trio fields/functions to be consistent with the other changes.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2768#issuecomment-359282910:64,test,tests,64,https://hail.is,https://github.com/hail-is/hail/pull/2768#issuecomment-359282910,1,['test'],['tests']
Testability,I've hacked a 'solution' by adding an explicit check at https://github.com/hail-is/hail/blob/607d2b4aa032c24db033359eb6f92da976a8d9f2/src/main/scala/org/broadinstitute/hail/io/vcf/HtsjdkRecordReader.scala#L59 but am not sure of the performance penalty. All tests still pass at least! :). See pull request https://github.com/hail-is/hail/pull/1066,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1065#issuecomment-258770482:257,test,tests,257,https://hail.is,https://github.com/hail-is/hail/issues/1065#issuecomment-258770482,1,['test'],['tests']
Testability,"I've made the changes you suggested patrick, but now we have a failing test. I'm getting a situation where Vt is clearly orthonormal, and U@S@Vt multiplies back to the input matrix, but U@U.t is not particularly close to the identity matrix. It's not clear why this is. The test is:. ```; np_rank_2_wide_rectangle = np.arange(12).reshape((4, 3)); rank_2_wide_rectangle = hl.nd.array(np_rank_2_wide_rectangle). ......... assert_evals_to_same_svd(rank_2_wide_rectangle, np_rank_2_wide_rectangle, full_matrices=False); ```. (The 4th test in the `test_svd` method)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9727#issuecomment-733190588:71,test,test,71,https://hail.is,https://github.com/hail-is/hail/pull/9727#issuecomment-733190588,3,['test'],['test']
Testability,"I've merged a stack of changes to this branch including:; - Cleaned up tests, including refactoring, making Balding-Nichols covariates deterministic and removing lots of extra test code; - Reorder args in Scala to match Python, related bug fixes; - Improved large N performance by using single array D rather than A and B; - Moved dense versus sparse matching outside of loop; - Improved Python docs and Scala remarks; - Debugged test failure only occurring in Spark 2.1.0, which turned out to be related to accuracy of Davies. I've increased accuracy to 1e-8 which is enough to make current tests pass. Once this goes in, I'll make PRs to:; - Allow users to set accuracy and iterations on Davies, will use same defaults as R: 1e-6 and 10k.; - Add number of variants per key as column.; - Fix behavior to finish running even if some groups are too big upper bound, or if Cholesky fails. Document this behavior. Less urgently, but to keep in mind:; - If bottleneck, improve performance of Gramian computation in large N case using blocking; - Improve Davies C code",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2153#issuecomment-325388707:71,test,tests,71,https://hail.is,https://github.com/hail-is/hail/pull/2153#issuecomment-325388707,4,['test'],"['test', 'tests']"
Testability,"I've moved `check_entry_indexed` outside the conditional and added a note to remove the conditional entirely once select_entries on a field is free. I think it's reasonable to keep the conditional until then, at least in the block matrix case where needlessly invoking the compiler on every double may effect performance. If you feel strongly, I'll remove it from PCA and test the performance impact on write BlockMatrix (though I'd rather just leave the latter unperturbed).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3262#issuecomment-377698921:372,test,test,372,https://hail.is,https://github.com/hail-is/hail/pull/3262#issuecomment-377698921,1,['test'],['test']
Testability,I've realised that hailtop is not the place for contributed methods that use batch if we want to restrict hail imports. Think about how strange it is to exclude our own Batch cookbook example (gwas clumping) from a viable contributed module (in that case no tests on gwas.py could be performed directly).,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9194#issuecomment-670772749:258,test,tests,258,https://hail.is,https://github.com/hail-is/hail/pull/9194#issuecomment-670772749,1,['test'],['tests']
Testability,"I've rebased `jbloom22:lmm_getthisin` onto `jbloom22:py_reg` (which should go in first) and made the parallel modifications (LinearMixedModelCommand is gone, command line relics gone, refactored using RegressionUtils, tests modified to accommodate changing interface, etc). I'll do some command line testing next to be safe.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1064#issuecomment-272765058:218,test,tests,218,https://hail.is,https://github.com/hail-is/hail/pull/1064#issuecomment-272765058,2,['test'],"['testing', 'tests']"
Testability,"I've removed the Python `tempfile` approach in favor of adding `new_local_temp_file` to utils and a corresponding function to HailContext in Scala, which currently hardcodes `file:///temp` as the local temp directory. It may be more natural to have a localTmpDir on HailContext like we have tmpDir. ; I see there is a notion of local temp files on TempDir on the Scala side, but it doesn't seem to be used on the Python side. I also don't see if/where we wipe temp files on exit. In any case, I've tested that now it all works nicely on GCP, so ready for feedback/review. I think factoring through `tofile` and `fromfile` is useful for wider interoperability for the same reason that NumPy exposes them, but it's also good if you don’t want to actually load the NumPy array into driver memory but just save it to read/copy later, or to load it multiple time without recomputing the BlockMatrix. And I've provided the simpler interface of `to_numpy` and `from_numpy` for the common case. I suspect that (de)serializing over the network and building the local matrix dominates local read/write, so that using a socket isn't going to do much better. I can profile more closely if/when we feel it's high priority to make this faster still.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3114#issuecomment-372165433:498,test,tested,498,https://hail.is,https://github.com/hail-is/hail/pull/3114#issuecomment-372165433,1,['test'],['tested']
Testability,I've removed the `make test-deploy` stuff to simplify this PR.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5844#issuecomment-481837110:23,test,test-deploy,23,https://hail.is,https://github.com/hail-is/hail/pull/5844#issuecomment-481837110,1,['test'],['test-deploy']
Testability,"I've replicated the issue. invocation:; ```bash; ./pyhail-submit cluster-2 foo.py; ```; `foo.py`:; ```python; #!/usr/bin/python. from pyhail import *. hc = HailContext(log=""/tmp/hail.log""). (hc.read(<andrea's file here>); .write('gs://hail-1kg/trash.vds')); ```; first failure:; ```; 2016-12-15 19:05:43 ERROR Utils:91 - Uncaught exception in thread task-result-getter-1; java.lang.OutOfMemoryError: Java heap space; at java.util.Arrays.copyOf(Arrays.java:3332); at java.lang.AbstractStringBuilder.ensureCapacityInternal(AbstractStringBuilder.java:124); at java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:448); at java.lang.StringBuffer.append(StringBuffer.java:270); at org.apache.log4j.helpers.PatternParser$LiteralPatternConverter.format(PatternParser.java:419); at org.apache.log4j.PatternLayout.format(PatternLayout.java:506); at org.apache.log4j.WriterAppender.subAppend(WriterAppender.java:310); at org.apache.log4j.WriterAppender.append(WriterAppender.java:162); at org.apache.log4j.AppenderSkeleton.doAppend(AppenderSkeleton.java:251); at org.apache.log4j.helpers.AppenderAttachableImpl.appendLoopOnAppenders(AppenderAttachableImpl.java:66); at org.apache.log4j.Category.callAppenders(Category.java:206); at org.apache.log4j.Category.forcedLog(Category.java:391); at org.apache.log4j.Category.log(Category.java:856); at org.slf4j.impl.Log4jLoggerAdapter.warn(Log4jLoggerAdapter.java:400); at org.apache.spark.internal.Logging$class.logWarning(Logging.scala:66); at org.apache.spark.scheduler.TaskSetManager.logWarning(TaskSetManager.scala:52); at org.apache.spark.scheduler.TaskSetManager.handleFailedTask(TaskSetManager.scala:693); at org.apache.spark.scheduler.TaskSchedulerImpl.handleFailedTask(TaskSchedulerImpl.scala:421); at org.apache.spark.scheduler.TaskResultGetter$$anon$3$$anonfun$run$2.apply$mcV$sp(TaskResultGetter.scala:139); at org.apache.spark.scheduler.TaskResultGetter$$anon$3$$anonfun$run$2.apply(TaskResultGetter.scala:124); at org.apache.spark.scheduler",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1186#issuecomment-267416027:168,log,log,168,https://hail.is,https://github.com/hail-is/hail/issues/1186#issuecomment-267416027,2,['log'],['log']
Testability,I've simplified / improved the test to show both modes of failure that indeed occur on master.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3749#issuecomment-396754583:31,test,test,31,https://hail.is,https://github.com/hail-is/hail/pull/3749#issuecomment-396754583,1,['test'],['test']
Testability,"ILURES ===================================; ____________________________ Test.test_list_batches ____________________________. self = <test.test_batch.Test testMethod=test_list_batches>. def test_list_batches(self):; tag = secrets.token_urlsafe(64); b1 = self.client.create_batch(attributes={'tag': tag, 'name': 'b1'}); b1.create_job('alpine', ['sleep', '30']); b1.close(); ; b2 = self.client.create_batch(attributes={'tag': tag, 'name': 'b2'}); b2.create_job('alpine', ['echo', 'test']); b2.close(); ; def assert_batch_ids(expected, complete=None, success=None, attributes=None):; batches = self.client.list_batches(complete=complete, success=success, attributes=attributes); # list_batches returns all batches for all prev run tests; actual = set([batch.id for batch in batches]).intersection({b1.id, b2.id}); self.assertEqual(actual, expected); ; assert_batch_ids({b1.id, b2.id}, attributes={'tag': tag}); ; b2.wait(); ; > assert_batch_ids({b1.id}, complete=False, attributes={'tag': tag}). test/test_batch.py:93: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; test/test_batch.py:87: in assert_batch_ids; self.assertEqual(actual, expected); E AssertionError: Items in the second set but not the first:; E 19; ________________________________ test_callback _________________________________. client = <batch.client.BatchClient object at 0x7f0d1363ee80>. def test_callback(client):; from flask import Flask, request; app = Flask('test-client'); output = []; ; @app.route('/test', methods=['POST']); def test():; output.append(request.get_json()); return Response(status=200); ; try:; server = ServerThread(app); server.start(); batch = client.create_batch(callback=server.url_for('/test')); head = batch.create_job('alpine:3.8', command=['echo', 'head']); left = batch.create_job('alpine:3.8', command=['echo', 'left'], parents=[head]); right = batch.create_job('alpine:3.8', command=['echo', 'right'], parents=[head]); tail = batch.create_job('alpine:3.8', comman",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6260#issuecomment-498852506:1106,test,test,1106,https://hail.is,https://github.com/hail-is/hail/pull/6260#issuecomment-498852506,1,['test'],['test']
Testability,"IMO, it's better to get this in with unsatisfying testing than to let it bit rot in a branch on my computer.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5332#issuecomment-462999269:50,test,testing,50,https://hail.is,https://github.com/hail-is/hail/pull/5332#issuecomment-462999269,1,['test'],['testing']
Testability,INFO: request GET http://batch.hail/api/v1alpha/batches/6627669 response 200\n2022-11-15 20:31:22.827 Requester: INFO: request GET http://batch.hail/api/v1alpha/batches/6627669\n2022-11-15 20:31:22.846 Requester: INFO: request GET http://batch.hail/api/v1alpha/batches/6627669 response 200\n2022-11-15 20:31:27.847 Requester: INFO: request GET http://batch.hail/api/v1alpha/batches/6627669\n2022-11-15 20:31:27.880 Requester: INFO: request GET http://batch.hail/api/v1alpha/batches/6627669 response 200\n2022-11-15 20:31:27.880 ServiceBackend$: INFO: parallelizeAndComputeWithIndex: pty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY=: reading results\n2022-11-15 20:31:27.881 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.0\n2022-11-15 20:31:28.080 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.0 response 200\n2022-11-15 20:31:28.104 ServiceBackend$: INFO: result 0 complete - 8157265 bytes\n2022-11-15 20:31:28.104 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.1\n2022-11-15 20:31:28.293 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.1 response 200\n2022-11-15 20:31:28.313 ServiceBackend$: INFO: result 1 complete - 8157265 bytes\n2022-11-15 20:31:28.313 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.2\n2022-11-15 20:31:28.522 Requester: INFO: request GET http://memory.hail/api/v1alpha/object,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:35749,test,test-,35749,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,"IRSuite passes, but all tests do not. From test_docs:. ```. Java stack trace:; is.hail.utils.HailException: not a streamable IR: (ToArray; (ArrayMap __iruid_226; (ToStream; (ToArray; (GetTupleElement 0; (Ref __iruid_225)))); (MakeTuple (0 1); (GetField key; (Ref __iruid_226)); (GetTupleElement 0; (GetField value; (Ref __iruid_226)))))); 	at is.hail.utils.ErrorHandling$class.fatal(ErrorHandling.scala:9); 	at is.hail.utils.package$.fatal(package.scala:74); 	at is.hail.expr.ir.EmitStream$.is$hail$expr$ir$EmitStream$$emitStream$1(EmitStream.scala:851); ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8063#issuecomment-584224191:24,test,tests,24,https://hail.is,https://github.com/hail-is/hail/pull/8063#issuecomment-584224191,1,['test'],['tests']
Testability,"If I change my performance test to write using fast LZ4, the time drops to 26.2s and the profile looks like:. ![Screen Shot 2020-05-26 at 1 43 34 PM](https://user-images.githubusercontent.com/106194/82932751-e5d27400-9f56-11ea-9356-086f57d58fba.png)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8864#issuecomment-634173911:27,test,test,27,https://hail.is,https://github.com/hail-is/hail/pull/8864#issuecomment-634173911,1,['test'],['test']
Testability,"If it passes the CI tests, I'm cool with it.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4262#issuecomment-419147345:20,test,tests,20,https://hail.is,https://github.com/hail-is/hail/pull/4262#issuecomment-419147345,1,['test'],['tests']
Testability,"If my hypothesis is true, then there should be evidence of API requests in the logs for different files having the same uploadId. I'll try and take a look at what the logs show for the failing file uploads.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1564748285:79,log,logs,79,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1564748285,2,['log'],['logs']
Testability,"If only we had, y'know, a benchmarking system that could, y'know, run benchmarks.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6291#issuecomment-500153683:26,benchmark,benchmarking,26,https://hail.is,https://github.com/hail-is/hail/pull/6291#issuecomment-500153683,2,['benchmark'],"['benchmarking', 'benchmarks']"
Testability,"If there is an improvement, it is very small, running more tests now, but it looks like the new code is in the noise compared to other factors.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5828#issuecomment-481320024:59,test,tests,59,https://hail.is,https://github.com/hail-is/hail/pull/5828#issuecomment-481320024,1,['test'],['tests']
Testability,If you fix that @vladsaveliev tests will pass and we'll be good to go.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10863#issuecomment-941145413:30,test,tests,30,https://hail.is,https://github.com/hail-is/hail/pull/10863#issuecomment-941145413,1,['test'],['tests']
Testability,"If you look at the driver logs, there should be a bunch of errors.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10920#issuecomment-956513975:26,log,logs,26,https://hail.is,https://github.com/hail-is/hail/pull/10920#issuecomment-956513975,1,['log'],['logs']
Testability,If you made one with `csq=True` it would be pretty easy (in your testing script) to take a line of the output and assert that it's the same length (after splitting both on `|`) as string in the header,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4150#issuecomment-413124680:65,test,testing,65,https://hail.is,https://github.com/hail-is/hail/pull/4150#issuecomment-413124680,2,"['assert', 'test']","['assert', 'testing']"
Testability,"If you want to wait for Daniel and I to test it in Azure later, that's fine in case something else shows up.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10986#issuecomment-948995865:40,test,test,40,https://hail.is,https://github.com/hail-is/hail/pull/10986#issuecomment-948995865,1,['test'],['test']
Testability,"If you're happy, I'll assign this for scala review and after it's in, the next step is figuring out how to set up the CI to test vep with both options for reproducing these files.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4150#issuecomment-415224730:124,test,test,124,https://hail.is,https://github.com/hail-is/hail/pull/4150#issuecomment-415224730,1,['test'],['test']
Testability,"If you're okay with this, I need to test backwards compatibility with the older version of resource usage files.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12542#issuecomment-1342840441:36,test,test,36,https://hail.is,https://github.com/hail-is/hail/pull/12542#issuecomment-1342840441,1,['test'],['test']
Testability,"Im also happy to let this in as mostly is (so no additional tests, api changes), and set the remainder that you find valid as issues. No need to stall something that isn't very user facing.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6892#issuecomment-528921065:60,test,tests,60,https://hail.is,https://github.com/hail-is/hail/pull/6892#issuecomment-528921065,1,['test'],['tests']
Testability,ImportError: No module named hailjwt; Makefile:22: recipe for target 'test/jwt-test-user-token' failed; make: *** [test/jwt-test-user-token] Error 1,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5844#issuecomment-483899083:70,test,test,70,https://hail.is,https://github.com/hail-is/hail/pull/5844#issuecomment-483899083,4,['test'],"['test', 'test-user-token']"
Testability,"In PR namespaces, it creates the database-server-config which is the root user which we use to set up everyone else. test_database_instance is cooked up by the createDatabase for the test database. In non-PR namespaces, it doesn't exist because that secret already exists",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11441#issuecomment-1056027209:183,test,test,183,https://hail.is,https://github.com/hail-is/hail/pull/11441#issuecomment-1056027209,1,['test'],['test']
Testability,"In `httpx` the 5s is a ""total timeout"" which is applied to read and connect. I don't know what connection idle and write exactly refer to but setting to 5s and seeing how the tests react seems like a good start. In general, in a datacenter, I'd expect any ordinary network operation to be faster than 5s regardless of write vs read.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13344#issuecomment-1659278243:175,test,tests,175,https://hail.is,https://github.com/hail-is/hail/pull/13344#issuecomment-1659278243,1,['test'],['tests']
Testability,"In `relativeUpperIndexBounds`, the positions won't be sorted unless we sort them, so that cannot be an assertion. Yes, re-keying by contig means we don't have a guarantee that the positions aren't re-ordered within their groups, but since we sort inside `relativeUpperIndexBounds`, this ensures that they are sorted and that they therefore match the ordering in the block matrix. The sorting doesn't screw up the alignment with the block matrix, because the sorting is what guarantees the alignment with the block matrix.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3697#issuecomment-393929082:103,assert,assertion,103,https://hail.is,https://github.com/hail-is/hail/pull/3697#issuecomment-393929082,1,['assert'],['assertion']
Testability,"In fact I had Firth mixed into this branch but ripped it out when it was making the update too complicated. Whereas Wald, LRT, and score only require fitting the null model once, the Firth LRT requires fitting the null and full models per variant. So plan is to add Firth, support for subsetting samples per variant (rather than imputing missing genotypes), and better tests by comparing Hail and R results for randomly generated datasets. I'd also like to add more [optional] user control on convergence criteria and on what's returned in annotations (for example, statistics for the other covariates...these are computed anyway...also on the null fit in globals). And there are ways to speed up the numerical linear algebra, this is a first pass. Do you have thoughts on Firth LRT versus Wald? My understanding is that LRT is better calibrated for p-value, but would the Wald standard error for Firth be a useful annotation as well? Also, check out v1 of doc: ; https://github.com/jbloom22/hail/blob/jb_logreg3/docs/LogisticRegression.md",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/585#issuecomment-239686959:369,test,tests,369,https://hail.is,https://github.com/hail-is/hail/pull/585#issuecomment-239686959,2,"['Log', 'test']","['LogisticRegression', 'tests']"
Testability,"In many cases, we ignore? the dropRows parameter on TableRead. I have no idea how this test is passing on main, but I think I have a fix.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/11562#issuecomment-1065493842:87,test,test,87,https://hail.is,https://github.com/hail-is/hail/issues/11562#issuecomment-1065493842,1,['test'],['test']
Testability,"In particular, it appears that your Make might be invoking bash with the sixth argument starting with the three characters `'[\`. My Make sends a string whose first three characters are `'[ ` because it sees the `\` as a *make* line-continuation character. In particular, the full bash command that my Make invokes is:. ```; python3 -m hailtop.aiotools.copy -vvv 'null' '[ {""from"":""src/test/resources"",""to"":""gs://hail-test-ezlis/dking/hail-test-resources/test/resources/""}, {""from"":""python/hail/docs/data"",""to"":""gs://hail-test-ezlis/dking/hail-test-resources/doctest/data/""} ]'; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14138#issuecomment-1889779728:386,test,test,386,https://hail.is,https://github.com/hail-is/hail/pull/14138#issuecomment-1889779728,6,['test'],"['test', 'test-ezlis', 'test-resources']"
Testability,"In testing batch, it looks like:. ```; ModuleNotFoundError: No module named 'hailjwt'; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5844#issuecomment-484972045:3,test,testing,3,https://hail.is,https://github.com/hail-is/hail/pull/5844#issuecomment-484972045,1,['test'],['testing']
Testability,"In the short term, a fix which makes the UI usable again for these kinds of jobs is to check blob size, if it's over some threshold, show no log and instruct the user to download it. Then fix the download to use aiohttp's StreamResponse. We should maybe split this issue into a frontend-side and worker-side.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12852#issuecomment-1653991936:141,log,log,141,https://hail.is,https://github.com/hail-is/hail/issues/12852#issuecomment-1653991936,1,['log'],['log']
Testability,"In the worst case of a fully connected graph it's O(n) insertions, at an average cost of O(1), followed by O(n) `extractMax` which are O(log n) each. For each `extractMax` we have to decrease priority on every other node, so thats O(n^2) decreasePriority which is O(log n) each. So the dominating factor is O(n^2 log(n)). We should almost never see fully connected graphs. I suspect we'll usually have disconnected graphs of fully connected subgraphs. Then the runtime is O(m * n^2 log(n)) where `m` is the number of families and `n` is the average family size. `n` should be rather small, probably not higher than 20? probably smaller. `m` could be quite large, but we're linear in `m`. Some timings for fully connected graphs of size `n`:. | `n` | time (minutes) |; |-|-|; | 1024 | 0.0051 |; | 8192 | 0.13 |; | 32767 | 3.0 |; | 65535 | 12.5 |. According to the profiler, the vast majority of the time is spent interacting with the hash table. We could probably get the constants a lot lower by using an array instead of a hash table (since we have a perfect hash function: sample index). ---. ```; def fullyConnected(n: Int) {; val biggestFirst = new BinaryHeap[Int](). var i = 0; while (i <= n) {; biggestFirst.insert(i, n); i += 1; }. val g = (i: Int) => 0 to n. while (biggestFirst.maxPriority() > 0) {; val current = biggestFirst.extractMax(); val neighbors = g(current); neighbors.foreach { x =>; if (biggestFirst.contains(x)); biggestFirst.decreasePriority(x, _ - 1); }; }. val actual = biggestFirst.toArray; assert(actual.length === 1); }; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2148#issuecomment-326072568:137,log,log,137,https://hail.is,https://github.com/hail-is/hail/pull/2148#issuecomment-326072568,5,"['assert', 'log']","['assert', 'log']"
Testability,"In this particular case, it comes from `repartition` in RVD, the assertion that is failing is this one. ```scala; require(newPartitioner.satisfiesAllowedOverlap(newPartitioner.kType.size - 1)); ```; In this case `kType` is empty, so `kType.size` is 0.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/8138#issuecomment-595460712:65,assert,assertion,65,https://hail.is,https://github.com/hail-is/hail/issues/8138#issuecomment-595460712,1,['assert'],['assertion']
Testability,"In trying to test this (from your branch, ran pip install on /hail/python just in case). ```sh; (hail) alex:~/projects/hail/hail/python:$ hailctl dev deploy -b cseed:batch-web -s deploy_auth,deploy_router,deploy_notebook2; Traceback (most recent call last):; File ""/miniconda3/envs/hail/bin/hailctl"", line 11, in <module>; sys.exit(main()); File ""/Users/alex/projects/hail/hail/python/hailtop/hailctl/__main__.py"", line 100, in main; cli.main(args); File ""/Users/alex/projects/hail/hail/python/hailtop/hailctl/dev/cli.py"", line 52, in main; cli.main(args); File ""/Users/alex/projects/hail/hail/python/hailtop/hailctl/dev/deploy/cli.py"", line 66, in main; loop.run_until_complete(submit(args)); File ""/miniconda3/envs/hail/lib/python3.6/asyncio/base_events.py"", line 484, in run_until_complete; return future.result(); File ""/Users/alex/projects/hail/hail/python/hailtop/hailctl/dev/deploy/cli.py"", line 57, in submit; batch_id = await ci_client.dev_deploy_branch(args.branch, steps); File ""/Users/alex/projects/hail/hail/python/hailtop/hailctl/dev/deploy/cli.py"", line 46, in dev_deploy_branch; self._deploy_config.url('ci', '/api/v1alpha/dev_deploy_branch'), json=data) as resp:; File ""/miniconda3/envs/hail/lib/python3.6/site-packages/aiohttp/client.py"", line 1005, in __aenter__; self._resp = await self._coro; File ""/miniconda3/envs/hail/lib/python3.6/site-packages/aiohttp/client.py"", line 581, in _request; resp.raise_for_status(); File ""/miniconda3/envs/hail/lib/python3.6/site-packages/aiohttp/client_reqrep.py"", line 942, in raise_for_status; headers=self.headers); aiohttp.client_exceptions.ClientResponseError: 500, message='Internal Server Error'; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7064#issuecomment-532037733:13,test,test,13,https://hail.is,https://github.com/hail-is/hail/pull/7064#issuecomment-532037733,1,['test'],['test']
Testability,"In(0,int32)),MakeStruct(WrappedArray((a,I32(1)), (b,ApplyBinaryPrimOp(Add(),Ref(x,int32),I32(2)))))))(is.hail.expr.ir.ForwardLetsSuite). Gradle suite > Gradle test > is.hail.expr.ir.ForwardLetsSuite.testForwardingOps[0](Let(x,ApplyBinaryPrimOp(Add(),In(0,int32),In(0,int32)),MakeStruct(WrappedArray((a,I32(1)), (b,ApplyBinaryPrimOp(Add(),Ref(x,int32),I32(2))))))) PASSED; Running test: Test method testForwardingOps[1](Let(x,ApplyBinaryPrimOp(Add(),In(0,int32),In(0,int32)),MakeTuple(WrappedArray(I32(1), ApplyBinaryPrimOp(Add(),Ref(x,int32),I32(2))))))(is.hail.expr.ir.ForwardLetsSuite). Gradle suite > Gradle test > is.hail.expr.ir.ForwardLetsSuite.testForwardingOps[1](Let(x,ApplyBinaryPrimOp(Add(),In(0,int32),In(0,int32)),MakeTuple(WrappedArray(I32(1), ApplyBinaryPrimOp(Add(),Ref(x,int32),I32(2)))))) PASSED; Running test: Test method testForwardingOps[2](Let(x,ApplyBinaryPrimOp(Add(),In(0,int32),In(0,int32)),If(True(),Ref(x,int32),I32(0))))(is.hail.expr.ir.ForwardLetsSuite). Gradle suite > Gradle test > is.hail.expr.ir.ForwardLetsSuite.testForwardingOps[2](Let(x,ApplyBinaryPrimOp(Add(),In(0,int32),In(0,int32)),If(True(),Ref(x,int32),I32(0)))) PASSED; Running test: Test method testForwardingOps[3](Let(x,ApplyBinaryPrimOp(Add(),In(0,int32),In(0,int32)),ApplyBinaryPrimOp(Add(),ApplyBinaryPrimOp(Add(),I32(2),Ref(x,int32)),I32(1))))(is.hail.expr.ir.ForwardLetsSuite). Gradle suite > Gradle test > is.hail.expr.ir.ForwardLetsSuite.testForwardingOps[3](Let(x,ApplyBinaryPrimOp(Add(),In(0,int32),In(0,int32)),ApplyBinaryPrimOp(Add(),ApplyBinaryPrimOp(Add(),I32(2),Ref(x,int32)),I32(1)))) PASSED; Running test: Test method testForwardingOps[4](Let(x,ApplyBinaryPrimOp(Add(),In(0,int32),In(0,int32)),ApplyUnaryPrimOp(Negate(),Ref(x,int32))))(is.hail.expr.ir.ForwardLetsSuite). Gradle suite > Gradle test > is.hail.expr.ir.ForwardLetsSuite.testForwardingOps[4](Let(x,ApplyBinaryPrimOp(Add(),In(0,int32),In(0,int32)),ApplyUnaryPrimOp(Negate(),Ref(x,int32)))) PASSED. BUILD SUCCESSFUL. Total time:",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6083#issuecomment-492893925:3596,test,test,3596,https://hail.is,https://github.com/hail-is/hail/pull/6083#issuecomment-492893925,1,['test'],['test']
Testability,"Indeed in my streamify, forcing MakeArray to remain a MakeArray fixes the problem. Now to investigate why MakeStream is the wrong solution, and why the new streamify isn't handling this correctly. to be clear, this branch finds the MakeArray inside of the MakeTuple and generates a ToArray(MakeStream), which both seems not super wrong and redundant. But the fact that's it's a value issue, with an array reading garbage, also make it look like a requiredeness/ copy function issue (though this was previously tested)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8063#issuecomment-583813511:510,test,tested,510,https://hail.is,https://github.com/hail-is/hail/pull/8063#issuecomment-583813511,1,['test'],['tested']
Testability,"Indeed, the Grammian still fails on the Kyle's 20k genomes after filtering to Purcell 5k, whereas BlockMatrix succeeds in 8 minutes on 385 cores. Using 1.6K genomes with 100k variants, timing is 2min with Grammian and 4 minutes with BlockMatrix. I'm going to close this PR until I've done more testing on the tradeoff. We should keep BlockMatrix as master, but there should be an N under which we use Grammian. These experiments are relevant to LMM too.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/801#issuecomment-249927850:294,test,testing,294,https://hail.is,https://github.com/hail-is/hail/pull/801#issuecomment-249927850,1,['test'],['testing']
Testability,Indeed:. > 17 | build_hail | Complete | Success 🎉 (0) | 4 minutes | log. Nice work! I'll read over in more detail soon.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6248#issuecomment-498797460:68,log,log,68,https://hail.is,https://github.com/hail-is/hail/pull/6248#issuecomment-498797460,1,['log'],['log']
Testability,"Interesting to see the benchmarks, thanks. I didn't realize there were any per-variant usages, I figured these were per-RDD. That makes me more okay with the original, but it's completely up to you. On a side note, I can't wait until we can work in C++, where using library facilities to simplify code isn't such a performance hit!",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3094#issuecomment-372723395:23,benchmark,benchmarks,23,https://hail.is,https://github.com/hail-is/hail/pull/3094#issuecomment-372723395,1,['benchmark'],['benchmarks']
Testability,"Interesting, looks like I broke the same two tests on GCP and Azure. I'll dig into that tomorrow.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11638#issuecomment-1074467906:45,test,tests,45,https://hail.is,https://github.com/hail-is/hail/pull/11638#issuecomment-1074467906,1,['test'],['tests']
Testability,"Interesting. When I was helping Sophie earlier, I was able to see them for workers in her namespace???; https://console.cloud.google.com/logs/query;query=resource.type%3D%22gce_instance%22%0AlogName:%22syslog%22%0Alabels.%22compute.googleapis.com%2Fresource_name%22:%22batch-worker-parsa-job-private-39d9d%22;summaryFields=:false:32:beginning;cursorTimestamp=2023-08-27T13:45:49Z;duration=P2D?project=hail-vdc",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13509#issuecomment-1696119375:137,log,logs,137,https://hail.is,https://github.com/hail-is/hail/pull/13509#issuecomment-1696119375,1,['log'],['logs']
Testability,Interestingly I was have a consistent test failure here but never got the chance to diagnose it. Would like to come back to it once the glut of PRs is through. Would you rather keep it open or closed?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11931#issuecomment-1266120559:38,test,test,38,https://hail.is,https://github.com/hail-is/hail/pull/11931#issuecomment-1266120559,1,['test'],['test']
Testability,Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); 	Suppressed: is.hail.relocated.com.google.cloud.storage.StorageException: Unable to recover in upload.; This may be a symptom of multiple clients uploading to the same upload session. For debugging purposes:; uploadId: https://storage.googleapis.com/upload/storage/v1/b/hail-test-ezlis/o?name=fs-suite-tmp-2LzGioRNy6RqIS2pfXIoSO&uploadType=resumable&upload_id=ADPycdvZ5HhnGfOKt5TE1qXWiHpqIpZnXVTYWuWUCXNPRF9HqyCB-4LvRsxNX6SUWRgk13pYrzYaa9-wXlvNZt1oct0ptaEz0bS3; chunkOffset: 16777216; chunkLength: 16777216; localOffset: 268435456; remoteOffset: 285212672; lastChunk: false. 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.unrecoverableState(BlobWriteChannel.java:131); 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.unrecoverableState(BlobWriteChannel.java:87); 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.access$1000(BlobWriteChannel.java:35); 		at is.hai,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911:4919,test,testng,4919,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911,1,['test'],['testng']
Testability,Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); 	Suppressed: is.hail.relocated.com.google.cloud.storage.StorageException: Unable to recover in upload.; This may be a symptom of multiple clients uploading to the same upload session. For debugging purposes:; uploadId: https://storage.googleapis.com/upload/storage/v1/b/hail-test-ezlis/o?name=fs-suite-tmp-6BO4gZ18Lheigp3ir9RSOh&uploadType=resumable&upload_id=ADPycduiXx2Jtiy_0Ll131_pPeEYKnnA23Hlk28_9TFESUMaubA9OqLK_n8Td5rPhTXnlpssGo796Q4bJxUeblhmSaYcCSWAMg2k; chunkOffset: 16777216; chunkLength: 16777216; localOffset: 1325400064; remoteOffset: 1342177280; lastChunk: false. 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.unrecoverableState(BlobWriteChannel.java:131); 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.unrecoverableState(BlobWriteChannel.java:87); 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.access$1000(BlobWriteChannel.java:35); 		at is.h,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756:4726,test,testng,4726,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756,1,['test'],['testng']
Testability,Is the attached log file correct? It is for a job that never got assigned cores on the cluster. I don't see anything about NoClassDefFoundError in it.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/303#issuecomment-211167105:16,log,log,16,https://hail.is,https://github.com/hail-is/hail/issues/303#issuecomment-211167105,1,['log'],['log']
Testability,Is there a benchmark test for this?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4516#issuecomment-613456757:11,benchmark,benchmark,11,https://hail.is,https://github.com/hail-is/hail/issues/4516#issuecomment-613456757,2,"['benchmark', 'test']","['benchmark', 'test']"
Testability,Is there a test for this?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7342#issuecomment-547016313:11,test,test,11,https://hail.is,https://github.com/hail-is/hail/pull/7342#issuecomment-547016313,1,['test'],['test']
Testability,"Is there a test of VariantQC on multi-allelics? You say it's an out-of-date requirement but I'm confused how this works. We match gt to 0, 1, 2 in the VariantQCCombiner.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2422#issuecomment-343950744:11,test,test,11,https://hail.is,https://github.com/hail-is/hail/pull/2422#issuecomment-343950744,1,['test'],['test']
Testability,Is there a test that catches this?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10111#issuecomment-786693540:11,test,test,11,https://hail.is,https://github.com/hail-is/hail/pull/10111#issuecomment-786693540,1,['test'],['test']
Testability,"Is there an easy way for me to write a test that's just ""Run some `Code[_] block and check what it returns""?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7587#issuecomment-560221403:39,test,test,39,https://hail.is,https://github.com/hail-is/hail/pull/7587#issuecomment-560221403,1,['test'],['test']
Testability,Is there an option to build an test assembly jar? I want to be able to run the Scala tests with just a assembly test jar.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5906#issuecomment-484622404:31,test,test,31,https://hail.is,https://github.com/hail-is/hail/pull/5906#issuecomment-484622404,3,['test'],"['test', 'tests']"
Testability,Is this working and ready for review? This would unlock quite a few more failing tests.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11450#issuecomment-1072685898:81,test,tests,81,https://hail.is,https://github.com/hail-is/hail/pull/11450#issuecomment-1072685898,1,['test'],['tests']
Testability,"It also fails on this simpler example:; ```; In [1]: import hail as hl ; ...: ; ...: temp = hl.utils.range_table(100) ; ...: temp.write('gs://danking/workshop-test/1kg.mt', overwrite=True) ; Initializing Hail with default parameters...; Welcome to; __ __ <>__; / /_/ /__ __/ /; / __ / _ `/ / /; /_/ /_/\_,_/_/_/ version 0.2.61-c548354b6e81; LOGGING: writing to /Users/dking/projects/hail/hail-20210107-1038-0.2.61-c548354b6e81.log; Traceback (most recent call last):; File ""<ipython-input-1-a2e56feaf799>"", line 4, in <module>; temp.write('gs://danking/workshop-test/1kg.mt', overwrite=True); File ""</Users/dking/miniconda3/lib/python3.7/site-packages/decorator.py:decorator-gen-1092>"", line 2, in write; File ""/Users/dking/projects/hail/hail/python/hail/typecheck/check.py"", line 577, in wrapper; return __original_func(*args_, **kwargs_); File ""/Users/dking/projects/hail/hail/python/hail/table.py"", line 1271, in write; Env.backend().execute(ir.TableWrite(self._tir, ir.TableNativeWriter(output, overwrite, stage_locally, _codec_spec))); File ""/Users/dking/projects/hail/hail/python/hail/backend/service_backend.py"", line 103, in execute; bucket=self._bucket); File ""/Users/dking/projects/hail/hail/python/hail/backend/service_backend.py"", line 48, in request; return async_to_blocking(retry_transient_errors(self.async_request, endpoint, **data)); File ""/Users/dking/projects/hail/hail/python/hailtop/utils/utils.py"", line 114, in async_to_blocking; return asyncio.get_event_loop().run_until_complete(coro); File ""/Users/dking/miniconda3/lib/python3.7/asyncio/base_events.py"", line 587, in run_until_complete; return future.result(); File ""/Users/dking/projects/hail/hail/python/hailtop/utils/utils.py"", line 379, in retry_transient_errors; return await f(*args, **kwargs); File ""/Users/dking/projects/hail/hail/python/hail/backend/service_backend.py"", line 44, in async_request; raise FatalError(f'Error from server: {result[""value""]}'); FatalError: Error from server: java.util.NoSuchElementExce",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/9856#issuecomment-756194693:159,test,test,159,https://hail.is,https://github.com/hail-is/hail/issues/9856#issuecomment-756194693,4,"['LOG', 'log', 'test']","['LOGGING', 'log', 'test']"
Testability,"It appears that the repository creation succeeded, the response to that REST call was a successful looking JSON object (which indicates a create repository with the expected name, `REPO_NAME=ci-test-p4a9fxo7`) [1]. It is unclear if repository deletion succeeded [2], I should find a way to make curl print the HTTP status code returned by cluster deletion. FWIW, the repository appears to be deleted now (https://github.com/hail-ci-test/ci-test-p4a9fxo7), and, AFAIK, no other part of our system deletes these repositories. [1]:; ```; {; ""id"": 152339517,; ""node_id"": ""MDEwOlJlcG9zaXRvcnkxNTIzMzk1MTc="",; ""name"": ""ci-test-p4a9fxo7"",; ""full_name"": ""hail-ci-test/ci-test-p4a9fxo7"",; ""private"": false,; ""owner"": {; ""login"": ""hail-ci-test"",; ""id"": 43152710,; ""node_id"": ""MDEyOk9yZ2FuaXphdGlvbjQzMTUyNzEw"",; ""avatar_url"": ""https://avatars1.githubusercontent.com/u/43152710?v=4"",; ""gravatar_id"": """",; ""url"": ""https://api.github.com/users/hail-ci-test"",; ""html_url"": ""https://github.com/hail-ci-test"",; ""followers_url"": ""https://api.github.com/users/hail-ci-test/followers"",; ""following_url"": ""https://api.github.com/users/hail-ci-test/following{/other_user}"",; ""gists_url"": ""https://api.github.com/users/hail-ci-test/gists{/gist_id}"",; ""starred_url"": ""https://api.github.com/users/hail-ci-test/starred{/owner}{/repo}"",; ""subscriptions_url"": ""https://api.github.com/users/hail-ci-test/subscriptions"",; ""organizations_url"": ""https://api.github.com/users/hail-ci-test/orgs"",; ""repos_url"": ""https://api.github.com/users/hail-ci-test/repos"",; ""events_url"": ""https://api.github.com/users/hail-ci-test/events{/privacy}"",; ""received_events_url"": ""https://api.github.com/users/hail-ci-test/received_events"",; ""type"": ""Organization"",; ""site_admin"": false; },; ""html_url"": ""https://github.com/hail-ci-test/ci-test-p4a9fxo7"",; ""description"": null,; ""fork"": false,; ""url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7"",; ""forks_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/forks"",; ""k",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858:1342,test,test,1342,https://hail.is,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858,1,['test'],['test']
Testability,"It didn't fail, it failed IR conversion. I don't have an automated strategy to test if something is going through the IR or not. In this case, I verified it works by checking the log for the Fraction IR.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3610#issuecomment-389733708:79,test,test,79,https://hail.is,https://github.com/hail-is/hail/pull/3610#issuecomment-389733708,2,"['log', 'test']","['log', 'test']"
Testability,It does though. That assertion returns true.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5435#issuecomment-467649154:21,assert,assertion,21,https://hail.is,https://github.com/hail-is/hail/pull/5435#issuecomment-467649154,1,['assert'],['assertion']
Testability,"It doesn't seem like headless mode is in effect, at least in the most recent published image. Will grab this and play around with it. Tested Dan's image in app.hail.is, seems to work, except for all of the .js/.css resources; first guess is SSL, but it's clearly a diff issue. I can't connect to your workers, can to his. Will update in a bit. Yours:; (notebook) alexkotlar:~/projects/hail-clone/notebook-api:$ k logs notebook-worker-5xq2w -f; [I 21:29:01.483 NotebookApp] Writing notebook server cookie secret to /home/jovian/.local/share/jupyter/runtime/notebook_cookie_secret; [I 21:29:03.742 NotebookApp] Serving notebooks from local directory: /home/jovian; [I 21:29:03.743 NotebookApp] The Jupyter Notebook is running at:; [I 21:29:03.743 NotebookApp] http://localhost:8888/instance/notebook-worker-service-qzppk/?token=...; [I 21:29:03.743 NotebookApp] Use Control-C to stop this server and shut down all kernels (twice to skip confirmation).; [W 21:29:03.750 NotebookApp] No web browser found: could not locate runnable browser. Dan’s; [I 21:44:38.439 NotebookApp] Writing notebook server cookie secret to /home/jovyan/.local/share/jupyter/runtime/notebook_cookie_secret; [I 21:44:38.808 NotebookApp] [jupyter_nbextensions_configurator] enabled 0.4.1; [I 21:44:38.898 NotebookApp] Jupyter-Spark enabled!; [I 21:44:38.942 NotebookApp] JupyterLab extension loaded from /opt/conda/lib/python3.6/site-packages/jupyterlab; [I 21:44:38.942 NotebookApp] JupyterLab application directory is /opt/conda/share/jupyter/lab; [I 21:44:38.945 NotebookApp] Serving notebooks from local directory: /home/jovyan; [I 21:44:38.945 NotebookApp] The Jupyter Notebook is running at:; [I 21:44:38.946 NotebookApp] http://(notebook-worker-v7fr4 or 127.0.0.1):8888/instance/notebook-worker-service-sv5jl/?token=...; [I 21:44:38.946 NotebookApp] Use Control-C to stop this server and shut down all kernels (twice to skip confirmation).; [I 21:44:55.324 NotebookApp] 302 GET /instance/notebook-worker-service-sv5jl/?acce",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5243#issuecomment-460092942:134,Test,Tested,134,https://hail.is,https://github.com/hail-is/hail/pull/5243#issuecomment-460092942,2,"['Test', 'log']","['Tested', 'logs']"
Testability,It is also just supremely annoying when one of these tests gets preempted 40 minutes in.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13004#issuecomment-1539017933:53,test,tests,53,https://hail.is,https://github.com/hail-is/hail/pull/13004#issuecomment-1539017933,1,['test'],['tests']
Testability,"It is mighty fishy that both azure and google failed the callback test. What are we missing? If MJC returns, then the database was clearly updated. Subsequent DB queries should see those changes. total_jobs_in_batch won't change during the lifetime of the batch, so that should be correct (though we should probably LOCK IN SHARE MODE anyway). Assuming I'm reading the [reference manual](https://dev.mysql.com/doc/refman/5.7/en/innodb-consistent-read.html) correctly, that select should see the result of the UPDATE *or a later state*. The updates to a single row are serial. So there must exist a transaction that takes it from n_jobs-1 to n_jobs. That transaction thus must see n_jobs for new_n_completed. That transaction thus ought to update batches. Once that transaction is committed the subsequent query for notification should see the changes...",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11352#issuecomment-1040809121:66,test,test,66,https://hail.is,https://github.com/hail-is/hail/pull/11352#issuecomment-1040809121,1,['test'],['test']
Testability,It looks like it's passing all the tests except the new test @chrisvittal added yesterday for testing skat on the cluster.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5512#issuecomment-472909343:35,test,tests,35,https://hail.is,https://github.com/hail-is/hail/pull/5512#issuecomment-472909343,3,['test'],"['test', 'testing', 'tests']"
Testability,It looks like my cache change is passing tests now. I'd like for you to take a look before I confirm one last time that the cache is actually working by submitting jobs downloading a 512 MB file and making sure the timings of the non-first job is a couple of seconds. It looks like the tests got a bit slower. I'm not sure if that's because of the docker image having gsutil in it. I don't see how the extra copying infrastructure would make a huge difference.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9095#issuecomment-660178082:41,test,tests,41,https://hail.is,https://github.com/hail-is/hail/pull/9095#issuecomment-660178082,2,['test'],['tests']
Testability,It looks like the batch tests failed unrelated to this. You'll need to bump it.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6925#issuecomment-524130051:24,test,tests,24,https://hail.is,https://github.com/hail-is/hail/pull/6925#issuecomment-524130051,1,['test'],['tests']
Testability,It looks like the tests are close to passing!,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11055#issuecomment-965091556:18,test,tests,18,https://hail.is,https://github.com/hail-is/hail/pull/11055#issuecomment-965091556,1,['test'],['tests']
Testability,It looks like there's a few tests whose expected values are using the old dtypes.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12218#issuecomment-1258155599:28,test,tests,28,https://hail.is,https://github.com/hail-is/hail/pull/12218#issuecomment-1258155599,1,['test'],['tests']
Testability,"It looks like this test just needed to be modified:. ```; def test_reference_genome_sequence(self):; gr3 = ReferenceGenome.read(resource(""fake_ref_genome.json"")); self.assertEqual(gr3.name, ""my_reference_genome""); self.assertFalse(gr3.has_sequence()). gr4 = ReferenceGenome.from_fasta_file(""test_rg"", resource(""fake_reference.fasta""),; resource(""fake_reference.fasta.fai""),; mt_contigs=[""b"", ""c""], x_contigs=[""a""]); self.assertTrue(gr4.has_sequence()); self.assertTrue(gr4.x_contigs == [""a""]). t = hl.import_table(resource(""fake_reference.tsv""), impute=True); self.assertTrue(hl.eval(t.all(hl.get_sequence(t.contig, t.pos, reference_genome=gr4) == t.base))). l = hl.locus(""a"", 7, gr4); self.assertTrue(hl.eval(l.sequence_context(before=3, after=3) == ""TTTCGAA"")); ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5308#issuecomment-462500751:19,test,test,19,https://hail.is,https://github.com/hail-is/hail/pull/5308#issuecomment-462500751,7,"['assert', 'test']","['assertEqual', 'assertFalse', 'assertTrue', 'test']"
Testability,It looks like we need more client tests to verify that things like duration and exit codes continue to work. I'll close and add an issue to fix this more thoroughly.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6721#issuecomment-514360904:34,test,tests,34,https://hail.is,https://github.com/hail-is/hail/pull/6721#issuecomment-514360904,1,['test'],['tests']
Testability,"It looks like you have two options:; 1. Install the Gradle ppa: https://launchpad.net/~cwchien/+archive/ubuntu/gradle; ; In a nutshell, uninstall the previous version of Gradle and then run:; ; ```; sudo add-apt-repository ppa:cwchien/gradle; sudo apt-get update; sudo apt-get install gradle-2.14.1; ```; 2. Download the the latest complete distribution of Gradle 2:; ; https://gradle.org/gradle-download/; ; Go to Previous Release and select 2.14.1 and download the complete distribution. Gradle is written in Java and it is pre-compiled. No need to build it. Run `gradle-2.14.1/bin/gradle` and you should be good to go.; ; Gradle 3 was just released a few days ago. We haven't tested against it, so I would recommend Gradle 2 for now.; ; I'll update the documentation to warn about Gradle 2.10. Let me know if either of these work for you.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/594#issuecomment-240306249:679,test,tested,679,https://hail.is,https://github.com/hail-is/hail/issues/594#issuecomment-240306249,1,['test'],['tested']
Testability,It looks likely to pass the service backend tests too!,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11450#issuecomment-1076821361:44,test,tests,44,https://hail.is,https://github.com/hail-is/hail/pull/11450#issuecomment-1076821361,1,['test'],['tests']
Testability,It passed the dataproc tests.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8576#issuecomment-615468636:23,test,tests,23,https://hail.is,https://github.com/hail-is/hail/pull/8576#issuecomment-615468636,1,['test'],['tests']
Testability,It seems odd that all the tests passed? And the logs look right? What else was that pod doing?. https://storage.googleapis.com/hail-ci-0-1/ci/ee92f64477f68737987fd8f21411b0348a3d3420/e4ae86ea520fbc5d98b84811b2cdb83640163910/artifacts/index.html,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4541#issuecomment-429915630:26,test,tests,26,https://hail.is,https://github.com/hail-is/hail/issues/4541#issuecomment-429915630,2,"['log', 'test']","['logs', 'tests']"
Testability,"It seems the biggest remaining issue is that CI doesn't have access to hail imports when testing hailtop. Could we address this? Do you want a PR?. edit: nvm, patched here.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9194#issuecomment-670044799:89,test,testing,89,https://hail.is,https://github.com/hail-is/hail/pull/9194#issuecomment-670044799,1,['test'],['testing']
Testability,"It seems the test failures are due to:; 1. TemporaryDirectory (and TemporaryFilename); 2. `hailtop.batch.backend.ServiceBackend` absolutely should not use sync `BatchClient`, the async one is right there!; 3. `hailctl batch submit` is broken because of (2); 4. `test_callback` should use async `BatchClient` b/c it is async. TemporaryDirectory & TemporaryFilename use `hailtop.fs`, which is sync. This is nearly the async FS API except:; 1. `isfile` vs `is_file`; 2. `isdir` vs `is_dir`; 3. `stat` returns a `FileListEntry` instead of a `FileStatus`.; 4. `listfiles` vs `ls`. `hailtop.fs.router_fs.RouterFS` is a sync shim between these APIs. So there's basically sync-vs-async and Python-vs-Hail FS APIs. We have:; 1. sync, Python: `hailtop.fs.FS`.; 2. async, Python: does not exist.; 3. async, Hail: `hailtop.aiotools.fs.FS`.; 4. sync, Hail: `hailtop.fs.router_fs.RouterFS`. If we had (2), we could write an async version of TemporaryDirectory and TemporaryFilename and use those in async methods (in particular, in `hail.backend.ServiceBackend`). The high-level need is that we gotta be careful about not interleaving async-sync-async. Your PR reveals that we were inadvertently violating that rule. It seems best to follow the rule and only use `nest_asyncio` when we're in a Jupyter Notebook.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13677#issuecomment-1743171933:13,test,test,13,https://hail.is,https://github.com/hail-is/hail/pull/13677#issuecomment-1743171933,1,['test'],['test']
Testability,"It should never not be in the database. That's why it should be an error if we get an event for an instance we've never created before. The reason we keep getting these events is because when we run this query:. ```; filter = f'''; logName=""projects/{PROJECT}/logs/cloudaudit.googleapis.com%2Factivity"" AND; resource.type=gce_instance AND; protoPayload.resourceName:""{self.machine_name_prefix}"" AND; timestamp >= ""{mark}""; '''; ```. We have `timestamp >= {mark}`. This means if `mark` doesn't change each time the event polling loop reruns, then we'll always keep getting the same event as the last one processed. We need that `>=` though because different events can have the same timestamp. So the driver could have been shut down in the middle of processing multiple events with the same timestamp. So we do the conservative thing and try to reprocess the event again until the mark changes to a different timestamp. Does that make sense?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10325#issuecomment-819729595:232,log,logName,232,https://hail.is,https://github.com/hail-is/hail/pull/10325#issuecomment-819729595,2,['log'],"['logName', 'logs']"
Testability,"It uses `hasMissingValues` now, which already has a test. I'm beefing up that test now to be safe. `test_linreg` fails if you swap the intercept with the other covariate, I can add that too.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8575#issuecomment-615433780:52,test,test,52,https://hail.is,https://github.com/hail-is/hail/pull/8575#issuecomment-615433780,2,['test'],['test']
Testability,"It's a bit confusing, but on the CI page you can navigate to the Artifacts tab from which you can open the [build report's index.html](https://ci.hail.is/repository/download/HailSourceCode_HailCi/33165:id/build/reports/tests/index.html). The error looks to me like a Hail problem, not a you problem. I'll investigate further.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2049#issuecomment-320333635:219,test,tests,219,https://hail.is,https://github.com/hail-is/hail/pull/2049#issuecomment-320333635,1,['test'],['tests']
Testability,It's a little concerning that this is necessary. Are there typecheck cases that don't make assertions about some of their children?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9974#issuecomment-772052307:91,assert,assertions,91,https://hail.is,https://github.com/hail-is/hail/pull/9974#issuecomment-772052307,1,['assert'],['assertions']
Testability,"It's already deployed, so, I guess that's how I tested it.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9391#issuecomment-685116503:48,test,tested,48,https://hail.is,https://github.com/hail-is/hail/pull/9391#issuecomment-685116503,1,['test'],['tested']
Testability,It's already there: src/test/resources/fake_reference.fasta,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5308#issuecomment-462494294:24,test,test,24,https://hail.is,https://github.com/hail-is/hail/pull/5308#issuecomment-462494294,1,['test'],['test']
Testability,"It's an edge case, largely in the case of a network partition where a worker node becomes unreachable. I believe that the batch driver will at some point declare the node dead and reschedule its jobs even if the machine is still running. This might not be hard to change given that the batch driver subscribes to the audit log and can use the vm api to verify a worker's state. I also think this barely ever happens except in the case of actual bugs on the worker",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/14460#issuecomment-2427210749:323,log,log,323,https://hail.is,https://github.com/hail-is/hail/issues/14460#issuecomment-2427210749,1,['log'],['log']
Testability,It's as if it was just spinning on `exit $BUILD_EXIT`. It had to have finished the last for loop because all the logs open in my browser instead of downloading.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4541#issuecomment-429915864:113,log,logs,113,https://hail.is,https://github.com/hail-is/hail/issues/4541#issuecomment-429915864,1,['log'],['logs']
Testability,It's definitely a bit unclear to met that we got everything and I'm not convinced the test checks everything. I don't think I'd feel much better unless we were randomly restarting the context mid tests.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5872#issuecomment-484583174:86,test,test,86,https://hail.is,https://github.com/hail-is/hail/pull/5872#issuecomment-484583174,2,['test'],"['test', 'tests']"
Testability,It's finally passing the tests!,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5615#issuecomment-476464978:25,test,tests,25,https://hail.is,https://github.com/hail-is/hail/pull/5615#issuecomment-476464978,1,['test'],['tests']
Testability,"It's hard to go through every line to look for bugs, but the structure looks great. You've got a couple test failures (code cast errors)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9926#issuecomment-767796221:104,test,test,104,https://hail.is,https://github.com/hail-is/hail/pull/9926#issuecomment-767796221,1,['test'],['test']
Testability,It's not in pulling. It seems like it's actually in show based on the stack trace. I assumed it was in `create` because this appeared in the stack trace `name=f'batch-{self.job.batch_id}-job-{self.job.job_id}-{self.name}'` and that's the only place that's used. Let me look at the worker logs.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8193#issuecomment-592579928:288,log,logs,288,https://hail.is,https://github.com/hail-is/hail/pull/8193#issuecomment-592579928,1,['log'],['logs']
Testability,"It's possible to get this error:; ```; ----> 5 hc.import_vcf('src/test/resources/sample.vcf').write('sample.vds'). /hail/python/hail/java.py in function_wrapper(*args, **kwargs); 92 except Py4JJavaError as e:; 93 msg = env.jutils.getMinimalMessage(e.java_exception); ---> 94 raise FatalError(msg); 95 except Py4JError as e:; 96 env.jutils.log().error('hail: caught python exception: ' + str(e)). FatalError: UnsupportedClassVersionError: htsjdk/tribble/TribbleException : Unsupported major.minor version 52.0; ```. I figure this change might be nicer, but am happy to hear input",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1406#issuecomment-280786286:66,test,test,66,https://hail.is,https://github.com/hail-is/hail/pull/1406#issuecomment-280786286,2,"['log', 'test']","['log', 'test']"
Testability,It's probably worth running benchmarks to make sure this didn't cause anything important to get deoptimized,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10797#issuecomment-908847093:28,benchmark,benchmarks,28,https://hail.is,https://github.com/hail-is/hail/pull/10797#issuecomment-908847093,1,['benchmark'],['benchmarks']
Testability,"It's sadly duplicated in each module's conftest, but yeah this is a classic Tim Python Hack. https://github.com/hail-is/hail/blob/main/batch/test/conftest.py",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11771#issuecomment-1100395763:141,test,test,141,https://hail.is,https://github.com/hail-is/hail/pull/11771#issuecomment-1100395763,1,['test'],['test']
Testability,"It's testing with the correct image, though?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4240#issuecomment-419488010:5,test,testing,5,https://hail.is,https://github.com/hail-is/hail/pull/4240#issuecomment-419488010,1,['test'],['testing']
Testability,JVM tests pass,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7959#issuecomment-580018794:4,test,tests,4,https://hail.is,https://github.com/hail-is/hail/pull/7959#issuecomment-580018794,1,['test'],['tests']
Testability,"Joining something with itself shouldn't be doing any repartitioning. If the problem does have something to do with repartitioning, it might be worth testing it on #4094.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4104#issuecomment-411397458:149,test,testing,149,https://hail.is,https://github.com/hail-is/hail/pull/4104#issuecomment-411397458,1,['test'],['testing']
Testability,"Just a few comments. Looking good! Looking forward to tests. Also, need to abstract out the code you share with Mendel errors as we discussed.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/109#issuecomment-169135201:54,test,tests,54,https://hail.is,https://github.com/hail-is/hail/pull/109#issuecomment-169135201,1,['test'],['tests']
Testability,Just a heads up this is failing in `TestUtilsSuite.testDataProviders` but I can't reproduce it locally. I'll let you know once I figure out what's going on.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5150#issuecomment-454993793:36,Test,TestUtilsSuite,36,https://hail.is,https://github.com/hail-is/hail/pull/5150#issuecomment-454993793,2,"['Test', 'test']","['TestUtilsSuite', 'testDataProviders']"
Testability,"Just added tests, @jbloom22 !",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1373#issuecomment-279429110:11,test,tests,11,https://hail.is,https://github.com/hail-is/hail/pull/1373#issuecomment-279429110,1,['test'],['tests']
Testability,"Just fixed, I forgot the parser rule. Yeah, I left in some printing in the stream stuff that I should probably at least flag to turn off in automated testing.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8520#issuecomment-612909469:150,test,testing,150,https://hail.is,https://github.com/hail-is/hail/pull/8520#issuecomment-612909469,1,['test'],['testing']
Testability,"Just for reference, this PR also moves copying the worker logs to the shutdown script and adds support for env in batch2. I also added a service account `ci-agent` in the default namespace for the test, dev scopes.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7454#issuecomment-550354045:58,log,logs,58,https://hail.is,https://github.com/hail-is/hail/pull/7454#issuecomment-550354045,2,"['log', 'test']","['logs', 'test']"
Testability,Just move delete_all_test_billing_projects into some file that isn't also full of tests.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11087#issuecomment-982038302:82,test,tests,82,https://hail.is,https://github.com/hail-is/hail/pull/11087#issuecomment-982038302,1,['test'],['tests']
Testability,Just now? It broke after switching to use `hadoop_copy` but should have fixed that this morning with my commit. I've been checking in and haven't seen it run tests yet.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5686#issuecomment-477169272:158,test,tests,158,https://hail.is,https://github.com/hail-is/hail/pull/5686#issuecomment-477169272,1,['test'],['tests']
Testability,"Just ran benchmarks locally, and it looks fine. Think there's any need to run on the cloud as well?. I also tried benchmarking without the binds, and that didn't appear to make any difference, so I'm going to get rid of those.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11070#issuecomment-973005657:9,benchmark,benchmarks,9,https://hail.is,https://github.com/hail-is/hail/pull/11070#issuecomment-973005657,2,['benchmark'],"['benchmarking', 'benchmarks']"
Testability,"Just re-ran it on the Cray. The log is here:; /home/users/lfran/hail.head.log. On Fri, Jul 22, 2016 at 4:05 PM, cseed notifications@github.com wrote:. > Do you have the log handy?; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/broadinstitute/hail/pull/446#issuecomment-234642726,; > or mute the thread; > https://github.com/notifications/unsubscribe-auth/ADVxgUdytKyjwJ5r3pp3-yEam3Xc6-xQks5qYSJ4gaJpZM4I-Oz9; > .",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/446#issuecomment-234979777:32,log,log,32,https://hail.is,https://github.com/hail-is/hail/pull/446#issuecomment-234979777,3,['log'],['log']
Testability,"Just skimmed the discussion. >> I've been working on an R interface to Hail through the sparklyr package; >; > this also sounds awesome. woah, hell yes. I'll look tomorrow. Our build situation is a bit messed up right now. I'll try to isolate your issue and fix it. Moreover, I should be fixing the build situation for good soon. Can you share a full executor log for an executor that fails? That should have some information about why the spark context got shut down.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4513#issuecomment-430451868:360,log,log,360,https://hail.is,https://github.com/hail-is/hail/issues/4513#issuecomment-430451868,1,['log'],['log']
Testability,"Just so I understand correctly (and sorry if this is obvious), the current job logs interface is still the same. But if you want a container's logs, then you'll get bytes which the user will have to decode themselves. How does that affect the file download button in the UI and the hailctl batch logs functionality you have? Will you see text or a random byte string?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12666#issuecomment-1426340756:79,log,logs,79,https://hail.is,https://github.com/hail-is/hail/pull/12666#issuecomment-1426340756,3,['log'],['logs']
Testability,"Just starting to explore this PR. I compared this in-progress CI run to 7126798 (from #12737). The time to service backend starting is ~7 minutes. In the other PR, its ~8 minutes. I suppose that's because this PR isn't hitting any caches, right?. Hmm, it also seems like the critical path to the service backend test is through `build_hail_jar_and_wheel_only`. I wonder if we double the cores, would the time halve? On my laptop a fresh build is like 3m. <img width=""1512"" alt=""Screen Shot 2023-03-07 at 10 27 05"" src=""https://user-images.githubusercontent.com/106194/223501120-ea93c58b-f47f-4e49-8405-8a53d97d76e7.png"">",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12578#issuecomment-1458571966:312,test,test,312,https://hail.is,https://github.com/hail-is/hail/pull/12578#issuecomment-1458571966,1,['test'],['test']
Testability,"Just to be clear, this pipeline was what I wrote when trying to replicate the bug Duncan was seeing, but it hit a different assertion error than the one he was hitting. He was hitting ""local in the wrong method builder"" problems.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/8325#issuecomment-603567150:124,assert,assertion,124,https://hail.is,https://github.com/hail-is/hail/issues/8325#issuecomment-603567150,1,['assert'],['assertion']
Testability,"Just to be sure, I checked the logs for errors and found none. I manually logged into the database and watched the compaction happen for both tables. I don't think we can do any more due diligence with this. Let's plan on merging on Tuesday when you're back from vacation. ```; mysql> select * from aggregated_billing_project_user_resources_v3 where resource_id = 6 limit 100;; +----------------------------------+------+-------------+-------+------------+; | billing_project | user | resource_id | token | usage |; +----------------------------------+------+-------------+-------+------------+; | __testproject_iizhz61z7543_FUitX | test | 6 | 0 | 1817536 |; | __testproject_iizhz61z7543_uvxWn | test | 6 | 0 | 11331136 |; | ci | ci | 6 | 0 | 79640784 |; | test | test | 6 | 0 | 4063028160 |; | test | test | 6 | 1 | 189760 |; | test | test | 6 | 3 | 607168 |; | test | test | 6 | 4 | 749952 |; | test | test | 6 | 5 | 46912 |; | test | test | 6 | 6 | 158336 |; | test | test | 6 | 7 | 70336 |; | test | test | 6 | 8 | 167680 |; | test | test | 6 | 9 | 523136 |; | test | test | 6 | 10 | 40640 |; | test | test | 6 | 11 | 616448 |; | test | test | 6 | 12 | 497024 |; | test | test | 6 | 14 | 87680 |; | test | test | 6 | 15 | 111104 |; | test | test | 6 | 16 | 120128 |; | test | test | 6 | 17 | 28736 |; | test | test | 6 | 19 | 42240 |; | test | test | 6 | 20 | 271232 |; | test | test | 6 | 21 | 88320 |; | test | test | 6 | 22 | 149760 |; | test | test | 6 | 23 | 47232 |; | test | test | 6 | 24 | 45888 |; | test | test | 6 | 25 | 41664 |; | test | test | 6 | 27 | 56704 |; | test | test | 6 | 28 | 36864 |; | test | test | 6 | 30 | 57792 |; | test | test | 6 | 31 | 62848 |; | test | test | 6 | 32 | 40320 |; | test | test | 6 | 33 | 61888 |; | test | test | 6 | 34 | 43520 |; | test | test | 6 | 35 | 219328 |; | test | test | 6 | 36 | 141760 |; | test | test | 6 | 38 | 157632 |; | test | test | 6 | 40 | 72064 |; | test | test | 6 | 41 | 317888 |; | test | test | 6 | 42 | 83648 |; | test | t",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:31,log,logs,31,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,2,['log'],"['logged', 'logs']"
Testability,"K, sure.; Step1 : when start pyspark with the cons; ```; [root@tele-1 ~]# PYSPARK_PYTHON=""ipython"" pyspark --conf spark.sql.files.openCostInBytes=1099511627776 --conf spark.sql.files.maxPartitionBytes=1099511627776 --conf spark.hadoop.parquet.block.size=1099511627776 --conf spark.serializer=org.apache.spark.serializer.KryoSerializer; /usr/local/lib/python3.5/site-packages/IPython/core/history.py:228: UserWarning: IPython History requires SQLite, your history will not be saved; warn(""IPython History requires SQLite, your history will not be saved""); Python 3.5.2 (default, Jul 12 2017, 14:00:23) ; Type ""copyright"", ""credits"" or ""license"" for more information. IPython 5.1.0 -- An enhanced Interactive Python.; ? -> Introduction and overview of IPython's features.; %quickref -> Quick reference.; help -> Python's own help system.; object? -> Details about 'object', use 'object??' for extra details.; Using Spark's default log4j profile: org/apache/spark/log4j-defaults.properties; Setting default log level to ""WARN"".; To adjust logging level use sc.setLogLevel(newLevel).; 17/08/10 08:41:32 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable; 17/08/10 08:41:32 WARN SparkConf: ; SPARK_CLASSPATH was detected (set to '/opt/Software/hail/build/libs/hail-all-spark.jar').; This is deprecated in Spark 1.0+. Please instead use:; - ./spark-submit with --driver-class-path to augment the driver classpath; - spark.executor.extraClassPath to augment the executor classpath; ; 17/08/10 08:41:32 WARN SparkConf: Setting 'spark.executor.extraClassPath' to '/opt/Software/hail/build/libs/hail-all-spark.jar' as a work-around.; 17/08/10 08:41:32 WARN SparkConf: Setting 'spark.driver.extraClassPath' to '/opt/Software/hail/build/libs/hail-all-spark.jar' as a work-around.; Welcome to; ____ __; / __/__ ___ _____/ /__; _\ \/ _ \/ _ `/ __/ '_/; /__ / .__/\_,_/_/ /_/\_\ version 2.0.2; /_/. Using Python version 3.5.2 (default, Jul 1",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/2076#issuecomment-321420160:1005,log,log,1005,https://hail.is,https://github.com/hail-is/hail/issues/2076#issuecomment-321420160,1,['log'],['log']
Testability,KING tests are failing,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9501#issuecomment-698590626:5,test,tests,5,https://hail.is,https://github.com/hail-is/hail/pull/9501#issuecomment-698590626,1,['test'],['tests']
Testability,KNvkh8SC3EzvXjgv6-LMY=: writing f and contexts\n2022-11-15 20:30:18.263 ServiceBackend$: INFO: parallelizeAndComputeWithIndex: pty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY=: writing contexts\n2022-11-15 20:30:18.264 Requester: INFO: request POST http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Ff\n2022-11-15 20:30:18.264 Requester: INFO: request POST http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fcontexts\n2022-11-15 20:30:18.318 Requester: INFO: request POST http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fcontexts response 200\n2022-11-15 20:30:18.331 Requester: INFO: request POST http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Ff response 200\n2022-11-15 20:30:18.332 ServiceBackend$: INFO: parallelizeAndComputeWithIndex: pty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY=: running job\n2022-11-15 20:30:18.333 Requester: INFO: request POST http://batch.hail/api/v1alpha/batches/6627669/update-fast\n2022-11-15 20:30:18.697 Requester: INFO: request POST http://batch.hail/api/v1alpha/batches/6627669/update-fast response 200\n2022-11-15 20:30:18.697 BatchClient: INFO: run: created update 2 for batch 6627669\n2022-11-15 20:30:18.697 Requester: INFO: request GET http://batch.hail/api/v1alpha/batches/6627669\n2022-11-15 20:30:18.802 Requester: INFO: request GET http://batch.hail/api/v1alpha/batches/6627669 response 200\n2022-11-15 20:30:18.852 Requester: INFO: request GET http://batch.hail/api/v1alpha/batches/6627669\n2022-11-15 20:30:18.866 Requester: INFO: request GET http://batch.hail/api/v1alpha/batches/6627669 response 200\n2022-11-15 20:30:18.917 Requester: INFO: reque,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:24060,test,test-,24060,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,"Keeping in mind Cotton's queries last week, researched and found much lighter alternative to ExprsesJS for the server api. A few years ago, Express had low impact on node performance; it has become bloated. Found a light (~200 LOC) ""framework"" called Polka, that is small enough to maintain ourselves. It mainly adds light route-matching capabilities, to avoid repeating boilerplate when writing the Node server. Easy to follow. It's also the fastest ""framework"" available, outside of C/Go/Rust. Matches Falcon, and allows 1 language for server/web. (Also Node has a far larger ecosystem).; * https://github.com/the-benchmarker/web-frameworks ; * Polka also nearly compatible with Express's middleware api, so many existing packages are either directly usable, or with minor modifications. This was a desire of mine, since nearly everything server-y for node is really written for Express. Last commit removes all Express, adds a rewritten express-jwt for access token verification, and shows client credential exchange, backed by Redis cache, for <=4ms fetching of",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4931#issuecomment-447583569:616,benchmark,benchmarker,616,https://hail.is,https://github.com/hail-is/hail/pull/4931#issuecomment-447583569,1,['benchmark'],['benchmarker']
Testability,"Killed errant code that snuck into this branch, tests passing again.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1338#issuecomment-278004376:48,test,tests,48,https://hail.is,https://github.com/hail-is/hail/pull/1338#issuecomment-278004376,1,['test'],['tests']
Testability,"Known facts:; - the last CI k8s deployment that started the deploy=1 batch on April 27th was active since at least April 25th.; - For a small window of time that I looked at on April 25th, it kept getting errors when trying to get the Github status for possible merge candidates: 12848, 12849, 12547. There might be other PRs at later dates. I saw at least the same errors for 12848 on April 27th. I'm going to throw out a hypothesis. I merged the dedup attempt resources PR on April 19th. The PRs that were stacked on previous commits of that PR now have merge conflicts with the set of commits that actually got merged. This caused problems because the next merge candidates CI was selecting was causing bad GitHub rate limit requests for exceeding the number of statuses. So it kept retrying that same merge candidate. CI didn't get restarted at least from the 25th to the 27th so the merge candidate never would have been refreshed. We know that there's less GKE node turnover in Azure, so not unexpected that the ci pod wouldn't get redeployed on its own. I'm thinking it's possible that I merged the database trigger fix on April 27th in response to the excessive deadlocks we noticed and then rebased the subsequent stacked PRs that had merge conflicts, thus unblocking CI, but I'm not sure (it's really hard to get what I want from the Azure log analytics system). I think the ""bug fix"" here is to reassess the code in CI and possibly harden it where we select the merge candidate and try to get the status so it doesn't block deployments. I have a screenshot from April 25th below in case it's helpful. The log analytics query that is helpful is:. ```; ContainerLog; | where ContainerID == ""273584134970cdae08cf0d412461862e2a0e558888a52c91870ca46a146cbb8a""; | order by TimeGenerated; ```. <img width=""1085"" alt=""Screen Shot 2023-05-24 at 12 58 18 PM"" src=""https://github.com/hail-is/hail/assets/1693348/e2da08b6-5982-46cb-9e2c-2178a19f2f86"">",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13050#issuecomment-1561641011:1350,log,log,1350,https://hail.is,https://github.com/hail-is/hail/issues/13050#issuecomment-1561641011,2,['log'],['log']
Testability,Lack of test was me being lazy since I moved all the tests in my other ndarray PR. I'll just add one here and address the merge conflict in either direction.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7209#issuecomment-539184173:8,test,test,8,https://hail.is,https://github.com/hail-is/hail/pull/7209#issuecomment-539184173,2,['test'],"['test', 'tests']"
Testability,"Latest build for spark failing. -- Performing Test CAN_COMPILE_POWER_ALTIVEC - Failed; -- Configuring done; -- Generating done; -- Build files have been written to: /gpfs/home/tpathare/hail_new/hail/src/main/c/libsimdpp-2.0-rc2; mkdir -p lib/linux-x86-64; g++ -fvisibility=hidden -rdynamic -shared -fPIC -ggdb -O3 -march=native -g -std=c++11 -Ilibsimdpp-2.0-rc2 ibs.cpp -o lib/linux-x86-64/libibs.so; cc1plus: error: unrecognized command line option ""-std=c++11""; make: *** [lib/linux-x86-64/libibs.so] Error 1; :nativeLib FAILED. FAILURE: Build failed with an exception. * What went wrong:; Execution failed for task ':nativeLib'.; > Process 'command 'make'' finished with non-zero exit value 2. * Try:; Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. BUILD FAILED. Total time: 12.153 secs",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1327#issuecomment-276938635:46,Test,Test,46,https://hail.is,https://github.com/hail-is/hail/issues/1327#issuecomment-276938635,2,"['Test', 'log']","['Test', 'log']"
Testability,Let me know if you want me to dev deploy this one last time and test the changes. I haven't done so recently.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11750#issuecomment-1167512297:64,test,test,64,https://hail.is,https://github.com/hail-is/hail/pull/11750#issuecomment-1167512297,1,['test'],['test']
Testability,Let me try synchronizing on a lock object instead of this. It's possible that something else (logging?) may be synchronizing on `this`.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4068#issuecomment-411201627:94,log,logging,94,https://hail.is,https://github.com/hail-is/hail/pull/4068#issuecomment-411201627,1,['log'],['logging']
Testability,"Let's chat today to make a plan for getting these reviewed. I certainly want to see size + performance benchmarks -- I'm more than a little concerned that this change by itself will be *slower* for the 1kg matrix tables -- you'll do several java object allocations per matrix entry to decode with these (for AD and PL arrays), where previously we were doing none.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7821#issuecomment-574201074:103,benchmark,benchmarks,103,https://hail.is,https://github.com/hail-is/hail/pull/7821#issuecomment-574201074,1,['benchmark'],['benchmarks']
Testability,"Let's compare 8093951-8854 to 8093977-8854. The latter is a failed task (partition 6914) the former is successful. We'll download the logs and make toss away some debug info that changed between the experiments. ```; cat log | rg StreamBlockInputBuffer: | sed 's/bytes.*//' > newlog; ```. Since the latter failed, the log obviously ends earlier, but there are *no differences* (besides timestamps) in the size of the blocks read from GCS. Since these block sizes are read from the input stream, this is pretty good evidence that the bytes aren't corrupted up until now. ```; # git diff --no-index --word-diff good bad ; ...; 2023-12-06 [-19:47:11.500-]{+21:39:00.885+} StreamBlockInputBuffer: INFO: reading 2081[-2023-12-06 19:47:11.531 StreamBlockInputBuffer: INFO: reading 2499-]; ```. The decompressed data size is the same: 65536. It's worth noting this is a relatively small compressed buffer after a series of much larger compressed buffers. This one is 2081 and the immediately previous one is 14675. Most of the ones before this are also in the 14k range. ---. Same experiment on job 7157 again shows no differences in bytes read before the exception occurs. ```; 2023-12-06 [-19:45:18.693-]{+21:36:52.116+} StreamBlockInputBuffer: INFO: reading 17923 ; 2023-12-06 [-19:45:18.809-]{+21:36:52.388+} StreamBlockInputBuffer: INFO: reading 17843[-2023-12-06 19:45:18.810 StreamBlockInputBuffer: INFO: reading 17657-]; [-2023-12-06 19:45:18.811 StreamBlockInputBuffer: INFO: reading 17646-]; ```. The network reads are identical other than the size of the first read. That first read is the serialized function. I'm not that surprised it differs in size between different commits of Hail. The byte counting is done in our code. If we're counting bytes correctly, then it seems like we're reading the same series of chunks from GCS. . ```; GoogleStorageFS$: INFO: read 1755052 (0 of 1755052) oldbb(0, 8388608) newbb(0, 1755052); GoogleStorageFS$: INFO: read 8388608 (62604 of 58870664) oldbb(0, 8388",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13979#issuecomment-1843799744:134,log,logs,134,https://hail.is,https://github.com/hail-is/hail/issues/13979#issuecomment-1843799744,3,['log'],"['log', 'logs']"
Testability,"Let's decide on the implemented functions that we want here, and then I will write the tests for those functions.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8518#issuecomment-611792254:87,test,tests,87,https://hail.is,https://github.com/hail-is/hail/pull/8518#issuecomment-611792254,1,['test'],['tests']
Testability,Let's get this in so we can try scaling up the service backend tests.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13030#issuecomment-1544607894:63,test,tests,63,https://hail.is,https://github.com/hail-is/hail/pull/13030#issuecomment-1544607894,1,['test'],['tests']
Testability,Let's keep the log statements as it's helpful for debugging order of events and context from the logs.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12622#issuecomment-1405267179:15,log,log,15,https://hail.is,https://github.com/hail-is/hail/pull/12622#issuecomment-1405267179,2,['log'],"['log', 'logs']"
Testability,"Let's make the change to avoid compression below a threshold, rerun benchmarks, and get this merged!",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12981#issuecomment-1557742021:68,benchmark,benchmarks,68,https://hail.is,https://github.com/hail-is/hail/pull/12981#issuecomment-1557742021,1,['benchmark'],['benchmarks']
Testability,"Let's not turn off memory logs entirely. As we progress to NIST 800-53 compliance we need to log requests that use credentials like this. Instead, let's reduce the volume of bytes per-request. How much money do we spend on logs? We have to view them as necessary cost of business, but one that we can reduce in terms of reducing log volume.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12355#issuecomment-1284220591:26,log,logs,26,https://hail.is,https://github.com/hail-is/hail/pull/12355#issuecomment-1284220591,4,['log'],"['log', 'logs']"
Testability,Look into the test failure.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1632#issuecomment-290947359:14,test,test,14,https://hail.is,https://github.com/hail-is/hail/pull/1632#issuecomment-290947359,1,['test'],['test']
Testability,"Looking at the corresponding `GEN` file, it looks like there's one missing value (first variant, first sample) and the rest of the values are close to 1. I think we're better off creating a new test dataset with random data. You can do this with `balding_nichols.export_gen` and then import/export with qctool.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3743#issuecomment-396568789:194,test,test,194,https://hail.is,https://github.com/hail-is/hail/pull/3743#issuecomment-396568789,1,['test'],['test']
Testability,"Looking good. @daniel-goldstein follow up PR to enable service tests, yeah?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11617#issuecomment-1126245988:63,test,tests,63,https://hail.is,https://github.com/hail-is/hail/pull/11617#issuecomment-1126245988,1,['test'],['tests']
Testability,"Looking into this further. Python abstract methods are similar to Scala's in that they can have implementation, but less similar than my test had seemed to state. Python doc on abc:. """"""; Note Unlike Java abstract methods, these abstract methods may have an implementation. This implementation can be called via the super() mechanism from the class that overrides it. This could be useful as an end-point for a super-call in a framework that uses cooperative multiple-inheritance.; """""". However unlike Scala, even with an implementation, these need to be implemented by the subclass. I hadn't noticed the issue because our Backend didn't inherit from ABC. Fixed in https://github.com/hail-is/hail/pull/9192. ```python; In [25]: class Backend(abc.ABC): ; ...: """""" ; ...: Abstract class for backends. ; ...: """""" ; ...: @abc.abstractmethod ; ...: def close(self): ; ...: """""" ; ...: Close a Hail Batch backend. ; ...: """""" ; ...: return ""Parent"" ; ...: ; ...: ; ...: class LocalBackend(Backend): ; ...: """""" ; ...: Backend that executes batches on a local computer. ; ...: ; ...: Examples ; ...: -------- ; ...: ; ...: >>> local_backend = LocalBackend(tmp_dir='/tmp/user/') ; ...: >>> b = Batch(backend=local_backend) ; ...: ; ...: Parameters ; ...: ---------- ; ...: tmp_dir: :obj:`str`, optional ; ...: Temporary directory to use. ; ...: gsa_key_file: :obj:`str`, optional ; ...: Mount a file with a gsa key to `/gsa-key/key.json`. Only used if a ; ...: job specifies a docker image. This option will override the value set by ; ...: the environment variable `HAIL_BATCH_GSA_KEY_FILE`. ; ...: extra_docker_run_flags: :obj:`str`, optional ; ...: Additional flags to pass to `docker run`. Only used if a job specifies ; ...: a docker image. This option will override the value set by the environment ; ...: variable `HAIL_BATCH_EXTRA_DOCKER_RUN_FLAGS`. ; ...: """""" ; ...: ; ...: . In [26]: n = LocalBackend() ; ---------------------------------------------------------------------------; TypeError Traceback ",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9191#issuecomment-667235187:137,test,test,137,https://hail.is,https://github.com/hail-is/hail/pull/9191#issuecomment-667235187,1,['test'],['test']
Testability,"Looking through the google doc I read Dan mentioning Iterators as returns types and since this is a list we are iterating through, I thought I should test it to see if the return type for Iterable would work and it did pass.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11438#issuecomment-1057178415:150,test,test,150,https://hail.is,https://github.com/hail-is/hail/pull/11438#issuecomment-1057178415,1,['test'],['test']
Testability,Looks fine to me. We pretty much just use MJS/MJC and rate limit logs from NGINX for monitoring,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11904#issuecomment-1164670659:65,log,logs,65,https://hail.is,https://github.com/hail-is/hail/pull/11904#issuecomment-1164670659,1,['log'],['logs']
Testability,"Looks good but tests are failing, maybe related to https://github.com/hail-is/hail/pull/1538?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1532#issuecomment-286491775:15,test,tests,15,https://hail.is,https://github.com/hail-is/hail/pull/1532#issuecomment-286491775,1,['test'],['tests']
Testability,"Looks good to me. > It's going to be painful to get logistic to take no covariates. This isn't immediately obvious to me. Can you say a word or two about why?. I think we thought default `covariates=[1.0]` was misleading because for no covariates with intercept you don't have to add it, but with multiple you do. You'll make a discuss post about the breaking change?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4067#issuecomment-410486374:52,log,logistic,52,https://hail.is,https://github.com/hail-is/hail/pull/4067#issuecomment-410486374,1,['log'],['logistic']
Testability,"Looks good! ; - There's a couple of places where we use `hl.array()` for our own methods, e.g. `Table.to_matrix_table` and the vcf_combiner that I think are just conceptually ""turn this set/dict into an array, please"" as opposed to casting out of convenience (like we did for filter, etc. before this PR).; - I think as we add more representations for array/set/dict the CastToArray logic will just need to take into account the pType that it's casting to/from accordingly; it'll therefore still ""work"" but won't always return a sorted array or guarantee an ordering (which I think we shouldn't consider part of the semantics anyways); - I don't know that ArrayRef makes sense on general Set/Dict objects directly anyways, since they don't conceptually have a well-defined element order (I think a lot of languages don't let you index into sets/dicts by index, right?). I think I'd agree that ArrayLen should work on everything.; - I'm kind of in favor of introducing companion StreamRef/StreamLen nodes for ArrayRef/ArrayLen to work on streams, just because they'll look very distinct in the generated code.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8171#issuecomment-592681047:383,log,logic,383,https://hail.is,https://github.com/hail-is/hail/pull/8171#issuecomment-592681047,1,['log'],['logic']
Testability,Looks good! Next steps:. - Use it!; - Test it! I'm not sure how much will break.; - Time it! Do something simple filter genotypes gq >= 20 and a sampleqc or something. Does it help? How much?; - Figure out how you're going to deal with annotations like `va.rare_genos = gs.filter(g => ... some rare condition ...).collect()`.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1322#issuecomment-276272639:38,Test,Test,38,https://hail.is,https://github.com/hail-is/hail/pull/1322#issuecomment-276272639,1,['Test'],['Test']
Testability,"Looks great, aside from Value.fromLIR stuff which I think is causing test failures.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10791#issuecomment-901427655:69,test,test,69,https://hail.is,https://github.com/hail-is/hail/pull/10791#issuecomment-901427655,1,['test'],['test']
Testability,"Looks great. Any chance you can add Firth's logistic regression?. Thanks,. Manny. On Sun, Aug 14, 2016 at 12:58 PM, jbloom22 notifications@github.com wrote:. > jenkins; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/broadinstitute/hail/pull/585#issuecomment-239684133,; > or mute the thread; > https://github.com/notifications/unsubscribe-auth/ABPl2UH8kO3OSrp-6XTXAAacpxxSI9Z2ks5qf0kdgaJpZM4Jje3f; > .",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/585#issuecomment-239686067:44,log,logistic,44,https://hail.is,https://github.com/hail-is/hail/pull/585#issuecomment-239686067,1,['log'],['logistic']
Testability,"Looks like a typo: you wrote ""scr/test/resources/sample.vcf"" instead of ""src/test/resources/sample.vcf""",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1377#issuecomment-279429609:34,test,test,34,https://hail.is,https://github.com/hail-is/hail/issues/1377#issuecomment-279429609,2,['test'],['test']
Testability,Looks like it needs a rebase before it can rerun the tests. I'll take another look once it is passing.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2556#issuecomment-351586270:53,test,tests,53,https://hail.is,https://github.com/hail-is/hail/pull/2556#issuecomment-351586270,1,['test'],['tests']
Testability,Looks like some test are failing for real though.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6557#issuecomment-513264991:16,test,test,16,https://hail.is,https://github.com/hail-is/hail/pull/6557#issuecomment-513264991,1,['test'],['test']
Testability,Looks like something went wrong in the PR tests that seems unrelated to the PR. I haven't seen those tests fail before.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13399#issuecomment-1672018783:42,test,tests,42,https://hail.is,https://github.com/hail-is/hail/pull/13399#issuecomment-1672018783,2,['test'],['tests']
Testability,"Looks like something went wrong with an always_run cancel step, but there's not enough information in the logs to figure out why.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7886#issuecomment-574813098:106,log,logs,106,https://hail.is,https://github.com/hail-is/hail/pull/7886#issuecomment-574813098,1,['log'],['logs']
Testability,Looks like test failure is due to needing to wrap phenotype in array in this line; `top_5_pvals = (vds.linreg('sa.metadata.CaffeineConsumption')`; of; https://github.com/hail-is/hail/blob/master/python/hail/docs/tutorials/expression-language-part-2.ipynb,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2042#issuecomment-318833001:11,test,test,11,https://hail.is,https://github.com/hail-is/hail/pull/2042#issuecomment-318833001,1,['test'],['test']
Testability,"Looks like the ops agent [also does logging](https://cloud.google.com/stackdriver/docs/solutions/agents/ops-agent) in addition to monitoring. The logging agent we're using now is considered legacy, we should probably switch everything over to this new agent.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13949#issuecomment-1789790392:36,log,logging,36,https://hail.is,https://github.com/hail-is/hail/pull/13949#issuecomment-1789790392,2,['log'],['logging']
Testability,"Looks like there were some more `hl._nd`'s around in tests. Sorry about that, I can fix if you'd like.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9061#issuecomment-655652327:53,test,tests,53,https://hail.is,https://github.com/hail-is/hail/pull/9061#issuecomment-655652327,1,['test'],['tests']
Testability,Looks like there's a typo in the new test.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8286#issuecomment-597807644:37,test,test,37,https://hail.is,https://github.com/hail-is/hail/pull/8286#issuecomment-597807644,1,['test'],['test']
Testability,"Looks like this has failures and needs a rebase. Your PR stack is getting pretty high so let's keep the bottom moving. Also, I rebased my lir branch on Value[T] and now I'm passing the asm4s tests and most other tests are failing on joinpoint which I didn't port. So this stack is now a blocker for me to resume that thread.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8156#issuecomment-594495172:191,test,tests,191,https://hail.is,https://github.com/hail-is/hail/pull/8156#issuecomment-594495172,2,['test'],['tests']
Testability,"Looks like we have a test where we pass `missing=""""` that used to work, so I'm doing something wrong here or misunderstanding something. Will investigate and get back to you.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11078#issuecomment-975612089:21,test,test,21,https://hail.is,https://github.com/hail-is/hail/pull/11078#issuecomment-975612089,1,['test'],['test']
Testability,Looks like we need to update the tests too.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7361#issuecomment-545585187:33,test,tests,33,https://hail.is,https://github.com/hail-is/hail/pull/7361#issuecomment-545585187,1,['test'],['tests']
Testability,"Looks like we probably want to add the following to benchmark somewhere:. ```; export MKL_NUM_THREADS=1; export NUMEXPR_NUM_THREADS=1; export OPENBLAS_NUM_THREADS=1; export OMP_NUM_THREADS=1; export VECLIB_MAXIMUM_THREADS=1; ```. Trying to test if setting veclib lower fixes things, but apparently Apple caches the result of the environment variable somewhere so it's unclear whether me setting it is working",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8050#issuecomment-583412384:52,benchmark,benchmark,52,https://hail.is,https://github.com/hail-is/hail/pull/8050#issuecomment-583412384,2,"['benchmark', 'test']","['benchmark', 'test']"
Testability,Looks like you need the globals too. Two concerns:; 1. Does localize entries not produce a table aggregate?; 2. Does this preserve the column ordering that we all agreed on? Is that tested?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13405#issuecomment-1673279690:182,test,tested,182,https://hail.is,https://github.com/hail-is/hail/pull/13405#issuecomment-1673279690,1,['test'],['tested']
Testability,"Looks my comment got lost! Sorry. I said, I'd prefer we didn't copy the HailContext whole hog, but just write a simple wrapper that calls from hail2.HailContext to hail.HailContext, so something like:. ```; class HailContext:; def __init__(args...):; self.hc1 = hail.HailContext(args...). def import_bgen(args...):; return self.hc1.import_bgen(args...).to_hail2(); ```. etc. I don't think you even need docs unless there is something specifically different between the two. That way, we won't need to maintain two versions for things like doc changes and we won't get confused about which one is the ""real"" HailContext. Then, when we're ready to switch over, we can pull the docs across and throw away the stub.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2244#issuecomment-337717963:706,stub,stub,706,https://hail.is,https://github.com/hail-is/hail/pull/2244#issuecomment-337717963,1,['stub'],['stub']
Testability,"Lots of tests failing, this isn't quite right yet.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9570#issuecomment-704990030:8,test,tests,8,https://hail.is,https://github.com/hail-is/hail/pull/9570#issuecomment-704990030,1,['test'],['tests']
Testability,"Made all discussed changes and then some, except HailCheck tests. Added symbolic variant check / filter, but we should still talk about the PL(GT) != 0 genotypes in GoT2D.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/210#issuecomment-192798627:59,test,tests,59,https://hail.is,https://github.com/hail-is/hail/pull/210#issuecomment-192798627,1,['test'],['tests']
Testability,"Made this change backwards compatible. Note that I have not made any changes to worker.py in this PR anymore, so there's no danger of incompatibility. I tested the JAR from this PR against default and ran a simple hail query to see that it behaved as usual. Separately, I made #12246, dev deployed it, then ran this same JAR against my dev namespace to see that it added all worker jobs to the same batch as the driver job.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12222#issuecomment-1262670715:153,test,tested,153,https://hail.is,https://github.com/hail-is/hail/pull/12222#issuecomment-1262670715,1,['test'],['tested']
Testability,"Made two small comments, but they're a typo and an organization of tests comment. I'm fine with the code here, and happy with the tests. Just leaves @cseed to sign off on this",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1895#issuecomment-312331956:67,test,tests,67,https://hail.is,https://github.com/hail-is/hail/pull/1895#issuecomment-312331956,2,['test'],['tests']
Testability,Master is failing because of this. Somehow the CI server tested the wrong thing...,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3877#issuecomment-401561153:57,test,tested,57,https://hail.is,https://github.com/hail-is/hail/pull/3877#issuecomment-401561153,1,['test'],['tested']
Testability,Maybe just comment out the ndarray tests? I'm going to use them in near future,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7002#issuecomment-528628851:35,test,tests,35,https://hail.is,https://github.com/hail-is/hail/pull/7002#issuecomment-528628851,1,['test'],['tests']
Testability,Maybe ought to wait for #8649 to go in so I can add tests that depend on keying.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8665#issuecomment-621867329:52,test,tests,52,https://hail.is,https://github.com/hail-is/hail/pull/8665#issuecomment-621867329,1,['test'],['tests']
Testability,Maybe we could keep a list here of things that we notice don't have a log message as we notice them?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1616#issuecomment-294024200:70,log,log,70,https://hail.is,https://github.com/hail-is/hail/issues/1616#issuecomment-294024200,1,['log'],['log']
Testability,"Maybe? We have an assertion in `TextMatrixReader.parseOptionalValue` that the missing values are not empty strings. I didn't trace through why, I just moved the error up.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11078#issuecomment-975610252:18,assert,assertion,18,https://hail.is,https://github.com/hail-is/hail/pull/11078#issuecomment-975610252,1,['assert'],['assertion']
Testability,Mmm. Yes. I need a more robust IR testing plan. I think testing these individually will be more painful than testing them in the context of IR expressions.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2514#issuecomment-349092532:34,test,testing,34,https://hail.is,https://github.com/hail-is/hail/pull/2514#issuecomment-349092532,3,['test'],['testing']
Testability,"More extensive cloud tests are showing speedups in the combiner pipeline compared to master, about 15-20 seconds per partition, but that adds up quickly at scale.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5828#issuecomment-481367173:21,test,tests,21,https://hail.is,https://github.com/hail-is/hail/pull/5828#issuecomment-481367173,1,['test'],['tests']
Testability,MoreThanMaxInt$(FSSuite.scala:321); 	at is.hail.fs.gs.GoogleStorageFSSuite.testSeekMoreThanMaxInt(GoogleStorageFSSuite.scala:12); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); 	Suppressed: is.hail.relocated.com.google.cloud.storage.StorageException: Unable to recover in upload.; This may be a symptom of multiple clients uploading to the same upload session. For debugging purposes:; uploadId: https://storage.googleapis.com/upload/storage/v1/b/hail-test-ezlis/o?name=fs-suite-tmp-6BO4gZ18Lheigp3ir9RSOh&uploadType=resumable&upload_id=ADPycduiXx2Jt,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756:4186,test,testng,4186,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756,1,['test'],['testng']
Testability,MoreThanMaxInt$(FSSuite.scala:339); 	at is.hail.fs.gs.GoogleStorageFSSuite.testSeekMoreThanMaxInt(GoogleStorageFSSuite.scala:12); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); 	Suppressed: is.hail.relocated.com.google.cloud.storage.StorageException: Unable to recover in upload.; This may be a symptom of multiple clients uploading to the same upload session. For debugging purposes:; uploadId: https://storage.googleapis.com/upload/storage/v1/b/hail-test-ezlis/o?name=fs-suite-tmp-2LzGioRNy6RqIS2pfXIoSO&uploadType=resumable&upload_id=ADPycdvZ5HhnG,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911:4379,test,testng,4379,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911,1,['test'],['testng']
Testability,"Moreover, this issue appears to not be due to Breeze 0.12 natives:. ```; SPARK_HOME=/Users/dking/borg/spark-2.1.0-bin-hadoop2.7 gradle test --tests 'is.hail.methods.LinearMixedRegressionSuite.genAndFitLMM' -Dspark.version=2.1.0 -Dcom.github.fommil.netlib.BLAS=com.github.fommil.netlib.F2jBLAS -Dcom.github.fommil.netlib.LAPACK=com.github.fommil.netlib.F2jLAPACK -Dcom.github.fommil.netlib.ARPACK=com.github.fommil.netlib.F2jARPACK; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1419#issuecomment-281763304:135,test,test,135,https://hail.is,https://github.com/hail-is/hail/issues/1419#issuecomment-281763304,2,['test'],"['test', 'tests']"
Testability,"My attempts to restructure as a class led to more complexity, largely due to serialization of class values. I've instead moved logisticSkat and linearSkat into the apply def which removed parameter passing and code duplication. I left `computeKeyGsWeightRdd` outside the apply as moving it in complicates testing. I've also changed maxSize to default to 46340, which is `floor(sqrt(Int.MaxValue))`, and I set maxEntriesForSmallN to be the min of maxSize^2 and 8000^2.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2248#issuecomment-334005938:127,log,logisticSkat,127,https://hail.is,https://github.com/hail-is/hail/pull/2248#issuecomment-334005938,2,"['log', 'test']","['logisticSkat', 'testing']"
Testability,My inclination is to assume the arg parser works correctly and to just test calling a function that returns the information you need.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12471#issuecomment-1324238614:71,test,test,71,https://hail.is,https://github.com/hail-is/hail/pull/12471#issuecomment-1324238614,1,['test'],['test']
Testability,"My large test worked in my namespace. The docs were able to build. They're a bit confusing with the enum object, but I'm not sure how to easily fix it. The key things to look for are the scheduler query matches the sort order of the control loop query. If that's off, then instances will thrash. Once you're good with this then we can do a load test sometime tomorrow.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12221#issuecomment-1270642090:9,test,test,9,https://hail.is,https://github.com/hail-is/hail/pull/12221#issuecomment-1270642090,2,['test'],['test']
Testability,"My original motivation for this was to speed up the following code in LD prune: . ```; related_nodes = edges.aggregate(agg.collect_as_set(agg.explode([edges['i'], edges['j']]))); related_nodes_to_keep = maximal_independent_set(edges['i'], edges['j']); related_nodes_to_remove = related_nodes - set(related_nodes_to_keep). pruned_ds = (locally_pruned_ds; .filter_rows(functions.broadcast(related_nodes_to_remove); .contains(locally_pruned_ds.variant_idx), ; keep=False)); ```; It's my understanding that the last line of this code is slow because passing a large python list over py4j is slow. Adding a keep/remove flag to maximal_independent_set would address the set logic and slowness of collecting the set of nodes, but not the other speed issue, since maximal_independent_set would still return a python list. . I could add the keep/remove flag, and also edit the method on the Scala side to create and return a new single-column Table of nodes to remove. Is this preferable?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2975#issuecomment-368139225:668,log,logic,668,https://hail.is,https://github.com/hail-is/hail/pull/2975#issuecomment-368139225,1,['log'],['logic']
Testability,"My plan is to add the JVM logs to disk for each job feature and debug the entire stack at once. If you see problems with the underlying stack, then it would be great to know that sooner rather than later.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11397#issuecomment-1048940715:26,log,logs,26,https://hail.is,https://github.com/hail-is/hail/pull/11397#issuecomment-1048940715,1,['log'],['logs']
Testability,"My thought was no change was needed because it's an internal method and a convenience function to have approximately the same. If someone needs it, then they can add more complicated logic later. Whichever you think is best is fine with me.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3442#issuecomment-385975067:183,log,logic,183,https://hail.is,https://github.com/hail-is/hail/pull/3442#issuecomment-385975067,1,['log'],['logic']
Testability,NFO: instruction count: 3: __C1235__m1112split_LetSpills.<init>\n2022-11-15 20:30:18.247 root: INFO: instruction count: 3: __C1182staticWrapperClass_1.<init>\n2022-11-15 20:30:18.247 root: INFO: instruction count: 3: __C1203Tuple3.<init>\n2022-11-15 20:30:18.247 root: INFO: instruction count: 12: __C1203Tuple3.<init>\n2022-11-15 20:30:18.262 root: INFO: executing D-Array [table_aggregate_singlestage] with 50 tasks\n2022-11-15 20:30:18.262 ServiceBackend$: INFO: parallelizeAndComputeWithIndex: pty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY=: nPartitions 50\n2022-11-15 20:30:18.262 ServiceBackend$: INFO: parallelizeAndComputeWithIndex: pty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY=: writing f and contexts\n2022-11-15 20:30:18.263 ServiceBackend$: INFO: parallelizeAndComputeWithIndex: pty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY=: writing contexts\n2022-11-15 20:30:18.264 Requester: INFO: request POST http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Ff\n2022-11-15 20:30:18.264 Requester: INFO: request POST http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fcontexts\n2022-11-15 20:30:18.318 Requester: INFO: request POST http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fcontexts response 200\n2022-11-15 20:30:18.331 Requester: INFO: request POST http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Ff response 200\n2022-11-15 20:30:18.332 ServiceBackend$: INFO: parallelizeAndComputeWithIndex: pty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY=: running job\n2022-11-15 20:30:18.333 Requester: INFO: request POST http://batch.hail/api/v1alpha/batches/6627669/update-fast\n2022-11-15 20:30:18.69,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:23406,test,test-,23406,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,Native code still works (tested by running `hl.identity_by_descent`).,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14093#issuecomment-1852290763:25,test,tested,25,https://hail.is,https://github.com/hail-is/hail/pull/14093#issuecomment-1852290763,1,['test'],['tested']
Testability,Need to also double check the number for `n_ready` is correct with a better test case.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14100#issuecomment-1858589110:76,test,test,76,https://hail.is,https://github.com/hail-is/hail/pull/14100#issuecomment-1858589110,1,['test'],['test']
Testability,"Need to make a smaller set of avro example files to check into the repo for automated tests. I have been writing/running tests on 10 full samples, can't automate that. I suppose maybe that shouldn't block this from being merged, though I don't want to leave that thread too long.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12017#issuecomment-1333006912:86,test,tests,86,https://hail.is,https://github.com/hail-is/hail/pull/12017#issuecomment-1333006912,2,['test'],['tests']
Testability,"Need to understand ToStream and ToArray invariants. For ToArray, I'm considering the following invariant: if child is stream, leave as is, if child is not stream, streamify. Explicit ToArray match needed to pass TableSuite::testRangeRead. A bunch of tests fail in Aggregators2Suite; in testDownsample case it's an issue with ToStream missing from FoldConstants. Fixed this with a _: ToStream => None. Other Aggregators2Suite issues are stranger, here's the testArrayElementsAgg:. Cannot find __iruid_39 in Map(__iruid_22 -> PCStruct{stream:PCArray[PCArray[PCStruct{a:PCString,b:PInt64}]]}, __iruid_38 -> PCArray[PCArray[PCStruct{a:PCString,b:PInt64}]]); java.lang.RuntimeException: Cannot find __iruid_39 in Map(__iruid_22 -> PCStruct{stream:PCArray[PCArray[PCStruct{a:PCString,b:PInt64}]]}, __iruid_38 -> PCArray[PCArray[PCStruct{a:PCString,b:PInt64}]])",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8063#issuecomment-584445732:224,test,testRangeRead,224,https://hail.is,https://github.com/hail-is/hail/pull/8063#issuecomment-584445732,4,['test'],"['testArrayElementsAgg', 'testDownsample', 'testRangeRead', 'tests']"
Testability,Needs tests. And then the next step is to use this in the copier/sync tool.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14603#issuecomment-2204424918:6,test,tests,6,https://hail.is,https://github.com/hail-is/hail/pull/14603#issuecomment-2204424918,1,['test'],['tests']
Testability,Neither bucket nor remote_tmpdir had tests so I added tests for both.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10529#issuecomment-858697221:37,test,tests,37,https://hail.is,https://github.com/hail-is/hail/pull/10529#issuecomment-858697221,2,['test'],['tests']
Testability,"Nevermind, I can see that it hasn't. How do we expect to benchmark these?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5414#issuecomment-466563704:57,benchmark,benchmark,57,https://hail.is,https://github.com/hail-is/hail/pull/5414#issuecomment-466563704,1,['benchmark'],['benchmark']
Testability,Nevermind. Added tests for editing the limits to this PR. Will figure out the CLI after @catoverdrive has had a chance to do what they wanted to do with that for billing projects.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9354#issuecomment-705120445:17,test,tests,17,https://hail.is,https://github.com/hail-is/hail/pull/9354#issuecomment-705120445,1,['test'],['tests']
Testability,"New Query Plan:. ```; mysql> EXPLAIN SELECT batches.*, batches_cancelled.id IS NOT NULL AS cancelled, COALESCE(SUM(`usage` * rate), 0) AS cost, batches_n_jobs_in_complete_states.n_completed, batches_n_jobs_in_complete_states.n_succeeded, batches_n_jobs_in_complete_states.n_failed, batches_n_jobs_in_complete_states.n_cancelled; -> FROM batches; -> LEFT JOIN batches_n_jobs_in_complete_states; -> ON batches.id = batches_n_jobs_in_complete_states.id; -> LEFT JOIN batches_cancelled; -> ON batches.id = batches_cancelled.id; -> LEFT JOIN aggregated_batch_resources; -> ON batches.id = aggregated_batch_resources.batch_id; -> LEFT JOIN resources; -> ON aggregated_batch_resources.resource = resources.resource; -> STRAIGHT_JOIN billing_project_users ON batches.billing_project = billing_project_users.billing_project; -> WHERE (billing_project_users.`user` = 'test' AND billing_project_users.billing_project = batches.billing_project) AND NOT deleted AND (batches.id < 1114186) AND ; -> (batches.`user` = 'test'); -> GROUP BY batches.id; -> ORDER BY batches.id DESC; -> LIMIT 51;; +----+-------------+-----------------------------------+------------+--------+---------------------------------------------------------------------------------------------------------------+---------+---------+-------------------------------------------+---------+----------+----------------------------------+; | id | select_type | table | partitions | type | possible_keys | key | key_len | ref | rows | filtered | Extra |; +----+-------------+-----------------------------------+------------+--------+---------------------------------------------------------------------------------------------------------------+---------+---------+-------------------------------------------+---------+----------+----------------------------------+; | 1 | SIMPLE | batches | NULL | range | PRIMARY,batches_deleted,batches_token,batches_user_state,batches_time_completed,batches_billing_project_state | PRIMARY | 8 | NULL | 1348998 | 5",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12057#issuecomment-1196612910:858,test,test,858,https://hail.is,https://github.com/hail-is/hail/pull/12057#issuecomment-1196612910,1,['test'],['test']
Testability,"New new failure mode:. AccessDeniedException: 403 hail-ci-0-1@broad-ctsa.iam.gserviceaccount.com does not have storage.objects.list access to hail-ci-test. Failing here in test-ci.py:. ```; deploy_artifact = run(['gsutil', 'cat', f'gs://hail-ci-test/{second_target_sha}'], stdout=subprocess.PIPE); deploy_artifact = deploy_artifact.stdout.decode('utf-8').strip(); assert f'commit {second_target_sha}' in deploy_artifact; ```. I don't know who's authorizing gcloud for hail-ci-0-1. Anyway, I gave hail-ci-0-1 permissions on hail-ci-test and am re-running.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4509#issuecomment-429196114:150,test,test,150,https://hail.is,https://github.com/hail-is/hail/pull/4509#issuecomment-429196114,5,"['assert', 'test']","['assert', 'test', 'test-ci']"
Testability,New plan. @catoverdrive already figured out how to have multiple users with different clients to be able to test the dev only endpoints such as editing a billing limit. I'm going to wait for their PR to go in and then reevaluate (#9553).,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9354#issuecomment-705156989:108,test,test,108,https://hail.is,https://github.com/hail-is/hail/pull/9354#issuecomment-705156989,1,['test'],['test']
Testability,New test failure mode:. ERROR: (gcloud.beta.dataproc.clusters.create) Operation [projects/broad-ctsa/regions/global/operations/07164d0e-6c27-35d9-8132-9960b0db6d43] failed: Internal server error.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4509#issuecomment-429176963:4,test,test,4,https://hail.is,https://github.com/hail-is/hail/pull/4509#issuecomment-429176963,1,['test'],['test']
Testability,"New test failure:. ```; + ./gradlew shadowJar archiveZip; Exception in thread ""main"" javax.net.ssl.SSLHandshakeException: Received fatal alert: handshake_failure; 	at sun.security.ssl.Alerts.getSSLException(Alerts.java:192); ```; Still not sure what to do about transient external dependency failures in the tests.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4536#issuecomment-429360417:4,test,test,4,https://hail.is,https://github.com/hail-is/hail/pull/4536#issuecomment-429360417,2,['test'],"['test', 'tests']"
Testability,Next thing I would try is running the full split. Maybe we need to run that in a memory limited way?; ```; HAIL_RUN_IMAGE_SPLITS=14 \; HAIL_RUN_IMAGE_SPLIT_INDEX=2 \; HAIL_CLOUD=gcp \; HAIL_TEST_STORAGE_URI=/tmp/ \; HAIL_TEST_RESOURCES_DIR=./../src/test/resources/ \; HAIL_DOCTEST_DATA_DIR=./hail/docs/data \; HAIL_QUERY_BACKEND=local python3 -m pytest -Werror:::hail -Werror:::hailtop --log-cli-level=INFO -s -r A -vv --instafail --durations=50 --ignore=test/hailtop/ test; ```,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12731#issuecomment-1507071339:249,test,test,249,https://hail.is,https://github.com/hail-is/hail/pull/12731#issuecomment-1507071339,4,"['log', 'test']","['log-cli-level', 'test']"
Testability,"Nice, I think this is a giant improvement. There are still spots where the pairing between source file and test file isn't exact, but hopefully having it most of the way there will encourage better modularization of both the source and tests over time (broken windows and all that).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3887#issuecomment-402164003:107,test,test,107,https://hail.is,https://github.com/hail-is/hail/pull/3887#issuecomment-402164003,2,['test'],"['test', 'tests']"
Testability,No new tests are passing because we need to implement VCF export first.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11598#issuecomment-1068604326:7,test,tests,7,https://hail.is,https://github.com/hail-is/hail/pull/11598#issuecomment-1068604326,1,['test'],['tests']
Testability,"No no, I reset the codecs afterwards. I tested and it works as intended; (loading a .gz annotation file with the Gzip codec). I'm trying to fix the; small letter / capital issue (thanks Daniel), but it Git seems to be; case-insensitive when it comes to files... On Wed, Sep 21, 2016 at 11:19 AM, Tim Poterba notifications@github.com; wrote:. > This sets the configuration permanently -- any following commands will use; > the overridden codecs. Setting a global option is almost certainly better; > than getting this kind of leakage, I think; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/hail-is/hail/pull/826#issuecomment-248645129, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/ADVxgYRNZnsCXFQnDx9z5wRR1WD4rr0cks5qsUr_gaJpZM4KC1O-; > .",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/826#issuecomment-248646084:40,test,tested,40,https://hail.is,https://github.com/hail-is/hail/pull/826#issuecomment-248646084,1,['test'],['tested']
Testability,"No state. I printed the session in the logs (I was deploying into prod to test while I had a broken cookie). My session had nothing set except that it was marked as created on January 7th. This despite that I saw a log statement from when I hit /login,m that clearly showed me session with all the right values. My guess is that there was some old signing key or somehow the session got corrupted so you can decode it to get an empty session and add new fields but they fail to be written back.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8052#issuecomment-583226388:39,log,logs,39,https://hail.is,https://github.com/hail-is/hail/pull/8052#issuecomment-583226388,4,"['log', 'test']","['log', 'login', 'logs', 'test']"
Testability,No worries @vladsaveliev! I put this PR up just to work through the CI tests. I meant once you merge my changes into your branch and your PR goes in I will close this one.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10347#issuecomment-824489394:71,test,tests,71,https://hail.is,https://github.com/hail-is/hail/pull/10347#issuecomment-824489394,1,['test'],['tests']
Testability,"No, I wanted to test the PR build path. As you can see it’s broken 😉",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8136#issuecomment-591472185:16,test,test,16,https://hail.is,https://github.com/hail-is/hail/pull/8136#issuecomment-591472185,1,['test'],['test']
Testability,"No, but its the same string I used to install hail dependencies for Terra's notebooks. I can run a test now",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9502#issuecomment-698497283:99,test,test,99,https://hail.is,https://github.com/hail-is/hail/pull/9502#issuecomment-698497283,1,['test'],['test']
Testability,"No, don't want to do that. I just looked at the log and it did what I expected https://ci.hail.is/jobs/29829/log",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6222#issuecomment-497511305:48,log,log,48,https://hail.is,https://github.com/hail-is/hail/pull/6222#issuecomment-497511305,2,['log'],['log']
Testability,"No, only step 1 up there has been completed. We currently accept both the old and new authentication tokens. We need to decide what kind of deprecation approach is appropriate here and then do it. Also as it currently stands copy-paste tokens require the old-style of authentication (I think because of an implementation detail that internally these tokens reference `session_id`s instead of users), so those either need to be migrated to be compatible with a user not having any `session_id`s in the database or removed entirely. A useful bit of context though, the only thing users need to do to get off the old tokens is `hailctl auth login` on a hail version with the changes in #13131.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13531#issuecomment-1766798562:638,log,login,638,https://hail.is,https://github.com/hail-is/hail/issues/13531#issuecomment-1766798562,1,['log'],['login']
Testability,"No, we're setting up a new test server and things are broken at the moment. We should get things sorted today, hopefully.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/654#issuecomment-242075913:27,test,test,27,https://hail.is,https://github.com/hail-is/hail/pull/654#issuecomment-242075913,1,['test'],['test']
Testability,"No. There's one test that only fails on Azure and I haven't figured out why yet. ```. =================================== FAILURES ===================================; ___________________________ test_dir_outside_curdir ____________________________. runner = <typer.testing.CliRunner object at 0x7f95b3d14b50>. def test_dir_outside_curdir(runner: CliRunner):; with tempfile.TemporaryDirectory() as dir:; os.mkdir(f'{dir}/working_dir'); os.chdir(f'{dir}/working_dir'); write_hello(f'{dir}/hello1.txt'); write_hello(f'{dir}/hello2.txt'); write_script(dir, '/hello1.txt'); res = runner.invoke(cli.app, ['submit', '--files', f'{dir}/:/', '../test_job.py']); > assert res.exit_code == 0; E AssertionError: assert 1 == 0; E + where 1 = <Result HttpResponseError('The specified block list is invalid.\nRequestId:86424c6a-d01e-004a-272b-0b6b10000000\nTime:2023-10-30T12:21:01.7415144Z\nErrorCode:InvalidBlockList')>.exit_code; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13785#issuecomment-1785325401:16,test,test,16,https://hail.is,https://github.com/hail-is/hail/issues/13785#issuecomment-1785325401,5,"['Assert', 'assert', 'test']","['AssertionError', 'assert', 'test', 'testing']"
Testability,"Non preemptible for that reason seems fine. . However, I think I have a fundamental misunderstanding. In my experience thus far, Prometheus will need more than 30GB of RAM if anyone runs thousands of pods on our cluster for an hour or more. Is that not your understanding? Last time I ran the test Prometheus wasn’t able to start after crashing. Also the per-pod Graphana graphs loaded noticeably slower than everything else.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6774#issuecomment-519120787:293,test,test,293,https://hail.is,https://github.com/hail-is/hail/pull/6774#issuecomment-519120787,1,['test'],['test']
Testability,"Not in the default script yet. Try running with this:. /psych/genetics_data/working/cseed/hail-inst/bin/hail. Cotton. On Mon, Apr 25, 2016 at 5:53 PM, ksatterstrom notifications@github.com; wrote:. > This afternoon I tried to run a series of commands that began with:; > ; > hail-new read -i /user/satterst/DBS_v2.4/temp3.vds \; > filtervariants --keep -c 'va.kyle.lof == ""HC""' \; > filtervariants --remove -c /user/satterst/exac.variant_list; > ; > and I got output that said:; > hail: info: running: filtervariants --remove -c; > /user/satterst/exac.variant_list; > Exception in thread ""main"" java.lang.OutOfMemoryError: Java heap space; > ; > log here:; > /humgen/atgu1/fs03/satterst/DBS_v2.4/hail.heapspace.log; > ; > Has the fix been incorporated into the jar on the cluster?; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly or view it on GitHub; > https://github.com/broadinstitute/hail/issues/263#issuecomment-214538990",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/263#issuecomment-214545407:646,log,log,646,https://hail.is,https://github.com/hail-is/hail/issues/263#issuecomment-214545407,2,['log'],['log']
Testability,"Not sure this is better, but basically my logic is to kill the `crun run` process first. Wait for it to be killed. Set the process = None. Then check if a container exists. If the container exists, then do a deep kill of all child subprocesses. I'm not sure I completely understand where the race condition could occur here.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10855#issuecomment-942624612:42,log,logic,42,https://hail.is,https://github.com/hail-is/hail/pull/10855#issuecomment-942624612,1,['log'],['logic']
Testability,"Not sure why the BatchPoolExecutor test failed, but approving.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9862#issuecomment-760323340:35,test,test,35,https://hail.is,https://github.com/hail-is/hail/pull/9862#issuecomment-760323340,1,['test'],['test']
Testability,"Not that it helps in the commit history, but at least it's somewhere... this PR fixed that the secrets for batch deployment needed the deploy flag on which secret to use depending on whether we're testing or in production.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6168#issuecomment-495361303:197,test,testing,197,https://hail.is,https://github.com/hail-is/hail/pull/6168#issuecomment-495361303,1,['test'],['testing']
Testability,"Note some highlights from the log:; ```; #12 42.27 ./Bio/tmp/Bio-DB-HTS-2.9 - moving files to ./biodbhts; #12 42.27 - making Bio::DB:HTS; #12 42.40 Checking prerequisites...; #12 42.40 requires:; #12 42.40 ! Bio::Root::Version is not installed; #12 42.40 ; #12 42.40 ERRORS/WARNINGS FOUND IN PREREQUISITES. You may wish to install the versions; #12 42.40 of the modules indicated above before proceeding with this installation; #12 42.40 ; #12 42.40 Run 'Build installdeps' to install missing prerequisites.; ```; ```; #13 138.3 Building and testing Test2-Suite-0.000152 ... ! Installing Test2::V0 failed. See /root/.cpanm/work/1682614674.13506/build.log for details. Retry with --force to force install it.; #13 150.9 FAIL; #13 150.9 --> Working on FFI::CheckLib; #13 150.9 Fetching http://www.cpan.org/authors/id/P/PL/PLICEASE/FFI-CheckLib-0.31.tar.gz ... OK; #13 150.9 Configuring FFI-CheckLib-0.31 ... OK; #13 151.1 ==> Found dependencies: Test2::V0, Test2::Require::EnvVar, Test2::Require::Module; #13 151.1 ! Installing the dependencies failed: Module 'Test2::Require::EnvVar' is not installed, Module 'Test2::V0' is not installed, Module 'Test2::Require::Module' is not installed; #13 151.1 ! Bailing out the installation for FFI-CheckLib-0.31. ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12946#issuecomment-1526412230:30,log,log,30,https://hail.is,https://github.com/hail-is/hail/issues/12946#issuecomment-1526412230,3,"['log', 'test']","['log', 'testing']"
Testability,Note that I am not at all convinced that the random tests are providing good coverage: https://github.com/hail-is/hail/issues/1894,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1893#issuecomment-305345167:52,test,tests,52,https://hail.is,https://github.com/hail-is/hail/pull/1893#issuecomment-305345167,1,['test'],['tests']
Testability,"Note that pandas 2.0.0 [removes the deprecated `DataFrame.iteritems()`](https://pandas.pydata.org/docs/whatsnew/v2.0.0.html#removal-of-prior-version-deprecations-changes), which is used by bokeh-1.4.0. That particular old version of bokeh is listed in _hail/python/requirements.txt_ but it is thus incompatible with pandas 2; so one or the other of these pinnings probably needs to be revisited. (This incompatibility has caused the [large_cohort unit test failure](https://github.com/populationgenomics/production-pipelines/actions/runs/4782280056/jobs/8501466504?pr=354#step:5:134) in populationgenomics/production-pipelines#354.)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12906#issuecomment-1519857581:452,test,test,452,https://hail.is,https://github.com/hail-is/hail/pull/12906#issuecomment-1519857581,1,['test'],['test']
Testability,"Note that this is passing tests, except for the timeout issue we're seeing everywhere.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14517#issuecomment-2107719350:26,test,tests,26,https://hail.is,https://github.com/hail-is/hail/pull/14517#issuecomment-2107719350,1,['test'],['tests']
Testability,Note to reviewer: Just changed per variant testing to be handled in blocks with matrix matrix multiplies. Hopefully a bit faster.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1984#issuecomment-320541669:43,test,testing,43,https://hail.is,https://github.com/hail-is/hail/pull/1984#issuecomment-320541669,1,['test'],['testing']
Testability,Note to self that the audit should test for equality here.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12761#issuecomment-1458597618:35,test,test,35,https://hail.is,https://github.com/hail-is/hail/pull/12761#issuecomment-1458597618,1,['test'],['test']
Testability,Note to self to check the logs for error messages before merging!,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12199#issuecomment-1254026870:26,log,logs,26,https://hail.is,https://github.com/hail-is/hail/pull/12199#issuecomment-1254026870,1,['log'],['logs']
Testability,Note to self to look at the logs for this PR before merging to make sure the metadata is actually there.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13219#issuecomment-1610264199:28,log,logs,28,https://hail.is,https://github.com/hail-is/hail/pull/13219#issuecomment-1610264199,1,['log'],['logs']
Testability,"Notes: ; #### 1st & 3rd set of errors. 1st and 3rd set identical, except in 3rd handler:200 (another response.post) hangs first... `ConnectionResetError` errorNum=104.; * May be related: https://github.com/kubernetes/kubernetes/pull/53947. Batch: `kube_event_loop` is always involved. Always:; ```log; Traceback (most recent call last):; File ""/usr/lib/python3.6/site-packages/urllib3/connectionpool.py"", line 384, in _make_request; six.raise_from(e, None); File ""<string>"", line 2, in raise_from; File ""/usr/lib/python3.6/site-packages/urllib3/connectionpool.py"", line 380, in _make_request; httplib_response = conn.getresponse(); File ""/usr/lib/python3.6/http/client.py"", line 1331, in getresponse; response.begin(); File ""/usr/lib/python3.6/http/client.py"", line 297, in begin; version, status, reason = self._read_status(); File ""/usr/lib/python3.6/http/client.py"", line 258, in _read_status; line = str(self.fp.readline(_MAXLINE + 1), ""iso-8859-1""); File ""/usr/lib/python3.6/socket.py"", line 586, in readinto; return self._sock.recv_into(b); socket.timeout: timed out; ```. Seems that the simplest issue may be to increase `read_timeout` past 120 seconds, although depending on the causes of this issue, that may not eliminate the problem, and of course leaves a long delay, which may be unacceptable for the use-case. As for why read takes so long: not 100% sure yet, setting up batch and CI is still incomplete, and I have not triggered this error myself. My guess is that Kubernetes takes too long to generate the response, either due to garbage collection, or simply because the requested information takes N > 120 seconds to return. That would be a very long time for any reasonable response, so either the resource isn't ready and it waits, or there are network connectivity issues. If network issues, not sure what solutions are. If I were on AWS, I would think about using a larger instance, with a higher-bandwidth NIC.; * Possible connection: https://github.com/arangodb/arangodb/issues",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4984#issuecomment-450444389:297,log,log,297,https://hail.is,https://github.com/hail-is/hail/issues/4984#issuecomment-450444389,1,['log'],['log']
Testability,Nothing suspicious there. Something is going wrong in the executors. I think the only way we're gonna solve this is by running a pipeline and looking at the executor logs. I'm at a complete loss for how Jupyter could affect what happens on the executors.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13690#issuecomment-1731963811:166,log,logs,166,https://hail.is,https://github.com/hail-is/hail/issues/13690#issuecomment-1731963811,1,['log'],['logs']
Testability,Now passing tests,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3466#issuecomment-385812703:12,test,tests,12,https://hail.is,https://github.com/hail-is/hail/pull/3466#issuecomment-385812703,1,['test'],['tests']
Testability,Now tests are passing...,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5934#issuecomment-485610023:4,test,tests,4,https://hail.is,https://github.com/hail-is/hail/pull/5934#issuecomment-485610023,1,['test'],['tests']
Testability,"Now that we have the SQL query monitoring, I would love to also see just the simple comparison of the total number of queries we perform over a 1-minute period under high load. We have the tools now to see just what chunk of overall database communication we are cutting down on, which is an achievement in itself. Just need to run the test!",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11346#issuecomment-1036284520:336,test,test,336,https://hail.is,https://github.com/hail-is/hail/pull/11346#issuecomment-1036284520,1,['test'],['test']
Testability,"Now, as in, after this change, or now as in generally?. MatrixRead is now a parameterized IR. It has three public parameters: it has a requested type (typ) and it can drop the rows or columns. It also has a reader that produces a matrix value based on those parameters. There are currently two readers: MatrixRangeReader and MatrixNativeReader (reading a .mt file). MatrixIR.{read, range} produce these MatrixRead nodes from suitable inputs. I didn't follow this in Python, so Python has MatrixRead (corresponding to reading a .mt) and MatrixRange, which have the ""suitable"" inputs and the parser calls MatrixIR.{read, range} when parsing them. Although TableRead isn't organized this way, I did add a TableIR.read. The problem here is that MatrixNativeReader has the spec that comes from reading the metadata, so either I need to (1) open and read the metadata in Python (duplicating the metadata parsing logic), (2) call into Scala to read the metadata, but then re-encode it when I serialize the IR node, or (3) don't include the spec in the serialized form and let Scala read the metadata when parsing. I chose (3).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3896#issuecomment-403049982:906,log,logic,906,https://hail.is,https://github.com/hail-is/hail/pull/3896#issuecomment-403049982,1,['log'],['logic']
Testability,"Nuked GenotypeStream, which includes ""lz4 decompression logic"" (although LZ4Utils is still there in case we want to use it), pending: https://github.com/hail-is/hail/pull/2047. nuked constant vector handling and AC which I think resolves the linreg comment: https://github.com/hail-is/hail/pull/2042",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1140#issuecomment-319507752:56,log,logic,56,https://hail.is,https://github.com/hail-is/hail/issues/1140#issuecomment-319507752,1,['log'],['logic']
Testability,"Nuked `UnsafeRowBuilder` and associated tests. There was a bug in the tests that the stronger asserts in MemoryBuffer caught. Easier to nuke than fix, since we aren't planning to use it.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2074#issuecomment-321102215:40,test,tests,40,https://hail.is,https://github.com/hail-is/hail/pull/2074#issuecomment-321102215,3,"['assert', 'test']","['asserts', 'tests']"
Testability,"OK! Let's put this in. I'll continue to clean up batch today and make new PRs to do so. In the meantime, I'll also do some scale testing.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6600#issuecomment-513258164:129,test,testing,129,https://hail.is,https://github.com/hail-is/hail/pull/6600#issuecomment-513258164,1,['test'],['testing']
Testability,"OK, I added a 1min benchmark",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7962#issuecomment-578331901:19,benchmark,benchmark,19,https://hail.is,https://github.com/hail-is/hail/pull/7962#issuecomment-578331901,1,['benchmark'],['benchmark']
Testability,"OK, I added a pair of simple tests and got everything working. There's one wrinkle: I don't want to ship jars around so I need the executors to have the same jar as the client. That means the need the test jar for the tests. I'm not quite sure how to properly parameterize that in the build system yet, so I'm just leaving it with the test jar for the moment.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6221#issuecomment-499365037:29,test,tests,29,https://hail.is,https://github.com/hail-is/hail/pull/6221#issuecomment-499365037,4,['test'],"['test', 'tests']"
Testability,"OK, I changed _dest_type not to stat the destination if treat_dest_as=Transfer.FILE. I regenerated the copy specs (a few changed) and the test_copy_dest_target_file_is_dir test only fails on the local filesystem. Back to you.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9822#issuecomment-764875037:172,test,test,172,https://hail.is,https://github.com/hail-is/hail/pull/9822#issuecomment-764875037,1,['test'],['test']
Testability,"OK, I cleaned this up a bit. Now stacked on: https://github.com/hail-is/hail/pull/5826. Summary of changes:; - added heal; - pipeline is now batch rather than job centeric; - batch logs page shows logs for all batch jobs; - GET /batches/{id} endpoint now returns entire array of jobs, instead of the state counter and exit_codes",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5814#issuecomment-481079454:181,log,logs,181,https://hail.is,https://github.com/hail-is/hail/pull/5814#issuecomment-481079454,2,['log'],['logs']
Testability,"OK, I don't love specifying it in `hl.init`, but that is implemented here. Assuming the tests pass, then this should work and it also means that users don't have to restart the Dataproc clusters to turn on requester pays, they can `hl.stop` and `hl.init`.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12133#issuecomment-1230566542:88,test,tests,88,https://hail.is,https://github.com/hail-is/hail/pull/12133#issuecomment-1230566542,1,['test'],['tests']
Testability,"OK, I eliminated a bunch of `log.exception` that are either retried or re-raised. I completely eliminated some of them and in other cases I downgraded them to warning.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9980#issuecomment-775247626:29,log,log,29,https://hail.is,https://github.com/hail-is/hail/pull/9980#issuecomment-775247626,1,['log'],['log']
Testability,"OK, I figured out what was happening. The problem wasn't with cerberus (although I'm happy to with my change), it is that json.dump always converts a dictionary key into a string. I had with a key None, and it got turned into the string 'null' in json, because json object values must string keys:. ```; >>> import json; >>> d = {None: 5, 'foo': None}; >>> json.loads(json.dumps(d)); {'null': 5, 'foo': None}; ```. I remove the broken test. Note, I pushed two more changes that probably need a proper review:; - moved jobs validation to batch (from batch_client), I'd been meaning to do that,; - and I wrote the batch validator explicit in the style of the jobs validator (I'd be meaning to do that, too).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7915#issuecomment-575944836:435,test,test,435,https://hail.is,https://github.com/hail-is/hail/pull/7915#issuecomment-575944836,1,['test'],['test']
Testability,"OK, I finally understand why this code change causes the test to pass, and am convinced that this is the wrong change. I removed the assertion in `upcast` (for value IRs) that checks that the requested type is a supertype of the IR type -- this assertion will definitely be violated.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4585#issuecomment-431703672:57,test,test,57,https://hail.is,https://github.com/hail-is/hail/pull/4585#issuecomment-431703672,3,"['assert', 'test']","['assertion', 'test']"
Testability,"OK, I improved the tests two ways:. 1. I allocate a random amount of memory in the region to start so things don't always start at offset 0. 2. I test addRegionValue adding a value at the top level and and a nested level (by allocating a non-unsafe Row when t == TStruct) so it calls through to RVB.addRow. I verified it would have caught the previous errors, and it caught another error (toOff was wrong in addRegionValue because we called currentOffset before allocateRoot). Hopefully good to go now.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2299#issuecomment-336949521:19,test,tests,19,https://hail.is,https://github.com/hail-is/hail/pull/2299#issuecomment-336949521,2,['test'],"['test', 'tests']"
Testability,"OK, I moved the file format test changes to https://github.com/hail-is/hail/pull/11906. This change can go in independently, but #11906 will even out the test job times and make developer experience better. Service backend tests on #11904 which should be representative of a normal PR:. id | name | state | exit_code | duration; -- | -- | -- | -- | --; 118 | test_hail_python_service_backend_0 | Success | Success 🎉 | 24 minutes; 119 | test_hail_python_service_backend_1 | Success | Success 🎉 | 27 minutes; 120 | test_hail_python_service_backend_2 | Success | Success 🎉 | 24 minutes; 121 | test_hail_python_service_backend_3 | Success | Success 🎉 | 41 minutes; 122 | test_hail_python_service_backend_4 | Success | Success 🎉 | 21 minutes. Service backend tests on this PR (albeit with #11906 which evens out test times):. id | name | state | exit_code | duration; -- | -- | -- | -- | --; 118 | test_hail_python_service_backend_0 | Failed | Failure 🤷‍♀️ (1) | 31 minutes; 119 | test_hail_python_service_backend_1 | Success | Success 🎉 | 31 minutes; 120 | test_hail_python_service_backend_2 | Success | Success 🎉 | 28 minutes; 121 | test_hail_python_service_backend_3 | Success | Success 🎉 | 33 minutes; 122 | test_hail_python_service_backend_4 | Success | Success 🎉 | 26 minutes. I think there is almost no effect on service backend test times! We should really see if there's a way to improve the autoscaler & schedule to achieve this on its own.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11902#issuecomment-1152508508:28,test,test,28,https://hail.is,https://github.com/hail-is/hail/pull/11902#issuecomment-1152508508,6,['test'],"['test', 'tests']"
Testability,"OK, I seem to have resolved this error, but now another transient error has dramatically increased; its frequency. I included my test code which was reliably reproducing this error approximately once per run. I ran; this three times using a commit very similar to `main` [1]. All three runs failed:. 1. In run 1, three partitions had this error.; 2. In run 2, one partition had a different error (#13721 to be exact).; 3. In run 3, two partitions had this error. After my fix [2] for this issues bug, the #13721 bug became super common! I saw it 50 times in my first run:; ```; Caused by: is.hail.relocated.com.google.cloud.storage.StorageException: Missing Range header in response; 	|> PUT https://storage.googleapis.com/upload/storage/v1/b/aou_tmp/o?name=tmp/hail/icullIwHC8dQXtq8JU2uDW/aggregate_intermediates/-ntpjdAQ9sKaR8lK26cV0p5790a4d87-9035-41ae-afc6-326f710d9a89&uploadType=resumable&upload_id=ADPycdtl5JSqwvftT4W190_-ueC032I_oZcwLAlVVMFkqp06W4eY8b-XMwf8DeT7If9I7uIgmI_PLCuFsExsT0aEh2b4FrHtAiUktumQbvgl1U0icw; 	|> content-range: bytes */*; 	| ; 	|< HTTP/1.1 308 Resume Incomplete; 	|< content-length: 0; 	|< content-type: text/plain; charset=utf-8; 	|< x-guploader-uploadid: ADPycdtl5JSqwvftT4W190_-ueC032I_oZcwLAlVVMFkqp06W4eY8b-XMwf8DeT7If9I7uIgmI_PLCuFsExsT0aEh2b4FrHtAiUktumQbvgl1U0icw; 	| ; ```. Luckily, that one is actually trivial to fix, we just need to [update to the latest GCS client; library](https://github.com/hail-is/hail/issues/13721#issuecomment-1737924344). # Test Code. ```python3; import hail as hl; import gnomad.utils.sparse_mt. tmp_dir = 'gs://danking/tmp/'; vds_file = 'gs://neale-bge/bge-wave-1.vds'; out = 'gs://danking/foo.vcf.bgz'. vds = hl.vds.read_vds(vds_file); mt = hl.vds.to_dense_mt(vds); t = gnomad.utils.sparse_mt.default_compute_info(mt); t = t.annotate(info=t.info.drop('AS_SB_TABLE')); t = t.annotate(info = t.info.drop(; 'AS_QUALapprox', 'AS_VarDP', 'AS_SOR', 'AC_raw', 'AC', 'AS_SB'; )); t = t.drop('AS_lowqual'). hl.methods.export_vcf(dataset = t,",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13409#issuecomment-1737926184:129,test,test,129,https://hail.is,https://github.com/hail-is/hail/issues/13409#issuecomment-1737926184,1,['test'],['test']
Testability,"OK, I tested my branch twice with stress. No error logs. Many warnings due to known deadlock errors. Otherwise it looks clean. I've pushed those changes onto this branch. Let's merge tomorrow first thing.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10920#issuecomment-956662015:6,test,tested,6,https://hail.is,https://github.com/hail-is/hail/pull/10920#issuecomment-956662015,2,"['log', 'test']","['logs', 'tested']"
Testability,"OK, I think I addressed all the comments. Here is a summary of the code changes I made:; - use *-tokens instead of *-jwt for the session tokens; - db event to clean up sessions,; - there was a bunch of legacy garbage in batch/ and batch/Makefile that I nuked,; - added hailtop test for deploy_config,; - fixed up hail ServiceBackend (which isn't actually tested now); - create_user => insert_user. I think there is still some legacy garbage in apiserver/, but that's not being deployed right now so I just left it. Let me know if I missed anything.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6892#issuecomment-528993572:277,test,test,277,https://hail.is,https://github.com/hail-is/hail/pull/6892#issuecomment-528993572,2,['test'],"['test', 'tested']"
Testability,"OK, I think I addressed the comments and it is ready for another look. I tested the batch2 UI witih deploy dev and it seems good.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7530#issuecomment-555241754:73,test,tested,73,https://hail.is,https://github.com/hail-is/hail/pull/7530#issuecomment-555241754,1,['test'],['tested']
Testability,"OK, I think I addressed the comments. I will do a dry run through to make everything is working. I will test this again from scratch, but I think it's more important to get this in and focus on building automated tests for it rather than spend time hand testing.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9713#issuecomment-782270602:104,test,test,104,https://hail.is,https://github.com/hail-is/hail/pull/9713#issuecomment-782270602,3,['test'],"['test', 'testing', 'tests']"
Testability,"OK, I think this is ready to go.; - Migration tested with passing colors (!); - I disabled the check incremental loop (but left the code in for future debugging); - I updated estimated-current.txt with the latest from improve-cancel.sql",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7933#issuecomment-577704626:46,test,tested,46,https://hail.is,https://github.com/hail-is/hail/pull/7933#issuecomment-577704626,1,['test'],['tested']
Testability,"OK, I verified python tests pass. Should be ready for a look.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2588#issuecomment-352128339:22,test,tests,22,https://hail.is,https://github.com/hail-is/hail/pull/2588#issuecomment-352128339,1,['test'],['tests']
Testability,"OK, I will run the stress test later this week. It sounds like the stress test is really important to convincing us that batch is correct. I want to migrate that from a manual process into a normal test. I'm going to add a performance test that requires a 10,000 or 1,000 job /bin/true batch to finish in ~8 or 0.8 minutes. Let's see if we can add correctness checks to that that satisfy the needs of stress.py",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10985#issuecomment-951320966:26,test,test,26,https://hail.is,https://github.com/hail-is/hail/pull/10985#issuecomment-951320966,4,['test'],['test']
Testability,"OK, I won't be able to fix this. @ehigham @patrick-schultz @daniel-goldstein some combo of you three can probably figure it out. The local backend tests that hit requester pays buckets are failing with new Spark. New Spark needs new GCS hadoop connector (see the Dockerfiles). New GCS hadoop connector has [brand new configuration parameters](https://github.com/GoogleCloudDataproc/hadoop-connectors/blob/v3.0.0/gcs/INSTALL.md). Somehow I managed to make the normal Spark backend work correctly but the Local backend (which still, afaik, uses Spark & Hadoop for filesystems) is still trying to pick up CI's credentials instead of the test account's credentials. ```; E hail.utils.java.FatalError: GoogleJsonResponseException: 403 Forbidden; E GET https://storage.googleapis.com/storage/v1/b/hail-test-requester-pays-fds32/o/zero-to-nine?fields=bucket,name,timeCreated,updated,generation,metageneration,size,contentType,contentEncoding,md5Hash,crc32c,metadata&userProject=hail-vdc; E {; E ""code"": 403,; E ""errors"": [; E {; E ""domain"": ""global"",; E ""message"": ""ci-910@hail-vdc.iam.gserviceaccount.com does not have serviceusage.services.use access to the Google Cloud project. Permission 'serviceusage.services.use' denied on resource (or it may not exist)."",; E ""reason"": ""forbidden""; E }; E ],; E ""message"": ""ci-910@hail-vdc.iam.gserviceaccount.com does not have serviceusage.services.use access to the Google Cloud project. Permission 'serviceusage.services.use' denied on resource (or it may not exist).""; E }; E ; E Java stack trace:; E java.io.IOException: Error accessing gs://hail-test-requester-pays-fds32/zero-to-nine; E 	at com.google.cloud.hadoop.repackaged.gcs.com.google.cloud.hadoop.gcsio.GoogleCloudStorageImpl.getObject(GoogleCloudStorageImpl.java:1986); E 	at com.google.cloud.hadoop.repackaged.gcs.com.google.cloud.hadoop.gcsio.GoogleCloudStorageImpl.getItemInfo(GoogleCloudStorageImpl.java:1882); E 	at com.google.cloud.hadoop.repackaged.gcs.com.google.cloud.hadoop.gcsio.GoogleCloud",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14158#issuecomment-1969609236:147,test,tests,147,https://hail.is,https://github.com/hail-is/hail/pull/14158#issuecomment-1969609236,3,['test'],"['test', 'test-requester-pays-', 'tests']"
Testability,"OK, I'm not sure how to fix this but the work is to explain to the GCS Hadoop Connector which credentials we want it to use. See the failure here: https://batch.hail.is/batches/8136069/jobs/49 . It uses CI's credentials instead of the test credentials. We use core-site.xml to do this in Spark <3.5, but the GCS connector is different in Spark 3.5 and it uses different configuration parameters. My most recent change did not successfully configure it. Daniel G can help you a bit with credentials in Batch if that's necessary but the real work is to figure out how to tell the GCS Hadoop Connector to use the /gsa-key/key.json file.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14158#issuecomment-1961672844:235,test,test,235,https://hail.is,https://github.com/hail-is/hail/pull/14158#issuecomment-1961672844,1,['test'],['test']
Testability,"OK, `batch-svc` has privileges to create/delete/list/get/etc. persistentvolumeclaims in batch-pods now. `test-svc` always had privileges to do everything in the `test` namespace.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5503#issuecomment-469421690:105,test,test-svc,105,https://hail.is,https://github.com/hail-is/hail/pull/5503#issuecomment-469421690,2,['test'],"['test', 'test-svc']"
Testability,"OK, benchmarks added for row, col, and entry export on an MT.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6841#issuecomment-521656677:4,benchmark,benchmarks,4,https://hail.is,https://github.com/hail-is/hail/pull/6841#issuecomment-521656677,1,['benchmark'],['benchmarks']
Testability,"OK, but I'm not sure it's the right change to make. Now some jobs will fail silently.; I think the right thing to do would be to change how benchmark jobs are run and always collect results, regardless of job outcome (making it resiliant to some benchmark files not being in their expected locations, which we'll have to do anyway). That way, you'd still see the failures in the batch.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12838#issuecomment-1527578232:140,benchmark,benchmark,140,https://hail.is,https://github.com/hail-is/hail/pull/12838#issuecomment-1527578232,2,['benchmark'],['benchmark']
Testability,"OK, code is stable again, scale tests are working. Run with:. ```; ~/hail/notebook $ PYTHONPATH=../hail/python:../gear python3 scale-test.py 10 <workshop> <password>; ```. ```; successes: 10 / 10 = 1.0; mean time: 2.3504347085952757; max time: 3.135228157043457; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7112#issuecomment-534603185:32,test,tests,32,https://hail.is,https://github.com/hail-is/hail/pull/7112#issuecomment-534603185,2,['test'],"['test', 'tests']"
Testability,"OK, cool. Thanks for adding the dataproc tests! I'll approve this once the current release goes in, then we'll try this out for the next release, 0.2.38.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8550#issuecomment-613603462:41,test,tests,41,https://hail.is,https://github.com/hail-is/hail/pull/8550#issuecomment-613603462,1,['test'],['tests']
Testability,"OK, got these changes in -- thanks @cseed! Still waiting for testing...",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/979#issuecomment-254556974:61,test,testing,61,https://hail.is,https://github.com/hail-is/hail/pull/979#issuecomment-254556974,1,['test'],['testing']
Testability,"OK, here's the most recent failure https://batch.hail.is/batches/8090848/jobs/21993. Don't be duped by my bad log message! There were zero transient errors. I added a log statement that increments the number of errors and prints that message after *every* error, even if it's not transient. . This time it was partition 20053 (we keep moving earlier?). I forgot to catch and rethrow the error with the toString of the input buffer, but I'm not sure there is much to learn from that anyway. FWIW, 20053 was successful in the two previous executions:; 1. https://batch.hail.is/batches/8069235/jobs/21993; 2. https://batch.hail.is/batches/8083195/jobs/21993. Interestingly the peak bytes are not consistent:; ```; 2023-10-24 19:59:47.756 : INFO: TaskReport: stage=0, partition=20053, attempt=0, peakBytes=58394624, peakBytesReadable=55.69 MiB, chunks requested=5513, cache hits=5501; 2023-10-24 19:59:47.759 : INFO: RegionPool: FREE: 55.7M allocated (7.7M blocks / 48.0M chunks), regions.size = 21, 0 current java objects, thread 9: pool-2-thread-1; ```; ```; 2023-11-08 19:42:40.000 : INFO: TaskReport: stage=0, partition=20053, attempt=0, peakBytes=61343744, peakBytesReadable=58.50 MiB, chunks requested=5513, cache hits=5501; 2023-11-08 19:42:40.000 : INFO: RegionPool: FREE: 58.5M allocated (10.5M blocks / 48.0M chunks), regions.size = 21, 0 current java objects, thread 10: pool-2-thread-2; ```. Whatever is causing this bug is rare. Approximately once every 31,000 partitions. The CDA IR is the same except for a couple iruid names and the order of the aggregators in the aggregator array is swapped (collect & take vs take & collect). AFAICT, the GCS Java library doesn't do any streaming verification of the hash. We could compute the CRC32c in a streaming manner and fail if/when we get to the end of the object, but this wouldn't work when we read intervals. I'm really mystified.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13979#issuecomment-1834606385:110,log,log,110,https://hail.is,https://github.com/hail-is/hail/issues/13979#issuecomment-1834606385,2,['log'],['log']
Testability,"OK, if I add the following additional dependencies in gradle:. ```; 	include(dependency('net.sourceforge.f2j:arpack_combined_all:0.1')); 	include(dependency('com.github.fommil.netlib:native_system-java:1.1')); 	include(dependency('com.github.fommil.netlib:netlib-native_system-linux-x86_64:1.1')); 	include(dependency('com.github.fommil.netlib:netlib-native_ref-linux-x86_64:1.1')); 	include(dependency('com.github.fommil:jniloader:1.1')); ```. it correctly loads on Linux:. > 2018-04-30 00:13:07 JniLoader: INFO: successfully loaded /tmp/jniloader8608320282306924695netlib-native_system-linux-x86_64.so. I'll test the analog on OSX tomorrow. Are you sure we're getting natives on Dataproc now? This definitely worked in the past. I get a 4x speedup (in the 1024 cases):. 214 ms ± 19.2 ms per loop (mean ± std. dev. of 7 runs, 1 loop each). Now we're only 35x slower.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3335#issuecomment-385310865:610,test,test,610,https://hail.is,https://github.com/hail-is/hail/pull/3335#issuecomment-385310865,1,['test'],['test']
Testability,"OK, if you merge https://github.com/danking/hail/tree/add-version-endpoint (`add-version-endpoint` in my repo, `github.com/danking/hail`) this should pass the tests and we can get it merged!",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10085#issuecomment-809670037:159,test,tests,159,https://hail.is,https://github.com/hail-is/hail/pull/10085#issuecomment-809670037,1,['test'],['tests']
Testability,"OK, in the interest of fixing these problems for people, let's merge without tests. Testing that two plots look the same will have to be future work. I think the environment/OS is influencing image generation in some subtle way such that the generated plots images are not the same.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12768#issuecomment-1480307816:77,test,tests,77,https://hail.is,https://github.com/hail-is/hail/pull/12768#issuecomment-1480307816,2,"['Test', 'test']","['Testing', 'tests']"
Testability,"OK, now passes the tests. Not sure if `minRep` should be called in `VariantSubgen` or in `LoadBGenTest` (as I did). All depends on how `VariantSubgen` is used (e.g. if testing minRep)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1656#issuecomment-293058402:19,test,tests,19,https://hail.is,https://github.com/hail-is/hail/pull/1656#issuecomment-293058402,2,['test'],"['testing', 'tests']"
Testability,"OK, plenty of tests. Just need to know where the benchmarks go.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6841#issuecomment-521651919:14,test,tests,14,https://hail.is,https://github.com/hail-is/hail/pull/6841#issuecomment-521651919,2,"['benchmark', 'test']","['benchmarks', 'tests']"
Testability,"OK, should be fixed. apiserver depends on hail, runs its own tests now.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5624#issuecomment-474138152:61,test,tests,61,https://hail.is,https://github.com/hail-is/hail/pull/5624#issuecomment-474138152,1,['test'],['tests']
Testability,"OK, so the big insight is that ""InstanceConfig"" is really just ""ResourcesForAParticularInstance"" (well, and, sometimes, ""ResourcesOfARepresentativeInstance""). I trimmed the InstanceConfig down *significantly* removing the ""vm_config"". Now the InstanceConfig is cheap and easy to create and there's no circularity between vm_config and instance config. I pushed that through everywhere and then abstracted the common create_instance logic for pool and job-private into InstanceCollection. With both of those changes, I was able to modify the ResourceManager's API to expose methods for constructing instance configs. However, the instance config isn't critical to the operation of the ResourceManager. It's just an interface for communicating an instance's resources to the rest of the code base.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10920#issuecomment-956500279:432,log,logic,432,https://hail.is,https://github.com/hail-is/hail/pull/10920#issuecomment-956500279,1,['log'],['logic']
Testability,"OK, so, I took the GRCh38 file that we test against and named it `bar`. I downloaded the gist and named it `foo`. | header | footer | success? |; |---|---|---|; |foo|bar|success|; |bar|bar|success|; |bar|foo|failure|; |foo|foo|failure|. So clearly the issue is the variants. Here's an example of running on just the first handful of variants: https://batch.hail.is/batches/8089052. ```; chr1	1339585	.	G	A	.	.	.; chr1	24907372	.	C	T	.	.	.; chr1	36859143	.	G	T	.	.	.; chr1	37969436	.	T	C	.	.	.; chr1	40416828	.	G	A	.	.	.; chr1	41581842	.	G	A	.	.	.; chr1	43920822	.	T	C	.	.	.; chr1	45327881	.	G	A	.	.	.; chr1	46817055	.	CT	C	.	.	.; chr1	54999203	.	C	T	.	.	.; chr1	65218884	.	C	T	.	.	.; chr1	102962250	.	G	T	.	.	.; chr1	111756087	.	G	C	.	.	.; chr1	113881802	.	G	A	.	.	.; chr1	117920205	.	G	A	.	.	.; chr1	151408784	.	G	C	.	.	.; chr1	151428261	.	C	T	.	.	.; chr1	152305539	.	G	C	.	.	.; chr1	152884596	.	C	A	.	.	.; chr1	153933240	.	C	T	.	.	.; chr1	156624012	.	G	A	.	.	.; chr1	159205821	.	CT	C	.	.	.; chr1	173803162	.	G	T	.	.	.; chr1	179813831	.	G	A	.	.	.; chr1	179917551	.	T	C	.	.	.; chr1	180935962	.	G	C	.	.	.; chr1	180941229	.	G	A	.	.	.; chr1	186893053	.	C	A	.	.	.; chr1	201363319	.	G	A	.	.	.; chr1	223749094	.	A	G	.	.	.; chr1	224294328	.	G	A	.	.	.; chr1	235809337	.	G	A	.	.	.; chr1	241592073	.	G	T	.	.	.; chr2	9376947	.	G	A	.	.	.; chr2	11618532	.	C	T	.	.	.; ```. We can see the characteristic super high memory use.; <img width=""570"" alt=""Screenshot 2023-11-28 at 16 35 26"" src=""https://github.com/hail-is/hail/assets/106194/e5dfa586-5c77-479b-8050-9b0b7d2fe319"">. ---. If we use the same header, but just one variant, it succeeds, but notice that the RAM use grows rapidly. https://batch.hail.is/batches/8089064/jobs/3; ```; chr1	241592073	.	G	T	.	.	.; ```; <img width=""577"" alt=""Screenshot 2023-11-28 at 16 37 39"" src=""https://github.com/hail-is/hail/assets/106194/90c5ab45-9ca4-43e0-9a97-bf6032863f32"">. ---. If we use the same header with this variant from our (successful) test VCF, the RAM use grows",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13989#issuecomment-1830846344:39,test,test,39,https://hail.is,https://github.com/hail-is/hail/issues/13989#issuecomment-1830846344,1,['test'],['test']
Testability,"OK, so, this is apparently an issue where browsers have not yet really implemented the standard correctly. From my reading of [HTML 2.6.4](https://html.spec.whatwg.org/#cors-settings-attributes), `crossorigin=""anonymous""` ought to be sufficient for requests to the same origin as the page containing the script tag. Jake Archibald has an informative [blog post](https://jakearchibald.com/2017/es-modules-in-browsers/) about modules. He links to a [demo](https://module-script-tests-sreyfhwvpq.now.sh/cookie-page) of three cross origin configurations. The three options are:; ```; <script type=""module"" src=""cookie-script""></script>; <script type=""module"" crossorigin="""" src=""cookie-script?1""></script>; <script type=""module"" crossorigin=""use-credentials"" src=""cookie-script?2""></script>; ```; I'm using Safari Version 13.1 (14609.1.20.111.8). I usually only see the very last script working. However, inexplicably, I have seen the first one very rarely work. All I've been doing is refreshing here and there as I try to understand this. The Safari inspector confirms that the cookie is only sent with thee last option. So, anyway, I'm adding `crossorigin=""use-credentials""`.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8928#issuecomment-639218007:476,test,tests-sreyfhwvpq,476,https://hail.is,https://github.com/hail-is/hail/pull/8928#issuecomment-639218007,1,['test'],['tests-sreyfhwvpq']
Testability,"OK, so, this really feels like bad data. We just merged https://github.com/hail-is/hail/commit/98adcce1d07001995b0819fd6afe161bf34ba840 which fixed https://github.com/hail-is/hail/issues/13979 . Google Cloud Storage's Java library was very rarely returning just flat-out bad data. The frequency of occurrence on one particularly large pipeline appears to be 1/30000 tasks (0.003% or 3 in 100,000). The tasks were reading two files, the larger of which was 131MiB. The Java library reads in 8MiB chunks so that's at least 17 network requests per partition. That puts the frequency of this closer to 1 in 1,000,000 requests or 1 in 10TiB of data read. Before we had Zstandard, it seems that this data corruption either (a) was unnoticed (b) caused a rare decoding error or (c) caused segfaults. After we added Zstandard (0.2.119), decompression often failed due to corrupt data. It seems to me that Zstandard more aggressively verifies integrity than LZ4 does. OK, so, when was this bug introduced in Hail? As far as I can tell, this new code path was added in google-cloud-storage 2.17.0 almost one year ago: https://github.com/googleapis/java-storage/commit/94cd2887f22f6d1bb82f9929b388c27c63353d77 . We upgraded to 2.17.1 (😭 ) in Hail 0.2.109 https://github.com/hail-is/hail/commit/fec0cc2263c04c00e02cef5dda8ec46916717152 . All of the attempts above could have been plagued by this rare transient data corruption error. OK, action items:. - [ ] Ask Cal and Lindo to try their pipelines again with the next release of Hail 0.2.127.; - [x] Hail must introduce large-scale testing before releases. We, sadly, cannot assume our underlying storage libraries are reliable. https://github.com/hail-is/hail/issues/14082. Once the first action item is successfully completed, I will close this issue. For the second action item, I have created a separate ticket.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13688#issuecomment-1845732114:1572,test,testing,1572,https://hail.is,https://github.com/hail-is/hail/issues/13688#issuecomment-1845732114,1,['test'],['testing']
Testability,"OK, so. I added test_dataproc as a separate build step and pulled that code out of the makefile into a script. I'm running a dev-deploy test of it here: ~~https://ci.hail.is/batches/32232~~. I added a commit to this branch (not present in the aforementioned dev deploy) that exits 0 if the git tag already exists. This prevents running the Dataproc tests on every master commit. I broadened the scope to include `dev`. This means that developers can run a deploy with `hailctl dev deploy hail-is/hail:master deploy`. I haven't tested the deploy step. I volunteer to do the next deploy and deal with whatever is broken. EDIT: Copying data between jobs loses the chmod settings so I had to switch away from `./`, that was why the last batch failed. https://ci.hail.is/batches/32237",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8533#issuecomment-613147506:136,test,test,136,https://hail.is,https://github.com/hail-is/hail/pull/8533#issuecomment-613147506,3,['test'],"['test', 'tested', 'tests']"
Testability,"OK, thanks for the pushback. This is ready for another look. Here is my understanding of the semantics of partitioners and preserved keys:. 1. A TableStage from a lowered TableIR must have a partitioner that begins with the table key, but the partitioner can have a longer key. That partitioner need not be strict; consumers that require strictness like TableAggregateByKey or TableDistinct will strictify their lowered children. 2. The lowering rule for TableKeyBy makes no assertion about the number of preserved key fields. It is possible for client code to pass a TableKeyBy IR with 0 preserved key fields, which will result in a correct but possibly unperformant execution. We will document this when we document the IR system in several months.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8649#issuecomment-623771435:475,assert,assertion,475,https://hail.is,https://github.com/hail-is/hail/pull/8649#issuecomment-623771435,1,['assert'],['assertion']
Testability,"OK, thanks, will update the tests.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5509#issuecomment-468830620:28,test,tests,28,https://hail.is,https://github.com/hail-is/hail/pull/5509#issuecomment-468830620,1,['test'],['tests']
Testability,"OK, this PR basically works except we're encountering OOMs somewhat often. I'm trying to track down which tests are triggering the OOMs, but its a bit tricky because the OOMKiller doesn't necessarily kill the test which is using a ton of memory.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11194#issuecomment-1034272076:106,test,tests,106,https://hail.is,https://github.com/hail-is/hail/pull/11194#issuecomment-1034272076,2,['test'],"['test', 'tests']"
Testability,"OK, this is now higher priority for me. The Query-on-Batch tests are absolutely hammering the database with huge spikes in deadlock errors during working hours (when deploys trigger tests).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11352#issuecomment-1039618265:59,test,tests,59,https://hail.is,https://github.com/hail-is/hail/pull/11352#issuecomment-1039618265,2,['test'],['tests']
Testability,"OK, this is working and ready for review. I tested manually that on a variety of node types, we both (1) get the expected number of containers (all the cores in the cluster are used) and (2) we get the right OOM error instead of container crashing. Your comment is addressed -- we always call increment before actually allocating, so we won't exceed the threshold.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11016#issuecomment-964540617:44,test,tested,44,https://hail.is,https://github.com/hail-is/hail/pull/11016#issuecomment-964540617,1,['test'],['tested']
Testability,"OK, this passes all the tests except for `test_vcf_parser_golden_master__gvcf_GRCh37` which inexplicably hangs. I've marked that as skip. I've attached the WIP tag because the longest tests now take 47 minutes. I'll leave this PR up as a canary for when a `main` change fails service tests. However, I won't merge it until we improve test latency. cc: @tpoterba",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11444#issuecomment-1069516954:24,test,tests,24,https://hail.is,https://github.com/hail-is/hail/pull/11444#issuecomment-1069516954,4,['test'],"['test', 'tests']"
Testability,"OK, this should do it. I'm not sure why we passed the headers when logging in, we asked to login so the old creds are irrelevant.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7020#issuecomment-529152351:67,log,logging,67,https://hail.is,https://github.com/hail-is/hail/pull/7020#issuecomment-529152351,2,['log'],"['logging', 'login']"
Testability,"OK, well, I'll remove the variant inequality tests for now, but I think we should figure out how to interval query a string-keyed table.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12484#issuecomment-1320225527:45,test,tests,45,https://hail.is,https://github.com/hail-is/hail/pull/12484#issuecomment-1320225527,1,['test'],['tests']
Testability,"OK, well. This PR modifies those tests to use the new printed form, which was a significant improvement to my development experience of the Shuffler. I also fixed tuples to print with parentheses instead of brackets.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8191#issuecomment-592574334:33,test,tests,33,https://hail.is,https://github.com/hail-is/hail/pull/8191#issuecomment-592574334,1,['test'],['tests']
Testability,"OK.; ```; [root@tele-1 ~]# pyspark --conf spark.sql.files.openCostInBytes=1099511627776 --conf spark.sql.files.maxPartitionBytes=1099511627776 --conf spark.hadoop.parquet.block.size=1099511627776 --conf spark.serializer=org.apache.spark.serializer.KryoSerializer; Python 2.7.5 (default, Nov 6 2016, 00:28:07) ; [GCC 4.8.5 20150623 (Red Hat 4.8.5-11)] on linux2; Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; Using Spark's default log4j profile: org/apache/spark/log4j-defaults.properties; Setting default log level to ""WARN"".; To adjust logging level use sc.setLogLevel(newLevel).; 17/08/10 09:10:21 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable; 17/08/10 09:10:21 WARN SparkConf: ; SPARK_CLASSPATH was detected (set to '/opt/Software/hail/build/libs/hail-all-spark.jar').; This is deprecated in Spark 1.0+. Please instead use:; - ./spark-submit with --driver-class-path to augment the driver classpath; - spark.executor.extraClassPath to augment the executor classpath; ; 17/08/10 09:10:21 WARN SparkConf: Setting 'spark.executor.extraClassPath' to '/opt/Software/hail/build/libs/hail-all-spark.jar' as a work-around.; 17/08/10 09:10:21 WARN SparkConf: Setting 'spark.driver.extraClassPath' to '/opt/Software/hail/build/libs/hail-all-spark.jar' as a work-around.; Welcome to; ____ __; / __/__ ___ _____/ /__; _\ \/ _ \/ _ `/ __/ '_/; /__ / .__/\_,_/_/ /_/\_\ version 2.0.2; /_/. Using Python version 2.7.5 (default, Nov 6 2016 00:28:07); SparkSession available as 'spark'.; ```; ----------------------------; ```; >>> rdd = sc.textFile('/hail/test/BRCA1.raw_indel.vcf'); >>> from hail import *; >>> hc = HailContext(sc); hail: info: SparkUI: http://192.168.1.4:4040; Welcome to; __ __ <>__; / /_/ /__ __/ /; / __ / _ `/ / /; /_/ /_/\_,_/_/_/ version 0.1-0320a61; ```; ----------------------------------; ```; >>> vds = hc.import_vcf('/hail/test/BRCA1.raw_indel.vcf'); hail: warning: `/hail/test/",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/2076#issuecomment-321424071:531,log,log,531,https://hail.is,https://github.com/hail-is/hail/issues/2076#issuecomment-321424071,2,['log'],"['log', 'logging']"
Testability,"Observed again https://batch.hail.is/batches/7942284/jobs/203. This method isn't threaded at all: https://github.com/hail-is/hail/blob/5d545c8d9fb474ea211e350c5dc48c599db6f5ea/hail/src/test/scala/is/hail/fs/FSSuite.scala#L339-L368. The temporary location is drawn as 62 choose 22. So, odds of collision are 3 * 10^16. ~~I can't find the referenced case analysis in Google's latest code. [It is present in this fork](https://github.com/leogamas/java-storage/blob/2af8dfd95cdebc9e4d8252b0bbe3f092844d9f2c/google-cloud-storage/src/main/java/com/google/cloud/storage/BlobWriteChannel.java#L68-L198) from a few years ago.~~. Here's the [referenced case analysis in 2.17.1](https://github.com/googleapis/java-storage/blame/v2.17.1/google-cloud-storage/src/main/java/com/google/cloud/storage/BlobWriteChannel.java). There seems to have been a rewrite [two months ago](https://github.com/googleapis/java-storage/blame/main/google-cloud-storage/src/main/java/com/google/cloud/storage/BlobWriteChannel.java) (here's [the main commit](https://github.com/googleapis/java-storage/commit/1b52a1053130620011515060787bada10c324c0b)). That landed in [2.25.0](https://github.com/googleapis/java-storage/releases/tag/v2.25.0) which was released in July. ```; is.hail.relocated.com.google.cloud.storage.StorageException: Unable to recover in upload.; This may be a symptom of multiple clients uploading to the same upload session. For debugging purposes:; uploadId: https://storage.googleapis.com/upload/storage/v1/b/hail-test-ezlis/o?name=fs-suite-tmp-2LzGioRNy6RqIS2pfXIoSO&uploadType=resumable&upload_id=ADPycdvZ5HhnGfOKt5TE1qXWiHpqIpZnXVTYWuWUCXNPRF9HqyCB-4LvRsxNX6SUWRgk13pYrzYaa9-wXlvNZt1oct0ptaEz0bS3; chunkOffset: 16777216; chunkLength: 8388608; localOffset: 268435456; remoteOffset: 285212672; lastChunk: false. 	at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.unrecoverableState(BlobWriteChannel.java:131); 	at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.unrecoverableState(BlobWr",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911:185,test,test,185,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911,1,['test'],['test']
Testability,"Obviously, look forward to feedback on the UI and let me know if you run into any UI bugs. Another todo that I've started:; - write a UI testing playbook to enumerate all the UI interactions we want to test (by hand) to validate this code.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7112#issuecomment-534267706:137,test,testing,137,https://hail.is,https://github.com/hail-is/hail/pull/7112#issuecomment-534267706,2,['test'],"['test', 'testing']"
Testability,"Obviously. I think we've loosely decoupled review from passing tests in practice. If the code looks good, you can approve it, and I will merge in when it is fixed. If the fix is non-trivial, it is on the author to dismiss and request additional review.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3322#issuecomment-379576871:63,test,tests,63,https://hail.is,https://github.com/hail-is/hail/pull/3322#issuecomment-379576871,1,['test'],['tests']
Testability,"Oh I guess uniroot is wrong, that's why I added this test 😅. I'll fix.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3776#issuecomment-398354200:53,test,test,53,https://hail.is,https://github.com/hail-is/hail/pull/3776#issuecomment-398354200,1,['test'],['test']
Testability,"Oh right sorry that doesn't make the Linux prebuilt, which you need to build locally on Linux and check in. CI should build those before testing but doesn't yet. The workaround @catoverdrive showed me when I had to remake the prebuilt was to build it in a docker container with the CI image on my machine. Would be happy to help you get them built tomorrow and/or make the appropriate updates to CI and deploy",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6083#issuecomment-492911668:137,test,testing,137,https://hail.is,https://github.com/hail-is/hail/pull/6083#issuecomment-492911668,1,['test'],['testing']
Testability,"Oh, and the app is meant to operate behind HTTPS; when deployed, running the web app with ; `npm run start` instead of `npm run prod-test` will enable secureOnly cookies.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4931#issuecomment-454272121:133,test,test,133,https://hail.is,https://github.com/hail-is/hail/pull/4931#issuecomment-454272121,1,['test'],['test']
Testability,"Oh, breaking change ➡️ http://discuss.hail.is/t/log-of-breaking-changes-in-0-2-beta/454",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3629#issuecomment-392957336:48,log,log-of-breaking-changes-in-,48,https://hail.is,https://github.com/hail-is/hail/pull/3629#issuecomment-392957336,1,['log'],['log-of-breaking-changes-in-']
Testability,"Oh, good catch. This is something we can also test for in the performance test suite: compute and use twice.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5416#issuecomment-466480355:46,test,test,46,https://hail.is,https://github.com/hail-is/hail/pull/5416#issuecomment-466480355,2,['test'],['test']
Testability,"Oh, man. I think we should have a new kind of test suite, PropertySuite (and SparkPropertySuite, or a Spark mixin) which just declares a bunch of properties to verify, like the current check.Properties (which can maybe go away). Thoughts?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/649#issuecomment-241138084:46,test,test,46,https://hail.is,https://github.com/hail-is/hail/pull/649#issuecomment-241138084,1,['test'],['test']
Testability,"Oh, that's easy, `make test-dataproc`, doing that now.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8150#issuecomment-591010047:23,test,test-dataproc,23,https://hail.is,https://github.com/hail-is/hail/pull/8150#issuecomment-591010047,1,['test'],['test-dataproc']
Testability,"Oh, woah, that test does look wrong. It's concerning that its suddenly failing. I'm not sure I care too much about tracking down exactly which dependency change caused this. We should fix the test obviously. We should add a test that verifies both `?a` and `?` have the expected data (in particular, that we didn't overwrite one with the other!).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11974#issuecomment-1276854186:15,test,test,15,https://hail.is,https://github.com/hail-is/hail/pull/11974#issuecomment-1276854186,3,['test'],['test']
Testability,"Ok @chrisvittal, tests are passing now",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11847#issuecomment-1148532911:17,test,tests,17,https://hail.is,https://github.com/hail-is/hail/pull/11847#issuecomment-1148532911,1,['test'],['tests']
Testability,"Ok solved that and a related issue. Should be good to review, tests pass.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7687#issuecomment-563899553:62,test,tests,62,https://hail.is,https://github.com/hail-is/hail/pull/7687#issuecomment-563899553,1,['test'],['tests']
Testability,"Ok, I finally figured out why the test wasn't picking up the tokens. This is going to be fairly useless to users unless/until we also bundle in a dev config, although it definitely should suffice for what I need to do. Thoughts on doing that? (either here or in a separate PR?) I imagine the config would just be like {location: gce, namespace: $default_ns} but I'm not sure if that would leads to issues?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9437#issuecomment-691234229:34,test,test,34,https://hail.is,https://github.com/hail-is/hail/pull/9437#issuecomment-691234229,1,['test'],['test']
Testability,"Ok, I had to fix some shit with gradle so that it doesn't try to call git when configuring tasks. Should pass tests now. I _hate_ gradle.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4066#issuecomment-410318525:110,test,tests,110,https://hail.is,https://github.com/hail-is/hail/pull/4066#issuecomment-410318525,1,['test'],['tests']
Testability,"Ok, I think I'm getting a much better understanding of the situation, thank you! I think this is a lot easier for at least me to understand and if I'm not mistaken, it's mostly just moving around of the same code into `JobSpec`, right? I think `submit` is a lot easier to follow now, though I do sympathize with the pain of the three round-trips for small updates. What do you think about the following proposal?. 1. Jobs are always submitted to the server with job_ids relative to the update that is being submitted (sorry for the complete reversal, this is just an idea!). This shouldn't have any affect on the current create/create-fast since only 1 update means relative and absolute job ids are the same. This also means that the client doesn't need to know what the `start_job_id` is ahead of submitting a bunch. Submitting the update could return the `start_job_id` such that the client can rectify its local `Job` objects with absolute IDs like you do in `_get_job_specs_as_json` after the fact. The server will take care of doing `absolute_job_id = update_start_job_id + in_update_job_id`.; 2. parent_ids are represented as positive integers that are tagged with a type, either `in-update` or `absolute`. This is very similar to what you were previously doing with negative numbers, but I think baking it into the schema is going to be less foot-gunny than negative numbers, and the client doesn't have to do any special logic of counting backwards. Sorry if it's similar to what you were doing before but I think it has taken me a while to fully understand the limitations here. I also think it wouldn't take much changes to this current client implementation to do this.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12010#issuecomment-1217244185:1430,log,logic,1430,https://hail.is,https://github.com/hail-is/hail/pull/12010#issuecomment-1217244185,1,['log'],['logic']
Testability,"Ok, I've addressed your comment, corrected requiredness inference for `PartitionNativeWriter` and `SplitPartitionWriter` and revamped things so that the key is not determined based on whether or not there is an index. I've also bumped file version and regenerated files. . I'd be interested to see what you think about testing / whether there's more testing you would do. This is harmless change right now if all the normal tests pass since it's just adding a new metadata field that's unused save for a few tests, but we don't want to start marking files ""distinctlyKeyed"" that aren't and then run into problems down the road when we implement the new join behavior.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11151#issuecomment-1015626695:319,test,testing,319,https://hail.is,https://github.com/hail-is/hail/pull/11151#issuecomment-1015626695,4,['test'],"['testing', 'tests']"
Testability,"Ok, I've moved the tests from their own test suite into TableIR, and adjusted the `assertEvalsTo` stuff to go through `SparkBackend`. . @danking I had to add `ArrayFlatMap` to cxx.Emit in order to get the relevant tests to start actually getting compiled through the SparkBackend. It's a pretty straightforward modification of the ArrayMap logic above it, and it's being tested through all the IRSuite tests, but if you'd like me to break it out, please let me know.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5127#issuecomment-454913111:19,test,tests,19,https://hail.is,https://github.com/hail-is/hail/pull/5127#issuecomment-454913111,7,"['assert', 'log', 'test']","['assertEvalsTo', 'logic', 'test', 'tested', 'tests']"
Testability,"Ok, I've split out the element-wise special ops to their own test so now there are two logical groups. I also moved assert_eq and assert_close to the top level to reduce repetitive defs and `self.assertTrue(np.array_equal(...to.numpy(),...)`. Plus a bit more structure in the top docs.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3671#issuecomment-392871508:61,test,test,61,https://hail.is,https://github.com/hail-is/hail/pull/3671#issuecomment-392871508,3,"['assert', 'log', 'test']","['assertTrue', 'logical', 'test']"
Testability,"Ok, added test and rules. Back to you.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9487#issuecomment-701618938:10,test,test,10,https://hail.is,https://github.com/hail-is/hail/pull/9487#issuecomment-701618938,1,['test'],['test']
Testability,"Ok, all tests passing now. Removing WIP",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8268#issuecomment-596626657:8,test,tests,8,https://hail.is,https://github.com/hail-is/hail/pull/8268#issuecomment-596626657,1,['test'],['tests']
Testability,"Ok, benchmarks are pretty bad, these are the range table benchmarks from #6529. #### No Index; ```; running write_range_table_p1000...; Mean, Median: 11.79s, 11.18s; running write_range_table_p100...; Mean, Median: 4.76s, 4.67s; running write_range_table_p10...; Mean, Median: 3.28s, 3.03s; ```; #### Index; ```; running write_range_table_p1000...; Mean, Median: 28.60s, 28.88s; running write_range_table_p100...; Mean, Median: 10.17s, 10.20s; running write_range_table_p10...; Mean, Median: 9.52s, 9.44s; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6266#issuecomment-507403990:4,benchmark,benchmarks,4,https://hail.is,https://github.com/hail-is/hail/pull/6266#issuecomment-507403990,2,['benchmark'],['benchmarks']
Testability,"Ok, getting back up to speed on this. There've been a number of changes on either side of this project, so going to give new timings and profiling results for the two queries. Here are mean timings for the two queries, run 5 times, and taking the mean of all but the first. It seems there's been a considerable regression since November on the second query, highlighting our need to get automated benchmark runs in per release (https://github.com/hail-is/hail/issues/14221). | query	| spark |; |-------|-------|; | 0	| 7s |; | 1	| 87s |. Attached are YourKit profiler results of the two queries. 'fast' refers to query 0 and 'slow' to the longer-running query 1.; [seqr-profile-data.zip](https://github.com/hail-is/hail/files/14103185/seqr-profile-data.zip); [seqr-logs.zip](https://github.com/hail-is/hail/files/14104795/seqr-logs.zip)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13882#issuecomment-1917732829:397,benchmark,benchmark,397,https://hail.is,https://github.com/hail-is/hail/issues/13882#issuecomment-1917732829,3,"['benchmark', 'log']","['benchmark', 'logs']"
Testability,"Ok, have the right branch being triggered (types not the same), but causes no issues. For:; ```scala; val typ: TableType = {; if (children.forall(_.typ == children.head.typ)) {; println(""SAME""); children.head.typ; } else {; println(""NOT THE SAME""); var i = 0; children.map(c => {; i+= 1; println(s""Child ${i}: ${PType.canonical(c.typ.rowType)}""). }); assert(children.forall(c => c.typ.rowType.isOfType(children.head.typ.rowType))); TableType(children.head.typ.rowType.deepOptional().asInstanceOf[TStruct], children.head.typ.key, children.head.typ.globalType); }; }; ```. Get. Child 1: PCStruct{locus:PCLocus(GRCh37),alleles:PCArray[PCString],rsid:PCString,qual:PFloat64,filters:PCSet[PCString],info:PCStruct{NEGATIVE_TRAIN_SITE:PBoolean,HWP:PFloat64,AC:PCArray[PInt32],culprit:PCString,MQ0:PInt32,ReadPosRankSum:PFloat64,AN:PInt32,InbreedingCoeff:PFloat64,AF:PCArray[PFloat64],GQ_STDDEV:PFloat64,FS:PFloat64,DP:PInt32,GQ_MEAN:PFloat64,POSITIVE_TRAIN_SITE:PBoolean,VQSLOD:PFloat64,ClippingRankSum:PFloat64,BaseQRankSum:PFloat64,MLEAF:PCArray[PFloat64],MLEAC:PCArray[PInt32],MQ:PFloat64,QD:PFloat64,END:PInt32,DB:PBoolean,HaplotypeScore:PFloat64,MQRankSum:PFloat64,CCC:PInt32,NCC:PInt32,DS:PBoolean},s:PCString,GT:PCCall,AD:PCArray[+PInt32],DP:PInt32,GQ:PInt32,PL:PCArray[+PInt32]}. Child 2: PCStruct{locus:PCLocus(GRCh37),alleles:PCArray[PCString],rsid:PCString,qual:PFloat64,filters:PCSet[PCString],info:PCStruct{NEGATIVE_TRAIN_SITE:PBoolean,HWP:PFloat64,AC:PCArray[PInt32],culprit:PCString,MQ0:PInt32,ReadPosRankSum:PFloat64,AN:PInt32,InbreedingCoeff:PFloat64,AF:PCArray[PFloat64],GQ_STDDEV:PFloat64,FS:PFloat64,DP:PInt32,GQ_MEAN:PFloat64,POSITIVE_TRAIN_SITE:PBoolean,VQSLOD:PFloat64,ClippingRankSum:PFloat64,BaseQRankSum:PFloat64,MLEAF:PCArray[PFloat64],MLEAC:PCArray[PInt32],MQ:PFloat64,QD:PFloat64,END:PInt32,DB:PBoolean,HaplotypeScore:PFloat64,MQRankSum:PFloat64,CCC:PInt32,NCC:PInt32,DS:PBoolean},s:PCString,GT:PCCall,AD:PCArray[PInt32],DP:PInt32,GQ:PInt32,PL:PCArray[PInt32]}. No problems doing",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8008#issuecomment-581048722:351,assert,assert,351,https://hail.is,https://github.com/hail-is/hail/pull/8008#issuecomment-581048722,1,['assert'],['assert']
Testability,"Ok, much better:; ```; Failed benchmarks in run 1:; king; pc_relate; Failed benchmarks in run 2:; king; Benchmark Name Ratio Time 1 Time 2 Mem Ratio Mem 1 (MB) Mem 2 (MB); -------------- ----- ------ ------ --------- ---------- ----------; large_range_matrix_table_sum 178.1% 206.853 368.473 100.0% 17 17; blockmatrix_write_from_entry_expr_range_mt_standardize 158.3% 871.529 1380.059 100.0% 386 386; pc_relate_5k_5k 146.9% 367.096 539.315 100.0% 385 385; ndarray_matmul_float64_benchmark 141.7% 2.984 4.227 100.0% 1 1; ld_prune_profile_25 124.9% 504.312 629.884 100.0% 208 208; join_p100_p100 121.3% 3.702 4.491 100.0% 1 1; union_p100_p100 119.7% 5.197 6.220 100.0% 1 1; block_matrix_to_matrix_table_row_major 119.5% 254.878 304.682 100.0% 385 385; read_force_count_p10 119.3% 1.803 2.150 100.0% 1 1; table_aggregate_int_stats 118.6% 17.328 20.552 100.0% 1 1; table_take 118.5% 1.018 1.206 100.0% 1 1; hwe_normalized_pca_blanczos_small_data_10_iterations 118.0% 77.412 91.313 100.0% 14 14; join_p100_p10 117.5% 13.166 15.468 100.0% 1 1; blockmatrix_write_from_entry_expr_range_mt 116.8% 228.205 266.443 100.0% 385 385; matrix_table_take_entry 114.6% 2.414 2.766 100.0% 1 1; matrix_multi_write_nothing 113.3% 252.278 285.802 100.0% 1 1; table_annotate_many_nested_dependence 112.3% 7.191 8.074 100.0% 1 1; compile_2k_merge 112.1% 236.165 264.728 100.0% 8 8; shuffle_key_rows_by_4096_byte_rows 111.5% 10.150 11.315 100.0% 2 2; union_p10_p100 111.5% 14.544 16.211 100.0% 1 1; table_aggregate_downsample_worst_case 111.3% 21.323 23.729 100.0% 1 1; read_force_count_p100 110.8% 2.336 2.589 100.0% 1 1; full_combiner_chr22 110.0% 304.996 335.580 99.6% 127 127; read_force_count_p1000 109.2% 3.998 4.367 100.0% 1 1; sentinel_cpu_hash_1 109.2% 31.027 33.884 100.0% 1 1; table_aggregate_array_sum 108.9% 12.197 13.283 100.0% 1 1; variant_and_sample_qc_nested_with_filters_2 108.4% 25.267 27.399 100.0% 1 1; read_with_index_p1000 107.8% 6.959 7.503 100.0% 1 1; union_p1000_p1000 106.2% 8.160 8.667 100.0% 1 1; ",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12981#issuecomment-1563772211:30,benchmark,benchmarks,30,https://hail.is,https://github.com/hail-is/hail/pull/12981#issuecomment-1563772211,3,"['Benchmark', 'benchmark']","['Benchmark', 'benchmarks']"
Testability,"Ok, so Cotton's new thing means emitting separate methods by hand is not a thing we do anymore. But there are two factors hurting the benchmark. . One is that the benchmark is hiding the fact that we are spending ~25 seconds serializing and de-serializing JSON for this ndarray. So the real comparison is more like 55 seconds vs 75 seconds, which is a roughly 25% speed improvement. . The other is that `hl.nd.ones` is just an alias for `hl.nd.array(hl.range(shape_product)).map(lambda x: 1).reshape((n_rows, n_cols))`. This is going to create a bunch of row major data, copy it to column major in a pretty cache inefficient way during the reshape, then do the additions. So that's eating some of the time too. We should probably have a way for all the constant methods to not go through regular array. . Anyway, 25% improvement + better interface is a win for now, we can revisit ways to make this faster in the future.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9209#issuecomment-668610293:134,benchmark,benchmark,134,https://hail.is,https://github.com/hail-is/hail/pull/9209#issuecomment-668610293,2,['benchmark'],['benchmark']
Testability,"Ok, so I thought I left a comment on here but I guess I didn't: when I tested this with dev deploy, I didn't see any plots show up, got JS console errors. So I'm not sure this was quite ready to be merged.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11712#issuecomment-1097208394:71,test,tested,71,https://hail.is,https://github.com/hail-is/hail/pull/11712#issuecomment-1097208394,1,['test'],['tested']
Testability,"Ok, what do you think of this?; ```; i = 0; while len(output) != 4:; time.sleep(0.100 * (3/2) ** i); i = i + 1; if i > 14:; break; assert len(output) != 4; ```. We exponentially back off with base 3/2. We break as soon as the condition is satisfied. If we wait more than a minute (`0.1 * (3/2)^14` is roughly 30s, so we've waited about a minute in total), we bail (and the assert will fail).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5503#issuecomment-470260178:131,assert,assert,131,https://hail.is,https://github.com/hail-is/hail/pull/5503#issuecomment-470260178,2,['assert'],['assert']
Testability,"Ok, wrote the multi byte versions, running benchmarks.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10766#issuecomment-912782196:43,benchmark,benchmarks,43,https://hail.is,https://github.com/hail-is/hail/pull/10766#issuecomment-912782196,1,['benchmark'],['benchmarks']
Testability,Ok. @akotlar this is why the secrets need to be duplicated in test.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5897#issuecomment-484122661:62,test,test,62,https://hail.is,https://github.com/hail-is/hail/pull/5897#issuecomment-484122661,1,['test'],['test']
Testability,Ok. Seems to work. Going to try cluster tests tomorrow to make sure things are ok in a distributed setting.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10523#issuecomment-879609434:40,test,tests,40,https://hail.is,https://github.com/hail-is/hail/pull/10523#issuecomment-879609434,1,['test'],['tests']
Testability,"Ok. Still working on getting the tests to pass and cleaning things up. However, I ran into a small snag. The code below needs to be ironed out. Should the number of jobs and state of the job group be recursive or specific to that job group? It's a bit weird for the billing and cancellation to be nested, but the number of jobs etc. are not. More concretely, if a child batch is running, should the parent also be running even if it has no direct child jobs that are running? Thoughts?. cc: @daniel-goldstein . ```mysql; UPDATE batches SET; `state` = 'running',; time_completed = NULL,; n_jobs = n_jobs + expected_n_jobs; WHERE id = in_batch_id;. ### FIXME FIXME what should the state be of nested job groups?; UPDATE job_groups; INNER JOIN (; SELECT batch_id, job_group_id, CAST(COALESCE(SUM(n_jobs), 0) AS SIGNED) AS staged_n_jobs; FROM job_groups_inst_coll_staging; WHERE batch_id = in_batch_id AND update_id = in_update_id; GROUP BY batch_id, job_group_id; ) AS t ON job_groups.batch_id = t.batch_id AND job_groups.job_group_id = t.job_group_id; SET `state` = 'running', time_completed = NULL, n_jobs = n_jobs + t.staged_n_jobs;; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14170#issuecomment-1932547516:33,test,tests,33,https://hail.is,https://github.com/hail-is/hail/pull/14170#issuecomment-1932547516,1,['test'],['tests']
Testability,"Ok. The limits for the tests will need to be fixed with a REST API for editing a billing limit and a new build step that is `setup_test_batch`. I'll work on that now. But I think this can go in while I'm working on that, but #9355 should depend on the new PR.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9354#issuecomment-705102869:23,test,tests,23,https://hail.is,https://github.com/hail-is/hail/pull/9354#issuecomment-705102869,1,['test'],['tests']
Testability,"Ok. This exact scenario is what I was worried about when we merge PRs without checking the logs by hand in a full testing scenario. I want a way to check the PR driver, front-end, and worker logs automatically that they don't have ERROR messages. Like test_invariants. For example, I'm still looking at your change for time_since_last_state_change. When I had the code you wanted, there were errors because time_since_last_state_change was None. The current tests would not have caught that. I think we need either a white list of acceptable front-end/driver errors or some kind of threshold for error types. I'll think about it some more once the batch porting is done.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10920#issuecomment-956522959:91,log,logs,91,https://hail.is,https://github.com/hail-is/hail/pull/10920#issuecomment-956522959,4,"['log', 'test']","['logs', 'testing', 'tests']"
Testability,"Ok. famous last words, but I think we're in good shape here. I think Daniel if you can do one last pass on the most recent changes, that would be great and then we'll have time to do a load test to make sure the behavior is still good and instances aren't thrashing.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12221#issuecomment-1271995498:190,test,test,190,https://hail.is,https://github.com/hail-is/hail/pull/12221#issuecomment-1271995498,1,['test'],['test']
Testability,"Okay, I think this is ready for re-review (assuming tests finally pass). Note the changes to `ld_score_regression`, which makes it generate smaller IR by using `AggArrayPerElement` instead of unrolled loops. That solved the blown stack in the parser and the class size issues, so I was able to put the linreg aggregator back the way it was (with `n` and `yty` computed in separate aggregations).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7134#issuecomment-558180275:52,test,tests,52,https://hail.is,https://github.com/hail-is/hail/pull/7134#issuecomment-558180275,1,['test'],['tests']
Testability,"Okay, python tests in local mode now have the same number of failures as on main. I just needed to be more careful in preserving the information that determines the subregion relation",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9401#issuecomment-690716921:13,test,tests,13,https://hail.is,https://github.com/hail-is/hail/pull/9401#issuecomment-690716921,1,['test'],['tests']
Testability,"Okay, this isn't passing tests because Py4J actually catches Py4JErrors and uses them to stop iteration on java collections. Very frustrating.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1552#issuecomment-287453582:25,test,tests,25,https://hail.is,https://github.com/hail-is/hail/pull/1552#issuecomment-287453582,1,['test'],['tests']
Testability,"Okay, we can benchmark now.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10581#issuecomment-860802893:13,benchmark,benchmark,13,https://hail.is,https://github.com/hail-is/hail/pull/10581#issuecomment-860802893,1,['benchmark'],['benchmark']
Testability,"On Azure, one of the tests timed out with 500 responses from the server. I'll need to debug in GCP, but the PR queue is long right now.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14282#issuecomment-1960073457:21,test,tests,21,https://hail.is,https://github.com/hail-is/hail/pull/14282#issuecomment-1960073457,1,['test'],['tests']
Testability,"On second thought, should there be at least one test where `expr != None`?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2662#issuecomment-355769072:48,test,test,48,https://hail.is,https://github.com/hail-is/hail/pull/2662#issuecomment-355769072,1,['test'],['test']
Testability,"Once #1475 is merged, tests will pass here too.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1474#issuecomment-284282339:22,test,tests,22,https://hail.is,https://github.com/hail-is/hail/pull/1474#issuecomment-284282339,1,['test'],['tests']
Testability,"Once we can draw from Cassandra (with the likes of `annotatevariants cass`, we can write/read/compare in the usual way. We need a Cassandra cluster for testing. There are three options: an embedded server as part of Hail, assume the user has installed Cassandra locally, or run against a fixed server. I set up a single-node Cassandra install on hail-ci. In the spirit of small commits, I want to be able to test in experimental/untested/in progress work so we don't get so much divergence. We need a way to mark it. I will investigate the options.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/282#issuecomment-208368921:152,test,testing,152,https://hail.is,https://github.com/hail-is/hail/pull/282#issuecomment-208368921,2,['test'],"['test', 'testing']"
Testability,"Once we fold in cloud tools, the CI will only be testing hail-is/hail, so all these questions of coupling between CI and hail-is/hail are moot. (Currently, these changes will introduce a few broken object links to the cloud tools repo. Which is mostly untidy rather than bad in anyway.). I created `artifacts/index.html` to work around a GCS limitation. Serving a bucket directly doesn't generate an `ls -l` style index.html for directories. nginx and apache are happy to do this. There are two layers:. - ci's ""job"" information (a log and a directory of artifacts); - project-specific artifacts. I think the friction is caused by CI & batch lacking a way to express a DAG of jobs. We've hacked this on via background processes, but now the ci's ""job"" page doesn't neatly correspond to one process log. Cotton's proposed batch DAG (& CI's use of it) resolves this by restoring the separation of ""job"" (or, now, ""jobs"") information and artifacts (which are truly just artifacts). All that said, if this makes your life easier, I don't mind the mild ugliness on cloud tools while we wait for batch DAG to land. Let me know and I'll approve.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4667#issuecomment-433954860:49,test,testing,49,https://hail.is,https://github.com/hail-is/hail/pull/4667#issuecomment-433954860,3,"['log', 'test']","['log', 'testing']"
Testability,"One final comment, the goal here was separate the normal user notebook flow from the workshop guest notebook flow, while sharing the main logic without impacting logic outside notebook. I think that was largely successful. I think the only impact outside was to layout.html in web_common, it checks a `workshop` variable to load the workshop header instead of the default one. This is necessary because you can't override a block in a included file from the file that includes it. The other design I considered was have auth support a guest user for workshops which was represented just like any other user, but this seemed both more complicated and more error prone from the security perspective. As we have other use cases for guest users (e.g. free tier), let's revisit this decision.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7112#issuecomment-534276842:138,log,logic,138,https://hail.is,https://github.com/hail-is/hail/pull/7112#issuecomment-534276842,2,['log'],['logic']
Testability,"One of the problems with the new model is that tests on the deployed version are going to leave billing project poop everywhere unless we actually go in and delete them, hmmm....",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9553#issuecomment-705227991:47,test,tests,47,https://hail.is,https://github.com/hail-is/hail/pull/9553#issuecomment-705227991,1,['test'],['tests']
Testability,"One of the tests failed because I messed up some variable names, but if we compare the times:. https://storage.googleapis.com/hail-ci-0-1/ci/7cd5eec6ab8e669fe1adc3061039573c969eb16e/7eac2a154140017f6623db20f277563537b3e075/artifacts/test-report/index.html. vs . https://storage.googleapis.com/hail-ci-0-1/ci/abf0f7d9eebed9774b9b24f3e96fd74683becff4/9b150225332bdfca222715cf5cf6bb483192b54d/artifacts/test-report/index.html. there's a difference of about 9 minutes, most of which is in InterpretSuite (which contains a lot of duplicate tests now and is removed in #5579), so I expect the difference to be not so large once both of these are in. The C++ compile times are definitely a thing we need to keep thinking about, but 20 minutes for the scala tests (hopefully < 15 once the other PR lands) seems workable for now?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5578#issuecomment-471622174:11,test,tests,11,https://hail.is,https://github.com/hail-is/hail/pull/5578#issuecomment-471622174,5,['test'],"['test-report', 'tests']"
Testability,"One other snarl I've hit -- I'll need to reboot the jupyter service in the init script in order to use `jgscm` as the content manager, and need to find time to test that and make sure everything continues to work afterwards.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12788#issuecomment-1479689103:160,test,test,160,https://hail.is,https://github.com/hail-is/hail/pull/12788#issuecomment-1479689103,1,['test'],['test']
Testability,One that uses a glob though! I don’t see one at least. Maybe I missed (though I can’t imagine since it should have failed that test before this),MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7611#issuecomment-558457592:127,test,test,127,https://hail.is,https://github.com/hail-is/hail/pull/7611#issuecomment-558457592,1,['test'],['test']
Testability,"Oof, I'm failing one of the docs Pedigree tests. Surprising, but glad we have those. I'll investigate",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6438#issuecomment-504570971:42,test,tests,42,https://hail.is,https://github.com/hail-is/hail/pull/6438#issuecomment-504570971,1,['test'],['tests']
Testability,"Oof, good catch! The thing we're trying to avoid is `e^x` overflowing for large positive `x`. In double precision, the smallest `x` that overflows is 710. So to test that we handle overflow correctly, you can check `sigmoid(710) == 1.0` and `sigmoid(-710) == 0.0` (using approximate equality). Actually, after playing with this, if you just use the simple definition `sigmoid(x) = 1 / (1 + np.exp(-x))`, then `sigmoid(-710)` does overflow, but it returns the right answer since `np.exp(710)` returns `inf`, and `1 / inf == 0.0`. But `math.exp(710)` throws an exception. `hl.exp` seems to have the numpy behavior, so I think the simple version actually works. But we should add the above test. I think wrapping this in an exposed function is a good idea. I agree it should be called `expit`, both for consistency with scipy, and because as you say, `sigmoid` really just means an S shaped function. And if we do expose `expit`, we should probably expose its inverse `logit` too.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10606#issuecomment-866034244:161,test,test,161,https://hail.is,https://github.com/hail-is/hail/pull/10606#issuecomment-866034244,3,"['log', 'test']","['logit', 'test']"
Testability,"Oof, method verification error on one of the lowering tests",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9637#issuecomment-717239923:54,test,tests,54,https://hail.is,https://github.com/hail-is/hail/pull/9637#issuecomment-717239923,1,['test'],['tests']
Testability,"Oops, I had a bug where the readiness check was hitting the notebook service, not the actual notebook. Here is an updated scale test:. ```; successes: 10 / 10 = 1.0; mean time: 6.920137214660644; max time: 14.664504528045654; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7112#issuecomment-534707944:128,test,test,128,https://hail.is,https://github.com/hail-is/hail/pull/7112#issuecomment-534707944,1,['test'],['test']
Testability,"Oops, I had meant to include that. Fixed. > How do we expect to benchmark these?. I was planning to measure densify/force_count on your test spare MatrixTable. I was planning to finish the remaining staging improvements first.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5414#issuecomment-466570246:64,benchmark,benchmark,64,https://hail.is,https://github.com/hail-is/hail/pull/5414#issuecomment-466570246,2,"['benchmark', 'test']","['benchmark', 'test']"
Testability,"Oops, sorry. Although I really blame PruneSuite. It does a bunch of serious work on construction, and basically makes the tests unusable if there are any bugs and testng silently bails with a fatal error.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8629#issuecomment-619252768:122,test,tests,122,https://hail.is,https://github.com/hail-is/hail/pull/8629#issuecomment-619252768,2,['test'],"['testng', 'tests']"
Testability,"Oops, still have to add the benchmark.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7134#issuecomment-536038333:28,benchmark,benchmark,28,https://hail.is,https://github.com/hail-is/hail/pull/7134#issuecomment-536038333,1,['benchmark'],['benchmark']
Testability,Or have both delete steps depend on both test jobs.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13353#issuecomment-1660787777:41,test,test,41,https://hail.is,https://github.com/hail-is/hail/pull/13353#issuecomment-1660787777,1,['test'],['test']
Testability,"Other things to add in separate PRs:; - logging; - concept of a ResourceDirectory where you want to copy the files in/out from a directory; - change the temp dir to be per task; - Support environment variables, cpu, memory",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4937#issuecomment-453621583:40,log,logging,40,https://hail.is,https://github.com/hail-is/hail/pull/4937#issuecomment-453621583,1,['log'],['logging']
Testability,Other to-do items are to make sure the stack has tests for authorization for all new endpoints in `test_batch.py` in the corresponding PR.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14170#issuecomment-1898818963:49,test,tests,49,https://hail.is,https://github.com/hail-is/hail/pull/14170#issuecomment-1898818963,1,['test'],['tests']
Testability,"Out of curiosity, what's different about `assert` and the `self.assertEqual`?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7611#issuecomment-558865138:42,assert,assert,42,https://hail.is,https://github.com/hail-is/hail/pull/7611#issuecomment-558865138,2,['assert'],"['assert', 'assertEqual']"
Testability,Override merging this because it only touches deploy things (which aren't tested) and it was waiting on other approved PRs.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4616#issuecomment-432424552:74,test,tested,74,https://hail.is,https://github.com/hail-is/hail/pull/4616#issuecomment-432424552,1,['test'],['tested']
Testability,"Oy! If you `grep netlib hail.log`, do you see natives loading or failing to load? I'll check on my end too.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3335#issuecomment-385265623:29,log,log,29,https://hail.is,https://github.com/hail-is/hail/pull/3335#issuecomment-385265623,1,['log'],['log']
Testability,"PCA test failing, this is because https://github.com/apache/spark/blob/v3.0.1/mllib/src/main/scala/org/apache/spark/mllib/linalg/distributed/RowMatrix.scala#L795 is wrong prior to 3.1.1. `MAX_RESULT_SIZE` of 0 is supposed to be interpreted as ""unlimited"".",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10054#issuecomment-788979439:4,test,test,4,https://hail.is,https://github.com/hail-is/hail/pull/10054#issuecomment-788979439,1,['test'],['test']
Testability,"PR namespaces are destroyed after the tests pass, so ghost should be gone.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7381#issuecomment-548101042:38,test,tests,38,https://hail.is,https://github.com/hail-is/hail/pull/7381#issuecomment-548101042,1,['test'],['tests']
Testability,"Passing CI tests for Spark 2.4. Do you have a stack trace for a failure?. Sriram saw issues related to Breeze in #9199, but I think it was the bug you noted above.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9524#issuecomment-701358022:11,test,tests,11,https://hail.is,https://github.com/hail-is/hail/pull/9524#issuecomment-701358022,1,['test'],['tests']
Testability,"Pausing for a few hours. Error in testEmitLeftJoinDistinct is a bit strange. IR contains only constants, and appears correctly inferred as having required elements, but a missing element is found at emit time. <img width=""2270"" alt=""Screenshot 2020-02-21 20 38 52"" src=""https://user-images.githubusercontent.com/5543229/75083876-2f3f9d00-54ea-11ea-9bb8-45f9e708a50b.png"">",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8142#issuecomment-589902885:34,test,testEmitLeftJoinDistinct,34,https://hail.is,https://github.com/hail-is/hail/pull/8142#issuecomment-589902885,1,['test'],['testEmitLeftJoinDistinct']
Testability,"Performance is close, if slightly worse. Could be laptop load differences. Insignificant, this is a great balance. {""config"": {""cores"": 1, ""version"": ""0.2.28-42f5ab7d9617"", ""timestamp"": ""2019-12-04 19:20:11.757847"", ""system"": ""darwin""}, ""benchmarks"": [{""name"": ""make_ndarray_bench"", ""failed"": false, ""timed_out"": false, ""times"": [25.609369775000005, 25.694102771999994, 26.285334770000006]}]}",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7646#issuecomment-561908098:238,benchmark,benchmarks,238,https://hail.is,https://github.com/hail-is/hail/pull/7646#issuecomment-561908098,1,['benchmark'],['benchmarks']
Testability,Permissions issues. VEP test 2:; https://ci.hail.is/batches/8126309,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14286#issuecomment-1942034848:24,test,test,24,https://hail.is,https://github.com/hail-is/hail/pull/14286#issuecomment-1942034848,1,['test'],['test']
Testability,Phew! I finally got to parity. I'm impressed how well the old method wrapping logic worked. Benchmarks with >20% change:. ```; $ hail-bench compare ./0.2.47-3f8cff262dcf-1.json 0.2.47-63dccdda2a44.json ; Failed benchmarks in run 1:; pc_relate_big; large_range_matrix_table_sum; Failed benchmarks in run 2:; pc_relate_big; large_range_matrix_table_sum; Benchmark Name Ratio Time 1 Time 2; -------------- ----- ------ ------; table_big_aggregate_compile_and_execute 334.8% 13.325 44.608; matrix_table_array_arithmetic 133.9% 10.208 13.665; matrix_table_many_aggs_col_wise 131.4% 34.847 45.781; table_aggregate_counter 126.4% 13.136 16.606; per_row_stats_star_star 124.5% 8.474 10.553; matrix_table_filter_entries_unfilter 123.7% 8.581 10.616; ...; shuffle_key_rows_by_mt 82.8% 35.932 29.742; full_combiner_chr22 23.6% 1644.907 388.414; ----------------------; Geometric mean: 100.0%; Median: 99.2%; ```,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8963#issuecomment-650638060:78,log,logic,78,https://hail.is,https://github.com/hail-is/hail/pull/8963#issuecomment-650638060,5,"['Benchmark', 'benchmark', 'log']","['Benchmark', 'Benchmarks', 'benchmarks', 'logic']"
Testability,"Please make the one change, pass tests, and merge.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1875#issuecomment-303504943:33,test,tests,33,https://hail.is,https://github.com/hail-is/hail/pull/1875#issuecomment-303504943,1,['test'],['tests']
Testability,Please reopen when you finish cleanup and benchmarking and it is ready for another serious look.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1141#issuecomment-271011013:42,benchmark,benchmarking,42,https://hail.is,https://github.com/hail-is/hail/pull/1141#issuecomment-271011013,1,['benchmark'],['benchmarking']
Testability,Poached! I will benchmark my version too.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3354#issuecomment-380560073:16,benchmark,benchmark,16,https://hail.is,https://github.com/hail-is/hail/pull/3354#issuecomment-380560073,1,['benchmark'],['benchmark']
Testability,Pool$.scoped(RegionPool.scala:13); 	at is.hail.expr.ir.ExecuteContext$.scoped(ExecuteContext.scala:46); 	at is.hail.backend.spark.SparkBackend.withExecuteContext(SparkBackend.scala:276); 	at is.hail.expr.ir.ExecuteContext$.$anonfun$scoped$1(ExecuteContext.scala:40); 	at is.hail.utils.ExecutionTimer$.time(ExecutionTimer.scala:52); 	at is.hail.expr.ir.ExecuteContext$.scoped(ExecuteContext.scala:39); 	at is.hail.TestUtils$.assertEvalsTo(TestUtils.scala:339); 	at is.hail.TestUtils$.assertEvalsTo(TestUtils.scala:314); 	at is.hail.expr.ir.IRSuite.testStreamLenUnconsumedInnerStream(IRSuite.scala:1800); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057);,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10330#issuecomment-827119604:3623,test,testng,3623,https://hail.is,https://github.com/hail-is/hail/pull/10330#issuecomment-827119604,1,['test'],['testng']
Testability,"Ported `ArrayFunctions.mean` to ArrayFold2. Benchmark:; ```python; @benchmark; def table_range_means():; ht = hl.utils.range_table(10_000_000, 16); ht = ht.annotate(m = hl.mean(hl.range(0, ht.idx % 1111))); ht._force_count(); ```. Master:; ```; 2019-09-03 09:39:05,777: INFO: [1/1] Running table_range_means...; 2019-09-03 09:40:52,557: INFO: burn in: 106.78s; 2019-09-03 09:42:34,333: INFO: run 1: 101.78s; 2019-09-03 09:44:14,982: INFO: run 2: 100.65s; 2019-09-03 09:45:53,590: INFO: run 3: 98.61s; ```. PR:; ```; 2019-09-03 09:47:26,110: INFO: [1/1] Running table_range_means...; 2019-09-03 09:47:29,465: INFO: burn in: 3.35s; 2019-09-03 09:47:32,615: INFO: run 1: 3.15s; 2019-09-03 09:47:35,703: INFO: run 2: 3.09s; 2019-09-03 09:47:38,840: INFO: run 3: 3.14s; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6981#issuecomment-527467578:44,Benchmark,Benchmark,44,https://hail.is,https://github.com/hail-is/hail/pull/6981#issuecomment-527467578,2,"['Benchmark', 'benchmark']","['Benchmark', 'benchmark']"
Testability,"Possible. Let's make sure we add a test for this too, @iitalics .",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/6663#issuecomment-514795368:35,test,test,35,https://hail.is,https://github.com/hail-is/hail/issues/6663#issuecomment-514795368,1,['test'],['test']
Testability,Pradeep was seeing 2x larger output on VCF export after filtering/QC. This could explain some of it. Benchmark the improvement from this change and investigate further if this doesn't explain it.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/563#issuecomment-238641595:101,Benchmark,Benchmark,101,https://hail.is,https://github.com/hail-is/hail/issues/563#issuecomment-238641595,1,['Benchmark'],['Benchmark']
Testability,"Prior to this we add an entry to /etc/hosts so that jobs can contact the batch front end to submit batches. This entry in default is `batch.hail`, and in a dev/pr namespace is `internal.hail`. The batch tests are jobs that run in default but submit test batches to the dev deployment and therefore need an entry for `internal.hail`. This essentially changes it to ""everything knows about internal but only default knows about default. We haven't seen this before because cloud dns in google provides these entries as a fallback, but I never set up in azure because it didn't seem necessary. If this succeeds, we can delete cloud dns in google",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11071#issuecomment-973003982:203,test,tests,203,https://hail.is,https://github.com/hail-is/hail/pull/11071#issuecomment-973003982,2,['test'],"['test', 'tests']"
Testability,"Probably we should run the Grch37 and Grch38 parts of this in parallel, but reducing wall clock time by giving some more resources is also a good idea, as some of these tests have 10k partitions.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11271#issuecomment-1022379980:169,test,tests,169,https://hail.is,https://github.com/hail-is/hail/pull/11271#issuecomment-1022379980,1,['test'],['tests']
Testability,Problem with py4j conversion of Python dict to `java.util.HashMap` instead of `scala.collection.immutable.Map`. Tested locally.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4073#issuecomment-410049172:112,Test,Tested,112,https://hail.is,https://github.com/hail-is/hail/pull/4073#issuecomment-410049172,1,['Test'],['Tested']
Testability,"Project 'project:genomics-tools' not found or deleted.""); /Users/dking/projects/hail/datasets/extract/extract_CADD.py:26: j.image(""gcr.io/broad-ctsa/datasets:050521""); /Users/dking/projects/hail/datasets/extract/extract_1000_Genomes_NYGC_30x_GRCh38.py:12: j.image(""gcr.io/broad-ctsa/datasets:041421""); /Users/dking/projects/hail/datasets/extract/extract_1000_Genomes_NYGC_30x_GRCh38.py:19: j.image(""gcr.io/broad-ctsa/datasets:041421""); /Users/dking/projects/hail/datasets/extract/extract_1000_Genomes_NYGC_30x_GRCh38.py:26: j.image(""gcr.io/broad-ctsa/datasets:041421""); /Users/dking/projects/hail/hail/scripts/update-terra-image.py:33:Image URL: `us.gcr.io/broad-dsp-gcr-public/{image_name}:{image_version}`; /Users/dking/projects/hail/hail/python/test/hailtop/utils/test_utils.py:115: x = parse_docker_image_reference('gcr.io/hail-vdc/batch-worker:123fds312'); /Users/dking/projects/hail/hail/python/test/hailtop/utils/test_utils.py:116: assert x.domain == 'gcr.io'; /Users/dking/projects/hail/hail/python/test/hailtop/utils/test_utils.py:120: assert x.name() == 'gcr.io/hail-vdc/batch-worker'; /Users/dking/projects/hail/hail/python/test/hailtop/utils/test_utils.py:121: assert str(x) == 'gcr.io/hail-vdc/batch-worker:123fds312'; /Users/dking/projects/hail/hail/python/hail/docs/change_log.md:278:- (hail#12230) The python-dill Batch images in `gcr.io/hail-vdc` are no longer supported.; /Users/dking/projects/hail/hail/python/hailtop/utils/utils.py:707: # DockerError(500, ""Head https://gcr.io/v2/genomics-tools/samtools/manifests/latest: unknown: Project 'project:genomics-tools' not found or deleted.""); /Users/dking/projects/hail/hail/python/hailtop/utils/utils.py:1061: return self.domain is not None and (self.domain == 'gcr.io' or self.domain.endswith('docker.pkg.dev')); /Users/dking/projects/hail/hail/python/hailtop/aiocloud/aiogoogle/client/container_client.py:6: super().__init__(f'https://gcr.io/v2/{project}', **kwargs); /Users/dking/projects/hail/datasets/extract/extract_dbSNP.py:22",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12963#issuecomment-1531692013:1338,test,test,1338,https://hail.is,https://github.com/hail-is/hail/pull/12963#issuecomment-1531692013,1,['test'],['test']
Testability,"Prometheus storage was only 10Gb, so it filled up after 14 days. By default, Prometheus deletes logs after 15 days. I increased the storage size to 50Gb accordingly. I also decided to use this opportunity to switch Prometheus from a Deployment to a StatefulSet. This meant turning the PersistentVolume for PrometheusStorage in the monitoring.yaml file to a PersistentVolumeClaim within the Prometheus StatefulSet spec. However, the claim was configured to mount at the same location as the previous PersistentVolume, and I did not first delete the old PersistentVolume. As a result, the new 50Gb disk was not initially allocated. I resolved this by deleting the StatefulSet and the old PersistentVolume, then redeploying.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/6483#issuecomment-505884681:96,log,logs,96,https://hail.is,https://github.com/hail-is/hail/issues/6483#issuecomment-505884681,1,['log'],['logs']
Testability,"Pushed a few more commits:. - added test reading vds/cols is is the same as cols_table; - propagate globals through cols_table(), rows_table()",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2854#issuecomment-362826137:36,test,test,36,https://hail.is,https://github.com/hail-is/hail/pull/2854#issuecomment-362826137,1,['test'],['test']
Testability,Pushed more changes to change log.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10593#issuecomment-861515524:30,log,log,30,https://hail.is,https://github.com/hail-is/hail/pull/10593#issuecomment-861515524,1,['log'],['log']
Testability,"Pushed one more fix: a batch test failed on job.wait() where /status threw 500. It was a running job, so batch hit the worker. The job was error, so it threw an exception and the container was being deleted. There was a race condition getting the container status:. ```; if self.container:; ... self.get_container_status() ...; ```. and deleting the container:. ```; if self.container:; ... call self.container.delete(); self.container = None; ```. If the delete happens between the check for self.container being defined and the call to self.container.show inside get_container_status, show throws 404. Thus, I modified get_container_status to return None on 404.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7606#issuecomment-557913491:29,test,test,29,https://hail.is,https://github.com/hail-is/hail/pull/7606#issuecomment-557913491,1,['test'],['test']
Testability,"Pushed some more changes:; - first foray into RBAC; - created service account for batch; - batch run jobs in batch-pods namespace; - authorize with role binding; - hand-tested, batch is working. batch will now be found at `batch.default` instead of `batch` when running from batch-jobs namespace. I updated the batch Client to reflect this.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4545#issuecomment-429681232:169,test,tested,169,https://hail.is,https://github.com/hail-is/hail/pull/4545#issuecomment-429681232,1,['test'],['tested']
Testability,Put WIP label since benchmarks are running but honestly correctness is probably more important than whatever the benchmarks tell us here.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8592#issuecomment-617353169:20,benchmark,benchmarks,20,https://hail.is,https://github.com/hail-is/hail/pull/8592#issuecomment-617353169,2,['benchmark'],['benchmarks']
Testability,Python tests catch the bug.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4865#issuecomment-443314418:7,test,tests,7,https://hail.is,https://github.com/hail-is/hail/pull/4865#issuecomment-443314418,1,['test'],['tests']
Testability,Python tests fixed.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2480#issuecomment-348611190:7,test,tests,7,https://hail.is,https://github.com/hail-is/hail/pull/2480#issuecomment-348611190,1,['test'],['tests']
Testability,"Quick check, do we need ""get"" permissions, and should we rename ""delete-test-pvc"" to ""test-pvc""",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5518#issuecomment-469335166:72,test,test-pvc,72,https://hail.is,https://github.com/hail-is/hail/pull/5518#issuecomment-469335166,2,['test'],['test-pvc']
Testability,"RNING: User-defined SPARK_HOME (/opt/cloudera/parcels/SPARK2-2.2.0.cloudera1-1.cdh5.12.0.p0.142354/lib/spark2) overrides detected (/opt/cloudera/parcels/SPARK2/lib/spark2).; WARNING: Running pyspark from user-defined location.; Python 2.7.5 (default, Aug 4 2017, 00:39:18) ; [GCC 4.8.5 20150623 (Red Hat 4.8.5-16)] on linux2; Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; Setting default log level to ""WARN"".; To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).; 17/10/19 08:45:43 WARN util.Utils: Service 'SparkUI' could not bind on port 4040. Attempting port 4041.; Welcome to; ____ __; / __/__ ___ _____/ /__; _\ \/ _ \/ _ `/ __/ '_/; /__ / .__/\_,_/_/ /_/\_\ version 2.2.0.cloudera1; /_/. Using Python version 2.7.5 (default, Aug 4 2017 00:39:18); SparkSession available as 'spark'.; >>> import hail; >>> hc = hail.HailContext(); log4j:ERROR setFile(null,false) call failed.; java.io.FileNotFoundException: hail.log (Permission denied); 	at java.io.FileOutputStream.open0(Native Method); 	at java.io.FileOutputStream.open(FileOutputStream.java:270); 	at java.io.FileOutputStream.<init>(FileOutputStream.java:213); 	at java.io.FileOutputStream.<init>(FileOutputStream.java:133); 	at org.apache.log4j.FileAppender.setFile(FileAppender.java:294); 	at org.apache.log4j.FileAppender.activateOptions(FileAppender.java:165); 	at org.apache.log4j.config.PropertySetter.activate(PropertySetter.java:307); 	at org.apache.log4j.config.PropertySetter.setProperties(PropertySetter.java:172); 	at org.apache.log4j.config.PropertySetter.setProperties(PropertySetter.java:104); 	at org.apache.log4j.PropertyConfigurator.parseAppender(PropertyConfigurator.java:842); 	at org.apache.log4j.PropertyConfigurator.parseCategory(PropertyConfigurator.java:768); 	at org.apache.log4j.PropertyConfigurator.configureRootCategory(PropertyConfigurator.java:648); 	at org.apache.log4j.PropertyConfigurator.doConfigure(PropertyConfigurator.java:514); 	at org.a",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/2076#issuecomment-337768198:1252,log,log,1252,https://hail.is,https://github.com/hail-is/hail/issues/2076#issuecomment-337768198,1,['log'],['log']
Testability,"Ran CI tests, looks like everything is passing now. Will leave approval to @tpoterba though",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9524#issuecomment-702189599:7,test,tests,7,https://hail.is,https://github.com/hail-is/hail/pull/9524#issuecomment-702189599,1,['test'],['tests']
Testability,"Ran benchmarks this morning: [results](https://gist.github.com/patrick-schultz/0ad0f431b384d266e098d51b74fb6c16). Time 2 is this PR, Time 1 is main.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10905#issuecomment-945947919:4,benchmark,benchmarks,4,https://hail.is,https://github.com/hail-is/hail/pull/10905#issuecomment-945947919,1,['benchmark'],['benchmarks']
Testability,"Randomly assigned @patrick-schultz. This is a beast, but it's not easy to break up into smaller chunks. I'm going to add a few more tests for the matrix stuff with special cases like I've done for table, and reviewing test sufficiency is probably more important than looking at each changed line.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5864#issuecomment-486190822:132,test,tests,132,https://hail.is,https://github.com/hail-is/hail/pull/5864#issuecomment-486190822,2,['test'],"['test', 'tests']"
Testability,Randomly assigned Patrick. This is a big PR but about half of that is tests.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5979#issuecomment-490912792:70,test,tests,70,https://hail.is,https://github.com/hail-is/hail/pull/5979#issuecomment-490912792,1,['test'],['tests']
Testability,"Rate limiting is a bit too restrictive methinks. That said, there are a lot of deadlocks when the rate limits kick in. Perhaps worth diving more deeply into the deadlocks at some point. The critical path service backend test is #35. Here are its slowest ones. I think we should probably checkpoint the import VCF, but, regardless, pc_relate just needs to be made faster. I know how to double the speed of PCA. It's in a dead branch of mine. Patrick will incorporate those ideas into his rewrite using the new math. If #35 was the same speed as the next slowest, we'd save 3 minutes. I think we can save ~7 minutes by cutting all these slow tests down so that the distribution of runtimes is more uniform. ```; 256.68s call hail/methods/relatedness/test_pc_relate.py::test_pc_relate_against_R_truth; 178.28s call hail/methods/test_pca.py::test_spectra_2[triplet0]; 102.60s call hail/vds/test_vds.py::test_truncate_reference_blocks; 82.86s call hail/backend/test_service_backend.py::test_tiny_driver_has_tiny_memory; ```. f1ac37dbeb3625cbf91f1f9df5399f3723843029 (40 minutes) (https://ci.hail.is/batches/7484187):. <img width=""2032"" alt=""Screen Shot 2023-05-25 at 12 01 55"" src=""https://github.com/hail-is/hail/assets/106194/902a0624-46a0-4beb-ae03-6c419350ca41"">; <img width=""542"" alt=""Screen Shot 2023-05-25 at 12 01 28"" src=""https://github.com/hail-is/hail/assets/106194/3cfa366d-5719-428a-9f4f-5bd07caaf6ca"">; <img width=""521"" alt=""Screen Shot 2023-05-25 at 12 01 07"" src=""https://github.com/hail-is/hail/assets/106194/da778828-9f9e-46cc-b574-68b9835e6589"">; <img width=""522"" alt=""Screen Shot 2023-05-25 at 12 01 03"" src=""https://github.com/hail-is/hail/assets/106194/3074a6f9-06d5-487e-941c-995b47177181"">",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13076#issuecomment-1563163790:220,test,test,220,https://hail.is,https://github.com/hail-is/hail/pull/13076#issuecomment-1563163790,2,['test'],"['test', 'tests']"
Testability,"Rate limits will also ensure we don't exceed a certain log volume, so we can use that to figure out what our target bytes-per-log should be",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12355#issuecomment-1284280492:55,log,log,55,https://hail.is,https://github.com/hail-is/hail/pull/12355#issuecomment-1284280492,2,['log'],['log']
Testability,"Re testing, I think the primary error here isn't that the TypeInfo of i2b disagreed with the jvm, it's that `CodeInt.toB` returns a `Code[Byte]`, using an lir instruction with (wrong) TypeInfo Boolean. That should be much easier to catch with some basic typechecking. (Though agreed the fix should go in first.)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11328#issuecomment-1032604404:3,test,testing,3,https://hail.is,https://github.com/hail-is/hail/pull/11328#issuecomment-1032604404,1,['test'],['testing']
Testability,"Re, my review above, the PR builder uses . ```; # g++ --version; g++ (Debian 6.3.0-18+deb9u1) 6.3.0 20170516; Copyright (C) 2016 Free Software Foundation, Inc.; This is free software; see the source for copying conditions. There is NO; warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.; ```. Whereas my machine uses:; ```; $ g++ --version; g++ (Ubuntu 8.2.0-7ubuntu1) 8.2.0; Copyright (C) 2018 Free Software Foundation, Inc.; This is free software; see the source for copying conditions. There is NO; warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.; ```. ~~So there was a change in behavior between GCC versions. :man_shrugging:~~ EDIT: Or not. The tests passing is an artifact of the exact order commands are executed in the CI build, rather than the makefile working with older versions of make and g++. It should still work for all versions we would reasonably expect people to use.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5354#issuecomment-463870141:703,test,tests,703,https://hail.is,https://github.com/hail-is/hail/pull/5354#issuecomment-463870141,1,['test'],['tests']
Testability,Re-tested UI with dev deploy: looks good.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7606#issuecomment-557911795:3,test,tested,3,https://hail.is,https://github.com/hail-is/hail/pull/7606#issuecomment-557911795,1,['test'],['tested']
Testability,Re: `testVSMGenIsLinearSpaceInSizeParameter` I agree and I also feel that it's a bit flaky.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/586#issuecomment-239802203:5,test,testVSMGenIsLinearSpaceInSizeParameter,5,https://hail.is,https://github.com/hail-is/hail/pull/586#issuecomment-239802203,1,['test'],['testVSMGenIsLinearSpaceInSizeParameter']
Testability,"Re: test failure, I'll rebase once the cloud script is in 0.1.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2160#issuecomment-325781229:4,test,test,4,https://hail.is,https://github.com/hail-is/hail/pull/2160#issuecomment-325781229,1,['test'],['test']
Testability,"Re: testing, I wanted to wait on the spawned batch and ensure that it passed, but I had trouble doing that because it looks like the new rich progress bars are printed to stdout so I can't make use of json output and `jq`. Can we print the progress bars to stderr instead?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12471#issuecomment-1324141580:4,test,testing,4,https://hail.is,https://github.com/hail-is/hail/pull/12471#issuecomment-1324141580,1,['test'],['testing']
Testability,"Ready for another look. I had to modify the classes some to make it work, particularly for getting the `type` out of the test. Now the type is with the Test rather than the TestResult, perhaps you see a better way?. Related notes, mostly relevant to future PRs once we have some feedback and a sense of performance:. I think LogisticRegressionNullFit should be a separate class, as it plays a conceptually and practically different role. I don't want to attach vectors of length nSamples (like mu) to each LogisticRegressionFit output, even though they would speed up the score test and first iteration of fitting per variant to not recompute them for every variant. I did put some of this efficiency in the score test (only computing the extra coordinate of score and row / column of fisher per variant). df would also then go away for LogisticRegressionFit, but I'd add the diagonal of its inverse for use in Wald (see below). The model fit function would then take a LogisticRegressionNullFit to use in the first iteration. The bigger future gains will come from not computing or inverting the Fisher matrix at all in the iteration, but rather using QR magic. val sqrtW = sqrt(mu :\* (1d - mu)); val QR = qr.reduced(X(::, _) :_ sqrtW); solve QR.R \* deltaB = QR.Q.t \* (y - mu) with R upper triangular (need to wrap lapack function). for Wald: return diagonal of inverse as well, namely diagonal of inv(R)^T \* inv(R), rather than inverting fisher again. for Score, this version of this may be faster:; val sqrtW = sqrt(mu :\* (1d - mu)); val Qty0 = qr.reduced.justQ(X(::, _) :_ sqrtW).t \* ((y - mu) :/ sqrtW); val chi2 = Qty0 dot Qty0. for Firth, modify score using:; val QQ = QR.Q :\* QR.Q; val h = sum(QQ(*, ::))",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/585#issuecomment-241153168:121,test,test,121,https://hail.is,https://github.com/hail-is/hail/pull/585#issuecomment-241153168,9,"['Log', 'Test', 'test']","['LogisticRegressionFit', 'LogisticRegressionNullFit', 'Test', 'TestResult', 'test']"
Testability,Ready for review. This also brings the documentation in line with logreg.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/645#issuecomment-241120586:66,log,logreg,66,https://hail.is,https://github.com/hail-is/hail/pull/645#issuecomment-241120586,1,['log'],['logreg']
Testability,"Ready to look at. TypeCheck modified more extensively than strictly needed for existing tests (only needed MakeArray modification here), because we shouldn't be relying on requiredeness for any virtual type, so this acts as 1) a more correct implementation 2) a helpful check than we aren't abusing requiredeness, in a relatively small PR. When we remove requiredeness from Type, I will either alias isOfType to leftTyp == rightTyp, or find/replace these back to ==.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7969#issuecomment-578549818:88,test,tests,88,https://hail.is,https://github.com/hail-is/hail/pull/7969#issuecomment-578549818,1,['test'],['tests']
Testability,Rebased and added a suite of tests for row annotation/col aggregation.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5081#issuecomment-452769404:29,test,tests,29,https://hail.is,https://github.com/hail-is/hail/pull/5081#issuecomment-452769404,1,['test'],['tests']
Testability,Rebased and now use the new database transaction logic.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7713#issuecomment-565371834:49,log,logic,49,https://hail.is,https://github.com/hail-is/hail/pull/7713#issuecomment-565371834,1,['log'],['logic']
Testability,Rebased! Going to run a test today to see if results change on DataProc with and without natives.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1064#issuecomment-275420288:24,test,test,24,https://hail.is,https://github.com/hail-is/hail/pull/1064#issuecomment-275420288,1,['test'],['test']
Testability,"Rebased/squashed, passing tests, ready for a look @cseed",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/555#issuecomment-239675545:26,test,tests,26,https://hail.is,https://github.com/hail-is/hail/pull/555#issuecomment-239675545,1,['test'],['tests']
Testability,"Regarding history and fake pages: I’m confused as to why fake pages would be used, since upon refresh that fake page wouldn’t correspond to a real page, but this shouldn’t interfere. The behavior without this solution should be the same: the url is updated with a hash. If you’ve noticed a concrete issue, please share it, because I may not understand the specific use (e.g. RTD). Haven’t seen any issues in testing.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7334#issuecomment-544675789:408,test,testing,408,https://hail.is,https://github.com/hail-is/hail/pull/7334#issuecomment-544675789,1,['test'],['testing']
Testability,"Regardless, I'm eager to see the benchmark results!",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12981#issuecomment-1562911594:33,benchmark,benchmark,33,https://hail.is,https://github.com/hail-is/hail/pull/12981#issuecomment-1562911594,1,['benchmark'],['benchmark']
Testability,Remaining issues:; - *WithIndexRespectsTransposition should test indices.; - Not currently using Gen.denseMatrix; - isn't the block size always smaller than the size?; - rebase changes in LDMatrix; - rename arbitraryHailBlockMatrix to arbitraryBlockMatrix,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2270#issuecomment-335896198:60,test,test,60,https://hail.is,https://github.com/hail-is/hail/pull/2270#issuecomment-335896198,1,['test'],['test']
Testability,Removed branch protection for the ci-test check. Force merging.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13069#issuecomment-1550380494:37,test,test,37,https://hail.is,https://github.com/hail-is/hail/pull/13069#issuecomment-1550380494,1,['test'],['test']
Testability,"Removed those, which also addressed cotton's comments. When tests pass I'll merge and then push the next PR up!",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3186#issuecomment-375802364:60,test,tests,60,https://hail.is,https://github.com/hail-is/hail/pull/3186#issuecomment-375802364,1,['test'],['tests']
Testability,"Reopened, passing all tests and fixed a few things.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/265#issuecomment-206544748:22,test,tests,22,https://hail.is,https://github.com/hail-is/hail/pull/265#issuecomment-206544748,1,['test'],['tests']
Testability,"Reopening this after some changes, mostly to see whether it works with g++-4.8.3 as installed; on the CI machines. The src/main/c/Makefile now builds a libboot.so with -fabi-version=2, which should work against; systems with g++-3.4.0 or later, and both libhail_abi_v2.so and libhail_abi_v9.so. The NativeCode; initialization then figures out which one to load. In theory this should work on MacOS systems back to MacOS 10.9 (Mavericks), which was the first; to use libc++ instead of libstdc++, and on Linux systems with g++3.4.0 or later. By default these libraries are built with ""-march=sandybridge"", which would work on all MacBook Pro's; released since 2011 (and is also the first cpu with AVX). In the medium term I favor the idea of packaging a known good tested compiler into the release, but ; believe that probably won't become critical until we're attempting whole-stage compilation, since the; generated PackDecoder's so far are relatively straightforward code and max out at about 2K lines.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3973#issuecomment-412736583:763,test,tested,763,https://hail.is,https://github.com/hail-is/hail/pull/3973#issuecomment-412736583,1,['test'],['tested']
Testability,"Reproduction example: ; ```python3; import hail as hl; vstruct = hl.Struct(; locus=hl.Locus(contig=10, position=60515, reference_genome='GRCh37'),; alleles=['C', 'T']; ). row_key = hl.struct(; locus=hl.locus(contig='10', pos=60515, reference_genome='GRCh37'),; alleles=['C', 'T']; ). assert hl.eval(row_key == vstruct); assert vstruct == row_key # <- Fail; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13045#issuecomment-1624144833:284,assert,assert,284,https://hail.is,https://github.com/hail-is/hail/issues/13045#issuecomment-1624144833,2,['assert'],['assert']
Testability,Requiredness suite test failures,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10763#issuecomment-895262768:19,test,test,19,https://hail.is,https://github.com/hail-is/hail/pull/10763#issuecomment-895262768,1,['test'],['test']
Testability,Requires #1222 for the tests,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1220#issuecomment-270740862:23,test,tests,23,https://hail.is,https://github.com/hail-is/hail/pull/1220#issuecomment-270740862,1,['test'],['tests']
Testability,Reran bad benchmarks with 5 iterations and 20 replicas. Looks like it was just noise. ```; Benchmark Name Ratio Time 1 Time 2 Mem Ratio Mem 1 (MB) Mem 2 (MB); -------------- ----- ------ ------ --------- ---------- ----------; hwe_normalized_pca_blanczos_small_data_0_iterations 104.3% 20.510 21.402 100.0% 9 9; hwe_normalized_pca 102.9% 35.982 37.009 100.0% 1 1; table_import_ints 102.4% 101.279 103.670 100.0% 1 1; hwe_normalized_pca_blanczos_small_data_10_iterations 94.8% 54.515 51.684 100.0% 10 10; ----------------------; Harmonic mean: 101.0%; Geometric mean: 101.0%; Arithmetic mean: 101.1%; Median: 102.6%; ```,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10905#issuecomment-946827333:10,benchmark,benchmarks,10,https://hail.is,https://github.com/hail-is/hail/pull/10905#issuecomment-946827333,2,"['Benchmark', 'benchmark']","['Benchmark', 'benchmarks']"
Testability,"Right now this passes all tests, but there are some `???`s in there that just never get triggered. Going to try and write tests that hit them before coming up with an implementation.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10001#issuecomment-775281933:26,test,tests,26,https://hail.is,https://github.com/hail-is/hail/pull/10001#issuecomment-775281933,2,['test'],['tests']
Testability,"Right now we run dataproc tests only on release, not on every commit, because they're too expensive/slow. That way we never release a version that can't pass. I wonder if that's also the right strategy here -- adding QoB release tests for things that only go wrong at scale. That said, I don't want to block on that. Awesome change, thank you!",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12736#issuecomment-1499155038:26,test,tests,26,https://hail.is,https://github.com/hail-is/hail/pull/12736#issuecomment-1499155038,2,['test'],['tests']
Testability,"Right, I was trying to suggest that run_forever appears to catches the thrown errors, and that the issue happens because we hit read_timeout (120s), which is an upstream issue. . Tests: #5065. What I think is happening: Flask is a blocking server, so while it waits that 120s, nothing else can happen. The upstream issue isn't resolved, and it keeps blocking. You see this in the 2nd set in particular (~10 timeout requests happen). While the upstream issue should be solved, I think we should also follow Flask best practices, and preferably use Gunicorn + async/green-thread workers + N kernel threads/processes. . Additionally, I would recommend we test a move to Falcon (keeping Gunicorn). It should be far faster.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4984#issuecomment-451216690:179,Test,Tests,179,https://hail.is,https://github.com/hail-is/hail/issues/4984#issuecomment-451216690,2,"['Test', 'test']","['Tests', 'test']"
Testability,"Right. Overlapping genes is handled by the `single_key=False` case that I used in my extended 0.1 doc example for linreg burden, but you said you were thinking to remove that case and use explode so I didn't think it worth using that exact example. People will want to use explode, groupBy and linreg / logreg together to test genes for association, so that may be a nice example in groupVariantsBy. So I'm fine with holding off on more examples until this and explode are merged, and then we can revisit together.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2497#issuecomment-348369590:303,log,logreg,303,https://hail.is,https://github.com/hail-is/hail/pull/2497#issuecomment-348369590,2,"['log', 'test']","['logreg', 'test']"
Testability,"Rmoving `prio:high` because I believe this is fixed (has been for a while), but I don't believe there are sufficient tests for the interaction of scans and aggregations yet.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/5358#issuecomment-526203548:117,test,tests,117,https://hail.is,https://github.com/hail-is/hail/issues/5358#issuecomment-526203548,1,['test'],['tests']
Testability,"Root cause found. Each time a batch test runs it generates a bunch of garbage because batch unsafely handles `cancel`. Here's the bad sequence:. - batch adds a job to `job_id_job`; - batch makes an HTTP request to k8s to create the pod, THREAD IS NOW PAUSED WAITING FOR RESULT; - flask handles a new request to cancel said job, tries to delete the pod; - [_delete_pod says: if `_pod_name` is `None`, don't do anything](https://github.com/hail-is/hail/blob/master/batch/batch/server/server.py#L83), so it does nothing but tells the client 200 OK!; - THREAD WAITING ON k8s WAKES UP: oh good, pod created. I think the fix is to check after pod creation if our state was set to canceled. If yes, delete said pod.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/5168#issuecomment-456618542:36,test,test,36,https://hail.is,https://github.com/hail-is/hail/issues/5168#issuecomment-456618542,1,['test'],['test']
Testability,Running python tests in local mode gets some violations of the `eltRegion <= outerRegion` assertion. Adding the WIP label until I fix that.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9401#issuecomment-689831499:15,test,tests,15,https://hail.is,https://github.com/hail-is/hail/pull/9401#issuecomment-689831499,2,"['assert', 'test']","['assertion', 'tests']"
Testability,"SNP99.30to99.50,Description=""Truth sensitivity tranche level for SNP model at VQS Lod: -7.5522 <= x < -4.8125"">; ##FILTER=<ID=VQSRTrancheSNP99.50to99.90,Description=""Truth sensitivity tranche level for SNP model at VQS Lod: -109.7088 <= x < -7.5522"">; ##FILTER=<ID=VQSRTrancheSNP99.90to100.00+,Description=""Truth sensitivity tranche level for SNP model at VQS Lod < -3227.3414"">; ##FILTER=<ID=VQSRTrancheSNP99.90to100.00,Description=""Truth sensitivity tranche level for SNP model at VQS Lod: -3227.3414 <= x < -109.7088"">; ##FORMAT=<ID=AD,Number=R,Type=Integer,Description=""Allelic depths for the ref and alt alleles in the order listed"">; ##FORMAT=<ID=DP,Number=1,Type=Integer,Description=""Approximate read depth (reads with MQ=255 or with bad mates are filtered)"">; ##FORMAT=<ID=GQ,Number=1,Type=Integer,Description=""Genotype Quality"">; ##FORMAT=<ID=GT,Number=1,Type=String,Description=""Genotype"">; ##FORMAT=<ID=PL,Number=G,Type=Integer,Description=""Normalized, Phred-scaled likelihoods for genotypes as defined in the VCF specification"">; ##INFO=<ID=AC,Number=A,Type=Integer,Description=""Allele count in genotypes, for each ALT allele, in the same order as listed"">; ##INFO=<ID=AF,Number=A,Type=Float,Description=""Allele Frequency, for each ALT allele, in the same order as listed"">; ##INFO=<ID=AN,Number=1,Type=Integer,Description=""Total number of alleles in called genotypes"">; ##INFO=<ID=BaseQRankSum,Number=1,Type=Float,Description=""Z-score from Wilcoxon rank sum test of Alt Vs. Ref base qualities"">; ##INFO=<ID=DB,Number=0,Type=Flag,Description=""dbSNP Membership"">; ##INFO=<ID=DP,Number=1,Type=Integer,Description=""Approximate read depth; some reads may have been filtered"">; ##INFO=<ID=DS,Number=0,Type=Flag,Description=""Were any of the samples downsampled?"">; ##INFO=<ID=Dels,Number=1,Type=Float,Description=""Fraction of Reads Containing Spanning Deletions"">; ##INFO=<ID=END,Number=1,Type=Integer,Description=""Stop position of the interval"">; ##INFO=<ID=FS,Number=1,Type=Float,Description=""",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1822#issuecomment-301916658:6707,test,test,6707,https://hail.is,https://github.com/hail-is/hail/issues/1822#issuecomment-301916658,1,['test'],['test']
Testability,Sadly we don't test the release step of `build.yaml` - adding `do-not-test` to not waste resources.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14453#issuecomment-2045925528:15,test,test,15,https://hail.is,https://github.com/hail-is/hail/pull/14453#issuecomment-2045925528,2,['test'],['test']
Testability,"Same problem as the issue. The log file is for a job that never got started. By default, hail writes the log file to `hail.log` when it runs. To avoid overwriting the log file, you can use `-l /path/to/my.log` to write a different file name or `-a` to append to the log file.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/304#issuecomment-211168558:31,log,log,31,https://hail.is,https://github.com/hail-is/hail/issues/304#issuecomment-211168558,6,['log'],['log']
Testability,Scala tests pass. Gotta unbreak the python tests.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10094#issuecomment-784488352:6,test,tests,6,https://hail.is,https://github.com/hail-is/hail/pull/10094#issuecomment-784488352,2,['test'],['tests']
Testability,"Script for above output:; ```; #load hail; from hail import *. #set minimum partition size and log location; hc = HailContext(min_block_size=50, log=""/home/09mh/kt_troubleshooting_issue_042617.hail.log""). #import bgen and convert to vds; vds = hc.import_bgen(""gs://pipeline/testGWAS/chr1.bgen"",sample_file=""gs://pipeline/testGWAS/inds_info.sample""). kt1 = hc.import_keytable('gs://pipeline/testGWAS/var_anno.tsv', config=TextTableConfig(impute=True,delimiter=' ')).rename(['varid','rsid','C1','C2']).select(['varid','C1','C2']).key_by(['varid']); #check import of var_anno & conversion; print(kt1.schema); print(kt1.key_names); kt1.to_dataframe().show(10). vds_kt = vds.variants_keytable().flatten().select(['v','va.varid']).key_by(['v']); #check keytable made from vds; print(vds_kt.schema); print(vds_kt.key_names); vds_kt.to_dataframe().show(10). vds_kt = vds.variants_keytable().flatten().select(['v','va.varid']).key_by(['va.varid']); print(vds_kt.schema); print(vds_kt.key_names); vds_kt.to_dataframe().show(10). kt2 = vds_kt.join(kt1,how='left'); #check join; print(kt2.schema); print(kt2.key_names); kt2.to_dataframe().show(10); kt2 = kt2.key_by(['v']). print('After rekeying:'); print(kt2.schema); print(kt2.key_names); kt2.to_dataframe().show(10). kt2.write('gs://pipeline/testGWAS/chr1_var_anno.kt'); ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1725#issuecomment-298355527:95,log,log,95,https://hail.is,https://github.com/hail-is/hail/issues/1725#issuecomment-298355527,7,"['log', 'test']","['log', 'testGWAS']"
Testability,See comment above. I've modified testToKeyGsWeightRdd to include interaction with explode. The test will fail until #2549 goes in since it used `toSet()`.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2544#issuecomment-350511538:33,test,testToKeyGsWeightRdd,33,https://hail.is,https://github.com/hail-is/hail/pull/2544#issuecomment-350511538,2,['test'],"['test', 'testToKeyGsWeightRdd']"
Testability,See https://hail.zulipchat.com/#narrow/stream/127527-team/topic/cloud.20fuse.20failing.20tests/near/417695786 for why I added do-not-test,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14186#issuecomment-1908633422:133,test,test,133,https://hail.is,https://github.com/hail-is/hail/pull/14186#issuecomment-1908633422,1,['test'],['test']
Testability,"See question, but otherwise tests are passing.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11123#issuecomment-994254165:28,test,tests,28,https://hail.is,https://github.com/hail-is/hail/pull/11123#issuecomment-994254165,1,['test'],['tests']
Testability,See the random seed specification in #357 . Gradle will say the random seed at the top of the log if tests are run with gradle. Spec.check will also print it out (for use in IntelliJ). You can either specify using Spec.check(seed = Option(5)) or with the Java properties:; -Dhail.seed=5; -Dhail.randomize=true,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/335#issuecomment-215453804:94,log,log,94,https://hail.is,https://github.com/hail-is/hail/issues/335#issuecomment-215453804,2,"['log', 'test']","['log', 'tests']"
Testability,Seems like the correct privilege to get the test account so that it can use requestor pays.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9096#issuecomment-662119484:44,test,test,44,https://hail.is,https://github.com/hail-is/hail/pull/9096#issuecomment-662119484,1,['test'],['test']
Testability,Seems the `testImplementation` doesn't configure the classpath for tests correctly - javatests are currently failing with `Error: Could not find or load main class org.testng.TestNG`,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13551#issuecomment-1708671249:11,test,testImplementation,11,https://hail.is,https://github.com/hail-is/hail/pull/13551#issuecomment-1708671249,4,"['Test', 'test']","['TestNG', 'testImplementation', 'testng', 'tests']"
Testability,"Sent this to you, Ed, since, IIRC, you experienced broken uploads in the past due to our bad copy implementation. If you could clone this and try; ```; rm hail/upload-remote-test-resources && make -C hail upload-remote-test-resources; ```; that'd be most appreciated!",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14138#issuecomment-1887634816:174,test,test-resources,174,https://hail.is,https://github.com/hail-is/hail/pull/14138#issuecomment-1887634816,2,['test'],['test-resources']
Testability,"Should be fixed there. Also, the organization of site vs docs is super confusing imo. We have a site folder, which contains the Nginx configuration of site, and also the kube definition of the site deployment. Which makes a lot of sense. However, it also needs files in ../hail/build/www. Those files are built using a script in /hail/python/docs, which grabs www files from the working directory, which in our case should be /hail and not /site, copies those to its ./build/www, merges them with a bunch of files from /hail/python/docs/... , but not only that, it also compiles all of the templates for our cwd ./www. Oh and we also test hail import during doc build, which seems outside of what a documentation / static html build process should do.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/5282#issuecomment-463307913:634,test,test,634,https://hail.is,https://github.com/hail-is/hail/issues/5282#issuecomment-463307913,1,['test'],['test']
Testability,"Should be ready for a look, tests pass, added construction test.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8522#issuecomment-615541561:28,test,tests,28,https://hail.is,https://github.com/hail-is/hail/pull/8522#issuecomment-615541561,2,['test'],"['test', 'tests']"
Testability,Should be ready to go now. I'll add a better description in the morning. I also haven't benchmarked anything yet; would be good to do that and maybe tune things like amount of unrolling. @danking Could you share how you created the datatset you were using for benchmarking?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13787#issuecomment-1756261102:88,benchmark,benchmarked,88,https://hail.is,https://github.com/hail-is/hail/pull/13787#issuecomment-1756261102,2,['benchmark'],"['benchmarked', 'benchmarking']"
Testability,Should i run benchmarks before merging this? Changing the way things are copied around seems potentially prone to performance regression.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9989#issuecomment-773452910:13,benchmark,benchmarks,13,https://hail.is,https://github.com/hail-is/hail/pull/9989#issuecomment-773452910,1,['benchmark'],['benchmarks']
Testability,Shouldn’t there be an http log entry for unfreeze_merge_deploy? Does anyone remember unfreezing?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13050#issuecomment-1563299202:27,log,log,27,https://hail.is,https://github.com/hail-is/hail/issues/13050#issuecomment-1563299202,1,['log'],['log']
Testability,"Since RegionPool cleans its memory via PhantomReferences now, it is not AutoCloseable. In fact, I'm not sure how we avoided double free errors in the past. I made all the tests not use `using`.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8203#issuecomment-592744446:171,test,tests,171,https://hail.is,https://github.com/hail-is/hail/pull/8203#issuecomment-592744446,1,['test'],['tests']
Testability,"Since everyone is asking about hardcalls:. ```; # (cd ../hail && gradle installDist) && ../hail/build/install/hail/bin/hail read -i profile225-splitmulti-hardcalls.vds ibd -o hail.genome ; :nativeLib UP-TO-DATE; :compileJava UP-TO-DATE; :compileScala UP-TO-DATE; :processResources UP-TO-DATE; :classes UP-TO-DATE; :jar UP-TO-DATE; :startScripts UP-TO-DATE; :installDist UP-TO-DATE. BUILD SUCCESSFUL. Total time: 2.728 secs; hail: info: running: read -i profile225-splitmulti-hardcalls.vds; [Stage 0:> (0 + 0) / 4]SLF4J: Failed to load class ""org.slf4j.impl.StaticLoggerBinder"".; SLF4J: Defaulting to no-operation (NOP) logger implementation; SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.; [Stage 1:============================================> (3 + 1) / 4]hail: info: running: ibd -o hail.genome; [Stage 8:======================================================> (62 + 3) / 65]hail: info: while writing:; hail.genome; merge time: 6.619s; hail: info: timing:; read: 3.824s; ibd: 3m19.2s; total: 3m23.1s. # dc; 5 k; 3 60 * 23 + ; 23 / p; 8.82608; ```. about 9x slower now.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1092#issuecomment-260651639:619,log,logger,619,https://hail.is,https://github.com/hail-is/hail/pull/1092#issuecomment-260651639,1,['log'],['logger']
Testability,"Since my interface package isn't ready for release yet, here's a reproducible example using just R and sparklyr, with a Hail jar somewhere. Again, this is happening on the Mac, sparklyr version 0.8.4.9004 (there is probably a newer one on CRAN, I doubt that it matters). ```; data(mtcars); hail_jar <- ""/path/to/your/hail-all-spark.jar""; classpath_vars <-; c(spark.driver.extraClassPath=paste(hail_jar, collapse=.Platform$path.sep),; spark.executor.extraClassPath=paste(basename(hail_jar),; collapse=.Platform$path.sep)); config <- list(sparklyr.jars.default=hail_jar,; sparklyr.shell.conf=paste0(names(classpath_vars), ""='"",; classpath_vars, ""'""),; spark.serializer=""org.apache.spark.serializer.KryoSerializer"",; spark.kryo.registrator=""is.hail.kryo.HailKryoRegistrator""); sc <- sparklyr::spark_connect(""local"", version=""2.2.0"", config=config); sdf <- sparklyr::spark_dataframe(dplyr::copy_to(sc, mtcars)); hc <- sparklyr::invoke_static(sc, ""is.hail.HailContext"", ""apply"",; sparklyr::spark_context(sc), ""Hail"", NULL,; ""local[*]"", ""hail.log"", TRUE, FALSE, 1L, 50L,; tempdir()); keys <- sparklyr:::invoke_static(sc, ""is.hail.utils"", ""arrayToArrayList"",; array(character(0L))); ht <- sparklyr::invoke_static(sc, ""is.hail.table.Table"", ""fromDF"", hc, sdf,; keys); sparklyr::invoke(ht, ""count""); ```. Thanks a lot for your continued attention to this issue.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4513#issuecomment-429475190:1037,log,log,1037,https://hail.is,https://github.com/hail-is/hail/issues/4513#issuecomment-429475190,1,['log'],['log']
Testability,"Since netcdf broke my R installation, I upgraded R. Now to revert to 3.3.1, I'm trying to install from the downloadable tarball and running into a bunch of errors. Is this worth it? Why don't we just test against a static results file?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3281#issuecomment-377952235:200,test,test,200,https://hail.is,https://github.com/hail-is/hail/pull/3281#issuecomment-377952235,1,['test'],['test']
Testability,"Since the dataproc tests only run on main commits (not on every PR commit, due to cost), I submitted a dev deploy to test the latest commit to this branch against dataproc: https://ci.hail.is/batches/8119055. ```; hailctl dev deploy -b danking/hail:dataproc-2.2 -s test_dataproc-37 -s test_dataproc-38; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14158#issuecomment-1924204910:19,test,tests,19,https://hail.is,https://github.com/hail-is/hail/pull/14158#issuecomment-1924204910,2,['test'],"['test', 'tests']"
Testability,"Since this doesn't get tested by CI normally, running a dev deploy here: https://ci.hail.is/batches/403111. If it succeeds, we should feel good I think.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11273#issuecomment-1022499548:23,test,tested,23,https://hail.is,https://github.com/hail-is/hail/pull/11273#issuecomment-1022499548,1,['test'],['tested']
Testability,"Slightly weird match in testLoweringMatrixMapColsWithAggFiltersAndLets. We end up setting required on PVoid. Just thought it was interesting that this had not come up yet:. Example IR:. PVOID FOR NODE If(ApplyComparisonOp(LT(int32,int32),GetField(In(1,PCStruct{row_idx:PInt32,`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`:PCArray[PCStruct{}]}),row_idx),I32(5)),Begin(ArrayBuffer(SeqOp(0,ArrayBuffer(Cast(GetField(In(1,PCStruct{row_idx:PInt32,`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`:PCArray[PCStruct{}]}),row_idx),int64)),AggStateSignature(Map(Sum() -> AggSignature(Sum(),ArrayBuffer(),ArrayBuffer(int64))),Sum(),None),Sum()))),Begin(ArrayBuffer()))",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8063#issuecomment-584453034:24,test,testLoweringMatrixMapColsWithAggFiltersAndLets,24,https://hail.is,https://github.com/hail-is/hail/pull/8063#issuecomment-584453034,1,['test'],['testLoweringMatrixMapColsWithAggFiltersAndLets']
Testability,"So I reread the title of your PR. This is fine if you just submit the test batch. However, I think you should come up with a plan to eventually get to the full implementation in stages. Whatever works best for you.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9614#issuecomment-714575225:70,test,test,70,https://hail.is,https://github.com/hail-is/hail/pull/9614#issuecomment-714575225,1,['test'],['test']
Testability,"So I still need to sit down and actually dig through this, but my initial thoughts:. We should have shuffler tests that exercise the shuffler directly (without going through RVD/TableIR). I don't think they need to be totally comprehensive, or be necessarily independent of all hail infrastructure (e.g. encoders/decoders/types/regions, which you're using in the shuffler), but should exercise whatever the basic interface between the shuffle service and the rest of the world is going to be, independent of the specific implementation that shuffles an RVD. To that end, I'd also advocate for defining a backend-agnostic shuffler interface to shuffle TableIRs/RVDs; instead of needing to check the context flag everywhere you might shuffle something, we'd define what an RVD shuffle looks like independent of whether or not we're using the shuffle service or a Spark shuffle, and then the shuffler interface would call the correct implementation depending on what shuffler if was supposed to use. (I'm not absolutely set on the second thing happening immediately, but I do think it's longer-term the right way to think about how the shuffler plugs in, and it feels like it should be a pretty minimal change from what you have right now to get a possibly-imperfect-but-workable interface in.). In short, this feels like two+ separate PRs to me, in that it's composed of pretty distinct, substantial changes that involve a lot of non-trivial choices:; - the actual implementation of the shuffle service, and; - a client for Hail IRs to interact with the shuffle service + wiring things up to actually go through it. and I'm happy to review both pieces of it, but it might be easier + quicker to get the shuffler itself in if you broke that change out separately.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8205#issuecomment-594214674:109,test,tests,109,https://hail.is,https://github.com/hail-is/hail/pull/8205#issuecomment-594214674,1,['test'],['tests']
Testability,"So I think I'd appreciate a review on this. Would especially appreciate feedback about the question I wrote in the PR body as well as what to do about documentation and testing:. - We have pretty expansive FS testing, but not for these new shim functions. Should we convert some of our tests to use these functions instead of the FS objects themselves?; - We don't have `hailtop` docs, and afaik this is the first module outside of `hailtop.batch` that would be public. Where should its docs go?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12731#issuecomment-1499652542:169,test,testing,169,https://hail.is,https://github.com/hail-is/hail/pull/12731#issuecomment-1499652542,3,['test'],"['testing', 'tests']"
Testability,"So I think the root issue here is the unnecessary duplication between `pyRegisterIR` and `pyRegisterIRForServiceBackend`. The only real difference is that one takes and already parsed IR, and the other takes a string and calls the parser. The callers of `pyRegisterIR` in python all call into the parser first, but I don't see any reason it has to make two calls across the python/scala bridge; I think `pyRegisterIR` should just take the IR as a string and call the parser like `pyRegisterIRForServiceBackend` does. With that change, it should be possible to make one a simple wrapper around the other (or maybe even get rid of `pyRegisterIRForServiceBackend` completely). That way the core logic is shared between backends and is getting tested. Let me know if you want help with this, or if you'd like me to make a separate PR for this.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14579#issuecomment-2174358685:692,log,logic,692,https://hail.is,https://github.com/hail-is/hail/pull/14579#issuecomment-2174358685,2,"['log', 'test']","['logic', 'tested']"
Testability,"So I think we should fix this is in a slightly different way. First, I want to unify the log and status page. Second, I want the status to actually include the whole job configuration, of which status is just a sub-field, so you can look at detail to what you submitted. Then it would make sense for these links to always be present. That said, they obviously shouldn't be broken. Instead of 404, we should just say ""job is pending, no logs"" or wahtever. Let me make pass on the batch2 UI and then revisit this, OK?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7449#issuecomment-549809632:89,log,log,89,https://hail.is,https://github.com/hail-is/hail/pull/7449#issuecomment-549809632,2,['log'],"['log', 'logs']"
Testability,"So error propagation from CI back to hailctl isn't great right now. (Something worth fixing!) If it an error in what you're trying to deploy (e.g. branch not found, syntax error in build.yaml, etc.) you can find it in the CI log. FYI, you can't dev deploy monitoring. It's part of the infrastructure.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7015#issuecomment-539927584:225,log,log,225,https://hail.is,https://github.com/hail-is/hail/pull/7015#issuecomment-539927584,1,['log'],['log']
Testability,"So is there just no such thing as a ""distinct inner join"" in hail? My read of this (other than the test porting) is that we weren't using `innerJoinDistinct` anywhere anyway other than for tests",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7504#issuecomment-554178679:99,test,test,99,https://hail.is,https://github.com/hail-is/hail/pull/7504#issuecomment-554178679,2,['test'],"['test', 'tests']"
Testability,"So now the tests are passing locally for me, but not the call back test on the cloud...",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5563#issuecomment-473458156:11,test,tests,11,https://hail.is,https://github.com/hail-is/hail/pull/5563#issuecomment-473458156,2,['test'],"['test', 'tests']"
Testability,"So overall plan is:. - get 2.2.0 build support in (this patch); - stop testing 2.1.0 once it isn't being deployed,; - start testing 2.2.0 (I will need to update the CI image to install Spark 2.2.0),; - add 2.2.0 to the list of deployed versions,; - make Spark 2.2.0/Dataproc 1.2 the version in cloudtools,; - drop testing/deploy support for 2.0.2. Did I miss anything?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2656#issuecomment-355617537:71,test,testing,71,https://hail.is,https://github.com/hail-is/hail/pull/2656#issuecomment-355617537,3,['test'],['testing']
Testability,"So the issue is that we used to have `filter` and `explode` inside of aggregations (like `counter` and `collect_as_set`). Now they're placed outside of these operations. There was [a forum post](https://discuss.hail.is/t/breaking-change-redesign-of-aggregator-interface/701) announcing this breaking change. The above to examples should instead be written as:. ```; cut_dict = {'pop': hl.agg.filter(hl.is_defined(mt.meta.pop), hl.agg.counter(mt.meta.pop)),; 'subpop': hl.agg.filter(hl.is_defined(mt.meta.subpop) & hl.is_defined(mt.meta.pop),; hl.agg.collect_as_set(hl.struct(subpop=mt.meta.subpop, pop=mt.meta.pop))); }; ```. The fix for this issue is to change the assertion into an `if` with a `raise` of an error message, probably one that references that discuss post.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4770#issuecomment-452847982:666,assert,assertion,666,https://hail.is,https://github.com/hail-is/hail/issues/4770#issuecomment-452847982,1,['assert'],['assertion']
Testability,So the master merge commit status points to the master tests logs but not the deploy logs. I was hoping for the deploy logs (although the test logs are good if we have both).,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4437#issuecomment-438075286:55,test,tests,55,https://hail.is,https://github.com/hail-is/hail/issues/4437#issuecomment-438075286,6,"['log', 'test']","['logs', 'test', 'tests']"
Testability,"So the sequence of events is:; - create repo on GH (via REST call); - initialize local repository (no GH comms); - add remote (no GH comms); - push to GH. (see [test-locally.sh](https://github.com/hail-is/hail/blob/master/ci/test-locally.sh#L31-L53), which is called by test-cluster.sh, after exposing its pod via nginx). We're failing on that last step. It appears that the repository creation succeeded, the response to that REST call was a successful looking JSON object (which indicates a create repository with the expected name, `REPO_NAME=ci-test-p4a9fxo7`) [1]. It is unclear if repository deletion succeeded [2], I should find a way to make curl print the HTTP status code returned by cluster deletion. FWIW, the repository appears to be deleted now (https://github.com/hail-ci-test/ci-test-p4a9fxo7), and, AFAIK, no other part of our system deletes these repositories. [1]:; ```; {; ""id"": 152339517,; ""node_id"": ""MDEwOlJlcG9zaXRvcnkxNTIzMzk1MTc="",; ""name"": ""ci-test-p4a9fxo7"",; ""full_name"": ""hail-ci-test/ci-test-p4a9fxo7"",; ""private"": false,; ""owner"": {; ""login"": ""hail-ci-test"",; ""id"": 43152710,; ""node_id"": ""MDEyOk9yZ2FuaXphdGlvbjQzMTUyNzEw"",; ""avatar_url"": ""https://avatars1.githubusercontent.com/u/43152710?v=4"",; ""gravatar_id"": """",; ""url"": ""https://api.github.com/users/hail-ci-test"",; ""html_url"": ""https://github.com/hail-ci-test"",; ""followers_url"": ""https://api.github.com/users/hail-ci-test/followers"",; ""following_url"": ""https://api.github.com/users/hail-ci-test/following{/other_user}"",; ""gists_url"": ""https://api.github.com/users/hail-ci-test/gists{/gist_id}"",; ""starred_url"": ""https://api.github.com/users/hail-ci-test/starred{/owner}{/repo}"",; ""subscriptions_url"": ""https://api.github.com/users/hail-ci-test/subscriptions"",; ""organizations_url"": ""https://api.github.com/users/hail-ci-test/orgs"",; ""repos_url"": ""https://api.github.com/users/hail-ci-test/repos"",; ""events_url"": ""https://api.github.com/users/hail-ci-test/events{/privacy}"",; ""received_events_url"": ""https://api.gi",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858:161,test,test-locally,161,https://hail.is,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858,6,['test'],"['test', 'test-', 'test-cluster', 'test-locally']"
Testability,"So there appear to be to distinct issues:. - failure to push the initial data to a repository due to a 404 https://storage.googleapis.com/hail-ci-0-1/ci/7aa524504b8bafe0a4af859e73bc4f9efdaa052c/414f3f183bd5f2ec04e1c732522cbc0b8b1fca31/job-log. - 404s due to someone else already bound to port 5000 (maybe `batch`?) https://storage.googleapis.com/hail-ci-0-1/ci/7aa524504b8bafe0a4af859e73bc4f9efdaa052c/39a94649482a2512a7a514e6084c5b84f48b8205/index.html; ```; Traceback (most recent call last):; File ""ci/ci.py"", line 372, in <module>; app.run(host='0.0.0.0', threaded=False); File ""/home/hail/.conda/envs/hail-ci/lib/python3.7/site-packages/flask/app.py"", line 943, in run; run_simple(host, port, self, **options); File ""/home/hail/.conda/envs/hail-ci/lib/python3.7/site-packages/werkzeug/serving.py"", line 814, in run_simple; inner(); File ""/home/hail/.conda/envs/hail-ci/lib/python3.7/site-packages/werkzeug/serving.py"", line 774, in inner; fd=fd); File ""/home/hail/.conda/envs/hail-ci/lib/python3.7/site-packages/werkzeug/serving.py"", line 666, in make_server; passthrough_errors, ssl_context, fd=fd); File ""/home/hail/.conda/envs/hail-ci/lib/python3.7/site-packages/werkzeug/serving.py"", line 577, in __init__; self.address_family), handler); File ""/home/hail/.conda/envs/hail-ci/lib/python3.7/socketserver.py"", line 449, in __init__; self.server_bind(); File ""/home/hail/.conda/envs/hail-ci/lib/python3.7/http/server.py"", line 137, in server_bind; socketserver.TCPServer.server_bind(self); File ""/home/hail/.conda/envs/hail-ci/lib/python3.7/socketserver.py"", line 463, in server_bind; self.socket.bind(self.server_address); OSError: [Errno 98] Address already in use; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4517#issuecomment-429133941:239,log,log,239,https://hail.is,https://github.com/hail-is/hail/issues/4517#issuecomment-429133941,1,['log'],['log']
Testability,"So this is failing the `test_aggregators_hist_neg0` test, which asserts that a value of -0.0 falls outside of the bins for `[0, 2, 4, 6, 8, 10]`. I really don't see why this is the desired behavior, but this is how it stands as the fix to #5846. I can pretty easily fix this to use `compare` instead of `<=`, but I'd instead like to fix the test so that we consider -0.0 to be in the bin [0.0, 2.0). . @tpoterba @chrisvittal",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6730#issuecomment-515308903:52,test,test,52,https://hail.is,https://github.com/hail-is/hail/pull/6730#issuecomment-515308903,3,"['assert', 'test']","['asserts', 'test']"
Testability,"So this made a big difference across the board. This is why we need benchmarks nightly, would have caught this.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10061#issuecomment-781365583:68,benchmark,benchmarks,68,https://hail.is,https://github.com/hail-is/hail/pull/10061#issuecomment-781365583,1,['benchmark'],['benchmarks']
Testability,"So ya this is what was giving me pause so would appreciate your take. I threw WIP on so I can make sure it's properly tested before it merges. Here are my thoughts:; - I can manually exercise all the commands easily enough. Flexing all the options is harder, but I can compare the help for each command. The fact that these files are all lint-free and typecheck gives me confidence I did have before.; - I'm not worried about breaking dev stuff. Basically the only thing I am worried about breaking is the dataproc group.; - I was planning on running the test dataproc scripts prior to removing the WIP, which is something, but obviously does not test all the options. I think it would be nice to get a close review for dataproc start/submit (the biggest ones that people rely on the most) and everything else can be at whatever granularity you feel comfortable with.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13109#issuecomment-1570824362:118,test,tested,118,https://hail.is,https://github.com/hail-is/hail/pull/13109#issuecomment-1570824362,3,['test'],"['test', 'tested']"
Testability,"So, something weird is going on that I don't understand, and we should probably hold off on merging this for now. When I emit the stream code directly, bypassing the compiler, the new reducible version is clearly faster: running; ```scala; val f = compile1[Int, Unit] { (mb, n) =>; val outer = Stream.range(mb, 0, 1, n); val flatMap = outer.flatMap(i => Stream.range(mb, 0, 1, i)); flatMap.forEach(mb, i => Code._empty); }; val n = 50000; var t = System.nanoTime(); f(n); println(s""first run: ${(System.nanoTime() - t) / 1000000} ms""); for (i <- 1 to 10) { f(n) }; t = System.nanoTime(); for (i <- 1 to 50) { f(n) }; println(s""warmed up mean: ${(System.nanoTime() - t) / (1000000 * 50)} ms""); ```; on main prints; ```; first run: 2088 ms; warmed up mean: 1972 ms; ```; and on this PR; ```; first run: 867 ms; warmed up mean: 937 ms; ```; (As an aside, the lack of burn in is interesting. I think it means either the function is never getting jit compiled, or OSR kicks in on the first run and is as effective as full compilation.). On the other hand, running the benchmark; ```scala; ht = hl.utils.range_table(30); ht = ht.annotate(sum=hl.sum(hl.range(5_000).flatmap(lambda x: hl.range(x)))); ht._force_count(); ```; I get; ```; > hail-bench compare main-bench.json branch-bench.json; Benchmark Name Ratio Time 1 Time 2; -------------- ----- ------ ------; table_annotate_flatMap 371.8% 0.795 2.958; ```. I'm currently at a loss for theories to explain this.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9429#issuecomment-690420227:1063,benchmark,benchmark,1063,https://hail.is,https://github.com/hail-is/hail/pull/9429#issuecomment-690420227,2,"['Benchmark', 'benchmark']","['Benchmark', 'benchmark']"
Testability,"So, there was a test run that got cancelled (probably main branch changed) but which passed the service backend tests. It confirms that this most recent run ran all the tests, but it has some fishy looking error outputs:; ```; [gw2] PASSED [2023-04-21 18:31:07] test/hail/table/test_table.py::Tests::test_from_pandas_missing_and_nans Exception ignored in: <_io.FileIO name=0 mode='rb' closefd=True>; ResourceWarning: unclosed file <_io.TextIOWrapper name=0 mode='r' encoding='UTF-8'>; Exception ignored in: <_io.FileIO name=0 mode='rb' closefd=True>; ResourceWarning: unclosed file <_io.TextIOWrapper name=0 mode='r' encoding='UTF-8'>; Exception ignored in: <_io.FileIO name=0 mode='rb' closefd=True>; ResourceWarning: unclosed file <_io.TextIOWrapper name=0 mode='r' encoding='UTF-8'>; Exception ignored in: <_io.FileIO name=0 mode='rb' closefd=True>; ResourceWarning: unclosed file <_io.TextIOWrapper name=0 mode='r' encoding='UTF-8'>; ```; Are we not cleaning up files somewhere and that's somehow hanging the system?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12731#issuecomment-1518364066:16,test,test,16,https://hail.is,https://github.com/hail-is/hail/pull/12731#issuecomment-1518364066,5,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"So, this is passing locally for me now. The credentials change removed the race condition with my kubernetes permissions being overridden. Two questions:. 1. The logs are written to this path: `f'{instance_id}/{job_id}/{task_name}/job.log'` where `instance_id` is the Batch instance id. I did this to avoid naming conflicts between different batch instances running in the CI, locally, and the production batch instance. However, this makes it difficult to find a particular log file in the browser. It is also based on the instance ID which is printed in a log file that is not persistent. I think this problem will go away once the SQL changes go in. But thought it was something to bring up. 2. I don't do any cleanup of the test logs output. I think I should probably add this before this PR goes in. Thoughts?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5866#issuecomment-485458732:162,log,logs,162,https://hail.is,https://github.com/hail-is/hail/pull/5866#issuecomment-485458732,6,"['log', 'test']","['log', 'logs', 'test']"
Testability,"So.... this is technically working, but I'm not very happy with how difficult the logic is to parse through. I'm going to work at tidying it up into a more readable format but would love feedback on how to do that. cc @tpoterba @cseed @patrick-schultz",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6727#issuecomment-516096236:82,log,logic,82,https://hail.is,https://github.com/hail-is/hail/pull/6727#issuecomment-516096236,1,['log'],['logic']
Testability,Some Spark tests timed out (e.g. in https://ci.hail.is/batches/7644244/jobs/74 it was `test_spectral_moments_4`) which often crashes the JVM leading to the other errors. Retry and post links into Query Dev to alert them that QoS can timeout on spectral moments.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1638682229:11,test,tests,11,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1638682229,1,['test'],['tests']
Testability,"Some documentation-related failures. Also a ""Cloud Test"" failure, although I don't see an error in the log. Am I ok to approve?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5624#issuecomment-474150147:51,Test,Test,51,https://hail.is,https://github.com/hail-is/hail/pull/5624#issuecomment-474150147,2,"['Test', 'log']","['Test', 'log']"
Testability,"Some failing tests, related to unexpected `config_File` arg. ```; database.py:134:26: E1123: Unexpected keyword argument 'config_File' in function call (unexpected-keyword-arg)`; ```. ```; File ""/usr/local/lib/python3.6/dist-packages/gear/database.py"", line 134, in async_init; self.pool = await create_database_pool(config_File=config_file, autocommit=False, maxsize=maxsize); TypeError: create_database_pool() got an unexpected keyword argument 'config_File'; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7694#issuecomment-565600586:13,test,tests,13,https://hail.is,https://github.com/hail-is/hail/pull/7694#issuecomment-565600586,1,['test'],['tests']
Testability,"Some of the array tests (min, max, etc.) are failing because they rely on the `If` to protect from calling `ArrayRef` on a zero-length array. :-| I'm not sure if you can mitigate this by just not folding along nodes that might reasonably error, like `ArrayRef`.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4320#issuecomment-420750223:18,test,tests,18,https://hail.is,https://github.com/hail-is/hail/pull/4320#issuecomment-420750223,1,['test'],['tests']
Testability,Some tests failing. But there are also two good tests that are passing now:. ```; test_aggregator_info_score; test_logistic_regression_wald_dosage; ```. You have to remove the `fails_local_backend` and `fails_service_backend` annotations from those tests since they pass now.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10707#issuecomment-887127406:5,test,tests,5,https://hail.is,https://github.com/hail-is/hail/pull/10707#issuecomment-887127406,3,['test'],['tests']
Testability,"Some things we should try first:. 1. Set default delay in Azure to 1s.; 2. Investigate the AzureBlobStorage Logs [1]; perhaps we are misbehaving?; 3. Can we avoid issuing ""list"" commands, these are known to be particularly slow/taxing.; 4. There might be a threading issue with BlobServiceClient. Maybe we need the client to be thread local?. [1] e.g. go [here]( [here](https://portal.azure.com/#view/Microsoft_OperationsManagementSuite_Workspace/Logs.ReactView/initiator/ActivityLogBlade/source/ActivityLogBlade/scope~/%7B%22resources%22%3A%5B%7B%22resourceId%22%3A%22%2Fsubscriptions%2F22cd45fe-f996-4c51-af67-ef329d977519%2FresourceGroups%2Fhaildev%2Fproviders%2FMicrosoft.Storage%2FstorageAccounts%2Fhaildevtest%22%7D%5D%7D)) and try:; ```; StorageBlobLogs; | where MetricResponseType != ""Success"" and StatusCode != 404; | order by TimeGenerated desc; | limit 5000; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13351#issuecomment-1660689133:108,Log,Logs,108,https://hail.is,https://github.com/hail-is/hail/issues/13351#issuecomment-1660689133,2,['Log'],['Logs']
Testability,"Somehow block matrix tests seem to be failing on this PR, both for the doctests and for the regular python tests.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7611#issuecomment-560214050:21,test,tests,21,https://hail.is,https://github.com/hail-is/hail/pull/7611#issuecomment-560214050,2,['test'],['tests']
Testability,"Something about that must still be invalid, as I'm now failing `TypeCheck` on a seemingly unrelated test as a result of pruning",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9578#issuecomment-708647344:100,test,test,100,https://hail.is,https://github.com/hail-is/hail/pull/9578#issuecomment-708647344,1,['test'],['test']
Testability,"Something is wrong here, you have tons of failing python tests.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9425#issuecomment-689544523:57,test,tests,57,https://hail.is,https://github.com/hail-is/hail/pull/9425#issuecomment-689544523,1,['test'],['tests']
Testability,Something is wrong with batch tests ...,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5756#issuecomment-480515434:30,test,tests,30,https://hail.is,https://github.com/hail-is/hail/pull/5756#issuecomment-480515434,1,['test'],['tests']
Testability,Something must actually be wrong... Shouldn't get the same error when just adding test files to a directory.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5956#issuecomment-487081808:82,test,test,82,https://hail.is,https://github.com/hail-is/hail/pull/5956#issuecomment-487081808,1,['test'],['test']
Testability,Something seems to have changed from when I wrote this to opened it. Unassigning until I fix the test,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13490#issuecomment-1693526302:97,test,test,97,https://hail.is,https://github.com/hail-is/hail/pull/13490#issuecomment-1693526302,1,['test'],['test']
Testability,"Something still isn't right with my configuration. The service and deployment are all up. I can curl to the internal gateway and it shows up in the logs. However, I'm getting 404 with this query: `http://hail.internal/jigold/batch2/healthcheck`. I set up cloud dns to route hail.internal to the internal gateway. I verified no traffic is recorded in the jigold router. I tried adding and removing the `gateway` service account but it made no difference.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6918#issuecomment-524103114:148,log,logs,148,https://hail.is,https://github.com/hail-is/hail/pull/6918#issuecomment-524103114,1,['log'],['logs']
Testability,"Sorry @tpoterba , there's still more work to do to integrate this throughout Hail without tests failing. That's the next step!",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1559#issuecomment-287180359:90,test,tests,90,https://hail.is,https://github.com/hail-is/hail/pull/1559#issuecomment-287180359,1,['test'],['tests']
Testability,"Sorry I missed your message! The code as written now is plainly wrong: we access a mutable map from two threads without synchronization. We need this change regardless of how it affects error messages. If the tests pass, I'm confident this is fine. Are there components of the system you don't think are well tested by our tests?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13546#issuecomment-1724475471:209,test,tests,209,https://hail.is,https://github.com/hail-is/hail/pull/13546#issuecomment-1724475471,3,['test'],"['tested', 'tests']"
Testability,"Sorry for cutoff review line, I remarked on the test failure in a comment. You also need to rebase.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2546#issuecomment-350494085:48,test,test,48,https://hail.is,https://github.com/hail-is/hail/pull/2546#issuecomment-350494085,1,['test'],['test']
Testability,"Sorry one more place I remembered this needs to be changed in benchmark-service/deployment.yaml. ```; {% if deploy %}; - name: HAIL_BENCHMARK_BUCKET_NAME; value: hail-test; - name: START_POINT; value: ""2020-11-01T00:00:00Z""; - name: INSTANCE_ID; value: ""WetqnMQMoqq2""; {% else %}; - name: HAIL_BENCHMARK_BUCKET_NAME; value: hail-test-dmk9z; {% endif %}; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10807#issuecomment-905864074:62,benchmark,benchmark-service,62,https://hail.is,https://github.com/hail-is/hail/pull/10807#issuecomment-905864074,3,"['benchmark', 'test']","['benchmark-service', 'test', 'test-']"
Testability,"Sorry, I jumped the gun on this PR. It will need https://github.com/hail-is/hail/pull/5152 to in before the tests will pass.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5161#issuecomment-455034946:108,test,tests,108,https://hail.is,https://github.com/hail-is/hail/pull/5161#issuecomment-455034946,1,['test'],['tests']
Testability,"Sorry, I should have explained the rationale for returning true for empty strings. I was thinking that you should be able to do something like this:; ```python; from urllib.parse import urlparse. url = ""whatever:///path/to/file""; if hl.hadoop_supports_scheme(urlparse(url).scheme):; with hl.hadoop_open(url) as f:; ...; ```. For paths without a scheme, the ParseResult's scheme is """".; ```python; from urllib.parse import urlparse. urlparse(""/path/to/file.txt"").scheme; ''; ```. > All file systems should support file:// scheme. HadoopFS is the only one that will actually work correctly if passed a `file://` URL. For example, both LocalFS and GoogleCloudStorageFS use `os.path.exists` to implement `exists`. On macOS at least, `os.path.exists(""file:///test.txt"")` looks for `test.txt` in a directory named `file:` in the current working directory, not the root directory. > I'm not sure if it makes sense for this function to return true for empty string (which I read as meaning no specified scheme, and therefore read file from local disk). I think those should maybe just be 'file'? I could be convinced it should support empty string and 'file' as inputs if you want it to work on empty string. For LocalFS and GoogleCloudStorageFS, an empty scheme will correspond to a path to a local file. For HadoopFS, an empty scheme causes Hadoop to use its configured default file system. When running Hail locally, this would be the local file system. On a Dataproc cluster, this would be HDFS. Returning true for the empty string in `HadoopFS.supports_scheme` is based on an assumption that there would always be a working default file system.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10555#issuecomment-856148043:754,test,test,754,https://hail.is,https://github.com/hail-is/hail/pull/10555#issuecomment-856148043,2,['test'],['test']
Testability,"Sorry, fine meaning just having the submit routes and the test. Not fine with the polling of GitHub with the start time stuff.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9614#issuecomment-714575525:58,test,test,58,https://hail.is,https://github.com/hail-is/hail/pull/9614#issuecomment-714575525,1,['test'],['test']
Testability,"Sorry, got wrapped up in other work. I've got things primed to run benchmark comparisons in the morning. Here's some crazy numbers just running one iteration (from this pr):; ```; 2019-10-08 16:46:31,396: INFO: [1/6] Running table_aggregate_linreg20...; 2019-10-08 16:46:44,645: INFO: burn in: 13.24s; 2019-10-08 16:46:55,367: INFO: run 1: 10.72s; 2019-10-08 16:46:55,367: INFO: [2/6] Running table_aggregate_linreg21...; 2019-10-08 16:47:07,836: INFO: burn in: 12.47s; 2019-10-08 16:47:19,376: INFO: run 1: 11.54s; 2019-10-08 16:47:19,376: INFO: [3/6] Running table_aggregate_linreg22...; 2019-10-08 16:47:32,728: INFO: burn in: 13.35s; 2019-10-08 16:47:44,571: INFO: run 1: 11.84s; 2019-10-08 16:47:44,571: INFO: [4/6] Running table_aggregate_linreg23...; 2019-10-08 16:48:37,183: INFO: burn in: 52.61s; 2019-10-08 16:49:28,580: INFO: run 1: 51.40s; 2019-10-08 16:49:28,580: INFO: [5/6] Running table_aggregate_linreg24...; 2019-10-08 16:50:25,410: INFO: burn in: 56.83s; 2019-10-08 16:51:20,184: INFO: run 1: 54.77s; 2019-10-08 16:51:20,184: INFO: [6/6] Running table_aggregate_linreg25...; 2019-10-08 16:52:16,778: INFO: burn in: 56.59s; 2019-10-08 16:53:21,050: INFO: run 1: 64.27s; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7134#issuecomment-539702199:67,benchmark,benchmark,67,https://hail.is,https://github.com/hail-is/hail/pull/7134#issuecomment-539702199,1,['benchmark'],['benchmark']
Testability,"Sorry, looks like a bug slipped in after I last ran tests locally. I'll look at it in the morning.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4487#issuecomment-426431157:52,test,tests,52,https://hail.is,https://github.com/hail-is/hail/pull/4487#issuecomment-426431157,1,['test'],['tests']
Testability,"Sorta fixed it in that it revealed an Assertion. Log coming over other medium. ```; Java stack trace:; org.apache.spark.SparkException: Job aborted due to stage failure: Task 3 in stage 28.0 failed 20 times, most recent failure: Lost task 3.19 in stage 28.0 (TID 671, exomes-w-0.c.broad-mpg-gnomad.internal, executor 4): java.lang.AssertionError: assertion failed; 	at scala.Predef$.assert(Predef.scala:156); 	at is.hail.annotations.RegionValueBuilder.addRegionValue(RegionValueBuilder.scala:417); 	at is.hail.annotations.RegionValueBuilder.addField(RegionValueBuilder.scala:345); 	at is.hail.annotations.RegionValueBuilder.addField(RegionValueBuilder.scala:351); 	at is.hail.expr.ir.MatrixAggregateColsByKey$$anonfun$33$$anonfun$apply$15.apply(MatrixIR.scala:1024); 	at is.hail.expr.ir.MatrixAggregateColsByKey$$anonfun$33$$anonfun$apply$15.apply(MatrixIR.scala:980); 	at scala.collection.Iterator$$anon$11.next(Iterator.scala:409); 	at scala.collection.Iterator$$anon$12.next(Iterator.scala:444); 	at is.hail.rvd.OrderedRVD$$anonfun$apply$22$$anon$3.next(OrderedRVD.scala:1087); 	at is.hail.rvd.OrderedRVD$$anonfun$apply$22$$anon$3.next(OrderedRVD.scala:1081); 	at scala.collection.Iterator$$anon$12.next(Iterator.scala:444); 	at scala.collection.Iterator$$anon$11.next(Iterator.scala:409); 	at scala.collection.Iterator$$anon$12.next(Iterator.scala:444); 	at is.hail.rvd.OrderedRVD$$anonfun$apply$22$$anon$3.next(OrderedRVD.scala:1087); 	at is.hail.rvd.OrderedRVD$$anonfun$apply$22$$anon$3.next(OrderedRVD.scala:1081); 	at scala.collection.Iterator$$anon$12.next(Iterator.scala:444); 	at scala.collection.Iterator$$anon$11.next(Iterator.scala:409); 	at scala.collection.Iterator$$anon$12.next(Iterator.scala:444); 	at is.hail.rvd.OrderedRVD$$anonfun$apply$22$$anon$3.next(OrderedRVD.scala:1087); 	at is.hail.rvd.OrderedRVD$$anonfun$apply$22$$anon$3.next(OrderedRVD.scala:1081); 	at scala.collection.Iterator$$anon$12.next(Iterator.scala:444); 	at scala.collection.Iterator$class.foreach(Iterator.sc",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4128#issuecomment-412764719:38,Assert,Assertion,38,https://hail.is,https://github.com/hail-is/hail/pull/4128#issuecomment-412764719,5,"['Assert', 'Log', 'assert']","['Assertion', 'AssertionError', 'Log', 'assert', 'assertion']"
Testability,"Sounds fine, but I can't test it, still getting 500's in your namespace when clicking on the create button. Guessing an issue on my end, but want to be sure.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7155#issuecomment-536244530:25,test,test,25,https://hail.is,https://github.com/hail-is/hail/pull/7155#issuecomment-536244530,1,['test'],['test']
Testability,"Sounds good, my inclination is to wait for automated tests since the open PR is a good reminder to do so.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12017#issuecomment-1333011385:53,test,tests,53,https://hail.is,https://github.com/hail-is/hail/pull/12017#issuecomment-1333011385,1,['test'],['tests']
Testability,"Spark 3.1.1 is out, dataproc image should be updated from the release candidate dependency within a week or so I think. The only remaining issue I think is a weird one, a particular blockmatrix test is failing because json4s can't find a constructor for `BlockMatrixSparsity` objects. Looking into it.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10054#issuecomment-790702427:194,test,test,194,https://hail.is,https://github.com/hail-is/hail/pull/10054#issuecomment-790702427,1,['test'],['test']
Testability,"Spark doesn't have per-type requiredness but a nullable flag on array elements and struct fields. You just needed to set our required status based on their struct fields. Here is a patch that fixes it:. ```; diff --git a/src/main/scala/is/hail/expr/AnnotationImpex.scala b/src/main/scala/is/hail/expr/AnnotationImpex.scala; index 5039471..4cedfd8 100644; --- a/src/main/scala/is/hail/expr/AnnotationImpex.scala; +++ b/src/main/scala/is/hail/expr/AnnotationImpex.scala; @@ -45,11 +45,11 @@ object SparkAnnotationImpex extends AnnotationImpex[DataType, Any] {; case DoubleType => TFloat64(); case StringType => TString(); case BinaryType => TBinary(); - case ArrayType(elementType, _) => TArray(importType(elementType)); + case ArrayType(elementType, containsNull) => TArray(importType(elementType).setRequired(!containsNull)); case StructType(fields) =>; TStruct(fields.zipWithIndex; .map { case (f, i) =>; - (f.name, importType(f.dataType)); + (f.name, importType(f.dataType).setRequired(!f.nullable)); }: _*); }; ; diff --git a/src/test/scala/is/hail/methods/KeyTableSuite.scala b/src/test/scala/is/hail/methods/KeyTableSuite.scala; index 8a46826..dbb3485 100644; --- a/src/test/scala/is/hail/methods/KeyTableSuite.scala; +++ b/src/test/scala/is/hail/methods/KeyTableSuite.scala; @@ -380,9 +380,9 @@ class KeyTableSuite extends SparkSuite {; .flatten(); ; val df = kt.toDF(sqlContext); -// df.printSchema(); -// df.show(); - val kt2 = KeyTable.fromDF(hc, df); + df.printSchema(); + df.show(); + val kt2 = KeyTable.fromDF(hc, df, key = Array(""v"")); assert(kt2.same(kt)); }; ; ```. We should require the KeyTable row type to be required. We've always worked internally with the invariant that rows themselves can't be missing. (If they were, they wouldn't be in the table.) I commented in the print statements to see what was going on. You should probably delete them. I also had to set the key in `fromDF` the key isn't represented in DataFrames.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2417#issuecomment-343800938:1033,test,test,1033,https://hail.is,https://github.com/hail-is/hail/pull/2417#issuecomment-343800938,5,"['assert', 'test']","['assert', 'test']"
Testability,"Speaking of not understanding what keys mean, I found what looks to me like a bug, but I'm not sure. `OrderedRVD.downcastToPK` creates an `OrderedRVD` for which `typ.kType` is different from `partitioner.kType`. It's triggering the assert I made in `RepartitionedOrderedRDD2` that says the new key must be a prefix of the old, to ensure that no sorting needs to be done. I want to make join keys parameters of `OrderedRVD.join`, allowing them to be different from the partitioner keys. I was putting that off for a later PR, but now I think I might need to do that to fix this.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3159#issuecomment-373773742:232,assert,assert,232,https://hail.is,https://github.com/hail-is/hail/pull/3159#issuecomment-373773742,1,['assert'],['assert']
Testability,"Still contains debug messages, and needs rebase. All will be fixed after tests pass. Remaining tests not passing are:; <img width=""358"" alt=""Screenshot 2020-02-08 15 17 58"" src=""https://user-images.githubusercontent.com/5543229/74091636-8162d600-4a87-11ea-9750-f2804352d4a3.png"">. Each of these fails with a match error in Emit, either on MakeStream, or StreamRange",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8063#issuecomment-583773630:73,test,tests,73,https://hail.is,https://github.com/hail-is/hail/pull/8063#issuecomment-583773630,2,['test'],['tests']
Testability,Still failing `hailctl` tests though.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9502#issuecomment-698632639:24,test,tests,24,https://hail.is,https://github.com/hail-is/hail/pull/9502#issuecomment-698632639,1,['test'],['tests']
Testability,"Still have a couple more letters to test, but right now everything seems to be more or less working, with timezone passing now supported.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7768#issuecomment-570711004:36,test,test,36,https://hail.is,https://github.com/hail-is/hail/pull/7768#issuecomment-570711004,1,['test'],['test']
Testability,"Still need to add row, col, and table tests. Have pretty robust entry tests, so those should go quick tomorrow.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6841#issuecomment-520638993:38,test,tests,38,https://hail.is,https://github.com/hail-is/hail/pull/6841#issuecomment-520638993,2,['test'],['tests']
Testability,Still need to get rid of fisher exact test and logistic regression tests.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5966#issuecomment-487177448:38,test,test,38,https://hail.is,https://github.com/hail-is/hail/pull/5966#issuecomment-487177448,3,"['log', 'test']","['logistic', 'test', 'tests']"
Testability,"Still need to write benchmarks, but I wrote a new type to hold the options for the indexed reads, please take a look.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6266#issuecomment-507079121:20,benchmark,benchmarks,20,https://hail.is,https://github.com/hail-is/hail/pull/6266#issuecomment-507079121,1,['benchmark'],['benchmarks']
Testability,"Still not seeing an issue with the latest version of the test:. <img width=""472"" alt=""Screenshot 2020-02-04 11 07 51"" src=""https://user-images.githubusercontent.com/5543229/73762867-ac26f480-473e-11ea-8d62-d2f5a0aa1851.png"">",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8008#issuecomment-581984059:57,test,test,57,https://hail.is,https://github.com/hail-is/hail/pull/8008#issuecomment-581984059,1,['test'],['test']
Testability,Still some build errors coming from tests,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11306#issuecomment-1034147074:36,test,tests,36,https://hail.is,https://github.com/hail-is/hail/pull/11306#issuecomment-1034147074,1,['test'],['tests']
Testability,Still waiting on getting benchmarks working.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7033#issuecomment-529665181:25,benchmark,benchmarks,25,https://hail.is,https://github.com/hail-is/hail/pull/7033#issuecomment-529665181,1,['benchmark'],['benchmarks']
Testability,"Strange, I can't reply to directly to your last comment. > We have a difference of opinion about the risks. I think I'd say we have a difference of opinion about the importance of the risks. I'm well aware of the potential pitfalls you list there, and more. I just don't think they're a very big deal. I'm also aware of a shit ton of things that are vastly more important than what we're arguing about and we're not talking about those. Let's talk about goals for the project and the landscape of technical risk in our next 1:1. This is assuming we're controlling the compiler in the packaged distribution and on the cloud, we're testing representative user pipelines against gcc and clang, so the scenario you're imagining is either a Hail developer or someone who is sophisticated enough to maintain a Spark cluster (1000x worse configuration nonsense than we're arguing about here, I promise) who is either (1) running old or obscure compiler, or (2) ran into a bug that had test coverage. You're worrying about (1)? What's the worst that will happen, seriously? We'll get a bug report? Let's make sure the compiler version is in the log. > A couple of years ago; > g++ take 40-60 seconds to compile; > fairly heavily templated cod. Can we avoid heavily (or even moderately) templated code? I'm already nervous long-term about the latency of the C++ compiler overhead and if I'm being honest would prefer to generate LLVM IR directly into memory. We should ship whatever compiler is best on the cloud and in the download package. That already covers a vast majority of our users. If clang is the clear winner, we can make that clear in the documentation and maybe warn about gcc it on startup. > But that becomes a problem in itself if we want the shipped compiler to work on a variety of OS'es. Variety isn't a requirement. We don't need to make this hard for ourselves. Let's have two versions: OSX and a recent linux. If we're getting a lot of requests/questions/issues about older versions of l",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3973#issuecomment-410134414:630,test,testing,630,https://hail.is,https://github.com/hail-is/hail/pull/3973#issuecomment-410134414,2,['test'],"['test', 'testing']"
Testability,"Strange, I couldn't get a similar example to fail, either through `hl.eval` or in a pipeline:. ```; def test_define_function_locus(self):; contig2 = hl.experimental.define_function(; lambda l: l.contig, hl.tlocus(hl.get_reference('GRCh38'))); t = hl.utils.range_table(1); t = t.annotate(locus = hl.locus('chr22', 123, 'GRCh38')); t = t.annotate(contig = contig2(t.locus)); self.assertEqual(t.collect()[0]['contig'], 'chr22'); ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5471#issuecomment-469341849:378,assert,assertEqual,378,https://hail.is,https://github.com/hail-is/hail/pull/5471#issuecomment-469341849,1,['assert'],['assertEqual']
Testability,"Strange, the bad point seems to be:; ```; ++ mktemp -d; + REPO_DIR=/tmp/tmp.2v53NEHcHZ; + cp test-repo/hail-ci-build-image test-repo/hail-ci-build.sh test-repo/hail-ci-deploy.sh /tmp/tmp.2v53NEHcHZ; /tmp/tmp.2v53NEHcHZ /hail/repo/ci; + pushd /tmp/tmp.2v53NEHcHZ; + git init; Initialized empty Git repository in /tmp/tmp.2v53NEHcHZ/.git/; + git config user.email ci-automated-tests@broadinstitute.org; + git config user.name ci-automated-tests; + set +x; + git add hail-ci-build-image hail-ci-build.sh hail-ci-deploy.sh; + git commit -m 'inital commit'; [master (root-commit) da0ddab] inital commit; 3 files changed, 26 insertions(+); create mode 100644 hail-ci-build-image; create mode 100644 hail-ci-build.sh; create mode 100644 hail-ci-deploy.sh; + git push origin master:master; error: RPC failed; HTTP 404 curl 22 The requested URL returned error: 404 Not Found; fatal: The remote end hung up unexpectedly; fatal: The remote end hung up unexpectedly; Everything up-to-date; + cleanup; ```; the `git puts origin master:master`. Hidden from the logs is the URL because it contains a token.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4517#issuecomment-428988662:93,test,test-repo,93,https://hail.is,https://github.com/hail-is/hail/issues/4517#issuecomment-428988662,6,"['log', 'test']","['logs', 'test-repo', 'tests']"
Testability,"Suggestion from Patrick: https://en.wikipedia.org/wiki/Combinatorial_number_system could be used to transform the sample into a uniform single integer in `[0, n choose k)` for testing",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12812#issuecomment-1479683426:176,test,testing,176,https://hail.is,https://github.com/hail-is/hail/pull/12812#issuecomment-1479683426,1,['test'],['testing']
Testability,Suite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.CallSuite.testCall PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportVcfSuite.testSameAsOrigBGzip PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportVcfSuite.testSameAsOrigNoCompression PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportVcfSuite.testSorted PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.evalTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.filterTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.treeTransformerTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.GQByDPBinSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.GenotypeStreamSuite.testGenotypeStream PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.GenotypeSuite.testGenotype PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.HWESuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.IntervalListSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.utils.LEB128Suite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.exactTestsTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.meanTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.modeTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.pmfTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.varianceTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.LinearRegressionSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.MendelErrorsSuite.te,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/158#issuecomment-173700450:1181,test,test,1181,https://hail.is,https://github.com/hail-is/hail/pull/158#issuecomment-173700450,1,['test'],['test']
Testability,"Sure, I mean that somebody could get tests passing and immediately push the commit, and the CI merge, before they notice the dumb mistake. Mostly a danger if the tests are failing for non-trivial reasons.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4123#issuecomment-412981834:37,test,tests,37,https://hail.is,https://github.com/hail-is/hail/pull/4123#issuecomment-412981834,2,['test'],['tests']
Testability,"Sure, did that, though I kind of want a way to verify that it worked. Watching top doesn't seem super scientific. Linear regression still only takes like 20 seconds on my laptop. Watching top I see that the cpu usage spikes to 300% for a second at the beginning of each of the benchmark iterations, then falls back down to somewhere between 100% and 110% for the duration of the 20 seconds.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8050#issuecomment-583451801:277,benchmark,benchmark,277,https://hail.is,https://github.com/hail-is/hail/pull/8050#issuecomment-583451801,1,['benchmark'],['benchmark']
Testability,"TIMING:. ```; timing:; read: 5.549s; exportvcf: 1m39.7s; ```. ```; timing:; read: 5.304s; exportplink: 49.167s; ```. **TESTING**; for chr22 on the Dataflow cluster, ran import vcf / export vcf and import vcf / export plink, then plink --vcf to read the VCF written by hail (plink does not process multiallelic files with the desired behavior). I then ran concordance on these two bed/bim/fam file sets, and got 100% concordance.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/136#issuecomment-173715371:119,TEST,TESTING,119,https://hail.is,https://github.com/hail-is/hail/pull/136#issuecomment-173715371,1,['TEST'],['TESTING']
Testability,TODO for myself. Any new routes we add need to have a test added to `test_authorized_users_only()`.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14016#issuecomment-1834642128:54,test,test,54,https://hail.is,https://github.com/hail-is/hail/pull/14016#issuecomment-1834642128,1,['test'],['test']
Testability,"Taking the WIP off of this. It's reviewable, and has some tests. It will certainly need to be iterated on before production use (mostly I think we need to get the right partition sizes for output).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11050#issuecomment-982724577:58,test,tests,58,https://hail.is,https://github.com/hail-is/hail/pull/11050#issuecomment-982724577,1,['test'],['tests']
Testability,Taking this as it's become challenging to analyze the worker logs,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/14424#issuecomment-2061586373:61,log,logs,61,https://hail.is,https://github.com/hail-is/hail/issues/14424#issuecomment-2061586373,1,['log'],['logs']
Testability,"Test code:; ```python3; import hail as hl; gwas = hl.read_table(""gwas_filtered.ht""); loci_to_gene = hl.import_table(""x4.tsv"",impute=True); locus = hl.locus(loci_to_gene.chromosome, loci_to_gene.locus, ""GRCh38""); loci_to_gene = loci_to_gene.annotate(locus=locus); loci_to_gene = loci_to_gene.key_by(""locus""); print(gwas.annotate(gene=loci_to_gene[gwas.locus].gene).collect()); ```. Gene is missing:; ```; 	chromosome	locus	gene; 0	chr4	99498697	RNF207; 119111	chr8	51749536	PXDNL; ```. Gene is not missing:; ```; 	chromosome	locus	gene; 0	chr4	99498698	RNF207; 119111	chr8	51749536	PXDNL; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13339#issuecomment-1660587214:0,Test,Test,0,https://hail.is,https://github.com/hail-is/hail/issues/13339#issuecomment-1660587214,1,['Test'],['Test']
Testability,"Test failed with this msg. Rerunning. ```; WARNING: Job terminated, but output did not finish streaming.; ERROR: (gcloud.dataproc.jobs.submit.pyspark) Job [41e21fb2f146423b882503e87af21bcc] failed with error:; Task not found; Submitting to cluster 'ci-test-t3ctuj9rcpmx'...; gcloud command:; gcloud dataproc jobs submit pyspark python/cluster-tests/cluster-read-vcfs-check.py \; --cluster=ci-test-t3ctuj9rcpmx \; --files= \; --py-files= \; --properties=; Traceback (most recent call last):; File ""/usr/local/bin/cluster"", line 10, in <module>; sys.exit(main()); File ""/usr/local/lib/python3.6/dist-packages/cloudtools/__main__.py"", line 88, in main; submit.main(args); File ""/usr/local/lib/python3.6/dist-packages/cloudtools/submit.py"", line 81, in main; check_call(cmd); File ""/usr/lib/python3.6/subprocess.py"", line 291, in check_call; raise CalledProcessError(retcode, cmd); subprocess.CalledProcessError: Command '['gcloud', 'dataproc', 'jobs', 'submit', 'pyspark', 'python/cluster-tests/cluster-read-vcfs-check.py', '--cluster=ci-test-t3ctuj9rcpmx', '--files=', '--py-files=', '--properties=']' returned non-zero exit status 1. real	4m33.655s; user	0m2.473s; sys	0m0.491s; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6063#issuecomment-490158264:0,Test,Test,0,https://hail.is,https://github.com/hail-is/hail/pull/6063#issuecomment-490158264,6,"['Test', 'test']","['Test', 'test-', 'tests']"
Testability,"Test fails on the inference difference of the inner PArray:. This fails:; ```scala; destType = PStruct(false, ""foo"" -> PStruct(""bar"" -> PArray(PInt32(false), true))); ```; This makes it pass:; ```scala; destType = PStruct(false, ""foo"" -> PStruct(""bar"" -> PArray(PInt32(false), true))); ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7958#issuecomment-578199551:0,Test,Test,0,https://hail.is,https://github.com/hail-is/hail/pull/7958#issuecomment-578199551,1,['Test'],['Test']
Testability,"Test failures seem odd, they don't seem to use FilterSamples?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2564#issuecomment-351422628:0,Test,Test,0,https://hail.is,https://github.com/hail-is/hail/pull/2564#issuecomment-351422628,1,['Test'],['Test']
Testability,Test script:. ```; from hail import *; hc = HailContext(); (hc.read('/Users/dking/projects/hail-data/profile225-with-SEX_FROM_STAT.vds'); .filter_genotypes(' g.dp > 400 || \; (g.isHomRef && (g.ad[0] / g.dp < 0.9 || g.gq < 20)) || \; (g.isHomVar && (g.ad[1] / g.dp < 0.9 || g.pl[0] < 20)) || \; (g.isHet && ( (g.ad[0] + g.ad[1]) / g.dp < 0.9 || g.ad[1] / g.dp < 0.20 || \; g.pl[0] < 20 ))'); .count(genotypes=True)); ```. Mean of thee runs:. - `master` / `593a469`: 96.66666s; - this branch: 74.33333s. Which is a 23% reduction in time. The gap has closed from both sides. While rebasing I threw away a bunch of FunctionRegistry entries that had been converted to `Code`. I'll add them back in a separate PR and see how that changes things again.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1254#issuecomment-284071915:0,Test,Test,0,https://hail.is,https://github.com/hail-is/hail/pull/1254#issuecomment-284071915,1,['Test'],['Test']
Testability,TestFailedException: files not deleted:; gs://hail-test-ezlis/fs-suite/delete-many-files/72e64985-c4b9-46ff-9191-93b8c4589083/1890.suffix; at org.scalatest.Assertions.newAssertionFailedException(Assertions.scala:528); at org.scalatest.Assertions.newAssertionFailedException$(Assertions.scala:527); at org.scalatest.testng.TestNGSuite.newAssertionFailedException(TestNGSuite.scala:67); at org.scalatest.Assertions$AssertionsHelper.macroAssert(Assertions.scala:501); at is.hail.io.fs.FSSuite.largeDirectoryOperations(FSSuite.scala:445); at is.hail.io.fs.FSSuite.largeDirectoryOperations$(FSSuite.scala:430); at is.hail.io.fs.GoogleStorageFSSuite.largeDirectoryOperations(GoogleStorageFSSuite.scala:10); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:498); at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:136); at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:658); at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:219); at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50); at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:923); at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:192); at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146); at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128); at java.util.ArrayList.forEach(ArrayList.java:1259); at org.testng.TestRunner.privateRun(TestRunner.java:808); at org.testng.TestRunner.run(TestRunner.java:603); at org.testng.SuiteRunner.runTest(SuiteRunner.java:429); at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:423); at org.testng.SuiteRun,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13827#issuecomment-1957725547:1117,test,testng,1117,https://hail.is,https://github.com/hail-is/hail/issues/13827#issuecomment-1957725547,1,['test'],['testng']
Testability,TestUtils$.$anonfun$assertEvalsTo$4(TestUtils.scala:348); 	at is.hail.TestUtils$.$anonfun$assertEvalsTo$4$adapted(TestUtils.scala:339); 	at is.hail.expr.ir.ExecuteContext$.$anonfun$scoped$3(ExecuteContext.scala:47); 	at is.hail.utils.package$.using(package.scala:618); 	at is.hail.expr.ir.ExecuteContext$.$anonfun$scoped$2(ExecuteContext.scala:47); 	at is.hail.utils.package$.using(package.scala:618); 	at is.hail.annotations.RegionPool$.scoped(RegionPool.scala:13); 	at is.hail.expr.ir.ExecuteContext$.scoped(ExecuteContext.scala:46); 	at is.hail.backend.spark.SparkBackend.withExecuteContext(SparkBackend.scala:276); 	at is.hail.expr.ir.ExecuteContext$.$anonfun$scoped$1(ExecuteContext.scala:40); 	at is.hail.utils.ExecutionTimer$.time(ExecutionTimer.scala:52); 	at is.hail.expr.ir.ExecuteContext$.scoped(ExecuteContext.scala:39); 	at is.hail.TestUtils$.assertEvalsTo(TestUtils.scala:339); 	at is.hail.TestUtils$.assertEvalsTo(TestUtils.scala:314); 	at is.hail.expr.ir.IRSuite.testStreamLenUnconsumedInnerStream(IRSuite.scala:1800); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteR,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10330#issuecomment-827119604:3173,test,testStreamLenUnconsumedInnerStream,3173,https://hail.is,https://github.com/hail-is/hail/pull/10330#issuecomment-827119604,1,['test'],['testStreamLenUnconsumedInnerStream']
Testability,"Tested and appears to run on a medium sized dataset (1700 samples), definitely saves a lot of time (no more ~45 minute break between stages while things serialize)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5690#issuecomment-477173194:0,Test,Tested,0,https://hail.is,https://github.com/hail-is/hail/pull/5690#issuecomment-477173194,1,['Test'],['Tested']
Testability,"Tested as follows from a clean environment.; 1. Build the jars and wheel in release mode:; ```bash; HAIL_RELEASE_MODE=1 make -C hail wheel; ```. 2. Dry-run the upload-artifacts target and inspect output; ```bash; cloud_base is set to ""gs://hail-common/hailctl/dataproc/0.2.129"" which is different from old value ""gs://hail-30-day/hailctl/dataproc/edmund-dev/0.2.129-827516e474c3""; mkdir -p env; printf ""gs://hail-common/hailctl/dataproc/0.2.129"" > env/cloud_base; wheel_cloud_path is set to ""gs://hail-common/hailctl/dataproc/0.2.129/hail-0.2.129-py3-none-any.whl"" which is different from old value ""gs://hail-30-day/hailctl/dataproc/edmund-dev/0.2.129-827516e474c3/hail-0.2.129-py3-none-any.whl""; mkdir -p env; printf ""gs://hail-common/hailctl/dataproc/0.2.129/hail-0.2.129-py3-none-any.whl"" > env/wheel_cloud_path; rm -f python/hailtop/hailctl/deploy.yaml; echo ""dataproc:"" >> python/hailtop/hailctl/deploy.yaml; for FILE in init_notebook.py vep-GRCh37.sh vep-GRCh38.sh; do \; echo "" $FILE: gs://hail-common/hailctl/dataproc/0.2.129/$FILE"" >> python/hailtop/hailctl/deploy.yaml || exit 1; done; echo "" wheel: gs://hail-common/hailctl/dataproc/0.2.129/hail-0.2.129-py3-none-any.whl"" >> python/hailtop/hailctl/deploy.yaml; printf "" pip_dependencies: "" >> python/hailtop/hailctl/deploy.yaml; cat python/pinned-requirements.txt | sed '/^[[:blank:]]*#/d;s/#.*//' | grep -v pyspark | tr ""\n"" ""|||"" | tr -d '[:space:]' >> python/hailtop/hailctl/deploy.yaml; rm -rf build/deploy; mkdir -p build/deploy; mkdir -p build/deploy/src; cp ../README.md build/deploy/; rsync -r \; --exclude '.eggs/' \; --exclude '.pytest_cache/' \; --exclude '__pycache__/' \; --exclude 'benchmark_hail/' \; --exclude '.mypy_cache/' \; --exclude 'docs/' \; --exclude 'dist/' \; --exclude 'test/' \; --exclude '*.log' \; python/ build/deploy/; # Clear the bdist build cache before building the wheel; cd build/deploy; rm -rf build; python3 setup.py -q sdist bdist_wheel; gcloud storage cp python/hailtop/hailctl/dataproc/resources/i",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14453#issuecomment-2045927145:0,Test,Tested,0,https://hail.is,https://github.com/hail-is/hail/pull/14453#issuecomment-2045927145,1,['Test'],['Tested']
Testability,"Tested by deploying it, I know it works. No one else is awake.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8710#issuecomment-624411877:0,Test,Tested,0,https://hail.is,https://github.com/hail-is/hail/pull/8710#issuecomment-624411877,1,['Test'],['Tested']
Testability,"Tested by installing wheel in clean venv, importing and running basic hail commands",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14631#issuecomment-2243375019:0,Test,Tested,0,https://hail.is,https://github.com/hail-is/hail/pull/14631#issuecomment-2243375019,1,['Test'],['Tested']
Testability,Tested by running `hailctl dev deploy -b hail-is/hail:main -s git_make_bash_image` against a CI in my namespace and seeing that it succeeded and pushed an image [here](https://console.cloud.google.com/artifacts/docker/hail-vdc/us/hail/ci-intermediate?project=hail-vdc),MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12211#issuecomment-1253928151:0,Test,Tested,0,https://hail.is,https://github.com/hail-is/hail/pull/12211#issuecomment-1253928151,1,['Test'],['Tested']
Testability,"Tested deletion in a separate database. 0 rows is instantaneous. 100,000,000 rows is 10 seconds. So at worst, it's probably on order of 10 minutes to drop a table since the table I had was very simple with not a lot of columns. Will rebase and then get this merged.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12710#issuecomment-1446634047:0,Test,Tested,0,https://hail.is,https://github.com/hail-is/hail/pull/12710#issuecomment-1446634047,1,['Test'],['Tested']
Testability,Tested in `Genotype.testGenotype`.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/145#issuecomment-319495949:0,Test,Tested,0,https://hail.is,https://github.com/hail-is/hail/issues/145#issuecomment-319495949,2,"['Test', 'test']","['Tested', 'testGenotype']"
Testability,Tested locally via Livy and my notebook is happy. I really appreciate your help here!,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/7080#issuecomment-537100468:0,Test,Tested,0,https://hail.is,https://github.com/hail-is/hail/issues/7080#issuecomment-537100468,1,['Test'],['Tested']
Testability,Tested locally. Renames `config.yaml` to `config.ini` and then otherwise operates as normal for set/get/unset.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9493#issuecomment-697063777:0,Test,Tested,0,https://hail.is,https://github.com/hail-is/hail/pull/9493#issuecomment-697063777,1,['Test'],['Tested']
Testability,Tested manually for now.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14258#issuecomment-1930533067:0,Test,Tested,0,https://hail.is,https://github.com/hail-is/hail/pull/14258#issuecomment-1930533067,1,['Test'],['Tested']
Testability,"Tested on https://internal.hail.is/chrisl/auth/user and comparing with previous, non-updated behavior",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14636#issuecomment-2248848361:0,Test,Tested,0,https://hail.is,https://github.com/hail-is/hail/pull/14636#issuecomment-2248848361,1,['Test'],['Tested']
Testability,Tested only by hand. IIUC the current driver options are tested by Hail Query tests that need them? Should we do the same here?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11777#issuecomment-1102984761:0,Test,Tested,0,https://hail.is,https://github.com/hail-is/hail/pull/11777#issuecomment-1102984761,3,"['Test', 'test']","['Tested', 'tested', 'tests']"
Testability,Tested the UI part manually in my dev namespace. The `/envoy-configs/gateway` endpoint is nice for inspecting the generated config,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14609#issuecomment-2221187830:0,Test,Tested,0,https://hail.is,https://github.com/hail-is/hail/pull/14609#issuecomment-2221187830,1,['Test'],['Tested']
Testability,"Tested this by hand, it works now.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6926#issuecomment-524323940:0,Test,Tested,0,https://hail.is,https://github.com/hail-is/hail/pull/6926#issuecomment-524323940,1,['Test'],['Tested']
Testability,"Tested this out by running it locally and changing `aiohttp-session` in `docker/requirements.txt` from `2.70` to `2.8.0` and got the following:. ```; + pip-compile --quiet docker/requirements.txt docker/pinned-requirements.txt --output-file=new-pinned.txt; Could not find a version that matches aiohttp-session==2.7.0,==2.8.0 (from -r docker/requirements.txt (line 4)); Tried: 0.0.1, 0.0.1, 0.1.0, 0.1.0, 0.1.1, 0.1.1, 0.1.2, 0.1.2, 0.2.0, 0.2.0, 0.3.0, 0.3.0, 0.4.0, 0.4.0, 0.5.0, 0.5.0, 0.7.0, 0.7.0, 0.7.1, 0.7.1, 0.8.0, 0.8.0, 1.0.0, 1.0.0, 1.0.1, 1.0.1, 1.1.0, 1.1.0, 1.2.0, 1.2.0, 1.2.1, 1.2.1, 2.0.0, 2.0.0, 2.0.1, 2.0.1, 2.1.0, 2.1.0, 2.2.0, 2.2.0, 2.3.0, 2.3.0, 2.4.0, 2.4.0, 2.5.1, 2.5.1, 2.6.0, 2.6.0, 2.7.0, 2.7.0, 2.8.0, 2.8.0, 2.9.0, 2.9.0, 2.10.0, 2.10.0, 2.11.0, 2.11.0; Skipped pre-versions: 2.10.0a0, 2.10.0a0; There are incompatible versions in the resolved dependencies:; aiohttp-session==2.7.0 (from -r docker/pinned-requirements.txt (line 20)); aiohttp-session==2.8.0 (from -r docker/requirements.txt (line 4)); ```. and another example where I added an unrelated pip dependency in the requirements but didn't update the lock file",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11842#issuecomment-1131987651:0,Test,Tested,0,https://hail.is,https://github.com/hail-is/hail/pull/11842#issuecomment-1131987651,1,['Test'],['Tested']
Testability,"Tested using modified code from Lindsay Liang on zulip:. ```python; import hail as hl; hl.init(log='hail.log'); rg37 = hl.get_reference('GRCh37'). rg38 = hl.get_reference('GRCh38'); rg37.add_liftover('gs://hail-common/references/grch37_to_grch38.over.chain.gz', rg38); gnomad_ht = hl.read_table('gs://gcp-public-data--gnomad/release/2.1.1/ht/exomes/gnomad.exomes.r2.1.1.sites.ht'). gnomad_ht = gnomad_ht.annotate(new_locus=hl.liftover(gnomad_ht.locus, 'GRCh38')); gnomad_ht = gnomad_ht.key_by(locus=gnomad_ht.new_locus, alleles=gnomad_ht.alleles); mt = hl.balding_nichols_model(3, 100, 10_000, reference_genome='GRCh38'); mt = mt.annotate_entries(AD=hl.zeros(hl.len(mt.alleles))); mt = mt.annotate_rows(gnomad_non_neuro_AF =; gnomad_ht.index(mt.row_key).freq[hl.eval(gnomad_ht.freq_index_dict[""non_neuro""])].AF); mt = mt.annotate_entries(pAB = hl.or_missing(mt.GT.is_het(),; hl.binom_test(mt.AD[1], hl.sum(mt.AD), 0.5, 'two-sided'))); mt._force_count_rows(); ```. This faithfully replicated the issue and went from pretty much every task failing at least once as they read bad state to no tasks failing.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10888#issuecomment-924123558:0,Test,Tested,0,https://hail.is,https://github.com/hail-is/hail/pull/10888#issuecomment-924123558,3,"['Test', 'log']","['Tested', 'log']"
Testability,Tested with dev deploy.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8194#issuecomment-592560456:0,Test,Tested,0,https://hail.is,https://github.com/hail-is/hail/pull/8194#issuecomment-592560456,1,['Test'],['Tested']
Testability,"Tested with. ```python; hb.build_python_image('my_image', requirements=['hail'], show_docker_output=True)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11428#issuecomment-1108661994:0,Test,Tested,0,https://hail.is,https://github.com/hail-is/hail/pull/11428#issuecomment-1108661994,1,['Test'],['Tested']
Testability,"Tested. Details: I VEP annnotated (multi-allelic) sample2.vcf with master and this branch. 3 variants have * alleles. I verified the datasets were the same after filtering out those 3 variants. (In fact, the VEP output was in the same for them, too, I think because * was the last allele so the allele indices didn't change.)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3135#issuecomment-372781039:0,Test,Tested,0,https://hail.is,https://github.com/hail-is/hail/pull/3135#issuecomment-372781039,1,['Test'],['Tested']
Testability,Testing on Nirvana now,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2722#issuecomment-358354804:0,Test,Testing,0,https://hail.is,https://github.com/hail-is/hail/pull/2722#issuecomment-358354804,1,['Test'],['Testing']
Testability,"Testing this is quite annoying, but it would be thoroughly tested by a Chaos Monkey in a staging set up.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4659#issuecomment-433570508:0,Test,Testing,0,https://hail.is,https://github.com/hail-is/hail/pull/4659#issuecomment-433570508,2,"['Test', 'test']","['Testing', 'tested']"
Testability,"Tests added, ready for review, happy to explain in person too if helpful.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4191#issuecomment-418202591:0,Test,Tests,0,https://hail.is,https://github.com/hail-is/hail/pull/4191#issuecomment-418202591,1,['Test'],['Tests']
Testability,Tests are all finally passing!!!!!!!!,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14282#issuecomment-1944557444:0,Test,Tests,0,https://hail.is,https://github.com/hail-is/hail/pull/14282#issuecomment-1944557444,1,['Test'],['Tests']
Testability,Tests are all passing again.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14282#issuecomment-1947098199:0,Test,Tests,0,https://hail.is,https://github.com/hail-is/hail/pull/14282#issuecomment-1947098199,1,['Test'],['Tests']
Testability,Tests are all passing!,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12221#issuecomment-1267463609:0,Test,Tests,0,https://hail.is,https://github.com/hail-is/hail/pull/12221#issuecomment-1267463609,1,['Test'],['Tests']
Testability,Tests are all passing. One question that remains is should we put a manifest file with the current Hail configurations somewhere in hail-common?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12428#issuecomment-1514682815:0,Test,Tests,0,https://hail.is,https://github.com/hail-is/hail/pull/12428#issuecomment-1514682815,1,['Test'],['Tests']
Testability,Tests are failing,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9381#issuecomment-684901927:0,Test,Tests,0,https://hail.is,https://github.com/hail-is/hail/pull/9381#issuecomment-684901927,1,['Test'],['Tests']
Testability,"Tests are failing, seems like the PruneDeadFields rule can change the type in a way that removes the keys? Investigating.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9432#issuecomment-690693915:0,Test,Tests,0,https://hail.is,https://github.com/hail-is/hail/pull/9432#issuecomment-690693915,1,['Test'],['Tests']
Testability,"Tests are failing, you missed a `_jhc` somewhere",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8434#issuecomment-607868552:0,Test,Tests,0,https://hail.is,https://github.com/hail-is/hail/pull/8434#issuecomment-607868552,1,['Test'],['Tests']
Testability,Tests are failing.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/76#issuecomment-156434811:0,Test,Tests,0,https://hail.is,https://github.com/hail-is/hail/pull/76#issuecomment-156434811,2,['Test'],['Tests']
Testability,Tests are passing,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10859#issuecomment-918288924:0,Test,Tests,0,https://hail.is,https://github.com/hail-is/hail/pull/10859#issuecomment-918288924,1,['Test'],['Tests']
Testability,Tests are passing again! I know there were concerns about error handling in the `vep.py` code. I tried to make it exactly the same as the existing Scala code.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12428#issuecomment-1522373710:0,Test,Tests,0,https://hail.is,https://github.com/hail-is/hail/pull/12428#issuecomment-1522373710,1,['Test'],['Tests']
Testability,Tests are passing now,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10583#issuecomment-860835649:0,Test,Tests,0,https://hail.is,https://github.com/hail-is/hail/pull/10583#issuecomment-860835649,1,['Test'],['Tests']
Testability,Tests are passing now!!!! Ready for review. Remember this is stacked on another PR.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13985#issuecomment-1809137525:0,Test,Tests,0,https://hail.is,https://github.com/hail-is/hail/pull/13985#issuecomment-1809137525,1,['Test'],['Tests']
Testability,Tests are passing now.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10226#issuecomment-813523640:0,Test,Tests,0,https://hail.is,https://github.com/hail-is/hail/pull/10226#issuecomment-813523640,1,['Test'],['Tests']
Testability,"Tests are passing now. I am going to mark WIP because I want to run benchmarks on Monday before this merges. You can look whenever though. . Some things to look at:. 1. Does `ServiceTaskContext` have a notion of stages or retries, or should those also always be 0? ; 2. Some of the logic with combOps getting region pools is a little different, now depends on where combOp is running . For the most part though, PR is just refactoring to pass `RegionPool` everywhere",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9675#issuecomment-738330547:0,Test,Tests,0,https://hail.is,https://github.com/hail-is/hail/pull/9675#issuecomment-738330547,3,"['Test', 'benchmark', 'log']","['Tests', 'benchmarks', 'logic']"
Testability,"Tests are passing, but I'd like to see if I can go back to not having setup on EmitCode, now that we found the btree problem.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9925#issuecomment-769219666:0,Test,Tests,0,https://hail.is,https://github.com/hail-is/hail/pull/9925#issuecomment-769219666,1,['Test'],['Tests']
Testability,Tests are passing. Should be ready for review.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9926#issuecomment-769218315:0,Test,Tests,0,https://hail.is,https://github.com/hail-is/hail/pull/9926#issuecomment-769218315,1,['Test'],['Tests']
Testability,Tests failed unrelatedly on `test_ci` due to a timeout on pulling an image.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13949#issuecomment-1787517445:0,Test,Tests,0,https://hail.is,https://github.com/hail-is/hail/pull/13949#issuecomment-1787517445,1,['Test'],['Tests']
Testability,"Tests finally all pass. The boundary condition is too fragile (TContainer can be TDict, and we cannot wrap that in ToArray)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8063#issuecomment-586422358:0,Test,Tests,0,https://hail.is,https://github.com/hail-is/hail/pull/8063#issuecomment-586422358,1,['Test'],['Tests']
Testability,Tests pass now!,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8633#issuecomment-620202391:0,Test,Tests,0,https://hail.is,https://github.com/hail-is/hail/pull/8633#issuecomment-620202391,1,['Test'],['Tests']
Testability,Tests pass. Probably messed up my translation the first time.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9379#issuecomment-685808895:0,Test,Tests,0,https://hail.is,https://github.com/hail-is/hail/pull/9379#issuecomment-685808895,1,['Test'],['Tests']
Testability,Tests passed rolling up,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9852#issuecomment-754182568:0,Test,Tests,0,https://hail.is,https://github.com/hail-is/hail/pull/9852#issuecomment-754182568,1,['Test'],['Tests']
Testability,"Tests pushing to the cache is important. For example, if a PR adds a new apt-get dependency, only the first build should have to rebuild the image. Subsequent commits / retries should be fast.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11907#issuecomment-1152533590:0,Test,Tests,0,https://hail.is,https://github.com/hail-is/hail/pull/11907#issuecomment-1152533590,1,['Test'],['Tests']
Testability,Tests with dev deploy worked.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7909#issuecomment-575794175:0,Test,Tests,0,https://hail.is,https://github.com/hail-is/hail/pull/7909#issuecomment-575794175,1,['Test'],['Tests']
Testability,"Thank you both. If you're comfortable without performance testing at this stage (since this is part of a broader move, and optimization seems like it is out of scope, as it is mostly now a function of the Table implementation), this PR is approved, once the commented-out old code block is removed.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5075#issuecomment-454049236:58,test,testing,58,https://hail.is,https://github.com/hail-is/hail/pull/5075#issuecomment-454049236,1,['test'],['testing']
Testability,"Thank you for the above suggestions, I was originally getting the :nativeLib FAILED error. But I resolved it by using the most recent gcc 7.1.0 version. However, even I stumble upon this error while compiling :compileScala step.; `[nroak@compute-0-19 hail]$ ./gradlew shadowJar; Picked up _JAVA_OPTIONS: -Xmx4g; :compileJava UP-TO-DATE; :generateBuildInfo; :nativeLib; (cd libsimdpp-2.0-rc2 && cmake .); -- Configuring done; -- Generating done; -- Build files have been written to: /mount/pcgp/resources/hail/src/main/c/libsimdpp-2.0-rc2; :compileScala; Picked up _JAVA_OPTIONS: -Xmx4g; /mount/pcgp/resources/hail/src/main/scala/is/hail/expr/FunctionRegistry.scala:2544: value floorDiv is not a member of object Math; register(""//"", (x: Int, y: Int) => java.lang.Math.floorDiv(x, y), null); ^; /mount/pcgp/resources/hail/src/main/scala/is/hail/expr/FunctionRegistry.scala:2545: value floorDiv is not a member of object Math; register(""//"", (x: Long, y: Long) => java.lang.Math.floorDiv(x, y), null); ^; /mount/pcgp/resources/hail/src/main/scala/is/hail/expr/FunctionRegistry.scala:2549: value floorMod is not a member of object Math; register(""%"", (x: Int, y: Int) => java.lang.Math.floorMod(x, y), null); ^; /mount/pcgp/resources/hail/src/main/scala/is/hail/expr/FunctionRegistry.scala:2550: value floorMod is not a member of object Math; register(""%"", (x: Long, y: Long) => java.lang.Math.floorMod(x, y), null); ^; four errors found; :compileScala FAILED. FAILURE: Build failed with an exception. * What went wrong:; Execution failed for task ':compileScala'.; > Compilation failed. * Try:; Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. BUILD FAILED. Total time: 52.396 secs; `",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1327#issuecomment-302833404:1692,log,log,1692,https://hail.is,https://github.com/hail-is/hail/issues/1327#issuecomment-302833404,1,['log'],['log']
Testability,Thankfully the same digest flags can be passed to `req`. Tested manually with `openssl x509 -noout -text` to see that the correct Signature Algorithm was chosen.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10073#issuecomment-783584233:57,Test,Tested,57,https://hail.is,https://github.com/hail-is/hail/pull/10073#issuecomment-783584233,1,['Test'],['Tested']
Testability,"Thanks @daniel-goldstein! I tested the single user, but hadn't tested the multi user endpoint - with that test I have resolved a `TypeError: object async_generator can't be used in 'await' expression` in a follow-up commit.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12889#issuecomment-1510514388:28,test,tested,28,https://hail.is,https://github.com/hail-is/hail/pull/12889#issuecomment-1510514388,3,['test'],"['test', 'tested']"
Testability,"Thanks @danking for helping with this, and for the nudge to finally get it implemented!. Some more next steps:; * Make a benchmarking setup to collect data on performance and accuracy. I want to use the same metrics for measuring error as [here](http://quantiles.github.io/) (Kolmogorov-Smirnov divergence and total variation distance between the true and estimated CDFs, which are both simple to compute). As a first sanity check, we should get numbers in the same ballpark as they did (worse at first, because we started with a very naive algorithm).; * Make improvements to the algorithm, evaluating the gains in the benchmarks.; * When we feel we understand the behavior of the accuracy measures, we can pick a conservative upper error bound and turn that into an automated test.; * Also once we understand the behavior of the accuracy measures, figure out how to communicate that to users. One thought is to offer a few default choices of parameters, and for each document memory usage, empirical error from our benchmarks, and a theoretical upper bound on the error (of the form ""with probability > .99 the estimated q quantile element will have true quantile q ± .001""). This allows users to make an informed decision based on their use case. That looks like a lot, but I think those are all relatively simple. I'm also using this as a test case for thinking about how to implement approximate/randomized methods in Hail in general.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5332#issuecomment-463200410:121,benchmark,benchmarking,121,https://hail.is,https://github.com/hail-is/hail/pull/5332#issuecomment-463200410,5,"['benchmark', 'test']","['benchmarking', 'benchmarks', 'test']"
Testability,"Thanks @danking. And no worries, I was mainly interested in being able to see test output vs having tests automatically start.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8903#issuecomment-637175674:78,test,test,78,https://hail.is,https://github.com/hail-is/hail/pull/8903#issuecomment-637175674,2,['test'],"['test', 'tests']"
Testability,"Thanks @jmarshall for bringing this to our attention. It looks like while we updated the upper bound here, we did not update our fully-pinned requirements which we use to test in CI, so it did not catch this incompatibility. That being said, I don't think that was necessarily a mistake, because by testing our minimum-compatible-version we make sure not to introduce incompatibilities on that end of the spectrum either.. I think I don't see a good way in which we can confidently support more than one major version of a dependency at a given point in time. Even without the bokeh issue, there could easily be places in our codebase where we use pandas 1.x functionality that has been removed in 2.0. @danking thoughts on moving the pandas pin to >= the 2.x.x version that we test with and <3?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12906#issuecomment-1520406276:171,test,test,171,https://hail.is,https://github.com/hail-is/hail/pull/12906#issuecomment-1520406276,3,['test'],"['test', 'testing']"
Testability,Thanks @lgruen for pointing this out! Looks like we erroneously assume we can decode job logs as utf-8 strings on the worker and [invalid utf-8 strings such as '\\x80'](https://stackoverflow.com/questions/59624160/how-many-bytes-does-the-python-string-x80-in-utf8-occupy) cause writing the log or fetching it from the worker to fail. I made a branch with a couple small changes to be more careful about utf-8 decoding and was able to successfully see the log from the example you gave here. Now just need to make a backwards-compatible change to how we ship job logs around. Fix should be out soon!,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12614#issuecomment-1402163573:89,log,logs,89,https://hail.is,https://github.com/hail-is/hail/issues/12614#issuecomment-1402163573,4,['log'],"['log', 'logs']"
Testability,"Thanks @tpoterba, the `gradle clean` worked nicely. If it's any use, the test failures are the following:. ```; $ ./gradlew check | grep FAILED; Gradle suite > Gradle test > org.broadinstitute.hail.io.ExportPlinkSuite.testBiallelic FAILED; Gradle suite > Gradle test > org.broadinstitute.hail.driver.GRMSuite.test FAILED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.ImputeSexSuite.testImputeSexPlinkVersion FAILED; Gradle suite > Gradle test > org.broadinstitute.hail.io.LoadBgenSuite.testBgenImportRandom FAILED; ```. Thanks for the help, and please feel free to close this issue whenever suits.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/594#issuecomment-240395647:73,test,test,73,https://hail.is,https://github.com/hail-is/hail/issues/594#issuecomment-240395647,9,['test'],"['test', 'testBgenImportRandom', 'testBiallelic', 'testImputeSexPlinkVersion']"
Testability,"Thanks Cotton. CI management is never easy at the best of times so no worries. - T. -- ; Theodore Wong <tmw@tmwong.org>; http://www.tmwong.org. > On Jun 10, 2019, at 2:58 PM, cseed <notifications@github.com> wrote:; > ; > Hey @tmwong2003 <https://github.com/tmwong2003>, we recently changed our CI setup and there's a little more work to do to test external PRs. I'll try to have someone finish this in the next couple of days. Thanks for your patience.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub <https://github.com/hail-is/hail/pull/6262?email_source=notifications&email_token=ABF7I6IGGFIJYRP2T6EIMSDPZ3E7HA5CNFSM4HTJ3TF2YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGODXLLK3Y#issuecomment-500610415>, or mute the thread <https://github.com/notifications/unsubscribe-auth/ABF7I6NP2HBAOUHJR4HOWIDPZ3E7HANCNFSM4HTJ3TFQ>.; >",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6262#issuecomment-500639087:344,test,test,344,https://hail.is,https://github.com/hail-is/hail/pull/6262#issuecomment-500639087,1,['test'],['test']
Testability,Thanks a lot for looking at the PR @cseed! I've made the changes you suggested and added a short test suite. Hope it can go in :),MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1147#issuecomment-265872788:97,test,test,97,https://hail.is,https://github.com/hail-is/hail/pull/1147#issuecomment-265872788,1,['test'],['test']
Testability,Thanks for digging in to this Chris. Sorry I haven't had much time to help. I think I was able to get my head back into the partitioner logic during my walk to work this morning. I'll spend some time looking at this after team meeting today.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/8138#issuecomment-597057008:136,log,logic,136,https://hail.is,https://github.com/hail-is/hail/issues/8138#issuecomment-597057008,1,['log'],['logic']
Testability,"Thanks for merging. The wild goose chase was amusing in retrospect!. I was considering adding another commit with something like. ```patch; +++ b/hail/python/hailtop/batch/resource.py; @@ -49,7 +49,7 @@ class ResourceFile(Resource, str):; ; def __init__(self, value: Optional[str]):; super().__init__(); - assert value is None or isinstance(value, str); + assert value is None or isinstance(value, str), f'{type(value).__name__} ({value!r}) is not str'; ```. However this iterating is probably the cause of most of the unexpected values/types here, so with the `__iter__` definitions added it doesn't matter too much. (Most of the other asserts are things like `assert value is not None` so if you see it you can tell what's happened without needing to print out `value`.)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14390#issuecomment-1977643581:306,assert,assert,306,https://hail.is,https://github.com/hail-is/hail/pull/14390#issuecomment-1977643581,4,['assert'],"['assert', 'asserts']"
Testability,"Thanks for taking a look. The unit test contains a total of 454 jobs, so it's not completely outrageously sized. So I think a sub-DAG won't always be orders of magnitude smaller than the full DAG, so that won't necessarily make the critical difference. Short-circuiting the `add_dependents()` recursion on paths that have already been seen made the full DAG computation take <1 second. So whether the computation is on the full DAG or a sub-DAG, I think what really makes the difference is memoizing the computation properly — akin to `seen` in the similar `schedule_jobs` helper in _hailtop/batch/batch.py_.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12915#issuecomment-1518349628:35,test,test,35,https://hail.is,https://github.com/hail-is/hail/issues/12915#issuecomment-1518349628,1,['test'],['test']
Testability,"Thanks for the context! Unit tests pass, nice. A few warnings generated: `assertEquals` is deprecated in favor of `assertEqual` (I'm using pytest-4.0.2/python 3.7.1 may be new deprecation). Need to spend more time following the move of key from IR to table. Do the existing join unit tests cover the new join implementation?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5075#issuecomment-451720307:29,test,tests,29,https://hail.is,https://github.com/hail-is/hail/pull/5075#issuecomment-451720307,4,"['assert', 'test']","['assertEqual', 'assertEquals', 'tests']"
Testability,"Thanks for the feedback, I've simplified the logic, made the python test more comprehensive, and made element retrieval more direct and applicable to sparse block matrices. I'll clarify that the latter is supported in the sparse case as soon as #3539 goes in.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3611#issuecomment-389940384:45,log,logic,45,https://hail.is,https://github.com/hail-is/hail/pull/3611#issuecomment-389940384,2,"['log', 'test']","['logic', 'test']"
Testability,Thanks for the quick help! I've just build a new image from master. I'll test and report back.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/7080#issuecomment-536736873:73,test,test,73,https://hail.is,https://github.com/hail-is/hail/issues/7080#issuecomment-536736873,1,['test'],['test']
Testability,Thanks for the report and fix @nawatts ! You should be able to test changes with `make -C website run` from the root of the repo. Let me take a closer look at the docs.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10277#issuecomment-813613209:63,test,test,63,https://hail.is,https://github.com/hail-is/hail/pull/10277#issuecomment-813613209,1,['test'],['test']
Testability,"Thanks for working on this!. Would it be possible to keep the logout button on every page but add a step where it takes the user to the Auth UI to make it work? Specifically, I'm thinking we could add logic to the `/user` route in `auth/auth/auth.py` such that if we pass in the query parameter `logout`, it calls the same code as the `/logout` endpoint, and then replace the `form` and `button` with something like:. ```html; <a href=""https://auth.hail.is/user?logout"">Log out</a>; ```. The tricky part of that might be getting the CSRF token, but since the `/user` page is only accessible by logged in users (because of the `authenticated_users_only` decorator), I *think* there should always be a CSRF token accessible via `request.cookies[""_csrf""]` (e.g. https://github.com/hail-is/hail/blob/main/web_common/web_common/web_common.py#L93).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14639#issuecomment-2258267657:62,log,logout,62,https://hail.is,https://github.com/hail-is/hail/pull/14639#issuecomment-2258267657,7,"['Log', 'log']","['Log', 'logged', 'logic', 'logout']"
Testability,"Thanks so much Daniel!! This is awesome. I can't seem to be able to merge though, probably due to permissions?; <img width=""516"" alt=""Screen Shot 2021-04-22 at 9 58 00 am"" src=""https://user-images.githubusercontent.com/1575412/115636406-3ada5e00-a351-11eb-887d-3882271f6369.png"">. There are also conflicts, but I'm resolving them right now :). UPD: Ah, learned from Leo that the merge button will be available after the tests pass :)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10347#issuecomment-824439697:420,test,tests,420,https://hail.is,https://github.com/hail-is/hail/pull/10347#issuecomment-824439697,1,['test'],['tests']
Testability,Thanks! Back to you. Still working on tests and agreed on graphical comparison with PLINK.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/202#issuecomment-189526505:38,test,tests,38,https://hail.is,https://github.com/hail-is/hail/pull/202#issuecomment-189526505,1,['test'],['tests']
Testability,"Thanks! To clarify your other question, while the local backend segfault with this, I think it is caused by existing memory issues that show up in the Spark backend tests. I conjecture when you fix those, the local backend failure will go away. If not, we can flip to see who debugs it :-)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8957#issuecomment-645097424:165,test,tests,165,https://hail.is,https://github.com/hail-is/hail/pull/8957#issuecomment-645097424,1,['test'],['tests']
Testability,"Thanks, @tpoterba! I wasn't done so I hadn't assigned anyone, just wanted to run the tests, but it should be good to go now.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6462#issuecomment-506361818:85,test,tests,85,https://hail.is,https://github.com/hail-is/hail/pull/6462#issuecomment-506361818,1,['test'],['tests']
Testability,"Thanks, added with one tweak. Sadly I don't know how to convince your code analyser that using `randint` to make test cases in test code is not a security issue…. Feel free to push to PR branches directly, or just to add things while merging. You folks are the Hail maintainers after all!",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14700#issuecomment-2400960303:113,test,test,113,https://hail.is,https://github.com/hail-is/hail/pull/14700#issuecomment-2400960303,2,['test'],['test']
Testability,"Thanks, definitely easier to read. Will thoroughly check tomorrow. Think it's worth benchmarking?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11070#issuecomment-972117676:84,benchmark,benchmarking,84,https://hail.is,https://github.com/hail-is/hail/pull/11070#issuecomment-972117676,1,['benchmark'],['benchmarking']
Testability,"Thanks, that returns our unit test to taking its expected 20 seconds runtime. The 454 jobs cause a total of 37844 entries to be added to `child_jobs`, which is both trivial and as expected for the number of edges.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12918#issuecomment-1518386154:30,test,test,30,https://hail.is,https://github.com/hail-is/hail/pull/12918#issuecomment-1518386154,1,['test'],['test']
Testability,"Thanks, that was helpful. Now there's a test.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7587#issuecomment-560541059:40,test,test,40,https://hail.is,https://github.com/hail-is/hail/pull/7587#issuecomment-560541059,1,['test'],['test']
Testability,"Thanks,. The `module-info.class` thing is incredibly unlikely to break any user. I only discovered it because it broke `jdeps` when I was testing generating a bundled JRE. None of this directly impacts me or established users of Hail in my group, but I have seen Java version be the single biggest pain point for new users wanting to install and try Hail for the first time, which is why I posted this.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/14433#issuecomment-2030374619:138,test,testing,138,https://hail.is,https://github.com/hail-is/hail/issues/14433#issuecomment-2030374619,1,['test'],['testing']
Testability,"That command should be unaffected, but `test-gsa-key` in PR namespaces is no longer the all-powerful `test-665@hail-vdc.iam.gserviceaccount.com` (which I would like to make not all-powerful), but is now `testns-test-418@hail-vdc.iam.gserviceaccount.com` which probably won't have that permission. My bad for missing that. Two questions:. - ~~Shouldn't `delete_gcp_batch_instances` fail if the vm deletion commands fail?~~ Ah there's a `set +e`, we should make that less permissive; - Can that step instead use the batch identity in the PR namespace? The batch identity should by definition have the ability to delete VMs.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13554#issuecomment-1737449758:40,test,test-gsa-key,40,https://hail.is,https://github.com/hail-is/hail/issues/13554#issuecomment-1737449758,3,['test'],"['test-', 'test-gsa-key', 'testns-test-']"
Testability,"That huge spike in ready jobs has got to be a mistake. Where do we create a 1500 partition dataset?. Service backend [split 35](https://batch.hail.is/batches/7489026/jobs/197) is again the critical path. I tried pushing a commit which checkpoints the VCF. The main problem is probably just that our PC-Relate implementation is slow.; ```; ============================= slowest 50 durations =============================; 240.09s call hail/methods/relatedness/test_pc_relate.py::test_pc_relate_against_R_truth; 168.03s call hail/methods/test_pca.py::test_spectra_2[triplet0]; 93.98s call hail/vds/test_vds.py::test_truncate_reference_blocks; 86.56s call hail/backend/test_service_backend.py::test_tiny_driver_has_tiny_memory; 83.82s call hail/methods/test_qc.py::Tests::test_vep_grch38_against_dataproc; ```. 2a3fbd185e9255ed447dd80b983709d49c7a345e (45 minutes):. <img width=""2032"" alt=""Screen Shot 2023-05-26 at 14 39 28"" src=""https://github.com/hail-is/hail/assets/106194/2f98159e-e60e-4410-af4b-7bca72fc43a8"">. <img width=""305"" alt=""Screen Shot 2023-05-26 at 14 36 58"" src=""https://github.com/hail-is/hail/assets/106194/be2c4b32-db08-484f-a6de-08bc41149e65"">. <img width=""523"" alt=""Screen Shot 2023-05-26 at 14 38 18"" src=""https://github.com/hail-is/hail/assets/106194/981665f6-fe7c-45eb-8659-836d505fa280"">; <img width=""518"" alt=""Screen Shot 2023-05-26 at 14 38 13"" src=""https://github.com/hail-is/hail/assets/106194/feaf826a-57d2-4404-9844-69048e3ade69"">",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13076#issuecomment-1564787141:762,Test,Tests,762,https://hail.is,https://github.com/hail-is/hail/pull/13076#issuecomment-1564787141,1,['Test'],['Tests']
Testability,"That image includes rows 26 and 27 which I didn't bother fixing in my test, but these changes are templated so all rows will be fine.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7563#issuecomment-555743192:70,test,test,70,https://hail.is,https://github.com/hail-is/hail/pull/7563#issuecomment-555743192,1,['test'],['test']
Testability,"That looks like it should work (though some tests are failing), but rekeying by the global index might be more expensive than necessary. What about using `multi_way_zip_join`?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9071#issuecomment-656719287:44,test,tests,44,https://hail.is,https://github.com/hail-is/hail/pull/9071#issuecomment-656719287,1,['test'],['tests']
Testability,That message is caused by returning an `int` from a Flask request handler. Looks like the endpoint is called `/test`. I don't see that in the CI logs. Can you show me on your laptop later?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5418#issuecomment-466544014:111,test,test,111,https://hail.is,https://github.com/hail-is/hail/pull/5418#issuecomment-466544014,2,"['log', 'test']","['logs', 'test']"
Testability,That seems good. Perhaps we could also suggest using `hl.plot.pdf` instead. Just about to test that out.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11268#issuecomment-1022547229:90,test,test,90,https://hail.is,https://github.com/hail-is/hail/pull/11268#issuecomment-1022547229,1,['test'],['test']
Testability,That still leaves open problems caused by true network communication between physically-distant cores. We could package our tests as a test JAR and submit that to the Spark cluster the CI starts.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5033#issuecomment-449480646:124,test,tests,124,https://hail.is,https://github.com/hail-is/hail/pull/5033#issuecomment-449480646,2,['test'],"['test', 'tests']"
Testability,"That test with `10000` fields takes about two minutes, so I didn't want to add that to the test suite. Although two minutes seems insanely slow, it's better than the quadratic scaling provided by the old implementation of `Infer(InsertFields(...))`. Moreover, these tests are now bottlenecked by the py4j boundary rather than constructing immutable maps.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4484#issuecomment-426097277:5,test,test,5,https://hail.is,https://github.com/hail-is/hail/pull/4484#issuecomment-426097277,3,['test'],"['test', 'tests']"
Testability,"That's a fair counter-point, but wouldn't it be annoying if you did:; ```; hailctl batch init; ```; And it was like:; ```; Run hailctl auth login first.; ```; Why not just *do* it for me?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13279#issuecomment-1662943588:140,log,login,140,https://hail.is,https://github.com/hail-is/hail/pull/13279#issuecomment-1662943588,1,['log'],['login']
Testability,"That's fine for the first two comments, but please address the last comment to have the `delete_batch_azure_instances` depend on the Azure tests.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13353#issuecomment-1660786852:139,test,tests,139,https://hail.is,https://github.com/hail-is/hail/pull/13353#issuecomment-1660786852,1,['test'],['tests']
Testability,That's hard to test.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5033#issuecomment-449469370:15,test,test,15,https://hail.is,https://github.com/hail-is/hail/pull/5033#issuecomment-449469370,1,['test'],['test']
Testability,"The 9 is about stopping the exponential backoff. At i=9, (0.1 * 2^9 is roughly half a second) we stop backing off and keep polling with delays uniformly chosen between 0 and half second. We might actually want a hard limit on the number of backoffs, as written this test could trigger an infinite loop. I'll add a max number of iterations.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5503#issuecomment-470258509:266,test,test,266,https://hail.is,https://github.com/hail-is/hail/pull/5503#issuecomment-470258509,1,['test'],['test']
Testability,The CI checks likely failed because of failing unit tests. I just fixed the unit tests. Please rerun the CI checks when you get a chance.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14250#issuecomment-1989791587:52,test,tests,52,https://hail.is,https://github.com/hail-is/hail/pull/14250#issuecomment-1989791587,2,['test'],['tests']
Testability,"The CI tests were failing due to not enough disk space on the workers. I increased the size to 20 GB, but this requires a migration. I'll need to setup a VM with the ability to deploy to have this new image pre-built. The last time I did a migration from the VM, it took a long time to deploy despite pre-caching the image, so I'll want to build a new VM with more cores to see if that helps. We should wait until after Konrad's jobs are done to do this.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8440#issuecomment-609845317:7,test,tests,7,https://hail.is,https://github.com/hail-is/hail/pull/8440#issuecomment-609845317,1,['test'],['tests']
Testability,"The Hail CI runs the tests against a merge of this branch with master, so they can't start until the merge conflicts are resolved. The GitHub UI uses the same icon for running and not started when a check is required. I think it does this because checks are not required to notify GitHub that they have started.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2049#issuecomment-320090326:21,test,tests,21,https://hail.is,https://github.com/hail-is/hail/pull/2049#issuecomment-320090326,1,['test'],['tests']
Testability,"The IR has functions so that we don't need a node for every bespoke library function we might want to call out to. There are three types of functions: Relational functions, IR functions, and Code functions. Relational functions take Tables/MatrixTables as arguments. I haven't touched these. IR functions are essentially aliases for IR patterns we expect to be common, and don't necessarily want to inline everywhere. Example: Array median:. ```scala; registerIR(""median"", TArray(tnum(""T"")), tv(""T"")) { array =>; val t = -array.typ.asInstanceOf[TArray].elementType; val v = Ref(genUID(), t); val a = Ref(genUID(), TArray(t)); val size = Ref(genUID(), TInt32()); val lastIdx = size - 1; val midIdx = lastIdx.floorDiv(2); def ref(i: IR) = ArrayRef(a, i); def div(a: IR, b: IR): IR = ApplyBinaryPrimOp(BinaryOp.defaultDivideOp(t), a, b). Let(a.name, ArraySort(ArrayFilter(array, v.name, !IsNA(v))),; If(IsNA(a),; NA(t),; Let(size.name,; ArrayLen(a),; If(size.ceq(0),; NA(t),; If(invoke(""%"", size, 2).cne(0),; ref(midIdx), // odd number of non-missing elements; div(ref(midIdx) + ref(midIdx + 1), Cast(2, t))))))); }; ```. Code functions are functions where we have a handwritten code-generator (not IR). Example: Fisher Exact Test:. ```scala. registerCode(""fisher_exact_test"", TInt32(), TInt32(), TInt32(), TInt32(), fetStruct){ case (r, a, b, c, d) =>; val res = r.mb.newLocal[Array[Double]]; val srvb = new StagedRegionValueBuilder(r, fetStruct.physicalType); Code(; res := Code.invokeScalaObject[Int, Int, Int, Int, Array[Double]](statsPackageClass, ""fisherExactTest"", a, b, c, d),; srvb.start(),; srvb.addDouble(res(0)),; srvb.advance(),; srvb.addDouble(res(1)),; srvb.advance(),; srvb.addDouble(res(2)),; srvb.advance(),; srvb.addDouble(res(3)),; srvb.advance(),; srvb.offset; ); }; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6540#issuecomment-508089671:1223,Test,Test,1223,https://hail.is,https://github.com/hail-is/hail/pull/6540#issuecomment-508089671,1,['Test'],['Test']
Testability,"The NativePtr test runs fine as a single test, but it fails when I run all the tests. I'm trying to track; down the problem. Somehow the (anonymous) global data in NativePtr.cpp is getting corrupted.; I can make it pass tests by reinitializing that data, but I really want to figure out how it gets corrupted; because that could cause trouble elsewhere.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3595#issuecomment-390062140:14,test,test,14,https://hail.is,https://github.com/hail-is/hail/pull/3595#issuecomment-390062140,4,['test'],"['test', 'tests']"
Testability,The PR failed: https://github.com/hail-is/hail/pull/4509 and the build log shows failed exit code 2: https://storage.googleapis.com/hail-ci-0-1/ci/7aa524504b8bafe0a4af859e73bc4f9efdaa052c/414f3f183bd5f2ec04e1c732522cbc0b8b1fca31/job-log,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4514#issuecomment-428410840:71,log,log,71,https://hail.is,https://github.com/hail-is/hail/issues/4514#issuecomment-428410840,2,['log'],['log']
Testability,"The RVDPartitioner union function contains coarsening logic, so I'm not going to abstract that one right now.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6073#issuecomment-490524909:54,log,logic,54,https://hail.is,https://github.com/hail-is/hail/pull/6073#issuecomment-490524909,1,['log'],['logic']
Testability,"The [Hail CI Build Configuration](https://ci.hail.is/admin/editBuildRunners.html?id=buildType:HailSourceCode_HailCi) (admin login required) now runs `gradle clean compileTestScala` against three spark versions: `1.6.2`, `1.5.2`, and `1.6.0-cdh5.7.2`. If all of those succeed, it runs `gradle clean test createDocs` against the default spark version in the gradle script.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/742#issuecomment-245033280:124,log,login,124,https://hail.is,https://github.com/hail-is/hail/issues/742#issuecomment-245033280,2,"['log', 'test']","['login', 'test']"
Testability,"The [TextInputFormat](https://hadoop.apache.org/docs/stable/api/org/apache/hadoop/mapred/TextInputFormat.html) class clearly comes from hadoop. It's no longer in the location from which we import it. We must get it from some other dependency. OK. So, before my simplification of build.gradle, we used a configuration called `compile` and another one called `testCompile`. [Neither of those exist in modern gradle, apparently](https://docs.gradle.org/current/userguide/java_library_plugin.html#sec:java_library_configurations_graph). I found a side-note about the `compile` configuration [here](https://docs.gradle.org/current/userguide/building_java_projects.html#sec:java_dependency_management_overview) (search for ""compile""):. > **Why no compile configuration?**; > The Java Library Plugin has historically used the compile configuration for dependencies that are required to both compile and run a project’s production code. It is now deprecated, and will issue warnings when used, because it doesn’t distinguish between dependencies that impact the public API of a Java library project and those that don’t. You can learn more about the importance of this distinction in [Building Java libraries](https://docs.gradle.org/current/userguide/building_java_projects.html#sec:building_java_libraries). OK, so, we used to just dump everything into our runtime dependencies. I changed it so that we have three kinds of dependencies:; 1. `shadow`: these are provided by Dataproc/QoB at run-time. They are not in any JAR. They are not on the `testRuntimeClasspath` or `runtimeClasspath`. They are on the `testCompileClasspath` because I [explicitly requested](https://github.com/hail-is/hail/blob/main/hail/build.gradle#L98) that `testCompileOnly` bring in our `shadow` dependencies.; 2. `implementation`: these are included in all class paths and in shadow JARs (but not ""thin"" jars generated by `./gradlew jar`).; 3. `testImplementation`: these are included in test class paths and in shadow JARs. Our t",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13706#issuecomment-1738232741:358,test,testCompile,358,https://hail.is,https://github.com/hail-is/hail/issues/13706#issuecomment-1738232741,1,['test'],['testCompile']
Testability,"The `CovarianceData` reordering stuff looks right, but makes me a little nervous. Can you add some tests to verify the data? Just load a cov file and verify a few entries by hand. Also, verify the entries are sorted after loading. Otherwise, looks good!",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/155#issuecomment-182922376:99,test,tests,99,https://hail.is,https://github.com/hail-is/hail/pull/155#issuecomment-182922376,1,['test'],['tests']
Testability,The `range` method is nice for testing + exploration. I want to use this in a tutorial to show some stuff. The `indexed` method address #1785 and is pretty useful more broadly.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1859#issuecomment-302843950:31,test,testing,31,https://hail.is,https://github.com/hail-is/hail/pull/1859#issuecomment-302843950,1,['test'],['testing']
Testability,The artifact thing was only added for the Hail subproject. The build log is the source of truth. Changes in hail trigger a retest of apiserver which is failing due to an issue fixed by https://github.com/hail-is/hail/pull/5869,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5837#issuecomment-482297784:69,log,log,69,https://hail.is,https://github.com/hail-is/hail/pull/5837#issuecomment-482297784,1,['log'],['log']
Testability,The assertion causes a bunch of tests to fail which expect to get an `IsADirectoryError`. I removed the assertion and just construct two urls: file_url and dir_url which don't (resp do) end in a slash.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11778#issuecomment-1127843192:4,assert,assertion,4,https://hail.is,https://github.com/hail-is/hail/pull/11778#issuecomment-1127843192,3,"['assert', 'test']","['assertion', 'tests']"
Testability,"The assertion failure in `mendel_errors` was due to a bug in `TableKeyBy` that was only triggered in this PR because the IR version of `Table.aggregateByKey` maintains an `OrderedRVD`, hence uses the `ordered` branch. The `key_by('s')` after the `group_by('s', 'fam').aggregate(...)` was leaving the partition key as both fields. h/t @patrick-schultz for seeing the faulty `TableKeyBy`, since `nPartitionKeys=None` means that all key fields are partition keys.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3730#issuecomment-396372654:4,assert,assertion,4,https://hail.is,https://github.com/hail-is/hail/pull/3730#issuecomment-396372654,1,['assert'],['assertion']
Testability,"The auth service is used extensively, as you mention. I also added tests for my new functionality. I doubt the PR would pass if auth wasn't correct.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8563#issuecomment-618474871:67,test,tests,67,https://hail.is,https://github.com/hail-is/hail/pull/8563#issuecomment-618474871,1,['test'],['tests']
Testability,"The bad thing being that it will have log_2 layers rather than log_64 layers, right?. The real issue here is that for tables with one extremely tiny partition (the usual in our tests), this creates 64 nearly no-op jobs, which has unavoidable cost. Is there any number less than 64 that you would accept? Maybe 8?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11784#issuecomment-1105465160:177,test,tests,177,https://hail.is,https://github.com/hail-is/hail/pull/11784#issuecomment-1105465160,1,['test'],['tests']
Testability,"The benchmark goes from ~5m to ~40s. This is still wayyyyy too long! Force-count from read takes about 3s. In the PR, profiling indicates it spends all its time in the RegionValueCollect aggregator, so when TableKeyByAndAggregate starts using new aggs and your collect reimplementation goes in, I expect this to get *much* better.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7073#issuecomment-532176730:4,benchmark,benchmark,4,https://hail.is,https://github.com/hail-is/hail/pull/7073#issuecomment-532176730,1,['benchmark'],['benchmark']
Testability,The bigger problem is that this functionality isn't tested. Do we have a tiny dummy reference we can make a fasta for?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5308#issuecomment-462480832:52,test,tested,52,https://hail.is,https://github.com/hail-is/hail/pull/5308#issuecomment-462480832,1,['test'],['tested']
Testability,"The bug here appears to be that ndarray serializes to JSON in a format that we cannot deserialize:; ```; E is.hail.utils.HailException: scala.MatchError: could not convert ""{flags: 0, offset: 0, shape: (2, 3), strides: (12, 4), data: [1,2,3,4,5,6]}"" to ndarray<int32, 2> in column ""nd""; ```; I guess the big question for this PR is what is the serialized representation of an ndarray? Once we decide on that we can start testing for round-trip ability. Site of necessary changes appears to be `AnnotationImpex.scala`. I propose `{shape, strides, data}`, does that seem right John?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8082#issuecomment-605028789:421,test,testing,421,https://hail.is,https://github.com/hail-is/hail/pull/8082#issuecomment-605028789,1,['test'],['testing']
Testability,"The bug was fixed by the logic in `result` that uses UIDs for computed keys, renaming them after aggregation. I'm happy to walk you through this if you want.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5107#issuecomment-453174210:25,log,logic,25,https://hail.is,https://github.com/hail-is/hail/pull/5107#issuecomment-453174210,1,['log'],['logic']
Testability,"The call in the docs is wrong:; ```; [:makeHailDocs] Warning, treated as error:; [13:46:55]	[:makeHailDocs] WARNING: **********************************************************************; [13:46:55]	[:makeHailDocs] File ""hail.VariantDataset.rst"", line 16, in default; [13:46:55]	[:makeHailDocs] Failed example:; [13:46:55]	[:makeHailDocs] linreg_kt, sample_kt = (hc.read('data/example_burden.vds'); [13:46:55]	[:makeHailDocs] .linreg_burden(key_name='gene',; [13:46:55]	[:makeHailDocs] variant_keys='va.genes',; [13:46:55]	[:makeHailDocs] single_key='false',; [13:46:55]	[:makeHailDocs] agg_expr='gs.map(g => g.gt).max()',; [13:46:55]	[:makeHailDocs] y='sa.burden.pheno',; [13:46:55]	[:makeHailDocs] covariates=['sa.burden.cov1', 'sa.burden.cov2'])); [13:46:55]	[:makeHailDocs] Exception raised:; [13:46:55]	[:makeHailDocs] Traceback (most recent call last):; [13:46:55]	[:makeHailDocs] File ""/usr/lib64/python2.7/doctest.py"", line 1315, in __run; [13:46:55]	[:makeHailDocs] compileflags, 1) in test.globs; [13:46:55]	[:makeHailDocs] File ""<doctest default[0]>"", line 7, in <module>; [13:46:55]	[:makeHailDocs] covariates=['sa.burden.cov1', 'sa.burden.cov2'])); [13:46:55]	[:makeHailDocs] File ""<decorator-gen-233>"", line 2, in linreg_burden; [13:46:55]	[:makeHailDocs] File ""/home/ec2-user/BuildAgent/work/c38e75e72b769a7c/python/hail/java.py"", line 119, in handle_py4j; [13:46:55]	[:makeHailDocs] 'Error summary: %s' % (msg, e.message, Env.hc().version, msg)); [13:46:55]	[:makeHailDocs] FatalError: An error occurred while calling into JVM, probably due to invalid parameter types.; [13:46:55]	[:makeHailDocs] ; [13:46:55]	[:makeHailDocs] Java stack trace:; [13:46:55]	[:makeHailDocs] An error occurred while calling o3918.linregBurden. Trace:; [13:46:55]	[:makeHailDocs] py4j.Py4JException: Method linregBurden([class java.lang.String, class java.lang.String, class java.lang.String, class java.lang.String, class java.lang.String, class [Ljava.lang.String;]) does not exist; [13:46:55]	[:makeHai",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1708#issuecomment-297039203:996,test,test,996,https://hail.is,https://github.com/hail-is/hail/pull/1708#issuecomment-297039203,1,['test'],['test']
Testability,"The combOps aren't being tested in the AggregatorsSuite, which uses the interpreter. I think we could change lines 389-397 in Interpret.Scala to do a combOp by splitting AggElements and creating a new aggregator for each split and then doing a combOp with a fold at the end. Let me know if this doesn't make sense.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3798#issuecomment-398888424:25,test,tested,25,https://hail.is,https://github.com/hail-is/hail/pull/3798#issuecomment-398888424,1,['test'],['tested']
Testability,"The command is hidden because to generate reasonable memory overhead and subsequent task sizes for even 10k samples and 10k variants, we should parallelize data generation of the RDD, rather than using `sc.parallelize` on a matrix at driver. That will be a subsequent improvement. For reference, running an IntelliJ test that simply generates the integer matrix of genotypes for 10k samples and 10k variants and 4 populations with the rest default takes about 7 seconds (one core). Small examples still work fine using this command, but PCA fails at the following scale unless repartition is used first:. ```; hail \; baldingnichols \; -k 3 \; -n 2000 \; -m 10000 \; -f .02,.03,.1 \; -d .2,.3,.5 \; -s 0 \; repartition -n 8 \; printschema -o ~/data/baldingnichols/schema.json \; pca -k 3 -s 'sa.pc' -e 'global.evals' \; showglobals -o ~/data/baldingnichols/global.tsv \; exportsamples -c 'sample = s, pop = sa.bn.pop, pc = sa.pc.*' -o ~/data/baldingnichols/samples.tsv \; exportvariants -c 'variant = v, freq = va.bn.*' -o ~/data/baldingnichols/variants.tsv; ```. Here is the annotation scheme created by `baldingnichols`:. ```; Global annotation schema:; global: Struct {; bn: Struct {; seed: Int,; nPops: Int,; nSamples: Int,; nVariants: Int,; popDist: Array[Double],; Fst: Array[Double]; }; }. Sample annotation schema:; sa: Struct {; bn: Struct {; pop: Int; }; }. Variant annotation schema:; va: Struct {; bn: Struct {; ancAF: Double,; AF0: Double,; AF1: Double,; AF2: Double; }; }; ```. The following python code shows three tight clusters corresponding to population using PC1 and PC2, and that PC3 is noise:. ```; import numpy as np; import matplotlib.pyplot as plt; import pandas as pd. %matplotlib inline. df = pd.read_table(""samples.tsv""); colors = {0: 'r', 1: 'b', 2: 'g'}. df.plot('pc.PC1', 'pc.PC2', 'scatter', c=df['pop'].map(colors), alpha=.3); plt.show(). df.plot('pc.PC1', 'pc.PC3', 'scatter', c=df['pop'].map(colors), alpha=.3); plt.show(). df.plot('pc.PC2', 'pc.PC3', 'scatter', c=d",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1029#issuecomment-257211215:316,test,test,316,https://hail.is,https://github.com/hail-is/hail/pull/1029#issuecomment-257211215,1,['test'],['test']
Testability,"The correct fix is to change this line in `lookup` from `if (tt.xs.size == typ.xs.size)` to `if (tt.xs.size == typ.xs.size && typ.getClass == tt.getClass)`. However, this will cause many test suite failures and we would have to fix 100s of lines of expr language in both the docs and the test suites. In the meantime we could change the AST code for `Select` to `lookupMethodReturnType` on failure of `lookupFieldReturnType`. . The user will not be able to trigger this error once the expression language is implemented in Python.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1983#issuecomment-329826002:187,test,test,187,https://hail.is,https://github.com/hail-is/hail/issues/1983#issuecomment-329826002,2,['test'],['test']
Testability,"The current logic of `key_by` and `distinct` to remove duplicate pairs is actually not properly deduplicating pairs in some cases. Since I know that thats not really the approach we want in the long run I didn't bother figuring out why, and instead tried implementing a version of the code that filters out duplicate pairs before exploding, which should result in less work overall. However, I somehow introduced an extra `Ordering unsorted dataset with network shuffle` and the overall performance of that search got slower by 15 seconds. . Here is the change I made. Let me know if you have a better approach for filtering out duplicates, or if you see any ways to reorganize this code to make it less shuffle-y; https://github.com/broadinstitute/seqr/commit/2e45403efc159b58cec723f86e6de7653d64cf5f",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13882#issuecomment-1828333357:12,log,logic,12,https://hail.is,https://github.com/hail-is/hail/issues/13882#issuecomment-1828333357,1,['log'],['logic']
Testability,"The currently running CI is the old one, it chooses the index file. If you want to test that the index file looks the way you want, you'd need to add a `ci/` test. It's not super straightforward, but `ci/test-in-cluster.sh` starts a CI pointing at a test repo. This eventually calls `ci/test/test-ci.py` which triggers builds and deploys on the test repo. Those builds and deploys should have the expected index file.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4551#issuecomment-431458932:83,test,test,83,https://hail.is,https://github.com/hail-is/hail/pull/4551#issuecomment-431458932,7,['test'],"['test', 'test-ci', 'test-in-cluster']"
Testability,"The dependencies are used in `project_changed.py`. That's how I broke the CI before -- I changed batch, but the CI tests weren't run because we had no notion of project dependency.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5593#issuecomment-473324852:115,test,tests,115,https://hail.is,https://github.com/hail-is/hail/pull/5593#issuecomment-473324852,1,['test'],['tests']
Testability,"The deploy service account was unnecessarily privileged and not actively used. AFAICT, it's used only by this make file to stand up a new hail vdc from scratch. I removed the deploy service account and modified this makefile to create it, use it, and then destroy it when finished. If this is all bitrot, then I suppose it doesn't matter. I tested that these new and modified targets work as expected. What did you use to set up Konrad's project?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8178#issuecomment-599784846:341,test,tested,341,https://hail.is,https://github.com/hail-is/hail/pull/8178#issuecomment-599784846,1,['test'],['tested']
Testability,"The difference is consistent with numerical instability of inversion of singular fisher matrix, with different results under different natives. I've changed the test on constant dosage to:; ```; def assertConsistentWithConstant(converged: Annotation, pval: Annotation) {; assert(!converged.asInstanceOf[Boolean] || pval.asInstanceOf[Double].isNaN); ```; This assures that this difference does not engender deviant scientific results.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1703#issuecomment-296328487:161,test,test,161,https://hail.is,https://github.com/hail-is/hail/pull/1703#issuecomment-296328487,3,"['assert', 'test']","['assert', 'assertConsistentWithConstant', 'test']"
Testability,The end result of these experiments was none of these changes improved test times.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13179#issuecomment-1593149053:71,test,test,71,https://hail.is,https://github.com/hail-is/hail/pull/13179#issuecomment-1593149053,1,['test'],['test']
Testability,"The error about a log file is an unfortunate red herring, the main container appears to fail. `/vep/vep` is returning exit code -9 but providing no further debug information. We need to assess who is generating the -9. Based on the contents of `docker/hailgenetics/vep/grch38/95/Dockerfile`, `/vep/vep` appears to be; ```; #!/bin/bash; export PERL5LIB=$PERL5LIB:/vep/ensembl-vep/Plugins/; exec perl /vep/ensembl-vep/vep \""\$@\""""; ```; It seems likely that `/vep/esnembl-vep/vep` is returning exit code -9. We need to determine under what conditions that happens. Main container output:; ```; Smartmatch is experimental at /vep/ensembl-vep/Plugins/de_novo_donor.pl line 175.; Smartmatch is experimental at /vep/ensembl-vep/Plugins/de_novo_donor.pl line 214.; Smartmatch is experimental at /vep/ensembl-vep/Plugins/splice_site_scan.pl line 191.; Smartmatch is experimental at /vep/ensembl-vep/Plugins/splice_site_scan.pl line 194.; Smartmatch is experimental at /vep/ensembl-vep/Plugins/splice_site_scan.pl line 238.; Smartmatch is experimental at /vep/ensembl-vep/Plugins/splice_site_scan.pl line 241. Traceback (most recent call last):; File ""/hail-vep/vep.py"", line 218, in <module>; main(action, consequence, tolerate_parse_error, block_size, input_file, output_file, part_id, vep_cmd); File ""/hail-vep/vep.py"", line 199, in main; results = run_vep(vep_cmd, input_file, block_size, consequence, tolerate_parse_error, part_id, os.environ); File ""/hail-vep/vep.py"", line 127, in run_vep; raise ValueError(f'VEP command {vep_cmd} failed with non-zero exit status {proc.returncode}\n'; ValueError: VEP command ['/vep/vep', '--input_file', '/io/input', '--format', 'vcf', '--json', '--everything', '--allele_number', '--no_stats', '--cache', '--offline', '--minimal', '--assembly', 'GRCh38', '--fasta', '/vep_data//homo_sapiens/95_GRCh38/Homo_sapiens.GRCh38.dna.toplevel.fa.gz', '--plugin', 'LoF,loftee_path:/vep/ensembl-vep/Plugins/,gerp_bigwig:/vep_data//gerp_conservation_scores.homo_sapiens.GRCh38.bw",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13989#issuecomment-1802287224:18,log,log,18,https://hail.is,https://github.com/hail-is/hail/issues/13989#issuecomment-1802287224,1,['log'],['log']
Testability,The exact issue here is double counting some lines in the BGzip tests in particular.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9304#issuecomment-676837945:64,test,tests,64,https://hail.is,https://github.com/hail-is/hail/pull/9304#issuecomment-676837945,1,['test'],['tests']
Testability,The failure is due to the new memory requirements. Apparently the python script uses a lot more memory than I thought. Trying to find the magic number now. The tests were passing before the memory limits.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7593#issuecomment-558337832:160,test,tests,160,https://hail.is,https://github.com/hail-is/hail/pull/7593#issuecomment-558337832,1,['test'],['tests']
Testability,"The final failures were doctests that called show on tables with duplicated keys, where the order of the duplicate rows, which we don't guarantee, were different. I disabled those tests. Also addressed comments, should be good to go.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5027#issuecomment-451238849:180,test,tests,180,https://hail.is,https://github.com/hail-is/hail/pull/5027#issuecomment-451238849,1,['test'],['tests']
Testability,"The flags PR fixed the test failures!!! I think the last thing is being in agreement on what tests are needed. As painful as it is, I think we should spin up a dataproc cluster, run VEP and save the output into the test_resources folder and use that for the test. Before I do that, is there anything else I need to add?. The last thing for this PR is to modify the cloud run functions for ACR cleanup to cleanup the vep images generated by CI. We can make a follow up PR for Azure once we've transferred the data to the public storage source.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12428#issuecomment-1446698641:23,test,test,23,https://hail.is,https://github.com/hail-is/hail/pull/12428#issuecomment-1446698641,3,['test'],"['test', 'tests']"
Testability,"The flaky test failure can be seen here: https://ci.hail.is/batches/6627486/jobs/105; ```; During handling of the above exception, another exception occurred:. @skip_unless_service_backend(); def test_tiny_driver_has_tiny_memory():; try:; hl.utils.range_table(100_000_000, 50).to_pandas(); except Exception as exc:; # Sometimes the JVM properly OOMs, sometimes it just dies.; > assert (; 'java.lang.OutOfMemoryError: Java heap space' in exc.args[0] or; 'batch.worker.jvm_entryway_protocol.EndOfStream' in exc.args[0]; ); E assert ('java.lang.OutOfMemoryError: Java heap space' in {'batch_status': {'attributes': {'name': 'test_tiny_driver_has_tiny_memory'}, 'billing_project': 'test', 'closed': True, 'complete': True, ...}, 'job_status': {'attributes': {'name': 'driver'}, 'batch_id': 6627669, 'billing_project': 'test', 'cost': 0.0015413897092729028, ...}, 'log': {'main': ""2022-11-15 20:30:18.004 Tokens: INFO: tokens found for namespaces {default}\n2022-11-15 20:30:18.004 tls: INFO: ssl config file found at /batch/2bbb233e4e3c4a96bbffb515019daac9/secrets/ssl-config/ssl-config.json\n2022-11-15 20:30:18.006 GoogleStorageFS$: INFO: Initializing google storage client from service account key\n2022-11-15 20:30:18.114 root: INFO: RegionPool: initialized for thread 8: pool-1-thread-1\n2022-11-15 20:30:18.114 ServiceBackend$: INFO: executing: cEPZ5IV9gUtSnCiAiHXOPs None\n2022-11-15 20:30:18.127 root: INFO: optimize optimize: darrayLowerer, initial IR: before: IR size 17: \n(Let __rng_state\n (RNGStateLiteral (0 0 0 0))\n (MakeTuple (0)\n (TableAggregate\n (TableMapRows\n (TableOrderBy (Aidx) (TableRange 100000000 50))\n (InsertFields\n (SelectFields () (SelectFields (idx) (Ref row)))\n None\n (idx (GetField idx (Ref row)))))\n (MakeStruct\n (idx\n (ApplyAggOp Collect\n ()\n ((GetField idx (Ref row)))))))))\n2022-11-15 20:30:18.146 root: INFO: optimize optimize: darrayLowerer, initial IR: after: IR size 8:\n(MakeTuple (0)\n (TableAggregate\n (TableOrderBy (Aidx) (TableRange 100000000 5",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:10,test,test,10,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,6,"['assert', 'log', 'test']","['assert', 'log', 'test']"
Testability,"The git history is an append only log. The changelog is a human-generated, human-readable digest. I'm fine with editing it to fix problems like this.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5960#issuecomment-487214751:34,log,log,34,https://hail.is,https://github.com/hail-is/hail/pull/5960#issuecomment-487214751,1,['log'],['log']
Testability,"The handling for covariates in the top of linreg/logreg was broken. I updated, can you double-check?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3477#issuecomment-386075467:49,log,logreg,49,https://hail.is,https://github.com/hail-is/hail/pull/3477#issuecomment-386075467,1,['log'],['logreg']
Testability,The instructions for the code to run in R worked to get the pc relate test passing. I didn't get an issue with ncdf or netcdf.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3281#issuecomment-379060977:70,test,test,70,https://hail.is,https://github.com/hail-is/hail/pull/3281#issuecomment-379060977,1,['test'],['test']
Testability,"The integration test is failing. Otherwise, looks good.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1572#issuecomment-287900602:16,test,test,16,https://hail.is,https://github.com/hail-is/hail/pull/1572#issuecomment-287900602,1,['test'],['test']
Testability,"The issue appears to be something in the way spark is configured in this branch. I cannot broadcast successfully new SerilaizableHadoopConfiguration(sc.hadoopConfiguration, inside of LoadVCF. Meaning it works, but the configuration is null. Manually serializing in a test works fine. No issues on master. Minimal example:. ```scala; // LoadVCF, using master's SerializableHadoopConfiguration class ; private val fileInfo: Array[Array[String]] = externalSampleIds.getOrElse {; val shConf = new SerializableHadoopConfiguration(sc.hadoopConfiguration); val localBcFsConf = sc.broadcast(shConf); var results: Array[Array[String]] = Array(); var stuff = sc.parallelize(files, files.length).map { file =>; sc.hadoopConfiguration; }.collect(). results; }; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6083#issuecomment-496946496:267,test,test,267,https://hail.is,https://github.com/hail-is/hail/pull/6083#issuecomment-496946496,1,['test'],['test']
Testability,"The java process that gets created in htop while benchmarks are running goes over 100% CPU usage. Seen it go up to 300%. So yeah, seems like veclib (Apple BLAS) is probably multithreading (or Spark is parallelizing stuff)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8050#issuecomment-583409119:49,benchmark,benchmarks,49,https://hail.is,https://github.com/hail-is/hail/pull/8050#issuecomment-583409119,1,['benchmark'],['benchmarks']
Testability,The log shows cloud tools 1.1.16 was using 1.2-deb9 for the cluster image and I can confirm cloud tools 1.2.0 does as well.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4240#issuecomment-419495529:4,log,log,4,https://hail.is,https://github.com/hail-is/hail/pull/4240#issuecomment-419495529,1,['log'],['log']
Testability,The logs you're seeing are the cloud audit logs.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10432#issuecomment-833644335:4,log,logs,4,https://hail.is,https://github.com/hail-is/hail/pull/10432#issuecomment-833644335,2,['log'],['logs']
Testability,"The major changes are:; - Linear, logistic, linear mixed regression all return tables.; - The regression methods are found on RegressionModel.regress_rows; ; To do:; - This doesn't address the UKBB parallel regression concern. To fix that, I propose adding the ability for LinearRegressionMode.regress_rows to take a list of lists, each list of which is to be grouped for missingness separately. This is a back-compatible change from this model. I'd also propose that we add the ability for logistic and linear mixed models to take lists of phenotypes.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4535#issuecomment-429153844:34,log,logistic,34,https://hail.is,https://github.com/hail-is/hail/pull/4535#issuecomment-429153844,2,['log'],['logistic']
Testability,"The movie lens dataset (used by some of the tutorials, not hosted by us) failed to download. It happens sometimes. I pushed an empty commit to have it retest. In general, if a PR looks good but the tests are failing, I approve. The robots will handle the tests, so I don't have to. If fixing a bug requires significant changes, or changes not in the spirit of the original PR, as an author, I dismiss the review and request another one.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5624#issuecomment-474167431:198,test,tests,198,https://hail.is,https://github.com/hail-is/hail/pull/5624#issuecomment-474167431,2,['test'],['tests']
Testability,"The negative 1 doesn't seem right, but we should probably give a warning or something when a user does this. I could log a warning telling user how many points were 0 and so weren't plotted?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11268#issuecomment-1022543883:117,log,log,117,https://hail.is,https://github.com/hail-is/hail/pull/11268#issuecomment-1022543883,1,['log'],['log']
Testability,"The new tar file is now in all VEP replicates for dataproc. The only change is it uses the indexed cache files and the tar file has the word ""_indexed"" in it. Otherwise, it should have the same contents / file structure as the non-indexed tar file that is there currently. I tested this as best as I could, but it would be prudent to give ourselves time when releasing this in case there is a problem in the release script.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14071#issuecomment-1881444531:275,test,tested,275,https://hail.is,https://github.com/hail-is/hail/pull/14071#issuecomment-1881444531,1,['test'],['tested']
Testability,"The nodes only have 30Gi total. If I make it exactly 30 I imagine there will be issues since the nodes also have to run docker and logging stuff and whatnot, right?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6774#issuecomment-518771521:131,log,logging,131,https://hail.is,https://github.com/hail-is/hail/pull/6774#issuecomment-518771521,1,['log'],['logging']
Testability,"The one possible issue with this is if you try to run python from the /test/ dir, you'll import the test module instead. But that seems minor",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4013#issuecomment-408639182:71,test,test,71,https://hail.is,https://github.com/hail-is/hail/pull/4013#issuecomment-408639182,2,['test'],['test']
Testability,The one test failure was a transient blob Not Found on Azure.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12530#issuecomment-1372795141:8,test,test,8,https://hail.is,https://github.com/hail-is/hail/pull/12530#issuecomment-1372795141,1,['test'],['test']
Testability,"The only place outside of tests where `combine_gvcfs` is called is `drive_combiner`. And no user would have had the opportunity to use the old parameter, which was a workaround for a bug in GATK that's no longer relevant with the way the combiner output is used by downstream. Also this is still _highly experimental_ functionality.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7247#issuecomment-540747610:26,test,tests,26,https://hail.is,https://github.com/hail-is/hail/pull/7247#issuecomment-540747610,1,['test'],['tests']
Testability,"The original report was about `gnomad.exomes.r2.1.1.sites.liftover_grch38.vcf.bgz`. That's the gnomad v2.1.1 GRCh38 liftover sites table. See [this section of the gnomAD downloads](https://gnomad.broadinstitute.org/downloads#v2-liftover). In particular it is the ""All chromosomes VCF"". That's 85GiB, so I don't want to download it. I believe the chr21 VCF should have just as many row, column, and entry fields, so I downloaded that and tested Hail's ability to import and write it. ```bash; gsutil -m cp \; gs://gcp-public-data--gnomad/release/2.1.1/liftover_grch38/vcf/exomes/gnomad.exomes.r2.1.1.sites.21.liftover_grch38.vcf.bgz \; .; ```; ```python3; import hail as hl; recode = {f""{i}"":f""chr{i}"" for i in (list(range(1, 23)) + ['X', 'Y'])}; mt = hl.import_vcf('gnomad.exomes.r2.1.1.sites.21.liftover_grch38.vcf.bgz', reference_genome='GRCh38', contig_recoding=recode); mt.write('gnomad.mt', overwrite = True); ```. With Hail 0.2.108-fc03e9d5dc08 it worked fine. It also worked fine on a recent 0.2.120 development version I had installed. Next I tried running on the first few thousand lines of the full sites table:. ```bash; curl \; https://storage.googleapis.com/gcp-public-data--gnomad/release/2.1.1/liftover_grch38/vcf/exomes/gnomad.exomes.r2.1.1.sites.21.liftover_grch38.vcf.bgz \; | bgzip -d -c\; | head -n 10000 \; | bgzip -c \; > /tmp/head-sites.vcf.bgz; ```; ```python3; import hail as hl; recode = {f""{i}"":f""chr{i}"" for i in (list(range(1, 23)) + ['X', 'Y'])}; mt = hl.import_vcf('/tmp/head-sites.vcf.bgz', reference_genome='GRCh38', contig_recoding=recode); mt.write('gnomad.mt', overwrite = True); ```. This also succeeded with Hail 0.2.108",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13249#issuecomment-1703341525:437,test,tested,437,https://hail.is,https://github.com/hail-is/hail/issues/13249#issuecomment-1703341525,1,['test'],['tested']
Testability,"The other PR didn't pass, but that was because of other issues with the database. Service backend tests passed.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12246#issuecomment-1262787300:98,test,tests,98,https://hail.is,https://github.com/hail-is/hail/pull/12246#issuecomment-1262787300,1,['test'],['tests']
Testability,"The point of this PR was to just build up a shell we can add to, not to fully move the tests over yet. There's more functionality we have to add to Hail2 first.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2580#issuecomment-352192050:87,test,tests,87,https://hail.is,https://github.com/hail-is/hail/pull/2580#issuecomment-352192050,1,['test'],['tests']
Testability,"The problem I saw was this:. ToStream's invariant is that its children must be TIterable. Given this invariant, in boundary it is not safe to call ToArray on streamified when streamified.isInstanceOf[TStream] and node.typ.isInstanceOf[TArray], because this will miss cases (potentially) when node is a different TIterable, and likewise it is not safe to call ToArray on streamified when node.typ.isInstanceOf[TIterable], because we may inadvertently cast a non-array TIterable to TArray, and thereby break boundary's type invariance. So everywhere that we add a ToStream, we need to perform a check on the child: if it's a non-TArray TIterable, return it, else wrap in ToArray, unless we can be sure we never perform said wrap on a TIterable when streamify is called from boundary. . In the latest commit, I simplified the toStream code, and improved the type check to check not TContainer, but (TIterable && !TStream). This is more precise that checking TContainer alone. That being said I haven't created a convincing test yet (though it's trivially easy to make *a* test: pass a ToStream wrapping a node with typ TDict to boundary, with the old check on boundary, and a TIterable check-before-wrap-in-ToStream in the base case of streamify). However, I don't think we can avoid the condition you don't like in `boundary` without changing ToStream's child-type invariant to TArray.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8063#issuecomment-586553403:1020,test,test,1020,https://hail.is,https://github.com/hail-is/hail/pull/8063#issuecomment-586553403,2,['test'],['test']
Testability,"The python tests picked up a bunch of things in OrderedRVD where the type gets serialized within a map[Partitions]. I'm leaving the type Serializable for now, but I know at least @tpoterba was talking about wanting to make that non-serializable, too",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3213#issuecomment-375765956:11,test,tests,11,https://hail.is,https://github.com/hail-is/hail/pull/3213#issuecomment-375765956,1,['test'],['tests']
Testability,"The query method is present on the generic `Type`, and overridden by `TStruct`. If you query ""info"", ""AC"", ""Test"", then you'll go to the struct implementation first, correctly identify the field ""info"", pass [""AC"", ""Test""] to that field. That field is also a struct, so you go to the struct implementation again, correctly identify ""AC"", and pass [""Test""] to that field. However, now you're querying ""Test"" on a `TArray`: this has to be an error. We catch AnnotationPathException in VSM.query. This fix is only meant to address a persistent compiler bug",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1007#issuecomment-257303972:108,Test,Test,108,https://hail.is,https://github.com/hail-is/hail/pull/1007#issuecomment-257303972,4,['Test'],['Test']
Testability,"The reason that your original patch fixed the test you created is really the collision of unintended behaviors:. 1. the rebuilt MTs in the MatrixUnionRows in split_multi have different types because of the entry position; 2. the call to `upcast` for the rows was not checking that you were upcasting to a supertype, and was reordering struct fields. Adding an assertion to upcast caused failures elsewhere. I think the attack plan should be as follows:. 1. Add this assertion, and fix the failures caused by it (LD prune tests?); 2. Add the split_multi test, and fix the type violations created during PruneDeadFields rebuild. To make this easier, you can add a bunch of assertions about the type of the rebuilt MatrixIR nodes, which should cause debug-friendly errors.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4585#issuecomment-435486474:46,test,test,46,https://hail.is,https://github.com/hail-is/hail/pull/4585#issuecomment-435486474,6,"['assert', 'test']","['assertion', 'assertions', 'test', 'tests']"
Testability,"The reason you didn't see those others fixed before is that I had mistakenly not committed all changes (that's why the test failed too). I am using Array.groupBy, repushed, back to you.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/68#issuecomment-156268875:119,test,test,119,https://hail.is,https://github.com/hail-is/hail/pull/68#issuecomment-156268875,1,['test'],['test']
Testability,"The rebase was a little messy. I got it compiling, but there will probably be some minor issues with the tests. It was passing before, so I expect the overall code to be sound.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8371#issuecomment-607822257:105,test,tests,105,https://hail.is,https://github.com/hail-is/hail/pull/8371#issuecomment-607822257,1,['test'],['tests']
Testability,"The results follow. We seem to get better bandwidth from GCP VMs and/or out of S3. In either case, we aggregate bandwidth substantially decreases at 40k files of size ~100kB. Theoretical egress from the GCP VM I used is 2 GB/s. Ingress is ~3 GB/s. S3 claims as much as ~12 GB/s of aggregate bandwidth. We seem to have room for improvement, but this seems good enough for now. # On AWS, GCS -> S3. | Files | Bytes | Time | Rate |; | ----- | ----- | ---- | ---- |; | 1 | 5.4 GB | 34 seconds | 154.5 MB/s |; | 1 | 42.9 GB | 4 minutes | 161.6 MB/s |; | 200 | 5.4 GB | 35 seconds | 151.1 MB/s |; | 40000 | 5.4 GB | 4 minutes | 22.0 MB/s |. # On GCP, S3 -> GCS. | Files | Bytes | Time | Rate |; | ----- | ----- | ---- | ---- |; | 1 | 5.4 GB | 17 seconds | 304.2 MB/s |; | 1 | 42.9 GB | 3 minutes | 235.5 MB/s |; | 200 | 5.4 GB | 20 seconds | 267.8 MB/s |; | 40000 | 5.4 GB | 6 minutes | 13.3 MB/s |. # machine parsable form; ```; [{'config': 'one',; 'from': 'gs://1-day/tmp/test-copy/dking-benchmark/one',; 'times': [34.76],; 'to': 's3://hail-test-dy5rg/tmp/target/dking-benchmark/one'},; {'config': 'some',; 'from': 'gs://1-day/tmp/test-copy/dking-benchmark/some',; 'times': [35.527],; 'to': 's3://hail-test-dy5rg/tmp/target/dking-benchmark/some'},; {'config': 'many',; 'from': 'gs://1-day/tmp/test-copy/dking-benchmark/many',; 'times': [244.154],; 'to': 's3://hail-test-dy5rg/tmp/target/dking-benchmark/many'},; {'config': 'huge',; 'from': 'gs://1-day/tmp/test-copy/dking-benchmark/huge',; 'times': [265.719],; 'to': 's3://hail-test-dy5rg/tmp/target/dking-benchmark/huge'},; {'config': 'one',; 'from': 's3://hail-test-dy5rg/tmp/test-copy/dking-benchmark/one',; 'times': [17.65],; 'to': 'gs://1-day/tmp/test-copy/target/dking-benchmark/one'},; {'config': 'some',; 'from': 's3://hail-test-dy5rg/tmp/test-copy/dking-benchmark/some',; 'times': [20.048],; 'to': 'gs://1-day/tmp/test-copy/target/dking-benchmark/some'},; {'config': 'many',; 'from': 's3://hail-test-dy5rg/tmp/test-copy/dking-benchmark/many',; 't",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10752#issuecomment-897651697:968,test,test-copy,968,https://hail.is,https://github.com/hail-is/hail/pull/10752#issuecomment-897651697,2,"['benchmark', 'test']","['benchmark', 'test-copy']"
Testability,"The security issues with sharing CI pages is a bit frustrating for external committers like yourself. I've picked up this PR here: https://github.com/hail-is/hail/pull/10220 and I'll get it to tests passing. We'll keep working towards making the CI pages open to the public. Once that PR is done, I'll have you push the commits to this branch and get it merged.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10085#issuecomment-806046631:193,test,tests,193,https://hail.is,https://github.com/hail-is/hail/pull/10085#issuecomment-806046631,1,['test'],['tests']
Testability,The seed for tests is set in a pytest fixture [here](https://github.com/hail-is/hail/blob/567acfd7e2b42e5074ea46a24df75ce168b3de16/hail/python/test/hail/conftest.py#L39). Is there some reason that would work differently in the service backend tests?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12588#issuecomment-1397413095:13,test,tests,13,https://hail.is,https://github.com/hail-is/hail/pull/12588#issuecomment-1397413095,3,['test'],"['test', 'tests']"
Testability,"The simpler version is slower, but in the python test, not by a large amount (previous version was, in this test 23.8s or so, although Scala benches may show a larger difference). {""config"": {""cores"": 1, ""version"": ""0.2.28-7888aeb97570"", ""timestamp"": ""2019-12-04 02:07:13.182303"", ""system"": ""darwin""}, ""benchmarks"": [{""name"": ""make_ndarray_bench"", ""failed"": false, ""timed_out"": false, ""times"": [28.613776744999996, 28.361242108, 28.481231283]}]}. So 20% slower. I would prefer to use longs, because it doesn't feel right to me to leave performance on the table, however I'm ok with this tradeoff if you find it aligns with your goals better. ; - Regarding longs, to deal with alignment: right now we assume we're int aligned. To read longs, could we read the first 4 bytes as an int, then switch to longs, then do bits for the remaining length. Should be as terse. edit: I propose to put the unstaged version for a later time, but can do now as well.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7646#issuecomment-561510056:49,test,test,49,https://hail.is,https://github.com/hail-is/hail/pull/7646#issuecomment-561510056,3,"['benchmark', 'test']","['benchmarks', 'test']"
Testability,"The test I changed catches this now. I think that's sufficient, we shouldn't need a new test if an existing test can be improved to have better coverage.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8941#issuecomment-641617946:4,test,test,4,https://hail.is,https://github.com/hail-is/hail/pull/8941#issuecomment-641617946,3,['test'],['test']
Testability,"The test `testMatrixUnionRowsMemo` is still failing with this change. The error that I am seeing is:; ```; java.util.NoSuchElementException: key not found: RefEquality(MatrixMapRows(MatrixMapRows(MatrixLiteral(...),InsertFields(SelectFields(Ref(va,struct{rk: int32, r2: struct{x: int32}, r3: array<struct{rr: int32}>, `the entries! [877f12a8827e18f61222c6c8c5fb04a8]`: array<struct{e1: float64, e2: float64}>}),WrappedArray(rk, r2, r3)),List((the entries! [877f12a8827e18f61222c6c8c5fb04a8],GetField(Ref(va,struct{rk: int32, r2: struct{x: int32}, r3: array<struct{rr: int32}>, `the entries! [877f12a8827e18f61222c6c8c5fb04a8]`: array<struct{e1: float64, e2: float64}>}),the entries! [877f12a8827e18f61222c6c8c5fb04a8]))))),InsertFields(SelectFields(Ref(va,struct{rk: int32, r2: struct{x: int32}, r3: array<struct{rr: int32}>, `the entries! [877f12a8827e18f61222c6c8c5fb04a8]`: array<struct{e1: float64, e2: float64}>}),WrappedArray(rk, r2, r3)),List((the entries! [877f12a8827e18f61222c6c8c5fb04a8],GetField(Ref(va,struct{rk: int32, r2: struct{x: int32}, r3: array<struct{rr: int32}>, `the entries! [877f12a8827e18f61222c6c8c5fb04a8]`: array<struct{e1: float64, e2: float64}>}),the entries! [877f12a8827e18f61222c6c8c5fb04a8])))))); 	at scala.collection.MapLike$class.default(MapLike.scala:228); 	at scala.collection.AbstractMap.default(Map.scala:59); 	at scala.collection.mutable.HashMap.apply(HashMap.scala:65); 	at is.hail.expr.ir.Memo.lookup(RefEquality.scala:32); 	at is.hail.expr.ir.PruneSuite$$anonfun$checkMemo$1.apply(PruneSuite.scala:47); 	at is.hail.expr.ir.PruneSuite$$anonfun$checkMemo$1.apply(PruneSuite.scala:46); 	at scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59); 	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:48); 	at is.hail.expr.ir.PruneSuite.checkMemo(PruneSuite.scala:46); 	at is.hail.expr.ir.PruneSuite.testMatrixUnionRowsMemo(PruneSuite.scala:412); ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4891#issuecomment-444264952:4,test,test,4,https://hail.is,https://github.com/hail-is/hail/pull/4891#issuecomment-444264952,3,['test'],"['test', 'testMatrixUnionRowsMemo']"
Testability,The test batch needs a test service account. I don't think a test instance of batch should be able to write to a production bucket.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5866#issuecomment-485465773:4,test,test,4,https://hail.is,https://github.com/hail-is/hail/pull/5866#issuecomment-485465773,3,['test'],['test']
Testability,"The test failure here is spurious, happening because batch is going through a transition / upgrade and things are a little broken right now. Will make sure this merges when that's resolved.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10671#issuecomment-881473556:4,test,test,4,https://hail.is,https://github.com/hail-is/hail/pull/10671#issuecomment-881473556,1,['test'],['test']
Testability,The test failures were unrelated to the proposed changes.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12365#issuecomment-1300509857:4,test,test,4,https://hail.is,https://github.com/hail-is/hail/pull/12365#issuecomment-1300509857,1,['test'],['test']
Testability,The test for `test_callback` assumes the job state should be complete versus created.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5861#issuecomment-482595342:4,test,test,4,https://hail.is,https://github.com/hail-is/hail/pull/5861#issuecomment-482595342,1,['test'],['test']
Testability,The test is broken.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2812#issuecomment-361300529:4,test,test,4,https://hail.is,https://github.com/hail-is/hail/pull/2812#issuecomment-361300529,1,['test'],['test']
Testability,"The test is fixed, we don't use encryption to talk to the internal gateway. I had to fix https.client_session to handle the gce case.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9862#issuecomment-758202690:4,test,test,4,https://hail.is,https://github.com/hail-is/hail/pull/9862#issuecomment-758202690,1,['test'],['test']
Testability,"The test migration all seems fine with old batches, in progress batches, and new batches. Once you are ok with this, I'll make the PR to cleanup the database from the migration helpers in the extra triggers so that's ready to go.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12365#issuecomment-1343010078:4,test,test,4,https://hail.is,https://github.com/hail-is/hail/pull/12365#issuecomment-1343010078,1,['test'],['test']
Testability,"The test migration worked! There's still two more PRs that need to go in before this one, but otherwise it's all set.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11990#issuecomment-1195964912:4,test,test,4,https://hail.is,https://github.com/hail-is/hail/pull/11990#issuecomment-1195964912,1,['test'],['test']
Testability,The test that failed is this one:; Gradle suite > Gradle test > org.broadinstitute.hail.methods.RenameSamplesSuite.test FAILED; org.broadinstitute.hail.FatalException at RenameSamplesSuite.scala:59. Accepting the changes.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/291#issuecomment-210554186:4,test,test,4,https://hail.is,https://github.com/hail-is/hail/pull/291#issuecomment-210554186,3,['test'],['test']
Testability,"The test that lists batches timed out. The main problem is the limit in the aioclient used by the test_batch tests was passing a string rather than an integer. I assumed downstream the function was passing an integer. Therefore, we were doing this:. ```; batch_id < ""137""; ```. and not `batch_id < 137`. So the query was running forever and scanning all batches from the `test` user. I also was missing a tag annotation on the queries, but that was not causing the timeout.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13237#issuecomment-1631270046:4,test,test,4,https://hail.is,https://github.com/hail-is/hail/pull/13237#issuecomment-1631270046,3,['test'],"['test', 'tests']"
Testability,"The tests are being rerun, they were failing a second ago. @danking it's known that we want to be able to view previous test runs in ci exactly for cases like this.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4763#issuecomment-441718711:4,test,tests,4,https://hail.is,https://github.com/hail-is/hail/pull/4763#issuecomment-441718711,2,['test'],"['test', 'tests']"
Testability,The tests are failing for unrelated reasons. I'll retry once approved.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12350#issuecomment-1284493659:4,test,tests,4,https://hail.is,https://github.com/hail-is/hail/pull/12350#issuecomment-1284493659,1,['test'],['tests']
Testability,The tests are failing. I'll look at it again once the tests are passing.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3730#issuecomment-396303716:4,test,tests,4,https://hail.is,https://github.com/hail-is/hail/pull/3730#issuecomment-396303716,2,['test'],['tests']
Testability,The tests are going to fail the local backend for now because they use methods like `from_numpy` which aren't lowered yet.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10398#issuecomment-828788858:4,test,tests,4,https://hail.is,https://github.com/hail-is/hail/pull/10398#issuecomment-828788858,1,['test'],['tests']
Testability,The tests are infinitely waiting. Do you have any suggestions for debugging this? https://ci.hail.is/watched_branches/0/pr/11471,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11471#issuecomment-1059415709:4,test,tests,4,https://hail.is,https://github.com/hail-is/hail/pull/11471#issuecomment-1059415709,1,['test'],['tests']
Testability,The tests are now passing. The thing that failed is `deploy_apiserver`. https://ci2.hail.is/jobs/14871/log,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6015#issuecomment-490090711:4,test,tests,4,https://hail.is,https://github.com/hail-is/hail/pull/6015#issuecomment-490090711,2,"['log', 'test']","['log', 'tests']"
Testability,The tests are passing. Failures are from building images.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10497#issuecomment-844462253:4,test,tests,4,https://hail.is,https://github.com/hail-is/hail/pull/10497#issuecomment-844462253,1,['test'],['tests']
Testability,The tests are passing. The error on Azure was cleaning up the base image timed out.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12530#issuecomment-1443661758:4,test,tests,4,https://hail.is,https://github.com/hail-is/hail/pull/12530#issuecomment-1443661758,1,['test'],['tests']
Testability,The tests failed spectacularly for what I assume was because the database was overloaded. Will retry if you have no objections to the PR as is.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11874#issuecomment-1144998159:4,test,tests,4,https://hail.is,https://github.com/hail-is/hail/pull/11874#issuecomment-1144998159,1,['test'],['tests']
Testability,The tests failed. Can't tell if it's from this commit. Can you double check everything is good or retry?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12380#issuecomment-1297629123:4,test,tests,4,https://hail.is,https://github.com/hail-is/hail/pull/12380#issuecomment-1297629123,1,['test'],['tests']
Testability,"The tests should be passing. I have some FIXMEs to clean up and need to rebase, but the code is basically there. You can take a look when you have a chance.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1110#issuecomment-262096177:4,test,tests,4,https://hail.is,https://github.com/hail-is/hail/pull/1110#issuecomment-262096177,1,['test'],['tests']
Testability,The tests will pass now. I had to disable output checking in the doctests because `Batch.run` prints batch ids and urls which would be annoying to maintain.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9035#issuecomment-661269154:4,test,tests,4,https://hail.is,https://github.com/hail-is/hail/pull/9035#issuecomment-661269154,1,['test'],['tests']
Testability,"The unusual output in the log seems to be due to a k8s bug caused by getting the logs of a deleting pod. https://github.com/kubernetes/kubernetes/issues/59296. This does not explain why the job was reported to CI as a success. CI will only accept exit_code == 0 as a success, so somehow a pod was set to exit_code 0 but was also being deleted and so didn't have a log.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4685#issuecomment-451511775:26,log,log,26,https://hail.is,https://github.com/hail-is/hail/issues/4685#issuecomment-451511775,3,['log'],"['log', 'logs']"
Testability,The value of my minimum R test is dubious. The bigger indicator of a problem will that the test will OOM or take a very long period of time. Perhaps there's a better test of linearity? Or maybe I need a lot more points to see non-linearity.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/536#issuecomment-238384250:26,test,test,26,https://hail.is,https://github.com/hail-is/hail/pull/536#issuecomment-238384250,3,['test'],['test']
Testability,The xfail is wrong because these tests pass in default where we use 16 core machines. Something about disk and 8 core machines makes standards cheaper than highcpu. We skipped them in: https://github.com/hail-is/hail/pull/12979,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12958#issuecomment-1533928857:33,test,tests,33,https://hail.is,https://github.com/hail-is/hail/issues/12958#issuecomment-1533928857,1,['test'],['tests']
Testability,Then tests need to check if pandas is present then.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1091#issuecomment-260490870:5,test,tests,5,https://hail.is,https://github.com/hail-is/hail/issues/1091#issuecomment-260490870,1,['test'],['tests']
Testability,"Then we should exclude them in gradle test, too. These are being run in the `test_scheduler` step of the build process.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6734#issuecomment-514912470:38,test,test,38,https://hail.is,https://github.com/hail-is/hail/pull/6734#issuecomment-514912470,1,['test'],['test']
Testability,"There are a few small cosmetic changes in here that were a result of an updated pylint, but I put those in a separate commit to hopefully make that less confusing. There are a few follow-ups after this that I want to tackle; - simplifying the images for testing query (Dockerfile.hail-build, Dockerfile.hail-base, Dockerfile.hail-run). I think these are the only things that use `base_image` so we might be able to collapse a bunch of these; - updating to python 3.8 to avoid accidentally installing that in some of our images; - trying to produce eStargz images so that buildkit can lazily pull the base image when building new images. I hope that can bring some image build times down even further by not having to localize the installed pip dependencies when making changes to our python code.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12578#issuecomment-1458470548:254,test,testing,254,https://hail.is,https://github.com/hail-is/hail/pull/12578#issuecomment-1458470548,1,['test'],['testing']
Testability,"There are already tests that sum integers, and all of them still work!",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1051#issuecomment-260983554:18,test,tests,18,https://hail.is,https://github.com/hail-is/hail/pull/1051#issuecomment-260983554,1,['test'],['tests']
Testability,"There are now three check steps:; - check_hail (in the sense of $HAIL_HOME/hail directory), which checks the hail and hailtop packages, using the base image, from the source via `make check-hail`; - check_services, using the services image, except the benchmark service, which installs addition dependencies, from the source via `make -k check-services`, `-k` forces make to check all packages, even if one fails; - check_benchmark_service, which checks benchmark as installed in that image",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9394#issuecomment-685253481:252,benchmark,benchmark,252,https://hail.is,https://github.com/hail-is/hail/pull/9394#issuecomment-685253481,2,['benchmark'],['benchmark']
Testability,There are tests for listing batches by attributes,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5959#issuecomment-488392810:10,test,tests,10,https://hail.is,https://github.com/hail-is/hail/pull/5959#issuecomment-488392810,1,['test'],['tests']
Testability,"There is a PruneDeadFields rule. The default case for rebuild should work, right?. I did forget the PruneDeadFields test. I'll add that to the checklist too.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8520#issuecomment-612108804:116,test,test,116,https://hail.is,https://github.com/hail-is/hail/pull/8520#issuecomment-612108804,1,['test'],['test']
Testability,"There is a [known issue](https://github.com/moby/moby/issues/41792) with the official Docker deb. If you uninstall docker and re-install it later, it might fail to start. The root cause is the `docker.socket` `systemd` unit failing to start because there are ""insufficient file descriptors available"". I think this is confusing verbiage. The socket's name must be `/var/run/docker.sock`. Clearly, if that filename is already in use, we cannot create a new socket at that filename. One of Google's [""Dataproc components""](https://cloud.google.com/dataproc/docs/concepts/components/overview) is Docker. I believe Google installed and then uninstalled docker in this image, thus leaving it in the broken state. For evidence of that:. <details>; <summary> find docker on a worker node of a *non-Hail* Dataproc cluster</summary>. ```; sudo find / -iname '*docker*'; ```. ```; /opt/conda/miniconda3/pkgs/dbus-1.13.6-h5008d03_3/info/recipe/patches/0004-disable-fd-limit-tests-not-supported-in-docker.patch; /opt/conda/miniconda3/pkgs/nbclassic-0.5.6-pyhb4ecaf3_1/site-packages/nbclassic/static/components/codemirror/mode/dockerfile; /opt/conda/miniconda3/pkgs/nbclassic-0.5.6-pyhb4ecaf3_1/site-packages/nbclassic/static/components/codemirror/mode/dockerfile/dockerfile.js; /opt/conda/miniconda3/pkgs/notebook-6.2.0-py38h578d9bd_0/lib/python3.8/site-packages/notebook/static/components/codemirror/mode/dockerfile; /opt/conda/miniconda3/pkgs/notebook-6.2.0-py38h578d9bd_0/lib/python3.8/site-packages/notebook/static/components/codemirror/mode/dockerfile/dockerfile.js; /opt/conda/miniconda3/lib/python3.8/site-packages/nbclassic/static/components/codemirror/mode/dockerfile; /opt/conda/miniconda3/lib/python3.8/site-packages/nbclassic/static/components/codemirror/mode/dockerfile/dockerfile.js; /opt/conda/miniconda3/lib/python3.8/site-packages/notebook/static/components/codemirror/mode/dockerfile; /opt/conda/miniconda3/lib/python3.8/site-packages/notebook/static/components/codemirror/mode/dockerfile/docker",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12936#issuecomment-1709120751:963,test,tests-not-supported-in-docker,963,https://hail.is,https://github.com/hail-is/hail/issues/12936#issuecomment-1709120751,1,['test'],['tests-not-supported-in-docker']
Testability,"There is at least one somewhat unpleasant change in the test in dataset.py: ; annotated.globalSignature().typeCheck(annotated.globalAnnotation()); fails when the java type is Long, but long no longer excists in python 3 and maps to int. I'm not sure what is going wrong there, I'll have a look on monday.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1991#issuecomment-315409653:56,test,test,56,https://hail.is,https://github.com/hail-is/hail/pull/1991#issuecomment-315409653,1,['test'],['test']
Testability,"There is no requirement to support many OSes. We only have to support two platforms: recent Linux and OSX. They have variants but should be mutually compatible. Testing on Dataproc + recent version of Ubuntu or Debian (which we do in the CI) seems fine. OSX has flags for version support, we can just pick a version (10.10, say) and build for that and beyond. As I've said before, we control what we support and there is no need to make this a burden on ourselves. > If you build your own compiler + library, then you risk becoming incompatible with other libraries. Yes, we should ship with all our C++ dependencies. You convinced me of this? Then there is no issue. BLAS is a C library, so no issue there. Right now I think that just means the compiler and the standard library. > Probably not something I could do in the limited time available. Fair. I'm happy with partial progress in in the above direction, but this seems like a step backwards and something we will want to revert soon. I'm not inclined to go in this direction. Not having access to the standard library seems problematic. > Confirmed that this prebuilt libhail.so can run tests with HAIL_ENABLE_CPP_CODEGEN=1 on a dataproc node with the default 1.2 image (debian8 and g++-4.9.2). Did you test submitting jobs to the cluster itself? This can be quite a different environment than the tests. Also, is there a plan about how users (or we) control this in the Dataproc setting? E.g. how do we submit cluster_sanity_check.py with and without C++ codegen enabled?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4422#issuecomment-424759448:161,Test,Testing,161,https://hail.is,https://github.com/hail-is/hail/pull/4422#issuecomment-424759448,4,"['Test', 'test']","['Testing', 'test', 'tests']"
Testability,There was a series of PRs that addressed most of this but there's still one issue. The cancel thread frequently logs an error.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13242#issuecomment-1773562874:112,log,logs,112,https://hail.is,https://github.com/hail-is/hail/issues/13242#issuecomment-1773562874,1,['log'],['logs']
Testability,"There was a test marked as should fail: `test_matrix_table.py::test_read_write_all_types`, but it now passes! woo!",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9917#issuecomment-767201392:12,test,test,12,https://hail.is,https://github.com/hail-is/hail/pull/9917#issuecomment-767201392,1,['test'],['test']
Testability,"There were some somewhat complicated merge conflicts in the tests, so if you could keep an eye out for mistakes there (e.g. dropped tests) that'd be awesome.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3743#issuecomment-397625683:60,test,tests,60,https://hail.is,https://github.com/hail-is/hail/pull/3743#issuecomment-397625683,2,['test'],['tests']
Testability,There's a `testArrayFold` in master already.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4014#issuecomment-425151198:11,test,testArrayFold,11,https://hail.is,https://github.com/hail-is/hail/issues/4014#issuecomment-425151198,1,['test'],['testArrayFold']
Testability,There's a bug somewhere in your code in the test suite.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13434#issuecomment-1684170208:44,test,test,44,https://hail.is,https://github.com/hail-is/hail/pull/13434#issuecomment-1684170208,1,['test'],['test']
Testability,There's a new assertion error.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3424#issuecomment-383742072:14,assert,assertion,14,https://hail.is,https://github.com/hail-is/hail/pull/3424#issuecomment-383742072,1,['assert'],['assertion']
Testability,There's a seemingly endless stream of errors hidden by not testing impute_sex...,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2952#issuecomment-369289579:59,test,testing,59,https://hail.is,https://github.com/hail-is/hail/pull/2952#issuecomment-369289579,1,['test'],['testing']
Testability,There's also a call to it in `tests/tests.py`.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2471#issuecomment-346980881:30,test,tests,30,https://hail.is,https://github.com/hail-is/hail/pull/2471#issuecomment-346980881,2,['test'],['tests']
Testability,There's an issue here with whether or not data is wrapped in a tuple. You've changed the type on a few Java tests.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11683#issuecomment-1080639721:108,test,tests,108,https://hail.is,https://github.com/hail-is/hail/pull/11683#issuecomment-1080639721,1,['test'],['tests']
Testability,There's another bug which means that test still fails and fails in ~0 seconds. I'm gonna put off fixing that bug for now because I'm not sure what to do about that test. It's currently marked as fails_service_backend.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11589#issuecomment-1072740682:37,test,test,37,https://hail.is,https://github.com/hail-is/hail/pull/11589#issuecomment-1072740682,2,['test'],['test']
Testability,"There's currently only one matching secret, it's in the test namespace, and it only has permission to write to gs://hail-ci-0-1-batch-volume-test-bucket",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5574#issuecomment-471113267:56,test,test,56,https://hail.is,https://github.com/hail-is/hail/pull/5574#issuecomment-471113267,2,['test'],"['test', 'test-bucket']"
Testability,There's no way to fix this problem other than not run those particular tests on the production server. I think that's okay.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9354#issuecomment-705127061:71,test,tests,71,https://hail.is,https://github.com/hail-is/hail/pull/9354#issuecomment-705127061,1,['test'],['tests']
Testability,"There's not a good reason, this is just how it was originally designed. Whenever a job was cancelled, it would take until the start of the next step for a container's execution to be stopped. I replaced the dependency on this in `Container` with `run_until_done_or_deleted`, but stopped short of deleting the functionality entirely because there were other parts of the worker, specifically `JVMJob` that still relied on it. Hopefully that is no longer the case after the QoB changes, but @danking would know better. We've also both lamented about how it's impossible to use timings currently inside cleanup blocks because it could accidentally re-raise a deleted error. This is a great change, I would just take extra care to test job cancellation to make sure there isn't anywhere that's still relying on this functionality.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11429#issuecomment-1054563382:727,test,test,727,https://hail.is,https://github.com/hail-is/hail/pull/11429#issuecomment-1054563382,1,['test'],['test']
Testability,There's some change to set ordering in python https://ci2.hail.is/jobs/26259/log.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6028#issuecomment-491025570:77,log,log,77,https://hail.is,https://github.com/hail-is/hail/pull/6028#issuecomment-491025570,1,['log'],['log']
Testability,There's some major test errors.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8968#issuecomment-662453343:19,test,test,19,https://hail.is,https://github.com/hail-is/hail/pull/8968#issuecomment-662453343,1,['test'],['test']
Testability,There's something fishy happening in the service backend. It keeps timing out the same three test jobs. We'll need to do a little grep+diff to figure which tests are getting started but not terminating. I suspect we'll need to either skip something or ensure that it errors early.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11345#issuecomment-1057654251:93,test,test,93,https://hail.is,https://github.com/hail-is/hail/pull/11345#issuecomment-1057654251,2,['test'],"['test', 'tests']"
Testability,There's something wrong with the environment of one of the tests.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10807#issuecomment-904859879:59,test,tests,59,https://hail.is,https://github.com/hail-is/hail/pull/10807#issuecomment-904859879,1,['test'],['tests']
