quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,filename,wiki,url,total_similar,target_keywords,target_matched_words
Testability,"D& M, const std::vector<TString>& V, MsgLogger& logger ); 938{; 939 // sanity check: matrix must be quadratic; 940 UInt_t nvar = V.size();; 941 if ((UInt_t)M.GetNcols() != nvar || (UInt_t)M.GetNrows() != nvar) {; 942 logger << kFATAL << ""<FormattedOutput> fatal error with dimensions: ""; 943 << M.GetNcols() << "" OR "" << M.GetNrows() << "" != "" << nvar << "" ==> abort"" << Endl;; 944 }; 945 ; 946 // get length of each variable, and maximum length; 947 UInt_t minL = 7;; 948 UInt_t maxL = minL;; 949 std::vector<UInt_t> vLengths;; 950 for (UInt_t ivar=0; ivar<nvar; ivar++) {; 951 vLengths.push_back(TMath::Max( (UInt_t)V[ivar].Length(), minL ));; 952 maxL = TMath::Max( vLengths.back(), maxL );; 953 }; 954 ; 955 // count column length; 956 UInt_t clen = maxL+1;; 957 for (UInt_t icol=0; icol<nvar; icol++) clen += vLengths[icol]+1;; 958 ; 959 // bar line; 960 for (UInt_t i=0; i<clen; i++) logger << ""-"";; 961 logger << Endl;; 962 ; 963 // title bar; 964 logger << setw(maxL+1) << "" "";; 965 for (UInt_t icol=0; icol<nvar; icol++) logger << setw(vLengths[icol]+1) << V[icol];; 966 logger << Endl;; 967 ; 968 // the numbers; 969 for (UInt_t irow=0; irow<nvar; irow++) {; 970 logger << setw(maxL) << V[irow] << "":"";; 971 for (UInt_t icol=0; icol<nvar; icol++) {; 972 logger << setw(vLengths[icol]+1) << TString::Format( ""%+1.3f"", M(irow,icol) );; 973 }; 974 logger << Endl;; 975 }; 976 ; 977 // bar line; 978 for (UInt_t i=0; i<clen; i++) logger << ""-"";; 979 logger << Endl;; 980}; 981 ; 982////////////////////////////////////////////////////////////////////////////////; 983/// formatted output of matrix (with labels); 984 ; 985void TMVA::Tools::FormattedOutput( const TMatrixD& M,; 986 const std::vector<TString>& vert, const std::vector<TString>& horiz,; 987 MsgLogger& logger ); 988{; 989 // sanity check: matrix must be quadratic; 990 UInt_t nvvar = vert.size();; 991 UInt_t nhvar = horiz.size();; 992 ; 993 // get length of each variable, and maximum length; 994 UInt_t minL = 7;; 995 UInt_t max",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Tools_8cxx_source.html:33254,log,logger,33254,doc/master/Tools_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Tools_8cxx_source.html,7,['log'],['logger']
Testability,"D(Int_t reqSections, Bool_t localFrame) const; Fills a static 3D buffer and returns a reference. void Contains_v(const Double_t* points, Bool_t* inside, Int_t vecsize) const; Check the inside status for each of the points in the array.; Input: Array of point coordinates + vector size; Output: Array of Booleans for the inside of each point. void ComputeNormal_v(const Double_t* points, const Double_t* dirs, Double_t* norms, Int_t vecsize); Compute the normal for an array o points so that norm.dot.dir is positive; Input: Arrays of point coordinates and directions + vector size; Output: Array of normal directions. void DistFromInside_v(const Double_t* points, const Double_t* dirs, Double_t* dists, Int_t vecsize, Double_t* step) const; Compute distance from array of input points having directions specisied by dirs. Store output in dists. void DistFromOutside_v(const Double_t* points, const Double_t* dirs, Double_t* dists, Int_t vecsize, Double_t* step) const; Compute distance from array of input points having directions specisied by dirs. Store output in dists. void Safety_v(const Double_t* points, const Bool_t* inside, Double_t* safe, Int_t vecsize) const; Compute safe distance from each of the points in the input array.; Input: Array of point coordinates, array of statuses for these points, size of the arrays; Output: Safety values. TGeoHype(); constructors. Int_t GetByteCount() const; {return 64;}. Bool_t GetPointsOnSegments(Int_t , Double_t* ) const; {return kFALSE;}. Double_t GetStIn() const; {return fStIn;}. Double_t GetStOut() const; {return fStOut;}. Bool_t HasInner() const; {return !TestShapeBit(kGeoRSeg);}. Bool_t IsCylType() const; {return kTRUE;}. » Author: Mihaela Gheata 20/11/04 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/geom:$Id$ » Last generated: 2015-03-14 16:39; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoHype.html:20716,Test,TestShapeBit,20716,root/html534/TGeoHype.html,https://root.cern,https://root.cern/root/html534/TGeoHype.html,1,['Test'],['TestShapeBit']
Testability,"D(Int_t reqSections, Bool_t localFrame) const; Fills a static 3D buffer and returns a reference. void Contains_v(const Double_t* points, Bool_t* inside, Int_t vecsize) const; Check the inside status for each of the points in the array.; Input: Array of point coordinates + vector size; Output: Array of Booleans for the inside of each point. void ComputeNormal_v(const Double_t* points, const Double_t* dirs, Double_t* norms, Int_t vecsize); Compute the normal for an array o points so that norm.dot.dir is positive; Input: Arrays of point coordinates and directions + vector size; Output: Array of normal directions. void DistFromInside_v(const Double_t* points, const Double_t* dirs, Double_t* dists, Int_t vecsize, Double_t* step) const; Compute distance from array of input points having directions specisied by dirs. Store output in dists. void DistFromOutside_v(const Double_t* points, const Double_t* dirs, Double_t* dists, Int_t vecsize, Double_t* step) const; Compute distance from array of input points having directions specisied by dirs. Store output in dists. void Safety_v(const Double_t* points, const Bool_t* inside, Double_t* safe, Int_t vecsize) const; Compute safe distance from each of the points in the input array.; Input: Array of point coordinates, array of statuses for these points, size of the arrays; Output: Safety values. TGeoHype(); constructors. Int_t GetByteCount() const; {return 64;}. Bool_t GetPointsOnSegments(Int_t , Double_t* ) const; {return kFALSE;}. Double_t GetStIn() const; {return fStIn;}. Double_t GetStOut() const; {return fStOut;}. Bool_t HasInner() const; {return !TestShapeBit(kGeoRSeg);}. Bool_t IsCylType() const; {return kTRUE;}. » Author: Mihaela Gheata 20/11/04 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/geom:$Id$ » Last generated: 2015-06-02 16:01; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGeoHype.html:22470,Test,TestShapeBit,22470,root/html604/TGeoHype.html,https://root.cern,https://root.cern/root/html604/TGeoHype.html,1,['Test'],['TestShapeBit']
Testability,"D(Int_t reqSections, Bool_t localFrame) const; Fills a static 3D buffer and returns a reference. void Contains_v(const Double_t* points, Bool_t* inside, Int_t vecsize) const; Check the inside status for each of the points in the array.; Input: Array of point coordinates + vector size; Output: Array of Booleans for the inside of each point. void ComputeNormal_v(const Double_t* points, const Double_t* dirs, Double_t* norms, Int_t vecsize); Compute the normal for an array o points so that norm.dot.dir is positive; Input: Arrays of point coordinates and directions + vector size; Output: Array of normal directions. void DistFromInside_v(const Double_t* points, const Double_t* dirs, Double_t* dists, Int_t vecsize, Double_t* step) const; Compute distance from array of input points having directions specisied by dirs. Store output in dists. void DistFromOutside_v(const Double_t* points, const Double_t* dirs, Double_t* dists, Int_t vecsize, Double_t* step) const; Compute distance from array of input points having directions specisied by dirs. Store output in dists. void Safety_v(const Double_t* points, const Bool_t* inside, Double_t* safe, Int_t vecsize) const; Compute safe distance from each of the points in the input array.; Input: Array of point coordinates, array of statuses for these points, size of the arrays; Output: Safety values. TGeoHype(); constructors. Int_t GetByteCount() const; {return 64;}. Bool_t GetPointsOnSegments(Int_t , Double_t* ) const; {return kFALSE;}. Double_t GetStIn() const; {return fStIn;}. Double_t GetStOut() const; {return fStOut;}. Bool_t HasInner() const; {return !TestShapeBit(kGeoRSeg);}. Bool_t IsCylType() const; {return kTRUE;}. » Author: Mihaela Gheata 20/11/04 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/geom:$Id$ » Last generated: 2015-06-30 15:01; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoHype.html:22470,Test,TestShapeBit,22470,root/html602/TGeoHype.html,https://root.cern,https://root.cern/root/html602/TGeoHype.html,1,['Test'],['TestShapeBit']
Testability,D.h;  Vector2D.h;  Vector2Dfwd.h;  Vector3D.h;  Vector3Dfwd.h;  Vector4D.h;  Vector4Dfwd.h;  VectorUtil.h;  ► src;  3DConversions.cxx;  3DDistances.cxx;  AxisAngle.cxx;  AxisAngleXother.cxx;  BitReproducible.cxx;  Boost.cxx;  BoostX.cxx;  BoostY.cxx;  BoostZ.cxx;  EulerAngles.cxx;  GenVector_exception.cxx;  LorentzRotation.cxx;  Plane3D.cxx;  Quaternion.cxx;  QuaternionXaxial.cxx;  Rotation3D.cxx;  Rotation3DxAxial.cxx;  RotationZYX.cxx;  Transform3D.cxx;  Translation3D.cxx;  VectorUtil.cxx;  ► test;  coordinates3D.cxx;  coordinates4D.cxx;  CoordinateTraits.h;  rotationApplication.cxx;  RotationTraits.h;  stress2D.cxx;  stress3D.cxx;  testBoost.cxx;  testGenVector.cxx;  testIterator.cxx;  testVectorIO.cxx;  Track.h;  TrackLinkDef.h;  vectorOperation.cxx;  ► mathcore;  ► inc;  ► Fit;  BasicFCN.h;  BinData.h;  BinPoint.h;  Chi2FCN.h;  DataOptions.h;  DataRange.h;  DataVector.h;  DataVectorfwd.h;  FcnAdapter.h;  FitConfig.h;  FitResult.h;  Fitter.h;  FitUtil.h;  FitUtilParallel.h;  LogLikelihoodFCN.h;  ParameterSettings.h;  PoissonLikelihoodFCN.h;  SparseData.h;  UnBinData.h;  ► Math;  AdaptiveIntegratorMultiDim.h;  AllIntegrationTypes.h;  BasicMinimizer.h;  BrentMethods.h;  BrentMinimizer1D.h;  BrentRootFinder.h;  ChebyshevPol.h;  Delaunay2D.h;  DistFunc.h;  DistFuncMathCore.h;  DistSampler.h;  DistSamplerOptions.h;  Error.h;  Factory.h;  FitMethodFunction.h;  Functor.h;  GaussIntegrator.h;  GaussLegendreIntegrator.h;  GenAlgoOptions.h;  GoFTest.h;  IFunction.h;  IFunctionfwd.h;  IMinimizer1D.h;  Integrator.h;  IntegratorMultiDim.h;  IntegratorOptions.h;  IOptions.h;  IParamFunction.h;  IParamFunctionfwd.h;  IRootFinderMethod.h;  KDTree.h;  KDTree.icc;  LCGEngine.h;  Math.h;  MersenneTwisterEngine.h;  Minimizer.h;  MinimizerOptions.h;  MinimizerVariableTransformation.h;  MinimTransformFunction.h;  MinimTransformVariable.h;  MixMaxEngine.h;  MixMaxEngine.icc;  MultiDimParamFunctionAdapter.h;  OneDimFunctionAdapter.h;  ParamFunctor.h;  PdfFunc.h;  PdfFuncMathCore.h;  Pro,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:43262,Log,LogLikelihoodFCN,43262,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,1,['Log'],['LogLikelihoodFCN']
Testability,D.h;  Vector2D.h;  Vector2Dfwd.h;  Vector3D.h;  Vector3Dfwd.h;  Vector4D.h;  Vector4Dfwd.h;  VectorUtil.h;  ► src;  3DConversions.cxx;  3DDistances.cxx;  AxisAngle.cxx;  AxisAngleXother.cxx;  BitReproducible.cxx;  Boost.cxx;  BoostX.cxx;  BoostY.cxx;  BoostZ.cxx;  EulerAngles.cxx;  GenVector_exception.cxx;  LorentzRotation.cxx;  Plane3D.cxx;  Quaternion.cxx;  QuaternionXaxial.cxx;  Rotation3D.cxx;  Rotation3DxAxial.cxx;  RotationZYX.cxx;  Transform3D.cxx;  Translation3D.cxx;  VectorUtil.cxx;  ► test;  coordinates3D.cxx;  coordinates4D.cxx;  CoordinateTraits.h;  rotationApplication.cxx;  RotationTraits.h;  stress2D.cxx;  stress3D.cxx;  testBoost.cxx;  testGenVector.cxx;  testIterator.cxx;  testVectorIO.cxx;  Track.h;  TrackLinkDef.h;  vectorOperation.cxx;  ► mathcore;  ► inc;  ► Fit;  BasicFCN.h;  BinData.h;  BinPoint.h;  Chi2FCN.h;  DataOptions.h;  DataRange.h;  DataVector.h;  DataVectorfwd.h;  FcnAdapter.h;  FitConfig.h;  FitResult.h;  Fitter.h;  FitUtil.h;  FitUtilParallel.h;  LogLikelihoodFCN.h;  ParameterSettings.h;  PoissonLikelihoodFCN.h;  SparseData.h;  UnBinData.h;  ► Math;  AdaptiveIntegratorMultiDim.h;  AllIntegrationTypes.h;  BasicMinimizer.h;  BrentMethods.h;  BrentMinimizer1D.h;  BrentRootFinder.h;  ChebyshevPol.h;  Delaunay2D.h;  DistFunc.h;  DistFuncMathCore.h;  DistSampler.h;  DistSamplerOptions.h;  Error.h;  Factory.h;  FitMethodFunction.h;  Functor.h;  GaussIntegrator.h;  GaussLegendreIntegrator.h;  GenAlgoOptions.h;  GoFTest.h;  IFunction.h;  IFunctionfwd.h;  IMinimizer1D.h;  Integrator.h;  IntegratorMultiDim.h;  IntegratorOptions.h;  IOptions.h;  IParamFunction.h;  IParamFunctionfwd.h;  IRootFinderMethod.h;  KDTree.h;  KDTree.icc;  Math.h;  MersenneTwisterEngine.h;  Minimizer.h;  MinimizerOptions.h;  MinimizerVariableTransformation.h;  MinimTransformFunction.h;  MinimTransformVariable.h;  MixMaxEngine.h;  MultiDimParamFunctionAdapter.h;  OneDimFunctionAdapter.h;  ParamFunctor.h;  PdfFunc.h;  PdfFuncMathCore.h;  ProbFunc.h;  ProbFuncMathCore.h;  Qu,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html606/files.html:43126,Log,LogLikelihoodFCN,43126,root/html606/files.html,https://root.cern,https://root.cern/root/html606/files.html,1,['Log'],['LogLikelihoodFCN']
Testability,"DATA"")) {; std::string str((const char *)arg->GetPostData(), arg->GetPostDataLength());; std::cout << ""got string "" << str << std::endl;; SendCharStarWS(fWSId, ""our reply"");; return true;; }. See in $ROOTSYS/tutorials/http/ws.C and $ROOTSYS/tutorials/http/ws.htm functional example . Definition at line 25 of file THttpWSHandler.h. Public Member Functions; virtual ~THttpWSHandler ();  destructor Make sure that all sending threads are stopped correctly ;  ; virtual Bool_t AllowMTProcess () const;  Allow processing of WS requests in arbitrary thread. ;  ; virtual Bool_t AllowMTSend () const;  Allow send operations in separate threads (when supported by websocket engine) ;  ; virtual Bool_t CanServeFiles () const;  If returns kTRUE, allows to serve files from subdirectories where page content is situated. ;  ; void CloseWS (UInt_t wsid);  Close connection with given websocket id. ;  ; virtual TString GetDefaultPageContent ();  Provides content of default web page for registered web-socket handler Can be content of HTML page or file name, where content should be taken For instance, file:/home/user/test.htm or file:$jsrootsys/files/canvas.htm If not specified, default index.htm page will be shown Used by the webcanvas. ;  ; Int_t GetNumWS ();  Returns current number of websocket connections. ;  ; UInt_t GetWS (Int_t num=0);  Return websocket id with given sequential number Number of websockets returned with GetNumWS() method. ;  ; Bool_t HasWS (UInt_t wsid);  Return kTRUE if websocket with given ID exists. ;  ; TClass * IsA () const override;  ; Bool_t IsDisabled () const;  Returns true when processing of websockets is disabled, set shortly before handler need to be destroyed. ;  ; Bool_t IsSyncMode () const;  Returns processing mode of WS handler If sync mode is TRUE (default), all event processing and data sending performed in main thread All send functions are blocking and must be performed from main thread If sync mode is false, WS handler can be used from different thr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHttpWSHandler.html:2515,test,test,2515,doc/master/classTHttpWSHandler.html,https://root.cern,https://root.cern/doc/master/classTHttpWSHandler.html,1,['test'],['test']
Testability,"DATE << std::endl;; 1307 std::cout << "" "" << ""Copyright (C) 2005-2010 CERN, MPI-K Heidelberg, Us of Bonn and Victoria"" << std::endl;; 1308 std::cout << "" "" << ""Home page: http://tmva.sf.net"" << std::endl;; 1309 std::cout << "" "" << ""Citation info: http://tmva.sf.net/citeTMVA.html"" << std::endl;; 1310 std::cout << "" "" << ""License: http://tmva.sf.net/LICENSE"" << std::endl << std::endl;; 1311}; 1312 ; 1313////////////////////////////////////////////////////////////////////////////////; 1314/// prints the TMVA release number and date; 1315 ; 1316void TMVA::Tools::TMVAVersionMessage( MsgLogger& logger ); 1317{; 1318 logger << ""___________TMVA Version "" << TMVA_RELEASE << "", "" << TMVA_RELEASE_DATE; 1319 << """" << Endl;; 1320}; 1321 ; 1322////////////////////////////////////////////////////////////////////////////////; 1323/// prints the ROOT release number and date; 1324 ; 1325void TMVA::Tools::ROOTVersionMessage( MsgLogger& logger ); 1326{; 1327 static const char * const months[] = { ""Jan"",""Feb"",""Mar"",""Apr"",""May"",; 1328 ""Jun"",""Jul"",""Aug"",""Sep"",""Oct"",; 1329 ""Nov"",""Dec"" };; 1330 Int_t idatqq = gROOT->GetVersionDate();; 1331 Int_t iday = idatqq%100;; 1332 Int_t imonth = (idatqq/100)%100;; 1333 Int_t iyear = (idatqq/10000);; 1334 TString versionDate = TString::Format(""%s %d, %4d"",months[imonth-1],iday,iyear);; 1335 ; 1336 logger << kHEADER ;; 1337 logger << ""You are running ROOT Version: "" << gROOT->GetVersion() << "", "" << versionDate << Endl;; 1338}; 1339 ; 1340////////////////////////////////////////////////////////////////////////////////; 1341/// various kinds of welcome messages; 1342/// ASCII text generated by this site: http://www.network-science.de/ascii/; 1343 ; 1344void TMVA::Tools::TMVAWelcomeMessage( MsgLogger& logger, EWelcomeMessage msgType ); 1345{; 1346 switch (msgType) {; 1347 ; 1348 case kStandardWelcomeMsg:; 1349 logger << Color(""white"") << ""TMVA -- Toolkit for Multivariate Analysis"" << Color(""reset"") << Endl;; 1350 logger << ""Copyright (C) 2005-2006 CERN, LA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Tools_8cxx_source.html:45977,log,logger,45977,doc/master/Tools_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Tools_8cxx_source.html,5,['log'],['logger']
Testability,"DEFoam::MakeAlpha(); voidTObject::MakeZombie(); voidTMVA::PDEFoam::OutputGrow(Bool_t finished = false); TMVA::PDEFoamTMVA::PDEFoam::PDEFoam(const TMVA::PDEFoam&); TMVA::PDEFoamTargetPDEFoamTarget(const TMVA::PDEFoamTarget&); Long_tTMVA::PDEFoam::PeekMax(); voidTMVA::PDEFoam::SetCellElement(TMVA::PDEFoamCell* cell, UInt_t i, Double_t value); voidTMVA::PDEFoam::Varedu(Double_t*, Int_t&, Double_t&, Double_t&). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Double_t*TMVA::PDEFoam::fAlpha[fDim] Internal parameters of the hyperrectangle; TMVA::PDEFoamCell**TMVA::PDEFoam::fCells[fNCells] Array of ALL cells; TMVA::EDTSeparationTMVA::PDEFoam::fDTSeparationBACKWARDS COMPATIBILITY: split cells according to decision tree logic; Int_tTMVA::PDEFoam::fDimDimension of the integration/simulation space; TMVA::PDEFoamDensityBase*TMVA::PDEFoam::fDistr! distribution of training events; Int_tTMVA::PDEFoam::fEvPerBinMaximum number of effective (wt=1) events per bin; Bool_tTMVA::PDEFoam::fFillFoamWithOrigWeightsBACKWARDS COMPATIBILITY: fill the foam with boost or orig. weights; TMVA::EFoamTypeTMVA::PDEFoam::fFoamTypeBACKWARDS COMPATIBILITY: type of foam; TObjArray*TMVA::PDEFoam::fHistEdgHistograms of wt, one for each cell edge; Int_t*TMVA::PDEFoam::fInhiDiv! [fDim] Flags for inhibiting cell division; Int_tTMVA::PDEFoam::fLastCeIndex of the last cell; TMVA::MsgLogger*TMVA::PDEFoam::fLogger! message logger; Int_t*TMVA::PDEFoam::fMaskDiv! [fDim] Dynamic Mask for cell division; UInt_tTMVA::PDEFoam::fMaxDepthmaximum depth of cell tree; Int_tTMVA::PDEFoam::fNBinNo. of bins in the edge histogram for cell MC exploration; Int_tTMVA::PDEFoam::fNCellsMaximum number of cells; UInt_tTMVA::PDEFoam::fNElementsBACKWARDS COMPATIBILITY: number of variables in every cell;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__PDEFoamTarget.html:9629,log,logic,9629,root/html530/TMVA__PDEFoamTarget.html,https://root.cern,https://root.cern/root/html530/TMVA__PDEFoamTarget.html,3,['log'],['logic']
Testability,"DEFoamDecisionTree::~PDEFoamDecisionTree ; (; ). virtual . Destructor deletes fSepType. ; Definition at line 105 of file PDEFoamDecisionTree.cxx. Member Function Documentation. ◆ Class(). static TClass * TMVA::PDEFoamDecisionTree::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::PDEFoamDecisionTree::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::PDEFoamDecisionTree::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 57 of file PDEFoamDecisionTree.h. ◆ DeclFileName(). static const char * TMVA::PDEFoamDecisionTree::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 57 of file PDEFoamDecisionTree.h. ◆ Explore(). void TMVA::PDEFoamDecisionTree::Explore ; (; PDEFoamCell * ; cell). protectedvirtual . Internal subprogram used by Create. ; It explores newly defined cell with according to the decision tree logic. The separation set via the 'sepType' option in the constructor.; The optimal division point for eventual future cell division is determined/recorded. Note that links to parents and initial volume = 1/2 parent has to be already defined prior to calling this routine.; Note, that according to the decision tree logic, a cell is only split, if the number of (unweighted) events in each daughter cell is greater than fNmin. ; Reimplemented from TMVA::PDEFoam.; Definition at line 125 of file PDEFoamDecisionTree.cxx. ◆ IsA(). virtual TClass * TMVA::PDEFoamDecisionTree::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TMVA::PDEFoamDiscriminant.; Definition at line 57 of file PDEFoamDecisionTree.h. ◆ Streamer(). virtual void TMVA::PDEFoamDecisionTree::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TMVA::PDEFoamDiscriminant. ◆ StreamerNVirtual(). void TMVA::PDEFo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PDEFoamDecisionTree.html:21915,log,logic,21915,doc/master/classTMVA_1_1PDEFoamDecisionTree.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PDEFoamDecisionTree.html,1,['log'],['logic']
Testability,"DG(); Create PDG database. Initialization of the DB has to be done via explicit; call to ReadDataBasePDG (also done by GetParticle methods). ~TDatabasePDG(); Cleanup the PDG database. TDatabasePDG* Instance(); static function. void BuildPdgMap() const; Build fPdgMap mapping pdg-code to particle. Initial size is set so as to be able to hold at least 600; particles: 521 in default table, ALICE adds 54 more.; To be revisited after LHC discovers SUSY. TParticlePDG* AddParticle(const char* Name, const char* Title, Double_t Mass, Bool_t Stable, Double_t DecayWidth, Double_t Charge, const char* ParticleClass, Int_t PdgCode, Int_t Anti = -1, Int_t TrackingCode = 0). Particle definition normal constructor. If the particle is set to be; stable, the decay width parameter does have no meaning and can be set to; any value. The parameters granularity, LowerCutOff and HighCutOff are; used for the construction of the mean free path look up tables. The; granularity will be the number of logwise energy points for which the; mean free path will be calculated. TParticlePDG* AddAntiParticle(const char* Name, Int_t PdgCode); assuming particle has already been defined. TParticlePDG * GetParticle(const char* name) const. Get a pointer to the particle object according to the name given. TParticlePDG * GetParticle(Int_t pdgCode) const. Get a pointer to the particle object according to the MC code number. void Print(Option_t* opt = """") const; Print contents of PDG database. Int_t ConvertGeant3ToPdg(Int_t Geant3Number) const; Converts Geant3 particle codes to PDG convention. (Geant4 uses; PDG convention already); Source: BaBar User Guide, Neil I. Geddes,. /*; see Conversion table; */. with some fixes by PB, marked with (PB) below. Checked against; PDG listings from 2000. Paul Balm, Nov 19, 2001. Int_t ConvertPdgToGeant3(Int_t pdgNumber) const; Converts pdg code to geant3 id. Int_t ConvertIsajetToPdg(Int_t isaNumber) const. Converts the ISAJET Particle number into the PDG MC number. void ReadPDG",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TDatabasePDG.html:8261,log,logwise,8261,root/html534/TDatabasePDG.html,https://root.cern,https://root.cern/root/html534/TDatabasePDG.html,3,['log'],['logwise']
Testability,"DG(); Create PDG database. Initialization of the DB has to be done via explicit; call to ReadDataBasePDG (also done by GetParticle methods). ~TDatabasePDG(); Cleanup the PDG database. TDatabasePDG* Instance(); static function. void BuildPdgMap() const; Build fPdgMap mapping pdg-code to particle. Initial size is set so as to be able to hold at least 600; particles: 521 in default table, ALICE adds 54 more.; To be revisited after LHC discovers SUSY. TParticlePDG* AddParticle(const char* Name, const char* Title, Double_t Mass, Bool_t Stable, Double_t DecayWidth, Double_t Charge, const char* ParticleClass, Int_t PdgCode, Int_t Anti = -1, Int_t TrackingCode = 0). Particle definition normal constructor. If the particle is set to be; stable, the decay width parameter does have no meaning and can be set to; any value. The parameters granularity, LowerCutOff and HighCutOff are; used for the construction of the mean free path look up tables. The; granularity will be the number of logwise energy points for which the; mean free path will be calculated. TParticlePDG* AddAntiParticle(const char* Name, Int_t PdgCode); assuming particle has already been defined. TParticlePDG * GetParticle(const char* name) const. Get a pointer to the particle object according to the name given. TParticlePDG * GetParticle(Int_t pdgCode) const. Get a pointer to the particle object according to the MC code number. void Print(Option_t* opt = """") const; Print contents of PDG database. Int_t ConvertGeant3ToPdg(Int_t Geant3Number); Converts Geant3 particle codes to PDG convention. (Geant4 uses; PDG convention already); Source: BaBar User Guide, Neil I. Geddes,. /*; see Conversion table; */. with some fixes by PB, marked with (PB) below. Checked against; PDG listings from 2000. Paul Balm, Nov 19, 2001. Int_t ConvertPdgToGeant3(Int_t pdgNumber); Converts pdg code to geant3 id. Int_t ConvertIsajetToPdg(Int_t isaNumber). Converts the ISAJET Particle number into the PDG MC number. void ReadPDGTable(const char* ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDatabasePDG.html:8155,log,logwise,8155,root/html528/TDatabasePDG.html,https://root.cern,https://root.cern/root/html528/TDatabasePDG.html,3,['log'],['logwise']
Testability,"DISPLAY or cannot do it for some reason.; -n usually, launching a ROOT session will execute a logon script and quitting will execute a logoff script. This option prevents the execution of these two scripts.; it is also possible to execute a script without entering a ROOT session. One simply adds the name of the script(s) after the ROOT command. Be warned: after finishing the execution of the script, ROOT will normally enter a new session.; -q process command line script files and exit. For example if you would like to run a script myMacro.C in the background, redirect the output into a file myMacro.log, and exit after the script execution, use the following syntax:; root -b -q myMacro.C > myMacro.log; If you need to pass a parameter to the script use:; root -b -q 'myMacro.C(3)' > myMacro.log; Be mindful of the quotes, i.e. if you need to pass a string as a parameter, the syntax is:; root -b -q 'myMacro.C(""text"")' > myMacro.log; You can build a shared library with ACLiC and then use this shared library on the command line for a quicker execution (i.e. the compiled speed rather than the interpreted speed). See also “Cling the C++ Interpreter”.; root -b -q myMacro.so > myMacro.log; ROOT has a powerful C/C++ interpreter giving you access to all available ROOT classes, global variables, and functions via the command line. By typing C++ statements at the prompt, you can create objects, call functions, execute scripts, etc. For example:; root[] 1+sqrt(9); (const double)4.00000000000000000e+00; root[] for (int i = 0; i<4; i++) cout << ""Hello"" << i << endl; Hello 0; Hello 1; Hello 2; Hello 3; root[] .q; To exit the ROOT session, type .q.; root[] .q; 2.3 Using the GUI; The basic whiteboard on which an object is drawn in ROOT is called a canvas (defined by the class TCanvas). Every object in the canvas is a graphical object in the sense that you can grab it, resize it, and change some characteristics using the mouse. The canvas area can be divided in several sub areas, so-calle",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:34334,log,log,34334,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['log'],['log']
Testability,"DLCache! use display list caching; Int_tTGLLogicalShape::fDLSize! display-list size for different LODs; UShort_tTGLLogicalShape::fDLValid! display-list validity bit-field; TObject*TGLLogicalShape::fExternalObj! Also plays the role of ID.; TGLPhysicalShape*TGLLogicalShape::fFirstPhysical! first replica; TEveProjectionAxes*fMModel object.; Bool_tTGLObject::fMultiColorAre multiple colors used for object rendering.; Bool_tTGLLogicalShape::fOwnExtObj! External object is a fake; TEveProjection*fProjectionCached model projection; UInt_tTGLLogicalShape::fRef! physical instance ref counting; Bool_tTGLLogicalShape::fRefStrong! Strong ref (delete on 0 ref); not in scene; TGLScene*TGLLogicalShape::fScene! scene where object is stored (can be zero!). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveProjectionAxesGL(); Constructor. Bool_t SetModel(TObject* obj, Option_t* opt = 0); Set model object.; Virtual from TGLObject. void SetBBox(); Fill the bounding-box data of the logical-shape.; Virtual from TGLObject. void FilterOverlappingLabels(Int_t idx, Float_t ref) const. void SplitInterval(Float_t x1, Float_t x2, Int_t axis) const; Build an array of tick-mark position-value pairs. void SplitIntervalByPos(Float_t min, Float_t max, Int_t axis) const; Add tick-marks at equidistant position. void SplitIntervalByVal(Float_t min, Float_t max, Int_t axis) const; Add tick-marks on fixed value step. void GetRange(Int_t ax, Float_t frustMin, Float_t frustMax, Float_t& start, Float_t& en) const; Get range from bounding box of projection manager and furstum size. void Draw(TGLRnrCtx& rnrCtx) const; Draw function for TEveProjectionAxesGL. Skips line-pass of outline mode. void DirectDraw(TGLRnrCtx& rnrCtx) const; Actual rendering code.; Virtual from TGLLogicalShape. TEveProjectionAxesGL(const TEveProjectionAxesGL& ). TEveProjectionAxesGL& operator=(const TEveProjectionAxesGL& ). virtual ~TEveProjectionAxesGL(); {}. Bool_t IgnoreSizeForOfInterest() co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TEveProjectionAxesGL.html:4610,log,logical-shape,4610,root/html530/TEveProjectionAxesGL.html,https://root.cern,https://root.cern/root/html530/TEveProjectionAxesGL.html,2,['log'],['logical-shape']
Testability,"DLCache! use display list caching; Int_tTGLLogicalShape::fDLSize! display-list size for different LODs; UShort_tTGLLogicalShape::fDLValid! display-list validity bit-field; TObject*TGLLogicalShape::fExternalObj! Also plays the role of ID.; TGLPhysicalShape*TGLLogicalShape::fFirstPhysical! first replica; TEveProjectionAxes*fMModel object.; Bool_tTGLObject::fMultiColorAre multiple colors used for object rendering.; Bool_tTGLLogicalShape::fOwnExtObj! External object is a fake; TEveProjection*fProjectionCached model projection; UInt_tTGLLogicalShape::fRef! physical instance ref counting; Bool_tTGLLogicalShape::fRefStrong! Strong ref (delete on 0 ref); not in scene; TGLScene*TGLLogicalShape::fScene! scene where object is stored (can be zero!). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveProjectionAxesGL(); Constructor. Bool_t SetModel(TObject* obj, Option_t* opt = 0); Set model object.; Virtual from TGLObject. void SetBBox(); Fill the bounding-box data of the logical-shape.; Virtual from TGLObject. void FilterOverlappingLabels(Int_t idx, Float_t ref) const. void SplitInterval(Float_t x1, Float_t x2, Int_t axis) const; Build an array of tick-mark position-value pairs. void SplitIntervalByPos(Float_t min, Float_t max, Int_t axis) const; Add tick-marks at equidistant position. void SplitIntervalByVal(Float_t min, Float_t max, Int_t axis) const; Add tick-marks on fixed value step. void GetRange(Int_t ax, Float_t frustMin, Float_t frustMax, Float_t& start, Float_t& en) const; Get range from bounding box of projection manager. void Draw(TGLRnrCtx& rnrCtx) const; Draw function for TEveProjectionAxesGL. Skips line-pass of outline mode. void DirectDraw(TGLRnrCtx& rnrCtx) const; Actual rendering code.; Virtual from TGLLogicalShape. TEveProjectionAxesGL(const TEveProjectionAxesGL& ). TEveProjectionAxesGL& operator=(const TEveProjectionAxesGL& ). virtual ~TEveProjectionAxesGL(); {}. Bool_t IgnoreSizeForOfInterest() const; { return kTR",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveProjectionAxesGL.html:4610,log,logical-shape,4610,root/html528/TEveProjectionAxesGL.html,https://root.cern,https://root.cern/root/html528/TEveProjectionAxesGL.html,1,['log'],['logical-shape']
Testability,DNN_CPU for Regression performance; : ; : Dataset[datasetreg] : Create results for testing; : Dataset[datasetreg] : Evaluation of DNN_CPU on testing sample; : Dataset[datasetreg] : Elapsed time for evaluation of 9000 events: 0.231 sec ; : Create variable histograms; : Create regression target histograms; : Create regression average deviation; : Results created; Factory : Test method: BDTG for Regression performance; : ; : Dataset[datasetreg] : Create results for testing; : Dataset[datasetreg] : Evaluation of BDTG on testing sample; : Dataset[datasetreg] : Elapsed time for evaluation of 9000 events: 2.1 sec ; : Create variable histograms; : Create regression target histograms; : Create regression average deviation; : Results created; Factory : ␛[1mEvaluate all methods␛[0m; : Evaluate regression method: PDEFoam; : TestRegression (testing); : Calculate regression for all events; : Elapsed time for evaluation of 9000 events: 0.0447 sec ; : TestRegression (training); : Calculate regression for all events; : Elapsed time for evaluation of 1000 events: 0.00684 sec ; TFHandler_PDEFoam : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : var1: 3.3352 1.1893 [ 0.00020069 5.0000 ]; : var2: 2.4860 1.4342 [ 0.00071490 5.0000 ]; : fvalue: 163.91 83.651 [ 1.6186 394.84 ]; : -----------------------------------------------------------; : Evaluate regression method: KNN; : TestRegression (testing); : Calculate regression for all events; : Elapsed time for evaluation of 9000 events: 0.0954 sec ; : TestRegression (training); : Calculate regression for all events; : Elapsed time for evaluation of 1000 events: 0.0134 sec ; TFHandler_KNN : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : var1: 3.3352 1.1893 [ 0.00020069 5.0000 ]; : var2: 2.4860 1.4342 [ 0.00071490 5.0000 ]; : fvalue: 163.91 83.651 [ 1.6186 394.84 ]; : -----------------------------------------------------------; : Evaluate regression,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:129246,Test,TestRegression,129246,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['TestRegression']
Testability,"DSet *dset, Long64_t nentries, Long64_t first, const char *defpackunit, const char *defpackdata);  Init the packetizer Return 0 on success (fPacketizer is correctly initialized), -1 on failure. ;  ; TList * MergeFeedback ();  Merge feedback lists. ;  ; Bool_t MergeOutputFiles ();  Merge output in files. ;  ; void NotifyMemory (TObject *obj);  Printout the memory record after merging object 'obj' This record is used by the memory monitor. ;  ; virtual Bool_t SendSelector (const char *selector_file);  Send the selector file(s) to master or worker nodes. ;  ; void SetLastMergingMsg (TObject *obj);  Set the message to be notified in case of exception. ;  ; void SetSelectorDataMembersFromOutputList ();  Set the selector's data members: find the mapping of data members to otuput list entries in the output list and apply it. ;  ; void StopFeedback () override;  Stop reporting of feedback objects. ;  ;  Protected Member Functions inherited from TProofPlayer; Int_t AssertSelector (const char *selector_file);  Make sure that a valid selector object Return -1 in case of problems, 0 otherwise. ;  ; Bool_t CheckMemUsage (Long64_t &mfreq, Bool_t &w80r, Bool_t &w80v, TString &wmsg);  Check the memory usage, if requested. ;  ; virtual Int_t DrawCanvas (TObject *obj);  Draw the object if it is a canvas. ;  ; void * GetSender () override;  ; void MapOutputListToDataMembers () const;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  . Private Attributes; Bool_t fReturnFeedback;  ; TArrayI fSlaveActW;  ; TArrayL64 fSlaveBytesRead;  ; TArrayF fSlaveEffS;  ; TArrayF fSlaveEvtRti;  ; TArrayF fSlaveInitTime;  ; TArrayF fSlaveMBRti;  ; TArrayF fSlaveProcTime;  ; TArrayL64 fSlaveProgress;  ; TList fSlaves;  ; TArrayL64 fSlaveTot",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayerSuperMaster.html:21104,Assert,AssertSelector,21104,doc/master/classTProofPlayerSuperMaster.html,https://root.cern,https://root.cern/doc/master/classTProofPlayerSuperMaster.html,1,['Assert'],['AssertSelector']
Testability,"Data Members; protected:. RooAbsPdf*fAltImportanceDensity; const RooArgSet*fAltImportanceSnapshot; const RooStats::ModelConfig*RooStats::HypoTestCalculatorGeneric::fAltModel; const RooAbsData*RooStats::HypoTestCalculatorGeneric::fData; RooStats::TestStatSampler*RooStats::HypoTestCalculatorGeneric::fDefaultSampler; RooStats::TestStatistic*RooStats::HypoTestCalculatorGeneric::fDefaultTestStat; intfNToysAlt; intfNToysAltTail; intfNToysNull; intfNToysNullTail; RooAbsPdf*fNullImportanceDensity; const RooArgSet*fNullImportanceSnapshot; const RooStats::ModelConfig*RooStats::HypoTestCalculatorGeneric::fNullModel; RooStats::TestStatSampler*RooStats::HypoTestCalculatorGeneric::fTestStatSampler. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; int PreNullHook(RooArgSet* parameterPoint, double obsTestStat) const. int PreAltHook(RooArgSet* parameterPoint, double obsTestStat) const. FrequentistCalculator(const RooAbsData& data, const RooStats::ModelConfig& altModel, const RooStats::ModelConfig& nullModel, RooStats::TestStatSampler* sampler = 0). ~FrequentistCalculator(). void SetNullImportanceDensity(RooAbsPdf* p, const RooArgSet* s = NULL); sets importance density and snapshot (optional). void SetAltImportanceDensity(RooAbsPdf* p, const RooArgSet* s = NULL); sets importance density and snapshot (optional). void SetToys(int toysNull, int toysAlt); set number of toys. { fNToysNull = toysNull; fNToysAlt = toysAlt; }. void SetNToysInTails(int toysNull, int toysAlt); set least number of toys in tails. { fNToysNullTail = toysNull; fNToysAltTail = toysAlt; }. » Author: Sven Kreiss, Kyle Cranmer Nov 2010 » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: FrequentistCalculator.h 37084 2010-11-29 21:37:13Z moneta $ » Last generated: 2011-07-04 15:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__FrequentistCalculator.html:3670,Test,TestStatSampler,3670,root/html530/RooStats__FrequentistCalculator.html,https://root.cern,https://root.cern/root/html530/RooStats__FrequentistCalculator.html,1,['Test'],['TestStatSampler']
Testability,"Data Members; protected:. RooAbsPdf*fAltImportanceDensity; const RooArgSet*fAltImportanceSnapshot; const RooStats::ModelConfig*RooStats::HypoTestCalculatorGeneric::fAltModel; const RooAbsData*RooStats::HypoTestCalculatorGeneric::fData; RooStats::TestStatSampler*RooStats::HypoTestCalculatorGeneric::fDefaultSampler; RooStats::TestStatistic*RooStats::HypoTestCalculatorGeneric::fDefaultTestStat; intfNToysAlt; intfNToysAltTail; intfNToysNull; intfNToysNullTail; RooAbsPdf*fNullImportanceDensity; const RooArgSet*fNullImportanceSnapshot; const RooStats::ModelConfig*RooStats::HypoTestCalculatorGeneric::fNullModel; RooStats::TestStatSampler*RooStats::HypoTestCalculatorGeneric::fTestStatSampler. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; int PreNullHook(RooArgSet* parameterPoint, double obsTestStat) const. int PreAltHook(RooArgSet* parameterPoint, double obsTestStat) const. FrequentistCalculator(const RooAbsData& data, const RooStats::ModelConfig& altModel, const RooStats::ModelConfig& nullModel, RooStats::TestStatSampler* sampler = 0). ~FrequentistCalculator(). void SetNullImportanceDensity(RooAbsPdf* p, const RooArgSet* s = NULL); sets importance density and snapshot (optional). void SetAltImportanceDensity(RooAbsPdf* p, const RooArgSet* s = NULL); sets importance density and snapshot (optional). void SetToys(int toysNull, int toysAlt); set number of toys. { fNToysNull = toysNull; fNToysAlt = toysAlt; }. void SetNToysInTails(int toysNull, int toysAlt); set least number of toys in tails. { fNToysNullTail = toysNull; fNToysAltTail = toysAlt; }. » Author: Sven Kreiss, Kyle Cranmer Nov 2010 » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: FrequentistCalculator.h 37084 2010-11-29 21:37:13Z moneta $ » Last generated: 2011-12-02 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooStats__FrequentistCalculator.html:3741,Test,TestStatSampler,3741,root/html532/RooStats__FrequentistCalculator.html,https://root.cern,https://root.cern/root/html532/RooStats__FrequentistCalculator.html,1,['Test'],['TestStatSampler']
Testability,"Data& data, RooArgSet& allParameters); Main interface to evaluate the test statistic on a dataset. TestStatistic* GetTestStatistic() const; Get the TestStatistic. Double_t ConfidenceLevel() const; Get the Confidence level for the test. {return 1.-fSize;}. void Initialize(RooAbsArg& , RooArgSet& , RooArgSet& ); Common Initialization. void SetNEventsPerToy(const Int_t nevents). void SetExtended(const Bool_t isExtended). void SetData(RooAbsData& data); Set the DataSet, add to the the workspace if not already there. void SetPdf(RooAbsPdf& pdf); Set the Pdf, add to the the workspace if not already there. void SetData(const char* name); specify the name of the dataset in the workspace to be used. {fDataName = name;}. void SetPdf(const char* name); specify the name of the PDF in the workspace to be used. {fPdfName = name;}. void SetPriorNuisance(RooAbsPdf* ); How to randomize the prior. Set to NULL to deactivate randomization. {}. void SetParametersForTestStat(const RooArgSet& nullpoi); specify the values of parameters used when evaluating test statistic. {fNullPOI = (RooArgSet*)nullpoi.snapshot();}. void SetNuisanceParameters(const RooArgSet& set); specify the nuisance parameters (eg. the rest of the parameters). {fNuisParams = &set;}. void SetObservables(const RooArgSet& set); specify the observables in the dataset (needed to evaluate the test statistic). {fObservables = &set;}. void SetGlobalObservables(const RooArgSet& ); specify the conditional observables. {}. void SetTestSize(Double_t size); set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval). {fSize = size;}. void SetConfidenceLevel(Double_t cl); set the confidence level for the interval (eg. 0.95 for a 95% Confidence Interval). {fSize = 1.-cl;}. void SetTestStatistic(RooStats::TestStatistic* testStat); Set the TestStatistic (want the argument to be a function of the data & parameter points. void SetSamplingDistName(const char* name); Set the name of the sampling distribution us",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__ToyMCSamplerOld.html:5776,test,test,5776,root/html528/RooStats__ToyMCSamplerOld.html,https://root.cern,https://root.cern/root/html528/RooStats__ToyMCSamplerOld.html,3,['test'],['test']
Testability,"Data) {; 1222 auto inputMatrix = batch.GetInput();; 1223 auto outputMatrix = batch.GetOutput();; 1224 auto weightMatrix = batch.GetWeights();; 1225 testError += testNet.Loss(inputMatrix, outputMatrix, weightMatrix);; 1226 }; 1227 testError /= (Double_t) (nTestSamples / settings.batchSize);; 1228 ; 1229 //Log the loss value; 1230 fTrainHistory.AddValue(""testError"",stepCount,testError);; 1231 ; 1232 end = std::chrono::system_clock::now();; 1233 ; 1234 // Compute training error.; 1235 Double_t trainingError = 0.0;; 1236 for (auto batch : trainingData) {; 1237 auto inputMatrix = batch.GetInput();; 1238 auto outputMatrix = batch.GetOutput();; 1239 auto weightMatrix = batch.GetWeights();; 1240 trainingError += net.Loss(inputMatrix, outputMatrix, weightMatrix);; 1241 }; 1242 trainingError /= (Double_t) (nTrainingSamples / settings.batchSize);; 1243 ; 1244 //Log the loss value; 1245 fTrainHistory.AddValue(""trainingError"",stepCount,trainingError);; 1246 ; 1247 if (fInteractive){; 1248 fInteractive->AddPoint(stepCount, trainingError, testError);; 1249 fIPyCurrentIter = 100*(double)minimizer.GetConvergenceCount() /(double)settings.convergenceSteps;; 1250 if (fExitFromTraining) break;; 1251 }; 1252 ; 1253 // Compute numerical throughput.; 1254 std::chrono::duration<double> elapsed_seconds = end - start;; 1255 double seconds = elapsed_seconds.count();; 1256 double nFlops = (double) (settings.testInterval * batchesInEpoch);; 1257 nFlops *= net.GetNFlops() * 1e-9;; 1258 ; 1259 converged = minimizer.HasConverged(testError);; 1260 start = std::chrono::system_clock::now();; 1261 ; 1262 if (fInteractive) {; 1263 fInteractive->AddPoint(stepCount, trainingError, testError);; 1264 fIPyCurrentIter = 100.0 * minimizer.GetConvergenceCount(); 1265 / minimizer.GetConvergenceSteps ();; 1266 if (fExitFromTraining) break;; 1267 } else {; 1268 Log() << std::setw(10) << stepCount << "" | ""; 1269 << std::setw(12) << trainingError; 1270 << std::setw(12) << testError; 1271 << std::setw(12) << nFlops /",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDNN_8cxx_source.html:44980,test,testError,44980,doc/master/MethodDNN_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDNN_8cxx_source.html,1,['test'],['testError']
Testability,"Data.hxx:148; ROOT::RGeomVisible::colorstd::string colorcolor in rgb formatDefinition RGeomData.hxx:150; ROOT::RGeomVisible::RGeomVisibleRGeomVisible(int _nodeid, int _seqid, const std::vector< int > &_stack)Definition RGeomData.hxx:155; ROOT::RGeomVisible::riRGeomRenderInfo * rirender information for the shape, can be same for different nodesDefinition RGeomData.hxx:152; ROOT::RGeomVisible::opacitydouble opacityopacityDefinition RGeomData.hxx:151; ROOT::RGeomVisible::nodeidint nodeidselected node id,Definition RGeomData.hxx:147; ROOT::RGeomVisible::RGeomVisibleRGeomVisible()=default; ROOT::RGeomVisible::stackstd::vector< int > stackpath to the node, index in list of childsDefinition RGeomData.hxx:149; TGeoManagerThe manager class for any TGeo geometry.Definition TGeoManager.h:44; TGeoMatrixGeometrical transformation package.Definition TGeoMatrix.h:38; TGeoNodeA node represent a volume positioned inside another.They store links to both volumes and to the TGeoM...Definition TGeoNode.h:39; TGeoShapeBase abstract class for all shapes.Definition TGeoShape.h:25; TGeoVolumeTGeoVolume, TGeoVolumeMulti, TGeoVolumeAssembly are the volume classes.Definition TGeoVolume.h:43; TLockGuardDefinition TVirtualMutex.h:70; TVirtualMutexThis class implements a mutex interface.Definition TVirtualMutex.h:32; bool; nconst Int_t nDefinition legend1.C:16; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::RGeomSignalFunc_tstd::function< void(const std::string &)> RGeomSignalFunc_tDefinition RGeomData.hxx:208; ROOT::RGeomLogExperimental::RLogChannel & RGeomLog()Log channel for Geomviewer diagnostics.Definition RGeomData.cxx:49; ROOT::RGeomScanFunc_tstd::function< bool(RGeomNode &, std::vector< int > &, bool, int)> RGeomScanFunc_tDefinition RGeomData.hxx:206. geomwebviewerincROOTRGeomData.hxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:16 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RGeomData_8hxx_source.html:43770,Log,Log,43770,doc/master/RGeomData_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RGeomData_8hxx_source.html,1,['Log'],['Log']
Testability,"DataFrame, of a model trained with Keras. ;  ;  TMVA_SOFIE_RDataFrame_JIT.C;   This macro provides an example of using a trained model with Keras and make inference using SOFIE and RDataFrame This macro uses as input a Keras model generated with the TMVA_Higgs_Classification.C tutorial You need to run that macro before this one. ;  ;  TMVA_SOFIE_RSofieReader.C;   This macro provides an example of using a trained model with Keras and make inference using SOFIE with the RSofieReader class This macro uses as input a Keras model generated with the TMVA_Higgs_Classification.C tutorial You need to run that macro before to generate the trained Keras model ;  ;  TMVAClassification.C;   This macro provides examples for the training and testing of the TMVA classifiers. ;  ;  TMVAClassificationApplication.C;   This macro provides a simple example on how to use the trained classifiers within an analysis module ;  ;  TMVAClassificationCategory.C;   This macro provides examples for the training and testing of the TMVA classifiers in categorisation mode. ;  ;  TMVAClassificationCategoryApplication.C;   This macro provides a simple example on how to use the trained classifiers (with categories) within an analysis module ;  ;  TMVACrossValidation.C;   This macro provides an example of how to use TMVA for k-folds cross evaluation. ;  ;  TMVACrossValidationApplication.C;   This macro provides an example of how to use TMVA for k-folds cross evaluation in application. ;  ;  TMVACrossValidationRegression.C;   This macro provides an example of how to use TMVA for k-folds cross evaluation. ;  ;  TMVAGAexample.C;   This executable gives an example of a very simple use of the genetic algorithm of TMVA ;  ;  TMVAGAexample2.C;   This executable gives an example of a very simple use of the genetic algorithm of TMVA. ;  ;  TMVAMinimalClassification.C;   Minimal self-contained example for setting up TMVA with binary classification. ;  ;  TMVAMulticlass.C;   This macro provides a simple example fo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/dir_afb41fc0ce910d0ed999b271277cf431.html:5299,test,testing,5299,doc/master/dir_afb41fc0ce910d0ed999b271277cf431.html,https://root.cern,https://root.cern/doc/master/dir_afb41fc0ce910d0ed999b271277cf431.html,1,['test'],['testing']
Testability,"DataInfo().GetDataSetManager();; 1246 }; 1247 // ToDo, Do we need to fill the DataSetManager of MethodBoost here too?; 1248 ; 1249 TString wfileDir = m->DataInfo().GetName();; 1250 wfileDir += ""/"" + gConfig().GetIONames().fWeightFileDir;; 1251 m->SetWeightFileDir(wfileDir);; 1252 m->SetModelPersistence(fModelPersistence);; 1253 m->SetSilentFile(IsSilentFile());; 1254 m->SetAnalysisType(fAnalysisType);; 1255 m->SetupMethod();; 1256 m->ReadStateFromFile();; 1257 m->SetTestvarName(testvarName);; 1258 ; 1259 // replace trained method by newly created one (from weight file) in methods vector; 1260 (*methods)[i] = m;; 1261 }; 1262 }; 1263 }; 1264}; 1265 ; 1266////////////////////////////////////////////////////////////////////////////////; 1267/// Evaluates all booked methods on the testing data and adds the output to the; 1268/// Results in the corresponiding DataSet.; 1269///; 1270 ; 1271void TMVA::Factory::TestAllMethods(); 1272{; 1273 Log() << kHEADER << gTools().Color(""bold"") << ""Test all methods"" << gTools().Color(""reset"") << Endl;; 1274 ; 1275 // don't do anything if no method booked; 1276 if (fMethodsMap.empty()) {; 1277 Log() << kINFO << ""...nothing found to test"" << Endl;; 1278 return;; 1279 }; 1280 std::map<TString, MVector *>::iterator itrMap;; 1281 ; 1282 for (itrMap = fMethodsMap.begin(); itrMap != fMethodsMap.end(); ++itrMap) {; 1283 MVector *methods = itrMap->second;; 1284 MVector::iterator itrMethod;; 1285 ; 1286 // iterate over methods and test; 1287 for (itrMethod = methods->begin(); itrMethod != methods->end(); ++itrMethod) {; 1288 Event::SetIsTraining(kFALSE);; 1289 MethodBase *mva = dynamic_cast<MethodBase *>(*itrMethod);; 1290 if (mva == 0); 1291 continue;; 1292 Types::EAnalysisType analysisType = mva->GetAnalysisType();; 1293 Log() << kHEADER << ""Test method: "" << mva->GetMethodName() << "" for ""; 1294 << (analysisType == Types::kRegression; 1295 ? ""Regression""; 1296 : (analysisType == Types::kMulticlass ? ""Multiclass classification"" : ""Classificati",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:52040,Test,Test,52040,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,1,['Test'],['Test']
Testability,"DataSet::kContinue); virtual TDataSet*operator()(const Char_t* path); virtual TDataSet*operator*() const; TDataSetIter&operator=(const TDataSetIter&); virtual TDataSet*operator[](const Char_t* path); virtual voidTObject::Paint(Option_t* option = """"); virtual TStringPath(); virtual TStringPath(const Char_t* path); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual TDataSet*Pwd(Option_t* opt = """") const; virtual TDataSet*Rd(const Char_t* dirname, Option_t* option = """"); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidReset(TDataSet* l = 0, Int_t depth = 0); voidTObject::ResetBit(UInt_t f); virtual TDataSet*Rmdir(TDataSet* dataset, Option_t* option = """"); virtual TDataSet*Rmdir(const Char_t* dirname, Option_t* option = """"); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual TDataSet*Shunt(TDataSet* set); virtual TDataSet*Shunt(TDataSet* set, const Char_t* path); virtual TDataSet*Shunt(TDataSet* set, TDataSet* dataset); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TDataSetIter.html:7289,Test,TestBit,7289,root/html530/TDataSetIter.html,https://root.cern,https://root.cern/root/html530/TDataSetIter.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"DataSetFactory::EventStats::nWeEvBeforeCutFloat_t nWeEvBeforeCutDefinition DataSetFactory.h:134; TMVA::DataSetFactory::EventStats::nNegWeightsDouble_t nNegWeightsDefinition DataSetFactory.h:136; TMVA::DataSetFactory::EventStats::nTestingEventsRequestedInt_t nTestingEventsRequestedDefinition DataSetFactory.h:129; TMVA::DataSetFactoryClass that contains all the data information.Definition DataSetFactory.h:116; TMVA::DataSetFactory::~DataSetFactory~DataSetFactory()destructorDefinition DataSetFactory.cxx:107; TMVA::DataSetFactory::fSpectatorFormulasstd::vector< TTreeFormula * > fSpectatorFormulasspectatorsDefinition DataSetFactory.h:233; TMVA::DataSetFactory::fWeightFormulastd::vector< TTreeFormula * > fWeightFormulaweightsDefinition DataSetFactory.h:232; TMVA::DataSetFactory::fCurrentTreeTTree * fCurrentTreethe tree, events are currently read fromDefinition DataSetFactory.h:224; TMVA::DataSetFactory::VerboseBool_t Verbose()Definition DataSetFactory.h:209; TMVA::DataSetFactory::LogMsgLogger & Log() constDefinition DataSetFactory.h:236; TMVA::DataSetFactory::BuildInitialDataSetDataSet * BuildInitialDataSet(DataSetInfo &, TMVA::DataInputHandler &)if no entries, than create a DataSet with one Event which uses dynamic variables (pointers to variabl...Definition DataSetFactory.cxx:202; TMVA::DataSetFactory::DataSetFactoryDataSetFactory()constructorDefinition DataSetFactory.cxx:93; TMVA::DataSetFactory::EventVectorOfClassesOfTreeTypestd::map< Types::ETreeType, EventVectorOfClasses > EventVectorOfClassesOfTreeTypeDefinition DataSetFactory.h:120; TMVA::DataSetFactory::fCurrentEvtIdxUInt_t fCurrentEvtIdxthe current event (to avoid reading of the same event)Definition DataSetFactory.h:225; TMVA::DataSetFactory::ChangeToNewTreevoid ChangeToNewTree(TreeInfo &, const DataSetInfo &)While the data gets copied into the local training and testing trees, the input tree can change (for ...Definition DataSetFactory.cxx:293; TMVA::DataSetFactory::EventVectorOfTreeTypestd::map< Types::ETreeTy",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataSetFactory_8h_source.html:10251,Log,LogMsgLogger,10251,doc/master/DataSetFactory_8h_source.html,https://root.cern,https://root.cern/doc/master/DataSetFactory_8h_source.html,2,['Log'],"['Log', 'LogMsgLogger']"
Testability,"DataSetInfo &dsi, const TString &theWeightFile);  ;  ~MethodRXGB (void);  ; virtual void AddWeightsXMLTo (void *) const;  ; const Ranking * CreateRanking ();  ; void DeclareOptions ();  ; Double_t GetMvaValue (Double_t *errLower=nullptr, Double_t *errUpper=nullptr);  ; virtual std::vector< Double_t > GetMvaValues (Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the current Data type ;  ; Bool_t HasAnalysisType (Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets);  ; void Init ();  ; virtual void MakeClass (const TString &classFileName=TString("""")) const;  create reader class for method (classification only at present) ;  ; void ProcessOptions ();  ; void ReadModelFromFile ();  ; virtual void ReadWeightsFromStream (std::istream &);  ; virtual void ReadWeightsFromStream (std::istream &)=0;  ; virtual void ReadWeightsFromStream (TFile &);  ; virtual void ReadWeightsFromXML (void *);  ; virtual void TestClassification ();  initialization ;  ; void Train ();  ;  Public Member Functions inherited from TMVA::RMethodBase;  RMethodBase (const TString &jobName, Types::EMVA methodType, const TString &methodTitle, DataSetInfo &dsi, const TString &theOption="""", ROOT::R::TRInterface &_r=ROOT::R::TRInterface::Instance());  ;  RMethodBase (Types::EMVA methodType, DataSetInfo &dsi, const TString &weightFile, ROOT::R::TRInterface &_r=ROOT::R::TRInterface::Instance());  ; virtual ~RMethodBase ();  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::MethodBase;  MethodBase (const TString &jobName, Types::EMVA methodType, const TString &methodTitle, DataSetInfo &dsi, const TString &theOption="""");  standard constructor ;  ;  MethodBase (Types::EMVA methodType, DataSetInfo &dsi, const TString &weightFile);  constructor used for Testing + Application of the MVA, only (no training",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodRXGB.html:1542,Test,TestClassification,1542,doc/master/classTMVA_1_1MethodRXGB.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodRXGB.html,1,['Test'],['TestClassification']
Testability,"DataSetInfo::GetVarArraySizeInt_t GetVarArraySize(const TString &expression) constDefinition DataSetInfo.h:108; TMVA::DataSetInfo::AddClassClassInfo * AddClass(const TString &className)Definition DataSetInfo.cxx:113; TMVA::DataSetInfo::GetNamevirtual const char * GetName() constReturns name of object.Definition DataSetInfo.h:71; TMVA::DataSetInfo::IsVariableFromArrayBool_t IsVariableFromArray(Int_t i) constDefinition DataSetInfo.h:112; TMVA::DataSetInfo::GetSpectatorInfosstd::vector< VariableInfo > & GetSpectatorInfos()Definition DataSetInfo.h:122; TMVA::DataSetInfo::SetNormalizationvoid SetNormalization(const TString &norm)Definition DataSetInfo.h:132; TMVA::DataSetInfo::GetNClassesUInt_t GetNClasses() constDefinition DataSetInfo.h:155; TMVA::DataSetInfo::GetSplitOptionsconst TString & GetSplitOptions() constDefinition DataSetInfo.h:186; TMVA::DataSetInfo::GetNTargetsUInt_t GetNTargets() constDefinition DataSetInfo.h:128; TMVA::DataSetInfo::SetTestingSumSignalWeightsvoid SetTestingSumSignalWeights(Double_t testingSumSignalWeights)Definition DataSetInfo.h:138; TMVA::DataSetInfo::GetSignalClassIndexUInt_t GetSignalClassIndex()Definition DataSetInfo.h:158; TMVA::DataSetInfo::SetTrainingSumSignalWeightsvoid SetTrainingSumSignalWeights(Double_t trainingSumSignalWeights)Definition DataSetInfo.h:134; TMVA::DataSetInfo::GetClassInfoClassInfo * GetClassInfo(Int_t clNum) constDefinition DataSetInfo.cxx:146; TMVA::DataSetInfo::SetTestingSumBackgrWeightsvoid SetTestingSumBackgrWeights(Double_t testingSumBackgrWeights)Definition DataSetInfo.h:139; TMVA::DataSetInfo::GetClassNameMaxLengthInt_t GetClassNameMaxLength() constDefinition DataSetInfo.cxx:524; TMVA::DataSetInfo::PrintCorrelationMatrixvoid PrintCorrelationMatrix(const TString &className)calculates the correlation matrices for signal and background, prints them to standard output,...Definition DataSetInfo.cxx:419; TMVA::DataSetInfo::GetVariableInfoVariableInfo & GetVariableInfo(Int_t i)Definition DataSetInfo.h:105; TMVA:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataSetFactory_8cxx_source.html:88652,test,testingSumSignalWeights,88652,doc/master/DataSetFactory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/DataSetFactory_8cxx_source.html,1,['test'],['testingSumSignalWeights']
Testability,"DataSinglePdf(const RooAbsPdf& pdf, const RooArgSet& obs, const RooRealVar& weightVar, RooCategory* channelCat = 0); static RooAbsData*GenerateCountingAsimovData(RooAbsPdf& pdf, const RooArgSet& obs, const RooRealVar& weightVar, RooCategory* channelCat = 0); virtual voidRooStats::HypoTestCalculatorGeneric::PostHook() const; virtual intRooStats::HypoTestCalculatorGeneric::PreAltHook(RooArgSet*, double) const; virtual voidRooStats::HypoTestCalculatorGeneric::PreHook() const; virtual intRooStats::HypoTestCalculatorGeneric::PreNullHook(RooArgSet*, double) const; static boolSetObsToExpected(RooAbsPdf& pdf, const RooArgSet& obs); static boolSetObsToExpected(RooProdPdf& prod, const RooArgSet& obs). Data Members; protected:. const RooStats::ModelConfig*RooStats::HypoTestCalculatorGeneric::fAltModel; unsigned intRooStats::HypoTestCalculatorGeneric::fAltToysSeedto have same toys for alternate ; const RooAbsData*RooStats::HypoTestCalculatorGeneric::fData; RooStats::TestStatSampler*RooStats::HypoTestCalculatorGeneric::fDefaultSampler; RooStats::TestStatistic*RooStats::HypoTestCalculatorGeneric::fDefaultTestStat; const RooStats::ModelConfig*RooStats::HypoTestCalculatorGeneric::fNullModel; RooStats::TestStatSampler*RooStats::HypoTestCalculatorGeneric::fTestStatSampler. private:. RooAbsData*fAsimovDataasimov data set ; RooArgSetfAsimovGlobObssnapshot of Asimov global observables ; RooArgSetfBestFitParamssnapshot of all best fitted Parameter values; RooArgSetfBestFitPoisnapshot of best fitted POI values; doublefNLLAsimov; doublefNLLObs; boolfOneSidedfor one sided PL test statistic (upper limits); boolfOneSidedDiscoveryfor one sided PL test statistic (for discovery); intfUseQTildeflag to indicate if using qtilde or not (-1 (default based on RooRealVar)), 0 false, 1 (true); static intfgPrintLevelcontrol print level (0 minimal, 1 normal, 2 debug). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetPrintLevel(int level); set print level (s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__AsymptoticCalculator.html:4445,Test,TestStatSampler,4445,root/html534/RooStats__AsymptoticCalculator.html,https://root.cern,https://root.cern/root/html534/RooStats__AsymptoticCalculator.html,3,['Test'],"['TestStatSampler', 'TestStatistic']"
Testability,"DataSinglePdf(const RooAbsPdf& pdf, const RooArgSet& obs, const RooRealVar& weightVar, RooCategory* channelCat = 0); static RooAbsData*GenerateCountingAsimovData(RooAbsPdf& pdf, const RooArgSet& obs, const RooRealVar& weightVar, RooCategory* channelCat = 0); virtual voidRooStats::HypoTestCalculatorGeneric::PostHook() const; virtual intRooStats::HypoTestCalculatorGeneric::PreAltHook(RooArgSet*, double) const; virtual voidRooStats::HypoTestCalculatorGeneric::PreHook() const; virtual intRooStats::HypoTestCalculatorGeneric::PreNullHook(RooArgSet*, double) const; static boolSetObsToExpected(RooAbsPdf& pdf, const RooArgSet& obs); static boolSetObsToExpected(RooProdPdf& prod, const RooArgSet& obs). Data Members; protected:. const RooStats::ModelConfig*RooStats::HypoTestCalculatorGeneric::fAltModel; unsigned intRooStats::HypoTestCalculatorGeneric::fAltToysSeedto have same toys for alternate; const RooAbsData*RooStats::HypoTestCalculatorGeneric::fData; RooStats::TestStatSampler*RooStats::HypoTestCalculatorGeneric::fDefaultSampler; RooStats::TestStatistic*RooStats::HypoTestCalculatorGeneric::fDefaultTestStat; const RooStats::ModelConfig*RooStats::HypoTestCalculatorGeneric::fNullModel; RooStats::TestStatSampler*RooStats::HypoTestCalculatorGeneric::fTestStatSampler. private:. RooAbsData*fAsimovDataasimov data set; RooArgSetfAsimovGlobObssnapshot of Asimov global observables; RooArgSetfBestFitParamssnapshot of all best fitted Parameter values; RooArgSetfBestFitPoisnapshot of best fitted POI values; boolfIsInitialized! flag to check if calculator is initialized; doublefNLLAsimov; doublefNLLObs; boolfNominalAsimovmake Asimov at nominal parameter values; boolfOneSidedfor one sided PL test statistic (upper limits); boolfOneSidedDiscoveryfor one sided PL test statistic (for discovery); intfUseQTildeflag to indicate if using qtilde or not (-1 (default based on RooRealVar)), 0 false, 1 (true); static intfgPrintLevelcontrol print level (0 minimal, 1 normal, 2 debug). Class Charts. Inher",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooStats__AsymptoticCalculator.html:4537,Test,TestStatSampler,4537,root/html604/RooStats__AsymptoticCalculator.html,https://root.cern,https://root.cern/root/html604/RooStats__AsymptoticCalculator.html,3,['Test'],"['TestStatSampler', 'TestStatistic']"
Testability,"DataSinglePdf(const RooAbsPdf& pdf, const RooArgSet& obs, const RooRealVar& weightVar, RooCategory* channelCat = 0); static RooAbsData*GenerateCountingAsimovData(RooAbsPdf& pdf, const RooArgSet& obs, const RooRealVar& weightVar, RooCategory* channelCat = 0); virtual voidRooStats::HypoTestCalculatorGeneric::PostHook() const; virtual intRooStats::HypoTestCalculatorGeneric::PreAltHook(RooArgSet*, double) const; virtual voidRooStats::HypoTestCalculatorGeneric::PreHook() const; virtual intRooStats::HypoTestCalculatorGeneric::PreNullHook(RooArgSet*, double) const; static boolSetObsToExpected(RooAbsPdf& pdf, const RooArgSet& obs); static boolSetObsToExpected(RooProdPdf& prod, const RooArgSet& obs). Data Members; protected:. const RooStats::ModelConfig*RooStats::HypoTestCalculatorGeneric::fAltModel; unsigned intRooStats::HypoTestCalculatorGeneric::fAltToysSeedto have same toys for alternate; const RooAbsData*RooStats::HypoTestCalculatorGeneric::fData; RooStats::TestStatSampler*RooStats::HypoTestCalculatorGeneric::fDefaultSampler; RooStats::TestStatistic*RooStats::HypoTestCalculatorGeneric::fDefaultTestStat; const RooStats::ModelConfig*RooStats::HypoTestCalculatorGeneric::fNullModel; RooStats::TestStatSampler*RooStats::HypoTestCalculatorGeneric::fTestStatSampler. private:. RooAbsData*fAsimovDataasimov data set; RooArgSetfAsimovGlobObssnapshot of Asimov global observables; RooArgSetfBestFitParamssnapshot of all best fitted Parameter values; RooArgSetfBestFitPoisnapshot of best fitted POI values; doublefNLLAsimov; doublefNLLObs; boolfOneSidedfor one sided PL test statistic (upper limits); boolfOneSidedDiscoveryfor one sided PL test statistic (for discovery); intfUseQTildeflag to indicate if using qtilde or not (-1 (default based on RooRealVar)), 0 false, 1 (true); static intfgPrintLevelcontrol print level (0 minimal, 1 normal, 2 debug). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetPrintLevel(int level); set print level (sta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__AsymptoticCalculator.html:4624,Test,TestStatSampler,4624,root/html602/RooStats__AsymptoticCalculator.html,https://root.cern,https://root.cern/root/html602/RooStats__AsymptoticCalculator.html,3,['Test'],"['TestStatSampler', 'TestStatistic']"
Testability,"DataStore (const RooAbsDataStore &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; const std::set< std::string > & attributes () const;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAddModel.html:33581,Test,Test,33581,doc/master/classRooAddModel.html,https://root.cern,https://root.cern/doc/master/classRooAddModel.html,3,['Test'],['Test']
Testability,"DataType > &data);  Set the data pointer. ;  ; void SetModelFunction (const std::shared_ptr< IModelFunction > &func);  Set the function pointer. ;  ;  Protected Attributes inherited from ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >; std::shared_ptr< DataType > fData;  ; std::shared_ptr< IModelFunction > fFunc;  . #include <Fit/LogLikelihoodFCN.h>. Inheritance diagram for ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ BaseFCN. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . typedef BasicFCN<DerivFunType,ModelFunType,UnBinData> ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::BaseFCN. Definition at line 45 of file LogLikelihoodFCN.h. ◆ BaseFunction. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . typedef BaseObjFunction::BaseFunction ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::BaseFunction. Definition at line 48 of file LogLikelihoodFCN.h. ◆ BaseObjFunction. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . typedef ::ROOT::Math::BasicFitMethodFunction<DerivFunType> ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::BaseObjFunction. Definition at line 47 of file LogLikelihoodFCN.h. ◆ IModelFunction. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . typedef ::ROOT::Math::IParamMultiFunctionTempl<T> ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::IModelFunction. Definition at line 50 of file LogLikelihoodFCN.h. ◆ T. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . typedef ModelFunType::BackendType ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::T. Definition at line 44 of file LogLikelihoodFCN.h. ◆ Type_t. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html:6683,Log,LogLikelihoodFCN,6683,doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html,1,['Log'],['LogLikelihoodFCN']
Testability,"Dataset[%s] : "",dsi.GetName())<< ""events in testing trees : "" << availableTesting << Endl;; 1130 Log() << kDEBUG << Form(""Dataset[%s] : "",dsi.GetName())<< ""events in unspecified trees : "" << availableUndefined << Endl;; 1131 Log() << kDEBUG << Form(""Dataset[%s] : "",dsi.GetName())<< ""requested for training : "" << requestedTraining << Endl;; 1132 ; 1133 if(presel_scale<1); 1134 Log() << "" ( "" << eventCounts[cls].nTrainingEventsRequested; 1135 << "" * "" << presel_scale << "" preselection efficiency)"" << Endl;; 1136 else; 1137 Log() << Endl;; 1138 Log() << kDEBUG << ""requested for testing : "" << requestedTesting;; 1139 if(presel_scale<1); 1140 Log() << "" ( "" << eventCounts[cls].nTestingEventsRequested; 1141 << "" * "" << presel_scale << "" preselection efficiency)"" << Endl;; 1142 else; 1143 Log() << Endl;; 1144 ; 1145 // nomenclature r = available training; 1146 // s = available testing; 1147 // u = available undefined; 1148 // R = requested training; 1149 // S = requested testing; 1150 // nR = to be used to select training events; 1151 // nS = to be used to select test events; 1152 // we have the constraint: nR + nS < r+s+u,; 1153 // since we can not use more events than we have; 1154 // free events: Nfree = u-Thet(R-r)-Thet(S-s); 1155 // nomenclature: Thet(x) = x, if x>0 else 0; 1156 // nR = max(R,r) + 0.5 * Nfree; 1157 // nS = max(S,s) + 0.5 * Nfree; 1158 // nR +nS = R+S + u-R+r-S+s = u+r+s= ok! for R>r; 1159 // nR +nS = r+S + u-S+s = u+r+s= ok! for r>R; 1160 ; 1161 // three different cases might occur here; 1162 //; 1163 // Case a; 1164 // requestedTraining and requestedTesting >0; 1165 // free events: Nfree = u-Thet(R-r)-Thet(S-s); 1166 // nR = Max(R,r) + 0.5 * Nfree; 1167 // nS = Max(S,s) + 0.5 * Nfree; 1168 //; 1169 // Case b; 1170 // exactly one of requestedTraining or requestedTesting >0; 1171 // assume training R >0; 1172 // nR = max(R,r); 1173 // nS = s+u+r-nR; 1174 // and s=nS; 1175 //; 1176 // Case c; 1177 // requestedTraining=0, requestedTesting=0; 1178 // Nfre",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataSetFactory_8cxx_source.html:50431,Log,Log,50431,doc/master/DataSetFactory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/DataSetFactory_8cxx_source.html,4,"['Log', 'test']","['Log', 'test', 'testing']"
Testability,"Dataset[datasetcvreg] : Create results for testing; : Dataset[datasetcvreg] : Evaluation of BDTG on testing sample; : Dataset[datasetcvreg] : Elapsed time for evaluation of 9999 events: 0.37 sec ; : Create variable histograms; : Create regression target histograms; : Create regression average deviation; : Results created; <HEADER> Factory : Evaluate all methods; : Evaluate regression method: BDTG; : TestRegression (testing); : Calculate regression for all events; : Elapsed time for evaluation of 9999 events: 0.37 sec ; : TestRegression (training); : Calculate regression for all events; : Elapsed time for evaluation of 9999 events: 0.369 sec ; <HEADER> TFHandler_BDTG : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : var1: 2.4948 1.4515 [ 0.00020069 5.0000 ]; : var2: 2.4837 1.4409 [ 0.00071490 5.0000 ]; : fvalue: 134.53 84.778 [ 1.6186 394.84 ]; : -----------------------------------------------------------; : ; : Evaluation results ranked by smallest RMS on test sample:; : (""Bias"" quotes the mean deviation of the regression from true target.; : ""MutInf"" is the ""Mutual Information"" between regression and target.; : Indicated by ""_T"" are the corresponding ""truncated"" quantities ob-; : tained when removing events deviating more than 2sigma from average.); : --------------------------------------------------------------------------------------------------; : --------------------------------------------------------------------------------------------------; : datasetcvreg BDTG : 0.0449 0.0259 2.28 1.70 | 3.108 3.190; : --------------------------------------------------------------------------------------------------; : ; : Evaluation results ranked by smallest RMS on training sample:; : (overtraining check); : --------------------------------------------------------------------------------------------------; : DataSet Name: MVA Method: <Bias> <Bias_T> RMS RMS_T | MutInf MutInf_T; : ---------------------------------------------",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVACrossValidationRegression_8C.html:13299,test,test,13299,doc/master/TMVACrossValidationRegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVACrossValidationRegression_8C.html,1,['test'],['test']
Testability,Dataset[datasetreg] : Create results for testing; : Dataset[datasetreg] : Evaluation of BDTG on testing sample; : Dataset[datasetreg] : Elapsed time for evaluation of 9000 events: 2.1 sec ; : Create variable histograms; : Create regression target histograms; : Create regression average deviation; : Results created; Factory : ␛[1mEvaluate all methods␛[0m; : Evaluate regression method: PDEFoam; : TestRegression (testing); : Calculate regression for all events; : Elapsed time for evaluation of 9000 events: 0.0447 sec ; : TestRegression (training); : Calculate regression for all events; : Elapsed time for evaluation of 1000 events: 0.00684 sec ; TFHandler_PDEFoam : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : var1: 3.3352 1.1893 [ 0.00020069 5.0000 ]; : var2: 2.4860 1.4342 [ 0.00071490 5.0000 ]; : fvalue: 163.91 83.651 [ 1.6186 394.84 ]; : -----------------------------------------------------------; : Evaluate regression method: KNN; : TestRegression (testing); : Calculate regression for all events; : Elapsed time for evaluation of 9000 events: 0.0954 sec ; : TestRegression (training); : Calculate regression for all events; : Elapsed time for evaluation of 1000 events: 0.0134 sec ; TFHandler_KNN : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : var1: 3.3352 1.1893 [ 0.00020069 5.0000 ]; : var2: 2.4860 1.4342 [ 0.00071490 5.0000 ]; : fvalue: 163.91 83.651 [ 1.6186 394.84 ]; : -----------------------------------------------------------; : Evaluate regression method: LD; : TestRegression (testing); : Calculate regression for all events; : Elapsed time for evaluation of 9000 events: 0.00655 sec ; : TestRegression (training); : Calculate regression for all events; : Elapsed time for evaluation of 1000 events: 0.00224 sec ; TFHandler_LD : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : var1: 3.3352 1.1893 [ 0.00020069 5.0000 ]; : va,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:129719,Test,TestRegression,129719,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,2,"['Test', 'test']","['TestRegression', 'testing']"
Testability,"DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions; IMethod * BookMVA (Types::EMVA method, const TString &weightfile);  books MVA method from weightfile ;  ; void DeclareOptions ();  declaration of configuration options ;  ; void DecodeVarNames (const std::string &varNames);  decodes ""name1:name2:..."" form ;  ; void DecodeVarNames (const TString &varNames);  decodes ""name1:name2:..."" form ;  ; TString GetMethodTypeFromFile (const TString &filename);  read the method type from the file ;  ; void Init (void);  default initialisation (no member variables) ;  ; MsgLogger & Log () const;  . Private Attributes; Bool_t fCalculateError;  error calculation mode ;  ; Bool_t fColor;  color mode ;  ; DataInputHandler fDataInputHandler;  ; DataSetInfo fDataSetInfo;  ; DataSetManager * fDataSetManager;  ; MsgLogger * fLogger;  ! message logger ;  ; std::map< TString, IMethod * > fMethodMap;  map of methods ;  ; Double_t fMvaEventError;  per-event error returned by MVA ;  ; Double_t fMvaEventErrorUpper;  per-event error returned by MVA ;  ; Bool_t fSilent;  silent mode ;  ; std::vector< Float_t > fTmpEvalVec;  temporary evaluation vector (if user input is v<double>) ;  ; Bool_t fVerbose;  verbosity ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL <",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Reader.html:18634,Log,Log,18634,doc/master/classTMVA_1_1Reader.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Reader.html,1,['Log'],['Log']
Testability,"DefNV(name, id);  ; #define ClassDefOverride(name, id);  ; #define ClassDefT(name, id);  This ClassDefT is strictly redundant and is kept only for backward compatibility. ;  ; #define ClassDefT2(name, Tmpl);  ; #define ClassDefTNV(name, id);  ; #define ClassImp(name)   ClassImpUnique(name,default);  ; #define ClassImp2T(name, Tmpl1, Tmpl2)   templateClassImp(name);  ; #define ClassImp3T(name, Tmpl1, Tmpl2, Tmpl3)   templateClassImp(name);  ; #define ClassImpT(name, Tmpl)   templateClassImp(name);  ; #define ClassImpUnique(name, key);  ; #define CLRBIT(n, i)   ((n) &= ~BIT(i));  ; #define NamespaceImp(name)   NamespaceImpUnique(name,default);  ; #define NamespaceImpUnique(name, key);  Macro for Namespace. ;  ; #define R__ADD_INCLUDE_PATH(PATH);  ; #define R__ADD_LIBRARY_PATH(PATH);  ; #define R__CLING_PTRCHECK(ONOFF);  ; #define R__LOAD_LIBRARY(LIBRARY);  ; #define R__UseDummy(name)    class _NAME2_(name,_c) { public: _NAME2_(name,_c)() { if (name) { } } };  ; #define RootClassVersion(name, VersionNumber);  ; #define RootStreamer(name, STREAMER);  ; #define SETBIT(n, i)   ((n) |= BIT(i));  ; #define templateClassImp(name)   templateClassImpUnique(name,default);  ; #define templateClassImpUnique(name, key);  ; #define TESTBIT(n, i)   ((Bool_t)(((n) & BIT(i)) != 0));  . Typedefs; typedef std::atomic< TClass * > atomic_TClass_ptr;  ; typedef void(* ClassConvStreamerFunc_t) (TBuffer &, void *, const TClass *);  ; typedef void(* ClassStreamerFunc_t) (TBuffer &, void *);  ; typedef void(* ROOT::DelArrFunc_t) (void *);  ; typedef void(* ROOT::DelFunc_t) (void *);  ; typedef void(* ROOT::DesFunc_t) (void *);  ; typedef TClass *(* DictFuncPtr_t) ();  ; typedef void(* ROOT::DirAutoAdd_t) (void *, TDirectory *);  ; typedef TClass *(* IsAGlobalFunc_t) (const TClass *, const void *obj);  ; typedef void(* MemberStreamerFunc_t) (TBuffer &, void *, Int_t);  ; typedef Long64_t(* ROOT::MergeFunc_t) (void *, TCollection *, TFileMergeInfo *);  ; typedef void *(* ROOT::NewArrFunc_t) (Lon",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Rtypes_8h.html:2898,TEST,TESTBIT,2898,doc/master/Rtypes_8h.html,https://root.cern,https://root.cern/doc/master/Rtypes_8h.html,2,['TEST'],['TESTBIT']
Testability,"Def_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTEveElement::TestCSCBits(UChar_t f) const; virtual voidTEveElement::UnHighlighted(); virtual voidTEveElement::UnSelected(); virtual voidTObject::UseCurrentStyle(); voidTEveElement::VizDB_Apply(const char* tag)MENU ; voidTEveElement::VizDB_Insert(const char* tag, Bool_t replace = kTRUE, Bool_t update = kTRUE)MENU ; voidTEveElement::VizDB_Reapply()MENU ; voidTEveElement::VizDB_UpdateModel(Bool_t update = kTRUE)MENU ; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTEveShape::WriteVizParams(ostream& out, const TString& var). protected:. virtual voidTEveElement::AnnihilateRecursively(); voidTAttBBox::AssertBBoxExtents(Float_t epsilon = 0.005); voidTAttBBox::BBoxCheckPoint(const Float_t* p); voidTAttBBox::BBoxCheckPoint(Float_t x, Float_t y, Float_t z); voidTAttBBox::BBoxClear(); voidTAttBBox::BBoxInit(Float_t infinity = 1e6); voidTAttBBox::BBoxZero(Float_t epsilon = 0, Float_t x = 0, Float_t y = 0, Float_t z = 0); TEveVectorCalcBaseVec(Float_t alpha) const; TEveVectorCalcBaseVec(Float_t eta, Float_t phi) const; TEveVectorCalcEtaPhiVec(Float_t eta, Float_t phi) const; virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; Bool_tIsInTransitionRegion() const; voidTObject::MakeZombie(); virtual voidTEveElement::PreDeleteElement(); virtual voidTEveElement::RemoveElementsInternal(); static const char*TEveElement::ToString(Bool_t b). private:. TEveJetCone(const TEveJetCone&); TEveJetCone&operator=(const TEveJetCone&). Data Members; public:. enum TEveElement::ECompoundSelectionColorBits { kCSCBImplySelectAllChildren; kCSCBTakeAnyParen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveJetCone.html:18367,Assert,AssertBBoxExtents,18367,root/html534/TEveJetCone.html,https://root.cern,https://root.cern/root/html534/TEveJetCone.html,1,['Assert'],['AssertBBoxExtents']
Testability,"Def_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTEveElement::TestCSCBits(UChar_t f) const; virtual voidTEveElement::UnHighlighted(); virtual voidTEveElement::UnSelected(); virtual voidTObject::UseCurrentStyle(); voidTEveElement::VizDB_Apply(const char* tag)MENU ; voidTEveElement::VizDB_Insert(const char* tag, Bool_t replace = kTRUE, Bool_t update = kTRUE)MENU ; voidTEveElement::VizDB_Reapply()MENU ; voidTEveElement::VizDB_UpdateModel(Bool_t update = kTRUE)MENU ; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTEveShape::WriteVizParams(ostream& out, const TString& var). protected:. virtual voidTEveElement::AnnihilateRecursively(); voidTAttBBox::AssertBBoxExtents(Float_t epsilon = 0.005); voidTAttBBox::BBoxCheckPoint(const Float_t* p); voidTAttBBox::BBoxCheckPoint(Float_t x, Float_t y, Float_t z); voidTAttBBox::BBoxClear(); voidTAttBBox::BBoxInit(Float_t infinity = 1e6); voidTAttBBox::BBoxZero(Float_t epsilon = 0, Float_t x = 0, Float_t y = 0, Float_t z = 0); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(); virtual voidTEveElement::PreDeleteElement(); virtual voidTEveElement::RemoveElementsInternal(); static const char*TEveElement::ToString(Bool_t b). private:. TEveBox(const TEveBox&); TEveBox&operator=(const TEveBox&). Data Members; public:. enum TEveElement::ECompoundSelectionColorBits { kCSCBImplySelectAllChildren; kCSCBTakeAnyParentAsMaster; kCSCBApplyMainColorToAllChildren; kCSCBApplyMainColorToMatchingChildren; kCSCBApplyMainTransparencyToAllChildren; kCSCBApplyMainTransparencyToMatchingChildren; };; enum TEveElement::EDestruct { kNo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveBox.html:17920,Assert,AssertBBoxExtents,17920,root/html534/TEveBox.html,https://root.cern,https://root.cern/root/html534/TEveBox.html,1,['Assert'],['AssertBBoxExtents']
Testability,"Default constructor specifying minimum and maximum radius. TGeoConeSeg(Double_t* params); Default constructor specifying minimum and maximum radius; param[0] = dz; param[1] = Rmin1; param[2] = Rmax1; param[3] = Rmin2; param[4] = Rmax2; param[5] = phi1; param[6] = phi2. ~TGeoConeSeg(); destructor. Double_t Capacity() const; Computes capacity of the shape in [length^3]. Double_t Capacity(Double_t dz, Double_t rmin1, Double_t rmax1, Double_t rmin2, Double_t rmax2, Double_t phi1, Double_t phi2); Computes capacity of the shape in [length^3]. void ComputeBBox(); compute bounding box of the tube segment. void ComputeNormal(Double_t* point, Double_t* dir, Double_t* norm); Compute normal to closest surface from POINT. void ComputeNormalS(Double_t* point, Double_t* dir, Double_t* norm, Double_t dz, Double_t rmin1, Double_t rmax1, Double_t rmin2, Double_t rmax2, Double_t c1, Double_t s1, Double_t c2, Double_t s2); Compute normal to closest surface from POINT. Bool_t Contains(Double_t* point) const; test if point is inside this sphere. Double_t DistToCons(Double_t* point, Double_t* dir, Double_t r1, Double_t z1, Double_t r2, Double_t z2, Double_t phi1, Double_t phi2); Static method to compute distance to a conical surface with :; - r1, z1 - radius and Z position of lower base; - r2, z2 - radius and Z position of upper base; - phi1, phi2 - phi limits. Double_t DistFromInsideS(Double_t* point, Double_t* dir, Double_t dz, Double_t rmin1, Double_t rmax1, Double_t rmin2, Double_t rmax2, Double_t c1, Double_t s1, Double_t c2, Double_t s2, Double_t cm, Double_t sm, Double_t cdfi); compute distance from inside point to surface of the tube segment. Double_t DistFromInside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; compute distance from inside point to surface of the tube segment. Double_t DistFromOutsideS(Double_t* point, Double_t* dir, Double_t dz, Double_t rmin1, Double_t rmax1, Double_t rmin2, Double_t rmax2, Double_t c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoConeSeg.html:14589,test,test,14589,root/html528/TGeoConeSeg.html,https://root.cern,https://root.cern/root/html528/TGeoConeSeg.html,3,['test'],['test']
Testability,"Definition DataLoader.h:194; TMVA::DataLoader::SetInputVariablesvoid SetInputVariables(std::vector< TString > *theVariables)deprecatedDefinition DataLoader.cxx:541; TMVA::DataLoader::fATreeTypeInt_t fATreeTypetype of event (=classIndex)Definition DataLoader.h:206; TMVA::DataLoader::fTestAssignTreestd::vector< TTree * > fTestAssignTreefor each class: tmp tree if user wants to assign the events directlyDefinition DataLoader.h:204; TMVA::DataLoader::fAnalysisTypeTypes::EAnalysisType fAnalysisTypethe training typeDefinition DataLoader.h:210; TMVA::DataLoader::SetCutvoid SetCut(const TString &cut, const TString &className="""")Definition DataLoader.cxx:575; TMVA::DataLoader::AddVariablevoid AddVariable(const TString &expression, const TString &title, const TString &unit, char type='F', Double_t min=0, Double_t max=0)user inserts discriminating variable in data set infoDefinition DataLoader.cxx:485; TMVA::DataLoader::PrepareFoldDataSetvoid PrepareFoldDataSet(CvSplit &s, UInt_t foldNumber, Types::ETreeType tt=Types::kTraining)Function for assigning the correct folds to the testing or training set.Definition DataLoader.cxx:670; TMVA::DataSetInfoClass that contains all the data information.Definition DataSetInfo.h:62; TMVA::DataSetManagerClass that contains all the data information.Definition DataSetManager.h:51; TMVA::Types::EAnalysisTypeEAnalysisTypeDefinition Types.h:126; TMVA::Types::ETreeTypeETreeTypeDefinition Types.h:142; TMVA::Types::kMaxTreeType@ kMaxTreeTypealso used as temporary storage for trees not yet assigned for testing;training...Definition Types.h:145; TMVA::Types::kTraining@ kTrainingDefinition Types.h:143; TStringBasic string class.Definition TString.h:139; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; bool; double; int; unsigned int; TMVAcreate variable transformationsDefinition GeneticMinimizer.h:22; TMVA::DataLoaderCopyvoid DataLoaderCopy(TMVA::DataLoader *des, TMVA::DataLoader *src); ttauto * ttDefinition textangle.C:16; Types.h. tmva",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataLoader_8h_source.html:20360,test,testing,20360,doc/master/DataLoader_8h_source.html,https://root.cern,https://root.cern/doc/master/DataLoader_8h_source.html,1,['test'],['testing']
Testability,"Definition FitMethodFunction.h:135; ROOT::Math::BasicFitMethodFunction< DerivFunType >::BaseFunctionFunctionType::BaseFunc BaseFunctionDefinition FitMethodFunction.h:43; ROOT::Math::BasicFitMethodFunction< DerivFunType >::UpdateNCallsvirtual void UpdateNCalls() constupdate number of callsDefinition FitMethodFunction.h:124; ROOT::Math::IParametricFunctionMultiDimTemplIParamFunction interface (abstract class) describing multi-dimensional parametric functions It is a d...Definition IParamFunction.h:108; double; xDouble_t x[n]Definition legend1.C:17; HFit::FitTFitResultPtr Fit(FitObject *h1, TF1 *f1, Foption_t &option, const ROOT::Math::MinimizerOptions &moption, const char *goption, ROOT::Fit::DataRange &range)Definition HFitImpl.cxx:133; ROOT::Fit::LogLikelihoodFunctionLogLikelihoodFCN< ROOT::Math::IMultiGenFunction, ROOT::Math::IParamMultiFunction > LogLikelihoodFunctionDefinition LogLikelihoodFCN.h:180; ROOT::Fit::LogLikelihoodGradFunctionLogLikelihoodFCN< ROOT::Math::IMultiGradFunction, ROOT::Math::IParamMultiFunction > LogLikelihoodGradFunctionDefinition LogLikelihoodFCN.h:181; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::EExecutionPolicyEExecutionPolicyDefinition EExecutionPolicy.hxx:5; ROOT::EExecutionPolicy::kSequential@ kSequential; ROOT::Fit::FitUtil::Evaluate::EvalLogLstatic double EvalLogL(const IModelFunctionTempl< double > &func, const UnBinData &data, const double *p, int iWeight, bool extended, unsigned int &nPoints, ::ROOT::EExecutionPolicy executionPolicy, unsigned nChunks=0)Definition FitUtil.h:1413; ROOT::Fit::FitUtil::Evaluate::EvalLogLGradientstatic void EvalLogLGradient(const IModelFunctionTempl< double > &func, const UnBinData &data, const double *p, double *g, unsigned int &nPoints, ::ROOT::EExecutionPolicy executionPolicy=::ROOT::EExecutionPolicy::kSequential, unsigned nChunks=0)Definition FitUtil.h:1464; ROOT::Fit::FitUtil::Evaluate::EvalPd",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/LogLikelihoodFCN_8h_source.html:13592,Log,LogLikelihoodGradFunctionLogLikelihoodFCN,13592,doc/master/LogLikelihoodFCN_8h_source.html,https://root.cern,https://root.cern/doc/master/LogLikelihoodFCN_8h_source.html,3,['Log'],"['LogLikelihoodFCN', 'LogLikelihoodGradFunctionDefinition', 'LogLikelihoodGradFunctionLogLikelihoodFCN']"
Testability,"Definition TCollection.cxx:407; TCollection::SetCurrentCollectionvoid SetCurrentCollection()Set this collection to be the globally accessible collection.Definition TCollection.cxx:688; TCollection::GetCurrentCollectionstatic TCollection * GetCurrentCollection()Return the globally accessible collection.Definition TCollection.cxx:680; TCollection::RecursiveRemovevoid RecursiveRemove(TObject *obj) overrideRemove object from this collection and recursively remove the object from all other objects (and coll...Definition TCollection.cxx:574; TCollection::CapacityInt_t Capacity() constDefinition TCollection.h:167; TCollection::RemoveAllvoid RemoveAll()Definition TCollection.h:204; TCollection::UseRWLockvirtual bool UseRWLock(Bool_t enable=true)Set this collection to use a RW lock upon access, making it thread safe.Definition TCollection.cxx:761; TCollection::fgEmptyingGarbagestatic Bool_t fgEmptyingGarbageDefinition TCollection.h:136; TCollection::AssertClassBool_t AssertClass(TClass *cl) constMake sure all objects in this collection inherit from class cl.Definition TCollection.cxx:223; TCollection::fgGarbageStackstatic Int_t fgGarbageStackDefinition TCollection.h:137; TCollection::lsvoid ls(Option_t *option="""") const overrideList (ls) all objects in this collection.Definition TCollection.cxx:382; TCollection::GrowByvirtual Int_t GrowBy(Int_t delta) constIncrease the collection's capacity by delta slots.Definition TCollection.cxx:360; TCollection::SetNamevoid SetName(const char *name)Definition TCollection.h:206; TCollection::Streamervoid Streamer(TBuffer &) overrideStream all objects in the collection to or from the I/O buffer.Definition TCollection.cxx:606; TCollection::kUseRWLock@ kUseRWLockDefinition TCollection.h:146; TCollection::kIsOwner@ kIsOwnerDefinition TCollection.h:144; TCollection::AddAllvirtual void AddAll(const TCollection *col)Add all objects from collection col to this collection.Definition TCollection.cxx:195; TCollection::GetNameconst char * GetName() c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCollection_8cxx_source.html:31630,Assert,AssertClass,31630,doc/master/TCollection_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCollection_8cxx_source.html,1,['Assert'],['AssertClass']
Testability,"Definition TList.h:83; TList::Deletevoid Delete(Option_t *option="""") overrideRemove all objects from the list AND delete all heap based objects.Definition TList.cxx:468; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TNamed::Copyvoid Copy(TObject &named) const overrideCopy this to obj.Definition TNamed.cxx:94; TNamed::SetTitlevirtual void SetTitle(const char *title="""")Set the title of the TNamed.Definition TNamed.cxx:164; TNamed::GetNameconst char * GetName() const overrideReturns name of object.Definition TNamed.h:47; TNamed::Streamervoid Streamer(TBuffer &) overrideStream an object of class TObject.; TObjStringCollectable string class.Definition TObjString.h:28; TObjString::SetStringvoid SetString(const char *s)Definition TObjString.h:45; TObjString::GetNameconst char * GetName() const overrideReturns name of object.Definition TObjString.h:38; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::TestBitR__ALWAYS_INLINE Bool_t TestBit(UInt_t f) constDefinition TObject.h:199; TObject::GetUniqueIDvirtual UInt_t GetUniqueID() constReturn the unique object id.Definition TObject.cxx:462; TObject::Warningvirtual void Warning(const char *method, const char *msgfmt,...) constIssue warning message.Definition TObject.cxx:979; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TObject::InheritsFromvirtual Bool_t InheritsFrom(const char *classname) constReturns kTRUE if object inherits from class ""classname"".Definition TObject.cxx:530; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::SetUniqueIDvirtual void SetUniqueID(UInt_t uid)Set the unique object id.Definition TObject.cxx:797; TObject::ResetBitvoid ResetBit(UInt_t f)Definition TObject.h:198; TObject::Infovirtual void Info(const char *method, const char *msgfmt,...) constIssue info message.Definition",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TAxis_8cxx_source.html:65000,Test,TestBit,65000,doc/master/TAxis_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TAxis_8cxx_source.html,1,['Test'],['TestBit']
Testability,"Definition at line 100 of file TSpectrum2Fit.h. ◆ fFixAmpY1. Bool_t* TSpectrum2Fit::fFixAmpY1. protected . [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 1D ridges in y direction (not fit). However they are present in the estimated functional ; Definition at line 101 of file TSpectrum2Fit.h. ◆ fFixAx. Bool_t TSpectrum2Fit::fFixAx. protected . logical value of ax parameter, which allows to fix the parameter (not to fit). ; Definition at line 114 of file TSpectrum2Fit.h. ◆ fFixAy. Bool_t TSpectrum2Fit::fFixAy. protected . logical value of ay parameter, which allows to fix the parameter (not to fit). ; Definition at line 115 of file TSpectrum2Fit.h. ◆ fFixBx. Bool_t TSpectrum2Fit::fFixBx. protected . logical value of b parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ; Definition at line 111 of file TSpectrum2Fit.h. ◆ fFixBy. Bool_t TSpectrum2Fit::fFixBy. protected . logical value of b parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ; Definition at line 112 of file TSpectrum2Fit.h. ◆ fFixPositionX. Bool_t* TSpectrum2Fit::fFixPositionX. protected . [fNPeaks] array of logical values which allow to fix appropriate x positions of 2D peaks (not fit). However they are present in the estimated functional ; Definition at line 95 of file TSpectrum2Fit.h. ◆ fFixPositionX1. Bool_t* TSpectrum2Fit::fFixPositionX1. protected . [fNPeaks] array of logical values which allow to fix appropriate x positions of 1D ridges (not fit). However they are present in the estimated functional ; Definition at line 97 of file TSpectrum2Fit.h. ◆ fFixPositionY. Bool_t* TSpectrum2Fit::fFixPositionY. protected . [fNPeaks] array of logical values which allow to fix appropriate y positions of 2D peaks (not fit). However they are present in the estimated functional ; Definition at line 96 of file TSpectrum2Fit.h. ◆ fFixPositionY1. Bool_t* TSpectrum2Fit::fFixPositionY1. protected . [fNPeaks] array o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2Fit.html:84407,log,logical,84407,doc/master/classTSpectrum2Fit.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html,1,['log'],['logical']
Testability,"Definition at line 218 of file Random.h. ◆ Gamma(). template<class Engine > . double ROOT::Math::Random< Engine >::Gamma ; (; double ; a, . double ; b . ). inline . Gamma distribution. ; Definition at line 116 of file Random.h. ◆ Gaus(). template<class Engine > . double ROOT::Math::Random< Engine >::Gaus ; (; double ; mean = 0, . double ; sigma = 1 . ). inline . Definition at line 111 of file Random.h. ◆ Integer(). template<class Engine > . uint64_t ROOT::Math::Random< Engine >::Integer ; (; ). inline . Definition at line 94 of file Random.h. ◆ Landau(). template<class Engine > . double ROOT::Math::Random< Engine >::Landau ; (; double ; m = 0, . double ; s = 1 . ). inline . Landau distribution. ; Definition at line 161 of file Random.h. ◆ Logistic(). template<class Engine > . double ROOT::Math::Random< Engine >::Logistic ; (; double ; a). inline . Logistic distribution. ; Definition at line 141 of file Random.h. ◆ LogNormal(). template<class Engine > . double ROOT::Math::Random< Engine >::LogNormal ; (; double ; zeta, . double ; sigma . ). inline . Log-normal distribution. ; Definition at line 126 of file Random.h. ◆ MaxInt(). template<class Engine > . static uint64_t ROOT::Math::Random< Engine >::MaxInt ; (; ). inlinestatic . Definition at line 98 of file Random.h. ◆ Multinomial(). template<class Engine > . std::vector< unsigned int > ROOT::Math::Random< Engine >::Multinomial ; (; unsigned int ; ntot, . const std::vector< double > & ; p . ). inline . Multinomial distribution. ; Definition at line 201 of file Random.h. ◆ NegativeBinomial(). template<class Engine > . unsigned int ROOT::Math::Random< Engine >::NegativeBinomial ; (; double ; n, . double ; prob . ). inline . Negative Binomial distribution First parameter is n, second is probability To be consistent with Random::Binomial. ; Definition at line 196 of file Random.h. ◆ operator()(). template<class Engine > . double ROOT::Math::Random< Engine >::operator() ; (; ). inline . Definition at line 90 of file Random",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1Random.html:6548,Log,LogNormal,6548,doc/master/classROOT_1_1Math_1_1Random.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Random.html,1,['Log'],['LogNormal']
Testability,"Definition at line 261 of file TGeoShape.cxx. ◆ Sizeof3D(). virtual void TGeoShape::Sizeof3D ; (; ); const. pure virtual . Implemented in TGeoArb8, TGeoBBox, TGeoCompositeShape, TGeoCone, TGeoConeSeg, TGeoHalfSpace, TGeoHype, TGeoPara, TGeoParaboloid, TGeoPcon, TGeoPgon, TGeoSphere, TGeoTessellated, TGeoTorus, TGeoTrd1, TGeoTrd2, TGeoTube, TGeoTubeSeg, TGeoXtru, and TGeoVGShape. ◆ Streamer(). void TGeoShape::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in TGeoTrap, TGeoShapeAssembly, TGeoSphere, TGeoTessellated, TGeoTorus, TGeoTrd1, TGeoTrd2, TGeoTube, TGeoTubeSeg, and TGeoXtru. ◆ StreamerNVirtual(). void TGeoShape::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 171 of file TGeoShape.h. ◆ TestShapeBit(). Bool_t TGeoShape::TestShapeBit ; (; UInt_t ; f); const. inline . Definition at line 167 of file TGeoShape.h. ◆ TestShapeBits(). Int_t TGeoShape::TestShapeBits ; (; UInt_t ; f); const. inline . Definition at line 168 of file TGeoShape.h. ◆ Tolerance(). static Double_t TGeoShape::Tolerance ; (; ). inlinestatic . Definition at line 90 of file TGeoShape.h. ◆ TransformPoints(). void TGeoShape::TransformPoints ; (; Double_t * ; points, . UInt_t ; NbPoints . ); const. protected . Tranform a set of points (LocalToMaster) ; Definition at line 590 of file TGeoShape.cxx. Member Data Documentation. ◆ fgEpsMch. Double_t TGeoShape::fgEpsMch = 2.220446049250313e-16. staticprivate . Definition at line 28 of file TGeoShape.h. ◆ fgTransform. TGeoMatrix * TGeoShape::fgTransform = nullptr. staticprivate . Definition at line 27 of file TGeoShape.h. ◆ fShapeBits. UInt_t TGeoShape::fShapeBits. protected . Definition at line 72 of file TGeoShape.h. ◆ fShapeId. Int_t TGeoShape::fShapeId. protected . Definition at line 71 of file TGeoShape.h. Libraries for TGeoShape:. [legend]; The documentation for this class was generated from the following files:; geom/geom/in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoShape.html:50673,Test,TestShapeBits,50673,doc/master/classTGeoShape.html,https://root.cern,https://root.cern/doc/master/classTGeoShape.html,1,['Test'],['TestShapeBits']
Testability,"Definition at line 362 of file TSessionViewer.cxx. ◆ ProcessMessage(). Bool_t TSessionServerFrame::ProcessMessage ; (; Longptr_t ; msg, . Longptr_t ; parm1, . Longptr_t ; parm2 . ). overridevirtual . Process messages for session server frame. ; Used to navigate between text entry fields. ; Reimplemented from TGCompositeFrame.; Definition at line 805 of file TSessionViewer.cxx. ◆ SetAddEnabled(). void TSessionServerFrame::SetAddEnabled ; (; Bool_t ; on = kTRUE). inline . Definition at line 209 of file TSessionViewer.h. ◆ SetAddress(). void TSessionServerFrame::SetAddress ; (; const char * ; str). inline . Definition at line 214 of file TSessionViewer.h. ◆ SetConfigText(). void TSessionServerFrame::SetConfigText ; (; const char * ; str). inline . Definition at line 217 of file TSessionViewer.h. ◆ SetConnectEnabled(). void TSessionServerFrame::SetConnectEnabled ; (; Bool_t ; on = kTRUE). inline . Definition at line 211 of file TSessionViewer.h. ◆ SetLogLevel(). void TSessionServerFrame::SetLogLevel ; (; Int_t ; log). inline . Definition at line 216 of file TSessionViewer.h. ◆ SetName(). void TSessionServerFrame::SetName ; (; const char * ; str). inlineoverridevirtual . Reimplemented from TGWindow.; Definition at line 213 of file TSessionViewer.h. ◆ SetPortNumber(). void TSessionServerFrame::SetPortNumber ; (; Int_t ; port). inline . Definition at line 215 of file TSessionViewer.h. ◆ SetSync(). void TSessionServerFrame::SetSync ; (; Bool_t ; sync). inline . Definition at line 219 of file TSessionViewer.h. ◆ SettingsChanged(). void TSessionServerFrame::SettingsChanged ; (; ). Settings have changed, update GUI accordingly. ; Definition at line 324 of file TSessionViewer.cxx. ◆ SetUserName(). void TSessionServerFrame::SetUserName ; (; const char * ; str). inline . Definition at line 218 of file TSessionViewer.h. ◆ Streamer(). void TSessionServerFrame::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGCompositeFrame.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSessionServerFrame.html:36482,log,log,36482,doc/master/classTSessionServerFrame.html,https://root.cern,https://root.cern/doc/master/classTSessionServerFrame.html,1,['log'],['log']
Testability,"Definition at line 39 of file TBenchmark.cxx. ◆ TBenchmark() [2/2]. TBenchmark::TBenchmark ; (; ). Benchmark default constructor. ; Definition at line 26 of file TBenchmark.cxx. ◆ ~TBenchmark(). TBenchmark::~TBenchmark ; (; ). virtual . Benchmark destructor. ; Definition at line 94 of file TBenchmark.cxx. Member Function Documentation. ◆ Class(). static TClass * TBenchmark::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TBenchmark::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TBenchmark::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 56 of file TBenchmark.h. ◆ DeclFileName(). static const char * TBenchmark::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 56 of file TBenchmark.h. ◆ GetBench(). Int_t TBenchmark::GetBench ; (; const char * ; name); const. Returns index of Benchmark name. ; Definition at line 106 of file TBenchmark.cxx. ◆ GetCpuTime(). Float_t TBenchmark::GetCpuTime ; (; const char * ; name). Returns Cpu time used by Benchmark name. ; Definition at line 117 of file TBenchmark.cxx. ◆ GetRealTime(). Float_t TBenchmark::GetRealTime ; (; const char * ; name). Returns Realtime used by Benchmark name. ; Definition at line 127 of file TBenchmark.cxx. ◆ IsA(). TClass * TBenchmark::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 56 of file TBenchmark.h. ◆ operator=(). TBenchmark & TBenchmark::operator= ; (; const TBenchmark & ; bm). protected . Assignment operator. ; Definition at line 64 of file TBenchmark.cxx. ◆ Print(). void TBenchmark::Print ; (; Option_t * ; name = """"); const. overridevirtual . Prints parameters of Benchmark name. ; Reimplemented from TObject.; Definition at line 137 of file TBenchmark.cxx. ◆ Reset(). void TBenchmark::Reset ; (; ). virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBenchmark.html:13590,Benchmark,Benchmark,13590,doc/master/classTBenchmark.html,https://root.cern,https://root.cern/doc/master/classTBenchmark.html,1,['Benchmark'],['Benchmark']
Testability,"Definition at line 464 of file RooMinimizer.cxx. ◆ initMinimizer(). void RooMinimizer::initMinimizer ; (; ). private . Definition at line 968 of file RooMinimizer.cxx. ◆ initMinimizerFcnDependentPart(). void RooMinimizer::initMinimizerFcnDependentPart ; (; double ; defaultErrorLevel). private . Initialize the part of the minimizer that is dependent on the function to be minimized. ; Definition at line 151 of file RooMinimizer.cxx. ◆ initMinimizerFirstPart(). void RooMinimizer::initMinimizerFirstPart ; (; ). private . Initialize the part of the minimizer that is independent of the function to be minimized. ; Definition at line 141 of file RooMinimizer.cxx. ◆ IsA(). TClass * RooMinimizer::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 247 of file RooMinimizer.h. ◆ lastMinuitFit(). RooFit::OwningPtr< RooFitResult > RooMinimizer::lastMinuitFit ; (; ). Definition at line 738 of file RooMinimizer.cxx. ◆ logfile(). std::ofstream * RooMinimizer::logfile ; (; ). private . Definition at line 827 of file RooMinimizer.cxx. ◆ makeEvalErrorContext(). std::unique_ptr< RooAbsReal::EvalErrorContext > RooMinimizer::makeEvalErrorContext ; (; ); const. private . Definition at line 840 of file RooMinimizer.cxx. ◆ maxFCN(). double & RooMinimizer::maxFCN ; (; ). private . Definition at line 831 of file RooMinimizer.cxx. ◆ migrad(). int RooMinimizer::migrad ; (; ). Execute MIGRAD. ; Changes in parameter values and calculated errors are automatically propagated back the RooRealVars representing the floating parameters in the MINUIT operation. ; Definition at line 318 of file RooMinimizer.cxx. ◆ minimize(). int RooMinimizer::minimize ; (; const char * ; type, . const char * ; alg = nullptr . ). Minimise the function passed in the constructor. ; Parameters. [in]typeType of fitter to use, e.g. ""Minuit"" ""Minuit2"". Passing an empty string will select the default minimizer type of the RooMinimizer, as returned by",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMinimizer.html:22902,log,logfile,22902,doc/master/classRooMinimizer.html,https://root.cern,https://root.cern/doc/master/classRooMinimizer.html,1,['log'],['logfile']
Testability,"Definition at line 48 of file LogLikelihoodFCN.h. ◆ BaseObjFunction. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . typedef ::ROOT::Math::BasicFitMethodFunction<DerivFunType> ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::BaseObjFunction. Definition at line 47 of file LogLikelihoodFCN.h. ◆ IModelFunction. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . typedef ::ROOT::Math::IParamMultiFunctionTempl<T> ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::IModelFunction. Definition at line 50 of file LogLikelihoodFCN.h. ◆ T. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . typedef ModelFunType::BackendType ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::T. Definition at line 44 of file LogLikelihoodFCN.h. ◆ Type_t. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . typedef BaseObjFunction::Type_t ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::Type_t. Definition at line 51 of file LogLikelihoodFCN.h. Constructor & Destructor Documentation. ◆ LogLikelihoodFCN() [1/3]. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::LogLikelihoodFCN ; (; const std::shared_ptr< UnBinData > & ; data, . const std::shared_ptr< IModelFunction > & ; func, . int ; weight = 0, . bool ; extended = false, . const ::ROOT::EExecutionPolicy & ; executionPolicy = ::ROOT::EExecutionPolicy::kSequential . ). inline . Constructor from unbin data set and model function (pdf) ; Definition at line 57 of file LogLikelihoodFCN.h. ◆ LogLikelihoodFCN() [2/3]. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::LogLikelihoodFCN ; (; const UnBinData & ; data, . const IModelFunction & ; func, . int ; weight = 0, . bool ; extended = false, . co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html:7740,Log,LogLikelihoodFCN,7740,doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html,1,['Log'],['LogLikelihoodFCN']
Testability,"Definition at line 5627 of file TSessionViewer.cxx. ◆ QueryResultReady(). void TSessionViewer::QueryResultReady ; (; char * ; query). Handle signal ""query result ready"" coming from Proof session. ; Definition at line 5067 of file TSessionViewer.cxx. ◆ ReadConfiguration(). void TSessionViewer::ReadConfiguration ; (; const char * ; filename = nullptr). Read configuration file and populate list of sessions list of queries and list of packages. ; Read and set also global options as feedback histos. ; Definition at line 3667 of file TSessionViewer.cxx. ◆ ResetSession(). void TSessionViewer::ResetSession ; (; ). Reset Proof session. ; Definition at line 5159 of file TSessionViewer.cxx. ◆ SetBusy(). void TSessionViewer::SetBusy ; (; Bool_t ; busy = kTRUE). inline . Definition at line 619 of file TSessionViewer.h. ◆ SetChangePic(). void TSessionViewer::SetChangePic ; (; Bool_t ; change). inline . Definition at line 620 of file TSessionViewer.h. ◆ SetLogWindow(). void TSessionViewer::SetLogWindow ; (; TSessionLogView * ; log). inline . Definition at line 621 of file TSessionViewer.h. ◆ ShowEnabledPackages(). void TSessionViewer::ShowEnabledPackages ; (; ). Query list of enabled packages from proof and display it into a new text window. ; Definition at line 5372 of file TSessionViewer.cxx. ◆ ShowInfo(). void TSessionViewer::ShowInfo ; (; const char * ; txt). Display text in status bar. ; Definition at line 5444 of file TSessionViewer.cxx. ◆ ShowLog(). void TSessionViewer::ShowLog ; (; const char * ; queryref). Display the content of the temporary log file for queryref into a new text window. ; Definition at line 5410 of file TSessionViewer.cxx. ◆ ShowPackages(). void TSessionViewer::ShowPackages ; (; ). Query the list of uploaded packages from proof and display it into a new text window. ; Definition at line 5287 of file TSessionViewer.cxx. ◆ ShowStatus(). void TSessionViewer::ShowStatus ; (; ). Retrieve and display Proof status. ; Definition at line 5454 of file TSessionViewe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSessionViewer.html:48630,log,log,48630,doc/master/classTSessionViewer.html,https://root.cern,https://root.cern/doc/master/classTSessionViewer.html,1,['log'],['log']
Testability,"Definition at line 68 of file TProofOutputFile.cxx. ◆ TProofOutputFile() [4/4]. TProofOutputFile::TProofOutputFile ; (; const char * ; path, . ERunType ; type, . UInt_t ; opt = kRemote, . const char * ; dsname = 0 . ). Main constructor. ; Definition at line 40 of file TProofOutputFile.cxx. ◆ ~TProofOutputFile(). TProofOutputFile::~TProofOutputFile ; (; ). override . Main destructor. ; Definition at line 232 of file TProofOutputFile.cxx. Member Function Documentation. ◆ AddFile(). void TProofOutputFile::AddFile ; (; TFileMerger * ; merger, . const char * ; path . ). private . Add file to merger, checking the result. ; Definition at line 467 of file TProofOutputFile.cxx. ◆ AdoptFile(). Int_t TProofOutputFile::AdoptFile ; (; TFile * ; f). Adopt a file already open. ; Return 0 if OK, -1 in case of failure ; Definition at line 274 of file TProofOutputFile.cxx. ◆ AssertDir(). Int_t TProofOutputFile::AssertDir ; (; const char * ; dirpath). static . Assert directory path 'dirpath', with the ownership of the last already existing subpath. ; Return 0 on success, -1 on error ; Definition at line 515 of file TProofOutputFile.cxx. ◆ Class(). static TClass * TProofOutputFile::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TProofOutputFile::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TProofOutputFile::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 124 of file TProofOutputFile.h. ◆ DeclFileName(). static const char * TProofOutputFile::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 124 of file TProofOutputFile.h. ◆ GetDir(). const char * TProofOutputFile::GetDir ; (; Bool_t ; raw = kFALSE); const. inline . Definition at line 96 of file TProofOutputFile.h. ◆ GetFileCollection(). TFileCollection * TProofOutputFile::GetFileCollection ; (; ). Get instance of the file",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofOutputFile.html:16620,Assert,Assert,16620,doc/master/classTProofOutputFile.html,https://root.cern,https://root.cern/doc/master/classTProofOutputFile.html,1,['Assert'],['Assert']
Testability,"Definition legend1.C:17; eyDouble_t ey[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; exDouble_t ex[n]Definition legend1.C:17; c2return c2Definition legend2.C:14; TMath::NintInt_t Nint(T x)Round to nearest integer. Rounds half integers to the nearest even integer.Definition TMath.h:693; TMath::MaxShort_t Max(Short_t a, Short_t b)Returns the largest of a and b.Definition TMathBase.h:250; TMath::ProbDouble_t Prob(Double_t chi2, Int_t ndf)Computation of the probability for a certain Chi-squared (chi2) and number of degrees of freedom (ndf...Definition TMath.cxx:637; TMath::IsInsideBool_t IsInside(T xp, T yp, Int_t np, T *x, T *y)Function which returns kTRUE if point xp,yp lies inside the polygon defined by the np points in array...Definition TMath.h:1233; TMath::ATanDouble_t ATan(Double_t)Returns the principal value of the arc tangent of x, expressed in radians.Definition TMath.h:640; TMath::PiOver2constexpr Double_t PiOver2()Definition TMath.h:51; TMath::SqrtDouble_t Sqrt(Double_t x)Returns the square root of x.Definition TMath.h:662; TMath::PowerLongDouble_t Power(LongDouble_t x, LongDouble_t y)Returns x raised to the power y.Definition TMath.h:721; TMath::MinShort_t Min(Short_t a, Short_t b)Returns the smallest of a and b.Definition TMathBase.h:198; TMath::CosDouble_t Cos(Double_t)Returns the cosine of an angle of x radians.Definition TMath.h:594; TMath::Piconstexpr Double_t Pi()Definition TMath.h:37; TMath::SinDouble_t Sin(Double_t)Returns the sine of an angle of x radians.Definition TMath.h:588; TMath::Log10Double_t Log10(Double_t x)Returns the common (base-10) logarithm of x.Definition TMath.h:762; TMath::AbsShort_t Abs(Short_t d)Returns the absolute value of parameter Short_t d.Definition TMathBase.h:123; arrowDefinition RArrowDS.hxx:17; lTLine lDefinition textangle.C:4; DrawMarkerm DrawMarker(0.1, 0.1). histhistpaintersrcTGraphPainter.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:35 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphPainter_8cxx_source.html:223309,log,logarithm,223309,doc/master/TGraphPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphPainter_8cxx_source.html,1,['log'],['logarithm']
Testability,"Deleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Int_tfDataSetInfoVrsVersion of the dataset info 'table'; Int_tfFileInfoVrsVersion of the file info 'table'; TStringTNamed::fNameobject identifier; Int_tfSummaryVrsVersion of the summary 'table'; TStringTNamed::fTitleobject title; static TProofMonSender::EConfigBitskSendDataSetInfo; static TProofMonSender::EConfigBitskSendFileInfo; static TProofMonSender::EConfigBitskSendSummary. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Int_t SetSendOptions(const char* ); Parse send options from string 'sendopts'.; Format is:; ""[-,+]S[n]|[-,+]D[m]|[-,+]F[j]""; where:; 1. The big letter refers to the 'table' following. S table with summary log; D table with dataset info; F table files info. 2. The '-,+' in front disables/enables the related table; if; absent '+' is assumed. 3. The number after the letter is the version of the related; table. Returns -1 if nothing is enabled; 0 otherwise. TProofMonSender(const char* n = ""Abstract"", const char* t = ""ProofMonSender""). virtual ~TProofMonSender(); { }. Bool_t IsValid() const; Object validity. { return (TestBit(TObject::kInvalidObject)) ? kFALSE : kTRUE; }. Int_t SendSummary(TList* , const char* ); Summary record. Int_t SendDataSetInfo(TDSet* , TList* , const char* , const char* ); Information about the dataset(s) processed. Int_t SendFileInfo(TDSet* , TList* , const char* , const char* ); Detailed information about files. » Author: G.Ganis July 2011 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/proofplayer:$Id$ » Last generated: 2015-06-30 15:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofMonSender.html:7531,Test,TestBit,7531,root/html602/TProofMonSender.html,https://root.cern,https://root.cern/root/html602/TProofMonSender.html,1,['Test'],['TestBit']
Testability,"Deleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Int_tfDataSetInfoVrsVersion of the dataset info 'table'; Int_tfFileInfoVrsVersion of the file info 'table'; TStringTNamed::fNameobject identifier; Int_tfSummaryVrsVersion of the summary 'table'; TStringTNamed::fTitleobject title; static TProofMonSender::EConfigBitskSendDataSetInfo; static TProofMonSender::EConfigBitskSendFileInfo; static TProofMonSender::EConfigBitskSendSummary. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Int_t SetSendOptions(const char* ); Parse send options from string 'sendopts'.; Format is:; ""[-,+]S[n]|[-,+]D[m]|[-,+]F[j]""; where:; 1. The big letter refers to the 'table' following. S table with summary log; D table with dataset info; F table files info. 2. The '-,+' in front disables/enables the related table; if; absent '+' is assumed. 3. The number after the letter is the version of the related; table. Returns -1 if nothing is enabled; 0 otherwise. TProofMonSender(const char* n = ""Abstract"", const char* t = ""ProofMonSender""). virtual ~TProofMonSender(); { }. Bool_t IsValid() const; Object validity. { return (TestBit(TObject::kInvalidObject)) ? kFALSE : kTRUE; }. Int_t SendSummary(TList* , const char* ); Summary record. Int_t SendDataSetInfo(TDSet* , TList* , const char* , const char* ); Information about the dataset(s) processed. Int_t SendFileInfo(TDSet* , TList* , const char* , const char* ); Detailed information about files. » Author: G.Ganis July 2011 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/proofplayer:$Id$ » Last generated: 2015-09-08 17:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TProofMonSender.html:7531,Test,TestBit,7531,root/html604/TProofMonSender.html,https://root.cern,https://root.cern/root/html604/TProofMonSender.html,1,['Test'],['TestBit']
Testability,"Dense(2, activation=""sigmoid"")); model.compile(loss=""binary_crossentropy"", optimizer=Adam(learning_rate=0.001), weighted_metrics=[""accuracy""]); model.save(""model_higgs.h5""); model.summary(); ; if not os.path.exists(""model_higgs.h5""):; raise FileNotFoundError(""Error creating Keras model file - skip using Keras""); else:; # book PyKeras method only if Keras model could be created; ROOT.Info(""TMVA_Higgs_Classification"", ""Booking Deep Learning keras model""); factory.BookMethod(; loader,; TMVA.Types.kPyKeras,; ""PyKeras"",; H=True,; V=False,; VarTransform=None,; FilenameModel=""model_higgs.h5"",; FilenameTrainedModel=""trained_model_higgs.h5"",; NumEpochs=20,; BatchSize=100,; ); # GpuOptions=""allow_growth=True"",; # ) # needed for RTX NVidia card and to avoid TF allocates all GPU memory; ; ; ## Train Methods; ; # Here we train all the previously booked methods.; ; factory.TrainAllMethods(); ## Test all methods; ; # Now we test and evaluate all methods using the test data set; factory.TestAllMethods(); ; factory.EvaluateAllMethods(); ; # after we get the ROC curve and we display; ; c1 = factory.GetROCCurve(loader); c1.Draw(); # at the end we close the output file which contains the evaluation result of all methods and it can be used by TMVAGUI; # to display additional plots; ; outputFile.Close(); TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; TFile::SetCacheFileDirstatic Bool_t SetCacheFileDir(std::string_view cacheDir, Bool_t operateDisconnected=kTRUE, Bool_t forceCacheread=kFALSE)Sets the directory where to locally stage/cache remote files.Definition TFile.cxx:4626; TMVA::DataLoaderDefinition DataLoader.h:50; TMVA::FactoryThis is the main MVA steering class.Definition Factory.h:80; TMVA::PyMethodBase::PyInitializestatic void PyInitialize()Initialize Python interpreter.Definition PyMethodBase.cxx:15",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__Higgs__Classification_8py.html:67882,Test,TestAllMethods,67882,doc/master/TMVA__Higgs__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__Higgs__Classification_8py.html,1,['Test'],['TestAllMethods']
Testability,"Density, and TMVA::PDEFoamTargetDensity.; Definition at line 81 of file PDEFoamDensityBase.h. ◆ Log(). MsgLogger & TMVA::PDEFoamDensityBase::Log ; (; ); const. inlineprotected . Definition at line 57 of file PDEFoamDensityBase.h. ◆ SetBox(). void TMVA::PDEFoamDensityBase::SetBox ; (; std::vector< Double_t > ; box). inline . Definition at line 72 of file PDEFoamDensityBase.h. ◆ Streamer(). virtual void TMVA::PDEFoamDensityBase::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in TMVA::PDEFoamDecisionTreeDensity, TMVA::PDEFoamDiscriminantDensity, TMVA::PDEFoamEventDensity, and TMVA::PDEFoamTargetDensity. ◆ StreamerNVirtual(). void TMVA::PDEFoamDensityBase::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 81 of file PDEFoamDensityBase.h. Member Data Documentation. ◆ fBox. std::vector<Double_t> TMVA::PDEFoamDensityBase::fBox. private . range-searching box ; Definition at line 49 of file PDEFoamDensityBase.h. ◆ fBoxHasChanged. Bool_t TMVA::PDEFoamDensityBase::fBoxHasChanged. private . range searching box has changed ; Definition at line 51 of file PDEFoamDensityBase.h. ◆ fBoxVolume. Double_t TMVA::PDEFoamDensityBase::fBoxVolume. private . volume of range searching box ; Definition at line 50 of file PDEFoamDensityBase.h. ◆ fBst. BinarySearchTree* TMVA::PDEFoamDensityBase::fBst. protected . Binary tree to find events within a volume. ; Definition at line 54 of file PDEFoamDensityBase.h. ◆ fLogger. MsgLogger* TMVA::PDEFoamDensityBase::fLogger. mutableprotected . ! message logger ; Definition at line 55 of file PDEFoamDensityBase.h. Libraries for TMVA::PDEFoamDensityBase:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/PDEFoamDensityBase.h; tmva/tmva/src/PDEFoamDensityBase.cxx. TMVAPDEFoamDensityBase. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:39 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PDEFoamDensityBase.html:16249,log,logger,16249,doc/master/classTMVA_1_1PDEFoamDensityBase.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PDEFoamDensityBase.html,1,['log'],['logger']
Testability,"DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . typedef ModelFunType::BackendType ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::T. Definition at line 44 of file LogLikelihoodFCN.h. ◆ Type_t. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . typedef BaseObjFunction::Type_t ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::Type_t. Definition at line 51 of file LogLikelihoodFCN.h. Constructor & Destructor Documentation. ◆ LogLikelihoodFCN() [1/3]. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::LogLikelihoodFCN ; (; const std::shared_ptr< UnBinData > & ; data, . const std::shared_ptr< IModelFunction > & ; func, . int ; weight = 0, . bool ; extended = false, . const ::ROOT::EExecutionPolicy & ; executionPolicy = ::ROOT::EExecutionPolicy::kSequential . ). inline . Constructor from unbin data set and model function (pdf) ; Definition at line 57 of file LogLikelihoodFCN.h. ◆ LogLikelihoodFCN() [2/3]. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::LogLikelihoodFCN ; (; const UnBinData & ; data, . const IModelFunction & ; func, . int ; weight = 0, . bool ; extended = false, . const ::ROOT::EExecutionPolicy & ; executionPolicy = ::ROOT::EExecutionPolicy::kSequential . ). inline . Constructor from unbin data set and model function (pdf) for object managed by users. ; Definition at line 69 of file LogLikelihoodFCN.h. ◆ ~LogLikelihoodFCN(). template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . virtual ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::~LogLikelihoodFCN ; (; ). inlinevirtual . Destructor (no operations) ; Definition at line 81 of file LogLikelihoodFCN.h. ◆ LogLikelihoodFCN() [3/3]. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMult",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html:8421,Log,LogLikelihoodFCN,8421,doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html,1,['Log'],['LogLikelihoodFCN']
Testability,Derivator.cxx;  RootFinder.cxx;  SparseData.cxx;  SpecFuncCephes.cxx;  SpecFuncCephes.h;  SpecFuncCephesInv.cxx;  SpecFuncMathCore.cxx;  StdEngine.cxx;  TComplex.cxx;  TKDTree.cxx;  TKDTreeBinning.cxx;  TMath.cxx;  TRandom.cxx;  TRandom1.cxx;  TRandom2.cxx;  TRandom3.cxx;  TRandomGen.cxx;  triangle.c;  triangle.h;  TStatistic.cxx;  UnBinData.cxx;  ► test;  ► fit;  GaussFunction.h;  MinimizerTypes.h;  SparseDataComparer.cxx;  SparseFit3.cxx;  SparseFit4.cxx;  testFit.cxx;  testFitPerf.cxx;  testGraphFit.cxx;  testMinim.cxx;  testRooFit.cxx;  WrapperRooPdf.h;  binarySearchTime.cxx;  kDTreeTest.cxx;  newKDTreeTest.cxx;  stdsort.cxx;  stressGoFTest.cxx;  stressTF1.cxx;  stressTMath.cxx;  testAnalyticalIntegrals.cxx;  testBinarySearch.cxx;  testDistSampler.cxx;  testIntegration.cxx;  testIntegrationMultiDim.cxx;  testKahan.cxx;  testkdTreeBinning.cxx;  testMathRandom.cxx;  testRootFinder.cxx;  testSampleQuantiles.cxx;  testSortOrder.cxx;  testSpecFuncBeta.cxx;  testSpecFuncBetaI.cxx;  testSpecFuncErf.cxx;  testSpecFuncGamma.cxx;  testSpecFuncSiCi.cxx;  testTMath.cxx;  testTStatistic.cxx;  ► v7;  ► inc;  ► ROOT;  TFit.hxx;  ► mathmore;  ► inc;  ► Math;  ChebyshevApprox.h;  Derivator.h;  DistFuncMathMore.h;  GSLFunctionAdapter.h;  GSLIntegrator.h;  GSLMCIntegrator.h;  GSLMinimizer.h;  GSLMinimizer1D.h;  GSLMultiRootFinder.h;  GSLNLSMinimizer.h;  GSLQuasiRandom.h;  GSLRandom.h;  GSLRandomFunctions.h;  GSLRndmEngines.h;  GSLRootFinder.h;  GSLRootFinderDeriv.h;  GSLRootHelper.h;  GSLSimAnMinimizer.h;  GSLSimAnnealing.h;  IntegrationTypes.h;  InterpolationTypes.h;  Interpolator.h;  KelvinFunctions.h;  LinkDef_Func.h;  LinkDef_RootFinding.h;  MCIntegrationTypes.h;  MCParameters.h;  MultiNumGradFunction.h;  MultiRootFinder.h;  ParamFunction.h;  PdfFuncMathMore.h;  Polynomial.h;  QuantFuncMathMore.h;  QuasiRandom.h;  RootFinderAlgorithms.h;  SpecFuncMathMore.h;  Vavilov.h;  VavilovAccurate.h;  VavilovAccurateCdf.h;  VavilovAccuratePdf.h;  VavilovAccurateQuantile.h;  VavilovFast.h,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/files.html:45337,test,testSpecFuncErf,45337,doc/v610/files.html,https://root.cern,https://root.cern/doc/v610/files.html,1,['test'],['testSpecFuncErf']
Testability,"Derived = kFALSE) const; voidlogEvalError(const char* message, const char* serverValueString = 0) const; static voidlogEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tmaxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooMoment*mean(RooRealVar& obs); RooMoment*mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tminTrialSamples(const RooArgSet&) const; RooMoment*moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tnumEvalErrorItems(); static Int_tnumEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); Bool_toperator==(Double_t value) const; virtual Bool_toperator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::owned",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsReal.html:16350,test,testArg,16350,root/html526/RooAbsReal.html,https://root.cern,https://root.cern/root/html526/RooAbsReal.html,2,['test'],['testArg']
Testability,"Derived = kFALSE) const; voidlogEvalError(const char* message, const char* serverValueString = 0) const; static voidlogEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tmaxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooMoment*mean(RooRealVar& obs); RooMoment*mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tminTrialSamples(const RooArgSet&) const; RooMoment*moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tnumEvalErrorItems(); static Int_tnumEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); Bool_toperator==(Double_t value) const; virtual Bool_toperator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooAbsReal.html:16729,test,testArg,16729,root/html530/RooAbsReal.html,https://root.cern,https://root.cern/root/html530/RooAbsReal.html,1,['test'],['testArg']
Testability,"Derived() const; virtual Bool_tRooAbsPdf::isDirectGenSafe(const RooAbsArg& arg) const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tRooAbsArg::isFundamental() const; virtual Bool_tRooAbsArg::isLValue() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; Int_tloadDataSet(RooDataSet& data, TString options); voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooMoment*RooAbsReal::mean(RooRealVar& obs); RooMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); Int_tRooAbsPdf::minDimNormValueCaching() const; virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/Roo2DKeysPdf.html:20049,log,logEvalError,20049,root/html532/Roo2DKeysPdf.html,https://root.cern,https://root.cern/root/html532/Roo2DKeysPdf.html,1,['log'],['logEvalError']
Testability,"Derived() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tRooAbsArg::isFundamental() const; Bool_tisHidden() const; virtual Bool_tRooAbsArg::isLValue() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooMoment*RooAbsReal::mean(RooRealVar& obs); RooMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsHiddenReal.html:16552,log,logEvalError,16552,root/html532/RooAbsHiddenReal.html,https://root.cern,https://root.cern/root/html532/RooAbsHiddenReal.html,1,['log'],['logEvalError']
Testability,"Derived() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tRooAbsArg::isFundamental() const; virtual Bool_tRooAbsArg::isLValue() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; const RooAbsReal&ixF(); voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsReal*mean(); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::O",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooMoment.html:16767,log,logEvalError,16767,root/html532/RooMoment.html,https://root.cern,https://root.cern/root/html532/RooMoment.html,1,['log'],['logEvalError']
Testability,"Derived() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tRooAbsArg::isFundamental() const; virtual Bool_tRooAbsArg::isLValue() const; Bool_tTObject::IsOnHeap() const; Bool_tisSealed() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooMoment*RooAbsReal::mean(RooRealVar& obs); RooMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsOptTestStatistic.html:17765,log,logEvalError,17765,root/html532/RooAbsOptTestStatistic.html,https://root.cern,https://root.cern/root/html532/RooAbsOptTestStatistic.html,1,['log'],['logEvalError']
Testability,"Describes a rotation of objects of the TVector3 class ;  CTRotationRow;  CTRotMatrixManages a detector rotation matrix ;  CTRSA_fun;  CTRWLock;  CTS3HTTPRequest;  CTS3WebFile;  CTSapDBResult;  CTSapDBRow;  CTSapDBServer;  CTSAXParserTSAXParser is a subclass of TXMLParser, it is a wraper class to libxml library ;  CTSecContext;  CTSecContextCleanup;  CTSelectorA TSelector object is used by the TTree::Draw, TTree::Scan, TTree::Process to navigate in a TTree and make selections ;  CTSelectorCintThis class is a special version of TSelector for user interpreted classes ;  CTSelectorDrawA specialized TSelector for TTree::Draw ;  CTSelectorEntriesThe class is derived from the ROOT class TSelector ;  CTSelectorListA TList derived class that makes sure that objects added to it are not linked to the currently open file (like histograms, eventlists and trees) ;  CTSelectorScalarNamed scalar type, based on Long64_t, streamable, storable and mergable ;  CTSelEventSelector for PROOF I/O benchmark test ;  CTSelEventGenSelector for event file generation ;  CTSelHandleDataSetPROOF selector for file cache release ;  CTSelHistPROOF selector for CPU-intensive benchmark test ;  CTSelVerifyDataSetSelector to verify dataset in parallel on workers ;  CTSemaphore;  CTSeqCollectionSequenceable collection abstract base class ;  CTServerSocket;  CTSessionDescription;  CTSessionFrame;  CTSessionInputFrame;  CTSessionLogView;  CTSessionOutputFrame;  CTSessionQueryFrame;  CTSessionServerFrame;  CTSessionViewer;  CTShapeThis is the base class for all geometry shapes ;  CTShutdownTimer;  CTSignalHandler;  CTSimpleAnalysisA TSimpleAnalysis object creates histograms from a TChain ;  CTSlaveClass describing a PROOF worker server ;  CTSlaveInfo;  CTSlaveLiteVersion of TSlave for local worker servers ;  CTSliderA specialized TPad including a TSliderBox object ;  CTSliderBoxThe moving box in a TSlider ;  CTSocket;  CTSortedListA sorted doubly linked list ;  CTSpectrumAdvanced Spectra Processing ;  CTSpect",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:185524,test,test,185524,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,2,['test'],['test']
Testability,"Destructor. void Build(TSessionViewer* gui); Build query information frame. void Modified(Bool_t mod = kTRUE); Notify changes in query editor settings. void Feedback(TList* objs); Feedback function connected to Feedback signal.; Used to update feedback histograms. void UpdateHistos(TList* objs); Update feedback histograms. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); New version of Progress (just forward to the old version; for the time being). void ProgressLocal(Long64_t total, Long64_t processed); Update progress bar and status labels. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void ResetProgressDialog(const char* selec, Int_t files, Long64_t first, Long64_t entries); Reset progress frame information fields. void OnBtnFinalize(); Finalize query. void OnBtnStop(); Stop processing query. void OnBtnShowLog(); Show query log. void OnBtnRetrieve(); Retrieve query. void OnBtnAbort(); Abort processing query. void OnBtnSubmit(); Submit query. void UpdateButtons(TQueryDescription* desc); Update buttons state for the current query status. void UpdateInfos(); Update query information (header) text view. TGTab * GetTab() const; { return fTab; }. TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h). TCanvas * GetStatsCanvas() const; { return fStatsCanvas; }. TEditQueryFrame * GetQueryEditFrame() const; { return fFD; }. void Progress(Long64_t total, Long64_t processed). » Author: Marek Biskup, Jakub Madejczyk, Bertrand Bellenot 10/08/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-06-02 16:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TSessionQueryFrame.html:23312,log,log,23312,root/html604/TSessionQueryFrame.html,https://root.cern,https://root.cern/root/html604/TSessionQueryFrame.html,1,['log'],['log']
Testability,"Destructor. void Build(TSessionViewer* gui); Build query information frame. void Modified(Bool_t mod = kTRUE); Notify changes in query editor settings. void Feedback(TList* objs); Feedback function connected to Feedback signal.; Used to update feedback histograms. void UpdateHistos(TList* objs); Update feedback histograms. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); New version of Progress (just forward to the old version; for the time being). void ProgressLocal(Long64_t total, Long64_t processed); Update progress bar and status labels. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void ResetProgressDialog(const char* selec, Int_t files, Long64_t first, Long64_t entries); Reset progress frame information fields. void OnBtnFinalize(); Finalize query. void OnBtnStop(); Stop processing query. void OnBtnShowLog(); Show query log. void OnBtnRetrieve(); Retrieve query. void OnBtnAbort(); Abort processing query. void OnBtnSubmit(); Submit query. void UpdateButtons(TQueryDescription* desc); Update buttons state for the current query status. void UpdateInfos(); Update query information (header) text view. TGTab * GetTab() const; { return fTab; }. TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h). TCanvas * GetStatsCanvas() const; { return fStatsCanvas; }. TEditQueryFrame * GetQueryEditFrame() const; { return fFD; }. void Progress(Long64_t total, Long64_t processed). » Author: Marek Biskup, Jakub Madejczyk, Bertrand Bellenot 10/08/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-06-30 15:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSessionQueryFrame.html:23312,log,log,23312,root/html602/TSessionQueryFrame.html,https://root.cern,https://root.cern/root/html602/TSessionQueryFrame.html,1,['log'],['log']
Testability,"Destructor. void Build(TSessionViewer* gui); Build query informations frame. void Modified(Bool_t mod = kTRUE); Notify changes in query editor settings. void Feedback(TList* objs); Feedback function connected to Feedback signal.; Used to update feedback histograms. void UpdateHistos(TList* objs); Update feedback histograms. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); New version of Progress (just forward to the old version; for the time being). void ProgressLocal(Long64_t total, Long64_t processed); Update progress bar and status labels. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void ResetProgressDialog(const char* selec, Int_t files, Long64_t first, Long64_t entries); Reset progress frame information fields. void OnBtnFinalize(); Finalize query. void OnBtnStop(); Stop processing query. void OnBtnShowLog(); Show query log. void OnBtnRetrieve(); Retrieve query. void OnBtnAbort(); Abort processing query. void OnBtnSubmit(); Submit query. void UpdateButtons(TQueryDescription* desc); Update buttons state for the current query status. void UpdateInfos(); Update query information (header) text view. TGTab * GetTab() const; { return fTab; }. TCanvas * GetStatsCanvas() const; { return fStatsCanvas; }. TEditQueryFrame * GetQueryEditFrame() const; { return fFD; }. void Progress(Long64_t total, Long64_t processed). » Author: Marek Biskup, Jakub Madejczyk, Bertrand Bellenot 10/08/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id: TSessionViewer.h 40088 2011-06-30 15:10:06Z bellenot $ » Last generated: 2011-11-03 20:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TSessionQueryFrame.html:22159,log,log,22159,root/html532/TSessionQueryFrame.html,https://root.cern,https://root.cern/root/html532/TSessionQueryFrame.html,1,['log'],['log']
Testability,"Dir() const; { return fSessionDir; }. const char * GetPackageDir() const; { return fPackageDir; }. const char * GetDataDir() const; { return fDataDir; }. const char * GetDataDirOpts() const; { return fDataDirOpts; }. Int_t GetProtocol() const; { return fProtocol; }. const char * GetOrdinal() const; { return fOrdinal; }. Int_t GetGroupId() const; { return fGroupId; }. Int_t GetGroupSize() const; { return fGroupSize; }. Int_t GetLogLevel() const; { return fLogLevel; }. TSocket * GetSocket() const; { return fSocket; }. Float_t GetRealTime() const; { return fRealTime; }. Float_t GetCpuTime() const; { return fCpuTime; }. Int_t GetQuerySeqNum() const; { return fQuerySeqNum; }. Int_t GetTotSessions() const; { return fTotSessions; }. Int_t GetActSessions() const; { return fActSessions; }. Float_t GetEffSessions() const; { return fEffSessions; }. TList * GetEnabledPackages() const; { return fEnabledPackages; }. Int_t GetInflateFactor() const; { return fInflateFactor; }. Long64_t GetMsgSizeHWM() const; { return fMsgSizeHWM; }. const char * GetPrefix() const; { return fPrefix; }. TProofLockPath * GetCacheLock(); { return fCacheLock; }. EQueryAction GetWorkers(TList* workers, Int_t& prioritychange, Bool_t resume = kFALSE). void HandleTermination(); { Terminate(0); }. void Interrupt(); { fInterrupt = kTRUE; }. Bool_t IsEndMaster() const; { return fEndMaster; }. Bool_t IsMaster() const; { return fMasterServ; }. Bool_t IsTopMaster() const; { return fOrdinal == ""0""; }. void ReleaseWorker(const char* ); { }. void DisableTimeout(); Disable / Enable read timeout. { }. void EnableTimeout(); { }. void LogToMaster(Bool_t on = kTRUE); Log control. { fSendLogToMaster = on; }. » Author: Fons Rademakers 16/02/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id$ » Last generated: 2015-03-25 16:53; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofServ.html:34989,Log,LogToMaster,34989,root/html534/TProofServ.html,https://root.cern,https://root.cern/root/html534/TProofServ.html,2,['Log'],"['Log', 'LogToMaster']"
Testability,"Dirty() const; voidRooAbsArg::setStringAttribute(const Text_t* key, const Text_t* value); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidRooAbsArg::setTransientAttribute(const Text_t* name, Bool_t value = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); voidRooAbsReal::setUnit(const char* unit); voidRooAbsArg::setValueDirty() const; TIterator*RooAbsArg::shapeClientIterator() const; RooFIterRooAbsArg::shapeClientMIterator() const; virtual voidShowMembers(TMemberInspector& insp) const; RooAbsMoment*RooAbsReal::sigma(RooRealVar& obs); RooAbsMoment*RooAbsReal::sigma(RooRealVar& obs, const RooArgSet& nset); virtual Int_tTNamed::Sizeof() const; RooNumIntConfig*RooAbsReal::specialIntegratorConfig() const; RooNumIntConfig*RooAbsReal::specialIntegratorConfig(Bool_t createOnTheFly); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); const map<string,string>&RooAbsArg::stringAttributes() const; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; const set<string>&RooAbsArg::transientAttributes() const; voidRooAbsArg::treeNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t doBranch = kTRUE, Bool_t doLeaf = kTRUE, Bool_t valueOnly = kFALSE, Bool_t recurseNonDerived = kFALSE) const; voidRooAbsArg::unRegisterCache(RooAbsCache& cache); virtual voidTObject::UseCurrentStyle(); TIterator*RooAbsArg::valueClientIterator() const; RooFIterRooAbsArg::valueClientMIterator() const; static voidRooAbsArg::verboseDirty(Bool_t flag); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; voidRooAbsArg::wireAllCaches(); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidRooAbsReal::writeToStream(ostream& os, Bool_t compact) const; const RooAbsReal&xF().",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooFirstMoment.html:26091,Test,TestBit,26091,root/html602/RooFirstMoment.html,https://root.cern,https://root.cern/root/html602/RooFirstMoment.html,12,['Test'],"['TestBit', 'TestBits']"
Testability,"Distribution ; dist = kUndefined, . const std::vector< double > & ; distParams = {} . ). Constructor for 1-sample tests with a specified distribution. ; If a specific distribution is not specified it can be set later using SetDistribution. ; Definition at line 161 of file GoFTest.cxx. ◆ GoFTest() [3/6]. template<class Dist > . ROOT::Math::GoFTest::GoFTest ; (; size_t ; sampleSize, . const Double_t * ; sample, . Dist & ; dist, . EUserDistribution ; userDist = kPDF, . Double_t ; xmin = 1, . Double_t ; xmax = 0 . ). inline . Templated constructor for 1-sample tests with a user specified distribution as a functor object implementing double operator()(double x). ; Definition at line 101 of file GoFTest.h. ◆ GoFTest() [4/6]. ROOT::Math::GoFTest::GoFTest ; (; size_t ; sampleSize, . const Double_t * ; sample, . const IGenFunction & ; dist, . EUserDistribution ; userDist = kPDF, . Double_t ; xmin = 1, . Double_t ; xmax = 0 . ). inline . Constructor for 1-sample tests with a user specified distribution implementing the ROOT::Math::IGenFunction interface. ; Definition at line 109 of file GoFTest.h. ◆ ~GoFTest(). ROOT::Math::GoFTest::~GoFTest ; (; ). virtual . Definition at line 179 of file GoFTest.cxx. ◆ GoFTest() [5/6]. ROOT::Math::GoFTest::GoFTest ; (; ). private . Disallowed default constructor. . ◆ GoFTest() [6/6]. ROOT::Math::GoFTest::GoFTest ; (; GoFTest & ; gof). private . Disallowed copy constructor. . Member Function Documentation. ◆ AndersonDarling2SamplesTest() [1/3]. Double_t ROOT::Math::GoFTest::AndersonDarling2SamplesTest ; (; const Char_t * ; option = ""p""); const. Anderson-Darling 2-Sample Test. ; Returns by default the p-value; when using option ""t"" returns the test statistic value ""A2"". ; Definition at line 854 of file GoFTest.cxx. ◆ AndersonDarling2SamplesTest() [2/3]. void ROOT::Math::GoFTest::AndersonDarling2SamplesTest ; (; const ROOT::Fit::BinData & ; data1, . const ROOT::Fit::BinData & ; data2, . Double_t & ; pvalue, . Double_t & ; testStat . ). static . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:10537,test,tests,10537,doc/master/classROOT_1_1Math_1_1GoFTest.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html,1,['test'],['tests']
Testability,"Divide mother into ndiv divisions called name; along axis iaxis starting at coordinate value c0i.; The new volume created will be medium number numed. void Gsdvt2(const char* name, const char* mother, Double_t step, Int_t iaxis, Double_t c0, Int_t numed, Int_t ndvmx); Create a new volume by dividing an existing one; Divide mother into divisions called name along; axis iaxis in steps of step. If not exactly divisible; will make as many as possible and will center them; with respect to the mother. Divisions will have medium; number numed. If numed is 0, numed of mother is taken.; ndvmx is the expected maximum number of divisions; (If 0, no protection tests are performed in Geant3); Create a new volume by dividing an existing one; Divides mother into divisions called name along; axis iaxis starting at coordinate value c0 with step; size step.; The new volume created will have medium number numed.; If numed is 0, numed of mother is taken.; ndvmx is the expected maximum number of divisions; (If 0, no protection tests are performed in Geant3). void Gspos(const char* name, Int_t nr, const char* mother, Double_t x, Double_t y, Double_t z, Int_t irot, const char* konly = ""ONLY""); Flag volume name whose contents will have to be ordered; along axis iax, by setting the search flag to -iax; (Geant3 only); Position a volume into an existing one.; It positions a previously defined volume in the mother.; name Volume name; nr Copy number of the volume; mother Mother volume name; x X coord. of the volume in mother ref. sys.; y Y coord. of the volume in mother ref. sys.; z Z coord. of the volume in mother ref. sys.; irot Rotation matrix number w.r.t. mother ref. sys.; konly ONLY/MANY flag. void Gsposp(const char* name, Int_t nr, const char* mother, Double_t x, Double_t y, Double_t z, Int_t irot, const char* konly, Double_t* upar, Int_t np); Place a copy of generic volume name with user number; nr inside mother, with its parameters upar(1..np); The same as previous but in double precisi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVirtualMCGeometry.html:13199,test,tests,13199,root/html528/TVirtualMCGeometry.html,https://root.cern,https://root.cern/root/html528/TVirtualMCGeometry.html,6,['test'],['tests']
Testability,"DoCreateHistogram(xmin, xmax, kFALSE);; 2981 ; 2982 auto is_pfc = opt0.Index(""PFC""); // Automatic Fill Color; 2983 auto is_plc = opt0.Index(""PLC""); // Automatic Line Color; 2984 auto is_pmc = opt0.Index(""PMC""); // Automatic Marker Color; 2985 if (is_pfc != kNPOS || is_plc != kNPOS || is_pmc != kNPOS) {; 2986 Int_t i = gPad->NextPaletteColor();; 2987 if (is_pfc != kNPOS) { opt0.Replace(is_pfc, 3, "" ""); fHistogram->SetFillColor(i); }; 2988 if (is_plc != kNPOS) { opt0.Replace(is_plc, 3, "" ""); fHistogram->SetLineColor(i); }; 2989 if (is_pmc != kNPOS) { opt0.Replace(is_pmc, 3, "" ""); fHistogram->SetMarkerColor(i); }; 2990 }; 2991 ; 2992 // set the optimal minimum and maximum; 2993 Double_t minimum = fHistogram->GetMinimumStored();; 2994 Double_t maximum = fHistogram->GetMaximumStored();; 2995 if (minimum <= 0 && gPad && gPad->GetLogy()) minimum = -1111; // This can happen when switching from lin to log scale.; 2996 if (gPad && gPad->GetUymin() < fHistogram->GetMinimum() &&; 2997 !fHistogram->TestBit(TH1::kIsZoomed)) minimum = -1111; // This can happen after unzooming a fit.; 2998 if (minimum == -1111) { // This can happen after unzooming.; 2999 if (fHistogram->TestBit(TH1::kIsZoomed)) {; 3000 minimum = fHistogram->GetYaxis()->GetXmin();; 3001 } else {; 3002 minimum = fMinimum;; 3003 // Optimize the computation of the scale in Y in case the min/max of the; 3004 // function oscillate around a constant value; 3005 if (minimum == -1111) {; 3006 Double_t hmin;; 3007 if (optSAME.Length() && gPad) hmin = gPad->GetUymin();; 3008 else hmin = fHistogram->GetMinimum();; 3009 if (hmin > 0) {; 3010 Double_t hmax;; 3011 Double_t hminpos = hmin;; 3012 if (optSAME.Length() && gPad) hmax = gPad->GetUymax();; 3013 else hmax = fHistogram->GetMaximum();; 3014 hmin -= 0.05 * (hmax - hmin);; 3015 if (hmin < 0) hmin = 0;; 3016 if (hmin <= 0 && gPad && gPad->GetLogy()) hmin = hminpos;; 3017 minimum = hmin;; 3018 }; 3019 }; 3020 }; 3021 fHistogram->SetMinimum(minimum);; 3022 }; 3023 if (maximum =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TF1_8cxx_source.html:114782,Test,TestBit,114782,doc/master/TF1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TF1_8cxx_source.html,1,['Test'],['TestBit']
Testability,"DoubleSlider::fPressPoint. protected . mouse position at button press event ; Definition at line 51 of file TGDoubleSlider.h. ◆ fPressSmax. Double_t TGDoubleSlider::fPressSmax. protected . logical max position at button press event ; Definition at line 53 of file TGDoubleSlider.h. ◆ fPressSmin. Double_t TGDoubleSlider::fPressSmin. protected . logical min position at button press event ; Definition at line 52 of file TGDoubleSlider.h. ◆ fRelPos. Int_t TGDoubleSlider::fRelPos. protected . slider position in pixel coordinates ; Definition at line 46 of file TGDoubleSlider.h. ◆ fReversedScale. Bool_t TGDoubleSlider::fReversedScale. protected . reverse which end is min and max ; Definition at line 58 of file TGDoubleSlider.h. ◆ fScale. Int_t TGDoubleSlider::fScale. protected . tick mark scale ; Definition at line 49 of file TGDoubleSlider.h. ◆ fScaleType. Int_t TGDoubleSlider::fScaleType. protected . tick mark scale type (no, downright, both) ; Definition at line 50 of file TGDoubleSlider.h. ◆ fSliderPic. const TGPicture* TGDoubleSlider::fSliderPic. protected . picture to draw slider ends ; Definition at line 60 of file TGDoubleSlider.h. ◆ fSmax. Double_t TGDoubleSlider::fSmax. protected . logical position of max value of Slider ; Definition at line 45 of file TGDoubleSlider.h. ◆ fSmin. Double_t TGDoubleSlider::fSmin. protected . logical position of min value of Slider ; Definition at line 44 of file TGDoubleSlider.h. ◆ fVmax. Double_t TGDoubleSlider::fVmax. protected . logical upper limit of slider ; Definition at line 48 of file TGDoubleSlider.h. ◆ fVmin. Double_t TGDoubleSlider::fVmin. protected . logical lower limit of slider ; Definition at line 47 of file TGDoubleSlider.h. Libraries for TGDoubleSlider:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGDoubleSlider.h; gui/gui/src/TGDoubleSlider.cxx. TGDoubleSlider. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:59 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGDoubleSlider.html:40632,log,logical,40632,doc/master/classTGDoubleSlider.html,https://root.cern,https://root.cern/doc/master/classTGDoubleSlider.html,4,['log'],['logical']
Testability,"Double_t *params)Definition TF1.h:111; TF1Parameters::GetParNumberInt_t GetParNumber(const char *name) constReturns the parameter number given a name not very efficient but list of parameters is typically smal...Definition TF1.cxx:3846; TF1Parameters::TF1ParametersTF1Parameters(const TF1Parameters &rhs)Definition TF1.h:65; TF1Parameters::GetParametersconst Double_t * GetParameters() constDefinition TF1.h:88; TF11-Dim function classDefinition TF1.h:233; TF1::fFunctorstd::unique_ptr< TF1FunctorPointer > fFunctor! Functor object to wrap any C++ callable objectDefinition TF1.h:287; TF1::GetMinimumXvirtual Double_t GetMinimumX(Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) constReturns the X value corresponding to the minimum value of the function on the (xmin,...Definition TF1.cxx:1823; TF1::GetMinimumvirtual Double_t GetMinimum(Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) constReturns the minimum value of the function on the (xmin, xmax) interval.Definition TF1.cxx:1696; TF1::GetXmaxvirtual Double_t GetXmax() constDefinition TF1.h:584; TF1::ReleaseParametervirtual void ReleaseParameter(Int_t ipar)Release parameter number ipar during a fit operation.Definition TF1.cxx:3151; TF1::SetParErrorvirtual void SetParError(Int_t ipar, Double_t error)Set error for parameter number ipar.Definition TF1.cxx:3479; TF1::RejectPointstatic void RejectPoint(Bool_t reject=kTRUE)Static function to set the global flag to reject points the fgRejectPoint global flag is tested by al...Definition TF1.cxx:3683; TF1::EAddToListEAddToListAdd to list behavior.Definition TF1.h:240; TF1::EAddToList::kDefault@ kDefault; TF1::EAddToList::kNo@ kNo; TF1::EAddToList::kAdd@ kAdd; TF1::Meanvirtual Double_t Mean(Double_t a, Double_t b, const Double_t *params=nullptr, Double_t epsilon=0.000001)Definition TF1.h:733; TF1::Derivativevirtual Double_t Derivative(Double_t x, Double_t *params=nullptr, Double_t epsil",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TF1_8h_source.html:46749,log,logx,46749,doc/master/TF1_8h_source.html,https://root.cern,https://root.cern/doc/master/TF1_8h_source.html,1,['log'],['logx']
Testability,"Double_t KolmogorovSmirnovTest(const Char_t* option = ""p"") const. The Kolmogorov-Smirnov 1-Sample Test algorithm for a specific distribution is described at; http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/kstest.htm; and described and taken from (4); Press W. H., Teukolsky S.A., Vetterling W.T., Flannery B.P. (2007), Numerical Recipes - The Art of Scientific Computing (Third Edition), Cambridge Univerdity Press; */ void KolmogorovSmirnovTest(Double_t& pvalue, Double_t& testStat) const;. void operator()(ROOT::Math::GoFTest::ETestType test, Double_t& pvalue, Double_t& testStat) const; The class's unary functions. Double_t operator()(ROOT::Math::GoFTest::ETestType test = kAD, const Char_t* option = ""p"") const; Returns default Anderson Darling 1-Sample Test and default p-value; option ""t"" returns the test statistic value; specific to the test type. Double_t PValueADKSamples(UInt_t nsamples, Double_t A2); Computation of the K-Sample Anderson-Darling Test's p-value as described in (1); given a normalized test statistic. The first variant described in the paper is used. void AndersonDarling2SamplesTest(const ROOT::Fit::BinData& data1, const ROOT::Fit::BinData& data2, Double_t& pvalue, Double_t& testStat); Compute The 2-Sample Anderson Darling test for binned data. GoFTest(). GoFTest operator=(ROOT::Math::GoFTest& gof). void SetCDF(). Double_t LogNormalCDF(Double_t x) const. Double_t GaussianCDF(Double_t x) const. Double_t ExponentialCDF(Double_t x) const. Double_t GetSigmaN(const vector<UInt_t>& ns, UInt_t N). Double_t InterpolatePValues(int nsamples, Double_t A2). Double_t PValueAD1Sample(Double_t A2) const. void LogSample(). void SetSamples(vector<const Double_t*> samples, const vector<UInt_t> samplesSizes). void SetParameters(). » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__GoFTest.html:8443,test,testStat,8443,root/html602/ROOT__Math__GoFTest.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__GoFTest.html,4,"['Log', 'test']","['LogNormalCDF', 'LogSample', 'test', 'testStat']"
Testability,"Double_t KolmogorovSmirnovTest(const Char_t* option = ""p"") const. The Kolmogorov-Smirnov 1-Sample Test algorithm for a specific distribution is described at; http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/kstest.htm; and described and taken from (4); Press W. H., Teukolsky S.A., Vetterling W.T., Flannery B.P. (2007), Numerical Recipes - The Art of Scientific Computing (Third Edition), Cambridge Univerdity Press; */ void KolmogorovSmirnovTest(Double_t& pvalue, Double_t& testStat) const;. void operator()(ROOT::Math::GoFTest::ETestType test, Double_t& pvalue, Double_t& testStat) const; The class's unary functions. Double_t operator()(ROOT::Math::GoFTest::ETestType test = kAD, const Char_t* option = ""p"") const; Returns default Anderson Darling 1-Sample Test and default p-value; option ""t"" returns the test statistic value; specific to the test type. Double_t PValueADKSamples(UInt_t nsamples, Double_t A2); Computation of the K-Sample Anderson-Darling Test's p-value as described in (1); given a normalized test statistic. The first variant described in the paper is used. void AndersonDarling2SamplesTest(const ROOT::Fit::BinData& data1, const ROOT::Fit::BinData& data2, Double_t& pvalue, Double_t& testStat); Compute The 2-Sample Anderson Darling test for binned data. GoFTest(). GoFTest operator=(ROOT::Math::GoFTest& gof). void SetCDF(). Double_t LogNormalCDF(Double_t x) const. Double_t GaussianCDF(Double_t x) const. Double_t ExponentialCDF(Double_t x) const. Double_t GetSigmaN(const vector<UInt_t>& ns, UInt_t N). Double_t InterpolatePValues(int nsamples, Double_t A2). Double_t PValueAD1Sample(Double_t A2) const. void LogSample(). void SetSamples(vector<const Double_t*> samples, const vector<UInt_t> samplesSizes). void SetParameters(). » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 16:59; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__GoFTest.html:7884,test,testStat,7884,root/html534/ROOT__Math__GoFTest.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__GoFTest.html,4,"['Log', 'test']","['LogNormalCDF', 'LogSample', 'test', 'testStat']"
Testability,"Double_t KolmogorovSmirnovTest(const Char_t* option = ""p"") const. The Kolmogorov-Smirnov 1-Sample Test algorithm for a specific distribution is described at; http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/kstest.htm; and described and taken from (4); Press W. H., Teukolsky S.A., Vetterling W.T., Flannery B.P. (2007), Numerical Recipes - The Art of Scientific Computing (Third Edition), Cambridge Univerdity Press; */ void KolmogorovSmirnovTest(Double_t& pvalue, Double_t& testStat) const;. void operator()(ROOT::Math::GoFTest::ETestType test, Double_t& pvalue, Double_t& testStat) const; The class's unary functions. Double_t operator()(ROOT::Math::GoFTest::ETestType test = kAD, const Char_t* option = ""p"") const; Returns default Anderson Darling 1-Sample Test and default p-value; option ""t"" returns the test statistic value; specific to the test type. Double_t PValueADKSamples(UInt_t nsamples, Double_t A2); Computation of the K-Sample Anderson-Darling Test's p-value as described in (1); given a normalized test statistic. The first variant described in the paper is used. void AndersonDarling2SamplesTest(const ROOT::Fit::BinData& data1, const ROOT::Fit::BinData& data2, Double_t& pvalue, Double_t& testStat); Compute The 2-Sample Anderson Darling test for binned data. GoFTest(). GoFTest operator=(ROOT::Math::GoFTest& gof). void SetCDF(). Double_t LogNormalCDF(Double_t x) const. Double_t GaussianCDF(Double_t x) const. Double_t ExponentialCDF(Double_t x) const. Double_t GetSigmaN(const vector<UInt_t>& ns, UInt_t N). Double_t InterpolatePValues(int nsamples, Double_t A2). Double_t PValueAD1Sample(Double_t A2) const. void LogSample(). void SetSamples(vector<const Double_t*> samples, const vector<UInt_t> samplesSizes). void SetParameters(). » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Math__GoFTest.html:8443,test,testStat,8443,root/html604/ROOT__Math__GoFTest.html,https://root.cern,https://root.cern/root/html604/ROOT__Math__GoFTest.html,4,"['Log', 'test']","['LogNormalCDF', 'LogSample', 'test', 'testStat']"
Testability,"Double_t SC_factor, Double_t convCrit); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); const TString&TMVA::Configurable::GetReferenceFile() const; TMVA::MsgLogger&TMVA::FitterBase::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; voidTObject::MakeZombie(); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. virtual voidDeclareOptions(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTMVA::FitterBase::fClassNameremove TMVA:: from TObject name; TMVA::IFitterTarget&TMVA::FitterBase::fFitterTargetpointer to target of fitting procedure; TMVA::MsgLogger*TMVA::FitterBase::fLoggermessage logger; Int_tTMVA::FitterBase::fNparsnumber of parameters; const vector<TMVA::Interval*>TMVA::FitterBase::fRangesallowed intervals. private:. Double_tfConvCritimprovements bigger than fConvCrit are counted as ""improvement""; Int_tfCyclesnu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__GeneticFitter.html:6406,Log,Log,6406,root/html534/TMVA__GeneticFitter.html,https://root.cern,https://root.cern/root/html534/TMVA__GeneticFitter.html,1,['Log'],['Log']
Testability,"Double_t TGeoPgon::DistFromOutside ; (; const Double_t * ; point, . const Double_t * ; dir, . Int_t ; iact = 1, . Double_t ; step = TGeoShape::Big(), . Double_t * ; safe = nullptr . ); const. overridevirtual . Reimplemented from TGeoPcon. ◆ DistFromOutside_v(). void TGeoPgon::DistFromOutside_v ; (; const Double_t * ; points, . const Double_t * ; dirs, . Double_t * ; dists, . Int_t ; vecsize, . Double_t * ; step . ); const. overridevirtual . Reimplemented from TGeoPcon. ◆ Divide(). TGeoVolume * TGeoPgon::Divide ; (; TGeoVolume * ; voldiv, . const char * ; divname, . Int_t ; iaxis, . Int_t ; ndiv, . Double_t ; start, . Double_t ; step . ). overridevirtual . Reimplemented from TGeoPcon. ◆ GetBoundingCylinder(). void TGeoPgon::GetBoundingCylinder ; (; Double_t * ; param); const. overridevirtual . Reimplemented from TGeoPcon. ◆ GetBuffer3D(). const TBuffer3D & TGeoPgon::GetBuffer3D ; (; Int_t ; reqSections, . Bool_t ; localFrame . ); const. overridevirtual . Stub implementation to avoid forcing implementation at this stage. ; Reimplemented from TGeoPcon. ◆ GetByteCount(). Int_t TGeoPgon::GetByteCount ; (; ); const. inlineoverridevirtual . Reimplemented from TGeoPcon.; Definition at line 90 of file TGeoPgon.h. ◆ GetMakeRuntimeShape(). TGeoShape * TGeoPgon::GetMakeRuntimeShape ; (; TGeoShape * ; , . TGeoMatrix * ;  . ); const. inlineoverridevirtual . Reimplemented from TGeoPcon.; Definition at line 91 of file TGeoPgon.h. ◆ GetMeshNumbers(). void TGeoPgon::GetMeshNumbers ; (; Int_t & ; nvert, . Int_t & ; nsegs, . Int_t & ; npols . ); const. overridevirtual . Reimplemented from TGeoPcon. ◆ GetNedges(). Int_t TGeoPgon::GetNedges ; (; ); const. inline . Definition at line 93 of file TGeoPgon.h. ◆ GetNmeshVertices(). Int_t TGeoPgon::GetNmeshVertices ; (; ); const. overridevirtual . Reimplemented from TGeoPcon. ◆ GetNsegments(). Int_t TGeoPgon::GetNsegments ; (; ); const. inlineoverridevirtual . Reimplemented from TGeoPcon.; Definition at line 95 of file TGeoPgon.h. ◆ GetPhiCross",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPgon.html:29896,Stub,Stub,29896,doc/master/classTGeoPgon.html,https://root.cern,https://root.cern/doc/master/classTGeoPgon.html,1,['Stub'],['Stub']
Testability,"Double_t az2 = (fsc * fZ) * (fsc * fZ);; 180 Double_t az4 = az2 * az2;; 181 ; 182 fCoulomb = (k1 * az4 + k2 + 1. / (1. + az2)) * az2 - (k3 * az4 + k4) * az4;; 183}; 184////////////////////////////////////////////////////////////////////////////////; 185/// Compute Tsai's Expression for the Radiation Length (Phys Rev. D50 3-1 (1994) page 1254); 186 ; 187void TGeoElement::ComputeLradTsaiFactor(); 188{; 189 static constexpr Double_t Lrad_light[] = {5.31, 4.79, 4.74, 4.71};; 190 static constexpr Double_t Lprad_light[] = {6.144, 5.621, 5.805, 5.924};; 191 ; 192 fRadTsai = 0.0;; 193 if (fZ == 0); 194 return;; 195 const Double_t logZ3 = TMath::Log(fZ) / 3.;; 196 ; 197 Double_t Lrad, Lprad;; 198 Double_t alpha_rcl2 =; 199 TGeoManager::kRootUnits == TGeoManager::GetDefaultUnits() ? TGeoUnit::alpha_rcl2 : TGeant4Unit::alpha_rcl2;; 200 Int_t iz = static_cast<Int_t>(fZ + 0.5) - 1; // The static cast comes from G4lrint; 201 static const Double_t log184 = TMath::Log(184.15);; 202 static const Double_t log1194 = TMath::Log(1194.);; 203 if (iz <= 3) {; 204 Lrad = Lrad_light[iz];; 205 Lprad = Lprad_light[iz];; 206 } else {; 207 Lrad = log184 - logZ3;; 208 Lprad = log1194 - 2 * logZ3;; 209 }; 210 ; 211 fRadTsai = 4 * alpha_rcl2 * fZ * (fZ * (Lrad - fCoulomb) + Lprad);; 212}; 213////////////////////////////////////////////////////////////////////////////////; 214/// Print this isotope; 215 ; 216void TGeoElement::Print(Option_t *option) const; 217{; 218 printf(""Element: %s Z=%d N=%f A=%f [g/mole]\n"", GetName(), fZ, Neff(), fA);; 219 if (HasIsotopes()) {; 220 for (Int_t i = 0; i < fNisotopes; i++) {; 221 TGeoIsotope *iso = GetIsotope(i);; 222 printf(""=>Isotope %s, abundance=%f :\n"", iso->GetName(), fAbundances[i]);; 223 iso->Print(option);; 224 }; 225 }; 226}; 227 ; 228////////////////////////////////////////////////////////////////////////////////; 229/// Returns pointer to the table.; 230 ; 231TGeoElementTable *TGeoElement::GetElementTable(); 232{; 233 if (!gGeoManager) {; 234 ::Error",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoElement_8cxx_source.html:7332,Log,Log,7332,doc/master/TGeoElement_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoElement_8cxx_source.html,1,['Log'],['Log']
Testability,"Double_t b, Int_t d, Int_t nmc = 50000, bool stat = false, TRandom* generator = 0); static TConfidenceLevel*ComputeLimit(TH1* s, TH1* b, TH1* d, Int_t nmc = 50000, bool stat = false, TRandom* generator = 0); static TConfidenceLevel*ComputeLimit(Double_t s, Double_t b, Int_t d, TVectorD* se, TVectorD* be, TObjArray*, Int_t nmc = 50000, bool stat = false, TRandom* generator = 0); static TConfidenceLevel*ComputeLimit(TH1* s, TH1* b, TH1* d, TVectorD* se, TVectorD* be, TObjArray*, Int_t nmc = 50000, bool stat = false, TRandom* generator = 0); virtual TClass*IsA() const; TLimit&operator=(const TLimit&); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. static boolFluctuate(TLimitDataSource* input, TLimitDataSource* output, bool init, TRandom*, bool stat = false); static Double_tLogLikelihood(Double_t s, Double_t b, Double_t b2, Double_t d). Data Members; private:. static TOrdCollection*fgSystNamesCollection of systematics names; static TArrayD*fgTablea log table... just to speed up calculation. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TConfidenceLevel * ComputeLimit(TLimitDataSource* data, Int_t nmc = 50000, bool stat = false, TRandom* generator = 0); class TLimit. Algorithm to compute 95% C.L. limits using the Likelihood ratio; semi-bayesian method.; It takes signal, background and data histograms wrapped in a; TLimitDataSource as input and runs a set of Monte Carlo experiments in; order to compute the limits. If needed, inputs are fluctuated according; to systematics. The output is a TConfidenceLevel. class TLimitDataSource. Takes the signal, background and data histograms as well as different; systematics sources to form the TLimit input. class TConfidenceLevel. Final result of the TLimit algorithm. It is created just after the; time-consuming part and can be stored in a TFile for further processing.; It contains light methods to return CLs, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TLimit.html:2387,log,log,2387,root/html528/TLimit.html,https://root.cern,https://root.cern/root/html528/TLimit.html,3,['log'],['log']
Testability,"Double_t b11, Double_t b01, Int_t& irep); Check for surface penetration (""bottle neck""). Input: A00,A10,A11,A01 - vertex values for 1st face; B00,B10,B11,B01 - vertex values for opposite face. Output: IREP - 1,2 - there is surface penetration; 0 - there is not surface penetration. void MarchingCubeFindNodes(Int_t nnod, Int_t* ie, Double_t[52][3] xyz, Double_t[52][3] grad); Find nodes and normales. Input: NNOD - number of nodes; IE(*) - edges which have section node. Output: XYZ(3,*) - nodes; GRAD(3,*) - node normales (not normalized). void ZDepth(Double_t[52][3] xyz, Int_t& nface, Int_t[48][3] iface, Double_t[48][6] dface, Double_t[48][4] abcd, Int_t* iorder); Z-depth algorithm for set of triangles. Input: XYZ(3,*) - nodes; NFACE - number of triangular faces; IFACE(3,*) - faces (triangles). Arrays: DFACE(6,*) - array for min-max scopes; ABCD(4,*) - array for face plane equations. Output: IORDER(*) - face order. void TestEdge(Double_t del, Double_t[52][3] xyz, Int_t i1, Int_t i2, Int_t[3] iface, Double_t[4] abcd, Int_t& irep); Test edge against face (triangle). Input: DEL - precision; XYZ(3,*) - nodes; I1 - 1-st node of edge; I2 - 2-nd node of edge; IFACE(3) - triangular face; ABCD(4) - face plane. Output: IREP:-1 - edge under face; 0 - no decision; +1 - edge before face. void IsoSurface(Int_t ns, Double_t* s, Int_t nx, Int_t ny, Int_t nz, Double_t* x, Double_t* y, Double_t* z, const char* chopt); Draw set of isosurfaces for a scalar function defined on a grid. Input: NS - number of isosurfaces; S(*) - isosurface values; NX - number of slices along X; NY - number of slices along Y; NZ - number of slices along Z; X(*) - slices along X; Y(*) - slices along Y; Z(*) - slices along Z; F(NX,NY,NZ) - function values <- Not used, current histo used instead. DRFACE(ICODES,XYZ,NP,IFACE,T) - routine for face drawing; ICODES(1) - isosurface number; ICODES(2) - isosurface number; ICODES(3) - isosurface number; NP - number of nodes in face; IFACE(NP) - face; T(NP) - additional fun",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TPainter3dAlgorithms.html:38765,Test,TestEdge,38765,root/html602/TPainter3dAlgorithms.html,https://root.cern,https://root.cern/root/html602/TPainter3dAlgorithms.html,4,['Test'],"['Test', 'TestEdge']"
Testability,"Double_t content) override;  ; virtual void SetShowProjection (const char *option=""xy"", Int_t nbins=1);  When the mouse is moved in a pad containing a 3-d view of this histogram a second canvas shows a projection type given as option. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TH1;  ~TH1 () override;  Histogram default destructor. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Double_t &advalue) const;  Same function as above but returning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histogram point by the bin error By default the full range of the histogram is used. ;  ; virtual void ClearUnderflowAndOverflow ();  Remove all the content from the underflow and overflow bins, without changing the number of entries After calling this method, every undeflow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ;  ; TObject * Clone (const char *newname="""") const override;  Make a complete copy of the underlying object. ;  ; virtual Double_t ComputeInte",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile3D.html:16291,test,test,16291,doc/master/classTProfile3D.html,https://root.cern,https://root.cern/doc/master/classTProfile3D.html,1,['test'],['test']
Testability,"Double_t d = 1.0*(x2-x1)*(y2-y1);; 1432 f = 1.0*q11/d*(x2-x)*(y2-y)+1.0*q21/d*(x-x1)*(y2-y)+1.0*q12/d*(x2-x)*(y-y1)+1.0*q22/d*(x-x1)*(y-y1);; 1433 return f;; 1434}; 1435 ; 1436 ; 1437////////////////////////////////////////////////////////////////////////////////; 1438///illegal for a TH2; 1439 ; 1440Double_t TH2::Interpolate(Double_t, Double_t, Double_t) const; 1441{; 1442 Error(""Interpolate"",""This function must be called with 2 arguments for a TH2"");; 1443 return 0;; 1444}; 1445 ; 1446 ; 1447////////////////////////////////////////////////////////////////////////////////; 1448/// Statistical test of compatibility in shape between; 1449/// THIS histogram and h2, using Kolmogorov test.; 1450/// Default: Ignore under- and overflow bins in comparison; 1451///; 1452/// option is a character string to specify options; 1453/// - ""U"" include Underflows in test; 1454/// - ""O"" include Overflows; 1455/// - ""N"" include comparison of normalizations; 1456/// - ""D"" Put out a line of ""Debug"" printout; 1457/// - ""M"" Return the Maximum Kolmogorov distance instead of prob; 1458///; 1459/// The returned function value is the probability of test; 1460/// (much less than one means NOT compatible); 1461///; 1462/// The KS test uses the distance between the pseudo-CDF's obtained; 1463/// from the histogram. Since in 2D the order for generating the pseudo-CDF is; 1464/// arbitrary, two pairs of pseudo-CDF are used, one starting from the x axis the; 1465/// other from the y axis and the maximum distance is the average of the two maximum; 1466/// distances obtained.; 1467///; 1468/// Code adapted by Rene Brun from original HBOOK routine HDIFF; 1469 ; 1470Double_t TH2::KolmogorovTest(const TH1 *h2, Option_t *option) const; 1471{; 1472 TString opt = option;; 1473 opt.ToUpper();; 1474 ; 1475 Double_t prb = 0;; 1476 TH1 *h1 = (TH1*)this;; 1477 if (h2 == nullptr) return 0;; 1478 const TAxis *xaxis1 = h1->GetXaxis();; 1479 const TAxis *xaxis2 = h2->GetXaxis();; 1480 const TAxis *yaxis1 = h1->GetY",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH2_8cxx_source.html:58919,test,test,58919,doc/master/TH2_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH2_8cxx_source.html,3,['test'],['test']
Testability,"Double_t dy, Double_t dz, Double_t *origin=nullptr);  ;  TGeoBBox (Double_t *param);  ;  TGeoBBox (Double_t dx, Double_t dy, Double_t dz, Double_t *origin=nullptr);  ;  ~TGeoBBox () override;  ; Double_t Capacity () const override;  ; void ComputeBBox () override;  ; void ComputeNormal (const Double_t *point, const Double_t *dir, Double_t *norm) override;  ; void ComputeNormal_v (const Double_t *points, const Double_t *dirs, Double_t *norms, Int_t vecsize) override;  ; Bool_t Contains (const Double_t *point) const override;  ; void Contains_v (const Double_t *points, Bool_t *inside, Int_t vecsize) const override;  ; Bool_t CouldBeCrossed (const Double_t *point, const Double_t *dir) const override;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Computes distance from point (px,py) to the object. ;  ; const char * GetAxisName (Int_t iaxis) const override;  ; Double_t GetAxisRange (Int_t iaxis, Double_t &xlo, Double_t &xhi) const override;  ; void GetBoundingCylinder (Double_t *param) const override;  ; const TBuffer3D & GetBuffer3D (Int_t reqSections, Bool_t localFrame) const override;  Stub implementation to avoid forcing implementation at this stage. ;  ; Int_t GetByteCount () const override;  ; virtual Double_t GetDX () const;  ; virtual Double_t GetDY () const;  ; virtual Double_t GetDZ () const;  ; virtual Double_t GetFacetArea (Int_t index=0) const;  ; Int_t GetFittingBox (const TGeoBBox *parambox, TGeoMatrix *mat, Double_t &dx, Double_t &dy, Double_t &dz) const override;  ; void GetMeshNumbers (Int_t &nvert, Int_t &nsegs, Int_t &npols) const override;  ; Int_t GetNmeshVertices () const override;  ; virtual const Double_t * GetOrigin () const;  ; Bool_t GetPointsOnSegments (Int_t npoints, Double_t *array) const override;  ; void InspectShape () const override;  ; Bool_t IsCylType () const override;  ; virtual Bool_t IsNullBox () const;  ; Bool_t IsValidBox () const override;  ; TBuffer3D * MakeBuffer3D () const override;  ; void SetBoxDimensions (Do",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoGtra.html:7354,Stub,Stub,7354,doc/master/classTGeoGtra.html,https://root.cern,https://root.cern/doc/master/classTGeoGtra.html,2,['Stub'],['Stub']
Testability,"Double_t dy, Double_t dz, Double_t* origin = 0); voidSetBoxPoints(Double_t* points) const; virtual voidSetDimensions(Double_t* param); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTGeoShape::SetId(Int_t id); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPoints(Double_t* points) const; virtual voidSetPoints(Float_t* points) const; voidTGeoShape::SetRuntime(Bool_t flag = kTRUE); virtual voidSetSegsAndPols(TBuffer3D& buffer) const; voidTGeoShape::SetShapeBit(UInt_t f); voidTGeoShape::SetShapeBit(UInt_t f, Bool_t set); virtual voidTNamed::SetTitle(const char* title = """")MENU ; static voidTGeoShape::SetTransform(TGeoMatrix* matrix); virtual voidTObject::SetUniqueID(UInt_t uid); Int_tTGeoShape::ShapeDistancetoPrimitive(Int_t numpoints, Int_t px, Int_t py) const; virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidSizeof3D() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTGeoShape::TestShapeBit(UInt_t f) const; Int_tTGeoShape::TestShapeBits(UInt_t f) const; TGeoBBox(); TGeoBBox(Double_t* param); TGeoBBox(const TGeoBBox&); TGeoBBox(Double_t dx, Double_t dy, Double_t dz, Double_t* origin = 0); TGeoBBox(const char* name, Double_t dx, Double_t dy, Double_t dz, Double_t* origin = 0); static Double_tTGeoShape::Tolerance(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoBBox.html:11787,Test,TestBit,11787,root/html602/TGeoBBox.html,https://root.cern,https://root.cern/root/html602/TGeoBBox.html,8,['Test'],"['TestBit', 'TestBits', 'TestShapeBit', 'TestShapeBits']"
Testability,"Double_t dz, Double_t* origin = 0); voidTGeoBBox::SetBoxPoints(Double_t* points) const; voidTGeoCone::SetConeDimensions(Double_t dz, Double_t rmin1, Double_t rmax1, Double_t rmin2, Double_t rmax2); voidSetConsDimensions(Double_t dz, Double_t rmin1, Double_t rmax1, Double_t rmin2, Double_t rmax2, Double_t phi1, Double_t phi2); virtual voidSetDimensions(Double_t* param); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTGeoShape::SetId(Int_t id); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPoints(Double_t* points) const; virtual voidSetPoints(Float_t* points) const; voidTGeoShape::SetRuntime(Bool_t flag = kTRUE); virtual voidSetSegsAndPols(TBuffer3D& buffer) const; voidTGeoShape::SetShapeBit(UInt_t f); voidTGeoShape::SetShapeBit(UInt_t f, Bool_t set); virtual voidTNamed::SetTitle(const char* title = """")MENU ; static voidTGeoShape::SetTransform(TGeoMatrix* matrix); virtual voidTObject::SetUniqueID(UInt_t uid); Int_tTGeoShape::ShapeDistancetoPrimitive(Int_t numpoints, Int_t px, Int_t py) const; virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidSizeof3D() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTGeoShape::TestShapeBit(UInt_t f) const; Int_tTGeoShape::TestShapeBits(UInt_t f) const; static Double_tTGeoShape::Tolerance(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoConeSeg.html:12166,Test,TestBit,12166,root/html534/TGeoConeSeg.html,https://root.cern,https://root.cern/root/html534/TGeoConeSeg.html,4,['Test'],"['TestBit', 'TestBits', 'TestShapeBit', 'TestShapeBits']"
Testability,"Double_t error); virtual voidSetParErrors(const Double_t* errors); virtual voidSetParLimits(Int_t ipar, Double_t parmin, Double_t parmax); virtual voidSetParName(Int_t ipar, const char* name); virtual voidSetParNames(const char* name0 = ""p0"", const char* name1 = ""p1"", const char* name2 = ""p2"", const char* name3 = ""p3"", const char* name4 = ""p4"", const char* name5 = ""p5"", const char* name6 = ""p6"", const char* name7 = ""p7"", const char* name8 = ""p8"", const char* name9 = ""p9"", const char* name10 = ""p10"")MENU ; virtual voidSetRange(Double_t xmin, Double_t xmax)MENU ; virtual voidSetRange(Double_t xmin, Double_t ymin, Double_t xmax, Double_t ymax); virtual voidSetRange(Double_t xmin, Double_t ymin, Double_t zmin, Double_t xmax, Double_t ymax, Double_t zmax); virtual voidSetSavedPoint(Int_t point, Double_t value); virtual voidSetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TF1(); TF1(const TF1& f1); TF1(const char* name, const char* formula, Double_t xmin = 0, Double_t xmax = 1); TF1(const char* name, Double_t xmin, Double_t xmax, Int_t npar, Int_t ndim = 1); TF1(const char* name, Double_t(*)(Double_t*,Double_t*) fcn, Double_t xmin = 0, Double_t xmax = 1, Int_t npar = 0, Int_t ndim = 1); TF1(const char* name, Double_t(*)(const Double_t*,const Double_t*) fcn, Double_t xmin = 0, Double_t xmax = 1, Int_t npar = 0, Int_t ndim = 1); TF1(const char* name, ROOT::Math::ParamFunctor f, Double_t xmin = 0, Double_t xmax = 1, Int_t npar = 0, Int_t ndim = 1); virtual voidUpdate(); virtual voidTObject::UseCurrentStyle(); virtual Double_tVariance(Double_t a, Double_t b, const Double_t* params = 0, Double_t epsilon = 9.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TF1.html:18930,Test,TestBit,18930,root/html604/TF1.html,https://root.cern,https://root.cern/root/html604/TF1.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"Double_t mvaVal=-9999999 );; 111 ; 112 // accessors; 113 virtual const char* GetName() const { return ""Reader""; }; 114 Bool_t Verbose( void ) const { return fVerbose; }; 115 void SetVerbose( Bool_t v ) { fVerbose = v; }; 116 ; 117 const DataSetInfo& DataInfo() const { return fDataSetInfo; }; 118 DataSetInfo& DataInfo() { return fDataSetInfo; }; 119 ; 120 void AddVariable( const TString& expression, Float_t* );; 121 void AddVariable( const TString& expression, Int_t* );; 122 ; 123 void AddSpectator( const TString& expression, Float_t* );; 124 void AddSpectator( const TString& expression, Int_t* );; 125 ; 126 private:; 127 ; 128 DataSetManager* fDataSetManager; // DSMTEST; 129 ; 130 ; 131 TString GetMethodTypeFromFile( const TString& filename );; 132 ; 133 // this booking method is internal; 134 IMethod* BookMVA( Types::EMVA method, const TString& weightfile );; 135 ; 136 DataSetInfo fDataSetInfo; // the data set; 137 ; 138 DataInputHandler fDataInputHandler;; 139 ; 140 // Init Reader class; 141 void Init( void );; 142 ; 143 // Decode Constructor string (or TString) and fill variable name std::vector; 144 void DecodeVarNames( const std::string& varNames );; 145 void DecodeVarNames( const TString& varNames );; 146 ; 147 void DeclareOptions();; 148 ; 149 Bool_t fVerbose; ///< verbosity; 150 Bool_t fSilent; ///< silent mode; 151 Bool_t fColor; ///< color mode; 152 Bool_t fCalculateError; ///< error calculation mode; 153 ; 154 Double_t fMvaEventError; ///< per-event error returned by MVA; 155 Double_t fMvaEventErrorUpper; ///< per-event error returned by MVA; 156 ; 157 std::map<TString, IMethod*> fMethodMap; ///< map of methods; 158 ; 159 std::vector<Float_t> fTmpEvalVec; ///< temporary evaluation vector (if user input is v<double>); 160 ; 161 mutable MsgLogger* fLogger; ///<! message logger; 162 MsgLogger& Log() const { return *fLogger; }; 163 ; 164 ClassDef(Reader,0); // Interpret the trained MVAs in an analysis context; 165 };; 166 ; 167}; 168 ; 169#endif; Configurable.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Reader_8h_source.html:6736,log,logger,6736,doc/master/Reader_8h_source.html,https://root.cern,https://root.cern/doc/master/Reader_8h_source.html,2,"['Log', 'log']","['Log', 'logger']"
Testability,"Double_t parmax); Set limits for parameter ipar. The specified limits will be used in a fit operation; when the option ""B"" is specified (Bounds).; To fix a parameter, use TF1::FixParameter. void SetRange(Double_t xmin, Double_t xmax); Initialize the upper and lower bounds to draw the function. The function range is also used in an histogram fit operation; when the option ""R"" is specified. void SetSavedPoint(Int_t point, Double_t value); Restore value of function saved at point. void SetTitle(const char* title = """"); Set function title; if title has the form ""fffffff;xxxx;yyyy"", it is assumed that; the function title is ""fffffff"" and ""xxxx"" and ""yyyy"" are the; titles for the X and Y axis respectively. void Streamer(TBuffer& ); Stream a class object. void Update(); Called by functions such as SetRange, SetNpx, SetParameters; to force the deletion of the associated histogram or Integral. void RejectPoint(Bool_t reject = kTRUE); Static function to set the global flag to reject points; the fgRejectPoint global flag is tested by all fit functions; if TRUE the point is not included in the fit.; This flag can be set by a user in a fitting function.; The fgRejectPoint flag is reset by the TH1 and TGraph fitting functions. Bool_t RejectedPoint(); See TF1::RejectPoint above. Double_t Moment(Double_t n, Double_t a, Double_t b, const Double_t* params = 0, Double_t epsilon = 0.000001); Return nth moment of function between a and b. See TF1::Integral() for parameter definitions. Double_t CentralMoment(Double_t n, Double_t a, Double_t b, const Double_t* params = 0, Double_t epsilon = 0.000001); Return nth central moment of function between a and b; (i.e the n-th moment around the mean value). See TF1::Integral() for parameter definitions; Author: Gene Van Buren <gene@bnl.gov>. void CalcGaussLegendreSamplingPoints(TGraph *g, Double_t eps); Type safe interface (static method); The number of sampling points are taken from the TGraph. Double_t operator()(Double_t x, Double_t y = 0, Dou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TF1.html:63239,test,tested,63239,root/html534/TF1.html,https://root.cern,https://root.cern/root/html534/TF1.html,1,['test'],['tested']
Testability,"Double_t parmax); Set limits for parameter ipar. The specified limits will be used in a fit operation; when the option ""B"" is specified (Bounds).; To fix a parameter, use TF1::FixParameter. void SetRange(Double_t xmin, Double_t xmax); Initialize the upper and lower bounds to draw the function. The function range is also used in an histogram fit operation; when the option ""R"" is specified. void SetSavedPoint(Int_t point, Double_t value); Restore value of function saved at point. void SetTitle(const char* title = """"); Set function title; if title has the form ""fffffff;xxxx;yyyy"", it is assumed that; the function title is ""fffffff"" and ""xxxx"" and ""yyyy"" are the; titles for the X and Y axis respectively. void Streamer(TBuffer& ); Stream a class object. void Update(); Called by functions such as SetRange, SetNpx, SetParameters; to force the deletion of the associated histogram or Integral. void RejectPoint(Bool_t reject = kTRUE); Static function to set the global flag to reject points; the fgRejectPoint global flag is tested by all fit functions; if TRUE the point is not included in the fit.; This flag can be set by a user in a fitting function.; The fgRejectPoint flag is reset by the TH1 and TGraph fitting functions. Bool_t RejectedPoint(); See TF1::RejectPoint above. Double_t Moment(Double_t n, Double_t a, Double_t b, const Double_t* params = 0, Double_t epsilon = 9.9999999999999995E-7); Return nth moment of function between a and b. See TF1::Integral() for parameter definitions. Double_t CentralMoment(Double_t n, Double_t a, Double_t b, const Double_t* params = 0, Double_t epsilon = 9.9999999999999995E-7); Return nth central moment of function between a and b; (i.e the n-th moment around the mean value). See TF1::Integral() for parameter definitions; Author: Gene Van Buren <gene@bnl.gov>. void CalcGaussLegendreSamplingPoints(TGraph *g, Double_t eps); Type safe interface (static method); The number of sampling points are taken from the TGraph. Double_t operator()(Doubl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TF1.html:64797,test,tested,64797,root/html602/TF1.html,https://root.cern,https://root.cern/root/html602/TF1.html,2,['test'],['tested']
Testability,"Double_t theta, Double_t psi); TRotation&RotateZ(Double_t); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); TRotation&SetToIdentity(); virtual voidTObject::SetUniqueID(UInt_t uid); TRotation&SetXAxis(const TVector3& axis); TRotation&SetXAxis(const TVector3& axis, const TVector3& xyPlane); TRotation&SetXEulerAngles(Double_t phi, Double_t theta, Double_t psi); voidSetXPhi(Double_t); voidSetXPsi(Double_t); voidSetXTheta(Double_t); TRotation&SetYAxis(const TVector3& axis); TRotation&SetYAxis(const TVector3& axis, const TVector3& yzPlane); TRotation&SetYEulerAngles(Double_t phi, Double_t theta, Double_t psi); voidSetYPhi(Double_t); voidSetYPsi(Double_t); voidSetYTheta(Double_t); TRotation&SetZAxis(const TVector3& axis); TRotation&SetZAxis(const TVector3& axis, const TVector3& zxPlane); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Double_tThetaX() const; Double_tThetaY() const; Double_tThetaZ() const; TRotation&Transform(const TRotation& m); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; Double_tXX() const; Double_tXY() const; Double_tXZ() const; Double_tYX() const; Double_tYY() const; Double_tYZ() const; Double_tZX() const; Double_tZY() const; Double_tZZ() const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TRotation.html:11288,Test,TestBit,11288,root/html530/TRotation.html,https://root.cern,https://root.cern/root/html530/TRotation.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"Double_t value); Double_tGetChisquare() const; static TF1*GetCurrent(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual TStringTFormula::GetExpFormula(Option_t* option = """") const; virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; TH1*GetHistogram() const; virtual const char*TObject::GetIconName() const; virtual const TObject*TFormula::GetLinearPart(Int_t i); virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual Color_tTAttMarker::GetMarkerColor() const; virtual Size_tTAttMarker::GetMarkerSize() const; virtual Style_tTAttMarker::GetMarkerStyle() const; static voidTFormula::GetMaxima(Int_t& maxop, Int_t& maxpar, Int_t& maxconst); virtual Double_tGetMaximum(Double_t xmin = 0, Double_t xmax = 0, Double_t epsilon = 1.0E-10, Int_t maxiter = 100, Bool_t logx = false) const; virtual Double_tGetMaximumStored() const; virtual Double_tGetMaximumX(Double_t xmin = 0, Double_t xmax = 0, Double_t epsilon = 1.0E-10, Int_t maxiter = 100, Bool_t logx = false) const; TMethodCall*GetMethodCall() const; virtual Double_tGetMinimum(Double_t xmin = 0, Double_t xmax = 0, Double_t epsilon = 1.0E-10, Int_t maxiter = 100, Bool_t logx = false) const; virtual Double_tGetMinimumStored() const; virtual Double_tGetMinimumX(Double_t xmin = 0, Double_t xmax = 0, Double_t epsilon = 1.0E-10, Int_t maxiter = 100, Bool_t logx = false) const; virtual const char*TNamed::GetName() const; virtual Int_tGetNDF() const; virtual Int_tTFormula::GetNdim() const; virtual Int_tTFormula::GetNpar() const; virtual Int_tGetNpx() const; virtual Int_tTFormula::GetNumber() const; virtual Int_tGetNumberFitPoints() const; virtual Int_tGetNumberFreeParameters() const; virtual char*GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Double_tTFormula::GetParameter(Int_t ipar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TF1.html:9221,log,logx,9221,root/html602/TF1.html,https://root.cern,https://root.cern/root/html602/TF1.html,1,['log'],['logx']
Testability,"Double_t x). Double_t Interpolate(Double_t x, Double_t y). Double_t Interpolate(Double_t x, Double_t y, Double_t z); Given a point P(x,y,z), Interpolate approximates the value via trilinear interpolation; based on the 8 nearest bin center points ( corner of the cube surronding the points); The Algorithm is described in http://en.wikipedia.org/wiki/Trilinear_interpolation; The given values (x,y,z) must be between first bin center and last bin center for each coordinate:. fXAxis.GetBinCenter(1) < x < fXaxis.GetBinCenter(nbinX) AND; fYAxis.GetBinCenter(1) < y < fYaxis.GetBinCenter(nbinY) AND; fZAxis.GetBinCenter(1) < z < fZaxis.GetBinCenter(nbinZ). Double_t KolmogorovTest(const TH1* h2, Option_t* option = """") const; Statistical test of compatibility in shape between; THIS histogram and h2, using Kolmogorov test.; Default: Ignore under- and overflow bins in comparison. option is a character string to specify options; ""U"" include Underflows in test; ""O"" include Overflows; ""N"" include comparison of normalizations; ""D"" Put out a line of ""Debug"" printout; ""M"" Return the Maximum Kolmogorov distance instead of prob. The returned function value is the probability of test; (much less than one means NOT compatible). The KS test uses the distance between the pseudo-CDF's obtained; from the histogram. Since in more than 1D the order for generating the pseudo-CDF is; arbitrary, we use the pseudo-CDF's obtained from all the possible 6 combinatons of the 3 axis.; The average of all the maximum distances obtained is used in the tests. Long64_t Merge(TCollection* list); Add all histograms in the collection to this histogram.; This function computes the min/max for the axes,; compute a new number of bins, if necessary,; add bin contents, errors and statistics.; If overflows are present and limits are different the function will fail.; The function returns the total number of entries in the result histogram; if the merge is successfull, -1 otherwise. IMPORTANT remark. The 2 axis x and y ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH3.html:36822,test,test,36822,root/html528/TH3.html,https://root.cern,https://root.cern/root/html528/TH3.html,4,['test'],['test']
Testability,"Double_t* cutMin, Double_t* cutMax, Double_t& effS, Double_t& effB); voidGetEffsfromSelection(Double_t* cutMin, Double_t* cutMax, Double_t& effS, Double_t& effB); virtual voidInit(); voidMatchCutsToPars(vector<Double_t>&, Double_t*, Double_t*); voidMatchCutsToPars(vector<Double_t>&, Double_t**, Double_t**, Int_t ibin); voidMatchParsToCuts(const vector<Double_t>&, Double_t*, Double_t*); voidMatchParsToCuts(Double_t*, Double_t*, Double_t*). Data Members; public:. Bool_tTMVA::MethodBase::fSetupCompletedis method setup; const TMVA::Event*TMVA::MethodBase::fTmpEvent! temporary event when testing on a different DataSet than the own one; static const Double_tfgMaxAbsCutVal; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TMVA::MethodBase::EWeightFileTypeTMVA::MethodBase::kROOT; static TObject::(anonymous)TObject::kSingleKey; static TMVA::MethodBase::EWeightFileTypeTMVA::MethodBase::kTEXT; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::Types::EAnalysisTypeTMVA::MethodBase::fAnalysisTypemethod-mode : true --> regression, false --> classification; UInt_tTMVA::MethodBase::fBackgroundClassindex of the Background-class; vector<TString>*TMVA::MethodBase::fInputVarsvector of input variables used in MVA; vector<Float_t>*TMVA::MethodBase::fMulticlassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase::fNbinsnumber of bins in input variable histo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MethodCuts.html:18343,test,testing,18343,root/html602/TMVA__MethodCuts.html,https://root.cern,https://root.cern/root/html602/TMVA__MethodCuts.html,2,['test'],['testing']
Testability,"Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const. TGeoVolume * Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step). const char * GetAxisName(Int_t iaxis) const. Double_t GetAxisRange(Int_t iaxis, Double_t& xlo, Double_t& xhi) const. void GetBoundingCylinder(Double_t* param) const. Int_t GetByteCount() const. Bool_t GetPointsOnSegments(Int_t npoints, Double_t* array) const. Int_t GetFittingBox(const TGeoBBox* parambox, TGeoMatrix* mat, Double_t& dx, Double_t& dy, Double_t& dz) const. Int_t GetId() const; {return fShapeId;}. TGeoShape * GetMakeRuntimeShape(TGeoShape* mother, TGeoMatrix* mat) const. void GetMeshNumbers(Int_t& , Int_t& , Int_t& ) const; {;}. Int_t GetNmeshVertices() const; {return 0;}. Bool_t IsAssembly() const; {return kFALSE;}. Bool_t IsComposite() const; {return kFALSE;}. Bool_t IsCylType() const. Bool_t IsReflected() const; {return kFALSE;}. Bool_t IsRunTimeShape() const; {return TestShapeBit(kGeoRunTimeShape);}. Bool_t IsValid() const; {return !TestShapeBit(kGeoInvalidShape);}. Bool_t IsValidBox() const. void InspectShape() const. TBuffer3D * MakeBuffer3D() const; {return 0;}. Double_t Safety(Double_t* point, Bool_t in = kTRUE) const. void SetDimensions(Double_t* param). void SetId(Int_t id); {fShapeId = id;}. void SetPoints(Double_t* points) const. void SetPoints(Float_t* points) const. void SetSegsAndPols(TBuffer3D& buff) const. void SetRuntime(Bool_t flag = kTRUE); {SetShapeBit(kGeoRunTimeShape, flag);}. void Sizeof3D() const. void SetShapeBit(UInt_t f, Bool_t set); ----- bit manipulation. void ResetShapeBit(UInt_t f); { fShapeBits &= ~(f & kBitMask32); }. Bool_t TestShapeBit(UInt_t f) const; { return (Bool_t) ((fShapeBits & f) != 0); }. Int_t TestShapeBits(UInt_t f) const; { return (Int_t) (fShapeBits & f); }. void InvertShapeBit(UInt_t f); { fShapeBits ^= f & kBitMask32; }. » Author: Andrei Gheata 31/01/02 » Copyright (C) 1995-2000, Rene Brun and Fons ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoShape.html:20283,Test,TestShapeBit,20283,root/html528/TGeoShape.html,https://root.cern,https://root.cern/root/html528/TGeoShape.html,3,['Test'],['TestShapeBit']
Testability,"Double_t* points) const; virtual voidSetDimensions(Double_t* param); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTGeoShape::SetId(Int_t id); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPoints(Double_t* points) const; virtual voidSetPoints(Float_t* points) const; voidTGeoShape::SetRuntime(Bool_t flag = kTRUE); virtual voidTGeoBBox::SetSegsAndPols(TBuffer3D& buffer) const; voidTGeoShape::SetShapeBit(UInt_t f); voidTGeoShape::SetShapeBit(UInt_t f, Bool_t set); virtual voidTNamed::SetTitle(const char* title = """")MENU ; static voidTGeoShape::SetTransform(TGeoMatrix* matrix); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetVertex(Double_t* vertex) const; Int_tTGeoShape::ShapeDistancetoPrimitive(Int_t numpoints, Int_t px, Int_t py) const; virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidSizeof3D() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTGeoShape::TestShapeBit(UInt_t f) const; Int_tTGeoShape::TestShapeBits(UInt_t f) const; TGeoTrd2(); TGeoTrd2(Double_t* params); TGeoTrd2(const TGeoTrd2&); TGeoTrd2(Double_t dx1, Double_t dx2, Double_t dy1, Double_t dy2, Double_t dz); TGeoTrd2(const char* name, Double_t dx1, Double_t dx2, Double_t dy1, Double_t dy2, Double_t dz); static Double_tTGeoShape::Tolerance(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoTrd2.html:10372,Test,TestBit,10372,root/html602/TGeoTrd2.html,https://root.cern,https://root.cern/root/html602/TGeoTrd2.html,8,['Test'],"['TestBit', 'TestBits', 'TestShapeBit', 'TestShapeBits']"
Testability,"Double_tNormInf(); virtual Bool_tTObject::Notify(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TQpVar&operator=(const TQpVar& source); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); virtual voidSaxpy(TQpVar* b, Double_t alpha); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShiftBoundVariables(Double_t alpha, Double_t beta); virtual voidShowMembers(TMemberInspector& insp); virtual Double_tStepBound(TQpVar* b); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual Bool_tValidNonZeroPattern(); virtual Double_tViolation(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TQpVar.html:5184,Test,TestBit,5184,root/html528/TQpVar.html,https://root.cern,https://root.cern/root/html528/TQpVar.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"Double_t GetPhi () const override;  ; Int_t GetPixmapID () const override;  ; TObject * GetPrimitive (const char *name) const override;  Get primitive. ;  ; void GetRange (Double_t &x1, Double_t &y1, Double_t &x2, Double_t &y2) override;  Return pad world coordinates range. ;  ; void GetRangeAxis (Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) override;  Return pad axis coordinates range. ;  ; TObject * GetSelected () const override;  Get selected. ;  ; TVirtualPad * GetSelectedPad () const override;  Get selected pad. ;  ; Double_t GetTheta () const override;  ; Int_t GetTickx () const override;  ; Int_t GetTicky () const override;  ; const char * GetTitle () const override;  Returns title of object. ;  ; Double_t GetUxmax () const override;  Returns the maximum x-coordinate value visible on the pad. If log axis the returned value is in decades. ;  ; Double_t GetUxmin () const override;  Returns the minimum x-coordinate value visible on the pad. If log axis the returned value is in decades. ;  ; Double_t GetUymax () const override;  Returns the maximum y-coordinate value visible on the pad. If log axis the returned value is in decades. ;  ; Double_t GetUymin () const override;  Returns the minimum y-coordinate value visible on the pad. If log axis the returned value is in decades. ;  ; TView * GetView () const override;  ; TObject * GetView3D () const override;  ; TVirtualViewer3D * GetViewer3D (Option_t *type="""") override;  Create/obtain handle to 3D viewer. ;  ; TVirtualPad * GetVirtCanvas () const override;  Get virtual canvas. ;  ; UInt_t GetWh () const override;  Get Wh. ;  ; Double_t GetWNDC () const override;  Get width of pad along X in Normalized Coordinates (NDC) ;  ; UInt_t GetWw () const override;  Get Ww. ;  ; Double_t GetX1 () const override;  ; Double_t GetX2 () const override;  ; Double_t GetXlowNDC () const override;  ; Double_t GetY1 () const override;  ; Double_t GetY2 () const override;  ; Double_t GetYlowNDC () const override; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTInspectCanvas.html:17649,log,log,17649,doc/master/classTInspectCanvas.html,https://root.cern,https://root.cern/doc/master/classTInspectCanvas.html,8,['log'],['log']
Testability,"DragType(Int_t type); virtual voidTGFrame::SetDrawOption(Option_t* = """"); virtual voidTGFrame::SetDropType(Int_t type); static voidTObject::SetDtorOnly(void* obj); virtual voidTGCompositeFrame::SetEditable(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetEditDisabled(UInt_t on = 1); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); voidSetPosition(Int_t x, Int_t y); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); voidShow(Int_t x, Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGSplitTool.html:14111,Test,TestBit,14111,root/html528/TGSplitTool.html,https://root.cern,https://root.cern/root/html528/TGSplitTool.html,6,['Test'],"['TestBit', 'TestBits']"
Testability,"DragType(Int_t type); virtual voidTGFrame::SetDrawOption(Option_t* = """"); virtual voidTGFrame::SetDropType(Int_t type); static voidTObject::SetDtorOnly(void* obj); virtual voidTGFrame::SetEditable(Bool_t); virtual voidTGWindow::SetEditDisabled(UInt_t on = kEditDisable); voidTGSplitter::SetExternalHandler(Bool_t x); virtual voidTGFrame::SetForegroundColor(Pixel_t); virtual voidSetFrame(TGFrame* frame, Bool_t left); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGFrame::SetLayoutBroken(Bool_t = kTRUE); virtual voidTGWindow::SetMapSubwindows(Bool_t); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGVSplitter(const TGWindow* p, UInt_t w, UInt_t h, Bool_t external); TGVSplitter(const TGWindow* p = 0, UInt_t w = 4, UInt_t h = 4, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGVSplitter.html:13121,Test,TestBit,13121,root/html602/TGVSplitter.html,https://root.cern,https://root.cern/root/html602/TGVSplitter.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"DrawMarker(x,0.65);; 158 text.DrawText(x,0.54,atext.Data());; 159 atext.Form(""%d"",i+103);; 160 marker.SetMarkerStyle(i+103);; 161 marker.DrawMarker(x,0.88);; 162 text.DrawText(x,0.77,atext.Data());; 163 }; 164}; 165 ; 166////////////////////////////////////////////////////////////////////////////////; 167/// Compute distance from point px,py to a marker.; 168///; 169/// Compute the closest distance of approach from point px,py to this marker.; 170/// The distance is computed in pixels units.; 171/// \return 0 if the distance <= markerRadius; 172/// exact computed distance if dist in [markerRadius+1, markerRadius+2]; 173/// 999 if larger than markerRadius + 3; 174/// 9999 if no pad; 175 ; 176Int_t TMarker::DistancetoPrimitive(Int_t px, Int_t py); 177{; 178 if (!gPad) return 9999;; 179 Int_t pxm, pym;; 180 if (TestBit(kMarkerNDC)) {; 181 pxm = gPad->UtoPixel(fX);; 182 pym = gPad->VtoPixel(fY);; 183 } else {; 184 pxm = gPad->XtoAbsPixel(gPad->XtoPad(fX));; 185 pym = gPad->YtoAbsPixel(gPad->YtoPad(fY));; 186 }; 187 Int_t dist = static_cast<Int_t>(std::min<Long64_t>(INT_MAX, TMath::Sqrt(Long64_t(px-pxm)*(px-pxm) + Long64_t(py-pym)*(py-pym))));; 188 ; 189 //marker size = 1 is about 8 pixels; 190 Int_t markerRadius = Int_t(4*fMarkerSize);; 191 if (dist <= markerRadius) return 0;; 192 if (dist > markerRadius+3) return 999;; 193 return dist;; 194}; 195 ; 196////////////////////////////////////////////////////////////////////////////////; 197/// Draw this marker with its current attributes.; 198 ; 199void TMarker::Draw(Option_t *option); 200{; 201 AppendPad(option);; 202 ; 203}; 204 ; 205////////////////////////////////////////////////////////////////////////////////; 206/// Draw this marker with new coordinates.; 207 ; 208TMarker *TMarker::DrawMarker(Double_t x, Double_t y); 209{; 210 TMarker *newmarker = new TMarker(x, y, 1);; 211 TAttMarker::Copy(*newmarker);; 212 newmarker->SetBit(kCanDelete);; 213 newmarker->AppendPad();; 214 return newmarker;; 215}; 216 ; 217////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMarker_8cxx_source.html:5335,Test,TestBit,5335,doc/master/TMarker_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMarker_8cxx_source.html,1,['Test'],['TestBit']
Testability,"DrawOption(Option_t* = """"); virtual voidTGFrame::SetDropType(Int_t type); static voidTObject::SetDtorOnly(void* obj); virtual voidSetEditable(Bool_t on = kTRUE); virtual voidSetEditDisabled(UInt_t on = 1); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidSetLayoutBroken(Bool_t on = kTRUE); virtual voidSetLayoutManager(TGLayoutManager* l); virtual voidSetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGCompositeFrame(TGClient* c, Window_t id, const TGWindow* parent = 0); TGCompositeFrame(const TGWindow* p = 0, UInt_t w = 1, UInt_t h = 1, UInt_t options = 0, Pixel_t back = GetDefaultFrameBackground()); virtual Bool_tTranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGCompositeFrame.html:14229,Test,TestBit,14229,root/html602/TGCompositeFrame.html,https://root.cern,https://root.cern/root/html602/TGCompositeFrame.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"DrawOption(Option_t* = """"); virtual voidTGFrame::SetDropType(Int_t type); static voidTObject::SetDtorOnly(void* obj); virtual voidTGCompositeFrame::SetEditable(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetEditDisabled(UInt_t on = 1); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGColorPopup(const TGWindow* p = 0, const TGWindow* m = 0, Pixel_t color = 0); virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGColorPopup.html:14787,Test,TestBit,14787,root/html602/TGColorPopup.html,https://root.cern,https://root.cern/root/html602/TGColorPopup.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"DrawOption(Option_t* = """"); virtual voidTGFrame::SetDropType(Int_t type); static voidTObject::SetDtorOnly(void* obj); virtual voidTGCompositeFrame::SetEditable(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetEditDisabled(UInt_t on = 1); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); voidSetModel(TEveGridStepper* m); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TEveGridStepperSubEditor(const TGWindow* p); virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveGridStepperSubEditor.html:14168,Test,TestBit,14168,root/html602/TEveGridStepperSubEditor.html,https://root.cern,https://root.cern/root/html602/TEveGridStepperSubEditor.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"DrawOption(Option_t* = """"); virtual voidTGFrame::SetDropType(Int_t type); static voidTObject::SetDtorOnly(void* obj); virtual voidTGCompositeFrame::SetEditable(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetEditDisabled(UInt_t on = 1); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); voidSetModel(TEveRGBAPalette* p); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TEveRGBAPaletteSubEditor(const TGWindow* p); virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveRGBAPaletteSubEditor.html:14369,Test,TestBit,14369,root/html602/TEveRGBAPaletteSubEditor.html,https://root.cern,https://root.cern/root/html602/TEveRGBAPaletteSubEditor.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"DrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidsetExpensiveObjectCache(RooExpensiveObjectCache& cache); voidsetLocalNoDirtyInhibit(Bool_t flag) const; virtual voidSetName(const char* name); virtual voidSetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidsetOperMode(RooAbsArg::OperMode mode, Bool_t recurseADirty = kTRUE); voidsetProhibitServerRedirect(Bool_t flag); voidsetShapeDirty() const; voidsetStringAttribute(const Text_t* key, const Text_t* value); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidsetTransientAttribute(const Text_t* name, Bool_t value = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); voidsetValueDirty() const; TIterator*shapeClientIterator() const; RooFItershapeClientMIterator() const; virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); const map<string,string>&stringAttributes() const; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; const set<string>&transientAttributes() const; voidtreeNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t doBranch = kTRUE, Bool_t doLeaf = kTRUE, Bool_t valueOnly = kFALSE, Bool_t recurseNonDerived = kFALSE) const; voidunRegisterCache(RooAbsCache& cache); virtual voidTObject::UseCurrentStyle(); TIterator*valueClientIterator() const; RooFItervalueClientMIterator() const; static voidverboseDirty(Bool_t flag); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; voidwireAllCaches(); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidwriteToStream(ostream& os, Bool_t compact) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsArg.html:14137,Test,TestBit,14137,root/html602/RooAbsArg.html,https://root.cern,https://root.cern/root/html602/RooAbsArg.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"DrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::VariableTransformBase::SetEnabled(Bool_t e); voidTMVA::VariableTransformBase::SetNormalise(Bool_t n); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTMVA::VariableTransformBase::SetOutput(TMVA::Event* event, vector<Float_t>& output, vector<Char_t>& mask, const TMVA::Event* oldEvent = 0, Bool_t backTransform = kFALSE) const; voidTMVA::VariableTransformBase::SetOutputDataSetInfo(TMVA::DataSetInfo* outputDsi); voidTMVA::VariableTransformBase::SetTMVAVersion(TMVA::TMVAVersion_t v); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::VariableTransformBase::SetUseSignalTransform(Bool_t e = kTRUE); virtual voidShowMembers(TMemberInspector&); const vector<TMVA::VariableInfo>&TMVA::VariableTransformBase::Spectators() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; const vector<TMVA::VariableInfo>&TMVA::VariableTransformBase::Targets() const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTMVA::VariableTransformBase::ToggleInputSortOrder(Bool_t sortOrder); virtual const TMVA::Event*Transform(const TMVA::Event *const, Int_t cls) const; virtual voidTObject::UseCurrentStyle(); Bool_tTMVA::VariableTransformBase::UseSignalTransform() const; TMVA::VariableGaussTransformVariableGaussTransform(const TMVA::VariableGaussTransform&); TMVA::VariableGaussTransformVariableGaussTransform(TMVA::DataSetInfo& dsi, TString strcor = """"); const vector<TMVA::VariableInfo>&TMVA::VariableTransformBase::Variables() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidWriteTransformationToStream(ostream&) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__VariableGaussTransform.html:6456,Test,TestBit,6456,root/html534/TMVA__VariableGaussTransform.html,https://root.cern,https://root.cern/root/html534/TMVA__VariableGaussTransform.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"DropFraction=0.0,DropRepetitions=5\"" \n \; 1559 - explanation: two stacked training settings separated by \""|\"" \n \; 1560 . first training setting: \""LearningRate=1e-1,Momentum=0.3,ConvergenceSteps=50,BatchSize=30,TestRepetitions=7,WeightDecay=0.0,Renormalize=L2,DropConfig=0.0,DropRepetitions=5\"" \n \; 1561 . second training setting : \""LearningRate=1e-4,Momentum=0.3,ConvergenceSteps=50,BatchSize=20,TestRepetitions=7,WeightDecay=0.001,Renormalize=L2,DropFractions=0.0,DropRepetitions=5\"" \n \; 1562 . LearningRate : \n \; 1563 - recommended for classification: 0.1 initially, 1e-4 later \n \; 1564 - recommended for regression: 1e-4 and less \n \; 1565 . Momentum : \n \; 1566 preserve a fraction of the momentum for the next training batch [fraction = 0.0 - 1.0] \n \; 1567 . Repetitions : \n \; 1568 train \""Repetitions\"" repetitions with the same minibatch before switching to the next one \n \; 1569 . ConvergenceSteps : \n \; 1570 Assume that convergence is reached after \""ConvergenceSteps\"" cycles where no improvement \n \; 1571 of the error on the test samples has been found. (Mind that only at each \""TestRepetitions\"" \n \; 1572 cycle the test samples are evaluated and thus the convergence is checked) \n \; 1573 . BatchSize \n \; 1574 Size of the mini-batches. \n \; 1575 . TestRepetitions \n \; 1576 Perform testing the neural net on the test samples each \""TestRepetitions\"" cycle \n \; 1577 . WeightDecay \n \; 1578 If \""Renormalize\"" is set to L1 or L2, \""WeightDecay\"" provides the renormalization factor \n \; 1579 . Renormalize \n \; 1580 NONE, L1 (|w|) or L2 (w^2) \n \; 1581 . DropConfig \n \; 1582 Drop a fraction of arbitrary nodes of each of the layers according to the values given \n \; 1583 in the DropConfig. \n \; 1584 [example: DropConfig=0.0+0.5+0.3 \n \; 1585 meaning: drop no nodes in layer 0 (input layer), half of the nodes in layer 1 and 30% of the nodes \n \; 1586 in layer 2 \n \; 1587 recommended: leave all the nodes turned on for the input layer (layer",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDNN_8cxx_source.html:59038,test,test,59038,doc/master/MethodDNN_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDNN_8cxx_source.html,1,['test'],['test']
Testability,"DropType(Int_t type); static voidTObject::SetDtorOnly(void* obj); virtual voidTGCompositeFrame::SetEditable(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetEditDisabled(UInt_t on = 1); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGedFrame::SetGedEditor(TGedEditor* ed); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidSetModel(TObject*); voidTGedFrame::SetModelClass(TClass* mcl); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTGedFrame::Update(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPieEditor.html:14892,Test,TestBit,14892,root/html528/TPieEditor.html,https://root.cern,https://root.cern/root/html528/TPieEditor.html,12,['Test'],"['TestBit', 'TestBits']"
Testability,"DropType(Int_t type); static voidTObject::SetDtorOnly(void* obj); virtual voidTGCompositeFrame::SetEditable(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetEditDisabled(UInt_t on = 1); voidSetFixedSize(Bool_t fixed); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidSetWindowName(const char* name); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); voidShowContainer(); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); voidUndockContainer(); virtual voidUndocked()SIGNAL ; virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGDockableFrame.html:14986,Test,TestBit,14986,root/html528/TGDockableFrame.html,https://root.cern,https://root.cern/root/html528/TGDockableFrame.html,6,['Test'],"['TestBit', 'TestBits']"
Testability,"DtorOnly(void* obj); virtual voidTGCompositeFrame::SetEditable(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetEditDisabled(UInt_t on = 1); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGedFrame::SetGedEditor(TGedEditor* ed); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidSetModel(TObject* obj); voidTGedFrame::SetModelClass(TClass* mcl); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); voidSwitchColorSet(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTGedFrame::Update(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveViewerListEditor.html:14867,Test,TestBit,14867,root/html534/TEveViewerListEditor.html,https://root.cern,https://root.cern/root/html534/TEveViewerListEditor.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"DtorOnly(void* obj); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); voidTMVA::MethodANNBase::SetNeuronInputCalculator(TMVA::TNeuronInput* inputCalculator); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::MethodBase::WriteEvaluationHistosToFile(TMVA::Types::ETreeType treetype); virtual voidTMVA::MethodANNBase::WriteMonitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::Metho",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodMLP.html:11902,Test,TestBit,11902,root/html528/TMVA__MethodMLP.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodMLP.html,1,['Test'],['TestBit']
Testability,"DynamicDataSetDataSet * BuildDynamicDataSet(DataSetInfo &)Definition DataSetFactory.cxx:149; TMVA::DataSetFactory::EvtStatsPerClassstd::vector< EventStats > EvtStatsPerClassDefinition DataSetFactory.h:155; TMVA::DataSetFactory::fVerboseLevelTString fVerboseLevelVerboseLevel.Definition DataSetFactory.h:215; TMVA::DataSetFactory::fTargetFormulasstd::vector< TTreeFormula * > fTargetFormulastargetsDefinition DataSetFactory.h:230; TMVA::DataSetFactory::CheckTTreeFormulaBool_t CheckTTreeFormula(TTreeFormula *ttf, const TString &expression, Bool_t &hasDollar)checks a TTreeFormula for problemsDefinition DataSetFactory.cxx:251; TMVA::DataSetFactory::fCutFormulasstd::vector< TTreeFormula * > fCutFormulascutsDefinition DataSetFactory.h:231; TMVA::DataSetFactory::ResetBranchAndEventAddressesvoid ResetBranchAndEventAddresses(TTree *); TMVA::DataSetFactory::fCorrelationsBool_t fCorrelationsWhether to print correlations or not.Definition DataSetFactory.h:218; TMVA::DataSetFactory::fLoggerMsgLogger * fLogger! message loggerDefinition DataSetFactory.h:235; TMVA::DataSetFactory::ValuePerClassOfTreeTypestd::map< Types::ETreeType, ValuePerClass > ValuePerClassOfTreeTypeDefinition DataSetFactory.h:124; TMVA::DataSetFactory::RenormEventsvoid RenormEvents(DataSetInfo &dsi, EventVectorOfClassesOfTreeType &eventsmap, const EvtStatsPerClass &eventCounts, const TString &normMode)renormalisation of the TRAINING event weightsDefinition DataSetFactory.cxx:1488; TMVA::DataSetFactory::fComputeCorrelationsBool_t fComputeCorrelationsWhether to force computation of correlations or not.Definition DataSetFactory.h:219; TMVA::DataSetFactory::ResetCurrentTreevoid ResetCurrentTree()Definition DataSetFactory.h:204; TMVA::DataSetFactory::CalcCorrelationMatrixTMatrixD * CalcCorrelationMatrix(DataSet *, const UInt_t classNumber)computes correlation matrix for variables ""theVars"" in tree; ""theType"" defines the required event ""ty...Definition DataSetFactory.cxx:548; TMVA::DataSetFactory::CalcCovarianceMatrixTMat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataSetFactory_8h_source.html:14443,log,loggerDefinition,14443,doc/master/DataSetFactory_8h_source.html,https://root.cern,https://root.cern/doc/master/DataSetFactory_8h_source.html,1,['log'],['loggerDefinition']
Testability,"E ; virtual voidTPad::SetTitle(const char* title = """"); virtual voidTPad::SetToolTipText(const char* text, Long_t delayms = 1000); virtual voidTAttPad::SetTopMargin(Float_t topmargin); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTPad::SetVertical(Bool_t vert = kTRUE); virtual voidTPad::SetView(TView* view = 0); virtual voidTPad::SetViewer3D(TVirtualViewer3D* viewer3d); virtual voidTAttPad::SetXfile(Float_t xfile); virtual voidTAttPad::SetXstat(Float_t xstat); virtual voidTAttPad::SetYfile(Float_t yfile); virtual voidTAttPad::SetYstat(Float_t ystat); virtual voidTPad::ShowGuidelines(TObject* object, const Int_t event, const char mode = 'i', const bool cling = true); virtual voidShowMembers(TMemberInspector&); virtual voidTPad::StartEditing()SIGNAL ; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTPad::Update(); virtual voidTPad::UseCurrentStyle()MENU ; virtual Int_tTPad::UtoAbsPixel(Double_t u) const; virtual Int_tTPad::UtoPixel(Double_t u) const; virtual Int_tTPad::VtoAbsPixel(Double_t v) const; virtual Int_tTPad::VtoPixel(Double_t v) const; virtual TObject*TPad::WaitPrimitive(const char* pname = """", const char* emode = """"); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTButton::x3d(Option_t* option = """"); virtual Int_tTPad::XtoAbsPixel(Double_t x) const; virtual Double_tTPad::XtoPad(Double_t x) const; virtual Int_tTPad::XtoPixel(Double_t x) const; virtual voidTPad::XYtoAbsPixel(Double_t x, Double_t y, Int_t& xpixel, Int_t& ypixel) const; virtual voidTPad::XYtoPixel(Double_t x, Double_t y, Int_t& xpixel, Int_t& ypixel) cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGroupButton.html:22615,Test,TestBits,22615,root/html534/TGroupButton.html,https://root.cern,https://root.cern/root/html534/TGroupButton.html,1,['Test'],['TestBits']
Testability,"E ; virtual voidTPad::SetTitle(const char* title = """"); virtual voidTPad::SetToolTipText(const char* text, Long_t delayms = 1000); virtual voidTAttPad::SetTopMargin(Float_t topmargin); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTPad::SetVertical(Bool_t vert = kTRUE); virtual voidTPad::SetView(TView* view = 0); virtual voidTPad::SetViewer3D(TVirtualViewer3D* viewer3d); virtual voidTAttPad::SetXfile(Float_t xfile); virtual voidTAttPad::SetXstat(Float_t xstat); virtual voidTAttPad::SetYfile(Float_t yfile); virtual voidTAttPad::SetYstat(Float_t ystat); virtual voidTPad::ShowGuidelines(TObject* object, const Int_t event, const char mode = 'i', const bool cling = true); virtual voidShowMembers(TMemberInspector&); virtual voidTPad::StartEditing()SIGNAL ; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTPad::Update(); virtual voidTPad::UseCurrentStyle()MENU ; virtual Int_tTPad::UtoAbsPixel(Double_t u) const; virtual Int_tTPad::UtoPixel(Double_t u) const; virtual Int_tTPad::VtoAbsPixel(Double_t v) const; virtual Int_tTPad::VtoPixel(Double_t v) const; virtual TObject*TPad::WaitPrimitive(const char* pname = """", const char* emode = """"); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTPad::x3d(Option_t* type = """"); virtual Int_tTPad::XtoAbsPixel(Double_t x) const; virtual Double_tTPad::XtoPad(Double_t x) const; virtual Int_tTPad::XtoPixel(Double_t x) const; virtual voidTPad::XYtoAbsPixel(Double_t x, Double_t y, Int_t& xpixel, Int_t& ypixel) const; virtual voidTPad::XYtoPixel(Double_t x, Double_t y, Int_t& xpixel, Int_t& ypixel) const; vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TSlider.html:23590,Test,TestBits,23590,root/html534/TSlider.html,https://root.cern,https://root.cern/root/html534/TSlider.html,1,['Test'],['TestBits']
Testability,"E ; virtual voidTPad::SetTitle(const char* title = """"); virtual voidTPad::SetToolTipText(const char* text, Long_t delayms = 1000); virtual voidTAttPad::SetTopMargin(Float_t topmargin); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTPad::SetVertical(Bool_t vert = kTRUE); virtual voidTPad::SetView(TView* view = 0); virtual voidTPad::SetViewer3D(TVirtualViewer3D* viewer3d); virtual voidTAttPad::SetXfile(Float_t xfile); virtual voidTAttPad::SetXstat(Float_t xstat); virtual voidTAttPad::SetYfile(Float_t yfile); virtual voidTAttPad::SetYstat(Float_t ystat); virtual voidTPad::ShowGuidelines(TObject* object, const Int_t event, const char mode = 'i', const bool cling = true); virtual voidShowMembers(TMemberInspector&); virtual voidTPad::StartEditing()SIGNAL ; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTPad::Update(); virtual voidTPad::UseCurrentStyle()MENU ; virtual Int_tTPad::UtoAbsPixel(Double_t u) const; virtual Int_tTPad::UtoPixel(Double_t u) const; virtual Int_tTPad::VtoAbsPixel(Double_t v) const; virtual Int_tTPad::VtoPixel(Double_t v) const; virtual TObject*TPad::WaitPrimitive(const char* pname = """", const char* emode = """"); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidx3d(Option_t* option = """"); virtual Int_tTPad::XtoAbsPixel(Double_t x) const; virtual Double_tTPad::XtoPad(Double_t x) const; virtual Int_tTPad::XtoPixel(Double_t x) const; virtual voidTPad::XYtoAbsPixel(Double_t x, Double_t y, Int_t& xpixel, Int_t& ypixel) const; virtual voidTPad::XYtoPixel(Double_t x, Double_t y, Int_t& xpixel, Int_t& ypixel) const; virtua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TButton.html:24279,Test,TestBits,24279,root/html534/TButton.html,https://root.cern,https://root.cern/root/html534/TButton.html,1,['Test'],['TestBits']
Testability,"E ; virtual voidTPad::SetTitle(const char* title = """"); virtual voidTPad::SetToolTipText(const char* text, Long_t delayms = 1000); virtual voidTAttPad::SetTopMargin(Float_t topmargin); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTPad::SetVertical(Bool_t vert = kTRUE); virtual voidTPad::SetView(TView* view = 0); virtual voidTPad::SetViewer3D(TVirtualViewer3D* viewer3d); virtual voidTAttPad::SetXfile(Float_t xfile); virtual voidTAttPad::SetXstat(Float_t xstat); virtual voidTAttPad::SetYfile(Float_t yfile); virtual voidTAttPad::SetYstat(Float_t ystat); virtual voidTPad::ShowGuidelines(TObject* object, const Int_t event, const char mode = 'i', const bool cling = true); virtual voidShowMembers(TMemberInspector&); virtual voidTPad::StartEditing()SIGNAL ; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidUpdate(); virtual voidTPad::UseCurrentStyle()MENU ; virtual Int_tTPad::UtoAbsPixel(Double_t u) const; virtual Int_tTPad::UtoPixel(Double_t u) const; virtual Int_tTPad::VtoAbsPixel(Double_t v) const; virtual Int_tTPad::VtoPixel(Double_t v) const; virtual TObject*TPad::WaitPrimitive(const char* pname = """", const char* emode = """"); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTPad::x3d(Option_t* type = """"); virtual Int_tTPad::XtoAbsPixel(Double_t x) const; virtual Double_tTPad::XtoPad(Double_t x) const; virtual Int_tTPad::XtoPixel(Double_t x) const; virtual voidTPad::XYtoAbsPixel(Double_t x, Double_t y, Int_t& xpixel, Int_t& ypixel) const; virtual voidTPad::XYtoPixel(Double_t x, Double_t y, Int_t& xpixel, Int_t& ypixel) const; virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEvePad.html:21149,Test,TestBits,21149,root/html534/TEvePad.html,https://root.cern,https://root.cern/root/html534/TEvePad.html,1,['Test'],['TestBits']
Testability,"E"");; file->mkdir(""mydir"")->cd();; ch.Merge(file);. Long64_t Merge(TCollection* list, Option_t* option = """"); Merge all chains in the collection. (NOT IMPLEMENTED). Long64_t Merge(TCollection* list, TFileMergeInfo* info); Merge all chains in the collection. (NOT IMPLEMENTED). Long64_t Merge(TFile* file, Int_t basketsize, Option_t* option = """"); Merge all the entries in the chain into a new tree in the current file. Note: The ""file"" parameter is *not* the file where the new; tree will be inserted. The new tree is inserted into; gDirectory, which is usually the most recently opened; file, or the directory most recently cd()'d to. If option = ""C"" is given, the compression level for all branches; in the new Tree is set to the file compression level. By default,; the compression level of all branches is the original compression; level in the old trees. If basketsize > 1000, the basket size for all branches of the; new tree will be set to basketsize. Example using the file generated in $ROOTSYS/test/Event; merge two copies of Event.root. gSystem.Load(""libEvent"");; TChain ch(""T"");; ch.Add(""Event1.root"");; ch.Add(""Event2.root"");; ch.Merge(""all.root"");. If the chain is expecting the input tree inside a directory,; this directory is NOT created by this routine. So if you do:. TChain ch(""mydir/mytree"");; ch.Merge(""newfile.root"");. The resulting file will not have subdirectories. In order to; preserve the directory structure do the following instead:. TFile* file = TFile::Open(""newfile.root"", ""RECREATE"");; file->mkdir(""mydir"")->cd();; ch.Merge(file);. If 'option' contains the word 'fast' the merge will be done without; unzipping or unstreaming the baskets (i.e., a direct copy of the raw; bytes on disk). When 'fast' is specified, 'option' can also contains a; sorting order for the baskets in the output file. There is currently 3 supported sorting order:; SortBasketsByOffset (the default); SortBasketsByBranch; SortBasketsByEntry. When using SortBasketsByOffset the baskets are wri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TChain.html:41077,test,test,41077,root/html530/TChain.html,https://root.cern,https://root.cern/root/html530/TChain.html,5,['test'],['test']
Testability,"E); 144/* The queues are exclusive or - only one can be used. */; 145#error \; 146 ""Define ALTERNATIVE_QUEUE or NO_ALTERNATIVE_QUEUE (or none of them), but not both""; 147#endif; 148#if !defined(NO_ALTERNATIVE_QUEUE) && !defined(ALTERNATIVE_QUEUE); 149/* Use a default implementation */; 150#define NO_ALTERNATIVE_QUEUE; 151#endif; 152 ; 153#if defined(NO_FILESYSTEMS) && !defined(NO_FILES); 154/* File system access:; 155 * NO_FILES = do not serve any files from the file system automatically.; 156 * However, with NO_FILES CivetWeb may still write log files, read access; 157 * control files, default error page files or use API functions like; 158 * mg_send_file in callbacks to send files from the server local; 159 * file system.; 160 * NO_FILES only disables the automatic mapping between URLs and local; 161 * file names.; 162 * NO_FILESYSTEM = do not access any file at all. Useful for embedded; 163 * devices without file system. Logging to files in not available; 164 * (use callbacks instead) and API functions like mg_send_file are not; 165 * available.; 166 * If NO_FILESYSTEM is set, NO_FILES must be set as well.; 167 */; 168#error ""Inconsistent build flags, NO_FILESYSTEMS requires NO_FILES""; 169#endif; 170 ; 171/* DTL -- including winsock2.h works better if lean and mean */; 172#if !defined(WIN32_LEAN_AND_MEAN); 173#define WIN32_LEAN_AND_MEAN; 174#endif; 175 ; 176#if defined(__SYMBIAN32__); 177/* According to https://en.wikipedia.org/wiki/Symbian#History,; 178 * Symbian is no longer maintained since 2014-01-01.; 179 * Support for Symbian has been removed from CivetWeb; 180 */; 181#error ""Symbian is no longer maintained. CivetWeb no longer supports Symbian.""; 182#endif /* __SYMBIAN32__ */; 183 ; 184#if defined(__ZEPHYR__); 185#include <time.h>; 186 ; 187#include <ctype.h>; 188#include <net/socket.h>; 189#include <posix/pthread.h>; 190#include <posix/time.h>; 191#include <stdio.h>; 192#include <stdlib.h>; 193#include <string.h>; 194#include <zephyr.h>; 195 ; 196#include <",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:6964,Log,Logging,6964,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,2,['Log'],['Logging']
Testability,"E); virtual voidTGCompositeFrame::SetEditDisabled(UInt_t on = 1); voidSetEmbedded(Bool_t e = kTRUE); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); voidSetXPos(Int_t pos); virtual voidTGFrame::SetY(Int_t y); voidSetYPos(Int_t pos); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); voidSwitchLayout(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; voidTabSelected(Int_t id); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); voidUpdateBackground(Pixel_t col); voidUpdateBorder(Int_t); voidUpdateForeground(Pixel_t col); voidUpdateSelected(TGFrame* = 0)SIGNAL ; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGuiBldEditor.html:14427,Test,TestBit,14427,root/html534/TGuiBldEditor.html,https://root.cern,https://root.cern/root/html534/TGuiBldEditor.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"E); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); voidSetLimits(Int_t min, Int_t max); voidSetLimits(Float_t min, Float_t max, Int_t npos, TGNumberFormat::EStyle nef = TGNumberFormat::kNESRealTwo); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); voidTEveGValuatorBase::SetNEHeight(Int_t h); voidTEveGValuatorBase::SetNELength(Int_t l); static voidTObject::SetObjectStat(Bool_t stat); voidTEveGValuatorBase::SetShowSlider(Bool_t s = kTRUE); virtual voidTGFrame::SetSize(const TGDimension& s); voidSetSliderNewLine(Bool_t nl); voidSetToolTip(const char* tip); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidSetValue(Float_t v, Bool_t emit = kFALSE); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector&); voidSliderCallback(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); voidValueSet(Double_t)SIGNAL ; Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveGValuator.html:15285,Test,TestBit,15285,root/html534/TEveGValuator.html,https://root.cern,https://root.cern/root/html534/TEveGValuator.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"E); voidRooAbsArg::setTransientAttribute(const Text_t* name, Bool_t value = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); voidRooAbsReal::setUnit(const char* unit); voidRooAbsArg::setValueDirty() const; TIterator*RooAbsArg::shapeClientIterator() const; virtual voidShowMembers(TMemberInspector& insp); RooMoment*RooAbsReal::sigma(RooRealVar& obs); RooMoment*RooAbsReal::sigma(RooRealVar& obs, const RooArgSet& nset); virtual Int_tTNamed::Sizeof() const; RooNumGenConfig*RooAbsPdf::specialGeneratorConfig() const; RooNumGenConfig*RooAbsPdf::specialGeneratorConfig(Bool_t createOnTheFly); RooNumIntConfig*RooAbsReal::specialIntegratorConfig() const; RooNumIntConfig*RooAbsReal::specialIntegratorConfig(Bool_t createOnTheFly); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); const map<std::string,std::string>&RooAbsArg::stringAttributes() const; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tRooAbsPdf::traceEvalHook(Double_t value) const; Bool_tRooAbsPdf::traceEvalPdf(Double_t value) const; const set<std::string>&RooAbsArg::transientAttributes() const; voidRooAbsArg::treeNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t doBranch = kTRUE, Bool_t doLeaf = kTRUE, Bool_t valueOnly = kFALSE, Bool_t recurseNonDerived = kFALSE) const; voidRooAbsArg::unRegisterCache(RooAbsCache& cache); virtual voidTObject::UseCurrentStyle(); TIterator*RooAbsArg::valueClientIterator() const; static voidRooAbsArg::verboseDirty(Bool_t flag); static intRooAbsPdf::verboseEval(); static voidRooAbsPdf::verboseEval(Int_t stat); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidwriteToStream(ostream& os, Bool_t compact) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooGenericPdf.html:29575,Test,TestBits,29575,root/html528/RooGenericPdf.html,https://root.cern,https://root.cern/root/html528/RooGenericPdf.html,2,['Test'],['TestBits']
Testability,"E); voidRooAbsReal::setPlotLabel(const char* label); voidsetPositiveDefinite(bool flag = true); voidRooAbsArg::setProhibitServerRedirect(Bool_t flag); voidRooAbsArg::setShapeDirty() const; voidRooAbsArg::setStringAttribute(const Text_t* key, const Text_t* value); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidRooAbsArg::setTransientAttribute(const Text_t* name, Bool_t value = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); voidRooAbsReal::setUnit(const char* unit); voidRooAbsArg::setValueDirty() const; TIterator*RooAbsArg::shapeClientIterator() const; virtual voidShowMembers(TMemberInspector& insp); RooMoment*RooAbsReal::sigma(RooRealVar& obs); RooMoment*RooAbsReal::sigma(RooRealVar& obs, const RooArgSet& nset); virtual Int_tTNamed::Sizeof() const; RooNumIntConfig*RooAbsReal::specialIntegratorConfig() const; RooNumIntConfig*RooAbsReal::specialIntegratorConfig(Bool_t createOnTheFly); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); const map<std::string,std::string>&RooAbsArg::stringAttributes() const; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; const set<std::string>&RooAbsArg::transientAttributes() const; voidRooAbsArg::treeNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t doBranch = kTRUE, Bool_t doLeaf = kTRUE, Bool_t valueOnly = kFALSE, Bool_t recurseNonDerived = kFALSE) const; voidRooAbsArg::unRegisterCache(RooAbsCache& cache); virtual voidTObject::UseCurrentStyle(); TIterator*RooAbsArg::valueClientIterator() const; static voidRooAbsArg::verboseDirty(Bool_t flag); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidRooAbsReal::writeToStream(ostream& os, Bool_t compact) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/PiecewiseInterpolation.html:24416,Test,TestBit,24416,root/html530/PiecewiseInterpolation.html,https://root.cern,https://root.cern/root/html530/PiecewiseInterpolation.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"E, collection from the previous request is done, and broadcasting + collection from the other workers is done. The wrks arg can be used on the master to limit the set of workers. Returns 0 in case of success and -1 in case of error. ; Reimplemented in TProofLite.; Definition at line 8628 of file TProof.cxx. ◆ LoadPackage(). Int_t TProof::LoadPackage ; (; const char * ; package, . Bool_t ; notOnClient = kFALSE, . TList * ; loadopts = 0, . TList * ; workers = 0 . ). private . Load specified package. ; Executes the PROOF-INF/SETUP.C script on all active nodes. If notOnClient = true, don't load package on the client. The default is to load the package also on the client. The argument 'loadopts' specify a list of objects to be passed to the SETUP. The objects in the list must be streamable; the SETUP macro will be executed like this: SETUP.C(loadopts). Returns 0 in case of success and -1 in case of error. ; Definition at line 8069 of file TProof.cxx. ◆ LogMessage(). void TProof::LogMessage ; (; const char * ; msg, . Bool_t ; all . ). Log a message into the appropriate window by emitting a signal. ; Definition at line 6414 of file TProof.cxx. ◆ LogViewer(). void TProof::LogViewer ; (; const char * ; url = 0, . Int_t ; sessionidx = 0 . ). static . Start the log viewer window usign the plugin manager. ; Definition at line 12470 of file TProof.cxx. ◆ MakePlayer(). TVirtualProofPlayer * TProof::MakePlayer ; (; const char * ; player = 0, . TSocket * ; s = 0 . ). protectedvirtual . Construct a TProofPlayer object. ; The player string specifies which player should be created: remote, slave, sm (supermaster) or base. Default is remote. Socket is needed in case a slave player is created. ; Reimplemented in TProofSuperMaster.; Definition at line 10211 of file TProof.cxx. ◆ MarkBad() [1/2]. void TProof::MarkBad ; (; TSlave * ; wrk, . const char * ; reason = 0 . ). private . Add a bad slave server to the bad slave list and remove it from the active list and from the two monitor object",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:115549,Log,LogMessage,115549,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['Log'],['LogMessage']
Testability,"E6,; 184 -8.53555664245765465627E5; 185};; 186 ; 187static double C[] = {; 188/* 1.00000000000000000000E0, */; 189 -3.51815701436523470549E2,; 190 -1.70642106651881159223E4,; 191 -2.20528590553854454839E5,; 192 -1.13933444367982507207E6,; 193 -2.53252307177582951285E6,; 194 -2.01889141433532773231E6; 195};; 196 ; 197double lgam( double x ); 198{; 199 double p, q, u, w, z;; 200 int i;; 201 ; 202 int sgngam = 1;; 203 ; 204 if (x >= std::numeric_limits<double>::infinity()); 205 return(std::numeric_limits<double>::infinity());; 206 ; 207 if( x < -34.0 ); 208 {; 209 q = -x;; 210 w = lgam(q);; 211 p = std::floor(q);; 212 if( p==q )//_unur_FP_same(p,q); 213 return (std::numeric_limits<double>::infinity());; 214 i = (int) p;; 215 if( (i & 1) == 0 ); 216 sgngam = -1;; 217 else; 218 sgngam = 1;; 219 z = q - p;; 220 if( z > 0.5 ); 221 {; 222 p += 1.0;; 223 z = p - q;; 224 }; 225 z = q * std::sin( ROOT::Math::Pi() * z );; 226 if( z == 0 ); 227 return (std::numeric_limits<double>::infinity());; 228/* z = log(ROOT::Math::Pi()) - log( z ) - w;*/; 229 z = std::log(ROOT::Math::Pi()) - std::log( z ) - w;; 230 return( z );; 231 }; 232 ; 233 if( x < 13.0 ); 234 {; 235 z = 1.0;; 236 p = 0.0;; 237 u = x;; 238 while( u >= 3.0 ); 239 {; 240 p -= 1.0;; 241 u = x + p;; 242 z *= u;; 243 }; 244 while( u < 2.0 ); 245 {; 246 if( u == 0 ); 247 return (std::numeric_limits<double>::infinity());; 248 z /= u;; 249 p += 1.0;; 250 u = x + p;; 251 }; 252 if( z < 0.0 ); 253 {; 254 sgngam = -1;; 255 z = -z;; 256 }; 257 else; 258 sgngam = 1;; 259 if( u == 2.0 ); 260 return( std::log(z) );; 261 p -= 2.0;; 262 x = x + p;; 263 p = x * Polynomialeval(x, B, 5 ) / Polynomial1eval( x, C, 6);; 264 return( std::log(z) + p );; 265 }; 266 ; 267 if( x > kMAXLGM ); 268 return( sgngam * std::numeric_limits<double>::infinity() );; 269 ; 270 q = ( x - 0.5 ) * std::log(x) - x + LS2PI;; 271 if( x > 1.0e8 ); 272 return( q );; 273 ; 274 p = 1.0/(x*x);; 275 if( x >= 1000.0 ); 276 q += (( 7.9365079365079365079365e-4 * p; 277 - 2",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/SpecFuncCephes_8cxx_source.html:4927,log,log,4927,doc/master/SpecFuncCephes_8cxx_source.html,https://root.cern,https://root.cern/doc/master/SpecFuncCephes_8cxx_source.html,4,['log'],['log']
Testability,"ECREF(file);; 308 Py_DECREF(model_arg);; 309 ; 310 return 0;; 311}; 312 ; 313///////////////////////////////////////////////////////////////////////////////; 314/// Execute Python code from string; 315///; 316/// \param[in] code Python code as string; 317/// \param[in] errorMessage Error message which shall be shown if the execution fails; 318/// \param[in] start Start symbol; 319///; 320/// Helper function to run python code from string in local namespace with; 321/// error handling; 322/// `start` defines the start symbol defined in PyRun_String (Py_eval_input,; 323/// Py_single_input, Py_file_input); 324 ; 325void PyMethodBase::PyRunString(TString code, TString errorMessage, int start) {; 326 //std::cout << ""Run: >> "" << code << std::endl;; 327 fPyReturn = PyRun_String(code, start, fGlobalNS, fLocalNS);; 328 if (!fPyReturn) {; 329 Log() << kWARNING << ""Failed to run python code: "" << code << Endl;; 330 Log() << kWARNING << ""Python error message:"" << Endl;; 331 PyErr_Print();; 332 Log() << kFATAL << errorMessage << Endl;; 333 }; 334}; 335 ; 336///////////////////////////////////////////////////////////////////////////////; 337/// Execute Python code from string; 338///; 339/// \param[in] code Python code as string; 340/// \param[in] globalNS Global Namespace for Python Session; 341/// \param[in] localNS Local Namespace for Python Session; 342///; 343/// Overloaded static Helper function to run python code; 344/// from string and throw runtime error if the Python session; 345/// is unable to execute the code; 346 ; 347void PyMethodBase::PyRunString(TString code, PyObject *globalNS, PyObject *localNS){; 348 PyObject *fPyReturn = PyRun_String(code, Py_single_input, globalNS, localNS);; 349 if (!fPyReturn) {; 350 std::cout<<""\nPython error message:\n"";; 351 PyErr_Print();; 352 throw std::runtime_error(""\nFailed to run python code: ""+code);; 353 }; 354}; 355 ; 356///////////////////////////////////////////////////////////////////////////////; 357/// Returns `const char",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/PyMethodBase_8cxx_source.html:11484,Log,Log,11484,doc/master/PyMethodBase_8cxx_source.html,https://root.cern,https://root.cern/doc/master/PyMethodBase_8cxx_source.html,1,['Log'],['Log']
Testability,"ED: ...; case DISABLED: ... // UNUSED==DISABLED !; }; ROOT::option::Arg::Nonestatic ArgStatus None(const Option &, bool)For options that don't take an argument: Returns ARG_NONE.Definition OptionParser.h:907. Definition at line 544 of file OptionParser.h. ◆ untag(). static Option * ROOT::option::Option::untag ; (; Option * ; ptr). inlinestaticprivate . Definition at line 839 of file OptionParser.h. Member Data Documentation. ◆ arg. const char* ROOT::option::Option::arg. Pointer to this Option's argument (if any). ; NULL if this option has no argument. Do not confuse this with the empty string which is a valid argument. ; Definition at line 500 of file OptionParser.h. ◆ desc. const Descriptor* ROOT::option::Option::desc. Pointer to this Option's Descriptor. ; Remember that the first dummy descriptor (see Descriptor::longopt) is used for unknown options.; Attentiondesc==NULL signals that this Option is unused. This is the default state of elements in the result array. You don't need to test desc explicitly. You can simply write something like this: if (options[CREATE]); {; ...; }; This works because of operator const Option*() . ; Definition at line 476 of file OptionParser.h. ◆ name. const char* ROOT::option::Option::name. The name of the option as used on the command line. ; The main purpose of this string is to be presented to the user in messages.; In the case of a long option, this is the actual argv pointer, i.e. the first character is a '-'. In the case of a short option this points to the option character within the argv string.; Note that in the case of a short option group or an attached option argument, this string will contain additional characters following the actual name. Use namelen to filter out the actual option name only. ; Definition at line 492 of file OptionParser.h. ◆ namelen. int ROOT::option::Option::namelen. The length of the option name. ; Because name points into the actual argv string, the option name may be followed by more characters (e.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1option_1_1Option.html:13676,test,test,13676,doc/v632/classROOT_1_1option_1_1Option.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1option_1_1Option.html,2,['test'],['test']
Testability,"ELearningMethod { ;   kStochastic; , kBatch; , kSteepestDescent; , kRibierePolak; , ;   kFletcherReeves; , kBFGS. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TMultiLayerPerceptron ();  Default constructor. ;  ;  TMultiLayerPerceptron (const char *layout, const char *weight, TTree *data, TEventList *training, TEventList *test, TNeuron::ENeuronType type=TNeuron::kSigmoid, const char *extF="""", const char *extD="""");  The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ;  ;  TMultiLayerPerceptron (const char *layout, const char *weight, TTree *data=nullptr, const char *training=""Entry$%2==0"", const char *test="""", TNeuron::ENeuronType type=TNeuron::kSigmoid, const char *extF="""", const char *extD="""");  The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ;  ;  TMultiLayerPerceptron (const char *layout, TTree *data, TEventList *training, TEventList *test, TNeuron::ENeuronType type=TNeuron::kSigmoid, const char *extF="""", const char *extD="""");  The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ;  ;  TMultiLayerPerceptron (const char *layout, TTree *data=nullptr, const char *training=""Entry$%2==0"", const char *test="""", TNeuron::ENeuronType",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiLayerPerceptron.html:10174,test,test,10174,doc/master/classTMultiLayerPerceptron.html,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html,1,['test'],['test']
Testability,"ENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTDataSet::SetMother(TDataSet* parent = 0); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTTable::SetNRows(Int_t n); virtual voidTDataSet::SetObject(TObject* obj); static voidTObject::SetObjectStat(Bool_t stat); voidSetOffset(UInt_t offset, Int_t column); virtual voidTDataSet::SetParent(TDataSet* parent = 0); voidSetSize(UInt_t size, Int_t column); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidSetTypeSize(UInt_t size, Int_t column); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTDataSet::SetWrite(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTDataSet::Shunt(TDataSet* newParent = 0); virtual Int_tSizeof() const; virtual voidTDataSet::Sort(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; static const char*TableDictionary(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TTableDescriptor(); TTableDescriptor(const TTable* parentTable); TTableDescriptor(TClass* classPtr); TTableDescriptor(const TTableDescriptor& dsc); TTableDescriptor(const char* name); TTableDescriptor(Int_t n); TTableDescriptor(const char* name, Int_t n); UInt_tTypeSize(Int_t columnIndex) const; Int_tTypeSize(const Char_t* columnName = 0) const; voidTDataSet::UnMark()MENU ; voidTDataSet::UnMarkAll()MENU ; virtual voidTTable::Update(); virtual voidTTable::Update(TDataSet* set, UInt_t opt = 0); virtual Int_tUpdateOffsets(const TTableDescriptor* newDesciptor); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTDataSet::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTDataSet::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTableDescriptor.html:11832,Test,TestBit,11832,root/html602/TTableDescriptor.html,https://root.cern,https://root.cern/root/html602/TTableDescriptor.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"ENU ; static voidTTree::SetMaxTreeSize(Long64_t maxsize = 1900000000); virtual voidTTree::SetMaxVirtualSize(Long64_t size = 0)MENU ; virtual voidTTree::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTTree::SetNotify(TObject* obj); virtual voidTTree::SetObject(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTTree::SetParallelUnzip(Bool_t opt = kTRUE, Float_t RelSize = -1); virtual voidTTree::SetPerfStats(TVirtualPerfStats* perf); virtual voidTTree::SetScanField(Int_t n = 50)MENU ; virtual voidTTree::SetTimerInterval(Int_t msec = 333); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTTree::SetTreeIndex(TVirtualIndex* index); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTTree::SetUpdate(Int_t freq = 0); virtual voidTTree::SetWeight(Double_t w = 1, Option_t* option = """"); virtual voidTTree::Show(Long64_t entry = -1, Int_t lenmax = 20); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidTTree::StartViewer()MENU ; virtual Int_tTTree::StopCacheLearningPhase(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TNtupleD(); TNtupleD(const char* name, const char* title, const char* varlist, Int_t bufsize = 32000); virtual Int_tTTree::UnbinnedFit(const char* funcname, const char* varexp, const char* selection = """", Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); virtual voidTTree::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTTree::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTTree::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TNtupleD.html:19261,Test,TestBit,19261,root/html604/TNtupleD.html,https://root.cern,https://root.cern/root/html604/TNtupleD.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"ENU ; virtual voidTAttFill::SaveFillAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1001); virtual voidTAttLine::SaveLineAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1, Int_t widdef = 1); virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTTUBE::SetAspectRatio(Float_t factor = 1); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillStyle(Style_t fstyle); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidTShape::SetName(const char* name); virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTTUBE::SetNumberOfDivisions(Int_t ndiv); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTShape::SetVisibility(Int_t vis)MENU ; virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidTTUBE::Sizeof3D() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTShape::TransformPoints(Double_t* points, UInt_t NbPnts) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TCONE.html:6808,Test,TestBit,6808,root/html530/TCONE.html,https://root.cern,https://root.cern/root/html530/TCONE.html,12,['Test'],"['TestBit', 'TestBits']"
Testability,"ENU ; virtual voidTAttFill::SaveFillAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1001); virtual voidTAttLine::SaveLineAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1, Int_t widdef = 1); virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTTUBE::SetAspectRatio(Float_t factor = 1); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillStyle(Style_t fstyle); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidTShape::SetName(const char* name); virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTTUBE::SetNumberOfDivisions(Int_t ndiv); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTShape::SetVisibility(Int_t vis)MENU ; virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidTTUBS::Sizeof3D() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTShape::TransformPoints(Double_t* points, UInt_t NbPnts) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TCONS.html:7149,Test,TestBit,7149,root/html530/TCONS.html,https://root.cern,https://root.cern/root/html530/TCONS.html,8,['Test'],"['TestBit', 'TestBits']"
Testability,"ENU ; virtual voidTAttText::SetTextAttributes()MENU ; virtual voidTAttText::SetTextColor(Color_t tcolor = 1); virtual voidTAttText::SetTextColorAlpha(Color_t tcolor, Float_t talpha); virtual voidTAttText::SetTextFont(Font_t tfont = 62); virtual voidTAttText::SetTextSize(Float_t tsize = 1); virtual voidTAttText::SetTextSizePixels(Int_t npixels); voidSetTickLength(Float_t ticklength); voidSetTickSize(Float_t ticksize)MENU ; voidSetTimeFormat(const char* tformat); voidSetTimeOffset(Double_t toffset, Option_t* option = ""local""); virtual voidSetTitle(const char* title = """")MENU ; voidSetTitleColor(Int_t titlecolor)MENU ; voidSetTitleFont(Int_t titlefont)MENU ; voidSetTitleOffset(Float_t titleoffset = 1)MENU ; voidSetTitleSize(Float_t titlesize)MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); voidTLine::SetVertical(Bool_t set = kTRUE)TOGGLE GETTER ; voidSetWmax(Double_t wmax); voidSetWmin(Double_t wmin); virtual voidTLine::SetX1(Double_t x1); virtual voidTLine::SetX2(Double_t x2); virtual voidTLine::SetY1(Double_t y1); virtual voidTLine::SetY2(Double_t y2); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGaxis(); TGaxis(Double_t xmin, Double_t ymin, Double_t xmax, Double_t ymax, const char* funcname, Int_t ndiv = 510, Option_t* chopt = """", Double_t gridlength = 0); TGaxis(Double_t xmin, Double_t ymin, Double_t xmax, Double_t ymax, Double_t wmin, Double_t wmax, Int_t ndiv = 510, Option_t* chopt = """", Double_t gridlength = 0); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGaxis.html:10847,Test,TestBit,10847,root/html602/TGaxis.html,https://root.cern,https://root.cern/root/html602/TGaxis.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"ENU ; virtual voidTGraph::SetMinimum(Double_t minimum = -1111)MENU ; virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGraph::SetPoint(Int_t i, Double_t x, Double_t y); virtual voidTGraphAsymmErrors::SetPointError(Double_t exl, Double_t exh, Double_t eyl, Double_t eyh)MENU ; virtual voidTGraphAsymmErrors::SetPointError(Int_t i, Double_t exl, Double_t exh, Double_t eyl, Double_t eyh); virtual voidTGraphAsymmErrors::SetPointEXhigh(Int_t i, Double_t exh); virtual voidTGraphAsymmErrors::SetPointEXlow(Int_t i, Double_t exl); virtual voidTGraphAsymmErrors::SetPointEYhigh(Int_t i, Double_t eyh); virtual voidTGraphAsymmErrors::SetPointEYlow(Int_t i, Double_t eyl); voidsetRawEntries(Double_t n); virtual voidTGraph::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); voidRooPlotable::setYAxisLabel(const char* label); voidRooPlotable::setYAxisLimits(Double_t ymin, Double_t ymax); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidTGraph::Sort(Bool_t(*)(const TGraph*,Int_t,Int_t) greater = &TGraph::CompareX, Bool_t ascending = kTRUE, Int_t low = 0, Int_t high = -1111); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidRooPlotable::updateYAxisLimits(Double_t y); virtual voidTGraph::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidTGraph::Zero(Int_t& k, Double_t AZ, Double_t BZ, Double_t E2, Double_t& X, Double_t& Y, Int_t maxiterations).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooHist.html:15412,Test,TestBit,15412,root/html602/RooHist.html,https://root.cern,https://root.cern/root/html602/RooHist.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"ENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(); TStringmangle(const char* exp) const. Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. RooCatType_cat; TRegexp_regexp; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooMapCatEntry(const char* exp, const RooCatType* cat). RooMapCatEntry(const RooMapCatEntry& other). Bool_t match(const char* testPattern) const. TString mangle(const char* exp) const; Mangle name : escape regexp character '+'. inline RooMapCatEntry(); {}. virtual ~RooMapCatEntry(); {}. TObject* Clone(const char* newName = 0) const. Bool_t ok(); { return (_regexp.Status()==TRegexp::kOK) ; }. const RooCatType& outCat() const; { return _cat ; }. » Last changed: Mon Jul 4 15:23:18 2011 » Last generated: 2011-07-04 15:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooMapCatEntry.html:5873,test,testPattern,5873,root/html530/RooMapCatEntry.html,https://root.cern,https://root.cern/root/html530/RooMapCatEntry.html,1,['test'],['testPattern']
Testability,"ENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(); TStringmangle(const char* exp) const. Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. RooCatType_cat; TRegexp_regexp; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooMapCatEntry(const char* exp, const RooCatType* cat). RooMapCatEntry(const RooMapCatEntry& other). Bool_t match(const char* testPattern) const. TString mangle(const char* exp) const; Mangle name : escape regexp character '+'. inline RooMapCatEntry(); {}. virtual ~RooMapCatEntry(); {}. TObject* Clone(const char* newName = 0) const. Bool_t ok(); { return (_regexp.Status()==TRegexp::kOK) ; }. const RooCatType& outCat() const; { return _cat ; }. » Last changed: Thu Nov 3 20:08:35 2011 » Last generated: 2011-11-03 20:08; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooMapCatEntry.html:5873,test,testPattern,5873,root/html532/RooMapCatEntry.html,https://root.cern,https://root.cern/root/html532/RooMapCatEntry.html,1,['test'],['testPattern']
Testability,"EREAD""); // if not: download from ROOT server; }; if (!input) {; std::cout << ""ERROR: could not open data file"" << std::endl;; exit(1);; }; std::cout << ""--- TMVAClassificationApp : Using input file: "" << input->GetName() << std::endl;; ; // Event loop; ; // Prepare the event tree; // - Here the variable names have to corresponds to your tree; // - You can use the same variables as above which is slightly faster,; // but of course you can use different ones and copy the values inside the event loop; //; std::cout << ""--- Select signal sample"" << std::endl;; TTree* theTree = (TTree*)input->Get(""TreeS"");; Float_t userVar1, userVar2;; theTree->SetBranchAddress( ""var1"", &userVar1 );; theTree->SetBranchAddress( ""var2"", &userVar2 );; theTree->SetBranchAddress( ""var3"", &var3 );; theTree->SetBranchAddress( ""var4"", &var4 );; ; // Efficiency calculator for cut method; Int_t nSelCutsGA = 0;; Double_t effS = 0.7;; ; std::vector<Float_t> vecVar(4); // vector for EvaluateMVA tests; ; std::cout << ""--- Processing: "" << theTree->GetEntries() << "" events"" << std::endl;; TStopwatch sw;; sw.Start();; for (Long64_t ievt=0; ievt<theTree->GetEntries();ievt++) {; ; if (ievt%1000 == 0) std::cout << ""--- ... Processing event: "" << ievt << std::endl;; ; theTree->GetEntry(ievt);; ; var1 = userVar1 + userVar2;; var2 = userVar1 - userVar2;; ; // Return the MVA outputs and fill into histograms; ; if (Use[""CutsGA""]) {; // Cuts is a special case: give the desired signal efficiency; Bool_t passed = reader->EvaluateMVA( ""CutsGA method"", effS );; if (passed) nSelCutsGA++;; }; ; if (Use[""Likelihood"" ]) histLk ->Fill( reader->EvaluateMVA( ""Likelihood method"" ) );; if (Use[""LikelihoodD"" ]) histLkD ->Fill( reader->EvaluateMVA( ""LikelihoodD method"" ) );; if (Use[""LikelihoodPCA""]) histLkPCA ->Fill( reader->EvaluateMVA( ""LikelihoodPCA method"" ) );; if (Use[""LikelihoodKDE""]) histLkKDE ->Fill( reader->EvaluateMVA( ""LikelihoodKDE method"" ) );; if (Use[""LikelihoodMIX""]) histLkMIX ->Fill( reader->EvaluateMVA( ""Li",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassificationApplication_8C.html:15975,test,tests,15975,doc/master/TMVAClassificationApplication_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassificationApplication_8C.html,1,['test'],['tests']
Testability,"ERENCE : EGS MANUAL SLAC 210 - UC32 - JUNE 78; FORMULA 2.7.22. Int_t GetByteCount() const; getters & setters. {return sizeof(*this);}. Double_t GetA() const; {return fA;}. Double_t GetZ() const; {return fZ;}. Double_t GetDensity() const; {return fDensity;}. Int_t GetNelements() const; {return 1;}. TGeoElement * GetBaseElement() const; {return fElement;}. Double_t GetRadLen() const; {return fRadLen;}. Double_t GetIntLen() const; {return fIntLen;}. TObject * GetCerenkovProperties() const; {return fCerenkov;}. Char_t GetTransparency() const; {return (fFillStyle<3000 || fFillStyle>3100)?0:Char_t(fFillStyle-3000);}. Double_t GetTemperature() const; {return fTemperature;}. Double_t GetPressure() const; {return fPressure;}. EGeoMaterialState GetState() const; {return fState;}. Double_t GetSpecificActivity(Int_t ) const; {return 0.;}. TGeoExtension * GetUserExtension() const; {return fUserExtension;}. TGeoExtension * GetFWExtension() const; {return fFWExtension;}. Bool_t IsUsed() const; {return TObject::TestBit(kMatUsed);}. Bool_t IsMixture() const; {return kFALSE;}. void SetA(Double_t a); {fA = a; SetRadLen(0);}. void SetZ(Double_t z); {fZ = z; SetRadLen(0);}. void SetDensity(Double_t density); {fDensity = density; SetRadLen(0);}. void SetIndex(Int_t index); {fIndex=index;}. void SetCerenkovProperties(TObject* cerenkov); {fCerenkov = cerenkov;}. void SetUsed(Bool_t flag = kTRUE); {TObject::SetBit(kMatUsed, flag);}. void SetTransparency(Char_t transparency = 0); {fFillStyle = 3000+transparency;}. void SetTemperature(Double_t temperature); {fTemperature = temperature;}. void SetPressure(Double_t pressure); {fPressure = pressure;}. void SetState(TGeoMaterial::EGeoMaterialState state); {fState = state;}. » Author: Andrei Gheata 25/10/01 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/geom:$Id$ » Last generated: 2015-03-14 16:39; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in genera",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoMaterial.html:14353,Test,TestBit,14353,root/html534/TGeoMaterial.html,https://root.cern,https://root.cern/root/html534/TGeoMaterial.html,1,['Test'],['TestBit']
Testability,"ERENCE : EGS MANUAL SLAC 210 - UC32 - JUNE 78; FORMULA 2.7.22. Int_t GetByteCount() const; getters & setters. {return sizeof(*this);}. Double_t GetA() const; {return fA;}. Double_t GetZ() const; {return fZ;}. Double_t GetDensity() const; {return fDensity;}. Int_t GetNelements() const; {return 1;}. TGeoElement * GetBaseElement() const; {return fElement;}. Double_t GetRadLen() const; {return fRadLen;}. Double_t GetIntLen() const; {return fIntLen;}. TObject * GetCerenkovProperties() const; {return fCerenkov;}. Char_t GetTransparency() const; {return (fFillStyle<3000 || fFillStyle>3100)?0:Char_t(fFillStyle-3000);}. Double_t GetTemperature() const; {return fTemperature;}. Double_t GetPressure() const; {return fPressure;}. EGeoMaterialState GetState() const; {return fState;}. Double_t GetSpecificActivity(Int_t ) const; {return 0.;}. TGeoExtension * GetUserExtension() const; {return fUserExtension;}. TGeoExtension * GetFWExtension() const; {return fFWExtension;}. Bool_t IsUsed() const; {return TObject::TestBit(kMatUsed);}. Bool_t IsMixture() const; {return kFALSE;}. void SetA(Double_t a); {fA = a; SetRadLen(0);}. void SetZ(Double_t z); {fZ = z; SetRadLen(0);}. void SetDensity(Double_t density); {fDensity = density; SetRadLen(0);}. void SetIndex(Int_t index); {fIndex=index;}. void SetCerenkovProperties(TObject* cerenkov); {fCerenkov = cerenkov;}. void SetUsed(Bool_t flag = kTRUE); {TObject::SetBit(kMatUsed, flag);}. void SetTransparency(Char_t transparency = 0); {fFillStyle = 3000+transparency;}. void SetTemperature(Double_t temperature); {fTemperature = temperature;}. void SetPressure(Double_t pressure); {fPressure = pressure;}. void SetState(TGeoMaterial::EGeoMaterialState state); {fState = state;}. » Author: Andrei Gheata 25/10/01 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/geom:$Id$ » Last generated: 2015-06-02 16:01; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in genera",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGeoMaterial.html:14991,Test,TestBit,14991,root/html604/TGeoMaterial.html,https://root.cern,https://root.cern/root/html604/TGeoMaterial.html,1,['Test'],['TestBit']
Testability,"ERENCE : EGS MANUAL SLAC 210 - UC32 - JUNE 78; FORMULA 2.7.22. Int_t GetByteCount() const; getters & setters. {return sizeof(*this);}. Double_t GetA() const; {return fA;}. Double_t GetZ() const; {return fZ;}. Double_t GetDensity() const; {return fDensity;}. Int_t GetNelements() const; {return 1;}. TGeoElement * GetBaseElement() const; {return fElement;}. Double_t GetRadLen() const; {return fRadLen;}. Double_t GetIntLen() const; {return fIntLen;}. TObject * GetCerenkovProperties() const; {return fCerenkov;}. Char_t GetTransparency() const; {return (fFillStyle<3000 || fFillStyle>3100)?0:Char_t(fFillStyle-3000);}. Double_t GetTemperature() const; {return fTemperature;}. Double_t GetPressure() const; {return fPressure;}. EGeoMaterialState GetState() const; {return fState;}. Double_t GetSpecificActivity(Int_t ) const; {return 0.;}. TGeoExtension * GetUserExtension() const; {return fUserExtension;}. TGeoExtension * GetFWExtension() const; {return fFWExtension;}. Bool_t IsUsed() const; {return TObject::TestBit(kMatUsed);}. Bool_t IsMixture() const; {return kFALSE;}. void SetA(Double_t a); {fA = a; SetRadLen(0);}. void SetZ(Double_t z); {fZ = z; SetRadLen(0);}. void SetDensity(Double_t density); {fDensity = density; SetRadLen(0);}. void SetIndex(Int_t index); {fIndex=index;}. void SetCerenkovProperties(TObject* cerenkov); {fCerenkov = cerenkov;}. void SetUsed(Bool_t flag = kTRUE); {TObject::SetBit(kMatUsed, flag);}. void SetTransparency(Char_t transparency = 0); {fFillStyle = 3000+transparency;}. void SetTemperature(Double_t temperature); {fTemperature = temperature;}. void SetPressure(Double_t pressure); {fPressure = pressure;}. void SetState(TGeoMaterial::EGeoMaterialState state); {fState = state;}. » Author: Andrei Gheata 25/10/01 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/geom:$Id$ » Last generated: 2015-06-30 15:01; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in genera",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoMaterial.html:14991,Test,TestBit,14991,root/html602/TGeoMaterial.html,https://root.cern,https://root.cern/root/html602/TGeoMaterial.html,1,['Test'],['TestBit']
Testability,"ESHAPE Layer Input = ( 10 , 15 , 15 ) Output = ( 1 , 100 , 2250 ) ; Layer 5 DENSE Layer: ( Input = 2250 , Width = 100 ) Output = ( 1 , 100 , 100 ) Activation Function = Relu; Layer 6 DENSE Layer: ( Input = 100 , Width = 1 ) Output = ( 1 , 100 , 1 ) Activation Function = Identity; : Using 1280 events for training and 320 for testing; : Compute initial loss on the validation data ; : Training phase 1 of 1: Optimizer ADAM (beta1=0.9,beta2=0.999,eps=1e-07) Learning rate = 0.001 regularization 0 minimum error = 13.2274; : --------------------------------------------------------------; : Epoch | Train Err. Val. Err. t(s)/epoch t(s)/Loss nEvents/s Conv. Steps; : --------------------------------------------------------------; : Start epoch iteration ...; : 1 Minimum Test error found - save the configuration ; : 1 | 1.28042 0.721714 1.40039 0.112743 931.931 0; : 2 Minimum Test error found - save the configuration ; : 2 | 0.744775 0.695682 1.39558 0.112793 935.465 0; : 3 Minimum Test error found - save the configuration ; : 3 | 0.694124 0.686492 1.40809 0.112179 925.986 0; : 4 | 0.679848 0.699399 1.40006 0.109116 929.552 1; : 5 Minimum Test error found - save the configuration ; : 5 | 0.670651 0.682024 1.40299 0.112234 929.685 0; : 6 Minimum Test error found - save the configuration ; : 6 | 0.652355 0.665731 1.40537 0.11341 928.823 0; : 7 Minimum Test error found - save the configuration ; : 7 | 0.647198 0.663594 1.40991 0.11661 927.858 0; : 8 | 0.624112 0.674678 1.40336 0.112656 929.728 1; : 9 Minimum Test error found - save the configuration ; : 9 | 0.597489 0.647076 1.41653 0.119736 925.361 0; : 10 Minimum Test error found - save the configuration ; : 10 | 0.561268 0.630455 1.40233 0.116045 932.919 0; : ; : Elapsed time for training with 1600 events: 14.2 sec ; : Evaluate deep neural network on CPU using batches with size = 100; : ; TMVA_CNN_CPU : [dataset] : Evaluation of TMVA_CNN_CPU on training sample (1600 events); : Elapsed time for evaluation of 1600 events: 0.629 sec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__CNN__Classification_8C.html:14611,Test,Test,14611,doc/master/TMVA__CNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__CNN__Classification_8C.html,1,['Test'],['Test']
Testability,"ETreeType treetype); virtual voidWriteMonitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const. protected:. virtual voidDeclareCompatibilityOptions(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); const TString&TMVA::MethodBase::GetInternalVarName(Int_t ivar) const; const TString&TMVA::MethodBase::GetOriginalVarName(Int_t ivar) const; const TString&TMVA::Configurable::GetReferenceFile() const; static TMVA::MethodBase*TMVA::MethodBase::GetThisBase(); Float_tTMVA::MethodBase::GetTWeight(const TMVA::Event* ev) const; const TString&TMVA::MethodBase::GetWeightFileDir() const; Bool_tTMVA::MethodBase::HasTrainingTree() const; Bool_tTMVA::MethodBase::Help() const; Bool_tTMVA::MethodBase::IgnoreEventsWithNegWeightsInTraining() const; Bool_tTMVA::MethodBase::IsConstructedFromWeightFile() const; Bool_tTMVA::MethodBase::IsNormalised() const; TMVA::MsgLogger&TMVA::Configurable::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; voidTObject::MakeZombie(); voidTMVA::MethodBase::NoErrorCalc(Double_t *const err, Double_t *const errUpper); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. Double_tAdaBoost(vector<TMVA::Event*>, TMVA::DecisionTree* dt); Double_tAdaBoostR2(vector<TMVA::Event*>, TMVA::DecisionTree* dt); Double_tBagging(vector<TMVA::Event*>, Int_t iTree); Double_tGetGradBoostMVA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodBDT.html:17461,Log,Log,17461,root/html528/TMVA__MethodBDT.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodBDT.html,1,['Log'],['Log']
Testability,"ETreeType treetype); virtual voidWriteMonitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const. protected:. virtual voidDeclareCompatibilityOptions(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); const TString&TMVA::MethodBase::GetInternalVarName(Int_t ivar) const; const TString&TMVA::MethodBase::GetOriginalVarName(Int_t ivar) const; const TString&TMVA::Configurable::GetReferenceFile() const; static TMVA::MethodBase*TMVA::MethodBase::GetThisBase(); Float_tTMVA::MethodBase::GetTWeight(const TMVA::Event* ev) const; const TString&TMVA::MethodBase::GetWeightFileDir() const; Bool_tTMVA::MethodBase::HasTrainingTree() const; Bool_tTMVA::MethodBase::Help() const; Bool_tTMVA::MethodBase::IgnoreEventsWithNegWeightsInTraining() const; Bool_tTMVA::MethodBase::IsConstructedFromWeightFile() const; Bool_tTMVA::MethodBase::IsNormalised() const; TMVA::MsgLogger&TMVA::Configurable::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; voidTObject::MakeZombie(); voidTMVA::MethodBase::NoErrorCalc(Double_t *const err, Double_t *const errUpper); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. Double_tAdaBoost(vector<TMVA::Event*>, TMVA::DecisionTree* dt); Double_tAdaBoostR2(vector<TMVA::Event*>, TMVA::DecisionTree* dt); Double_tBagging(vector<TMVA::Event*>, Int_t iTree); voidBoostMonitor(Int_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__MethodBDT.html:18020,Log,Log,18020,root/html530/TMVA__MethodBDT.html,https://root.cern,https://root.cern/root/html530/TMVA__MethodBDT.html,2,['Log'],['Log']
Testability,"Edge *e1 = &mesh1->eHead;; 655 GLUface *f2 = &mesh2->fHead;; 656 GLUvertex *v2 = &mesh2->vHead;; 657 GLUhalfEdge *e2 = &mesh2->eHead;; 658 ; 659 /* Add the faces, vertices, and edges of mesh2 to those of mesh1 */; 660 if( f2->next != f2 ) {; 661 f1->prev->next = f2->next;; 662 f2->next->prev = f1->prev;; 663 f2->prev->next = f1;; 664 f1->prev = f2->prev;; 665 }; 666 ; 667 if( v2->next != v2 ) {; 668 v1->prev->next = v2->next;; 669 v2->next->prev = v1->prev;; 670 v2->prev->next = v1;; 671 v1->prev = v2->prev;; 672 }; 673 ; 674 if( e2->next != e2 ) {; 675 e1->Sym->next->Sym->next = e2->next;; 676 e2->next->Sym->next = e1->Sym->next;; 677 e2->Sym->next->Sym->next = e1;; 678 e1->Sym->next = e2->Sym->next;; 679 }; 680 ; 681 memFree( mesh2 );; 682 return mesh1;; 683}; 684 ; 685 ; 686#ifdef DELETE_BY_ZAPPING; 687 ; 688/* __gl_meshDeleteMesh( mesh ) will free all storage for any valid mesh.; 689 */; 690void __gl_meshDeleteMesh( GLUmesh *mesh ); 691{; 692 GLUface *fHead = &mesh->fHead;; 693 ; 694 while( fHead->next != fHead ) {; 695 __gl_meshZapFace( fHead->next );; 696 }; 697 assert( mesh->vHead.next == &mesh->vHead );; 698 ; 699 memFree( mesh );; 700}; 701 ; 702#else; 703 ; 704/* __gl_meshDeleteMesh( mesh ) will free all storage for any valid mesh.; 705 */; 706void __gl_meshDeleteMesh( GLUmesh *mesh ); 707{; 708 GLUface *f, *fNext;; 709 GLUvertex *v, *vNext;; 710 GLUhalfEdge *e, *eNext;; 711 ; 712 for( f = mesh->fHead.next; f != &mesh->fHead; f = fNext ) {; 713 fNext = f->next;; 714 memFree( f );; 715 }; 716 ; 717 for( v = mesh->vHead.next; v != &mesh->vHead; v = vNext ) {; 718 vNext = v->next;; 719 memFree( v );; 720 }; 721 ; 722 for( e = mesh->eHead.next; e != &mesh->eHead; e = eNext ) {; 723 /* One call frees both e and e->Sym (see EdgePair above) */; 724 eNext = e->next;; 725 memFree( e );; 726 }; 727 ; 728 memFree( mesh );; 729}; 730 ; 731#endif; 732 ; 733#ifndef NDEBUG; 734 ; 735/* __gl_meshCheckMesh( mesh ) checks a mesh for self-consistency.; 736 */; 737void __gl_m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/mesh_8c_source.html:22061,assert,assert,22061,doc/master/mesh_8c_source.html,https://root.cern,https://root.cern/doc/master/mesh_8c_source.html,1,['assert'],['assert']
Testability,"Editable(Bool_t); virtual voidTGWindow::SetEditDisabled(UInt_t on = kEditDisable); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); voidSetItemName(const char* name); virtual voidTGFrame::SetLayoutBroken(Bool_t = kTRUE); virtual voidTGWindow::SetMapSubwindows(Bool_t); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPictures(const TGPicture* bigpic = 0, const TGPicture* smallpic = 0); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidSetSubnames(const char* n1 = """", const char* n2 = """", const char* n3 = """", const char* n4 = """", const char* n5 = """", const char* n6 = """", const char* n7 = """", const char* n8 = """", const char* n9 = """", const char* n10 = """", const char* n11 = """", const char* n12 = """"); virtual voidSetTitle(const char* text); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetUserData(void* userData); virtual voidSetViewMode(EListViewMode viewMode); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLVEntry.html:14249,Test,TestBit,14249,root/html528/TGLVEntry.html,https://root.cern,https://root.cern/root/html528/TGLVEntry.html,6,['Test'],"['TestBit', 'TestBits']"
Testability,"Eff (Double_t sigEff=0.5);  calculate the background efficiency for a given signal efficiency ;  ; Double_t GetBkgRejAtSigEff (Double_t sigEff=0.5);  calculate the background rejection for a given signal efficiency ;  ; Double_t GetFOM ();  Return the Figure of Merit (FOM) used in the parameter optimization process. ;  ; MethodBase * GetMethod ();  ; void GetMVADists ();  fill the private histograms with the mva distributions for sig/bkg ;  ; Double_t GetROCIntegral ();  calculate the area (integral) under the ROC curve as a overall quality measure of the classification ;  ; std::vector< int > GetScanIndices (int val, std::vector< int > base);  helper function to scan through the all the combinations in the parameter space ;  ; Double_t GetSeparation ();  return the separation between the signal and background MVA ouput distribution ;  ; Double_t GetSigEffAtBkgEff (Double_t bkgEff=0.1);  calculate the signal efficiency for a given background efficiency ;  ; MsgLogger & Log () const;  ; void optimizeFit ();  ; void optimizeScan ();  do the actual optimization using a simple scan method, i.e. ;  . Private Attributes; std::map< std::vector< Double_t >, Double_t > fAlreadyTrainedParCombination;  save parameters for which the FOM is already known (GA seems to evaluate the same parameters several times) ;  ; TString fFOMType;  the FOM type (Separation, ROC integra.. whatever you implemented.. ;  ; std::vector< Float_t > fFOMvsIter;  graph showing the development of the Figure Of Merit values during the fit ;  ; MsgLogger * fLogger;  ! message logger ;  ; MethodBase *const fMethod;  The MVA method to be evaluated. ;  ; TH1D * fMvaBkg;  MVA distribution for bakgr. events, used for spline fit. ;  ; TH1D * fMvaBkgFineBin;  MVA distribution for bakgr. events. ;  ; TH1D * fMvaSig;  MVA distribution for signal events, used for spline fit. ;  ; TH1D * fMvaSigFineBin;  MVA distribution for signal events. ;  ; Bool_t fNotDoneYet;  flat to indicate of Method Transformations have been",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1OptimizeConfigParameters.html:2878,Log,Log,2878,doc/master/classTMVA_1_1OptimizeConfigParameters.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1OptimizeConfigParameters.html,1,['Log'],['Log']
Testability,"Element* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); voidSetPosition(Int_t x, Int_t y); virtual voidTGFrame::SetSize(const TGDimension& s); voidSetText(const char* new_text); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); voidShow(Int_t x, Int_t y)SIGNAL ; virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGToolTip(const TBox* b, const char* text, Long_t delayms); TGToolTip(const TGWindow* p = 0, const TGFrame* f = 0, const char* text = 0, Long_t delayms = 350); TGToolTip(const TGWindow* p, const TBox* b, const char* text, Long_t delayms); TGToolTip(Int_t x, Int_t y, const char* text, Long_t delayms); virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGToolTip.html:14622,Test,TestBit,14622,root/html602/TGToolTip.html,https://root.cern,https://root.cern/root/html602/TGToolTip.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"Element::SetRnrSelf(Bool_t rnr); virtual Bool_tTEveElement::SetRnrSelfChildren(Bool_t rnr_self, Bool_t rnr_children); virtual Bool_tTEveElement::SetRnrState(Bool_t rnr); voidSetSelectViaFrame(Bool_t sf); voidTEveElement::SetSourceObject(TObject* o); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidSetTooltipCBFoo(TEveDigitSet::TooltipCB_foo f); virtual voidTEveElement::SetTransMatrix(Double_t* carr); virtual voidTEveElement::SetTransMatrix(const TGeoMatrix& mat); virtual voidTObject::SetUniqueID(UInt_t uid); voidTEveElement::SetUserData(void* ud); voidTEveElement::SetVizModel(TEveElement* model); voidTEveElement::SetVizTag(const TString& tag); virtual voidShowMembers(TMemberInspector& insp); virtual Bool_tTEveElement::SingleRnrState() const; virtual Int_tTNamed::Sizeof() const; virtual voidTAtt3D::Sizeof3D() const; voidTEveElement::SpawnEditor()MENU ; voidTEveElement::StampColorSelection(); voidTEveElement::StampObjProps(); voidTEveElement::StampTransBBox(); voidTEveElement::StampVisibility(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTEveElement::TestCSCBits(UChar_t f) const; virtual voidUnHighlighted(); virtual voidUnSelected(); virtual voidTObject::UseCurrentStyle(); voidUseSingleColor(); voidTEveElement::VizDB_Apply(const char* tag)MENU ; voidTEveElement::VizDB_Insert(const char* tag, Bool_t replace = kTRUE, Bool_t update = kTRUE)MENU ; voidTEveElement::VizDB_Reapply()MENU ; voidTEveElement::VizDB_UpdateModel(Bool_t update = kTRUE)MENU ; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTEveElement::WriteVizParams(ostream& out, const TString& var).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TEveDigitSet.html:21223,Test,TestBit,21223,root/html532/TEveDigitSet.html,https://root.cern,https://root.cern/root/html532/TEveDigitSet.html,3,['Test'],"['TestBit', 'TestBits', 'TestCSCBits']"
Testability,"Element::SetRnrSelfChildren(Bool_t rnr_self, Bool_t rnr_children); virtual Bool_tTEveElement::SetRnrState(Bool_t rnr); voidTEveElement::SetSourceObject(TObject* o); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTEveElement::SetTransMatrix(Double_t* carr); virtual voidTEveElement::SetTransMatrix(const TGeoMatrix& mat); virtual voidTObject::SetUniqueID(UInt_t uid); voidTEveElement::SetUserData(void* ud); voidSetVertex(Int_t i, const Float_t* v); voidSetVertex(Int_t i, Float_t x, Float_t y, Float_t z); voidSetVertices(const Float_t* vs); voidTEveElement::SetVizModel(TEveElement* model); voidTEveElement::SetVizTag(const TString& tag); virtual voidShowMembers(TMemberInspector& insp); virtual Bool_tTEveElement::SingleRnrState() const; virtual Int_tTNamed::Sizeof() const; virtual voidTAtt3D::Sizeof3D() const; voidTEveElement::SpawnEditor()MENU ; voidTEveElement::StampColorSelection(); voidTEveElement::StampObjProps(); voidTEveElement::StampTransBBox(); voidTEveElement::StampVisibility(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTEveElement::TestCSCBits(UChar_t f) const; virtual voidTEveElement::UnHighlighted(); virtual voidTEveElement::UnSelected(); virtual voidTObject::UseCurrentStyle(); voidTEveElement::VizDB_Apply(const char* tag)MENU ; voidTEveElement::VizDB_Insert(const char* tag, Bool_t replace = kTRUE, Bool_t update = kTRUE)MENU ; voidTEveElement::VizDB_Reapply()MENU ; voidTEveElement::VizDB_UpdateModel(Bool_t update = kTRUE)MENU ; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTEveShape::WriteVizParams(ostream& out, const TString& var).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveBox.html:16884,Test,TestBit,16884,root/html528/TEveBox.html,https://root.cern,https://root.cern/root/html528/TEveBox.html,9,['Test'],"['TestBit', 'TestBits', 'TestCSCBits']"
Testability,"Element::SetRnrSelfChildren(Bool_t rnr_self, Bool_t rnr_children); virtual Bool_tTEveElement::SetRnrState(Bool_t rnr); voidTEveElement::SetSourceObject(TObject* o); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTEveElement::SetTransMatrix(Double_t* carr); virtual voidTEveElement::SetTransMatrix(const TGeoMatrix& mat); virtual voidTObject::SetUniqueID(UInt_t uid); voidTEveElement::SetUserData(void* ud); voidTEveElement::SetVizModel(TEveElement* model); voidTEveElement::SetVizTag(const TString& tag); virtual voidShowMembers(TMemberInspector& insp); virtual Bool_tTEveElement::SingleRnrState() const; virtual Int_tTNamed::Sizeof() const; voidTEveElement::SpawnEditor()MENU ; voidTEveElement::StampColorSelection(); voidTEveElement::StampObjProps(); voidTEveElement::StampTransBBox(); voidTEveElement::StampVisibility(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTEveElement::TestCSCBits(UChar_t f) const; virtual voidTEveElement::UnHighlighted(); virtual voidTEveElement::UnSelected(); virtual voidTObject::UseCurrentStyle(); virtual voidUserPickedElement(TEveElement* el, Bool_t multi = kFALSE); virtual voidUserRePickedElement(TEveElement* el); virtual voidUserUnPickedElement(TEveElement* el); voidTEveElement::VizDB_Apply(const char* tag)MENU ; voidTEveElement::VizDB_Insert(const char* tag, Bool_t replace = kTRUE, Bool_t update = kTRUE)MENU ; voidTEveElement::VizDB_Reapply()MENU ; voidTEveElement::VizDB_UpdateModel(Bool_t update = kTRUE)MENU ; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTEveElement::WriteVizParams(ostream& out, const TString& var).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveSelection.html:18261,Test,TestBit,18261,root/html528/TEveSelection.html,https://root.cern,https://root.cern/root/html528/TEveSelection.html,9,['Test'],"['TestBit', 'TestBits', 'TestCSCBits']"
Testability,"Element::SetTransMatrix(const TGeoMatrix& mat); virtual voidTObject::SetUniqueID(UInt_t uid); voidTEveElement::SetUserData(void* ud); voidTEveElement::SetVizModel(TEveElement* model); voidTEveElement::SetVizTag(const TString& tag); virtual voidShowMembers(TMemberInspector&); virtual Bool_tTEveElement::SingleRnrState() const; virtual Int_tTNamed::Sizeof() const; voidTEveElement::SpawnEditor()MENU ; TGLEmbeddedViewer*SpawnGLEmbeddedViewer(TGedEditor* ged = 0, Int_t border = 0); TGLSAViewer*SpawnGLViewer(TGedEditor* ged = 0, Bool_t stereo = kFALSE); voidTEveElement::StampColorSelection(); voidTEveElement::StampObjProps(); voidTEveElement::StampTransBBox(); voidTEveElement::StampVisibility(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); voidTEveWindow::SwapWindow(TEveWindow* w); static voidTEveWindow::SwapWindows(TEveWindow* w1, TEveWindow* w2); voidTEveWindow::SwapWindowWithCurrent()MENU ; voidSwitchStereo(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTEveElement::TestCSCBits(UChar_t f) const; voidTEveWindow::TitleBarClicked(); voidTEveWindow::UndockWindow()MENU ; voidTEveWindow::UndockWindowDestroySlot()MENU ; virtual voidTEveElement::UnHighlighted(); virtual voidTEveElement::UnSelected(); virtual voidTObject::UseCurrentStyle(); voidTEveElement::VizDB_Apply(const char* tag)MENU ; voidTEveElement::VizDB_Insert(const char* tag, Bool_t replace = kTRUE, Bool_t update = kTRUE)MENU ; voidTEveElement::VizDB_Reapply()MENU ; voidTEveElement::VizDB_UpdateModel(Bool_t update = kTRUE)MENU ; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTEveElement::WriteVizParams(ostream& out, const TString& var).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveViewer.html:17772,Test,TestBit,17772,root/html534/TEveViewer.html,https://root.cern,https://root.cern/root/html534/TEveViewer.html,3,['Test'],"['TestBit', 'TestBits', 'TestCSCBits']"
Testability,"Element> inline TVectorT<Element> &TVectorT<Element> Use(Int_t n, float* data); { return Use(0,n-1,data); }. template<class Element> inline const TVectorT<Element> &TVectorT<Element> Use(Int_t n, const float* data) const; { return Use(0,n-1,data); }. template<class Element> inline TVectorT<Element> &TVectorT<Element> Use(TVectorT<float>& v). template<class Element> inline const TVectorT<Element> &TVectorT<Element> Use(const TVectorT<float>& v) const. template<class Element> inline TVectorT<Element> TVectorT<Element> GetSub(Int_t row_lwb, Int_t row_upb, Option_t* option = ""S"") const. template<class Element> inline const Element &TVectorT<Element> operator()(Int_t index) const; Access a vector element. template<class Element> inline Element &TVectorT<Element> operator()(Int_t index); Access a vector element. Int_t GetLwb() const; { return fRowLwb; }. Int_t GetUpb() const; { return fNrows+fRowLwb-1; }. Int_t GetNrows() const; { return fNrows; }. Int_t GetNoElements() const; { return fNrows; }. Element * GetMatrixArray(); { return fElements; }. const Element * GetMatrixArray() const; { return fElements; }. void Invalidate(); { SetBit(kStatus); }. void MakeValid(); { ResetBit(kStatus); }. Bool_t IsValid() const; { return !TestBit(kStatus); }. Bool_t IsOwner() const; { return fIsOwner; }. void SetElements(const float* elements). TVectorT<Element> & Shift(Int_t row_shift); { fRowLwb += row_shift; return *this; }. TVectorT<Element> & ResizeTo(Int_t lwb, Int_t upb). TVectorT<Element> & ResizeTo(Int_t n); { return ResizeTo(0,n-1); }. TVectorT<Element> & Use(Int_t lwb, Int_t upb, float* data). const Element & operator[](Int_t index) const; { return (*this)(index); }. Element & operator[](Int_t index); { return (*this)(index); }. void Clear(Option_t* = """"). » Last changed: root/matrix:$Id$ » Last generated: 2015-06-02 16:35; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TVectorT_float_.html:18357,Test,TestBit,18357,root/html604/TVectorT_float_.html,https://root.cern,https://root.cern/root/html604/TVectorT_float_.html,1,['Test'],['TestBit']
Testability,"Element> inline TVectorT<Element> &TVectorT<Element> Use(Int_t n, float* data); { return Use(0,n-1,data); }. template<class Element> inline const TVectorT<Element> &TVectorT<Element> Use(Int_t n, const float* data) const; { return Use(0,n-1,data); }. template<class Element> inline TVectorT<Element> &TVectorT<Element> Use(TVectorT<float>& v). template<class Element> inline const TVectorT<Element> &TVectorT<Element> Use(const TVectorT<float>& v) const. template<class Element> inline TVectorT<Element> TVectorT<Element> GetSub(Int_t row_lwb, Int_t row_upb, Option_t* option = ""S"") const. template<class Element> inline const Element &TVectorT<Element> operator()(Int_t index) const; Access a vector element. template<class Element> inline Element &TVectorT<Element> operator()(Int_t index); Access a vector element. Int_t GetLwb() const; { return fRowLwb; }. Int_t GetUpb() const; { return fNrows+fRowLwb-1; }. Int_t GetNrows() const; { return fNrows; }. Int_t GetNoElements() const; { return fNrows; }. Element * GetMatrixArray(); { return fElements; }. const Element * GetMatrixArray() const; { return fElements; }. void Invalidate(); { SetBit(kStatus); }. void MakeValid(); { ResetBit(kStatus); }. Bool_t IsValid() const; { return !TestBit(kStatus); }. Bool_t IsOwner() const; { return fIsOwner; }. void SetElements(const float* elements). TVectorT<Element> & Shift(Int_t row_shift); { fRowLwb += row_shift; return *this; }. TVectorT<Element> & ResizeTo(Int_t lwb, Int_t upb). TVectorT<Element> & ResizeTo(Int_t n); { return ResizeTo(0,n-1); }. TVectorT<Element> & Use(Int_t lwb, Int_t upb, float* data). const Element & operator[](Int_t index) const; { return (*this)(index); }. Element & operator[](Int_t index); { return (*this)(index); }. void Clear(Option_t* = """"). » Last changed: root/matrix:$Id$ » Last generated: 2015-06-30 15:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TVectorT_float_.html:18357,Test,TestBit,18357,root/html602/TVectorT_float_.html,https://root.cern,https://root.cern/root/html602/TVectorT_float_.html,1,['Test'],['TestBit']
Testability,"Elements(); voidTMVA::PDEFoam::RootPlot2dim(const TString& filename, TString opt, Bool_t createCanvas = kTRUE, Bool_t colors = kTRUE); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::PDEFoam::SetDensity(TMVA::PDEFoamDensityBase* dens); voidTMVA::PDEFoam::SetDim(Int_t kDim); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::PDEFoam::SetEvPerBin(Int_t EvPerBin); voidTMVA::PDEFoam::SetInhiDiv(Int_t, Int_t); voidTMVA::PDEFoam::SetMaxDepth(UInt_t maxdepth); voidTMVA::PDEFoam::SetnBin(Int_t nBin); voidTMVA::PDEFoam::SetnCells(Long_t nCells); voidTMVA::PDEFoam::SetNmin(UInt_t val); voidTMVA::PDEFoam::SetnSampl(Long_t nSampl); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::PDEFoam::SetXmax(Int_t idim, Double_t wmax); voidTMVA::PDEFoam::SetXmin(Int_t idim, Double_t wmin); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); vector<Float_t>TMVA::PDEFoam::VarTransform(const vector<Float_t>& invec) const; Float_tTMVA::PDEFoam::VarTransform(Int_t idim, Float_t x) const; vector<Float_t>TMVA::PDEFoam::VarTransformInvers(const vector<Float_t>& invec) const; Float_tTMVA::PDEFoam::VarTransformInvers(Int_t idim, Float_t x) const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__PDEFoamDecisionTree.html:7653,Test,TestBit,7653,root/html602/TMVA__PDEFoamDecisionTree.html,https://root.cern,https://root.cern/root/html602/TMVA__PDEFoamDecisionTree.html,20,['Test'],"['TestBit', 'TestBits']"
Testability,"EnabledPackagesOnClientlist of packages enabled on client; TList*fEnabledPackagesOnClusterlist of enabled packages; Bool_tfEndMastertrue for a master in direct contact only with workers; TList*fFeedbacklist of names to be returned as feedback; map<TString,TProof::MD5Mod_t,less<TString>,allocator<pair<const TString,TProof::MD5Mod_t> > >fFileMapmap keeping track of a file's md5 and mod time; Bool_tfFinalizationRunning; THashList*fGlobalPackageDirListlist of directories containing global packages libs; TStringfGroupPROOF group of this user; TList*fInactiveSlaveslist of inactive slaves (good but not used for processing); TList*fInputDataInput data objects sent over via file; TStringfInputDataFileFile with input data objects; TSignalHandler*fIntHandlerinterrupt signal handler (ctrl-c); Bool_tfIsPollingWorkerswill be set to kFALSE to prevent recursive dyn workers check in dyn mode; Bool_tfIsWaitingtrue if queries have been enqueued; Int_tfLastAssignedMerger; Long64_tfLastPollWorkers_stimestamp (in seconds) of last poll for workers, -1 if never checked; TList*fLoadedMacrosList of loaded macros (just file names); TStringfLogFileNamename of the temp file for redirected logs; FILE*fLogFileRtemp file to read redirected logs; FILE*fLogFileWtemp file to redirect logs; Int_tfLogLevelserver debug logging level; Bool_tfLogToWindowOnlysend log to window only; TMacrofMacroLogMacro with the saved (last) log; TStringfMastermaster server ("""" if a master); used in the browser; Int_tfMaxDrawQueriesmax number of draw queries kept; TProofMergePrgfMergePrgMerging progress; TList*fMergers; Bool_tfMergersByHostMergers assigned by host name; Int_tfMergersCount; Bool_tfMergersSetIndicates, if the following variables have been initialized properly; TList*fNonUniqueMasterslist of all active masters with a nonunique file system; Int_tfNotIdleNumber of non-idle sub-nodes; Int_tfOtherQueriesnumber of queries in list from previous sessions; TProofOutputListfOutputListTList implementation filtering ls(.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProof.html:32267,log,logs,32267,root/html534/TProof.html,https://root.cern,https://root.cern/root/html534/TProof.html,6,['log'],"['log', 'logging', 'logs']"
Testability,"End) {; 3391 // -- Remove the top-level branch name from our name.; 3392 dataName.Remove(0, motherName.Length());; 3393 // stlParentNameUpdated is false the first time in this loop.; 3394 if (!stlParentNameUpdated && stlParentName.Length()) {; 3395 stlParentName.Remove(0, motherName.Length());; 3396 stlParentNameUpdated = true;; 3397 }; 3398 } else if (motherDot) {; 3399 // -- Remove the top-level branch name from our name, folder case.; 3400 //; 3401 // Note: We are in the case where our mother was created; 3402 // by the branch constructor which takes a folder; 3403 // as an argument. The mother branch has internal; 3404 // dots in its name to represent the folder hierarchy.; 3405 // The TTree::Bronch() routine has handled us as a; 3406 // special case, we must compensate.; 3407 if ((fID < 0) && (subBranchElement->IsA() == TStreamerBase::Class())) {; 3408 // -- Our name is the mother name, remove it.; 3409 // Note: The test is our parent is a top-level branch; 3410 // and our streamer is the base class streamer,; 3411 // this matches the exact test in TTree::Bronch().; 3412 if (dataName.Length() == motherName.Length()) {; 3413 dataName.Remove(0, motherName.Length());; 3414 // stlParentNameUpdated is false the first time in this loop.; 3415 if (!stlParentNameUpdated && stlParentName.Length()) {; 3416 stlParentName.Remove(0, motherName.Length());; 3417 }; 3418 }; 3419 } else {; 3420 // -- Remove the mother name and the dot.; 3421 if (dataName.Length() > motherName.Length()) {; 3422 dataName.Remove(0, motherName.Length() + 1);; 3423 if (!stlParentNameUpdated && stlParentName.Length()) {; 3424 stlParentName.Remove(0, motherName.Length());; 3425 }; 3426 }; 3427 }; 3428 }; 3429 stlParentNameUpdated = true;; 3430 if (isBaseSubBranch) {; 3431 // -- Remove the base class name suffix from our name.; 3432 // Note: The pattern is the name of the base class.; 3433 TString pattern(subBranchElement->GetName());; 3434 if (pattern.Length() <= dataName.Length()) {; 3435 if (!strcmp(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranchElement_8cxx_source.html:122933,test,test,122933,doc/master/TBranchElement_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranchElement_8cxx_source.html,2,['test'],['test']
Testability,"Endl;; 1451 logger << "" author = \""Hoecker, Andreas and Speckmayer, Peter and Stelzer, Joerg "" << Endl;; 1452 logger << "" and Therhaag, Jan and von Toerne, Eckhard and Voss, Helge\"","" << Endl;; 1453 logger << "" title = \""{TMVA: Toolkit for multivariate data analysis}\"","" << Endl;; 1454 logger << "" journal = \""PoS\"","" << Endl;; 1455 logger << "" volume = \""ACAT\"","" << Endl;; 1456 logger << "" year = \""2007\"","" << Endl;; 1457 logger << "" pages = \""040\"","" << Endl;; 1458 logger << "" eprint = \""physics/0703039\"","" << Endl;; 1459 logger << "" archivePrefix = \""arXiv\"","" << Endl;; 1460 logger << "" SLACcitation = \""%%CITATION = PHYSICS/0703039;%%\"""" << Endl;; 1461 logger << ""}"" << Endl;; 1462 break;; 1463 ; 1464 case kLaTeX:; 1465 logger << ""%\\cite{TMVA2007}"" << Endl;; 1466 logger << ""\\bibitem{TMVA2007}"" << Endl;; 1467 logger << "" A.~Hoecker, P.~Speckmayer, J.~Stelzer, J.~Therhaag, E.~von Toerne, H.~Voss"" << Endl;; 1468 logger << "" %``TMVA: Toolkit for multivariate data analysis,''"" << Endl;; 1469 logger << "" PoS A {\\bf CAT} (2007) 040"" << Endl;; 1470 logger << "" [arXiv:physics/0703039]."" << Endl;; 1471 logger << "" %%CITATION = POSCI,ACAT,040;%%"" << Endl;; 1472 break;; 1473 ; 1474 case kHtmlLink:; 1475 // logger << kINFO << "" "" << Endl;; 1476 logger << kHEADER << gTools().Color(""bold""); 1477 << ""Thank you for using TMVA!"" << gTools().Color(""reset"") << Endl;; 1478 logger << kINFO << gTools().Color(""bold""); 1479 << ""For citation information, please visit: http://tmva.sf.net/citeTMVA.html""; 1480 << gTools().Color(""reset"") << Endl;; 1481 }; 1482}; 1483 ; 1484////////////////////////////////////////////////////////////////////////////////; 1485 ; 1486Bool_t TMVA::Tools::HistoHasEquidistantBins(const TH1& h); 1487{; 1488 return !(h.GetXaxis()->GetXbins()->fN);; 1489}; 1490 ; 1491////////////////////////////////////////////////////////////////////////////////; 1492 ; 1493std::vector<TMatrixDSym*>*; 1494TMVA::Tools::CalcCovarianceMatrices( const std::vector<const Event*>& events, I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Tools_8cxx_source.html:52493,log,logger,52493,doc/master/Tools_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Tools_8cxx_source.html,3,['log'],['logger']
Testability,"Entropy Implementation of the CrossEntropy as separation criterion; TMVA::DecisionTree implementation of a Decision Tree; TMVA::DecisionTreeNode Node for the Decision Tree ; TMVA::Event ; TMVA::Factory The factory creates all MVA methods, and performs their training and testing; TMVA::FitterBase Baseclass for fitters; TMVA::GeneticAlgorithm Genetic algorithm controller; TMVA::GeneticFitter Fitter using a Genetic Algorithm; TMVA::GeneticGenes Genes definition for genetic algorithm; TMVA::GeneticPopulation Population definition for genetic algorithm; TMVA::GeneticRange Range definition for genetic algorithm; TMVA::GiniIndex Implementation of the GiniIndex as separation criterion; TMVA::GiniIndexWithLaplace Implementation of the GiniIndexWithLaplace as separation criterion; TMVA::IFitterTarget base class for a fitter ""target""; TMVA::IMethod Method Interface; TMVA::Interval Interval definition, continous and discrete; TMVA::KDEKernel Kernel density estimator for PDF smoothing; TMVA::LogInterval Interval definition, continous and discrete; TMVA::MCFitter Fitter using Monte Carlo sampling of parameters ; TMVA::MethodANNBase Base class for TMVA ANNs; TMVA::MethodBDT Analysis of Boosted Decision Trees; TMVA::MethodBase Virtual base class for all TMVA method; TMVA::MethodBayesClassifier Friedman's BayesClassifier method ; TMVA::MethodBoost ; TMVA::MethodCFMlpANN Interface for Clermond-Ferrand artificial neural network; TMVA::MethodCFMlpANN_Utils Implementation of Clermond-Ferrand artificial neural network; TMVA::MethodCategory ; TMVA::MethodCompositeBase ; TMVA::MethodCuts Multivariate optimisation of signal efficiency; TMVA::MethodDT Analysis of Decision Trees ; TMVA::MethodFDA Function Discriminant Analysis; TMVA::MethodFisher Analysis of Fisher discriminant (Fisher or Mahalanobis approach) ; TMVA::MethodHMatrix H-Matrix method, a simple comparison of chi-squared estimators for signal and background; TMVA::MethodKNN k Nearest Neighbour classifier; TMVA::MethodLD Linear dis",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ClassIndex.html:105574,Log,LogInterval,105574,root/html534/ClassIndex.html,https://root.cern,https://root.cern/root/html534/ClassIndex.html,1,['Log'],['LogInterval']
Testability,"ErrScale (Double_t s);  ; void SetGDNPathSteps (Int_t np);  ; void SetGDPathStep (Double_t s);  ; void SetGDTau (Double_t t);  ; void SetGDTauPrec (Double_t p);  ; void SetGDTauRange (Double_t t0, Double_t t1);  ; void SetGDTauScan (UInt_t n);  ; void SetMsgType (EMsgType t);  ; void SetRuleFit (RuleFit *rf);  ; Int_t Type (const Event *e) const;  . Protected Types; typedef std::vector< constTMVA::Event * >::const_iterator EventItr;  . Protected Member Functions; Double_t CalcAverageResponse ();  calculate the average response - TODO : rewrite bad dependancy on EvaluateAverage() ! ;  ; Double_t CalcAverageResponseOLD ();  ; Double_t CalcAverageTruth ();  calculate the average truth ;  ; void CalcFStar ();  Estimates F* (optimum scoring function) for all events for the given sets. ;  ; void CalcGDNTau ();  ; void CalcTstAverageResponse ();  calc average response for all test paths - TODO: see comment under CalcAverageResponse() note that 0 offset is used ;  ; Double_t ErrorRateBin ();  Estimates the error rate with the current set of parameters It uses a binary estimate of (y-F*(x)) (y-F*(x)) = (Num of events where sign(F)!=sign(y))/Neve y = {+1 if event is signal, -1 otherwise} — NOT USED —. ;  ; Double_t ErrorRateReg ();  Estimates the error rate with the current set of parameters This code is pretty messy at the moment. ;  ; Double_t ErrorRateRoc ();  Estimates the error rate with the current set of parameters. ;  ; Double_t ErrorRateRocRaw (std::vector< Double_t > &sFsig, std::vector< Double_t > &sFbkg);  Estimates the error rate with the current set of parameters. ;  ; void ErrorRateRocTst ();  Estimates the error rate with the current set of parameters. ;  ; void EvaluateAverage (UInt_t ind1, UInt_t ind2, std::vector< Double_t > &avsel, std::vector< Double_t > &avrul);  evaluate the average of each variable and f(x) in the given range ;  ; void EvaluateAveragePath ();  ; void EvaluateAveragePerf ();  ; void FillCoefficients ();  helper function to store the rul",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1RuleFitParams.html:3037,test,test,3037,doc/master/classTMVA_1_1RuleFitParams.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1RuleFitParams.html,1,['test'],['test']
Testability,"Error message if the IO feature is not supported by this version of ROOT.; If the feature is supported by ROOT, this function returns true; otherwise, it returns false. ; Definition at line 125 of file TIOFeatures.cxx. ◆ Set() [4/4]. void ROOT::TIOFeatures::Set ; (; UChar_t ; newBits). inlineprivate . Definition at line 98 of file TIOFeatures.hxx. ◆ Test() [1/3]. bool TIOFeatures::Test ; (; EIOFeatures ; input_bits); const. Test to see if a given feature is set. ; Parameters. [in]input_bitsThe specific feature to test. Returns true if the feature is enables in this object and supported by this version of ROOT. ; Definition at line 239 of file TIOFeatures.cxx. ◆ Test() [2/3]. bool TIOFeatures::Test ; (; Experimental::EIOFeatures ; input_bits); const. Test to see if a given feature is set. ; Parameters. [in]input_bitsThe specific feature to test. Returns true if the feature is enables in this object and supported by this version of ROOT. ; Definition at line 228 of file TIOFeatures.cxx. ◆ Test() [3/3]. bool ROOT::TIOFeatures::Test ; (; Experimental::EIOUnsupportedFeatures ; bits); const. Friends And Related Symbol Documentation. ◆ ::TBasket. friend class ::TBasket. friend . Definition at line 72 of file TIOFeatures.hxx. ◆ ::TBranch. friend class ::TBranch. friend . Definition at line 71 of file TIOFeatures.hxx. ◆ ::TTree. friend class ::TTree. friend . Definition at line 70 of file TIOFeatures.hxx. Member Data Documentation. ◆ fIOBits. UChar_t ROOT::TIOFeatures::fIOBits {0}. private . Definition at line 100 of file TIOFeatures.hxx. ◆ kIOFeatureCount. constexpr int ROOT::TIOFeatures::kIOFeatureCount = 1. staticconstexpr . Definition at line 89 of file TIOFeatures.hxx. Libraries for ROOT::TIOFeatures:. [legend]; The documentation for this class was generated from the following files:; tree/tree/inc/ROOT/TIOFeatures.hxx; tree/tree/src/TIOFeatures.cxx. ROOTTIOFeatures. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:00 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TIOFeatures.html:6850,Test,Test,6850,doc/master/classROOT_1_1TIOFeatures.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TIOFeatures.html,2,['Test'],['Test']
Testability,"Error(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTEveElement::TestCSCBits(UChar_t f) const; TEveShape(const char* n = ""TEveShape"", const char* t = """"); virtual voidTEveElement::UnHighlighted(); virtual voidTEveElement::UnSelected(); virtual voidTObject::UseCurrentStyle(); voidTEveElement::VizDB_Apply(const char* tag)MENU ; voidTEveElement::VizDB_Insert(const char* tag, Bool_t replace = kTRUE, Bool_t update = kTRUE)MENU ; voidTEveElement::VizDB_Reapply()MENU ; voidTEveElement::VizDB_UpdateModel(Bool_t update = kTRUE)MENU ; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidWriteVizParams(ostream& out, const TString& var). protected:. virtual voidTEveElement::AnnihilateRecursively(); voidTAttBBox::AssertBBoxExtents(Float_t epsilon = 0.0050000000000000001); voidTAttBBox::BBoxCheckPoint(const Float_t* p); voidTAttBBox::BBoxCheckPoint(Float_t x, Float_t y, Float_t z); voidTAttBBox::BBoxClear(); voidTAttBBox::BBoxInit(Float_t infinity = 1.0E+6); voidTAttBBox::BBoxZero(Float_t epsilon = 0, Float_t x = 0, Float_t y = 0, Float_t z = 0); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(); virtual voidTEveElement::PreDeleteElement(); virtual voidTEveElement::RemoveElementsInternal(); static const char*TEveElement::ToString(Bool_t b). private:. TEveShape&operator=(const TEveShape&); TEveShape(const TEveShape&). Data Members; public:. static const TGPicture*TEveElement::fgListTreeIcons[9]; static const TGPicture*TEveElement::fgRnrIcons[4]; static TObject::(anonymous)TObject::kBitMask; static TEveElement::EChangeBitsTEveElement::kCBColorSelection; static TEveElement::EChangeBitsTEveElement::kCBObjProps; st",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveShape.html:17569,Assert,AssertBBoxExtents,17569,root/html602/TEveShape.html,https://root.cern,https://root.cern/root/html602/TEveShape.html,2,['Assert'],['AssertBBoxExtents']
Testability,"Error=False); fit4.Print(); disableBinIntegrator(powerlaw); ; # To get rid of the binning effects in the general case, one can use the; # IntegrateBins() command argument. Now, the pdf is not evaluated at the; # bin centers, but numerically integrated over each bin and divided by the; # bin width. The parameter for IntegrateBins() is the required precision; # for the numeric integrals. This is computationally expensive, but the; # bias is now not a problem anymore.; fit5 = powerlaw.fitTo(powerlaw_data, IntegrateBins=1e-3, Save=True, PrintLevel=-1, SumW2Error=False); fit5.Print(); ; # Improving numerical stability; # -----------------------------; ; # There is one more problem with binned fits that is related to the binning; # effects because often, a binned fit is affected by both problems.; #; # The issue is numerical stability for fits with a greatly different number; # of events in each bin. For each bin, you have a term \f[n\log(p)\f] in; # the NLL, where \f[n\f] is the number of observations in the bin, and; # \f[p\f] the predicted probability to have an event in that bin. The; # difference in the logarithms for each bin is small, but the difference in; # \f[n\f] can be orders of magnitudes! Therefore, when summing these terms,; # lots of numerical precision is lost for the bins with less events.; ; # We can study this with the example of an exponential plus a Gaussian. The; # Gaussian is only a faint signal in the tail of the exponential where; # there are not so many events. And we can't afford any precision loss for; # these bins, otherwise we can't fit the Gaussian.; ; x.setBins(100) # It's not about binning effects anymore, so reset the number of bins.; ; mu = ROOT.RooRealVar(""mu"", ""mu"", 3.0, 0.1, 5.1); sigma = ROOT.RooRealVar(""sigma"", ""sigma"", 0.5, 0.01, 5.0); gauss = ROOT.RooGaussian(""gauss"", ""gauss"", x, mu, sigma); ; nsig = ROOT.RooRealVar(""nsig"", ""nsig"", 10000, 0, 1e9); nbkg = ROOT.RooRealVar(""nbkg"", ""nbkg"", 10000000, 0, 1e9); frac = ROOT.RooRealVar(""fr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf614__binned__fit__problems_8py.html:5845,log,log,5845,doc/master/rf614__binned__fit__problems_8py.html,https://root.cern,https://root.cern/doc/master/rf614__binned__fit__problems_8py.html,1,['log'],['log']
Testability,"ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual void * GetSender ();  ; virtual const char * GetSenderClassName () const;  . Private Member Functions;  TProofLite (const TProofLite &);  ; Int_t CleanupSandbox ();  Remove old sessions dirs keep at most 'Proof.MaxOldSessions' (default 10) ;  ; Int_t CreateSandbox ();  Create the sandbox for this session. ;  ; void FindUniqueSlaves () override;  Add to the fUniqueSlave list the active slaves that have a unique (user) file system image. ;  ; Int_t InitDataSetManager ();  Initialize the dataset manager from directives or from defaults Return 0 on success, -1 on failure. ;  ; void NotifyStartUp (const char *action, Int_t done, Int_t tot);  Notify setting-up operation message. ;  ; void operator= (const TProofLite &);  ; void ResolveKeywords (TString &s, const char *ord, const char *logfile);  Resolve some keywords in 's' <logfilewrk>, <user>, <rootsys>, <cpupin> ;  ; void SendInputDataFile () override;  Make sure that the input data objects are available to the workers in a dedicated file in the cache; the objects are taken from the dedicated list and / or the specified file. ;  ; Int_t SetProofServEnv (const char *ord);  Create environment files for worker 'ord'. ;  ; void ShowDataDir (const char *dirname);  List contents of the data directory 'dirname'. ;  . Private Attributes; TString fCacheDir;  ; TProofLockPath * fCacheLock;  ; TString fDataSetDir;  ; TDataSetManager * fDataSetManager;  ; TDataSetManagerFile * fDataSetStgRepo;  ; Int_t fDynamicStartupNMax;  ; Int_t fDynamicStartupStep;  ; Bool_t fForkStartup;  ; Int_t fNWorkers;  ; TQueryResultManager * fQMgr;  ; TString fQueryDir;  ; TProofLockPath * fQueryLock;  ; TPMERegexp * fReInvalid;  ; TString fSandbox;  ; TString fSelection;  ; TServerSocket * fServSock;  ; TString fSockPath;  ; TString fVarExp;  . Static Private Attributes; static Int_t fgWrksMax = -2;  . Friends; class TProofPlayerLite;  . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofLite.html:40317,log,logfile,40317,doc/master/classTProofLite.html,https://root.cern,https://root.cern/doc/master/classTProofLite.html,2,['log'],"['logfile', 'logfilewrk']"
Testability,"ErrorType );; 431 assert( !fData.empty() && fDataPtr );; 432 assert( fDataErrorHigh.empty() && !fDataErrorHighPtr );; 433 assert( fDataErrorLow.empty() && !fDataErrorLowPtr );; 434 assert( !fDataError.empty() && fDataErrorPtr );; 435 assert( fCoordErrors.empty() && fCoordErrorsPtr.empty() );; 436 ; 437 fData[ fNPoints ] = y;; 438 fDataError[ fNPoints ] = (ey != 0.0) ? 1.0/ey : 0.0;; 439 ; 440 FitData::Add( x );; 441 fSumContent += y;; 442 if (y != 0 || ey != 1.0) fSumError2 += ey*ey;; 443 // set the weight flag checking if error^2 != y; 444 if (!fIsWeighted); 445 if (y != 0 && std::abs( ey*ey/y - 1.0) > 1.E-12) fIsWeighted = true;; 446 }; 447 ; 448 /**; 449 add one dim data with error in the coordinate (x); 450 in this case store the value (y) error and not the inverse; 451 */; 452 void BinData::Add( double x, double y, double ex, double ey ); 453 {; 454 assert( kCoordError == fErrorType );; 455 assert( !fData.empty() && fDataPtr );; 456 assert( !fDataError.empty() && fDataErrorPtr );; 457 assert( fDataErrorHigh.empty() && !fDataErrorHighPtr );; 458 assert( fDataErrorLow.empty() && !fDataErrorLowPtr );; 459 assert( !fCoordErrors.empty() && fCoordErrors.size() == 1 );; 460 assert( !fCoordErrorsPtr.empty() && fCoordErrorsPtr.size() == 1 && fCoordErrorsPtr[0] );; 461 assert( &fCoordErrors[0].front() == fCoordErrorsPtr[0] );; 462 ; 463 fData[ fNPoints ] = y;; 464 fCoordErrors[0][ fNPoints ] = ex;; 465 fDataError[ fNPoints ] = ey;; 466 ; 467 FitData::Add( x );; 468 fSumContent += y;; 469 if (y != 0 || ey != 1.0) fSumError2 += ey*ey;; 470 // set the weight flag checking if error^2 != y; 471 if (!fIsWeighted); 472 if (y != 0 && std::abs( ey*ey/y - 1.0) > 1.E-12) fIsWeighted = true;; 473 }; 474 ; 475 /**; 476 add one dim data with error in the coordinate (x) and asymmetric errors in the value (y); 477 in this case store the y errors and not the inverse; 478 */; 479 void BinData::Add( double x, double y, double ex, double eyl, double eyh ); 480 {; 481 assert( kAsymError == f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BinData_8cxx_source.html:13469,assert,assert,13469,doc/master/BinData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/BinData_8cxx_source.html,1,['assert'],['assert']
Testability,"EveElement::SetRnrSelf(Bool_t rnr); virtual Bool_tTEveElement::SetRnrSelfChildren(Bool_t rnr_self, Bool_t rnr_children); virtual Bool_tTEveElement::SetRnrState(Bool_t rnr); voidTEveElement::SetSourceObject(TObject* o); virtual voidTEveElement::SetTransMatrix(Double_t* carr); virtual voidTEveElement::SetTransMatrix(const TGeoMatrix& mat); virtual voidTObject::SetUniqueID(UInt_t uid); voidTEveElement::SetUserData(void* ud); voidTEveElement::SetVizModel(TEveElement* model); voidTEveElement::SetVizTag(const TString& tag); virtual voidShowMembers(TMemberInspector& insp) const; virtual Bool_tTEveElement::SingleRnrState() const; voidTEveElement::SpawnEditor()MENU ; voidTEveElement::StampColorSelection(); voidTEveElement::StampObjProps(); voidTEveElement::StampTransBBox(); voidTEveElement::StampVisibility(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTEveElement::TestCSCBits(UChar_t f) const; TEveElementObjectPtr(const TEveElementObjectPtr& e); TEveElementObjectPtr(TObject* obj, Bool_t own = kTRUE); TEveElementObjectPtr(TObject* obj, Color_t& mainColor, Bool_t own = kTRUE); virtual voidTEveElement::UnHighlighted(); virtual voidTEveElement::UnSelected(); virtual voidTObject::UseCurrentStyle(); voidTEveElement::VizDB_Apply(const char* tag)MENU ; voidTEveElement::VizDB_Insert(const char* tag, Bool_t replace = kTRUE, Bool_t update = kTRUE)MENU ; voidTEveElement::VizDB_Reapply()MENU ; voidTEveElement::VizDB_UpdateModel(Bool_t update = kTRUE)MENU ; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTEveElement::WriteVizParams(ostream& out, const TString& va",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveElementObjectPtr.html:14083,Test,TestBit,14083,root/html602/TEveElementObjectPtr.html,https://root.cern,https://root.cern/root/html602/TEveElementObjectPtr.html,2,['Test'],['TestBit']
Testability,"EveElement::SetRnrSelf(Bool_t rnr); virtual Bool_tTEveElement::SetRnrSelfChildren(Bool_t rnr_self, Bool_t rnr_children); virtual Bool_tTEveElement::SetRnrState(Bool_t rnr); voidTEveElement::SetSourceObject(TObject* o); voidSetStepper(TEveTrackPropagator::EStepper_e s); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTEveElement::SetTransMatrix(Double_t* carr); virtual voidTEveElement::SetTransMatrix(const TGeoMatrix& mat); virtual voidTObject::SetUniqueID(UInt_t uid); voidTEveElement::SetUserData(void* ud); voidTEveElement::SetVizModel(TEveElement* model); voidTEveElement::SetVizTag(const TString& tag); virtual voidShowMembers(TMemberInspector& insp); virtual Bool_tTEveElement::SingleRnrState() const; virtual Int_tTNamed::Sizeof() const; voidTEveElement::SpawnEditor()MENU ; virtual voidTEveRefBackPtr::StampBackPtrElements(UChar_t stamps); voidTEveElement::StampColorSelection(); voidTEveElement::StampObjProps(); voidTEveElement::StampTransBBox(); voidTEveElement::StampVisibility(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTEveElement::TestCSCBits(UChar_t f) const; virtual voidTEveElement::UnHighlighted(); virtual voidTEveElement::UnSelected(); virtual voidTObject::UseCurrentStyle(); voidTEveElement::VizDB_Apply(const char* tag)MENU ; voidTEveElement::VizDB_Insert(const char* tag, Bool_t replace = kTRUE, Bool_t update = kTRUE)MENU ; voidTEveElement::VizDB_Reapply()MENU ; voidTEveElement::VizDB_UpdateModel(Bool_t update = kTRUE)MENU ; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTEveElement::WriteVizParams(ostream& out, const TString& var).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveTrackPropagator.html:17948,Test,TestBit,17948,root/html528/TEveTrackPropagator.html,https://root.cern,https://root.cern/root/html528/TEveTrackPropagator.html,9,['Test'],"['TestBit', 'TestBits', 'TestCSCBits']"
Testability,"EveElement::SetRnrSelfChildren(Bool_t rnr_self, Bool_t rnr_children); virtual Bool_tTEveElement::SetRnrState(Bool_t rnr); voidTEveElement::SetSourceObject(TObject* o); virtual voidTEveElement::SetTransMatrix(Double_t* carr); virtual voidTEveElement::SetTransMatrix(const TGeoMatrix& mat); virtual voidTObject::SetUniqueID(UInt_t uid); voidTEveElement::SetUserData(void* ud); voidSetVisLevel(Int_t vl); voidSetVisOption(Int_t vo); voidTEveElement::SetVizModel(TEveElement* model); voidTEveElement::SetVizTag(const TString& tag); virtual voidShowMembers(TMemberInspector& insp); virtual Bool_tSingleRnrState() const; voidTEveElement::SpawnEditor()MENU ; voidTEveElement::StampColorSelection(); voidTEveElement::StampObjProps(); voidTEveElement::StampTransBBox(); voidTEveElement::StampVisibility(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTEveElement::TestCSCBits(UChar_t f) const; virtual voidTEveElement::UnHighlighted(); virtual voidTEveElement::UnSelected(); voidTEveGeoNode::UpdateNode(TGeoNode* node); voidTEveGeoNode::UpdateVolume(TGeoVolume* volume); virtual voidTObject::UseCurrentStyle(); voidUseNodeTrans(); voidTEveElement::VizDB_Apply(const char* tag)MENU ; voidTEveElement::VizDB_Insert(const char* tag, Bool_t replace = kTRUE, Bool_t update = kTRUE)MENU ; voidTEveElement::VizDB_Reapply()MENU ; voidTEveElement::VizDB_UpdateModel(Bool_t update = kTRUE)MENU ; voidVolumeColChanged(TGeoVolume* volume); voidVolumeVisChanged(TGeoVolume* volume); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidTEveGeoNode::WriteExtract(const char* name, Bool_t leafs_only); virtual voidTEveElement::Wri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveGeoTopNode.html:14838,Test,TestBits,14838,root/html528/TEveGeoTopNode.html,https://root.cern,https://root.cern/root/html528/TEveGeoTopNode.html,3,['Test'],['TestBits']
Testability,"EveElement::SetRnrState(Bool_t rnr); voidSetShowTitleBars(Bool_t state); voidTEveElement::SetSourceObject(TObject* o); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTEveElement::SetTransMatrix(Double_t* carr); virtual voidTEveElement::SetTransMatrix(const TGeoMatrix& mat); virtual voidTObject::SetUniqueID(UInt_t uid); voidTEveElement::SetUserData(void* ud); voidTEveElement::SetVizModel(TEveElement* model); voidTEveElement::SetVizTag(const TString& tag); virtual voidShowMembers(TMemberInspector& insp); voidShowNormalEveDecorations(); virtual Bool_tTEveElement::SingleRnrState() const; virtual Int_tTNamed::Sizeof() const; voidTEveElement::SpawnEditor()MENU ; voidTEveElement::StampColorSelection(); voidTEveElement::StampObjProps(); voidTEveElement::StampTransBBox(); voidTEveElement::StampVisibility(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTEveElement::TestCSCBits(UChar_t f) const; virtual voidTEveElement::UnHighlighted(); virtual voidTEveElement::UnSelected(); virtual voidTObject::UseCurrentStyle(); voidTEveElement::VizDB_Apply(const char* tag)MENU ; voidTEveElement::VizDB_Insert(const char* tag, Bool_t replace = kTRUE, Bool_t update = kTRUE)MENU ; voidTEveElement::VizDB_Reapply()MENU ; voidTEveElement::VizDB_UpdateModel(Bool_t update = kTRUE)MENU ; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; voidWindowDeleted(TEveWindow* window)SIGNAL ; voidWindowDocked(TEveWindow* window)SIGNAL ; voidWindowSelected(TEveWindow* window)SIGNAL ; voidWindowUndocked(TEveWindow* window)SIGNAL ; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTEveElement::WriteVizParams(ostream& out, const TString& var).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveWindowManager.html:18531,Test,TestBits,18531,root/html528/TEveWindowManager.html,https://root.cern,https://root.cern/root/html528/TEveWindowManager.html,6,['Test'],"['TestBits', 'TestCSCBits']"
Testability,"EveElement::SetSourceObject(TObject* o); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTEveElement::SetTransMatrix(Double_t* carr); virtual voidTEveElement::SetTransMatrix(const TGeoMatrix& mat); virtual voidTObject::SetUniqueID(UInt_t uid); voidTEveElement::SetUserData(void* ud); voidTEveCaloViz::SetValueIsColor(Bool_t x); voidTEveElement::SetVizModel(TEveElement* model); voidTEveElement::SetVizTag(const TString& tag); virtual voidShowMembers(TMemberInspector& insp) const; virtual Bool_tTEveElement::SingleRnrState() const; virtual Int_tTNamed::Sizeof() const; virtual voidTAtt3D::Sizeof3D() const; voidTEveElement::SpawnEditor()MENU ; voidTEveElement::StampColorSelection(); voidTEveElement::StampObjProps(); voidTEveElement::StampTransBBox(); voidTEveElement::StampVisibility(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTEveElement::TestCSCBits(UChar_t f) const; TEveCalo2D(const char* n = ""TEveCalo2D"", const char* t = """"); virtual voidTEveElement::UnHighlighted(); virtual voidTEveProjected::UnRefProjectable(TEveProjectable* assumed_parent, bool notifyParent = true); virtual voidTEveElement::UnSelected(); virtual voidUpdateProjection(); virtual voidTObject::UseCurrentStyle(); voidTEveElement::VizDB_Apply(const char* tag)MENU ; voidTEveElement::VizDB_Insert(const char* tag, Bool_t replace = kTRUE, Bool_t update = kTRUE)MENU ; voidTEveElement::VizDB_Reapply()MENU ; voidTEveElement::VizDB_UpdateModel(Bool_t update = kTRUE)MENU ; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTEveElement::WriteVizParams(ostream& out, cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveCalo2D.html:18131,Test,TestBit,18131,root/html602/TEveCalo2D.html,https://root.cern,https://root.cern/root/html602/TEveCalo2D.html,2,['Test'],['TestBit']
Testability,"EveElement::SetTransMatrix(const TGeoMatrix& mat); virtual voidTObject::SetUniqueID(UInt_t uid); voidTEveElement::SetUserData(void* ud); voidTEveElement::SetVizModel(TEveElement* model); voidTEveElement::SetVizTag(const TString& tag); virtual voidShowMembers(TMemberInspector& insp) const; virtual Bool_tTEveElement::SingleRnrState() const; virtual Int_tTNamed::Sizeof() const; voidTEveElement::SpawnEditor()MENU ; voidTEveElement::StampColorSelection(); voidTEveElement::StampObjProps(); voidTEveElement::StampTransBBox(); voidTEveElement::StampVisibility(); TGCompositeFrame*StartEmbedding(); TEveWindowFrame*StopEmbedding(const char* name = 0); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); voidTEveWindow::SwapWindow(TEveWindow* w); static voidTEveWindow::SwapWindows(TEveWindow* w1, TEveWindow* w2); voidTEveWindow::SwapWindowWithCurrent()MENU ; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTEveElement::TestCSCBits(UChar_t f) const; TEveWindowSlot(const char* n = ""TEveWindowSlot"", const char* t = """"); voidTEveWindow::TitleBarClicked(); voidTEveWindow::UndockWindow()MENU ; voidTEveWindow::UndockWindowDestroySlot()MENU ; virtual voidTEveElement::UnHighlighted(); virtual voidTEveElement::UnSelected(); virtual voidTObject::UseCurrentStyle(); voidTEveElement::VizDB_Apply(const char* tag)MENU ; voidTEveElement::VizDB_Insert(const char* tag, Bool_t replace = kTRUE, Bool_t update = kTRUE)MENU ; voidTEveElement::VizDB_Reapply()MENU ; voidTEveElement::VizDB_UpdateModel(Bool_t update = kTRUE)MENU ; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTEveElement::WriteVizParams(ostream& out, const TString& var).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveWindowSlot.html:17045,Test,TestBits,17045,root/html602/TEveWindowSlot.html,https://root.cern,https://root.cern/root/html602/TEveWindowSlot.html,4,['Test'],"['TestBits', 'TestCSCBits']"
Testability,"EveElement::SetUserData(void* ud); voidTEveElement::SetVizModel(TEveElement* model); voidTEveElement::SetVizTag(const TString& tag); virtual voidShowMembers(TMemberInspector& insp) const; virtual Bool_tTEveElement::SingleRnrState() const; virtual Int_tTNamed::Sizeof() const; voidTEveElement::SpawnEditor()MENU ; TGLEmbeddedViewer*SpawnGLEmbeddedViewer(TGedEditor* ged = 0, Int_t border = 0); TGLSAViewer*SpawnGLViewer(TGedEditor* ged = 0, Bool_t stereo = kFALSE, Bool_t quad_buf = kTRUE); voidTEveElement::StampColorSelection(); voidTEveElement::StampObjProps(); voidTEveElement::StampTransBBox(); voidTEveElement::StampVisibility(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); voidTEveWindow::SwapWindow(TEveWindow* w); static voidTEveWindow::SwapWindows(TEveWindow* w1, TEveWindow* w2); voidTEveWindow::SwapWindowWithCurrent()MENU ; voidSwitchStereo(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTEveElement::TestCSCBits(UChar_t f) const; TEveViewer(const char* n = ""TEveViewer"", const char* t = """"); voidTEveWindow::TitleBarClicked(); voidTEveWindow::UndockWindow()MENU ; voidTEveWindow::UndockWindowDestroySlot()MENU ; virtual voidTEveElement::UnHighlighted(); virtual voidTEveElement::UnSelected(); virtual voidTObject::UseCurrentStyle(); voidTEveElement::VizDB_Apply(const char* tag)MENU ; voidTEveElement::VizDB_Insert(const char* tag, Bool_t replace = kTRUE, Bool_t update = kTRUE)MENU ; voidTEveElement::VizDB_Reapply()MENU ; voidTEveElement::VizDB_UpdateModel(Bool_t update = kTRUE)MENU ; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTEveElement::WriteVizParams(ostream& out, const TString& var).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TEveViewer.html:17718,Test,TestBit,17718,root/html604/TEveViewer.html,https://root.cern,https://root.cern/root/html604/TEveViewer.html,1,['Test'],['TestBit']
Testability,"EveElement::kAnnihilate; static TEveElement::ECompoundSelectionColorBitsTEveElement::kCSCBApplyMainColorToAllChildren; static TEveElement::ECompoundSelectionColorBitsTEveElement::kCSCBApplyMainColorToMatchingChildren; static TEveElement::ECompoundSelectionColorBitsTEveElement::kCSCBApplyMainTransparencyToAllChildren; static TEveElement::ECompoundSelectionColorBitsTEveElement::kCSCBApplyMainTransparencyToMatchingChildren; static TEveElement::ECompoundSelectionColorBitsTEveElement::kCSCBImplySelectAllChildren; static TEveElement::ECompoundSelectionColorBitsTEveElement::kCSCBTakeAnyParentAsMaster; static TEveElement::EDestructTEveElement::kNone; static TEveElement::EDestructTEveElement::kStandard. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveSceneList(const char* n = ""TEveSceneList"", const char* t = """"); Constructor. void DestroyScenes(); Destroy all scenes and their contents.; Tho object with non-zero deny-destroy will still survive. void RepaintChangedScenes(Bool_t dropLogicals); Repaint scenes that are tagged as changed. void RepaintAllScenes(Bool_t dropLogicals); Repaint all scenes. void DestroyElementRenderers(TEveElement* element); Loop over all scenes and remove all instances of element from; them. void ProcessSceneChanges(Bool_t dropLogicals, TExMap* stampMap); Loop over all scenes and update them accordingly:; a) if scene is marked as changed, it is repainted;; b) otherwise iteration is done over the set of stamped elements and; their physical/logical shapes are updated accordingly. This allows much finer update granularity without resetting of; complex GL-viewer and GL-scene state. TEveScene& operator=(const TEveSceneList& ). TEveSceneList(const TEveSceneList& ). virtual ~TEveSceneList(); {}. » Last changed: root/eve:$Id$ » Last generated: 2015-06-02 15:45; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TEveSceneList.html:21531,log,logical,21531,root/html604/TEveSceneList.html,https://root.cern,https://root.cern/root/html604/TEveSceneList.html,1,['log'],['logical']
Testability,"EveElement::kAnnihilate; static TEveElement::ECompoundSelectionColorBitsTEveElement::kCSCBApplyMainColorToAllChildren; static TEveElement::ECompoundSelectionColorBitsTEveElement::kCSCBApplyMainColorToMatchingChildren; static TEveElement::ECompoundSelectionColorBitsTEveElement::kCSCBApplyMainTransparencyToAllChildren; static TEveElement::ECompoundSelectionColorBitsTEveElement::kCSCBApplyMainTransparencyToMatchingChildren; static TEveElement::ECompoundSelectionColorBitsTEveElement::kCSCBImplySelectAllChildren; static TEveElement::ECompoundSelectionColorBitsTEveElement::kCSCBTakeAnyParentAsMaster; static TEveElement::EDestructTEveElement::kNone; static TEveElement::EDestructTEveElement::kStandard. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveSceneList(const char* n = ""TEveSceneList"", const char* t = """"); Constructor. void DestroyScenes(); Destroy all scenes and their contents.; Tho object with non-zero deny-destroy will still survive. void RepaintChangedScenes(Bool_t dropLogicals); Repaint scenes that are tagged as changed. void RepaintAllScenes(Bool_t dropLogicals); Repaint all scenes. void DestroyElementRenderers(TEveElement* element); Loop over all scenes and remove all instances of element from; them. void ProcessSceneChanges(Bool_t dropLogicals, TExMap* stampMap); Loop over all scenes and update them accordingly:; a) if scene is marked as changed, it is repainted;; b) otherwise iteration is done over the set of stamped elements and; their physical/logical shapes are updated accordingly. This allows much finer update granularity without resetting of; complex GL-viewer and GL-scene state. TEveScene& operator=(const TEveSceneList& ). TEveSceneList(const TEveSceneList& ). virtual ~TEveSceneList(); {}. » Last changed: root/eve:$Id$ » Last generated: 2015-06-30 14:46; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveSceneList.html:21531,log,logical,21531,root/html602/TEveSceneList.html,https://root.cern,https://root.cern/root/html602/TEveSceneList.html,1,['log'],['logical']
Testability,"EveStraightLineSet::Line_t*AddLine(const TEveVector& p1, const TEveVector& p2); TEveStraightLineSet::Line_t*AddLine(Float_t x1, Float_t y1, Float_t z1, Float_t x2, Float_t y2, Float_t z2); Marker_t*AddMarker(const TEveVector& p, Int_t line_id = -1); Marker_t*AddMarker(Int_t line_id, Float_t pos); Marker_t*AddMarker(Float_t x, Float_t y, Float_t z, Int_t line_id = -1); virtual voidTEveElement::AddParent(TEveElement* re); virtual voidTEveProjectable::AddProjected(TEveProjected* p); virtual voidTEveProjectable::AddProjectedsToSet(set<TEveElement*>& set); virtual voidTEveElement::AddStamp(UChar_t bits); virtual voidTEveElement::Annihilate(); virtual voidTEveElement::AnnihilateElements(); virtual voidTEveProjectable::AnnihilateProjecteds(); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; Float_t*TAttBBox::AssertBBox(); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearSt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveStraightLineSet.html:2084,Assert,AssertBBox,2084,root/html528/TEveStraightLineSet.html,https://root.cern,https://root.cern/root/html528/TEveStraightLineSet.html,4,['Assert'],['AssertBBox']
Testability,"EvenRowBackground(Pixel_t pixel); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGTable::SetHeaderBackground(Pixel_t pixel); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGTable::SetOddRowBackground(Pixel_t pixel); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGTable::Show(); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTGTable::Update(); virtual voidTGTable::UpdateView(); virtual voidTObject::UseCurrentStyle(); virtual voidTGTable::UserRangeChange(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGSimpleTable.html:16500,Test,TestBit,16500,root/html528/TGSimpleTable.html,https://root.cern,https://root.cern/root/html528/TGSimpleTable.html,10,['Test'],"['TestBit', 'TestBits']"
Testability,"Event() {; std::string s1(__FILE__);; TString dir = gSystem->UnixPathName(s1.substr(0, s1.find_last_of(""\\/"")).c_str());; gROOT->ProcessLine(TString("".L "")+dir+""/clonesA_Event.cxx+"");; #define CLONESA_EVENT_SECOND_RUN yes; gROOT->ProcessLine(""#include \"""" __FILE__ ""\"""");; gROOT->ProcessLine(""clonesA_Event(true)"");; }; ; #else; ; void clonesA_Event_w(); {; // protect against old ROOT versions; if ( gROOT->GetVersionInt() < 30503 ) {; cout << ""Works only with ROOT version >= 3.05/03"" << endl;; return;; }; if ( gROOT->GetVersionDate() < 20030406 ) {; cout << ""Works only with ROOT CVS version after 5. 4. 2003"" << endl;; return;; }; ; //write a Tree; TFile *hfile = new TFile(""clonesA_Event.root"",""RECREATE"",""Test TClonesArray"");; TTree *tree = new TTree(""clonesA_Event"",""An example of a ROOT tree"");; TUsrSevtData1 *event1 = new TUsrSevtData1();; TUsrSevtData2 *event2 = new TUsrSevtData2();; tree->Branch(""top1"",""TUsrSevtData1"",&event1,8000,99);; tree->Branch(""top2"",""TUsrSevtData2"",&event2,8000,99);; for (Int_t ev = 0; ev < 10; ev++) {; cout << ""event "" << ev << endl;; event1->SetEvent(ev);; event2->SetEvent(ev);; tree->Fill();; if (ev <3) tree->Show(ev);; }; tree->Write();; tree->Print();; delete hfile;; }; ; void clonesA_Event_r(); {; //read the Tree; TFile * hfile = new TFile(""clonesA_Event.root"");; TTree *tree = (TTree*)hfile->Get(""clonesA_Event"");; ; TUsrSevtData1 * event1 = 0;; TUsrSevtData2 * event2 = 0;; tree->SetBranchAddress(""top1"",&event1);; tree->SetBranchAddress(""top2"",&event2);; for (Int_t ev = 0; ev < 8; ev++) {; tree->Show(ev);; cout << ""Pileup event1: "" << event1->GetPileup() << endl;; cout << ""Pileup event2: "" << event2->GetPileup() << endl;; event1->Clear();; event2->Clear();; // gObjectTable->Print(); // detect possible memory leaks; }; delete hfile;; }; ; void clonesA_Event(bool /*secondrun*/) {; // Embedding this load inside the first run of the script is not yet; // supported in v6; // gROOT->ProcessLine("".L clonesA_Event.cxx+""); // compile shared lib;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/clonesA__Event_8C.html:1268,Test,Test,1268,doc/master/clonesA__Event_8C.html,https://root.cern,https://root.cern/doc/master/clonesA__Event_8C.html,1,['Test'],['Test']
Testability,"Event*>&, TMVA::DecisionTree* dt, UInt_t cls = 0); Double_tGradBoostRegression(vector<const TMVA::Event*>&, TMVA::DecisionTree* dt); virtual voidInit(); voidInitGradBoost(vector<const TMVA::Event*>&); voidPreProcessNegativeEventWeights(); Double_tPrivateGetMvaValue(const TMVA::Event* ev, Double_t* err = 0, Double_t* errUpper = 0, UInt_t useNTrees = 0); Double_tRegBoost(vector<const TMVA::Event*>&, TMVA::DecisionTree* dt); voidUpdateTargets(vector<const TMVA::Event*>&, UInt_t cls = 0); voidUpdateTargetsRegression(vector<const TMVA::Event*>&, Bool_t first = kFALSE). Data Members; public:. enum TMVA::MethodBase::EWeightFileType { kROOT; kTEXT; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. Bool_tTMVA::MethodBase::fSetupCompletedis method setup; const TMVA::Event*TMVA::MethodBase::fTmpEvent! temporary event when testing on a different DataSet than the own one. protected:. TMVA::Types::EAnalysisTypeTMVA::MethodBase::fAnalysisTypemethod-mode : true --> regression, false --> classification; UInt_tTMVA::MethodBase::fBackgroundClassindex of the Background-class; vector<TString>*TMVA::MethodBase::fInputVarsvector of input variables used in MVA; vector<Float_t>*TMVA::MethodBase::fMulticlassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase::fNbinsnumber of bins in input variable histograms; Int_tTMVA::MethodBase::fNbinsHnumber of bins in evaluation histograms; Int_tTMVA::MethodBase::fNbinsMVAoutputnumber of bins in MVA output histograms; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. Double_tfAdaBoostBeta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__MethodBDT.html:20659,test,testing,20659,root/html534/TMVA__MethodBDT.html,https://root.cern,https://root.cern/root/html534/TMVA__MethodBDT.html,1,['test'],['testing']
Testability,"EventStatus() const; { return TestBit(kShowEventStatus); }. Bool_t GetShowToolBar() const; { return TestBit(kShowToolBar); }. Bool_t GetShowEditor() const; { return TestBit(kShowEditor); }. Bool_t GetShowToolTips() const; { return TestBit(kShowToolTips); }. Bool_t GetAutoExec() const; { return TestBit(kAutoExec); }. Size_t GetXsizeUser() const; {return fXsizeUser;}. Size_t GetYsizeUser() const; {return fYsizeUser;}. Size_t GetXsizeReal() const; {return fXsizeReal;}. Size_t GetYsizeReal() const; {return fYsizeReal;}. Int_t GetCanvasID() const; {return fCanvasID;}. TCanvasImp * GetCanvasImp() const; {return fCanvasImp;}. UInt_t GetWindowWidth() const; { return fWindowWidth; }. UInt_t GetWindowHeight() const; { return fWindowHeight; }. UInt_t GetWw() const; { return fCw; }. UInt_t GetWh() const; { return fCh; }. void GetCanvasPar(Int_t& wtopx, Int_t& wtopy, UInt_t& ww, UInt_t& wh); {wtopx=GetWindowTopX(); wtopy=fWindowTopY; ww=fWindowWidth; wh=fWindowHeight;}. Bool_t HasMenuBar() const; { return TestBit(kMenuBar); }. void Iconify(); { fCanvasImp->Iconify(); }. Bool_t IsBatch() const; { return fBatch; }. Bool_t IsRetained() const; { return fRetained; }. Bool_t OpaqueMoving() const; { return TestBit(kMoveOpaque); }. Bool_t OpaqueResizing() const; { return TestBit(kResizeOpaque); }. TPad * Pick(Int_t px, Int_t py, TObjLink *&pickobj); { return TPad::Pick(px, py, pickobj); }. void RaiseWindow(); { fCanvasImp->RaiseWindow(); }. void SetWindowPosition(Int_t x, Int_t y); { fCanvasImp->SetWindowPosition(x, y); }. void SetWindowSize(UInt_t ww, UInt_t wh); { fCanvasImp->SetWindowSize(ww, wh); }. void SetHighLightColor(Color_t col); { fHighLightColor = col; }. void SetClickSelected(TObject* obj); { fClickSelected = obj; }. void SetSelectedPad(TPad* pad); { fSelectedPad = pad; }. void SetClickSelectedPad(TPad* pad); { fClickSelectedPad = pad; }. void Show(); { fCanvasImp->Show(); }. void SetPadSave(TPad* pad); {fPadSave = pad;}. void SetRetained(Bool_t retained = kTRUE); { fRetain",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TCanvas.html:46750,Test,TestBit,46750,root/html526/TCanvas.html,https://root.cern,https://root.cern/root/html526/TCanvas.html,1,['Test'],['TestBit']
Testability,"EventStatus() const; { return TestBit(kShowEventStatus); }. Bool_t GetShowToolBar() const; { return TestBit(kShowToolBar); }. Bool_t GetShowEditor() const; { return TestBit(kShowEditor); }. Bool_t GetShowToolTips() const; { return TestBit(kShowToolTips); }. Bool_t GetAutoExec() const; { return TestBit(kAutoExec); }. Size_t GetXsizeUser() const; {return fXsizeUser;}. Size_t GetYsizeUser() const; {return fYsizeUser;}. Size_t GetXsizeReal() const; {return fXsizeReal;}. Size_t GetYsizeReal() const; {return fYsizeReal;}. Int_t GetCanvasID() const; {return fCanvasID;}. TCanvasImp * GetCanvasImp() const; {return fCanvasImp;}. UInt_t GetWindowWidth() const; { return fWindowWidth; }. UInt_t GetWindowHeight() const; { return fWindowHeight; }. UInt_t GetWw() const; { return fCw; }. UInt_t GetWh() const; { return fCh; }. void GetCanvasPar(Int_t& wtopx, Int_t& wtopy, UInt_t& ww, UInt_t& wh); {wtopx=GetWindowTopX(); wtopy=fWindowTopY; ww=fWindowWidth; wh=fWindowHeight;}. Bool_t HasMenuBar() const; { return TestBit(kMenuBar); }. void Iconify(); { fCanvasImp->Iconify(); }. Bool_t IsBatch() const; { return fBatch; }. Bool_t IsRetained() const; { return fRetained; }. Bool_t OpaqueMoving() const; { return TestBit(kMoveOpaque); }. Bool_t OpaqueResizing() const; { return TestBit(kResizeOpaque); }. TPad * Pick(Int_t px, Int_t py, TObjLink*& pickobj); { return TPad::Pick(px, py, pickobj); }. void RaiseWindow(); { fCanvasImp->RaiseWindow(); }. void SetWindowPosition(Int_t x, Int_t y); { fCanvasImp->SetWindowPosition(x, y); }. void SetWindowSize(UInt_t ww, UInt_t wh); { fCanvasImp->SetWindowSize(ww, wh); }. void SetHighLightColor(Color_t col); { fHighLightColor = col; }. void SetClickSelected(TObject* obj); { fClickSelected = obj; }. void SetSelectedPad(TPad* pad); { fSelectedPad = pad; }. void SetClickSelectedPad(TPad* pad); { fClickSelectedPad = pad; }. void Show(); { fCanvasImp->Show(); }. void SetPadSave(TPad* pad); {fPadSave = pad;}. void SetRetained(Bool_t retained = kTRUE); { fRetain",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TCanvas.html:46744,Test,TestBit,46744,root/html528/TCanvas.html,https://root.cern,https://root.cern/root/html528/TCanvas.html,6,['Test'],['TestBit']
Testability,"ExecutionPolicy & ; executionPolicy = ::ROOT::EExecutionPolicy::kSequential . ). inline . Constructor from unbin data set and model function (pdf) ; Definition at line 57 of file LogLikelihoodFCN.h. ◆ LogLikelihoodFCN() [2/3]. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::LogLikelihoodFCN ; (; const UnBinData & ; data, . const IModelFunction & ; func, . int ; weight = 0, . bool ; extended = false, . const ::ROOT::EExecutionPolicy & ; executionPolicy = ::ROOT::EExecutionPolicy::kSequential . ). inline . Constructor from unbin data set and model function (pdf) for object managed by users. ; Definition at line 69 of file LogLikelihoodFCN.h. ◆ ~LogLikelihoodFCN(). template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . virtual ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::~LogLikelihoodFCN ; (; ). inlinevirtual . Destructor (no operations) ; Definition at line 81 of file LogLikelihoodFCN.h. ◆ LogLikelihoodFCN() [3/3]. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::LogLikelihoodFCN ; (; const LogLikelihoodFCN< DerivFunType, ModelFunType > & ; f). inline . Copy constructor. ; Definition at line 86 of file LogLikelihoodFCN.h. Member Function Documentation. ◆ Clone(). template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . virtual BaseFunction * ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::Clone ; (; ); const. inlinevirtual . clone the function (need to return Base for Windows) ; Definition at line 112 of file LogLikelihoodFCN.h. ◆ DataElement(). template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . virtual double ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::DataElement ; (; const double * ; x, . unsigned int ; i, . double * ; g, . double * ; h = null",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html:9264,Log,LogLikelihoodFCN,9264,doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html,1,['Log'],['LogLikelihoodFCN']
Testability,"ExecutionPolicy::kSequential) {; 166 return LeastSquareFit(data, executionPolicy);; 167 }; 168 ; 169 /**; 170 Fit a binned data set using a least square fit copying the input data.; 171 */; 172 bool LeastSquareFit(const BinData & data, const ROOT::EExecutionPolicy &executionPolicy = ROOT::EExecutionPolicy::kSequential) {; 173 SetData(data);; 174 return DoLeastSquareFit(executionPolicy);; 175 }; 176 /**; 177 Fit a binned data set using a least square fit NOT copying the input data.; 178 */; 179 bool LeastSquareFit(const std::shared_ptr<BinData> & data, const ROOT::EExecutionPolicy &executionPolicy = ROOT::EExecutionPolicy::kSequential) {; 180 SetData(data);; 181 return DoLeastSquareFit(executionPolicy);; 182 }; 183 ; 184 /**; 185 Fit an un-binned data set using the negative log-likelihood method.; 186 This function copies the input data.; 187 */; 188 bool Fit(const UnBinData & data, bool extended = false, const ROOT::EExecutionPolicy &executionPolicy = ROOT::EExecutionPolicy::kSequential) {; 189 return LikelihoodFit(data, extended, executionPolicy);; 190 }; 191 /**; 192 Fit an un-binned data set using the negative log-likelihood method.; 193 This function uses a `shared_ptr` to avoid copying the input data.; 194 */; 195 bool Fit(const std::shared_ptr<UnBinData> & data, bool extended = false, const ROOT::EExecutionPolicy &executionPolicy = ROOT::EExecutionPolicy::kSequential) {; 196 return LikelihoodFit(data, extended, executionPolicy);; 197 }; 198 ; 199 /**; 200 Binned Likelihood fit copying the input data.; 201 Default is extended.; 202 */; 203 bool LikelihoodFit(const BinData &data, bool extended = true,; 204 const ROOT::EExecutionPolicy &executionPolicy = ROOT::EExecutionPolicy::kSequential) {; 205 SetData(data);; 206 return DoBinnedLikelihoodFit(extended, executionPolicy);; 207 }; 208 /**; 209 Binned Likelihood fit using a `shared_ptr` for NOT copying the input data.; 210 Default is extended.; 211 */; 212 bool LikelihoodFit(const std::shared_ptr<BinData> &data, bo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Fitter_8h_source.html:6940,log,log-likelihood,6940,doc/master/Fitter_8h_source.html,https://root.cern,https://root.cern/doc/master/Fitter_8h_source.html,1,['log'],['log-likelihood']
Testability,"Exit; kExit; kAbort; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TApplication*TApplication::fAppRemoteCurrent remote application, if defined; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TList*TApplication::fgApplicationsList of available applications. private:. Bool_tfInterruptflag interrupt state; Bool_tfIsValidflag validity; FILE*fLogFilelog file; Int_tfLogFileDeslog file descriptor; TStringfLogFilePathPath to log file; Int_tfProtocoluser protocol version number; Bool_tfRealTimeLogTRUE if log messages should be send back in real-time; TList*fSentCanvasesList of canvases already sent; TStringfSessIdIdentifier for this session; TSocket*fSocketsocket connection to user; TUrlfUrluser's url; TStringfWorkDirWorking dir; TRemoteObject*fWorkingDirWorking (remote) directory. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TApplicationServer(Int_t* argc, char** argv, FILE* flog, const char* logfile); Main constructor. Create an application environment. The TApplicationServer; environment provides an eventloop via inheritance of TApplication. Int_t Setup(); Print the Remote Server logo on standard output.; Return 0 on success, -1 on failure. ~TApplicationServer(); Cleanup. Not really necessary since after this dtor there is no; live anyway. void GetOptions(Int_t* argc, char** argv); Get and handle command line options. Fixed format:; ""protocol url"". void Run(Bool_t retrn = kFALSE); Main server eventloop. void HandleSocketInput(); Handle input coming from the cli",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TApplicationServer.html:12785,log,log,12785,root/html528/TApplicationServer.html,https://root.cern,https://root.cern/root/html528/TApplicationServer.html,8,['log'],['log']
Testability,"Expression: "" << expression.Data(); 262 << "" does not provide data for this event. ""; 263 << ""This event is not taken into account. --> please check if you use as a variable ""; 264 << ""an entry of an array which is not filled for some events ""; 265 << ""(e.g. arr[4] when arr has only 3 elements)."" << Endl;; 266 Log() << kWARNING << ""If you want to take the event into account you can do something like: ""; 267 << ""\""Alt$(arr[4],0)\"" where in cases where arr doesn't have a 4th element, ""; 268 << "" 0 is taken as an alternative."" << Endl;; 269 worked = kFALSE;; 270 }; 271 if( expression.Contains(""$"") ); 272 hasDollar = kTRUE;; 273 else; 274 {; 275 for (int i = 0, iEnd = ttf->GetNcodes (); i < iEnd; ++i); 276 {; 277 TLeaf* leaf = ttf->GetLeaf (i);; 278 if (!leaf->IsOnTerminalBranch()); 279 hasDollar = kTRUE;; 280 }; 281 }; 282 return worked;; 283}; 284 ; 285 ; 286////////////////////////////////////////////////////////////////////////////////; 287/// While the data gets copied into the local training and testing; 288/// trees, the input tree can change (for instance when changing from; 289/// signal to background tree, or using TChains as input) The; 290/// TTreeFormulas, that hold the input expressions need to be; 291/// re-associated with the new tree, which is done here; 292 ; 293void TMVA::DataSetFactory::ChangeToNewTree( TreeInfo& tinfo, const DataSetInfo & dsi ); 294{; 295 TTree *tr = tinfo.GetTree()->GetTree();; 296 ; 297 //tr->SetBranchStatus(""*"",1); // nor needed when using TTReeFormula; 298 tr->ResetBranchAddresses();; 299 ; 300 Bool_t hasDollar = kTRUE; // Set to false if wants to enable only some branch in the tree; 301 ; 302 // 1) the input variable formulas; 303 Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << "" create input formulas for tree "" << tr->GetName() << Endl;; 304 std::vector<TTreeFormula*>::const_iterator formIt, formItEnd;; 305 for (formIt = fInputFormulas.begin(), formItEnd=fInputFormulas.end(); formIt!=formItEnd; ++formIt) if (*formIt) ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataSetFactory_8cxx_source.html:11121,test,testing,11121,doc/master/DataSetFactory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/DataSetFactory_8cxx_source.html,1,['test'],['testing']
Testability,"F session, attach to or detach from existing one, and to monitor any client activity on the cluster. ; At most one manager instance per server is allowed. ; Definition at line 43 of file TProofMgr.h. Public Types; enum  EServType { kProofd = 0; , kXProofd = 1; , kProofLite = 2; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TProofMgr (const char *url, Int_t loglevel=-1, const char *alias="""");  Create a PROOF manager for the standard (old) environment. ;  ;  ~TProofMgr () override;  Destroy a TProofMgr instance. ;  ; virtual TProof * AttachSession (Int_t, Bool_t=kFALSE);  Dummy version provided for completeness. ;  ; virtual TProof * AttachSession (TProofDesc *, Bool_t=kFALSE);  Dummy version provided for completeness. ;  ; void Close ();  ; virtual Int_t Cp (const char *, const char *=0, const char *=0);  ; virtual TProof * CreateSession (const char *=0, const char *=0, Int_t=-1);  Create a new remote session (master and associated workers). ;  ; virtual void DetachSession (Int_t, Option_t *="""");  Detach session with 'id' from its proofserv. ;  ; virtual void DetachSession (TProof *, Option_t *="""");  Detach session 'p' from its proofserv. ;  ; virtual void DiscardSession (TProof *p);  Discard TProofDesc of session 'p' from the internal list. ;  ; virtual void Find (const char *=""~/"", const char *=0, const char *=0);  ; virtual Int_t GetFile (const char *,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofMgr.html:1546,log,loglevel,1546,doc/master/classTProofMgr.html,https://root.cern,https://root.cern/doc/master/classTProofMgr.html,1,['log'],['loglevel']
Testability,"F(Double_t x) const; voidLogSample(); ROOT::Math::GoFTestoperator=(ROOT::Math::GoFTest& gof); Double_tPValueAD1Sample(Double_t A2) const; Double_tPValueAD2Samples(Double_t& A2, UInt_t N) const; voidSetCDF(); voidSetDistributionFunction(const ROOT::Math::IGenFunction& cdf, Bool_t isPDF, Double_t xmin, Double_t xmax); voidSetParameters(); voidSetSamples(vector<const Double_t*> samples, const vector<UInt_t> samplesSizes). Data Members; public:. enum EDistribution { kUndefined; kUserDefined; kGaussian; kLogNormal; kExponential; };; enum EUserDistribution { kCDF; kPDF; };; enum ETestType { kAD; kAD2s; kKS; kKS2s; };. private:. auto_ptr<ROOT::Math::IBaseFunctionOneDim>fCDF; vector<Double_t>fCombinedSamples; ROOT::Math::GoFTest::EDistributionfDist; Double_tfMean; vector<std::vector<Double_t> >fSamples; Double_tfSigma; Bool_tfTestSampleFromH0. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GoFTest(UInt_t sample1Size, const Double_t* sample1, UInt_t sample2Size, const Double_t* sample2); Constructor for using only with 2-samples tests. GoFTest(UInt_t sampleSize, const Double_t* sample, ROOT::Math::GoFTest::EDistribution dist = kUndefined); Constructor for using only with 1-sample tests with a specified distribution. GoFTest(UInt_t sampleSize, const Double_t* sample, const ROOT::Math::IGenFunction& dist, ROOT::Math::GoFTest::EUserDistribution userDist = kPDF, Double_t xmin = 1, Double_t xmax = 0); Templated constructor for using only with 1-sample tests with a user specified distribution. Instantiate(const Double_t* sample, UInt_t sampleSize). GoFTest(UInt_t sampleSize, const Double_t* sample, const ROOT::Math::IGenFunction& dist, ROOT::Math::GoFTest::EUserDistribution userDist = kPDF, Double_t xmin = 1, Double_t xmax = 0); Specialization using IGenFunction interface. SetUserDistribution(const ROOT::Math::IGenFunction& dist, ROOT::Math::GoFTest::EUserDistribution userDist = kPDF, Double_t xmin = 1, Double_t xmax = 0). SetDistributio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__GoFTest.html:3373,test,tests,3373,root/html528/ROOT__Math__GoFTest.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__GoFTest.html,3,['test'],['tests']
Testability,"F, void, R >;  CTPosixCondition;  CTPosixMutex;  CTPosixThread;  CTPosixThreadCleanUp;  CTPosixThreadFactory;  CTPostScriptInterface to PostScript ;  CTPRegexp;  CTPrimaryOld version of a dynamic particle class created by event generators ;  CTPrincipalPrincipal Components Analysis (PCA) ;  CTProcessEventTimer;  CTProcessIDA TProcessID identifies a ROOT job in a unique way in time and space ;  CTProcessUUIDThis class is a specialized TProcessID managing the list of UUIDs ;  CTProfileProfile Historam ;  CTProfile2DProfile2D histograms are used to display the mean value of Z and its RMS for each cell in X,Y ;  CTProfile3DProfile3D histograms are used to display the mean value of T and its RMS for each cell in X,Y,Z ;  CTProfileHelper;  ►CTProofThis class controls a Parallel ROOT Facility, PROOF, cluster ;  CMD5Mod_t;  CTProofBenchSteering class for PROOF benchmarks ;  CTProofBenchDataSetHandle operations on datasets used by ProofBench ;  CTProofBenchRunAbstract base class for PROOF benchmark runs ;  CTProofBenchRunCPUCPU-intensive PROOF benchmark test generates events and fill 1, 2, or 3-D histograms ;  CTProofBenchRunDataReadI/O-intensive PROOF benchmark test reads in event files distributed on the cluster ;  CTProofChain;  CTProofCondor;  CTProofDebug;  CTProofDesc;  CTProofDrawImplement Tree drawing using PROOF ;  CTProofDrawEntryList;  CTProofDrawEventList;  CTProofDrawGraph;  CTProofDrawHist;  ►CTProofDrawListOfGraphs;  CPoint3D_t;  ►CTProofDrawListOfPolyMarkers3D;  CPoint4D_t;  CTProofDrawPolyMarker3D;  CTProofDrawProfile;  CTProofDrawProfile2D;  CTProofInputHandler;  CTProofInterruptHandler;  CTProofLimitsFinderClass to find axis limits and synchronize them between workers ;  CTProofLiteThis class starts a PROOF session on the local machine: no daemons, client and master merged, communications via UNIX-like sockets ;  CTProofLockPath;  CTProofLockPathGuard;  CTProofLogImplementation of the PROOF session log handler ;  CTProofLogElem;  CTProofMergePrg;  CTProofM",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:177354,benchmark,benchmark,177354,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,1,['benchmark'],['benchmark']
Testability,"F0;  offset ;  ; std::vector< Double_t > * fFisherCoeff;  Fisher coefficients. ;  ; EFisherMethod fFisherMethod;  Fisher or Mahalanobis. ;  ; TMatrixD * fMeanMatx;  ; Double_t fSumOfWeightsB;  sum-of-weights for background training events ;  ; Double_t fSumOfWeightsS;  sum-of-weights for signal training events ;  ; TString fTheMethod;  Fisher or Mahalanobis. ;  ; TMatrixD * fWith;  within-class matrix ;  . Additional Inherited Members;  Public Attributes inherited from TMVA::MethodBase; Bool_t fSetupCompleted;  ; TrainingHistory fTrainHistory;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TMVA::MethodBase; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVars;  ; IPythonInteractive * fInteractive = nullptr;  temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues) ;  ; UInt_t fIPyCurrentIter = 0;  ; UInt_t fIPyMaxIter = 0;  ; std::vector< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/MethodFisher.h>. Inheritance diagram for TMVA::MethodFisher:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EFisherMethod. enum TMVA::MethodFisher::EFisherMethod. EnumeratorkFisher ; kMahalanobis . Definition at line 86 of file MethodFisher.h. Constructor & Destructor Documentation. ◆ MethodFisher() [1/2].",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodFisher.html:32200,test,testing,32200,doc/master/classTMVA_1_1MethodFisher.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodFisher.html,2,"['log', 'test']","['logger', 'testing']"
Testability,"F1.h"" // we'll need this later...; #include ""TFile.h""; #include ""TMath.h""; #include ""TRandom.h""; #include ""TTreeReader.h""; #include ""TTreeReaderArray.h"". void effX() {; TEfficiency* eff; = new TEfficiency(""eff"", ""Moun trigger efficiency"", 100, 0., 10.);. TFile* file; = TFile::Open(""http://root.cern.ch/root/files/tutorials/mockupx.root"");; TTreeReader reader(""MyTree"", file);. TTreeReaderArray<double> raPt(reader, ""muons.fPt"");; TTreeReaderArray<bool> raTriggered(reader, ""muons.fTriggered"");. while (reader.Next()) {; // Select a tag muon between [0..numberOfMuons[.; int tagMuon = gRandom->Integer(raPt.GetSize());; if (raTriggered[tagMuon]) {; for (int iMuon = 0, nMuons = raPt.GetSize(); iMuon < nMuons; ++iMuon) {; // All but the tag muon can be probe muons; if (iMuon != tagMuon) {; // Fill the efficiency object with; // - whether this muon has triggered; // - the pT of this muon.; eff->Fill(???);; }; }; }; }. eff->Draw();; }. . ‹ 7. Using the TTreeReader; up; 9. Fitting By Coding ›. Navigate through this book; 0. Setting up ROOT; 1. Extracting an object from a TFile; 2. Running code in ROOT; 4. Histogramming; 3. Examining a TTree's data; 5. Fitting; 6. Multivariate Analysis; 7. Using the TTreeReader; 8. Efficiency Calculation; 9. Fitting By Coding; 10. Go Parallel!; TutorialSelector.C; 11. Done!. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/8-efficiency-calculation.html:6158,test,tests,6158,d/8-efficiency-calculation.html,https://root.cern,https://root.cern/d/8-efficiency-calculation.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,"F::EInterpolateMethodkSpline3; static TMVA::PDF::EInterpolateMethodkSpline5; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. TStringfBorderMethodString; Bool_tfCheckHistcheck of source histogram; Float_tfFineFactorfine tuning factor for Adaptive KDE; TGraph*fGraph! needed to create PDF from histogram; TH1*fHistcopy of input histogram; Int_tfHistAvgEvtPerBinavg event per source hist bin; Int_tfHistDefinedNBinssource hist bin num set by user; TH1*fHistOriginalthe input histogram; TF1*fIGetValintegration interface; TMVA::PDF::EInterpolateMethodfInterpolMethodinterpolation method; TStringfInterpolateString; TMVA::KDEKernel::EKernelBorderfKDEborderThe method to take care about ""border"" effects (string); TMVA::KDEKernel::EKernelIterfKDEiterNumber of iterations (adaptive or not); TStringfKDEiterString; TMVA::KDEKernel::EKernelTypefKDEtypeKernel type to use for KDE; TStringfKDEtypeStringstrings used to read definitions; TMVA::MsgLogger*fLogger! message logger; Int_tfMaxNsmoothMax number of smoothing iterations; Int_tfMinNsmoothMin number of smoothing iterations; TH1*fNSmoothHistnumber of smooth for each bin; Bool_tfNormalizenormalize histogram (false for cumulative distribution used in GaussTranform); Int_tfNsmoothMin number of smoothing iterations; TH1*fPDFHistthe high-binned histogram corresponding to the PDF; TStringfPDFNamefor output; UInt_tfReadingVersionthe TMVA version of the weight file; TSpline*fSpline! the used spline type; TStringfSuffix! the suffix for options; Bool_tfUseHistogramspline0 uses histogram as reference; static const Double_tfgEpsilonminimum PDF return; static const Bool_tfgManualIntegrationmanual integration (sum over bins) or DGAUSS; static const Int_tfgNbin_PdfHistnumber of bins in high-binned reference histogram. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDF(const TString& name, Bool_t norm = kTRUE); default constructor needed for ROOT I/O. P",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__PDF.html:9781,log,logger,9781,root/html602/TMVA__PDF.html,https://root.cern,https://root.cern/root/html602/TMVA__PDF.html,2,['log'],['logger']
Testability,"FALSE). operator Double_t() const; Convertors. {return fRe;}. operator Float_t() const; {return static_cast<Float_t>(fRe);}. operator Int_t() const; {return static_cast<Int_t>(fRe);}. TComplex Sqrt(const TComplex& c); TMath:: extensions. {return TComplex(TMath::Sqrt(c.Rho()),0.5*c.Theta(),kTRUE);}. TComplex Exp(const TComplex& c); {return TComplex(TMath::Exp(c.fRe),c.fIm,kTRUE);}. TComplex Log(const TComplex& c); {return TComplex(0.5*TMath::Log(c.Rho2()),c.Theta());}. TComplex Log2(const TComplex& c); {return Log(c)/TMath::Log(2);}. TComplex Log10(const TComplex& c); {return Log(c)/TMath::Log(10);}. TComplex Sin(const TComplex& c). Cos(const TComplex& c). TComplex Tan(const TComplex& c); {TComplex cc=Cos(c); return Sin(c)*Conjugate(cc)/cc.Rho2();}. TComplex ASin(const TComplex& c); {return -I()*Log(I()*c+TMath::Sign(1.,c.Im())*Sqrt(1.-c*c));}. TComplex ACos(const TComplex& c); {return -I()*Log(c+TMath::Sign(1.,c.Im())*Sqrt(c*c-1.));}. TComplex ATan(const TComplex& c); {return -0.5*I()*Log((1.+I()*c)/(1.-I()*c));}. TComplex SinH(const TComplex& c). CosH(const TComplex& c). TComplex TanH(const TComplex& c); {TComplex cc=CosH(c); return SinH(c)*Conjugate(cc)/cc.Rho2();}. TComplex ASinH(const TComplex& c); {return Log(c+TMath::Sign(1.,c.Im())*Sqrt(c*c+1.));}. TComplex ACosH(const TComplex& c); {return Log(c+TMath::Sign(1.,c.Im())*Sqrt(c*c-1.));}. TComplex ATanH(const TComplex& c); {return 0.5*Log((1.+c)/(1.-c));}. Double_t Abs(const TComplex& c); {return c.Rho();}. TComplex Power(const TComplex& x, const TComplex& y). TComplex Power(const TComplex& x, Double_t y); {return TComplex(TMath::Power(x.Rho(),y),x.Theta()*y,kTRUE);}. TComplex Power(Double_t x, const TComplex& y). TComplex Power(const TComplex& x, Int_t y); {return TComplex(TMath::Power(x.Rho(),y),x.Theta()*y,kTRUE);}. Int_t Finite(const TComplex& c); {return TMath::Min(TMath::Finite(c.Re()),TMath::Finite(c.Im()));}. Int_t IsNaN(const TComplex& c); {return TMath::Max(TMath::IsNaN(c.Re()),TMath::IsNaN(c.Im()));}. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TComplex.html:4591,Log,Log,4591,root/html526/TComplex.html,https://root.cern,https://root.cern/root/html526/TComplex.html,5,['Log'],['Log']
Testability,"FALSE); Bool_tSetRangesCylindrical(const TH1* hist); Bool_tSetRangesPolar(const TH1* hist); Bool_tSetRangesSpherical(const TH1* hist); TGLPlotCoordinates(const TGLPlotCoordinates&). Data Members; private:. EGLCoordTypefCoordType; Double_tfFactor; Bool_tfModified; Rgl::BinRange_tfXBins; Bool_tfXLog; Rgl::Range_tfXRange; Rgl::Range_tfXRangeScaled; Double_tfXScale; Rgl::BinRange_tfYBins; Bool_tfYLog; Rgl::Range_tfYRange; Rgl::Range_tfYRangeScaled; Double_tfYScale; Rgl::BinRange_tfZBins; Bool_tfZLog; Rgl::Range_tfZRange; Rgl::Range_tfZRangeScaled; Double_tfZScale. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLPlotCoordinates(); Constructor. ~TGLPlotCoordinates(); Destructor. void SetCoordType(EGLCoordType type); If coord type was changed, plot must reset sections (if any),; set fModified. EGLCoordType GetCoordType() const; Get coordinates type. void SetXLog(Bool_t xLog); If log changed, sections must be reset,; set fModified. Bool_t GetXLog() const; Get X log. void SetYLog(Bool_t yLog); If log changed, sections must be reset,; set fModified. Bool_t GetYLog() const; Get Y log. void SetZLog(Bool_t zLog); If log changed, sections must be reset,; set fModified. Bool_t GetZLog() const; Get Z log. void ResetModified(); Reset modified. Bool_t Modified() const; Modified. Bool_t SetRanges(const TH1* hist, Bool_t errors = kFALSE, Bool_t zBins = kFALSE); Set bin ranges, ranges. Int_t GetNXBins() const; Number of X bins. Int_t GetNYBins() const; Number of Y bins. Int_t GetNZBins() const; Number of Z bins. const Rgl::BinRange_t & GetXBins() const; X bins range. const Rgl::BinRange_t & GetYBins() const; Y bins range. const Rgl::BinRange_t & GetZBins() const; Z bins range. const Rgl::Range_t & GetXRange() const; X range. Double_t GetXLength() const; X length. const Rgl::Range_t & GetYRange() const; Y range. Double_t GetYLength() const; Y length. const Rgl::Range_t & GetZRange() const; Z range. Double_t GetZLength() const; Z length. const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLPlotCoordinates.html:3120,log,log,3120,root/html602/TGLPlotCoordinates.html,https://root.cern,https://root.cern/root/html602/TGLPlotCoordinates.html,2,['log'],['log']
Testability,"FALSE); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); TSlave*TProof::CreateSlave(const char* url, const char* ord, Int_t perf, const char* image, const char* workdir); TSlave*TProof::CreateSubmaster(const char* url, const char* ord, const char* image, const char* msd); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; TList*TProof::GetEnabledPackages() const; static Bool_tTProof::GetFileInCmd(const char* cmd, TString& fn); static Int_tTProof::GetInputData(TList* input, const char* cachedir, TString& emsg); TStringGetJobAd(); TList*TProof::GetListOfActiveSlaves() const; TVirtualProofPlayer*TProof::GetPlayer() const; TPluginHandler*TProof::GetProgressDialog() const; Int_tTProof::GetSandbox(TString& sb, Bool_t assert = kFALSE, const char* rc = 0); virtual void*TQObject::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidTProof::HandleLibIncPath(const char* what, Bool_t add, const char* dirs); Int_tTProof::HandleOutputOptions(TString& opt, TString& target, Int_t action); Int_tTProof::Init(const char* masterurl, const char* conffile, const char* confdir, Int_t loglevel, const char* alias = 0); voidTProof::InitMembers(); virtual TVirtualProofPlayer*TProof::MakePlayer(const char* player = 0, TSocket* s = 0); voidTObject::MakeZombie(); virtual Int_tTProof::PollForNewWorkers(); voidTProof::PrepareInputDataFile(TString& dataFile); Int_tTProof::RemoveWorkers(TList* wrks); static Int_tTProof::SaveInputData(TQueryResult* qr, const char* cachedir, TString& emsg); virtual voidTProof::SaveWorkerInfo(); Int_tTProof::SendFile(const char* file, Int_t opt = (kBinary|kForward|kCp|kCpBin), const char* rfile = 0, TSlave* sl = 0); static Int_tTProof::SendInputData(TQueryResult* qr, TProof* p, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofCondor.html:21935,assert,assert,21935,root/html534/TProofCondor.html,https://root.cern,https://root.cern/root/html534/TProofCondor.html,1,['assert'],['assert']
Testability,"FALSE); virtual Long_tTApplication::ProcessLine(const char* line, Bool_t sync = kFALSE, Int_t* error = 0); Bool_tTApplication::QuitOpt() const; virtual voidTApplication::Raise(); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTApplication::RemoveIdleTimer(); voidTObject::ResetBit(UInt_t f); Bool_tTApplication::ReturnFromRun() const; virtual voidTApplication::ReturnPressed(char* text)SIGNAL ; virtual voidRun(Bool_t retrn = kFALSE); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetEchoMode(Bool_t mode); virtual voidTApplication::SetIdleTimer(UInt_t idleTimeInSec, const char* command); static voidTObject::SetObjectStat(Bool_t stat); virtual const char*SetPrompt(const char* newPrompt); voidTApplication::SetReturnFromRun(Bool_t ret); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTApplication::Show(); virtual voidShowMembers(TMemberInspector& insp); virtual voidTApplication::StartIdleing(); virtual voidTApplication::StopIdleing(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual Int_tTabCompletionHook(char* buf, int* pLoc, ostream& out); virtual voidTerminate(int status); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; const char*TApplication::WorkingDirectory() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TRint.html:9624,Test,TestBit,9624,root/html530/TRint.html,https://root.cern,https://root.cern/root/html530/TRint.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"FALSE, Bool_t force = kFALSE); virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTProofPlayer::SetCurrentQuery(TQueryResult* q); virtual voidTProofPlayer::SetDispatchTimer(Bool_t on = kTRUE); virtual voidTProofPlayer::SetDrawFeedbackOption(TDrawFeedback* f, Option_t* opt); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTProofPlayer::SetExitStatus(TVirtualProofPlayer::EExitStatus st); virtual voidSetInitTime(); virtual voidTProofPlayer::SetMaxDrawQueries(Int_t max); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTProofPlayer::SetOutputFilePath(const char* fp); voidTProofPlayer::SetProcessing(Bool_t on = kTRUE); virtual voidTProofPlayer::SetStopTimer(Bool_t on = kTRUE, Bool_t abort = kFALSE, Int_t timeout = 0); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStopProcess(Bool_t abort, Int_t timeout = -1); virtual voidStoreFeedback(TObject* slave, TList* out); virtual voidStoreOutput(TList* out); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofPlayerRemote(TProof* proof = 0); TProofPlayerRemote(const TProofPlayerRemote&); virtual voidTProofPlayer::UpdateAutoBin(const char* name, Double_t& xmin, Double_t& xmax, Double_t& ymin, Double_t& ymax, Double_t& zmin, Double_t& zmax); virtual voidTProofPlayer::UpdateProgressInfo(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofPlayerRemote.html:11575,Test,TestBit,11575,root/html602/TProofPlayerRemote.html,https://root.cern,https://root.cern/root/html602/TProofPlayerRemote.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"FALSE; }; 141 virtual Bool_t IsVecGeom() const { return kFALSE; }; 142 Bool_t IsRunTimeShape() const { return TestShapeBit(kGeoRunTimeShape); }; 143 Bool_t IsValid() const { return !TestShapeBit(kGeoInvalidShape); }; 144 virtual Bool_t IsValidBox() const = 0;; 145 virtual void InspectShape() const = 0;; 146 virtual TBuffer3D *MakeBuffer3D() const { return nullptr; }; 147 static void NormalPhi(const Double_t *point, const Double_t *dir, Double_t *norm, Double_t c1, Double_t s1,; 148 Double_t c2, Double_t s2);; 149 void Paint(Option_t *option = """") override;; 150 virtual Double_t Safety(const Double_t *point, Bool_t in = kTRUE) const = 0;; 151 virtual void Safety_v(const Double_t *, const Bool_t *, Double_t *, Int_t) const {}; 152 static Double_t SafetyPhi(const Double_t *point, Bool_t in, Double_t phi1, Double_t phi2);; 153 static Double_t SafetySeg(Double_t r, Double_t z, Double_t r1, Double_t z1, Double_t r2, Double_t z2, Bool_t outer);; 154 virtual void SetDimensions(Double_t *param) = 0;; 155 void SetId(Int_t id) { fShapeId = id; }; 156 virtual void SetPoints(Double_t *points) const = 0;; 157 virtual void SetPoints(Float_t *points) const = 0;; 158 virtual void SetSegsAndPols(TBuffer3D &buff) const = 0;; 159 void SetRuntime(Bool_t flag = kTRUE) { SetShapeBit(kGeoRunTimeShape, flag); }; 160 Int_t ShapeDistancetoPrimitive(Int_t numpoints, Int_t px, Int_t py) const;; 161 virtual void Sizeof3D() const = 0;; 162 ; 163 //----- bit manipulation; 164 void SetShapeBit(UInt_t f, Bool_t set);; 165 void SetShapeBit(UInt_t f) { fShapeBits |= f & kBitMask32; }; 166 void ResetShapeBit(UInt_t f) { fShapeBits &= ~(f & kBitMask32); }; 167 Bool_t TestShapeBit(UInt_t f) const { return (Bool_t)((fShapeBits & f) != 0); }; 168 Int_t TestShapeBits(UInt_t f) const { return (Int_t)(fShapeBits & f); }; 169 void InvertShapeBit(UInt_t f) { fShapeBits ^= f & kBitMask32; }; 170 ; 171 ClassDefOverride(TGeoShape, 2) // base class for shapes; 172};; 173 ; 174#endif; b#define b(i)Definition RSha256.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoShape_8h_source.html:7896,Test,TestShapeBit,7896,doc/master/TGeoShape_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoShape_8h_source.html,2,['Test'],"['TestShapeBit', 'TestShapeBits']"
Testability,"FATAL << ""Cannot parse number \"""" << fValidationSize << ""\"". Expected string like \""0.2\"" or \""100\"".""; 642 << Endl;; 643 }; 644 ; 645 // Value validation; 646 // ----------------; 647 if (nValidationSamples < 0) {; 648 Log() << kFATAL << ""Validation size \"""" << fValidationSize << ""\"" is negative."" << Endl;; 649 }; 650 ; 651 if (nValidationSamples == 0) {; 652 Log() << kFATAL << ""Validation size \"""" << fValidationSize << ""\"" is zero."" << Endl;; 653 }; 654 ; 655 if (nValidationSamples >= (Int_t)trainingSetSize) {; 656 Log() << kFATAL << ""Validation size \"""" << fValidationSize; 657 << ""\"" is larger than or equal in size to training set (size=\"""" << trainingSetSize << ""\"")."" << Endl;; 658 }; 659 ; 660 return nValidationSamples;; 661}; 662 ; 663////////////////////////////////////////////////////////////////////////////////; 664 ; 665void TMVA::MethodDNN::Train(); 666{; 667 if (fInteractive && fInteractive->NotInitialized()){; 668 std::vector<TString> titles = {""Error on training set"", ""Error on test set""};; 669 fInteractive->Init(titles);; 670 // JsMVA progress bar maximum (100%); 671 fIPyMaxIter = 100;; 672 }; 673 ; 674 for (TTrainingSettings & settings : fTrainingSettings) {; 675 size_t nValidationSamples = GetNumValidationSamples();; 676 size_t nTrainingSamples = GetEventCollection(Types::kTraining).size() - nValidationSamples;; 677 size_t nTestSamples = nValidationSamples;; 678 ; 679 if (nTrainingSamples < settings.batchSize ||; 680 nValidationSamples < settings.batchSize ||; 681 nTestSamples < settings.batchSize) {; 682 Log() << kFATAL << ""Number of samples in the datasets are train: ""; 683 << nTrainingSamples << "" valid: "" << nValidationSamples; 684 << "" test: "" << nTestSamples << "". ""; 685 << ""One of these is smaller than the batch size of ""; 686 << settings.batchSize << "". Please increase the batch""; 687 << "" size to be at least the same size as the smallest""; 688 << "" of these values."" << Endl;; 689 }; 690 }; 691 ; 692 if (fArchitectureString == ""GPU"") {; 693 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDNN_8cxx_source.html:23253,test,test,23253,doc/master/MethodDNN_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDNN_8cxx_source.html,1,['test'],['test']
Testability,"FCNBasicFCN class: base class for the objective functions used in the fits It has a reference to the dat...Definition BasicFCN.h:40; ROOT::Fit::BasicFCN::SetDatavoid SetData(const std::shared_ptr< DataType > &data)Set the data pointer.Definition BasicFCN.h:98; ROOT::Fit::BasicFCN::ModelFunctionPtrstd::shared_ptr< IModelFunction > ModelFunctionPtr() constaccess to function pointerDefinition BasicFCN.h:81; ROOT::Fit::BasicFCN::SetModelFunctionvoid SetModelFunction(const std::shared_ptr< IModelFunction > &func)Set the function pointer.Definition BasicFCN.h:101; ROOT::Fit::BasicFCN::Datavirtual const DataType & Data() constaccess to const reference to the dataDefinition BasicFCN.h:72; ROOT::Fit::BasicFCN::DataPtrstd::shared_ptr< DataType > DataPtr() constaccess to data pointerDefinition BasicFCN.h:75; ROOT::Fit::BasicFCN::ModelFunctionvirtual const IModelFunction & ModelFunction() constaccess to const reference to the model functionDefinition BasicFCN.h:78; ROOT::Fit::LogLikelihoodFCNLogLikelihoodFCN class for likelihood fits.Definition LogLikelihoodFCN.h:40; ROOT::Fit::LogLikelihoodFCN::BaseFunctionBaseObjFunction::BaseFunction BaseFunctionDefinition LogLikelihoodFCN.h:48; ROOT::Fit::LogLikelihoodFCN::LogLikelihoodFCNLogLikelihoodFCN(const UnBinData &data, const IModelFunction &func, int weight=0, bool extended=false, const ::ROOT::EExecutionPolicy &executionPolicy=::ROOT::EExecutionPolicy::kSequential)Constructor from unbin data set and model function (pdf) for object managed by users.Definition LogLikelihoodFCN.h:69; ROOT::Fit::LogLikelihoodFCN::Typevirtual BaseObjFunction::Type_t Type() constget type of fit method functionDefinition LogLikelihoodFCN.h:134; ROOT::Fit::LogLikelihoodFCN::operator=LogLikelihoodFCN & operator=(const LogLikelihoodFCN &rhs)Assignment operator.Definition LogLikelihoodFCN.h:99; ROOT::Fit::LogLikelihoodFCN::DoDerivativevirtual double DoDerivative(const double *x, unsigned int icoord) constDefinition LogLikelihoodFCN.h:161; ROOT::Fit::LogLikel",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/LogLikelihoodFCN_8h_source.html:8257,Log,LogLikelihoodFCNLogLikelihoodFCN,8257,doc/master/LogLikelihoodFCN_8h_source.html,https://root.cern,https://root.cern/doc/master/LogLikelihoodFCN_8h_source.html,1,['Log'],['LogLikelihoodFCNLogLikelihoodFCN']
Testability,"FO << res << Endl;; 1928 // }; 1929 ; 1930 // Log() << kINFO << hLine << Endl;; 1931 // Log() << kINFO << Endl;; 1932 // }; 1933 ; 1934 // --- 1 vs Rest ROC AUC, signal efficiency @ given background efficiency; 1935 // --------------------------------------------------------------------; 1936 TString header1 = TString::Format(""%-15s%-15s%-15s%-15s%-15s%-15s"", ""Dataset"", ""MVA Method"", ""ROC AUC"", ""Sig eff@B=0.01"",; 1937 ""Sig eff@B=0.10"", ""Sig eff@B=0.30"");; 1938 TString header2 = TString::Format(""%-15s%-15s%-15s%-15s%-15s%-15s"", ""Name:"", ""/ Class:"", ""test (train)"", ""test (train)"",; 1939 ""test (train)"", ""test (train)"");; 1940 Log() << kINFO << Endl;; 1941 Log() << kINFO << ""1-vs-rest performance metrics per class"" << Endl;; 1942 Log() << kINFO << hLine << Endl;; 1943 Log() << kINFO << Endl;; 1944 Log() << kINFO << ""Considers the listed class as signal and the other classes"" << Endl;; 1945 Log() << kINFO << ""as background, reporting the resulting binary performance."" << Endl;; 1946 Log() << kINFO << ""A score of 0.820 (0.850) means 0.820 was acheived on the"" << Endl;; 1947 Log() << kINFO << ""test set and 0.850 on the training set."" << Endl;; 1948 ; 1949 Log() << kINFO << Endl;; 1950 Log() << kINFO << header1 << Endl;; 1951 Log() << kINFO << header2 << Endl;; 1952 for (Int_t k = 0; k < 2; k++) {; 1953 for (Int_t i = 0; i < nmeth_used[k]; i++) {; 1954 if (k == 1) {; 1955 mname[k][i].ReplaceAll(""Variable_"", """");; 1956 }; 1957 ; 1958 const TString datasetName = itrMap->first;; 1959 const TString mvaName = mname[k][i];; 1960 ; 1961 MethodBase *theMethod = dynamic_cast<MethodBase *>(GetMethod(datasetName, mvaName));; 1962 if (theMethod == 0) {; 1963 continue;; 1964 }; 1965 ; 1966 Log() << kINFO << Endl;; 1967 TString row = TString::Format(""%-15s%-15s"", datasetName.Data(), mvaName.Data());; 1968 Log() << kINFO << row << Endl;; 1969 Log() << kINFO << ""------------------------------"" << Endl;; 1970 ; 1971 UInt_t numClasses = theMethod->fDataSetInfo.GetNClasses();; 1972 for (UInt_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:81518,Log,Log,81518,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,1,['Log'],['Log']
Testability,"FQDN())) {; 4777 // Ok, coordinates match; 4778 return kTRUE;; 4779 }; 4780 }; 4781 }; 4782 ; 4783 // Default is not matching; 4784 return kFALSE;; 4785}; 4786 ; 4787////////////////////////////////////////////////////////////////////////////////; 4788/// Return kTRUE if this async request matches the open request; 4789/// specified by 'url'; 4790 ; 4791Bool_t TFileOpenHandle::Matches(const char *url); 4792{; 4793 if (fFile) {; 4794 return fFile->Matches(url);; 4795 } else if (fName.Length() > 0){; 4796 // Deep check of URLs; 4797 TUrl u(url);; 4798 TUrl uref(fName);; 4799 if (!strcmp(u.GetFile(), uref.GetFile())) {; 4800 // Check ports; 4801 if (u.GetPort() == uref.GetPort()) {; 4802 // Check also the host name; 4803 if (!strcmp(u.GetHostFQDN(), uref.GetHostFQDN())) {; 4804 // Ok, coordinates match; 4805 return kTRUE;; 4806 }; 4807 }; 4808 }; 4809 }; 4810 ; 4811 // Default is not matching; 4812 return kFALSE;; 4813}; 4814 ; 4815////////////////////////////////////////////////////////////////////////////////; 4816/// Resolve the file type as a function of the protocol field in 'name'; 4817///; 4818/// If defined, the string 'prefix' is added when testing the locality of; 4819/// a 'name' with network-like structure (i.e. root://host//path); if the file; 4820/// is local, on return 'prefix' will contain the actual local path of the file.; 4821 ; 4822TFile::EFileType TFile::GetType(const char *name, Option_t *option, TString *prefix); 4823{; 4824 EFileType type = kDefault;; 4825 ; 4826 TPMERegexp re(""^(root|xroot).*"", ""i"");; 4827 if (re.Match(name)) {; 4828 //; 4829 // Should be a network file ...; 4830 type = kNet;; 4831 // ... but make sure that is not local or that a remote-like connection; 4832 // is forced. Treat it as local if:; 4833 // i) the url points to the localhost, the file will be opened in; 4834 // readonly mode and the current user has read access;; 4835 // ii) the specified user is equal to the current user then open local; 4836 // TFile.; 4837 Bool_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFile_8cxx_source.html:176473,test,testing,176473,doc/master/TFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFile_8cxx_source.html,1,['test'],['testing']
Testability,"FTest::EUserDistribution userDist = kPDF, Double_t xmin = 1, Double_t xmax = 0); Templated constructor for using only with 1-sample tests with a user specified distribution. Instantiate(const Double_t* sample, UInt_t sampleSize). GoFTest(UInt_t sampleSize, const Double_t* sample, const ROOT::Math::IGenFunction& dist, ROOT::Math::GoFTest::EUserDistribution userDist = kPDF, Double_t xmin = 1, Double_t xmax = 0); Specialization using IGenFunction interface. SetUserDistribution(const ROOT::Math::IGenFunction& dist, ROOT::Math::GoFTest::EUserDistribution userDist = kPDF, Double_t xmin = 1, Double_t xmax = 0). SetDistributionFunction(const ROOT::Math::IGenFunction& cdf, Bool_t isPDF, Double_t xmin, Double_t xmax). void SetUserPDF(const ROOT::Math::IGenFunction& pdf, Double_t xmin = 1, Double_t xmax = 0); Sets the user input distribution as a probability density function for 1-sample tests. void SetUserCDF(const ROOT::Math::IGenFunction& cdf, Double_t xmin = 1, Double_t xmax = 0); Sets the user input distribution as a cumulative distribution function for 1-sample tests; The CDF must return zero. void SetDistribution(ROOT::Math::GoFTest::EDistribution dist); Sets the distribution for the predefined distribution types. virtual ~GoFTest(). Double_t AndersonDarling2SamplesTest(const Char_t* option = ""p"") const. The Anderson-Darling K-Sample Test algorithm is described and taken from; http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/andeksam.htm; and described and taken from (1); Scholz F.W., Stephens M.A. (1987), K-sample Anderson-Darling Tests, Journal of the American Statistical Association, 82, 918–924. (2-samples variant implemented); */ void AndersonDarling2SamplesTest(Double_t& pvalue, Double_t& testStat) const;. Double_t AndersonDarlingTest(const Char_t* option = ""p"") const. The Anderson-Darling 1-Sample Test algorithm for a specific distribution is described at; http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/andedarl.htm; and describe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__GoFTest.html:4740,test,tests,4740,root/html528/ROOT__Math__GoFTest.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__GoFTest.html,3,['test'],['tests']
Testability,"FTest::EUserDistribution userDist = kPDF, Double_t xmin = 1, Double_t xmax = 0); Templated constructor for using only with 1-sample tests with a user specified distribution. Instantiate(const Double_t* sample, UInt_t sampleSize). GoFTest(UInt_t sampleSize, const Double_t* sample, const ROOT::Math::IGenFunction& dist, ROOT::Math::GoFTest::EUserDistribution userDist = kPDF, Double_t xmin = 1, Double_t xmax = 0); Specialization using IGenFunction interface. SetUserDistribution(const ROOT::Math::IGenFunction& dist, ROOT::Math::GoFTest::EUserDistribution userDist = kPDF, Double_t xmin = 1, Double_t xmax = 0). SetDistributionFunction(const ROOT::Math::IGenFunction& cdf, Bool_t isPDF, Double_t xmin, Double_t xmax). void SetUserPDF(const ROOT::Math::IGenFunction& pdf, Double_t xmin = 1, Double_t xmax = 0); Sets the user input distribution as a probability density function for 1-sample tests. void SetUserCDF(const ROOT::Math::IGenFunction& cdf, Double_t xmin = 1, Double_t xmax = 0); Sets the user input distribution as a cumulative distribution function for 1-sample tests; The CDF must return zero. void SetDistribution(ROOT::Math::GoFTest::EDistribution dist); Sets the distribution for the predefined distribution types. virtual ~GoFTest(). Double_t AndersonDarling2SamplesTest(const Char_t* option = ""p"") const. The Anderson-Darling K-Sample Test algorithm is described and taken from; http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/andeksam.htm; and described and taken from; (1) Scholz F.W., Stephens M.A. (1987), K-sample Anderson-Darling Tests, Journal of the American Statistical Association, 82, 918–924. (2-samples variant implemented); */ void AndersonDarling2SamplesTest(Double_t& pvalue, Double_t& testStat) const;. Double_t AndersonDarlingTest(const Char_t* option = ""p"") const. The Anderson-Darling 1-Sample Test algorithm for a specific distribution is described at; http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/andedarl.htm; and describe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__GoFTest.html:4923,test,tests,4923,root/html534/ROOT__Math__GoFTest.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__GoFTest.html,3,['test'],['tests']
Testability,"Factory.h. ◆ CreateDataSet(). TMVA::DataSet * TMVA::DataSetFactory::CreateDataSet ; (; TMVA::DataSetInfo & ; dsi, . TMVA::DataInputHandler & ; dataInput . ). steering the creation of a new dataset ; Definition at line 123 of file DataSetFactory.cxx. ◆ DeclFileName(). static const char * TMVA::DataSetFactory::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 238 of file DataSetFactory.h. ◆ InitOptions(). void TMVA::DataSetFactory::InitOptions ; (; TMVA::DataSetInfo & ; dsi, . EvtStatsPerClass & ; eventsmap, . TString & ; normMode, . UInt_t & ; splitSeed, . TString & ; splitMode, . TString & ; mixMode . ). protected . the dataset splitting ; Definition at line 638 of file DataSetFactory.cxx. ◆ IsA(). virtual TClass * TMVA::DataSetFactory::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 238 of file DataSetFactory.h. ◆ Log(). MsgLogger & TMVA::DataSetFactory::Log ; (; ); const. inlineprotected . Definition at line 236 of file DataSetFactory.h. ◆ MixEvents(). TMVA::DataSet * TMVA::DataSetFactory::MixEvents ; (; DataSetInfo & ; dsi, . EventVectorOfClassesOfTreeType & ; eventsmap, . EvtStatsPerClass & ; eventCounts, . const TString & ; splitMode, . const TString & ; mixMode, . const TString & ; normMode, . UInt_t ; splitSeed . ). protected . Select and distribute unassigned events to kTraining and kTesting. ; Definition at line 1063 of file DataSetFactory.cxx. ◆ RenormEvents(). void TMVA::DataSetFactory::RenormEvents ; (; TMVA::DataSetInfo & ; dsi, . EventVectorOfClassesOfTreeType & ; tmpEventVector, . const EvtStatsPerClass & ; eventCounts, . const TString & ; normMode . ). protected . renormalisation of the TRAINING event weights . none (kind of obvious) .. use the weights as supplied by the user.. (we store however the relative weight for later use); numEvents; equalNumEvents reweight the training events such that the sum of all bac",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DataSetFactory.html:19444,Log,Log,19444,doc/master/classTMVA_1_1DataSetFactory.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataSetFactory.html,1,['Log'],['Log']
Testability,"Factory::fCorrelations. private . ! enable to calculate correlations ; Definition at line 215 of file Factory.h. ◆ fDefaultTrfs. std::vector<TMVA::VariableTransformBase*> TMVA::Factory::fDefaultTrfs. private . ! list of transformations on default DataSet ; Definition at line 208 of file Factory.h. ◆ fgTargetFile. TFile* TMVA::Factory::fgTargetFile. private . ! ROOT output file ; Definition at line 205 of file Factory.h. ◆ fJobName. TString TMVA::Factory::fJobName. private . ! jobname, used as extension in weight file names ; Definition at line 219 of file Factory.h. ◆ fMethodsMap. std::map<TString,MVector*> TMVA::Factory::fMethodsMap. Definition at line 85 of file Factory.h. ◆ fModelPersistence. Bool_t TMVA::Factory::fModelPersistence. private . ! option to save the trained model in xml file or using serialization ; Definition at line 222 of file Factory.h. ◆ fOptions. TString TMVA::Factory::fOptions. private . ! option string given by construction (presently only ""V"") ; Definition at line 211 of file Factory.h. ◆ fROC. Bool_t TMVA::Factory::fROC. private . ! enable to calculate ROC values ; Definition at line 216 of file Factory.h. ◆ fSilentFile. Bool_t TMVA::Factory::fSilentFile. private . ! used in constructor without file ; Definition at line 217 of file Factory.h. ◆ fTransformations. TString TMVA::Factory::fTransformations. private . ! list of transformations to test ; Definition at line 212 of file Factory.h. ◆ fVerbose. Bool_t TMVA::Factory::fVerbose. private . ! verbose mode ; Definition at line 213 of file Factory.h. ◆ fVerboseLevel. TString TMVA::Factory::fVerboseLevel. private . ! verbosity level, controls granularity of logging ; Definition at line 214 of file Factory.h. Libraries for TMVA::Factory:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/Factory.h; tmva/tmva/src/Factory.cxx. TMVAFactory. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Factory.html:37464,test,test,37464,doc/master/classTMVA_1_1Factory.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html,2,"['log', 'test']","['logging', 'test']"
Testability,"Factory;  CTPostScriptInterface to PostScript ;  CTPRegexp;  CTPrimaryOld version of a dynamic particle class created by event generators ;  CTPrincipalPrincipal Components Analysis (PCA) ;  CTProcessEventTimer;  CTProcessIDA TProcessID identifies a ROOT job in a unique way in time and space ;  CTProcessUUIDThis class is a specialized TProcessID managing the list of UUIDs ;  CTProfileProfile Histogram ;  CTProfile2DProfile2D histograms are used to display the mean value of Z and its RMS for each cell in X,Y ;  CTProfile2Poly;  CTProfile2PolyBin;  CTProfile3DProfile3D histograms are used to display the mean value of T and its RMS for each cell in X,Y,Z ;  CTProfileHelper;  ►CTProofThis class controls a Parallel ROOT Facility, PROOF, cluster ;  CMD5Mod_t;  CTProofBenchSteering class for PROOF benchmarks ;  CTProofBenchDataSetHandle operations on datasets used by ProofBench ;  CTProofBenchRunAbstract base class for PROOF benchmark runs ;  CTProofBenchRunCPUCPU-intensive PROOF benchmark test generates events and fill 1, 2, or 3-D histograms ;  CTProofBenchRunDataReadI/O-intensive PROOF benchmark test reads in event files distributed on the cluster ;  CTProofChain;  CTProofCondor;  CTProofDebug;  CTProofDesc;  CTProofDrawImplement Tree drawing using PROOF ;  CTProofDrawEntryList;  CTProofDrawEventList;  CTProofDrawGraph;  CTProofDrawHist;  ►CTProofDrawListOfGraphs;  CPoint3D_t;  ►CTProofDrawListOfPolyMarkers3D;  CPoint4D_t;  CTProofDrawPolyMarker3D;  CTProofDrawProfile;  CTProofDrawProfile2D;  CTProofInputHandler;  CTProofInterruptHandler;  CTProofLimitsFinderClass to find axis limits and synchronize them between workers ;  CTProofLiteThis class starts a PROOF session on the local machine: no daemons, client and master merged, communications via UNIX-like sockets ;  CTProofLockPath;  CTProofLockPathGuard;  CTProofLogImplementation of the PROOF session log handler ;  CTProofLogElem;  CTProofMergePrg;  CTProofMgrThe PROOF manager interacts with the PROOF server coordinator ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/annotated.html:186498,test,test,186498,doc/v610/annotated.html,https://root.cern,https://root.cern/doc/v610/annotated.html,1,['test'],['test']
Testability,"File Header.Definition TFile.cxx:2615; TFile::kRecovered@ kRecoveredDefinition TFile.h:191; TFile::kReproducible@ kReproducibleDefinition TFile.h:197; TFile::kDevNull@ kDevNullDefinition TFile.h:193; TFile::kHasReferences@ kHasReferencesDefinition TFile.h:192; TFile::k630forwardCompatibility@ k630forwardCompatibilityDefinition TFile.h:190; TFile::kWriteError@ kWriteErrorDefinition TFile.h:194; TFile::kBinaryFile@ kBinaryFileDefinition TFile.h:195; TFile::OpenFromCachestatic TFile * OpenFromCache(const char *name, Option_t *="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Open a file for reading through the file cache.Definition TFile.cxx:3874; TFile::fNProcessIDsInt_t fNProcessIDsNumber of TProcessID written to this file.Definition TFile.h:88; TFile::fWrittenInt_t fWrittenNumber of objects written so far.Definition TFile.h:87; TFile::GetRecordHeaderInt_t GetRecordHeader(char *buf, Long64_t first, Int_t maxbytes, Int_t &nbytes, Int_t &objlen, Int_t &keylen)Read the logical record header starting at a certain postion.Definition TFile.cxx:1301; TFile::ReadBuffervirtual Bool_t ReadBuffer(char *buf, Int_t len)Read a buffer from the file.Definition TFile.cxx:1770; TFile::GetCompressionFactorFloat_t GetCompressionFactor()Return the file compression factor.Definition TFile.cxx:1202; TFile::SysWritevirtual Int_t SysWrite(Int_t fd, const void *buf, Int_t len)Interface to system write. All arguments like in POSIX write().Definition TFile.cxx:4514; TFile::GetFileReadCallsstatic Int_t GetFileReadCalls()Static function returning the total number of read calls from all files.Definition TFile.cxx:4591; TFile::GetCacheReadTFileCacheRead * GetCacheRead(const TObject *tree=nullptr) constReturn a pointer to the current read cache.Definition TFile.cxx:1262; TFile::GetOptionOption_t * GetOption() const overrideDefinition TFile.h:240; TFile::fgAsyncOpenRequestsstatic TList * fgAsyncOpenRequestsDefinition TFile.h:122; TFre",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFile_8cxx_source.html:230519,log,logical,230519,doc/master/TFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFile_8cxx_source.html,1,['log'],['logical']
Testability,"File() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidWriteStateToFile() const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); virtual voidGetHelpMessage() const; const TString&TMVA::MethodBase::GetInternalVarName(Int_t ivar) const; const TString&TMVA::MethodBase::GetOriginalVarName(Int_t ivar) const; const TString&TMVA::Configurable::GetReferenceFile() const; static TMVA::MethodBase*TMVA::MethodBase::GetThisBase(); Float_tTMVA::MethodBase::GetTWeight(const TMVA::Event* ev) const; const TString&TMVA::MethodBase::GetWeightFileDir() const; Bool_tTMVA::MethodBase::HasTrainingTree() const; Bool_tTMVA::MethodBase::Help() const; Bool_tTMVA::MethodBase::IgnoreEventsWithNegWeightsInTraining() const; Bool_tTMVA::MethodBase::IsConstructedFromWeightFile() const; Bool_tTMVA::MethodBase::IsNormalised() const; TMVA::MsgLogger&TMVA::Configurable::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; virtual voidMakeClassSpecific(ostream&, const TString&) const; virtual voidTMVA::MethodBase::MakeClassSpecificHeader(ostream&, const TString& = """") const; voidTObject::MakeZombie(); voidTMVA::MethodBase::NoErrorCalc(Double_t *const err, Double_t *const errUpper); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. Double_tAdaBoost(TMVA::MethodBase*); Double_tBagging(UInt_t imember); vector<Double_t>&GetBoostWeights(); vector<IMethod*>&GetCommi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodCommittee.html:13973,Log,Log,13973,root/html528/TMVA__MethodCommittee.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodCommittee.html,3,['Log'],['Log']
Testability,"File::SetBufferSize(Int_t bufsize); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTDirectoryFile::SetModified(); virtual voidTDirectory::SetMother(TObject* mother); virtual voidTDirectory::SetName(const char* newname); virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTDirectoryFile::SetSeekDir(Long64_t v); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTDirectoryFile::SetTRefAction(TObject* ref, TObject* parent); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTDirectoryFile::SetWritable(Bool_t writable = kTRUE); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTDirectoryFile::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTDirectoryFile::Write(const char* name = 0, Int_t opt = 0, Int_t bufsize = 0); virtual Int_tTDirectoryFile::Write(const char* name = 0, Int_t opt = 0, Int_t bufsize = 0) const; virtual voidTDirectoryFile::WriteDirHeader(); virtual voidTDirectoryFile::WriteKeys(); virtual Int_tTDirectoryFile::WriteObjectAny(const void* obj, const char* classname, const char* name, Option_t* option = """", Int_t bufsize = 0); virtual Int_tTDirectoryFile::WriteObjectAny(const void* obj, const TClass* cl, const char* name, Option_t* option = """", Int_t bufsize = 0); virtual Int_tTDirectoryFile::WriteTObject(const TObject* obj, const char* name = 0, Option_t* option = """", Int_t bufsize = 0); RooWorkspace::WSDirWSDir(const RooWorkspace::WSDir&); RooWorkspace::WSDirWSDir(const char* name, const char* title, RooWorkspace* wspace).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooWorkspace__WSDir.html:9465,Test,TestBits,9465,root/html602/RooWorkspace__WSDir.html,https://root.cern,https://root.cern/root/html602/RooWorkspace__WSDir.html,2,['Test'],['TestBits']
Testability,"File;  CTSapDBResult;  CTSapDBRow;  CTSapDBServer;  CTSAXParserTSAXParser is a subclass of TXMLParser, it is a wraper class to libxml library ;  CTSecContext;  CTSecContextCleanup;  CTSelectorA TSelector object is used by the TTree::Draw, TTree::Scan, TTree::Process to navigate in a TTree and make selections ;  CTSelectorCintThis class is a special version of TSelector for user interpreted classes ;  CTSelectorDrawA specialized TSelector for TTree::Draw ;  CTSelectorEntriesThe class is derived from the ROOT class TSelector ;  CTSelectorListA TList derived class that makes sure that objects added to it are not linked to the currently open file (like histograms, eventlists and trees) ;  CTSelectorScalarNamed scalar type, based on Long64_t, streamable, storable and mergable ;  CTSelEventSelector for PROOF I/O benchmark test ;  CTSelEventGenSelector for event file generation ;  CTSelHandleDataSetPROOF selector for file cache release ;  CTSelHistPROOF selector for CPU-intensive benchmark test ;  CTSelVerifyDataSetSelector to verify dataset in parallel on workers ;  CTSemaphore;  CTSeqCollectionSequenceable collection abstract base class ;  CTServerSocket;  CTSessionDescription;  CTSessionFrame;  CTSessionInputFrame;  CTSessionLogView;  CTSessionOutputFrame;  CTSessionQueryFrame;  CTSessionServerFrame;  CTSessionViewer;  CTShapeThis is the base class for all geometry shapes ;  CTShutdownTimer;  CTSignalHandler;  CTSimpleAnalysisA TSimpleAnalysis object creates histograms from a TChain ;  CTSlaveClass describing a PROOF worker server ;  CTSlaveInfo;  CTSlaveLiteVersion of TSlave for local worker servers ;  CTSliderA specialized TPad including a TSliderBox object ;  CTSliderBoxThe moving box in a TSlider ;  CTSocket;  CTSortedListA sorted doubly linked list ;  CTSpectrumAdvanced Spectra Processing ;  CTSpectrum2Advanced 2-dimensional spectra processing ;  CTSpectrum2FitAdvanced 2-dimensional spectra fitting functions ;  CTSpectrum2PainterTwo-dimensional graphics function ;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:185694,test,test,185694,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,2,['test'],['test']
Testability,"FileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidSetXminXmax(TMVA::PDEFoam*); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. virtual voidDeclareCompatibilityOptions(); virtual voidDeclareOptions(); virtual voidInit(); voidPrintCoefficients(); virtual voidProcessOptions(). Data Members; public:. enum TMVA::MethodBase::EWeightFileType { kROOT; kTEXT; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. Bool_tTMVA::MethodBase::fSetupCompletedis method setup; const TMVA::Event*TMVA::MethodBase::fTmpEvent! temporary event when testing on a different DataSet than the own one. protected:. TMVA::Types::EAnalysisTypeTMVA::MethodBase::fAnalysisTypemethod-mode : true --> regression, false --> classification; UInt_tTMVA::MethodBase::fBackgroundClassindex of the Background-class; vector<TString>*TMVA::MethodBase::fInputVarsvector of input variables used in MVA; vector<Float_t>*TMVA::MethodBase::fMulticlassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase::fNbinsnumber of bins in representative histograms; Int_tTMVA::MethodBase::fNbinsHnumber of bins in evaluation histograms; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. Bool_tfCompresscompress foam output file; Bool_tfCutNminKeep for bw compatibility: Grabbing cell wit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodPDEFoam.html:14998,test,testing,14998,root/html528/TMVA__MethodPDEFoam.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodPDEFoam.html,1,['test'],['testing']
Testability,"FileName ();  ;  Static Public Member Functions inherited from TMVA::Results; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TMVA::IFitterTarget; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Member Functions; MsgLogger & Log () const;  . Private Attributes; std::vector< Float_t > fAchievableEff;  ; std::vector< Float_t > fAchievablePur;  ; std::vector< std::vector< Double_t > > fBestCuts;  ; std::vector< Float_t > fClassSumWeights;  ; UInt_t fClassToOptimize;  ; std::vector< UInt_t > fEventClasses;  ; std::vector< Float_t > fEventWeights;  ; MsgLogger * fLogger;  ! message logger ;  ; std::vector< std::vector< Float_t > > fMultiClassValues;  mva values (Results) ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1ResultsMulticlass.html:11829,Log,Log,11829,doc/master/classTMVA_1_1ResultsMulticlass.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ResultsMulticlass.html,1,['Log'],['Log']
Testability,"FileName(). static const char * TMVA::LogInterval::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 106 of file LogInterval.h. ◆ GetElement(). Double_t TMVA::LogInterval::GetElement ; (; Int_t ; bin); const. virtual . calculates the value of the ""number"" bin in a discrete interval. ; Parameters:; Double_t position . Reimplemented from TMVA::Interval.; Definition at line 113 of file LogInterval.cxx. ◆ GetMax(). virtual Double_t TMVA::LogInterval::GetMax ; (; ); const. inlinevirtual . Reimplemented from TMVA::Interval.; Definition at line 93 of file LogInterval.h. ◆ GetMean(). Double_t TMVA::LogInterval::GetMean ; (; ); const. virtual . Reimplemented from TMVA::Interval.; Definition at line 158 of file LogInterval.cxx. ◆ GetMin(). virtual Double_t TMVA::LogInterval::GetMin ; (; ); const. inlinevirtual . Reimplemented from TMVA::Interval.; Definition at line 92 of file LogInterval.h. ◆ GetNbins(). virtual Int_t TMVA::LogInterval::GetNbins ; (; ); const. inlinevirtual . Reimplemented from TMVA::Interval.; Definition at line 95 of file LogInterval.h. ◆ GetRndm(). Double_t TMVA::LogInterval::GetRndm ; (; TRandom3 & ; rnd); const. virtual . get uniformly distributed number within interval ; Reimplemented from TMVA::Interval.; Definition at line 144 of file LogInterval.cxx. ◆ GetStepSize(). Double_t TMVA::LogInterval::GetStepSize ; (; Int_t ; iBin = 0); const. virtual . returns the step size between the numbers of a ""discrete LogInterval"" ; Reimplemented from TMVA::Interval.; Definition at line 129 of file LogInterval.cxx. ◆ GetWidth(). Double_t TMVA::LogInterval::GetWidth ; (; ); const. virtual . Reimplemented from TMVA::Interval.; Definition at line 151 of file LogInterval.cxx. ◆ IsA(). virtual TClass * TMVA::LogInterval::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TMVA::Interval.; Definition at line 106 of file LogInterval.h. ◆ Log(). TMVA::MsgLogger & TMVA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1LogInterval.html:5320,Log,LogInterval,5320,doc/master/classTMVA_1_1LogInterval.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1LogInterval.html,1,['Log'],['LogInterval']
Testability,"Fill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; TH1*TF1::GetHistogram() const; virtual const char*TObject::GetIconName() const; virtual const TObject*TFormula::GetLinearPart(Int_t i); virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual Color_tTAttMarker::GetMarkerColor() const; virtual Size_tTAttMarker::GetMarkerSize() const; virtual Style_tTAttMarker::GetMarkerStyle() const; virtual Double_tTF1::GetMaximum(Double_t xmin = 0, Double_t xmax = 0, Double_t epsilon = 1.E-10, Int_t maxiter = 100, Bool_t logx = false) const; virtual Double_tTF1::GetMaximumX(Double_t xmin = 0, Double_t xmax = 0, Double_t epsilon = 1.E-10, Int_t maxiter = 100, Bool_t logx = false) const; TMethodCall*TF1::GetMethodCall() const; virtual Double_tTF1::GetMinimum(Double_t xmin = 0, Double_t xmax = 0, Double_t epsilon = 1.E-10, Int_t maxiter = 100, Bool_t logx = false) const; virtual Double_tTF1::GetMinimumX(Double_t xmin = 0, Double_t xmax = 0, Double_t epsilon = 1.E-10, Int_t maxiter = 100, Bool_t logx = false) const; virtual const char*TNamed::GetName() const; virtual Int_tTF1::GetNDF() const; virtual Int_tTFormula::GetNdim() const; virtual Int_tTFormula::GetNpar() const; virtual Int_tTF1::GetNpx() const; virtual Int_tTFormula::GetNumber() const; virtual Int_tTF1::GetNumberFitPoints() const; virtual Int_tTF1::GetNumberFreeParameters() const; virtual char*TF1::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Double_tTFormula::GetParameter(Int_t ipar) const; Double_tTFormula::GetParameter(const char* name) const; virtual Double_t*TFormula::GetParameters() const; virtual voidTFormula::GetParameters(Double_t* params); TObject*TF1::GetParent() const; virtual Double_tTF1::GetParError(Int_t ipar) const; virtual Double_t*TF1::GetParErrors() const; virtual voidTF1::GetParLimits(Int_t ipar, Double_t& parmin,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TF12.html:4850,log,logx,4850,root/html530/TF12.html,https://root.cern,https://root.cern/root/html530/TF12.html,2,['log'],['logx']
Testability,"Fill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; TH1*TF1::GetHistogram() const; virtual const char*TObject::GetIconName() const; virtual const TObject*TFormula::GetLinearPart(Int_t i); virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual Color_tTAttMarker::GetMarkerColor() const; virtual Size_tTAttMarker::GetMarkerSize() const; virtual Style_tTAttMarker::GetMarkerStyle() const; virtual Double_tTF1::GetMaximum(Double_t xmin = 0, Double_t xmax = 0, Double_t epsilon = 1.E-10, Int_t maxiter = 100, Bool_t logx = false) const; virtual Double_tTF1::GetMaximumX(Double_t xmin = 0, Double_t xmax = 0, Double_t epsilon = 1.E-10, Int_t maxiter = 100, Bool_t logx = false) const; TMethodCall*TF1::GetMethodCall() const; virtual Double_tTF1::GetMinimum(Double_t xmin = 0, Double_t xmax = 0, Double_t epsilon = 1.E-10, Int_t maxiter = 100, Bool_t logx = false) const; virtual Double_tTF1::GetMinimumX(Double_t xmin = 0, Double_t xmax = 0, Double_t epsilon = 1.E-10, Int_t maxiter = 100, Bool_t logx = false) const; virtual voidGetMinimumXY(Double_t& x, Double_t& y); virtual const char*TNamed::GetName() const; virtual Int_tTF1::GetNDF() const; virtual Int_tTFormula::GetNdim() const; virtual Int_tTFormula::GetNpar() const; virtual Int_tTF1::GetNpx() const; Int_tGetNpy() const; virtual Int_tTFormula::GetNumber() const; virtual Int_tTF1::GetNumberFitPoints() const; virtual Int_tTF1::GetNumberFreeParameters() const; virtual char*GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Double_tTFormula::GetParameter(Int_t ipar) const; Double_tTFormula::GetParameter(const char* name) const; virtual Double_t*TFormula::GetParameters() const; virtual voidTFormula::GetParameters(Double_t* params); TObject*TF1::GetParent() const; virtual Double_tTF1::GetParError(Int_t ipar) const; virtual Double_t*TF1::GetParErrors(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TF2.html:5955,log,logx,5955,root/html530/TF2.html,https://root.cern,https://root.cern/root/html530/TF2.html,2,['log'],['logx']
Testability,"Fill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; TH1*TF1::GetHistogram() const; virtual const char*TObject::GetIconName() const; virtual const TObject*TFormula::GetLinearPart(Int_t i); virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual Color_tTAttMarker::GetMarkerColor() const; virtual Size_tTAttMarker::GetMarkerSize() const; virtual Style_tTAttMarker::GetMarkerStyle() const; virtual Double_tTF1::GetMaximum(Double_t xmin = 0, Double_t xmax = 0, Double_t epsilon = 1.E-10, Int_t maxiter = 100, Bool_t logx = false) const; virtual Double_tTF1::GetMaximumX(Double_t xmin = 0, Double_t xmax = 0, Double_t epsilon = 1.E-10, Int_t maxiter = 100, Bool_t logx = false) const; TMethodCall*TF1::GetMethodCall() const; virtual Double_tTF1::GetMinimum(Double_t xmin = 0, Double_t xmax = 0, Double_t epsilon = 1.E-10, Int_t maxiter = 100, Bool_t logx = false) const; virtual Double_tTF1::GetMinimumX(Double_t xmin = 0, Double_t xmax = 0, Double_t epsilon = 1.E-10, Int_t maxiter = 100, Bool_t logx = false) const; virtual voidTF2::GetMinimumXY(Double_t& x, Double_t& y); virtual voidGetMinimumXYZ(Double_t& x, Double_t& y, Double_t& z); virtual const char*TNamed::GetName() const; virtual Int_tTF1::GetNDF() const; virtual Int_tTFormula::GetNdim() const; virtual Int_tTFormula::GetNpar() const; virtual Int_tTF1::GetNpx() const; Int_tTF2::GetNpy() const; Int_tGetNpz() const; virtual Int_tTFormula::GetNumber() const; virtual Int_tTF1::GetNumberFitPoints() const; virtual Int_tTF1::GetNumberFreeParameters() const; virtual char*TF2::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Double_tTFormula::GetParameter(Int_t ipar) const; Double_tTFormula::GetParameter(const char* name) const; virtual Double_t*TFormula::GetParameters() const; virtual voidTFormula::GetParameters(Double_t* params); TObject*TF1::GetP",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TF3.html:6546,log,logx,6546,root/html530/TF3.html,https://root.cern,https://root.cern/root/html530/TF3.html,2,['log'],['logx']
Testability,"FillGraph(TGraphAsymmErrors* graph, Option_t* opt) const; Fill the graph to be painted with information from TEfficiency; Internal metyhod called by TEfficiency::Paint or TEfficiency::CreateGraph. TH2 * CreateHistogram(Option_t* opt = """") const; Create the histogram used to be painted (for dim=2 TEfficiency); The return object is managed by the caller. void FillHistogram(TH2* h2) const; Fill the 2d histogram to be painted with information from TEfficiency 2D; Internal metyhod called by TEfficiency::Paint or TEfficiency::CreatePaintingGraph. Double_t ClopperPearson(Int_t total, Int_t passed, Double_t level, Bool_t bUpper); calculates the boundaries for the frequentist Clopper-Pearson interval. This interval is recommended by the PDG. Input: - total : number of total events; - passed: 0 <= number of passed events <= total; - level : confidence level; - bUpper: true - upper boundary is returned; false - lower boundary is returned. calculation:. The lower boundary of the Clopper-Pearson interval is the ""exact"" inversion; of the test:. The lower boundary is therfore given by the quantile; of the beta distribution. The upper boundary of the Clopper-Pearson interval is the ""exact"" inversion; of the test:. The upper boundary is therfore given by the quantile; of the beta distribution. Note: The connection between the binomial distribution and the regularized; incomplete beta function has been used. Double_t Combine(Double_t& up, Double_t& low, Int_t n, const Int_t* pass, const Int_t* total, Double_t alpha, Double_t beta, Double_t level = 0.683, const Double_t* w = 0, Option_t* opt = """"); calculates the combined efficiency and its uncertainties. This method does a bayesian combination of the given samples. Input:; - up : contains the upper limit of the confidence interval afterwards; - low : contains the lower limit of the confidence interval afterwards; - n : number of samples which are combined; - pass : array of length n containing the number of passed events; - total : ar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEfficiency.html:49558,test,test,49558,root/html534/TEfficiency.html,https://root.cern,https://root.cern/root/html534/TEfficiency.html,1,['test'],['test']
Testability,"FillGraph(TGraphAsymmErrors* graph, Option_t* opt) const; Fill the graph to be painted with information from TEfficiency; Internal metyhod called by TEfficiency::Paint or TEfficiency::CreateGraph. TH2 * CreateHistogram(Option_t* opt = """") const; Create the histogram used to be painted (for dim=2 TEfficiency); The return object is managed by the caller. void FillHistogram(TH2* h2) const; Fill the 2d histogram to be painted with information from TEfficiency 2D; Internal metyhod called by TEfficiency::Paint or TEfficiency::CreatePaintingGraph. Double_t ClopperPearson(Int_t total, Int_t passed, Double_t level, Bool_t bUpper); calculates the boundaries for the frequentist Clopper-Pearson interval. This interval is recommended by the PDG. Input: - total : number of total events; - passed: 0 <= number of passed events <= total; - level : confidence level; - bUpper: true - upper boundary is returned; false - lower boundary is returned. calculation:. The lower boundary of the Clopper-Pearson interval is the ""exact"" inversion; of the test:. The lower boundary is therfore given by the quantile; of the beta distribution. The upper boundary of the Clopper-Pearson interval is the ""exact"" inversion; of the test:. The upper boundary is therfore given by the quantile; of the beta distribution. Note: The connection between the binomial distribution and the regularized; incomplete beta function has been used. Double_t Combine(Double_t& up, Double_t& low, Int_t n, const Int_t* pass, const Int_t* total, Double_t alpha, Double_t beta, Double_t level = 0.68300000000000005, const Double_t* w = 0, Option_t* opt = """"); calculates the combined efficiency and its uncertainties. This method does a bayesian combination of the given samples. Input:; - up : contains the upper limit of the confidence interval afterwards; - low : contains the lower limit of the confidence interval afterwards; - n : number of samples which are combined; - pass : array of length n containing the number of passed events",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEfficiency.html:50420,test,test,50420,root/html602/TEfficiency.html,https://root.cern,https://root.cern/root/html602/TEfficiency.html,2,['test'],['test']
Testability,"First the background is removed (if desired), then Markov smoothed spectrum is calculated (if desired), then the response function is generated according to given sigma and deconvolution is carried out. The order of peaks is arranged according to their heights in the spectrum after background elimination. The highest peak is the first in the list. On success it returns number of found peaks.; Parameters:. source: pointer to the vector of source spectrum.; destVector: pointer to the vector of resulting deconvolved spectrum.; ssize: length of source spectrum.; sigma: sigma of searched peaks, for details we refer to manual.; threshold: threshold value in % for selected peaks, peaks with amplitude less than threshold*highest_peak/100 are ignored, see manual.; backgroundRemove: logical variable, set if the removal of background before deconvolution is desired.; deconIterations-number of iterations in deconvolution operation.; markov: logical variable, if it is true, first the source spectrum is replaced by new spectrum calculated using Markov chains method.; averWindow: averaging window of searched peaks, for details we refer to manual (applies only for Markov method). Peaks searching:; The goal of this function is to identify automatically the peaks in spectrum with the presence of the continuous background and statistical fluctuations - noise.; The common problems connected with correct peak identification are:. non-sensitivity to noise, i.e., only statistically relevant peaks should be identified.; non-sensitivity of the algorithm to continuous background.; ability to identify peaks close to the edges of the spectrum region. Usually peak finders fail to detect them.; resolution, decomposition of Double_tts and multiplets. The algorithm should be able to recognise close positioned peaks.; ability to identify peaks with different sigma. Fig. 27 An example of one-dimensional synthetic spectrum with found peaks denoted by markers.; References:. M.A. Mariscotti: A method fo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum.html:57022,log,logical,57022,doc/master/classTSpectrum.html,https://root.cern,https://root.cern/doc/master/classTSpectrum.html,1,['log'],['logical']
Testability,"First, kFitTaylorOrderSecond. It applies only for Awmi fitting function. ;  ; Bool_t fFixA0;  logical value of a0 parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t * fFixAmp;  [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 2D peaks (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixAmpX1;  [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 1D ridges in x direction (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixAmpY1;  [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 1D ridges in y direction (not fit). However they are present in the estimated functional ;  ; Bool_t fFixAx;  logical value of ax parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixAy;  logical value of ay parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixBx;  logical value of b parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixBy;  logical value of b parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ;  ; Bool_t * fFixPositionX;  [fNPeaks] array of logical values which allow to fix appropriate x positions of 2D peaks (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixPositionX1;  [fNPeaks] array of logical values which allow to fix appropriate x positions of 1D ridges (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixPositionY;  [fNPeaks] array of logical values which allow to fix appropriate y positions of 2D peaks (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixPositionY1;  [fNPeaks] array of logical values which allow to fix appropriate y positions of 1D ridges (not fit). However they are present in the estimated functional ;  ; Bool_t fFixRo;  logical value of correlation coefficient, which al",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2Fit.html:26720,log,logical,26720,doc/master/classTSpectrum2Fit.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html,1,['log'],['logical']
Testability,"FirstLayerCollection of the input neurons; subset of fNetwork; Double_tfLastAlpha! internal parameter used in line search; TObjArrayfLastLayerCollection of the output neurons; subset of fNetwork; TMultiLayerPerceptron::ELearningMethodfLearningMethod! The Learning Method; TTreeFormulaManager*fManager! TTreeFormulaManager for the weight and neurons; TObjArrayfNetworkCollection of all the neurons in the network; TNeuron::ENeuronTypefOutTypeType of output neurons; Int_tfReset! number of epochs between two resets of the search direction to the steepest descent - Default=50; TStringfStructureString containing the network structure; TObjArrayfSynapsesCollection of all the synapses in the network; Double_tfTau! Tau - used in line search - Default=3.; TEventList*fTest! EventList defining the events in the test dataset; Bool_tfTestOwner! internal flag whether one has to delete fTest or not; TEventList*fTraining! EventList defining the events in the training dataset; Bool_tfTrainingOwner! internal flag whether one has to delete fTraining or not; TNeuron::ENeuronTypefTypeType of hidden neurons; TStringfWeightString containing the event weight; TStringfextDString containing the derivative name; TStringfextFString containing the function name. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TMultiLayerPerceptron(); Default constructor. TMultiLayerPerceptron(const char* layout, TTree* data, TEventList* training, TEventList* test, TNeuron::ENeuronType type = TNeuron::kSigmoid, const char* extF = """", const char* extD = """"); The network is described by a simple string:; The input/output layers are defined by giving; the branch names separated by comas.; Hidden layers are just described by the number of neurons.; The layers are separated by colons.; Ex: ""x,y:10:5:f""; The output can be prepended by '@' if the variable has to be; normalized.; The output can be followed by '!' to use Softmax neurons for the; output layer only.; Ex: ""x,y:10:5:c1,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMultiLayerPerceptron.html:18223,test,test,18223,root/html528/TMultiLayerPerceptron.html,https://root.cern,https://root.cern/root/html528/TMultiLayerPerceptron.html,6,['test'],['test']
Testability,Fisher_fold2; : ; <HEADER> Fisher_fold2 : Results for Fisher coefficients:; : -----------------------; : Variable: Coefficient:; : -----------------------; : x: +0.501; : y: +0.467; : (offset): -0.000; : -----------------------; : Elapsed time for training with 998 events: 0.000263 sec ; <HEADER> Fisher_fold2 : [datasetcv] : Evaluation of Fisher_fold2 on training sample (998 events); : Elapsed time for evaluation of 998 events: 7.08e-05 sec ; : Creating xml weight file: datasetcv/weights/TMVACrossValidation_Fisher_fold2.weights.xml; : Creating standalone class: datasetcv/weights/TMVACrossValidation_Fisher_fold2.class.C; <HEADER> Factory : Test all methods; <HEADER> Factory : Test method: Fisher_fold2 for Classification performance; : ; <HEADER> Fisher_fold2 : [datasetcv] : Evaluation of Fisher_fold2 on testing sample (1000 events); : Elapsed time for evaluation of 1000 events: 8.2e-05 sec ; <HEADER> Factory : Evaluate all methods; <HEADER> Factory : Evaluate classifier: Fisher_fold2; : ; <HEADER> Fisher_fold2 : [datasetcv] : Loop over test events and fill histograms with classifier response...; : ; : ; : Evaluation results ranked by best signal efficiency and purity (area); : -------------------------------------------------------------------------------------------------------------------; : DataSet MVA ; : Name: Method: ROC-integ; : datasetcv Fisher_fold2 : 0.966; : -------------------------------------------------------------------------------------------------------------------; : ; : Testing efficiency compared to training efficiency (overtraining check); : -------------------------------------------------------------------------------------------------------------------; : DataSet MVA Signal efficiency: from test sample (from training sample) ; : Name: Method: @B=0.01 @B=0.10 @B=0.30 ; : -------------------------------------------------------------------------------------------------------------------; : datasetcv Fisher_fold2 : 0.655 (0.645) 0.900 (0.928) 0.9,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVACrossValidation_8C.html:11937,test,test,11937,doc/master/TMVACrossValidation_8C.html,https://root.cern,https://root.cern/doc/master/TMVACrossValidation_8C.html,1,['test'],['test']
Testability,"Fit::LogLikelihoodFCN::LogLikelihoodFCNLogLikelihoodFCN(const UnBinData &data, const IModelFunction &func, int weight=0, bool extended=false, const ::ROOT::EExecutionPolicy &executionPolicy=::ROOT::EExecutionPolicy::kSequential)Constructor from unbin data set and model function (pdf) for object managed by users.Definition LogLikelihoodFCN.h:69; ROOT::Fit::LogLikelihoodFCN::Typevirtual BaseObjFunction::Type_t Type() constget type of fit method functionDefinition LogLikelihoodFCN.h:134; ROOT::Fit::LogLikelihoodFCN::operator=LogLikelihoodFCN & operator=(const LogLikelihoodFCN &rhs)Assignment operator.Definition LogLikelihoodFCN.h:99; ROOT::Fit::LogLikelihoodFCN::DoDerivativevirtual double DoDerivative(const double *x, unsigned int icoord) constDefinition LogLikelihoodFCN.h:161; ROOT::Fit::LogLikelihoodFCN::IModelFunction::ROOT::Math::IParamMultiFunctionTempl< T > IModelFunctionDefinition LogLikelihoodFCN.h:50; ROOT::Fit::LogLikelihoodFCN::fWeightint fWeightflag to indicate if needs to evaluate using weight or weight squared (default weight = 0)Definition LogLikelihoodFCN.h:169; ROOT::Fit::LogLikelihoodFCN::LogLikelihoodFCNLogLikelihoodFCN(const LogLikelihoodFCN &f)Copy constructor.Definition LogLikelihoodFCN.h:86; ROOT::Fit::LogLikelihoodFCN::BaseFCNBasicFCN< DerivFunType, ModelFunType, UnBinData > BaseFCNDefinition LogLikelihoodFCN.h:45; ROOT::Fit::LogLikelihoodFCN::TModelFunType::BackendType TDefinition LogLikelihoodFCN.h:44; ROOT::Fit::LogLikelihoodFCN::LogLikelihoodFCNLogLikelihoodFCN(const std::shared_ptr< UnBinData > &data, const std::shared_ptr< IModelFunction > &func, int weight=0, bool extended=false, const ::ROOT::EExecutionPolicy &executionPolicy=::ROOT::EExecutionPolicy::kSequential)Constructor from unbin data set and model function (pdf)Definition LogLikelihoodFCN.h:57; ROOT::Fit::LogLikelihoodFCN::UseSumOfWeightSquarevoid UseSumOfWeightSquare(bool on=true)Definition LogLikelihoodFCN.h:139; ROOT::Fit::LogLikelihoodFCN::Gradientvirtual void Gradient(const d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/LogLikelihoodFCN_8h_source.html:9405,Log,LogLikelihoodFCN,9405,doc/master/LogLikelihoodFCN_8h_source.html,https://root.cern,https://root.cern/doc/master/LogLikelihoodFCN_8h_source.html,2,['Log'],['LogLikelihoodFCN']
Testability,"FitMethodFunction< DerivFunType >inlinestatic; IsAGradFCN()ROOT::Math::BasicFitMethodFunction< DerivFunType >inline; kLeastSquare enum valueROOT::Math::BasicFitMethodFunction< DerivFunType >; kLogLikelihood enum valueROOT::Math::BasicFitMethodFunction< DerivFunType >; kPoissonLikelihood enum valueROOT::Math::BasicFitMethodFunction< DerivFunType >; kUndefined enum valueROOT::Math::BasicFitMethodFunction< DerivFunType >; LogLikelihoodFCN(const std::shared_ptr< UnBinData > &data, const std::shared_ptr< IModelFunction > &func, int weight=0, bool extended=false, const ::ROOT::EExecutionPolicy &executionPolicy=::ROOT::EExecutionPolicy::kSequential)ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >inline; LogLikelihoodFCN(const UnBinData &data, const IModelFunction &func, int weight=0, bool extended=false, const ::ROOT::EExecutionPolicy &executionPolicy=::ROOT::EExecutionPolicy::kSequential)ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >inline; LogLikelihoodFCN(const LogLikelihoodFCN &f)ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >inline; ModelFunction() constROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >inlinevirtual; ModelFunctionPtr() constROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >inline; NCalls() constROOT::Math::BasicFitMethodFunction< DerivFunType >inlinevirtual; NDim() const overrideROOT::Math::BasicFitMethodFunction< DerivFunType >inline; NFitPoints() constROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >inlinevirtual; NPoints() constROOT::Math::BasicFitMethodFunction< DerivFunType >inlinevirtual; operator=(const LogLikelihoodFCN &rhs)ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >inline; ResetNCalls()ROOT::Math::BasicFitMethodFunction< DerivFunType >inlinevirtual; SetData(const std::shared_ptr< DataType > &data)ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >inlineprotected; SetModelFunction(const std::shared_ptr< IModelFunction > &func)ROOT::Fit::BasicFCN< DerivFunType, ModelFu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN-members.html:3846,Log,LogLikelihoodFCN,3846,doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN-members.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN-members.html,1,['Log'],['LogLikelihoodFCN']
Testability,"FitMethodFunction< DerivFunType >inlinevirtual; Gradient(const double *x, double *g) constROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >inlinevirtual; HasHessian() constROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >inlinevirtual; Hessian(const double *x, double *hess) constROOT::Math::BasicFitMethodFunction< DerivFunType >inlinevirtual; IGradModelFunction typedefROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >protected; IModelFunction typedefROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >; IsAGradFCN()ROOT::Math::BasicFitMethodFunction< DerivFunType >inlinestatic; IsAGradFCN()ROOT::Math::BasicFitMethodFunction< DerivFunType >inline; kLeastSquare enum valueROOT::Math::BasicFitMethodFunction< DerivFunType >; kLogLikelihood enum valueROOT::Math::BasicFitMethodFunction< DerivFunType >; kPoissonLikelihood enum valueROOT::Math::BasicFitMethodFunction< DerivFunType >; kUndefined enum valueROOT::Math::BasicFitMethodFunction< DerivFunType >; LogLikelihoodFCN(const std::shared_ptr< UnBinData > &data, const std::shared_ptr< IModelFunction > &func, int weight=0, bool extended=false, const ::ROOT::EExecutionPolicy &executionPolicy=::ROOT::EExecutionPolicy::kSequential)ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >inline; LogLikelihoodFCN(const UnBinData &data, const IModelFunction &func, int weight=0, bool extended=false, const ::ROOT::EExecutionPolicy &executionPolicy=::ROOT::EExecutionPolicy::kSequential)ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >inline; LogLikelihoodFCN(const LogLikelihoodFCN &f)ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >inline; ModelFunction() constROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >inlinevirtual; ModelFunctionPtr() constROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >inline; NCalls() constROOT::Math::BasicFitMethodFunction< DerivFunType >inlinevirtual; NDim() const overrideROOT::Math::BasicFitMethodFunction< DerivFunType >inline; NFitPoints(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN-members.html:3277,Log,LogLikelihoodFCN,3277,doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN-members.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN-members.html,1,['Log'],['LogLikelihoodFCN']
Testability,Fitter.cxx;  FitUtil.cxx;  FitUtilParallel.cxx;  GaussIntegrator.cxx;  GaussLegendreIntegrator.cxx;  GenAlgoOptions.cxx;  GoFTest.cxx;  Integrator.cxx;  IntegratorOptions.cxx;  MersenneTwisterEngine.cxx;  MinimizerOptions.cxx;  MinimizerVariableTransformation.cxx;  MinimTransformFunction.cxx;  mixmax.h;  mixmax.icc;  mixmax_skip_N17.icc;  mixmax_skip_N240.icc;  mixmax_skip_N256.icc;  mixmax_skip_N256.oldS.icc;  MixMaxEngineImpl.h;  MixMaxEngineImpl17.cxx;  MixMaxEngineImpl240.cxx;  MixMaxEngineImpl256.cxx;  ParameterSettings.cxx;  PdfFuncMathCore.cxx;  ProbFuncMathCore.cxx;  QuantFuncMathCore.cxx;  RandomFunctions.cxx;  RichardsonDerivator.cxx;  RootFinder.cxx;  SparseData.cxx;  SpecFuncCephes.cxx;  SpecFuncCephes.h;  SpecFuncCephesInv.cxx;  SpecFuncMathCore.cxx;  StdEngine.cxx;  TComplex.cxx;  TKDTree.cxx;  TKDTreeBinning.cxx;  TMath.cxx;  TRandom.cxx;  TRandom1.cxx;  TRandom2.cxx;  TRandom3.cxx;  TRandomGen.cxx;  triangle.c;  triangle.h;  TStatistic.cxx;  UnBinData.cxx;  ► test;  ► fit;  GaussFunction.h;  MinimizerTypes.h;  SparseDataComparer.cxx;  SparseFit3.cxx;  SparseFit4.cxx;  testFit.cxx;  testFitPerf.cxx;  testGraphFit.cxx;  testMinim.cxx;  testRooFit.cxx;  WrapperRooPdf.h;  binarySearchTime.cxx;  kDTreeTest.cxx;  newKDTreeTest.cxx;  stdsort.cxx;  stressGoFTest.cxx;  stressTF1.cxx;  stressTMath.cxx;  testAnalyticalIntegrals.cxx;  testBinarySearch.cxx;  testDistSampler.cxx;  testIntegration.cxx;  testIntegrationMultiDim.cxx;  testKahan.cxx;  testkdTreeBinning.cxx;  testMathRandom.cxx;  testRootFinder.cxx;  testSampleQuantiles.cxx;  testSortOrder.cxx;  testSpecFuncBeta.cxx;  testSpecFuncBetaI.cxx;  testSpecFuncErf.cxx;  testSpecFuncGamma.cxx;  testSpecFuncSiCi.cxx;  testTMath.cxx;  testTStatistic.cxx;  ► v7;  ► inc;  ► ROOT;  TFit.hxx;  ► mathmore;  ► inc;  ► Math;  ChebyshevApprox.h;  Derivator.h;  DistFuncMathMore.h;  GSLFunctionAdapter.h;  GSLIntegrator.h;  GSLMCIntegrator.h;  GSLMinimizer.h;  GSLMinimizer1D.h;  GSLMultiRootFinder.h;  GSLNLSMinimizer.h;  GS,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/files.html:44694,test,test,44694,doc/v610/files.html,https://root.cern,https://root.cern/doc/v610/files.html,1,['test'],['test']
Testability,Fitter.cxx;  FitUtil.cxx;  FitUtilParallel.cxx;  GaussIntegrator.cxx;  GaussLegendreIntegrator.cxx;  GenAlgoOptions.cxx;  GoFTest.cxx;  Integrator.cxx;  IntegratorOptions.cxx;  MersenneTwisterEngine.cxx;  MinimizerOptions.cxx;  MinimizerVariableTransformation.cxx;  MinimTransformFunction.cxx;  mixmax.h;  mixmax.icc;  mixmax_skip_N17.icc;  mixmax_skip_N240.icc;  mixmax_skip_N256.icc;  mixmax_skip_N256.oldS.icc;  MixMaxEngineImpl.h;  MixMaxEngineImpl17.cxx;  MixMaxEngineImpl240.cxx;  MixMaxEngineImpl256.cxx;  ParameterSettings.cxx;  PdfFuncMathCore.cxx;  ProbFuncMathCore.cxx;  QuantFuncMathCore.cxx;  RandomFunctions.cxx;  RichardsonDerivator.cxx;  RootFinder.cxx;  SparseData.cxx;  SpecFuncCephes.cxx;  SpecFuncCephes.h;  SpecFuncCephesInv.cxx;  SpecFuncMathCore.cxx;  StdEngine.cxx;  TComplex.cxx;  TKDTree.cxx;  TKDTreeBinning.cxx;  TMath.cxx;  TRandom.cxx;  TRandom1.cxx;  TRandom2.cxx;  TRandom3.cxx;  TRandomGen.cxx;  triangle.c;  triangle.h;  TStatistic.cxx;  UnBinData.cxx;  ► test;  ► fit;  GaussFunction.h;  MinimizerTypes.h;  SparseDataComparer.cxx;  SparseFit3.cxx;  SparseFit4.cxx;  testFit.cxx;  testFitPerf.cxx;  testGraphFit.cxx;  testMinim.cxx;  testRooFit.cxx;  WrapperRooPdf.h;  binarySearchTime.cxx;  kDTreeTest.cxx;  newKDTreeTest.cxx;  stdsort.cxx;  stressGoFTest.cxx;  stressTF1.cxx;  stressTMath.cxx;  testAnalyticalIntegrals.cxx;  testBinarySearch.cxx;  testDistSampler.cxx;  testIntegration.cxx;  testIntegrationMultiDim.cxx;  testkdTreeBinning.cxx;  testMathRandom.cxx;  testRootFinder.cxx;  testSampleQuantiles.cxx;  testSortOrder.cxx;  testSpecFuncBeta.cxx;  testSpecFuncBetaI.cxx;  testSpecFuncErf.cxx;  testSpecFuncGamma.cxx;  testSpecFuncSiCi.cxx;  testTMath.cxx;  testTStatistic.cxx;  ► v7;  ► inc;  ► ROOT;  TFit.hxx;  ► mathmore;  ► inc;  ► Math;  ChebyshevApprox.h;  Derivator.h;  DistFuncMathMore.h;  GSLFunctionAdapter.h;  GSLIntegrator.h;  GSLMCIntegrator.h;  GSLMinimizer.h;  GSLMinimizer1D.h;  GSLMultiRootFinder.h;  GSLNLSMinimizer.h;  GSLQuasiRandom.h; ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:46120,test,test,46120,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,1,['test'],['test']
Testability,"Fitter::SetFitOption(Foption_t option); static voidTVirtualFitter::SetFitter(TVirtualFitter* fitter, Int_t maxpar = 25); static voidTVirtualFitter::SetMaxIterations(Int_t niter = 5000); voidTFitterMinuit::SetMinimumTolerance(double mintol); virtual voidTFitterMinuit::SetMinuitFCN(ROOT::Minuit2::FCNBase* f); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTVirtualFitter::SetObjectFit(TObject* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual Int_tTFitterMinuit::SetParameter(Int_t ipar, const char* parname, Double_t value, Double_t verr, Double_t vlow, Double_t vhigh); static voidTVirtualFitter::SetPrecision(Double_t prec = 1e-6); voidTFitterMinuit::SetPrintLevel(int level); voidTFitterMinuit::SetStrategy(int stra); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTVirtualFitter::SetUserFunc(TObject* userfunc); virtual voidTVirtualFitter::SetXfirst(Int_t first); virtual voidTVirtualFitter::SetXlast(Int_t last); virtual voidTVirtualFitter::SetYfirst(Int_t first); virtual voidTVirtualFitter::SetYlast(Int_t last); virtual voidTVirtualFitter::SetZfirst(Int_t first); virtual voidTVirtualFitter::SetZlast(Int_t last); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual const ROOT::Minuit2::MnUserParameterState&TFitterMinuit::State() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TFitterFumili.html:8757,Test,TestBit,8757,root/html534/TFitterFumili.html,https://root.cern,https://root.cern/root/html534/TFitterFumili.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,Float_t GetSpectator(UInt_t ivar) constreturn spectator contentDefinition Event.cxx:261; TMVA::Event::GetClassUInt_t GetClass() constDefinition Event.h:86; TMVA::Event::SetSpectatorTypesvoid SetSpectatorTypes(const std::vector< char > &types)Definition Event.h:119; TMVA::Event::GetTargetFloat_t GetTarget(UInt_t itgt) constDefinition Event.h:102; TMVA::IncrementDefinition DataSetFactory.h:85; TMVA::MsgLoggerostringstream derivative to redirect and format outputDefinition MsgLogger.h:57; TMVA::RandomGeneratorDefinition Tools.h:299; TMVA::TreeInfoDefinition DataInputHandler.h:52; TMVA::TreeInfo::GetTreeTypeTypes::ETreeType GetTreeType() constDefinition DataInputHandler.h:64; TMVA::TreeInfo::GetClassNameconst TString & GetClassName() constDefinition DataInputHandler.h:65; TMVA::TreeInfo::GetWeightDouble_t GetWeight() constDefinition DataInputHandler.h:62; TMVA::TreeInfo::GetTreeTTree * GetTree() constDefinition DataInputHandler.h:61; TMVA::Types::kMaxTreeType@ kMaxTreeTypealso used as temporary storage for trees not yet assigned for testing;training...Definition Types.h:145; TMVA::Types::kTraining@ kTrainingDefinition Types.h:143; TMVA::Types::kTesting@ kTestingDefinition Types.h:144; TMVA::VariableInfo::SetMaxvoid SetMax(Double_t v)Definition VariableInfo.h:72; TMVA::VariableInfo::GetExpressionconst TString & GetExpression() constDefinition VariableInfo.h:57; TMVA::VariableInfo::SetMinvoid SetMin(Double_t v)Definition VariableInfo.h:71; TMVA::VariableInfo::GetInternalNameconst TString & GetInternalName() constDefinition VariableInfo.h:58; TMatrixT< Double_t >; TNamed::GetNameconst char * GetName() const overrideReturns name of object.Definition TNamed.h:47; TNamed::GetTitleconst char * GetTitle() const overrideReturns title of object.Definition TNamed.h:48; TObject::ClassNamevirtual const char * ClassName() constReturns name of class to which the object belongs.Definition TObject.cxx:213; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Dat,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataSetFactory_8cxx_source.html:92910,test,testing,92910,doc/master/DataSetFactory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/DataSetFactory_8cxx_source.html,1,['test'],['testing']
Testability,"Float_tDefinition RtypesCore.h:57; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; gPad#define gPadDefinition TVirtualPad.h:308; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TPaletteAxisThe palette painting class.Definition TPaletteAxis.h:28; TRandom::Rannorvirtual void Rannor(Float_t &a, Float_t &b)Return 2 numbers distributed following a gaussian with mean=0 and sigma=1.Definition TRandom.cxx:507; TStyle::SetPalettevoid SetPalette(Int_t ncolors=kBird, Int_t *colors=nullptr, Float_t alpha=1.)See TColor::SetPalette.Definition TStyle.cxx:1888; int. TPaletteAxis inherits from TBox and TPave. The methods allowing to specify the palette position are inherited from these two classes.; The palette can be interactively moved and resized. The context menu can be used to set the axis attributes.; It is possible to select a range on the axis to set the min/max in z; As default labels and ticks are drawn by TGAxis at equidistant (lin or log) points as controlled by SetNdivisions. If option ""CJUST"" is given labels and ticks are justified at the color boundaries defined by the contour levels. In this case no optimization can be done. It is responsibility of the user to adjust minimum, maximum of the histogram and/or the contour levels to get a reasonable look of the plot. Only overlap of the labels is avoided if too many contour levels are used.; This option is especially useful with user defined contours. An example is shown here:; {; gStyle->SetOptStat(0);; auto c = new TCanvas(""c"",""exa_CJUST"",300,10,400,400);; auto hpxpy = new TH2F(""hpxpy"",""py vs px"",40,-4,4,40,-4,4);; // Fill histograms randomly; TRandom3 randomNum;; Float_t px, py;; for (Int_t i = 0; i < 25000; i++) {; randomNum.Rannor(px,py);; hpxpy->Fill(px,py);; }; hpxpy->SetMaximum(200);; Double_t zcontours[5] = {0, 20, 40, 80, 120};; hpxpy->SetContour(5, zcontours);; hpxpy->GetZaxis()->SetTickSize(0.01);; hpxpy",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPaletteAxis.html:2470,log,log,2470,doc/master/classTPaletteAxis.html,https://root.cern,https://root.cern/doc/master/classTPaletteAxis.html,1,['log'],['log']
Testability,"Float_tGetAverageNeighborsValue(TMVA::PDEFoam*, vector<Float_t>&, TMVA::ECellValue); voidTObject::MakeZombie(); Float_tWeightGaus(TMVA::PDEFoam*, TMVA::PDEFoamCell*, vector<Float_t>&). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::MsgLogger*TMVA::PDEFoamKernelBase::fLogger! message logger; Float_tfSigmawidth of gauss curve. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamKernelGauss(Float_t sigma); Default constructor for streamer. PDEFoamKernelGauss(const TMVA::PDEFoamKernelGauss& ); Copy constructor. Float_t Estimate(TMVA::PDEFoam* , vector<Float_t>& , TMVA::ECellValue ); Gaussian kernel estimator. It returns the cell value 'cv',; corresponding to the event vector 'txvec' (in foam coordinates); weighted by the cell values of all other cells, where the weight; is a gaussian function. Parameters:. - foam - the pdefoam to search in. - txvec - event vector in foam coordinates [0,1]. - cv - cell value to estimate. Float_t GetAverageNeighborsValue(TMVA::PDEFoam* , vector<Float_t>& , TMVA::ECellValue ); This function returns the average value 'cv' of only nearest; neighbor cells. It is used in cases when a cell value is; undefined and the cell value shall be estimated by the; (well-defined) cell values of the n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__PDEFoamKernelGauss.html:6371,log,logger,6371,root/html602/TMVA__PDEFoamKernelGauss.html,https://root.cern,https://root.cern/root/html602/TMVA__PDEFoamKernelGauss.html,2,['log'],['logger']
Testability,"FoamCell*,allocator<TMVA::PDEFoamCell*> >&) const; Double_tGetCellElement(const TMVA::PDEFoamCell* cell, UInt_t i) const; TMVA::PDEFoamDensityBase*GetDistr() const; voidGrow(); voidInitCells(); voidMakeAlpha(); voidTObject::MakeZombie(); voidOutputGrow(Bool_t finished = false); TMVA::PDEFoamPDEFoam(const TMVA::PDEFoam&); Long_tPeekMax(); voidSetCellElement(TMVA::PDEFoamCell* cell, UInt_t i, Double_t value); voidVaredu(Double_t*, Int_t&, Double_t&, Double_t&). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Double_t*fAlpha[fDim] Internal parameters of the hyperrectangle; TMVA::PDEFoamCell**fCells[fNCells] Array of ALL cells; TMVA::EDTSeparationfDTSeparationBACKWARDS COMPATIBILITY: split cells according to decision tree logic; Int_tfDimDimension of the integration/simulation space; TMVA::PDEFoamDensityBase*fDistr! distribution of training events; Int_tfEvPerBinMaximum number of effective (wt=1) events per bin; Bool_tfFillFoamWithOrigWeightsBACKWARDS COMPATIBILITY: fill the foam with boost or orig. weights; TMVA::EFoamTypefFoamTypeBACKWARDS COMPATIBILITY: type of foam; TObjArray*fHistEdgHistograms of wt, one for each cell edge; Int_t*fInhiDiv! [fDim] Flags for inhibiting cell division; Int_tfLastCeIndex of the last cell; TMVA::MsgLogger*fLogger! message logger; Int_t*fMaskDiv! [fDim] Dynamic Mask for cell division; UInt_tfMaxDepthmaximum depth of cell tree; Int_tfNBinNo. of bins in the edge histogram for cell MC exploration; Int_tfNCellsMaximum number of cells; UInt_tfNElementsBACKWARDS COMPATIBILITY: number of variables in every cell; Int_tfNSamplNo. of MC events, when dividing (exploring) cell; TStringfNameName of a given instance of the FOAM class; UInt_tfNminminimal number of events in cell to split cell; Int_tfNoActNumber of acti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__PDEFoam.html:9521,log,logic,9521,root/html530/TMVA__PDEFoam.html,https://root.cern,https://root.cern/root/html530/TMVA__PDEFoam.html,3,['log'],['logic']
Testability,"Folder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TEnvRec&operator=(const TEnvRec&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEnvRec.html:5798,Test,TestBit,5798,root/html528/TEnvRec.html,https://root.cern,https://root.cern/root/html528/TEnvRec.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"Folder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TEveHit&operator=(const TEveHit&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveHit.html:4198,Test,TestBit,4198,root/html528/TEveHit.html,https://root.cern,https://root.cern/root/html528/TEveHit.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"For binned data this approach may be suboptimal as the number of bins with >0 entries; in each processing block many vary greatly thereby distributing the workload rather unevenly.; If interleave is set to true, the interleave partitioning strategy is used where each partition; i takes all bins for which (ibin % ncpu == i) which is more likely to result in an even workload.; If splitCutRange is true, a different rangeName constructed as rangeName_{catName} will be used; as range definition for each index state of a RooSimultaneous. RooAbsTestStatistic(const RooAbsTestStatistic& other, const char* name = 0); Copy constructor. ~RooAbsTestStatistic(); Destructor. Double_t evaluate() const; Calculates and return value of test statistic. If the test statistic; is calculated from on a RooSimultaneous, the test statistic calculation; is performed separately on each simultaneous p.d.f component and associated; data and then combined. If the test statistic calculation is parallelized; partitions are calculated in nCPU processes and a posteriori combined. Bool_t initialize(); One-time initialization of the test statistic. Setup; infrastructure for simultaneous p.d.f processing and/or; parallelized processing if requested. Bool_t redirectServersHook(const RooAbsCollection& newServerList, Bool_t mustReplaceAll, Bool_t nameChange, Bool_t isRecursive); Forward server redirect calls to component test statistics. void printCompactTreeHook(ostream& os, const char* indent = """"); Add extra information on component test statistics when printing; itself as part of a tree structure. void constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); Forward constant term optimization management calls to component; test statistics. void setMPSet(Int_t setNum, Int_t numSets); Set MultiProcessor set number identification of this instance. void initMPMode(RooAbsReal* real, RooAbsData* data, const RooArgSet* projDeps, const char* rangeName, const char* addCoefRan",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsTestStatistic.html:43017,test,test,43017,root/html602/RooAbsTestStatistic.html,https://root.cern,https://root.cern/root/html602/RooAbsTestStatistic.html,2,['test'],['test']
Testability,"For citation information, please visit: http://tmva.sf.net/citeTMVA.html; <HEADER> Factory : Booking method: BDTG_fold2; : ; : the option NegWeightTreatment=InverseBoostNegWeights does not exist for BoostType=Grad; : --> change to new default NegWeightTreatment=Pray; : Regression Loss Function: Huber; : Training 500 Decision Trees ... patience please; : Elapsed time for training with 5000 events: 1.31 sec ; : Dataset[datasetcvreg] : Create results for training; : Dataset[datasetcvreg] : Evaluation of BDTG_fold2 on training sample; : Dataset[datasetcvreg] : Elapsed time for evaluation of 5000 events: 0.209 sec ; : Create variable histograms; : Create regression target histograms; : Create regression average deviation; : Results created; : Creating xml weight file: datasetcvreg/weights/TMVACrossValidationRegression_BDTG_fold2.weights.xml; <HEADER> Factory : Test all methods; <HEADER> Factory : Test method: BDTG_fold2 for Regression performance; : ; : Dataset[datasetcvreg] : Create results for testing; : Dataset[datasetcvreg] : Evaluation of BDTG_fold2 on testing sample; : Dataset[datasetcvreg] : Elapsed time for evaluation of 4999 events: 0.209 sec ; : Create variable histograms; : Create regression target histograms; : Create regression average deviation; : Results created; <HEADER> Factory : Evaluate all methods; : Evaluate regression method: BDTG_fold2; : TestRegression (testing); : Calculate regression for all events; : Elapsed time for evaluation of 4999 events: 0.208 sec ; : TestRegression (training); : Calculate regression for all events; : Elapsed time for evaluation of 5000 events: 0.208 sec ; : ; : Evaluation results ranked by smallest RMS on test sample:; : (""Bias"" quotes the mean deviation of the regression from true target.; : ""MutInf"" is the ""Mutual Information"" between regression and target.; : Indicated by ""_T"" are the corresponding ""truncated"" quantities ob-; : tained when removing events deviating more than 2sigma from average.); : -------------------",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVACrossValidationRegression_8C.html:7142,Test,Test,7142,doc/master/TMVACrossValidationRegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVACrossValidationRegression_8C.html,4,"['Test', 'test']","['Test', 'testing']"
Testability,"Force a copy of current style for all objects in canvas.Definition TCanvas.cxx:1185; TCanvas::Iconifyvoid Iconify()Iconify canvas.Definition TCanvas.cxx:1479; TCanvas::GetWindowTopXInt_t GetWindowTopX()Returns current top x position of window on screen.Definition TCanvas.cxx:1210; TCanvas::ToggleEventStatusvirtual void ToggleEventStatus()Toggle event statusbar.Definition TCanvas.cxx:2431; TCanvas::Destructorvoid Destructor()Actual canvas destructor.Definition TCanvas.cxx:695; TCanvas::GetCanvasParvirtual void GetCanvasPar(Int_t &wtopx, Int_t &wtopy, UInt_t &ww, UInt_t &wh)Definition TCanvas.h:165; TCanvas::GetCanvasImpTCanvasImp * GetCanvasImp() const overrideDefinition TCanvas.h:158; TCanvas::IsRetainedBool_t IsRetained() const overrideDefinition TCanvas.h:176; TCanvas::fUpdatedBool_t fUpdated! Set to True when Update method was calledDefinition TCanvas.h:64; TCanvas::SetSupportGLvoid SetSupportGL(Bool_t support)Definition TCanvas.h:229; TCanvas::DeleteCanvasPaintervoid DeleteCanvasPainter()assert on IsBatch() == false?Definition TCanvas.cxx:2626; TCanvas::fPadSaveTPad * fPadSave! Pointer to saved pad in HandleInputDefinition TCanvas.h:56; TCanvas::SupportAlphastatic Bool_t SupportAlpha()Static function returning ""true"" if transparency is supported.Definition TCanvas.cxx:2476; TCanvas::fBatchBool_t fBatch! True when in batchmodeDefinition TCanvas.h:59; TCanvas::fUseGLBool_t fUseGL! True when rendering is with GLDefinition TCanvas.h:62; TCanvas::GetEventYInt_t GetEventY() const overrideDefinition TCanvas.h:137; TCanvas::fEventXInt_t fEventX! Last X mouse position in canvasDefinition TCanvas.h:46; TCanvas::IsBatchBool_t IsBatch() const overrideDefinition TCanvas.h:171; TCanvas::DrawCloneTObject * DrawClone(Option_t *option="""") const overrideDraw a clone of this canvas A new canvas is created that is a clone of this canvas.Definition TCanvas.cxx:907; TCanvas::fXsizeRealSize_t fXsizeRealCurrent size of canvas along X in CM.Definition TCanvas.h:35; TCanvas::HasMenuBarBoo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCanvas_8h_source.html:17943,assert,assert,17943,doc/master/TCanvas_8h_source.html,https://root.cern,https://root.cern/doc/master/TCanvas_8h_source.html,1,['assert'],['assert']
Testability,"Formula () const;  ; virtual TH1 * GetHistogram () const;  Return a pointer to the histogram used to visualise the function Note that this histogram is managed by the function and in same case it is automatically deleted when some TF1 functions are called such as TF1::SetParameters, TF1::SetNpx, TF1::SetRange It is then reccomended either to clone the return object or calling again teh GetHistogram function whenever is needed. ;  ; virtual const TObject * GetLinearPart (Int_t i) const;  ; virtual Double_t GetMaximumStored () const;  ; virtual Double_t GetMaximumX (Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) const;  Returns the X value corresponding to the maximum value of the function. ;  ; TMethodCall * GetMethodCall () const;  ; virtual Double_t GetMinimumStored () const;  ; virtual Double_t GetMinimumX (Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) const;  Returns the X value corresponding to the minimum value of the function on the (xmin, xmax) interval. ;  ; virtual Int_t GetNDF () const;  Return the number of degrees of freedom in the fit the fNDF parameter has been previously computed during a fit. ;  ; virtual Int_t GetNdim () const;  ; virtual Int_t GetNpar () const;  ; virtual Int_t GetNpx () const;  ; virtual Int_t GetNumber () const;  ; virtual Int_t GetNumberFitPoints () const;  ; virtual Int_t GetNumberFreeParameters () const;  Return the number of free parameters. ;  ; virtual Double_t GetParameter (const TString &name) const;  ; virtual Double_t GetParameter (Int_t ipar) const;  ; virtual Double_t * GetParameters () const;  ; virtual void GetParameters (Double_t *params);  ; TObject * GetParent () const;  ; virtual Double_t GetParError (Int_t ipar) const;  Return value of parameter number ipar. ;  ; virtual const Double_t * GetParErrors () const;  ; virtual void GetParLimits (Int_t ipar, Double_t &parmin, Double_t &parmax) const;  Return limits for",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTF2.html:16572,log,logx,16572,doc/master/classTF2.html,https://root.cern,https://root.cern/doc/master/classTF2.html,2,['log'],['logx']
Testability,"Frame::SetDNDSource(Bool_t onoff); voidTGFrame::SetDNDTarget(Bool_t onoff); virtual voidTGFrame::SetDragType(Int_t type); virtual voidTGFrame::SetDrawOption(Option_t* = """"); virtual voidTGFrame::SetDropType(Int_t type); static voidTObject::SetDtorOnly(void* obj); virtual voidTGFrame::SetEditable(Bool_t); virtual voidTGWindow::SetEditDisabled(UInt_t on = kEditDisable); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGFrame::SetLayoutBroken(Bool_t = kTRUE); virtual voidTGWindow::SetMapSubwindows(Bool_t); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPosition(Int_t pos)MENU GETTER ; virtual voidSetRange(Int_t range, Int_t page_size)MENU ; virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTGScrollBar::SetSmallIncrement(Int_t increment); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGHScrollBar.html:14445,Test,TestBit,14445,root/html528/TGHScrollBar.html,https://root.cern,https://root.cern/root/html528/TGHScrollBar.html,12,['Test'],"['TestBit', 'TestBits']"
Testability,"Frame::SetDragType(Int_t type); virtual voidTGFrame::SetDrawOption(Option_t* = """"); virtual voidTGFrame::SetDropType(Int_t type); static voidTObject::SetDtorOnly(void* obj); virtual voidTGCompositeFrame::SetEditable(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetEditDisabled(UInt_t on = 1); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); voidSetModel(TEveGridStepper* m); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveGridStepperSubEditor.html:14267,Test,TestBit,14267,root/html534/TEveGridStepperSubEditor.html,https://root.cern,https://root.cern/root/html534/TEveGridStepperSubEditor.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"Frame::SetDragType(Int_t type); virtual voidTGFrame::SetDrawOption(Option_t* = """"); virtual voidTGFrame::SetDropType(Int_t type); static voidTObject::SetDtorOnly(void* obj); virtual voidTGCompositeFrame::SetEditable(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetEditDisabled(UInt_t on = 1); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); voidSetModel(TEveRGBAPalette* p); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveRGBAPaletteSubEditor.html:14468,Test,TestBit,14468,root/html534/TEveRGBAPaletteSubEditor.html,https://root.cern,https://root.cern/root/html534/TEveRGBAPaletteSubEditor.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"Frame::SetDragType(Int_t type); virtual voidTGFrame::SetDrawOption(Option_t* = """"); virtual voidTGFrame::SetDropType(Int_t type); static voidTObject::SetDtorOnly(void* obj); virtual voidTGCompositeFrame::SetEditable(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetEditDisabled(UInt_t on = 1); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); voidSetModel(TGLClipSet* m); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); voidUpdateViewerClip(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLClipSetSubEditor.html:14135,Test,TestBit,14135,root/html528/TGLClipSetSubEditor.html,https://root.cern,https://root.cern/root/html528/TGLClipSetSubEditor.html,6,['Test'],"['TestBit', 'TestBits']"
Testability,"Frame::SetDrawOption(Option_t* = """"); virtual voidTGFrame::SetDropType(Int_t type); static voidTObject::SetDtorOnly(void* obj); virtual voidTGFrame::SetEditable(Bool_t); virtual voidSetEditDisabled(UInt_t); virtual voidSetEnabled(Bool_t on = kTRUE); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGFrame::SetLayoutBroken(Bool_t = kTRUE); virtual voidTGWindow::SetMapSubwindows(Bool_t); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); voidSetText(TGString* text); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidShowClose(Bool_t on = kTRUE); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGTabElement(const TGWindow* p = 0, TGString* text = 0, UInt_t w = 1, UInt_t h = 1, GContext_t norm = TGTab::GetDefaultGC()(), FontStruct_t font = TGTab::GetDefaultFontStruct(), UInt_t options = kRaisedFrame, Pixel_t back = GetDefaultFrameBackground()); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGTabElement.html:13249,Test,TestBit,13249,root/html602/TGTabElement.html,https://root.cern,https://root.cern/root/html602/TGTabElement.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"Frame::SetDropType(Int_t type); static voidTObject::SetDtorOnly(void* obj); virtual voidTGCompositeFrame::SetEditable(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetEditDisabled(UInt_t on = 1); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidSetGedEditor(TGedEditor* ed); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidSetModel(TObject* obj); voidSetModelClass(TClass* mcl); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidUpdate(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGedFrame.html:14647,Test,TestBit,14647,root/html534/TGedFrame.html,https://root.cern,https://root.cern/root/html534/TGedFrame.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"Frame::SetDropType(Int_t type); static voidTObject::SetDtorOnly(void* obj); virtual voidTGCompositeFrame::SetEditable(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetEditDisabled(UInt_t on = 1); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGuiBldNameFrame(const TGuiBldNameFrame&); TGuiBldNameFrame(const TGWindow* p, TGuiBldEditor* editor); virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); voidUpdateName(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGuiBldNameFrame.html:14373,Test,TestBit,14373,root/html602/TGuiBldNameFrame.html,https://root.cern,https://root.cern/root/html602/TGuiBldNameFrame.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"Frame::SetDropType(Int_t type); static voidTObject::SetDtorOnly(void* obj); virtual voidTGCompositeFrame::SetEditable(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetEditDisabled(UInt_t on = 1); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); voidSetPosition(Int_t x, Int_t y); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); voidShow(Int_t x, Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGSplitTool(const TGWindow* p = 0, const TGFrame* f = 0); virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGSplitTool.html:14118,Test,TestBit,14118,root/html602/TGSplitTool.html,https://root.cern,https://root.cern/root/html602/TGSplitTool.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"Frame::SetEditDisabled(UInt_t on = 1); virtual voidSetEvenRowBackground(Pixel_t pixel); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidSetHeaderBackground(Pixel_t pixel); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetOddRowBackground(Pixel_t pixel); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidShow(); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidUpdate(); virtual voidUpdateView(); virtual voidTObject::UseCurrentStyle(); virtual voidUserRangeChange(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGTable.html:19268,Test,TestBit,19268,root/html528/TGTable.html,https://root.cern,https://root.cern/root/html528/TGTable.html,6,['Test'],"['TestBit', 'TestBits']"
Testability,"Frame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGButton::SetOn(Bool_t on = kTRUE, Bool_t emit = kFALSE); virtual voidTGTextButton::SetRightMargin(Int_t val); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTGCheckButton::SetState(EButtonState state, Bool_t emit = kFALSE); virtual voidTGTextButton::SetText(TGHotString* new_label); virtual voidTGTextButton::SetText(const TString& new_label); virtual voidTGTextButton::SetTextColor(Pixel_t color, Bool_t global = kFALSE); virtual voidTGTextButton::SetTextJustify(Int_t tmode); virtual voidTGTextButton::SetTitle(const char* label); virtual voidTGButton::SetToolTipText(const char* text, Long_t delayms = 400)MENU ; virtual voidTGTextButton::SetTopMargin(Int_t val); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGButton::SetUserData(void* userData); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); voidTGTextButton::SetWrapLength(Int_t wl); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTGButton::Toggle(Bool_t emit = kFALSE); virtual voidTGButton::Toggled(Bool_t on)SIGNAL ; virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGColorSelect.html:16396,Test,TestBit,16396,root/html528/TGColorSelect.html,https://root.cern,https://root.cern/root/html528/TGColorSelect.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"FrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressMemoryPlot(TProofProgressDialog* d, Int_t w = 700, Int_t h = 300); Main constructor. ~TProofProgressMemoryPlot(); Destructor. TGListBox* BuildLogList(TGFrame* parent); Build the list of workers. For this, extract the logs and take the names; of TProofLogElements. void Clear(Option_t* = 0); Clear the canvases. void DoPlot(); Draw the plot from the logs. TGraph * DoAveragePlot(Int_t& max_el, Int_t& min_el); Create the average plots. Int_t ParseLine(TString l, Long64_t& v, Long64_t& r, Long64_t& e); Extract from line 'l' the virtual memory 'v', the resident memory 'r' and the; number of events 'e'.; The line is assumed to be in the form; ""... Memory 130868 virtual 31540 ... event 5550""; The fields are only filled if >= 0 .; Return 0 on success, -1 if any of the values coudl not be filled (the output; fields are not touched in such a case). TGraph * DoWorkerPlot(TProofLogElem* ple); Make a memory consumption graph for a worker. TGraph * DoMasterPlot(TProofLogElem* ple); a master or submaster log; display without meaningful labels for now. void Select(Int_t id); actions of select all/clear all button. TGraph* DoAveragePlotOld(Int_t& max_el, Int_t& min_el). TProofProgressMemoryPlot(TProofProgressDialog* d, Int_t w = 700, Int_t h = 300). » Author: Anna Kreshuk 18/07/2008 » Copyright (C) 1995-2003, Rene Brun and Fons R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofProgressMemoryPlot.html:24418,log,logs,24418,root/html602/TProofProgressMemoryPlot.html,https://root.cern,https://root.cern/root/html602/TProofProgressMemoryPlot.html,2,['log'],['logs']
Testability,"Friend = CheckReshuffling(*this, *t);; 1378 if (!t->GetTreeIndex() && (t->GetEntries() < fEntries)) {; 1379 Warning(""AddFriend"", ""FriendElement %s in file %s has less entries %lld than its parent tree: %lld"", treename,; 1380 file->GetName(), t->GetEntries(), fEntries);; 1381 }; 1382 } else {; 1383 Error(""AddFriend"", ""Cannot find tree '%s' in file '%s', friend not added"", treename, file->GetName());; 1384 canAddFriend = false;; 1385 }; 1386 ; 1387 if (canAddFriend); 1388 fFriends->Add(fe);; 1389 return fe;; 1390}; 1391 ; 1392////////////////////////////////////////////////////////////////////////////////; 1393/// Add a TFriendElement to the list of friends.; 1394///; 1395/// The TTree is managed by the user (e.g., the user must delete the file).; 1396/// For a complete description see AddFriend(const char *, const char *).; 1397 ; 1398TFriendElement *TTree::AddFriend(TTree *tree, const char *alias, bool warn); 1399{; 1400 if (!tree) {; 1401 return nullptr;; 1402 }; 1403 if (!fFriends) {; 1404 fFriends = new TList();; 1405 }; 1406 TFriendElement *fe = new TFriendElement(this, tree, alias);; 1407 R__ASSERT(fe); // this assert is for historical reasons. Don't remove it unless you understand all the consequences.; 1408 TTree *t = fe->GetTree();; 1409 if (warn && (t->GetEntries() < fEntries)) {; 1410 Warning(""AddFriend"", ""FriendElement '%s' in file '%s' has less entries %lld than its parent tree: %lld"",; 1411 tree->GetName(), fe->GetFile() ? fe->GetFile()->GetName() : ""(memory resident)"", t->GetEntries(),; 1412 fEntries);; 1413 }; 1414 if (CheckReshuffling(*this, *t)); 1415 fFriends->Add(fe);; 1416 else; 1417 tree->RemoveExternalFriend(fe);; 1418 return fe;; 1419}; 1420 ; 1421////////////////////////////////////////////////////////////////////////////////; 1422/// AutoSave tree header every fAutoSave bytes.; 1423///; 1424/// When large Trees are produced, it is safe to activate the AutoSave; 1425/// procedure. Some branches may have buffers holding many entries.; 1426/// ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:51502,assert,assert,51502,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['assert'],['assert']
Testability,"From(const TClass *cl) constTObjectvirtual; Inspect() constTObjectvirtual; InvertBit(UInt_t f)TObjectinline; IsA() constTMVA::Factoryinlinevirtual; IsDestructed() constTObjectinline; IsEqual(const TObject *obj) constTObjectvirtual; IsFolder() constTObjectvirtual; IsModelPersistence() constTMVA::Factoryinline; IsOnHeap() constTObjectinline; IsSilentFile() constTMVA::Factoryinline; IsSortable() const overrideTNamedinlinevirtual; IsZombie() constTObjectinline; kBitMask enum valueTObject; kCanDelete enum valueTObject; kCannotPick enum valueTObject; kHasUUID enum valueTObject; kInconsistent enum valueTObject; kInvalidObject enum valueTObject; kIsOnHeap enum valueTObject; kIsReferenced enum valueTObject; kMustCleanup enum valueTObject; kNoContextMenu enum valueTObject; kNotDeleted enum valueTObject; kObjInCanvas enum valueTObject; kOnlyPrepStep enum valueTObjectprotected; kOverwrite enum valueTObject; kSingleKey enum valueTObject; kWriteDelete enum valueTObject; kZombie enum valueTObject; Log() constTMVA::Configurableinline; LooseOptionCheckingEnabled() constTMVA::Configurableinlineprotected; ls(Option_t *option="""") const overrideTNamedvirtual; MakeClass(const TString &datasetname, const TString &methodTitle="""") constTMVA::Factoryvirtual; MakeZombie()TObjectinlineprotected; MayNotUse(const char *method) constTObject; MVector typedefTMVA::Factory; Notify()TObjectvirtual; Obsolete(const char *method, const char *asOfVers, const char *removedFromVers) constTObject; operator delete(void *ptr)TObject; operator delete(void *ptr, void *vp)TObject; operator delete[](void *ptr)TObject; operator delete[](void *ptr, void *vp)TObject; operator new(size_t sz)TObjectinline; operator new(size_t sz, void *vp)TObjectinline; operator new[](size_t sz)TObjectinline; operator new[](size_t sz, void *vp)TObjectinline; operator=(const TNamed &rhs)TNamed; TObject::operator=(const TObject &rhs)TObjectinline; OptimizeAllMethods(TString fomType=""ROCIntegral"", TString fitType=""FitGA"")TMVA::Factory; O",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Factory-members.html:8119,Log,Log,8119,doc/master/classTMVA_1_1Factory-members.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory-members.html,1,['Log'],['Log']
Testability,"FromArray that is set and we have a single formula for the array; 825 // fInputFormulaTable contains a map of the formula and the variable index to evaluate the formula; 826 for (UInt_t ivar = 0; ivar < nvars; ivar++) {; 827 // distinguish case where variable is not from an array; 828 if (dsi.IsVariableFromArray(ivar)) continue;; 829 auto inputFormula = fInputTableFormulas[ivar].first;; 830 ; 831 Int_t ndata = inputFormula->GetNdata();; 832 ; 833 classEventCounts.varAvLength[ivar] += ndata;; 834 if (ndata == 1) continue;; 835 haveAllArrayData = kTRUE;; 836 //varIsArray[ivar] = kTRUE;; 837 //std::cout << ""Found array !!!"" << std::endl;; 838 if (sizeOfArrays == 1) {; 839 sizeOfArrays = ndata;; 840 prevArrExpr = ivar;; 841 }; 842 else if (sizeOfArrays!=ndata) {; 843 Log() << kERROR << Form(""Dataset[%s] : "",dsi.GetName())<< ""ERROR while preparing training and testing trees:"" << Endl;; 844 Log() << Form(""Dataset[%s] : "",dsi.GetName())<< "" multiple array-type expressions of different length were encountered"" << Endl;; 845 Log() << Form(""Dataset[%s] : "",dsi.GetName())<< "" location of error: event "" << evtIdx; 846 << "" in tree "" << currentInfo.GetTree()->GetName(); 847 << "" of file "" << currentInfo.GetTree()->GetCurrentFile()->GetName() << Endl;; 848 Log() << Form(""Dataset[%s] : "",dsi.GetName())<< "" expression "" << inputFormula->GetTitle() << "" has ""; 849 << Form(""Dataset[%s] : "",dsi.GetName()) << ndata << "" entries, while"" << Endl;; 850 Log() << Form(""Dataset[%s] : "",dsi.GetName())<< "" expression "" << fInputTableFormulas[prevArrExpr].first->GetTitle() << "" has ""; 851 << Form(""Dataset[%s] : "",dsi.GetName())<< fInputTableFormulas[prevArrExpr].first->GetNdata() << "" entries"" << Endl;; 852 Log() << kFATAL << Form(""Dataset[%s] : "",dsi.GetName())<< ""Need to abort"" << Endl;; 853 }; 854 }; 855 ; 856 // now we read the information; 857 for (Int_t idata = 0; idata<sizeOfArrays; idata++) {; 858 Bool_t contains_NaN_or_inf = kFALSE;; 859 ; 860 auto checkNanInf = [&](std::map<TString, i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataSetFactory_8cxx_source.html:35823,Log,Log,35823,doc/master/DataSetFactory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/DataSetFactory_8cxx_source.html,1,['Log'],['Log']
Testability,"FromVers) const; TFile*OpenFile(const char* opt); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); voidResetFileCollection(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidSetOutputFileName(const char* name); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofOutputFile.html:5442,Test,TestBit,5442,root/html530/TProofOutputFile.html,https://root.cern,https://root.cern/root/html530/TProofOutputFile.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"FromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); Int_toperator Int_t() const; void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooInt&operator=(Int_t value); RooInt&operator=(const RooInt&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooInt.html:4658,Test,TestBit,4658,root/html530/RooInt.html,https://root.cern,https://root.cern/root/html530/RooInt.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"FromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTypeIsPointer() const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TVirtualBranchBrowsable.html:6725,Test,TestBit,6725,root/html534/TVirtualBranchBrowsable.html,https://root.cern,https://root.cern/root/html534/TVirtualBranchBrowsable.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"FromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTVirtualPacketizer::SetFailedPackets(TList* list); virtual voidTVirtualPacketizer::SetInitTime(); static voidTObject::SetObjectStat(Bool_t stat); voidTVirtualPacketizer::SetProgressStatus(TProofProgressStatus* st); voidTVirtualPacketizer::SetTotalEntries(Long64_t ent); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStopProcess(Bool_t abort, Bool_t stoptimer = kFALSE); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TPacketizerMulti.html:6105,Test,TestBit,6105,root/html534/TPacketizerMulti.html,https://root.cern,https://root.cern/root/html534/TPacketizerMulti.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"FunType >.; Definition at line 121 of file LogLikelihoodFCN.h. ◆ DoDerivative(). template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . virtual double ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::DoDerivative ; (; const double * ; x, . unsigned int ; icoord . ); const. inlineprivatevirtual . Definition at line 161 of file LogLikelihoodFCN.h. ◆ DoEval(). template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . virtual double ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::DoEval ; (; const double * ; x); const. inlineprivatevirtual . Evaluation of the function (required by interface) ; Definition at line 155 of file LogLikelihoodFCN.h. ◆ Gradient(). template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . virtual void ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::Gradient ; (; const double * ; x, . double * ; g . ); const. inlinevirtual . Definition at line 127 of file LogLikelihoodFCN.h. ◆ NFitPoints(). template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . virtual unsigned int ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::NFitPoints ; (; ); const. inlinevirtual . Definition at line 118 of file LogLikelihoodFCN.h. ◆ operator=(). template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . LogLikelihoodFCN & ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::operator= ; (; const LogLikelihoodFCN< DerivFunType, ModelFunType > & ; rhs). inline . Assignment operator. ; Definition at line 99 of file LogLikelihoodFCN.h. ◆ Type(). template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . virtual BaseObjFunction::Type_t ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::Type ; (; ); const. inlinevirtual . get type of fit method function ; Reimplemented from ROOT::Math::BasicFitMethodFunction< DerivFunType >.; Definition at line 134 of file",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html:11413,Log,LogLikelihoodFCN,11413,doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html,1,['Log'],['LogLikelihoodFCN']
Testability,"Fun_t reallocfunc = 0); virtual voidTBufferFile::SetStreamerElementNumber(Int_t); virtual voidTObject::SetUniqueID(UInt_t uid); voidTBuffer::SetWriteMode(); virtual voidTBufferFile::SetWriteParam(Int_t mapsize); virtual voidShowMembers(TMemberInspector& insp); virtual voidTBufferFile::SkipObjectAny(); virtual voidTBufferFile::SkipVersion(const TClass* cl = 0); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTBufferFile::StreamObject(TObject* obj); virtual voidTBufferFile::StreamObject(void* obj, const type_info& typeinfo, const TClass* onFileClass = 0); virtual voidTBufferFile::StreamObject(void* obj, const char* className, const TClass* onFileClass = 0); virtual voidTBufferFile::StreamObject(void* obj, const TClass* cl, const TClass* onFileClass = 0); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTBufferFile::TagStreamerInfo(TVirtualStreamerInfo* info); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual voidTBufferFile::WriteArray(const Bool_t* b, Int_t n); virtual voidTBufferFile::WriteArray(const Char_t* c, Int_t n); virtual voidTBufferFile::WriteArray(const UChar_t* c, Int_t n); virtual voidTBufferFile::WriteArray(const Short_t* h, Int_t n); virtual voidTBufferFile::WriteArray(const UShort_t* h, Int_t n); virtual voidTBufferFile::WriteArray(const Int_t* i, Int_t n); virtual voidTBufferFile::WriteArray(const UInt_t* i, Int_t n); virtual voidTBufferFile::WriteArray(const Long_t* l, Int_t n); virtual voidTBufferFile::WriteArray(const ULong_t* l, Int_t n); virtual voidTBufferFile::WriteArray(const Long64_t* l, Int_t n); virtual voidTBufferFile::WriteArray(const ULong64_t* ll, Int_t n); virtual voidTBufferFile::WriteArray(const Float_t* f, Int_t n); virtual voidTBufferFile::WriteArray(const Double_t* d, Int_t n); virtual voidTBufferFile::WriteA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TBufferSQL.html:13510,Test,TestBits,13510,root/html530/TBufferSQL.html,https://root.cern,https://root.cern/root/html530/TBufferSQL.html,2,['Test'],['TestBits']
Testability,"FuncPtr_t ptr);  Set the pointer to the function to be run for the rule (if it is a raw read rule). ;  ; void SetRuleType (RuleType_t type);  Set the type of the rule. ;  ; void SetSource (const TString &source);  Set the list of source members. ;  ; void SetSourceClass (const TString &classname);  Set the source class of this rule (i.e. the onfile class). ;  ; void SetTarget (const TString &target);  Set the target member of this rule (i.e. the in memory data member). ;  ; void SetTargetClass (const TString &classname);  Set the target class of this rule (i.e. the in memory class). ;  ; Bool_t SetVersion (const TString &version);  Set the version string - returns kFALSE if the format is incorrect. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t TestChecksum (UInt_t checksum) const;  Check if given checksum is defined in this rule. ;  ; Bool_t TestVersion (Int_t version) const;  Check if given version number is defined in this rule. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html:5871,Test,TestVersion,5871,doc/v632/classROOT_1_1TSchemaRule.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html,2,['Test'],['TestVersion']
Testability,Function ; RooStats::HistFactory::RooBarlowBeestonLL Real-valued function representing a Barlow-Beeston minimized profile likelihood of external (likelihood) function; RooStats::HistFactory::Sample ; RooStats::HistFactory::StatError ; RooStats::HistFactory::StatErrorConfig ; RooStats::HybridCalculator ; RooStats::HybridCalculatorOriginal Hypothesis test calculator using a Bayesian-frequentist hybrid method; RooStats::HybridPlot Provides the plots for an HybridResult; RooStats::HybridResult Class containing the results of the HybridCalculator; RooStats::HypoTestCalculator Interface for tools doing hypothesis tests; RooStats::HypoTestCalculatorGeneric ; RooStats::HypoTestInverter HypoTestInverter class; RooStats::HypoTestInverterOriginal HypoTestInverterOriginal class; RooStats::HypoTestInverterPlot HypoTestInverterPlot class; RooStats::HypoTestInverterResult HypoTestInverterResult class; RooStats::HypoTestPlot ; RooStats::HypoTestResult Base class to represent results of a hypothesis test; RooStats::IntervalCalculator Interface for tools setting limits (producing confidence intervals); RooStats::LikelihoodInterval Concrete implementation of a ConfInterval based on a likelihood ratio; RooStats::LikelihoodIntervalPlot Class containing the results of the IntervalCalculator; RooStats::MCMCCalculator Markov Chain Monte Carlo calculator for Bayesian credible intervals; RooStats::MCMCInterval Concrete implementation of a ConfInterval based on MCMC calculation; RooStats::MCMCIntervalPlot Class containing the results of the MCMCCalculator; RooStats::MarkovChain ; RooStats::MaxLikelihoodEstimateTestStat ; RooStats::MetropolisHastings Markov Chain Monte Carlo calculator for Bayesian credible intervals; RooStats::MinNLLTestStat implements the minimum NLL as a test statistic to be used with several tools; RooStats::ModelConfig A class that holds configuration information for a model using a workspace as a store; RooStats::NeymanConstruction Interface for tools setting limits (prod,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ClassIndex.html:44520,test,test,44520,root/html602/ClassIndex.html,https://root.cern,https://root.cern/root/html602/ClassIndex.html,2,['test'],['test']
Testability,"Function Body */; 6575 for (i = 1; i <= fNpar; ++i) { fP[i + jh*fMaxpar - fMaxpar-1] = pnew[i-1]; }; 6576 y[jh-1] = ynew;; 6577 if (ynew < fAmin) {; 6578 for (i = 1; i <= fNpar; ++i) { fX[i-1] = pnew[i-1]; }; 6579 mninex(fX);; 6580 fAmin = ynew;; 6581 fCstatu = ""PROGRESS "";; 6582 jl = jh;; 6583 }; 6584 jh = 1;; 6585 nparp1 = fNpar + 1;; 6586 for (j = 2; j <= nparp1; ++j) { if (y[j-1] > y[jh-1]) jh = j; }; 6587 fEDM = y[jh-1] - y[jl-1];; 6588 if (fEDM <= 0) goto L45;; 6589 for (i = 1; i <= fNpar; ++i) {; 6590 pbig = fP[i-1];; 6591 plit = pbig;; 6592 for (j = 2; j <= nparp1; ++j) {; 6593 if (fP[i + j*fMaxpar - fMaxpar-1] > pbig) pbig = fP[i + j*fMaxpar - fMaxpar-1];; 6594 if (fP[i + j*fMaxpar - fMaxpar-1] < plit) plit = fP[i + j*fMaxpar - fMaxpar-1];; 6595 }; 6596 fDirin[i-1] = pbig - plit;; 6597 }; 6598L40:; 6599 return;; 6600L45:; 6601 if (fISW[4] >= 0) {; 6602 Printf("" FUNCTION VALUE DOES NOT SEEM TO DEPEND ON ANY OF THE %d VARIABLE PARAMETERS."",fNpar);; 6603 Printf("" VERIFY THAT STEP SIZES ARE BIG ENOUGH AND CHECK FCN LOGIC."");; 6604 Printf("" *******************************************************************************"");; 6605 Printf("" *******************************************************************************"");; 6606 }; 6607 goto L40;; 6608}; 6609 ; 6610////////////////////////////////////////////////////////////////////////////////; 6611/// This is a super-portable random number generator; 6612///; 6613/// It should not overflow on any 32-bit machine.; 6614/// The cycle is only ~10**9, so use with care!; 6615/// Note especially that VAL must not be undefined on input.; 6616///; 6617/// Set Default Starting Seed; 6618 ; 6619void TMinuit::mnrn15(Double_t &val, Int_t &inseed); 6620{; 6621 /* Initialized data */; 6622 ; 6623 static std::atomic<Int_t> g_iseed( 12345 );; 6624 ; 6625 Int_t k;; 6626 ; 6627 if (val == 3) {; 6628 // ""entry"" to set seed, flag is VAL=3; 6629 g_iseed.store(inseed, std::memory_order_release);; 6630 } else {; 6631 // Grab the local valu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMinuit_8cxx_source.html:214024,LOG,LOGIC,214024,doc/master/TMinuit_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMinuit_8cxx_source.html,1,['LOG'],['LOGIC']
Testability,"Function)(fXMax); }; 75 ; 76bool BrentMinimizer1D::Minimize( int maxIter, double absTol , double relTol); 77{; 78// Find minimum position iterating until convergence specified by the; 79// absolute and relative tolerance or the maximum number of iteration; 80// is reached.; 81// repeat search (Bracketing + Brent) until max number of search is reached (default is 10); 82// maxITer refers to the iterations inside the Brent algorithm; 83 ; 84 if (!fFunction) {; 85 MATH_ERROR_MSG(""BrentMinimizer1D::Minimize"", ""Function has not been set"");; 86 return false;; 87 }; 88 ; 89 if (fLogScan && fXMin <= 0) {; 90 MATH_ERROR_MSG(""BrentMinimizer1D::Minimize"", ""xmin is < 0 and log scan is set - disable it"");; 91 fLogScan = false;; 92 }; 93 ; 94 fNIter = 0;; 95 fStatus = -1;; 96 ; 97 double xmin = fXMin;; 98 double xmax = fXMax;; 99 ; 100 int maxIter1 = gDefaultNSearch; // external loop (number of search ); 101 int maxIter2 = maxIter; // internal loop inside the Brent algorithm; 102 ; 103 int niter1 = 0;; 104 int niter2 = 0;; 105 bool ok = false;; 106 while (!ok){; 107 if (niter1 > maxIter1){; 108 MATH_ERROR_MSG(""BrentMinimizer1D::Minimize"", ""Search didn't converge"");; 109 fStatus = -2;; 110 return false;; 111 }; 112 double x = BrentMethods::MinimStep(fFunction, 0, xmin, xmax, 0, fNpx,fLogScan);; 113 x = BrentMethods::MinimBrent(fFunction, 0, xmin, xmax, x, 0, ok, niter2, absTol, relTol, maxIter2 );; 114 fNIter += niter2; // count the total number of iterations; 115 niter1++;; 116 fXMinimum = x;; 117 }; 118 ; 119 fStatus = 0;; 120 return true;; 121}; 122 ; 123 ; 124const char * BrentMinimizer1D::Name() const; 125{ return ""BrentMinimizer1D""; }; 126 ; 127} // Namespace Math; 128 ; 129} // Namespace ROOT; BrentMethods.h; BrentMinimizer1D.h; Error.h; MATH_ERROR_MSG#define MATH_ERROR_MSG(loc, str)Definition Error.h:83; IFunction.h; IFunctionfwd.h; f#define f(i)Definition RSha256.hxx:104; xminfloat xminDefinition THbookFile.cxx:95; xmaxfloat xmaxDefinition THbookFile.cxx:95; ROOT::Math::Br",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BrentMinimizer1D_8cxx_source.html:2821,log,log,2821,doc/master/BrentMinimizer1D_8cxx_source.html,https://root.cern,https://root.cern/doc/master/BrentMinimizer1D_8cxx_source.html,1,['log'],['log']
Testability,"FunctionMultiDim>::kLeastSquare; static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::Type_tROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::kLogLikelihood; static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::Type_tROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::kUndefined. private:. const ROOT::Fit::UnBinData&fData; const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction&fFunc; vector<double>fGradfor derivatives; boolfIsExtendedflag for indicating if likelihood is extended; unsigned intfNEffPointsnumber of effective points used in the fit; intfWeightflag to indicate if needs to evaluate using weight or weight squared (default weight = 0). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseFunction * Clone() const; clone the function (need to return Base for Windows). { return new LogLikelihoodFCN(fData,fFunc,fWeight,fIsExtended); }. unsigned int NFitPoints() const; using BaseObjFunction::operator();; effective points used in the fit. { return fNEffPoints; }. double DataElement(const double* x, unsigned int i, double* g) const; i-th likelihood contribution and its gradient. void Gradient(const double* x, double* g) const; need to be virtual to be instantited. void UseSumOfWeightSquare(bool on = true); Use sum of the weight squared in evaluating the likelihood; (this is needed for calculating the errors). double DoEval(const double* x) const. Evaluation of the function (required by interface). double DoDerivative(const double* x, unsigned int icoord) const; for derivatives. » Author: L. Moneta Fri Aug 17 14:29:24 2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html:5270,Log,LogLikelihoodFCN,5270,root/html602/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html602/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,1,['Log'],['LogLikelihoodFCN']
Testability,"Functions inherited from TGWidget;  TGWidget (const TGWidget &tgw);  ; Int_t ClearFlags (Int_t flags);  ; TGWidget & operator= (const TGWidget &tgw);  ; Int_t SetFlags (Int_t flags);  . Protected Attributes; Bool_t fConstrained;  kTRUE if pointer is constrained to slider edges ;  ; Int_t fCz;  vertical pointer position in pixel coordinates ;  ; const TGPicture * fPointerPic;  picture to draw pointer ;  ; Bool_t fRelative;  kTRUE if pointer position is relative to slider ;  ; Double_t fSCz;  vertical pointer position ;  ;  Protected Attributes inherited from TGDoubleVSlider; Int_t fYp;  vertical slider y position in pixel coordinates ;  ;  Protected Attributes inherited from TGDoubleSlider; Bool_t fMarkEnds;  lines marking where stretch zones begin ;  ; Int_t fMove;  1: move min value 2: move max value 3: move min and max value 0: don't move any value ;  ; Double_t fPos;  logical position between fVmin and fVmax ;  ; Int_t fPressPoint;  mouse position at button press event ;  ; Double_t fPressSmax;  logical max position at button press event ;  ; Double_t fPressSmin;  logical min position at button press event ;  ; Int_t fRelPos;  slider position in pixel coordinates ;  ; Bool_t fReversedScale;  reverse which end is min and max ;  ; Int_t fScale;  tick mark scale ;  ; Int_t fScaleType;  tick mark scale type (no, downright, both) ;  ; const TGPicture * fSliderPic;  picture to draw slider ends ;  ; Double_t fSmax;  logical position of max value of Slider ;  ; Double_t fSmin;  logical position of min value of Slider ;  ; Double_t fVmax;  logical upper limit of slider ;  ; Double_t fVmin;  logical lower limit of slider ;  ;  Protected Attributes inherited from TGFrame; Pixel_t fBackground;  frame background color ;  ; Int_t fBorderWidth;  frame border width ;  ; Int_t fDNDState;  EDNDFlags. ;  ; UInt_t fEventMask;  currently active event mask ;  ; TGFrameElement * fFE;  pointer to frame element ;  ; UInt_t fHeight;  frame height ;  ; UInt_t fMaxHeight;  maximal frame heig",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTripleVSlider.html:28793,log,logical,28793,doc/master/classTGTripleVSlider.html,https://root.cern,https://root.cern/doc/master/classTGTripleVSlider.html,7,['log'],['logical']
Testability,"GA"" . ). inline . Definition at line 111 of file Factory.h. ◆ PrintHelpMessage(). void TMVA::Factory::PrintHelpMessage ; (; const TString & ; datasetname, . const TString & ; methodTitle = """" . ); const. Print predefined help message of classifier. ; Iterate over methods and test. ; Definition at line 1333 of file Factory.cxx. ◆ RootBaseDir(). TDirectory * TMVA::Factory::RootBaseDir ; (; ). inline . Definition at line 149 of file Factory.h. ◆ SetInputTreesFromEventAssignTrees(). void TMVA::Factory::SetInputTreesFromEventAssignTrees ; (; ). private . ◆ SetVerbose(). void TMVA::Factory::SetVerbose ; (; Bool_t ; v = kTRUE). Definition at line 343 of file Factory.cxx. ◆ Streamer(). virtual void TMVA::Factory::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TMVA::Configurable. ◆ StreamerNVirtual(). void TMVA::Factory::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 227 of file Factory.h. ◆ TestAllMethods(). void TMVA::Factory::TestAllMethods ; (; ). Evaluates all booked methods on the testing data and adds the output to the Results in the corresponiding DataSet. ; Definition at line 1271 of file Factory.cxx. ◆ TrainAllMethods(). void TMVA::Factory::TrainAllMethods ; (; ). Iterates through all booked methods and calls training. ; Definition at line 1114 of file Factory.cxx. ◆ TrainAllMethodsForClassification(). void TMVA::Factory::TrainAllMethodsForClassification ; (; void ; ). inline . Definition at line 115 of file Factory.h. ◆ TrainAllMethodsForRegression(). void TMVA::Factory::TrainAllMethodsForRegression ; (; void ; ). inline . Definition at line 116 of file Factory.h. ◆ Verbose(). Bool_t TMVA::Factory::Verbose ; (; void ; ); const. inline . Definition at line 134 of file Factory.h. ◆ WriteDataInformation(). void TMVA::Factory::WriteDataInformation ; (; DataSetInfo & ; fDataSetInfo). private . Definition at line 602 of file Factory.cxx. Friends And Related Symbol Documentat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Factory.html:34764,Test,TestAllMethods,34764,doc/master/classTMVA_1_1Factory.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html,1,['Test'],['TestAllMethods']
Testability,"GButton* button = 0); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetRadioButtonExclusive(Bool_t flag = kTRUE); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidSetState(Bool_t state = kTRUE); virtual voidTGGroupFrame::SetTextColor(Pixel_t color, Bool_t local = kTRUE); virtual voidTGGroupFrame::SetTextFont(const char* fontName, Bool_t local = kTRUE); virtual voidTGGroupFrame::SetTextFont(FontStruct_t font, Bool_t local = kTRUE); virtual voidSetTitle(TGString* title); virtual voidSetTitle(const char* title); virtual voidTGGroupFrame::SetTitlePos(TGGroupFrame::ETitlePos pos = kLeft); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidShow(); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGButtonGroup.html:18582,Test,TestBit,18582,root/html534/TGButtonGroup.html,https://root.cern,https://root.cern/root/html534/TGButtonGroup.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"GC; static const TGGC*fgDefaultSelectedGC; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGTextEntry(const TGWindow* p, TGTextBuffer* text, Int_t id = -1, GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t option = kSunkenFrame | kDoubleBorder, Pixel_t back = GetWhitePixel()); Create a text entry widget. It will adopt the TGTextBuffer object; (i.e. the text buffer will be deleted by the text entry widget). TGTextEntry(const TGWindow* parent = 0, const char* text = 0, Int_t id = -1); Simple text entry constructor. TGTextEntry(const TString& contents, const TGWindow* parent, Int_t id = -1); Simple test entry constructor. Notice TString argument comes before the; parent argument (to make this ctor different from the first one taking a; const char*). ~TGTextEntry(); Delete a text entry widget. void Init(); Do default initialization. TGDimension GetDefaultSize() const; Return the default / minimal size of the widget. void SetDefaultSize(UInt_t w, UInt_t h); Set the default / minimal size of the widget. void ReturnPressed(); This signal is emitted when the return or enter key is pressed. void ShiftTabPressed(); This signal is emitted when <SHIFT> and <TAB> keys are pressed. void TabPressed(); This signal is emitted when the <TAB> key is pressed. void TextChanged(const char* text = 0); This signal is emitted every time the text has changed. void CursorOutLeft(); This signal is emitted when cursor is going out of left side. void CursorOutRight(); This signal is emitted when cursor is going out of right side. void CursorOutUp(); This signal is emitted whe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGTextEntry.html:27659,test,test,27659,root/html602/TGTextEntry.html,https://root.cern,https://root.cern/root/html602/TGTextEntry.html,2,['test'],['test']
Testability,"GCheckButton*fCrosshairset crosshair; Int_tTGFrame::fDNDStateEDNDFlags; UInt_tTGWindow::fEditDisabledflags used for ""guibuilding""; TGCheckButton*fEditableset pad editable; UInt_tTGFrame::fEventMaskcurrenty active event mask; TList*TGedFrame::fExtraTabsaddtional tabs in ged editor; TGFrameElement*TGFrame::fFEpointer to frame element; TGCheckButton*fFixedARset fixed aspect ratio; TGedEditor*TGedFrame::fGedEditormanager of this frame; TGCheckButton*fGridXset grid on X; TGCheckButton*fGridYset grid on Y; UInt_tTGFrame::fHeightframe height; Handle_tTGObject::fIdX11/Win32 Window identifier; Bool_tTGedFrame::fInitinit flag for setting signals/slots; Bool_tTGCompositeFrame::fLayoutBrokenno layout manager is used; TGLayoutManager*TGCompositeFrame::fLayoutManagerlayout manager; TList*TGCompositeFrame::fListcontainer of frame elements; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; TGCheckButton*fLogXset log scale on X; TGCheckButton*fLogYset log scale on Y; TGCheckButton*fLogZset log scale on Z; Bool_tTGCompositeFrame::fMapSubwindowskTRUE - map subwindows; UInt_tTGFrame::fMaxHeightmaximal frame height; UInt_tTGFrame::fMaxWidthmaximal frame width; UInt_tTGFrame::fMinHeightminimal frame height; UInt_tTGFrame::fMinWidthminimal frame width; TClass*TGedFrame::fModelClassclass corresponding to instantiated GedFrame; Int_tTGCompositeFrame::fMustCleanupcleanup mode (see EFrameCleanup); TStringTGWindow::fNamename of the window used in SavePrimitive(); Bool_tTGWindow::fNeedRedrawkTRUE if window needs to be redrawn; UInt_tTGFrame::fOptionsframe options; TPad*fPadPointerTPad object; const TGWindow*TGWindow::fParentParent window; Int_tTGedFrame::fPrioritylocation in GedEditor; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; TGCheckButton*fTickXset ticks on X; TGCheckButton*fTickYset ticks on Y; UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TPadEditor.html:20062,log,log,20062,root/html602/TPadEditor.html,https://root.cern,https://root.cern/root/html602/TPadEditor.html,2,['log'],['log']
Testability,"GCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); voidSetMdiButtons(ULong_t buttons); virtual voidTGFrame::SetMinHeight(UInt_t h); voidSetMinimizedX(Int_t x); voidSetMinimizedY(Int_t y); voidSetMinUserPlacement(Bool_t place = kTRUE); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); voidSetPreResizeHeight(Int_t h); voidSetPreResizeWidth(Int_t w); voidSetPreResizeX(Int_t x); voidSetPreResizeY(Int_t y); voidSetResizeMode(Int_t mode = kMdiDefaultResizeMode); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); voidSetWindowIcon(const TGPicture* pic); virtual voidSetWindowName(const char* name); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGMdiDecorFrame(const TGMdiDecorFrame&); TGMdiDecorFrame(TGMdiMainFrame* main, TGMdiFrame* frame, Int_t w, Int_t h, const TGGC* boxGC, UInt_t options = 0, Pixel_t back = GetDefaultFrameBackground()); virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGMdiDecorFrame.html:15519,Test,TestBit,15519,root/html602/TGMdiDecorFrame.html,https://root.cern,https://root.cern/root/html602/TGMdiDecorFrame.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"GFrame::SetDragType(Int_t type); virtual voidTGFrame::SetDrawOption(Option_t* = """"); virtual voidTGFrame::SetDropType(Int_t type); static voidTObject::SetDtorOnly(void* obj); virtual voidTGFrame::SetEditable(Bool_t); virtual voidTGWindow::SetEditDisabled(UInt_t on = kEditDisable); voidTGSplitter::SetExternalHandler(Bool_t x); virtual voidTGFrame::SetForegroundColor(Pixel_t); virtual voidTGVSplitter::SetFrame(TGFrame* frame, Bool_t left); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGFrame::SetLayoutBroken(Bool_t = kTRUE); virtual voidTGWindow::SetMapSubwindows(Bool_t); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGVFileSplitter(const TGVFileSplitter&); TGVFileSplitter(const TGWindow* p = 0, UInt_t w = 4, UInt_t h = 4, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGVFileSplitter.html:13431,Test,TestBit,13431,root/html602/TGVFileSplitter.html,https://root.cern,https://root.cern/root/html602/TGVFileSplitter.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"GFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidSetHsbPosition(Int_t newPos); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPageDimension(const TGDimension& dim); virtual voidSetPageDimension(UInt_t w, UInt_t h); virtual voidSetPagePosition(const TGPosition& pos); virtual voidSetPagePosition(Int_t x, Int_t y); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidSetVsbPosition(Int_t newPos); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp); virtual voidSpacePressed(TGFrame*)SIGNAL ; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidUnSelectAll()SIGNAL ; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGContainer.html:17506,Test,TestBit,17506,root/html528/TGContainer.html,https://root.cern,https://root.cern/root/html528/TGContainer.html,6,['Test'],"['TestBit', 'TestBits']"
Testability,"GFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGedFrame::SetGedEditor(TGedEditor* ed); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidSetModel(TObject* obj); voidTGedFrame::SetModelClass(TClass* mcl); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGeoCombiTransEditor(const TGeoCombiTransEditor&); TGeoCombiTransEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTGeoGedFrame::Update(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoCombiTransEditor.html:14967,Test,TestBit,14967,root/html602/TGeoCombiTransEditor.html,https://root.cern,https://root.cern/root/html602/TGeoCombiTransEditor.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"GFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TAxisEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor of axis attribute GUI. ~TAxisEditor(); Destructor of axis editor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Pick up the used values of axis attributes. void DoAxisColor(Pixel_t color); Slot connected to the axis color. void DoTickLength(); Slot connected to the tick length settings. void DoTicks(); Slot connected to the ticks draw settings. void DoDivisions(); Slot connected to the number of divisions. void DoLogAxis(); Slot for Log scale setting. void DoMoreLog(); Slot connected to more Log labels flag. void DoTitle(const char* text); Slot connected to the axis color. void DoTitleColor(Pixel_t color); Slot connected to the title color. void DoTitleSize(); Slot connected to the title font size. void DoTitleFont(Int_t font); Slot connected to the title font. void DoTitleOffset(); Slot connected to the title offset. void DoTitleCentered(); Slot connected to centered title option. void DoTitleRotated(); Slot connected to the title rotation. void DoLabelColor(Pixel_t color); Slot connected to the label color. void DoLabelSize(); Slot connected to the label size. void DoLabelFont(Int_t font); Slot connected to the label font. void DoLabelOffset(); Slot connected to the label offset. void DoNoExponent(); Slot connected to the labels' exponent flag. void DoDecimal(Bool_t on); Slot connected to the decimal part setting. TAxisEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground())",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TAxisEditor.html:23811,Log,Log,23811,root/html602/TAxisEditor.html,https://root.cern,https://root.cern/root/html602/TAxisEditor.html,2,['Log'],['Log']
Testability,"GMainFrame::SetIconName(const char* name); const TGPicture*TGMainFrame::SetIconPixmap(const char* iconName); voidTGMainFrame::SetIconPixmap(char** xpm_array); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); voidTGMainFrame::SetMWMHints(UInt_t value, UInt_t funcs, UInt_t input); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGMainFrame::SetWindowName(const char* name = 0); voidTGMainFrame::SetWMPosition(Int_t x, Int_t y); voidTGMainFrame::SetWMSize(UInt_t w, UInt_t h); voidTGMainFrame::SetWMSizeHints(UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc); voidTGMainFrame::SetWMState(EInitialState state); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TAdvancedGraphicsDialog.html:15993,Test,TestBit,15993,root/html528/TAdvancedGraphicsDialog.html,https://root.cern,https://root.cern/root/html528/TAdvancedGraphicsDialog.html,138,['Test'],"['TestBit', 'TestBits']"
Testability,"GPicture*TGMainFrame::SetIconPixmap(const char* iconName); voidTGMainFrame::SetIconPixmap(char** xpm_array); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); voidSetModel(TObject* model); voidTGMainFrame::SetMWMHints(UInt_t value, UInt_t funcs, UInt_t input); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGMainFrame::SetWindowName(const char* name = 0); voidTGMainFrame::SetWMPosition(Int_t x, Int_t y); voidTGMainFrame::SetWMSize(UInt_t w, UInt_t h); voidTGMainFrame::SetWMSizeHints(UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc); voidTGMainFrame::SetWMState(EInitialState state); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidShow(); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoTransientPanel.html:16373,Test,TestBit,16373,root/html528/TGeoTransientPanel.html,https://root.cern,https://root.cern/root/html528/TGeoTransientPanel.html,6,['Test'],"['TestBit', 'TestBits']"
Testability,"GPicture*TGMainFrame::SetIconPixmap(const char* iconName); voidTGMainFrame::SetIconPixmap(char** xpm_array); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); voidTGMainFrame::SetMWMHints(UInt_t value, UInt_t funcs, UInt_t input); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGMainFrame::SetWindowName(const char* name = 0); voidTGMainFrame::SetWMPosition(Int_t x, Int_t y); voidTGMainFrame::SetWMSize(UInt_t w, UInt_t h); voidTGMainFrame::SetWMSizeHints(UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc); voidTGMainFrame::SetWMState(EInitialState state); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTextEntered(const char* text)SIGNAL ; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGSearchDialog.html:16198,Test,TestBit,16198,root/html528/TGSearchDialog.html,https://root.cern,https://root.cern/root/html528/TGSearchDialog.html,6,['Test'],"['TestBit', 'TestBits']"
Testability,"GPicture*TGMainFrame::SetIconPixmap(const char* iconName); voidTGMainFrame::SetIconPixmap(char** xpm_array); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); voidTGMainFrame::SetMWMHints(UInt_t value, UInt_t funcs, UInt_t input); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGMainFrame::SetWindowName(const char* name = 0); voidTGMainFrame::SetWMPosition(Int_t x, Int_t y); voidTGMainFrame::SetWMSize(UInt_t w, UInt_t h); voidTGMainFrame::SetWMSizeHints(UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc); voidTGMainFrame::SetWMState(EInitialState state); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector&); voidStartStop(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); voidUpdate(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGRecorder.html:15794,Test,TestBit,15794,root/html534/TGRecorder.html,https://root.cern,https://root.cern/root/html534/TGRecorder.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"GRegion&operator-=(const TGRegion& r); TGRegion&operator=(const TGRegion& r); Bool_toperator==(const TGRegion& r) const; TGRegionoperator^(const TGRegion& r) const; TGRegion&operator^=(const TGRegion& r); TGRegionoperator|(const TGRegion& r) const; TGRegion&operator|=(const TGRegion& r); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGRegionSubtract(const TGRegion& r) const; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGRegion(); TGRegion(const TGRegion& reg); TGRegion(Int_t n, TPoint* points, Bool_t winding = kFALSE); TGRegion(const TArrayS& x, const TArrayS& y, Bool_t winding = kFALSE); TGRegion(Int_t n, Int_t* x, Int_t* y, Bool_t winding = kFALSE); TGRegion(Int_t x, Int_t y, UInt_t w, UInt_t h, TGRegion::ERegionType = kRectangle); TGRegionUnite(const TGRegion& r) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGRegion.html:5221,Test,TestBit,5221,root/html602/TGRegion.html,https://root.cern,https://root.cern/root/html602/TGRegion.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,GSLMinimizer1D. ROOT::Math::GSLNLSMinimizer. ROOT::Math::GSLQRngNiederreiter2. ROOT::Math::GSLQRngSobol. ROOT::Math::GSLRngGFSR4. ROOT::Math::GSLRngMT. ROOT::Math::GSLRngRanLux. ROOT::Math::GSLRngRanLuxD1. ROOT::Math::GSLRngRanLuxD2. ROOT::Math::GSLRngRanLuxS1. ROOT::Math::GSLRngRanLuxS2. ROOT::Math::GSLRngTaus. ROOT::Math::GSLRootFinder←. ROOT::Math::Roots::Bisection. ROOT::Math::Roots::Brent. ROOT::Math::Roots::FalsePos. ROOT::Math::GSLRootFinderDeriv←. ROOT::Math::Roots::Newton. ROOT::Math::Roots::Secant. ROOT::Math::Roots::Steffenson. ROOT::Math::GSLSimAnMinimizer. ROOT::Math::GaussIntegrator←. ROOT::Math::GaussLegendreIntegrator. ROOT::Math::GaussLegendreIntegrator. ROOT::Math::GenAlgoOptions. ROOT::Math::GeneticMinimizer. ROOT::Math::GradFunctor. ROOT::Math::GradFunctor1D. ROOT::Math::IGradientFunctionMultiDim←. ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>; ←. ROOT::Fit::Chi2FCN<ROOT::Math::IGradientFunctionMultiDim>. ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. ROOT::Math::GradFunctor. ROOT::Math::LSResidualFunc. ROOT::Math::MinimTransformFunction. TPyMultiGradFunction. ROOT::Math::IGradientFunctionOneDim←. ROOT::Math::GradFunctor1D. ROOT::Math::IParametricFunctionMultiDim←. ROOT::Math::IParametricGradFunctionMultiDim; ←. ROOT::Math::WrappedMultiTF1. ROOT::Math::IParametricFunctionOneDim←. ROOT::Math::IParametricGradFunctionOneDim; ←. ROOT::Math::ParamFunction<ROOT::Math::IParametricGradFunctionOneDim>; ←. ROOT::Math::Polynomial. ROOT::Math::WrappedTF1. ROOT::Math::VavilovAccurateCdf. ROOT::Math::VavilovAccuratePdf. ROOT::Math::VavilovAccurateQuantile. ROOT::Math::IParametricGradFunctionMultiDim←. ROOT::Math::WrappedMultiTF1. ROOT::Math::IParametricGradFunctionOneDim←. ROOT::Math::ParamFunction<ROOT::Math::IParametricGradFunctionOneDim>; ←. ROOT::Math::Polynomial. ROOT::Math::WrappedTF1. ROOT::Math::IntegratorMultiDimOptions. ROOT::Math:,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ClassHierarchy.html:2513,Log,LogLikelihoodFCN,2513,root/html534/ClassHierarchy.html,https://root.cern,https://root.cern/root/html534/ClassHierarchy.html,2,['Log'],['LogLikelihoodFCN']
Testability,"GWindow::SetBackgroundPixmap(Pixmap_t pixmap); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTGFrame::SetCleanup(Int_t = kLocalCleanup); voidTGFrame::SetDNDSource(Bool_t onoff); voidTGFrame::SetDNDTarget(Bool_t onoff); virtual voidTGFrame::SetDragType(Int_t type); virtual voidTGFrame::SetDrawOption(Option_t* = """"); virtual voidTGFrame::SetDropType(Int_t type); static voidTObject::SetDtorOnly(void* obj); virtual voidTGFrame::SetEditable(Bool_t); virtual voidTGWindow::SetEditDisabled(UInt_t on = kEditDisable); static voidSetFillStyle(TGGC* gc, Style_t fstyle); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGFrame::SetLayoutBroken(Bool_t = kTRUE); virtual voidTGWindow::SetMapSubwindows(Bool_t); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGedPatternFrame.html:13495,Test,TestBit,13495,root/html528/TGedPatternFrame.html,https://root.cern,https://root.cern/root/html528/TGedPatternFrame.html,6,['Test'],"['TestBit', 'TestBits']"
Testability,"Gauss@ kGauss; TMVA::DNN::EActivationFunction::kTanh@ kTanh; TMVA::DNN::EActivationFunction::kFastTanh@ kFastTanh; TMVA::DNN::EActivationFunction::kSigmoid@ kSigmoid; TMVA::DNN::EActivationFunction::kIdentity@ kIdentity; TMVA::DNN::EActivationFunction::kSoftSign@ kSoftSign; TMVA::DNN::EActivationFunction::kSymmRelu@ kSymmRelu; TMVA::DNN::ELossFunctionELossFunctionEnum that represents objective functions for the net, i.e.Definition Functions.h:57; TMVA::DNN::TMVAInput_tstd::tuple< const std::vector< Event * > &, const DataSetInfo & > TMVAInput_tDefinition DataLoader.h:40; TMVAcreate variable transformationsDefinition GeneticMinimizer.h:22; TMVA::gConfigConfig & gConfig(); TMVA::gToolsTools & gTools(); TMVA::fetchValueTmpTString fetchValueTmp(const std::map< TString, TString > &keyValueMap, TString key)Definition MethodDL.cxx:75; TMVA::EndlMsgLogger & Endl(MsgLogger &ml)Definition MsgLogger.h:148; TMath::IsNaNBool_t IsNaN(Double_t x)Definition TMath.h:892; TMath::LogDouble_t Log(Double_t x)Returns the natural logarithm of x.Definition TMath.h:756; TMVA::TTrainingSettingsAll of the options that can be specified in the training string.Definition MethodDL.h:72; TMVA::TTrainingSettings::batchSizesize_t batchSizeDefinition MethodDL.h:73; TMVA::TTrainingSettings::optimizerParamsstd::map< TString, double > optimizerParamsDefinition MethodDL.h:84; TMVA::TTrainingSettings::optimizerNameTString optimizerNameDefinition MethodDL.h:79; TMVA::TTrainingSettings::optimizerDNN::EOptimizer optimizerDefinition MethodDL.h:78; TMVA::TTrainingSettings::maxEpochssize_t maxEpochsDefinition MethodDL.h:76; TMVA::TTrainingSettings::momentumDouble_t momentumDefinition MethodDL.h:81; TMVA::TTrainingSettings::weightDecayDouble_t weightDecayDefinition MethodDL.h:82; TMVA::TTrainingSettings::testIntervalsize_t testIntervalDefinition MethodDL.h:74; TMVA::TTrainingSettings::regularizationDNN::ERegularization regularizationDefinition MethodDL.h:77; TMVA::TTrainingSettings::convergenceStepssize_t conver",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDL_8cxx_source.html:121028,Log,Log,121028,doc/master/MethodDL_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDL_8cxx_source.html,2,"['Log', 'log']","['Log', 'logarithm']"
Testability,"GenContext*modelGenContext(const RooAbsAnaConvPdf& convPdf, const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual voidRooResolutionModel::normLeafServerList(RooArgSet& list) const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& te",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooTruthModel.html:23313,test,testArg,23313,root/html534/RooTruthModel.html,https://root.cern,https://root.cern/root/html534/RooTruthModel.html,1,['test'],['testArg']
Testability,"GenContext*modelGenContext(const RooAbsAnaConvPdf& convPdf, const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual voidRooResolutionModel::normLeafServerList(RooArgSet& list) const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooTruthModel&operator=(const RooTruthModel&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooTruthModel.html:23159,test,testArg,23159,root/html602/RooTruthModel.html,https://root.cern,https://root.cern/root/html602/RooTruthModel.html,2,['test'],['testArg']
Testability,"GeneticAlgorithm. class TMVA::GeneticAlgorithm. Base definition for genetic algorithm. Function Members (Methods); public:. virtual~GeneticAlgorithm(); virtual Double_tCalculateFitness(); static TClass*Class(); virtual voidEvolution(); TMVA::GeneticAlgorithmGeneticAlgorithm(const TMVA::GeneticAlgorithm&); TMVA::GeneticAlgorithmGeneticAlgorithm(TMVA::IFitterTarget& target, Int_t populationSize, const vector<TMVA::Interval*>& ranges, UInt_t seed = 0); TMVA::GeneticPopulation&GetGeneticPopulation(); Bool_tGetMakeCopies(); Double_tGetSpread() const; virtual Bool_tHasConverged(Int_t steps = 10, Double_t ratio = 0.1); voidInit(); virtual TClass*IsA() const; virtual Double_tNewFitness(Double_t oldValue, Double_t newValue); voidSetMakeCopies(Bool_t s); voidSetSpread(Double_t s); virtual voidShowMembers(TMemberInspector& insp); virtual Double_tSpreadControl(Int_t steps, Int_t ofSteps, Double_t factor); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. TMVA::MsgLogger&Log() const. Data Members; public:. Int_tfConvCounterconverging? ... keeps track of the number of improvements. protected:. Double_tfBestFitness; Double_tfConvValuekeeps track of the quantity of improvement; Bool_tfFirstTimeif true its the first time, so no evolution yet; TMVA::IFitterTarget&fFitterTargetthe fitter target; Double_tfLastResultremembers the last obtained result (for internal use); TMVA::MsgLogger*fLoggermessage logger; Bool_tfMakeCopiesif true, the population will make copies of the first individuals; Bool_tfMirrornew values for mutation are mirror-mapped if outside of constraints; TMVA::GeneticPopulationfPopulationcontains and controls the ""individual""; Int_tfPopulationSizethe size of the population; const vector<TMVA::Interval*>&fRangesparameter ranges; Double_tfSpreadregulates the spread of the value change at mutation (sigma); deque<Int_t>fSuccessListto adjust the stepSize . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__GeneticAlgorithm.html:1258,Log,Log,1258,root/html528/TMVA__GeneticAlgorithm.html,https://root.cern,https://root.cern/root/html528/TMVA__GeneticAlgorithm.html,3,['Log'],['Log']
Testability,"GeneticGenes*GetGenes(Int_t index); Int_tGetPopulationSize() const; const vector<TMVA::GeneticRange*>&GetRanges() const; vector<TMVA::GeneticRange*>&GetRanges(); voidGiveHint(vector<Double_t>& hint, Double_t fitness = 0); virtual TClass*IsA() const; voidMakeChildren(); voidMakeCopies(int number); voidMutate(Double_t probability = 20, Int_t startIndex = 0, Bool_t near = kFALSE, Double_t spread = 0.1, Bool_t mirror = kFALSE); voidNextGeneration(); TMVA::GeneticPopulation&operator=(const TMVA::GeneticPopulation&); voidPrint(Int_t untilIndex = -1); voidPrint(ostream& out, Int_t utilIndex = -1); voidSetRandomSeed(UInt_t seed = 0); virtual voidShowMembers(TMemberInspector&); voidSort(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); voidTrimPopulation(); vector<Double_t>VariableDistribution(Int_t varNumber); TH1F*VariableDistribution(Int_t varNumber, Int_t bins, Int_t min, Int_t max). private:. TMVA::MsgLogger&Log() const; TMVA::GeneticGenesMakeSex(TMVA::GeneticGenes male, TMVA::GeneticGenes female). Data Members; private:. vector<TMVA::GeneticGenes>fGenePoolthe ""genePool"" where the individuals of the current generation are stored; TMVA::MsgLogger*fLoggermessage logger; Int_tfPopulationSizeLimit; TRandom3*fRandomGeneratorrandom Generator for this population; vector<TMVA::GeneticRange*>fRangescontains the ranges inbetween the values of the coefficients have to be. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GeneticPopulation(const vector<TMVA::Interval*>& ranges, Int_t size, UInt_t seed = 0); Constructor. ~GeneticPopulation(); destructor. void SetRandomSeed(UInt_t seed = 0); the random seed of the random generator. void MakeCopies(int number); produces offspring which is are copies of their parents; Parameters:; int number : the number of the last individual to be copied. void MakeChildren(); does what the name says,... it creates children out of members of the; current generation; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__GeneticPopulation.html:1827,Log,Log,1827,root/html534/TMVA__GeneticPopulation.html,https://root.cern,https://root.cern/root/html534/TMVA__GeneticPopulation.html,1,['Log'],['Log']
Testability,"GeoBBox. ◆ DistFromOutside_v(). void TGeoEltu::DistFromOutside_v ; (; const Double_t * ; points, . const Double_t * ; dirs, . Double_t * ; dists, . Int_t ; vecsize, . Double_t * ; step . ); const. overridevirtual . Reimplemented from TGeoBBox. ◆ Divide(). TGeoVolume * TGeoEltu::Divide ; (; TGeoVolume * ; voldiv, . const char * ; divname, . Int_t ; iaxis, . Int_t ; ndiv, . Double_t ; start, . Double_t ; step . ). overridevirtual . Reimplemented from TGeoBBox. ◆ GetA(). virtual Double_t TGeoEltu::GetA ; (; ); const. inlinevirtual . Definition at line 47 of file TGeoEltu.h. ◆ GetB(). virtual Double_t TGeoEltu::GetB ; (; ); const. inlinevirtual . Definition at line 48 of file TGeoEltu.h. ◆ GetBoundingCylinder(). void TGeoEltu::GetBoundingCylinder ; (; Double_t * ; param); const. overridevirtual . Reimplemented from TGeoBBox. ◆ GetBuffer3D(). const TBuffer3D & TGeoEltu::GetBuffer3D ; (; Int_t ; reqSections, . Bool_t ; localFrame . ); const. overridevirtual . Stub implementation to avoid forcing implementation at this stage. ; Reimplemented from TGeoBBox. ◆ GetMakeRuntimeShape(). TGeoShape * TGeoEltu::GetMakeRuntimeShape ; (; TGeoShape * ; mother, . TGeoMatrix * ; mat . ); const. overridevirtual . Reimplemented from TGeoBBox. ◆ GetMeshNumbers(). void TGeoEltu::GetMeshNumbers ; (; Int_t & ; nvert, . Int_t & ; nsegs, . Int_t & ; npols . ); const. overridevirtual . Reimplemented from TGeoBBox. ◆ GetNmeshVertices(). Int_t TGeoEltu::GetNmeshVertices ; (; ); const. overridevirtual . Reimplemented from TGeoBBox. ◆ GetPointsOnSegments(). Bool_t TGeoEltu::GetPointsOnSegments ; (; Int_t ; , . Double_t * ;  . ); const. inlineoverridevirtual . Reimplemented from TGeoBBox.; Definition at line 54 of file TGeoEltu.h. ◆ InspectShape(). void TGeoEltu::InspectShape ; (; ); const. overridevirtual . Reimplemented from TGeoBBox. ◆ IsA(). TClass * TGeoEltu::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGeoBBox.; Definition at line 65 of",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoEltu.html:30015,Stub,Stub,30015,doc/master/classTGeoEltu.html,https://root.cern,https://root.cern/doc/master/classTGeoEltu.html,1,['Stub'],['Stub']
Testability,"GeoBBox::SetBoxDimensions(Double_t dx, Double_t dy, Double_t dz, Double_t* origin = 0); voidTGeoBBox::SetBoxPoints(Double_t* points) const; virtual voidSetDimensions(Double_t* param); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTGeoShape::SetId(Int_t id); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPoints(Double_t* points) const; virtual voidSetPoints(Float_t* points) const; voidTGeoShape::SetRuntime(Bool_t flag = kTRUE); virtual voidSetSegsAndPols(TBuffer3D& buff) const; voidTGeoShape::SetShapeBit(UInt_t f); voidTGeoShape::SetShapeBit(UInt_t f, Bool_t set); virtual voidTNamed::SetTitle(const char* title = """")MENU ; static voidTGeoShape::SetTransform(TGeoMatrix* matrix); virtual voidTObject::SetUniqueID(UInt_t uid); Int_tTGeoShape::ShapeDistancetoPrimitive(Int_t numpoints, Int_t px, Int_t py) const; virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidSizeof3D() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTGeoShape::TestShapeBit(UInt_t f) const; Int_tTGeoShape::TestShapeBits(UInt_t f) const; TGeoPcon(); TGeoPcon(Double_t* params); TGeoPcon(Double_t phi, Double_t dphi, Int_t nz); TGeoPcon(const char* name, Double_t phi, Double_t dphi, Int_t nz); static Double_tTGeoShape::Tolerance(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; Double_t&Z(Int_t ipl).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoPcon.html:10583,Test,TestBit,10583,root/html602/TGeoPcon.html,https://root.cern,https://root.cern/root/html602/TGeoPcon.html,8,['Test'],"['TestBit', 'TestBits', 'TestShapeBit', 'TestShapeBits']"
Testability,"GeoElement::~TGeoElement~TGeoElement() overridedestructorDefinition TGeoElement.cxx:156; TGeoIsotopeDefinition TGeoElement.h:103; TGeoIsotope::fADouble_t fADefinition TGeoElement.h:107; TGeoIsotope::~TGeoIsotope~TGeoIsotope() overrideDefinition TGeoElement.h:112; TGeoIsotope::TGeoIsotopeTGeoIsotope()Dummy I/O constructor.Definition TGeoElement.cxx:336; TGeoIsotope::GetZInt_t GetZ() constDefinition TGeoElement.h:114; TGeoIsotope::GetNInt_t GetN() constDefinition TGeoElement.h:115; TGeoIsotope::GetADouble_t GetA() constDefinition TGeoElement.h:116; TGeoIsotope::fZInt_t fZDefinition TGeoElement.h:105; TGeoIsotope::FindIsotopestatic TGeoIsotope * FindIsotope(const char *name)Find existing isotope by name.Definition TGeoElement.cxx:353; TGeoIsotope::fNInt_t fNDefinition TGeoElement.h:106; TGeoIsotope::Printvoid Print(Option_t *option="""") const overridePrint this isotope.Definition TGeoElement.cxx:364; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TNamed::fTitleTString fTitleDefinition TNamed.h:33; TObjArrayAn array of TObjects.Definition TObjArray.h:31; TObjArray::AtTObject * At(Int_t idx) const overrideDefinition TObjArray.h:164; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::TestBitR__ALWAYS_INLINE Bool_t TestBit(UInt_t f) constDefinition TObject.h:199; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; bool; double; int; unsigned int; nconst Int_t nDefinition legend1.C:16; TGeoBatemanSol::BtCoef_tDefinition TGeoElement.h:288; TGeoBatemanSol::BtCoef_t::cnDouble_t cnDefinition TGeoElement.h:289; TGeoBatemanSol::BtCoef_t::lambdaDouble_t lambdaDefinition TGeoElement.h:290; Drawth1 Draw(). geomgeomincTGeoElement.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:13 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoElement_8h_source.html:39829,Test,TestBit,39829,doc/master/TGeoElement_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoElement_8h_source.html,1,['Test'],['TestBit']
Testability,"GeoIdentity. 18.4.4 Ownership of Geometry Objects; The class TGeoManager class contains the entire API needed for building and tracking geometry. It defines a global pointer gGeoManager in order to be fully accessible from external code. The manager class is the owner of all geometry objects defined in a session; therefore, users must not try to control their deletion. It contains lists of media, materials, transformations, shapes and volumes. A special case is the one of geometrical transformations. When creating a matrix or a translation, this is by default owned by external objects. The manager class becomes owner of all transformations used for positioning volumes. In order to force the ownership for other transformations, one can use TGeoMatrix::RegisterYourself() method. Do not be therefore surprised that some transformations cannot be found by name when creating a composite shape for instance if you did not register them after creation.; Logical nodes (positioned volumes) are created and destroyed by the TGeoVolume class. Physical nodes and their global transformations are subjected to a caching mechanism due to the sometimes very large memory requirements of logical graph expansion. The total number of physical instances of volumes triggers the caching mechanism and the cache manager is a client of TGeoManager. The manager class also controls the drawing/checking package (TGeoPainter client). This is linked with ROOT graphical libraries loaded on demand in order to control visualization actions.; 18.5 Navigation and Tracking; Tracking is the feature allowing the transport of a given particle knowing its kinematics. A state is determined by any combination of the position \(\vec{r}\) and direction \(\vec{n}\) with respect to the world reference frame. The direction \(\vec{n}\) must be a unit vector having as components the director cosines. The full classification of a given state will provide the following information: the deepest physical node containing the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:969785,Log,Logical,969785,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['Log'],['Logical']
Testability,"GeoManager::DoRestoreStatevoid DoRestoreState()Restore a backed-up state without affecting the cache stack.Definition TGeoManager.cxx:1106; TGeoManager::GetCurrentNodeIdInt_t GetCurrentNodeId() constGet the unique ID of the current node.Definition TGeoManager.cxx:1663; TGeoManager::GetAlignableEntryTGeoPNEntry * GetAlignableEntry(const char *name) constRetrieves an existing alignable object.Definition TGeoManager.cxx:3370; TGeoManager::fMasterVolumeTGeoVolume * fMasterVolumetop physical nodeDefinition TGeoManager.h:127; TGeoManager::FindTrackWithIdTVirtualGeoTrack * FindTrackWithId(Int_t id) constSearch the track hierarchy to find the track with the given id.Definition TGeoManager.cxx:2180; TGeoManager::fArrayPNETObjArray * fArrayPNEDefinition TGeoManager.h:139; TGeoManager::IsStepEnteringBool_t IsStepEntering() constDefinition TGeoManager.h:404; TGeoManager::GetLastPointconst Double_t * GetLastPoint() constDefinition TGeoManager.h:372; TGeoManager::TestOverlapsvoid TestOverlaps(const char *path="""")Geometry overlap checker based on sampling.Definition TGeoManager.cxx:1950; TGeoManager::GetDefaultUnitsstatic EDefaultUnits GetDefaultUnits()Definition TGeoManager.cxx:4314; TGeoManager::RemoveMaterialvoid RemoveMaterial(Int_t index)Remove material at given index.Definition TGeoManager.cxx:3086; TGeoManager::GetListOfMediaTList * GetListOfMedia() constDefinition TGeoManager.h:472; TGeoManager::SetCldirCheckedvoid SetCldirChecked(Double_t *dir)Definition TGeoManager.h:523; TGeoManager::GetCurrentDirectionconst Double_t * GetCurrentDirection() constDefinition TGeoManager.h:502; TGeoManager::GetElementTableTGeoElementTable * GetElementTable()Returns material table. Creates it if not existing.Definition TGeoManager.cxx:3624; TGeoManager::SetUserPaintVolumevoid SetUserPaintVolume(TGeoVolume *vol)Definition TGeoManager.h:235; TGeoManager::fNtracksInt_t fNtracksDefinition TGeoManager.h:74; TGeoManager::fHashPNETHashList * fHashPNEhash list of group volumes providing fast searchD",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoManager_8h_source.html:42983,Test,TestOverlapsvoid,42983,doc/master/TGeoManager_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoManager_8h_source.html,2,['Test'],"['TestOverlaps', 'TestOverlapsvoid']"
Testability,"GeoRotation = BIT(18),; 45 kGeoScale = BIT(19),; 46 kGeoReflection = BIT(20),; 47 kGeoRegistered = BIT(21),; 48 kGeoSavePrimitive = BIT(22),; 49 kGeoMatrixOwned = BIT(23),; 50 kGeoCombiTrans = kGeoTranslation | kGeoRotation,; 51 kGeoGenTrans = kGeoTranslation | kGeoRotation | kGeoScale,; 52 kGeoMatrixBits = kGeoShared | kGeoGenTrans | kGeoReflection | kGeoRegistered | kGeoSavePrimitive | kGeoMatrixOwned; 53 };; 54 ; 55protected:; 56 TGeoMatrix(const TGeoMatrix &other);; 57 ; 58public:; 59 TGeoMatrix();; 60 TGeoMatrix(const char *name);; 61 ~TGeoMatrix() override;; 62 ; 63 Bool_t IsIdentity() const { return !TestBit(kGeoGenTrans); }; 64 Bool_t IsTranslation() const { return TestBit(kGeoTranslation); }; 65 Bool_t IsRotation() const { return TestBit(kGeoRotation); }; 66 Bool_t IsReflection() const { return TestBit(kGeoReflection); }; 67 Bool_t IsScale() const { return TestBit(kGeoScale); }; 68 Bool_t IsShared() const { return TestBit(kGeoShared); }; 69 Bool_t IsOwned() const { return TestBit(kGeoMatrixOwned); }; 70 Bool_t IsCombi() const { return (TestBit(kGeoTranslation) && TestBit(kGeoRotation)); }; 71 Bool_t IsGeneral() const { return (TestBit(kGeoTranslation) && TestBit(kGeoRotation) && TestBit(kGeoScale)); }; 72 Bool_t IsRegistered() const { return TestBit(kGeoRegistered); }; 73 Bool_t IsRotAboutZ() const;; 74 void GetHomogenousMatrix(Double_t *hmat) const;; 75 const char *GetPointerName() const;; 76 ; 77 virtual Int_t GetByteCount() const;; 78 virtual const Double_t *GetTranslation() const = 0;; 79 virtual const Double_t *GetRotationMatrix() const = 0;; 80 virtual const Double_t *GetScale() const = 0;; 81 virtual TGeoHMatrix Inverse() const = 0;; 82 virtual void LocalToMaster(const Double_t *local, Double_t *master) const;; 83 virtual void LocalToMasterVect(const Double_t *local, Double_t *master) const;; 84 virtual void LocalToMasterBomb(const Double_t *local, Double_t *master) const;; 85 virtual TGeoMatrix *MakeClone() const = 0;; 86 virtual void MasterToLocal(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoMatrix_8h_source.html:2677,Test,TestBit,2677,doc/master/TGeoMatrix_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoMatrix_8h_source.html,1,['Test'],['TestBit']
Testability,"GeoShapeProjected(); voidTObject::AbstractMethod(const char* method) const; virtual Bool_tTEveElementList::AcceptElement(TEveElement* el); virtual voidTEveElement::AddElement(TEveElement* el); virtual TGListTreeItem*TEveElement::AddIntoListTree(TGListTree* ltree, TGListTreeItem* parent_lti); virtual TGListTreeItem*TEveElement::AddIntoListTree(TGListTree* ltree, TEveElement* parent); virtual TGListTreeItem*TEveElement::AddIntoListTrees(TEveElement* parent); virtual voidTEveElement::AddParent(TEveElement* re); virtual voidTEveProjectable::AddProjected(TEveProjected* p); virtual voidTEveProjectable::AddProjectedsToSet(set<TEveElement*>& set); virtual voidTEveElement::AddStamp(UChar_t bits); virtual voidTEveElement::Annihilate(); virtual voidTEveElement::AnnihilateElements(); virtual voidTEveProjectable::AnnihilateProjecteds(); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); Float_t*TAttBBox::AssertBBox(); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; static voidTEveShape::CheckAndFixBoxOrientationEv(TEveVector* box); static voidTEveShape::CheckAndFixBoxOrientationFv(Float_t** box); virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TEveGeoShapeProjected.html:1447,Assert,AssertBBox,1447,root/html530/TEveGeoShapeProjected.html,https://root.cern,https://root.cern/root/html530/TEveGeoShapeProjected.html,3,['Assert'],['AssertBBox']
Testability,"GeoShapeProjected(); voidTObject::AbstractMethod(const char* method) const; virtual Bool_tTEveElementList::AcceptElement(TEveElement* el); virtual voidTEveElement::AddElement(TEveElement* el); virtual TGListTreeItem*TEveElement::AddIntoListTree(TGListTree* ltree, TGListTreeItem* parent_lti); virtual TGListTreeItem*TEveElement::AddIntoListTree(TGListTree* ltree, TEveElement* parent); virtual TGListTreeItem*TEveElement::AddIntoListTrees(TEveElement* parent); virtual voidTEveElement::AddParent(TEveElement* re); virtual voidTEveProjectable::AddProjected(TEveProjected* p); virtual voidTEveProjectable::AddProjectedsToSet(set<TEveElement*>& set); virtual voidTEveElement::AddStamp(UChar_t bits); virtual voidTEveElement::Annihilate(); virtual voidTEveElement::AnnihilateElements(); virtual voidTEveProjectable::AnnihilateProjecteds(); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); Float_t*TAttBBox::AssertBBox(); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; static voidTEveShape::CheckAndFixBoxOrientationEv(TEveVector[8] box); static voidTEveShape::CheckAndFixBoxOrientationFv(Float_t[8][3] box); virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveGeoShapeProjected.html:1422,Assert,AssertBBox,1422,root/html602/TEveGeoShapeProjected.html,https://root.cern,https://root.cern/root/html602/TEveGeoShapeProjected.html,2,['Assert'],['AssertBBox']
Testability,"GeoShapeProjected(); voidTObject::AbstractMethod(const char* method) const; virtual Bool_tTEveElementList::AcceptElement(TEveElement* el); virtual voidTEveElement::AddElement(TEveElement* el); virtual TGListTreeItem*TEveElement::AddIntoListTree(TGListTree* ltree, TGListTreeItem* parent_lti); virtual TGListTreeItem*TEveElement::AddIntoListTree(TGListTree* ltree, TEveElement* parent); virtual TGListTreeItem*TEveElement::AddIntoListTrees(TEveElement* parent); virtual voidTEveElement::AddParent(TEveElement* re); virtual voidTEveProjectable::AddProjected(TEveProjected* p); virtual voidTEveProjectable::AddProjectedsToSet(set<TEveElement*>& set); virtual voidTEveElement::AddStamp(UChar_t bits); virtual voidTEveElement::Annihilate(); virtual voidTEveElement::AnnihilateElements(); virtual voidTEveProjectable::AnnihilateProjecteds(); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); Float_t*TAttBBox::AssertBBox(); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveGeoShapeProjected.html:1447,Assert,AssertBBox,1447,root/html528/TEveGeoShapeProjected.html,https://root.cern,https://root.cern/root/html528/TEveGeoShapeProjected.html,1,['Assert'],['AssertBBox']
Testability,"Geometry classes. ; A node represent a volume positioned inside another.They store links to both volumes and to the TGeoMatrix representing the relative positioning. ; Node are never instantiated directly by users, but created as a result of volume operations. Adding a volume named A with a given user ID inside a volume B will create a node node named A_ID. This will be added to the list of nodes stored by B. Also, when applying a division operation in N slices to a volume A, a list of nodes B_1, B_2, ..., B_N is also created. A node B_i does not represent a unique object in the geometry because its container A might be at its turn positioned as node inside several other volumes. Only when a complete branch of nodes is fully defined up to the top node in the geometry, a given path like:; /TOP_1/.../A_3/B_7 will represent an unique object.; Its global transformation matrix can be computed as the pile-up of all local transformations in its branch. We will therefore call ""logical graph"" the hierarchy defined by nodes and volumes. The expansion of the logical graph by all possible paths defines a tree structure where all nodes are unique ""touchable"" objects. We will call this the ""physical tree"". Unlike the logical graph, the physical tree can become a huge structure with several milions of nodes in case of complex geometries, therefore it is not always a good idea to keep it transient in memory. Since a the logical and physical structures are correlated, the modeller rather keeps track only of the current branch, updating the current global matrix at each change of the level in geometry. The current physical node is not an object that can be asked for at a given moment, but rather represented by the combination: current node + current global matrix. However, physical nodes have unique ID's that can be retrieved for a given modeler state. These can be fed back to the modeler in order to force a physical node to become current. The advantage of this comes from the fact th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoNode.html:1358,log,logical,1358,doc/master/classTGeoNode.html,https://root.cern,https://root.cern/doc/master/classTGeoNode.html,1,['log'],['logical']
Testability,"Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Member Functions; RooArgSet const & flattenedCatList () const;  Internal utility function to get a list of all category components for this RooSimultaneous. ;  ; void selectNormalization (const RooArgSet *depSet=nullptr, bool force=false) override;  Interface function used by test statistics to freeze choice of observables for interpretation of fraction coefficients. ;  ; void selectNormalizationRange (const char *rangeName=nullptr, bool force=false) override;  Interface function used by test statistics to freeze choice of range for interpretation of fraction coefficients. ;  ;  Protected Member Functions inherited from RooAbsPdf;  RooAbsPdf (const RooAbsPdf &other, const char *name=nullptr);  Copy constructor. ;  ; virtual std::unique_ptr< RooAbsReal > createNLLImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the NLL creation routine. ;  ; virtual std::unique_ptr< RooFitResult > fitToImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the likelihood fitting routine. ;  ; bool isActiveNormSet (RooArgSet const *normSet) const;  Checks if normSet is the currently active normalization set of this PDF, meaning is exactly the same object as the one the _normSet member points to (or ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooSimultaneous.html:63548,test,test,63548,doc/master/classRooSimultaneous.html,https://root.cern,https://root.cern/doc/master/classRooSimultaneous.html,1,['test'],['test']
Testability,"GetClassIndex() const; { return fClassIndex; }. Int_t GetCompressionLevel() const; { return fCompress; }. Long64_t GetEND() const; { return fEND; }. Int_t GetFd() const; { return fD; }. const TUrl * GetEndpointUrl() const; { return &fUrl; }. TObjArray * GetListOfProcessIDs() const; {return fProcessIDs;}. TList * GetListOfFree() const; { return fFree; }. Int_t GetNfree() const; { return fFree->GetSize(); }. Int_t GetNProcessIDs() const; { return fNProcessIDs; }. Option_t * GetOption() const; { return fOption.Data(); }. Long64_t GetBytesRead() const; { return fBytesRead; }. Long64_t GetBytesReadExtra() const; { return fBytesReadExtra; }. Int_t GetReadCalls() const; { return fReadCalls; }. Int_t GetVersion() const; { return fVersion; }. Int_t GetNbytesInfo() const; {return fNbytesInfo;}. Int_t GetNbytesFree() const; {return fNbytesFree;}. Long64_t GetRelOffset() const; { return fOffset - fArchiveOffset; }. Long64_t GetSeekFree() const; {return fSeekFree;}. Long64_t GetSeekInfo() const; {return fSeekInfo;}. void IncrementProcessIDs(); { fNProcessIDs++; }. Bool_t IsArchive() const; { return fIsArchive; }. Bool_t IsBinary() const; { return TestBit(kBinaryFile); }. Bool_t IsRaw() const; { return !fIsRootFile; }. Bool_t MustFlush() const; {return fMustFlush;}. void SetEND(Long64_t last); { fEND = last; }. void SetOption(Option_t* option = "">""); { fOption = option; }. void SetReadCalls(Int_t readcalls = 0); { fReadCalls = readcalls; }. EFileType GetType(const char* name, Option_t* option = """", TString* prefix = 0). EAsyncOpenStatus GetAsyncOpenStatus(const char* name). EAsyncOpenStatus GetAsyncOpenStatus(TFileOpenHandle* handle). » Author: Rene Brun 28/11/94 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/io:$Id: TFile.h 35443 2010-09-20 10:06:47Z rdm $ » Last generated: 2010-12-10 21:56; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFile.html:53271,Test,TestBit,53271,root/html528/TFile.html,https://root.cern,https://root.cern/root/html528/TFile.html,1,['Test'],['TestBit']
Testability,"GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char filenameDefinition TGWin32VirtualXProxy.cxx:232; gROOT#define gROOTDefinition TROOT.h:406; ROOT::Detail::VecOps::RVecImpl::emplace_backreference emplace_back(ArgTypes &&...Args)Definition RVec.hxx:920; ROOT::Internal::VecOps::SmallVectorTemplateCommon::sizesize_t size() constDefinition RVec.hxx:174; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::VecOps::RVec< double >; TCanvasThe Canvas class.Definition TCanvas.h:23; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TTreeReaderArrayAn interface for reading collections stored in ROOT columnar datasets.Definition TTreeReaderArray.h:75; TTreeReaderA simple, robust and fast interface to read values from ROOT columnar datasets such as TTree,...Definition TTreeReader.h:46; ptTPaveText * ptDefinition entrylist_figure1.C:7; ROOT::Math::sqrtVecExpr< UnaryOp< Sqrt< T >, VecExpr< A, T, D >, T >, T, D > sqrt(const VecExpr< A, T, D > &rhs)Definition UnaryOperators.h:281; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; TMath::Econstexpr Double_t E()Base of natural log: .Definition TMath.h:93; df017_vecOpsHEPDefinition df017_vecOpsHEP.py:1; v@ vDefinition rootcling_impl.cxx:3699; . DateMarch 2018 ; AuthorsDanilo Piparo (CERN), Andre Vieira Silva ; Definition in file df017_vecOpsHEP.C. tutorialsdataframedf017_vecOpsHEP.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df017__vecOpsHEP_8C.html:4436,log,log,4436,doc/master/df017__vecOpsHEP_8C.html,https://root.cern,https://root.cern/doc/master/df017__vecOpsHEP_8C.html,1,['log'],['log']
Testability,"GetDimension() > 1 && range.Size(1) != 0) {; 150 HFitInterface::ExamineRange( hfit->GetYaxis(), range(1), hyfirst, hylast);; 151 if (range.Size(1) > 1 ); 152 Warning(""ROOT::Fit::FillData"",""support only one range interval for Y coordinate"");; 153 }; 154 ; 155 if (hfit->GetDimension() > 2 && range.Size(2) != 0) {; 156 HFitInterface::ExamineRange( hfit->GetZaxis(), range(2), hzfirst, hzlast);; 157 if (range.Size(2) > 1 ); 158 Warning(""ROOT::Fit::FillData"",""support only one range interval for Z coordinate"");; 159 }; 160 ; 161 ; 162 int n = (hxlast-hxfirst+1)*(hylast-hyfirst+1)*(hzlast-hzfirst+1);; 163 ; 164#ifdef DEBUG; 165 std::cout << ""THFitInterface: ifirst = "" << hxfirst << "" ilast = "" << hxlast; 166 << "" total bins "" << n; 167 << std::endl;; 168#endif; 169 ; 170 // reserve n for more efficient usage; 171 //dv.Data().reserve(n);; 172 ; 173 int hdim = hfit->GetDimension();; 174 int ndim = hdim;; 175 // case of function dimension less than histogram; 176 if (func !=nullptr && func->GetNdim() == hdim-1) ndim = hdim-1;; 177 ; 178 assert( ndim > 0 );; 179 //typedef BinPoint::CoordData CoordData;; 180 //CoordData x = CoordData( hfit->GetDimension() );; 181 dv.Initialize(n,ndim, (fitOpt.fErrors1) ? ROOT::Fit::BinData::kNoError : ROOT::Fit::BinData::kValueError);; 182 ; 183 double x[3];; 184 double s[3];; 185 ; 186 int binx = 0;; 187 int biny = 0;; 188 int binz = 0;; 189 ; 190 const TAxis *xaxis = hfit->GetXaxis();; 191 const TAxis *yaxis = hfit->GetYaxis();; 192 const TAxis *zaxis = hfit->GetZaxis();; 193 ; 194 for ( binx = hxfirst; binx <= hxlast; ++binx) {; 195 if (useBinEdges) {; 196 x[0] = xaxis->GetBinLowEdge(binx);; 197 s[0] = xaxis->GetBinUpEdge(binx);; 198 }; 199 else; 200 x[0] = xaxis->GetBinCenter(binx);; 201 ; 202 ; 203 for ( biny = hyfirst; biny <= hylast; ++biny) {; 204 if (useBinEdges) {; 205 x[1] = yaxis->GetBinLowEdge(biny);; 206 s[1] = yaxis->GetBinUpEdge(biny);; 207 }; 208 else; 209 x[1] = yaxis->GetBinCenter(biny);; 210 ; 211 for ( binz = hzfirst; binz <=",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/HFitInterface_8cxx_source.html:6288,assert,assert,6288,doc/master/HFitInterface_8cxx_source.html,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html,1,['assert'],['assert']
Testability,"GetMissingDictionariesForMembers(TCollection &result, TCollection &visited, bool recurse)TClassprotected; GetMissingDictionariesForPairElements(TCollection &result, TCollection &visited, bool recurse)TClassprotected; GetMissingDictionariesWithRecursionCheck(TCollection &result, TCollection &visited, bool recurse)TClassprotected; GetName() const overrideTNamedinlinevirtual; GetNdata()TClass; GetNew() constTClass; GetNewArray() constTClass; GetNmethods()TClass; GetObjectInfo(Int_t px, Int_t py) constTObjectvirtual; GetObjectStat()TObjectstatic; GetOption() constTObjectinlinevirtual; GetPersistentRef() constTClassinline; GetRealData(const char *name) constTClass; GetReferenceProxy() constTClassinline; GetResetAfterMerge() constTClass; GetSchemaRules() constTClass; GetSchemaRules(Bool_t create=kFALSE)TClass; GetSharedLibs()TClass; GetShowMembersWrapper() constTClassinline; GetState() constTClassinline; GetStreamer() constTClass; GetStreamerFunc() constTClass; GetStreamerInfo(Int_t version=0, Bool_t isTransient=kFALSE) constTClass; GetStreamerInfoAbstractEmulated(Int_t version=0) constTClass; GetStreamerInfoImpl(Int_t version, Bool_t silent) constTClassprivate; GetStreamerInfos() constTClassinline; GetTitle() const overrideTNamedinlinevirtual; GetTypeInfo() constTClassinline; GetUniqueID() constTObjectvirtual; HandleTimer(TTimer *timer)TObjectvirtual; HasConsistentHashMember()TClassinline; HasCustomStreamerMember() constTClassinline; HasDataMemberInfo() constTClassinline; HasDefaultConstructor(Bool_t testio=kFALSE) constTClass; HasDictionary() constTClass; HasDictionarySelection(const char *clname)TClassstatic; Hash() const overrideTNamedinlinevirtual; HasInconsistentHash() constTObjectinline; HasInterpreterInfo() constTClassinline; HasInterpreterInfoInMemory() constTClassinline; HasLocalHashMember() constTClass; HasNoInfoOrEmuOrFwdDeclaredDecl(const char *)TClassprivatestatic; IgnoreTObjectStreamer(Bool_t ignore=kTRUE)TClass; Info(const char *method, const char *msgfmt,.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClass-members.html:11873,test,testio,11873,doc/master/classTClass-members.html,https://root.cern,https://root.cern/doc/master/classTClass-members.html,1,['test'],['testio']
Testability,"GetName());; 8391 ; 8392 if(opt.Contains(""M"")) return dfmax;; 8393 else if(opt.Contains(""X"")) return prb3;; 8394 else return prob;; 8395}; 8396 ; 8397////////////////////////////////////////////////////////////////////////////////; 8398/// Replace bin contents by the contents of array content; 8399 ; 8400void TH1::SetContent(const Double_t *content); 8401{; 8402 fEntries = fNcells;; 8403 fTsumw = 0;; 8404 for (Int_t i = 0; i < fNcells; ++i) UpdateBinContent(i, content[i]);; 8405}; 8406 ; 8407////////////////////////////////////////////////////////////////////////////////; 8408/// Return contour values into array levels if pointer levels is non zero.; 8409///; 8410/// The function returns the number of contour levels.; 8411/// see GetContourLevel to return one contour only; 8412 ; 8413Int_t TH1::GetContour(Double_t *levels); 8414{; 8415 Int_t nlevels = fContour.fN;; 8416 if (levels) {; 8417 if (nlevels == 0) {; 8418 nlevels = 20;; 8419 SetContour(nlevels);; 8420 } else {; 8421 if (TestBit(kUserContour) == 0) SetContour(nlevels);; 8422 }; 8423 for (Int_t level=0; level<nlevels; level++) levels[level] = fContour.fArray[level];; 8424 }; 8425 return nlevels;; 8426}; 8427 ; 8428////////////////////////////////////////////////////////////////////////////////; 8429/// Return value of contour number level.; 8430/// Use GetContour to return the array of all contour levels; 8431 ; 8432Double_t TH1::GetContourLevel(Int_t level) const; 8433{; 8434 return (level >= 0 && level < fContour.fN) ? fContour.fArray[level] : 0.0;; 8435}; 8436 ; 8437////////////////////////////////////////////////////////////////////////////////; 8438/// Return the value of contour number ""level"" in Pad coordinates.; 8439/// ie: if the Pad is in log scale along Z it returns le log of the contour level; 8440/// value. See GetContour to return the array of all contour levels; 8441 ; 8442Double_t TH1::GetContourLevelPad(Int_t level) const; 8443{; 8444 if (level <0 || level >= fContour.fN) return 0;; 8445 Dou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:330733,Test,TestBit,330733,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['Test'],['TestBit']
Testability,"GetRandom (Double_t xmin, Double_t xmax, TRandom *rng=nullptr, Option_t *opt=nullptr);  Return a random number following this function shape in [xmin,xmax]. ;  ; virtual Double_t GetRandom (TRandom *rng=nullptr, Option_t *opt=nullptr);  Return a random number following this function shape. ;  ; virtual void GetRange (Double_t &xmin, Double_t &xmax) const;  Return range of a 1-D function. ;  ; virtual void GetRange (Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const;  Return range of a 2-D function. ;  ; virtual void GetRange (Double_t &xmin, Double_t &ymin, Double_t &zmin, Double_t &xmax, Double_t &ymax, Double_t &zmax) const;  Return range of function. ;  ; virtual Double_t GetSave (const Double_t *x);  Get value corresponding to X in array of fSave values. ;  ; virtual Double_t GetVariable (const TString &name);  ; virtual Double_t GetX (Double_t y, Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) const;  Returns the X value corresponding to the function value fy for (xmin<x<xmax). ;  ; TAxis * GetXaxis () const;  Get x axis of the function. ;  ; virtual Double_t GetXmax () const;  ; virtual Double_t GetXmin () const;  ; TAxis * GetYaxis () const;  Get y axis of the function. ;  ; TAxis * GetZaxis () const;  Get z axis of the function. (In case this object is a TF2 or TF3) ;  ; virtual void GradientPar (const Double_t *x, Double_t *grad, Double_t eps=0.01);  Compute the gradient wrt parameters If the TF1 object is based on a formula expression (TFormula) and TFormula::GenerateGradientPar() has been successfully called automatic differentiation using CLAD is used instead of the default numerical differentiation. ;  ; template<class T > ; void GradientPar (const T *x, T *grad, Double_t eps=0.01);  ; virtual Double_t GradientPar (Int_t ipar, const Double_t *x, Double_t eps=0.01);  Compute the gradient (derivative) wrt a parameter ipar. ;  ; template<class T > ; T GradientPar (Int_t ipar, const T *x, Do",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTF1.html:20644,log,logx,20644,doc/master/classTF1.html,https://root.cern,https://root.cern/doc/master/classTF1.html,2,['log'],['logx']
Testability,"GetStatOverflowsBehaviour()) return -1;; 676 }; 677 fTsumw += u;; 678 fTsumw2 += u * u;; 679 fTsumwx += u * x;; 680 fTsumwx2 += u * x * x;; 681 fTsumwy += u * y;; 682 fTsumwy2 += u * y * y;; 683 fTsumwxy += u * x * y;; 684 fTsumwz += u * z;; 685 fTsumwz2 += u * z * z;; 686 return bin;; 687}; 688////////////////////////////////////////////////////////////////////////////////; 689/// Fill a Profile2D histogram (no weights).; 690 ; 691Int_t TProfile2D::Fill(Double_t x, const char *namey, Double_t z, Double_t w); 692{; 693 Int_t bin,binx,biny;; 694 ; 695 if (fZmin != fZmax) {; 696 if (z <fZmin || z> fZmax || TMath::IsNaN(z)) return -1;; 697 }; 698 ; 699 Double_t u = w;; 700 fEntries++;; 701 binx =fXaxis.FindBin(x);; 702 biny =fYaxis.FindBin(namey);; 703 if (binx <0 || biny <0) return -1;; 704 bin = biny*(fXaxis.GetNbins()+2) + binx;; 705 AddBinContent(bin, u * z);; 706 fSumw2.fArray[bin] += u * z * z;; 707 if (!fBinSumw2.fN && u != 1.0 && !TestBit(TH1::kIsNotW)); 708 Sumw2(); // must be called before accumulating the entries; 709 if (fBinSumw2.fN) fBinSumw2.fArray[bin] += u * u;; 710 fBinEntries.fArray[bin] += u;; 711 ; 712 if (binx == 0 || binx > fXaxis.GetNbins()) {; 713 if (!GetStatOverflowsBehaviour()) return -1;; 714 }; 715 if (biny == 0 || biny > fYaxis.GetNbins()) return -1;; 716 ; 717 UInt_t labelBitMask = GetAxisLabelStatus();; 718 Double_t y = (labelBitMask & TH1::kYaxis) ? 0 : fYaxis.GetBinCenter(biny);; 719 ; 720 fTsumw += u;; 721 fTsumw2 += u * u;; 722 fTsumwx += u * x;; 723 fTsumwx2 += u * x * x;; 724 fTsumwy += u * y;; 725 fTsumwy2 += u * y * y;; 726 fTsumwxy += u * x * y;; 727 fTsumwz += u * z;; 728 fTsumwz2 += u * z * z;; 729 ; 730 return bin;; 731}; 732 ; 733////////////////////////////////////////////////////////////////////////////////; 734/// Fill a Profile2D histogram (no weights).; 735 ; 736Int_t TProfile2D::Fill(const char *namex, const char *namey, Double_t z, Double_t w); 737{; 738 Int_t bin,binx,biny;; 739 ; 740 if (fZmin != fZmax) {; 741 if (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TProfile2D_8cxx_source.html:24777,Test,TestBit,24777,doc/master/TProfile2D_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TProfile2D_8cxx_source.html,1,['Test'],['TestBit']
Testability,"GetStats(Double_t *stats) const; 1308{; 1309 if (fBuffer) ((TH3*)this)->BufferEmpty();; 1310 ; 1311 Int_t bin, binx, biny, binz;; 1312 Double_t w,err;; 1313 Double_t x,y,z;; 1314 if ((fTsumw == 0 && fEntries > 0) || fXaxis.TestBit(TAxis::kAxisRange) || fYaxis.TestBit(TAxis::kAxisRange) || fZaxis.TestBit(TAxis::kAxisRange)) {; 1315 for (bin=0;bin<11;bin++) stats[bin] = 0;; 1316 ; 1317 Int_t firstBinX = fXaxis.GetFirst();; 1318 Int_t lastBinX = fXaxis.GetLast();; 1319 Int_t firstBinY = fYaxis.GetFirst();; 1320 Int_t lastBinY = fYaxis.GetLast();; 1321 Int_t firstBinZ = fZaxis.GetFirst();; 1322 Int_t lastBinZ = fZaxis.GetLast();; 1323 // include underflow/overflow if TH1::StatOverflows(kTRUE) in case no range is set on the axis; 1324 if (GetStatOverflowsBehaviour()) {; 1325 if ( !fXaxis.TestBit(TAxis::kAxisRange) ) {; 1326 if (firstBinX == 1) firstBinX = 0;; 1327 if (lastBinX == fXaxis.GetNbins() ) lastBinX += 1;; 1328 }; 1329 if ( !fYaxis.TestBit(TAxis::kAxisRange) ) {; 1330 if (firstBinY == 1) firstBinY = 0;; 1331 if (lastBinY == fYaxis.GetNbins() ) lastBinY += 1;; 1332 }; 1333 if ( !fZaxis.TestBit(TAxis::kAxisRange) ) {; 1334 if (firstBinZ == 1) firstBinZ = 0;; 1335 if (lastBinZ == fZaxis.GetNbins() ) lastBinZ += 1;; 1336 }; 1337 }; 1338 ; 1339 // check for labels axis . In that case corresponsing statistics do not make sense and it is set to zero; 1340 Bool_t labelXaxis = ((const_cast<TAxis&>(fXaxis)).GetLabels() && fXaxis.CanExtend() );; 1341 Bool_t labelYaxis = ((const_cast<TAxis&>(fYaxis)).GetLabels() && fYaxis.CanExtend() );; 1342 Bool_t labelZaxis = ((const_cast<TAxis&>(fZaxis)).GetLabels() && fZaxis.CanExtend() );; 1343 ; 1344 for (binz = firstBinZ; binz <= lastBinZ; binz++) {; 1345 z = (!labelZaxis) ? fZaxis.GetBinCenter(binz) : 0;; 1346 for (biny = firstBinY; biny <= lastBinY; biny++) {; 1347 y = (!labelYaxis) ? fYaxis.GetBinCenter(biny) : 0;; 1348 for (binx = firstBinX; binx <= lastBinX; binx++) {; 1349 bin = GetBin(binx,biny,binz);; 1350 x = (!labelXaxis) ?",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH3_8cxx_source.html:52281,Test,TestBit,52281,doc/master/TH3_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH3_8cxx_source.html,1,['Test'],['TestBit']
Testability,GetTestInterval(). template<typename Architecture_t > . size_t TMVA::DNN::TGradientDescent< Architecture_t >::GetTestInterval ; (; ); const. inline . Definition at line 163 of file Minimizers.h. ◆ GetTrainingError(). template<typename Architecture_t > . Scalar_t TMVA::DNN::TGradientDescent< Architecture_t >::GetTrainingError ; (; ); const. inline . Definition at line 161 of file Minimizers.h. ◆ HasConverged() [1/2]. template<typename Architecture_t > . bool TMVA::DNN::TGradientDescent< Architecture_t >::HasConverged. inline . Increases the minimization step counter by the test error evaluation period and uses the current internal value of the test error to determine if the minimization has converged. ; Definition at line 667 of file Minimizers.h. ◆ HasConverged() [2/2]. template<typename Architecture_t > . bool TMVA::DNN::TGradientDescent< Architecture_t >::HasConverged ; (; Scalar_t ; testError). inline . Increases the minimization step counter by the test error evaluation period and uses the provided test error value to determine if the minimization has converged. ; Definition at line 681 of file Minimizers.h. ◆ Reset(). template<typename Architecture_t > . void TMVA::DNN::TGradientDescent< Architecture_t >::Reset ; (; ). inline . Reset minimizer object to default state. ; Definition at line 81 of file Minimizers.h. ◆ SetBatchSize(). template<typename Architecture_t > . void TMVA::DNN::TGradientDescent< Architecture_t >::SetBatchSize ; (; Scalar_t ; rate). inline . Definition at line 168 of file Minimizers.h. ◆ SetConvergenceSteps(). template<typename Architecture_t > . void TMVA::DNN::TGradientDescent< Architecture_t >::SetConvergenceSteps ; (; size_t ; steps). inline . Definition at line 165 of file Minimizers.h. ◆ SetLearningRate(). template<typename Architecture_t > . void TMVA::DNN::TGradientDescent< Architecture_t >::SetLearningRate ; (; Scalar_t ; rate). inline . Definition at line 167 of file Minimizers.h. ◆ SetTestInterval(). template<typename Architecture,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TGradientDescent.html:7637,test,test,7637,doc/master/classTMVA_1_1DNN_1_1TGradientDescent.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TGradientDescent.html,2,['test'],['test']
Testability,"GetTitle() const; virtual vector<TString>*GetTransformationStrings(Int_t cls) const; virtual UInt_tTObject::GetUniqueID() const; TMVA::Types::EVariableTransformGetVariableTransform() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidInitialize(); virtual voidTObject::Inspect() constMENU ; virtual const TMVA::Event*InverseTransform(const TMVA::Event*const, Int_t cls) const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tIsCreated() const; Bool_tIsEnabled() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tIsNormalised() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; TMVA::MsgLogger&Log() const; virtual voidTObject::ls(Option_t* option = """") const; virtual voidMakeFunction(ostream& fout, const TString& fncName, Int_t part, UInt_t trCounter, Int_t cls); voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::VariableTransformBase&operator=(const TMVA::VariableTransformBase&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual Bool_tPrepareTransformation(const vector<TMVA::Event*>&); virtual voidTObject::Print(Option_t* option = """") const; v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__VariableTransformBase.html:3438,Log,Log,3438,root/html602/TMVA__VariableTransformBase.html,https://root.cern,https://root.cern/root/html602/TMVA__VariableTransformBase.html,2,['Log'],['Log']
Testability,"GetTitle());; 937 }; 938 ; 939 ; 940 // the weight; 941 Float_t weight = currentInfo.GetWeight(); // multiply by tree weight; 942 formula = fWeightFormula[cl];; 943 if (formula!=0) {; 944 Int_t ndata = formula->GetNdata();; 945 weight *= (ndata == 1 ?; 946 formula->EvalInstance() :; 947 formula->EvalInstance(idata));; 948 checkNanInf(nanMessages, weight, ""Weight"", formula->GetTitle());; 949 }; 950 ; 951 // Count the events before rejection due to cut or NaN; 952 // value (weighted and unweighted); 953 classEventCounts.nEvBeforeCut++;; 954 if (!TMath::IsNaN(weight)); 955 classEventCounts.nWeEvBeforeCut += weight;; 956 ; 957 // apply the cut, skip rest if cut is not fulfilled; 958 if (cutVal<0.5) continue;; 959 ; 960 // global flag if negative weights exist -> can be used; 961 // by classifiers who may require special data; 962 // treatment (also print warning); 963 if (weight < 0) classEventCounts.nNegWeights++;; 964 ; 965 // now read the event-values (variables and regression targets); 966 ; 967 if (contains_NaN_or_inf) {; 968 Log() << kWARNING << Form(""Dataset[%s] : "",dsi.GetName())<< ""NaN or +-inf in Event "" << evtIdx << Endl;; 969 if (sizeOfArrays>1) Log() << kWARNING << Form(""Dataset[%s] : "",dsi.GetName())<< "" rejected"" << Endl;; 970 continue;; 971 }; 972 ; 973 // Count the events after rejection due to cut or NaN value; 974 // (weighted and unweighted); 975 classEventCounts.nEvAfterCut++;; 976 classEventCounts.nWeEvAfterCut += weight;; 977 ; 978 // event accepted, fill temporary ntuple; 979 event_v.push_back(new Event(vars, tgts , vis, cl , weight));; 980 }; 981 }; 982 currentInfo.GetTree()->ResetBranchAddresses();; 983 }; 984 }; 985 ; 986 if (!nanInfWarnings.empty()) {; 987 Log() << kWARNING << ""Found events with NaN and/or +-inf values"" << Endl;; 988 for (const auto &warning : nanInfWarnings) {; 989 auto &log = Log() << kWARNING << warning.first;; 990 if (warning.second > 1) log << "" ("" << warning.second << "" times)"";; 991 log << Endl;; 992 }; 993 Log() << kW",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataSetFactory_8cxx_source.html:41235,Log,Log,41235,doc/master/DataSetFactory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/DataSetFactory_8cxx_source.html,1,['Log'],['Log']
Testability,"Gradients[i], -learningRate);; 453 }; 454}; 455 ; 456//_________________________________________________________________________________________________; 457template <typename Architecture_t>; 458auto VGeneralLayer<Architecture_t>::CopyWeights(const std::vector<Matrix_t> &otherWeights) -> void; 459{; 460 ; 461 for (size_t i = 0; i < fWeights.size(); i++) {; 462 Architecture_t::Copy(fWeights[i], otherWeights[i]);; 463 }; 464}; 465 ; 466//_________________________________________________________________________________________________; 467template <typename Architecture_t>; 468auto VGeneralLayer<Architecture_t>::CopyBiases(const std::vector<Matrix_t> &otherBiases) -> void; 469{; 470 for (size_t i = 0; i < fBiases.size(); i++) {; 471 Architecture_t::Copy(fBiases[i], otherBiases[i]);; 472 }; 473}; 474 ; 475//_________________________________________________________________________________________________; 476template <typename Architecture_t>; 477template <typename Arch>; 478void VGeneralLayer<Architecture_t>::CopyParameters(const VGeneralLayer<Arch> &layer); 479{; 480 //assert(!std::is_same<Arch, Architecture_t>::value);; 481 // copy weights from a different architecture- default generic implementation; 482 Architecture_t::CopyDiffArch(this->GetWeights(), layer.GetWeights());; 483 Architecture_t::CopyDiffArch(this->GetBiases(), layer.GetBiases());; 484 ; 485 // copy also the additional layer parameters; 486 auto params = layer.GetExtraLayerParameters();; 487 if (params.size() > 0) {; 488 auto paramsToCopy = GetExtraLayerParameters();; 489 Architecture_t::CopyDiffArch(paramsToCopy, params );; 490 SetExtraLayerParameters(paramsToCopy);; 491 }; 492}; 493 ; 494//_________________________________________________________________________________________________; 495template <typename Architecture_t>; 496auto VGeneralLayer<Architecture_t>::WriteTensorToXML(void * node, const char * name, const std::vector<Matrix_t> & tensor) -> void; 497{; 498 auto xmlengine = gTools().xmlengi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GeneralLayer_8h_source.html:21742,assert,assert,21742,doc/master/GeneralLayer_8h_source.html,https://root.cern,https://root.cern/doc/master/GeneralLayer_8h_source.html,1,['assert'],['assert']
Testability,"Graph *TMVA::Factory::GetROCCurve(TString datasetname, TString theMethodName, Bool_t setTitles, UInt_t iClass,; 933 Types::ETreeType type); 934{; 935 if (fMethodsMap.find(datasetname) == fMethodsMap.end()) {; 936 Log() << kERROR << Form(""DataSet = %s not found in methods map."", datasetname.Data()) << Endl;; 937 return nullptr;; 938 }; 939 ; 940 if (!this->HasMethod(datasetname, theMethodName)) {; 941 Log() << kERROR << Form(""Method = %s not found with Dataset = %s "", theMethodName.Data(), datasetname.Data()); 942 << Endl;; 943 return nullptr;; 944 }; 945 ; 946 std::set<Types::EAnalysisType> allowedAnalysisTypes = {Types::kClassification, Types::kMulticlass};; 947 if (allowedAnalysisTypes.count(this->fAnalysisType) == 0) {; 948 Log() << kERROR << Form(""Can only generate ROC curves for analysis type kClassification and kMulticlass.""); 949 << Endl;; 950 return nullptr;; 951 }; 952 ; 953 TMVA::ROCCurve *rocCurve = GetROC(datasetname, theMethodName, iClass, type);; 954 TGraph *graph = nullptr;; 955 ; 956 if (!rocCurve) {; 957 Log() << kFATAL; 958 << Form(""ROCCurve object was not created in Method = %s not found with Dataset = %s "", theMethodName.Data(),; 959 datasetname.Data()); 960 << Endl;; 961 return nullptr;; 962 }; 963 ; 964 graph = (TGraph *)rocCurve->GetROCCurve()->Clone();; 965 delete rocCurve;; 966 ; 967 if (setTitles) {; 968 graph->GetYaxis()->SetTitle(""Background rejection (Specificity)"");; 969 graph->GetXaxis()->SetTitle(""Signal efficiency (Sensitivity)"");; 970 graph->SetTitle(TString::Format(""Signal efficiency vs. Background rejection (%s)"", theMethodName.Data()).Data());; 971 }; 972 ; 973 return graph;; 974}; 975 ; 976////////////////////////////////////////////////////////////////////////////////; 977/// Generate a collection of graphs, for all methods for a given class. Suitable; 978/// for comparing method performance.; 979///; 980/// Argument iClass specifies the class to generate the ROC curve in a; 981/// multiclass setting. It is ignored for binary c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:39026,Log,Log,39026,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,1,['Log'],['Log']
Testability,"Graph::SetMaximum(Double_t maximum = -1111)MENU ; virtual voidTGraph::SetMinimum(Double_t minimum = -1111)MENU ; virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGraph::SetPoint(Int_t i, Double_t x, Double_t y); virtual voidSetPointError(Double_t ex, Double_t ey); virtual voidSetPointError(Int_t i, Double_t ex, Double_t ey); virtual voidTGraph::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidTGraph::Sort(Bool_t(*)(const TGraph*,Int_t,Int_t) greater = &TGraph::CompareX, Bool_t ascending = kTRUE, Int_t low = 0, Int_t high = -1111); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGraphErrors(); TGraphErrors(Int_t n); TGraphErrors(const TGraphErrors& gr); TGraphErrors(const TH1* h); TGraphErrors(const char* filename, const char* format = ""%lg %lg %lg %lg"", Option_t* option = """"); TGraphErrors(const TVectorF& vx, const TVectorF& vy, const TVectorF& vex, const TVectorF& vey); TGraphErrors(const TVectorD& vx, const TVectorD& vy, const TVectorD& vex, const TVectorD& vey); TGraphErrors(Int_t n, const Float_t* x, const Float_t* y, const Float_t* ex = 0, const Float_t* ey = 0); TGraphErrors(Int_t n, const Double_t* x, const Double_t* y, const Double_t* ex = 0, const Double_t* ey = 0); virtual voidTGraph::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidTGraph::Zero(Int_t& k, Doubl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGraphErrors.html:11686,Test,TestBit,11686,root/html602/TGraphErrors.html,https://root.cern,https://root.cern/root/html602/TGraphErrors.html,2,['Test'],['TestBit']
Testability,"GraphPainter:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGraphPainter(). TGraphPainter::TGraphPainter ; (; ). Default constructor. ; Definition at line 667 of file TGraphPainter.cxx. ◆ ~TGraphPainter(). TGraphPainter::~TGraphPainter ; (; ). override . Destructor. ; Definition at line 675 of file TGraphPainter.cxx. Member Function Documentation. ◆ Class(). static TClass * TGraphPainter::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGraphPainter::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGraphPainter::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 71 of file TGraphPainter.h. ◆ ComputeLogs(). void TGraphPainter::ComputeLogs ; (; Int_t ; npoints, . Int_t ; opt . ). Compute the logarithm of variables gxwork and gywork according to the value of Options and put the results in the variables gxworkl and gyworkl. ; npoints : Number of points in gxwork and in gywork. opt = 1 ComputeLogs is called from PaintGrapHist; opt = 0 ComputeLogs is called from PaintGraph . Definition at line 690 of file TGraphPainter.cxx. ◆ DeclFileName(). static const char * TGraphPainter::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 71 of file TGraphPainter.h. ◆ DistancetoPrimitiveHelper(). Int_t TGraphPainter::DistancetoPrimitiveHelper ; (; TGraph * ; theGraph, . Int_t ; px, . Int_t ; py . ). overridevirtual . Compute distance from point px,py to a graph. ; Compute the closest distance of approach from point px,py to this line. The distance is computed in pixels units. ; Implements TVirtualGraphPainter.; Definition at line 717 of file TGraphPainter.cxx. ◆ DrawPanelHelper(). void TGraphPainter::DrawPanelHelper ; (; TGraph * ; theGraph). overridevirtual . Display a panel with all h",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphPainter.html:41866,log,logarithm,41866,doc/master/classTGraphPainter.html,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html,1,['log'],['logarithm']
Testability,"GraphPolarinline; SetStats(Bool_t stats=kTRUE)TGraphvirtual; SetTitle(const char *title="""") overrideTGraphvirtual; SetUniqueID(UInt_t uid)TObjectvirtual; ShrinkAndCopy(Int_t size, Int_t iend)TGraphprotected; Sizeof() constTNamedvirtual; Sort(Bool_t(*greater)(const TGraph *, Int_t, Int_t)=&TGraph::CompareX, Bool_t ascending=kTRUE, Int_t low=0, Int_t high=-1111)TGraphvirtual; Streamer(TBuffer &) overrideTGraphPolarvirtual; StreamerNVirtual(TBuffer &ClassDef_StreamerNVirtual_b)TGraphPolarinline; SwapPoints(Int_t pos1, Int_t pos2) overrideTGraphErrorsprotectedvirtual; SwapValues(Double_t *arr, Int_t pos1, Int_t pos2)TGraphprotectedstatic; SysError(const char *method, const char *msgfmt,...) constTObjectvirtual; TAttFill()TAttFill; TAttFill(Color_t fcolor, Style_t fstyle)TAttFill; TAttLine()TAttLine; TAttLine(Color_t lcolor, Style_t lstyle, Width_t lwidth)TAttLine; TAttMarker()TAttMarker; TAttMarker(Color_t color, Style_t style, Size_t msize)TAttMarker; TestBit(UInt_t f) constTObjectinline; TestBits(UInt_t f) constTObjectinline; TGraph()TGraph; TGraph(Int_t n)TGraph; TGraph(Int_t n, const Int_t *x, const Int_t *y)TGraph; TGraph(Int_t n, const Float_t *x, const Float_t *y)TGraph; TGraph(Int_t n, const Double_t *x, const Double_t *y)TGraph; TGraph(Int_t n, const Double_t *y, Double_t start=0., Double_t step=1.)TGraph; TGraph(const TGraph &gr)TGraph; TGraph(const TVectorF &vx, const TVectorF &vy)TGraph; TGraph(const TVectorD &vx, const TVectorD &vy)TGraph; TGraph(const TH1 *h)TGraph; TGraph(const TF1 *f, Option_t *option="""")TGraph; TGraph(const char *filename, const char *format=""%lg %lg"", Option_t *option="""")TGraph; TGraphErrors()TGraphErrors; TGraphErrors(Int_t n)TGraphErrors; TGraphErrors(Int_t n, const Float_t *x, const Float_t *y, const Float_t *ex=nullptr, const Float_t *ey=nullptr)TGraphErrors; TGraphErrors(Int_t n, const Double_t *x, const Double_t *y, const Double_t *ex=nullptr, const Double_t *ey=nullptr)TGraphErrors; TGraphErrors(const TVectorF &vx, const TVector",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphPolar-members.html:14784,Test,TestBit,14784,doc/master/classTGraphPolar-members.html,https://root.cern,https://root.cern/doc/master/classTGraphPolar-members.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"H2I > &histimpl);  ; auto GetDrawable (const std::shared_ptr< RH3C > &histimpl);  ; auto GetDrawable (const std::shared_ptr< RH3D > &histimpl);  ; auto GetDrawable (const std::shared_ptr< RH3F > &histimpl);  ; auto GetDrawable (const std::shared_ptr< RH3I > &histimpl);  ; RLogChannel & GPadLog ();  Log channel for GPad diagnostics. ;  ; template<int DIMENSIONS, class PRECISION , template< int D_, class P_ > class... STAT> ; class RHist< DIMENSIONS, PRECISION, STAT... > HistFromImpl (std::unique_ptr< typename RHist< DIMENSIONS, PRECISION, STAT... >::ImplBase_t > pHistImpl);  Adopt an external, stand-alone RHistImpl. The RHist will take ownership. ;  ; template<int DIMENSIONS, class PRECISION , template< int D_, class P_ > class... STAT> ; RHist< DIMENSIONS, PRECISION, STAT... > HistFromImpl (std::unique_ptr< typename RHist< DIMENSIONS, PRECISION, STAT... >::ImplBase_t > pHistImpl);  Adopt an external, stand-alone RHistImpl. The RHist will take ownership. ;  ; RLogChannel & HistLog ();  Log channel for Hist diagnostics. ;  ; RLogChannel & IOLog ();  Logging for generic IO functionality. ;  ; constexpr ClusterSize_t kInvalidClusterIndex (std::uint64_t(-1));  ; RLogChannel & NTupleLog ();  Log channel for RNTuple diagnostics. ;  ; RPadLength::Normal operator""""_normal (long double val);  User-defined literal for RPadLength::Normal ;  ; RPadLength::Normal operator""""_normal (unsigned long long int val);  ; RPadLength::Pixel operator""""_px (long double val);  User-defined literal for RPadLength::Pixel ;  ; RPadLength::Pixel operator""""_px (unsigned long long int val);  ; RPadLength::User operator""""_user (long double val);  User-defined literal for RPadLength::User ;  ; RPadLength::User operator""""_user (unsigned long long int val);  ; template<typename TT > ; REveVector2T< TT > operator* (const REveVector2T< TT > &a, TT b);  ; template<typename TT > ; REveVector4T< TT > operator* (const REveVector4T< TT > &a, TT b);  ; template<typename TT > ; REveVectorT< TT > operator* (cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Experimental.html:29623,Log,Log,29623,doc/master/namespaceROOT_1_1Experimental.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental.html,2,['Log'],['Log']
Testability,HEADER> Factory : Test method: FisherCat for Classification performance; : ; <HEADER> Category_Fisher_1 : [Category_Fisher_1_dsi] : Evaluation of Category_Fisher_1 on testing sample (10000 events); : Elapsed time for evaluation of 10000 events: 0.00192 sec ; <HEADER> Category_Fisher_2 : [Category_Fisher_2_dsi] : Evaluation of Category_Fisher_2 on testing sample (10000 events); : Elapsed time for evaluation of 10000 events: 0.00196 sec ; <HEADER> Factory : Test method: LikelihoodCat for Classification performance; : ; <HEADER> Category_Likelihood_1 : [Category_Likelihood_1_dsi] : Evaluation of Category_Likelihood_1 on testing sample (10000 events); : Elapsed time for evaluation of 10000 events: 0.00948 sec ; <HEADER> Category_Likelihood_2 : [Category_Likelihood_2_dsi] : Evaluation of Category_Likelihood_2 on testing sample (10000 events); : Elapsed time for evaluation of 10000 events: 0.00932 sec ; <HEADER> Factory : Evaluate all methods; <HEADER> Factory : Evaluate classifier: Fisher; : ; <HEADER> Fisher : [dataset] : Loop over test events and fill histograms with classifier response...; : ; <HEADER> TFHandler_Fisher : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : var1: -0.014081 1.2910 [ -5.3119 4.5609 ]; : var2: -0.014399 1.3299 [ -4.7537 4.6723 ]; : var3: -0.027971 1.3779 [ -5.2892 4.7007 ]; : var4: 0.12966 1.4883 [ -5.1002 4.9767 ]; : -----------------------------------------------------------; <HEADER> Factory : Evaluate classifier: Likelihood; : ; <HEADER> Likelihood : [dataset] : Loop over test events and fill histograms with classifier response...; : ; <HEADER> TFHandler_Likelihood : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : var1: -0.014081 1.2910 [ -5.3119 4.5609 ]; : var2: -0.014399 1.3299 [ -4.7537 4.6723 ]; : var3: -0.027971 1.3779 [ -5.2892 4.7007 ]; : var4: 0.12966 1.4883 [ -5.1002 4.9767 ]; : ---------------------------------------------------------,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassificationCategory_8C.html:24101,test,test,24101,doc/master/TMVAClassificationCategory_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassificationCategory_8C.html,1,['test'],['test']
Testability,"HEADER> IdTransformation : Ranking result (top variable is best ranked); : -----------------------------; : Rank : Variable : Separation; : -----------------------------; : 1 : var4 : 3.564e-01; : 2 : var3 : 2.899e-01; : 3 : var1 : 2.792e-01; : 4 : var2 : 2.260e-01; : -----------------------------; <HEADER> Factory : Train method: BDT for Classification; : ; <HEADER> BDT : #events: (reweighted) sig: 3000 bkg: 3000; : #events: (unweighted) sig: 3000 bkg: 3000; : Training 300 Decision Trees ... patience please; : Elapsed time for training with 6000 events: 0.538 sec ; <HEADER> BDT : [tmva003_BDT] : Evaluation of BDT on training sample (6000 events); : Elapsed time for evaluation of 6000 events: 0.0709 sec ; : Creating xml weight file: tmva003_BDT/weights/tmva003_BDT.weights.xml; : Creating standalone class: tmva003_BDT/weights/tmva003_BDT.class.C; : TMVARR.root:/tmva003_BDT/Method_BDT/BDT; <HEADER> Factory : Training finished; : ; : Ranking input variables (method specific)...; <HEADER> BDT : Ranking result (top variable is best ranked); : --------------------------------------; : Rank : Variable : Variable Importance; : --------------------------------------; : 1 : var4 : 3.940e-01; : 2 : var1 : 2.619e-01; : 3 : var2 : 1.849e-01; : 4 : var3 : 1.592e-01; : --------------------------------------; <HEADER> Factory : === Destroy and recreate all methods via weight files for testing ===; : ; : Reading weight file: tmva003_BDT/weights/tmva003_BDT.weights.xml; Single-event inference: 0.233873; ; RTensor input for inference on data of multiple events:; { { -1.14361, -0.822373, -0.495426, -0.629427 } { 2.14344, -0.0189228, 0.26703, 1.26749 } { -0.443913, 0.486827, 0.139535, 0.611483 } }; ; Prediction performed on multiple events: { 0.173541, -0.0540229, 0.266502 }; ; DateJuly 2019 ; AuthorStefan Wunsch ; Definition in file tmva003_RReader.C. tutorialstmvatmva003_RReader.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva003__RReader_8C.html:10939,test,testing,10939,doc/master/tmva003__RReader_8C.html,https://root.cern,https://root.cern/doc/master/tmva003__RReader_8C.html,1,['test'],['testing']
Testability,"HISTOGRAM TO FIT ..............................................................; 62w = ROOT.TStopwatch(); 63w.Start(); 64h_sum = ROOT.TH1D(""h_ExpCB"", ""Exponential Bkg + CrystalBall function"", nBins, -5.0, 5.0); 65h_sum.FillRandom(""fsum"", nEvents); 66print(""Time to generate {0} events: "".format(nEvents)); 67w.Print(); 68 ; 69# need to scale histogram with width since we are fitting a density; 70h_sum.Sumw2(); 71h_sum.Scale(1.0, ""width""); 72 ; 73# fit - use Minuit2 if available; 74ROOT.Math.MinimizerOptions.SetDefaultMinimizer(""Minuit2""); 75c1 = ROOT.TCanvas(""Fit"", ""Fit"", 800, 1000); 76# do a least-square fit of the spectrum; 77result = h_sum.Fit(""fsum"", ""SQ""); 78result.Print(); 79h_sum.Draw(); 80print(""Time to fit using ROOT TF1Normsum: ""); 81w.Print(); 82 ; 83# test if parameters are fine; 84for i, pref in enumerate([nsig, nbkg, signal_mean]):; 85 if not ROOT.TMath.AreEqualAbs(pref, f_sum.GetParameter(i), f_sum.GetParError(i) * 10.0):; 86 ROOT.Error(; 87 ""testFitNormSum"",; 88 ""Difference found in fitted {0} - difference is {1:.2f} sigma"".format(; 89 f_sum.GetParName(i), (f_sum.GetParameter(i) - pref) / f_sum.GetParError(i); 90 ),; 91 ); 92 ; 93ROOT.gStyle.SetOptStat(0); 94# add parameters; 95t1 = ROOT.TLatex(-2.5, 300000, ""NSignal = {0:g} #pm {1:g}"".format(f_sum.GetParameter(0), f_sum.GetParError(0))); 96t2 = ROOT.TLatex(-2.5, 270000, ""Nbackgr = {0:g} #pm {1:g}"".format(f_sum.GetParameter(1), f_sum.GetParError(1))); 97t1.Draw(); 98t2.Draw(); 99 ; 100c1.SaveAs(""fitNormSum.png""); formatOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/fitNormSum_8py_source.html:3305,test,testFitNormSum,3305,doc/master/fitNormSum_8py_source.html,https://root.cern,https://root.cern/doc/master/fitNormSum_8py_source.html,1,['test'],['testFitNormSum']
Testability,"Handler::Notified()SIGNAL ; virtual Bool_tNotify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TObject&TObject::operator=(const TObject& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidRemove(); virtual voidTSysEvtHandler::Removed()SIGNAL ; voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); voidSetSignal(ESignals sig); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSignalHandler.html:7544,Test,TestBit,7544,root/html528/TSignalHandler.html,https://root.cern,https://root.cern/root/html528/TSignalHandler.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"Heap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); Track&operator=(const Track&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidSetValid(Int_t valid = 1); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/Track.html:7632,Test,TestBit,7632,root/html528/Track.html,https://root.cern,https://root.cern/root/html528/Track.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"Heap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidProcessNode(); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetIterator(const TGeoIterator* iter); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoIteratorPlugin.html:6118,Test,TestBit,6118,root/html528/TGeoIteratorPlugin.html,https://root.cern,https://root.cern/root/html528/TGeoIteratorPlugin.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"Heap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGFrameElement.html:4362,Test,TestBit,4362,root/html534/TGFrameElement.html,https://root.cern,https://root.cern/root/html534/TGFrameElement.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"HelpMessage(). void MethodPyKeras::GetHelpMessage ; (; ); const. virtual . Implements TMVA::IMethod.; Definition at line 794 of file MethodPyKeras.cxx. ◆ GetKerasBackend(). MethodPyKeras::EBackendType MethodPyKeras::GetKerasBackend ; (; ). Get the Keras backend (can be: TensorFlow, Theano or CNTK) ; Definition at line 807 of file MethodPyKeras.cxx. ◆ GetKerasBackendName(). TString MethodPyKeras::GetKerasBackendName ; (; ). Definition at line 832 of file MethodPyKeras.cxx. ◆ GetMulticlassValues(). std::vector< Float_t > & MethodPyKeras::GetMulticlassValues ; (; ). virtual . Reimplemented from TMVA::MethodBase.; Definition at line 772 of file MethodPyKeras.cxx. ◆ GetMvaValue(). Double_t MethodPyKeras::GetMvaValue ; (; Double_t * ; errLower, . Double_t * ; errUpper . ). virtual . Implements TMVA::PyMethodBase.; Definition at line 657 of file MethodPyKeras.cxx. ◆ GetMvaValues(). std::vector< Double_t > MethodPyKeras::GetMvaValues ; (; Long64_t ; firstEvt, . Long64_t ; lastEvt, . Bool_t ; logProgress . ). virtual . get all the MVA values for the events of the current Data type ; Implements TMVA::PyMethodBase.; Definition at line 679 of file MethodPyKeras.cxx. ◆ GetNumValidationSamples(). UInt_t TMVA::MethodPyKeras::GetNumValidationSamples ; (; ). private . Validation of the ValidationSize option. ; Allowed formats are 20%, 0.2 and 100 etc.; 20% and 0.2 selects 20% of the training set as validation data.; 100 selects 100 events as the validation data. Returnsnumber of samples in validation set ; Definition at line 111 of file MethodPyKeras.cxx. ◆ GetRegressionValues(). std::vector< Float_t > & MethodPyKeras::GetRegressionValues ; (; ). virtual . Reimplemented from TMVA::MethodBase.; Definition at line 740 of file MethodPyKeras.cxx. ◆ HasAnalysisType(). Bool_t MethodPyKeras::HasAnalysisType ; (; Types::EAnalysisType ; type, . UInt_t ; numberClasses, . UInt_t ;  . ). virtual . Implements TMVA::PyMethodBase.; Definition at line 70 of file MethodPyKeras.cxx. ◆ Init(). void Met",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodPyKeras.html:33271,log,logProgress,33271,doc/master/classTMVA_1_1MethodPyKeras.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodPyKeras.html,1,['log'],['logProgress']
Testability,"Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGuiBuilder. class TGuiBuilder. TGuiBuilder. ROOT GUI Builder principles. With the GUI builder, we try to make the next step from WYSIWYG; to embedded editing concept - WYSIWYE (""what you see is what you edit"").; The ROOT GUI Builder allows modifying real GUI objects.; For example, one can edit the existing GUI application created by; $ROOTSYS/tutorials/gui/guitest.C.; GUI components can be added to a design area from a widget palette,; or can be borrowed from another application.; One can drag and and drop TCanvas's menu bar into the application.; GUI objects can be resized and dragged, copied and pasted.; ROOT GUI Builder allows changing the layout, snap to grid, change object's; layout order via the GUI Builder toolbar, or by options in the right-click; context menus.; A final design can be immediatly tested and used, or saved as a C++ macro.; For example, it's possible to rearrange buttons in control bar,; add separators etc. and continue to use a new fancy control bar in the; application. The following is a short description of the GUI Builder actions and key shortcuts:. o Press Ctrl-Double-Click to start/stop edit mode; o Press Double-Click to activate quick edit action (defined in root.mimes). Selection, grabbing, dropping. It is possible to select, drag any frame and drop it to any frame. o Click left mouse button or Ctrl-Click to select an object to edit.; o Press right mouse button to activate context menu; o Multiple selection (grabbing):; - draw lasso and press Return key; - press Shift key and draw lasso; o Dropping:; - select frame and press Ctrl-Return key; o Changing layout order:; - select frame and use arrow keys to change layout order; o Alignment:; - draw lasso and press arrow keys (or Shift-Arrow key) to align frames. Key shortcuts. o Return - grab selected frames; o ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGuiBuilder.html:1060,test,tested,1060,root/html534/TGuiBuilder.html,https://root.cern,https://root.cern/root/html534/TGuiBuilder.html,3,['test'],['tested']
Testability,"Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGuiBuilder. class TGuiBuilder. TGuiBuilder. ROOT GUI Builder principles. With the GUI builder, we try to make the next step from WYSIWYG; to embedded editing concept - WYSIWYE (""what you see is what you edit"").; The ROOT GUI Builder allows modifying real GUI objects.; For example, one can edit the existing GUI application created by; $ROOTSYS/tutorials/gui/guitest.C.; GUI components can be added to a design area from a widget palette,; or can be borrowed from another application.; One can drag and and drop TCanvas's menu bar into the application.; GUI objects can be resized and dragged, copied and pasted.; ROOT GUI Builder allows changing the layout, snap to grid, change object's; layout order via the GUI Builder toolbar, or by options in the right-click; context menus.; A final design can be immediatly tested and used, or saved as a C++ macro.; For example, it's possible to rearrange buttons in control bar,; add separators etc. and continue to use a new fancy control bar in the; application. The following is a short description of the GUI Builder actions and key shortcuts:. o Press Ctrl-Double-Click to start/stop edit mode; o Press Double-Click to activate quick edit action (defined in root.mimes). Selection, grabbing, dropping. It is possible to select, drag any frame and drop it to any frame. o Click left mouse button or Ctrl-Click to select an object to edit.; o Press right mouse button to activate context menu; o Mutiple selection (grabbing):; - draw lasso and press Return key; - press Shift key and draw lasso; o Dropping:; - select frame and press Ctrl-Return key; o Changing layout order:; - select frame and use arrow keys to change layout order; o Alignment:; - draw lasso and press arrow keys (or Shift-Arrow key) to align frames. Key shortcuts. o Return - grab selected frames; o C",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGuiBuilder.html:1060,test,tested,1060,root/html528/TGuiBuilder.html,https://root.cern,https://root.cern/root/html528/TGuiBuilder.html,3,['test'],['tested']
Testability,"High.empty() || &fDataErrorHigh.front() == fDataErrorHighPtr );; 196 assert( fMaxPoints == 0 || fDataErrorLow.empty() || &fDataErrorLow.front() == fDataErrorLowPtr );; 197 assert( fMaxPoints == 0 || fDataErrorLow.empty() == fDataErrorHigh.empty() );; 198 assert( fMaxPoints == 0 || fData.empty() || &fData.front() == fDataPtr );; 199 ; 200 for ( unsigned int i=0; i < fDim; i++ ); 201 {; 202 assert( fCoordErrors.empty() || &fCoordErrors[i].front() == fCoordErrorsPtr[i] );; 203 }; 204 ; 205 if ( fpTmpBinEdgeVector ); 206 {; 207 delete[] fpTmpBinEdgeVector;; 208 fpTmpBinEdgeVector= nullptr;; 209 }; 210 ; 211 if ( fpTmpCoordErrorVector ); 212 {; 213 delete[] fpTmpCoordErrorVector;; 214 fpTmpCoordErrorVector = nullptr;; 215 }; 216 }; 217 ; 218 /**; 219 copy constructors; 220 */; 221 BinData::BinData(const BinData &rhs); 222 : FitData(rhs),; 223 fDataPtr(nullptr),; 224 fDataErrorPtr(nullptr), fDataErrorHighPtr(nullptr), fDataErrorLowPtr(nullptr),; 225 fpTmpCoordErrorVector(nullptr), fpTmpBinEdgeVector(nullptr); 226 {; 227 *this = rhs;; 228 }; 229 ; 230 BinData & BinData::operator= ( const BinData & rhs ); 231 {; 232 FitData::operator=( rhs );; 233 ; 234 if ( fpTmpBinEdgeVector ); 235 {; 236 assert(HasBinEdges());; 237 ; 238 delete[] fpTmpBinEdgeVector;; 239 fpTmpBinEdgeVector= nullptr;; 240 }; 241 ; 242 if ( fpTmpCoordErrorVector ); 243 {; 244 delete[] fpTmpCoordErrorVector;; 245 fpTmpCoordErrorVector = nullptr;; 246 }; 247 ; 248 fDataPtr = nullptr;; 249 fDataErrorPtr= fDataErrorHighPtr= fDataErrorLowPtr= nullptr;; 250 ; 251 fErrorType = rhs.fErrorType;; 252 fRefVolume = rhs.fRefVolume;; 253 fBinEdge = rhs.fBinEdge;; 254 ; 255 if ( fWrapped ); 256 {; 257 fData.clear();; 258 fCoordErrors.clear();; 259 fDataError.clear();; 260 fDataErrorHigh.clear();; 261 fDataErrorLow.clear();; 262 ; 263 fDataPtr = rhs.fDataPtr;; 264 fCoordErrorsPtr = rhs.fCoordErrorsPtr;; 265 fDataErrorPtr = rhs.fDataErrorPtr;; 266 fDataErrorHighPtr = rhs.fDataErrorHighPtr;; 267 fDataErrorLowPtr = rhs.fDataE",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BinData_8cxx_source.html:6626,assert,assert,6626,doc/master/BinData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/BinData_8cxx_source.html,1,['assert'],['assert']
Testability,"HistB_smooth)[ivar]->Write();; 1424 (*fVarPdfS)[ivar]->GetPDFHist()->Write();; 1425 (*fVarPdfB)[ivar]->GetPDFHist()->Write();; 1426 }; 1427 }; 1428}; 1429 ; 1430////////////////////////////////////////////////////////////////////////////////; 1431/// Overloaded function to create background efficiency (rejection) versus; 1432/// signal efficiency plot (first call of this function).; 1433///; 1434/// The function returns the signal efficiency at background efficiency; 1435/// indicated in theString; 1436///; 1437/// ""theString"" must have two entries:; 1438/// - `[0]`: ""Efficiency""; 1439/// - `[1]`: the value of background efficiency at which the signal efficiency; 1440/// is to be returned; 1441 ; 1442Double_t TMVA::MethodCuts::GetTrainingEfficiency(const TString& theString); 1443{; 1444 // parse input string for required background efficiency; 1445 TList* list = gTools().ParseFormatLine( theString );; 1446 // sanity check; 1447 if (list->GetSize() != 2) {; 1448 Log() << kFATAL << ""<GetTrainingEfficiency> wrong number of arguments""; 1449 << "" in string: "" << theString; 1450 << "" | required format, e.g., Efficiency:0.05"" << Endl;; 1451 return -1;; 1452 }; 1453 ; 1454 Results* results = Data()->GetResults(GetMethodName(), Types::kTesting, GetAnalysisType());; 1455 ; 1456 // that will be the value of the efficiency retured (does not affect; 1457 // the efficiency-vs-bkg plot which is done anyway.; 1458 Float_t effBref = atof( ((TObjString*)list->At(1))->GetString() );; 1459 ; 1460 delete list;; 1461 ; 1462 // first round ? --> create histograms; 1463 if (results->GetHist(""EFF_BVSS_TR"")==0) {; 1464 ; 1465 if (fBinaryTreeS != 0) { delete fBinaryTreeS; fBinaryTreeS = 0; }; 1466 if (fBinaryTreeB != 0) { delete fBinaryTreeB; fBinaryTreeB = 0; }; 1467 ; 1468 fBinaryTreeS = new BinarySearchTree();; 1469 fBinaryTreeS->Fill( GetEventCollection(Types::kTraining), fSignalClass );; 1470 fBinaryTreeB = new BinarySearchTree();; 1471 fBinaryTreeB->Fill( GetEventCollection(Types::kTrai",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodCuts_8cxx_source.html:55503,Log,Log,55503,doc/master/MethodCuts_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodCuts_8cxx_source.html,1,['Log'],['Log']
Testability,"Hn::AllocCoordBufvoid AllocCoordBuf() constCreate the coordinate buffer.Definition THn.cxx:232; THn::InitStoragevoid InitStorage(Int_t *nbins, Int_t chunkSize) overrideInitialize the storage of a histogram created via Init()Definition THn.cxx:240; THn::~THn~THn() overrideDestruct a THn.Definition THn.cxx:199; THn::fCoordBufstd::vector< Int_t > fCoordBufDefinition THn.h:181; THn::fSumw2TNDArrayT< Double_t > fSumw2Definition THn.h:180; THn::CreateIterROOT::Internal::THnBaseBinIter * CreateIter(Bool_t respectAxisRange) const overrideCreate an iterator over all bins. Public interface is THnIter.Definition THn.cxx:207; THn::Resetvoid Reset(Option_t *option="""") overrideReset the contents of a THn.Definition THn.cxx:250; THn::Sumw2void Sumw2() overrideEnable calculation of errors.Definition THn.cxx:216; THn::THnTHn()=default; THn::GetNbinsLong64_t GetNbins() const overrideDefinition THn.h:54; THn::GetArrayvirtual const TNDArray & GetArray() const =0; TNDArrayN-Dim array class.Definition TNDArray.h:46; TNDArray::AtAsDoublevirtual Double_t AtAsDouble(ULong64_t linidx) const =0; TNDArray::GetCellSizeLong64_t GetCellSize(Int_t dim) constDefinition TNDArray.h:70; TNDArray::Initvirtual void Init(Int_t ndim, const Int_t *nbins, bool addOverflow=false)Definition TNDArray.h:55; TNDArray::Resetvirtual void Reset(Option_t *option="""")=0; TObjArrayAn array of TObjects.Definition TObjArray.h:31; TObjArray::AtTObject * At(Int_t idx) const overrideDefinition TObjArray.h:164; TObject::TestBitR__ALWAYS_INLINE Bool_t TestBit(UInt_t f) constDefinition TObject.h:199; bool; double; int; ROOT::Minuit2::GradientParameterSpace::Internal@ Internal; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; TMVA::DNN::Cuda::max__device__ AFloat max(AFloat x, AFloat y)Definition Kernels.cuh:207. histhistsrcTHn.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THn_8cxx_source.html:13356,Test,TestBit,13356,doc/master/THn_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THn_8cxx_source.html,1,['Test'],['TestBit']
Testability,"However to do this the viewer will force you to provide the raw tessellation, and the resulting box will be axis aligned with the overall scene, which is non-ideal for rotated shapes.; As we need to support orientated (rotated) bounding boxes, TBuffer3D requires the 6 vertices of the box. We also provide a convenience function, SetAABoundingBox(), for simpler case of setting an axis aligned bounding box. Master/Local Reference Frames; The Core section of TBuffer3D contains two members relating to reference frames: fLocalFrame & fLocalMaster. fLocalFrame indicates if any positions in the buffer (bounding box and tessellation vertexes) are in local or master (world frame). fLocalMaster is a standard 4x4 translation matrix (OpenGL column major ordering) for placing the object into the 3D master frame.; If fLocalFrame is kFALSE, fLocalMaster should contain an identity matrix. This is set by default, and can be reset using SetLocalMasterIdentity() function. Logical & Physical Objects; There are two cases of object addition:. Add this object as a single independent entity in the world reference frame.; Add a physical placement (copy) of this logical object (described in local reference frame). The second case is very typical in geometry packages, GEANT4, where we have very large number repeated placements of relatively few logical (unique) shapes. Some viewers (OpenGL only at present) are able to take advantage of this by identifying unique logical shapes from the fID logical ID member of TBuffer3D. If repeated addition of the same fID is found, the shape is cached already - and the costly tessellation does not need to be sent again. The viewer can also perform internal GL specific caching with considerable performance gains in these cases.; For this to work correctly the logical object in must be described in TBuffer3D in the local reference frame, complete with the local/master translation. The viewer indicates this through the interface method PreferLocalFrame(); TVirtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualViewer3D.html:7149,Log,Logical,7149,doc/master/classTVirtualViewer3D.html,https://root.cern,https://root.cern/doc/master/classTVirtualViewer3D.html,1,['Log'],['Logical']
Testability,"HypoTestCalculator*fCalculator0pointer to the calculator passed in the constructor; RooStats::HypoTestInverterResult*fResults; RooRealVar*fScannedVariablepointer to the constrained variable; doublefSize; boolfUseCLs. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; HypoTestInverterOriginal(); default constructor (doesn't do anything). HypoTestInverterOriginal(RooStats::HypoTestCalculator& myhc0, RooRealVar& scannedVariable, double size = 0.05); constructor from a reference to an HypoTestCalculator; (it must be an HybridCalculator type) and a RooRealVar for the variable. ~HypoTestInverterOriginal(); destructor. void CreateResults(); create a new HypoTestInverterResult to hold all computed results. bool RunAutoScan(double xMin, double xMax, double target, double epsilon = 0.005, unsigned int numAlgorithm = 0); Search for the value of the parameter of interest (vary the; hypothesis being tested) in the specified range [xMin,xMax]; until the confidence level is compatible with the target value; within one time the estimated error (and the estimated error; should also become smaller than the specified parameter epsilon). bool RunFixedScan(int nBins, double xMin, double xMax); Run a Fixed scan in npoints between min and max. bool RunOnePoint(double thisX); run only one point. HypoTestInverterOriginal(); default constructor (used only for I/O). HypoTestInverterResult* GetInterval() const; { return fResults; }. void UseCLs(bool on = true); { fUseCLs = on; if (fResults) fResults->UseCLs(on); }. void SetData(RooAbsData& ); { }. void SetModel(const RooStats::ModelConfig& ); { }. void SetTestSize(Double_t size); set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval). {fSize = size; if (fResults) fResults->SetTestSize(size); }. void SetConfidenceLevel(Double_t cl); set the confidence level for the interval (eg. 0.95 for a 95% Confidence Interval). {fSize = 1.-cl; if (fResults) fResults->SetConfidenceLev",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__HypoTestInverterOriginal.html:8570,test,tested,8570,root/html530/RooStats__HypoTestInverterOriginal.html,https://root.cern,https://root.cern/root/html530/RooStats__HypoTestInverterOriginal.html,3,['test'],['tested']
Testability,"I axis ;  ; file  graphpolar3.C;   Create and draw a polar graph with PI axis using a TF1. ;  ; file  graphreverse.C;   This example test all the various case of reverse graphs combined with logarithmic scale. ;  ; file  graphShade.C;   Show how to shade an area between two graphs ;  ; file  graphstruct.C;   Draw a simple graph structure. ;  ; file  graphtext.C;   Draw a graph with text attached to each point. ;  ; file  gtime.C;   Example of TGraphTime. ;  ; file  gtime2.C;   Example of TGraphTime showing how the class could be used to visualize a set of particles with their time stamp in a MonteCarlo program. ;  ; file  hlGraph1.C;  This tutorial demonstrates how to use the highlight mode on graph. ;  ; file  hlGraph2.C;  This tutorial demonstrates how to use the highlight mode on graph. ;  ; file  labels1.C;   Setting alphanumeric labels in a 1-d histogram. ;  ; file  labels2.C;   Setting alphanumeric labels. ;  ; file  motorcycle.C;   Macro to test scatterplot smoothers: ksmooth, lowess, supsmu as described in: ;  ; file  multigraph.C;   Create and Draw a TMultiGraph. ;  ; file  multigraphpalettecolor.C;   Palette coloring for multi-graphs is activated thanks to the options PFC (Palette Fill Color), PLC (Palette Line Color) and AMC (Palette Marker Color). ;  ; file  multipalette.C;   Draw color plots using different color palettes. ;  ; file  scatter.C;   Draw a scatter plot. ;  ; file  seism.C;   Strip chart example. ;  ; file  splines_test.C;   Examples of use of the spline classes. ;  ; file  surfaces.C;   Draw 2-Dim functions. ;  ; file  timeonaxis.C;   This macro illustrates the use of the time mode on the axis with different time intervals and time formats. ;  ; file  timeonaxis2.C;   Define the time offset as 2003, January 1st. ;  ; file  timeonaxis3.C;   This example compares what the system time function gmtime and localtime give with what gives TGaxis. ;  ; file  timeSeriesFromCSV.C;   This macro illustrates the use of the time axis on a TGraph with dat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__graphs.html:2233,test,test,2233,doc/master/group__tutorial__graphs.html,https://root.cern,https://root.cern/doc/master/group__tutorial__graphs.html,1,['test'],['test']
Testability,"I(Double_t x, Double_t par); compute the Poisson distribution function for (x,par); This is a non-smooth function.; This function is equivalent to ROOT::Math::poisson_pdf. /*. */. Double_t Prob(Double_t chi2, Int_t ndf); Computation of the probability for a certain Chi-squared (chi2); and number of degrees of freedom (ndf). Calculations are based on the incomplete gamma function P(a,x),; where a=ndf/2 and x=chi2/2. P(a,x) represents the probability that the observed Chi-squared; for a correct model should be less than the value chi2. The returned probability corresponds to 1-P(a,x),; which denotes the probability that an observed Chi-squared exceeds; the value chi2 by chance, even for a correct model. --- NvE 14-nov-1998 UU-SAP Utrecht. Double_t KolmogorovProb(Double_t z); Calculates the Kolmogorov distribution function,. /*; ; */. which gives the probability that Kolmogorov's test statistic will exceed; the value z assuming the null hypothesis. This gives a very powerful; test for comparing two one-dimensional distributions.; see, for example, Eadie et al, ""statistocal Methods in Experimental; Physics', pp 269-270). This function returns the confidence level for the null hypothesis, where:; z = dn*sqrt(n), and; dn is the maximum deviation between a hypothetical distribution; function and an experimental distribution with; n events. NOTE: To compare two experimental distributions with m and n events,; use z = sqrt(m*n/(m+n))*dn. Accuracy: The function is far too accurate for any imaginable application.; Probabilities less than 10^-15 are returned as zero.; However, remember that the formula is only valid for ""large"" n.; Theta function inversion formula is used for z <= 1. This function was translated by Rene Brun from PROBKL in CERNLIB. Double_t KolmogorovTest(Int_t na, const Double_t* a, Int_t nb, const Double_t* b, Option_t* option); Statistical test whether two one-dimensional sets of points are compatible; with coming from the same parent distribution, using the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMath.html:16422,test,test,16422,root/html528/TMath.html,https://root.cern,https://root.cern/root/html528/TMath.html,6,['test'],['test']
Testability,"ID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRealMPFE.html:59583,log,logging,59583,doc/master/classRooRealMPFE.html,https://root.cern,https://root.cern/doc/master/classRooRealMPFE.html,1,['log'],['logging']
Testability,"ID.cxx:297; Then array.Add(obj);; is correct (obj comes from the process the array is pointed to while TObject *nobj = new TObject;; array.Add(nobj);; TObject::TObjectTObject()TObject constructor.Definition TObject.h:254; is incorrect since 'nobj' was created in a different process than the one the array is pointed to. In this case you will see error message: Error in <TRefArray::AddAtAndExpand>: The object at 0x... is not; registered in the process the TRefArray point to; (pid = ProcessID../....); TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; xDouble_t x[n]Definition legend1.C:17; When a TRefArray is Streamed, only the pointer unique id is written, not the referenced object. TRefArray may be assigned to different branches of one Tree or several Trees. The branch containing the TRefArray can be read before or after the array (eg TClonesArray, STL vector,..) of the referenced objects.; See an example in $ROOTSYS/test/Event.h. RESTRICTIONS when using TRefArray. Elements in a TRefArray cannot point to a TFile or TDirectory.; All elements of a TRefArray must be set in the same process, In particular, one cannot modify some elements of the array in a different process. Use an array of TRef when one of the above restrictions is met.; The number of TRef handled by a single process id is limited to 16777215 (see TRef for more detail). When the TProcessID is full (has seen 16777215 objects), we switch to new one TProcessID maximum 65535 including the TProcessIDs read from file). However TRefArray can not switch to new TProcessID if they already contain objects.; When the TProcessID has been switched due to overflow and an new object is added to an existing, empty TRefArray, you will see:; Warning in <TRefArray::AddAtAndExpand>: The ProcessID for the 0x5f83819e8 has been switched to ProcessID4/6c89f37e-8259-11e2-9717-166ee183beef:4; TObject::Warningvirtual void Warning(const char *method, cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRefArray.html:2376,test,test,2376,doc/master/classTRefArray.html,https://root.cern,https://root.cern/doc/master/classTRefArray.html,1,['test'],['test']
Testability,"IGNAL ; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual Int_tParseBuffer(const char* contents, Int_t len); virtual Int_tParseFile(const char* filename); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); voidTXMLParser::SetReplaceEntities(Bool_t val = kTRUE); voidTXMLParser::SetStopOnError(Bool_t stop = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); voidTXMLParser::SetValidate(Bool_t val = kTRUE); virtual voidShowMembers(TMemberInspector&); virtual voidTXMLParser::StopParser(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TSAXParser.html:8634,Test,TestBit,8634,root/html534/TSAXParser.html,https://root.cern,https://root.cern/root/html534/TSAXParser.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"ILE * TProofServ::SetErrorHandlerFile ; (; FILE * ; ferr). static . Set the file stream where to log (default stderr). ; If ferr == 0 the default is restored. Returns current setting. ; Definition at line 5744 of file TProofServ.cxx. ◆ SetIdle(). void TProofServ::SetIdle ; (; Bool_t ; st = kTRUE). private . Change the idle status. ; Definition at line 6827 of file TProofServ.cxx. ◆ SetLastEntry(). void TProofServ::SetLastEntry ; (; Long64_t ; lastentry). static . Set the last entry before exception. ; Definition at line 6912 of file TProofServ.cxx. ◆ SetLastMsg(). void TProofServ::SetLastMsg ; (; const char * ; lastmsg). static . Set the message to be sent back in case of exceptions. ; Definition at line 6904 of file TProofServ.cxx. ◆ SetQueryRunning(). void TProofServ::SetQueryRunning ; (; TProofQueryResult * ; pq). private . Set query in running state. ; Definition at line 3564 of file TProofServ.cxx. ◆ Setup(). Int_t TProofServ::Setup ; (; ). protectedvirtual . Print the ProofServ logo on standard output. ; Return 0 on success, -1 on failure ; Reimplemented in TProofServLite.; Definition at line 2803 of file TProofServ.cxx. ◆ SetupCommon(). Int_t TProofServ::SetupCommon ; (; ). protected . Common part (between TProofServ and TXProofServ) of the setup phase. ; Return 0 on success, -1 on error ; Definition at line 2953 of file TProofServ.cxx. ◆ Streamer(). void TProofServ::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TApplication.; Reimplemented in TProofServLite. ◆ StreamerNVirtual(). void TProofServ::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 344 of file TProofServ.h. ◆ Terminate(). void TProofServ::Terminate ; (; Int_t ; status). overridevirtual . Terminate the proof server. ; Reimplemented from TApplication.; Reimplemented in TProofServLite.; Definition at line 3369 of file TProofServ.cxx. ◆ This(). TProofServ * TProofServ::This ; (; ). static . Static ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofServ.html:55067,log,logo,55067,doc/master/classTProofServ.html,https://root.cern,https://root.cern/doc/master/classTProofServ.html,1,['log'],['logo']
Testability,"INE; 547#define R__ALWAYS_INLINE inline __attribute__((always_inline)); 548#else; 549#if defined(_MSC_VER); 550#define R__ALWAYS_INLINE __forceinline; 551#else; 552#define R__ALWAYS_INLINE inline; 553#endif; 554#endif; 555 ; 556// See also https://nemequ.github.io/hedley/api-reference.html#HEDLEY_NEVER_INLINE; 557// for other platforms.; 558#ifdef R__HAS_ATTRIBUTE_NOINLINE; 559#define R__NEVER_INLINE inline __attribute__((noinline)); 560#else; 561#if defined(_MSC_VER); 562#define R__NEVER_INLINE inline __declspec(noinline); 563#else; 564#define R__NEVER_INLINE inline; 565#endif; 566#endif; 567 ; 568/*---- unlikely / likely expressions -----------------------------------------*/; 569// These are meant to use in cases like:; 570// if (R__unlikely(expression)) { ... }; 571// in performance-critical sections. R__unlikely / R__likely provide hints to; 572// the compiler code generation to heavily optimize one side of a conditional,; 573// causing the other branch to have a heavy performance cost.; 574//; 575// It is best to use this for conditionals that test for rare error cases or; 576// backward compatibility code.; 577 ; 578#if (__GNUC__ >= 3) || defined(__INTEL_COMPILER); 579#if !defined(R__unlikely); 580 #define R__unlikely(expr) __builtin_expect(!!(expr), 0); 581#endif; 582#if !defined(R__likely); 583 #define R__likely(expr) __builtin_expect(!!(expr), 1); 584#endif; 585#else; 586 #define R__unlikely(expr) expr; 587 #define R__likely(expr) expr; 588#endif; 589 ; 590// Setting this define causes ROOT to keep statistics about memory buffer allocation; 591// time within the TTree. Given that this is a ""hot-path"", we provide a mechanism; 592// for enabling / disabling this at compile time by developers; default is disabled.; 593#ifndef R__TRACK_BASKET_ALLOC_TIME; 594//#define R__TRACK_BASKET_ALLOC_TIME 1; 595#endif; 596 ; 597#endif. corefoundationincROOTRConfig.hxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:10 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RConfig_8hxx_source.html:16350,test,test,16350,doc/master/RConfig_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RConfig_8hxx_source.html,1,['test'],['test']
Testability,"IOFeatures ; input_bits). Set a specific IO feature. ; Parameters. [in]input_bitsThe specific feature to enable. Sets a feature in the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT.; If the feature is supported by ROOT, this function returns true; otherwise, it returns false. ; Definition at line 139 of file TIOFeatures.cxx. ◆ Set() [3/4]. bool TIOFeatures::Set ; (; Experimental::EIOFeatures ; input_bits). Set a specific IO feature. ; Parameters. [in]input_bitsThe specific feature to enable. Sets a feature in the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT.; If the feature is supported by ROOT, this function returns true; otherwise, it returns false. ; Definition at line 125 of file TIOFeatures.cxx. ◆ Set() [4/4]. void ROOT::TIOFeatures::Set ; (; UChar_t ; newBits). inlineprivate . Definition at line 98 of file TIOFeatures.hxx. ◆ Test() [1/3]. bool TIOFeatures::Test ; (; EIOFeatures ; input_bits); const. Test to see if a given feature is set. ; Parameters. [in]input_bitsThe specific feature to test. Returns true if the feature is enables in this object and supported by this version of ROOT. ; Definition at line 239 of file TIOFeatures.cxx. ◆ Test() [2/3]. bool TIOFeatures::Test ; (; Experimental::EIOFeatures ; input_bits); const. Test to see if a given feature is set. ; Parameters. [in]input_bitsThe specific feature to test. Returns true if the feature is enables in this object and supported by this version of ROOT. ; Definition at line 228 of file TIOFeatures.cxx. ◆ Test() [3/3]. bool ROOT::TIOFeatures::Test ; (; Experimental::EIOUnsupportedFeatures ; bits); const. Friends And Related Symbol Documentation. ◆ ::TBasket. friend class ::TBasket. friend . Definition at line 72 of file TIOFeatures.hxx. ◆ ::TBranch. friend class ::TBranch. friend . Definition at line 71 of file TIOFeatures.hxx. ◆ ::TTree. friend class ::TTree. friend . Definition at line 70 o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TIOFeatures.html:6231,Test,Test,6231,doc/v632/classROOT_1_1TIOFeatures.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TIOFeatures.html,2,['Test'],['Test']
Testability,"IParamMultiFunction> . typedef BasicFCN<DerivFunType,ModelFunType,UnBinData> ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::BaseFCN. Definition at line 45 of file LogLikelihoodFCN.h. ◆ BaseFunction. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . typedef BaseObjFunction::BaseFunction ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::BaseFunction. Definition at line 48 of file LogLikelihoodFCN.h. ◆ BaseObjFunction. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . typedef ::ROOT::Math::BasicFitMethodFunction<DerivFunType> ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::BaseObjFunction. Definition at line 47 of file LogLikelihoodFCN.h. ◆ IModelFunction. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . typedef ::ROOT::Math::IParamMultiFunctionTempl<T> ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::IModelFunction. Definition at line 50 of file LogLikelihoodFCN.h. ◆ T. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . typedef ModelFunType::BackendType ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::T. Definition at line 44 of file LogLikelihoodFCN.h. ◆ Type_t. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . typedef BaseObjFunction::Type_t ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::Type_t. Definition at line 51 of file LogLikelihoodFCN.h. Constructor & Destructor Documentation. ◆ LogLikelihoodFCN() [1/3]. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::LogLikelihoodFCN ; (; const std::shared_ptr< UnBinData > & ; data, . const std::shared_ptr< IModelFunction > & ; func, . int ; weight = 0, . bool ; extended = false, . const ::ROOT::EExecutionPolicy & ; executionPolicy = ::ROOT::EExecutionPolicy::kSequential . ). inline . Const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html:7344,Log,LogLikelihoodFCN,7344,doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html,1,['Log'],['LogLikelihoodFCN']
Testability,"IST; » HIST; » TFitResultPtr. class TFitResultPtr. Function Members (Methods); public:. virtual~TFitResultPtr(); static TClass*Class(); TFitResult*Get() const; virtual TClass*IsA() const; intoperator int() const; TFitResult&operator*() const; TFitResult*operator->() const; TFitResultPtr&operator=(const TFitResultPtr& rhs); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TFitResultPtr(int status = -1); TFitResultPtr(TFitResult* p); TFitResultPtr(const TFitResultPtr& rhs). Data Members; private:. TFitResult*fPointerSmart Pointer to TFitResult class; intfStatusfit status code. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TFitResultPtr(TFitResult* p); constructor from a TFitResult pointer. TFitResultPtr(const TFitResultPtr& rhs); copy constructor - create a new TFitResult if needed. ~TFitResultPtr(); destructor - delete the contained TFitResult pointer if needed. TFitResult& operator*() const; implement the de-reference operator to make the class acts as a pointer to a TFitResult; assert in case the class does not contain a pointer to TFitResult. TFitResult* operator->() const; implement the -> operator to make the class acts as a pointer to a TFitResult; assert in case the class does not contain a pointer to TFitResult. TFitResultPtr & operator=(const TFitResultPtr& rhs); assignment operator; if needed copy the TFitResult object and delete previous one if existing. TFitResultPtr(int status = -1); {}. operator int() const; { return fStatus; }. TFitResult* Get() const; { return fPointer; }. » Author: David Gonzalez Maline Tue Nov 10 15:01:24 2009 » Copyright (C) 1995-2009, Rene Brun and Fons Rademakers. *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-02 13:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TFitResultPtr.html:1370,assert,assert,1370,root/html602/TFitResultPtr.html,https://root.cern,https://root.cern/root/html602/TFitResultPtr.html,2,['assert'],['assert']
Testability,"IT in MethodCuts; preferred fit method: GA"" << Endl;; 388 }; 389 else if (fFitMethodS == ""EventScan"" ) fFitMethod = kUseEventScan;; 390 else Log() << kFATAL << ""unknown minimisation method: "" << fFitMethodS << Endl;; 391 ; 392 if (fEffMethodS == ""EFFSEL"" ) fEffMethod = kUseEventSelection; // highly recommended; 393 else if (fEffMethodS == ""EFFPDF"" ) fEffMethod = kUsePDFs;; 394 else fEffMethod = kUseEventSelection;; 395 ; 396 // options output; 397 Log() << kINFO << Form(""Use optimization method: \""%s\"""",; 398 (fFitMethod == kUseMonteCarlo) ? ""Monte Carlo"" :; 399 (fFitMethod == kUseMonteCarlo) ? ""Monte-Carlo-Event sampling"" :; 400 (fFitMethod == kUseEventScan) ? ""Full Event Scan (slow)"" :; 401 (fFitMethod == kUseMinuit) ? ""MINUIT"" : ""Genetic Algorithm"" ) << Endl;; 402 Log() << kINFO << Form(""Use efficiency computation method: \""%s\"""",; 403 (fEffMethod == kUseEventSelection) ? ""Event Selection"" : ""PDF"" ) << Endl;; 404 ; 405 // cut ranges; 406 for (UInt_t ivar=0; ivar<GetNvar(); ivar++) {; 407 fCutRange[ivar] = new Interval( fCutRangeMin[ivar], fCutRangeMax[ivar] );; 408 }; 409 ; 410 // individual options; 411 for (UInt_t ivar=0; ivar<GetNvar(); ivar++) {; 412 EFitParameters theFitP = kNotEnforced;; 413 if (fAllVarsI[ivar] == """" || fAllVarsI[ivar] == ""NotEnforced"") theFitP = kNotEnforced;; 414 else if (fAllVarsI[ivar] == ""FMax"" ) theFitP = kForceMax;; 415 else if (fAllVarsI[ivar] == ""FMin"" ) theFitP = kForceMin;; 416 else if (fAllVarsI[ivar] == ""FSmart"" ) theFitP = kForceSmart;; 417 else {; 418 Log() << kFATAL << ""unknown value \'"" << fAllVarsI[ivar]; 419 << ""\' for fit parameter option "" << Form(""VarProp[%i]"",ivar) << Endl;; 420 }; 421 (*fFitParams)[ivar] = theFitP;; 422 ; 423 if (theFitP != kNotEnforced); 424 Log() << kINFO << ""Use \"""" << fAllVarsI[ivar]; 425 << ""\"" cuts for variable: "" << ""'"" << (*fInputVars)[ivar] << ""'"" << Endl;; 426 }; 427}; 428 ; 429////////////////////////////////////////////////////////////////////////////////; 430/// cut evaluation: returns 1.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodCuts_8cxx_source.html:15653,Log,Log,15653,doc/master/MethodCuts_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodCuts_8cxx_source.html,2,['Log'],['Log']
Testability,"IconPixmap(const char* iconName); voidTGMainFrame::SetIconPixmap(char** xpm_array); voidSetLabel(const char* title); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); voidTGMainFrame::SetMWMHints(UInt_t value, UInt_t funcs, UInt_t input); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGMainFrame::SetWindowName(const char* name = 0); voidTGMainFrame::SetWMPosition(Int_t x, Int_t y); voidTGMainFrame::SetWMSize(UInt_t w, UInt_t h); voidTGMainFrame::SetWMSizeHints(UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc); voidTGMainFrame::SetWMState(EInitialState state); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); Bool_tValidateAlias(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGSelectBox.html:16191,Test,TestBit,16191,root/html534/TGSelectBox.html,https://root.cern,https://root.cern/root/html534/TGSelectBox.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"IdStr() const; static const char*LockName(TGLLockable::ELock lock); static Bool_tLockValid(TGLLockable::ELock lock); Bool_tReleaseLock(TGLLockable::ELock lock) const; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); Bool_tTakeLock(TGLLockable::ELock lock) const; TGLLockable(). private:. TGLLockable&operator=(const TGLLockable&); TGLLockable(const TGLLockable&). Data Members; public:. static TGLLockable::ELockkDrawLock; static TGLLockable::ELockkModifyLock; static TGLLockable::ELockkSelectLock; static TGLLockable::ELockkUnlocked. protected:. TGLLockable::ELockfLockLock state. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLLockable(); Constructor. Bool_t TakeLock(TGLLockable::ELock lock) const; Lock the object in mode 'lock'. Return TRUE if successful, FALSE; if the object is already locked. Bool_t ReleaseLock(TGLLockable::ELock lock) const; Release current lock, make sure it the same as the 'lock' argument.; Returns TRUE on success, FALSE on failure. const char* LockName(TGLLockable::ELock lock); Return name-string for given lock-type. Bool_t LockValid(TGLLockable::ELock lock); Test if lock is a valid type to take/release.; kUnlocked is never valid in these cases. TGLLockable(const TGLLockable& ). TGLLockable& operator=(const TGLLockable& ). virtual ~TGLLockable(); {}. const char* LockIdStr() const; { return ""<unknown>""; }. Bool_t IsLocked() const; { return (fLock != kUnlocked); }. ELock CurrentLock() const; { return fLock; }. Bool_t IsDrawOrSelectLock() const; { return fLock == kDrawLock || fLock == kSelectLock; }. » Author: Matevz Tadel, Feb 2007 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id$ » Last generated: 2015-06-02 15:52; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGLLockable.html:1812,Test,Test,1812,root/html604/TGLLockable.html,https://root.cern,https://root.cern/root/html604/TGLLockable.html,1,['Test'],['Test']
Testability,"IdStr() const; static const char*LockName(TGLLockable::ELock lock); static Bool_tLockValid(TGLLockable::ELock lock); Bool_tReleaseLock(TGLLockable::ELock lock) const; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); Bool_tTakeLock(TGLLockable::ELock lock) const; TGLLockable(). private:. TGLLockable&operator=(const TGLLockable&); TGLLockable(const TGLLockable&). Data Members; public:. static TGLLockable::ELockkDrawLock; static TGLLockable::ELockkModifyLock; static TGLLockable::ELockkSelectLock; static TGLLockable::ELockkUnlocked. protected:. TGLLockable::ELockfLockLock state. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLLockable(); Constructor. Bool_t TakeLock(TGLLockable::ELock lock) const; Lock the object in mode 'lock'. Return TRUE if successful, FALSE; if the object is already locked. Bool_t ReleaseLock(TGLLockable::ELock lock) const; Release current lock, make sure it the same as the 'lock' argument.; Returns TRUE on success, FALSE on failure. const char* LockName(TGLLockable::ELock lock); Return name-string for given lock-type. Bool_t LockValid(TGLLockable::ELock lock); Test if lock is a valid type to take/release.; kUnlocked is never valid in these cases. TGLLockable(const TGLLockable& ). TGLLockable& operator=(const TGLLockable& ). virtual ~TGLLockable(); {}. const char* LockIdStr() const; { return ""<unknown>""; }. Bool_t IsLocked() const; { return (fLock != kUnlocked); }. ELock CurrentLock() const; { return fLock; }. Bool_t IsDrawOrSelectLock() const; { return fLock == kDrawLock || fLock == kSelectLock; }. » Author: Matevz Tadel, Feb 2007 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id$ » Last generated: 2015-06-30 14:53; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLLockable.html:1812,Test,Test,1812,root/html602/TGLLockable.html,https://root.cern,https://root.cern/root/html602/TGLLockable.html,1,['Test'],['Test']
Testability,"Identity; : Using 2560 events for training and 640 for testing; : Compute initial loss on the validation data ; : Training phase 1 of 1: Optimizer ADAM (beta1=0.9,beta2=0.999,eps=1e-07) Learning rate = 0.001 regularization 0 minimum error = 0.7616; : --------------------------------------------------------------; : Epoch | Train Err. Val. Err. t(s)/epoch t(s)/Loss nEvents/s Conv. Steps; : --------------------------------------------------------------; : Start epoch iteration ...; : 1 Minimum Test error found - save the configuration ; : 1 | 0.731202 0.712689 0.193045 0.0157486 14439.1 0; : 2 Minimum Test error found - save the configuration ; : 2 | 0.701214 0.698536 0.191577 0.0154545 14535.3 0; : 3 Minimum Test error found - save the configuration ; : 3 | 0.6901 0.69615 0.192163 0.0158037 14515.8 0; : 4 | 0.683586 0.700826 0.19294 0.0151654 14400.2 1; : 5 | 0.682085 0.701998 0.192893 0.0153949 14422.7 2; : 6 | 0.6867 0.696275 0.191869 0.0152227 14492.2 3; : 7 Minimum Test error found - save the configuration ; : 7 | 0.692231 0.691692 0.197632 0.0164904 14132.6 0; : 8 | 0.683383 0.694963 0.194299 0.0156318 14328.3 1; : 9 Minimum Test error found - save the configuration ; : 9 | 0.682898 0.684979 0.192122 0.0157399 14513.9 0; : 10 | 0.670592 0.688549 0.192796 0.0152906 14422.1 1; : 11 Minimum Test error found - save the configuration ; : 11 | 0.670202 0.684295 0.191832 0.0154715 14515.7 0; : 12 Minimum Test error found - save the configuration ; : 12 | 0.675447 0.682107 0.194058 0.0158608 14366.1 0; : 13 | 0.678105 0.691356 0.193716 0.0152633 14345.5 1; : 14 | 0.684972 0.687408 0.191852 0.0154194 14509.8 2; : 15 | 0.676423 0.689156 0.193176 0.0153404 14395.3 3; : 16 | 0.683185 0.689966 0.191807 0.0149908 14478.3 4; : 17 | 0.672717 0.689982 0.192316 0.0149466 14433.2 5; : 18 | 0.670449 0.68412 0.190877 0.0151753 14570.1 6; : 19 Minimum Test error found - save the configuration ; : 19 | 0.661329 0.670317 0.192098 0.0154074 14488.6 0; : 20 Minimum Test error found - save",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html:19531,Test,Test,19531,doc/master/TMVA__RNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html,1,['Test'],['Test']
Testability,"If the list name is not specified, the first object of class TEntryList in the file is taken.; nfiles is the total number of files to process ; Definition at line 64 of file TEntryListFromFile.cxx. ◆ ~TEntryListFromFile(). TEntryListFromFile::~TEntryListFromFile ; (; ). override . d-tor ; Definition at line 78 of file TEntryListFromFile.cxx. Member Function Documentation. ◆ Add(). void TEntryListFromFile::Add ; (; const TEntryList * ; elist). inlineoverridevirtual . Add 2 entry lists. ; Parameters. [in]elistThe list that should be added to the current one. NoteIf you are creating a TEntryList for a TChain and you would like to have a one to one mapping between the sub lists of the TEntryList and the sub trees in the TChain, please do not call this function but use TEntryList::AddSubList instead and pair it with a call to TChain::SetEntryList with option ""sync"". See the AddSubList function documentation for an example usage. This helps for example in a testing or benchmark scenario where a TChain holds multiple times the same tree in the same file. In that case, this function would not be be able to distinguish different sub entry lists that refer to the same treename and filename. Instead it would create a union of all the sub entry lists into one list. ; Reimplemented from TEntryList.; Definition at line 63 of file TEntryListFromFile.h. ◆ Class(). static TClass * TEntryListFromFile::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TEntryListFromFile::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TEntryListFromFile::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 97 of file TEntryListFromFile.h. ◆ Contains(). Int_t TEntryListFromFile::Contains ; (; Long64_t ; entry, . TTree * ; tree . ). inlineoverridevirtual . When tree = 0, returns from the current list; When tree != 0, finds the list, corresponding to this tree; W",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEntryListFromFile.html:21377,test,testing,21377,doc/master/classTEntryListFromFile.html,https://root.cern,https://root.cern/doc/master/classTEntryListFromFile.html,2,"['benchmark', 'test']","['benchmark', 'testing']"
Testability,"Increment (Double_t dalpha);  ;  Public Member Functions inherited from TMVA::IPruneTool;  IPruneTool ();  ; virtual ~IPruneTool ();  ; Double_t GetPruneStrength () const;  ; Bool_t IsAutomatic () const;  ; void SetAutomatic ();  ; void SetPruneStrength (Double_t alpha);  . Private Member Functions; Int_t CountNodes (DecisionTreeNode *node, Int_t icount=0);  ; void FindListOfNodes (DecisionTreeNode *node);  recursive pruning of nodes using the Expected Error Pruning (EEP) ;  ; Double_t GetNodeError (DecisionTreeNode *node) const;  Calculate an UPPER limit on the error made by the classification done by this node. ;  ; Double_t GetSubTreeError (DecisionTreeNode *node) const;  calculate the expected statistical error on the subtree below ""node"" which is used in the expected error pruning ;  ; MsgLogger & Log () const;  . Private Attributes; Double_t fDeltaPruneStrength;  ! the stepsize for optimizing the pruning strength parameter ;  ; MsgLogger * fLogger;  ! message logger ;  ; Double_t fNodePurityLimit;  ! the purity limit for labelling a terminal node as signal ;  ; std::vector< DecisionTreeNode * > fPruneSequence;  ! the (optimal) prune sequence ;  . Additional Inherited Members;  Public Types inherited from TMVA::IPruneTool; typedef std::vector< const Event * > EventSample;  ;  Protected Attributes inherited from TMVA::IPruneTool; Double_t B;  ; Double_t fPruneStrength;  ! regularization parameter in pruning ;  ; Double_t S;  . #include <TMVA/ExpectedErrorPruneTool.h>. Inheritance diagram for TMVA::ExpectedErrorPruneTool:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ExpectedErrorPruneTool(). TMVA::ExpectedErrorPruneTool::ExpectedErrorPruneTool ; (; ). Definition at line 62 of file ExpectedErrorPruneTool.cxx. ◆ ~ExpectedErrorPruneTool(). TMVA::ExpectedErrorPruneTool::~ExpectedErrorPruneTool ; (; ). virtual . Definition at line 71 of file ExpectedErrorPruneTool.cxx. Member",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1ExpectedErrorPruneTool.html:2301,log,logger,2301,doc/master/classTMVA_1_1ExpectedErrorPruneTool.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ExpectedErrorPruneTool.html,1,['log'],['logger']
Testability,"Increment statistics for buffer sizes of objects in this file.; 2417 ; 2418void TFile::SumBuffer(Int_t bufsize); 2419{; 2420 fWritten++;; 2421 fSumBuffer += double(bufsize);; 2422 fSum2Buffer += double(bufsize) * double(bufsize); // avoid reaching MAXINT for temporary; 2423}; 2424 ; 2425////////////////////////////////////////////////////////////////////////////////; 2426/// Write memory objects to this file.; 2427///; 2428/// Loop on all objects in memory (including subdirectories).; 2429/// A new key is created in the KEYS linked list for each object.; 2430/// The list of keys is then saved on the file (via WriteKeys); 2431/// as a single data record.; 2432/// For values of opt see TObject::Write().; 2433/// The directory header info is rewritten on the directory header record.; 2434/// The linked list of FREE segments is written.; 2435/// The file header is written (bytes 1->fBEGIN).; 2436 ; 2437Int_t TFile::Write(const char *, Int_t opt, Int_t bufsiz); 2438{; 2439 if (!IsWritable()) {; 2440 if (!TestBit(kWriteError)) {; 2441 // Do not print the warning if we already had a SysError.; 2442 Warning(""Write"", ""file %s not opened in write mode"", GetName());; 2443 }; 2444 return 0;; 2445 }; 2446 ; 2447 if (gDebug) {; 2448 if (!GetTitle() || strlen(GetTitle()) == 0); 2449 Info(""Write"", ""writing name = %s"", GetName());; 2450 else; 2451 Info(""Write"", ""writing name = %s title = %s"", GetName(), GetTitle());; 2452 }; 2453 ; 2454 fMustFlush = kFALSE;; 2455 Int_t nbytes = TDirectoryFile::Write(0, opt, bufsiz); // Write directory tree; 2456 WriteStreamerInfo();; 2457 WriteFree(); // Write free segments linked list; 2458 WriteHeader(); // Now write file header; 2459 fMustFlush = kTRUE;; 2460 ; 2461 return nbytes;; 2462}; 2463 ; 2464////////////////////////////////////////////////////////////////////////////////; 2465/// One can not save a const TDirectory object.; 2466 ; 2467Int_t TFile::Write(const char *n, Int_t opt, Int_t bufsize) const; 2468{; 2469 Error(""Write const"",""A cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFile_8cxx_source.html:86654,Test,TestBit,86654,doc/master/TFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFile_8cxx_source.html,1,['Test'],['TestBit']
Testability,"Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » SQL; » MYSQL; » TMySQLServer. class TMySQLServer: public TSQLServer. TMySQLServer. MySQL server plugin implementing the TSQLServer interface. To open a connection to a server use the static method Connect().; The db argument of Connect() is of the form:; mysql://<host>[:<port>][/<database>], e.g.; mysql://pcroot.cern.ch:3456/test. As an example of connecting to mysql we assume that the server is; running on the local host and that you have access to a database; named ""test"" by connecting using an account that has a username and; password of ""tuser"" and ""tpass"". You can set up this account; by using the ""mysql"" program to connect to the server as the MySQL; root user and issuing the following statement:. mysql> GRANT ALL ON test.* TO 'tuser'@'localhost' IDENTIFIED BY 'tpass';. If the test database does not exist, create it with this statement:. mysql> CREATE DATABASE test;. If you want to use a different server host, username, password,; or database name, just substitute the appropriate values.; To connect do:. TSQLServer *db = TSQLServer::Connect(""mysql://localhost/test"", ""tuser"", ""tpass"");. Function Members (Methods); public:. TMySQLServer(const TMySQLServer&); TMySQLServer(const char* db, const char* uid, const char* pw); virtual~TMySQLServer(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidClose(Option_t* opt = """"); virtual Bool_tCommit(); virtual Int_tTObject::Compare(const TObject* obj) const; static TSQLServer*TSQLServer::Connect(const char* db, const char* uid, const char* pw); virtual voidTOb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMySQLServer.html:1025,test,test,1025,root/html528/TMySQLServer.html,https://root.cern,https://root.cern/root/html528/TMySQLServer.html,4,['test'],['test']
Testability,"Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » SQL; » MYSQL; » TMySQLServer. class TMySQLServer: public TSQLServer. TMySQLServer. MySQL server plugin implementing the TSQLServer interface. To open a connection to a server use the static method Connect().; The db argument of Connect() is of the form:; mysql://<host>[:<port>][/<database>], e.g.; mysql://pcroot.cern.ch:3456/test. As an example of connecting to mysql we assume that the server is; running on the local host and that you have access to a database; named ""test"" by connecting using an account that has a username and; password of ""tuser"" and ""tpass"". You can set up this account; by using the ""mysql"" program to connect to the server as the MySQL; root user and issuing the following statement:. mysql> GRANT ALL ON test.* TO 'tuser'@'localhost' IDENTIFIED BY 'tpass';. If the test database does not exist, create it with this statement:. mysql> CREATE DATABASE test;. If you want to use a different server host, username, password,; or database name, just substitute the appropriate values.; To connect do:. TSQLServer *db = TSQLServer::Connect(""mysql://localhost/test"", ""tuser"", ""tpass"");. Function Members (Methods); public:. virtual~TMySQLServer(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidClose(Option_t* opt = """"); virtual Bool_tCommit(); virtual Int_tTObject::Compare(const TObject* obj) const; static TSQLServer*TSQLServer::Connect(const char* db, const char* uid, const char* pw); virtual voidTObject::Copy(TObject& object) const; virtual Int_tCreateDataBase(const char* dbname); virtual voidTO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMySQLServer.html:1025,test,test,1025,root/html602/TMySQLServer.html,https://root.cern,https://root.cern/root/html602/TMySQLServer.html,2,['test'],['test']
Testability,"IndexOnError : If any of the underlying TTree objects do not have a TTreeIndex, all TTreeIndex are 'ignored' and the missing piece are rebuilt. . Definition at line 3534 of file TTree.cxx. ◆ CopyTree(). TTree * TTree::CopyTree ; (; const char * ; selection, . Option_t * ; option = """", . Long64_t ; nentries = kMaxEntries, . Long64_t ; firstentry = 0 . ). virtual . Copy a tree with selection. . Important:; The returned copied tree stays connected with the original tree until the original tree is deleted. In particular, any changes to the branch addresses in the original tree are also made to the copied tree. Any changes made to the branch addresses of the copied tree are overridden anytime the original tree changes its branch addresses. When the original tree is deleted, all the branch addresses of the copied tree are set to zero.; For examples of CopyTree, see the tutorials:. copytree.C: Example macro to copy a subset of a tree to a new tree. The input file was generated by running the program in $ROOTSYS/test/Event in this way: ./Event 1000 1 1 1; EventDefinition collection_proxies.C:172. copytree2.C Example macro to copy a subset of a tree to a new tree. One branch of the new tree is written to a separate file. The input file was generated by running the program in $ROOTSYS/test/Event in this way: ./Event 1000 1 1 1. copytree3.C Example macro to copy a subset of a tree to a new tree. Only selected entries are copied to the new tree. NOTE that only the active branches are copied. . Definition at line 3719 of file TTree.cxx. ◆ CreateBasket(). TBasket * TTree::CreateBasket ; (; TBranch * ; branch). virtual . Create a basket for this tree and given branch. ; Reimplemented in TTreeSQL.; Definition at line 3731 of file TTree.cxx. ◆ Debug(). Int_t TTree::Debug ; (; ); const. inline . Definition at line 429 of file TTree.h. ◆ DeclFileName(). static const char * TTree::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTree.html:109305,test,test,109305,doc/master/classTTree.html,https://root.cern,https://root.cern/doc/master/classTTree.html,2,['test'],['test']
Testability,Info(). TMVA::DataSetInfo * TMVA::DataSetManager::GetDataSetInfo ; (; const TString & ; dsiName). returns datasetinfo object for given name ; Definition at line 97 of file DataSetManager.cxx. ◆ IsA(). virtual TClass * TMVA::DataSetManager::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 84 of file DataSetManager.h. ◆ Log(). MsgLogger & TMVA::DataSetManager::Log ; (; ); const. inlineprivate . Definition at line 81 of file DataSetManager.h. ◆ Streamer(). virtual void TMVA::DataSetManager::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TMVA::DataSetManager::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 84 of file DataSetManager.h. Friends And Related Symbol Documentation. ◆ Envelop. friend class Envelop. friend . Definition at line 53 of file DataSetManager.h. ◆ Factory. friend class Factory. friend . Definition at line 52 of file DataSetManager.h. Member Data Documentation. ◆ fDataInput. DataInputHandler* TMVA::DataSetManager::fDataInput. private . source of input data ; Definition at line 78 of file DataSetManager.h. ◆ fDatasetFactory. TMVA::DataSetFactory* TMVA::DataSetManager::fDatasetFactory. private . Definition at line 73 of file DataSetManager.h. ◆ fDataSetInfoCollection. TList TMVA::DataSetManager::fDataSetInfoCollection. private . all registered dataset definitions ; Definition at line 79 of file DataSetManager.h. ◆ fLogger. MsgLogger* TMVA::DataSetManager::fLogger. private . ! message logger ; Definition at line 80 of file DataSetManager.h. Libraries for TMVA::DataSetManager:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/DataSetManager.h; tmva/tmva/src/DataSetManager.cxx. TMVADataSetManager. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:31 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DataSetManager.html:14355,log,logger,14355,doc/master/classTMVA_1_1DataSetManager.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataSetManager.html,1,['log'],['logger']
Testability,"Info(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. Int_tTProofPlayer::AssertSelector(const char* selector_file); static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Bool_tTProofPlayer::CheckMemUsage(Long64_t& mfreq, Bool_t& w80r, Bool_t& w80v, TString& wmsg); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual Int_tTProofPlayer::DrawCanvas(TObject* obj); TProof*GetProof() const; virtual void*TProofPlayer::GetSender(); virtual const char*TQObject::GetSenderClassName() const; virtual Bool_tHandleTimer(TTimer* timer); Int_tInitPacketizer(TDSet* dset, Long64_t nentries, Long64_t first, const char* defpackunit, const char* defpackdata); voidTObject::MakeZombie(); voidTProofPlayer::MapOutputListToDataMembers() const; TList*MergeFeedback(); Bool_tMergeOutputFiles(); voidNotifyMemory(TObject* obj); virtual Bool_tSendSelector(const char* selector_file); voidSetLastMergingMsg(TObject* obj); voidSetSelectorDataMembersFromOutputList(); virtual voidSetupFeedback(); virtual voidStopFeedback(). Data Members; public:. enum TProofPlayer::EStatusBits { kDispatchOneEvent; kIsProcessing; kMaxProcTimeReached; kMaxProcTimeExtended; };; enum TVirtualProofPlayer::EStatusBits { kIsSubmerger; };; enum TVirtualProofPlayer::EExitStatus { kFinished; kStopped; kAborted; };; enum TObject::EStatusBits { kCanDelete; kMustC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofPlayerRemote.html:12328,Assert,AssertSelector,12328,root/html534/TProofPlayerRemote.html,https://root.cern,https://root.cern/root/html534/TProofPlayerRemote.html,1,['Assert'],['AssertSelector']
Testability,"Info->At(slot);; 7325 fStreamerInfo->RemoveAt(fClassVersion);; 7326 if (fLastReadInfo.load() == info); 7327 fLastReadInfo = nullptr;; 7328 if (fCurrentInfo.load() == info); 7329 fCurrentInfo = nullptr;; 7330 delete info;; 7331 if (fState == kEmulated && fStreamerInfo->GetEntries() == 0) {; 7332 fState = kForwardDeclared;; 7333 }; 7334 }; 7335}; 7336 ; 7337////////////////////////////////////////////////////////////////////////////////; 7338/// Return true is the Hash/RecursiveRemove setup is consistent, i.e. when all; 7339/// classes in the class hierarchy that overload TObject::Hash do call; 7340/// ROOT::CallRecursiveRemoveIfNeeded in their destructor.; 7341/// i.e. it is safe to call the Hash virtual function during the RecursiveRemove operation.; 7342/// This routines is used for a small subset of the class for which we need; 7343/// the answer before gROOT is properly initialized.; 7344 ; 7345Bool_t ROOT::Internal::HasConsistentHashMember(const char *cname); 7346{; 7347 // Hand selection of correct classes, those classes should be; 7348 // cross-checked in testHashRecursiveRemove.cxx; 7349 static const char *handVerified[] = {; 7350 ""TEnvRec"", ""TDataType"", ""TObjArray"", ""TList"", ""THashList"",; 7351 ""TClass"", ""TCling"", ""TInterpreter"", ""TMethod"", ""ROOT::Internal::TCheckHashRecursiveRemoveConsistency"",; 7352 ""TCheckHashRecursiveRemoveConsistency"", ""TGWindow"",; 7353 ""TDirectory"", ""TDirectoryFile"", ""TObject"", ""TH1"",; 7354 ""TQClass"", ""TGlobal"" };; 7355 ; 7356 if (cname && cname[0]) {; 7357 for (auto cursor : handVerified) {; 7358 if (strcmp(cname, cursor) == 0); 7359 return true;; 7360 }; 7361 }; 7362 return false;; 7363}; 7364 ; 7365////////////////////////////////////////////////////////////////////////////////; 7366/// Return true is the Hash/RecursiveRemove setup is consistent, i.e. when all; 7367/// classes in the class hierarchy that overload TObject::Hash do call; 7368/// ROOT::CallRecursiveRemoveIfNeeded in their destructor.; 7369/// i.e. it is safe to call the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:282103,test,testHashRecursiveRemove,282103,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,1,['test'],['testHashRecursiveRemove']
Testability,"Info->At(slot);; 7392 fStreamerInfo->RemoveAt(fClassVersion);; 7393 if (fLastReadInfo.load() == info); 7394 fLastReadInfo = nullptr;; 7395 if (fCurrentInfo.load() == info); 7396 fCurrentInfo = nullptr;; 7397 delete info;; 7398 if (fState == kEmulated && fStreamerInfo->GetEntries() == 0) {; 7399 fState = kForwardDeclared;; 7400 }; 7401 }; 7402}; 7403 ; 7404////////////////////////////////////////////////////////////////////////////////; 7405/// Return true is the Hash/RecursiveRemove setup is consistent, i.e. when all; 7406/// classes in the class hierarchy that overload TObject::Hash do call; 7407/// ROOT::CallRecursiveRemoveIfNeeded in their destructor.; 7408/// i.e. it is safe to call the Hash virtual function during the RecursiveRemove operation.; 7409/// This routines is used for a small subset of the class for which we need; 7410/// the answer before gROOT is properly initialized.; 7411 ; 7412Bool_t ROOT::Internal::HasConsistentHashMember(const char *cname); 7413{; 7414 // Hand selection of correct classes, those classes should be; 7415 // cross-checked in testHashRecursiveRemove.cxx; 7416 static const char *handVerified[] = {; 7417 ""TEnvRec"", ""TDataType"", ""TObjArray"", ""TList"", ""THashList"",; 7418 ""TClass"", ""TCling"", ""TInterpreter"", ""TMethod"", ""ROOT::Internal::TCheckHashRecursiveRemoveConsistency"",; 7419 ""TCheckHashRecursiveRemoveConsistency"", ""TGWindow"",; 7420 ""TDirectory"", ""TDirectoryFile"", ""TObject"", ""TH1"",; 7421 ""TQClass"", ""TGlobal"" };; 7422 ; 7423 if (cname && cname[0]) {; 7424 for (auto cursor : handVerified) {; 7425 if (strcmp(cname, cursor) == 0); 7426 return true;; 7427 }; 7428 }; 7429 return false;; 7430}; 7431 ; 7432////////////////////////////////////////////////////////////////////////////////; 7433/// Return true is the Hash/RecursiveRemove setup is consistent, i.e. when all; 7434/// classes in the class hierarchy that overload TObject::Hash do call; 7435/// ROOT::CallRecursiveRemoveIfNeeded in their destructor.; 7436/// i.e. it is safe to call the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:284854,test,testHashRecursiveRemove,284854,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,1,['test'],['testHashRecursiveRemove']
Testability,"Inheritance diagram for TEvePointSet:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TEvePointSet() [1/3]. TEvePointSet::TEvePointSet ; (; Int_t ; n_points = 0, . ETreeVarType_e ; tv_type = kTVT_XYZ . ). Constructor. ; Definition at line 44 of file TEvePointSet.cxx. ◆ TEvePointSet() [2/3]. TEvePointSet::TEvePointSet ; (; const char * ; name, . Int_t ; n_points = 0, . ETreeVarType_e ; tv_type = kTVT_XYZ . ). Constructor. ; Definition at line 65 of file TEvePointSet.cxx. ◆ TEvePointSet() [3/3]. TEvePointSet::TEvePointSet ; (; const TEvePointSet & ; e). Copy constructor. ; Definition at line 87 of file TEvePointSet.cxx. ◆ ~TEvePointSet(). TEvePointSet::~TEvePointSet ; (; ). override . Destructor. ; Definition at line 103 of file TEvePointSet.cxx. Member Function Documentation. ◆ AssertIntIdsSize(). void TEvePointSet::AssertIntIdsSize ; (; ). inlineprotected . Assert that size of IntId array is compatible with the size of the point array. ; Definition at line 184 of file TEvePointSet.cxx. ◆ Class(). static TClass * TEvePointSet::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TEvePointSet::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TEvePointSet::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 99 of file TEvePointSet.h. ◆ CloneElement(). TEvePointSet * TEvePointSet::CloneElement ; (; ); const. inlineoverridevirtual . Clone the element via copy constructor. ; Should be implemented for all classes that require cloning support. ; Reimplemented from TEveElement.; Definition at line 58 of file TEvePointSet.h. ◆ ClonePoints(). void TEvePointSet::ClonePoints ; (; const TEvePointSet & ; e). virtual . Clone points and all point-related information from point-set 'e'. ; Definition at line 111 of file TEvePointSet.cxx. ◆ CopyVizParams(). ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEvePointSet.html:47324,Assert,Assert,47324,doc/master/classTEvePointSet.html,https://root.cern,https://root.cern/doc/master/classTEvePointSet.html,1,['Assert'],['Assert']
Testability,"Input = 7 , Width = 64 ) Output = ( 1 , 128 , 64 ) Activation Function = Tanh; Layer 1 DENSE Layer: ( Input = 64 , Width = 64 ) Output = ( 1 , 128 , 64 ) Activation Function = Tanh; Layer 2 DENSE Layer: ( Input = 64 , Width = 64 ) Output = ( 1 , 128 , 64 ) Activation Function = Tanh; Layer 3 DENSE Layer: ( Input = 64 , Width = 64 ) Output = ( 1 , 128 , 64 ) Activation Function = Tanh; Layer 4 DENSE Layer: ( Input = 64 , Width = 1 ) Output = ( 1 , 128 , 1 ) Activation Function = Identity; : Using 11200 events for training and 2800 for testing; : Compute initial loss on the validation data ; : Training phase 1 of 1: Optimizer ADAM (beta1=0.9,beta2=0.999,eps=1e-07) Learning rate = 0.001 regularization 0 minimum error = 1.171; : --------------------------------------------------------------; : Epoch | Train Err. Val. Err. t(s)/epoch t(s)/Loss nEvents/s Conv. Steps; : --------------------------------------------------------------; : Start epoch iteration ...; : 1 Minimum Test error found - save the configuration ; : 1 | 0.66619 0.628056 0.587341 0.0468945 20605.2 0; : 2 Minimum Test error found - save the configuration ; : 2 | 0.605139 0.593298 0.586597 0.0468674 20632.5 0; : 3 Minimum Test error found - save the configuration ; : 3 | 0.581823 0.587355 0.586416 0.0468644 20639.4 0; : 4 | 0.575813 0.593823 0.586862 0.0466947 20615.8 1; : 5 Minimum Test error found - save the configuration ; : 5 | 0.572257 0.578309 0.587324 0.0469531 20608.1 0; : 6 | 0.567347 0.582461 0.586969 0.0467966 20615.6 1; : 7 Minimum Test error found - save the configuration ; : 7 | 0.564553 0.577241 0.588162 0.0470086 20578.3 0; : 8 | 0.56278 0.582039 0.588324 0.0468355 20565.5 1; : 9 | 0.559377 0.582454 0.588676 0.0469029 20554.7 2; : 10 | 0.55743 0.581686 0.590386 0.0469245 20490.9 3; : 11 | 0.555638 0.57854 0.591068 0.0469776 20467.2 4; : 12 | 0.556914 0.579893 0.589121 0.0470111 20542 5; : 13 | 0.553226 0.579356 0.590241 0.0470372 20500.6 6; : 14 Minimum Test error found - save the configurat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__Higgs__Classification_8C.html:24316,Test,Test,24316,doc/master/TMVA__Higgs__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__Higgs__Classification_8C.html,1,['Test'],['Test']
Testability,Input.cxx;  TNeuronInputAbs.cxx;  TNeuronInputChooser.cxx;  TNeuronInputSqSum.cxx;  TNeuronInputSum.cxx;  Tools.cxx;  TransformationHandler.cxx;  TSpline1.cxx;  TSpline2.cxx;  TSynapse.cxx;  Types.cxx;  VariableDecorrTransform.cxx;  VariableGaussTransform.cxx;  VariableIdentityTransform.cxx;  VariableImportance.cxx;  VariableInfo.cxx;  VariableNormalizeTransform.cxx;  VariablePCATransform.cxx;  VariableRearrangeTransform.cxx;  VariableTransform.cxx;  VariableTransformBase.cxx;  VarTransformHandler.cxx;  Volume.cxx;  ► test;  ► DNN;  TestActivationFunctions.cxx;  TestActivationFunctions.h;  TestActivationFunctionsCpu.cxx;  TestActivationFunctionsCuda.cxx;  TestBackpropagation.cxx;  TestBackpropagation.h;  TestBackpropagationCpu.cxx;  TestBackpropagationCuda.cxx;  TestCuda.cxx;  TestDataLoader.cxx;  TestDataLoader.h;  TestDataLoaderCpu.cxx;  TestDataLoaderCuda.cxx;  TestDerivatives.cxx;  TestDerivatives.h;  TestDerivativesCpu.cxx;  TestDerivativesCuda.cxx;  TestLossFunctions.cxx;  TestLossFunctions.h;  TestLossFunctionsCpu.cxx;  TestLossFunctionsCuda.cxx;  TestMatrixArithmetic.h;  TestMatrixArithmeticCpu.cxx;  TestMatrixArithmeticCuda.cxx;  TestMinimization.cxx;  TestMinimization.h;  TestMinimizationCpu.cxx;  TestMinimizationCuda.cxx;  Utility.h;  ► tmvagui;  ► inc;  ► TMVA;  annconvergencetest.h;  BDT.h;  BDT_Reg.h;  BDTControlPlots.h;  BoostControlPlots.h;  compareanapp.h;  correlations.h;  correlationscatters.h;  correlationscattersMultiClass.h;  correlationsMultiClass.h;  CorrGui.h;  CorrGuiMultiClass.h;  deviations.h;  efficiencies.h;  efficienciesMulticlass.h;  likelihoodrefs.h;  MovieMaker.h;  mvaeffs.h;  mvas.h;  mvasMulticlass.h;  mvaweights.h;  network.h;  paracoor.h;  PlotFoams.h;  probas.h;  regression_averagedevs.h;  rulevis.h;  rulevisCorr.h;  rulevisHists.h;  tmvaglob.h;  TMVAGui.h;  TMVAMultiClassGui.h;  TMVARegGui.h;  variables.h;  variablesMultiClass.h;  ► src;  annconvergencetest.cxx;  BDT.cxx;  BDT_Reg.cxx;  BDTControlPlots.cxx;  BoostControlPlots.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/files.html:92887,Test,TestLossFunctions,92887,doc/v610/files.html,https://root.cern,https://root.cern/doc/v610/files.html,1,['Test'],['TestLossFunctions']
Testability,Input.cxx;  TNeuronInputAbs.cxx;  TNeuronInputChooser.cxx;  TNeuronInputSqSum.cxx;  TNeuronInputSum.cxx;  Tools.cxx;  TransformationHandler.cxx;  TSpline1.cxx;  TSpline2.cxx;  TSynapse.cxx;  Types.cxx;  VariableDecorrTransform.cxx;  VariableGaussTransform.cxx;  VariableIdentityTransform.cxx;  VariableImportance.cxx;  VariableInfo.cxx;  VariableNormalizeTransform.cxx;  VariablePCATransform.cxx;  VariableRearrangeTransform.cxx;  VariableTransform.cxx;  VariableTransformBase.cxx;  VarTransformHandler.cxx;  Volume.cxx;  ► test;  ► DNN;  TestActivationFunctions.cxx;  TestActivationFunctions.h;  TestActivationFunctionsCpu.cxx;  TestActivationFunctionsCuda.cxx;  TestBackpropagation.cxx;  TestBackpropagation.h;  TestBackpropagationCpu.cxx;  TestBackpropagationCuda.cxx;  TestCuda.cxx;  TestDataLoader.cxx;  TestDataLoader.h;  TestDataLoaderCpu.cxx;  TestDataLoaderCuda.cxx;  TestDerivatives.cxx;  TestDerivatives.h;  TestDerivativesCpu.cxx;  TestDerivativesCuda.cxx;  TestLossFunctions.cxx;  TestLossFunctions.h;  TestLossFunctionsCpu.cxx;  TestLossFunctionsCuda.cxx;  TestMatrixArithmetic.h;  TestMatrixArithmeticCpu.cxx;  TestMatrixArithmeticCuda.cxx;  TestMinimization.cxx;  TestMinimization.h;  TestMinimizationCpu.cxx;  TestMinimizationCuda.cxx;  Utility.h;  ► tmvagui;  ► inc;  ► TMVA;  annconvergencetest.h;  BDT.h;  BDT_Reg.h;  BDTControlPlots.h;  BoostControlPlots.h;  compareanapp.h;  correlations.h;  correlationscatters.h;  correlationscattersMultiClass.h;  correlationsMultiClass.h;  CorrGui.h;  CorrGuiMultiClass.h;  deviations.h;  efficiencies.h;  likelihoodrefs.h;  MovieMaker.h;  mvaeffs.h;  mvas.h;  mvasMulticlass.h;  mvaweights.h;  network.h;  paracoor.h;  PlotFoams.h;  probas.h;  regression_averagedevs.h;  rulevis.h;  rulevisCorr.h;  rulevisHists.h;  tmvaglob.h;  TMVAGui.h;  TMVAMultiClassGui.h;  TMVARegGui.h;  variables.h;  variablesMultiClass.h;  LinkDef.h;  ► src;  annconvergencetest.cxx;  BDT.cxx;  BDT_Reg.cxx;  BDTControlPlots.cxx;  BoostControlPlots.cxx;  comparean,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:94684,Test,TestLossFunctions,94684,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,1,['Test'],['TestLossFunctions']
Testability,"Int_t & ; ifail, . Double_t ; xmin = 0, . Double_t ; xmax = 0 . ). virtual . Least square linear fit without weights. ; Fit a straight line (a0 + a1*x) to the data in this graph.; Parameters. [in]ndataif ndata<0, fits the logarithm of the graph (used in InitExpo() to set the initial parameter values for a fit with exponential function. ; [in]a0constant ; [in]a1slope ; [in]ifailreturn parameter indicating the status of the fit (ifail=0, fit is OK) ; [in]xmin,xmaxfitting range. extracted from CERNLIB LLSQ: Translated to C++ by Rene Brun ; Definition at line 1931 of file TGraph.cxx. ◆ Merge(). Int_t TGraph::Merge ; (; TCollection * ; li). virtual . Adds all graphs from the collection to this graph. ; Returns the total number of points in the result or -1 in case of an error. ; Reimplemented in TGraphAsymmErrors, and TGraphErrors.; Definition at line 2658 of file TGraph.cxx. ◆ MovePoints(). void TGraph::MovePoints ; (; Double_t ; dx, . Double_t ; dy, . Bool_t ; logx = kFALSE, . Bool_t ; logy = kFALSE . ). virtual . Move all graph points on specified values dx,dy If log argument specified, calculation done in logarithmic scale like: new_value = exp( log(old_value) + delta );. ; Definition at line 2691 of file TGraph.cxx. ◆ operator=(). TGraph & TGraph::operator= ; (; const TGraph & ; gr). Equal operator for this graph. ; Definition at line 232 of file TGraph.cxx. ◆ Paint(). void TGraph::Paint ; (; Option_t * ; chopt = """"). overridevirtual . Draw this graph with its current attributes. ; Reimplemented from TObject.; Definition at line 1977 of file TGraph.cxx. ◆ PaintGraph(). void TGraph::PaintGraph ; (; Int_t ; npoints, . const Double_t * ; x, . const Double_t * ; y, . Option_t * ; chopt . ). Draw the (x,y) as a graph. ; Definition at line 1986 of file TGraph.cxx. ◆ PaintGrapHist(). void TGraph::PaintGrapHist ; (; Int_t ; npoints, . const Double_t * ; x, . const Double_t * ; y, . Option_t * ; chopt . ). Draw the (x,y) as a histogram. ; Definition at line 1995 of file TGrap",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraph.html:65460,log,logy,65460,doc/master/classTGraph.html,https://root.cern,https://root.cern/doc/master/classTGraph.html,1,['log'],['logy']
Testability,"Int_t = kMESS_OBJECT); virtual Int_tTServerSocket::SendRaw(const void*, Int_t, ESendRecvOptions = kDefault); static voidTServerSocket::SetAcceptOptions(UChar_t Opt); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTSocket::SetCompressionAlgorithm(Int_t algorithm = 0); voidTSocket::SetCompressionLevel(Int_t level = 1); voidTSocket::SetCompressionSettings(Int_t settings = 1); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual Int_tTSocket::SetOption(ESockOptions opt, Int_t val); voidTSocket::SetRemoteProtocol(Int_t rproto); voidTSocket::SetSecContext(TSecContext* ctx); voidTSocket::SetService(const char* service); voidTSocket::SetServType(Int_t st); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); voidTSocket::SetUrl(const char* url); static voidTServerSocket::ShowAcceptOptions(); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTSocket::Touch(); TPServerSocket(Int_t port, Bool_t reuse = kFALSE, Int_t backlog = kDefaultBacklog, Int_t tcpwindowsize = -1); TPServerSocket(const char* service, Bool_t reuse = kFALSE, Int_t backlog = kDefaultBacklog, Int_t tcpwindowsize = -1); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TPServerSocket.html:7618,Test,TestBit,7618,root/html602/TPServerSocket.html,https://root.cern,https://root.cern/root/html602/TPServerSocket.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"Int_t GetVersion() constDefinition TFile.h:245; TMemberStreamerDefinition TMemberStreamer.h:26; TNamed::GetNameconst char * GetName() const overrideReturns name of object.Definition TNamed.h:47; TNamed::GetTitleconst char * GetTitle() const overrideReturns title of object.Definition TNamed.h:48; TNamed::Classstatic TClass * Class(); TObjArrayAn array of TObjects.Definition TObjArray.h:31; TObjArray::GetEntriesFastInt_t GetEntriesFast() constDefinition TObjArray.h:58; TObjArray::AddAtvoid AddAt(TObject *obj, Int_t idx) overrideAdd object at position ids.Definition TObjArray.cxx:254; TObjArray::AddAtAndExpandvirtual void AddAtAndExpand(TObject *obj, Int_t idx)Add object at position idx.Definition TObjArray.cxx:235; TObjArray::AtTObject * At(Int_t idx) const overrideDefinition TObjArray.h:164; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::GetNamevirtual const char * GetName() constReturns name of object.Definition TObject.cxx:444; TObject::TestBitR__ALWAYS_INLINE Bool_t TestBit(UInt_t f) constDefinition TObject.h:199; TObject::GetUniqueIDvirtual UInt_t GetUniqueID() constReturn the unique object id.Definition TObject.cxx:462; TObject::kIsOnHeap@ kIsOnHeapobject is on heapDefinition TObject.h:81; TObject::kNotDeleted@ kNotDeletedobject has not been deletedDefinition TObject.h:82; TObject::ClassNamevirtual const char * ClassName() constReturns name of class to which the object belongs.Definition TObject.cxx:213; TObject::Warningvirtual void Warning(const char *method, const char *msgfmt,...) constIssue warning message.Definition TObject.cxx:979; TObject::Classstatic TClass * Class(); TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TObject::SetUniqueIDvirtual void SetUniqueID(UInt_t uid)Set the unique object id.Definition TObject.cxx:797; TProcessIDA TProcessID identifies a ROOT job in a unique way in time and space.Definition TProcessID.h:74; TProcessID::PutObjectWithIDvo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html:217714,Test,TestBit,217714,doc/master/TStreamerInfoActions_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html,1,['Test'],['TestBit']
Testability,"Int_t N) const; voidSetCDF(); voidSetDistributionFunction(const ROOT::Math::IGenFunction& cdf, Bool_t isPDF, Double_t xmin, Double_t xmax); voidSetParameters(); voidSetSamples(vector<const Double_t*> samples, const vector<UInt_t> samplesSizes). Data Members; public:. enum EDistribution { kUndefined; kUserDefined; kGaussian; kLogNormal; kExponential; };; enum EUserDistribution { kCDF; kPDF; };; enum ETestType { kAD; kAD2s; kKS; kKS2s; };. private:. auto_ptr<ROOT::Math::IBaseFunctionOneDim>fCDF; vector<Double_t>fCombinedSamples; ROOT::Math::GoFTest::EDistributionfDist; Double_tfMean; vector<std::vector<Double_t> >fSamples; Double_tfSigma; Bool_tfTestSampleFromH0. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GoFTest(UInt_t sample1Size, const Double_t* sample1, UInt_t sample2Size, const Double_t* sample2); Constructor for using only with 2-samples tests. GoFTest(UInt_t sampleSize, const Double_t* sample, ROOT::Math::GoFTest::EDistribution dist = kUndefined); Constructor for using only with 1-sample tests with a specified distribution. GoFTest(UInt_t sampleSize, const Double_t* sample, const ROOT::Math::IGenFunction& dist, ROOT::Math::GoFTest::EUserDistribution userDist = kPDF, Double_t xmin = 1, Double_t xmax = 0); Templated constructor for using only with 1-sample tests with a user specified distribution. Instantiate(const Double_t* sample, UInt_t sampleSize). GoFTest(UInt_t sampleSize, const Double_t* sample, const ROOT::Math::IGenFunction& dist, ROOT::Math::GoFTest::EUserDistribution userDist = kPDF, Double_t xmin = 1, Double_t xmax = 0); Specialization using IGenFunction interface. SetUserDistribution(const ROOT::Math::IGenFunction& dist, ROOT::Math::GoFTest::EUserDistribution userDist = kPDF, Double_t xmin = 1, Double_t xmax = 0). SetDistributionFunction(const ROOT::Math::IGenFunction& cdf, Bool_t isPDF, Double_t xmin, Double_t xmax). void SetUserPDF(const ROOT::Math::IGenFunction& pdf, Double_t xmin = 1, Double_t xmax ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__GoFTest.html:3527,test,tests,3527,root/html528/ROOT__Math__GoFTest.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__GoFTest.html,3,['test'],['tests']
Testability,"Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(); virtual voidTHttpEngine::Process(); voidTHttpEngine::SetServer(THttpServer* serv). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. void*fCallbacks! call-back table for civetweb webserver; void*fCtx! civetweb context; Bool_tfDebug! debug mode; TStringTNamed::fNameobject identifier; THttpServer*THttpEngine::fServer! object server; TStringTNamed::fTitleobject title; TStringfTopName! name of top item. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCivetweb(); constructor. ~TCivetweb(); destructor. Int_t ProcessLog(const char* message); process civetweb log message, can be used to detect critical errors. Bool_t Create(const char* args); Creates embedded civetweb server; As main argument, http port should be specified like ""8090"".; Or one can provide combination of ipaddress and portnumber like 127.0.0.1:8090; Extra parameters like in URL string could be specified after '?' mark:; thrds=N - there N is number of threads used by the civetweb (default is 5); top=name - configure top name, visible in the web browser; auth_file=filename - authentication file name, created with htdigets utility; auth_domain=domain - authentication domain; loopback - bind specified port to loopback 127.0.0.1 address; debug - enable debug mode, server always returns html page with request info. TCivetweb(). const char * GetTopName() const. Bool_t IsDebugMode() const; indicates that. » Last changed: Mon Jun 29 16:38:47 2015 » Last generated: 2015-06-29 16:38; This page has been automatically generated. For comments or suggestions regarding the documentation ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TCivetweb.html:6937,log,log,6937,root/html534/TCivetweb.html,https://root.cern,https://root.cern/root/html534/TCivetweb.html,1,['log'],['log']
Testability,"Int_t bufsize = 0) const; virtual voidWriteTransformationToStream(ostream& o) const. protected:. voidCalcNorm(const vector<TMVA::Event*,allocator<TMVA::Event*> >&); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; Int_tGetNClasses() const; UInt_tGetNTargets() const; UInt_tGetNVariables() const; voidTObject::MakeZombie(); voidSetCreated(Bool_t c = kTRUE); voidSetName(const TString& c); voidSetNVariables(UInt_t i); vector<TMVA::VariableInfo>&Targets(); vector<TMVA::VariableInfo>&Variables(). private:. voidUpdateNorm(Int_t ivar, Double_t x). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TMVA::Event*fBackTransformedEventholds the current back-transformed event; TMVA::DataSetInfo&fDsi; TMVA::MsgLogger*fLogger! message logger; TMVA::TMVAVersion_tfTMVAVersion; TMVA::Event*fTransformedEventholds the current transformed event. private:. Bool_tfCreatedhas been created; Bool_tfEnabledhas been enabled; UInt_tfNVarsnumber of variables; Bool_tfNormalisenormalise input variables; vector<TMVA::VariableInfo>fTargetsevent targets [saved to weight file --> TODO ]; TStringfTransformNamename of transformation; Bool_tfUseSignalTransformtrue if transformation bases on signal data; TMVA::Types::EVariableTransformfVariableTransformDecorrelation, PCA, etc.; vector<TMVA::VariableInfo>fVariablesevent variables [saved to weight file]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~VariableTransformBase(). void CalcNorm(const vector<TMVA::Event*,allocator<TMVA::Event*> >& ); method to calculate minimum, maximum, mean, and RMS for all; variables used in the MVA. std::vector<TString>* GetTransformationStrings(Int_t cls) const; default transformation output; --> only in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__VariableTransformBase.html:6839,log,logger,6839,root/html528/TMVA__VariableTransformBase.html,https://root.cern,https://root.cern/root/html528/TMVA__VariableTransformBase.html,1,['log'],['logger']
Testability,"Int_t bufsize = 0) const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const. protected:. virtual voidDeclareOptions(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); const TString&TMVA::Configurable::GetReferenceFile() const; TMVA::MsgLogger&Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; voidTObject::MakeZombie(); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::Configurable::WriteOptionsReferenceToFile(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringfClassNameremove TMVA:: from TObject name; TMVA::IFitterTarget&fFitterTargetpointer to target of fitting procedure; TMVA::MsgLogger*fLoggermessage logger; Int_tfNparsnumber of parameters; const vector<TMVA::Interval*>fRangesallowed intervals. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Double_t Run(); estimator function interface for fitting. Double_t EstimatorFunction(vector<Double_t>& parameters); estimator function interface for fitting. virtual ~FitterBase(); {}. Double_t Run(). IFitterTarget& GetFitterTarget() const; { return fFitterTarget; }. Int_t GetNpars() const; accessor. { return fNpars; }. const char* GetName() const; remove namespace in name. { return fClassName; }. void DeclareOptions(); need to implement option declaration. » Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id: FitterBase.h 29195 2009-06-24 10:39:49Z brun $ » Last generated: 2010-09-23 20:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__FitterBase.html:6752,log,logger,6752,root/html528/TMVA__FitterBase.html,https://root.cern,https://root.cern/root/html528/TMVA__FitterBase.html,1,['log'],['logger']
Testability,"Int_t bufsize = 0) const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const. protected:. virtual voidDeclareOptions(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); const TString&TMVA::Configurable::GetReferenceFile() const; TMVA::MsgLogger&Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; voidTObject::MakeZombie(); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::Configurable::WriteOptionsReferenceToFile(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringfClassNameremove TMVA:: from TObject name; TMVA::IFitterTarget&fFitterTargetpointer to target of fitting procedure; TMVA::MsgLogger*fLoggermessage logger; Int_tfNparsnumber of parameters; const vector<TMVA::Interval*>fRangesallowed intervals. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Double_t Run(); estimator function interface for fitting. Double_t EstimatorFunction(vector<Double_t>& parameters); estimator function interface for fitting. virtual ~FitterBase(); {}. Double_t Run(). IFitterTarget& GetFitterTarget() const; { return fFitterTarget; }. Int_t GetNpars() const; accessor. { return fNpars; }. const char* GetName() const; remove namespace in name. { return fClassName; }. void DeclareOptions(); need to implement option declaration. » Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id: FitterBase.h 39395 2011-05-26 10:05:54Z moneta $ » Last generated: 2011-07-04 15:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__FitterBase.html:6821,log,logger,6821,root/html530/TMVA__FitterBase.html,https://root.cern,https://root.cern/root/html530/TMVA__FitterBase.html,1,['log'],['logger']
Testability,"Int_t bufsize = 0) const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const. protected:. virtual voidDeclareOptions(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); const TString&TMVA::Configurable::GetReferenceFile() const; TMVA::MsgLogger&Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; voidTObject::MakeZombie(); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::Configurable::WriteOptionsReferenceToFile(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringfClassNameremove TMVA:: from TObject name; TMVA::IFitterTarget&fFitterTargetpointer to target of fitting procedure; TMVA::MsgLogger*fLoggermessage logger; Int_tfNparsnumber of parameters; const vector<TMVA::Interval*>fRangesallowed intervals. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Double_t Run(); estimator function interface for fitting. Double_t EstimatorFunction(vector<Double_t>& parameters); estimator function interface for fitting. virtual ~FitterBase(); {}. Double_t Run(). IFitterTarget& GetFitterTarget() const; { return fFitterTarget; }. Int_t GetNpars() const; accessor. { return fNpars; }. const char* GetName() const; remove namespace in name. { return fClassName; }. void DeclareOptions(); need to implement option declaration. » Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id: FitterBase.h 40005 2011-06-27 15:29:10Z stelzer $ » Last generated: 2011-11-03 20:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMVA__FitterBase.html:6821,log,logger,6821,root/html532/TMVA__FitterBase.html,https://root.cern,https://root.cern/root/html532/TMVA__FitterBase.html,1,['log'],['logger']
Testability,"Int_t bufsize); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTDirectoryFile::SetModified(); virtual voidTDirectory::SetMother(TObject* mother); virtual voidTDirectory::SetName(const char* newname); virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTDirectoryFile::SetSeekDir(Long64_t v); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTDirectoryFile::SetTRefAction(TObject* ref, TObject* parent); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTDirectoryFile::SetWritable(Bool_t writable = kTRUE); virtual voidShowMembers(TMemberInspector& insp, char* parent); virtual Int_tTDirectoryFile::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTDirectoryFile::Write(const char* name = 0, Int_t opt = 0, Int_t bufsize = 0); virtual Int_tTDirectoryFile::Write(const char* name = 0, Int_t opt = 0, Int_t bufsize = 0) const; virtual voidTDirectoryFile::WriteDirHeader(); virtual voidTDirectoryFile::WriteKeys(); Int_tTDirectory::WriteObject(const void* obj, const char* name, Option_t* option = """", Int_t bufsize = 0); virtual Int_tTDirectoryFile::WriteObjectAny(const void* obj, const char* classname, const char* name, Option_t* option = """", Int_t bufsize = 0); virtual Int_tTDirectoryFile::WriteObjectAny(const void* obj, const TClass* cl, const char* name, Option_t* option = """", Int_t bufsize = 0); virtual Int_tTDirectoryFile::WriteTObject(const TObject* obj, const char* name = 0, Option_t* option = """", Int_t bufsize = 0); RooWorkspace::WSDirWSDir(const char* name, const char* title, RooWo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooWorkspace__WSDir.html:9275,Test,TestBits,9275,root/html526/RooWorkspace__WSDir.html,https://root.cern,https://root.cern/root/html526/RooWorkspace__WSDir.html,1,['Test'],['TestBits']
Testability,"Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& te",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/Roo2DKeysPdf.html:22679,test,testArg,22679,root/html534/Roo2DKeysPdf.html,https://root.cern,https://root.cern/root/html534/Roo2DKeysPdf.html,71,['test'],['testArg']
Testability,"Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); Roo2DKeysPdf&operator=(const Roo2DKeysPdf&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kF",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/Roo2DKeysPdf.html:22454,test,testArg,22454,root/html602/Roo2DKeysPdf.html,https://root.cern,https://root.cern/root/html602/Roo2DKeysPdf.html,2,['test'],['testArg']
Testability,"Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooAbsAnaConvPdf&operator=(const RooAbsAnaConvPdf&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsAnaConvPdf.html:24451,test,testArg,24451,root/html602/RooAbsAnaConvPdf.html,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html,2,['test'],['testArg']
Testability,"Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooAbsCachedPdf&operator=(const RooAbsCachedPdf&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsCachedPdf.html:23179,test,testArg,23179,root/html602/RooAbsCachedPdf.html,https://root.cern,https://root.cern/root/html602/RooAbsCachedPdf.html,2,['test'],['testArg']
Testability,"Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooAbsSelfCachedPdf&operator=(const RooAbsSelfCachedPdf&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsSelfCachedPdf.html:23230,test,testArg,23230,root/html602/RooAbsSelfCachedPdf.html,https://root.cern,https://root.cern/root/html602/RooAbsSelfCachedPdf.html,2,['test'],['testArg']
Testability,"Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooAddPdf&operator=(const RooAddPdf&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAddPdf.html:23339,test,testArg,23339,root/html602/RooAddPdf.html,https://root.cern,https://root.cern/root/html602/RooAddPdf.html,2,['test'],['testArg']
Testability,"Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooArgusBG&operator=(const RooArgusBG&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooArgusBG.html:22120,test,testArg,22120,root/html602/RooArgusBG.html,https://root.cern,https://root.cern/root/html602/RooArgusBG.html,2,['test'],['testArg']
Testability,"Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooBCPEffDecay&operator=(const RooBCPEffDecay&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooBCPEffDecay.html:22927,test,testArg,22927,root/html602/RooBCPEffDecay.html,https://root.cern,https://root.cern/root/html602/RooBCPEffDecay.html,2,['test'],['testArg']
Testability,"Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooBCPGenDecay&operator=(const RooBCPGenDecay&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooBCPGenDecay.html:22857,test,testArg,22857,root/html602/RooBCPGenDecay.html,https://root.cern,https://root.cern/root/html602/RooBCPGenDecay.html,2,['test'],['testArg']
Testability,"Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooBDecay&operator=(const RooBDecay&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooBDecay.html:22916,test,testArg,22916,root/html602/RooBDecay.html,https://root.cern,https://root.cern/root/html602/RooBDecay.html,2,['test'],['testArg']
Testability,"Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooBMixDecay&operator=(const RooBMixDecay&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kF",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooBMixDecay.html:22947,test,testArg,22947,root/html602/RooBMixDecay.html,https://root.cern,https://root.cern/root/html602/RooBMixDecay.html,2,['test'],['testArg']
Testability,"Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooBernstein&operator=(const RooBernstein&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kF",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooBernstein.html:22564,test,testArg,22564,root/html602/RooBernstein.html,https://root.cern,https://root.cern/root/html602/RooBernstein.html,2,['test'],['testArg']
Testability,"Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooBifurGauss&operator=(const RooBifurGauss&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooBifurGauss.html:22142,test,testArg,22142,root/html602/RooBifurGauss.html,https://root.cern,https://root.cern/root/html602/RooBifurGauss.html,2,['test'],['testArg']
Testability,"Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooBreitWigner&operator=(const RooBreitWigner&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooBreitWigner.html:22160,test,testArg,22160,root/html602/RooBreitWigner.html,https://root.cern,https://root.cern/root/html602/RooBreitWigner.html,2,['test'],['testArg']
Testability,"Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooBukinPdf&operator=(const RooBukinPdf&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFAL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooBukinPdf.html:22119,test,testArg,22119,root/html602/RooBukinPdf.html,https://root.cern,https://root.cern/root/html602/RooBukinPdf.html,2,['test'],['testArg']
Testability,"Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooCBShape&operator=(const RooCBShape&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCBShape.html:22065,test,testArg,22065,root/html602/RooCBShape.html,https://root.cern,https://root.cern/root/html602/RooCBShape.html,2,['test'],['testArg']
Testability,"Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooCFunction1PdfBinding<double,double>&operator=(const RooCFunction1PdfBinding<double,double>&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::over",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCFunction1PdfBinding_double_double_.html:22690,test,testArg,22690,root/html602/RooCFunction1PdfBinding_double_double_.html,https://root.cern,https://root.cern/root/html602/RooCFunction1PdfBinding_double_double_.html,2,['test'],['testArg']
Testability,"Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooCFunction1PdfBinding<double,int>&operator=(const RooCFunction1PdfBinding<double,int>&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCFunction1PdfBinding_double_int_.html:22678,test,testArg,22678,root/html602/RooCFunction1PdfBinding_double_int_.html,https://root.cern,https://root.cern/root/html602/RooCFunction1PdfBinding_double_int_.html,2,['test'],['testArg']
Testability,"Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooCFunction2PdfBinding<double,double,double>&operator=(const RooCFunction2PdfBinding<double,double,double>&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tR",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCFunction2PdfBinding_double_double_double_.html:22718,test,testArg,22718,root/html602/RooCFunction2PdfBinding_double_double_double_.html,https://root.cern,https://root.cern/root/html602/RooCFunction2PdfBinding_double_double_double_.html,2,['test'],['testArg']
Testability,"Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooCFunction2PdfBinding<double,double,int>&operator=(const RooCFunction2PdfBinding<double,double,int>&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCFunction2PdfBinding_double_double_int_.html:22706,test,testArg,22706,root/html602/RooCFunction2PdfBinding_double_double_int_.html,https://root.cern,https://root.cern/root/html602/RooCFunction2PdfBinding_double_double_int_.html,2,['test'],['testArg']
Testability,"Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooCFunction2PdfBinding<double,int,double>&operator=(const RooCFunction2PdfBinding<double,int,double>&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCFunction2PdfBinding_double_int_double_.html:22706,test,testArg,22706,root/html602/RooCFunction2PdfBinding_double_int_double_.html,https://root.cern,https://root.cern/root/html602/RooCFunction2PdfBinding_double_int_double_.html,2,['test'],['testArg']
Testability,"Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooCFunction2PdfBinding<double,int,int>&operator=(const RooCFunction2PdfBinding<double,int,int>&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::ov",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCFunction2PdfBinding_double_int_int_.html:22694,test,testArg,22694,root/html602/RooCFunction2PdfBinding_double_int_int_.html,https://root.cern,https://root.cern/root/html602/RooCFunction2PdfBinding_double_int_int_.html,2,['test'],['testArg']
Testability,"Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooCFunction2PdfBinding<double,unsigned int,double>&operator=(const RooCFunction2PdfBinding<double,unsigned int,double>&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNod",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCFunction2PdfBinding_double_unsigned_int_double_.html:22742,test,testArg,22742,root/html602/RooCFunction2PdfBinding_double_unsigned_int_double_.html,https://root.cern,https://root.cern/root/html602/RooCFunction2PdfBinding_double_unsigned_int_double_.html,2,['test'],['testArg']
Testability,"Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooCFunction3PdfBinding<double,double,double,bool>&operator=(const RooCFunction3PdfBinding<double,double,double,bool>&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCFunction3PdfBinding_double_double_double_bool_.html:22738,test,testArg,22738,root/html602/RooCFunction3PdfBinding_double_double_double_bool_.html,https://root.cern,https://root.cern/root/html602/RooCFunction3PdfBinding_double_double_double_bool_.html,2,['test'],['testArg']
Testability,"Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooCFunction3PdfBinding<double,double,double,double>&operator=(const RooCFunction3PdfBinding<double,double,double,double>&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCFunction3PdfBinding_double_double_double_double_.html:22746,test,testArg,22746,root/html602/RooCFunction3PdfBinding_double_double_double_double_.html,https://root.cern,https://root.cern/root/html602/RooCFunction3PdfBinding_double_double_double_double_.html,2,['test'],['testArg']
Testability,"Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooCFunction3PdfBinding<double,double,int,int>&operator=(const RooCFunction3PdfBinding<double,double,int,int>&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCFunction3PdfBinding_double_double_int_int_.html:22722,test,testArg,22722,root/html602/RooCFunction3PdfBinding_double_double_int_int_.html,https://root.cern,https://root.cern/root/html602/RooCFunction3PdfBinding_double_double_int_int_.html,2,['test'],['testArg']
Testability,"Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooCFunction3PdfBinding<double,unsigned int,double,double>&operator=(const RooCFunction3PdfBinding<double,unsigned int,double,double>&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCFunction3PdfBinding_double_unsigned_int_double_double_.html:22770,test,testArg,22770,root/html602/RooCFunction3PdfBinding_double_unsigned_int_double_double_.html,https://root.cern,https://root.cern/root/html602/RooCFunction3PdfBinding_double_unsigned_int_double_double_.html,2,['test'],['testArg']
Testability,"Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooCFunction3PdfBinding<double,unsigned int,double,unsigned int>&operator=(const RooCFunction3PdfBinding<double,unsigned int,double,unsigned int>&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCFunction3PdfBinding_double_unsigned_int_double_unsigned_int_.html:22794,test,testArg,22794,root/html602/RooCFunction3PdfBinding_double_unsigned_int_double_unsigned_int_.html,https://root.cern,https://root.cern/root/html602/RooCFunction3PdfBinding_double_unsigned_int_double_unsigned_int_.html,2,['test'],['testArg']
Testability,"Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooCFunction3PdfBinding<double,unsigned int,unsigned int,double>&operator=(const RooCFunction3PdfBinding<double,unsigned int,unsigned int,double>&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCFunction3PdfBinding_double_unsigned_int_unsigned_int_double_.html:22794,test,testArg,22794,root/html602/RooCFunction3PdfBinding_double_unsigned_int_unsigned_int_double_.html,https://root.cern,https://root.cern/root/html602/RooCFunction3PdfBinding_double_unsigned_int_unsigned_int_double_.html,2,['test'],['testArg']
Testability,"Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooCFunction4PdfBinding<double,double,double,double,bool>&operator=(const RooCFunction4PdfBinding<double,double,double,double,bool>&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCFunction4PdfBinding_double_double_double_double_bool_.html:22766,test,testArg,22766,root/html602/RooCFunction4PdfBinding_double_double_double_double_bool_.html,https://root.cern,https://root.cern/root/html602/RooCFunction4PdfBinding_double_double_double_double_bool_.html,2,['test'],['testArg']
Testability,"Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooCFunction4PdfBinding<double,double,double,double,double>&operator=(const RooCFunction4PdfBinding<double,double,double,double,double>&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedLi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCFunction4PdfBinding_double_double_double_double_double_.html:22774,test,testArg,22774,root/html602/RooCFunction4PdfBinding_double_double_double_double_double_.html,https://root.cern,https://root.cern/root/html602/RooCFunction4PdfBinding_double_double_double_double_double_.html,2,['test'],['testArg']
Testability,"Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooCFunction4PdfBinding<double,double,double,double,int>&operator=(const RooCFunction4PdfBinding<double,double,double,double,int>&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& pr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCFunction4PdfBinding_double_double_double_double_int_.html:22762,test,testArg,22762,root/html602/RooCFunction4PdfBinding_double_double_double_double_int_.html,https://root.cern,https://root.cern/root/html602/RooCFunction4PdfBinding_double_double_double_double_int_.html,2,['test'],['testArg']
Testability,"Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooCachedPdf&operator=(const RooCachedPdf&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kF",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCachedPdf.html:22537,test,testArg,22537,root/html602/RooCachedPdf.html,https://root.cern,https://root.cern/root/html602/RooCachedPdf.html,2,['test'],['testArg']
Testability,"Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooChebychev&operator=(const RooChebychev&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kF",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooChebychev.html:22095,test,testArg,22095,root/html602/RooChebychev.html,https://root.cern,https://root.cern/root/html602/RooChebychev.html,2,['test'],['testArg']
Testability,"Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooChiSquarePdf&operator=(const RooChiSquarePdf&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooChiSquarePdf.html:22247,test,testArg,22247,root/html602/RooChiSquarePdf.html,https://root.cern,https://root.cern/root/html602/RooChiSquarePdf.html,2,['test'],['testArg']
Testability,"Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooDecay&operator=(const RooDecay&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooDecay.html:22875,test,testArg,22875,root/html602/RooDecay.html,https://root.cern,https://root.cern/root/html602/RooDecay.html,2,['test'],['testArg']
Testability,"Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooDstD0BG&operator=(const RooDstD0BG&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooDstD0BG.html:22142,test,testArg,22142,root/html602/RooDstD0BG.html,https://root.cern,https://root.cern/root/html602/RooDstD0BG.html,2,['test'],['testArg']
Testability,"Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooEffProd&operator=(const RooEffProd&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooEffProd.html:22530,test,testArg,22530,root/html602/RooEffProd.html,https://root.cern,https://root.cern/root/html602/RooEffProd.html,2,['test'],['testArg']
Testability,"Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooEfficiency&operator=(const RooEfficiency&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooEfficiency.html:22466,test,testArg,22466,root/html602/RooEfficiency.html,https://root.cern,https://root.cern/root/html602/RooEfficiency.html,2,['test'],['testArg']
Testability,"Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooExponential&operator=(const RooExponential&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooExponential.html:22075,test,testArg,22075,root/html602/RooExponential.html,https://root.cern,https://root.cern/root/html602/RooExponential.html,2,['test'],['testArg']
Testability,"Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooExtendPdf&operator=(const RooExtendPdf&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kF",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooExtendPdf.html:22716,test,testArg,22716,root/html602/RooExtendPdf.html,https://root.cern,https://root.cern/root/html602/RooExtendPdf.html,2,['test'],['testArg']
Testability,"Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooExtendedTerm&operator=(const RooExtendedTerm&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooExtendedTerm.html:22260,test,testArg,22260,root/html602/RooExtendedTerm.html,https://root.cern,https://root.cern/root/html602/RooExtendedTerm.html,2,['test'],['testArg']
Testability,"Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooFFTConvPdf&operator=(const RooFFTConvPdf&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooFFTConvPdf.html:26981,test,testArg,26981,root/html602/RooFFTConvPdf.html,https://root.cern,https://root.cern/root/html602/RooFFTConvPdf.html,2,['test'],['testArg']
Testability,"Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooFunctor1DPdfBinding&operator=(const RooFunctor1DPdfBinding&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, B",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooFunctor1DPdfBinding.html:22626,test,testArg,22626,root/html602/RooFunctor1DPdfBinding.html,https://root.cern,https://root.cern/root/html602/RooFunctor1DPdfBinding.html,2,['test'],['testArg']
Testability,"Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooFunctorPdfBinding&operator=(const RooFunctorPdfBinding&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooFunctorPdfBinding.html:22618,test,testArg,22618,root/html602/RooFunctorPdfBinding.html,https://root.cern,https://root.cern/root/html602/RooFunctorPdfBinding.html,2,['test'],['testArg']
Testability,"Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooGamma&operator=(const RooGamma&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooGamma.html:22008,test,testArg,22008,root/html602/RooGamma.html,https://root.cern,https://root.cern/root/html602/RooGamma.html,2,['test'],['testArg']
Testability,"Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooGaussian&operator=(const RooGaussian&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFAL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooGaussian.html:22029,test,testArg,22029,root/html602/RooGaussian.html,https://root.cern,https://root.cern/root/html602/RooGaussian.html,2,['test'],['testArg']
Testability,"Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooGenericPdf&operator=(const RooGenericPdf&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooGenericPdf.html:22859,test,testArg,22859,root/html602/RooGenericPdf.html,https://root.cern,https://root.cern/root/html602/RooGenericPdf.html,2,['test'],['testArg']
Testability,"Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooHistConstraint&operator=(const RooHistConstraint&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooHistConstraint.html:22079,test,testArg,22079,root/html602/RooHistConstraint.html,https://root.cern,https://root.cern/root/html602/RooHistConstraint.html,2,['test'],['testArg']
Testability,"Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooHistPdf&operator=(const RooHistPdf&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooHistPdf.html:22323,test,testArg,22323,root/html602/RooHistPdf.html,https://root.cern,https://root.cern/root/html602/RooHistPdf.html,2,['test'],['testArg']
Testability,"Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooIntegralMorph&operator=(const RooIntegralMorph&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooIntegralMorph.html:26283,test,testArg,26283,root/html602/RooIntegralMorph.html,https://root.cern,https://root.cern/root/html602/RooIntegralMorph.html,2,['test'],['testArg']
Testability,"Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooJeffreysPrior&operator=(const RooJeffreysPrior&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooJeffreysPrior.html:22117,test,testArg,22117,root/html602/RooJeffreysPrior.html,https://root.cern,https://root.cern/root/html602/RooJeffreysPrior.html,2,['test'],['testArg']
Testability,"Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooKeysPdf&operator=(const RooKeysPdf&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooKeysPdf.html:22785,test,testArg,22785,root/html602/RooKeysPdf.html,https://root.cern,https://root.cern/root/html602/RooKeysPdf.html,2,['test'],['testArg']
Testability,"Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooLandau&operator=(const RooLandau&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooLandau.html:22065,test,testArg,22065,root/html602/RooLandau.html,https://root.cern,https://root.cern/root/html602/RooLandau.html,2,['test'],['testArg']
Testability,"Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooLognormal&operator=(const RooLognormal&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kF",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooLognormal.html:22412,test,testArg,22412,root/html602/RooLognormal.html,https://root.cern,https://root.cern/root/html602/RooLognormal.html,2,['test'],['testArg']
Testability,"Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooMomentMorph&operator=(const RooMomentMorph&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooMomentMorph.html:21966,test,testArg,21966,root/html602/RooMomentMorph.html,https://root.cern,https://root.cern/root/html602/RooMomentMorph.html,2,['test'],['testArg']
Testability,"Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooMultiVarGaussian&operator=(const RooMultiVarGaussian&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooMultiVarGaussian.html:22305,test,testArg,22305,root/html602/RooMultiVarGaussian.html,https://root.cern,https://root.cern/root/html602/RooMultiVarGaussian.html,2,['test'],['testArg']
Testability,"Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooNDKeysPdf&operator=(const RooNDKeysPdf&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kF",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooNDKeysPdf.html:23031,test,testArg,23031,root/html602/RooNDKeysPdf.html,https://root.cern,https://root.cern/root/html602/RooNDKeysPdf.html,2,['test'],['testArg']
Testability,"Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooNonCPEigenDecay&operator=(const RooNonCPEigenDecay&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t va",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooNonCPEigenDecay.html:23321,test,testArg,23321,root/html602/RooNonCPEigenDecay.html,https://root.cern,https://root.cern/root/html602/RooNonCPEigenDecay.html,2,['test'],['testArg']
Testability,"Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooNonCentralChiSquare&operator=(const RooNonCentralChiSquare&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, B",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooNonCentralChiSquare.html:23370,test,testArg,23370,root/html602/RooNonCentralChiSquare.html,https://root.cern,https://root.cern/root/html602/RooNonCentralChiSquare.html,2,['test'],['testArg']
Testability,"Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooNovosibirsk&operator=(const RooNovosibirsk&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooNovosibirsk.html:22194,test,testArg,22194,root/html602/RooNovosibirsk.html,https://root.cern,https://root.cern/root/html602/RooNovosibirsk.html,2,['test'],['testArg']
Testability,"Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooParametricStepFunction&operator=(const RooParametricStepFunction&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& test",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooParametricStepFunction.html:23203,test,testArg,23203,root/html602/RooParametricStepFunction.html,https://root.cern,https://root.cern/root/html602/RooParametricStepFunction.html,2,['test'],['testArg']
Testability,"Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooPoisson&operator=(const RooPoisson&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooPoisson.html:22020,test,testArg,22020,root/html602/RooPoisson.html,https://root.cern,https://root.cern/root/html602/RooPoisson.html,2,['test'],['testArg']
Testability,"Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooPolynomial&operator=(const RooPolynomial&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooPolynomial.html:22322,test,testArg,22322,root/html602/RooPolynomial.html,https://root.cern,https://root.cern/root/html602/RooPolynomial.html,2,['test'],['testArg']
Testability,"Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooProdPdf&operator=(const RooProdPdf&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooProdPdf.html:22952,test,testArg,22952,root/html602/RooProdPdf.html,https://root.cern,https://root.cern/root/html602/RooProdPdf.html,2,['test'],['testArg']
Testability,"Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooProjectedPdf&operator=(const RooProjectedPdf&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooProjectedPdf.html:22759,test,testArg,22759,root/html602/RooProjectedPdf.html,https://root.cern,https://root.cern/root/html602/RooProjectedPdf.html,2,['test'],['testArg']
Testability,"Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooRealSumPdf&operator=(const RooRealSumPdf&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooRealSumPdf.html:22644,test,testArg,22644,root/html602/RooRealSumPdf.html,https://root.cern,https://root.cern/root/html602/RooRealSumPdf.html,2,['test'],['testArg']
Testability,"Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooSimultaneous&operator=(const RooSimultaneous&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooSimultaneous.html:22778,test,testArg,22778,root/html602/RooSimultaneous.html,https://root.cern,https://root.cern/root/html602/RooSimultaneous.html,2,['test'],['testArg']
Testability,"Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooStats::HistFactory::HistFactorySimultaneous&operator=(const RooStats::HistFactory::HistFactorySimultaneous&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__HistFactory__HistFactorySimultaneous.html:23898,test,testArg,23898,root/html602/RooStats__HistFactory__HistFactorySimultaneous.html,https://root.cern,https://root.cern/root/html602/RooStats__HistFactory__HistFactorySimultaneous.html,2,['test'],['testArg']
Testability,"Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooTFnPdfBinding&operator=(const RooTFnPdfBinding&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooTFnPdfBinding.html:22086,test,testArg,22086,root/html602/RooTFnPdfBinding.html,https://root.cern,https://root.cern/root/html602/RooTFnPdfBinding.html,2,['test'],['testArg']
Testability,"Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooUniform&operator=(const RooUniform&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooUniform.html:22047,test,testArg,22047,root/html602/RooUniform.html,https://root.cern,https://root.cern/root/html602/RooUniform.html,2,['test'],['testArg']
Testability,"Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooVoigtian&operator=(const RooVoigtian&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFAL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooVoigtian.html:22544,test,testArg,22544,root/html602/RooVoigtian.html,https://root.cern,https://root.cern/root/html602/RooVoigtian.html,2,['test'],['testArg']
Testability,"Int_t coldef = 1, Int_t stydef = 1, Int_t widdef = 1); virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillColorAlpha(Color_t fcolor, Float_t falpha); virtual voidTAttFill::SetFillStyle(Style_t fstyle); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidSetName(const char* name); virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPoints(Double_t* points) const; virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidSetVisibility(Int_t vis)MENU ; virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidTAtt3D::Sizeof3D() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTransformPoints(Double_t* points, UInt_t NbPnts) const; TShape(); TShape(const TShape&); TShape(const char* name, const char* title, const char* material); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TShape.html:6427,Test,TestBit,6427,root/html602/TShape.html,https://root.cern,https://root.cern/root/html602/TShape.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"Int_t endtype = -1, Bool_t deactonfail = kFALSE); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); TSlave*TProof::CreateSlave(const char* url, const char* ord, Int_t perf, const char* image, const char* workdir); TSlave*TProof::CreateSubmaster(const char* url, const char* ord, const char* image, const char* msd); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; static Bool_tTProof::GetFileInCmd(const char* cmd, TString& fn); static Int_tTProof::GetInputData(TList* input, const char* cachedir, TString& emsg); TStringGetJobAd(); TList*TProof::GetListOfActiveSlaves() const; TVirtualProofPlayer*TProof::GetPlayer() const; TPluginHandler*TProof::GetProgressDialog() const; Int_tTProof::GetSandbox(TString& sb, Bool_t assert = kFALSE, const char* rc = 0); virtual void*TQObject::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidTProof::HandleLibIncPath(const char* what, Bool_t add, const char* dirs); Int_tTProof::Init(const char* masterurl, const char* conffile, const char* confdir, Int_t loglevel, const char* alias = 0); voidTProof::InitMembers(); virtual TVirtualProofPlayer*TProof::MakePlayer(const char* player = 0, TSocket* s = 0); voidTObject::MakeZombie(); voidTProof::PrepareInputDataFile(TString& dataFile); Int_tTProof::RemoveWorkers(TList* wrks); static Int_tTProof::SaveInputData(TQueryResult* qr, const char* cachedir, TString& emsg); virtual voidTProof::SaveWorkerInfo(); Int_tTProof::SendFile(const char* file, Int_t opt = (kBinary|kForward|kCp|kCpBin), const char* rfile = 0, TSlave* sl = 0); static Int_tTProof::SendInputData(TQueryResult* qr, TProof* p, TString& emsg); virtual voidTProof::SendInputDataFile(); voidTProof::SetDSet(TDSet* dset); voidTProof::SetPlayer(TVirtual",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofCondor.html:20213,assert,assert,20213,root/html530/TProofCondor.html,https://root.cern,https://root.cern/root/html530/TProofCondor.html,2,['assert'],['assert']
Testability,"Int_t f); Bool_tTApplication::ReturnFromRun() const; virtual voidTApplication::ReturnPressed(char* text)SIGNAL ; virtual voidTApplication::Run(Bool_t retrn = kFALSE); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); Int_tSendFile(const char* file, Int_t opt = kAscii, const char* rfile = 0); Int_tSendObject(const TObject* obj); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTApplication::SetEchoMode(Bool_t mode); virtual voidTApplication::SetIdleTimer(UInt_t idleTimeInSec, const char* command); static voidTObject::SetObjectStat(Bool_t stat); static voidSetPortParam(Int_t lower = -1, Int_t upper = -1, Int_t attempts = -1); voidTApplication::SetReturnFromRun(Bool_t ret); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTApplication::Show(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTApplication::StartIdleing(); virtual voidTApplication::StopIdleing(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual Int_tTApplication::TabCompletionHook(char* buf, int* pLoc, ostream& out); TApplicationRemote(const TApplicationRemote&); TApplicationRemote(const char* url, Int_t debug = 0, const char* script = 0); virtual voidTerminate(Int_t status = 0); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; const char*TApplication::WorkingDirectory() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TApplicationRemote.html:9947,Test,TestBit,9947,root/html602/TApplicationRemote.html,https://root.cern,https://root.cern/root/html602/TApplicationRemote.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"Int_t f); virtual TClass*IsA() const; Bool_tRooAbsArg::isCloneOf(const RooAbsArg& other) const; Bool_tRooAbsArg::isConstant() const; virtual Bool_tRooAbsArg::isDerived() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tRooAbsArg::isFundamental() const; virtual Bool_tRooAbsArg::isLValue() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; const RooArgList&list1() const; const RooArgList&list2() const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooMoment*RooAbsReal::mean(RooRealVar& obs); RooMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRoo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAddition.html:16221,log,logEvalError,16221,root/html526/RooAddition.html,https://root.cern,https://root.cern/root/html526/RooAddition.html,1,['log'],['logEvalError']
Testability,"Int_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetFitParameters(Int_t xmin, Int_t xmax, Int_t ymin, Int_t ymax, Int_t numberIterations, Double_t alpha, Int_t statisticType, Int_t alphaOptim, Int_t power, Int_t fitTaylor); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidSetPeakParameters(Double_t sigmaX, Bool_t fixSigmaX, Double_t sigmaY, Bool_t fixSigmaY, Double_t ro, Bool_t fixRo, const Float_t* positionInitX, const Bool_t* fixPositionX, const Float_t* positionInitY, const Bool_t* fixPositionY, const Float_t* positionInitX1, const Bool_t* fixPositionX1, const Float_t* positionInitY1, const Bool_t* fixPositionY1, const Float_t* ampInit, const Bool_t* fixAmp, const Float_t* ampInitX1, const Bool_t* fixAmpX1, const Float_t* ampInitY1, const Bool_t* fixAmpY1); voidSetTailParameters(Double_t tInitXY, Bool_t fixTxy, Double_t tInitX, Bool_t fixTx, Double_t tInitY, Bool_t fixTy, Double_t bInitX, Bool_t fixBx, Double_t bInitY, Bool_t fixBy, Double_t sInitXY, Bool_t fixSxy, Double_t sInitX, Bool_t fixSx, Double_t sInitY, Bool_t fixSy); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrum2Fit.html:7525,Test,TestBit,7525,root/html528/TSpectrum2Fit.html,https://root.cern,https://root.cern/root/html528/TSpectrum2Fit.html,6,['Test'],"['TestBit', 'TestBits']"
Testability,"Int_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillColorAlpha(Color_t fcolor, Float_t falpha); virtual voidTAttFill::SetFillStyle(Style_t fstyle); voidSetGVNode(GVizAgnode_t* gvn); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTAttText::SetTextAlign(Short_t align = 11); virtual voidSetTextAngle(Float_t); virtual voidTAttText::SetTextAttributes()MENU ; virtual voidTAttText::SetTextColor(Color_t tcolor = 1); virtual voidTAttText::SetTextColorAlpha(Color_t tcolor, Float_t talpha); virtual voidTAttText::SetTextFont(Font_t tfont = 62); virtual voidTAttText::SetTextSize(Float_t tsize = 1); virtual voidTAttText::SetTextSizePixels(Int_t npixels); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGraphNode.html:7021,Test,TestBit,7021,root/html534/TGraphNode.html,https://root.cern,https://root.cern/root/html534/TGraphNode.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"Int_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); voidTGMainFrame::SetMWMHints(UInt_t value, UInt_t funcs, UInt_t input); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGMainFrame::SetWindowName(const char* name = 0); voidTGMainFrame::SetWMPosition(Int_t x, Int_t y); voidTGMainFrame::SetWMSize(UInt_t w, UInt_t h); voidTGMainFrame::SetWMSizeHints(UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc); voidTGMainFrame::SetWMState(EInitialState state); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); voidShowEnabledPackages(); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); voidShowInfo(const char* txt); voidShowLog(const char* queryref); virtual voidShowMembers(TMemberInspector&); voidShowPackages(); voidShowStatus(); voidStartupMessage(char* msg, Bool_t stat, Int_t curr, Int_t total); voidStartViewer(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; voidTerminate(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); voidUpdateListOfPackages(); voidUpdateListOfProofs(); voidUpdateListOfSessions(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidWriteConfiguration(const char* filename = 0).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TSessionViewer.html:17674,Test,TestBit,17674,root/html534/TSessionViewer.html,https://root.cern,https://root.cern/root/html534/TSessionViewer.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"Int_t i = 0) const; virtual Int_tTObject::Read(const char* name); virtual voidReadBasket(TBuffer& b); virtual voidReadBasketExport(TBuffer& b, TClonesArray* list, Int_t n); virtual voidReadValue(istream& s); virtual voidTObject::RecursiveRemove(TObject* obj); Int_tTLeaf::ResetAddress(void* add, Bool_t destructor = kFALSE); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); virtual voidSetAddress(void* add = 0); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTLeaf::SetBranch(TBranch* branch); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTLeaf::SetLeafCount(TLeaf* leaf); virtual voidTLeaf::SetLen(Int_t len = 1); virtual voidSetMaximum(Long64_t max); virtual voidSetMinimum(Long64_t min); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTLeaf::SetOffset(Int_t offset = 0); virtual voidTLeaf::SetRange(Bool_t range = kTRUE); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTLeaf::SetUnsigned(); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TLeafL.html:5914,Test,TestBit,5914,root/html528/TLeafL.html,https://root.cern,https://root.cern/root/html528/TLeafL.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"Int_t idim1, Int_t idim2, TMVA::ECellValue cell_value = kValue, TMVA::PDEFoamKernelBase* kernel = NULL, UInt_t maxbins = 50); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); voidResetCellElements(); voidRootPlot2dim(const TString& filename, TString opt, Bool_t CreateCanvas = kTRUE, Bool_t colors = kTRUE); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetDensity(TMVA::PDEFoamDensityBase* dens); voidSetDim(Int_t kDim); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetEvPerBin(Int_t EvPerBin); voidSetInhiDiv(Int_t, Int_t); voidSetMaxDepth(UInt_t maxdepth); voidSetnBin(Int_t nBin); voidSetnCells(Long_t nCells); voidSetNmin(UInt_t val); voidSetnSampl(Long_t nSampl); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetXmax(Int_t idim, Double_t wmax); voidSetXmin(Int_t idim, Double_t wmin); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); vector<Float_t>VarTransform(const vector<Float_t>& invec) const; Float_tVarTransform(Int_t idim, Float_t x) const; vector<Float_t>VarTransformInvers(const vector<Float_t>& invec) const; Float_tVarTransformInvers(Int_t idim, Float_t x) const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__PDEFoam.html:7333,Test,TestBit,7333,root/html530/TMVA__PDEFoam.html,https://root.cern,https://root.cern/root/html530/TMVA__PDEFoam.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"Int_t index); voidTGeoVolume::SetNodes(TObjArray* nodes); voidTGeoVolume::SetNtotal(Int_t ntotal); voidTGeoVolume::SetNumber(Int_t number); static voidTObject::SetObjectStat(Bool_t stat); voidTGeoAtt::SetOptimization(Option_t* option); voidTGeoVolume::SetOption(const char* option); voidTGeoVolume::SetOverlappingCandidate(Bool_t flag); voidTGeoVolume::SetReplicated(); voidTGeoVolume::SetShape(const TGeoShape* shape); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidTGeoVolume::SetTransparency(Char_t transparency = 0)MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); voidTGeoVolume::SetUserExtension(TGeoExtension* ext); voidTGeoAtt::SetVisBranch(); virtual voidTGeoVolume::SetVisContainers(Bool_t flag = kTRUE)TOGGLE GETTER ; voidTGeoAtt::SetVisDaughters(Bool_t vis = kTRUE); virtual voidTGeoVolume::SetVisibility(Bool_t vis = kTRUE)TOGGLE GETTER ; virtual voidTGeoVolume::SetVisLeaves(Bool_t flag = kTRUE)TOGGLE GETTER ; virtual voidTGeoVolume::SetVisOnly(Bool_t flag = kTRUE)TOGGLE GETTER ; voidTGeoAtt::SetVisRaytrace(Bool_t flag = kTRUE); voidTGeoAtt::SetVisStreamed(Bool_t vis = kTRUE); voidTGeoAtt::SetVisTouched(Bool_t vis = kTRUE); voidTGeoVolume::SetVoxelFinder(TGeoVoxelFinder* finder); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidTAtt3D::Sizeof3D() const; voidTGeoVolume::SortNodes(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTGeoAtt::TestAttBit(UInt_t f) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTGeoVolume::UnmarkSaved(); virtual voidTObject::UseCurrentStyle(); Bool_tTGeoVolume::Valid() const; voidTGeoVolume::VisibleDaughters(Bool_t vis = kTRUE)TOGGLE GETTER ; voidTGeoVolume::Voxelize(Option_t* option); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Double_tTGeoVolume::Weight(Double_t precision = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoVolumeAssembly.html:30611,Test,TestAttBit,30611,root/html534/TGeoVolumeAssembly.html,https://root.cern,https://root.cern/root/html534/TGeoVolumeAssembly.html,3,['Test'],"['TestAttBit', 'TestBit', 'TestBits']"
Testability,"Int_t kind = kMESS_STRING); virtual Int_tSendObject(const TObject* obj, Int_t kind = kMESS_OBJECT); virtual Int_tSendRaw(const void* buffer, Int_t length, ESendRecvOptions opt = kDefault); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetCompressionAlgorithm(Int_t algorithm = 0); voidSetCompressionLevel(Int_t level = 1); voidSetCompressionSettings(Int_t settings = 1); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual Int_tSetOption(ESockOptions opt, Int_t val); voidSetRemoteProtocol(Int_t rproto); voidSetSecContext(TSecContext* ctx); voidSetService(const char* service); voidSetServType(Int_t st); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); voidSetUrl(const char* url); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTouch(); TUDPSocket(const char* sockpath); TUDPSocket(Int_t descriptor); TUDPSocket(const TUDPSocket& s); TUDPSocket(TInetAddress address, const char* service); TUDPSocket(TInetAddress address, Int_t port); TUDPSocket(const char* host, const char* service); TUDPSocket(const char* host, Int_t port); TUDPSocket(Int_t descriptor, const char* sockpath); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TUDPSocket.html:6481,Test,TestBit,6481,root/html602/TUDPSocket.html,https://root.cern,https://root.cern/root/html602/TUDPSocket.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"Int_t loglevel, const char* alias = 0); Start the PROOF environment. Starting PROOF involves either connecting; to a master server, which in turn will start a set of slave servers, or; directly starting as master server (if master = """"). For a description; of the arguments see the TProof ctor. Returns the number of started; master or slave servers, returns 0 in case of error, in which case; fValid remains false. ~TProofLite(); Destructor. Int_t GetNumberOfWorkers(const char* url = 0); Static method to determine the number of workers giving priority to users request.; Otherwise use the system information, if available, or just start; the minimal number, i.e. 2 . Int_t SetupWorkers(Int_t opt = 0, TList* wrks = 0); Start up PROOF workers. void NotifyStartUp(const char* action, Int_t done, Int_t tot); Notify setting-up operation message. Int_t SetProofServEnv(const char* ord); Create environment files for worker 'ord'. void ResolveKeywords(TString& s, const char* ord, const char* logfile); Resolve some keywords in 's'; <logfilewrk>, <user>, <rootsys>, <cpupin>. Int_t CreateSandbox(); Create the sandbox for this session. void Print(Option_t* option = """") const; Print status of PROOF-Lite cluster. TProofQueryResult * MakeQueryResult(Long64_t nent, const char* opt, Long64_t fst, TDSet* dset, const char* selec); Create a TProofQueryResult instance for this query. void SetQueryRunning(TProofQueryResult* pq); Set query in running state. Long64_t DrawSelect(TDSet* dset, const char* varexp, const char* selection = """", Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Execute the specified drawing action on a data set (TDSet).; Event- or Entry-lists should be set in the data set object using; TDSet::SetEntryList.; Returns -1 in case of error or number of selected events otherwise. Long64_t Process(TDSet* dset, const char* sel, Option_t* o = """", Long64_t nent = -1, Long64_t fst = 0); Process a data set (TDSet) using the specified selector (.C) file.; Entry- ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofLite.html:29720,log,logfile,29720,root/html534/TProofLite.html,https://root.cern,https://root.cern/root/html534/TProofLite.html,6,['log'],"['logfile', 'logfilewrk']"
Testability,"Int_t maxL = dsi.GetClassNameMaxLength();; 1009 ; 1010 Log() << kHEADER << Form(""[%s] : "",dsi.GetName()) << ""Number of events in input trees"" << Endl;; 1011 Log() << kDEBUG << ""(after possible flattening of arrays):"" << Endl;; 1012 ; 1013 ; 1014 for (UInt_t cl = 0; cl < dsi.GetNClasses(); cl++) {; 1015 Log() << kDEBUG //<< Form(""[%s] : "",dsi.GetName()); 1016 << "" ""; 1017 << setiosflags(ios::left) << std::setw(maxL) << dsi.GetClassInfo(cl)->GetName(); 1018 << "" -- number of events : ""; 1019 << std::setw(5) << eventCounts[cl].nEvBeforeCut; 1020 << "" / sum of weights: "" << std::setw(5) << eventCounts[cl].nWeEvBeforeCut << Endl;; 1021 }; 1022 ; 1023 for (UInt_t cl = 0; cl < dsi.GetNClasses(); cl++) {; 1024 Log() << kDEBUG //<< Form(""Dataset[%s] : "",dsi.GetName()); 1025 << "" "" << std::setw(maxL) << dsi.GetClassInfo(cl)->GetName(); 1026 <<"" tree -- total number of entries: ""; 1027 << std::setw(5) << dataInput.GetEntries(dsi.GetClassInfo(cl)->GetName()) << Endl;; 1028 }; 1029 ; 1030 if (fScaleWithPreselEff); 1031 Log() << kDEBUG //<< Form(""Dataset[%s] : "",dsi.GetName()); 1032 << ""\tPreselection: (will affect number of requested training and testing events)"" << Endl;; 1033 else; 1034 Log() << kDEBUG //<< Form(""Dataset[%s] : "",dsi.GetName()); 1035 << ""\tPreselection: (will NOT affect number of requested training and testing events)"" << Endl;; 1036 ; 1037 if (dsi.HasCuts()) {; 1038 for (UInt_t cl = 0; cl< dsi.GetNClasses(); cl++) {; 1039 Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << "" "" << setiosflags(ios::left) << std::setw(maxL) << dsi.GetClassInfo(cl)->GetName(); 1040 << "" requirement: \"""" << dsi.GetClassInfo(cl)->GetCut() << ""\"""" << Endl;; 1041 Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << "" ""; 1042 << setiosflags(ios::left) << std::setw(maxL) << dsi.GetClassInfo(cl)->GetName(); 1043 << "" -- number of events passed: ""; 1044 << std::setw(5) << eventCounts[cl].nEvAfterCut; 1045 << "" / sum of weights: "" << std::setw(5) << eventCounts[cl].nWeEvAfterCut ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataSetFactory_8cxx_source.html:43835,Log,Log,43835,doc/master/DataSetFactory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/DataSetFactory_8cxx_source.html,1,['Log'],['Log']
Testability,"Int_t maxiter = 100, Bool_t logx = false) const; virtual Double_tGetMinimumX(Double_t xmin = 0, Double_t xmax = 0, Double_t epsilon = 1.E-10, Int_t maxiter = 100, Bool_t logx = false) const; virtual const char*TNamed::GetName() const; virtual Int_tGetNDF() const; virtual Int_tTFormula::GetNdim() const; virtual Int_tTFormula::GetNpar() const; virtual Int_tGetNpx() const; virtual Int_tTFormula::GetNumber() const; virtual Int_tGetNumberFitPoints() const; virtual Int_tGetNumberFreeParameters() const; virtual char*GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Double_tTFormula::GetParameter(Int_t ipar) const; Double_tTFormula::GetParameter(const char* name) const; virtual Double_t*TFormula::GetParameters() const; virtual voidTFormula::GetParameters(Double_t* params); TObject*GetParent() const; virtual Double_tGetParError(Int_t ipar) const; virtual Double_t*GetParErrors() const; virtual voidGetParLimits(Int_t ipar, Double_t& parmin, Double_t& parmax) const; virtual const char*TFormula::GetParName(Int_t ipar) const; virtual Int_tTFormula::GetParNumber(const char* name) const; virtual Double_tGetProb() const; virtual Int_tGetQuantiles(Int_t nprobSum, Double_t* q, const Double_t* probSum); virtual Double_tGetRandom(); virtual Double_tGetRandom(Double_t xmin, Double_t xmax); virtual voidGetRange(Double_t& xmin, Double_t& xmax) const; virtual voidGetRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; virtual voidGetRange(Double_t& xmin, Double_t& ymin, Double_t& zmin, Double_t& xmax, Double_t& ymax, Double_t& zmax) const; virtual Double_tGetSave(const Double_t* x); virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Double_tGetX(Double_t y, Double_t xmin = 0, Double_t xmax = 0, Double_t epsilon = 1.E-10, Int_t maxiter = 100, Bool_t logx = false) const; TAxis*GetXaxis() const; virtual Double_tGetXmax() const; virtual Double_tGetXmin(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TF1.html:10175,log,logx,10175,root/html528/TF1.html,https://root.cern,https://root.cern/root/html528/TF1.html,3,['log'],['logx']
Testability,"Int_t nbins); RooStats::SamplingDistPlotSamplingDistPlot(const char* name, const char* title, Int_t nbins, Double_t xmin, Double_t xmax); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidSetAxisTitle(char* varName); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetLineColor(const Color_t color, const RooStats::SamplingDistribution* samplDist = 0); voidSetLineStyle(const Style_t style, const RooStats::SamplingDistribution* samplDist = 0); voidSetLineWidth(const Width_t lwidth, const RooStats::SamplingDistribution* samplDist = 0); voidSetMarkerColor(const Color_t color, const RooStats::SamplingDistribution* samplDist = 0); voidSetMarkerSize(const Size_t size, const RooStats::SamplingDistribution* samplDist = 0); voidSetMarkerStyle(const Style_t style, const RooStats::SamplingDistribution* samplDist = 0); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp, char* parent); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__SamplingDistPlot.html:6672,Test,TestBit,6672,root/html526/RooStats__SamplingDistPlot.html,https://root.cern,https://root.cern/root/html526/RooStats__SamplingDistPlot.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringfCPUParList of par files to be loaded for CPU benchmarks; TStringfCPUSelSelector to be used for CPU benchmarks; TProofBenchDataSet*fDSInstance to handle datasets operations; TStringfDataGenParList of par files to be loaded to generate data for benchmarks; TStringfDataGenSelSelector to be used for generate data for benchmarks; TStringfDataParList of par files to be loaded for data benchmarks; TStringfDataSelSelector to be used for data benchmarks; TStringfDataSetName of the dataset; Bool_tfDebugDebug switch; TPBHistType*fHistTypeType of histograms for CPU runs; Int_tfNFilesWrkNumber of files generated files per worker; Int_tfNHistNumber of histograms to be created in default CPU runs; Int_tfNtriesNumber of times a measurement is repeated; TFile*fOutFileOutput file; TStringfOutFileNameName of the output file; TProof*fProofProof; TProof*fProofDSProof to be used for dataset actions; TPBReadType*fReadTypeType of read (partial, full); TProofBenchRunCPU*fRunCPUInstance to run CPU scans; TProofBenchRunDataRead*fRunDSInstance to run data-read scans. private:. Bool_tfUnlinkOutfileWhether to remove empty output files. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofBench(const char* url, const char* outfile = ""<default>"", const char* proofopt = 0); Constructor: check PROOF and load selectors PAR. ~TProofBench(); Destructor. Int_t OpenOutFile(Bool_t wrt = kFALSE, Bool_t verbose = kTRUE); Set the otuput file; Return 0 on success, -1 on error. Int_t SetOutFile(cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TProofBench.html:6668,benchmark,benchmarks,6668,root/html532/TProofBench.html,https://root.cern,https://root.cern/root/html532/TProofBench.html,6,['benchmark'],['benchmarks']
Testability,"Int_t pos = b.WriteVersionMemberWise(this->IsA(),kTRUE);; 581 b.WriteVersion( vClass, kFALSE );; 582 DOLOOP {; 583 char *obj = (char*)(arr[k]+ioffset);; 584 Int_t n = compinfo[i]->fLength;; 585 if (!n) n=1;; 586 int size = cl->Size();; 587 ; 588 for(Int_t j=0; j<n; j++,obj+=size) {; 589 TVirtualCollectionProxy::TPushPop helper( proxy, obj );; 590 Int_t nobjects = proxy->Size();; 591 b << nobjects;; 592 if (nobjects) {; 593 auto actions = proxy->GetWriteMemberWiseActions();; 594 ; 595 char startbuf[TVirtualCollectionProxy::fgIteratorArenaSize];; 596 char endbuf[TVirtualCollectionProxy::fgIteratorArenaSize];; 597 void *begin = &(startbuf[0]);; 598 void *end = &(endbuf[0]);; 599 proxy->GetFunctionCreateIterators(/*read = */ kFALSE)(obj, &begin, &end, proxy);; 600 // We can not get here with a split vector of pointer, so we can indeed assume; 601 // that actions->fConfiguration != null.; 602 b.ApplySequence(*actions, begin, end);; 603 if (begin != &(startbuf[0])) {; 604 // assert(end != endbuf);; 605 proxy->GetFunctionDeleteTwoIterators()(begin,end);; 606 }; 607 }; 608 }; 609 }; 610 b.SetByteCount(pos,kTRUE);; 611 continue;; 612 }; 613 UInt_t pos = b.WriteVersion(this->IsA(),kTRUE);; 614 if (pstreamer == 0) {; 615 DOLOOP {; 616 b.WriteFastArray((void*)(arr[k]+ioffset),cl,compinfo[i]->fLength,0);; 617 }; 618 } else {; 619 DOLOOP{(*pstreamer)(b,arr[k]+ioffset,compinfo[i]->fLength);}; 620 }; 621 b.SetByteCount(pos,kTRUE);; 622 ; 623 continue;; 624 }; 625 ; 626 case TStreamerInfo::kObject: // Class derived from TObject; 627 case TStreamerInfo::kAny: // Class NOT derived from TObject; 628 case TStreamerInfo::kOffsetL + TStreamerInfo::kObject:; 629 case TStreamerInfo::kAny + TStreamerInfo::kOffsetL: {; 630 TClass *cl = compinfo[i]->fClass;; 631 TMemberStreamer *pstreamer = compinfo[i]->fStreamer;; 632 DOLOOP; 633 {b.WriteFastArray((void*)(arr[k]+ioffset),cl,compinfo[i]->fLength,pstreamer);}; 634 continue;; 635 }; 636 ; 637 case TStreamerInfo::kOffsetL + TStreamerInfo::kTString",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfoWriteBuffer_8cxx_source.html:25511,assert,assert,25511,doc/master/TStreamerInfoWriteBuffer_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfoWriteBuffer_8cxx_source.html,1,['assert'],['assert']
Testability,"Int_t stydef = 1, Int_t widdef = 1); virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillStyle(Style_t fstyle); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidTNode::SetMatrix(TRotMatrix* matrix = 0); virtual voidTNode::SetName(const char* name); virtual voidTNode::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNode::SetParent(TNode* parent); virtual voidTNode::SetPosition(Double_t x = 0, Double_t y = 0, Double_t z = 0); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTNode::SetVisibility(Int_t vis = 1)MENU ; virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidTNode::Sizeof3D() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTNode::UpdateMatrix(); virtual voidTNode::UpdateTempMatrix(const Double_t* dx1, const Double_t* rmat1, Double_t x, Double_t y, Double_t z, Double_t* matrix, Double_t* dxnew, Double_t* rmatnew); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TNodeDiv.html:6994,Test,TestBit,6994,root/html530/TNodeDiv.html,https://root.cern,https://root.cern/root/html530/TNodeDiv.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"Int_t type); static voidTObject::SetDtorOnly(void* obj); virtual voidTGCompositeFrame::SetEditable(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetEditDisabled(UInt_t on = 1); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGHeaderFrame(const TGWindow* p = 0, UInt_t w = 1, UInt_t h = 1, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGHeaderFrame.html:15149,Test,TestBit,15149,root/html602/TGHeaderFrame.html,https://root.cern,https://root.cern/root/html602/TGHeaderFrame.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"Int_t type); static voidTObject::SetDtorOnly(void* obj); virtual voidTGCompositeFrame::SetEditable(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetEditDisabled(UInt_t on = 1); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); voidSetLogLevel(Int_t log); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidSetName(const char* str); static voidTObject::SetObjectStat(Bool_t stat); voidSetPortNumber(Int_t port); virtual voidTGFrame::SetSize(const TGDimension& s); voidSetSync(Bool_t sync); voidSettingsChanged(); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetUserName(const char* str); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); voidUpdate(TSessionDescription* desc); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSessionServerFrame.html:14726,Test,TestBit,14726,root/html528/TSessionServerFrame.html,https://root.cern,https://root.cern/root/html528/TSessionServerFrame.html,6,['Test'],"['TestBit', 'TestBits']"
Testability,"Int_t type); static voidTObject::SetDtorOnly(void* obj); virtual voidTGFrame::SetEditable(Bool_t); virtual voidTGWindow::SetEditDisabled(UInt_t on = kEditDisable); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGFrame::SetLayoutBroken(Bool_t = kTRUE); virtual voidTGWindow::SetMapSubwindows(Bool_t); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPosition(Int_t pos)MENU GETTER ; virtual voidSetRange(Int_t range, Int_t page_size)MENU ; virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTGScrollBar::SetSmallIncrement(Int_t increment); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGVScrollBar(const TGVScrollBar&); TGVScrollBar(const TGWindow* p = 0, UInt_t w = 2, UInt_t h = 4, UInt_t options = kVerticalFrame, Pixel_t back = GetDefaultFrameBackground()); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGVScrollBar.html:14472,Test,TestBit,14472,root/html602/TGVScrollBar.html,https://root.cern,https://root.cern/root/html602/TGVScrollBar.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"Int_t type); virtual voidTGFrame::SetDrawOption(Option_t* = """"); virtual voidTGFrame::SetDropType(Int_t type); static voidTObject::SetDtorOnly(void* obj); virtual voidTGCompositeFrame::SetEditable(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetEditDisabled(UInt_t on = 1); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TG16ColorSelector(const TGWindow* p = 0); virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TG16ColorSelector.html:14724,Test,TestBit,14724,root/html602/TG16ColorSelector.html,https://root.cern,https://root.cern/root/html602/TG16ColorSelector.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"Int_t type); virtual voidTGFrame::SetDrawOption(Option_t* = """"); virtual voidTGFrame::SetDropType(Int_t type); static voidTObject::SetDtorOnly(void* obj); virtual voidTGCompositeFrame::SetEditable(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetEditDisabled(UInt_t on = 1); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); voidSetModel(TGLClipSet* m); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); voidUpdateViewerClip(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGLClipSetSubEditor.html:14254,Test,TestBit,14254,root/html534/TGLClipSetSubEditor.html,https://root.cern,https://root.cern/root/html534/TGLClipSetSubEditor.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"Int_t type); virtual voidTGFrame::SetDrawOption(Option_t* = """"); virtual voidTGFrame::SetDropType(Int_t type); static voidTObject::SetDtorOnly(void* obj); virtual voidTGFrame::SetEditable(Bool_t); virtual voidTGWindow::SetEditDisabled(UInt_t on = kEditDisable); virtual voidTGSlider::SetEnabled(Bool_t flag = kTRUE)TOGGLE GETTER ; virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGFrame::SetLayoutBroken(Bool_t = kTRUE); virtual voidTGWindow::SetMapSubwindows(Bool_t); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGSlider::SetPosition(Int_t pos)MENU ; virtual voidTGSlider::SetRange(Int_t min, Int_t max)MENU ; virtual voidTGSlider::SetScale(Int_t scale)MENU ; virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTGSlider::SetState(Bool_t state); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGHSlider.html:14374,Test,TestBit,14374,root/html528/TGHSlider.html,https://root.cern,https://root.cern/root/html528/TGHSlider.html,12,['Test'],"['TestBit', 'TestBits']"
Testability,"Int_t uid); virtual voidTXMLSetup::SetUsedDtd(Bool_t use = kTRUE); virtual voidTXMLSetup::SetUseNamespaces(Bool_t iUseNamespaces = kTRUE); voidTBuffer::SetWriteMode(); virtual voidTBufferFile::SetWriteParam(Int_t mapsize); virtual voidTXMLSetup::SetXmlLayout(TXMLSetup::EXMLLayout layout); virtual voidShowMembers(TMemberInspector& insp); virtual voidSkipObjectAny(); virtual voidSkipVersion(const TClass* cl = 0); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidStreamObject(TObject* obj); virtual voidStreamObject(void* obj, const type_info& typeinfo, const TClass* onFileClass = 0); virtual voidStreamObject(void* obj, const char* className, const TClass* onFileClass = 0); virtual voidStreamObject(void* obj, const TClass* cl, const TClass* onFileClass = 0); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTBufferFile::TagStreamerInfo(TVirtualStreamerInfo* info); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual voidWriteArray(const Bool_t* b, Int_t n); virtual voidWriteArray(const Char_t* c, Int_t n); virtual voidWriteArray(const UChar_t* c, Int_t n); virtual voidWriteArray(const Short_t* h, Int_t n); virtual voidWriteArray(const UShort_t* h, Int_t n); virtual voidWriteArray(const Int_t* i, Int_t n); virtual voidWriteArray(const UInt_t* i, Int_t n); virtual voidWriteArray(const Long_t* l, Int_t n); virtual voidWriteArray(const ULong_t* l, Int_t n); virtual voidWriteArray(const Long64_t* l, Int_t n); virtual voidWriteArray(const ULong64_t* l, Int_t n); virtual voidWriteArray(const Float_t* f, Int_t n); virtual voidWriteArray(const Double_t* d, Int_t n); virtual voidWriteArrayDouble32(const Double_t* d, Int_t n, TStreamerElement* ele = 0); virtual voidWriteArrayFloat16(const Float_t* f, Int_t n, TStreamerElement* ele = 0); virtual voidWriteBool(Bool_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TBufferXML.html:14040,Test,TestBits,14040,root/html528/TBufferXML.html,https://root.cern,https://root.cern/root/html528/TBufferXML.html,3,['Test'],['TestBits']
Testability,"Int_t value); virtual Bool_tSetLong(Int_t npar, Long_t value); virtual Bool_tSetLong64(Int_t npar, Long64_t value); virtual Bool_tSetMaxFieldSize(Int_t nfield, Long_t maxsize); virtual Bool_tSetNull(Int_t npar); static voidTObject::SetObjectStat(Bool_t stat); virtual Bool_tSetString(Int_t npar, const char* value, Int_t maxsize = 256); virtual Bool_tSetTime(Int_t npar, Int_t hour, Int_t min, Int_t sec); virtual voidSetTimeFormating(const char* fmt); virtual Bool_tSetTimestamp(Int_t npar, Int_t year, Int_t month, Int_t day, Int_t hour, Int_t min, Int_t sec, Int_t frac = 0); virtual Bool_tSetUInt(Int_t npar, UInt_t value); virtual Bool_tSetULong64(Int_t npar, ULong64_t value); virtual voidTObject::SetUniqueID(UInt_t uid); virtual Bool_tSetVDouble(Int_t npar, const vector<Double_t> value, const char* schemaName, const char* typeName); virtual Bool_tSetVInt(Int_t npar, const vector<Int_t> value, const char* schemaName, const char* typeName); virtual Bool_tSetVLong(Int_t npar, const vector<Long_t> value, const char* schemaName, const char* typeName); virtual Bool_tSetVLong64(Int_t npar, const vector<Long64_t> value, const char* schemaName, const char* typeName); virtual Bool_tSetVUInt(Int_t npar, const vector<UInt_t> value, const char* schemaName, const char* typeName); virtual Bool_tSetVULong64(Int_t npar, const vector<ULong64_t> value, const char* schemaName, const char* typeName); virtual voidShowMembers(TMemberInspector& insp); virtual Bool_tStoreResult(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TOracleStatement.html:7980,Test,TestBit,7980,root/html528/TOracleStatement.html,https://root.cern,https://root.cern/root/html528/TOracleStatement.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"Int_t value, Bool_t allNodes = kFALSE); voidRooAbsArg::setTransientAttribute(const Text_t* name, Bool_t value = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); voidRooAbsReal::setUnit(const char* unit); voidRooAbsArg::setValueDirty() const; TIterator*RooAbsArg::shapeClientIterator() const; virtual voidShowMembers(TMemberInspector& insp, char* parent); RooMoment*RooAbsReal::sigma(RooRealVar& obs); RooMoment*RooAbsReal::sigma(RooRealVar& obs, const RooArgSet& nset); virtual Int_tTNamed::Sizeof() const; RooNumGenConfig*RooAbsPdf::specialGeneratorConfig() const; RooNumGenConfig*RooAbsPdf::specialGeneratorConfig(Bool_t createOnTheFly); RooNumIntConfig*RooAbsReal::specialIntegratorConfig() const; RooNumIntConfig*RooAbsReal::specialIntegratorConfig(Bool_t createOnTheFly); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); const map<std::string,std::string>&RooAbsArg::stringAttributes() const; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tRooAbsPdf::traceEvalPdf(Double_t value) const; const set<std::string>&RooAbsArg::transientAttributes() const; voidRooAbsArg::treeNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t doBranch = kTRUE, Bool_t doLeaf = kTRUE, Bool_t valueOnly = kFALSE, Bool_t recurseNonDerived = kFALSE) const; voidRooAbsArg::unRegisterCache(RooAbsCache& cache); virtual voidTObject::UseCurrentStyle(); TIterator*RooAbsArg::valueClientIterator() const; static voidRooAbsArg::verboseDirty(Bool_t flag); static intRooAbsPdf::verboseEval(); static voidRooAbsPdf::verboseEval(Int_t stat); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidRooAbsReal::writeToStream(ostream& os, Bool_t compact) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAddModel.html:29917,Test,TestBit,29917,root/html526/RooAddModel.html,https://root.cern,https://root.cern/root/html526/RooAddModel.html,10,['Test'],"['TestBit', 'TestBits']"
Testability,"Int_t valuex = 1, Int_t valuey = 1); virtual voidTPad::SetTickx(Int_t value = 1)TOGGLE ; virtual voidTPad::SetTicky(Int_t value = 1)TOGGLE ; virtual voidTPad::SetTitle(const char* title = """"); virtual voidTPad::SetToolTipText(const char* text, Long_t delayms = 1000); virtual voidTAttPad::SetTopMargin(Float_t topmargin); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTPad::SetVertical(Bool_t vert = kTRUE); virtual voidTPad::SetView(TView* view = 0); virtual voidTPad::SetViewer3D(TVirtualViewer3D* viewer3d); virtual voidTAttPad::SetXfile(Float_t xfile); virtual voidTAttPad::SetXstat(Float_t xstat); virtual voidTAttPad::SetYfile(Float_t yfile); virtual voidTAttPad::SetYstat(Float_t ystat); virtual voidShowMembers(TMemberInspector& insp); virtual voidTPad::StartEditing()SIGNAL ; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTPad::Update(); virtual voidTPad::UseCurrentStyle()MENU ; virtual Int_tTPad::UtoAbsPixel(Double_t u) const; virtual Int_tTPad::UtoPixel(Double_t u) const; virtual Int_tTPad::VtoAbsPixel(Double_t v) const; virtual Int_tTPad::VtoPixel(Double_t v) const; virtual TObject*TPad::WaitPrimitive(const char* pname = """", const char* emode = """"); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTButton::x3d(Option_t* option = """"); virtual Int_tTPad::XtoAbsPixel(Double_t x) const; virtual Double_tTPad::XtoPad(Double_t x) const; virtual Int_tTPad::XtoPixel(Double_t x) const; virtual voidTPad::XYtoAbsPixel(Double_t x, Double_t y, Int_t& xpixel, Int_t& ypixel) const; virtual voidTPad::XYtoPixel(Double_t x, Double_t y, Int_t& xpixel, Int_t& ypixel) cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGroupButton.html:21216,Test,TestBits,21216,root/html528/TGroupButton.html,https://root.cern,https://root.cern/root/html528/TGroupButton.html,3,['Test'],['TestBits']
Testability,"Int_t valuex = 1, Int_t valuey = 1); virtual voidTPad::SetTickx(Int_t value = 1)TOGGLE ; virtual voidTPad::SetTicky(Int_t value = 1)TOGGLE ; virtual voidTPad::SetTitle(const char* title = """"); virtual voidTPad::SetToolTipText(const char* text, Long_t delayms = 1000); virtual voidTAttPad::SetTopMargin(Float_t topmargin); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTPad::SetVertical(Bool_t vert = kTRUE); virtual voidTPad::SetView(TView* view = 0); virtual voidTPad::SetViewer3D(TVirtualViewer3D* viewer3d); virtual voidTAttPad::SetXfile(Float_t xfile); virtual voidTAttPad::SetXstat(Float_t xstat); virtual voidTAttPad::SetYfile(Float_t yfile); virtual voidTAttPad::SetYstat(Float_t ystat); virtual voidShowMembers(TMemberInspector& insp); virtual voidTPad::StartEditing()SIGNAL ; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTPad::Update(); virtual voidTPad::UseCurrentStyle()MENU ; virtual Int_tTPad::UtoAbsPixel(Double_t u) const; virtual Int_tTPad::UtoPixel(Double_t u) const; virtual Int_tTPad::VtoAbsPixel(Double_t v) const; virtual Int_tTPad::VtoPixel(Double_t v) const; virtual TObject*TPad::WaitPrimitive(const char* pname = """", const char* emode = """"); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTPad::x3d(Option_t* type = """"); virtual Int_tTPad::XtoAbsPixel(Double_t x) const; virtual Double_tTPad::XtoPad(Double_t x) const; virtual Int_tTPad::XtoPixel(Double_t x) const; virtual voidTPad::XYtoAbsPixel(Double_t x, Double_t y, Int_t& xpixel, Int_t& ypixel) const; virtual voidTPad::XYtoPixel(Double_t x, Double_t y, Int_t& xpixel, Int_t& ypixel) const; vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSlider.html:22264,Test,TestBits,22264,root/html528/TSlider.html,https://root.cern,https://root.cern/root/html528/TSlider.html,3,['Test'],['TestBits']
Testability,"Int_t valuex = 1, Int_t valuey = 1); virtual voidTPad::SetTickx(Int_t value = 1)TOGGLE ; virtual voidTPad::SetTicky(Int_t value = 1)TOGGLE ; virtual voidTPad::SetTitle(const char* title = """"); virtual voidTPad::SetToolTipText(const char* text, Long_t delayms = 1000); virtual voidTAttPad::SetTopMargin(Float_t topmargin); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTPad::SetVertical(Bool_t vert = kTRUE); virtual voidTPad::SetView(TView* view = 0); virtual voidTPad::SetViewer3D(TVirtualViewer3D* viewer3d); virtual voidTAttPad::SetXfile(Float_t xfile); virtual voidTAttPad::SetXstat(Float_t xstat); virtual voidTAttPad::SetYfile(Float_t yfile); virtual voidTAttPad::SetYstat(Float_t ystat); virtual voidShowMembers(TMemberInspector& insp); virtual voidTPad::StartEditing()SIGNAL ; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTPad::Update(); virtual voidTPad::UseCurrentStyle()MENU ; virtual Int_tTPad::UtoAbsPixel(Double_t u) const; virtual Int_tTPad::UtoPixel(Double_t u) const; virtual Int_tTPad::VtoAbsPixel(Double_t v) const; virtual Int_tTPad::VtoPixel(Double_t v) const; virtual TObject*TPad::WaitPrimitive(const char* pname = """", const char* emode = """"); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidx3d(Option_t* option = """"); virtual Int_tTPad::XtoAbsPixel(Double_t x) const; virtual Double_tTPad::XtoPad(Double_t x) const; virtual Int_tTPad::XtoPixel(Double_t x) const; virtual voidTPad::XYtoAbsPixel(Double_t x, Double_t y, Int_t& xpixel, Int_t& ypixel) const; virtual voidTPad::XYtoPixel(Double_t x, Double_t y, Int_t& xpixel, Int_t& ypixel) const; virtua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TButton.html:22880,Test,TestBits,22880,root/html528/TButton.html,https://root.cern,https://root.cern/root/html528/TButton.html,3,['Test'],['TestBits']
Testability,"Int_t valuex = 1, Int_t valuey = 1); virtual voidTPad::SetTickx(Int_t value = 1)TOGGLE ; virtual voidTPad::SetTicky(Int_t value = 1)TOGGLE ; virtual voidTPad::SetTitle(const char* title = """"); virtual voidTPad::SetToolTipText(const char* text, Long_t delayms = 1000); virtual voidTAttPad::SetTopMargin(Float_t topmargin); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTPad::SetVertical(Bool_t vert = kTRUE); virtual voidTPad::SetView(TView* view = 0); virtual voidTPad::SetViewer3D(TVirtualViewer3D* viewer3d); virtual voidTAttPad::SetXfile(Float_t xfile); virtual voidTAttPad::SetXstat(Float_t xstat); virtual voidTAttPad::SetYfile(Float_t yfile); virtual voidTAttPad::SetYstat(Float_t ystat); virtual voidShowMembers(TMemberInspector& insp); virtual voidTPad::StartEditing()SIGNAL ; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidUpdate(); virtual voidTPad::UseCurrentStyle()MENU ; virtual Int_tTPad::UtoAbsPixel(Double_t u) const; virtual Int_tTPad::UtoPixel(Double_t u) const; virtual Int_tTPad::VtoAbsPixel(Double_t v) const; virtual Int_tTPad::VtoPixel(Double_t v) const; virtual TObject*TPad::WaitPrimitive(const char* pname = """", const char* emode = """"); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTPad::x3d(Option_t* type = """"); virtual Int_tTPad::XtoAbsPixel(Double_t x) const; virtual Double_tTPad::XtoPad(Double_t x) const; virtual Int_tTPad::XtoPixel(Double_t x) const; virtual voidTPad::XYtoAbsPixel(Double_t x, Double_t y, Int_t& xpixel, Int_t& ypixel) const; virtual voidTPad::XYtoPixel(Double_t x, Double_t y, Int_t& xpixel, Int_t& ypixel) const; virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEvePad.html:19823,Test,TestBits,19823,root/html528/TEvePad.html,https://root.cern,https://root.cern/root/html528/TEvePad.html,3,['Test'],['TestBits']
Testability,"Int_t widdef = 1); virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillColorAlpha(Color_t fcolor, Float_t falpha); virtual voidTAttFill::SetFillStyle(Style_t fstyle); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidTShape::SetName(const char* name); virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTShape::SetVisibility(Int_t vis)MENU ; virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidTBRIK::Sizeof3D() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTShape::TransformPoints(Double_t* points, UInt_t NbPnts) const; TTRD2(); TTRD2(const TTRD2&); TTRD2(const char* name, const char* title, const char* material, Float_t dx1, Float_t dx2, Float_t dy1, Float_t dy2, Float_t dz); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTRD2.html:6619,Test,TestBit,6619,root/html602/TTRD2.html,https://root.cern,https://root.cern/root/html602/TTRD2.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"Int_t x); virtual voidTBox::SetBBoxY1(const Int_t y); virtual voidTBox::SetBBoxY2(const Int_t y); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTWbox::SetBorderMode(Short_t bordermode)MENU ; virtual voidTWbox::SetBorderSize(Short_t bordersize)MENU ; virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillColorAlpha(Color_t fcolor, Float_t falpha); virtual voidTAttFill::SetFillStyle(Style_t fstyle); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); static voidTObject::SetObjectStat(Bool_t stat); voidSetSlider(TSlider* slider); virtual voidTBox::SetToolTipText(const char* text, Long_t delayms = 1000); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTBox::SetX1(Double_t x1); virtual voidTBox::SetX2(Double_t x2); virtual voidTBox::SetY1(Double_t y1); virtual voidTBox::SetY2(Double_t y2); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSliderBox(); TSliderBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2, Color_t color = 18, Short_t bordersize = 2, Short_t bordermode = -1); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSliderBox.html:7312,Test,TestBit,7312,root/html602/TSliderBox.html,https://root.cern,https://root.cern/root/html602/TSliderBox.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"Int_t x);; (compiled) (NA):(NA) 0 public: virtual void SetBBoxY1(const Int_t y);; (compiled) (NA):(NA) 0 public: virtual void SetBBoxY2(const Int_t y);; (compiled) (NA):(NA) 0 public: static class TClass *Class();; (compiled) (NA):(NA) 0 public: static const char *Class_Name();; (compiled) (NA):(NA) 0 public: static Version_t Class_Version();; (compiled) (NA):(NA) 0 public: static void Dictionary();; (compiled) (NA):(NA) 0 public: virtual class TClass *IsA() const;; (compiled) (NA):(NA) 0 public: virtual void ShowMembers(class TMemberInspector &insp) const;; (compiled) (NA):(NA) 0 public: virtual void Streamer(class TBuffer &);; (compiled) (NA):(NA) 0 public: void StreamerNVirtual(class TBuffer &ClassDef_StreamerNVirtual_b);; (compiled) (NA):(NA) 0 public: static const char *DeclFileName();; (compiled) (NA):(NA) 0 public: static int ImplFileLine();; (compiled) (NA):(NA) 0 public: static const char *ImplFileName();; (compiled) (NA):(NA) 0 public: static int DeclFileLine();; root [] .> test.log; root [] l.Dump();; root [] .>; root [] ?; Here we see:. Use .class as quick help and reference; Unix like I/O redirection using .> out.txt and unredirection with .>; Use ? to get help on all ‘‘raw’’ interpreter commands; Use @ to abort a multi-line command. Now let us execute a multi-line command:; root [] {; root [] ? TLine l;; root [] ? for (int i = 0; i < 5; i++) {; root [] ? l.SetX1(i);; root [] ? l.SetY1(i+1);; root [] ? l.Print();; root [] ? }; root [] ? }; TLine X1=0.000000 Y1=1.000000 X2=0.000000 Y2=0.000000; TLine X1=1.000000 Y1=2.000000 X2=0.000000 Y2=0.000000; TLine X1=2.000000 Y1=3.000000 X2=0.000000 Y2=0.000000; TLine X1=3.000000 Y1=4.000000 X2=0.000000 Y2=0.000000; TLine X1=4.000000 Y1=5.000000 X2=0.000000 Y2=0.000000; root [] .q; Here we note:. A multi-line command starts with a { and ends with a }.; Inside continuation, every line has to be correctly terminated with a ; (like in ""real’’ C++).; All objects are created in global scope.; There is no way to back up;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:262000,test,test,262000,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['test'],['test']
Testability,"Int_t y); virtual voidTEllipse::SetBBoxX1(const Int_t x); virtual voidTEllipse::SetBBoxX2(const Int_t x); virtual voidTEllipse::SetBBoxY1(const Int_t y); virtual voidTEllipse::SetBBoxY2(const Int_t y); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillColorAlpha(Color_t fcolor, Float_t falpha); virtual voidTAttFill::SetFillStyle(Style_t fstyle); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidTEllipse::SetNoEdges(Bool_t noEdges = kTRUE)TOGGLE GETTER ; static voidTObject::SetObjectStat(Bool_t stat); virtual voidTEllipse::SetPhimax(Double_t phi = 360)MENU ; virtual voidTEllipse::SetPhimin(Double_t phi = 0)MENU ; virtual voidTEllipse::SetR1(Double_t r1)MENU ; virtual voidTEllipse::SetR2(Double_t r2)MENU ; virtual voidTEllipse::SetTheta(Double_t theta = 0)MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTEllipse::SetX1(Double_t x1)MENU ; virtual voidTEllipse::SetY1(Double_t y1)MENU ; virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TArc.html:7413,Test,TestBit,7413,root/html534/TArc.html,https://root.cern,https://root.cern/root/html534/TArc.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"Int_t* group) const; voidTHnBase::RebinnedAdd(const THnBase* h, Double_t c = 1.); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidReset(Option_t* option = """"); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTHnBase::Scale(Double_t c); voidSetBinContent(const Int_t* idx, Double_t v); virtual voidSetBinContent(Long64_t bin, Double_t v); voidTHnBase::SetBinEdges(Int_t idim, const Double_t* bins); voidTHnBase::SetBinError(const Int_t* idx, Double_t e); voidTHnBase::SetBinError(Long64_t bin, Double_t e); virtual voidSetBinError2(Long64_t bin, Double_t e2); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTHnBase::SetEntries(Double_t entries); virtual voidSetFilledBins(Long64_t nbins); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTHnBase::SetTitle(const char* title); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidSumw2(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. THnSparseArrayChunk*AddChunk(); voidTHnBase::AddInternal(const THn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/THnSparse.html:12822,Test,TestBit,12822,root/html602/THnSparse.html,https://root.cern,https://root.cern/root/html602/THnSparse.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"Int_t* nlayer, Int_t* nodes, Int_t* ncycle); Double_tTMVA::MethodCFMlpANN_Utils::W_ref(const Double_t[] wNN, Int_t a_1, Int_t a_2, Int_t a_3) const; Double_t&TMVA::MethodCFMlpANN_Utils::W_ref(Double_t[] wNN, Int_t a_1, Int_t a_2, Int_t a_3); voidTMVA::MethodCFMlpANN_Utils::Wini(); Double_tTMVA::MethodCFMlpANN_Utils::Ww_ref(const Double_t[] wwNN, Int_t a_1, Int_t a_2) const; Double_t&TMVA::MethodCFMlpANN_Utils::Ww_ref(Double_t[] wwNN, Int_t a_1, Int_t a_2). Data Members; public:. Bool_tTMVA::MethodBase::fSetupCompletedis method setup; const TMVA::Event*TMVA::MethodBase::fTmpEvent! temporary event when testing on a different DataSet than the own one; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TMVA::MethodBase::EWeightFileTypeTMVA::MethodBase::kROOT; static TObject::(anonymous)TObject::kSingleKey; static TMVA::MethodBase::EWeightFileTypeTMVA::MethodBase::kTEXT; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::Types::EAnalysisTypeTMVA::MethodBase::fAnalysisTypemethod-mode : true --> regression, false --> classification; UInt_tTMVA::MethodBase::fBackgroundClassindex of the Background-class; vector<TString>*TMVA::MethodBase::fInputVarsvector of input variables used in MVA; vector<Float_t>*TMVA::MethodBase::fMulticlassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase::fNbinsnumber of bins in input variable histograms; Int_tTMVA::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MethodCFMlpANN.html:19292,test,testing,19292,root/html602/TMVA__MethodCFMlpANN.html,https://root.cern,https://root.cern/root/html602/TMVA__MethodCFMlpANN.html,2,['test'],['testing']
Testability,"Int_tCollect(TList* slaves, Long_t timeout = -1, Int_t endtype = -1, Bool_t deactonfail = kFALSE); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); TSlave*CreateSlave(const char* url, const char* ord, Int_t perf, const char* image, const char* workdir); TSlave*CreateSubmaster(const char* url, const char* ord, const char* image, const char* msd); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; TList*GetEnabledPackages() const; static Bool_tGetFileInCmd(const char* cmd, TString& fn); static Int_tGetInputData(TList* input, const char* cachedir, TString& emsg); TList*GetListOfActiveSlaves() const; TVirtualProofPlayer*GetPlayer() const; TPluginHandler*GetProgressDialog() const; Int_tGetSandbox(TString& sb, Bool_t assert = kFALSE, const char* rc = 0); virtual void*TQObject::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidHandleLibIncPath(const char* what, Bool_t add, const char* dirs); Int_tHandleOutputOptions(TString& opt, TString& target, Int_t action); Int_tInit(const char* masterurl, const char* conffile, const char* confdir, Int_t loglevel, const char* alias = 0); voidInitMembers(); virtual TVirtualProofPlayer*MakePlayer(const char* player = 0, TSocket* s = 0); voidTObject::MakeZombie(); virtual Int_tPollForNewWorkers(); voidPrepareInputDataFile(TString& dataFile); Int_tRemoveWorkers(TList* wrks); static Int_tSaveInputData(TQueryResult* qr, const char* cachedir, TString& emsg); virtual voidSaveWorkerInfo(); Int_tSendFile(const char* file, Int_t opt = (kBinary|kForward|kCp|kCpBin), const char* rfile = 0, TSlave* sl = 0); static Int_tSendInputData(TQueryResult* qr, TProof* p, TString& emsg); virtual voidSendInputDataFile(); voidSetDSet(TDSet* dset); voidSetFeedback(TStri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProof.html:20112,assert,assert,20112,root/html534/TProof.html,https://root.cern,https://root.cern/root/html534/TProof.html,1,['assert'],['assert']
Testability,"Int_tLock(); virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); Int_tTVirtualMutex::Release(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Int_tTryLock(); virtual Int_tUnLock(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMutex.html:4549,Test,TestBit,4549,root/html530/TMutex.html,https://root.cern,https://root.cern/root/html530/TMutex.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,Int_tTEveElement::fDenyDestroy! Deny-destroy count.; Bool_tTEveElement::fDestroyOnZeroRefCntAuto-destruct when ref-count reaches zero.; Char_tTEveElement::fDestructing!; Float_tfExtrudeextrude depth; Int_tfFontFileFTFont file name; Int_tfFontModeFTFont FTGL class id; Int_tfFontSizeFTFont face size; Bool_tTEveElement::fHighlighted!; Short_tTEveElement::fImpliedHighlighted!; Short_tTEveElement::fImpliedSelected!; TEveElement::sLTI_tTEveElement::fItems! Set of list-tree-items.; Bool_tfLightingforce lighting; Color_t*TEveElement::fMainColorPtrPointer to main-color variable.; TEveTrans*TEveElement::fMainTransPointer to main transformation matrix.; Char_tTEveElement::fMainTransparencyMain-transparency variable.; TStringTNamed::fNameobject identifier; Int_tTEveElement::fNumChildren!; Int_tTEveElement::fParentIgnoreCnt! Counter for parents that are ignored in ref-counting.; TEveElement::List_tTEveElement::fParentsList of parents.; Bool_tTEveElement::fPickable; Float_tfPolygonOffset[2]depth test; Bool_tTEveElement::fRnrChildrenRender children of this element.; Bool_tTEveElement::fRnrSelfRender this element.; Bool_tTEveElement::fSelected!; TRefTEveElement::fSourceExternal object that is represented by this element.; TStringfTexttext; Color_tfTextColortext color; TStringTNamed::fTitleobject title; Int_tTEveElement::fTopItemCnt! Counter for top-level list-tree items that prevent automatic destruction.; void*TEveElement::fUserData! Externally assigned and controlled user data.; TEveElement*TEveElement::fVizModel! Element used as model from VizDB.; TStringTEveElement::fVizTagTag used to query VizDB for model element.; static TEveElement::EDestructTEveElement::kAnnihilate; static TEveElement::ECompoundSelectionColorBitsTEveElement::kCSCBApplyMainColorToAllChildren; static TEveElement::ECompoundSelectionColorBitsTEveElement::kCSCBApplyMainColorToMatchingChildren; static TEveElement::ECompoundSelectionColorBitsTEveElement::kCSCBApplyMainTransparencyToAllChildren; static TEveElement::,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveText.html:19304,test,test,19304,root/html602/TEveText.html,https://root.cern,https://root.cern/root/html602/TEveText.html,2,['test'],['test']
Testability,"Int_tTObject::Read(const char* name); THnSparse*Rebin(Int_t group) const; THnSparse*Rebin(const Int_t* group) const; voidRebinnedAdd(const THnSparse* h, Double_t c = 1.); virtual voidTObject::RecursiveRemove(TObject* obj); voidReset(Option_t* option = """"); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidScale(Double_t c); voidSetBinContent(const Int_t* x, Double_t v); voidSetBinContent(Long64_t bin, Double_t v); voidSetBinEdges(Int_t idim, const Double_t* bins); voidSetBinError(const Int_t* x, Double_t e); voidSetBinError(Long64_t bin, Double_t e); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetEntries(Double_t entries); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetTitle(const char* title); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); voidSumw2(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. THnSparseArrayChunk*AddChunk(); voidAddInternal(const THnSparse* h, Double_t c, Bool_t rebinned); Bool_tCheckConsistency(const THnSparse* h, const char* ta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/THnSparse.html:11629,Test,TestBit,11629,root/html528/THnSparse.html,https://root.cern,https://root.cern/root/html528/THnSparse.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); TVectorT<double>&ResizeTo(Int_t n); TVectorT<double>&ResizeTo(const TVectorT<double>& v); TVectorT<double>&ResizeTo(Int_t lwb, Int_t upb); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); TVectorT<double>&SelectNonZeros(const TVectorT<double>& select); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetElements(const double* elements); static voidTObject::SetObjectStat(Bool_t stat); TVectorT<double>&SetSub(Int_t row_lwb, const TVectorT<double>& source); virtual voidTObject::SetUniqueID(UInt_t uid); TVectorT<double>&Shift(Int_t row_shift); virtual voidShowMembers(TMemberInspector&); Bool_tSomePositive(const TVectorT<double>& select); TVectorT<double>&Sqr(); TVectorT<double>&Sqrt(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); doubleSum() const; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TVectorT<double>&Use(TVectorT<double>& v); const TVectorT<double>&Use(const TVectorT<double>& v) const; TVectorT<double>&Use(Int_t n, double* data); const TVectorT<double>&Use(Int_t n, const double* data) const; TVectorT<double>&Use(Int_t lwb, Int_t upb, double* data); const TVectorT<double>&Use(Int_t lwb, Int_t upb, const double* data) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; TVectorT<double>&Zero().",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TVectorT_double_.html:8220,Test,TestBit,8220,root/html534/TVectorT_double_.html,https://root.cern,https://root.cern/root/html534/TVectorT_double_.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"Int_tfDrawQueriesnumber of draw queries during this sessions; TList*fEnabledPackagesOnClientlist of packages enabled on client; Bool_tfEndMastertrue for a master in direct contact only with workers; TList*fFeedbacklist of names to be returned as feedback; map<TString,TProof::MD5Mod_t,less<TString>,allocator<pair<const TString,TProof::MD5Mod_t> > >fFileMapmap keeping track of a file's md5 and mod time; Bool_tfFinalizationRunning; THashList*fGlobalPackageDirListlist of directories containing global packages libs; TStringfGroupPROOF group of this user; TList*fInactiveSlaveslist of inactive slaves (good but not used for processing); TList*fInputDataInput data objects sent over via file; TStringfInputDataFileFile with input data objects; TSignalHandler*fIntHandlerinterrupt signal handler (ctrl-c); Bool_tfIsWaitingtrue if queries have been enqueued; Int_tfLastAssignedMerger; TList*fLoadedMacrosList of loaded macros (just file names); TStringfLogFileNamename of the temp file for redirected logs; FILE*fLogFileRtemp file to read redirected logs; FILE*fLogFileWtemp file to redirect logs; Int_tfLogLevelserver debug logging level; Bool_tfLogToWindowOnlysend log to window only; TStringfMastermaster server ("""" if a master); used in the browser; Int_tfMaxDrawQueriesmax number of draw queries kept; TProofMergePrgfMergePrgMerging progress; TList*fMergers; Int_tfMergersCount; Bool_tfMergersSetIndicates, if the following variables have been initialized properly; TList*fNonUniqueMasterslist of all active masters with a nonunique file system; Int_tfNotIdleNumber of non-idle sub-nodes; Int_tfOtherQueriesnumber of queries in list from previous sessions; TStringfPackageDirpackage directory (used on client); TProofLockPath*fPackageLockpackage lock; TVirtualProofPlayer*fPlayercurrent player; PrintProgress_tfPrintProgressFunction function to display progress info in batch mode; TPluginHandler*fProgressDialogprogress dialog plugin; Bool_tfProgressDialogStartedindicates if the progress dialog is",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:29381,log,logs,29381,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,1,['log'],['logs']
Testability,"Int_tfNHistsnumber of histograms; Int_tfNTriesnumber of tries ; TStringfNamename of CPU run; TProofNodes*fNodesnode information; TProfile*fNorm_queryresult_event; TProfile*fProfile_perfstat_event; TProfile*fProfile_queryresult_event; Int_tfStartstart number of workers to scan; Int_tfSteptest to be performed every fStep workers; Int_tfStopstop number of workers to scan. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofBenchRunCPU(TPBHistType* histtype = 0, Int_t nhists = 16, TDirectory* dirproofbench = 0, TProof* proof = 0, TProofNodes* nodes = 0, Long64_t nevents = 1000000, Int_t ntries = 2, Int_t start = 1, Int_t stop = -1, Int_t step = 1, Int_t draw = 0, Int_t debug = 0); Default constructor. ~TProofBenchRunCPU(); Destructor. void BuildHistos(Int_t start, Int_t stop, Int_t step, Bool_t nx); Build histograms, profiles and graphs needed for this run. void Run(Long64_t nevents, Int_t start, Int_t stop, Int_t step, Int_t ntries, Int_t debug, Int_t draw); Run benchmark; Input parameters; nevents: Number of events to run per file. When it is -1, use data member fNEvents.; start: Start scan with 'start' workers. When it is -1, use data member fStart.; When 0, the same number of workers are activated on all nodes.; stop: Stop scan at 'stop' workers. When it is -1 , use data member fStop.; step: Scan every 'step' workers. When it is -1, use data member fStep.; ntries: Number of repetitions. When it is -1, use data member fNTries.; debug: debug switch. When it is -1, use data member fDebug.; draw: draw switch. When it is -1, use data member fDraw.; Returns; Nothing. void FillPerfStatPerfPlots(TTree* t, Int_t nactive). void Print(Option_t* option = """") const; Show settings. void DrawPerfPlots(); Draw Performance plots. void SetHistType(TPBHistType* histtype); Set histogram type. TString GetNameStem() const; Get name for this run. Int_t SetParameters(); Set parameters. Int_t DeleteParameters(); Delete parameters set for this run",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofBenchRunCPU.html:8231,benchmark,benchmark,8231,root/html530/TProofBenchRunCPU.html,https://root.cern,https://root.cern/root/html530/TProofBenchRunCPU.html,2,['benchmark'],['benchmark']
Testability,Integrator.cxx;  IntegratorOptions.cxx;  MersenneTwisterEngine.cxx;  MinimizerOptions.cxx;  MinimizerVariableTransformation.cxx;  MinimTransformFunction.cxx;  mixmax.h;  mixmax.icc;  mixmax_skip_N17.icc;  mixmax_skip_N240.icc;  mixmax_skip_N256.icc;  mixmax_skip_N256.oldS.icc;  MixMaxEngineImpl.h;  MixMaxEngineImpl17.cxx;  MixMaxEngineImpl240.cxx;  MixMaxEngineImpl256.cxx;  ParameterSettings.cxx;  PdfFuncMathCore.cxx;  ProbFuncMathCore.cxx;  QuantFuncMathCore.cxx;  RandomFunctions.cxx;  RichardsonDerivator.cxx;  RootFinder.cxx;  SparseData.cxx;  SpecFuncCephes.cxx;  SpecFuncCephes.h;  SpecFuncCephesInv.cxx;  SpecFuncMathCore.cxx;  StdEngine.cxx;  TComplex.cxx;  TKDTree.cxx;  TKDTreeBinning.cxx;  TMath.cxx;  TRandom.cxx;  TRandom1.cxx;  TRandom2.cxx;  TRandom3.cxx;  TRandomGen.cxx;  triangle.c;  triangle.h;  TStatistic.cxx;  UnBinData.cxx;  ► test;  ► fit;  GaussFunction.h;  MinimizerTypes.h;  SparseDataComparer.cxx;  SparseFit3.cxx;  SparseFit4.cxx;  testFit.cxx;  testFitPerf.cxx;  testGraphFit.cxx;  testMinim.cxx;  testRooFit.cxx;  WrapperRooPdf.h;  binarySearchTime.cxx;  kDTreeTest.cxx;  newKDTreeTest.cxx;  stdsort.cxx;  stressGoFTest.cxx;  stressTF1.cxx;  stressTMath.cxx;  testAnalyticalIntegrals.cxx;  testBinarySearch.cxx;  testDistSampler.cxx;  testIntegration.cxx;  testIntegrationMultiDim.cxx;  testKahan.cxx;  testkdTreeBinning.cxx;  testMathRandom.cxx;  testRootFinder.cxx;  testSampleQuantiles.cxx;  testSortOrder.cxx;  testSpecFuncBeta.cxx;  testSpecFuncBetaI.cxx;  testSpecFuncErf.cxx;  testSpecFuncGamma.cxx;  testSpecFuncSiCi.cxx;  testTMath.cxx;  testTStatistic.cxx;  ► v7;  ► inc;  ► ROOT;  TFit.hxx;  ► mathmore;  ► inc;  ► Math;  ChebyshevApprox.h;  Derivator.h;  DistFuncMathMore.h;  GSLFunctionAdapter.h;  GSLIntegrator.h;  GSLMCIntegrator.h;  GSLMinimizer.h;  GSLMinimizer1D.h;  GSLMultiRootFinder.h;  GSLNLSMinimizer.h;  GSLQuasiRandom.h;  GSLRandom.h;  GSLRandomFunctions.h;  GSLRndmEngines.h;  GSLRootFinder.h;  GSLRootFinderDeriv.h;  GSLRootHelper.h;  GSLS,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/files.html:44837,test,testGraphFit,44837,doc/v610/files.html,https://root.cern,https://root.cern/doc/v610/files.html,1,['test'],['testGraphFit']
Testability,Integrator.cxx;  IntegratorOptions.cxx;  MersenneTwisterEngine.cxx;  MinimizerOptions.cxx;  MinimizerVariableTransformation.cxx;  MinimTransformFunction.cxx;  mixmax.h;  mixmax.icc;  mixmax_skip_N17.icc;  mixmax_skip_N240.icc;  mixmax_skip_N256.icc;  mixmax_skip_N256.oldS.icc;  MixMaxEngineImpl.h;  MixMaxEngineImpl17.cxx;  MixMaxEngineImpl240.cxx;  MixMaxEngineImpl256.cxx;  ParameterSettings.cxx;  PdfFuncMathCore.cxx;  ProbFuncMathCore.cxx;  QuantFuncMathCore.cxx;  RandomFunctions.cxx;  RichardsonDerivator.cxx;  RootFinder.cxx;  SparseData.cxx;  SpecFuncCephes.cxx;  SpecFuncCephes.h;  SpecFuncCephesInv.cxx;  SpecFuncMathCore.cxx;  StdEngine.cxx;  TComplex.cxx;  TKDTree.cxx;  TKDTreeBinning.cxx;  TMath.cxx;  TRandom.cxx;  TRandom1.cxx;  TRandom2.cxx;  TRandom3.cxx;  TRandomGen.cxx;  triangle.c;  triangle.h;  TStatistic.cxx;  UnBinData.cxx;  ► test;  ► fit;  GaussFunction.h;  MinimizerTypes.h;  SparseDataComparer.cxx;  SparseFit3.cxx;  SparseFit4.cxx;  testFit.cxx;  testFitPerf.cxx;  testGraphFit.cxx;  testMinim.cxx;  testRooFit.cxx;  WrapperRooPdf.h;  binarySearchTime.cxx;  kDTreeTest.cxx;  newKDTreeTest.cxx;  stdsort.cxx;  stressGoFTest.cxx;  stressTF1.cxx;  stressTMath.cxx;  testAnalyticalIntegrals.cxx;  testBinarySearch.cxx;  testDistSampler.cxx;  testIntegration.cxx;  testIntegrationMultiDim.cxx;  testkdTreeBinning.cxx;  testMathRandom.cxx;  testRootFinder.cxx;  testSampleQuantiles.cxx;  testSortOrder.cxx;  testSpecFuncBeta.cxx;  testSpecFuncBetaI.cxx;  testSpecFuncErf.cxx;  testSpecFuncGamma.cxx;  testSpecFuncSiCi.cxx;  testTMath.cxx;  testTStatistic.cxx;  ► v7;  ► inc;  ► ROOT;  TFit.hxx;  ► mathmore;  ► inc;  ► Math;  ChebyshevApprox.h;  Derivator.h;  DistFuncMathMore.h;  GSLFunctionAdapter.h;  GSLIntegrator.h;  GSLMCIntegrator.h;  GSLMinimizer.h;  GSLMinimizer1D.h;  GSLMultiRootFinder.h;  GSLNLSMinimizer.h;  GSLQuasiRandom.h;  GSLRandom.h;  GSLRandomFunctions.h;  GSLRndmEngines.h;  GSLRootFinder.h;  GSLRootFinderDeriv.h;  GSLRootHelper.h;  GSLSimAnMinimizer.h;,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:46263,test,testGraphFit,46263,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,1,['test'],['testGraphFit']
Testability,"Internal::RecurseCounts> . using ROOT::TReentrantRWLock< MutexT, RecurseCountsT >::StateDelta = TVirtualRWMutex::StateDelta. Definition at line 300 of file TReentrantRWLock.hxx. Constructor & Destructor Documentation. ◆ TReentrantRWLock(). template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Internal::RecurseCounts> . ROOT::TReentrantRWLock< MutexT, RecurseCountsT >::TReentrantRWLock ; (; ). inline . Regular constructor. ; Definition at line 304 of file TReentrantRWLock.hxx. Member Function Documentation. ◆ Apply(). template<typename MutexT , typename RecurseCountsT > . void TReentrantRWLock::Apply ; (; std::unique_ptr< StateDelta > && ; delta). Re-apply a delta. ; Definition at line 358 of file TReentrantRWLock.cxx. ◆ AssertReadCountLocIsFromCurrentThread(). template<typename MutexT , typename RecurseCountsT > . void TReentrantRWLock::AssertReadCountLocIsFromCurrentThread ; (; const size_t * ; presumedLocalReadersCount). private . Assert that presumedLocalReadersCount really matches the local read count. ; Print an error message if not. ; Definition at line 394 of file TReentrantRWLock.cxx. ◆ GetStateBefore(). template<typename MutexT , typename RecurseCountsT > . std::unique_ptr< TVirtualRWMutex::State > TReentrantRWLock::GetStateBefore. Get the lock state before the most recent write lock was taken. ; Definition at line 260 of file TReentrantRWLock.cxx. ◆ ReadLock(). template<typename MutexT , typename RecurseCountsT > . TVirtualRWMutex::Hint_t * TReentrantRWLock::ReadLock. Acquire the lock in read mode. ; Definition at line 70 of file TReentrantRWLock.cxx. ◆ ReadUnLock(). template<typename MutexT , typename RecurseCountsT > . void TReentrantRWLock::ReadUnLock ; (; TVirtualRWMutex::Hint_t * ; hint). Release the lock in read mode. ; Definition at line 137 of file TReentrantRWLock.cxx. ◆ Rewind(). template<typename MutexT , typename RecurseCountsT > . std::unique_ptr< TVirtualRWMutex::StateDelta > TReentrantRWLock::Rewind ; (; const State & ; earli",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TReentrantRWLock.html:3538,Assert,Assert,3538,doc/v632/classROOT_1_1TReentrantRWLock.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TReentrantRWLock.html,2,['Assert'],['Assert']
Testability,"Interval.; Definition at line 93 of file LogInterval.h. ◆ GetMean(). Double_t TMVA::LogInterval::GetMean ; (; ); const. virtual . Reimplemented from TMVA::Interval.; Definition at line 158 of file LogInterval.cxx. ◆ GetMin(). virtual Double_t TMVA::LogInterval::GetMin ; (; ); const. inlinevirtual . Reimplemented from TMVA::Interval.; Definition at line 92 of file LogInterval.h. ◆ GetNbins(). virtual Int_t TMVA::LogInterval::GetNbins ; (; ); const. inlinevirtual . Reimplemented from TMVA::Interval.; Definition at line 95 of file LogInterval.h. ◆ GetRndm(). Double_t TMVA::LogInterval::GetRndm ; (; TRandom3 & ; rnd); const. virtual . get uniformly distributed number within interval ; Reimplemented from TMVA::Interval.; Definition at line 144 of file LogInterval.cxx. ◆ GetStepSize(). Double_t TMVA::LogInterval::GetStepSize ; (; Int_t ; iBin = 0); const. virtual . returns the step size between the numbers of a ""discrete LogInterval"" ; Reimplemented from TMVA::Interval.; Definition at line 129 of file LogInterval.cxx. ◆ GetWidth(). Double_t TMVA::LogInterval::GetWidth ; (; ); const. virtual . Reimplemented from TMVA::Interval.; Definition at line 151 of file LogInterval.cxx. ◆ IsA(). virtual TClass * TMVA::LogInterval::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TMVA::Interval.; Definition at line 106 of file LogInterval.h. ◆ Log(). TMVA::MsgLogger & TMVA::LogInterval::Log ; (; ); const. Definition at line 165 of file LogInterval.cxx. ◆ SetMax(). void TMVA::LogInterval::SetMax ; (; Double_t ; m). inline . Definition at line 101 of file LogInterval.h. ◆ SetMin(). void TMVA::LogInterval::SetMin ; (; Double_t ; m). inline . Definition at line 102 of file LogInterval.h. ◆ Streamer(). virtual void TMVA::LogInterval::Streamer ; (; TBuffer & ; ). virtual . Reimplemented from TMVA::Interval. ◆ StreamerNVirtual(). void TMVA::LogInterval::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 10",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1LogInterval.html:5916,Log,LogInterval,5916,doc/master/classTMVA_1_1LogInterval.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1LogInterval.html,1,['Log'],['LogInterval']
Testability,"Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the upper tail of the gamma distribution (gamma_cdf_c). ;  ; double gamma_quantile (double z, double alpha, double theta);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the lower tail of the gamma distribution (gamma_cdf). ;  ; double gaussian_quantile_c (double z, double sigma);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the upper tail of the normal (Gaussian) distribution (gaussian_cdf_c). ;  ; double gaussian_quantile (double z, double sigma);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the lower tail of the normal (Gaussian) distribution (gaussian_cdf). ;  ; double lognormal_quantile_c (double x, double m, double s);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the upper tail of the lognormal distribution (lognormal_cdf_c). ;  ; double lognormal_quantile (double x, double m, double s);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the lower tail of the lognormal distribution (lognormal_cdf). ;  ; double normal_quantile_c (double z, double sigma);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the upper tail of the normal (Gaussian) distribution (normal_cdf_c). ;  ; double normal_quantile (double z, double sigma);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the lower tail of the normal (Gaussian) distribution (normal_cdf). ;  ; double uniform_quantile_c (double z, double a, double b);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the upper tail of the uniform (flat) distribution (uniform_cdf_c). ;  ; double uniform_quantile (double z, double a, double b);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the lower tail of the uniform (flat) distribution (uniform_cdf). ;  ; double landau_quantile (double z, double xi=1);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Math.html:108869,log,lognormal,108869,doc/master/namespaceROOT_1_1Math.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html,2,['log'],['lognormal']
Testability,"IsAverage enum valueTH1; kIsHighlight enum valueTH1; kIsNotW enum valueTH1; kIsOnHeap enum valueTObject; kIsReferenced enum valueTObject; kIsZoomed enum valueTH1; kLogX enum valueTH1; kMustCleanup enum valueTObject; kNeutral enum valueTH1; kNoAxis enum valueTH1; kNoContextMenu enum valueTObject; kNormal enum valueTH1; kNoStats enum valueTH1; kNotDeleted enum valueTObject; kNoTitle enum valueTH1; kNstat enum valueTH1; kObjInCanvas enum valueTObject; KolmogorovTest(const TH1 *h2, Option_t *option="""") const overrideTH2virtual; kOnlyPrepStep enum valueTObjectprotected; kOverwrite enum valueTObject; kPoisson enum valueTH1; kPoisson2 enum valueTH1; kSingleKey enum valueTObject; kUserContour enum valueTH1; kWriteDelete enum valueTObject; kXaxis enum valueTH1; kYaxis enum valueTH1; kZaxis enum valueTH1; kZombie enum valueTObject; LabelsDeflate(Option_t *axis=""X"")TH1virtual; LabelsInflate(Option_t *axis=""X"")TH1virtual; LabelsOption(Option_t *option=""h"", Option_t *axis=""X"")TH1virtual; LoggedInconsistency(const char *name, const TH1 *h1, const TH1 *h2, bool useMerge=false) constTH1protected; ls(Option_t *option="""") const overrideTNamedvirtual; MakeZombie()TObjectinlineprotected; MayNotUse(const char *method) constTObject; Merge(TCollection *list)TH1inlinevirtual; Merge(TCollection *list, Option_t *option)TH1; TAttLine::Modify()TAttLinevirtual; TAttFill::Modify()TAttFillvirtual; TAttMarker::Modify()TAttMarkervirtual; Multiply(TF1 *f1, Double_t c1=1)TH1virtual; Multiply(const TH1 *h1)TH1virtual; Multiply(const TH1 *h1, const TH1 *h2, Double_t c1=1, Double_t c2=1, Option_t *option="""")TH1virtual; Notify()TObjectvirtual; Obsolete(const char *method, const char *asOfVers, const char *removedFromVers) constTObject; operator delete(void *ptr)TObject; operator delete(void *ptr, void *vp)TObject; operator delete[](void *ptr)TObject; operator delete[](void *ptr, void *vp)TObject; operator new(size_t sz)TObjectinline; operator new(size_t sz, void *vp)TObjectinline; operator new[](size_t s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2-members.html:16528,Log,LoggedInconsistency,16528,doc/master/classTH2-members.html,https://root.cern,https://root.cern/doc/master/classTH2-members.html,2,['Log'],['LoggedInconsistency']
Testability,"IsAverage enum valueTH1; kIsHighlight enum valueTH1; kIsNotW enum valueTH1; kIsOnHeap enum valueTObject; kIsReferenced enum valueTObject; kIsZoomed enum valueTH1; kLogX enum valueTH1; kMustCleanup enum valueTObject; kNeutral enum valueTH1; kNoAxis enum valueTH1; kNoContextMenu enum valueTObject; kNormal enum valueTH1; kNoStats enum valueTH1; kNotDeleted enum valueTObject; kNoTitle enum valueTH1; kNstat enum valueTH1; kObjInCanvas enum valueTObject; KolmogorovTest(const TH1 *h2, Option_t *option="""") const overrideTH3virtual; kOnlyPrepStep enum valueTObjectprotected; kOverwrite enum valueTObject; kPoisson enum valueTH1; kPoisson2 enum valueTH1; kSingleKey enum valueTObject; kUserContour enum valueTH1; kWriteDelete enum valueTObject; kXaxis enum valueTH1; kYaxis enum valueTH1; kZaxis enum valueTH1; kZombie enum valueTObject; LabelsDeflate(Option_t *axis=""X"")TH1virtual; LabelsInflate(Option_t *axis=""X"")TH1virtual; LabelsOption(Option_t *option=""h"", Option_t *axis=""X"")TH1virtual; LoggedInconsistency(const char *name, const TH1 *h1, const TH1 *h2, bool useMerge=false) constTH1protected; ls(Option_t *option="""") const overrideTNamedvirtual; MakeZombie()TObjectinlineprotected; MayNotUse(const char *method) constTObject; Merge(TCollection *list)TH1inlinevirtual; Merge(TCollection *list, Option_t *option)TH1; TAttLine::Modify()TAttLinevirtual; TAttFill::Modify()TAttFillvirtual; TAttMarker::Modify()TAttMarkervirtual; Multiply(TF1 *f1, Double_t c1=1)TH1virtual; Multiply(const TH1 *h1)TH1virtual; Multiply(const TH1 *h1, const TH1 *h2, Double_t c1=1, Double_t c2=1, Option_t *option="""")TH1virtual; Notify()TObjectvirtual; Obsolete(const char *method, const char *asOfVers, const char *removedFromVers) constTObject; operator delete(void *ptr)TObject; operator delete(void *ptr, void *vp)TObject; operator delete[](void *ptr)TObject; operator delete[](void *ptr, void *vp)TObject; operator new(size_t sz)TObjectinline; operator new(size_t sz, void *vp)TObjectinline; operator new[](size_t s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH3-members.html:17953,Log,LoggedInconsistency,17953,doc/master/classTH3-members.html,https://root.cern,https://root.cern/doc/master/classTH3-members.html,2,['Log'],['LoggedInconsistency']
Testability,"IsFolder() const; virtual Bool_tisFundamental() const; virtual Bool_tRooAbsRealLValue::isJacobianOK(const RooArgSet& depList) const; virtual Bool_tRooAbsRealLValue::isLValue() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; virtual Bool_tRooAbsRealLValue::isValidReal(Double_t value, Bool_t printError = kFALSE) const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; virtual Double_tRooAbsRealLValue::jacobian() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooMoment*RooAbsReal::mean(RooRealVar& obs); RooMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); virtual Int_tRooAbsRealLValue::numBins(const char* rangeName = 0) const; virtual Int_tRoo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooErrorVar.html:20046,log,logEvalError,20046,root/html532/RooErrorVar.html,https://root.cern,https://root.cern/root/html532/RooErrorVar.html,2,['log'],['logEvalError']
Testability,"IsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TGDMLWrite ();  Default constructor. ;  ;  ~TGDMLWrite () override;  Destructor. ;  ; void SetG4Compatibility (Bool_t G4Compatible);  ; void SetIgnoreDummyMaterial (bool value);  Ignore dummy material instance, which causes trouble reading GDML in Geant4. ;  ; void SetNamingSpeed (ENamingType naming);  Set convention of naming solids and volumes. ;  ; void WriteGDMLfile (TGeoManager *geomanager, const char *filename=""test.gdml"", TString option="""");  ; void WriteGDMLfile (TGeoManager *geomanager, TGeoNode *top_node, const char *filename=""test.gdml"", TString option="""");  ; void WriteGDMLfile (TGeoManager *geomanager, TGeoVolume *top_vol, const char *filename=""test.gdml"", TString option="""");  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGDMLWrite.html:8204,test,test,8204,doc/master/classTGDMLWrite.html,https://root.cern,https://root.cern/doc/master/classTGDMLWrite.html,1,['test'],['test']
Testability,"IsOnHeap enum valueTObject; kIsReferenced enum valueTObject; kIsSortedX enum valueTGraph; kMustCleanup enum valueTObject; kNoContextMenu enum valueTObject; kNoStats enum valueTGraph; kNotDeleted enum valueTObject; kNotEditable enum valueTGraph; kObjInCanvas enum valueTObject; kOnlyPrepStep enum valueTObjectprotected; kOverwrite enum valueTObject; kResetHisto enum valueTGraph; kSingleKey enum valueTObject; kWriteDelete enum valueTObject; kZombie enum valueTObject; LeastSquareFit(Int_t m, Double_t *a, Double_t xmin=0, Double_t xmax=0)TGraphvirtual; LeastSquareLinearFit(Int_t n, Double_t &a0, Double_t &a1, Int_t &ifail, Double_t xmin=0, Double_t xmax=0)TGraphvirtual; ls(Option_t *option="""") const overrideTNamedvirtual; MakeZombie()TObjectinlineprotected; MayNotUse(const char *method) constTObject; Merge(TCollection *list)TGraphvirtual; TAttLine::Modify()TAttLinevirtual; TAttFill::Modify()TAttFillvirtual; TAttMarker::Modify()TAttMarkervirtual; MovePoints(Double_t dx, Double_t dy, Bool_t logx=kFALSE, Bool_t logy=kFALSE)TGraphvirtual; Notify()TObjectvirtual; Obsolete(const char *method, const char *asOfVers, const char *removedFromVers) constTObject; operator delete(void *ptr)TObject; operator delete(void *ptr, void *vp)TObject; operator delete[](void *ptr)TObject; operator delete[](void *ptr, void *vp)TObject; operator new(size_t sz)TObjectinline; operator new(size_t sz, void *vp)TObjectinline; operator new[](size_t sz)TObjectinline; operator new[](size_t sz, void *vp)TObjectinline; operator=(const TGraph &)TGraph; TNamed::operator=(const TNamed &rhs)TNamed; TObject::operator=(const TObject &rhs)TObjectinline; Paint(Option_t *chopt="""") overrideTGraphvirtual; PaintGraph(Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt)TGraph; PaintGrapHist(Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt)TGraph; PaintStats(TF1 *fit)TGraphvirtual; Pop()TObjectvirtual; Print(Option_t *chopt="""") const overrideTGraphBentErrorsvirtual; Read(const char *na",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphBentErrors-members.html:9856,log,logx,9856,doc/master/classTGraphBentErrors-members.html,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors-members.html,1,['log'],['logx']
Testability,"IsOnHeap enum valueTObject; kIsReferenced enum valueTObject; kIsSortedX enum valueTGraph; kMustCleanup enum valueTObject; kNoContextMenu enum valueTObject; kNoStats enum valueTGraph; kNotDeleted enum valueTObject; kNotEditable enum valueTGraph; kObjInCanvas enum valueTObject; kOnlyPrepStep enum valueTObjectprotected; kOverwrite enum valueTObject; kResetHisto enum valueTGraph; kSingleKey enum valueTObject; kWriteDelete enum valueTObject; kZombie enum valueTObject; LeastSquareFit(Int_t m, Double_t *a, Double_t xmin=0, Double_t xmax=0)TGraphvirtual; LeastSquareLinearFit(Int_t n, Double_t &a0, Double_t &a1, Int_t &ifail, Double_t xmin=0, Double_t xmax=0)TGraphvirtual; ls(Option_t *option="""") const overrideTNamedvirtual; MakeZombie()TObjectinlineprotected; MayNotUse(const char *method) constTObject; Merge(TCollection *list)TGraphvirtual; TAttLine::Modify()TAttLinevirtual; TAttFill::Modify()TAttFillvirtual; TAttMarker::Modify()TAttMarkervirtual; MovePoints(Double_t dx, Double_t dy, Bool_t logx=kFALSE, Bool_t logy=kFALSE)TGraphvirtual; Notify()TObjectvirtual; Obsolete(const char *method, const char *asOfVers, const char *removedFromVers) constTObject; operator delete(void *ptr)TObject; operator delete(void *ptr, void *vp)TObject; operator delete[](void *ptr)TObject; operator delete[](void *ptr, void *vp)TObject; operator new(size_t sz)TObjectinline; operator new(size_t sz, void *vp)TObjectinline; operator new[](size_t sz)TObjectinline; operator new[](size_t sz, void *vp)TObjectinline; operator=(const TGraph &)TGraph; TNamed::operator=(const TNamed &rhs)TNamed; TObject::operator=(const TObject &rhs)TObjectinline; Paint(Option_t *chopt="""") overrideTGraphvirtual; PaintGraph(Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt)TGraph; PaintGrapHist(Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt)TGraph; PaintStats(TF1 *fit)TGraphvirtual; Pop()TObjectvirtual; Print(Option_t *chopt="""") const overrideTGraphvirtual; Read(const char *name)TObject",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraph-members.html:8919,log,logx,8919,doc/master/classTGraph-members.html,https://root.cern,https://root.cern/doc/master/classTGraph-members.html,1,['log'],['logx']
Testability,"IsSameWithinTolerancestatic Bool_t IsSameWithinTolerance(Double_t a, Double_t b)Check if two numbers differ with less than a tolerance.Definition TGeoShape.cxx:338; TGeoShape::Safetyvirtual Double_t Safety(const Double_t *point, Bool_t in=kTRUE) const =0; TGeoShape::IsRunTimeShapeBool_t IsRunTimeShape() constDefinition TGeoShape.h:142; TGeoShape::Contains_vvirtual void Contains_v(const Double_t *, Bool_t *, Int_t) constDefinition TGeoShape.h:100; TGeoShape::ClearThreadDatavirtual void ClearThreadData() constDefinition TGeoShape.h:66; TGeoShape::GetPointerNameconst char * GetPointerName() constProvide a pointer name containing uid.Definition TGeoShape.cxx:746; TGeoShape::FillBuffer3Dvirtual void FillBuffer3D(TBuffer3D &buffer, Int_t reqSections, Bool_t localFrame) constFill the supplied buffer, with sections in desired frame See TBuffer3D.h for explanation of sections,...Definition TGeoShape.cxx:632; TGeoShape::IsCylTypevirtual Bool_t IsCylType() const =0; TGeoShape::CheckShapevoid CheckShape(Int_t testNo, Int_t nsamples=10000, Option_t *option="""")Test for shape navigation methods.Definition TGeoShape.cxx:211; TGeoShape::EpsMchstatic Double_t EpsMch()static function returning the machine round-off errorDefinition TGeoShape.cxx:242; TGeoShape::IsInPhiRangestatic Bool_t IsInPhiRange(const Double_t *point, Double_t phi1, Double_t phi2)Static method to check if a point is in the phi range (phi1, phi2) [degrees].Definition TGeoShape.cxx:290; TGeoShape::ComputeEpsMchstatic Double_t ComputeEpsMch()Compute machine round-off double precision error as the smallest number that if added to 1....Definition TGeoShape.cxx:225; TGeoShape::Paintvoid Paint(Option_t *option="""") overridePaint this shape.Definition TGeoShape.cxx:784; TGeoShape::~TGeoShape~TGeoShape() overrideDestructor.Definition TGeoShape.cxx:197; TGeoShape::fgTransformstatic TGeoMatrix * fgTransformDefinition TGeoShape.h:27; TGeoShape::GetBoundingCylindervirtual void GetBoundingCylinder(Double_t *param) const =0; TGeoSh",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoShape_8h_source.html:15695,test,testNo,15695,doc/master/TGeoShape_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoShape_8h_source.html,2,"['Test', 'test']","['Test', 'testNo']"
Testability,"IsSortable() const; Bool_tTObject::IsZombie() const; virtual Int_tLock(); virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMutexImp&operator=(const TMutexImp&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Int_tTryLock(); virtual Int_tUnLock(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMutexImp.html:4430,Test,TestBit,4430,root/html528/TMutexImp.html,https://root.cern,https://root.cern/root/html528/TMutexImp.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; Int_tMatrixElementCode(); voidTObject::MayNotUse(const char* method) const; Int_tNDaughters(); virtual Bool_tTObject::Notify(); Int_tNumber(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TDecayChannel&operator=(const TDecayChannel&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDecayChannel.html:4532,Test,TestBit,4532,root/html528/TDecayChannel.html,https://root.cern,https://root.cern/root/html528/TDecayChannel.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTGPicture::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); UInt_tTRefCnt::References() const; UInt_tTRefCnt::RemoveReference(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); voidTRefCnt::SetRefCount(UInt_t r); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGSelectedPicture.html:4899,Test,TestBit,4899,root/html528/TGSelectedPicture.html,https://root.cern,https://root.cern/root/html528/TGSelectedPicture.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooStats::AcceptanceRegion&operator=(const RooStats::AcceptanceRegion&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__AcceptanceRegion.html:4578,Test,TestBit,4578,root/html530/RooStats__AcceptanceRegion.html,https://root.cern,https://root.cern/root/html530/RooStats__AcceptanceRegion.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooThreshEntry&operator=(const RooThreshEntry&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Double_tthresh() const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooThreshEntry.html:4437,Test,TestBit,4437,root/html530/RooThreshEntry.html,https://root.cern,https://root.cern/root/html530/RooThreshEntry.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidRecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetObject(TObject* obj, Bool_t fixMustCleanupBit = kTRUE); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TObjectSpy.html:4683,Test,TestBit,4683,root/html534/TObjectSpy.html,https://root.cern,https://root.cern/root/html534/TObjectSpy.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TEveHit&operator=(const TEveHit&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TEveHit(); TEveHit(const TEveHit&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveHit.html:4233,Test,TestBit,4233,root/html602/TEveHit.html,https://root.cern,https://root.cern/root/html602/TEveHit.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"It describes a so called active rotation, i.e. rotation of objects inside; a static system of coordinates. In case you want to rotate the frame and; want to know the coordinates of objects in the rotated system, you should; apply the inverse rotation to the objects. If you want to transform coordinates; from the rotated frame to the original frame you have to apply the direct; transformation.; A rotation around a specified axis means counterclockwise rotation around; the positive direction of the axis.;  . Declaration, Access, Comparisons;   TRotation r;    // r initialized as identity;   TRotation m(r); // m = r; There is no direct way to to set the matrix elements - to ensure that; a TRotation object always describes a real rotation. But you can get the; values by the member functions XX()..ZZ() or the (,); operator:;   Double_t xx = r.XX();     //  the; same as xx=r(0,0);            xx; = r(0,0);;   if (r==m) {...}          // test for equality;   if (r!=m) {..}           // test for inequality;   if (r.IsIdentity()) {...} // test for identity;  . Rotation around axes; The following matrices desrcibe counterclockwise rotations around coordinate; axes;         | 1   0      ; 0    |; Rx(a) = | 0 cos(a) -sin(a) |;         | 0 sin(a) cos(a) ; |;         | cos(a)  0 sin(a); |; Ry(a) = |   0     1   ; 0   |;         | -sin(a) 0 cos(a) |;         | cos(a) -sin(a) 0 |; Rz(a) = | sin(a) cos(a) 0 |;         |   0     ; 0     1 |; and are implemented as member functions RotateX(), RotateY(); and RotateZ():;   r.RotateX(TMath::Pi()); // rotation around the x-axis. Rotation around arbitary axis; The member function Rotate() allows to rotate around an arbitary vector; (not neccessary a unit one) and returns the result.;   r.Rotate(TMath::Pi()/3,TVector3(3,4,5));; It is possible to find a unit vector and an angle, which describe the; same rotation as the current one:;   Double_t angle;;   TVector3 axis;;   r.GetAngleAxis(angle,axis);. Rotation of local axes; Member function Rot",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRotation.html:1899,test,test,1899,root/html528/TRotation.html,https://root.cern,https://root.cern/root/html528/TRotation.html,3,['test'],['test']
Testability,"It is not in the mandate of this package to provide a complete linear algebra functionality for these classes. What is provided are basic Matrix Template Functions and Vector Template Functions, such as the matrix-matrix, matrix-vector, vector-vector operations, plus some extra functionality for square matrices, like inversion, which is based on the optimized Cramer method for squared matrices of size up to 6x6, and determinant calculation. For a more detailed descriptions and usage examples see:. SVector Class Properties; SMatrix Class Properties; Matrix and Vector Operators and Functions. The SMatrix package contains only header files. Normally one does not need to build any library. In the ROOT distribution a library, libSmatrix is produced with the C++ dictionary information for vectors, symmetric and squared matrices for double, float types up to dimension 7. The current version of SMatrix can be downloaded from here. If you want to install the header files or run the test configure script and then make install or make check to build the tests. No dictionary library is built in this case. References. T. Veldhuizen, Expression Templates, C++ Report, 1995.; T. Glebe, SMatrix - A high performance library for Vector/Matrix calculation and Vertexing, HERA-B Software Note 01-134, December 2, 2003 (pdf); L. Moneta, ROOT Math proposal for Linear Algebra, presentation at the LCG Application Area meeting, November 23, 2005. Authorsthe ROOT Math Library Team, T. Glebe (original SMatrix author) and J. Palacios (LHCb) . Modules;  Expression Template Classes;  ;  Generic Template Functions;  These functions apply for any type T, such as a scalar, a vector or a matrix. ;  ;  Vector Template Functions;  These functions apply to SVector types (and also to Vector expressions) and can return a vector expression or a scalar, like in the Dot product, or a matrix, like in the Tensor product. ;  ;  Matrix Template Functions;  These function apply to matrices (and also Matrix expressio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__SMatrixGroup.html:2646,test,test,2646,doc/master/group__SMatrixGroup.html,https://root.cern,https://root.cern/doc/master/group__SMatrixGroup.html,2,['test'],"['test', 'tests']"
Testability,"Iter != rhs.fIter; }; 96 ; 97 void swap(TypedIter &other) { fIter.swap(other.fIter); }; 98 ; 99 // We want to know at compile time whether dynamic_cast or static_cast is; 100 // used. First of all to avoid overhead, but also to avoid a compiler; 101 // error when using dynamic_cast on a non-polymorphic class. In C++17,; 102 // this can be done easily with `if constexpr`, but for the older; 103 // standards we have to use a more verbose alternative. Both ways are; 104 // explicitely implemented for different standards, so that when the; 105 // minimum C++ standard for ROOT is raised to C++17 it's easy to remember; 106 // that we can avoid much boilerplate code in this file.; 107#if (__cplusplus < 201700L); 108 T operator*() { return ROOT::Internal::RCast<T, isDynamic>::cast(*fIter); }; 109#else; 110 T operator*(); 111 {; 112 if constexpr (isDynamic) {; 113 return dynamic_cast<T>(*fIter);; 114 } else {; 115 if constexpr (std::is_polymorphic<RBaseType<T>>::value) {; 116 assert(dynamic_cast<T>(*fIter));; 117 }; 118 return static_cast<T>(*fIter);; 119 }; 120 }; 121#endif; 122 ; 123private:; 124 WrappedIterator_t fIter;; 125};; 126 ; 127} // namespace Internal; 128 ; 129/// Wraps any collection that can be used in range-based loops and applies; 130/// `static_cast<T>` or `dynamic_cast<T>` to each element.; 131/// \tparam T The new type to convert to.; 132/// \tparam isDynamic If `true`, `dynamic_cast` is used, otherwise `static_cast` is used.; 133/// \tparam Range_t The type of the input range, which should be usually a reference type to avoid copying.; 134template <typename T, bool isDynamic, typename Range_t>; 135class RRangeCast {; 136 ; 137public:; 138 RRangeCast(Range_t &&inputRange) : fInputRange{inputRange}; 139 {; 140 static_assert(ROOT::Internal::hasBeginEnd<Range_t>(0),; 141 ""Type with no `begin` or `end` method passed to `RRangeCast`"");; 142 }; 143 ; 144 using const_iterator = Internal::TypedIter<T, decltype(std::cbegin(std::declval<Range_t>())), isDynamic>;; 14",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RRangeCast_8hxx_source.html:3545,assert,assert,3545,doc/master/RRangeCast_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RRangeCast_8hxx_source.html,2,['assert'],['assert']
Testability,"Iterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsArg*createFundamental(const char* newname = 0) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::Exe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsString.html:3111,test,testArg,3111,root/html532/RooAbsString.html,https://root.cern,https://root.cern/root/html532/RooAbsString.html,1,['test'],['testArg']
Testability,"Jenkins has a specific 'tab' for the defined project jobs. The ROOT tab contains all the defined jobs for ROOT. They are organized as follow:. nightly builds: The jobs are named root-nightly-<version> and they are implemented as multi-configuration project. They are run once a day (around after midnight CET) but they can be started by hand at any time of the day (see later) and select for what configurations to run.; incremental builds: The jobs are named root-incremental-<version> and they are implemented as multi-configuration project. They are run as soon new commits appear in the ROOT git repository and the builds are incremental by default. A full re-build can be triggered by checking the option EMPTY_BINARY.; documentation generation. The jobs are named root-makedoc-<version>. They are started automatically once a day during the day.; testing installations. The job is named root-install and builds ROOT for a number of platforms, produces the installation tar-file or installation kit, installs it in a different place nd runs the tests against the installation (needed to delete the build and source area).; building releases. The job is named root-release-<version> and is multi-configuration job. It builds ROOT for a given 'tagged' version using the source distribution tar-file and produces binaries for a number of configurations, which are installed automatically in the download ROOT server.; other procedures. cling-periodic; cling-clone-repo; cling-repo-sync; root-test; root-staticAnalysis-master. Basic operations; Understanding information for a single build; The Status shows a summary for the build. In case of multi-configuration jobs it it also show the configuration matrix that can be used to select a contrete configuration. See the following figure: ; For each individual build (select one cell in the matrix) the following information is provided:. Status. Shows a summary of the build (changes, errors, warnings, git revision, test results, etc.); Changes. Sh",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/how-use-root-jenkins.html:3641,test,tests,3641,d/how-use-root-jenkins.html,https://root.cern,https://root.cern/d/how-use-root-jenkins.html,1,['test'],['tests']
Testability,"Kernel::EKernelType ktype, TMVA::KDEKernel::EKernelIter kiter, TMVA::KDEKernel::EKernelBorder kborder, Float_t FineFactor, Bool_t norm = kTRUE); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; voidTMVA::Configurable::PrintOptions() const; voidProcessOptions(); virtual Int_tTObject::Read(const char* name); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); voidReadXML(void* pdfnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidSetReadingVersion(UInt_t rv); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); voidValidatePDF(TH1* original = 0) const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__PDF.html:6424,Test,TestBit,6424,root/html602/TMVA__PDF.html,https://root.cern,https://root.cern/root/html602/TMVA__PDF.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"KernelMatrix() [1/2]. TMVA::SVKernelMatrix::SVKernelMatrix ; (; ). constructor ; Definition at line 53 of file SVKernelMatrix.cxx. ◆ SVKernelMatrix() [2/2]. TMVA::SVKernelMatrix::SVKernelMatrix ; (; std::vector< TMVA::SVEvent * > * ; inputVectors, . SVKernelFunction * ; kernelFunction . ). constructor ; Definition at line 64 of file SVKernelMatrix.cxx. ◆ ~SVKernelMatrix(). TMVA::SVKernelMatrix::~SVKernelMatrix ; (; ). destructor ; Definition at line 87 of file SVKernelMatrix.cxx. Member Function Documentation. ◆ GetColumn(). Float_t * TMVA::SVKernelMatrix::GetColumn ; (; UInt_t ; col). inline . Definition at line 54 of file SVKernelMatrix.h. ◆ GetElement(). Float_t TMVA::SVKernelMatrix::GetElement ; (; UInt_t ; i, . UInt_t ; j . ). returns an element of the kernel matrix ; Definition at line 119 of file SVKernelMatrix.cxx. ◆ GetLine(). Float_t * TMVA::SVKernelMatrix::GetLine ; (; UInt_t ; line). returns a row of the kernel matrix ; Definition at line 100 of file SVKernelMatrix.cxx. ◆ Log(). MsgLogger & TMVA::SVKernelMatrix::Log ; (; ); const. inlineprivate . Definition at line 64 of file SVKernelMatrix.h. Member Data Documentation. ◆ fKernelFunction. SVKernelFunction* TMVA::SVKernelMatrix::fKernelFunction. private . kernel function ; Definition at line 60 of file SVKernelMatrix.h. ◆ fLogger. MsgLogger* TMVA::SVKernelMatrix::fLogger. mutableprivate . ! message logger ; Definition at line 63 of file SVKernelMatrix.h. ◆ fSize. UInt_t TMVA::SVKernelMatrix::fSize. private . matrix size ; Definition at line 59 of file SVKernelMatrix.h. ◆ fSVKernelMatrix. Float_t** TMVA::SVKernelMatrix::fSVKernelMatrix. private . kernel matrix ; Definition at line 61 of file SVKernelMatrix.h. Libraries for TMVA::SVKernelMatrix:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/SVKernelMatrix.h; tmva/tmva/src/SVKernelMatrix.cxx. TMVASVKernelMatrix. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:43 (GVA Time) using Doxygen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1SVKernelMatrix.html:2103,Log,Log,2103,doc/master/classTMVA_1_1SVKernelMatrix.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1SVKernelMatrix.html,1,['Log'],['Log']
Testability,"KernelType (EKernelType ktype=kGauss);  fIter == 1 —> nonadaptive KDE fIter == 2 —> adaptive KDE ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Member Functions; MsgLogger & Log () const;  . Private Attributes; Float_t fFineFactor;  fine tuning factor for Adaptive KDE: factor to multiply the ""width"" of the Kernel function ;  ; TH1F * fFirstIterHist;  histogram to be filled in the hidden iteration ;  ; Bool_t fHiddenIteration;  Defines if whats currently running is the. ;  ; TH1F * fHist;  copy of input histogram ;  ; EKernelIter fIter;  iteration number ;  ; EKernelBorder fKDEborder;  The method to take care about ""border"" effects. ;  ; TF1 * fKernel_integ;  the integral of the Kernel function ;  ; MsgLogger * fLogger;  ! message logger ;  ; Float_t fLowerEdge;  the lower edge of the PDF ;  ; Float_t fSigma;  Width of the Kernel function. ;  ; TH1F * fSigmaHist;  contains the Sigmas Widths for adaptive KDE ;  ; Float_t fUpperEdge;  the upper edge of the PDF ;  . #include <TMVA/KDEKernel.h>; Member Enumeration Documentation. ◆ EKernelBorder. enum TMVA::KDEKernel::EKernelBorder. EnumeratorkNoTreatment ; kKernelRenorm ; kSampleMirror . Definition at line 56 of file KDEKernel.h. ◆ EKernelIter. enum TMVA::KDEKernel::EKernelIter. EnumeratorkNonadaptiveKDE ; kAdaptiveKDE . Definition at line 55 of file KDEKernel.h. ◆ EKernelType. enum TMVA::KDEKernel::EKernelType. EnumeratorkNone ; kGauss . Definition at line 54 of file KDEKernel.h. Constructor & Destructor Documentation. ◆ KDEKernel(). TMVA::KDEKernel::KDEKernel ; (; EKernelIter ; kiter = kNonadaptiveKDE, . const TH1 * ; hist = nullptr, . Float_t ; lower_edge = 0., . Float_t ; upper_edge = 1., . EKernelBorder ; kborder = kNoTreatment, . Float_t ; FineFactor = 1. . ). cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1KDEKernel.html:2117,log,logger,2117,doc/master/classTMVA_1_1KDEKernel.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1KDEKernel.html,1,['log'],['logger']
Testability,"Key; kOverwrite; kWriteDelete; };. protected:. TSignalHandler*TProofMgr::fIntHandlerInterrupt signal handler (ctrl-c); TStringTProofMgr::fMssUrlURL for the remote data pool, if any; TStringTNamed::fNameobject identifier; Int_tTProofMgr::fRemoteProtocolProtocol number run by the daemon server; TProofMgr::EServTypeTProofMgr::fServTypeType of server: old-proofd, XrdProofd; TList*TProofMgr::fSessionsPROOF session managed by this server; TStringTNamed::fTitleobject title; TUrlTProofMgr::fUrlServer URL; static TListTProofMgr::fgListOfManagersSub-list of TROOT::ListOfProofs for managers. private:. TXSocket*fSocketConnection to XRD. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TXProofMgr(const char* url, Int_t loglevel = -1, const char* alias = """"); Create a PROOF manager for the standard (old) environment. Int_t Init(Int_t loglevel = -1); Do real initialization: open the connection and set the relevant; variables.; Login and authentication are dealt with at this level, if required.; Return 0 in case of success, 1 if the remote server is a 'proofd',; -1 in case of error. ~TXProofMgr(); Destructor: close the connection. void SetInvalid(); Invalidate this manager by closing the connection. TProof * AttachSession(TProofDesc* d, Bool_t gui = kFALSE); Dummy version provided for completeness. Just returns a pointer to; existing session 'id' (as shown by TProof::QuerySessions) or 0 if 'id' is; not valid. The boolena 'gui' should be kTRUE when invoked from the GUI. void DetachSession(Int_t , Option_t* = """"); Detach session with 'id' from its proofserv. The 'id' is the number; shown by QuerySessions. The correspondent TProof object is deleted.; If id == 0 all the known sessions are detached.; Option opt=""S"" or ""s"" forces session shutdown. void DetachSession(TProof* , Option_t* = """"); Detach session 'p' from its proofserv. The instance 'p' is invalidated; and should be deleted by the caller. Bool_t MatchUrl(const char* url); Checks if 'url",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TXProofMgr.html:9943,Log,Login,9943,root/html534/TXProofMgr.html,https://root.cern,https://root.cern/root/html534/TXProofMgr.html,1,['Log'],['Login']
Testability,"L ; virtual Bool_tNotify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TObject&TObject::operator=(const TObject& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidRemove(); virtual voidRemoved()SIGNAL ; voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TSysEvtHandler.html:7434,Test,TestBit,7434,root/html530/TSysEvtHandler.html,https://root.cern,https://root.cern/root/html530/TSysEvtHandler.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"L << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  MethodBase (const TString &jobName, Types::EMVA methodType, const TString &methodTitle, DataSetInfo &dsi, const TString &theOption="""");  standard constructor ;  ;  MethodBase (Types::EMVA methodType, DataSetInfo &dsi, const TString &weightFile);  constructor used for Testing + Application of the MVA, only (no training), using given WeightFiles ;  ; virtual ~MethodBase ();  destructor ;  ; void AddOutput (Types::ETreeType type, Types::EAnalysisType analysisType);  ; TDirectory * BaseDir () const;  returns the ROOT directory where info/histograms etc of the corresponding MVA method instance are stored ;  ; virtual void CheckSetup ();  check may be overridden by derived class (sometimes, eg, fitters are used which can only be implemented during training phase) ;  ; virtual const Ranking * CreateRanking ()=0;  ; DataSet * Data () const;  ; DataSetInfo & DataInfo () const;  ; virtual void DeclareCompatibilityOptions ();  options that are used ONLY for the READER to ensure backward compatibility they are hence without any effect (the reader is only reading the training options that HAD been used at the training of the .xml weight file at hand ;  ; virtual void DeclareOptions ()=0;  ; void DisableWriting (Bool_t setter);  ; Bool_t DoMulticlass () const;  ; Bool_t DoRegression () const;  ; void ExitFromTraining ();  ; Types::EAnalysisType GetAnalysisType () const;  ; UInt_t GetCurrentIter ();  ; virtual Double_t GetEfficiency (const TString &, Types::ETreeType, Double_t &err);  fill background efficiency (resp. ;  ; const Event * GetE",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodBase.html:3069,Test,Testing,3069,doc/master/classTMVA_1_1MethodBase.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html,1,['Test'],['Testing']
Testability,"L NETWORK: Depth = 4 Input = ( 1, 1, 300 ) Batch size = 256 Loss function = C; Layer 0 DENSE Layer: ( Input = 300 , Width = 64 ) Output = ( 1 , 256 , 64 ) Activation Function = Tanh; Layer 1 DENSE Layer: ( Input = 64 , Width = 64 ) Output = ( 1 , 256 , 64 ) Activation Function = Tanh; Layer 2 DENSE Layer: ( Input = 64 , Width = 64 ) Output = ( 1 , 256 , 64 ) Activation Function = Tanh; Layer 3 DENSE Layer: ( Input = 64 , Width = 1 ) Output = ( 1 , 256 , 1 ) Activation Function = Identity; : Using 2560 events for training and 640 for testing; : Compute initial loss on the validation data ; : Training phase 1 of 1: Optimizer ADAM (beta1=0.9,beta2=0.999,eps=1e-07) Learning rate = 0.001 regularization 0 minimum error = 0.7616; : --------------------------------------------------------------; : Epoch | Train Err. Val. Err. t(s)/epoch t(s)/Loss nEvents/s Conv. Steps; : --------------------------------------------------------------; : Start epoch iteration ...; : 1 Minimum Test error found - save the configuration ; : 1 | 0.731202 0.712689 0.193045 0.0157486 14439.1 0; : 2 Minimum Test error found - save the configuration ; : 2 | 0.701214 0.698536 0.191577 0.0154545 14535.3 0; : 3 Minimum Test error found - save the configuration ; : 3 | 0.6901 0.69615 0.192163 0.0158037 14515.8 0; : 4 | 0.683586 0.700826 0.19294 0.0151654 14400.2 1; : 5 | 0.682085 0.701998 0.192893 0.0153949 14422.7 2; : 6 | 0.6867 0.696275 0.191869 0.0152227 14492.2 3; : 7 Minimum Test error found - save the configuration ; : 7 | 0.692231 0.691692 0.197632 0.0164904 14132.6 0; : 8 | 0.683383 0.694963 0.194299 0.0156318 14328.3 1; : 9 Minimum Test error found - save the configuration ; : 9 | 0.682898 0.684979 0.192122 0.0157399 14513.9 0; : 10 | 0.670592 0.688549 0.192796 0.0152906 14422.1 1; : 11 Minimum Test error found - save the configuration ; : 11 | 0.670202 0.684295 0.191832 0.0154715 14515.7 0; : 12 Minimum Test error found - save the configuration ; : 12 | 0.675447 0.682107 0.194058 0.0158608 143",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html:19045,Test,Test,19045,doc/master/TMVA__RNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html,1,['Test'],['Test']
Testability,"LE GETTER ; voidSetCurrentLimits(Double_t min, Double_t max)MENU ; voidSetCurrentMax(Double_t max); voidSetCurrentMin(Double_t min); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillColorAlpha(Color_t fcolor, Float_t falpha); virtual voidTAttFill::SetFillStyle(Style_t fstyle); voidSetHistogramBinning(Int_t n = 100)MENU ; voidSetHistogramHeight(Double_t h = 0)MENU ; voidSetHistogramLineWidth(Int_t lw = 2)MENU ; voidSetInitMax(Double_t max); voidSetInitMin(Double_t min); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); voidSetLiveRangesUpdate(Bool_t on); voidSetLogScale(Bool_t log)TOGGLE GETTER ; virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetTitle(const char*); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetValues(Long64_t length, Double_t* val); voidSetX(Double_t x, Bool_t gl); voidSetY(Double_t y, Bool_t gl); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TParallelCoordVar(); TParallelCoordVar(const TParallelCoordVar&); TParallelCoordVar(Double_t* val, const char* title, Int_t id, TParallelCoord* gram); voidUnzoom()MENU ; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfm",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TParallelCoordVar.html:7210,log,log,7210,root/html602/TParallelCoordVar.html,https://root.cern,https://root.cern/root/html602/TParallelCoordVar.html,2,['log'],['log']
Testability,"LE GETTER ; voidSetCurrentLimits(Double_t min, Double_t max)MENU ; voidSetCurrentMax(Double_t max); voidSetCurrentMin(Double_t min); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillColorAlpha(Color_t fcolor, Float_t falpha); virtual voidTAttFill::SetFillStyle(Style_t fstyle); voidSetHistogramBinning(Int_t n = 100)MENU ; voidSetHistogramHeight(Double_t h = 0)MENU ; voidSetHistogramLineWidth(Int_t lw = 2)MENU ; voidSetInitMax(Double_t max); voidSetInitMin(Double_t min); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); voidSetLiveRangesUpdate(Bool_t on); voidSetLogScale(Bool_t log)TOGGLE GETTER ; virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetTitle(const char*); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetValues(Long64_t length, Double_t* val); voidSetX(Double_t x, Bool_t gl); voidSetY(Double_t y, Bool_t gl); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidUnzoom()MENU ; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TParallelCoordVar.html:7389,log,log,7389,root/html534/TParallelCoordVar.html,https://root.cern,https://root.cern/root/html534/TParallelCoordVar.html,1,['log'],['log']
Testability,"LL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  . Public Member Functions;  RooChi2Var (const char *name, const char *title, RooAbsReal &func, RooDataHist &data, bool extended, RooDataHist::ErrorType etype, RooAbsTestStatistic::Configuration const &cfg=RooAbsTestStatistic::Configuration{});  ;  RooChi2Var (const RooChi2Var &other, const char *name=nullptr);  Copy constructor. ;  ; TObject * clone (const char *newname) const override;  ; RooAbsTestStatistic * create (const char *name, const char *title, RooAbsReal &pdf, RooAbsData &dhist, const RooArgSet &projDeps, RooAbsTestStatistic::Configuration const &cfg) override;  ; double defaultErrorLevel () const override;  ;  Public Member Functions inherited from RooAbsOptTestStatistic;  RooAbsOptTestStatistic (const char *name, const char *title, RooAbsReal &real, RooAbsData &data, const RooArgSet &projDeps, RooAbsTestStatistic::Configuration const &cfg);  Create a test statistic, and optimise its calculation. ;  ;  RooAbsOptTestStatistic (const RooAbsOptTestStatistic &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsOptTestStatistic () override;  Destructor. ;  ; const char * cacheUniqueSuffix () const override;  Returns a suffix string that is unique for RooAbsOptTestStatistic instances that don't share the same cloned input data object. ;  ; double combinedValue (RooAbsReal **gofArray, Int_t nVal) const override;  Method to combined test statistic results calculated into partitions into the global result. ;  ; RooAbsData & data ();  ; const RooAbsData & data () const;  ; RooAbsReal & function ();  ; const RooAbsReal & function () const;  ; bool isDerived () const override;  Does v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooChi2Var.html:4992,test,test,4992,doc/master/classRooChi2Var.html,https://root.cern,https://root.cern/doc/master/classRooChi2Var.html,1,['test'],['test']
Testability,LMultiRootSolver.h;  GSLNLSMinimizer.cxx;  GSLQRngWrapper.h;  GSLQuasiRandom.cxx;  GSLRndmEngines.cxx;  GSLRngWrapper.h;  GSLRootFdFSolver.h;  GSLRootFinder.cxx;  GSLRootFinderDeriv.cxx;  GSLRootFSolver.h;  GSLRootHelper.cxx;  GSLSimAnMinimizer.cxx;  GSLSimAnnealing.cxx;  Interpolator.cxx;  KelvinFunctions.cxx;  MCParameters.cxx;  MultiNumGradFunction.cxx;  PdfFuncMathMore.cxx;  Polynomial.cxx;  QuantFuncMathMore.cxx;  RootFinderAlgorithms.cxx;  SpecFuncMathMore.cxx;  Vavilov.cxx;  VavilovAccurate.cxx;  VavilovAccurateCdf.cxx;  VavilovAccuratePdf.cxx;  VavilovAccurateQuantile.cxx;  VavilovFast.cxx;  zsolve_cubic.cxx;  ► test;  piRandom.C;  pirndm.C;  simanTSP.cxx;  testChebyshev.cxx;  testDerivation.cxx;  testFunctor.cxx;  testGSLIntegration.cxx;  testGSLRootFinder.cxx;  testInterpolation.cxx;  testMCIntegration.cxx;  testMinimization1D.cxx;  testMultiRootFinder.cxx;  testPermute.cxx;  testQuasiRandom.cxx;  testRandom.cxx;  testRandomDist.cxx;  testSpecFunc.cxx;  testStatFunc.cxx;  testVavilov.cxx;  UnuRanDist.h;  VavilovTest.cxx;  VavilovTest.h;  ► matrix;  ► inc;  LinkDef.h;  TDecompBase.h;  TDecompBK.h;  TDecompChol.h;  TDecompLU.h;  TDecompQRH.h;  TDecompSparse.h;  TDecompSVD.h;  TMatrix.h;  TMatrixD.h;  TMatrixDBase.h;  TMatrixDBasefwd.h;  TMatrixDEigen.h;  TMatrixDfwd.h;  TMatrixDLazy.h;  TMatrixDSparse.h;  TMatrixDSparsefwd.h;  TMatrixDSym.h;  TMatrixDSymEigen.h;  TMatrixDSymfwd.h;  TMatrixDUtils.h;  TMatrixDUtilsfwd.h;  TMatrixF.h;  TMatrixFBase.h;  TMatrixFBasefwd.h;  TMatrixFfwd.h;  TMatrixFLazy.h;  TMatrixFSparse.h;  TMatrixFSparsefwd.h;  TMatrixFSym.h;  TMatrixFSymfwd.h;  TMatrixFUtils.h;  TMatrixFUtilsfwd.h;  TMatrixT.h;  TMatrixTBase.h;  TMatrixTCramerInv.h;  TMatrixTLazy.h;  TMatrixTSparse.h;  TMatrixTSym.h;  TMatrixTSymCramerInv.h;  TMatrixTUtils.h;  TVector.h;  TVectorD.h;  TVectorDfwd.h;  TVectorF.h;  TVectorFfwd.h;  TVectorfwd.h;  TVectorT.h;  ► src;  TDecompBase.cxx;  TDecompBK.cxx;  TDecompChol.cxx;  TDecompLU.cxx;  TDecompQRH.cxx;  TDecompSpars,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html606/files.html:49103,test,testVavilov,49103,root/html606/files.html,https://root.cern,https://root.cern/root/html606/files.html,1,['test'],['testVavilov']
Testability,LSAFrame.cxx;  TGLSAViewer.cxx;  TGLScaleManip.cxx;  TGLScene.cxx;  TGLSceneBase.cxx;  TGLSceneInfo.cxx;  TGLScenePad.cxx;  TGLSelectBuffer.cxx;  TGLSelectRecord.cxx;  TGLSphere.cxx;  TGLStopwatch.cxx;  TGLSurfacePainter.cxx;  TGLText.cxx;  TGLTF3Painter.cxx;  TGLTH3Composition.cxx;  TGLTransManip.cxx;  TGLUtil.cxx;  TGLViewer.cxx;  TGLViewerBase.cxx;  TGLViewerEditor.cxx;  TGLVoxelPainter.cxx;  TGLWidget.cxx;  TH2GL.cxx;  TH3GL.cxx;  TKDEAdapter.cxx;  TKDEFGT.cxx;  TPointSet3DGL.cxx;  TX11GL.cxx;  ► gviz3d;  ► inc;  LinkDef.h;  TStructNode.h;  TStructNodeEditor.h;  TStructNodeProperty.h;  TStructViewer.h;  TStructViewerGUI.h;  ► src;  TStructNode.cxx;  TStructNodeEditor.cxx;  TStructNodeProperty.cxx;  TStructViewer.cxx;  TStructViewerGUI.cxx;  ► gui;  ► fitpanel;  ► inc;  LinkDef.h;  TAdvancedGraphicsDialog.h;  TFitEditor.h;  TFitParametersDialog.h;  TTreeInput.h;  ► src;  CommonDefs.h;  TAdvancedGraphicsDialog.cxx;  TFitEditor.cxx;  TFitParametersDialog.cxx;  TTreeInput.cxx;  ► test;  UnitTesting.cxx;  ► ged;  ► inc;  HelpSMText.h;  LinkDef.h;  TArrowEditor.h;  TAttFillEditor.h;  TAttLineEditor.h;  TAttMarkerEditor.h;  TAttTextEditor.h;  TAxisEditor.h;  TCurlyArcEditor.h;  TCurlyLineEditor.h;  TF1Editor.h;  TFrameEditor.h;  TFunctionParametersDialog.h;  TGedEditor.h;  TGedFrame.h;  TGedMarkerSelect.h;  TGedPatternSelect.h;  TGraphEditor.h;  TH1Editor.h;  TH2Editor.h;  TLineEditor.h;  TPadEditor.h;  TPaveStatsEditor.h;  TPieEditor.h;  TPieSliceEditor.h;  TStyleDialog.h;  TStyleManager.h;  TStylePreview.h;  TTextEditor.h;  ► src;  HelpSMText.cxx;  TArrowEditor.cxx;  TAttFillEditor.cxx;  TAttLineEditor.cxx;  TAttMarkerEditor.cxx;  TAttTextEditor.cxx;  TAxisEditor.cxx;  TCurlyArcEditor.cxx;  TCurlyLineEditor.cxx;  TF1Editor.cxx;  TFrameEditor.cxx;  TFunctionParametersDialog.cxx;  TGedEditor.cxx;  TGedFrame.cxx;  TGedMarkerSelect.cxx;  TGedPatternSelect.cxx;  TGraphEditor.cxx;  TH1Editor.cxx;  TH2Editor.cxx;  TLineEditor.cxx;  TPadEditor.cxx;  TPaveStatsEditor.cxx;  TPi,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:27419,test,test,27419,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,2,['test'],['test']
Testability,"LSE); virtual voidRooAbsCollection::removeAll(); Bool_tRooAbsCollection::replace(const RooAbsCollection& other); virtual Bool_tRooAbsCollection::replace(const RooAbsArg& var1, const RooAbsArg& var2); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); RooAbsCollection*RooAbsCollection::selectByAttrib(const char* name, Bool_t value) const; RooAbsCollection*RooAbsCollection::selectByName(const char* nameList, Bool_t verbose = kFALSE) const; RooAbsCollection*RooAbsCollection::selectCommon(const RooAbsCollection& refColl) const; voidRooAbsCollection::setAttribAll(const Text_t* name, Bool_t value = kTRUE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidRooAbsCollection::setHashTableSize(Int_t i); voidRooAbsCollection::setName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp, char* parent); RooAbsCollection*RooAbsCollection::snapshot(Bool_t deepCopy = kTRUE) const; Bool_tRooAbsCollection::snapshot(RooAbsCollection& output, Bool_t deepCopy = kTRUE) const; voidsort(Bool_t reverse = kFALSE); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidwriteToStream(ostream& os, Bool_t compact).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooArgList.html:11016,Test,TestBit,11016,root/html526/RooArgList.html,https://root.cern,https://root.cern/root/html526/RooArgList.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"LSE); voidRooAbsArg::setTransientAttribute(const Text_t* name, Bool_t value = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); voidRooAbsReal::setUnit(const char* unit); voidsetUnitNorm(Bool_t flag); voidRooAbsArg::setValueDirty() const; TIterator*RooAbsArg::shapeClientIterator() const; virtual voidShowMembers(TMemberInspector& insp); RooMoment*RooAbsReal::sigma(RooRealVar& obs); RooMoment*RooAbsReal::sigma(RooRealVar& obs, const RooArgSet& nset); virtual Int_tTNamed::Sizeof() const; RooNumGenConfig*RooAbsPdf::specialGeneratorConfig() const; RooNumGenConfig*RooAbsPdf::specialGeneratorConfig(Bool_t createOnTheFly); RooNumIntConfig*RooAbsReal::specialIntegratorConfig() const; RooNumIntConfig*RooAbsReal::specialIntegratorConfig(Bool_t createOnTheFly); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); const map<std::string,std::string>&RooAbsArg::stringAttributes() const; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tRooAbsPdf::traceEvalHook(Double_t value) const; Bool_tRooAbsPdf::traceEvalPdf(Double_t value) const; const set<std::string>&RooAbsArg::transientAttributes() const; voidRooAbsArg::treeNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t doBranch = kTRUE, Bool_t doLeaf = kTRUE, Bool_t valueOnly = kFALSE, Bool_t recurseNonDerived = kFALSE) const; voidRooAbsArg::unRegisterCache(RooAbsCache& cache); virtual voidTObject::UseCurrentStyle(); TIterator*RooAbsArg::valueClientIterator() const; static voidRooAbsArg::verboseDirty(Bool_t flag); static intRooAbsPdf::verboseEval(); static voidRooAbsPdf::verboseEval(Int_t stat); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidRooAbsReal::writ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooHistPdf.html:29475,Test,TestBit,29475,root/html528/RooHistPdf.html,https://root.cern,https://root.cern/root/html528/RooHistPdf.html,2,['Test'],['TestBit']
Testability,"LSE)Load a shared library.Definition TSystem.cxx:1857; ; ; #include ""Riostream.h""; #include ""TFile.h""; #include ""TFoam.h""; #include ""TH1.h""; #include ""TMath.h""; #include ""TFoamIntegrand.h""; #include ""TRandom3.h""; ; class TFDISTR: public TFoamIntegrand {; public:; TFDISTR(){};; Double_t Density(int nDim, Double_t *Xarg){; // Integrand for mFOAM; Double_t Fun1,Fun2,R1,R2;; Double_t pos1=1e0/3e0;; Double_t pos2=2e0/3e0;; Double_t Gam1= 0.100e0; // as in JPC; Double_t Gam2= 0.100e0; // as in JPC; Double_t sPi = sqrt(TMath::Pi());; Double_t xn1=1e0;; Double_t xn2=1e0;; int i;; R1=0;; R2=0;; for(i = 0 ; i<nDim ; i++){; R1=R1+(Xarg[i] -pos1)*(Xarg[i] -pos1);; R2=R2+(Xarg[i] -pos2)*(Xarg[i] -pos2);; xn1=xn1*Gam1*sPi;; xn2=xn2*Gam2*sPi;; }; R1 = sqrt(R1);; R2 = sqrt(R2);; Fun1 = exp(-(R1*R1)/(Gam1*Gam1))/xn1; // Gaussian delta-like profile; Fun2 = exp(-(R2*R2)/(Gam2*Gam2))/xn2; // Gaussian delta-like profile; return 0.5e0*(Fun1+ Fun2);; }; ClassDef(TFDISTR,1) //Class of testing functions for FOAM; };; ClassImp(TFDISTR); ; Int_t foam_demo(); {; TFile RootFile(""foam_demo.root"",""RECREATE"",""histograms"");; long loop;; Double_t MCresult,MCerror,MCwt;; //-----------------------------------------; long NevTot = 50000; // Total MC statistics; Int_t kDim = 2; // total dimension; Int_t nCells = 500; // Number of Cells; Int_t nSampl = 200; // Number of MC events per cell in build-up; Int_t nBin = 8; // Number of bins in build-up; Int_t OptRej = 1; // Wted events for OptRej=0; wt=1 for OptRej=1 (default); Int_t OptDrive = 2; // (D=2) Option, type of Drive =0,1,2 for TrueVol,Sigma,WtMax; Int_t EvPerBin = 25; // Maximum events (equiv.) per bin in buid-up; Int_t Chat = 1; // Chat level; //-----------------------------------------; TRandom *PseRan = new TRandom3(); // Create random number generator; TFoam *FoamX = new TFoam(""FoamX""); // Create Simulator; TFoamIntegrand *rho= new TFDISTR();; PseRan->SetSeed(4357);; //-----------------------------------------; cout<<""***** Demonstration Progra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/foam__demo_8C.html:1475,test,testing,1475,doc/master/foam__demo_8C.html,https://root.cern,https://root.cern/doc/master/foam__demo_8C.html,1,['test'],['testing']
Testability,"LScene; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Bool_t IsOutside (const TGLBoundingBox &box, const TGLPlaneSet_t &planes);  Check if box is outside of all planes. ;  ; static void RGBAFromColorIdx (Float_t rgba[4], Color_t ci, Char_t transp=0);  Fill rgba color from ROOT color-index ci and transparency (0->100). ;  ;  Static Public Member Functions inherited from TGLSceneBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGLLockable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static const char * LockName (ELock lock);  Return name-string for given lock-type. ;  ; static Bool_t LockValid (ELock lock);  Test if lock is a valid type to take/release. ;  . Protected Types; typedef std::pair< UInt_t, RootCsg::TBaseMesh * > CSPart_t;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Types inherited from TGLSceneBase; typedef std::list< TGLViewerBase * >::iterator ViewerList_i;  ; typedef std::list< TGLViewerBase * > ViewerList_t;  . Protected Member Functions; TGLLogicalShape * AttemptDirectRenderer (TObject *id);  Try to construct an appropriate logical-shape sub-class based on id'class, following convention that SomeClassGL is a suitable renderer for class SomeClass. ;  ; RootCsg::TBaseMesh * BuildComposite ();  Build and return composite shape mesh. ;  ; void ComposePolymarker (const TList *padPrimitives);  ; TGLLogicalShape * CreateNewLogical (const TBuffer3D &buffer) const;  Create and return a new TGLLogicalShape from the supplied buffer. ;  ; TGLPhysicalShape * CreateNewPhysical (UInt_t physicalID, const TBuffer3D &buffer, const TG",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLScenePad.html:19793,Test,Test,19793,doc/master/classTGLScenePad.html,https://root.cern,https://root.cern/doc/master/classTGLScenePad.html,1,['Test'],['Test']
Testability,LSetup.h;  ► src;  TBufferXML.cxx;  TKeyXML.cxx;  TXMLEngine.cxx;  TXMLFile.cxx;  TXMLPlayer.cxx;  TXMLSetup.cxx;  ► xmlparser;  ► inc;  LinkDef.h;  TDOMParser.h;  TSAXParser.h;  TXMLAttr.h;  TXMLDocument.h;  TXMLNode.h;  TXMLParser.h;  ► src;  TDOMParser.cxx;  TSAXParser.cxx;  TXMLAttr.cxx;  TXMLDocument.cxx;  TXMLNode.cxx;  TXMLParser.cxx;  ► math;  ► fftw;  ► inc;  LinkDef.h;  TFFTComplex.h;  TFFTComplexReal.h;  TFFTReal.h;  TFFTRealComplex.h;  ► src;  TFFTComplex.cxx;  TFFTComplexReal.cxx;  TFFTReal.cxx;  TFFTRealComplex.cxx;  ► foam;  ► inc;  LinkDef.h;  TFoam.h;  TFoamCell.h;  TFoamIntegrand.h;  TFoamMaxwt.h;  TFoamSampler.h;  TFoamVect.h;  ► src;  TFoam.cxx;  TFoamCell.cxx;  TFoamIntegrand.cxx;  TFoamMaxwt.cxx;  TFoamSampler.cxx;  TFoamVect.cxx;  ► fumili;  ► inc;  LinkDef.h;  TFumili.h;  TFumiliMinimizer.h;  ► src;  TFumili.cxx;  TFumiliMinimizer.cxx;  ► genetic;  ► inc;  ► Math;  GeneticMinimizer.h;  LinkDef.h;  ► src;  GeneticMinimizer.cxx;  ► test;  GAMinTutorial.cxx;  testGAMinimizer.cxx;  timeGA.cxx;  ► genvector;  ► inc;  ► Math;  ► GenVector;  3DConversions.h;  3DDistances.h;  AxisAngle.h;  AxisAnglefwd.h;  BitReproducible.h;  Boost.h;  Boostfwd.h;  BoostX.h;  BoostXfwd.h;  BoostY.h;  BoostYfwd.h;  BoostZ.h;  BoostZfwd.h;  Cartesian2D.h;  Cartesian2Dfwd.h;  Cartesian3D.h;  Cartesian3Dfwd.h;  CoordinateSystemTags.h;  Cylindrical3D.h;  Cylindrical3Dfwd.h;  CylindricalEta3D.h;  CylindricalEta3Dfwd.h;  DisplacementVector2D.h;  DisplacementVector2Dfwd.h;  DisplacementVector3D.h;  DisplacementVector3Dfwd.h;  eta.h;  etaMax.h;  EulerAngles.h;  EulerAnglesfwd.h;  GenVector_exception.h;  GenVectorIO.h;  LorentzRotation.h;  LorentzRotationfwd.h;  LorentzVector.h;  LorentzVectorfwd.h;  Plane3D.h;  Polar2D.h;  Polar2Dfwd.h;  Polar3D.h;  Polar3Dfwd.h;  PositionVector2D.h;  PositionVector2Dfwd.h;  PositionVector3D.h;  PositionVector3Dfwd.h;  PtEtaPhiE4D.h;  PtEtaPhiE4Dfwd.h;  PtEtaPhiM4D.h;  PtEtaPhiM4Dfwd.h;  PxPyPzE4D.h;  PxPyPzE4Dfwd.h;  PxPyPzM4D.h;  PxPyPzM4Df,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:40296,test,testGAMinimizer,40296,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,2,['test'],['testGAMinimizer']
Testability,"LViewer::SetPictureFileName(const TString& f); voidTGLViewer::SetPointScale(Float_t s); voidTGLViewer::SetResetCamerasOnUpdate(Bool_t v); voidTGLViewer::SetSmartRefresh(Bool_t smart_ref); voidTGLViewer::SetSmoothLines(Bool_t s); voidTGLViewer::SetSmoothPoints(Bool_t s); voidTGLViewer::SetStereo(Bool_t stereo, Bool_t quad_buf = kTRUE); voidTGLViewer::SetStereoEyeOffsetFac(Float_t f); voidTGLViewer::SetStereoFrustumAsymFac(Float_t f); voidTGLViewer::SetStereoZeroParallax(Float_t f); voidTGLViewerBase::SetStyle(Short_t st); virtual voidTObject::SetUniqueID(UInt_t uid); voidTGLViewerBase::SetWFLineW(Float_t w); voidShow(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); Short_tTGLViewerBase::Style() const; voidTGLViewer::SwitchColorSet(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTGLLockable::TakeLock(TGLLockable::ELock lock) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGLSAViewer(TVirtualPad* pad, TGLFormat* format = 0); TGLSAViewer(const TGWindow* parent, TVirtualPad* pad, TGedEditor* ged = 0, TGLFormat* format = 0); voidToggleEditObject(); voidToggleOrthoDolly(); voidToggleOrthoRotate(); virtual voidTGLViewer::UnClicked(TObject* obj, UInt_t button, UInt_t state)SIGNAL ; virtual voidTGLViewer::UnMouseOver(TObject* obj, UInt_t state)SIGNAL ; voidTGLViewer::UpdateScene(Bool_t redraw = kTRUE); virtual voidTObject::UseCurrentStyle(); voidTGLViewer::UseDarkColorSet(); voidTGLViewer::UseDefaultColorSet(Bool_t x); static voidTGLViewer::UseDefaultColorSetForNewViewers(Bool_t x); voidTGLViewer::UseLightColorSet(); static TVirtualViewer3D*TVirtualViewer3D::Viewer3D(TVirtualPad* pad = 0, Option_t* type = """"); Int_tTGLViewer::ViewportDiagonal() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Float_tTGLViewerBase::WFLineW() const; virtual Int_tTObject::Write(const ch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGLSAViewer.html:17096,Test,TestBit,17096,root/html604/TGLSAViewer.html,https://root.cern,https://root.cern/root/html604/TGLSAViewer.html,1,['Test'],['TestBit']
Testability,"Labels = kTRUE more Log Intermediate Labels are drawn.; 1094 Bool_t moreLogLabels = TestBit(TAxis::kMoreLogLabels);; 1095 ; 1096// the following parameters correspond to the pad range in NDC; 1097// and the user's coordinates in the pad; 1098 ; 1099 Double_t padh = gPad->GetWh()*gPad->GetAbsHNDC();; 1100 Double_t padw = gPad->GetWw()*gPad->GetAbsWNDC();; 1101 Double_t rwxmin = gPad->GetX1();; 1102 Double_t rwxmax = gPad->GetX2();; 1103 Double_t rwymin = gPad->GetY1();; 1104 Double_t rwymax = gPad->GetY2();; 1105 ; 1106 if(strchr(chopt,'G')) optionLog = 1; else optionLog = 0;; 1107 if(strchr(chopt,'B')) optionBlank= 1; else optionBlank= 0;; 1108 if(strchr(chopt,'V')) optionVert = 1; else optionVert = 0;; 1109 if(strchr(chopt,'+')) optionPlus = 1; else optionPlus = 0;; 1110 if(strchr(chopt,'-')) optionMinus= 1; else optionMinus= 0;; 1111 if(strchr(chopt,'U')) optionUnlab= 1; else optionUnlab= 0;; 1112 if(strchr(chopt,'P')) optionPara = 1; else optionPara = 0;; 1113 if(strchr(chopt,'O')) optionDown = 1; else optionDown = 0;; 1114 if(strchr(chopt,'R')) optionRight= 1; else optionRight= 0;; 1115 if(strchr(chopt,'L')) optionLeft = 1; else optionLeft = 0;; 1116 if(strchr(chopt,'C')) optionCent = 1; else optionCent = 0;; 1117 if(strchr(chopt,'=')) optionEqual= 1; else optionEqual= 0;; 1118 if(strchr(chopt,'Y')) optionY = 1; else optionY = 0;; 1119 if(strchr(chopt,'T')) optionText = 1; else optionText = 0;; 1120 if(strchr(chopt,'W')) optionGrid = 1; else optionGrid = 0;; 1121 if(strchr(chopt,'S')) optionSize = 1; else optionSize = 0;; 1122 if(strchr(chopt,'N')) optionNoopt= 1; else optionNoopt= 0;; 1123 if(strchr(chopt,'I')) optionInt = 1; else optionInt = 0;; 1124 if(strchr(chopt,'M')) optionM = 1; else optionM = 0;; 1125 if(strchr(chopt,'0')) optionUp = 1; else optionUp = 0;; 1126 if(strchr(chopt,'X')) optionX = 1; else optionX = 0;; 1127 if(strchr(chopt,'t')) optionTime = 1; else optionTime = 0;; 1128 if(strchr(chopt,'.')) optionDot = 1; else optionDot = 0;; 1129 if (TestB",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGaxis_8cxx_source.html:38064,Test,TestBit,38064,doc/master/TGaxis_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGaxis_8cxx_source.html,1,['Test'],['TestBit']
Testability,"Landau distribution: . \[ p(x) = \frac{1}{\xi} \phi (\lambda) \]. with ; \[ \phi(\lambda) = \frac{1}{2 \pi i}\int_{c-i\infty}^{c+i\infty} e^{\lambda s + s \log{s}} ds\]. where \(\lambda = (x-x_0)/\xi\). For a detailed description see K.S. Kölbig and B. Schorr, A program package for the Landau distribution, Computer Phys. Comm. 31 (1984) 97-111 [Erratum-ibid. 178 (2008) 972]. The same algorithms as in CERNLIB (DENLAN) is used; Parameters. xThe argument \(x\) ; xiThe width parameter \(\xi\) ; x0The location parameter \(x_0\) . Definition at line 21 of file PdfFuncMathCore.cxx. ◆ lognormal_pdf(). double ROOT::Math::lognormal_pdf ; (; double ; x, . double ; m, . double ; s, . double ; x0 = 0 . ). inline . Probability density function of the lognormal distribution. . \[ p(x) = {1 \over x \sqrt{2 \pi s^2} } e^{-(\ln{x} - m)^2/2 s^2} \]. for x>0. For detailed description see Mathworld. Parameters. xx variable ; mM = 0 for lognormal ; sscale parameter (not the sigma of the distribution which is not even defined) ; x0location parameter, corresponds approximately to the most probable value. For x0 = 0, sigma = 1, the x_mpv = -0.22278 . Definition at line 483 of file PdfFuncMathCore.h. ◆ negative_binomial_pdf(). double ROOT::Math::negative_binomial_pdf ; (; unsigned int ; k, . double ; p, . double ; n . ). inline . Probability density function of the negative binomial distribution. . \[ p(k) = \frac{(k+n-1)!}{k! (n-1)!} p^{n} (1-p)^{k} \]. For detailed description see Mathworld (where \(k \to x\) and \(n \to r\)). The distribution in Wikipedia is defined with a \(p\) corresponding to \(1-p\) in this case. ; Definition at line 146 of file PdfFuncMathCore.h. ◆ noncentral_chisquared_pdf(). double ROOT::Math::noncentral_chisquared_pdf ; (; double ; x, . double ; r, . double ; lambda . ). Probability density function of the non central \(\chi^2\) distribution with \(r\) degrees of freedom and the noon-central parameter \(\lambda\). . \[ p_r(x) = \frac{1}{\Gamma(r/2) 2^{r/2}} x^{r/2",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__PdfFunc.html:10106,log,lognormal,10106,doc/master/group__PdfFunc.html,https://root.cern,https://root.cern/doc/master/group__PdfFunc.html,1,['log'],['lognormal']
Testability,"Latex inside. ;  ; file  latex4.C;   Draw the Greek letters as a table and save the result as GIF, PS, PDF and SVG files. ;  ; file  latex5.C;   This draws the Mathematical Symbols letters as a table and save the result as GIF, PS, PDF and SVG files. ;  ; file  mandelbrot.C;   Using TExec to handle keyboard events and TComplex to draw the Mandelbrot set. ;  ; file  markerwarning.C;   This script illustrates the danger of using asymmetric symbols. ;  ; file  mass_spectrum.C;   This macro makes use of some basic graphics primitives such as line, arrow and text. ;  ; file  palettes.C;   This macro draws all the high definition palettes available in ROOT. ;  ; file  pavetext.C;   Draw a pave text. ;  ; file  perceptualcolormap.C;   A “Perceptual” colormap explicitly identifies a fixed value in the data ;  ; file  piechart.C;   Pie chart example. ;  ; file  polytest1.C;   This macro is testing the ""compacting"" algorithm in TPadPainter. ;  ; file  polytest2.C;   This macro is testing the ""compacting"" algorithm in TPadPainter. ;  ; file  pstable.C;   Display all possible types of ROOT/Postscript characters. ;  ; file  psview.C;   An example how to display PS, EPS, PDF files in canvas. ;  ; file  quarks.C;   Example illustrating divided pads and Latex. ;  ; file  save_batch.C;  This macro demonstrates batch image mode of web canvas When enabled - several images converted into JSON before all together provided to headless browser to produce image files. ;  ; file  saveall.C;   Creates many canvases and save as images or pdf. ;  ; file  schroedinger_hydrogen.C;   Plot the Amplitude of a Hydrogen Atom. ;  ; file  tmathtext.C;  This macro draws various formula in a canvas. ;  ; file  tmathtext2.C;   This macro draw all possible symbols provided by TMathtext. ;  ; file  tornado.C;   Show 3-d polymarker. ;  ; file  transparency.C;   This macro demonstrates the use of color transparency. ;  ; file  triangles.C;   Create small triangles at random positions on the canvas. ;  . ROOT m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__graphics.html:3362,test,testing,3362,doc/master/group__tutorial__graphics.html,https://root.cern,https://root.cern/doc/master/group__tutorial__graphics.html,1,['test'],['testing']
Testability,"LayerPerceptron::TMultiLayerPerceptron ; (; ). Default constructor. ; Definition at line 264 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [2/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const char * ; layout, . TTree * ; data = nullptr, . const char * ; training = ""Entry$%2==0"", . const char * ; test = """", . TNeuron::ENeuronType ; type = TNeuron::kSigmoid, . const char * ; extF = """", . const char * ; extD = """" . ). The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ; Hidden layers are just described by the number of neurons. The layers are separated by colons.; Ex: ""x,y:10:5:f""; The output can be prepended by '@' if the variable has to be normalized. The output can be followed by '!' to use Softmax neurons for the output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument. training and test are two cuts (see TTreeFormula) defining events to be used during the neural net training and testing.; Example: ""Entry$%2"", ""(Entry$+1)%2"".; Both the TTree and the cut can be defined in the constructor, or later with the suited setter method. ; Definition at line 446 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [3/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const char * ; layout, . const char * ; weight, . TTree * ; data = nullptr, . const char * ; training = ""Entry$%2==0"", . const char * ; test = """", . TNeuron::ENeuronType ; type = TNeuron::kSigmoid, . const char * ; extF = """", . const char * ; extD = """" . ). The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ; Hidden layers are just described by the number of neurons. The layers are separated by colons.; Ex: ""x,y:10:5:f""; The output can be prepended by '@' if the variable has to be normalized. The output can be followed by '!' to use Softmax neurons for the output layer on",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiLayerPerceptron.html:29826,test,test,29826,doc/master/classTMultiLayerPerceptron.html,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html,2,['test'],"['test', 'testing']"
Testability,"LayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidSetModel(TObject* obj); voidTGedFrame::SetModelClass(TClass* mcl); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); voidSetRotatorMode(); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGLViewerEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTGedFrame::Update(); voidUpdateCameraCenter(); voidUpdateMaxDrawTimes(); voidUpdatePointLineStuff(); voidUpdateRotator(); voidUpdateStereo(); voidUpdateViewerAxes(Int_t id); voidUpdateViewerReference(); virtual voidTObject::UseCurrentStyle(); virtual voidViewerRedraw(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLViewerEditor.html:15187,Test,TestBit,15187,root/html602/TGLViewerEditor.html,https://root.cern,https://root.cern/root/html602/TGLViewerEditor.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"LayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPageDimension(const TGDimension& dim); virtual voidSetPageDimension(UInt_t w, UInt_t h); virtual voidSetPagePosition(const TGPosition& pos); virtual voidSetPagePosition(Int_t x, Int_t y); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidSetVsbPosition(Int_t newPos); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidSpacePressed(TGFrame*)SIGNAL ; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGContainer(TGCanvas* p, UInt_t options = kSunkenFrame, Pixel_t back = GetDefaultFrameBackground()); TGContainer(const TGWindow* p = 0, UInt_t w = 1, UInt_t h = 1, UInt_t options = kSunkenFrame, Pixel_t back = GetDefaultFrameBackground()); virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidUnSelectAll()SIGNAL ; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGContainer.html:17331,Test,TestBit,17331,root/html602/TGContainer.html,https://root.cern,https://root.cern/root/html602/TGContainer.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"LayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); voidTGMainFrame::SetMWMHints(UInt_t value, UInt_t funcs, UInt_t input); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGMainFrame::SetWindowName(const char* name = 0); voidTGMainFrame::SetWMPosition(Int_t x, Int_t y); voidTGMainFrame::SetWMSize(UInt_t w, UInt_t h); voidTGMainFrame::SetWMSizeHints(UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc); voidTGMainFrame::SetWMState(EInitialState state); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; voidTabPressed(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); TRootDialog(const TRootDialog&); TRootDialog(TRootContextMenu* cmenu = 0, const TGWindow* main = 0, const char* title = ""ROOT Dialog"", Bool_t okB = kTRUE, Bool_t cancelB = kTRUE, Bool_t applyB = kFALSE, Bool_t helpB = kTRUE); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TRootDialog.html:16172,Test,TestBit,16172,root/html602/TRootDialog.html,https://root.cern,https://root.cern/root/html602/TRootDialog.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,Learning rate = 0.001 regularization 0 minimum error = 0.691476; : --------------------------------------------------------------; : Epoch | Train Err. Val. Err. t(s)/epoch t(s)/Loss nEvents/s Conv. Steps; : --------------------------------------------------------------; : Start epoch iteration ...; : 1 Minimum Test error found - save the configuration ; : 1 | 0.605916 0.542204 0.0761789 0.00657979 45977.6 0; : 2 Minimum Test error found - save the configuration ; : 2 | 0.512732 0.499825 0.0771995 0.00657724 45311.5 0; : 3 Minimum Test error found - save the configuration ; : 3 | 0.477495 0.458718 0.0776312 0.00665553 45085.9 0; : 4 Minimum Test error found - save the configuration ; : 4 | 0.438338 0.418147 0.0780597 0.00669006 44837 0; : 5 Minimum Test error found - save the configuration ; : 5 | 0.407569 0.391703 0.0786075 0.00678976 44557.2 0; : 6 Minimum Test error found - save the configuration ; : 6 | 0.387736 0.373696 0.0792581 0.00678916 44156.9 0; : 7 Minimum Test error found - save the configuration ; : 7 | 0.373399 0.360485 0.0791536 0.00677002 44208.9 0; : 8 Minimum Test error found - save the configuration ; : 8 | 0.362792 0.352336 0.0796639 0.00682572 43933 0; : 9 Minimum Test error found - save the configuration ; : 9 | 0.353594 0.340526 0.0805399 0.00700876 43519 0; : 10 Minimum Test error found - save the configuration ; : 10 | 0.345712 0.336826 0.080966 0.0069933 43259.2 0; : 11 Minimum Test error found - save the configuration ; : 11 | 0.338399 0.329567 0.0802544 0.00691181 43630.9 0; : 12 Minimum Test error found - save the configuration ; : 12 | 0.333122 0.322325 0.0804981 0.00689735 43477.8 0; : 13 Minimum Test error found - save the configuration ; : 13 | 0.326577 0.317097 0.0800716 0.00688531 43724 0; : 14 Minimum Test error found - save the configuration ; : 14 | 0.320979 0.311994 0.080369 0.00694962 43585.2 0; : 15 Minimum Test error found - save the configuration ; : 15 | 0.316442 0.305918 0.0803736 0.00690045 43553.3 0; : 16 Minimum Test e,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMulticlass_8C.html:15479,Test,Test,15479,doc/master/TMVAMulticlass_8C.html,https://root.cern,https://root.cern/doc/master/TMVAMulticlass_8C.html,1,['Test'],['Test']
Testability,"LearningRate=1e-3,Momentum=0.0,Repetitions=1,ConvergenceSteps=5,BatchSize=100,TestRepetitions=1,WeightDecay=1e-2,Regularization=None,MaxEpochs=10Optimizer=ADAM,DropConfig=0.0+0.+0.+0."" [Defines the training strategies.]; : - Default:; : VerbosityLevel: ""Default"" [Verbosity level]; : CreateMVAPdfs: ""False"" [Create PDFs for classifier outputs (signal and background)]; : IgnoreNegWeightsInTraining: ""False"" [Events with negative weights are ignored in the training (but are included for testing and performance evaluation)]; : BatchLayout: ""0|0|0"" [The Layout of the batch]; : Will now use the CPU architecture with BLAS and IMT support !; Factory : Booking method: ␛[1mTMVA_DNN␛[0m; : ; : Parsing option string: ; : ... ""!H:V:ErrorStrategy=CROSSENTROPY:VarTransform=None:WeightInitialization=XAVIER:RandomSeed=0:InputLayout=1|1|300:Layout=DENSE|64|TANH,DENSE|TANH|64,DENSE|TANH|64,LINEAR:TrainingStrategy=LearningRate=1e-3,Momentum=0.0,Repetitions=1,ConvergenceSteps=10,BatchSize=256,TestRepetitions=1,WeightDecay=1e-4,Regularization=None,MaxEpochs=20DropConfig=0.0+0.+0.+0.,Optimizer=ADAM:CPU""; : The following options are set:; : - By User:; : <none>; : - Default:; : Boost_num: ""0"" [Number of times the classifier will be boosted]; : Parsing option string: ; : ... ""!H:V:ErrorStrategy=CROSSENTROPY:VarTransform=None:WeightInitialization=XAVIER:RandomSeed=0:InputLayout=1|1|300:Layout=DENSE|64|TANH,DENSE|TANH|64,DENSE|TANH|64,LINEAR:TrainingStrategy=LearningRate=1e-3,Momentum=0.0,Repetitions=1,ConvergenceSteps=10,BatchSize=256,TestRepetitions=1,WeightDecay=1e-4,Regularization=None,MaxEpochs=20DropConfig=0.0+0.+0.+0.,Optimizer=ADAM:CPU""; : The following options are set:; : - By User:; : V: ""True"" [Verbose output (short form of ""VerbosityLevel"" below - overrides the latter one)]; : VarTransform: ""None"" [List of variable transformations performed before training, e.g., ""D_Background,P_Signal,G,N_AllClasses"" for: ""Decorrelation, PCA-transformation, Gaussianisation, Normalisation, each for ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__RNN__Classification_8py.html:3998,Test,TestRepetitions,3998,doc/master/TMVA__RNN__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__RNN__Classification_8py.html,1,['Test'],['TestRepetitions']
Testability,"LeftDaughter(). TMVA::Node * TMVA::BinaryTree::GetLeftDaughter ; (; Node * ; n). get left daughter node current node ""n"" ; Definition at line 87 of file BinaryTree.cxx. ◆ GetNNodes(). UInt_t TMVA::BinaryTree::GetNNodes ; (; ); const. inline . Definition at line 86 of file BinaryTree.h. ◆ GetRightDaughter(). TMVA::Node * TMVA::BinaryTree::GetRightDaughter ; (; Node * ; n). get right daughter node current node ""n"" ; Definition at line 95 of file BinaryTree.cxx. ◆ GetRoot(). virtual Node * TMVA::BinaryTree::GetRoot ; (; ); const. inlinevirtual . Reimplemented in TMVA::DecisionTree.; Definition at line 83 of file BinaryTree.h. ◆ GetTotalTreeDepth(). UInt_t TMVA::BinaryTree::GetTotalTreeDepth ; (; ); const. inline . Definition at line 93 of file BinaryTree.h. ◆ IsA(). virtual TClass * TMVA::BinaryTree::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented in TMVA::BinarySearchTree, and TMVA::DecisionTree.; Definition at line 122 of file BinaryTree.h. ◆ Log(). TMVA::MsgLogger & TMVA::BinaryTree::Log ; (; ); const. protected . Definition at line 235 of file BinaryTree.cxx. ◆ Print(). void TMVA::BinaryTree::Print ; (; std::ostream & ; os); const. virtual . recursively print the tree ; Definition at line 125 of file BinaryTree.cxx. ◆ Read(). void TMVA::BinaryTree::Read ; (; std::istream & ; istr, . UInt_t ; tmva_Version_Code = 262657 . ). virtual . Read the binary tree from an input stream. ; The input stream format depends on the tree type, it is defined be the node of the tree ; Definition at line 169 of file BinaryTree.cxx. ◆ ReadXML(). void TMVA::BinaryTree::ReadXML ; (; void * ; node, . UInt_t ; tmva_Version_Code = 262657 . ). virtual . read attributes from XML ; Definition at line 144 of file BinaryTree.cxx. ◆ SetRoot(). void TMVA::BinaryTree::SetRoot ; (; Node * ; r). inline . Definition at line 80 of file BinaryTree.h. ◆ SetTotalTreeDepth() [1/2]. void TMVA::BinaryTree::SetTotalTreeDepth ; (; Int_t ; depth). inline . Definition at ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1BinaryTree.html:5966,Log,Log,5966,doc/master/classTMVA_1_1BinaryTree.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinaryTree.html,1,['Log'],['Log']
Testability,"Length() ] == '.' ); 3615 dataName.Remove( 0, stlParentName.Length()+1 );; 3616 }; 3617 ; 3618 // Find our offset in our parent class using; 3619 // a lookup by name in the dictionary meta info; 3620 // for our parent class.; 3621 ; 3622 if (alternateElement) {; 3623 Ssiz_t dotpos = dataName.Last('.');; 3624 Ssiz_t endpos = dataName.Length();; 3625 if (dotpos != kNPOS) ++dotpos; else dotpos = 0;; 3626 dataName.Replace(dotpos,endpos-dotpos,subBranchElement->GetFullName());; 3627 }; 3628 TRealData* rd = pClass->GetRealData(dataName);; 3629 if (rd && (!rd->TestBit(TRealData::kTransient) || alternateElement)) {; 3630 // -- Data member exists in the dictionary meta info, get the offset.; 3631 // If we are using an alternateElement, it is the target of a rule; 3632 // and might be indeed transient.; 3633 offset = rd->GetThisOffset();; 3634 } else if (subBranchElement->TestBit(TStreamerElement::kWholeObject)) {; 3635 // We are a rule with no specific target, it applies to the whole; 3636 // object, let's set the offset to zero; 3637 offset = 0;; 3638 } else {; 3639 // -- No dictionary meta info for this data member, it must no; 3640 // longer exist; 3641 if (fEntries == 0) {; 3642 // ... unless we creating the branch in which case; 3643 // we have an internal error.; 3644 if (pClass->GetListOfRealData()->GetEntries() == 0) {; 3645 // We are probably missing the ShowMember, let's; 3646 // just issue an error.; 3647 Error(""InitializeOffsets"",; 3648 ""Could not find the real data member '%s' when constructing the branch '%s' [Likely missing ShowMember]."",; 3649 dataName.Data(),GetName());; 3650 } else if (subInfo && subInfo->GetClassVersion()!=subInfo->GetClass()->GetClassVersion()) {; 3651 // In the case where we are cloning a TTree that was created with an older version of the layout, we may not; 3652 // able to find all the members; 3653 Info(""InitializeOffsets"",; 3654 ""TTree created with an older schema, some data might not be copied in 'slow-cloning' mode; fast-cloning sh",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranchElement_8cxx_source.html:132834,Test,TestBit,132834,doc/master/TBranchElement_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranchElement_8cxx_source.html,1,['Test'],['TestBit']
Testability,"Level); virtual voidShowMembers(TMemberInspector&); Int_tsimplex(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidzeroEvalCount(). protected:. voidapplyCovarianceMatrix(TMatrixDSym& V); voidbackProp(); voidclearPdfParamAsymErr(Int_t index); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; Int_tgetNPar() const; Double_tgetPdfParamErr(Int_t index); Double_tgetPdfParamVal(Int_t index); ofstream*logfile() const; voidTObject::MakeZombie(); Double_t&maxFCN(); voidprofileStart(); voidprofileStop(); voidsaveStatus(const char* label, Int_t status); voidsetPdfParamErr(Int_t index, Double_t value); voidsetPdfParamErr(Int_t index, Double_t loVal, Double_t hiVal); virtual Bool_tsetPdfParamVal(Int_t index, Double_t value, Bool_t verbose = kFALSE); Bool_tsynchronize(Bool_t verbose); voidupdateFloatVec(). private:. RooMinuit(const RooMinuit&). Data Members; public:. enum Strategy { Speed; Balance; Robustness; };; enum PrintLevel { None; Reduced; Normal; ExtraForProblem; Maximum; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. RooArgList*_constParamList; TStopwatch_cumulTimer; Bool_t_doEvalErrorWall; Int_t_evalCounter; TMatrixDSym*_extV; RooArgList*_floatParamList; vector<RooAbsArg*>_floatParamVec; RooAbsReal*_func; Bool_t_ha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooMinuit.html:6767,log,logfile,6767,root/html534/RooMinuit.html,https://root.cern,https://root.cern/root/html534/RooMinuit.html,1,['log'],['logfile']
Testability,"Libraries. Function documentation; TUnfoldDensity(const TUnfoldDensity& ); empty constructor, for derived classes. ~TUnfoldDensity(void); clean up. TString GetOutputBinName(Int_t iBinX) const. TUnfoldDensity(const TUnfoldDensity& ). Double_t GetDensityFactor(TUnfoldDensity::EDensityMode densityMode, Int_t iBin) const. TUnfoldDensity(const TH2* hist_A, TUnfold::EHistMap histmap, TUnfold::ERegMode regmode = kRegModeCurvature, TUnfold::EConstraint constraint = kEConstraintArea, TUnfoldDensity::EDensityMode densityMode = kDensityModeBinWidthAndUser, const TUnfoldBinning* outputBins = 0, const TUnfoldBinning* inputBins = 0, const char* regularisationDistribution = 0, const char* regularisationAxisSteering = ""*[UOB]""). void RegularizeDistribution(TUnfold::ERegMode regmode, TUnfoldDensity::EDensityMode densityMode, const char* distribution, const char* axisSteering). Int_t ScanTau(Int_t nPoint, Double_t tauMin, Double_t tauMax, TSpline** scanResult, Int_t mode = kEScanTauRhoAvg, const char* distribution = 0, const char* projectionMode = 0, TGraph** lCurvePlot = 0, TSpline** logTauXPlot = 0, TSpline** logTauYPlot = 0). TH1 * GetOutput(const char* histogramName, const char* histogramTitle = 0, const char* distributionName = 0, const char* projectionMode = 0, Bool_t useAxisBinning = kTRUE) const. TH1 * GetFoldedOutput(const char* histogramName, const char* histogramTitle = 0, const char* distributionName = 0, const char* projectionMode = 0, Bool_t useAxisBinning = kTRUE, Bool_t addBgr = kFALSE) const. TH1 * GetInput(const char* histogramName, const char* histogramTitle = 0, const char* distributionName = 0, const char* projectionMode = 0, Bool_t useAxisBinning = kTRUE) const. TH1 * GetDeltaSysBackgroundScale(const char* bgrSource, const char* histogramName, const char* histogramTitle = 0, const char* distributionName = 0, const char* projectionMode = 0, Bool_t useAxisBinning = kTRUE). TH2 * GetEmatrixSysUncorr(const char* histogramName, const char* histogramTitle = 0, const c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TUnfoldDensity.html:23615,log,logTauXPlot,23615,root/html534/TUnfoldDensity.html,https://root.cern,https://root.cern/root/html534/TUnfoldDensity.html,2,['log'],"['logTauXPlot', 'logTauYPlot']"
Testability,"Likelihood( void ); destructor. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); FDA can handle classification with 2 classes. void Init( void ); default initialisation called by all constructors. void DeclareOptions(); define the options (their key words) that can be set in the option string; TransformOutput <bool> transform (often strongly peaked) likelihood output through sigmoid inversion. void DeclareCompatibilityOptions(). void ProcessOptions(). void Train( void ); create reference distributions (PDFs) from signal and background events:; fill histograms and smooth them; if decorrelation is required, compute; corresponding square-root matrices; the reference histograms require the correct boundaries. Since in Likelihood classification; the transformations are applied using both classes, also the corresponding boundaries; need to take this into account. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); returns the likelihood estimator for signal; fill a new Likelihood branch into the testTree. Double_t TransformLikelihoodOutput(Double_t ps, Double_t pb) const; returns transformed or non-transformed output. void WriteOptionsToStream(ostream& o, const TString& prefix) const; write options to stream. void AddWeightsXMLTo(void* parent) const; write weights to XML. const TMVA::Ranking* CreateRanking(); computes ranking of input variables. void WriteWeightsToStream(TFile& rf) const; write reference PDFs to ROOT file. void ReadWeightsFromXML(void* wghtnode); read weights from XML. void ReadWeightsFromStream(istream& istr); read weight info from file; nothing to do for this method. void ReadWeightsFromStream(TFile& istr); read reference PDF from ROOT file. void WriteMonitoringHistosToFile( void ); write histograms and PDFs to file for monitoring purposes. void MakeClassSpecificHeader(ostream& , const TString& = """") const; write specific header of the classifier (mostly include files). void MakeClassSpeci",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodLikelihood.html:20545,test,testTree,20545,root/html528/TMVA__MethodLikelihood.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodLikelihood.html,3,['test'],['testTree']
Testability,"Limit ; (; Double_t ; l). inline . Definition at line 140 of file MethodBDT.h. ◆ SetNTrees(). void TMVA::MethodBDT::SetNTrees ; (; Int_t ; d). inline . Definition at line 138 of file MethodBDT.h. ◆ SetShrinkage(). void TMVA::MethodBDT::SetShrinkage ; (; Double_t ; s). inline . Definition at line 141 of file MethodBDT.h. ◆ SetTuneParameters(). void TMVA::MethodBDT::SetTuneParameters ; (; std::map< TString, Double_t > ; tuneParameters). virtual . Set the tuning parameters according to the argument. ; Reimplemented from TMVA::MethodBase.; Definition at line 1121 of file MethodBDT.cxx. ◆ SetUseNvars(). void TMVA::MethodBDT::SetUseNvars ; (; Int_t ; n). inline . Definition at line 142 of file MethodBDT.h. ◆ Streamer(). virtual void TMVA::MethodBDT::Streamer ; (; TBuffer & ; ). virtual . Reimplemented from TMVA::MethodBase. ◆ StreamerNVirtual(). void TMVA::MethodBDT::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 305 of file MethodBDT.h. ◆ TestTreeQuality(). Double_t TMVA::MethodBDT::TestTreeQuality ; (; DecisionTree * ; dt). Test the tree quality.. in terms of Misclassification. ; Definition at line 1696 of file MethodBDT.cxx. ◆ Train(). void TMVA::MethodBDT::Train ; (; void ; ). virtual . BDT training. ; Implements TMVA::MethodBase.; Definition at line 1142 of file MethodBDT.cxx. ◆ UpdateTargets(). void TMVA::MethodBDT::UpdateTargets ; (; std::vector< const TMVA::Event * > & ; eventSample, . UInt_t ; cls = 0 . ). private . Calculate residual for all events. ; Definition at line 1434 of file MethodBDT.cxx. ◆ UpdateTargetsRegression(). void TMVA::MethodBDT::UpdateTargetsRegression ; (; std::vector< const TMVA::Event * > & ; eventSample, . Bool_t ; first = kFALSE . ). private . Calculate residuals for all events and update targets for next iter. ; Parameters. [in]eventSampleThe collection of events currently under training. ; [in]firstShould be true when called before the first boosting iteration has been run . Definition at line",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:58868,Test,TestTreeQuality,58868,doc/master/classTMVA_1_1MethodBDT.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html,1,['Test'],['TestTreeQuality']
Testability,"LinInterpVarRooAbsReal that does piecewise-linear interpolations ;  CMeasurementThe RooStats::HistFactory::Measurement class can be used to construct a model by combining multiple RooStats::HistFactory::Channel objects ;  CNormFactorConfiguration for an un- constrained overall systematic to scale sample normalisations ;  COverallSysConfiguration for a constrained overall systematic to scale sample normalisations ;  CPreprocessFunction;  ►CRooBarlowBeestonLLClass RooBarlowBeestonLL implements the profile likelihood estimator for a given likelihood and set of parameters of interest ;  CBarlowCache;  CSample;  CShapeFactorUnconstrained bin-by-bin variation of affected histogram ;  CShapeSysConstrained bin-by-bin variation of affected histogram ;  CStatErrorStatistical error of Monte Carlo predictions ;  CStatErrorConfigConfiguration to automatically assign nuisance parameters for the statistical error of the Monte Carlo simulations ;  CAcceptanceRegion;  CAsymptoticCalculatorHypothesis Test Calculator based on the asymptotic formulae for the profile likelihood ratio ;  CBayesianCalculatorBayesianCalculator is a concrete implementation of IntervalCalculator, providing the computation of a credible interval using a Bayesian method ;  CBernsteinCorrectionBernsteinCorrection is a utility in RooStats to augment a nominal PDF with a polynomial correction term ;  CCombinedCalculatorCombinedCalculator is an interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals ;  CConfidenceBeltConfidenceBelt is a concrete implementation of the ConfInterval interface ;  CConfIntervalConfInterval is an interface class for a generic interval in the RooStats framework ;  CDebuggingSampler;  CDebuggingTestStat;  CDetailedOutputAggregatorThis class is designed to aid in the construction of RooDataSets and RooArgSets, particularly those naturally arising in fitting operations ;  CFeldmanCousins(like the Feldman-Cousins technique) is essentially a specific confi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/annotated.html:6639,Test,Test,6639,doc/v616/annotated.html,https://root.cern,https://root.cern/doc/v616/annotated.html,1,['Test'],['Test']
Testability,"LinSolverSparse&operator=(const TQpLinSolverSparse& source); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidPutXDiagonal(TVectorD& xdiag); virtual voidPutZDiagonal(TVectorD& zdiag); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTQpLinSolverBase::SeparateVars(TVectorD& vars1, TVectorD& vars2, TVectorD& vars3, TVectorD& vars); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTQpLinSolverBase::Solve(TQpDataBase* prob, TQpVar* vars, TQpResidual* resids, TQpVar* step); virtual voidSolveCompressed(TVectorD& rhs); virtual voidTQpLinSolverBase::SolveXYZS(TVectorD& stepx, TVectorD& stepy, TVectorD& stepz, TVectorD& steps, TVectorD& ztemp, TQpDataBase* data); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TQpLinSolverSparse(); TQpLinSolverSparse(const TQpLinSolverSparse& another); TQpLinSolverSparse(TQpProbSparse* factory, TQpDataSparse* data); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TQpLinSolverSparse.html:5293,Test,TestBit,5293,root/html602/TQpLinSolverSparse.html,https://root.cern,https://root.cern/root/html602/TQpLinSolverSparse.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"Line(Option_t* option = """"); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTAttFill::SaveFillAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1001); virtual voidTAttLine::SaveLineAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1, Int_t widdef = 1); virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTWbox::SetBorderMode(Short_t bordermode)MENU ; virtual voidTWbox::SetBorderSize(Short_t bordersize)MENU ; virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillStyle(Style_t fstyle); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTBox::SetToolTipText(const char* text, Long_t delayms = 1000); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTBox::SetX1(Double_t x1); virtual voidTBox::SetX2(Double_t x2); virtual voidTBox::SetY1(Double_t y1); virtual voidTBox::SetY2(Double_t y2); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidUseCurrentStyle()MENU ; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFrame.html:6648,Test,TestBit,6648,root/html528/TFrame.html,https://root.cern,https://root.cern/root/html528/TFrame.html,6,['Test'],"['TestBit', 'TestBits']"
Testability,"Line(Option_t* option = """"); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTAttLine::SaveLineAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1, Int_t widdef = 1); virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidSetActivated(Bool_t on); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTCollection::SetCurrentCollection(); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); voidTCollection::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTCollection::SetOwner(Bool_t enable = kTRUE); voidSetShowRanges(Bool_t s); voidSetTitle(const char* title); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTList::Sort(Bool_t order = kSortAscending); static voidTCollection::StartGarbageCollection(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TParallelCoordSelect(); TParallelCoordSelect(const char* title); TParallelCoordSelect(const TParallelCoordSelect&); voidTSeqCollection::UnSort(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TParallelCoordSelect.html:8773,Test,TestBit,8773,root/html602/TParallelCoordSelect.html,https://root.cern,https://root.cern/root/html602/TParallelCoordSelect.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"Line::SetBBoxX2(const Int_t x); virtual voidTLine::SetBBoxY1(const Int_t y); virtual voidTLine::SetBBoxY2(const Int_t y); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); static voidSetDefaultAngle(Float_t Angle); static voidSetDefaultArrowSize(Float_t ArrowSize); static voidSetDefaultOption(Option_t* Option); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillColorAlpha(Color_t fcolor, Float_t falpha); virtual voidTAttFill::SetFillStyle(Style_t fstyle); voidTLine::SetHorizontal(Bool_t set = kTRUE)TOGGLE GETTER ; virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidTLine::SetNDC(Bool_t isNDC = kTRUE); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetOption(Option_t* option = "">""); virtual voidTObject::SetUniqueID(UInt_t uid); voidTLine::SetVertical(Bool_t set = kTRUE)TOGGLE GETTER ; virtual voidTLine::SetX1(Double_t x1); virtual voidTLine::SetX2(Double_t x2); virtual voidTLine::SetY1(Double_t y1); virtual voidTLine::SetY2(Double_t y2); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TArrow.html:8603,Test,TestBit,8603,root/html534/TArrow.html,https://root.cern,https://root.cern/root/html534/TArrow.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,LinkDef_GenVectorAll.h;  LorentzRotation.h;  LorentzVector.h;  Plane3D.h;  Point2D.h;  Point2Dfwd.h;  Point3D.h;  Point3Dfwd.h;  Polar2D.h;  Polar3D.h;  PositionVector2D.h;  PositionVector3D.h;  PtEtaPhiE4D.h;  PtEtaPhiM4D.h;  PxPyPzE4D.h;  PxPyPzM4D.h;  Quaternion.h;  Rotation3D.h;  RotationX.h;  RotationY.h;  RotationZ.h;  RotationZYX.h;  Transform3D.h;  Translation3D.h;  Vector2D.h;  Vector2Dfwd.h;  Vector3D.h;  Vector3Dfwd.h;  Vector4D.h;  Vector4Dfwd.h;  VectorUtil.h;  ► src;  3DConversions.cxx;  3DDistances.cxx;  AxisAngle.cxx;  AxisAngleXother.cxx;  BitReproducible.cxx;  Boost.cxx;  BoostX.cxx;  BoostY.cxx;  BoostZ.cxx;  EulerAngles.cxx;  LorentzRotation.cxx;  Quaternion.cxx;  QuaternionXaxial.cxx;  Rotation3D.cxx;  Rotation3DxAxial.cxx;  RotationZYX.cxx;  VectorUtil.cxx;  ► mathcore;  doc;  ► inc;  ► Fit;  BasicFCN.h;  BinData.h;  Chi2FCN.h;  DataOptions.h;  DataRange.h;  FcnAdapter.h;  FitConfig.h;  FitData.h;  FitExecutionPolicy.h;  FitResult.h;  Fitter.h;  FitUtil.h;  LogLikelihoodFCN.h;  ParameterSettings.h;  PoissonLikelihoodFCN.h;  SparseData.h;  UnBinData.h;  ► Math;  AdaptiveIntegratorMultiDim.h;  AllIntegrationTypes.h;  BasicMinimizer.h;  BrentMethods.h;  BrentMinimizer1D.h;  BrentRootFinder.h;  ChebyshevPol.h;  CladDerivator.hThe file is a bridge between ROOT and clad automatic differentiation plugin ;  Delaunay2D.h;  DistFunc.h;  DistFuncMathCore.h;  DistSampler.h;  DistSamplerOptions.h;  Error.h;  Factory.h;  FitMethodFunction.h;  Functor.h;  GaussIntegrator.h;  GaussLegendreIntegrator.h;  GenAlgoOptions.h;  GoFTest.h;  IFunction.h;  IFunctionfwd.h;  IMinimizer1D.h;  Integrator.h;  IntegratorMultiDim.h;  IntegratorOptions.h;  IOptions.h;  IParamFunction.h;  IParamFunctionfwd.h;  IRootFinderMethod.h;  KDTree.h;  KDTree.icc;  LCGEngine.h;  Math.h;  MersenneTwisterEngine.h;  Minimizer.h;  MinimizerOptions.h;  MinimizerVariableTransformation.h;  MinimTransformFunction.h;  MinimTransformVariable.h;  MixMaxEngine.h;  MixMaxEngine.icc;  MultiDimParamFunc,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/files.html:43262,Log,LogLikelihoodFCN,43262,doc/v616/files.html,https://root.cern,https://root.cern/doc/v616/files.html,1,['Log'],['LogLikelihoodFCN']
Testability,"List *validationSample=nullptr);  prune (get rid of internal nodes) the Decision tree to avoid overtraining several different pruning methods can be applied as selected by the variable ""fPruneMethod"". ;  ; void SetAnalysisType (Types::EAnalysisType t);  ; void SetMinLinCorrForFisher (Double_t min);  ; void SetNodePurityLimit (Double_t p);  ; void SetNVars (Int_t n);  ; void SetParentTreeInNodes (Node *n=nullptr);  descend a tree to find all its leaf nodes, fill max depth reached in the tree at the same time. ;  ; void SetPruneMethod (EPruneMethod m=kCostComplexityPruning);  ; void SetPruneStrength (Double_t p);  ; void SetTreeID (Int_t treeID);  ; void SetUseExclusiveVars (Bool_t t=kTRUE);  ; void SetUseFisherCuts (Bool_t t=kTRUE);  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Double_t TestPrunedTreeQuality (const DecisionTreeNode *dt=nullptr, Int_t mode=0) const;  return the misclassification rate of a pruned tree a ""pruned tree"" may have set the variable ""IsTerminal"" to ""arbitrary"" at any node, hence this tree quality testing will stop there, hence test the pruned tree (while the full tree is still in place for normal/later use) ;  ; Double_t TrainNode (const EventConstList &eventSample, DecisionTreeNode *node);  ; Double_t TrainNodeFast (const EventConstList &eventSample, DecisionTreeNode *node);  Decide how to split a node using one of the variables that gives the best separation of signal/background. ;  ; Double_t TrainNodeFull (const EventConstList &eventSample, DecisionTreeNode *node);  train a node by finding the single optimal cut for a single variable that best separates signal and background (maximizes the separation gain) ;  ;  Public Member Functions inherited from TMVA::BinaryTree;  BinaryTree (void);  constructor for a yet ""empty"" tree. Needs to be filled afterwards ;  ; virtual ~BinaryTree ();  destructor (deletes the nodes and ""events"" if owned by the tree ;  ; virtual void * AddXMLTo (void ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DecisionTree.html:7287,Test,TestPrunedTreeQuality,7287,doc/master/classTMVA_1_1DecisionTree.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DecisionTree.html,3,"['Test', 'test']","['TestPrunedTreeQuality', 'test', 'testing']"
Testability,"List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » First Steps With ROOT ROOT I/O. The ROOT framework consists of many classes, grouped into several categories. Finally, the latter are grouped into few top-level categories. Each top-level category comes with a basic description of the framework design and of the purpose of its categories, which also have more detailed documentation about their use. The most complete documentation is the Reference Guide, that contains the automatically generated documentation of each class.; This document is about the top-level categories related to input/output. . ‹ Tracks; up; ROOT files ›. Navigate through this book; Processing data with ROOT; Showing results with ROOT; Simulation in ROOT; ROOT I/OROOT files; ROOT trees; Parallel processing. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/root-io.html:3119,test,tests,3119,d/root-io.html,https://root.cern,https://root.cern/d/root-io.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,"List* slaves, Long_t timeout = -1, Int_t endtype = -1, Bool_t deactonfail = kFALSE); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); TSlave*CreateSlave(const char* url, const char* ord, Int_t perf, const char* image, const char* workdir); TSlave*CreateSubmaster(const char* url, const char* ord, const char* image, const char* msd); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; static Bool_tGetFileInCmd(const char* cmd, TString& fn); static Int_tGetInputData(TList* input, const char* cachedir, TString& emsg); TList*GetListOfActiveSlaves() const; TVirtualProofPlayer*GetPlayer() const; TPluginHandler*GetProgressDialog() const; virtual void*TQObject::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidHandleLibIncPath(const char* what, Bool_t add, const char* dirs); Int_tInit(const char* masterurl, const char* conffile, const char* confdir, Int_t loglevel, const char* alias = 0); voidInitMembers(); virtual TVirtualProofPlayer*MakePlayer(const char* player = 0, TSocket* s = 0); voidTObject::MakeZombie(); voidPrepareInputDataFile(TString& dataFile); Int_tRemoveWorkers(TList* wrks); static Int_tSaveInputData(TQueryResult* qr, const char* cachedir, TString& emsg); virtual voidSaveWorkerInfo(); Int_tSendFile(const char* file, Int_t opt = (kBinary|kForward|kCp|kCpBin), const char* rfile = 0, TSlave* sl = 0); static Int_tSendInputData(TQueryResult* qr, TProof* p, TString& emsg); virtual voidSendInputDataFile(); voidSetDSet(TDSet* dset); voidSetPlayer(TVirtualProofPlayer* player); static void*SlaveStartupThread(void* arg); virtual Bool_tStartSlaves(Bool_t attach = kFALSE); static voidSystemCmd(const char* cmd, Int_t fdout); voidUpdateDialog(); virtual voidValidateDSet(TDSet* dset).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:18696,log,loglevel,18696,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,1,['log'],['loglevel']
Testability,"ListOfCanvases()->FindObject(""Canvas2"");; if (!h->IsHighlight()) { // after highlight disabled; if (Canvas2) delete Canvas2;; if (hz) { delete hz; hz = nullptr; }; return;; }; ; if (info) info->SetTitle("""");; ; if (!Canvas2) {; Canvas2 = new TCanvas(""Canvas2"", ""Canvas2"", 605, 0, 400, 400);; Canvas2->SetGrid();; if (hz) hz->Draw(); // after reopen this canvas; }; if (!hz) {; hz = (TH1 *)h->Clone(""hz"");; hz->SetTitle(TString::Format(""%s (zoomed)"", hz->GetTitle()));; hz->SetStats(kFALSE);; hz->Draw();; Canvas2->Update();; hz->SetHighlight(kFALSE);; }; ; Int_t zf = hz->GetNbinsX()*0.05; // zoom factor; hz->GetXaxis()->SetRange(xhb-zf, xhb+zf);; ; Canvas2->Modified();; Canvas2->Update();; }; ; void hlHisto4(); {; auto Canvas1 = new TCanvas(""Canvas1"", """", 0, 0, 600, 400);; Canvas1->HighlightConnect(""HighlightZoom(TVirtualPad*,TObject*,Int_t,Int_t)"");; ; auto f1 = new TF1(""f1"", ""x*gaus(0) + [3]*abs(sin(x)/x)"", -50.0, 50.0);; f1->SetParameters(20.0, 4.0, 1.0, 20.0);; auto h1 = new TH1F(""h1"", ""Test random numbers"", 200, -50.0, 50.0);; h1->FillRandom(""f1"", 100000);; h1->Draw();; h1->Fit(f1, ""Q"");; gStyle->SetGridColor(kGray);; Canvas1->SetGrid();; ; info = new TText(0.0, h1->GetMaximum()*0.7, ""please move the mouse over the frame"");; info->SetTextSize(0.04);; info->SetTextAlign(22);; info->SetTextColor(kRed-1);; info->SetBit(kCannotPick);; info->Draw();; ; Canvas1->Update();; ; // configure highlight at the end when histogram is already painted; h1->SetHighlight();; }; h#define h(i)Definition RSha256.hxx:106; Int_tint Int_tDefinition RtypesCore.h:45; kFALSEconstexpr Bool_t kFALSEDefinition RtypesCore.h:94; kGray@ kGrayDefinition Rtypes.h:65; kRed@ kRedDefinition Rtypes.h:66; kCannotPick@ kCannotPickDefinition TObject.h:372; gROOT#define gROOTDefinition TROOT.h:406; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; TAttText::SetTextAlignvirtual void SetTextAlign(Short_t align=11)Set the text alignment.Definition TAttText.h:42; TAttText::SetTextColorvirtual void SetTextCo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/hlHisto4_8C.html:1711,Test,Test,1711,doc/master/hlHisto4_8C.html,https://root.cern,https://root.cern/doc/master/hlHisto4_8C.html,1,['Test'],['Test']
Testability,"ListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; RooMinuit*_minuit! Internal minuit instance; static Int_tRooPrintable::_nameLength; Int_t_nevalNumber evaluations used in last minimization; RooRealProxy_nllInput -log(L) function; RooSetProxy_obsParameters of profile likelihood; RooArgSet_obsAbsMinObservable values at absolute minimum; TIterator*_oiter! Iterator of profile likelihood output parameter(s); RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; RooSetProxy_parMarginialized parameters of likelihood; RooArgSet_paramAbsMinParameter values at absolute minimum; map<std::string,bool>_paramFixedParameter constant status at last time of use; TIterator*_piter! Iterator over profile likelihood parameters to be minimized ; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooProfileLL.html:32298,log,log,32298,root/html530/RooProfileLL.html,https://root.cern,https://root.cern/root/html530/RooProfileLL.html,1,['log'],['log']
Testability,"ListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; RooMinuit*_minuit! Internal minuit instance; static Int_tRooPrintable::_nameLength; Int_t_nevalNumber evaluations used in last minimization; RooRealProxy_nllInput -log(L) function; RooSetProxy_obsParameters of profile likelihood; RooArgSet_obsAbsMinObservable values at absolute minimum; TIterator*_oiter! Iterator of profile likelihood output parameter(s); RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; RooSetProxy_parMarginialized parameters of likelihood; RooArgSet_paramAbsMinParameter values at absolute minimum; map<std::string,bool>_paramFixedParameter constant status at last time of use; TIterator*_piter! Iterator over profile likelihood parameters to be minimized ; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooProfileLL.html:32673,log,log,32673,root/html532/RooProfileLL.html,https://root.cern,https://root.cern/root/html532/RooProfileLL.html,1,['log'],['log']
Testability,"Lmultiset = 7; , ;   kSTLbitset = 8; , kSTLforwardlist = 9; , kSTLunorderedset = 10; , kSTLunorderedmultiset = 11; , ;   kSTLunorderedmap = 12; , kSTLunorderedmultimap = 13; , kROOTRVec = 14; , kSTLend = 15; , ;   kSTLany = 300; , kSTLstring = 365. };  ; enum  EThreadSlotReservation { ;   kMaxUserThreadSlot = 20; , kPadThreadSlot = 20; , kClassThreadSlot = 21; , kFileThreadSlot = 23; , ;   kPerfStatsThreadSlot = 24; , kMaxThreadSlot = 25. };  . Functions; void AddClass (const char *cname, Version_t id, const std::type_info &info, DictFuncPtr_t dict, Int_t pragmabits);  Global function called by the ctor of a class's init class (see the ClassImp macro). ;  ; void AddClass (const char *cname, Version_t id, DictFuncPtr_t dict, Int_t pragmabits);  ; void AddClassAlternate (const char *normName, const char *alternate);  Global function called by GenerateInitInstance. ;  ; void CallRecursiveRemoveIfNeeded (TObject &obj);  call RecursiveRemove for obj if gROOT is valid and obj.TestBit(kMustCleanup) is true. ;  ; void Class_ShowMembers (TClass *cl, const void *obj, TMemberInspector &);  Indirect call to the implementation of ShowMember allowing [forward] declaration with out a full definition of the TClass class. ;  ; static UInt_t ClassTableHash (const char *name, UInt_t size);  ; int CompressionSettings (RCompressionSetting::EAlgorithm algorithm, int compressionLevel);  ; int CompressionSettings (ROOT::ECompressionAlgorithm algorithm, int compressionLevel);  Deprecated name, do not use: ;  ; TClass * CreateClass (const char *cname, Version_t id, const char *dfil, const char *ifil, Int_t dl, Int_t il);  Global function called by a class' static Dictionary() method (see the ClassDef macro). ;  ; TClass * CreateClass (const char *cname, Version_t id, const std::type_info &info, TVirtualIsAProxy *isa, const char *dfil, const char *ifil, Int_t dl, Int_t il);  Global function called by a class' static Dictionary() method (see the ClassDef macro). ;  ; void DisableImplicitMT ();",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v626/namespaceROOT.html:7792,Test,TestBit,7792,doc/v626/namespaceROOT.html,https://root.cern,https://root.cern/doc/v626/namespaceROOT.html,1,['Test'],['TestBit']
Testability,"LoadTree(jentry); if ientry < 0:; break. # copy next entry into memory and verify; nb = mychain.GetEntry(jentry); if nb<=0:; continue. # use the values directly from the tree; nEvent = int(mychain.ev); if nEvent<0:; continue. print(mychain.pz, '=', mychain.px*mychain.px, '+', mychain.py*mychain.py); Access to arrays works the same way as access to single value tree elements, where the size of the array is determined by the number of values actually read from the file. For example:; # loop over array tree element; for d in mychain.mydoubles:; print(d). # direct access into an array tree element; i5 = mychain.myints[5]; 19.1.9.2 Writing a Tree; Writing a ROOT TTree in a Python session is a little convoluted, if only because you will need a C++ class to make sure that data members can be mapped, unless you are working with built-in types. Here is an example for working with the latter only:; from ROOT import TFile, TTree; from array import array. h = TH1F('h1','test',100,-10.,10.); f = TFile('test.root','recreate'); t = TTree('t1','tree with histos'); maxn = 10; n = array('i',[0]); d = array('f',maxn*[0.]); t.Branch('mynum',n,'mynum/I'); t.Branch('myval',d,'myval[mynum]/F'). for i in range(25):; n[0] = min(i,maxn); for j in range(n[0]):; d[j] = i*0.1+j; t.Fill(). f.Write(); f.Close(); The use of arrays is needed, because the pointer to the address of the object that is used for filling must be given to the TTree::Branch() call, even though the formal argument is declared a ’void*'. In the case of ROOT objects, similar pointer manipulation is unnecessary, because the full type information is available, and TTree::Branch() has been Pythonized to take care of the call details. However, data members of such objects that are of built-in types, still require something extra since they are normally translated to Python primitive types on access and hence their address cannot be taken. For that purpose, there is the AddressOf() function. As an example:; from ROOT import TFile, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1070567,test,test,1070567,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['test'],['test']
Testability,"Loader class; # global event weights per tree (see below for setting event-wise weights); signalWeight = 1.0; backgroundWeight = 1.0; # You can add an arbitrary number of signal or background trees; loader.AddSignalTree(signalTree, signalWeight); loader.AddBackgroundTree(backgroundTree, backgroundWeight); ; # Set individual event weights (the variables must exist in the original TTree); # for signal : factory->SetSignalWeightExpression (""weight1*weight2"");; # for background: factory->SetBackgroundWeightExpression(""weight1*weight2"");; # loader->SetBackgroundWeightExpression( ""weight"" );; ; ; # Apply additional cuts on the signal and background samples (can be different); mycuts = ROOT.TCut("""") # for example: TCut mycuts = ""abs(var1)<0.5 && abs(var2-0.5)<1"";; mycutb = ROOT.TCut("""") # for example: TCut mycutb = ""abs(var1)<0.5"";; ; # Tell the factory how to use the training and testing events; #; # If no numbers of events are given, half of the events in the tree are used; # for training, and the other half for testing:; # loader->PrepareTrainingAndTestTree( mycut, ""SplitMode=random:!V"" );; # To also specify the number of testing events, use:; ; loader.PrepareTrainingAndTestTree(; mycuts, mycutb, nTrain_Signal=7000, nTrain_Background=7000, SplitMode=""Random"", NormMode=""NumEvents"", V=False; ); ; ## Booking Methods; ; # Here we book the TMVA methods. We book first a Likelihood based on KDE (Kernel Density Estimation), a Fischer discriminant, a BDT; # and a shallow neural network; # Likelihood (""naive Bayes estimator""); if useLikelihood:; factory.BookMethod(; loader,; TMVA.Types.kLikelihood,; ""Likelihood"",; H=True,; V=False,; TransformOutput=True,; PDFInterpol=""Spline2:NSmoothSig[0]=20:NSmoothBkg[0]=20:NSmoothBkg[1]=10"",; NSmooth=1,; NAvEvtPerBin=50,; ); ; # Use a kernel density estimator to approximate the PDFs; if useLikelihoodKDE:; factory.BookMethod(; loader,; TMVA.Types.kLikelihood,; ""LikelihoodKDE"",; H=False,; V=False,; TransformOutput=False,; PDFInterpol=""KDE"",; KDE",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__Higgs__Classification_8py.html:60480,test,testing,60480,doc/master/TMVA__Higgs__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__Higgs__Classification_8py.html,3,['test'],['testing']
Testability,"Loading...; Searching...; No Matches. etaMax.h. Go to the documentation of this file. 1// @(#)root/mathcore:$Id$; 2// Authors: W. Brown, M. Fischler, L. Moneta 2005; 3 ; 4 /**********************************************************************; 5 * *; 6 * Copyright (c) 2005 , FNAL MathLib Team *; 7 * *; 8 * *; 9 **********************************************************************/; 10 ; 11 ; 12// Header source file for function etaMax; 13//; 14// Created by: Mark Fischler at Thu Jun 2 2005; 15 ; 16 ; 17#ifndef ROOT_Math_GenVector_etaMax; 18#define ROOT_Math_GenVector_etaMax 1; 19 ; 20 ; 21#include <limits>; 22#include <cmath>; 23 ; 24 ; 25namespace ROOT {; 26 ; 27 namespace Math {; 28 ; 29 /**; 30 The following function could be called to provide the maximum possible; 31 value of pseudorapidity for a non-zero rho. This is log ( max/min ); 32 where max and min are the extrema of positive values for type; 33 long double.; 34 */; 35 inline; 36 long double etaMax_impl() {; 37 using std::log;; 38 return log ( std::numeric_limits<long double>::max()/256.0l ) -; 39 log ( std::numeric_limits<long double>::denorm_min()*256.0l ); 40 + 16.0 * log(2.0);; 41 // Actual usage of etaMax() simply returns the number 22756, which is; 42 // the answer this would supply, rounded to a higher integer.; 43 }; 44 ; 45 /**; 46 Function providing the maximum possible value of pseudorapidity for; 47 a non-zero rho, in the Scalar type with the largest dynamic range.; 48 */; 49 template <class T>; 50 inline; 51 T etaMax() {; 52 return static_cast<T>(22756.0);; 53 }; 54 ; 55 } // namespace Math; 56 ; 57} // namespace ROOT; 58 ; 59 ; 60#endif /* ROOT_Math_GenVector_etaMax */; MathNamespace for new Math classes and functions.; ROOT::Math::etaMax_impllong double etaMax_impl()The following function could be called to provide the maximum possible value of pseudorapidity for a ...Definition etaMax.h:36; ROOT::Math::etaMaxT etaMax()Function providing the maximum possible value of pseudorapidity for a ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/etaMax_8h_source.html:1107,log,log,1107,doc/master/etaMax_8h_source.html,https://root.cern,https://root.cern/doc/master/etaMax_8h_source.html,2,['log'],['log']
Testability,"Log() << kFATAL << ""Validation size \"""" << fNumValidationString; 1153 << ""\"" is larger than or equal in size to training set (size=\"""" << trainingSetSize << ""\"")."" << Endl;; 1154 }; 1155 ; 1156 return nValidationSamples;; 1157}; 1158 ; 1159 ; 1160////////////////////////////////////////////////////////////////////////////////; 1161/// Implementation of architecture specific train method; 1162///; 1163template <typename Architecture_t>; 1164void MethodDL::TrainDeepNet(); 1165{; 1166 ; 1167 using Scalar_t = typename Architecture_t::Scalar_t;; 1168 using Layer_t = TMVA::DNN::VGeneralLayer<Architecture_t>;; 1169 using DeepNet_t = TMVA::DNN::TDeepNet<Architecture_t, Layer_t>;; 1170 using TensorDataLoader_t = TTensorDataLoader<TMVAInput_t, Architecture_t>;; 1171 ; 1172 bool debug = Log().GetMinType() == kDEBUG;; 1173 ; 1174 ; 1175 // set the random seed for weight initialization; 1176 Architecture_t::SetRandomSeed(fRandomSeed);; 1177 ; 1178 ///split training data in training and validation data; 1179 // and determine the number of training and testing examples; 1180 ; 1181 size_t nValidationSamples = GetNumValidationSamples();; 1182 size_t nTrainingSamples = GetEventCollection(Types::kTraining).size() - nValidationSamples;; 1183 ; 1184 const std::vector<TMVA::Event *> &allData = GetEventCollection(Types::kTraining);; 1185 const std::vector<TMVA::Event *> eventCollectionTraining{allData.begin(), allData.begin() + nTrainingSamples};; 1186 const std::vector<TMVA::Event *> eventCollectionValidation{allData.begin() + nTrainingSamples, allData.end()};; 1187 ; 1188 size_t trainingPhase = 1;; 1189 ; 1190 for (TTrainingSettings &settings : this->GetTrainingSettings()) {; 1191 ; 1192 size_t nThreads = 1; // FIXME threads are hard coded to 1, no use of slave threads or multi-threading; 1193 ; 1194 ; 1195 // After the processing of the options, initialize the master deep net; 1196 size_t batchSize = settings.batchSize;; 1197 this->SetBatchSize(batchSize);; 1198 // Should be replaced b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDL_8cxx_source.html:45121,test,testing,45121,doc/master/MethodDL_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDL_8cxx_source.html,1,['test'],['testing']
Testability,"Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << ""enable branches: targets"" << Endl;; 443 for (formIt = fTargetFormulas.begin(); formIt!=fTargetFormulas.end(); ++formIt) {; 444 ttf = *formIt;; 445 for (Int_t bi = 0; bi<ttf->GetNcodes(); bi++); 446 tr->SetBranchStatus( ttf->GetLeaf(bi)->GetBranch()->GetName(), 1 );; 447 }; 448 // spectators; 449 Log() << kDEBUG << Form(""Dataset[%s] : "",dsi.GetName()) << ""enable branches: spectators"" << Endl;; 450 for (formIt = fSpectatorFormulas.begin(); formIt!=fSpectatorFormulas.end(); ++formIt) {; 451 ttf = *formIt;; 452 for (Int_t bi = 0; bi<ttf->GetNcodes(); bi++); 453 tr->SetBranchStatus( ttf->GetLeaf(bi)->GetBranch()->GetName(), 1 );; 454 }; 455 // cuts; 456 Log() << kDEBUG << Form(""Dataset[%s] : "",dsi.GetName()) << ""enable branches: cuts"" << Endl;; 457 for (formIt = fCutFormulas.begin(); formIt!=fCutFormulas.end(); ++formIt) {; 458 ttf = *formIt;; 459 if (!ttf) continue;; 460 for (Int_t bi = 0; bi<ttf->GetNcodes(); bi++); 461 tr->SetBranchStatus( ttf->GetLeaf(bi)->GetBranch()->GetName(), 1 );; 462 }; 463 // weights; 464 Log() << kDEBUG << Form(""Dataset[%s] : "",dsi.GetName()) << ""enable branches: weights"" << Endl;; 465 for (formIt = fWeightFormula.begin(); formIt!=fWeightFormula.end(); ++formIt) {; 466 ttf = *formIt;; 467 if (!ttf) continue;; 468 for (Int_t bi = 0; bi<ttf->GetNcodes(); bi++); 469 tr->SetBranchStatus( ttf->GetLeaf(bi)->GetBranch()->GetName(), 1 );; 470 }; 471 }; 472 Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << ""tree initialized"" << Endl;; 473 return;; 474}; 475 ; 476////////////////////////////////////////////////////////////////////////////////; 477/// compute covariance matrix; 478 ; 479void TMVA::DataSetFactory::CalcMinMax( DataSet* ds, TMVA::DataSetInfo& dsi ); 480{; 481 const UInt_t nvar = ds->GetNVariables();; 482 const UInt_t ntgts = ds->GetNTargets();; 483 const UInt_t nvis = ds->GetNSpectators();; 484 ; 485 Float_t *min = new Float_t[nvar];; 486 Float_t *max = new Float_t[nvar];; 4",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataSetFactory_8cxx_source.html:19152,Log,Log,19152,doc/master/DataSetFactory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/DataSetFactory_8cxx_source.html,1,['Log'],['Log']
Testability,"Log() << kWARN << ""..."" << Endl; }; 2009 ; 2010 // TODO: Ensure matrices are same size.; 2011 ; 2012 TString header = TString::Format("" %-14s"", "" "");; 2013 TString headerInfo = TString::Format("" %-14s"", "" "");; 2014 ; 2015 for (UInt_t iCol = 0; iCol < numClasses; ++iCol) {; 2016 header += TString::Format("" %-14s"", classnames[iCol].Data());; 2017 headerInfo += TString::Format("" %-14s"", "" test (train)"");; 2018 }; 2019 stream << kINFO << header << Endl;; 2020 stream << kINFO << headerInfo << Endl;; 2021 ; 2022 for (UInt_t iRow = 0; iRow < numClasses; ++iRow) {; 2023 stream << kINFO << TString::Format("" %-14s"", classnames[iRow].Data());; 2024 ; 2025 for (UInt_t iCol = 0; iCol < numClasses; ++iCol) {; 2026 if (iCol == iRow) {; 2027 stream << kINFO << TString::Format("" %-14s"", ""-"");; 2028 } else {; 2029 Double_t trainValue = matTraining[iRow][iCol];; 2030 Double_t testValue = matTesting[iRow][iCol];; 2031 TString entry = TString::Format(""%-5.3f (%-5.3f)"", testValue, trainValue);; 2032 stream << kINFO << TString::Format("" %-14s"", entry.Data());; 2033 }; 2034 }; 2035 stream << kINFO << Endl;; 2036 }; 2037 };; 2038 ; 2039 Log() << kINFO << Endl;; 2040 Log() << kINFO << ""Confusion matrices for all methods"" << Endl;; 2041 Log() << kINFO << hLine << Endl;; 2042 Log() << kINFO << Endl;; 2043 Log() << kINFO << ""Does a binary comparison between the two classes given by a "" << Endl;; 2044 Log() << kINFO << ""particular row-column combination. In each case, the class "" << Endl;; 2045 Log() << kINFO << ""given by the row is considered signal while the class given "" << Endl;; 2046 Log() << kINFO << ""by the column index is considered background."" << Endl;; 2047 Log() << kINFO << Endl;; 2048 for (UInt_t iMethod = 0; iMethod < methods->size(); ++iMethod) {; 2049 MethodBase *theMethod = dynamic_cast<MethodBase *>(methods->at(iMethod));; 2050 if (theMethod == nullptr) {; 2051 continue;; 2052 }; 2053 UInt_t numClasses = theMethod->fDataSetInfo.GetNClasses();; 2054 ; 2055 std::vector<TString> cl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:85477,test,testValue,85477,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,1,['test'],['testValue']
Testability,"Log(\frac{xmax}{xmin})} \]. Let: ; \[ alfa = \frac{Log(\frac{xmax}{xmin})}{fAbsWNDC} \]. \[ x = xmin \times e^{(-alfa \times pxlow)} + e^{(alfa \times px)} \]. \[ x = fPixeltoXk \times e^{(fPixeltoX \times px)} \]. \[ ==> fPixeltoXk = xmin \times e^{(-alfa*pxlow)} \]. \[ fPixeltoX = alfa \]. \[; v = \frac{Log(y) - Log(ymin)}{Log(ymax) - Log(ymin)} = \frac{Log(y/ymin)}{Log(ymax/ymin)} = \frac{py - pylow}{pyrange}; \]. Let: ; \[ beta = Log(\frac{ymax}{ymin}) \]. \[ Log(\frac{y}{ymin}) = beta \times pylow - beta \times py \]. \[ \frac{y}{ymin} = e^{(beta \times pylow - beta \times py)} \]. \[ y = ymin \times e^{(beta \times pylow)} \times e^{(-beta \times py)}\]. \[ \Rightarrow y = fPixeltoYk \times e^{(fPixeltoY \times py)} \]. \[ fPixeltoYk = ymin \times e^{(beta \times pylow)} \]. \[ fPixeltoY = -beta \]. Conversion from World coordinates to pixel coordinates. \[ px = pxlow + u*pxrange \]. \[ = pxlow + Log(x/xmin)/alfa \]. \[ = pxlow -Log(xmin)/alfa + Log(x)/alfa \]. \[ = fXtoPixelk + fXtoPixel*Log(x) \]. \[ \Rightarrow fXtoPixelk = pxlow -Log(xmin)/alfa \]. \[ \Rightarrow fXtoPixel = 1/alfa \]. \[ py = pylow - Log(y/ymin)/beta \]. \[ = fYtoPixelk + fYtoPixel*Log(y) \]. \[ \Rightarrow fYtoPixelk = pylow - Log(ymin)/beta \]. \[ fYtoPixel = 1/beta \]. Implements TVirtualPad.; Definition at line 5624 of file TPad.cxx. ◆ SaveAs(). void TPad::SaveAs ; (; const char * ; filename = """", . Option_t * ; option = """" . ); const. overridevirtual . Save the pad content in a file. ; The file's format used to save the pad is determined by the filename extension:. if filename is empty, the file produced is padname.ps; if filename starts with a dot, the padname is added in front; if filename ends with .ps, a Postscript file is produced; if filename ends with .eps, an Encapsulated Postscript file is produced; if filename ends with .pdf, a PDF file is produced NOTE: TMathText will be converted to TLatex; q.e.d., symbols only available in TMathText will not render properly.; if filename ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPad.html:113346,Log,Log,113346,doc/master/classTPad.html,https://root.cern,https://root.cern/doc/master/classTPad.html,1,['Log'],['Log']
Testability,"LogHandler that multiplexes diagnostics to different client `RLogHandler`s; 131 and keeps track of the sum of `RLogDiagCount`s for all channels.; 132 ; 133 `RLogHandler::Get()` returns the process's (static) log manager.; 134 */; 135 ; 136class RLogManager : public RLogChannel, public RLogHandler {; 137 std::mutex fMutex;; 138 std::list<std::unique_ptr<RLogHandler>> fHandlers;; 139 ; 140public:; 141 /// Initialize taking a RLogHandler.; 142 RLogManager(std::unique_ptr<RLogHandler> lh) : RLogChannel(ELogLevel::kWarning); 143 {; 144 fHandlers.emplace_back(std::move(lh));; 145 }; 146 ; 147 static RLogManager &Get();; 148 ; 149 /// Add a RLogHandler in the front - to be called before all others.; 150 void PushFront(std::unique_ptr<RLogHandler> handler) { fHandlers.emplace_front(std::move(handler)); }; 151 ; 152 /// Add a RLogHandler in the back - to be called after all others.; 153 void PushBack(std::unique_ptr<RLogHandler> handler) { fHandlers.emplace_back(std::move(handler)); }; 154 ; 155 /// Remove and return the given log handler. Returns `nullptr` if not found.; 156 std::unique_ptr<RLogHandler> Remove(RLogHandler *handler);; 157 ; 158 // Emit a `RLogEntry` to the RLogHandlers.; 159 // Returns false if further emission of this Log should be suppressed.; 160 bool Emit(const RLogEntry &entry) override;; 161};; 162 ; 163/**; 164 A diagnostic location, part of an RLogEntry.; 165 */; 166struct RLogLocation {; 167 std::string fFile;; 168 std::string fFuncName;; 169 int fLine; // C++11 forbids ""= 0"" for braced-init-list initialization.; 170};; 171 ; 172/**; 173 A diagnostic that can be emitted by the RLogManager.; 174 One can construct a RLogEntry through RLogBuilder, including streaming into; 175 the diagnostic message and automatic emission.; 176 */; 177 ; 178class RLogEntry {; 179public:; 180 RLogLocation fLocation;; 181 std::string fMessage;; 182 RLogChannel *fChannel = nullptr;; 183 ELogLevel fLevel = ELogLevel::kFatal;; 184 ; 185 RLogEntry(ELogLevel level, RLogChannel",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RLogger_8hxx_source.html:5439,log,log,5439,doc/master/RLogger_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RLogger_8hxx_source.html,1,['log'],['log']
Testability,"LogInterval::GetMax ; (; ); const. inlinevirtual . Reimplemented from TMVA::Interval.; Definition at line 93 of file LogInterval.h. ◆ GetMean(). Double_t TMVA::LogInterval::GetMean ; (; ); const. virtual . Reimplemented from TMVA::Interval.; Definition at line 158 of file LogInterval.cxx. ◆ GetMin(). virtual Double_t TMVA::LogInterval::GetMin ; (; ); const. inlinevirtual . Reimplemented from TMVA::Interval.; Definition at line 92 of file LogInterval.h. ◆ GetNbins(). virtual Int_t TMVA::LogInterval::GetNbins ; (; ); const. inlinevirtual . Reimplemented from TMVA::Interval.; Definition at line 95 of file LogInterval.h. ◆ GetRndm(). Double_t TMVA::LogInterval::GetRndm ; (; TRandom3 & ; rnd); const. virtual . get uniformly distributed number within interval ; Reimplemented from TMVA::Interval.; Definition at line 144 of file LogInterval.cxx. ◆ GetStepSize(). Double_t TMVA::LogInterval::GetStepSize ; (; Int_t ; iBin = 0); const. virtual . returns the step size between the numbers of a ""discrete LogInterval"" ; Reimplemented from TMVA::Interval.; Definition at line 129 of file LogInterval.cxx. ◆ GetWidth(). Double_t TMVA::LogInterval::GetWidth ; (; ); const. virtual . Reimplemented from TMVA::Interval.; Definition at line 151 of file LogInterval.cxx. ◆ IsA(). virtual TClass * TMVA::LogInterval::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TMVA::Interval.; Definition at line 106 of file LogInterval.h. ◆ Log(). TMVA::MsgLogger & TMVA::LogInterval::Log ; (; ); const. Definition at line 165 of file LogInterval.cxx. ◆ SetMax(). void TMVA::LogInterval::SetMax ; (; Double_t ; m). inline . Definition at line 101 of file LogInterval.h. ◆ SetMin(). void TMVA::LogInterval::SetMin ; (; Double_t ; m). inline . Definition at line 102 of file LogInterval.h. ◆ Streamer(). virtual void TMVA::LogInterval::Streamer ; (; TBuffer & ; ). virtual . Reimplemented from TMVA::Interval. ◆ StreamerNVirtual(). void TMVA::LogInterval::StreamerNVirtual ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1LogInterval.html:5834,Log,LogInterval,5834,doc/master/classTMVA_1_1LogInterval.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1LogInterval.html,1,['Log'],['LogInterval']
Testability,"LogLikelihoodFCN< DerivFunType, ModelFunType >; IsAGradFCN()ROOT::Math::BasicFitMethodFunction< DerivFunType >inlinestatic; IsAGradFCN()ROOT::Math::BasicFitMethodFunction< DerivFunType >inline; kLeastSquare enum valueROOT::Math::BasicFitMethodFunction< DerivFunType >; kLogLikelihood enum valueROOT::Math::BasicFitMethodFunction< DerivFunType >; kPoissonLikelihood enum valueROOT::Math::BasicFitMethodFunction< DerivFunType >; kUndefined enum valueROOT::Math::BasicFitMethodFunction< DerivFunType >; LogLikelihoodFCN(const std::shared_ptr< UnBinData > &data, const std::shared_ptr< IModelFunction > &func, int weight=0, bool extended=false, const ::ROOT::EExecutionPolicy &executionPolicy=::ROOT::EExecutionPolicy::kSequential)ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >inline; LogLikelihoodFCN(const UnBinData &data, const IModelFunction &func, int weight=0, bool extended=false, const ::ROOT::EExecutionPolicy &executionPolicy=::ROOT::EExecutionPolicy::kSequential)ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >inline; LogLikelihoodFCN(const LogLikelihoodFCN &f)ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >inline; ModelFunction() constROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >inlinevirtual; ModelFunctionPtr() constROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >inline; NCalls() constROOT::Math::BasicFitMethodFunction< DerivFunType >inlinevirtual; NDim() const overrideROOT::Math::BasicFitMethodFunction< DerivFunType >inline; NFitPoints() constROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >inlinevirtual; NPoints() constROOT::Math::BasicFitMethodFunction< DerivFunType >inlinevirtual; operator=(const LogLikelihoodFCN &rhs)ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >inline; ResetNCalls()ROOT::Math::BasicFitMethodFunction< DerivFunType >inlinevirtual; SetData(const std::shared_ptr< DataType > &data)ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >inlineprotected; SetModelFunction(const std::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN-members.html:3769,Log,LogLikelihoodFCN,3769,doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN-members.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN-members.html,1,['Log'],['LogLikelihoodFCN']
Testability,"LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>&); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>&operator=(const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>&). Data Members; public:. enum ROOT::Math::BasicFitMethodFunction::Type_t { kUndefined; kLeastSquare; kLogLikelihood; };. private:. const ROOT::Fit::UnBinData&fData; const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction&fFunc; vector<double>fGradfor derivatives; boolfIsExtendedflag for indicating if likelihood is extended; unsigned intfNEffPointsnumber of effective points used in the fit ; intfWeightflag to indicate if needs to evaluate using weight or weight squared (default weight = 0). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseFunction * Clone() const; clone the function (need to return Base for Windows). { return new LogLikelihoodFCN(fData,fFunc,fWeight,fIsExtended); }. unsigned int NFitPoints() const; using BaseObjFunction::operator();; effective points used in the fit. { return fNEffPoints; }. double DataElement(const double* x, unsigned int i, double* g) const; i-th likelihood contribution and its gradient. void Gradient(const double* x, double* g) const; need to be virtual to be instantited. void UseSumOfWeightSquare(); Use sum of the weight squared in evaluating the likelihood; (this is needed for calculating the errors). double DoEval(const double* x) const. Evaluation of the function (required by interface). double DoDerivative(const double* x, unsigned int icoord) const; for derivatives. » Author: L. Moneta Fri Aug 17 14:29:24 2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id: LogLikelihoodFCN.h 42007 2011-11-15 13:23:17Z moneta $ » Last generated: 2011-12-02 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html:4598,Log,LogLikelihoodFCN,4598,root/html532/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html532/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,1,['Log'],['LogLikelihoodFCN']
Testability,"LogNewdisplay logs button; TProofLog*fProofLogthe log; TGCheckButton*fRawLinesdisplay raw lines button; TGTextButton*fSavesave button; TGNumberEntry*fSessNumrelative index of the session to get; Int_tfSessionIdx; TStringfSessionUrl; TGTextView*fTexttext widget; Int_tfTextTypeType of retrieval; TGTextButton*fUrlButtonrebuild button; TGTextEntry*fUrlTexturl to connect to; TGVerticalFrame*fVworkersVertical frame; static TProofProgressLog::ETextTypekGrep; static TProofProgressLog::ETextTypekRaw; static TProofProgressLog::ETextTypekStd. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressLog(TProofProgressDialog* d, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. TProofProgressLog(const char* url = 0, Int_t sessionidx = 0, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. void Init(Int_t w = 700, Int_t h = 600); Init window frame for log messages. ~TProofProgressLog(); Destructor. void Popup(); Show log window. void Clear(Option_t* = 0); Clear log window. void LoadBuffer(const char* buffer); Load a text buffer in the window. void LoadFile(const char* file); Load a file in the window. void AddBuffer(const char* buffer); Add text to the window. void CloseWindow(); Handle close button or when closed via window manager action. void BuildLogList(Bool_t create = kFALSE); Build the list of workers. For this, extract the logs and take the names; of TProofLogElements. void DoLog(Bool_t grep = kFALSE); Display logs. 'grep' is set to kTRUE if it is invoked by pressing the; 'Filter' button. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame, if open. void SaveToFile(); Save the logs to a file; Only the name of the file is taken, no expansion. void SetGrepView(); Sets the view of grep filters according to the value of checkboxes. void NoLineEntry(); Enable/disable the line number entry. void Select(Int_t id, Bool_t all = kTRUE); actions of select all/clear",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofProgressLog.html:25301,log,log,25301,root/html602/TProofProgressLog.html,https://root.cern,https://root.cern/root/html602/TProofProgressLog.html,2,['log'],['log']
Testability,"Long64_t l64 = 0, Int_t int3 = 0, const char* opt = 0); Int_tSendInterrupt(Int_t type); virtual Int_tTSocket::SendObject(const TObject* obj, Int_t kind = kMESS_OBJECT); virtual Int_tSendRaw(const void* buf, Int_t len, ESendRecvOptions opt = kDontBlock); voidSendUrgent(Int_t type, Int_t int1, Int_t int2); voidSetAWait(Bool_t w = kTRUE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidSetClientID(Int_t); voidTSocket::SetCompressionAlgorithm(Int_t algorithm = 0); voidTSocket::SetCompressionLevel(Int_t level = 1); voidTSocket::SetCompressionSettings(Int_t settings = 1); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetInterrupt(Bool_t i = kTRUE); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual Int_tSetOption(ESockOptions, Int_t); voidTSocket::SetRemoteProtocol(Int_t rproto); voidTSocket::SetSecContext(TSecContext* ctx); voidSetSendOpt(ESendRecvOptions o); voidTSocket::SetService(const char* service); voidTSocket::SetServType(Int_t st); voidSetSessionID(Int_t id); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); voidTSocket::SetUrl(const char* url); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTSocket::Touch(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TXSocket.html:8304,Test,TestBit,8304,root/html534/TXSocket.html,https://root.cern,https://root.cern/root/html534/TXSocket.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"Long_tTApplication::ProcessLine(const char* line, Bool_t sync = kFALSE, Int_t* error = 0); Bool_tTApplication::QuitOpt() const; virtual voidTApplication::Raise(); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTApplication::RemoveIdleTimer(); voidTObject::ResetBit(UInt_t f); Bool_tTApplication::ReturnFromRun() const; virtual voidTApplication::ReturnPressed(char* text)SIGNAL ; virtual voidTApplication::Run(Bool_t retrn = kFALSE); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTApplication::SetEchoMode(Bool_t mode); virtual voidTApplication::SetIdleTimer(UInt_t idleTimeInSec, const char* command); static voidTObject::SetObjectStat(Bool_t stat); voidTApplication::SetReturnFromRun(Bool_t ret); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTApplication::Show(); virtual voidShowMembers(TMemberInspector& insp); virtual voidTApplication::StartIdleing(); virtual voidTApplication::StopIdleing(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual Int_tTApplication::TabCompletionHook(char* buf, int* pLoc, ostream& out); virtual voidTApplication::Terminate(Int_t status = 0)SIGNAL ; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; const char*TApplication::WorkingDirectory() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGApplication.html:9637,Test,TestBit,9637,root/html530/TGApplication.html,https://root.cern,https://root.cern/root/html530/TGApplication.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"LorentzVector operator - () const {; 490 //LorentzVector<CoordinateType> v(*this);; 491 //v.Negate();; 492 return operator*( Scalar(-1) );; 493 }; 494 LorentzVector operator + () const {; 495 return *this;; 496 }; 497 ; 498 // ---- Relativistic Properties ----; 499 ; 500 /**; 501 Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]; 502 */; 503 Scalar Rapidity() const {; 504 // TODO - It would be good to check that E > Pz and use the Throw(); 505 // mechanism or at least load a NAN if not.; 506 // We should then move the code to a .cpp file.; 507 const Scalar ee = E();; 508 const Scalar ppz = Pz();; 509 using std::log;; 510 return Scalar(0.5) * log((ee + ppz) / (ee - ppz));; 511 }; 512 ; 513 /**; 514 Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]; 515 */; 516 Scalar ColinearRapidity() const {; 517 // TODO - It would be good to check that E > P and use the Throw(); 518 // mechanism or at least load a NAN if not.; 519 const Scalar ee = E();; 520 const Scalar pp = P();; 521 using std::log;; 522 return Scalar(0.5) * log((ee + pp) / (ee - pp));; 523 }; 524 ; 525 /**; 526 Determine if momentum-energy can represent a physical massive particle; 527 */; 528 bool isTimelike( ) const {; 529 Scalar ee = E(); Scalar pp = P(); return ee*ee > pp*pp;; 530 }; 531 ; 532 /**; 533 Determine if momentum-energy can represent a massless particle; 534 */; 535 bool isLightlike( Scalar tolerance; 536 = 100*std::numeric_limits<Scalar>::epsilon() ) const {; 537 Scalar ee = E(); Scalar pp = P(); Scalar delta = ee-pp;; 538 if ( ee==0 ) return pp==0;; 539 return delta*delta < tolerance * ee*ee;; 540 }; 541 ; 542 /**; 543 Determine if momentum-energy is spacelike, and represents a tachyon; 544 */; 545 bool isSpacelike( ) const {; 546 Scalar ee = E(); Scalar pp = P(); return ee*ee < pp*pp;; 547 }; 548 ; 549 typedef DisplacementVector3D< Cartesian3D<Scalar> > BetaVector;; 550 ; 551 /**; 552 The beta vector for the boost that would bring this vector into; 553 its center of m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GenVector_2LorentzVector_8h_source.html:16842,log,log,16842,doc/master/GenVector_2LorentzVector_8h_source.html,https://root.cern,https://root.cern/doc/master/GenVector_2LorentzVector_8h_source.html,1,['log'],['log']
Testability,"Low.empty() ? nullptr : &fDataErrorLow.front();; 715 ; 716 fDataError.clear();; 717 fDataErrorPtr = nullptr;; 718 }; 719 else; 720 {; 721 assert(false);; 722 }; 723 }; 724 ; 725 void BinData::InitBinEdge(); 726 {; 727 fBinEdge.resize( fDim );; 728 ; 729 for( unsigned int i=0; i<fDim; i++ ); 730 {; 731 fBinEdge[i].reserve(fMaxPoints + FitData::VectorPadding(fMaxPoints));; 732 }; 733 ; 734 if ( fpTmpBinEdgeVector ); 735 {; 736 delete[] fpTmpBinEdgeVector;; 737 fpTmpBinEdgeVector = nullptr;; 738 }; 739 ; 740 fpTmpBinEdgeVector = new double[ fDim ];; 741 }; 742 ; 743 void BinData::UnWrap( ); 744 {; 745 assert( fWrapped );; 746 assert( kValueError == fErrorType || kCoordError == fErrorType ||; 747 kAsymError == fErrorType || kNoError == fErrorType );; 748 assert( fDataError.empty() || &fDataError.front() == fDataErrorPtr );; 749 assert( fDataErrorHigh.empty() || &fDataErrorHigh.front() == fDataErrorHighPtr );; 750 assert( fDataErrorLow.empty() || &fDataErrorLow.front() == fDataErrorLowPtr );; 751 assert( fDataErrorLow.empty() == fDataErrorHigh.empty() );; 752 ; 753 assert( fData.empty() );; 754 assert( fDataPtr );; 755 ; 756 unsigned vectorPadding = FitData::VectorPadding(fNPoints);; 757 fData.resize(fNPoints + vectorPadding);; 758 std::copy( fDataPtr, fDataPtr + fNPoints, fData.begin() );; 759 fDataPtr = fData.empty() ? nullptr : &fData.front();; 760 ; 761 for ( unsigned int i=0; i < fDim; i++ ); 762 {; 763 assert( fCoordErrorsPtr[i] );; 764 assert( fCoordErrors.empty() || &fCoordErrors[i].front() == fCoordErrorsPtr[i] );; 765 }; 766 ; 767 if( kValueError == fErrorType || kCoordError == fErrorType ); 768 {; 769 assert( fDataError.empty() );; 770 assert( fDataErrorPtr );; 771 ; 772 fDataError.resize(fNPoints + vectorPadding);; 773 std::copy(fDataErrorPtr, fDataErrorPtr + fNPoints + vectorPadding, fDataError.begin());; 774 fDataErrorPtr = fDataError.empty() ? nullptr : &fDataError.front();; 775 }; 776 ; 777 if ( kValueError == fErrorType ); 778 {; 779 for ( unsigned int i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BinData_8cxx_source.html:22911,assert,assert,22911,doc/master/BinData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/BinData_8cxx_source.html,1,['assert'],['assert']
Testability,MCIntegrator.cxx;  GSLMinimizer.cxx;  GSLMinimizer1D.cxx;  GSLMonteFunctionAdapter.h;  GSLMonteFunctionWrapper.h;  GSLMultiFit.h;  GSLMultiFitFunctionAdapter.h;  GSLMultiFitFunctionWrapper.h;  GSLMultiMinFunctionAdapter.h;  GSLMultiMinFunctionWrapper.h;  GSLMultiMinimizer.h;  GSLMultiRootFinder.cxx;  GSLMultiRootFunctionAdapter.h;  GSLMultiRootFunctionWrapper.h;  GSLMultiRootSolver.h;  GSLNLSMinimizer.cxx;  GSLQRngWrapper.h;  GSLQuasiRandom.cxx;  GSLRndmEngines.cxx;  GSLRngWrapper.h;  GSLRootFdFSolver.h;  GSLRootFinder.cxx;  GSLRootFinderDeriv.cxx;  GSLRootFSolver.h;  GSLRootHelper.cxx;  GSLSimAnMinimizer.cxx;  GSLSimAnnealing.cxx;  Interpolator.cxx;  KelvinFunctions.cxx;  MCParameters.cxx;  MultiNumGradFunction.cxx;  PdfFuncMathMore.cxx;  Polynomial.cxx;  QuantFuncMathMore.cxx;  RootFinderAlgorithms.cxx;  SpecFuncMathMore.cxx;  Vavilov.cxx;  VavilovAccurate.cxx;  VavilovAccurateCdf.cxx;  VavilovAccuratePdf.cxx;  VavilovAccurateQuantile.cxx;  VavilovFast.cxx;  zsolve_cubic.cxx;  ► test;  piRandom.C;  pirndm.C;  simanTSP.cxx;  testChebyshev.cxx;  testDerivation.cxx;  testFunctor.cxx;  testGSLIntegration.cxx;  testGSLRootFinder.cxx;  testInterpolation.cxx;  testMCIntegration.cxx;  testMinimization1D.cxx;  testMultiRootFinder.cxx;  testPermute.cxx;  testQuasiRandom.cxx;  testRandom.cxx;  testRandomDist.cxx;  testSpecFunc.cxx;  testStatFunc.cxx;  testVavilov.cxx;  UnuRanDist.h;  VavilovTest.cxx;  VavilovTest.h;  ► matrix;  ► inc;  LinkDef.h;  TDecompBase.h;  TDecompBK.h;  TDecompChol.h;  TDecompLU.h;  TDecompQRH.h;  TDecompSparse.h;  TDecompSVD.h;  TMatrix.h;  TMatrixD.h;  TMatrixDBase.h;  TMatrixDBasefwd.h;  TMatrixDEigen.h;  TMatrixDfwd.h;  TMatrixDLazy.h;  TMatrixDSparse.h;  TMatrixDSparsefwd.h;  TMatrixDSym.h;  TMatrixDSymEigen.h;  TMatrixDSymfwd.h;  TMatrixDUtils.h;  TMatrixDUtilsfwd.h;  TMatrixF.h;  TMatrixFBase.h;  TMatrixFBasefwd.h;  TMatrixFfwd.h;  TMatrixFLazy.h;  TMatrixFSparse.h;  TMatrixFSparsefwd.h;  TMatrixFSym.h;  TMatrixFSymfwd.h;  TMatrixFUtils.h;  TMa,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html606/files.html:48734,test,test,48734,root/html606/files.html,https://root.cern,https://root.cern/root/html606/files.html,1,['test'],['test']
Testability,"MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillColorAlpha(Color_t fcolor, Float_t falpha); virtual voidTAttFill::SetFillStyle(Style_t fstyle); voidSetHistogramBinning(Int_t n = 100)MENU ; voidSetHistogramHeight(Double_t h = 0)MENU ; voidSetHistogramLineWidth(Int_t lw = 2)MENU ; voidSetInitMax(Double_t max); voidSetInitMin(Double_t min); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); voidSetLiveRangesUpdate(Bool_t on); voidSetLogScale(Bool_t log)TOGGLE GETTER ; virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetTitle(const char*); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetValues(Long64_t length, Double_t* val); voidSetX(Double_t x, Bool_t gl); voidSetY(Double_t y, Bool_t gl); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TParallelCoordVar(); TParallelCoordVar(const TParallelCoordVar&); TParallelCoordVar(Double_t* val, const char* title, Int_t id, TParallelCoord* gram); voidUnzoom()MENU ; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TParallelCoordVar.html:7871,Test,TestBit,7871,root/html602/TParallelCoordVar.html,https://root.cern,https://root.cern/root/html602/TParallelCoordVar.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; voidSmoothin(TGraph* grin); TGraph*SmoothKern(TGraph* grin, Option_t* option = ""normal"", Double_t bandwidth = 0.5, Int_t nout = 100, Double_t* xout = 0); TGraph*SmoothLowess(TGraph* grin, Option_t* option = """", Double_t span = 0.67, Int_t iter = 3, Double_t delta = 0); TGraph*SmoothSuper(TGraph* grin, Option_t* option = """", Double_t bass = 0, Double_t span = 0, Bool_t isPeriodic = kFALSE, Double_t* w = 0); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. TGraphSmooth(const TGraphSmooth&); TGraphSmooth&operator=(const TGraphSmooth&). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TGraph*fGinInput graph; TGraph*fGoutOutput graph; Double_tfMaxXMaximum value of array X; Double_tfMinXMinimum value of ar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGraphSmooth.html:6326,Test,TestBit,6326,root/html534/TGraphSmooth.html,https://root.cern,https://root.cern/root/html534/TGraphSmooth.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"MENU ; static voidTTree::SetMaxTreeSize(Long64_t maxsize = 1900000000); virtual voidTTree::SetMaxVirtualSize(Long64_t size = 0)MENU ; virtual voidTTree::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTTree::SetNotify(TObject* obj); virtual voidTTree::SetObject(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTTree::SetParallelUnzip(Bool_t opt = kTRUE, Float_t RelSize = -1); virtual voidTTree::SetPerfStats(TVirtualPerfStats* perf); virtual voidTTree::SetScanField(Int_t n = 50)MENU ; virtual voidTTree::SetTimerInterval(Int_t msec = 333); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTTree::SetTreeIndex(TVirtualIndex* index); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTTree::SetUpdate(Int_t freq = 0); virtual voidTTree::SetWeight(Double_t w = 1, Option_t* option = """"); virtual voidTTree::Show(Long64_t entry = -1, Int_t lenmax = 20); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidTTree::StartViewer()MENU ; virtual voidTTree::StopCacheLearningPhase(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TNtupleD(); TNtupleD(const char* name, const char* title, const char* varlist, Int_t bufsize = 32000); virtual Int_tTTree::UnbinnedFit(const char* funcname, const char* varexp, const char* selection = """", Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); virtual voidTTree::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTTree::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTTree::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TNtupleD.html:19253,Test,TestBit,19253,root/html602/TNtupleD.html,https://root.cern,https://root.cern/root/html602/TNtupleD.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"MENU ; virtual Long64_tTDSet::Process(const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0, TObject* enl = 0)MENU ; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); Int_tTDSet::Remove(TDSetElement* elem, Bool_t deleteElem = kTRUE); virtual voidReset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTDSet::SetDirectory(const char* dir); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTDSet::SetEntryList(TObject* aList); voidTDSet::SetLookedUp(); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidTDSet::SetObjName(const char* objname); voidSetProofServ(TProofServ* serv); voidTDSet::SetSrvMaps(TList* srvmaps = 0); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); voidTDSet::SetWriteV3(Bool_t on = kTRUE); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidTDSet::StartViewer()MENU ; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); voidTDSet::Validate(); voidTDSet::Validate(TDSet* dset); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TDSetProxy.html:6930,Test,TestBit,6930,root/html534/TDSetProxy.html,https://root.cern,https://root.cern/root/html534/TDSetProxy.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillColorAlpha(Color_t fcolor, Float_t falpha); virtual voidTAttFill::SetFillStyle(Style_t fstyle); virtual voidTText::SetMbTitle(const wchar_t* title = L"""")MENU ; virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTText::SetNDC(Bool_t isNDC = kTRUE); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTText::SetText(Double_t x, Double_t y, const char* text)MENU ; virtual voidTText::SetText(Double_t x, Double_t y, const wchar_t* text); virtual voidTAttText::SetTextAlign(Short_t align = 11); virtual voidTAttText::SetTextAngle(Float_t tangle = 0)MENU ; virtual voidTAttText::SetTextAttributes()MENU ; virtual voidTAttText::SetTextColor(Color_t tcolor = 1); virtual voidTAttText::SetTextColorAlpha(Color_t tcolor, Float_t talpha); virtual voidTAttText::SetTextFont(Font_t tfont = 62); virtual voidTAttText::SetTextSize(Float_t tsize = 1); virtual voidTAttText::SetTextSizePixels(Int_t npixels); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTText::SetX(Double_t x)MENU ; virtual voidTText::SetY(Double_t y)MENU ; virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TMathText(); TMathText(const TMathText& text); TMathText(Double_t x, Double_t y, const char* text); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMathText.html:60796,Test,TestBit,60796,root/html602/TMathText.html,https://root.cern,https://root.cern/root/html602/TMathText.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"MENU*; 253 void CheckGeometry(Option_t *option = """");; 254 void CheckOverlaps(Double_t ovlp = 0.1, Option_t *option = """"); // *MENU*; 255 void CheckPoint(Double_t x = 0, Double_t y = 0, Double_t z = 0, Option_t *option = """", Double_t safety = 0.); // *MENU*; 256 void CheckShape(TGeoShape *shape, Int_t testNo, Int_t nsamples, Option_t *option);; 257 void ConvertReflections();; 258 void DrawCurrentPoint(Int_t color = 2); // *MENU*; 259 void DrawTracks(Option_t *option = """"); // *MENU*; 260 void SetParticleName(const char *pname) { fParticleName = pname; }; 261 const char *GetParticleName() const { return fParticleName.Data(); }; 262 void DrawPath(const char *path, Option_t *option = """");; 263 void PrintOverlaps() const; // *MENU*; 264 void RandomPoints(const TGeoVolume *vol, Int_t npoints = 10000, Option_t *option = """");; 265 void RandomRays(Int_t nrays = 1000, Double_t startx = 0, Double_t starty = 0, Double_t startz = 0,; 266 const char *target_vol = nullptr, Bool_t check_norm = kFALSE);; 267 TGeoNode *SamplePoints(Int_t npoints, Double_t &dist, Double_t epsil = 1E-5, const char *g3path = """");; 268 void SetNmeshPoints(Int_t npoints = 1000);; 269 void SetCheckedNode(TGeoNode *node);; 270 void Test(Int_t npoints = 1000000, Option_t *option = """"); // *MENU*; 271 void TestOverlaps(const char *path = """"); // *MENU*; 272 Double_t Weight(Double_t precision = 0.01, Option_t *option = ""va""); // *MENU*; 273 ; 274 //--- GEANT3-like geometry creation; 275 TGeoVolume *Division(const char *name, const char *mother, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step,; 276 Int_t numed = 0, Option_t *option = """");; 277 void; 278 Matrix(Int_t index, Double_t theta1, Double_t phi1, Double_t theta2, Double_t phi2, Double_t theta3, Double_t phi3);; 279 TGeoMaterial *Material(const char *name, Double_t a, Double_t z, Double_t dens, Int_t uid, Double_t radlen = 0,; 280 Double_t intlen = 0);; 281 TGeoMaterial *; 282 Mixture(const char *name, Float_t *a, Float_t *z, Double_t dens, Int_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoManager_8h_source.html:13839,Test,Test,13839,doc/master/TGeoManager_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoManager_8h_source.html,2,['Test'],"['Test', 'TestOverlaps']"
Testability,"MHz) with 256 MB of memory and 18GB IDE disk in ROOTMARKS. Higher ROOTMARKS means better performance. The reference machine has 200 ROOTMARKS, so the sample run below with 53.7 ROOTMARKS is about four times slower than the reference machine.; Here is a sample run:; % root -b; root[] .x stress.cxx(30). Test 1 : Functions, Random Numbers, Histogram Fits............. OK; Test 2 : Check size & compression factor of a Root file........ OK; Test 3 : Purge, Reuse of gaps in TFile......................... OK; Test 4 : Test of 2-d histograms, functions, 2-d fits........... OK; Test 5 : Test graphics & PostScript ............................OK; Test 6 : Test subdirectories in a Root file.................... OK; Test 7 : TNtuple, selections, TCutG, TEventList.......... OK; Test 8 : Trees split and compression modes..................... OK; Test 9 : Analyze Event.root file of stress 8................... OK; Test 10 : Create 10 files starting from Event.root.............. OK; Test 11 : Test chains of Trees using the 10 files............... OK; Test 12 : Compare histograms of test 9 and 11................... OK; Test 13 : Test merging files of a chain......................... OK; Test 14 : Check correct rebuilt of Event.root in test 13........ OK; Test 15 : Divert Tree branches to separate files................ OK; Test 16 : Cling test (3 nested loops) with LHCb trigger.......... OK; ******************************************************************; * IRIX64 fnpat1 6.5 01221553 IP27; ******************************************************************; stress : Total I/O = 75.3 Mbytes, I = 59.2, O = 16.1; stress : Compr I/O = 75.7 Mbytes, I = 60.0, O = 15.7; stress : Real Time = 307.61 seconds Cpu Time = 292.82 seconds; ******************************************************************; * ROOTMARKS = 53.7 * Root2.25/00 20000710/1022; 20.2.3 guitest - A Graphical User Interface. The guitest example, created by compiling guitest.cxx, tests and illustrates the use of the native GUI wi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1085191,Test,Test,1085191,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['Test'],['Test']
Testability,"MINUIT:ErrorLevel=1:PrintLevel=-1:FitStrategy=2:UseImprove:UseMinos:SetBatch"" );; ; if (Use[""FDA_GAMT""]); factory->BookMethod( dataloader, TMVA::Types::kFDA, ""FDA_GAMT"",; ""!H:!V:Formula=(0)+(1)*x0+(2)*x1:ParRanges=(-100,100);(-100,100);(-100,100):FitMethod=GA:Converger=MINUIT:ErrorLevel=1:PrintLevel=-1:FitStrategy=0:!UseImprove:!UseMinos:SetBatch:Cycles=1:PopSize=5:Steps=5:Trim"" );; ; // Neural network (MLP); if (Use[""MLP""]); factory->BookMethod( dataloader, TMVA::Types::kMLP, ""MLP"", ""!H:!V:VarTransform=Norm:NeuronType=tanh:NCycles=20000:HiddenLayers=N+20:TestRate=6:TrainingMethod=BFGS:Sampling=0.3:SamplingEpoch=0.8:ConvergenceImprove=1e-6:ConvergenceTests=15:!UseRegulator"" );; ; if (Use[""DNN_CPU""] || Use[""DNN_GPU""]) {; ; TString archOption = Use[""DNN_GPU""] ? ""GPU"" : ""CPU"";; ; TString layoutString(""Layout=TANH|50,TANH|50,TANH|50,LINEAR"");; ; ; TString trainingStrategyString(""TrainingStrategy="");; ; trainingStrategyString +=""LearningRate=1e-3,Momentum=0.3,ConvergenceSteps=20,BatchSize=50,TestRepetitions=1,WeightDecay=0.0,Regularization=None,Optimizer=Adam"";; ; TString nnOptions(""!H:V:ErrorStrategy=SUMOFSQUARES:VarTransform=G:WeightInitialization=XAVIERUNIFORM:Architecture="");; nnOptions.Append(archOption);; nnOptions.Append("":"");; nnOptions.Append(layoutString);; nnOptions.Append("":"");; nnOptions.Append(trainingStrategyString);; ; TString methodName = TString(""DNN_"") + archOption;; ; factory->BookMethod(dataloader, TMVA::Types::kDL, methodName, nnOptions); // NN; }; ; ; ; // Support Vector Machine; if (Use[""SVM""]); factory->BookMethod( dataloader, TMVA::Types::kSVM, ""SVM"", ""Gamma=0.25:Tol=0.001:VarTransform=Norm"" );; ; // Boosted Decision Trees; if (Use[""BDT""]); factory->BookMethod( dataloader, TMVA::Types::kBDT, ""BDT"",; ""!H:!V:NTrees=100:MinNodeSize=1.0%:BoostType=AdaBoostR2:SeparationType=RegressionVariance:nCuts=20:PruneMethod=CostComplexity:PruneStrength=30"" );; ; if (Use[""BDTG""]); factory->BookMethod( dataloader, TMVA::Types::kBDT, ""BDTG"",; ""!H:!V:NTrees=2000::Bo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:144529,Test,TestRepetitions,144529,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['TestRepetitions']
Testability,"ML helpers. const char* GetContent(void* node); XML helpers. const char* GetName(void* node); XML helpers. Bool_t AddRawLine(void* node, const char* raw); XML helpers. std::vector<TString> SplitString(const TString& theOpt, const char separator) const; splits the option string at 'separator' and fills the list; 'splitV' with the primitive strings. TString StringFromInt(Long_t i); string tools. TString StringFromDouble(Double_t d); string tools. void WriteTMatrixDToXML(void* node, const char* name, TMatrixD* mat); XML helpers. void WriteTVectorDToXML(void* node, const char* name, TVectorD* vec). void ReadTVectorDFromXML(void* node, const char* name, TVectorD* vec). void ReadTMatrixDFromXML(void* node, const char* name, TMatrixD* mat). void TMVAWelcomeMessage(); direct output, eg, when starting ROOT session -> no use of Logger here. void TMVAVersionMessage(TMVA::MsgLogger& logger); prints the TMVA release number and date. void ROOTVersionMessage(TMVA::MsgLogger& logger); prints the ROOT release number and date. void TMVAWelcomeMessage(TMVA::MsgLogger& logger, TMVA::Tools::EWelcomeMessage m = kStandardWelcomeMsg); various kinds of welcome messages; ASCII text generated by this site: http://www.network-science.de/ascii. void TMVACitation(TMVA::MsgLogger& logger, TMVA::Tools::ECitation citType = kPlainText); kinds of TMVA citation. Bool_t HistoHasEquidistantBins(const TH1& h). CalcCovarianceMatrices(const vector<TMVA::Event*,allocator<TMVA::Event*> >& events, Int_t maxCls); compute covariance matrices. Double_t ComputeVariance(Double_t sumx2, Double_t sumx, Int_t nx). Tools(). TXMLEngine& xmlengine(); { return *fXMLEngine; }. » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id: Tools.h 37399 2010-12-08 15:22:07Z evt $ » Last generated: 2010-12-08 16:56; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__Tools.html:11723,log,logger,11723,root/html528/TMVA__Tools.html,https://root.cern,https://root.cern/root/html528/TMVA__Tools.html,2,['log'],['logger']
Testability,"ML(void* trfnode); virtual voidReadTransformationFromStream(istream&, const TString&); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::VariableTransformBase::SetEnabled(Bool_t e); voidTMVA::VariableTransformBase::SetNormalise(Bool_t n); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::VariableTransformBase::SetTMVAVersion(TMVA::TMVAVersion_t v); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::VariableTransformBase::SetUseSignalTransform(Bool_t e = kTRUE); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; const vector<TMVA::VariableInfo>&TMVA::VariableTransformBase::Targets() const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual const TMVA::Event*Transform(const TMVA::Event *const, Int_t cls) const; virtual voidTObject::UseCurrentStyle(); Bool_tTMVA::VariableTransformBase::UseSignalTransform() const; TMVA::VariableDecorrTransformVariableDecorrTransform(TMVA::DataSetInfo& dsi); TMVA::VariableDecorrTransformVariableDecorrTransform(const TMVA::VariableDecorrTransform&); const vector<TMVA::VariableInfo>&TMVA::VariableTransformBase::Variables() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidWriteTransformationToStream(ostream&) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__VariableDecorrTransform.html:5549,Test,TestBit,5549,root/html528/TMVA__VariableDecorrTransform.html,https://root.cern,https://root.cern/root/html528/TMVA__VariableDecorrTransform.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"MODEL 5:; Gauss background/Efficiency known. Double_t EvalLikeMod6(Double_t mu, Int_t x, Int_t z, Double_t b, Int_t m, Int_t what); Calculates the Profile Likelihood for MODEL 6:; Background known/Efficiency binomial; what = 1: Maximum likelihood estimate is returned; what = 2: Profile Likelihood of Maximum Likelihood estimate is returned.; what = 3: Profile Likelihood of Test hypothesis is returned; otherwise parameters as described in the beginning of the class). Double_t LikeMod6(Double_t mu, Double_t b, Double_t e, Int_t x, Int_t z, Int_t m); Profile Likelihood function for MODEL 6:; background known/ Efficiency binomial. Double_t EvalLikeMod7(Double_t mu, Int_t x, Double_t em, Double_t sde, Double_t b, Int_t what); Calculates the Profile Likelihood for MODEL 7:; background known/Efficiency Gauss; what = 1: Maximum likelihood estimate is returned; what = 2: Profile Likelihood of Maximum Likelihood estimate is returned.; what = 3: Profile Likelihood of Test hypothesis is returned; otherwise parameters as described in the beginning of the class). Double_t LikeMod7(Double_t mu, Double_t b, Double_t e, Int_t x, Double_t em, Double_t v); Profile Likelihood function for MODEL 6:; background known/ Efficiency gaussian. Double_t EvalPolynomial(Double_t x, const Int_t* coef, Int_t N); evaluate polynomial. Double_t EvalMonomial(Double_t x, const Int_t* coef, Int_t N); evaluate mononomial. Double_t LogFactorial(Int_t n); LogFactorial function (use the logGamma function via the relation Gamma(n+1) = n!. TRolke(Double_t CL = 0.9, Option_t* option = """"); Constructor. Double_t GetCL() const; Get and set the Confidence Level. void SetCL(Double_t CL). void SetCLSigmas(Double_t CLsigmas); Set the Confidence Level in terms of Sigmas. bool GetBounding() const; Get the bounding mode flag. True activates bounded mode. Read; TRolke.cxx and the references therein for details. . void SetBounding(const bool bnd); Get the bounding mode flag. True activates bounded mode. Read; TRolke.cxx a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRolke.html:26133,Test,Test,26133,root/html528/TRolke.html,https://root.cern,https://root.cern/root/html528/TRolke.html,4,['Test'],['Test']
Testability,"MODEL 5:; Gauss background/Efficiency known. Double_t EvalLikeMod6(Double_t mu, Int_t x, Int_t z, Double_t b, Int_t m, Int_t what); Calculates the Profile Likelihood for MODEL 6:; Background known/Efficiency binomial; what = 1: Maximum likelihood estimate is returned; what = 2: Profile Likelihood of Maximum Likelihood estimate is returned.; what = 3: Profile Likelihood of Test hypothesis is returned; otherwise parameters as described in the beginning of the class). Double_t LikeMod6(Double_t mu, Double_t b, Double_t e, Int_t x, Int_t z, Int_t m); Profile Likelihood function for MODEL 6:; background known/ Efficiency binomial. Double_t EvalLikeMod7(Double_t mu, Int_t x, Double_t em, Double_t sde, Double_t b, Int_t what); Calculates the Profile Likelihood for MODEL 7:; background known/Efficiency Gauss; what = 1: Maximum likelihood estimate is returned; what = 2: Profile Likelihood of Maximum Likelihood estimate is returned.; what = 3: Profile Likelihood of Test hypothesis is returned; otherwise parameters as described in the beginning of the class). Double_t LikeMod7(Double_t mu, Double_t b, Double_t e, Int_t x, Double_t em, Double_t v); Profile Likelihood function for MODEL 6:; background known/ Efficiency gaussian. Double_t EvalPolynomial(Double_t x, const Int_t[] coef, Int_t N); evaluate polynomial. Double_t EvalMonomial(Double_t x, const Int_t[] coef, Int_t N); evaluate mononomial. Double_t LogFactorial(Int_t n); LogFactorial function (use the logGamma function via the relation Gamma(n+1) = n!. TRolke(Double_t CL = 0.90000000000000002, Option_t* option = """"); Constructor. Double_t GetCL() const; Get and set the Confidence Level. void SetCL(Double_t CL). void SetCLSigmas(Double_t CLsigmas); Set the Confidence Level in terms of Sigmas. bool GetBounding() const; Get the bounding mode flag. True activates bounded mode. Read; TRolke.cxx and the references therein for details. . void SetBounding(const bool bnd); Get the bounding mode flag. True activates bounded mode. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TRolke.html:26755,Test,Test,26755,root/html602/TRolke.html,https://root.cern,https://root.cern/root/html602/TRolke.html,2,['Test'],['Test']
Testability,"MTvoid EnableImplicitMT(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539; Calculations are expressed in terms of a type-safe functional chain of actions and transformations, RDataFrame takes care of their execution. The implementation automatically puts in place several low level optimisations such as multi-thread parallelization and caching. For the impatient user; You can directly see RDataFrame in action in our tutorials, in C++ or Python. Table of Contents. Cheat sheet; Introduction; Crash course; Working with collections; Transformations: manipulating data; Actions: getting results; Distributed execution in Python; Performance tips and parallel execution; More features; Systematic variations; RDataFrame objects as function arguments and return values; Storing RDataFrame objects in collections; Executing callbacks every N events; Default column lists; Special helper columns: `rdfentry_` and `rdfslot_`; Just-in-time compilation: column type inference and explicit declaration of column types; User-defined custom actions; Dataset joins with friend trees; Reading data formats other than ROOT trees; Computation graphs (storing and reusing sets of transformations); Visualizing the computation graph; Activating RDataFrame execution logs; Creating an RDataFrame from a dataset specification file; Adding a progress bar. Efficient analysis in Python; Class reference. Cheat sheet; These are the operations which can be performed with RDataFrame. Transformations; Transformations are a way to manipulate the data. Transformation Description . Alias() Introduce an alias for a particular column name. . Define() Create a new column in the dataset. Example usages include adding a column that contains the invariant mass of a particle, or a selection of elements of an array (e.g. only the pts of ""good"" muons). . DefinePerSample() Define a new column that is updated when the input sampl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:2495,log,logs,2495,doc/v632/classROOT_1_1RDataFrame.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html,1,['log'],['logs']
Testability,"MVA distributions (and other information) to a ROOT type weight file ;  ; void ReadStateFromXMLString (const char *xmlstr);  for reading from memory ;  ; void RerouteTransformationHandler (TransformationHandler *fTargetTransformation);  ; virtual void SetAnalysisType (Types::EAnalysisType type);  ; void SetBaseDir (TDirectory *methodDir);  ; void SetFile (TFile *file);  ; void SetMethodBaseDir (TDirectory *methodDir);  ; void SetMethodDir (TDirectory *methodDir);  ; void SetModelPersistence (Bool_t status);  ; void SetSignalReferenceCut (Double_t cut);  ; void SetSignalReferenceCutOrientation (Double_t cutOrientation);  ; void SetSilentFile (Bool_t status);  ; void SetTestTime (Double_t testTime);  ; void SetTestvarName (const TString &v="""");  ; void SetTrainTime (Double_t trainTime);  ; void SetupMethod ();  setup of methods ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void TestClassification ();  initialization ;  ; virtual void TestMulticlass ();  test multiclass classification ;  ; virtual void TestRegression (Double_t &bias, Double_t &biasT, Double_t &dev, Double_t &devT, Double_t &rms, Double_t &rmsT, Double_t &mInf, Double_t &mInfT, Double_t &corr, Types::ETreeType type);  calculate <sum-of-deviation-squared> of regression output versus ""true"" value from test sample ;  ; bool TrainingEnded ();  ; void TrainMethod ();  ; virtual void WriteEvaluationHistosToFile (Types::ETreeType treetype);  writes all MVA evaluation histograms to file ;  ; virtual void WriteMonitoringHistosToFile () const;  write special monitoring histograms to file dummy implementation here --------------— ;  ; void WriteStateToFile () const;  write options and weights to file note that each one text file for the main configuration information and one ROOT file for ROOT objects are created ;  ;  Public Member Functions inherited from TMVA::IMethod;  IMethod ();  ; virtual ~IMethod ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodSVM.html:11217,test,test,11217,doc/master/classTMVA_1_1MethodSVM.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodSVM.html,1,['test'],['test']
Testability,"MVA distributions (and other information) to a ROOT type weight file ;  ; void ReadStateFromXMLString (const char *xmlstr);  for reading from memory ;  ; void RerouteTransformationHandler (TransformationHandler *fTargetTransformation);  ; virtual void SetAnalysisType (Types::EAnalysisType type);  ; void SetBaseDir (TDirectory *methodDir);  ; void SetFile (TFile *file);  ; void SetMethodBaseDir (TDirectory *methodDir);  ; void SetMethodDir (TDirectory *methodDir);  ; void SetModelPersistence (Bool_t status);  ; void SetSignalReferenceCut (Double_t cut);  ; void SetSignalReferenceCutOrientation (Double_t cutOrientation);  ; void SetSilentFile (Bool_t status);  ; void SetTestTime (Double_t testTime);  ; void SetTestvarName (const TString &v="""");  ; void SetTrainTime (Double_t trainTime);  ; void SetupMethod ();  setup of methods ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void TestClassification ();  initialization ;  ; virtual void TestMulticlass ();  test multiclass classification ;  ; virtual void TestRegression (Double_t &bias, Double_t &biasT, Double_t &dev, Double_t &devT, Double_t &rms, Double_t &rmsT, Double_t &mInf, Double_t &mInfT, Double_t &corr, Types::ETreeType type);  calculate <sum-of-deviation-squared> of regression output versus ""true"" value from test sample ;  ; bool TrainingEnded ();  ; void TrainMethod ();  ; virtual void WriteEvaluationHistosToFile (Types::ETreeType treetype);  writes all MVA evaluation histograms to file ;  ; void WriteStateToFile () const;  write options and weights to file note that each one text file for the main configuration information and one ROOT file for ROOT objects are created ;  ;  Public Member Functions inherited from TMVA::IMethod;  IMethod ();  ; virtual ~IMethod ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Configurable;  Configurable (const TString &theOption="""");  constructor ;  ; virtual ~Configurable ();  d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:16054,test,test,16054,doc/master/classTMVA_1_1MethodBDT.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html,1,['test'],['test']
Testability,"MVA.DataLoader('dataset'); 38for branch in signal.GetListOfBranches():; 39 dataloader.AddVariable(branch.GetName()); 40 ; 41dataloader.AddSignalTree(signal, 1.0); 42dataloader.AddBackgroundTree(background, 1.0); 43dataloader.PrepareTrainingAndTestTree(TCut(''),; 44 'nTrain_Signal=4000:nTrain_Background=4000:SplitMode=Random:NormMode=NumEvents:!V'); 45 ; 46# Generate model; 47 ; 48# Define model; 49model = Sequential(); 50model.add(Dense(64, activation='relu', input_dim=4)); 51model.add(Dense(2, activation='softmax')); 52 ; 53# Set loss and optimizer; 54model.compile(loss='categorical_crossentropy',; 55 optimizer=SGD(learning_rate=0.01), weighted_metrics=['accuracy', ]); 56 ; 57# Store model to file; 58model.save('modelClassification.h5'); 59model.summary(); 60 ; 61# Book methods; 62factory.BookMethod(dataloader, TMVA.Types.kFisher, 'Fisher',; 63 '!H:!V:Fisher:VarTransform=D,G'); 64factory.BookMethod(dataloader, TMVA.Types.kPyKeras, 'PyKeras',; 65 'H:!V:VarTransform=D,G:FilenameModel=modelClassification.h5:FilenameTrainedModel=trainedModelClassification.h5:NumEpochs=20:BatchSize=32'); 66 ; 67# Run training, test and evaluation; 68factory.TrainAllMethods(); 69factory.TestAllMethods(); 70factory.EvaluateAllMethods(); TCutA specialized string object used for TTree selections.Definition TCut.h:25; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; TMVA::DataLoaderDefinition DataLoader.h:50; TMVA::FactoryThis is the main MVA steering class.Definition Factory.h:80; TMVA::PyMethodBase::PyInitializestatic void PyInitialize()Initialize Python interpreter.Definition PyMethodBase.cxx:153; TMVA::Tools::Instancestatic Tools & Instance()Definition Tools.cxx:71. tutorialstmvakerasClassificationKeras.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:10 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/ClassificationKeras_8py_source.html:2450,test,test,2450,doc/master/ClassificationKeras_8py_source.html,https://root.cern,https://root.cern/doc/master/ClassificationKeras_8py_source.html,2,"['Test', 'test']","['TestAllMethods', 'test']"
Testability,"MVA::Config::SetUseColorvoid SetUseColor(Bool_t uc)Definition Config.h:60; TMVA::Config::fVariablePlottingclass TMVA::Config::VariablePlotting fVariablePlotting; TMVA::Config::SetSilentvoid SetSilent(Bool_t s)Definition Config.h:63; TMVA::Config::GetIONamesIONames & GetIONames()Definition Config.h:98; TMVA::ConfigurableDefinition Configurable.h:45; TMVA::Configurable::SetConfigDescriptionvoid SetConfigDescription(const char *d)Definition Configurable.h:64; TMVA::Configurable::DeclareOptionRefOptionBase * DeclareOptionRef(T &ref, const TString &name, const TString &desc=""""); TMVA::Configurable::AddPreDefValvoid AddPreDefVal(const T &)Definition Configurable.h:168; TMVA::Configurable::SetConfigNamevoid SetConfigName(const char *n)Definition Configurable.h:63; TMVA::Configurable::ParseOptionsvirtual void ParseOptions()options parserDefinition Configurable.cxx:124; TMVA::Configurable::GetOptionsconst TString & GetOptions() constDefinition Configurable.h:84; TMVA::Configurable::LogMsgLogger & Log() constDefinition Configurable.h:122; TMVA::Configurable::fLoggerMsgLogger * fLogger! message loggerDefinition Configurable.h:128; TMVA::Configurable::CheckForUnusedOptionsvoid CheckForUnusedOptions() constchecks for unused options in option stringDefinition Configurable.cxx:270; TMVA::DataInputHandler::GetEntriesUInt_t GetEntries(const TString &name) constDefinition DataInputHandler.h:100; TMVA::DataLoaderDefinition DataLoader.h:50; TMVA::DataLoader::PrepareTrainingAndTestTreevoid PrepareTrainingAndTestTree(const TCut &cut, const TString &splitOpt)prepare the training and test trees -> same cuts for signal and backgroundDefinition DataLoader.cxx:632; TMVA::DataLoader::GetDataSetInfoDataSetInfo & GetDataSetInfo()Definition DataLoader.cxx:137; TMVA::DataLoader::AddVariablevoid AddVariable(const TString &expression, const TString &title, const TString &unit, char type='F', Double_t min=0, Double_t max=0)user inserts discriminating variable in data set infoDefinition DataLoader.cxx",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:115629,Log,LogMsgLogger,115629,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,2,['Log'],"['Log', 'LogMsgLogger']"
Testability,"MVA::Interval.; Definition at line 113 of file LogInterval.cxx. ◆ GetMax(). virtual Double_t TMVA::LogInterval::GetMax ; (; ); const. inlinevirtual . Reimplemented from TMVA::Interval.; Definition at line 93 of file LogInterval.h. ◆ GetMean(). Double_t TMVA::LogInterval::GetMean ; (; ); const. virtual . Reimplemented from TMVA::Interval.; Definition at line 158 of file LogInterval.cxx. ◆ GetMin(). virtual Double_t TMVA::LogInterval::GetMin ; (; ); const. inlinevirtual . Reimplemented from TMVA::Interval.; Definition at line 92 of file LogInterval.h. ◆ GetNbins(). virtual Int_t TMVA::LogInterval::GetNbins ; (; ); const. inlinevirtual . Reimplemented from TMVA::Interval.; Definition at line 95 of file LogInterval.h. ◆ GetRndm(). Double_t TMVA::LogInterval::GetRndm ; (; TRandom3 & ; rnd); const. virtual . get uniformly distributed number within interval ; Reimplemented from TMVA::Interval.; Definition at line 144 of file LogInterval.cxx. ◆ GetStepSize(). Double_t TMVA::LogInterval::GetStepSize ; (; Int_t ; iBin = 0); const. virtual . returns the step size between the numbers of a ""discrete LogInterval"" ; Reimplemented from TMVA::Interval.; Definition at line 129 of file LogInterval.cxx. ◆ GetWidth(). Double_t TMVA::LogInterval::GetWidth ; (; ); const. virtual . Reimplemented from TMVA::Interval.; Definition at line 151 of file LogInterval.cxx. ◆ IsA(). virtual TClass * TMVA::LogInterval::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TMVA::Interval.; Definition at line 106 of file LogInterval.h. ◆ Log(). TMVA::MsgLogger & TMVA::LogInterval::Log ; (; ); const. Definition at line 165 of file LogInterval.cxx. ◆ SetMax(). void TMVA::LogInterval::SetMax ; (; Double_t ; m). inline . Definition at line 101 of file LogInterval.h. ◆ SetMin(). void TMVA::LogInterval::SetMin ; (; Double_t ; m). inline . Definition at line 102 of file LogInterval.h. ◆ Streamer(). virtual void TMVA::LogInterval::Streamer ; (; TBuffer & ; ). virtual . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1LogInterval.html:5711,Log,LogInterval,5711,doc/master/classTMVA_1_1LogInterval.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1LogInterval.html,1,['Log'],['LogInterval']
Testability,"MVA::MethodANNBase::SetNeuronInputCalculator(TMVA::TNeuronInput* inputCalculator); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; Float_tTMVA::ConvergenceTest::SpeedControl(UInt_t ofSteps); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::MethodBase::WriteEvaluationHistosToFile(TMVA::Types::ETreeType treetype); virtual voidTMVA::MethodANNBase::WriteMonitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MethodMLP.html:14253,Test,TestBits,14253,root/html602/TMVA__MethodMLP.html,https://root.cern,https://root.cern/root/html602/TMVA__MethodMLP.html,8,['Test'],"['TestBits', 'TestClassification', 'TestMulticlass', 'TestRegression']"
Testability,"MVA::MethodBase::SetAnalysisType(TMVA::Types::EAnalysisType type); voidTMVA::MethodBase::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetBoostedMethodName(TString methodName); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTMVA::MethodBase::SetCurrentEvent(Long64_t ievt) const; virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__MethodBoost.html:11926,test,testTime,11926,root/html530/TMVA__MethodBoost.html,https://root.cern,https://root.cern/root/html530/TMVA__MethodBoost.html,2,['test'],['testTime']
Testability,"MVA::MethodBase::SetAnalysisType(TMVA::Types::EAnalysisType type); voidTMVA::MethodBase::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTMVA::MethodBase::SetCurrentEvent(Long64_t ievt) const; virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetHiddenLayer(TString hiddenlayer = """"); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObj",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__MethodTMlpANN.html:11536,test,testTime,11536,root/html530/TMVA__MethodTMlpANN.html,https://root.cern,https://root.cern/root/html530/TMVA__MethodTMlpANN.html,2,['test'],['testTime']
Testability,"MVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); voidSetNeuronInputCalculator(TMVA::TNeuronInput* inputCalculator); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::MethodBase::WriteEvaluationHistosToFile(TMVA::Types::ETreeType treetype); virtual voidWriteMonitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__MethodANNBase.html:11917,Test,TestBits,11917,root/html534/TMVA__MethodANNBase.html,https://root.cern,https://root.cern/root/html534/TMVA__MethodANNBase.html,4,['Test'],"['TestBits', 'TestClassification', 'TestMulticlass', 'TestRegression']"
Testability,"MVA::MethodLikelihood::fAverageEvtPerBin. private . average events per bin; used to calculate fNbins ; Definition at line 145 of file MethodLikelihood.h. ◆ fAverageEvtPerBinVarB. Int_t* TMVA::MethodLikelihood::fAverageEvtPerBinVarB. private . average events per bin; used to calculate fNbins ; Definition at line 147 of file MethodLikelihood.h. ◆ fAverageEvtPerBinVarS. Int_t* TMVA::MethodLikelihood::fAverageEvtPerBinVarS. private . average events per bin; used to calculate fNbins ; Definition at line 146 of file MethodLikelihood.h. ◆ fBorderMethodString. TString TMVA::MethodLikelihood::fBorderMethodString. private . the method to take care about ""border"" effects (string) ; Definition at line 148 of file MethodLikelihood.h. ◆ fDefaultPDFLik. PDF* TMVA::MethodLikelihood::fDefaultPDFLik. private . pdf that contains default definitions ; Definition at line 135 of file MethodLikelihood.h. ◆ fDropVariable. Int_t TMVA::MethodLikelihood::fDropVariable. private . for ranking test ; Definition at line 128 of file MethodLikelihood.h. ◆ fEpsilon. Double_t TMVA::MethodLikelihood::fEpsilon. private . minimum number of likelihood (to avoid zero) ; Definition at line 125 of file MethodLikelihood.h. ◆ fHistBgd. std::vector<TH1*>* TMVA::MethodLikelihood::fHistBgd. private . background PDFs (histograms) ; Definition at line 131 of file MethodLikelihood.h. ◆ fHistBgd_smooth. std::vector<TH1*>* TMVA::MethodLikelihood::fHistBgd_smooth. private . background PDFs (smoothed histograms) ; Definition at line 133 of file MethodLikelihood.h. ◆ fHistSig. std::vector<TH1*>* TMVA::MethodLikelihood::fHistSig. private . signal PDFs (histograms) ; Definition at line 130 of file MethodLikelihood.h. ◆ fHistSig_smooth. std::vector<TH1*>* TMVA::MethodLikelihood::fHistSig_smooth. private . signal PDFs (smoothed histograms) ; Definition at line 132 of file MethodLikelihood.h. ◆ fInterpolateString. TString* TMVA::MethodLikelihood::fInterpolateString. private . which interpolation method used for reference his",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodLikelihood.html:41022,test,test,41022,doc/master/classTMVA_1_1MethodLikelihood.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodLikelihood.html,1,['test'],['test']
Testability,"MVA::PDEFoamCell* cell, Int_t idim1, Int_t idim2, TMVA::ECellValue cv); TMVA::PDEFoamCell*GetRootCell() const; virtual const char*TObject::GetTitle() const; Int_tGetTotDim() const; virtual UInt_tTObject::GetUniqueID() const; TObjString*GetVariableName(Int_t idx); Float_tGetVolumeFraction() const; Double_tGetXmax(Int_t idim) const; Double_tGetXmin(Int_t idim) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; voidInit(); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; TMVA::MsgLogger&Log() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::PDEFoam&operator=(const TMVA::PDEFoam&); virtual voidTObject::Paint(Option_t* option = """"); TMVA::PDEFoamPDEFoam(); TMVA::PDEFoamPDEFoam(const TString&); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; voidPrintCell(Long_t iCell = 0); voidPrintCellElements(); voidPrintCells(); voidPrintStream(ostream&) const; TH2D*Project2(Int_t idim1, Int_t idim2, const char* opt = ""cell_value"", const char* ker = ""kNone"", UIn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__PDEFoam.html:4880,Log,Log,4880,root/html528/TMVA__PDEFoam.html,https://root.cern,https://root.cern/root/html528/TMVA__PDEFoam.html,1,['Log'],['Log']
Testability,"MVA::PDEFoamKernelTrivial Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TMVA::PDEFoamKernelTrivial Class ReferenceTMVA. ; This class is a trivial PDEFoam kernel estimator. ; The Estimate() function returns the cell value, given an event 'txvec'. ; Definition at line 39 of file PDEFoamKernelTrivial.h. Public Member Functions;  PDEFoamKernelTrivial ();  Default constructor for streamer. ;  ;  PDEFoamKernelTrivial (const PDEFoamKernelTrivial &);  Copy constructor. ;  ; virtual ~PDEFoamKernelTrivial ();  ; virtual Float_t Estimate (PDEFoam *, std::vector< Float_t > &, ECellValue);  Simple kernel estimator. ;  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::PDEFoamKernelBase;  PDEFoamKernelBase ();  message logger ;  ;  PDEFoamKernelBase (const PDEFoamKernelBase &);  Copy constructor. ;  ; virtual ~PDEFoamKernelBase ();  Destructor. ;  ; MsgLogger & Log () const;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char *",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PDEFoamKernelTrivial.html:1054,log,logger,1054,doc/master/classTMVA_1_1PDEFoamKernelTrivial.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PDEFoamKernelTrivial.html,1,['log'],['logger']
Testability,"MVA::Types::kGauss@ kGaussDefinition Types.h:120; TMVA::Types::kIdentity@ kIdentityDefinition Types.h:115; TMVA::Types::kMaxVariableTransform@ kMaxVariableTransformDefinition Types.h:122; TMVA::Types::kDecorrelated@ kDecorrelatedDefinition Types.h:116; TMVA::Types::GetMethodTypeTypes::EMVA GetMethodType(const TString &method) constreturns the method type (enum) for a given method (string)Definition Types.cxx:121; TMVA::Types::EAnalysisTypeEAnalysisTypeDefinition Types.h:126; TMVA::Types::kMulticlass@ kMulticlassDefinition Types.h:129; TMVA::Types::kNoAnalysisType@ kNoAnalysisTypeDefinition Types.h:130; TMVA::Types::kClassification@ kClassificationDefinition Types.h:127; TMVA::Types::kMaxAnalysisType@ kMaxAnalysisTypeDefinition Types.h:131; TMVA::Types::kRegression@ kRegressionDefinition Types.h:128; TMVA::Types::fLoggerMsgLogger * fLogger! message loggerDefinition Types.h:181; TMVA::Types::ETreeTypeETreeTypeDefinition Types.h:142; TMVA::Types::kMaxTreeType@ kMaxTreeTypealso used as temporary storage for trees not yet assigned for testing;training...Definition Types.h:145; TMVA::Types::kTrainingOriginal@ kTrainingOriginalever neededDefinition Types.h:147; TMVA::Types::kTraining@ kTrainingDefinition Types.h:143; TMVA::Types::kValidation@ kValidationthese are placeholders... currently not used, but could be moved ""forward"" ifDefinition Types.h:146; TMVA::Types::kTesting@ kTestingDefinition Types.h:144; TMVA::Types::LogMsgLogger & Log() constDefinition Types.h:182; TMVA::Types::TypesTypes()constructorDefinition Types.cxx:56; TMVA::VITypeVITypeDefinition Types.h:69; TMVA::kRandom@ kRandomDefinition Types.h:69; TMVA::kAll@ kAllDefinition Types.h:69; TMVA::kShort@ kShortDefinition Types.h:69; TMVA::EMsgTypeEMsgTypeDefinition Types.h:55; TMVA::kSILENT@ kSILENTDefinition Types.h:62; TMVA::kDEBUG@ kDEBUGDefinition Types.h:56; TMVA::kVERBOSE@ kVERBOSEDefinition Types.h:57; TMVA::kHEADER@ kHEADERDefinition Types.h:63; TMVA::kERROR@ kERRORDefinition Types.h:60; TMVA::kINFO@ kINFO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2inc_2TMVA_2Types_8h_source.html:9588,test,testing,9588,doc/master/tmva_2tmva_2inc_2TMVA_2Types_8h_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2inc_2TMVA_2Types_8h_source.html,1,['test'],['testing']
Testability,"ManipTGLPhysicalShape::kManipAll; static TGLClip::EModekOutside; static TGLPhysicalShape::EManipTGLPhysicalShape::kRotateAll; static TGLPhysicalShape::EManipTGLPhysicalShape::kRotateX; static TGLPhysicalShape::EManipTGLPhysicalShape::kRotateY; static TGLPhysicalShape::EManipTGLPhysicalShape::kRotateZ; static TGLPhysicalShape::EManipTGLPhysicalShape::kScaleAll; static TGLPhysicalShape::EManipTGLPhysicalShape::kScaleX; static TGLPhysicalShape::EManipTGLPhysicalShape::kScaleY; static TGLPhysicalShape::EManipTGLPhysicalShape::kScaleZ; static TGLPhysicalShape::EManipTGLPhysicalShape::kTranslateAll; static TGLPhysicalShape::EManipTGLPhysicalShape::kTranslateX; static TGLPhysicalShape::EManipTGLPhysicalShape::kTranslateY; static TGLPhysicalShape::EManipTGLPhysicalShape::kTranslateZ. protected:. TGLClip::EModefMode; UInt_tfTimeStamp; Bool_tfValid. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLClip(const TGLLogicalShape& logical, const TGLMatrix& transform, const float[4] color); Construct a stand-alone physical clipping object. ~TGLClip(); Destroy clip object. void Setup(const TGLVector3& , const TGLVector3& ); Setup the clipping object with two vectors.; The interpretation of the two is different for plane and box; clipping objects. void Draw(TGLRnrCtx& rnrCtx) const; Draw out clipping object with blending and back + front filling.; Some clip objects are single face which we want to see both sides of. TGLClip(const TGLLogicalShape& logical, const TGLMatrix& transform, const float[4] color). void Modified(); { TGLPhysicalShape::Modified(); IncTimeStamp(); }. void Setup(const TGLBoundingBox& bbox). EMode GetMode() const; { return fMode; }. void SetMode(TGLClip::EMode mode). UInt_t TimeStamp() const; { return fTimeStamp; }. void IncTimeStamp(); { ++fTimeStamp; }. Bool_t IsValid() const; { return fValid; }. void Invalidate(); { fValid = kFALSE; }. void PlaneSet(TGLPlaneSet_t& set) const. TGLClipSet& operator=(const TGLClip& ). » A",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLClip.html:4578,log,logical,4578,root/html602/TGLClip.html,https://root.cern,https://root.cern/root/html602/TGLClip.html,2,['log'],['logical']
Testability,"Margin(Float_t rightmargin); virtual voidSetSelected(TObject* obj); virtual voidSetTheta(Double_t theta = 30); virtual voidSetTicks(Int_t valuex = 1, Int_t valuey = 1); virtual voidSetTickx(Int_t value = 1); virtual voidSetTicky(Int_t value = 1); virtual voidSetTitle(const char* title = """"); virtual voidSetToolTipText(const char* text, Long_t delayms = 1000); virtual voidTAttPad::SetTopMargin(Float_t topmargin); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidSetVertical(Bool_t vert = kTRUE); virtual voidSetView(TView* view = 0); virtual voidSetViewer3D(TVirtualViewer3D*); virtual voidTAttPad::SetXfile(Float_t xfile); virtual voidTAttPad::SetXstat(Float_t xstat); virtual voidTAttPad::SetYfile(Float_t yfile); virtual voidTAttPad::SetYstat(Float_t ystat); virtual voidShowGuidelines(TObject* object, const Int_t event, const char mode = 'i', const bool cling = true); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidUpdate(); virtual voidTObject::UseCurrentStyle(); virtual Int_tUtoAbsPixel(Double_t u) const; virtual Int_tUtoPixel(Double_t u) const; virtual Int_tVtoAbsPixel(Double_t v) const; virtual Int_tVtoPixel(Double_t v) const; virtual TObject*WaitPrimitive(const char* pname = """", const char* emode = """"); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual Int_tXtoAbsPixel(Double_t x) const; virtual Double_tXtoPad(Double_t x) const; virtual Int_tXtoPixel(Double_t x) const; virtual Int_tYtoAbsPixel(Double_t y) const; virtual Double_tYtoPad(Double_t y) const; virtual Int_tYtoPixel(Double_t y) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TVirtualPad.html:18199,Test,TestBit,18199,root/html534/TVirtualPad.html,https://root.cern,https://root.cern/root/html534/TVirtualPad.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"Marker::SetMarkerColorAlpha(Color_t mcolor, Float_t malpha); virtual voidTAttMarker::SetMarkerSize(Size_t msize = 1); virtual voidTAttMarker::SetMarkerStyle(Style_t mstyle = 1); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTVirtualPS::SetStream(ofstream* os); virtual voidTAttText::SetTextAlign(Short_t align = 11); virtual voidTAttText::SetTextAngle(Float_t tangle = 0)MENU ; virtual voidTAttText::SetTextAttributes()MENU ; virtual voidTAttText::SetTextColor(Color_t tcolor = 1); virtual voidTAttText::SetTextColorAlpha(Color_t tcolor, Float_t talpha); virtual voidTAttText::SetTextFont(Font_t tfont = 62); virtual voidTAttText::SetTextSize(Float_t tsize = 1); virtual voidTAttText::SetTextSizePixels(Int_t npixels); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidSetType(Int_t type = -111); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidText(Double_t x, Double_t y, const char* string); virtual voidText(Double_t x, Double_t y, const wchar_t* string); TImageDump(); TImageDump(const TImageDump&); TImageDump(const char* filename, Int_t type = -111); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTVirtualPS::WriteInteger(Int_t i, Bool_t space = kTRUE); virtual voidTVirtualPS::WriteReal(Float_t r, Bool_t space = kTRUE).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TImageDump.html:8847,Test,TestBit,8847,root/html602/TImageDump.html,https://root.cern,https://root.cern/root/html602/TImageDump.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"Marker::SetMarkerSize(Size_t msize = 1); virtual voidTAttMarker::SetMarkerStyle(Style_t mstyle = 1); virtual voidSetMaximum(Double_t maximum = 1); voidSetMaxPolar(Double_t maximum = 6.28318530717958623)MENU ; voidSetMaxRadial(Double_t maximum = 1)MENU ; virtual voidSetMinimum(Double_t minimum = 0); voidSetMinPolar(Double_t minimum = 0)MENU ; voidSetMinRadial(Double_t minimum = 0)MENU ; virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidSetOptionAxis(Bool_t opt); virtual voidTGraph::SetPoint(Int_t i, Double_t x, Double_t y); virtual voidTGraphErrors::SetPointError(Double_t ex, Double_t ey); virtual voidTGraphErrors::SetPointError(Int_t i, Double_t ex, Double_t ey); voidSetPolargram(TGraphPolargram* p); virtual voidTGraph::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidTGraph::Sort(Bool_t (*)(const TGraph*, Int_t, Int_t) greater = &TGraph::CompareX, Bool_t ascending = kTRUE, Int_t low = 0, Int_t high = -1111); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTGraph::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidTGraph::Zero(Int_t& k, Double_t AZ, Double_t BZ, Double_t E2, Double_t& X, Double_t& Y, Int_t maxiterations). protected:. virtual Double_t**TGraphErrors::Allocate(Int_t size); Double_t**TGraph::AllocateArrays(Int_t Narrays, Int_t arraySize); virtual voidTGraphErrors::CopyAndRelease(Double_t**",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGraphPolar.html:12042,Test,TestBit,12042,root/html528/TGraphPolar.html,https://root.cern,https://root.cern/root/html528/TGraphPolar.html,6,['Test'],"['TestBit', 'TestBits']"
Testability,"Masterslist of all active masters with a nonunique file system; Int_tfNotIdleNumber of non-idle sub-nodes; Int_tfOtherQueriesnumber of queries in list from previous sessions; TProofOutputListfOutputListTList implementation filtering ls(...) and Print(...); TStringfPackageDirpackage directory (used on client); TProofLockPath*fPackageLockpackage lock; TVirtualProofPlayer*fPlayercurrent player; PrintProgress_tfPrintProgressFunction function to display progress info in batch mode; TPluginHandler*fProgressDialogprogress dialog plugin; Bool_tfProgressDialogStartedindicates if the progress dialog is up; TList*fQuerieslist of TProofQuery objects; Float_tfRealTimerealtime spent by all slaves during the session; TList*fRecvMessagesMessages received during collect not yet processed; Bool_tfRedirLogredirect received log info; Int_tfRedirectNext; TProof::ERunStatusfRunStatusrun status; Bool_tfSendGroupViewif true send new group view; Int_tfSeqNumRemote sequential # of the last query submitted; Int_tfSessionIDremote ID of the session; TList*fSlaveInfo!list returned by kPROOF_GETSLAVEINFO; Int_tfStatusremote return status (part of kPROOF_LOGDONE); Bool_tfSynctrue if type of currently processed query is sync; TMonitor*fUniqueMonitormonitor activity on all unique slave sockets; TList*fUniqueSlaveslist of all active slaves with unique file systems; Bool_tfValidis this a valid proof object; TList*fWaitingSlavesstores a TPair of the slaves's TSocket and TMessage; TStringfWorkDircurrent work directory on remote servers; Int_tfWorkersToMergeCurrent total number of workers, which have not been yet assigned to any merger; static TPluginHandler*fgLogViewerLog dialog box plugin; static TList*fgProofEnvListList of TNameds defining environment. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProof(const char* masterurl, const char* conffile = kPROOF_ConfFile, const char* confdir = kPROOF_ConfDir, Int_t loglevel = 0, const char* alias = 0, TProofMgr* ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProof.html:30837,log,log,30837,root/html530/TProof.html,https://root.cern,https://root.cern/root/html530/TProof.html,2,['log'],['log']
Testability,"Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>(const ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>&); ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>(int dim, int npoint); virtual ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>::BaseFunction*Clone() const; virtual const ROOT::Fit::UnBinData&Data() const; virtual doubleDataElement(const double* x, unsigned int i, double* g) const; virtual voidGradient(const double* x, double* g) const; ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(const ROOT::Math::IBaseFunctionMultiDim&); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const ROOT::Fit::UnBinData& data, const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction& func, int weight = 0, bool extended = false); virtual const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction&ModelFunction() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::NCalls() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::NDim() const; virtual unsigned intNFitPoints() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::NPoints() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; virtual voidROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::ResetNCalls(); virtual ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::Type_tType() const; virtual voidROOT::Math::BasicFitMe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html:1787,Log,LogLikelihoodFCN,1787,root/html602/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html602/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,1,['Log'],['LogLikelihoodFCN']
Testability,"Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::Type_tType() const; virtual voidROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::UpdateNCalls() const; voidUseSumOfWeightSquare(). private:. virtual doubleDoDerivative(const double* x, unsigned int icoord) const; virtual doubleDoEval(const double* x) const; ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>&); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>&operator=(const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>&). Data Members; public:. enum ROOT::Math::BasicFitMethodFunction::Type_t { kUndefined; kLeastSquare; kLogLikelihood; };. private:. const ROOT::Fit::UnBinData&fData; const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>::IModelFunction&fFunc; vector<double>fGradfor derivatives; boolfIsExtendedflag for indicating if likelihood is extended; unsigned intfNEffPointsnumber of effective points used in the fit ; intfWeightflag to indicate if needs to evaluate using weight or weight squared (default weight = 0). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseFunction * Clone() const; clone the function (need to return Base for Windows). { return new LogLikelihoodFCN(fData,fFunc,fWeight,fIsExtended); }. unsigned int NFitPoints() const; using BaseObjFunction::operator();; effective points used in the fit. { return fNEffPoints; }. double DataElement(const double* x, unsigned int i, double* g) const; i-th likelihood contribution and its gradient. void Gradient(const double* x, double* g) const; need to be virtual to be instantited. void UseSumOfWeightSquare(); Use sum of the weight squared in evaluating the likelihood; (this is needed for calculating the errors). double DoEval(const double* x) const. Evaluation of the function (required by interface). doubl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html:2948,Log,LogLikelihoodFCN,2948,root/html532/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html532/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,1,['Log'],['LogLikelihoodFCN']
Testability,Math::GSLIntegrator. ROOT::Math::GSLMCIntegrator. ROOT::Math::GSLMinimizer. ROOT::Math::GSLMinimizer1D. ROOT::Math::GSLNLSMinimizer. ROOT::Math::GSLRngGFSR4. ROOT::Math::GSLRngMT. ROOT::Math::GSLRngRanLux. ROOT::Math::GSLRngRanLuxD1. ROOT::Math::GSLRngRanLuxD2. ROOT::Math::GSLRngRanLuxS1. ROOT::Math::GSLRngRanLuxS2. ROOT::Math::GSLRngTaus. ROOT::Math::GSLRootFinder←. ROOT::Math::Roots::Bisection. ROOT::Math::Roots::Brent. ROOT::Math::Roots::FalsePos. ROOT::Math::GSLRootFinderDeriv←. ROOT::Math::Roots::Newton. ROOT::Math::Roots::Secant. ROOT::Math::Roots::Steffenson. ROOT::Math::GSLSimAnMinimizer. ROOT::Math::GaussIntegrator←. ROOT::Math::GaussLegendreIntegrator. ROOT::Math::GaussLegendreIntegrator. ROOT::Math::GeneticMinimizer. ROOT::Math::GradFunctor. ROOT::Math::GradFunctor1D. ROOT::Math::IGradientFunctionMultiDim←. ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>; ←. ROOT::Fit::Chi2FCN<ROOT::Math::IGradientFunctionMultiDim>. ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. ROOT::Math::GradFunctor. ROOT::Math::LSResidualFunc. TPyMultiGradFunction. ROOT::Math::IGradientFunctionOneDim←. ROOT::Math::GradFunctor1D. ROOT::Math::IParametricFunctionMultiDim←. ROOT::Math::IParametricGradFunctionMultiDim; ←. ROOT::Math::WrappedMultiTF1. ROOT::Math::IParametricFunctionOneDim←. ROOT::Math::IParametricGradFunctionOneDim; ←. ROOT::Math::ParamFunction<ROOT::Math::IParametricGradFunctionOneDim>; ←. ROOT::Math::Polynomial. ROOT::Math::WrappedTF1. ROOT::Math::VavilovAccurateCdf. ROOT::Math::VavilovAccuratePdf. ROOT::Math::VavilovAccurateQuantile. ROOT::Math::IParametricGradFunctionMultiDim←. ROOT::Math::WrappedMultiTF1. ROOT::Math::IParametricGradFunctionOneDim←. ROOT::Math::ParamFunction<ROOT::Math::IParametricGradFunctionOneDim>; ←. ROOT::Math::Polynomial. ROOT::Math::WrappedTF1. ROOT::Math::IntegratorMultiDimOptions. ROOT::Math::IntegratorOneDimOptions. ROOT::Math,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ClassHierarchy.html:2302,Log,LogLikelihoodFCN,2302,root/html528/ClassHierarchy.html,https://root.cern,https://root.cern/root/html528/ClassHierarchy.html,3,['Log'],['LogLikelihoodFCN']
Testability,"Math; //create an empty vector of size 3 ( v[0]=v[1]=v[2]=0); SVector<double,3> v;; double d[3] = {1,2,3};; SVector<double,3> v(d,3); //create a vector from a C array; 13.13.1.2 Accessing and Setting Methods; The single vector elements can be set or retrieved using the operator[i], operator(i) or the iterator interface. Notice that the index starts from zero and not from one as in FORTRAN. Also no check is performed on the passed index. The full vector elements can be set also by using the SetElements function passing a generic iterator.; double x = m(i); // return the i-th element; x = *(m.begin()+i); // return the i-th element; v[0] = 1; // set the first element; v(1) = 2; // set the second element; *(v.begin()+3) = 3; // set the third element; std::vector<double> w(3);. // set vector elements from a std::vector<double>::iterator; v.SetElements(w.begin(),w.end());; In addition there are methods to place a sub-vector in a vector. If the size of the sub-vector is larger than the vector size a static assert (a compilation error) is produced.; SVector>double,N> v;; SVector>double,M> w;; // M <= N otherwise a compilation error is obtained later; // place a vector of size M starting from; // element ioff, v[ioff+i]=w[i]; v.Place_at(w,ioff);; // return a sub-vector of size M starting from; // v[ioff]: w[i]=v[ioff+i]; w = v.Sub < SVector>double,M> > (ioff);; For the vector functions see later in the Matrix and Vector Operators and Functions paragraph.; 13.13.2 Example: Matrix Class (SMatrix); The template class ROOT::Math::SMatrix represents a matrix of arbitrary type with nrows x ncol dimension. The class has 4 template parameters, which define at compile time, its properties:. type of the contained elements, T, for example float or double;; number of rows;; number of columns;; representation type. This is a class describing the underlined storage model of the Matrix. Presently exists only two types of this class:; ROOT::Math::MatRepStd for a general nrows x ncols matrix",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:752750,assert,assert,752750,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['assert'],['assert']
Testability,"MathBase.h:250; TMath::ProbDouble_t Prob(Double_t chi2, Int_t ndf)Computation of the probability for a certain Chi-squared (chi2) and number of degrees of freedom (ndf...Definition TMath.cxx:637; TMath::MedianDouble_t Median(Long64_t n, const T *a, const Double_t *w=nullptr, Long64_t *work=nullptr)Same as RMS.Definition TMath.h:1272; TMath::QuietNaNDouble_t QuietNaN()Returns a quiet NaN as defined by IEEE 754.Definition TMath.h:902; TMath::FloorDouble_t Floor(Double_t x)Rounds x downward, returning the largest integral value that is not greater than x.Definition TMath.h:680; TMath::ATanDouble_t ATan(Double_t)Returns the principal value of the arc tangent of x, expressed in radians.Definition TMath.h:640; TMath::CeilDouble_t Ceil(Double_t x)Rounds x upward, returning the smallest integral value that is not less than x.Definition TMath.h:668; TMath::MinElementT MinElement(Long64_t n, const T *a)Returns minimum of array a of length n.Definition TMath.h:960; TMath::LogDouble_t Log(Double_t x)Returns the natural logarithm of x.Definition TMath.h:756; TMath::SqrtDouble_t Sqrt(Double_t x)Returns the square root of x.Definition TMath.h:662; TMath::PowerLongDouble_t Power(LongDouble_t x, LongDouble_t y)Returns x raised to the power y.Definition TMath.h:721; TMath::MinShort_t Min(Short_t a, Short_t b)Returns the smallest of a and b.Definition TMathBase.h:198; TMath::Piconstexpr Double_t Pi()Definition TMath.h:37; TMath::AreEqualRelBool_t AreEqualRel(Double_t af, Double_t bf, Double_t relPrec)Comparing floating points.Definition TMath.h:426; TMath::AreEqualAbsBool_t AreEqualAbs(Double_t af, Double_t bf, Double_t epsilon)Comparing floating points.Definition TMath.h:418; TMath::KolmogorovProbDouble_t KolmogorovProb(Double_t z)Calculates the Kolmogorov distribution function,.Definition TMath.cxx:679; TMath::Sortvoid Sort(Index n, const Element *a, Index *index, Bool_t down=kTRUE)Sort the n elements of the array a of generic templated type Element.Definition TMathBase.h:431; TMath",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:476669,Log,Log,476669,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,2,"['Log', 'log']","['Log', 'logarithm']"
Testability,MathCore.cxx;  RandomFunctions.cxx;  RichardsonDerivator.cxx;  RootFinder.cxx;  SparseData.cxx;  SpecFuncCephes.cxx;  SpecFuncCephes.h;  SpecFuncCephesInv.cxx;  SpecFuncMathCore.cxx;  StdEngine.cxx;  TComplex.cxx;  TKDTree.cxx;  TKDTreeBinning.cxx;  TMath.cxx;  TRandom.cxx;  TRandom1.cxx;  TRandom2.cxx;  TRandom3.cxx;  TRandomGen.cxx;  triangle.c;  triangle.h;  TStatistic.cxx;  UnBinData.cxx;  ► test;  ► fit;  GaussFunction.h;  MinimizerTypes.h;  SparseDataComparer.cxx;  SparseFit3.cxx;  SparseFit4.cxx;  testFit.cxx;  testFitPerf.cxx;  testGraphFit.cxx;  testMinim.cxx;  testRooFit.cxx;  WrapperRooPdf.h;  binarySearchTime.cxx;  kDTreeTest.cxx;  newKDTreeTest.cxx;  stdsort.cxx;  stressGoFTest.cxx;  stressTF1.cxx;  stressTMath.cxx;  testAnalyticalIntegrals.cxx;  testBinarySearch.cxx;  testDistSampler.cxx;  testIntegration.cxx;  testIntegrationMultiDim.cxx;  testKahan.cxx;  testkdTreeBinning.cxx;  testMathRandom.cxx;  testRootFinder.cxx;  testSampleQuantiles.cxx;  testSortOrder.cxx;  testSpecFuncBeta.cxx;  testSpecFuncBetaI.cxx;  testSpecFuncErf.cxx;  testSpecFuncGamma.cxx;  testSpecFuncSiCi.cxx;  testTMath.cxx;  testTStatistic.cxx;  ► v7;  ► inc;  ► ROOT;  TFit.hxx;  ► mathmore;  ► inc;  ► Math;  ChebyshevApprox.h;  Derivator.h;  DistFuncMathMore.h;  GSLFunctionAdapter.h;  GSLIntegrator.h;  GSLMCIntegrator.h;  GSLMinimizer.h;  GSLMinimizer1D.h;  GSLMultiRootFinder.h;  GSLNLSMinimizer.h;  GSLQuasiRandom.h;  GSLRandom.h;  GSLRandomFunctions.h;  GSLRndmEngines.h;  GSLRootFinder.h;  GSLRootFinderDeriv.h;  GSLRootHelper.h;  GSLSimAnMinimizer.h;  GSLSimAnnealing.h;  IntegrationTypes.h;  InterpolationTypes.h;  Interpolator.h;  KelvinFunctions.h;  LinkDef_Func.h;  LinkDef_RootFinding.h;  MCIntegrationTypes.h;  MCParameters.h;  MultiNumGradFunction.h;  MultiRootFinder.h;  ParamFunction.h;  PdfFuncMathMore.h;  Polynomial.h;  QuantFuncMathMore.h;  QuasiRandom.h;  RootFinderAlgorithms.h;  SpecFuncMathMore.h;  Vavilov.h;  VavilovAccurate.h;  VavilovAccurateCdf.h;  VavilovAccuratePdf,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/files.html:45290,test,testSpecFuncBeta,45290,doc/v610/files.html,https://root.cern,https://root.cern/doc/v610/files.html,1,['test'],['testSpecFuncBeta']
Testability,"MatrixTSparse<double>& a, const TMatrixTSparse<double>& b); TMatrixTSparse<double>&SetSparseIndexAB(const TMatrixT<double>& a, const TMatrixTSparse<double>& b); TMatrixTSparse<double>&SetSparseIndexAB(const TMatrixTSparse<double>& a, const TMatrixT<double>& b); virtual TMatrixTBase<double>&SetSub(Int_t row_lwb, Int_t col_lwb, const TMatrixTBase<double>& source); doubleTMatrixTBase<double>::SetTol(double newTol); virtual voidTObject::SetUniqueID(UInt_t uid); virtual TMatrixTBase<double>&TMatrixTBase<double>::Shift(Int_t row_shift, Int_t col_shift); virtual voidShowMembers(TMemberInspector& insp); virtual TMatrixTBase<double>&TMatrixTBase<double>::Sqr(); virtual TMatrixTBase<double>&TMatrixTBase<double>::Sqrt(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual doubleTMatrixTBase<double>::Sum() const; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; TMatrixTSparse<double>&T(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TMatrixTSparse<double>&Transpose(const TMatrixTSparse<double>& source); virtual TMatrixTBase<double>&UnitMatrix(); TMatrixTSparse<double>&Use(TMatrixTSparse<double>& a); const TMatrixTSparse<double>&Use(const TMatrixTSparse<double>& a) const; TMatrixTSparse<double>&Use(Int_t nrows, Int_t ncols, Int_t nr_nonzeros, Int_t* pRowIndex, Int_t* pColIndex, double* pData); const TMatrixTSparse<double>&Use(Int_t nrows, Int_t ncols, Int_t nr_nonzeros, const Int_t* pRowIndex, const Int_t* pColIndex, const double* pData) const; TMatrixTSparse<double>&Use(Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb, Int_t nr_nonzeros, Int_t* pRowIndex, Int_t* pColIndex, double* pData); const TMatrixTSparse<double>&Use(Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb, Int_t nr_nonzeros, const Int_t* pRowIndex, const Int_t* pColIndex, const double* pData) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMatrixTSparse_double_.html:12717,Test,TestBits,12717,root/html528/TMatrixTSparse_double_.html,https://root.cern,https://root.cern/root/html528/TMatrixTSparse_double_.html,3,['Test'],['TestBits']
Testability,Max ]; : -----------------------------------------------------------; : m_jj: 0.017919 1.0069 [ -3.3498 3.4247 ]; : m_jjj: 0.020352 1.0044 [ -3.2831 3.3699 ]; : m_lv: 0.016356 0.99266 [ -3.2339 3.3958 ]; : m_jlv: -0.018431 0.98242 [ -3.0632 5.7307 ]; : m_bb: 0.0069564 0.98851 [ -2.9734 3.3513 ]; : m_wbb: -0.010633 0.99340 [ -3.2442 3.2244 ]; : m_wwbb: -0.012669 0.99259 [ -3.1871 5.7307 ]; : -----------------------------------------------------------; DNN_CPU : [dataset] : Evaluation of DNN_CPU on testing sample (6000 events); : Elapsed time for evaluation of 6000 events: 0.101 sec ; Factory : Test method: PyKeras for Classification performance; : ; : Setting up tf.keras; : Using TensorFlow version 2; : Use Keras version from TensorFlow : tf.keras; : Applying GPU option: gpu_options.allow_growth=True; : Disabled TF eager execution when evaluating model ; : Loading Keras Model ; : Loaded model from file: Higgs_trained_model.h5; PyKeras : [dataset] : Evaluation of PyKeras on testing sample (6000 events); : Elapsed time for evaluation of 6000 events: 0.168 sec ; Factory : ␛[1mEvaluate all methods␛[0m; Factory : Evaluate classifier: Likelihood; : ; Likelihood : [dataset] : Loop over test events and fill histograms with classifier response...; : ; TFHandler_Likelihood : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : m_jj: 1.0447 0.66216 [ 0.14661 10.222 ]; : m_jjj: 1.0275 0.37015 [ 0.34201 5.6016 ]; : m_lv: 1.0500 0.15582 [ 0.29757 2.8989 ]; : m_jlv: 1.0053 0.39478 [ 0.41660 5.8799 ]; : m_bb: 0.97464 0.52138 [ 0.10941 5.5163 ]; : m_wbb: 1.0296 0.35719 [ 0.38878 3.9747 ]; : m_wwbb: 0.95617 0.30368 [ 0.44118 4.0728 ]; : -----------------------------------------------------------; Factory : Evaluate classifier: Fisher; : ; Fisher : [dataset] : Loop over test events and fill histograms with classifier response...; : ; : Also filling probability and rarity histograms (on request)...; TFHandler_Fisher : Variable Mean RMS [ Min Max,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__Higgs__Classification_8C.html:51517,test,testing,51517,doc/master/TMVA__Higgs__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__Higgs__Classification_8C.html,1,['test'],['testing']
Testability,"Max, . TGraph ** ; lCurve, . TSpline ** ; logTauX = nullptr, . TSpline ** ; logTauY = nullptr, . TSpline ** ; logTauCurvature = nullptr . ). virtual . scan the L curve, determine tau and unfold at the final value of tau ; Parameters. [in]nPointnumber of points used for the scan ; [in]tauMinsmallest tau value to study ; [in]tauMaxlargest tau value to study. If tauMin=tauMax=nullptr, a scan interval is determined automatically. ; [out]lCurveif nonzero, a new TGraph is returned, containing the L-curve ; [out]logTauXif nonzero, a new TSpline is returned, to parameterize the L-curve's x-coordinates as a function of log10(tau) ; [out]logTauYif nonzero, a new TSpline is returned, to parameterize the L-curve's y-coordinates as a function of log10(tau) ; [out]logTauCurvatureif nonzero, a new TSpline is returned of the L-curve curvature as a function of log10(tau). return value: the coordinate number in the logTauX,logTauY graphs corresponding to the ""final"" choice of tau; Recommendation: always check logTauCurvature, it should be a peaked function (similar to a Gaussian), the maximum corresponding to the final choice of tau. Also, check the lCurve it should be approximately L-shaped. If in doubt, adjust tauMin and tauMax until the results are satisfactory. ; Definition at line 2558 of file TUnfold.cxx. ◆ ScanSURE(). Int_t TUnfold::ScanSURE ; (; Int_t ; nPoint, . Double_t ; tauMin, . Double_t ; tauMax, . TGraph ** ; logTauSURE = nullptr, . TGraph ** ; df_chi2A = nullptr, . TGraph ** ; lCurve = nullptr . ). virtual . minimize Stein's unbiased risk estimator ""SURE"" using successive calls to DoUnfold at various tau. ; Optionally, also the L-curve and its curvature are calculated for comparison. See description of GetSURE() See e.g. arXiv:1612.09415 for the definition of SURE; Parameters. [in]nPoint: number of points ; [in]tauMin: lower end of scan-range ; [in]tauMax: upper end of scan-range ; [out]logTauSURE: scan result, SURE as a function of log(tau) ; [out]df_chi2A: parametri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfold.html:55318,log,logTauX,55318,doc/master/classTUnfold.html,https://root.cern,https://root.cern/doc/master/classTUnfold.html,3,['log'],"['logTauCurvature', 'logTauX', 'logTauY']"
Testability,MaxEngineImpl240.cxx;  MixMaxEngineImpl256.cxx;  ParameterSettings.cxx;  PdfFuncMathCore.cxx;  ProbFuncMathCore.cxx;  QuantFuncMathCore.cxx;  RandomFunctions.cxx;  RichardsonDerivator.cxx;  RootFinder.cxx;  SparseData.cxx;  SpecFuncCephes.cxx;  SpecFuncCephes.h;  SpecFuncCephesInv.cxx;  SpecFuncMathCore.cxx;  StdEngine.cxx;  TComplex.cxx;  TKDTree.cxx;  TKDTreeBinning.cxx;  TMath.cxx;  TRandom.cxx;  TRandom1.cxx;  TRandom2.cxx;  TRandom3.cxx;  TRandomGen.cxx;  triangle.c;  triangle.h;  TStatistic.cxx;  UnBinData.cxx;  ► test;  ► fit;  GaussFunction.h;  MinimizerTypes.h;  SparseDataComparer.cxx;  SparseFit3.cxx;  SparseFit4.cxx;  testFit.cxx;  testFitPerf.cxx;  testGraphFit.cxx;  testMinim.cxx;  testRooFit.cxx;  WrapperRooPdf.h;  binarySearchTime.cxx;  kDTreeTest.cxx;  newKDTreeTest.cxx;  stdsort.cxx;  stressGoFTest.cxx;  stressTF1.cxx;  stressTMath.cxx;  testAnalyticalIntegrals.cxx;  testBinarySearch.cxx;  testDistSampler.cxx;  testIntegration.cxx;  testIntegrationMultiDim.cxx;  testkdTreeBinning.cxx;  testMathRandom.cxx;  testRootFinder.cxx;  testSampleQuantiles.cxx;  testSortOrder.cxx;  testSpecFuncBeta.cxx;  testSpecFuncBetaI.cxx;  testSpecFuncErf.cxx;  testSpecFuncGamma.cxx;  testSpecFuncSiCi.cxx;  testTMath.cxx;  testTStatistic.cxx;  ► v7;  ► inc;  ► ROOT;  TFit.hxx;  ► mathmore;  ► inc;  ► Math;  ChebyshevApprox.h;  Derivator.h;  DistFuncMathMore.h;  GSLFunctionAdapter.h;  GSLIntegrator.h;  GSLMCIntegrator.h;  GSLMinimizer.h;  GSLMinimizer1D.h;  GSLMultiRootFinder.h;  GSLNLSMinimizer.h;  GSLQuasiRandom.h;  GSLRandom.h;  GSLRandomFunctions.h;  GSLRndmEngines.h;  GSLRootFinder.h;  GSLRootFinderDeriv.h;  GSLRootHelper.h;  GSLSimAnMinimizer.h;  GSLSimAnnealing.h;  IntegrationTypes.h;  InterpolationTypes.h;  Interpolator.h;  KelvinFunctions.h;  LinkDef.h;  LinkDef_Func.h;  LinkDef_RootFinding.h;  MCIntegrationTypes.h;  MCParameters.h;  MultiNumGradFunction.h;  MultiRootFinder.h;  ParamFunction.h;  PdfFuncMathMore.h;  Polynomial.h;  QuantFuncMathMore.h;  QuasiRandom,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:46588,test,testkdTreeBinning,46588,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,1,['test'],['testkdTreeBinning']
Testability,"MaxIter_, UInt_t *fIPyCurrentIter_);  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Configurable;  Configurable (const TString &theOption="""");  constructor ;  ; virtual ~Configurable ();  default destructor ;  ; void AddOptionsXMLTo (void *parent) const;  write options to XML file ;  ; template<class T > ; void AddPreDefVal (const T &);  ; template<class T > ; void AddPreDefVal (const TString &optname, const T &);  ; void CheckForUnusedOptions () const;  checks for unused options in option string ;  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc);  ; template<class T > ; OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc="""");  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T *&ref, Int_t size, const TString &name, const TString &desc);  ; template<class T > ; OptionBase * DeclareOptionRef (T *&ref, Int_t size, const TString &name, const TString &desc="""");  ; const char * GetConfigDescription () const;  ; const char * GetConfigName () const;  ; const TString & GetOptions () const;  ; MsgLogger & Log () const;  ; virtual void ParseOptions ();  options parser ;  ; void PrintOptions () const;  prints out the options set in the options string and the defaults ;  ; void ReadOptionsFromStream (std::istream &istr);  read option back from the weight file ;  ; void ReadOptionsFromXML (void *node);  ; void SetConfigDescription (const char *d);  ; void SetConfigName (const char *n);  ; void SetMsgType (EMsgType t);  ; void SetOptions (const TString &s);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void WriteOptionsToStream (std::ostream &o, const TString &prefix) const;  write options to output stream (e.g. in writing the MVA weight files ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1FitterBase.html:2376,Log,Log,2376,doc/master/classTMVA_1_1FitterBase.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1FitterBase.html,1,['Log'],['Log']
Testability,"MaxTreeType ] = EventVectorOfClasses(nclasses);; 738 ; 739 // create the type, weight and boostweight branches; 740 const UInt_t nvars = dsi.GetNVariables();; 741 const UInt_t ntgts = dsi.GetNTargets();; 742 const UInt_t nvis = dsi.GetNSpectators();; 743 ; 744 for (size_t i=0; i<nclasses; i++) {; 745 eventCounts[i].varAvLength = new Float_t[nvars];; 746 for (UInt_t ivar=0; ivar<nvars; ivar++); 747 eventCounts[i].varAvLength[ivar] = 0;; 748 }; 749 ; 750 //Bool_t haveArrayVariable = kFALSE;; 751 //Bool_t *varIsArray = new Bool_t[nvars];; 752 ; 753 // If there are NaNs in the tree:; 754 // => warn if used variables/cuts/weights contain nan (no problem if event is cut out); 755 // => fatal if cut value is nan or (event not cut out and nans somewhere); 756 // Count & collect all these warnings/errors and output them at the end.; 757 std::map<TString, int> nanInfWarnings;; 758 std::map<TString, int> nanInfErrors;; 759 ; 760 // if we work with chains we need to remember the current tree if; 761 // the chain jumps to a new tree we have to reset the formulas; 762 for (UInt_t cl=0; cl<nclasses; cl++) {; 763 ; 764 //Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << ""Create training and testing trees -- looping over class \"""" << dsi.GetClassInfo(cl)->GetName() << ""\"" ..."" << Endl;; 765 ; 766 EventStats& classEventCounts = eventCounts[cl];; 767 ; 768 // info output for weights; 769 Log() << kDEBUG //<< Form(""Dataset[%s] : "",dsi.GetName()); 770 << ""\tWeight expression for class \'"" << dsi.GetClassInfo(cl)->GetName() << ""\': \""""; 771 << dsi.GetClassInfo(cl)->GetWeight() << ""\"""" << Endl;; 772 ; 773 // used for chains only; 774 TString currentFileName("""");; 775 ; 776 std::vector<TreeInfo>::const_iterator treeIt(dataInput.begin(dsi.GetClassInfo(cl)->GetName()));; 777 for (;treeIt!=dataInput.end(dsi.GetClassInfo(cl)->GetName()); ++treeIt) {; 778 ; 779 // read first the variables; 780 std::vector<Float_t> vars(nvars);; 781 std::vector<Float_t> tgts(ntgts);; 782 std::vector<Float",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataSetFactory_8cxx_source.html:31877,Log,Log,31877,doc/master/DataSetFactory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/DataSetFactory_8cxx_source.html,1,['Log'],['Log']
Testability,"MayNotUse(const char* method) const; Int_tNext(); Int_tNext(Int_t idx); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); Int_toperator()(); TObject&TObject::operator=(const TObject& rhs); Int_toperator[](Int_t idx); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); Int_tReset(Int_t indx = 0); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TTableIter.html:4887,Test,TestBit,4887,root/html530/TTableIter.html,https://root.cern,https://root.cern/root/html530/TTableIter.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TObject&TObject::operator=(const TObject& rhs); virtual voidTObject::Paint(Option_t* option = """"); TMVA::PDEFoamDistrPDEFoamDistr(); TMVA::PDEFoamDistrPDEFoamDistr(const TMVA::PDEFoamDistr&); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetDensityCalc(TMVA::TDensityCalc dc); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); voidSetPDEFoam(const TMVA::PDEFoam* foam); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__PDEFoamDistr.html:4759,Test,TestBit,4759,root/html528/TMVA__PDEFoamDistr.html,https://root.cern,https://root.cern/root/html528/TMVA__PDEFoamDistr.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TEventIterUnit&operator=(const TEventIterUnit&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPreProcessEvent(Long64_t); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidTEventIter::StopProcess(Bool_t abort); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEventIterUnit.html:4972,Test,TestBit,4972,root/html534/TEventIterUnit.html,https://root.cern,https://root.cern/root/html534/TEventIterUnit.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAddition.html:46162,log,logged,46162,doc/master/classRooAddition.html,https://root.cern,https://root.cern/doc/master/classRooAddition.html,139,['log'],['logged']
Testability,"Member Functions inherited from RooLegendre; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Versi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooSpHarmonic.html:47234,log,logEvalError,47234,doc/master/classRooSpHarmonic.html,https://root.cern,https://root.cern/doc/master/classRooSpHarmonic.html,3,['log'],"['logEvalError', 'logging']"
Testability,"Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TMVA::IFitterTarget; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; MinuitWrapper * fMinWrap;  ;  Protected Attributes inherited from TMVA::FitterBase; TString fClassName;  ; bool * fExitFromTraining = nullptr;  ; IFitterTarget & fFitterTarget;  ; UInt_t * fIPyCurrentIter = nullptr;  ; UInt_t * fIPyMaxIter = nullptr;  ; MsgLogger * fLogger;  ; Int_t fNpars;  ; const std::vector< TMVA::Interval * > fRanges;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Private Member Functions; void DeclareOptions ();  declare SA options ;  . Private Attributes; Bool_t fBatch;  batch mode ;  ; Int_t fErrorLevel;  minuit error level ;  ; Int_t fFitStrategy;  minuit strategy level ;  ; Int_t fMaxCalls;  (approximate) maximum number of function calls ;  ; Int_t fPrintLevel;  minuit printout level ;  ; Bool_t fPrintWarnings;  minuit warnings level ;  ; Double_t fTolerance;  tolerance to the function value at the minimum ;  ; Bool_t fUseImprove;  flag for 'IMPROVE' use ;  ; Bool_t fUseMinos;  flag for 'MINOS' use ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsiste",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MinuitFitter.html:14274,log,logger,14274,doc/master/classTMVA_1_1MinuitFitter.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MinuitFitter.html,1,['log'],['logger']
Testability,"Member Functions; void SetDepthLocal (Float_t d) override;  Set depth (z-coordinate) of the projected points. ;  ;  Protected Member Functions inherited from TEvePointSet; void AssertIntIdsSize ();  Assert that size of IntId array is compatible with the size of the point array. ;  ;  Protected Member Functions inherited from TEveElement; virtual void AnnihilateRecursively ();  Protected member function called from TEveElement::Annihilate(). ;  ; virtual void PreDeleteElement ();  Externally assigned and controlled user data. ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TPointSet3D; void CopyIds (const TPointSet3D &t);  Copy id objects from point-set 't'. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TAttBBox;  TAttBBox (const TAttBBox &tab);  ; void AssertBBoxExtents (Float_t epsilon=0.005);  Assert extents of all sides of the bounding-box are at least epsilon. ;  ; void BBoxCheckPoint (const Float_t *p);  ; void BBoxCheckPoint (Float_t x, Float_t y, Float_t z);  ; void BBoxClear ();  Remove BBox information. ;  ; void BBoxInit (Float_t infinity=1e6);  Dynamic Float_t[6] X(min,max), Y(min,max), Z(min,max) ;  ; void BBoxZero (Float_t epsilon=0, Float_t x=0, Float_t y=0, Float_t z=0);  Create cube of volume (2*epsilon)^3 at (x,y,z). ;  ;  Protected Member Functions inherited from TQObject; virtual void * GetSender ();  ; virtual const char * GetSenderClassName () const;  ;  Protected Member Functions inherited from TEveProjected; void SetDepthCommon (Float_t d, TEveElement *el, Float_t *bbox);  Utility function to update the z-values of the bounding-box. ;  . Private Member Functions;  TEveLineProjected (const TEveLineProjected &);  ; TEveLineProjected & operator= (const TEveLineProjected &",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveLineProjected.html:44950,Assert,AssertBBoxExtents,44950,doc/master/classTEveLineProjected.html,https://root.cern,https://root.cern/doc/master/classTEveLineProjected.html,1,['Assert'],['AssertBBoxExtents']
Testability,"Member Functions; void SetDepthLocal (Float_t d) override;  Set depth (z-coordinate) of the projected points. ;  ;  Protected Member Functions inherited from TEvePointSet; void AssertIntIdsSize ();  Assert that size of IntId array is compatible with the size of the point array. ;  ;  Protected Member Functions inherited from TEveElement; virtual void AnnihilateRecursively ();  Protected member function called from TEveElement::Annihilate(). ;  ; virtual void PreDeleteElement ();  Externally assigned and controlled user data. ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TPointSet3D; void CopyIds (const TPointSet3D &t);  Copy id objects from point-set 't'. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TAttBBox;  TAttBBox (const TAttBBox &tab);  ; void AssertBBoxExtents (Float_t epsilon=0.005);  Assert extents of all sides of the bounding-box are at least epsilon. ;  ; void BBoxCheckPoint (const Float_t *p);  ; void BBoxCheckPoint (Float_t x, Float_t y, Float_t z);  ; void BBoxClear ();  Remove BBox information. ;  ; void BBoxInit (Float_t infinity=1e6);  Dynamic Float_t[6] X(min,max), Y(min,max), Z(min,max) ;  ; void BBoxZero (Float_t epsilon=0, Float_t x=0, Float_t y=0, Float_t z=0);  Create cube of volume (2*epsilon)^3 at (x,y,z). ;  ;  Protected Member Functions inherited from TQObject; virtual void * GetSender ();  ; virtual const char * GetSenderClassName () const;  ;  Protected Member Functions inherited from TEveProjected; void SetDepthCommon (Float_t d, TEveElement *el, Float_t *bbox);  Utility function to update the z-values of the bounding-box. ;  . Private Member Functions;  TEvePointSetProjected (const TEvePointSetProjected &);  ; TEvePointSetProjected & operator= (const TEvePoi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEvePointSetProjected.html:41190,Assert,AssertBBoxExtents,41190,doc/master/classTEvePointSetProjected.html,https://root.cern,https://root.cern/doc/master/classTEvePointSetProjected.html,1,['Assert'],['AssertBBoxExtents']
Testability,"Member Functions; void SetDepthLocal (Float_t d) override;  Set depth (z-coordinate) of the projected points. ;  ;  Protected Member Functions inherited from TEvePointSet; void AssertIntIdsSize ();  Assert that size of IntId array is compatible with the size of the point array. ;  ;  Protected Member Functions inherited from TEveElement; virtual void AnnihilateRecursively ();  Protected member function called from TEveElement::Annihilate(). ;  ; virtual void PreDeleteElement ();  Externally assigned and controlled user data. ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TPointSet3D; void CopyIds (const TPointSet3D &t);  Copy id objects from point-set 't'. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TAttBBox;  TAttBBox (const TAttBBox &tab);  ; void AssertBBoxExtents (Float_t epsilon=0.005);  Assert extents of all sides of the bounding-box are at least epsilon. ;  ; void BBoxCheckPoint (const Float_t *p);  ; void BBoxCheckPoint (Float_t x, Float_t y, Float_t z);  ; void BBoxClear ();  Remove BBox information. ;  ; void BBoxInit (Float_t infinity=1e6);  Dynamic Float_t[6] X(min,max), Y(min,max), Z(min,max) ;  ; void BBoxZero (Float_t epsilon=0, Float_t x=0, Float_t y=0, Float_t z=0);  Create cube of volume (2*epsilon)^3 at (x,y,z). ;  ;  Protected Member Functions inherited from TQObject; virtual void * GetSender ();  ; virtual const char * GetSenderClassName () const;  ;  Protected Member Functions inherited from TEveProjected; void SetDepthCommon (Float_t d, TEveElement *el, Float_t *bbox);  Utility function to update the z-values of the bounding-box. ;  . Protected Attributes; std::vector< Int_t > fBreakPoints;  ;  Protected Attributes inherited from TEveTrack; Double_t fBeta;  ; Int_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveTrackProjected.html:47146,Assert,AssertBBoxExtents,47146,doc/master/classTEveTrackProjected.html,https://root.cern,https://root.cern/doc/master/classTEveTrackProjected.html,1,['Assert'],['AssertBBoxExtents']
Testability,"Member RooDataHist::set (double wgt, double wgtErr=-1); Use set(std::size_t,double,double) ; Member RooDataHist::weight () const override; Use the safer weight(std::size_t) const. ; Member RooDataHist::weightSquared () const override; Use the safer weightSquared(std::size_t) const. ; Member RooRealProxy ; Use RooTemplateProxy<RooAbsReal> or more appropriate template parameters. ; Member RooStats::HistFactory::FitModel (RooWorkspace *, std::string data_name=""obsData"") R__DEPRECATED(6; Will be removed in ROOT 6.36. Please write your own plotting code inspired by the hf001 tutorial. ; Member RooStats::HistFactory::FitModelAndPlot (const std::string &measurementName, const std::string &fileNamePrefix, RooWorkspace &, std::string, std::string, TFile &, std::ostream &) R__DEPRECATED(6; Will be removed in ROOT 6.36. Please write your own plotting code inspired by the hf001 tutorial. ; Member RooStats::HistFactory::FormatFrameForLikelihood (RooPlot *frame, std::string xTitle=std::string(""#sigma / #sigma_{SM}""), std::string yTitle=std::string(""-log likelihood"")) R__DEPRECATED(6; Will be removed in ROOT 6.36. Please write your own plotting code inspired by the hf001 tutorial. ; Member RooStats::HistFactory::Measurement::SetExportOnly (bool ExportOnly) R__DEPRECATED(6; Will be removed in ROOT 6.36. ExportOnly() == true is the default since ROOT 6.34 and it can't be disabled anymore in 6.36. ; Member RooStats::MarkovChain::GetAsDataHist (const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const R__DEPRECATED(6; Will be removed in ROOT 6.36. Please implement this functionality by calling RooAbsData::reduce on the Markov Chain's RooDataSet* (obtained using MarkovChain::GetAsConstDataSet), and then obtaining its binned clone. ; Will be removed in ROOT 6.36. . Member RooStats::MarkovChain::GetAsDataSet (const RooCmdArg &arg1, const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/deprecated.html:4035,log,log,4035,doc/master/deprecated.html,https://root.cern,https://root.cern/doc/master/deprecated.html,1,['log'],['log']
Testability,"MemberInspector& insp); voidTStopwatch::Start(Bool_t reset = kTRUE); voidTStopwatch::Stop(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TMVA::TimerTimer(const TMVA::Timer&); TMVA::TimerTimer(const char* prefix = """", Bool_t colourfulOutput = kTRUE); TMVA::TimerTimer(Int_t ncounts, const char* prefix = """", Bool_t colourfulOutput = kTRUE); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. TMVA::MsgLogger&Log() const; TStringSecToText(Double_t, Bool_t) const. Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. Bool_tfColourfulOutputflag for use of colors; TMVA::MsgLogger*fLoggerthe output logger; Int_tfNcountsreference number of ""counts"" ; TStringfPrefixprefix for outputs; static const TStringfgClassNameused for output; static const Int_tfgNbinsnumber of bins in progress bar. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Timer(const char* prefix = """", Bool_t colourfulOutput = kTRUE); constructor. Timer(Int_t ncounts, const char* prefix = """", Bool_t colourfulOutput = kTRUE); standard constructor: ncounts gives the total number of counts that; the loop will iterate through. At each call of the timer, the current; number of counts is ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__Timer.html:5966,Log,Log,5966,root/html528/TMVA__Timer.html,https://root.cern,https://root.cern/root/html528/TMVA__Timer.html,3,['Log'],['Log']
Testability,"Menu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. RooArgSet_allOwnedNodesList of owned pdfs and components; static Bool_t_autoClassAutomatic import of non-distribution class code; static list<std::string>_classDeclDirList; static string_classFileExportDir; static list<std::string>_classImplDirList; RooWorkspace::CodeRepo_classesRepository of embedded class code. This data member _must_ be first; RooLinkedList_dataListList of owned datasets; RooWorkspace::WSDir*_dir! Transient ROOT directory representation of workspace; Bool_t_doExport! Export contents of workspace to CINT?; RooLinkedList_embeddedDataListList of owned datasets that are embedded in pdfs; RooExpensiveObjectCache_eocacheCache for expensive objects ; string_exportNSName! Name of CINT namespace to which contents are exported; RooFactoryWSTool*_factory! Factory tool associated with workspace; RooLinkedList_genObjectsList of generic objects; map<std::string,RooArgSet>_namedSetsMap of named RooArgSets; Bool_t_openTrans! Is there a transaction open?; RooArgSet_sandboxNodes! Sandbox for incoming objects in a transaction; RooLinkedList_snapshotsList of parameter snapshots; RooLinkedList_studyModsList if StudyManager modules; TUUID_uuidUnique workspace ID; RooLinkedList_viewsList of model views . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void addClassDeclImportDir(const char* dir); Add 'dir' to search path for class declaration (header) files, when; attempting to import class code with importClassClode(). void addClassImplImportDir(const char* dir); Add 'dir' to search path for class implementation (.cxx) files, when; attempting to import class code with importClassClode(). void setClassFileExportDir(const char* dir = 0); Specify the name of the directory in which embedded source; cod",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooWorkspace.html:11550,Sandbox,Sandbox,11550,root/html534/RooWorkspace.html,https://root.cern,https://root.cern/root/html534/RooWorkspace.html,1,['Sandbox'],['Sandbox']
Testability,"Menu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Int_tfDataSetInfoVrsVersion of the dataset info 'table'; Int_tfFileInfoVrsVersion of the file info 'table'; TStringTNamed::fNameobject identifier; Int_tfSummaryVrsVersion of the summary 'table'; TStringTNamed::fTitleobject title; static TProofMonSender::EConfigBitskSendDataSetInfo; static TProofMonSender::EConfigBitskSendFileInfo; static TProofMonSender::EConfigBitskSendSummary. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Int_t SetSendOptions(const char* ); Parse send options from string 'sendopts'.; Format is:; ""[-,+]S[n]|[-,+]D[m]|[-,+]F[j]""; where:; 1. The big letter refers to the 'table' following. S table with summary log; D table with dataset info; F table files info. 2. The '-,+' in front disables/enables the related table; if; absent '+' is assumed. 3. The number after the letter is the version of the related; table. Returns -1 if nothing is enabled; 0 otherwise. TProofMonSender(const char* n = ""Abstract"", const char* t = ""ProofMonSender""). virtual ~TProofMonSender(); { }. Bool_t IsValid() const; Object validity. { return (TestBit(TObject::kInvalidObject)) ? kFALSE : kTRUE; }. Int_t SendSummary(TList* , const char* ); Summary record. Int_t SendDataSetInfo(TDSet* , TList* , const char* , const char* ); Information about the dataset(s) processed. Int_t SendFileInfo(TDSet* , TList* , const char* , const char* ); Detailed information about files. » Author: G.Ganis July 2011 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/proofplayer:$Id$ » Last generated: 2015-06-30 15:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofMonSender.html:7115,log,log,7115,root/html602/TProofMonSender.html,https://root.cern,https://root.cern/root/html602/TProofMonSender.html,1,['log'],['log']
Testability,"Menu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Int_tfDataSetInfoVrsVersion of the dataset info 'table'; Int_tfFileInfoVrsVersion of the file info 'table'; TStringTNamed::fNameobject identifier; Int_tfSummaryVrsVersion of the summary 'table'; TStringTNamed::fTitleobject title; static TProofMonSender::EConfigBitskSendDataSetInfo; static TProofMonSender::EConfigBitskSendFileInfo; static TProofMonSender::EConfigBitskSendSummary. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Int_t SetSendOptions(const char* ); Parse send options from string 'sendopts'.; Format is:; ""[-,+]S[n]|[-,+]D[m]|[-,+]F[j]""; where:; 1. The big letter refers to the 'table' following. S table with summary log; D table with dataset info; F table files info. 2. The '-,+' in front disables/enables the related table; if; absent '+' is assumed. 3. The number after the letter is the version of the related; table. Returns -1 if nothing is enabled; 0 otherwise. TProofMonSender(const char* n = ""Abstract"", const char* t = ""ProofMonSender""). virtual ~TProofMonSender(); { }. Bool_t IsValid() const; Object validity. { return (TestBit(TObject::kInvalidObject)) ? kFALSE : kTRUE; }. Int_t SendSummary(TList* , const char* ); Summary record. Int_t SendDataSetInfo(TDSet* , TList* , const char* , const char* ); Information about the dataset(s) processed. Int_t SendFileInfo(TDSet* , TList* , const char* , const char* ); Detailed information about files. » Author: G.Ganis July 2011 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/proofplayer:$Id$ » Last generated: 2015-09-08 17:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TProofMonSender.html:7115,log,log,7115,root/html604/TProofMonSender.html,https://root.cern,https://root.cern/root/html604/TProofMonSender.html,1,['log'],['log']
Testability,"Merge(TEntryListBlock* block); Int_tNext(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TEntryListBlock&operator=(const TEntryListBlock&); voidOptimizeStorage(); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; voidPrintWithShift(Int_t shift) const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); Bool_tRemove(Int_t entry); voidTObject::ResetBit(UInt_t f); voidResetIndices(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TEntryListBlock.html:13664,Test,TestBit,13664,root/html530/TEntryListBlock.html,https://root.cern,https://root.cern/root/html530/TEntryListBlock.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"Method->GetEfficiency(""Efficiency:0.01"", Types::kTesting, err));; 1546 eff01err[isel].push_back(err);; 1547 eff10[isel].push_back(theMethod->GetEfficiency(""Efficiency:0.10"", Types::kTesting, err));; 1548 eff10err[isel].push_back(err);; 1549 eff30[isel].push_back(theMethod->GetEfficiency(""Efficiency:0.30"", Types::kTesting, err));; 1550 eff30err[isel].push_back(err);; 1551 effArea[isel].push_back(theMethod->GetEfficiency("""", Types::kTesting, err)); // computes the area (average); 1552 ; 1553 trainEff01[isel].push_back(; 1554 theMethod->GetTrainingEfficiency(""Efficiency:0.01"")); // the first pass takes longer; 1555 trainEff10[isel].push_back(theMethod->GetTrainingEfficiency(""Efficiency:0.10""));; 1556 trainEff30[isel].push_back(theMethod->GetTrainingEfficiency(""Efficiency:0.30""));; 1557 ; 1558 nmeth_used[isel]++;; 1559 ; 1560 if (!IsSilentFile()) {; 1561 Log() << kDEBUG << ""\tWrite evaluation histograms to file"" << Endl;; 1562 theMethod->WriteEvaluationHistosToFile(Types::kTesting);; 1563 theMethod->WriteEvaluationHistosToFile(Types::kTraining);; 1564 }; 1565 }; 1566 }; 1567 if (doRegression) {; 1568 ; 1569 std::vector<TString> vtemps = mname[0];; 1570 std::vector<std::vector<Double_t>> vtmp;; 1571 vtmp.push_back(devtest[0]); // this is the vector that is ranked; 1572 vtmp.push_back(devtrain[0]);; 1573 vtmp.push_back(biastest[0]);; 1574 vtmp.push_back(biastrain[0]);; 1575 vtmp.push_back(rmstest[0]);; 1576 vtmp.push_back(rmstrain[0]);; 1577 vtmp.push_back(minftest[0]);; 1578 vtmp.push_back(minftrain[0]);; 1579 vtmp.push_back(rhotest[0]);; 1580 vtmp.push_back(rhotrain[0]);; 1581 vtmp.push_back(devtestT[0]); // this is the vector that is ranked; 1582 vtmp.push_back(devtrainT[0]);; 1583 vtmp.push_back(biastestT[0]);; 1584 vtmp.push_back(biastrainT[0]);; 1585 vtmp.push_back(rmstestT[0]);; 1586 vtmp.push_back(rmstrainT[0]);; 1587 vtmp.push_back(minftestT[0]);; 1588 vtmp.push_back(minftrainT[0]);; 1589 gTools().UsefulSortAscending(vtmp, &vtemps);; 1590 mname[0] = vtemps;; 1591",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:65418,Log,Log,65418,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,1,['Log'],['Log']
Testability,"MethodBase.h:133; TMVA::PyMethodBase::fModulePicklestatic PyObject * fModulePickleDefinition PyMethodBase.h:128; TMVA::PyMethodBase::fModuleBuiltinstatic PyObject * fModuleBuiltinDefinition PyMethodBase.h:123; TMVA::PyMethodBase::PyMethodBasePyMethodBase(const TString &jobName, Types::EMVA methodType, const TString &methodTitle, DataSetInfo &dsi, const TString &theOption="""")Definition PyMethodBase.cxx:84; TMVA::PyMethodBase::fEvalstatic PyObject * fEvalDefinition PyMethodBase.h:124; TMVA::PyMethodBase::GetValueFromDictstatic PyObject * GetValueFromDict(PyObject *dict, const char *key)Utility function which checks if a given key is present in a Python dictionary object and returns the...Definition PyMethodBase.cxx:409; TMVA::PyMethodBase::PyRunStringvoid PyRunString(TString code, TString errorMessage=""Failed to run python code"", int start=256)Execute Python code from string.Definition PyMethodBase.cxx:325; TMVA::PyMethodBase::fLocalNSPyObject * fLocalNSDefinition PyMethodBase.h:134; TMVA::Tools::LogMsgLogger & Log() constDefinition Tools.h:228; TMVA::Types::EMVAEMVADefinition Types.h:76; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; TString::ReplaceAllTString & ReplaceAll(const TString &s1, const TString &s2)Definition TString.h:704; TString::IsNullBool_t IsNull() constDefinition TString.h:414; TSystem::GetFromPipevirtual TString GetFromPipe(const char *command)Execute command and return output in TString.Definition TSystem.cxx:680; int; TMVAcreate variable transformationsDefinition GeneticMinimizer.h:22; TMVA::Python_ExecutableTString Python_Executable()Function to find current Python executable used by ROOT If ""Python3"" is installed,...Definition PyMethodBase.cxx:43; TMVA::gToolsTools & gTools(); TMVA::EndlMsgLogger & Endl(MsgLogger &ml)Definition MsgLogger.h:148. tmvapymvasrcPyMethodBase.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:56 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/PyMethodBase_8cxx_source.html:19293,Log,LogMsgLogger,19293,doc/master/PyMethodBase_8cxx_source.html,https://root.cern,https://root.cern/doc/master/PyMethodBase_8cxx_source.html,2,['Log'],"['Log', 'LogMsgLogger']"
Testability,"MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); voidTMVA::MethodANNBase::SetNeuronInputCalculator(TMVA::TNeuronInput* inputCalculator); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::MethodBase::WriteEvaluationHistosToFile(TMVA::Types::ETreeType treetype); virtual voidTMVA::MethodANNBase::WriteMonitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodMLP.html:11941,Test,TestBits,11941,root/html528/TMVA__MethodMLP.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodMLP.html,4,['Test'],"['TestBits', 'TestClassification', 'TestMulticlass', 'TestRegression']"
Testability,"MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::MethodBase::WriteEvaluationHistosToFile(TMVA::Types::ETreeType treetype); virtual voidTMVA::MethodBase::WriteMonitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const; voidWriteWeightsToStream(TFile& rf) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MethodKNN.html:12422,Test,TestClassification,12422,root/html602/TMVA__MethodKNN.html,https://root.cern,https://root.cern/root/html602/TMVA__MethodKNN.html,6,['Test'],"['TestClassification', 'TestMulticlass', 'TestRegression']"
Testability,"MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; UInt_tTargetSelectionToUInt(TMVA::ETargetSelection ts) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); voidTrainMonoTargetRegression(); voidTrainMultiClassification(); voidTrainMultiTargetRegression(); voidTrainSeparatedClassification(); voidTrainUnifiedClassification(); TMVA::MethodPDEFoam::EKernelUIntToKernel(UInt_t iker); TMVA::ETargetSelectionUIntToTargetSelection(UInt_t its); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::Metho",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__MethodPDEFoam.html:12724,Test,TestBits,12724,root/html530/TMVA__MethodPDEFoam.html,https://root.cern,https://root.cern/root/html530/TMVA__MethodPDEFoam.html,2,['Test'],['TestBits']
Testability,"MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. voidCalculateMulticlassValues(const TMVA::Event*& evt, vector<Double_t>& parameters, vector<Float_t>& values); voidClearAll(); voidCreateFormula(); virtual voidDeclareOptions(); Double_tInterpretFormula(const TMVA::Event*, vector<double,allocator<double> >::iterator begin, vector<double,allocator<double> >::iterator end); voidPrintResults(const TString&, vector<Double_t>&, const Double_t) const; virtual voidProcessOptions(). Data Members; public:. enum TMVA::MethodBase::EWeightFileType { kROOT; kTEXT; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. Bool_tTMVA::MethodBase::fSetupCompletedis method setup; const TMVA::Event*TMVA::MethodBase::fTmpEvent! temporary event when testing on a different DataSet than the own one. protected:. TMVA::Types::EAnalysisTypeTMVA::MethodBase::fAnalysisTypemethod-mode : true --> regression, false --> classification; UInt_tTMVA::MethodBase::fBackgroundClassindex of the Background-class; vector<TString>*TMVA::MethodBase::fInputVarsvector of input variables used in MVA; vector<Float_t>*TMVA::MethodBase::fMulticlassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase::fNbinsnumber of bins in input variable histograms; Int_tTMVA::MethodBase::fNbinsHnumber of bins in evaluation histograms; Int_tTMVA::MethodBase::fNbinsMVAoutputnumber of bins in MVA output histograms; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. vector<Double_t>fBest",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__MethodFDA.html:15878,test,testing,15878,root/html530/TMVA__MethodFDA.html,https://root.cern,https://root.cern/root/html530/TMVA__MethodFDA.html,3,['test'],['testing']
Testability,"MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. voidCalculateMulticlassValues(const TMVA::Event*& evt, vector<Double_t>& parameters, vector<Float_t>& values); voidClearAll(); voidCreateFormula(); virtual voidDeclareOptions(); Double_tInterpretFormula(const TMVA::Event*, vector<double,allocator<double> >::iterator begin, vector<double,allocator<double> >::iterator end); voidPrintResults(const TString&, vector<Double_t>&, const Double_t) const; virtual voidProcessOptions(). Data Members; public:. enum TMVA::MethodBase::EWeightFileType { kROOT; kTEXT; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. Bool_tTMVA::MethodBase::fSetupCompletedis method setup; const TMVA::Event*TMVA::MethodBase::fTmpEvent! temporary event when testing on a different DataSet than the own one. protected:. TMVA::Types::EAnalysisTypeTMVA::MethodBase::fAnalysisTypemethod-mode : true --> regression, false --> classification; UInt_tTMVA::MethodBase::fBackgroundClassindex of the Background-class; vector<TString>*TMVA::MethodBase::fInputVarsvector of input variables used in MVA; vector<Float_t>*TMVA::MethodBase::fMulticlassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase::fNbinsnumber of bins in representative histograms; Int_tTMVA::MethodBase::fNbinsHnumber of bins in evaluation histograms; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. vector<Double_t>fBestParsthe pars that optimise (minimise) the estimator; TStringfConvergerfitmethod",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodFDA.html:15337,test,testing,15337,root/html528/TMVA__MethodFDA.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodFDA.html,1,['test'],['testing']
Testability,"MethodBase::WriteStateToFile() const. protected:. Double_tCalculateMVAError(); voidCalcXminXmax(); TMVA::PDEFoamKernelBase*CreatePDEFoamKernel(); voidDeleteFoams(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); voidFillVariableNamesToFoam() const; virtual voidGetHelpMessage() const; const TString&TMVA::MethodBase::GetInternalVarName(Int_t ivar) const; const TString&TMVA::MethodBase::GetOriginalVarName(Int_t ivar) const; const TString&TMVA::Configurable::GetReferenceFile() const; static TMVA::MethodBase*TMVA::MethodBase::GetThisBase(); const TString&TMVA::MethodBase::GetWeightFileDir() const; Bool_tTMVA::MethodBase::HasTrainingTree() const; Bool_tTMVA::MethodBase::Help() const; Bool_tTMVA::MethodBase::IgnoreEventsWithNegWeightsInTraining() const; TMVA::PDEFoam*InitFoam(TString, TMVA::EFoamType, UInt_t cls = 0); Bool_tTMVA::MethodBase::IsConstructedFromWeightFile() const; Bool_tTMVA::MethodBase::IsNormalised() const; TMVA::MsgLogger&TMVA::Configurable::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; virtual voidMakeClassSpecific(ostream&, const TString&) const; virtual voidTMVA::MethodBase::MakeClassSpecificHeader(ostream&, const TString& = """") const; voidTObject::MakeZombie(); voidTMVA::MethodBase::NoErrorCalc(Double_t *const err, Double_t *const errUpper); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidSetXminXmax(TMVA::PDEFoam*); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. virtual voidDeclareCompatibilityOption",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__MethodPDEFoam.html:15110,Log,Log,15110,root/html534/TMVA__MethodPDEFoam.html,https://root.cern,https://root.cern/root/html534/TMVA__MethodPDEFoam.html,1,['Log'],['Log']
Testability,"MethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); Bool_tUseBoost() const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::MethodBase::WriteEvaluationHistosToFile(TMVA::Types::ETreeType treetype); virtual voidWriteMonitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__MethodRuleFit.html:12703,Test,TestBits,12703,root/html534/TMVA__MethodRuleFit.html,https://root.cern,https://root.cern/root/html534/TMVA__MethodRuleFit.html,4,['Test'],"['TestBits', 'TestClassification', 'TestMulticlass', 'TestRegression']"
Testability,MethodCuts::fNegEffWarning. private . flag risen in case of negative efficiency warning ; Definition at line 213 of file MethodCuts.h. ◆ fNpar. Int_t TMVA::MethodCuts::fNpar. private . number of parameters in fit (default: 2*Nvar) ; Definition at line 191 of file MethodCuts.h. ◆ fRandom. TRandom* TMVA::MethodCuts::fRandom. private . random generator for MC optimisation method ; Definition at line 194 of file MethodCuts.h. ◆ fRangeSign. std::vector<Int_t>* TMVA::MethodCuts::fRangeSign. private . used to match cuts to fit parameters (and vice versa) ; Definition at line 193 of file MethodCuts.h. ◆ fRmsB. std::vector<Double_t>* TMVA::MethodCuts::fRmsB. private . RMSs of variables (background) ; Definition at line 200 of file MethodCuts.h. ◆ fRmsS. std::vector<Double_t>* TMVA::MethodCuts::fRmsS. private . RMSs of variables (signal) ; Definition at line 199 of file MethodCuts.h. ◆ fTestSignalEff. Double_t TMVA::MethodCuts::fTestSignalEff. private . used to test optimized signal efficiency ; Definition at line 172 of file MethodCuts.h. ◆ fTmpCutMax. Double_t* TMVA::MethodCuts::fTmpCutMax. private . temporary maximum requirement ; Definition at line 187 of file MethodCuts.h. ◆ fTmpCutMin. Double_t* TMVA::MethodCuts::fTmpCutMin. private . temporary minimum requirement ; Definition at line 186 of file MethodCuts.h. ◆ fVarHistB. std::vector<TH1*>* TMVA::MethodCuts::fVarHistB. private . reference histograms (background) ; Definition at line 206 of file MethodCuts.h. ◆ fVarHistB_smooth. std::vector<TH1*>* TMVA::MethodCuts::fVarHistB_smooth. private . smoothed reference histograms (background) ; Definition at line 208 of file MethodCuts.h. ◆ fVarHistS. std::vector<TH1*>* TMVA::MethodCuts::fVarHistS. private . reference histograms (signal) ; Definition at line 205 of file MethodCuts.h. ◆ fVarHistS_smooth. std::vector<TH1*>* TMVA::MethodCuts::fVarHistS_smooth. private . smoothed reference histograms (signal) ; Definition at line 207 of file MethodCuts.h. ◆ fVarPdfB. std::vector<PD,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodCuts.html:51901,test,test,51901,doc/master/classTMVA_1_1MethodCuts.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCuts.html,1,['test'],['test']
Testability,"MethodDL, TMVA::MethodDNN, TMVA::MethodDT, TMVA::MethodFDA, TMVA::MethodFisher, TMVA::MethodHMatrix, TMVA::MethodKNN, TMVA::MethodLD, TMVA::MethodLikelihood, TMVA::MethodMLP, TMVA::MethodPDEFoam, TMVA::MethodPDERS, TMVA::MethodRuleFit, TMVA::MethodSVM, and TMVA::MethodTMlpANN. ◆ StreamerNVirtual(). void TMVA::MethodBase::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 731 of file MethodBase.h. ◆ TestClassification(). void TMVA::MethodBase::TestClassification ; (; ). virtual . initialization ; Reimplemented in TMVA::MethodPyAdaBoost, TMVA::MethodPyGTB, TMVA::MethodPyKeras, TMVA::MethodPyRandomForest, TMVA::MethodPyTorch, TMVA::MethodC50, TMVA::MethodRSNNS, TMVA::MethodRSVM, TMVA::MethodRXGB, TMVA::MethodBoost, and TMVA::MethodCuts.; Definition at line 1127 of file MethodBase.cxx. ◆ TestMulticlass(). void TMVA::MethodBase::TestMulticlass ; (; ). virtual . test multiclass classification ; Definition at line 1100 of file MethodBase.cxx. ◆ TestRegression(). void TMVA::MethodBase::TestRegression ; (; Double_t & ; bias, . Double_t & ; biasT, . Double_t & ; dev, . Double_t & ; devT, . Double_t & ; rms, . Double_t & ; rmsT, . Double_t & ; mInf, . Double_t & ; mInfT, . Double_t & ; corr, . Types::ETreeType ; type . ). virtual . calculate <sum-of-deviation-squared> of regression output versus ""true"" value from test sample . bias = average deviation; dev = average absolute deviation; rms = rms of deviation . Definition at line 992 of file MethodBase.cxx. ◆ Train(). virtual void TMVA::MethodBase::Train ; (; ). pure virtual . Implements TMVA::IMethod.; Implemented in TMVA::MethodPyAdaBoost, TMVA::MethodPyGTB, TMVA::MethodPyKeras, TMVA::MethodPyRandomForest, TMVA::MethodPyTorch, TMVA::MethodC50, TMVA::MethodRSNNS, TMVA::MethodRSVM, TMVA::MethodRXGB, TMVA::MethodDL, TMVA::MethodDNN, TMVA::MethodHMatrix, TMVA::MethodLikelihood, TMVA::MethodMLP, TMVA::PyMethodBase, TMVA::RMethodBase, TMVA::MethodANNBase, TMVA::MethodCompositeBase, TMVA::Met",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodBase.html:76356,Test,TestRegression,76356,doc/master/classTMVA_1_1MethodBase.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html,1,['Test'],['TestRegression']
Testability,"MethodDT.cxx. ◆ ReadWeightsFromStream() [3/3]. virtual void TMVA::MethodBase::ReadWeightsFromStream ; (; TFile & ; ). inlinevirtual . Reimplemented from TMVA::MethodBase.; Definition at line 266 of file MethodBase.h. ◆ ReadWeightsFromXML(). void TMVA::MethodDT::ReadWeightsFromXML ; (; void * ; wghtnode). virtual . Implements TMVA::MethodBase.; Definition at line 531 of file MethodDT.cxx. ◆ SetMinNodeSize() [1/2]. void TMVA::MethodDT::SetMinNodeSize ; (; Double_t ; sizeInPercent). Definition at line 320 of file MethodDT.cxx. ◆ SetMinNodeSize() [2/2]. void TMVA::MethodDT::SetMinNodeSize ; (; TString ; sizeInPercent). Definition at line 331 of file MethodDT.cxx. ◆ Streamer(). virtual void TMVA::MethodDT::Streamer ; (; TBuffer & ; ). virtual . Reimplemented from TMVA::MethodBase. ◆ StreamerNVirtual(). void TMVA::MethodDT::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 139 of file MethodDT.h. ◆ TestTreeQuality(). Double_t TMVA::MethodDT::TestTreeQuality ; (; DecisionTree * ; dt). Definition at line 506 of file MethodDT.cxx. ◆ Train(). void TMVA::MethodDT::Train ; (; void ; ). virtual . Implements TMVA::MethodBase.; Definition at line 375 of file MethodDT.cxx. Member Data Documentation. ◆ fAutomatic. Bool_t TMVA::MethodDT::fAutomatic. private . use user given prune strength or automatically determined one using a validation sample ; Definition at line 126 of file MethodDT.h. ◆ fDeltaPruneStrength. Double_t TMVA::MethodDT::fDeltaPruneStrength. private . step size in pruning, is adjusted according to experience of previous trees ; Definition at line 132 of file MethodDT.h. ◆ fErrorFraction. Double_t TMVA::MethodDT::fErrorFraction. private . ntuple var: misclassification error fraction ; Definition at line 122 of file MethodDT.h. ◆ fEventSample. std::vector<Event*> TMVA::MethodDT::fEventSample. private . the training events ; Definition at line 106 of file MethodDT.h. ◆ fgDebugLevel. const Int_t TMVA::MethodDT::fgDebugLevel = 0. s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodDT.html:39336,Test,TestTreeQuality,39336,doc/master/classTMVA_1_1MethodDT.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodDT.html,1,['Test'],['TestTreeQuality']
Testability,"MethodFunction<ROOT::Math::IBaseFunctionMultiDim>::Type_tType() const; virtual voidROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::UpdateNCalls() const; voidUseSumOfWeightSquare(bool on = true). private:. virtual doubleDoDerivative(const double* x, unsigned int icoord) const; virtual doubleDoEval(const double* x) const; ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>&); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>&operator=(const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>&). Data Members; public:. enum ROOT::Math::BasicFitMethodFunction::Type_t { kUndefined; kLeastSquare; kLogLikelihood; };. private:. const ROOT::Fit::UnBinData&fData; const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>::IModelFunction&fFunc; vector<double>fGradfor derivatives; boolfIsExtendedflag for indicating if likelihood is extended; unsigned intfNEffPointsnumber of effective points used in the fit ; intfWeightflag to indicate if needs to evaluate using weight or weight squared (default weight = 0). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseFunction * Clone() const; clone the function (need to return Base for Windows). { return new LogLikelihoodFCN(fData,fFunc,fWeight,fIsExtended); }. unsigned int NFitPoints() const; using BaseObjFunction::operator();; effective points used in the fit. { return fNEffPoints; }. double DataElement(const double* x, unsigned int i, double* g) const; i-th likelihood contribution and its gradient. void Gradient(const double* x, double* g) const; need to be virtual to be instantited. void UseSumOfWeightSquare(bool on = true); Use sum of the weight squared in evaluating the likelihood; (this is needed for calculating the errors). double DoEval(const double* x) const. Evaluation of the function (required by int",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html:2962,Log,LogLikelihoodFCN,2962,root/html534/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html534/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,1,['Log'],['LogLikelihoodFCN']
Testability,MethodRSNNS::ProcessOptions ; (; ). virtual . Implements TMVA::RMethodBase.; Definition at line 230 of file MethodRSNNS.cxx. ◆ ReadModelFromFile(). void TMVA::MethodRSNNS::ReadModelFromFile ; (; ). Definition at line 332 of file MethodRSNNS.cxx. ◆ ReadWeightsFromStream() [1/3]. virtual void TMVA::MethodRSNNS::ReadWeightsFromStream ; (; std::istream & ; ). inlinevirtual . Implements TMVA::RMethodBase.; Definition at line 72 of file MethodRSNNS.h. ◆ ReadWeightsFromStream() [2/3]. virtual void TMVA::MethodBase::ReadWeightsFromStream ; (; std::istream & ; ). virtual . Implements TMVA::RMethodBase. ◆ ReadWeightsFromStream() [3/3]. virtual void TMVA::MethodBase::ReadWeightsFromStream ; (; TFile & ; ). inlinevirtual . Reimplemented from TMVA::RMethodBase.; Definition at line 266 of file MethodBase.h. ◆ ReadWeightsFromXML(). virtual void TMVA::MethodRSNNS::ReadWeightsFromXML ; (; void * ; ). inlinevirtual . Implements TMVA::RMethodBase.; Definition at line 71 of file MethodRSNNS.h. ◆ TestClassification(). void MethodRSNNS::TestClassification ; (; ). virtual . initialization ; Reimplemented from TMVA::MethodBase.; Definition at line 244 of file MethodRSNNS.cxx. ◆ Train(). void MethodRSNNS::Train ; (; void ; ). virtual . Implements TMVA::RMethodBase.; Definition at line 164 of file MethodRSNNS.cxx. Friends And Related Symbol Documentation. ◆ Factory. friend class Factory. friend . Definition at line 81 of file MethodRSNNS.h. ◆ Reader. friend class Reader. friend . Definition at line 82 of file MethodRSNNS.h. Member Data Documentation. ◆ asfactor. ROOT::R::TRFunctionImport TMVA::MethodRSNNS::asfactor. protected . Definition at line 115 of file MethodRSNNS.h. ◆ fDataSetManager. DataSetManager* TMVA::MethodRSNNS::fDataSetManager. private . Definition at line 80 of file MethodRSNNS.h. ◆ fFactorNumeric. std::vector<UInt_t> TMVA::MethodRSNNS::fFactorNumeric. protected . Definition at line 110 of file MethodRSNNS.h. ◆ fHiddenActFunc. TString TMVA::MethodRSNNS::fHiddenActFunc. protec,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodRSNNS.html:32203,Test,TestClassification,32203,doc/master/classTMVA_1_1MethodRSNNS.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodRSNNS.html,1,['Test'],['TestClassification']
Testability,"Min (Double_t m);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Interval; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Additional Inherited Members;  Protected Attributes inherited from TMVA::Interval; Double_t fMax;  the constraints of the Interval ;  ; Double_t fMin;  ; Int_t fNbins;  when >0 : number of bins (discrete interval); when ==0 continuous interval ;  . #include <TMVA/LogInterval.h>. Inheritance diagram for TMVA::LogInterval:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ LogInterval() [1/2]. TMVA::LogInterval::LogInterval ; (; Double_t ; min, . Double_t ; max, . Int_t ; nbins = 0 . ). Definition at line 89 of file LogInterval.cxx. ◆ LogInterval() [2/2]. TMVA::LogInterval::LogInterval ; (; const LogInterval & ; other). Definition at line 95 of file LogInterval.cxx. ◆ ~LogInterval(). TMVA::LogInterval::~LogInterval ; (; ). virtual . destructor ; Definition at line 103 of file LogInterval.cxx. Member Function Documentation. ◆ Class(). static TClass * TMVA::LogInterval::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::LogInterval::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::LogInterval::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 106 of file LogInterval.h. ◆ DeclFileName(). static const char * TMVA::LogInterval::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 106 of file",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1LogInterval.html:3483,Log,LogInterval,3483,doc/master/classTMVA_1_1LogInterval.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1LogInterval.html,2,['Log'],['LogInterval']
Testability,"MinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); voidTGMainFrame::SetMWMHints(UInt_t value, UInt_t funcs, UInt_t input); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidSetStatusText(const char* txt = 0, Int_t partidx = 0); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGMainFrame::SetWindowName(const char* name = 0); virtual voidSetWindowPosition(Int_t x, Int_t y); virtual voidSetWindowSize(UInt_t w, UInt_t h); virtual voidSetWindowTitle(const char* newTitle); voidTGMainFrame::SetWMPosition(Int_t x, Int_t y); voidTGMainFrame::SetWMSize(UInt_t w, UInt_t h); voidTGMainFrame::SetWMSizeHints(UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc); voidTGMainFrame::SetWMState(EInitialState state); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidShow(); virtual voidShowEditor(Bool_t show = kTRUE); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp); virtual voidShowMenuBar(Bool_t show = kTRUE); virtual voidShowStatusBar(Bool_t show = kTRUE); virtual voidShowToolBar(Bool_t show = kTRUE); virtual voidShowToolTips(Bool_t show = kTRUE); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRootCanvas.html:16809,Test,TestBit,16809,root/html528/TRootCanvas.html,https://root.cern,https://root.cern/root/html528/TRootCanvas.html,6,['Test'],"['TestBit', 'TestBits']"
Testability,"Minimizer construction and; after the last MINUIT operation, the MINUIT status, variance quality,; EDM setting, number of calls with evaluation problems, the minimized; function value and the full correlation matrix. RooPlot* contour(RooRealVar& var1, RooRealVar& var2, Double_t n1 = 1, Double_t n2 = 2, Double_t n3 = 0, Double_t n4 = 0, Double_t n5 = 0, Double_t n6 = 0); Create and draw a TH2 with the error contours in parameters var1 and v2 at up to 6 'sigma' settings; where 'sigma' is calculated as n*n*errorLevel. void profileStart(); Start profiling timer. void profileStop(); Stop profiling timer and report results of last session. void applyCovarianceMatrix(TMatrixDSym& V); Apply results of given external covariance matrix. i.e. propagate its errors; to all RRV parameter representations and give this matrix instead of the; HESSE matrix at the next save() call. RooFitResult* lastMinuitFit(const RooArgList& varList = RooArgList()); Import the results of the last fit performed, interpreting; the fit parameters as the given varList of parameters. RooMinimizer(RooAbsReal& function). void setEvalErrorWall(Bool_t flag); { _fcn->SetEvalErrorWall(flag); }. void setPrintEvalErrors(Int_t numEvalErrors); { _fcn->SetPrintEvalErrors(numEvalErrors); }. void setVerbose(Bool_t flag = kTRUE); { _verbose = flag ; _fcn->SetVerbose(flag); }. void setProfile(Bool_t flag = kTRUE); { _profile = flag ; }. Bool_t setLogFile(const char* logf = 0); { return _fcn->SetLogFile(logf); }. void saveStatus(const char* label, Int_t status); { _statusHistory.push_back(std::pair<std::string,int>(label,status)) ; }. Int_t getNPar() const; { return _fcn->NDim() ; }. ofstream* logfile() const; { return _fcn->GetLogFile(); }. Double_t& maxFCN(); { return _fcn->GetMaxFCN() ; }. » Last changed: Fri Dec 2 14:26:52 2011 » Last generated: 2011-12-02 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooMinimizer.html:12816,log,logf,12816,root/html532/RooMinimizer.html,https://root.cern,https://root.cern/root/html532/RooMinimizer.html,3,['log'],"['logf', 'logfile']"
Testability,Minimizer.cxx;  GSLMinimizer1D.cxx;  GSLMonteFunctionAdapter.h;  GSLMonteFunctionWrapper.h;  GSLMultiFit.h;  GSLMultiFitFunctionAdapter.h;  GSLMultiFitFunctionWrapper.h;  GSLMultiMinFunctionAdapter.h;  GSLMultiMinFunctionWrapper.h;  GSLMultiMinimizer.h;  GSLMultiRootFinder.cxx;  GSLMultiRootFunctionAdapter.h;  GSLMultiRootFunctionWrapper.h;  GSLMultiRootSolver.h;  GSLNLSMinimizer.cxx;  GSLQRngWrapper.h;  GSLQuasiRandom.cxx;  GSLRndmEngines.cxx;  GSLRngROOTWrapper.h;  GSLRngWrapper.h;  GSLRootFdFSolver.h;  GSLRootFinder.cxx;  GSLRootFinderDeriv.cxx;  GSLRootFSolver.h;  GSLRootHelper.cxx;  GSLSimAnMinimizer.cxx;  GSLSimAnnealing.cxx;  Interpolator.cxx;  KelvinFunctions.cxx;  MCParameters.cxx;  MultiNumGradFunction.cxx;  PdfFuncMathMore.cxx;  Polynomial.cxx;  QuantFuncMathMore.cxx;  RootFinderAlgorithms.cxx;  SpecFuncMathMore.cxx;  Vavilov.cxx;  VavilovAccurate.cxx;  VavilovAccurateCdf.cxx;  VavilovAccuratePdf.cxx;  VavilovAccurateQuantile.cxx;  VavilovFast.cxx;  zsolve_cubic.cxx;  ► test;  piRandom.C;  pirndm.C;  simanTSP.cxx;  testChebyshev.cxx;  testDerivation.cxx;  testFunctor.cxx;  testGSLIntegration.cxx;  testGSLRootFinder.cxx;  testInterpolation.cxx;  testMCIntegration.cxx;  testMinimization1D.cxx;  testMultiRootFinder.cxx;  testPermute.cxx;  testQuasiRandom.cxx;  testRandom.cxx;  testRandomDist.cxx;  testSpecFunc.cxx;  testStatFunc.cxx;  testVavilov.cxx;  UnuRanDist.h;  VavilovTest.cxx;  VavilovTest.h;  ► matrix;  ► inc;  LinkDef.h;  TDecompBase.h;  TDecompBK.h;  TDecompChol.h;  TDecompLU.h;  TDecompQRH.h;  TDecompSparse.h;  TDecompSVD.h;  TMatrix.h;  TMatrixD.h;  TMatrixDBase.h;  TMatrixDBasefwd.h;  TMatrixDEigen.h;  TMatrixDfwd.h;  TMatrixDLazy.h;  TMatrixDSparse.h;  TMatrixDSparsefwd.h;  TMatrixDSym.h;  TMatrixDSymEigen.h;  TMatrixDSymfwd.h;  TMatrixDUtils.h;  TMatrixDUtilsfwd.h;  TMatrixF.h;  TMatrixFBase.h;  TMatrixFBasefwd.h;  TMatrixFfwd.h;  TMatrixFLazy.h;  TMatrixFSparse.h;  TMatrixFSparsefwd.h;  TMatrixFSym.h;  TMatrixFSymfwd.h;  TMatrixFUtils.h;  TMa,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:49102,test,test,49102,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,1,['test'],['test']
Testability,Minimizer.cxx;  GSLMinimizer1D.cxx;  GSLMonteFunctionAdapter.h;  GSLMonteFunctionWrapper.h;  GSLMultiFit.h;  GSLMultiFitFunctionAdapter.h;  GSLMultiFitFunctionWrapper.h;  GSLMultiMinFunctionAdapter.h;  GSLMultiMinFunctionWrapper.h;  GSLMultiMinimizer.h;  GSLMultiRootFinder.cxx;  GSLMultiRootFunctionAdapter.h;  GSLMultiRootFunctionWrapper.h;  GSLMultiRootSolver.h;  GSLNLSMinimizer.cxx;  GSLQRngWrapper.h;  GSLQuasiRandom.cxx;  GSLRndmEngines.cxx;  GSLRngROOTWrapper.h;  GSLRngWrapper.h;  GSLRootFdFSolver.h;  GSLRootFinder.cxx;  GSLRootFinderDeriv.cxx;  GSLRootFSolver.h;  GSLRootHelper.cxx;  GSLSimAnMinimizer.cxx;  GSLSimAnnealing.cxx;  Interpolator.cxx;  KelvinFunctions.cxx;  MCParameters.cxx;  MultiNumGradFunction.cxx;  PdfFuncMathMore.cxx;  Polynomial.cxx;  QuantFuncMathMore.cxx;  RootFinderAlgorithms.cxx;  SpecFuncMathMore.cxx;  Vavilov.cxx;  VavilovAccurate.cxx;  VavilovAccurateCdf.cxx;  VavilovAccuratePdf.cxx;  VavilovAccurateQuantile.cxx;  VavilovFast.cxx;  zsolve_cubic.cxx;  ► test;  piRandom.C;  pirndm.C;  simanTSP.cxx;  testChebyshev.cxx;  testDerivation.cxx;  testFunctor.cxx;  testGSLIntegration.cxx;  testGSLRootFinder.cxx;  testInterpolation.cxx;  testMCIntegration.cxx;  testMinimization1D.cxx;  testMultiRootFinder.cxx;  testPermute.cxx;  testQuasiRandom.cxx;  testRandom.cxx;  testRandomDist.cxx;  testSpecFunc.cxx;  testStatFunc.cxx;  testVavilov.cxx;  UnuRanDist.h;  VavilovTest.cxx;  VavilovTest.h;  ► matrix;  ► inc;  TDecompBase.h;  TDecompBK.h;  TDecompChol.h;  TDecompLU.h;  TDecompQRH.h;  TDecompSparse.h;  TDecompSVD.h;  TMatrix.h;  TMatrixD.h;  TMatrixDBase.h;  TMatrixDBasefwd.h;  TMatrixDEigen.h;  TMatrixDfwd.h;  TMatrixDLazy.h;  TMatrixDSparse.h;  TMatrixDSparsefwd.h;  TMatrixDSym.h;  TMatrixDSymEigen.h;  TMatrixDSymfwd.h;  TMatrixDUtils.h;  TMatrixDUtilsfwd.h;  TMatrixF.h;  TMatrixFBase.h;  TMatrixFBasefwd.h;  TMatrixFfwd.h;  TMatrixFLazy.h;  TMatrixFSparse.h;  TMatrixFSparsefwd.h;  TMatrixFSym.h;  TMatrixFSymfwd.h;  TMatrixFUtils.h;  TMatrixFUtilsfw,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/files.html:47680,test,test,47680,doc/v610/files.html,https://root.cern,https://root.cern/doc/v610/files.html,1,['test'],['test']
Testability,"Minimizer; 5.7 MnMinimize and CombinedMinimizer; 5.8 MnMinos; 5.9 MnPlot; 5.10 MnScan and ScanMinimizer; 5.11 MnSimplex and SimplexMinimizer; 5.12 MnStrategy; 5.13 MnUserCovariance; 5.14 MnUserParameters; 5.15 MnUserParameterState; 5.16 MnPrint.h. 6 How to get the right answer from M; 6.1 Which minimizer to use; 6.2 Floating point precision; 6.3 Parameter limits; 6.4 Fixing and releasing parameters; 6.5 Interpretation of parameter errors; 6.6 Convergence in \(\mbox{MIGRAD}\), and positive–definiteness; 6.7 Additional trouble–shooting. 7 A complete example; 7.1 The user’s \(\mbox{FCN}\); 7.2 The user’s main program. Minuit 2; *** Fred JAMES and Matthias WINKLER CERN, Geneva ***; 1 Foreword; 1.1 What M is intended to do; M is conceived as a tool to find the minimum value of a multi-parameter function (the “\(\mbox{FCN}\)”) and analyze the shape of the function around the minimum. The principal application is foreseen for statistical analysis, working on chisquare or log-likelihood functions, to compute the best-fit parameter values and uncertainties, including correlations between the parameters. It is especially suited to handle difficult problems, including those which may require guidance in order to find the correct solution.; 1.2 What M is not intended to do; Although M will of course solve easy problems faster than complicated ones, it is not intended for the repeated solution of identically parametrized problems (such as track fitting in a detector) where a specialized program will in general be much more efficient.; 1.3 Further remarks; M was initially written in Fortran around 1975-1980 at CERN by Fred James @bib-MINUIT. Its main field of usage is statistical data analysis of experimental data recorded at CERN, but it is also used by people doing data analysis outside CERN or outside high energy physics (HEP). In 2002 Fred James started a project aiming to re-implement M in an object-oriented way using .; More information about recent developments, releases an",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/minuit2/Minuit2.html:1824,log,log-likelihood,1824,root/htmldoc/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/htmldoc/guides/minuit2/Minuit2.html,1,['log'],['log-likelihood']
Testability,MnUserParameterState.cxx;  MnUserTransformation.cxx;  mnvert.cxx;  mnxerbla.cxx;  ModularFunctionMinimizer.cxx;  MPIProcess.cxx;  NegativeG2LineSearch.cxx;  Numerical2PGradientCalculator.cxx;  ParametricFunction.cxx;  ScanBuilder.cxx;  SimplexBuilder.cxx;  SimplexParameters.cxx;  SimplexSeedGenerator.cxx;  SinParameterTransformation.cxx;  SqrtLowParameterTransformation.cxx;  SqrtUpParameterTransformation.cxx;  TMinuit2TraceObject.cxx;  VariableMetricBuilder.cxx;  VariableMetricEDMEstimator.cxx;  ► test;  ► MnSim;  DemoFumili.cxx;  DemoGaussSim.cxx;  demoMinimizer.cxx;  FlatRandomGen.h;  GaussDataGen.cxx;  GaussDataGen.h;  GaussFcn.cxx;  GaussFcn.h;  GaussFcn2.cxx;  GaussFcn2.h;  GaussFunction.h;  GaussianModelFunction.h;  GaussRandomGen.h;  ParallelTest.cxx;  PaulTest.cxx;  PaulTest2.cxx;  PaulTest3.cxx;  PaulTest4.cxx;  ReneTest.cxx;  ► MnTutorial;  Quad12F.h;  Quad12FMain.cxx;  Quad1F.h;  Quad1FMain.cxx;  Quad4F.h;  Quad4FMain.cxx;  Quad8F.h;  Quad8FMain.cxx;  testMinimizer.cxx;  testNdimFit.cxx;  testUnbinGausFit.cxx;  testUserFunc.cxx;  ► mlp;  ► inc;  LinkDef.h;  TMLPAnalyzer.h;  TMultiLayerPerceptron.h;  TNeuron.h;  TSynapse.h;  ► src;  TMLPAnalyzer.cxx;  TMultiLayerPerceptron.cxx;  TNeuron.cxx;  TSynapse.cxx;  ► physics;  ► inc;  LinkDef.h;  TFeldmanCousins.h;  TGenPhaseSpace.h;  TLorentzRotation.h;  TLorentzVector.h;  TQuaternion.h;  TRobustEstimator.h;  TRolke.h;  TRotation.h;  TVector2.h;  TVector3.h;  ► src;  TFeldmanCousins.cxx;  TGenPhaseSpace.cxx;  TLorentzRotation.cxx;  TLorentzVector.cxx;  TQuaternion.cxx;  TRobustEstimator.cxx;  TRolke.cxx;  TRotation.cxx;  TVector2.cxx;  TVector3.cxx;  ► quadp;  ► inc;  LinkDef.h;  TGondzioSolver.h;  TMehrotraSolver.h;  TQpDataBase.h;  TQpDataDens.h;  TQpDataSparse.h;  TQpLinSolverBase.h;  TQpLinSolverDens.h;  TQpLinSolverSparse.h;  TQpProbBase.h;  TQpProbDens.h;  TQpProbSparse.h;  TQpResidual.h;  TQpSolverBase.h;  TQpVar.h;  ► src;  TGondzioSolver.cxx;  TMehrotraSolver.cxx;  TQpDataBase.cxx;  TQpDataDens.cxx;  TQp,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:55336,test,testNdimFit,55336,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,2,['test'],['testNdimFit']
Testability,MnUserParameterState.cxx;  MnUserTransformation.cxx;  mnvert.cxx;  mnxerbla.cxx;  ModularFunctionMinimizer.cxx;  MPIProcess.cxx;  NegativeG2LineSearch.cxx;  Numerical2PGradientCalculator.cxx;  ParametricFunction.cxx;  ScanBuilder.cxx;  SimplexBuilder.cxx;  SimplexParameters.cxx;  SimplexSeedGenerator.cxx;  SinParameterTransformation.cxx;  SqrtLowParameterTransformation.cxx;  SqrtUpParameterTransformation.cxx;  TMinuit2TraceObject.cxx;  VariableMetricBuilder.cxx;  VariableMetricEDMEstimator.cxx;  ► test;  ► MnSim;  DemoFumili.cxx;  DemoGaussSim.cxx;  demoMinimizer.cxx;  FlatRandomGen.h;  GaussDataGen.cxx;  GaussDataGen.h;  GaussFcn.cxx;  GaussFcn.h;  GaussFcn2.cxx;  GaussFcn2.h;  GaussFunction.h;  GaussianModelFunction.h;  GaussRandomGen.h;  ParallelTest.cxx;  PaulTest.cxx;  PaulTest2.cxx;  PaulTest3.cxx;  PaulTest4.cxx;  ReneTest.cxx;  ► MnTutorial;  Quad12F.h;  Quad12FMain.cxx;  Quad1F.h;  Quad1FMain.cxx;  Quad4F.h;  Quad4FMain.cxx;  Quad8F.h;  Quad8FMain.cxx;  testMinimizer.cxx;  testNdimFit.cxx;  testUnbinGausFit.cxx;  testUserFunc.cxx;  ► mlp;  ► inc;  TMLPAnalyzer.h;  TMultiLayerPerceptron.h;  TNeuron.h;  TSynapse.h;  ► src;  TMLPAnalyzer.cxx;  TMultiLayerPerceptron.cxx;  TNeuron.cxx;  TSynapse.cxx;  ► physics;  ► inc;  TFeldmanCousins.h;  TGenPhaseSpace.h;  TLorentzRotation.h;  TLorentzVector.h;  TQuaternion.h;  TRobustEstimator.h;  TRolke.h;  TRotation.h;  TVector2.h;  TVector3.h;  ► src;  TFeldmanCousins.cxx;  TGenPhaseSpace.cxx;  TLorentzRotation.cxx;  TLorentzVector.cxx;  TQuaternion.cxx;  TRobustEstimator.cxx;  TRolke.cxx;  TRotation.cxx;  TVector2.cxx;  TVector3.cxx;  ► quadp;  ► inc;  TGondzioSolver.h;  TMehrotraSolver.h;  TQpDataBase.h;  TQpDataDens.h;  TQpDataSparse.h;  TQpLinSolverBase.h;  TQpLinSolverDens.h;  TQpLinSolverSparse.h;  TQpProbBase.h;  TQpProbDens.h;  TQpProbSparse.h;  TQpResidual.h;  TQpSolverBase.h;  TQpVar.h;  ► src;  TGondzioSolver.cxx;  TMehrotraSolver.cxx;  TQpDataBase.cxx;  TQpDataDens.cxx;  TQpDataSparse.cxx;  TQpLinSolverBase.cx,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/files.html:53878,test,testNdimFit,53878,doc/v610/files.html,https://root.cern,https://root.cern/doc/v610/files.html,1,['test'],['testNdimFit']
Testability,"Model (const ModelConfig &model) override;  set the model via the ModelConfig ;  ; virtual void SetNuisanceParameters (const RooArgSet &set);  specify the nuisance parameters (eg. the rest of the parameters) ;  ; virtual void SetNumIters (Int_t numIters);  set the number of iterations when running a MC integration algorithm If not set use default algorithmic values In case of ToyMC sampling of the nuisance the value is 100 In case of using the GSL MCintegrations types the default value is defined in ROOT::Math::IntegratorMultiDimOptions::DefaultNCalls() ;  ; virtual void SetParameters (const RooArgSet &set);  specify the parameters of interest in the interval ;  ; virtual void SetPriorPdf (RooAbsPdf &pdf);  Set only the Prior Pdf. ;  ; void SetScanOfPosterior (int nbin=100);  use directly the approximate posterior function obtained by binning it in nbins by default the cdf is used by integrating the posterior if a value of nbin <= 0 the cdf function will be used ;  ; void SetShortestInterval ();  set the Bayesian calculator to compute the shortest interval (default is central interval) to switch off SetLeftSideTailFraction to the right value ;  ; void SetTestSize (double size) override;  set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval) ;  ; double Size () const override;  Get the size of the test (eg. rate of Type I error) ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooStats::IntervalCalculator; virtual ~IntervalCalculator ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1BayesianCalculator.html:6919,test,test,6919,doc/master/classRooStats_1_1BayesianCalculator.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1BayesianCalculator.html,1,['test'],['test']
Testability,"ModelFunction &func, const UnBinData &data, const double *p, int iWeight, bool extended, unsigned int &nPoints, ::ROOT::EExecutionPolicy executionPolicy, unsigned nChunks=0);  evaluate the LogL given a model function and the data at the point x. ;  ; void EvaluateLogLGradient (const IModelFunction &func, const UnBinData &data, const double *p, double *grad, unsigned int &nPoints, ::ROOT::EExecutionPolicy executionPolicy=::ROOT::EExecutionPolicy::kSequential, unsigned nChunks=0);  evaluate the LogL gradient given a model function and the data at the point p. ;  ; double EvaluatePdf (const IModelFunction &func, const UnBinData &data, const double *p, unsigned int ipoint, double *g=nullptr, double *h=nullptr, bool hasGrad=false, bool fullHessian=false);  evaluate the pdf contribution to the LogL given a model function and the BinPoint data. ;  ; double EvaluatePoissonBinPdf (const IModelFunction &func, const BinData &data, const double *x, unsigned int ipoint, double *g=nullptr, double *h=nullptr, bool hasGrad=false, bool fullHessian=false);  evaluate the pdf contribution to the Poisson LogL given a model function and the BinPoint data. ;  ; double EvaluatePoissonLogL (const IModelFunction &func, const BinData &data, const double *p, int iWeight, bool extended, unsigned int &nPoints, ::ROOT::EExecutionPolicy executionPolicy, unsigned nChunks=0);  evaluate the Poisson LogL given a model function and the data at the point p. ;  ; void EvaluatePoissonLogLGradient (const IModelFunction &func, const BinData &data, const double *p, double *grad, unsigned int &nPoints, ::ROOT::EExecutionPolicy executionPolicy=::ROOT::EExecutionPolicy::kSequential, unsigned nChunks=0);  evaluate the Poisson LogL given a model function and the data at the point p. ;  ; unsigned setAutomaticChunking (unsigned nEvents);  . Detailed Description; namespace defining utility free functions using in Fit for evaluating the various fit method functions (chi2, likelihood, etc..) given the data and the mo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html:3425,Log,LogL,3425,doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html,1,['Log'],['LogL']
Testability,"ModelPersistence;  ! flag to save the trained model ;  ; Bool_t fSilentFile;  ! if true dont produce file output ;  ; TStopwatch fTimer;  ! timer to measure the time. ;  ; TString fTransformations;  ! List of transformations to test ;  ; Bool_t fVerbose;  ! flag for extra information ;  ; TProcPool fWorkers;  ! procpool object ;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/Classification.h>. Inheritance diagram for TMVA::Experimental::Classification:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ Classification() [1/2]. TMVA::Experimental::Classification::Classification ; (; DataLoader * ; dataloader, . TFile * ; file, . TString ; options . ). explicit . Contructor to create a two class classifier. ; Parameters. dataloaderTMVA::DataLoader object with the data to train/test. ; fileTFile object to save the results ; optionsstring extra options. . Definition at line 181 of file Classification.cxx. ◆ Classification() [2/2]. TMVA::Experimental::Classification::Classification ; (; DataLoader * ; dataloader, . TString ; options . ). explicit . Contructor to create a two class classifier without output file. ; Parameters. dataloaderTMVA::DataLoader object with the data to train/test. ; optionsstring extra options. . Definition at line 200 of file Classification.cxx. ◆ ~Classification(). TMVA::Experimental::Classification::~Classification ; (; ). Definition at line 219 of file Classification.cxx. Member Function Documentation. ◆ Class(). static TClass * TMVA::Experimental::Classification::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::Experimental::Classification::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::Experim",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html:20139,test,test,20139,doc/master/classTMVA_1_1Experimental_1_1Classification.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html,1,['test'],['test']
Testability,"Moment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual voidRooResolutionModel::normLeafServerList(RooArgSet& list) const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooGExpModel&operator=(const RooGExpModel&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsPdf::paramOn(RooPlot* frame, const RooAbsData* data, const char* label = """", Int_t sigDigits = 2, Option_t* options = ""NELU"", Double_t xmin = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooGExpModel.html:24099,test,testArg,24099,root/html602/RooGExpModel.html,https://root.cern,https://root.cern/root/html602/RooGExpModel.html,2,['test'],['testArg']
Testability,"Moneta 2005; 3 ; 4 /**********************************************************************; 5 * *; 6 * Copyright (c) 2005 , FNAL MathLib Team *; 7 * *; 8 * *; 9 **********************************************************************/; 10 ; 11 ; 12// Header source file for function etaMax; 13//; 14// Created by: Mark Fischler at Thu Jun 2 2005; 15 ; 16 ; 17#ifndef ROOT_Math_GenVector_etaMax; 18#define ROOT_Math_GenVector_etaMax 1; 19 ; 20 ; 21#include <limits>; 22#include <cmath>; 23 ; 24 ; 25namespace ROOT {; 26 ; 27 namespace Math {; 28 ; 29 /**; 30 The following function could be called to provide the maximum possible; 31 value of pseudorapidity for a non-zero rho. This is log ( max/min ); 32 where max and min are the extrema of positive values for type; 33 long double.; 34 */; 35 inline; 36 long double etaMax_impl() {; 37 using std::log;; 38 return log ( std::numeric_limits<long double>::max()/256.0l ) -; 39 log ( std::numeric_limits<long double>::denorm_min()*256.0l ); 40 + 16.0 * log(2.0);; 41 // Actual usage of etaMax() simply returns the number 22756, which is; 42 // the answer this would supply, rounded to a higher integer.; 43 }; 44 ; 45 /**; 46 Function providing the maximum possible value of pseudorapidity for; 47 a non-zero rho, in the Scalar type with the largest dynamic range.; 48 */; 49 template <class T>; 50 inline; 51 T etaMax() {; 52 return static_cast<T>(22756.0);; 53 }; 54 ; 55 } // namespace Math; 56 ; 57} // namespace ROOT; 58 ; 59 ; 60#endif /* ROOT_Math_GenVector_etaMax */; MathNamespace for new Math classes and functions.; ROOT::Math::etaMax_impllong double etaMax_impl()The following function could be called to provide the maximum possible value of pseudorapidity for a ...Definition etaMax.h:36; ROOT::Math::etaMaxT etaMax()Function providing the maximum possible value of pseudorapidity for a non-zero rho,...Definition etaMax.h:51; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Defin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/etaMax_8h_source.html:1259,log,log,1259,doc/master/etaMax_8h_source.html,https://root.cern,https://root.cern/doc/master/etaMax_8h_source.html,1,['log'],['log']
Testability,"More...;  ; class  FitData;  Base class for all the fit data types: Stores the coordinates and the DataOptions. More...;  ; class  FitResult;  class containing the result of the fit and all the related information (fitted parameter values, error, covariance matrix and minimizer result information) Contains a pointer also to the fitted (model) function, modified with the fit parameter values. More...;  ; class  Fitter;  Fitter class, entry point for performing all type of fits. More...;  ; class  LogLikelihoodFCN;  LogLikelihoodFCN class for likelihood fits. More...;  ; struct  ObjFuncTrait;  ; struct  ObjFuncTrait< ROOT::Math::FitMethodFunction >;  ; struct  ObjFuncTrait< ROOT::Math::FitMethodGradFunction >;  ; class  ParameterSettings;  Class, describing value, limits and step size of the parameters Provides functionality also to set/retrieve values, step sizes, limits and fix the parameters. More...;  ; class  PoissonLikelihoodFCN;  class evaluating the log likelihood for binned Poisson likelihood fits it is template to distinguish gradient and non-gradient case More...;  ; class  ProxyListBox;  ; class  SparseData;  SparseData class representing the data of a THNSparse histogram The data needs to be converted to a BinData class before fitting using the GetBinData functions. More...;  ; class  UnBinData;  Class describing the un-binned data sets (just x coordinates values) of any dimensions. More...;  . Typedefs; typedef Chi2FCN< ROOT::Math::IMultiGenFunction, ROOT::Math::IParamMultiFunction > Chi2Function;  ; typedef Chi2FCN< ROOT::Math::IMultiGradFunction, ROOT::Math::IParamMultiFunction > Chi2GradFunction;  ; typedef LogLikelihoodFCN< ROOT::Math::IMultiGenFunction, ROOT::Math::IParamMultiFunction > LogLikelihoodFunction;  ; typedef LogLikelihoodFCN< ROOT::Math::IMultiGradFunction, ROOT::Math::IParamMultiFunction > LogLikelihoodGradFunction;  ; typedef PoissonLikelihoodFCN< ROOT::Math::IMultiGenFunction, ROOT::Math::IParamMultiFunction > PoissonLLFunction;  ; ty",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Fit.html:2496,log,log,2496,doc/master/namespaceROOT_1_1Fit.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Fit.html,2,['log'],['log']
Testability,"Motd ();  Print message of the day (in the file pointed by the env PROOFMOTD or from fConfDir/etc/proof/motd). ;  ; Int_t CleanupWaitingQueries (Bool_t del=kTRUE, TList *qls=0);  Cleanup the waiting queries list. ;  ; Int_t GetCompressionLevel () const;  ; Int_t GetPriority ();  Get the processing priority for the group the user belongs too. ;  ; Bool_t IsWaiting ();  Return kTRUE if the session is waiting for the OK to start processing. ;  ; TProofQueryResult * MakeQueryResult (Long64_t nentries, const char *opt, TList *inl, Long64_t first, TDSet *dset, const char *selec, TObject *elist);  Create a TProofQueryResult instance for this query. ;  ; TProofQueryResult * NextQuery ();  Get the next query from the waiting list. ;  ; Int_t OldAuthSetup (TString &wconf);  Setup authentication related stuff for old versions. ;  ; Int_t QueueQuery (TProofQueryResult *pq);  Add a query to the waiting list Returns the number of queries in the list. ;  ; void RedirectOutput (const char *dir=0, const char *mode=""w"");  Redirect stdout to a log file. ;  ; Int_t SendResults (TSocket *sock, TList *outlist=0, TQueryResult *pq=0);  Sends all objects from the given list to the specified socket. ;  ; void SetIdle (Bool_t st=kTRUE);  Change the idle status. ;  ; void SetQueryRunning (TProofQueryResult *pq);  Set query in running state. ;  ; Int_t UnloadPackage (const char *package);  ; Int_t UnloadPackages ();  ; Int_t WaitingQueries ();  Return the number of waiting queries. ;  . Private Attributes; Int_t fActSessions;  ; TString fAdminPath;  ; TString fArchivePath;  ; TString fCacheDir;  ; TProofLockPath * fCacheLock;  ; Int_t fCompressMsg;  ; TStopwatch fCompute;  ; TString fConfDir;  ; TString fConfFile;  ; Float_t fCpuTime;  ; TString fDataDir;  ; TString fDataDirOpts;  ; TString fDataSetDir;  ; TDataSetManager * fDataSetManager;  ; TDataSetManagerFile * fDataSetStgRepo;  ; Float_t fEffSessions;  ; Bool_t fEndMaster;  ; TString fGroup;  ; Int_t fGroupId;  ; Int_t fGroupPriority;  ; I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofServ.html:27662,log,log,27662,doc/master/classTProofServ.html,https://root.cern,https://root.cern/doc/master/classTProofServ.html,1,['log'],['log']
Testability,"Msg, kLeanWelcomeMsg. ~Factory( void ); destructor; delete fATreeEvent;. void DeleteAllMethods( void ); delete methods. void SetVerbose(Bool_t v = kTRUE). TMVA::DataSetInfo& AddDataSet( DataSetInfo &dsi ). TMVA::DataSetInfo& AddDataSet(const TString& ). TTree* CreateEventAssignTrees(const TString& name); create the data assignment tree (for event-wise data assignment by user). void AddSignalTrainingEvent(const vector<Double_t>& event, Double_t weight = 1.0); add signal training event. void AddSignalTestEvent(const vector<Double_t>& event, Double_t weight = 1.0); add signal testing event. void AddBackgroundTrainingEvent(const vector<Double_t>& event, Double_t weight = 1.0); add signal training event. void AddBackgroundTestEvent(const vector<Double_t>& event, Double_t weight = 1.0); add signal training event. void AddTrainingEvent(const TString& className, const vector<Double_t>& event, Double_t weight); add signal training event. void AddTestEvent(const TString& className, const vector<Double_t>& event, Double_t weight); add signal test event. void AddEvent(const TString& className, TMVA::Types::ETreeType tt, const vector<Double_t>& event, Double_t weight); add event; vector event : the order of values is: variables + targets + spectators. Bool_t UserAssignEvents(UInt_t clIndex). void SetInputTreesFromEventAssignTrees(); assign event-wise local trees to data set. void AddTree(TTree* tree, const TString& className, Double_t weight, const TCut& cut, const TString& treeType); number of signal events (used to compute significance). void AddTree(TTree* tree, const TString& className, Double_t weight = 1.0, const TCut& cut = """", TMVA::Types::ETreeType tt = Types::kMaxTreeType). void AddSignalTree( TTree* signal, Double_t weight, Types::ETreeType treetype ); number of signal events (used to compute significance). void AddSignalTree(TString datFileS, Double_t weight = 1.0, TMVA::Types::ETreeType treetype = Types::kMaxTreeType); add signal tree from text file. void AddSignalT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__Factory.html:14164,test,test,14164,root/html530/TMVA__Factory.html,https://root.cern,https://root.cern/root/html530/TMVA__Factory.html,3,['test'],['test']
Testability,"MsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; UInt_tTargetSelectionToUInt(TMVA::ETargetSelection ts) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); voidTrainMonoTargetRegression(); voidTrainMultiClassification(); voidTrainMultiTargetRegression(); voidTrainSeparatedClassification(); voidTrainUnifiedClassification(); TMVA::MethodPDEFoam::EKernelUIntToKernel(UInt_t iker); TMVA::ETargetSelectionUIntToTargetSelection(UInt_t its); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::MethodBase::WriteEvaluationHistosToFile(TMVA::Types::ETreeType tre",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MethodPDEFoam.html:13467,Test,TestClassification,13467,root/html602/TMVA__MethodPDEFoam.html,https://root.cern,https://root.cern/root/html602/TMVA__MethodPDEFoam.html,2,['Test'],['TestClassification']
Testability,"MultiDim,ROOT::Fit::UnBinData>::DataPtr() const; virtual voidGradient(const double* x, double* g) const; ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(const ROOT::Math::IBaseFunctionMultiDim&); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>& f); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const shared_ptr<ROOT::Fit::UnBinData>& data, const shared_ptr<ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction>& func, int weight = 0, bool extended = false); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const ROOT::Fit::UnBinData& data, const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction& func, int weight = 0, bool extended = false); virtual const ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction&ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::ModelFunction() const; shared_ptr<ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction>ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::ModelFunctionPtr() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::NCalls() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::NDim() const; virtual unsigned intNFitPoints() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::NPoints() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Fit::LogLikelihoodFCN<ROOT::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html:2897,Log,LogLikelihoodFCN,2897,root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,1,['Log'],['LogLikelihoodFCN']
Testability,"MultiDim>(const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>&); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>&operator=(const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>&). Data Members; public:. static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::Type_tROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::kLeastSquare; static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::Type_tROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::kLogLikelihood; static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::Type_tROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::kUndefined. private:. const ROOT::Fit::UnBinData&fData; const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction&fFunc; vector<double>fGradfor derivatives; boolfIsExtendedflag for indicating if likelihood is extended; unsigned intfNEffPointsnumber of effective points used in the fit; intfWeightflag to indicate if needs to evaluate using weight or weight squared (default weight = 0). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseFunction * Clone() const; clone the function (need to return Base for Windows). { return new LogLikelihoodFCN(fData,fFunc,fWeight,fIsExtended); }. unsigned int NFitPoints() const; using BaseObjFunction::operator();; effective points used in the fit. { return fNEffPoints; }. double DataElement(const double* x, unsigned int i, double* g) const; i-th likelihood contribution and its gradient. void Gradient(const double* x, double* g) const; need to be virtual to be instantited. void UseSumOfWeightSquare(bool on = true); Use sum of the weight squared in evaluating the likelihood; (this is needed for calculating the errors). double DoEval(const double* x) const. Evaluation of the function (required by i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html:4737,Log,LogLikelihoodFCN,4737,root/html602/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html602/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,1,['Log'],['LogLikelihoodFCN']
Testability,"MultiLayerPerceptron &net);  ;  TMLPAnalyzer (TMultiLayerPerceptron *net);  ;  ~TMLPAnalyzer () override;  Destructor. ;  ; void CheckNetwork ();  Gives some information about the network in the terminal. ;  ; void DrawDInput (Int_t i);  Draws the distribution (on the test sample) of the impact on the network output of a small variation of the ith input. ;  ; void DrawDInputs ();  Draws the distribution (on the test sample) of the impact on the network output of a small variation of each input. ;  ; void DrawNetwork (Int_t neuron, const char *signal, const char *bg);  Draws the distribution of the neural network (using ith neuron). ;  ; TProfile * DrawTruthDeviation (Int_t outnode=0, Option_t *option="""");  Create a profile of the difference of the MLP output minus the true value for a given output node outnode, vs the true value for outnode, for all test data events. ;  ; TProfile * DrawTruthDeviationInOut (Int_t innode, Int_t outnode=0, Option_t *option="""");  Creates a profile of the difference of the MLP output outnode minus the true value of outnode vs the input value innode, for all test data events. ;  ; THStack * DrawTruthDeviationInsOut (Int_t outnode=0, Option_t *option="""");  Creates a profile of the difference of the MLP output outnode minus the true value of outnode vs the input value, stacked for all inputs, for all test data events. ;  ; THStack * DrawTruthDeviations (Option_t *option="""");  Creates TProfiles of the difference of the MLP output minus the true value vs the true value, one for each output, filled with the test data events. ;  ; void GatherInformations ();  Collect information about what is useful in the network. ;  ; TTree * GetIOTree () const;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMLPAnalyzer.html:1673,test,test,1673,doc/master/classTMLPAnalyzer.html,https://root.cern,https://root.cern/doc/master/classTMLPAnalyzer.html,1,['test'],['test']
Testability,"MustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. TStopwatchfComputemeasures time spend processing a query on the master; Int_tfDrawQueriesnumber of draw queries processed; Int_tfKeptQueriesnumber of queries fully in memory and in dir; TProofLockPath*fLockdir locker; FILE*fLogFilelog file; TList*fPreviousQuerieslist of TProofQueryResult objects from previous sections; TList*fQuerieslist of TProofQueryResult objects; TStringfQueryDirdirectory containing query results and status; Int_tfSeqNumsequential number of last processed query; TStringfSessionDirdirectory containing session dependent files; TStringfSessionTagtag for the session. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void AddLogFile(TProofQueryResult* pq). TQueryResultManager(const char* qdir, const char* stag, const char* sdir, TProofLockPath* lck, FILE* logfile = 0). const char * QueryDir() const; { return fQueryDir.Data(); }. Int_t SeqNum() const; { return fSeqNum; }. Int_t DrawQueries() const; { return fDrawQueries; }. Int_t KeptQueries() const; { return fKeptQueries; }. TList * Queries() const; { return fQueries; }. TList * PreviousQueries() const; { return fPreviousQueries; }. void IncrementSeqNum(); { fSeqNum++; }. void IncrementDrawQueries(); { fDrawQueries++; }. Int_t ApplyMaxQueries(Int_t mxq). Int_t CleanupQueriesDir(). Bool_t FinalizeQuery(TProofQueryResult* pq, TProof* proof, TVirtualProofPlayer* player); { return fCompute.CpuTime(); }. Float_t GetRealTime(); { return fCompute.RealTime(); }. TProofQueryResult * LocateQuery(TString queryref, Int_t& qry, TString& qdir). void RemoveQuery(TQueryResult* qr, Bool_t soft = kFALSE). void RemoveQuery(const char* queryref, TList* otherlist = 0). void ResetTime(); { fCompute.Start(); }. void SaveQuery(TProofQueryResult* qr, const char* fout ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TQueryResultManager.html:6946,log,logfile,6946,root/html528/TQueryResultManager.html,https://root.cern,https://root.cern/root/html528/TQueryResultManager.html,4,['log'],['logfile']
Testability,"MustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Float_t*fCpuTime[fNbench] Cpu Time; TStringTNamed::fNameobject identifier; TString*fNames[fNbench] Names of benchmarks; Int_tfNbenchNumber of active benchmarks; Int_tfNmaxMaximum number of benchmarks initialized; Float_t*fRealTime[fNbench] Real Time; TStopwatch*fTimerTimers; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TBenchmark(); Benchmark default constructor. TBenchmark(const TBenchmark& ); Copy constructor. TBenchmark& operator=(const TBenchmark& ); Assignment operator. ~TBenchmark(); Benchmark destructor. Int_t GetBench(const char* name) const; Returns index of Benchmark name. Float_t GetCpuTime(const char* name); Returns Cpu time used by Benchmark name. Float_t GetRealTime(const char* name); Returns Realtime used by Benchmark name. void Print(Option_t* name = """") const; Prints parameters of Benchmark name. void Reset(); Reset all Benchmarks. void Show(const char* name); Stops Benchmark name and Prints results. void Start(const char* name); Starts Benchmark with the specified name. An independent timer (see class TStopwatch) is started.; The name of the benchmark is entered into the list of benchmarks.; Benchmark can be stopped via TBenchmark::Stop().; Results can be printed via TBenchmark::Print().; TBenchmark::Show() can be used to stop benchmark and print results.; If name is an already existing benchmark, timing will resume.; A summary of all benchmarks can be seen via TBenchmark::Summary(). void Stop(const char* name); Terminates Benchmark with specified name. void Summary(Float_t& rt, Float_t& cp); Prints a summary ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TBenchmark.html:6818,Benchmark,Benchmark,6818,root/html602/TBenchmark.html,https://root.cern,https://root.cern/root/html602/TBenchmark.html,2,['Benchmark'],['Benchmark']
Testability,"MyTree->Scan(""*"");; will print all the variable of the tree.; Specific variables of the tree can be explicit selected by list them in column separated list:; root[] MyTree->Scan(""var1:var2:var3"");; will print the values of var1, var2 and var3. A selection can be applied in the second argument:; root[] MyTree->Scan(""var1:var2:var3"",""var1==0"");; will print the values of var1, var2 and var3 for the entries where var1 is exactly 0.; TTree::Scan returns the number of entries passing the selection. By default 50 rows are shown before TTree::Scan pauses and ask you to press the Enter key to see the next 50 rows. You can change the default number of rows to be shown before <CR> via mytree->SetScanfield(maxrows) where maxrows is 50 by default. If maxrows is set to 0 all rows of the Tree are shown. This option is interesting when dumping the contents of a Tree to an ascii file, eg from the command line:; root[] tree->SetScanField(0);; root[] tree->Scan(""*""); >tree.log; will create a file tree.log.; Arrays (within an entry) are printed in their linear forms. If several arrays with multiple dimensions are printed together, they will NOT be synchronized. For example, with a tree containing arr1[4][2]and arr2[2][3],; root[] MyTree(""arr1:arr2"");; will results in a printing similar to:; ************************************************; * Row * Instance * arr1 * arr2 *; ***********************************************; * x * 0 * arr1[0][0]* arr2[0][0]*; * x * 1 * arr1[0][1]* arr2[0][1]*; * x * 2 * arr1[1][0]* arr2[0][2]*; * x * 3 * arr1[1][1]* arr2[1][0]*; * x * 4 * arr1[2][0]* arr2[1][1]*; * x * 5 * arr1[2][1]* arr2[1][2]*; * x * 6 * arr1[3][0]* *; * x * 7 * arr1[3][1]* *; However, if there is a selection criterium which is an array, then all the formulas will be synchronized with the selection criterium (see TTree::Draw for more information).; The third parameter of TTree::Scan can be use to specific the layout of the table:. lenmax=dd - where ‘dd’ is the maximum number of elements",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:619797,log,log,619797,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['log'],['log']
Testability,"N class: base class for the objective functions used in the fits It has a reference to the data and th emodel function used in the fit ;  CBinDataClass describing the binned data sets : vectors of x coordinates, y values and optionally error on y values and error on coordinates The dimension of the coordinate is free There are 4 different options: ;  CChi2FCNChi2FCN class for binnned fits using the least square methods ;  CDataOptionsDataOptions : simple structure holding the options on how the data are filled ;  CDataRangeClass describing the range in the coordinates it supports multiple range in a coordinate ;  CDummyDeleter;  CFcnAdapter;  CFitConfigClass describing the configuration of the fit, options and parameter settings using the ROOT::Fit::ParameterSettings class ;  CFitDataBase class for all the fit data types: Stores the coordinates and the DataOptions ;  CFitResultClass containg the result of the fit and all the related information (fitted parameter values, error, covariance matrix and minimizer result information) Contains a pointer also to the fitted (model) function, modified with the fit parameter values ;  CFitterFitter class, entry point for performing all type of fits ;  CLogLikelihoodFCNLogLikelihoodFCN class for likelihood fits ;  CParameterSettingsClass, describing value, limits and step size of the parameters Provides functionality also to set/retrieve values, step sizes, limits and fix the parameters ;  CPoissonLikelihoodFCNClass evaluating the log likelihood for binned Poisson likelihood fits it is template to distinguish gradient and non-gradient case ;  CSparseData;  CUnBinDataClass describing the unbinned data sets (just x coordinates values) of any dimensions ;  ►NInternal;  ►NExecutorUtils;  CResultCaster;  CResultCaster< TObject *, F >;  ►NTDF;  CTAction;  CTActionBase;  CTColumnValueHelper class that updates and returns TTree branches as well as TDataFrame temporary columns ;  CTTDFValueTuple;  CTTDFValueTuple< TTypeList< BranchTypes.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/annotated.html:19043,log,log,19043,doc/v610/annotated.html,https://root.cern,https://root.cern/doc/v610/annotated.html,1,['log'],['log']
Testability,"N were found.; 630namespace {; 631template<class T>; 632bool checkInfNaNNeg(const T& inputs) {; 633 // check for a math error or negative value; 634 bool inf = false;; 635 bool nan = false;; 636 bool neg = false;; 637 ; 638 for (double val : inputs) { //CHECK_VECTORISE; 639 inf |= !std::isfinite(val);; 640 nan |= TMath::IsNaN(val); // Works also during fast math; 641 neg |= val < 0;; 642 }; 643 ; 644 return inf || nan || neg;; 645}; 646}; 647 ; 648 ; 649////////////////////////////////////////////////////////////////////////////////; 650/// Scan through outputs and fix+log all nans and negative values.; 651/// \param[in,out] outputs Array to be scanned & fixed.; 652/// \param[in] begin Begin of event range. Only needed to print the correct event number; 653/// where the error occurred.; 654void RooAbsPdf::logBatchComputationErrors(std::span<const double>& outputs, std::size_t begin) const {; 655 for (unsigned int i=0; i<outputs.size(); ++i) {; 656 const double value = outputs[i];; 657 if (TMath::IsNaN(outputs[i])) {; 658 logEvalError(Form(""p.d.f value of (%s) is Not-a-Number (%f) for entry %zu"",; 659 GetName(), value, begin+i));; 660 } else if (!std::isfinite(outputs[i])){; 661 logEvalError(Form(""p.d.f value of (%s) is (%f) for entry %zu"",; 662 GetName(), value, begin+i));; 663 } else if (outputs[i] < 0.) {; 664 logEvalError(Form(""p.d.f value of (%s) is less than zero (%f) for entry %zu"",; 665 GetName(), value, begin+i));; 666 }; 667 }; 668}; 669 ; 670 ; 671void RooAbsPdf::getLogProbabilities(std::span<const double> pdfValues, double * output) const {; 672 for (std::size_t i = 0; i < pdfValues.size(); ++i) {; 673 output[i] = getLog(pdfValues[i], this);; 674 }; 675}; 676 ; 677////////////////////////////////////////////////////////////////////////////////; 678/// Return the extended likelihood term (\f$ N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \f$); 679/// of this PDF for the given number of observed events.; 680///; 681/// For successful ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:24979,log,logEvalError,24979,doc/master/RooAbsPdf_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html,1,['log'],['logEvalError']
Testability,"N::EOutputFunction outputFunction);  ; void SetTrainingStrategyString (TString trainingStrategyString);  ; void SetWeightInitialization (DNN::EInitialization weightInitialization);  ; void SetWeightInitializationString (TString weightInitializationString);  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Train ();  Methods for training the deep learning network. ;  ;  Public Member Functions inherited from TMVA::MethodBase;  MethodBase (const TString &jobName, Types::EMVA methodType, const TString &methodTitle, DataSetInfo &dsi, const TString &theOption="""");  standard constructor ;  ;  MethodBase (Types::EMVA methodType, DataSetInfo &dsi, const TString &weightFile);  constructor used for Testing + Application of the MVA, only (no training), using given WeightFiles ;  ; virtual ~MethodBase ();  destructor ;  ; void AddOutput (Types::ETreeType type, Types::EAnalysisType analysisType);  ; TDirectory * BaseDir () const;  returns the ROOT directory where info/histograms etc of the corresponding MVA method instance are stored ;  ; virtual void CheckSetup ();  check may be overridden by derived class (sometimes, eg, fitters are used which can only be implemented during training phase) ;  ; DataSet * Data () const;  ; DataSetInfo & DataInfo () const;  ; virtual void DeclareCompatibilityOptions ();  options that are used ONLY for the READER to ensure backward compatibility they are hence without any effect (the reader is only reading the training options that HAD been used at the training of the .xml weight file at hand ;  ; void DisableWriting (Bool_t setter);  ; Bool_t DoMulticlass () const;  ; Bool_t DoRegression () const;  ; void ExitFromTraining ();  ; Types::EAnalysisType GetAnalysisType () const;  ; UInt_t GetCurrentIter ();  ; virtual Double_t GetEfficiency (const TString &, Types::ETreeType, Double_t &err);  fill background efficiency (resp. ;  ; const Event * GetEvent () const;  ; const Event * GetEvent (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodDL.html:4039,Test,Testing,4039,doc/master/classTMVA_1_1MethodDL.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodDL.html,1,['Test'],['Testing']
Testability,"N::ModeErrorFunction::SUMOFSQUARES@ SUMOFSQUARES; TMVA::DNN::ModeErrorFunction::CROSSENTROPY_MUTUALEXCLUSIVE@ CROSSENTROPY_MUTUALEXCLUSIVE; TMVA::DNN::softMaxCrossEntropydouble softMaxCrossEntropy(ItOutput itProbabilityBegin, ItOutput itProbabilityEnd, ItTruth itTruthBegin, ItTruth itTruthEnd, ItDelta itDelta, ItDelta itDeltaEnd, ItInvActFnc itInvActFnc, double patternWeight)soft-max-cross-entropy error function (for mutual exclusive cross-entropy)Definition NeuralNet.icc:458; TMVA::DNN::InvTanhstd::shared_ptr< std::function< double(double)> > InvTanhDefinition NeuralNet.cxx:22; TMVA::DNN::Linearstd::shared_ptr< std::function< double(double)> > LinearDefinition NeuralNet.cxx:24; TMVA::DNN::WeightInitializationStrategyWeightInitializationStrategyweight initialization strategies to be chosen fromDefinition NeuralNet.h:1050; TMVA::DNN::WeightInitializationStrategy::TEST@ TEST; TMVA::DNN::WeightInitializationStrategy::XAVIERUNIFORM@ XAVIERUNIFORM; TMVA::DNN::WeightInitializationStrategy::XAVIER@ XAVIER; TMVA::DNN::WeightInitializationStrategy::LAYERSIZE@ LAYERSIZE; TMVA::DNN::InvReLUstd::shared_ptr< std::function< double(double)> > InvReLUDefinition NeuralNet.cxx:17; TMVA::DNN::GaussComplementstd::shared_ptr< std::function< double(double)> > GaussComplementDefinition NeuralNet.cxx:13; TMVA::DNN::Gaussstd::shared_ptr< std::function< double(double)> > GaussDefinition NeuralNet.cxx:12; TMVA::DNN::Sigmoidstd::shared_ptr< std::function< double(double)> > SigmoidDefinition NeuralNet.cxx:26; TMVA::DNN::gaussDoubledouble gaussDouble(double mean, double sigma)Definition NeuralNet.cxx:35; TMVA::DNN::ModeOutputValuesModeOutputValuesDefinition NeuralNet.h:179; TMVA::DNN::ModeOutputValues::SOFTMAX@ SOFTMAX; TMVA::DNN::ModeOutputValues::DIRECT@ DIRECT; TMVA::DNN::ModeOutputValues::SIGMOID@ SIGMOID; TMVA::DNN::SoftSignstd::shared_ptr< std::function< double(double)> > SoftSignDefinition NeuralNet.cxx:32; TMVA::DNN::InvSoftPlusstd::shared_ptr< std::function< double(double)> > InvSoftPlu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8icc_source.html:75415,TEST,TEST,75415,doc/master/NeuralNet_8icc_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8icc_source.html,2,['TEST'],['TEST']
Testability,"N::Settings::count_mb_dEsize_t count_mb_dEDefinition NeuralNet.h:845; TMVA::DNN::Settings::m_useMultithreadingbool m_useMultithreadingDefinition NeuralNet.h:863; TMVA::DNN::Settings::count_mb_Esize_t count_mb_EDefinition NeuralNet.h:844; TMVA::DNN::Settings::existsbool exists(std::string histoName)for monitoringDefinition NeuralNet.h:825; TMVA::DNN::Settings::maxConvergenceCountsize_t maxConvergenceCount() constreturns the max convergence count so farDefinition NeuralNet.h:828; TMVA::DNN::Settings::padsvoid pads(int numPads)preparation for monitoringDefinition NeuralNet.h:818; TMVA::DNN::Settings::m_testRepetitionssize_t m_testRepetitionsDefinition NeuralNet.h:839; TMVA::DNN::Settings::fLearningRatedouble fLearningRateDefinition NeuralNet.h:852; TMVA::DNN::Settings::fMomentumdouble fMomentumDefinition NeuralNet.h:853; TMVA::DNN::Settings::batchSizesize_t batchSize() constmini-batch sizeDefinition NeuralNet.h:767; TMVA::DNN::Settings::computeResultvirtual void computeResult(const Net &, std::vector< double > &)callback for monitoring and loggingDefinition NeuralNet.h:809; TMVA::DNN::Settings::fMonitoringstd::shared_ptr< Monitoring > fMonitoringDefinition NeuralNet.h:865; TMVA::DNN::Settings::dropRepetitionssize_t dropRepetitions() constDefinition NeuralNet.h:761; TMVA::DNN::Settings::createvoid create(std::string histoName, int bins, double min, double max)for monitoringDefinition NeuralNet.h:819; TMVA::DNN::Settings::fRepetitionsint fRepetitionsDefinition NeuralNet.h:854; TMVA::DNN::Settings::minErrorsize_t minError() constreturns the smallest error so farDefinition NeuralNet.h:829; TMVA::DNN::Settings::startTrainingvirtual void startTraining()Definition NeuralNet.h:795; TMVA::DNN::Settings::m_maxConvergenceCountsize_t m_maxConvergenceCountDefinition NeuralNet.h:858; TMVA::DNN::Settings::startTestCyclevirtual void startTestCycle()callback for monitoring and logggingDefinition NeuralNet.h:804; TMVA::DNN::SteepestSteepest Gradient Descent algorithm (SGD)Definition Neur",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8h_source.html:77330,log,loggingDefinition,77330,doc/master/NeuralNet_8h_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html,1,['log'],['loggingDefinition']
Testability,"N< DerivFunType, ModelFunType >::~LogLikelihoodFCN ; (; ). inlinevirtual . Destructor (no operations) ; Definition at line 81 of file LogLikelihoodFCN.h. ◆ LogLikelihoodFCN() [3/3]. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::LogLikelihoodFCN ; (; const LogLikelihoodFCN< DerivFunType, ModelFunType > & ; f). inline . Copy constructor. ; Definition at line 86 of file LogLikelihoodFCN.h. Member Function Documentation. ◆ Clone(). template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . virtual BaseFunction * ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::Clone ; (; ); const. inlinevirtual . clone the function (need to return Base for Windows) ; Definition at line 112 of file LogLikelihoodFCN.h. ◆ DataElement(). template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . virtual double ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::DataElement ; (; const double * ; x, . unsigned int ; i, . double * ; g, . double * ; h = nullptr, . bool ; fullHessian = false . ); const. inlinevirtual . i-th likelihood contribution and its gradient ; Implements ROOT::Math::BasicFitMethodFunction< DerivFunType >.; Definition at line 121 of file LogLikelihoodFCN.h. ◆ DoDerivative(). template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . virtual double ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::DoDerivative ; (; const double * ; x, . unsigned int ; icoord . ); const. inlineprivatevirtual . Definition at line 161 of file LogLikelihoodFCN.h. ◆ DoEval(). template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . virtual double ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::DoEval ; (; const double * ; x); const. inlineprivatevirtual . Evaluation of the function (required by interface) ; Definition at line 155 of file LogLikelihoodFCN.h",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html:10101,Log,LogLikelihoodFCN,10101,doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html,1,['Log'],['LogLikelihoodFCN']
Testability,"N< DerivFunType, ModelFunType >; BaseObjFunction typedefROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >; BasicFCN(const std::shared_ptr< DataType > &data, const std::shared_ptr< IModelFunction > &func)ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >inlineprotected; BasicFitMethodFunction(int dim, int npoint)ROOT::Math::BasicFitMethodFunction< DerivFunType >inline; Clone() constROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >inlinevirtual; Data() constROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >inlinevirtual; DataElement(const double *x, unsigned int i, double *g, double *h=nullptr, bool fullHessian=false) constROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >inlinevirtual; DataPtr() constROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >inline; DoDerivative(const double *x, unsigned int icoord) constROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >inlineprivatevirtual; DoEval(const double *x) constROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >inlineprivatevirtual; fDataROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >protected; fExecutionPolicyROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >private; fFuncROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >protected; fGradROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >mutableprivate; fIsExtendedROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >private; fNCallsROOT::Math::BasicFitMethodFunction< DerivFunType >mutableprivate; fNDimROOT::Math::BasicFitMethodFunction< DerivFunType >private; fNEffPointsROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >mutableprivate; fNPointsROOT::Math::BasicFitMethodFunction< DerivFunType >private; fWeightROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >private; G2(const double *, double *) constROOT::Math::BasicFitMethodFunction< DerivFunType >inlinevirtual; Gradient(const double *x, double *g) constROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN-members.html:1418,Log,LogLikelihoodFCN,1418,doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN-members.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN-members.html,1,['Log'],['LogLikelihoodFCN']
Testability,"NA49 experiment at CERN. NA49 has generated an impressive amount of data, around 10 Terabytes per run. This rate provided the ideal environment to develop and test the next generation data analysis.; ROOT was, and still is, developed in the “Bazaar style”, a term from the book “The Cathedral and the Bazaar” by Eric S. Raymond. It means a liberal, informal development style that heavily relies on the diverse and deep talent of the user community. The result is that physicists developed ROOT for themselves; this made it specific, appropriate, useful, and over time refined and very powerful. The development of ROOT is a continuous conversation between users and developers with the line between the two blurring at times and the users becoming co-developers.; When it comes to storing and mining large amount of data, physics plows the way with its Terabytes, but other fields and industry follow close behind as they acquiring more and more data over time. They are ready to use the true and tested technologies physics has invented. In this way, other fields and industries have found ROOT useful and they have started to use it also.; In the bazaar view, software is released early and frequently to expose it to thousands of eager co-developers to pound on, report bugs, and contribute possible fixes. More users find more bugs, because they stress the program in different ways. By now, after ten years, the age of ROOT is quite mature. Most likely, you will find the features you are looking for, and if you have found a hole, you are encouraged to participate in the dialog and post your suggestion or even implementation on the ROOT forum.; 1.1 The ROOT forum; If you have a question, it is likely that it has been asked, answered, and stored in the ROOT Forum. Please use the search engine to see if your question has already been answered before posting a topic in the Forum.; You can access the ROOT forum at: https://root-forum.cern.ch.; 1.2 Contact Information; Several authors wrote",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:7534,test,tested,7534,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['test'],['tested']
Testability,"NAME2_() [3/3]. class ROOT::_NAME2_ ; (; _R__UNIQUE_(R__dummyVersionNumber) ; , . _c ;  . ). Definition at line 25 of file String.cxx. ◆ AddClass() [1/2]. void ROOT::AddClass ; (; const char * ; cname, . Version_t ; id, . const std::type_info & ; info, . DictFuncPtr_t ; dict, . Int_t ; pragmabits . ). Global function called by the ctor of a class's init class (see the ClassImp macro). ; Definition at line 903 of file TClassTable.cxx. ◆ AddClass() [2/2]. void ROOT::AddClass ; (; const char * ; cname, . Version_t ; id, . DictFuncPtr_t ; dict, . Int_t ; pragmabits . ). ◆ AddClassAlternate(). ROOT::TClassAlt * ROOT::AddClassAlternate ; (; const char * ; normName, . const char * ; alternate . ). Global function called by GenerateInitInstance. ; (see the ClassImp macro). ; Definition at line 925 of file TClassTable.cxx. ◆ CallRecursiveRemoveIfNeeded(). void ROOT::CallRecursiveRemoveIfNeeded ; (; TObject & ; obj). inline . call RecursiveRemove for obj if gROOT is valid and obj.TestBit(kMustCleanup) is true. ; Note: this reset the kMustCleanup bit to allow harmless multiple call to this function. ; Definition at line 394 of file TROOT.h. ◆ Class_ShowMembers(). void ROOT::Class_ShowMembers ; (; TClass * ; cl, . const void * ; obj, . TMemberInspector & ; insp . ). Indirect call to the implementation of ShowMember allowing [forward] declaration with out a full definition of the TClass class. ; Definition at line 546 of file TClass.cxx. ◆ ClassTableHash(). static UInt_t ROOT::ClassTableHash ; (; const char * ; name, . UInt_t ; size . ). static . Definition at line 234 of file TClassTable.cxx. ◆ CompressionSettings() [1/2]. int ROOT::CompressionSettings ; (; RCompressionSetting::EAlgorithm::EValues ; algorithm, . int ; compressionLevel . ). ◆ CompressionSettings() [2/2]. int ROOT::CompressionSettings ; (; ROOT::ECompressionAlgorithm ; algorithm, . int ; compressionLevel . ). Deprecated name, do not use: . ◆ CreateClass() [1/2]. TClass * ROOT::CreateClass ; (; const char * ; cnam",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v628/namespaceROOT.html:22542,Test,TestBit,22542,doc/v628/namespaceROOT.html,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html,1,['Test'],['TestBit']
Testability,"ND;  Adaptive one-dimensional numerical integration algorithm. More...;  ; class  RooAddGenContext;  Efficient implementation of the generator context specific for RooAddPdf PDFs. More...;  ; class  RooAddition;  Calculates the sum of a set of RooAbsReal terms, or when constructed with two sets, it sums the product of the terms in the two sets. More...;  ; class  RooAddPdf;  Efficient implementation of a sum of PDFs of the form. More...;  ; class  RooAICRegistry;  Utility class for operator p.d.f classes that keeps track of analytical integration codes and associated normalization and integration sets. More...;  ; class  RooArgProxy;  Abstract interface for RooAbsArg proxy classes. More...;  ; class  RooBinIntegrator;  Computes the integral over a binned distribution by summing the bin contents of all bins. More...;  ; class  RooBinnedGenContext;  Efficient implementation of the generator context specific for binned pdfs. More...;  ; class  RooBinnedL;  Implements a -log(likelihood) calculation from a dataset (assumed to be binned) and a PDF. More...;  ; class  RooBinning;  Implements a RooAbsBinning in terms of an array of boundary values, posing no constraints on the choice of binning, thus allowing variable bin sizes. More...;  ; class  RooBinningCategory;  Provides a real-to-category mapping defined by a series of thresholds. More...;  ; class  RooBinWidthFunction;  Returns the bin width (or volume) given a RooHistFunc. More...;  ; class  RooBrentRootFinder;  Implement the abstract 1-dimensional root finding interface using the Brent-Decker method. More...;  ; class  RooCachedPdf;  Implementation of RooAbsCachedPdf that can cache any external RooAbsPdf input function provided in the constructor. More...;  ; class  RooCachedReal;  Implementation of RooAbsCachedReal that can cache any external RooAbsReal input function provided in the constructor. More...;  ; class  RooCacheManager< T >;  Manages the storage of any type of data indexed on the choice of normalizatio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Roofitcore.html:5185,log,log,5185,doc/master/group__Roofitcore.html,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html,1,['log'],['log']
Testability,"NDC; ///< Absolute Y top left corner of pad in NDC [0,1]; 71 Double_t fAbsWNDC; ///< Absolute Width of pad along X in NDC; 72 Double_t fAbsHNDC; ///< Absolute Height of pad along Y in NDC; 73 ; 74 Double_t fUxmin; ///< Minimum value on the X axis; 75 Double_t fUymin; ///< Minimum value on the Y axis; 76 Double_t fUxmax; ///< Maximum value on the X axis; 77 Double_t fUymax; ///< Maximum value on the Y axis; 78 ; 79 Double_t fTheta; ///< theta angle to view as lego/surface; 80 Double_t fPhi; ///< phi angle to view as lego/surface; 81 ; 82 Double_t fAspectRatio; ///< ratio of w/h in case of fixed ratio; 83 ; 84 Int_t fPixmapID; ///<! Off-screen pixmap identifier; 85 Int_t fGLDevice; ///<! OpenGL off-screen pixmap identifier; 86 Bool_t fCopyGLDevice; ///<!; 87 Bool_t fEmbeddedGL; ///<!; 88 Int_t fNumber; ///< pad number identifier; 89 Int_t fTickx; ///< Set to 1 if tick marks along X; 90 Int_t fTicky; ///< Set to 1 if tick marks along Y; 91 Int_t fLogx; ///< (=0 if X linear scale, =1 if log scale); 92 Int_t fLogy; ///< (=0 if Y linear scale, =1 if log scale); 93 Int_t fLogz; ///< (=0 if Z linear scale, =1 if log scale); 94 Int_t fPadPaint; ///< Set to 1 while painting the pad; 95 Int_t fCrosshair; ///< Crosshair type (0 if no crosshair requested); 96 Int_t fCrosshairPos; ///< Position of crosshair; 97 Short_t fBorderSize; ///< pad bordersize in pixels; 98 Short_t fBorderMode; ///< Bordermode (-1=down, 0 = no border, 1=up); 99 Bool_t fModified; ///< Set to true when pad is modified; 100 Bool_t fGridx; ///< Set to true if grid along X; 101 Bool_t fGridy; ///< Set to true if grid along Y; 102 Bool_t fAbsCoord; ///< Use absolute coordinates; 103 Bool_t fEditable; ///< True if canvas is editable; 104 Bool_t fFixedAspectRatio; ///< True if fixed aspect ratio; 105 TPad *fMother{nullptr}; ///<! pointer to mother of the list; 106 TCanvas *fCanvas{nullptr}; ///<! Pointer to mother canvas; 107 TList *fPrimitives{nullptr};///<->List of primitives (subpads); 108 TList *fExecs{nullpt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPad_8h_source.html:4096,log,log,4096,doc/master/TPad_8h_source.html,https://root.cern,https://root.cern/doc/master/TPad_8h_source.html,1,['log'],['log']
Testability,"NDTarget(Bool_t onoff); virtual voidTGFrame::SetDragType(Int_t type); virtual voidTGFrame::SetDrawOption(Option_t* = """"); virtual voidTGFrame::SetDropType(Int_t type); static voidTObject::SetDtorOnly(void* obj); virtual voidTGFrame::SetEditable(Bool_t); virtual voidTGWindow::SetEditDisabled(UInt_t on = kEditDisable); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCanvas::SetHsbPosition(Int_t newPos); virtual voidTGFrame::SetLayoutBroken(Bool_t = kTRUE); virtual voidTGWindow::SetMapSubwindows(Bool_t); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); voidSetResizeMode(Int_t mode = kMdiDefaultResizeMode); voidTGCanvas::SetScrolling(Int_t scrolling); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGCanvas::SetVsbPosition(Int_t newPos); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTileHorizontal(); virtual voidTileVertical(); virtual voidTGFrame::UnmapWindow(); voidUpdateMdiButtons(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGMdiMainFrame.html:14803,Test,TestBit,14803,root/html532/TGMdiMainFrame.html,https://root.cern,https://root.cern/root/html532/TGMdiMainFrame.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"NETWORK: Depth = 4 Input = ( 1, 1, 300 ) Batch size = 256 Loss function = C; Layer 0 DENSE Layer: ( Input = 300 , Width = 64 ) Output = ( 1 , 256 , 64 ) Activation Function = Tanh; Layer 1 DENSE Layer: ( Input = 64 , Width = 64 ) Output = ( 1 , 256 , 64 ) Activation Function = Tanh; Layer 2 DENSE Layer: ( Input = 64 , Width = 64 ) Output = ( 1 , 256 , 64 ) Activation Function = Tanh; Layer 3 DENSE Layer: ( Input = 64 , Width = 1 ) Output = ( 1 , 256 , 1 ) Activation Function = Identity; : Using 2560 events for training and 640 for testing; : Compute initial loss on the validation data ; : Training phase 1 of 1: Optimizer ADAM (beta1=0.9,beta2=0.999,eps=1e-07) Learning rate = 0.001 regularization 0 minimum error = 0.805395; : --------------------------------------------------------------; : Epoch | Train Err. Val. Err. t(s)/epoch t(s)/Loss nEvents/s Conv. Steps; : --------------------------------------------------------------; : Start epoch iteration ...; : 1 Minimum Test error found - save the configuration ; : 1 | 0.725372 0.686272 0.190597 0.0152439 14599.1 0; : 2 Minimum Test error found - save the configuration ; : 2 | 0.695636 0.683324 0.189128 0.015082 14708.8 0; : 3 | 0.691864 0.689576 0.189646 0.0148842 14648.6 1; : 4 Minimum Test error found - save the configuration ; : 4 | 0.689168 0.677551 0.190642 0.015026 14577.3 0; : 5 | 0.686885 0.678678 0.189865 0.0148775 14629.7 1; : 6 | 0.68905 0.681357 0.189104 0.014885 14694.1 2; : 7 | 0.687138 0.683485 0.19023 0.0152893 14633.6 3; : 8 | 0.686429 0.685529 0.189996 0.0147979 14612 4; : 9 | 0.685179 0.683467 0.190317 0.0152552 14623.4 5; : 10 Minimum Test error found - save the configuration ; : 10 | 0.684262 0.673795 0.18992 0.0153518 14664.7 0; : 11 Minimum Test error found - save the configuration ; : 11 | 0.682907 0.671521 0.194162 0.0155002 14328.7 0; : 12 | 0.693473 0.677553 0.188937 0.0147664 14698.2 1; : 13 | 0.695581 0.671789 0.190501 0.0149406 14581.9 2; : 14 | 0.68024 0.680521 0.188432 0.0146998 14735.3 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__RNN__Classification_8py.html:18382,Test,Test,18382,doc/master/TMVA__RNN__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__RNN__Classification_8py.html,1,['Test'],['Test']
Testability,"NG << error.first;; 1001 if (error.second > 1) log << "" ("" << error.second << "" times)"";; 1002 log << Endl;; 1003 }; 1004 Log() << kFATAL << ""How am I supposed to train a NaN or +-inf?!"" << Endl;; 1005 }; 1006 ; 1007 // for output format, get the maximum class name length; 1008 Int_t maxL = dsi.GetClassNameMaxLength();; 1009 ; 1010 Log() << kHEADER << Form(""[%s] : "",dsi.GetName()) << ""Number of events in input trees"" << Endl;; 1011 Log() << kDEBUG << ""(after possible flattening of arrays):"" << Endl;; 1012 ; 1013 ; 1014 for (UInt_t cl = 0; cl < dsi.GetNClasses(); cl++) {; 1015 Log() << kDEBUG //<< Form(""[%s] : "",dsi.GetName()); 1016 << "" ""; 1017 << setiosflags(ios::left) << std::setw(maxL) << dsi.GetClassInfo(cl)->GetName(); 1018 << "" -- number of events : ""; 1019 << std::setw(5) << eventCounts[cl].nEvBeforeCut; 1020 << "" / sum of weights: "" << std::setw(5) << eventCounts[cl].nWeEvBeforeCut << Endl;; 1021 }; 1022 ; 1023 for (UInt_t cl = 0; cl < dsi.GetNClasses(); cl++) {; 1024 Log() << kDEBUG //<< Form(""Dataset[%s] : "",dsi.GetName()); 1025 << "" "" << std::setw(maxL) << dsi.GetClassInfo(cl)->GetName(); 1026 <<"" tree -- total number of entries: ""; 1027 << std::setw(5) << dataInput.GetEntries(dsi.GetClassInfo(cl)->GetName()) << Endl;; 1028 }; 1029 ; 1030 if (fScaleWithPreselEff); 1031 Log() << kDEBUG //<< Form(""Dataset[%s] : "",dsi.GetName()); 1032 << ""\tPreselection: (will affect number of requested training and testing events)"" << Endl;; 1033 else; 1034 Log() << kDEBUG //<< Form(""Dataset[%s] : "",dsi.GetName()); 1035 << ""\tPreselection: (will NOT affect number of requested training and testing events)"" << Endl;; 1036 ; 1037 if (dsi.HasCuts()) {; 1038 for (UInt_t cl = 0; cl< dsi.GetNClasses(); cl++) {; 1039 Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << "" "" << setiosflags(ios::left) << std::setw(maxL) << dsi.GetClassInfo(cl)->GetName(); 1040 << "" requirement: \"""" << dsi.GetClassInfo(cl)->GetCut() << ""\"""" << Endl;; 1041 Log() << kINFO << Form(""Dataset[%s] : "",ds",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataSetFactory_8cxx_source.html:43525,Log,Log,43525,doc/master/DataSetFactory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/DataSetFactory_8cxx_source.html,1,['Log'],['Log']
Testability,"NN::ClassificationSettings::setWeightSums ; (; double ; sumOfSigWeights, . double ; sumOfBkgWeights . ). set the weight sums to be scaled to (preparations for monitoring output) ; Definition at line 512 of file NeuralNet.cxx. ◆ startTestCycle(). void TMVA::DNN::ClassificationSettings::startTestCycle ; (; ). virtual . action to be done when the test cycle is started (e.g. ; update some monitoring output) ; Reimplemented from TMVA::DNN::Settings.; Definition at line 316 of file NeuralNet.cxx. ◆ startTrainCycle(). void TMVA::DNN::ClassificationSettings::startTrainCycle ; (; ). virtual . action to be done when the training cycle is started (e.g. ; update some monitoring output) ; Reimplemented from TMVA::DNN::Settings.; Definition at line 281 of file NeuralNet.cxx. ◆ testIteration(). void TMVA::DNN::ClassificationSettings::testIteration ; (; ). inlinevirtual . callback for monitoring and loggging ; Reimplemented from TMVA::DNN::Settings.; Definition at line 930 of file NeuralNet.h. ◆ testSample(). void TMVA::DNN::ClassificationSettings::testSample ; (; double ; error, . double ; output, . double ; target, . double ; weight . ). virtual . action to be done after the computation of a test sample (e.g. ; update some monitoring output) ; Reimplemented from TMVA::DNN::Settings.; Definition at line 304 of file NeuralNet.cxx. Member Data Documentation. ◆ m_ams. std::vector<double> TMVA::DNN::ClassificationSettings::m_ams. Definition at line 1000 of file NeuralNet.h. ◆ m_cutValue. double TMVA::DNN::ClassificationSettings::m_cutValue. Definition at line 1008 of file NeuralNet.h. ◆ m_fileNameNetConfig. std::string TMVA::DNN::ClassificationSettings::m_fileNameNetConfig. Definition at line 1011 of file NeuralNet.h. ◆ m_fileNameResult. std::string TMVA::DNN::ClassificationSettings::m_fileNameResult. Definition at line 1010 of file NeuralNet.h. ◆ m_input. std::vector<double> TMVA::DNN::ClassificationSettings::m_input. Definition at line 995 of file NeuralNet.h. ◆ m_output. std::vecto",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1ClassificationSettings.html:9182,test,testSample,9182,doc/master/classTMVA_1_1DNN_1_1ClassificationSettings.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1ClassificationSettings.html,1,['test'],['testSample']
Testability,"NN::Event&operator=(const TMVA::kNN::Event&); voidPrint() const; voidPrint(ostream& os) const; voidSetTargets(const TMVA::kNN::VarVec& tvec). Data Members; private:. TMVA::kNN::VarVecfTgttargets for regression analysis; Short_tfTypeevent type ==0 or == 1, expand it to arbitrary class types?; TMVA::kNN::VarVecfVarcoordinates (variables) for knn search; Double_tfWeightevent weight. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Event(); copy constructor. Event( const std::vector<Float_t>& ev, const std::vector<Float_t>& tg, UInt_t cls, Double_t weight, Double_t boostweight ); constructor. Event( const std::vector<Float_t>& ev, const std::vector<Float_t>& tg, const std::vector<Float_t>& vi, UInt_t cls, Double_t weight, Double_t boostweight ); constructor. Event(const TMVA::kNN::VarVec& vec, Double_t weight, Short_t type, const TMVA::kNN::VarVec& tvec); constructor. ~Event(); Event destructor. void Print(ostream& os) const; print method. Double_t GetWeight() const; return the event weight - depending on whether the flag; *IgnoreNegWeightsInTraining* is or not. If it is set AND it is; used for training, then negetive event weights are set to zero !; NOTE! For events used in Testing, the ORIGINAL possibly negative; event weight is used no matter what. VarType GetVar(UInt_t i) const. VarType GetTgt(UInt_t i) const. UInt_t GetNVar() const. UInt_t GetNTgt() const. Short_t GetType() const. VarType GetDist(TMVA::kNN::VarType var, UInt_t ivar) const; keep these two function separate. VarType GetDist(const TMVA::kNN::Event& other) const. void SetTargets(const TMVA::kNN::VarVec& tvec). const VarVec& GetTargets() const. const VarVec& GetVars() const. void Print() const. » Author: Rustem Ospanov » Copyright (c) 2007: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-30 15:18; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__kNN__Event.html:2243,Test,Testing,2243,root/html602/TMVA__kNN__Event.html,https://root.cern,https://root.cern/root/html602/TMVA__kNN__Event.html,1,['Test'],['Testing']
Testability,"NN::Event&operator=(const TMVA::kNN::Event&); voidPrint() const; voidPrint(ostream& os) const; voidSetTargets(const TMVA::kNN::VarVec& tvec). Data Members; private:. TMVA::kNN::VarVecfTgttargets for regression analysis; Short_tfTypeevent type ==0 or == 1, expand it to arbitrary class types?; TMVA::kNN::VarVecfVarcoordinates (variables) for knn search; Double_tfWeightevent weight. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Event(); copy constructor. Event( const std::vector<Float_t>& ev, const std::vector<Float_t>& tg, UInt_t cls, Double_t weight, Double_t boostweight ); constructor. Event( const std::vector<Float_t>& ev, const std::vector<Float_t>& tg, const std::vector<Float_t>& vi, UInt_t cls, Double_t weight, Double_t boostweight ); constructor. Event(const TMVA::kNN::VarVec& vec, Double_t weight, Short_t type, const TMVA::kNN::VarVec& tvec); constructor. ~Event(); Event destructor. void Print(ostream& os) const; print method. Double_t GetWeight() const; return the event weight - depending on whether the flag; *IgnoreNegWeightsInTraining* is or not. If it is set AND it is; used for training, then negetive event weights are set to zero !; NOTE! For events used in Testing, the ORIGINAL possibly negative; event weight is used no matter what. VarType GetVar(UInt_t i) const. VarType GetTgt(UInt_t i) const. UInt_t GetNVar() const. UInt_t GetNTgt() const. Short_t GetType() const. VarType GetDist(TMVA::kNN::VarType var, UInt_t ivar) const; keep these two function separate. VarType GetDist(const TMVA::kNN::Event& other) const. void SetTargets(const TMVA::kNN::VarVec& tvec). const VarVec& GetTargets() const. const VarVec& GetVars() const. void Print() const. » Author: Rustem Ospanov » Copyright (c) 2007: *; » Last changed: root/tmva $Id$ » Last generated: 2015-09-08 17:46; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__kNN__Event.html:2251,Test,Testing,2251,root/html604/TMVA__kNN__Event.html,https://root.cern,https://root.cern/root/html604/TMVA__kNN__Event.html,1,['Test'],['Testing']
Testability,"NN::TGradientDescent<TCuda<>> minimizer(settings.learningRate,; 974 settings.convergenceSteps,; 975 settings.testInterval);; 976 ; 977 std::vector<TNet<TCuda<>>> nets{};; 978 std::vector<TBatch<TCuda<>>> batches{};; 979 nets.reserve(nThreads);; 980 for (size_t i = 0; i < nThreads; i++) {; 981 nets.push_back(net);; 982 for (size_t j = 0; j < net.GetDepth(); j++); 983 {; 984 auto &masterLayer = net.GetLayer(j);; 985 auto &layer = nets.back().GetLayer(j);; 986 TCuda<>::Copy(layer.GetWeights(),; 987 masterLayer.GetWeights());; 988 TCuda<>::Copy(layer.GetBiases(),; 989 masterLayer.GetBiases());; 990 }; 991 }; 992 ; 993 bool converged = false;; 994 size_t stepCount = 0;; 995 size_t batchesInEpoch = nTrainingSamples / net.GetBatchSize();; 996 ; 997 std::chrono::time_point<std::chrono::system_clock> start, end;; 998 start = std::chrono::system_clock::now();; 999 ; 1000 if (!fInteractive) {; 1001 Log() << std::setw(10) << ""Epoch"" << "" | ""; 1002 << std::setw(12) << ""Train Err.""; 1003 << std::setw(12) << ""Test Err.""; 1004 << std::setw(12) << ""GFLOP/s""; 1005 << std::setw(12) << ""Conv. Steps"" << Endl;; 1006 std::string separator(62, '-');; 1007 Log() << separator << Endl;; 1008 }; 1009 ; 1010 while (!converged); 1011 {; 1012 stepCount++;; 1013 ; 1014 // Perform minimization steps for a full epoch.; 1015 trainingData.Shuffle();; 1016 for (size_t i = 0; i < batchesInEpoch; i += nThreads) {; 1017 batches.clear();; 1018 for (size_t j = 0; j < nThreads; j++) {; 1019 batches.reserve(nThreads);; 1020 batches.push_back(trainingData.GetBatch());; 1021 }; 1022 if (settings.momentum > 0.0) {; 1023 minimizer.StepMomentum(net, nets, batches, settings.momentum);; 1024 } else {; 1025 minimizer.Step(net, nets, batches);; 1026 }; 1027 }; 1028 ; 1029 if ((stepCount % minimizer.GetTestInterval()) == 0) {; 1030 ; 1031 // Compute test error.; 1032 Double_t testError = 0.0;; 1033 for (auto batch : testData) {; 1034 auto inputMatrix = batch.GetInput();; 1035 auto outputMatrix = batch.GetOutput();; 103",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDNN_8cxx_source.html:36043,Test,Test,36043,doc/master/MethodDNN_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDNN_8cxx_source.html,1,['Test'],['Test']
Testability,"NU ; virtual voidTAttLine::SaveLineAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1, Int_t widdef = 1); virtual voidSavePrimitive(ostream& out, Option_t* option = """"); virtual voidSetBBoxCenter(const TPoint& p); virtual voidSetBBoxCenterX(const Int_t x); virtual voidSetBBoxCenterY(const Int_t y); virtual voidSetBBoxX1(const Int_t x); virtual voidSetBBoxX2(const Int_t x); virtual voidSetBBoxY1(const Int_t y); virtual voidSetBBoxY2(const Int_t y); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetHorizontal(Bool_t set = kTRUE)TOGGLE GETTER ; virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidSetNDC(Bool_t isNDC = kTRUE); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetVertical(Bool_t set = kTRUE)TOGGLE GETTER ; virtual voidSetX1(Double_t x1); virtual voidSetX2(Double_t x2); virtual voidSetY1(Double_t y1); virtual voidSetY2(Double_t y2); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TLine(); TLine(const TLine& line); TLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TLine.html:5998,Test,TestBit,5998,root/html602/TLine.html,https://root.cern,https://root.cern/root/html602/TLine.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"NU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual Bool_tSetProcess(const char* flagName, Int_t flagValue); virtual voidSetRandom(TRandom* random); virtual voidSetRootGeometry(); virtual voidSetSkinSurface(const char* name, const char* volName, const char* opSurfaceName); virtual voidSetStack(TVirtualMCStack* stack); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidSetUserDecay(Int_t pdg); virtual voidSetUserParameters(Bool_t isUserParameters); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual Int_tStepProcesses(TArrayI& proc) const; virtual voidStopEvent(); virtual voidStopRun(); virtual voidStopTrack(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Double_tTrackCharge() const; virtual Double_tTrackLength() const; virtual Double_tTrackMass() const; virtual voidTrackMomentum(TLorentzVector& momentum) const; virtual voidTrackMomentum(Double_t& px, Double_t& py, Double_t& pz, Double_t& etot) const; virtual Int_tTrackPid() const; virtual voidTrackPosition(TLorentzVector& position) const; virtual voidTrackPosition(Double_t& x, Double_t& y, Double_t& z) const; virtual Double_tTrackStep() const; virtual Double_tTrackTime() const; TVirtualMC(); TVirtualMC(const char* name, const char* title, Bool_t isRootGeometrySupported = kFALSE); virtual voidTObject::UseCurrentStyle(); virtual Int_tVolDaughterCopyNo(const char* volName, Int_t i) const; virtual const char*VolDaughterName(const char* volName, Int_t i) const; virtual Int_tVolId(const char* volName) const; virtual Int_tVolId2Mate(Int_t id) const; virtual const char*VolName(Int_t id) const; virtual voidTObject::Warning(con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TVirtualMC.html:13015,Test,TestBit,13015,root/html602/TVirtualMC.html,https://root.cern,https://root.cern/root/html602/TVirtualMC.html,2,['Test'],['TestBit']
Testability,"NU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(); TStringmangle(const char* exp) const. Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. RooCatType_cat; TRegexp_regexp; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooMapCatEntry(const char* exp, const RooCatType* cat). RooMapCatEntry(const RooMapCatEntry& other). Bool_t match(const char* testPattern) const. TString mangle(const char* exp) const; Mangle name : escape regexp character '+'. inline RooMapCatEntry(); {}. virtual ~RooMapCatEntry(); {}. TObject* Clone(const char* newName = 0) const. Bool_t ok(); { return (_regexp.Status()==TRegexp::kOK) ; }. const RooCatType& outCat() const; { return _cat ; }. » Last changed: Thu Sep 23 20:00:07 2010 » Last generated: 2010-09-23 20:00; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooMapCatEntry.html:5804,test,testPattern,5804,root/html528/RooMapCatEntry.html,https://root.cern,https://root.cern/root/html528/RooMapCatEntry.html,1,['test'],['testPattern']
Testability,"NUMBER_OF_PEAKS2]; // calculated values of fitted amplitudes of 2D peaks, output parameters; double amp_err[MAX_NUMBER_OF_PEAKS2]; // amplitude errors of 2D peaks; bool fix_amp[MAX_NUMBER_OF_PEAKS2]; // logical vector which allows to fix appropriate amplitudes of 2D peaks (not fit). However, they are present in the estimated functional; double amp_init_x1[MAX_NUMBER_OF_PEAKS2]; // initial values of 1D ridges amplitudes, input parameters; double amp_calc_x1[MAX_NUMBER_OF_PEAKS2]; // calculated values of fitted amplitudes of 1D ridges, output parameters; double amp_err_x1[MAX_NUMBER_OF_PEAKS2]; // amplitude errors of 1D ridges; bool fix_amp_x1[MAX_NUMBER_OF_PEAKS2]; // logical vector which allows to fix the appropriate amplitudes of 1D ridges (not fit). However, they are present in the estimated functional; double amp_init_y1[MAX_NUMBER_OF_PEAKS2]; // initial values of 1D ridges amplitudes, input parameters; double amp_calc_y1[MAX_NUMBER_OF_PEAKS2]; // calculated values of fitted amplitudes of 1D ridges, output parameters; double amp_err_y1[MAX_NUMBER_OF_PEAKS2]; // amplitude errors of 1D ridges; bool fix_amp_y1[MAX_NUMBER_OF_PEAKS2]; // logical vector which allows to fix the appropriate amplitudes of 1D ridges (not fit). However, they are present in the estimated functional; double volume[MAX_NUMBER_OF_PEAKS1]; // calculated volumes of peaks; double volume_err[MAX_NUMBER_OF_PEAKS1]; // errors of peak volumes; double sigma_init_x; // sigma x parameter; double sigma_calc_x;; double sigma_err_x;; bool fix_sigma_x;; double sigma_init_y; // sigma y parameter; double sigma_calc_y;; double sigma_err_y;; bool fix_sigma_y;; double ro_init; // correlation coefficient; double ro_calc;; double ro_err;; bool fix_ro;; double txy_init; // t parameter for 2D peaks; double txy_calc;; double txy_err;; bool fix_txy;; double sxy_init; // s parameter for 2D peaks; double sxy_calc;; double sxy_err;; bool fix_sxy;; double tx_init; // t parameter for 1D ridges (x direction); double tx_calc;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/spectrum/Spectrum.html:50640,log,logical,50640,root/htmldoc/guides/spectrum/Spectrum.html,https://root.cern,https://root.cern/root/htmldoc/guides/spectrum/Spectrum.html,1,['log'],['logical']
Testability,"Name ; (; ); const. inlineoverridevirtual . Returns name of object. ; This default method returns the class name. Classes that give objects a name should override this method. ; Reimplemented from TObject.; Reimplemented in TPackMgr.; Definition at line 47 of file TNamed.h. ◆ GetTitle(). const char * TNamed::GetTitle ; (; ); const. inlineoverridevirtual . Returns title of object. ; This default method returns the class title (i.e. description). Classes that give objects a title should override this method. ; Reimplemented from TObject.; Reimplemented in TPackMgr.; Definition at line 48 of file TNamed.h. ◆ Hash(). ULong_t TNamed::Hash ; (; ); const. inlineoverridevirtual . Return hash value for this object. ; Note: If this routine is overloaded in a derived class, this derived class should also add ROOT::CallRecursiveRemoveIfNeeded(*this); ROOT::CallRecursiveRemoveIfNeededvoid CallRecursiveRemoveIfNeeded(TObject &obj)call RecursiveRemove for obj if gROOT is valid and obj.TestBit(kMustCleanup) is true.Definition TROOT.h:395; Otherwise, when RecursiveRemove is called (by ~TObject or example) for this type of object, the transversal of THashList and THashTable containers will will have to be done without call Hash (and hence be linear rather than logarithmic complexity). You will also see warnings like Error in <ROOT::Internal::TCheckHashRecursiveRemoveConsistency::CheckRecursiveRemove>: The class SomeName overrides TObject::Hash but does not call TROOT::RecursiveRemove in its destructor.; TNamed::HashULong_t Hash() const overrideReturn hash value for this object.Definition TNamed.h:49; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:987; TROOT::RecursiveRemovevoid RecursiveRemove(TObject *obj) overrideRecursively remove this object from the list of Cleanups.Definition TROOT.cxx:2498. Reimplemented from TObject.; Definition at line 49 o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTNamed.html:18825,Test,TestBit,18825,doc/v632/classTNamed.html,https://root.cern,https://root.cern/doc/v632/classTNamed.html,1,['Test'],['TestBit']
Testability,"Name ; (; ); const. inlineoverridevirtual . Returns name of object. ; This default method returns the class name. Classes that give objects a name should override this method. ; Reimplemented from TObject.; Reimplemented in TPackMgr.; Definition at line 47 of file TNamed.h. ◆ GetTitle(). const char * TNamed::GetTitle ; (; ); const. inlineoverridevirtual . Returns title of object. ; This default method returns the class title (i.e. description). Classes that give objects a title should override this method. ; Reimplemented from TObject.; Reimplemented in TPackMgr.; Definition at line 48 of file TNamed.h. ◆ Hash(). ULong_t TNamed::Hash ; (; ); const. inlineoverridevirtual . Return hash value for this object. ; Note: If this routine is overloaded in a derived class, this derived class should also add ROOT::CallRecursiveRemoveIfNeeded(*this); ROOT::CallRecursiveRemoveIfNeededvoid CallRecursiveRemoveIfNeeded(TObject &obj)call RecursiveRemove for obj if gROOT is valid and obj.TestBit(kMustCleanup) is true.Definition TROOT.h:395; Otherwise, when RecursiveRemove is called (by ~TObject or example) for this type of object, the transversal of THashList and THashTable containers will will have to be done without call Hash (and hence be linear rather than logarithmic complexity). You will also see warnings like Error in <ROOT::Internal::TCheckHashRecursiveRemoveConsistency::CheckRecursiveRemove>: The class SomeName overrides TObject::Hash but does not call TROOT::RecursiveRemove in its destructor.; TNamed::HashULong_t Hash() const overrideReturn hash value for this object.Definition TNamed.h:49; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TROOT::RecursiveRemovevoid RecursiveRemove(TObject *obj) overrideRecursively remove this object from the list of Cleanups.Definition TROOT.cxx:2498. Reimplemented from TObject.; Definition at line 49 o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNamed.html:18748,Test,TestBit,18748,doc/master/classTNamed.html,https://root.cern,https://root.cern/doc/master/classTNamed.html,1,['Test'],['TestBit']
Testability,"Name = TrainingHistory_PyKeras_'val_loss', Entries= 0, Total sum= 7.21788; Factory : === Destroy and recreate all methods via weight files for testing ===; : ; : Reading weight file: ␛[0;36mdataset/weights/TMVA_CNN_Classification_BDT.weights.xml␛[0m; : Reading weight file: ␛[0;36mdataset/weights/TMVA_CNN_Classification_TMVA_DNN_CPU.weights.xml␛[0m; : Reading weight file: ␛[0;36mdataset/weights/TMVA_CNN_Classification_TMVA_CNN_CPU.weights.xml␛[0m; : Reading weight file: ␛[0;36mdataset/weights/TMVA_CNN_Classification_PyKeras.weights.xml␛[0m; : Reading weight file: ␛[0;36mdataset/weights/TMVA_CNN_Classification_PyTorch.weights.xml␛[0m; Factory : ␛[1mTest all methods␛[0m; Factory : Test method: BDT for Classification performance; : ; BDT : [dataset] : Evaluation of BDT on testing sample (400 events); : Elapsed time for evaluation of 400 events: 0.00573 sec ; Factory : Test method: TMVA_DNN_CPU for Classification performance; : ; : Evaluate deep neural network on CPU using batches with size = 400; : ; TMVA_DNN_CPU : [dataset] : Evaluation of TMVA_DNN_CPU on testing sample (400 events); : Elapsed time for evaluation of 400 events: 0.023 sec ; Factory : Test method: TMVA_CNN_CPU for Classification performance; : ; : Evaluate deep neural network on CPU using batches with size = 400; : ; TMVA_CNN_CPU : [dataset] : Evaluation of TMVA_CNN_CPU on testing sample (400 events); : Elapsed time for evaluation of 400 events: 0.149 sec ; Factory : Test method: PyKeras for Classification performance; : ; : Setting up tf.keras; : Using TensorFlow version 2; : Use Keras version from TensorFlow : tf.keras; : Applying GPU option: gpu_options.allow_growth=True; : Disabled TF eager execution when evaluating model ; : Loading Keras Model ; : Loaded model from file: trained_model_cnn.h5; PyKeras : [dataset] : Evaluation of PyKeras on testing sample (400 events); : Elapsed time for evaluation of 400 events: 0.175 sec ; Factory : Test method: PyTorch for Classification performance; : ; : Setup P",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__CNN__Classification_8C.html:38035,Test,Test,38035,doc/master/TMVA__CNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__CNN__Classification_8C.html,2,"['Test', 'test']","['Test', 'testing']"
Testability,"Name())<< ""trainingEventVector "" << trainingEventVector->size() << Endl;; 1454 Log() << kDEBUG << Form(""Dataset[%s] : "",dsi.GetName())<< ""testingEventVector "" << testingEventVector->size() << Endl;; 1455 ; 1456 // create dataset; 1457 DataSet* ds = new DataSet(dsi);; 1458 ; 1459 // Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << ""Create internal training tree"" << Endl;; 1460 ds->SetEventCollection(trainingEventVector, Types::kTraining );; 1461 // Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << ""Create internal testing tree"" << Endl;; 1462 ds->SetEventCollection(testingEventVector, Types::kTesting );; 1463 ; 1464 ; 1465 if (ds->GetNTrainingEvents() < 1){; 1466 Log() << kFATAL << ""Dataset "" << std::string(dsi.GetName()) << "" does not have any training events, I better stop here and let you fix that one first "" << Endl;; 1467 }; 1468 ; 1469 if (ds->GetNTestEvents() < 1) {; 1470 Log() << kERROR << ""Dataset "" << std::string(dsi.GetName()) << "" does not have any testing events, guess that will cause problems later..but for now, I continue "" << Endl;; 1471 }; 1472 ; 1473 delete trainingEventVector;; 1474 delete testingEventVector;; 1475 return ds;; 1476 ; 1477}; 1478 ; 1479////////////////////////////////////////////////////////////////////////////////; 1480/// renormalisation of the TRAINING event weights; 1481/// - none (kind of obvious) .. use the weights as supplied by the; 1482/// user.. (we store however the relative weight for later use); 1483/// - numEvents; 1484/// - equalNumEvents reweight the training events such that the sum of all; 1485/// backgr. (class > 0) weights equal that of the signal (class 0); 1486 ; 1487void; 1488TMVA::DataSetFactory::RenormEvents( TMVA::DataSetInfo& dsi,; 1489 EventVectorOfClassesOfTreeType& tmpEventVector,; 1490 const EvtStatsPerClass& eventCounts,; 1491 const TString& normMode ); 1492{; 1493 ; 1494 ; 1495 // print rescaling info; 1496 // ---------------------------------; 1497 // compute sums of weights; 1498 Va",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataSetFactory_8cxx_source.html:67048,test,testing,67048,doc/master/DataSetFactory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/DataSetFactory_8cxx_source.html,1,['test'],['testing']
Testability,"Name(const char* name); const TGPicture*TGMainFrame::SetIconPixmap(const char* iconName); voidTGMainFrame::SetIconPixmap(char** xpm_array); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); voidTGMainFrame::SetMWMHints(UInt_t value, UInt_t funcs, UInt_t input); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGMainFrame::SetWindowName(const char* name = 0); voidTGMainFrame::SetWMPosition(Int_t x, Int_t y); voidTGMainFrame::SetWMSize(UInt_t w, UInt_t h); voidTGMainFrame::SetWMSizeHints(UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc); voidTGMainFrame::SetWMState(EInitialState state); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); voidUpdateRange(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TASPaletteEditor.html:15767,Test,TestBit,15767,root/html528/TASPaletteEditor.html,https://root.cern,https://root.cern/root/html528/TASPaletteEditor.html,6,['Test'],"['TestBit', 'TestBits']"
Testability,"Name(const char* name); const TGPicture*TGMainFrame::SetIconPixmap(const char* iconName); voidTGMainFrame::SetIconPixmap(char** xpm_array); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); voidTGMainFrame::SetMWMHints(UInt_t value, UInt_t funcs, UInt_t input); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGMainFrame::SetWindowName(const char* name = 0); voidTGMainFrame::SetWMPosition(Int_t x, Int_t y); voidTGMainFrame::SetWMSize(UInt_t w, UInt_t h); voidTGMainFrame::SetWMSizeHints(UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc); voidTGMainFrame::SetWMState(EInitialState state); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TAdvancedGraphicsDialog.html:16167,Test,TestBit,16167,root/html534/TAdvancedGraphicsDialog.html,https://root.cern,https://root.cern/root/html534/TAdvancedGraphicsDialog.html,46,['Test'],"['TestBit', 'TestBits']"
Testability,"Name(const char* name); virtual voidTBranch::SetCompressionLevel(Int_t level = 1); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTBranch::SetEntries(Long64_t entries); virtual voidTBranch::SetEntryOffsetLen(Int_t len, Bool_t updateSubBranches = kFALSE); virtual voidTBranch::SetFile(TFile* file = 0); virtual voidTBranch::SetFile(const char* filename); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillStyle(Style_t fstyle); virtual voidTBranch::SetFirstEntry(Long64_t entry); virtual Bool_tSetMakeClass(Bool_t decomposeObj = kTRUE); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidSetObject(void* objadd); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetOffset(Int_t offset); voidSetParentClass(TClass* clparent); virtual voidSetParentName(const char* name); virtual voidTBranch::SetStatus(Bool_t status = 1); virtual voidSetTargetClassName(const char* name); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTBranch::SetTree(TTree* tree); virtual voidSetType(Int_t btype); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidSetupAddresses(); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTBranch::UpdateAddress(); virtual voidUpdateFile(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TBranchElement.html:10210,Test,TestBit,10210,root/html528/TBranchElement.html,https://root.cern,https://root.cern/root/html528/TBranchElement.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"Name(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidSetResolution(Float_t resolution = 1); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; const char*SmoothMarkov(float* source, Int_t ssize, Int_t averWindow); static TH1*StaticBackground(const TH1* hist, Int_t niter = 20, Option_t* option = """"); static Int_tStaticSearch(const TH1* hist, Double_t sigma = 2, Option_t* option = ""goff"", Double_t threshold = 0.05); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; const char*Unfolding(float* source, const float** respMatrix, Int_t ssizex, Int_t ssizey, Int_t numberIterations, Int_t numberRepetitions, Double_t boost); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. TSpectrum(const TSpectrum&); TSpectrum&operator=(const TSpectrum&). Data Members; public:. enum { kBackOrder2; kBackOrder4; kBackOrder6; kBackOrder8; kBackIncreasingWindow; kBackDecreasingWindow; kBackSmoothing3; kBackSmoothing5; kBackSmoothing7; kBackSmoothing9; kBackSmoothing11; kBackSmoothing13; kBackSmoothing15; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TSpectrum.html:7261,Test,TestBit,7261,root/html534/TSpectrum.html,https://root.cern,https://root.cern/root/html534/TSpectrum.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"Name, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsReal&model() const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooNumConvolution.html:20834,test,testArg,20834,root/html534/RooNumConvolution.html,https://root.cern,https://root.cern/root/html534/RooNumConvolution.html,1,['test'],['testArg']
Testability,"Name, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsReal&model() const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooNumConvolution&operator=(const RooNumConvolution&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooNumConvolution.html:20583,test,testArg,20583,root/html602/RooNumConvolution.html,https://root.cern,https://root.cern/root/html602/RooNumConvolution.html,2,['test'],['testArg']
Testability,"Name, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooMoment*RooAbsReal::mean(RooRealVar& obs); RooMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); const RooArgSet&numIntCatVars() const; const RooArgSet&numIntRealVars() const; Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooRealIntegral.html:16831,test,testArg,16831,root/html526/RooRealIntegral.html,https://root.cern,https://root.cern/root/html526/RooRealIntegral.html,2,['test'],['testArg']
Testability,"Name, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooMoment*RooAbsReal::mean(RooRealVar& obs); RooMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); const RooArgSet&numIntCatVars() const; const RooArgSet&numIntRealVars() const; Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooRealIntegral.html:17275,test,testArg,17275,root/html530/RooRealIntegral.html,https://root.cern,https://root.cern/root/html530/RooRealIntegral.html,1,['test'],['testArg']
Testability,"NameOnly = kFALSE); virtual voidRooAbsCollection::removeAll(); Bool_tRooAbsCollection::replace(const RooAbsCollection& other); virtual Bool_tRooAbsCollection::replace(const RooAbsArg& var1, const RooAbsArg& var2); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); RooAbsCollection*RooAbsCollection::selectByAttrib(const char* name, Bool_t value) const; RooAbsCollection*RooAbsCollection::selectByName(const char* nameList, Bool_t verbose = kFALSE) const; RooAbsCollection*RooAbsCollection::selectCommon(const RooAbsCollection& refColl) const; voidRooAbsCollection::setAttribAll(const Text_t* name, Bool_t value = kTRUE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidRooAbsCollection::setHashTableSize(Int_t i); voidRooAbsCollection::setName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); RooAbsCollection*RooAbsCollection::snapshot(Bool_t deepCopy = kTRUE) const; Bool_tRooAbsCollection::snapshot(RooAbsCollection& output, Bool_t deepCopy = kTRUE) const; voidsort(Bool_t reverse = kFALSE); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidwriteToStream(ostream& os, Bool_t compact).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooArgList.html:11002,Test,TestBit,11002,root/html528/RooArgList.html,https://root.cern,https://root.cern/root/html528/RooArgList.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"NameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual Bool_tSetProcess(const char* flagName, Int_t flagValue); virtual voidSetRandom(TRandom* random); virtual voidSetRootGeometry(); virtual voidSetSkinSurface(const char* name, const char* volName, const char* opSurfaceName); virtual voidSetStack(TVirtualMCStack* stack); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidSetUserDecay(Int_t pdg); virtual voidSetUserParameters(Bool_t isUserParameters); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual Int_tStepProcesses(TArrayI& proc) const; virtual voidStopEvent(); virtual voidStopRun(); virtual voidStopTrack(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Double_tTrackCharge() const; virtual Double_tTrackLength() const; virtual Double_tTrackMass() const; virtual voidTrackMomentum(TLorentzVector& momentum) const; virtual voidTrackMomentum(Double_t& px, Double_t& py, Double_t& pz, Double_t& etot) const; virtual Int_tTrackPid() const; virtual voidTrackPosition(TLorentzVector& position) const; virtual voidTrackPosition(Double_t& x, Double_t& y, Double_t& z) const; virtual Double_tTrackStep() const; virtual Double_tTrackTime() const; virtual voidTObject::UseCurrentStyle(); virtual Int_tVolDaughterCopyNo(const char* volName, Int_t i) const; virtual const char*VolDaughterName(const char* volName, Int_t i) const; virtual Int_tVolId(const char* volName) const; virtual Int_tVolId2Mate(Int_t id) const; virtual const char*VolName(Int_t id) const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TVirtualMC.html:13043,Test,TestBits,13043,root/html534/TVirtualMC.html,https://root.cern,https://root.cern/root/html534/TVirtualMC.html,1,['Test'],['TestBits']
Testability,"Named::Print(Option_t* option = """") const; virtual voidPrintValue(Int_t i = 0) const; virtual Int_tTObject::Read(const char* name); virtual voidTLeaf::ReadBasket(TBuffer&); virtual voidTLeaf::ReadBasketExport(TBuffer&, TClonesArray*, Int_t); virtual voidTLeaf::ReadValue(istream&, Char_t = ' '); virtual voidTObject::RecursiveRemove(TObject* obj); Int_tTLeaf::ResetAddress(void* add, Bool_t destructor = kFALSE); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTLeaf::SetAddress(void* add = 0); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTLeaf::SetBranch(TBranch* branch); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetLeafCount(TLeaf* leaf); virtual voidTLeaf::SetLen(Int_t len = 1); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTLeaf::SetOffset(Int_t offset = 0); virtual voidTLeaf::SetRange(Bool_t range = kTRUE); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTLeaf::SetUnsigned(); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TLeafElement.html:6219,Test,TestBit,6219,root/html534/TLeafElement.html,https://root.cern,https://root.cern/root/html534/TLeafElement.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"Named::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooMoment*RooAbsReal::mean(RooRealVar& obs); RooMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooMinuit*minuit(); RooMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); RooAbsReal&nll(); virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; Int_tnumEval() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooProfileLL.html:17924,test,testArg,17924,root/html530/RooProfileLL.html,https://root.cern,https://root.cern/root/html530/RooProfileLL.html,2,['test'],['testArg']
Testability,"NamespaceDecl *NSD = llvm::dyn_cast<NamespaceDecl>(ND)) {; 1132 Register(NSD, /*AddSingleEntry=*/ false);; 1133 }; 1134 else if (TypedefNameDecl *TND = dyn_cast<TypedefNameDecl>(ND)); 1135 Register(TND);; 1136 // FIXME: Add the rest...; 1137 return true; // continue decending; 1138 }; 1139 private:; 1140 clang::GlobalModuleIndex::UserDefinedInterestingIDs &DefinitionIDs;; 1141 void Register(const NamedDecl* ND, bool AddSingleEntry = true) {; 1142 assert(ND->isFromASTFile());; 1143 // FIXME: All decls should have an owning module once rootcling; 1144 // updates its generated decls from within the LookupHelper & co.; 1145 if (!ND->hasOwningModule()) {; 1146#ifndef NDEBUG; 1147 SourceManager &SM = ND->getASTContext().getSourceManager();; 1148 SourceLocation Loc = ND->getLocation();; 1149 const FileEntry *FE = SM.getFileEntryForID(SM.getFileID(Loc));; 1150 (void)FE;; 1151 assert(FE->getName().contains(""input_line_""));; 1152#endif; 1153 return;; 1154 }; 1155 ; 1156 Module *OwningModule = ND->getOwningModule()->getTopLevelModule();; 1157 assert(OwningModule);; 1158 assert(!ND->getName().empty() && ""Empty name"");; 1159 if (AddSingleEntry && DefinitionIDs.count(ND->getName())); 1160 return;; 1161 // FIXME: The FileEntry in not stable to serialize.; 1162 // FIXME: We might end up with many times with the same module.; 1163 // FIXME: We might end up two modules containing a definition.; 1164 // FIXME: What do we do if no definition is found.; 1165 DefinitionIDs[ND->getName()].push_back(OwningModule->getASTFile());; 1166 }; 1167 };; 1168 DefinitionFinder defFinder(IDs, CI.getASTContext().getTranslationUnitDecl());; 1169 ; 1170 llvm::cantFail(GlobalModuleIndex::writeIndex(CI.getFileManager(),; 1171 CI.getPCHContainerReader(),; 1172 ModuleIndexPath,; 1173 &IDs));; 1174 ModuleManager->resetForReload();; 1175 ModuleManager->loadGlobalIndex();; 1176 GlobalIndex = ModuleManager->getGlobalIndex();; 1177 }; 1178 HaveFullGlobalModuleIndex = true;; 1179 }; 1180 return GlobalIndex;; 1181",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:41882,assert,assert,41882,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,2,['assert'],['assert']
Testability,"NbinsMVAPdf; // number of bins used in histogram that creates PDF; 727 Int_t fNsmoothMVAPdf; // number of times a histogram is smoothed before creating the PDF; 728 ; 729 protected:; 730 Results *fResults;; 731 ClassDef(MethodBase,0); // Virtual base class for all TMVA method; 732 ; 733 };; 734} // namespace TMVA; 735 ; 736 ; 737 ; 738 ; 739 ; 740 ; 741 ; 742// ========== INLINE FUNCTIONS =========================================================; 743 ; 744 ; 745//_______________________________________________________________________; 746inline const TMVA::Event* TMVA::MethodBase::GetEvent( const TMVA::Event* ev ) const; 747{; 748 return GetTransformationHandler().Transform(ev);; 749}; 750 ; 751inline const TMVA::Event* TMVA::MethodBase::GetEvent() const; 752{; 753 if(fTmpEvent); 754 return GetTransformationHandler().Transform(fTmpEvent);; 755 else; 756 return GetTransformationHandler().Transform(Data()->GetEvent());; 757}; 758 ; 759inline const TMVA::Event* TMVA::MethodBase::GetEvent( Long64_t ievt ) const; 760{; 761 assert(fTmpEvent==nullptr);; 762 return GetTransformationHandler().Transform(Data()->GetEvent(ievt));; 763}; 764 ; 765inline const TMVA::Event* TMVA::MethodBase::GetEvent( Long64_t ievt, Types::ETreeType type ) const; 766{; 767 assert(fTmpEvent==nullptr);; 768 return GetTransformationHandler().Transform(Data()->GetEvent(ievt, type));; 769}; 770 ; 771inline const TMVA::Event* TMVA::MethodBase::GetTrainingEvent( Long64_t ievt ) const; 772{; 773 assert(fTmpEvent==nullptr);; 774 return GetEvent(ievt, Types::kTraining);; 775}; 776 ; 777inline const TMVA::Event* TMVA::MethodBase::GetTestingEvent( Long64_t ievt ) const; 778{; 779 assert(fTmpEvent==nullptr);; 780 return GetEvent(ievt, Types::kTesting);; 781}; 782 ; 783#endif; Configurable.h; DataSet.h; Event.h; IMethod.h; Results.h; Char_tchar Char_tDefinition RtypesCore.h:37; kFALSEconstexpr Bool_t kFALSEDefinition RtypesCore.h:94; Double_tdouble Double_tDefinition RtypesCore.h:59; Long64_tlong long Long64_tDe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodBase_8h_source.html:32687,assert,assert,32687,doc/master/MethodBase_8h_source.html,https://root.cern,https://root.cern/doc/master/MethodBase_8h_source.html,1,['assert'],['assert']
Testability,"Net.h:1009; TMVA::DNN::ClassificationSettings::setResultComputationvoid setResultComputation(std::string _fileNameNetConfig, std::string _fileNameResult, std::vector< Pattern > *_resultPatternContainer)preparation for monitoring outputDefinition NeuralNet.cxx:520; TMVA::DNN::ClassificationSettings::m_fileNameResultstd::string m_fileNameResultDefinition NeuralNet.h:1010; TMVA::DNN::ClassificationSettings::m_significancesstd::vector< double > m_significancesDefinition NeuralNet.h:1001; TMVA::DNN::ClassificationSettings::m_sumOfSigWeightsdouble m_sumOfSigWeightsDefinition NeuralNet.h:1004; TMVA::DNN::ClassificationSettings::m_weightsstd::vector< double > m_weightsDefinition NeuralNet.h:998; TMVA::DNN::ClassificationSettings::m_fileNameNetConfigstd::string m_fileNameNetConfigDefinition NeuralNet.h:1011; TMVA::DNN::ClassificationSettings::m_targetsstd::vector< double > m_targetsDefinition NeuralNet.h:997; TMVA::DNN::ClassificationSettings::testSamplevoid testSample(double error, double output, double target, double weight)action to be done after the computation of a test sample (e.g.Definition NeuralNet.cxx:304; TMVA::DNN::ClassificationSettings::m_scaleToNumEventssize_t m_scaleToNumEventsDefinition NeuralNet.h:1006; TMVA::DNN::ClassificationSettings::startTestCyclevirtual void startTestCycle()action to be done when the test cycle is started (e.g.Definition NeuralNet.cxx:316; TMVA::DNN::ClassificationSettings::m_sumOfBkgWeightsdouble m_sumOfBkgWeightsDefinition NeuralNet.h:1005; TMVA::DNN::ClassificationSettings::setWeightSumsvoid setWeightSums(double sumOfSigWeights, double sumOfBkgWeights)set the weight sums to be scaled to (preparations for monitoring output)Definition NeuralNet.cxx:512; TMVA::DNN::ClassificationSettings::m_cutValuedouble m_cutValueDefinition NeuralNet.h:1008; TMVA::DNN::ClassificationSettings::m_outputstd::vector< double > m_outputDefinition NeuralNet.h:996; TMVA::DNN::LayerData::m_itInputBeginconst_iterator_type m_itInputBeginiterator to the first o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8cxx_source.html:22941,test,testSamplevoid,22941,doc/master/NeuralNet_8cxx_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8cxx_source.html,3,['test'],"['test', 'testSample', 'testSamplevoid']"
Testability,"NextBoundary. ;  ; void CheckBoundaryReference (Int_t icheck=-1) override;  Check the boundary errors reference file created by CheckBoundaryErrors method. ;  ; void CheckEdit ();  Check if Ged library is loaded and load geometry editor classe. ;  ; void CheckGeometry (Int_t nrays, Double_t startx, Double_t starty, Double_t startz) const override;  Geometry checking method (see TGeoChecker). ;  ; void CheckGeometryFull (Bool_t checkoverlaps=kTRUE, Bool_t checkcrossings=kTRUE, Int_t nrays=10000, const Double_t *vertex=nullptr) override;  Geometry checking method (see: TGeoManager::CheckGeometry()) ;  ; void CheckOverlaps (const TGeoVolume *vol, Double_t ovlp=0.1, Option_t *option="""") const override;  Check overlaps for the top volume of the geometry, within a limit OVLP. ;  ; void CheckPoint (Double_t x=0, Double_t y=0, Double_t z=0, Option_t *option="""", Double_t safety=0.) override;  Check current point in the geometry. ;  ; void CheckShape (TGeoShape *shape, Int_t testNo, Int_t nsamples, Option_t *option) override;  Test for shape navigation methods. ;  ; Int_t CountNodes (TGeoVolume *vol, Int_t level) const;  Count number of visible nodes down to a given level. ;  ; Int_t CountVisibleNodes () override;  Count total number of visible nodes. ;  ; void DefaultAngles () override;  Set default angles for the current view. ;  ; void DefaultColors () override;  Set default volume colors according to tracking media. ;  ; Int_t DistanceToPrimitiveVol (TGeoVolume *vol, Int_t px, Int_t py) override;  Compute the closest distance of approach from point px,py to a volume. ;  ; void Draw (Option_t *option="""") override;  Draw method. ;  ; void DrawBatemanSol (TGeoBatemanSol *sol, Option_t *option="""") override;  Draw the time evolution of a radionuclide. ;  ; void DrawCurrentPoint (Int_t color) override;  Draw current point in the same view. ;  ; void DrawOnly (Option_t *option="""") override;  Draw only one volume. ;  ; void DrawOverlap (void *ovlp, Option_t *option="""") override; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPainter.html:2341,test,testNo,2341,doc/master/classTGeoPainter.html,https://root.cern,https://root.cern/doc/master/classTGeoPainter.html,2,"['Test', 'test']","['Test', 'testNo']"
Testability,"No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Attributes |; Friends |; List of all members ; TMVA::MethodPyGTB Class Reference. . Definition at line 33 of file MethodPyGTB.h. Public Member Functions;  MethodPyGTB (const TString &jobName, const TString &methodTitle, DataSetInfo &theData, const TString &theOption="""");  ;  MethodPyGTB (DataSetInfo &dsi, const TString &theWeightFile);  ;  ~MethodPyGTB (void);  ; virtual void AddWeightsXMLTo (void *) const;  ; const Ranking * CreateRanking ();  ; void DeclareOptions ();  ; std::vector< Float_t > & GetMulticlassValues ();  ; Double_t GetMvaValue (Double_t *errLower=nullptr, Double_t *errUpper=nullptr);  ; std::vector< Double_t > GetMvaValues (Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the current Data type ;  ; Bool_t HasAnalysisType (Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets);  ; void Init ();  ; void ProcessOptions ();  ; virtual void ReadModelFromFile ();  ; virtual void ReadWeightsFromStream (std::istream &);  ; virtual void ReadWeightsFromStream (std::istream &)=0;  ; virtual void ReadWeightsFromStream (TFile &);  ; virtual void ReadWeightsFromXML (void *);  ; virtual void TestClassification ();  initialization ;  ; void Train ();  ;  Public Member Functions inherited from TMVA::PyMethodBase;  PyMethodBase (const TString &jobName, Types::EMVA methodType, const TString &methodTitle, DataSetInfo &dsi, const TString &theOption="""");  ;  PyMethodBase (Types::EMVA methodType, DataSetInfo &dsi, const TString &weightFile);  ; virtual ~PyMethodBase ();  ; PyObject * Eval (TString code);  Evaluate Python code. ;  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::MethodBase;  MethodBase (const TString &jobName, Types::EMVA me",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodPyGTB.html:935,log,logProgress,935,doc/master/classTMVA_1_1MethodPyGTB.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodPyGTB.html,2,"['Test', 'log']","['TestClassification', 'logProgress']"
Testability,"NodeSize(TString sizeInPercent); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); voidSetNodePurityLimit(Double_t l); voidSetNTrees(Int_t d); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidSetShrinkage(Double_t s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidSetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); voidSetUseNvars(Int_t n); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); Double_tTestTreeQuality(TMVA::DecisionTree* dt); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::MethodBase::WriteEvaluationHistosToFile(TMVA::Types::ETreeType treetype); virtual voidWriteMonitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& pr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__MethodBDT.html:16276,Test,TestBit,16276,root/html534/TMVA__MethodBDT.html,https://root.cern,https://root.cern/root/html534/TMVA__MethodBDT.html,1,['Test'],['TestBit']
Testability,"NotUse(const char* method) const; virtual Bool_tTObject::Notify(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); UInt_tTRefCnt::References() const; UInt_tTRefCnt::RemoveReference(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetLayoutHints(ULong_t lh); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPadBottom(Int_t v); virtual voidSetPadLeft(Int_t v); virtual voidSetPadRight(Int_t v); virtual voidSetPadTop(Int_t v); voidTRefCnt::SetRefCount(UInt_t r); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLayoutHints.html:5659,Test,TestBit,5659,root/html528/TGLayoutHints.html,https://root.cern,https://root.cern/root/html528/TGLayoutHints.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"NotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TObject&TObject::operator=(const TObject& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidReset(Option_t* = """"); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidSetAsDouble(ULong64_t linidx, Double_t value); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TNDArrayT_char_.html:5512,Test,TestBit,5512,root/html534/TNDArrayT_char_.html,https://root.cern,https://root.cern/root/html534/TNDArrayT_char_.html,18,['Test'],"['TestBit', 'TestBits']"
Testability,"Notify(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooStats::ConfidenceBelt&operator=(const RooStats::ConfidenceBelt&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__ConfidenceBelt.html:5964,Test,TestBit,5964,root/html528/RooStats__ConfidenceBelt.html,https://root.cern,https://root.cern/root/html528/RooStats__ConfidenceBelt.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidPaint(Option_t* option); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidRegisterMatrices(); voidTObject::ResetBit(UInt_t f); virtual Double_tSafety(Double_t* point, Bool_t in = kTRUE) const; virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPoints(Double_t* points) const; virtual voidSetPoints(Float_t* points) const; voidSetSelected(Int_t sel); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidSizeof3D() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGeoBoolNode.html:6193,Test,TestBit,6193,root/html530/TGeoBoolNode.html,https://root.cern,https://root.cern/root/html530/TGeoBoolNode.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TFormulaPrimitive.html:5960,Test,TestBit,5960,root/html530/TFormulaPrimitive.html,https://root.cern,https://root.cern/root/html530/TFormulaPrimitive.html,16,['Test'],"['TestBit', 'TestBits']"
Testability,"Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TProofBenchDataSet&operator=(const TProofBenchDataSet&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); Int_tReleaseCache(const char* dset); Int_tRemoveFiles(const char* dset); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofBenchDataSet(TProof* proof = 0); TProofBenchDataSet(const TProofBenchDataSet&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofBenchDataSet.html:4513,Test,TestBit,4513,root/html602/TProofBenchDataSet.html,https://root.cern,https://root.cern/root/html602/TProofBenchDataSet.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"Notify(TObject* obj); virtual voidTTree::SetObject(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTChain::SetPacketSize(Int_t size = 100); virtual voidTTree::SetParallelUnzip(Bool_t opt = kTRUE, Float_t RelSize = -1); virtual voidTTree::SetPerfStats(TVirtualPerfStats* perf); virtual voidTChain::SetProof(Bool_t on = kTRUE, Bool_t refresh = kFALSE, Bool_t gettreeheader = kFALSE); virtual voidTTree::SetScanField(Int_t n = 50)MENU ; virtual voidTTree::SetTimerInterval(Int_t msec = 333); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTTree::SetTreeIndex(TVirtualIndex* index); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTTree::SetUpdate(Int_t freq = 0); virtual voidTChain::SetWeight(Double_t w = 1, Option_t* option = """"); virtual voidTTree::Show(Long64_t entry = -1, Int_t lenmax = 20); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidTTree::StartViewer()MENU ; virtual Int_tTTree::StopCacheLearningPhase(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofChain(); TProofChain(const TProofChain&); TProofChain(TChain* chain, Bool_t gettreeheader); TProofChain(TDSet* dset, Bool_t gettreeheader); virtual Int_tTTree::UnbinnedFit(const char* funcname, const char* varexp, const char* selection = """", Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); virtual voidTChain::UseCache(Int_t maxCacheSize = 10, Int_t pageSize = 0); virtual voidTTree::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTTree::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTTree::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TProofChain.html:20063,Test,TestBit,20063,root/html604/TProofChain.html,https://root.cern,https://root.cern/root/html604/TProofChain.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"NullBool_t IsNull() constDefinition TString.h:414; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; TString::IsWhitespaceBool_t IsWhitespace() constDefinition TString.h:415; TString::Formvoid Form(const char *fmt,...)Formats a string using a printf style format descriptor.Definition TString.cxx:2356; TString::ContainsBool_t Contains(const char *pat, ECaseCompare cmp=kExact) constDefinition TString.h:632; TString::IndexSsiz_t Index(const char *pat, Ssiz_t i=0, ECaseCompare cmp=kExact) constDefinition TString.h:651; TStyle::GetHistTopMarginDouble_t GetHistTopMargin() constDefinition TStyle.h:238; TVirtualHistPainter::SetStackvirtual void SetStack(TList *stack)=0; TVirtualPadTVirtualPad is an abstract base class for the Pad and Canvas classes.Definition TVirtualPad.h:51; TVirtualPad::GetListOfPrimitivesvirtual TList * GetListOfPrimitives() const =0; TVirtualPad::cdvirtual TVirtualPad * cd(Int_t subpadnumber=0)=0; TVirtualPad::GetPadvirtual TVirtualPad * GetPad(Int_t subpadnumber) const =0; TVirtualPad::Dividevirtual void Divide(Int_t nx=1, Int_t ny=1, Float_t xmargin=0.01, Float_t ymargin=0.01, Int_t color=0)=0; TVirtualPad::Classstatic TClass * Class(); TVirtualPad::Clearvoid Clear(Option_t *option="""") override=0; bool; double; int; c1return c1Definition legend1.C:41; h1TH1F * h1Definition legend1.C:5; TMath::MaxShort_t Max(Short_t a, Short_t b)Returns the largest of a and b.Definition TMathBase.h:250; TMath::SqrtDouble_t Sqrt(Double_t x)Returns the square root of x.Definition TMath.h:662; TMath::MinShort_t Min(Short_t a, Short_t b)Returns the smallest of a and b.Definition TMathBase.h:198; TMath::Log10Double_t Log10(Double_t x)Returns the common (base-10) logarithm of x.Definition TMath.h:762; Drawth1 Draw(). histhistsrcTHStack.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THStack_8cxx_source.html:54047,log,logarithm,54047,doc/master/THStack_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THStack_8cxx_source.html,1,['log'],['logarithm']
Testability,"NumFatalErrors; }; 68 ; 69 /// Increase warning or error count.; 70 void Increment(ELogLevel severity); 71 {; 72 switch (severity) {; 73 case ELogLevel::kFatal: ++fNumFatalErrors; break;; 74 case ELogLevel::kError: ++fNumErrors; break;; 75 case ELogLevel::kWarning: ++fNumWarnings; break;; 76 default:;; 77 }; 78 }; 79};; 80 ; 81/**; 82 Abstract RLogHandler base class. ROOT logs everything from info to error; 83 to entities of this class.; 84 */; 85class RLogHandler {; 86public:; 87 virtual ~RLogHandler();; 88 /// Emit a log entry.; 89 /// \param entry - the RLogEntry to be emitted.; 90 /// \returns false if further emission of this Log should be suppressed.; 91 ///; 92 /// \note This function is called concurrently; log emission must be locked; 93 /// if needed. (The default log handler using ROOT's DefaultErrorHandler is locked.); 94 virtual bool Emit(const RLogEntry &entry) = 0;; 95};; 96 ; 97/**; 98 A log configuration for a channel, e.g. ""RHist"".; 99 Each ROOT module has its own log, with potentially distinct verbosity.; 100 */; 101class RLogChannel : public RLogDiagCount {; 102 /// Name as shown in diagnostics; 103 std::string fName;; 104 ; 105 /// Verbosity of this channel. By default, use the global verbosity.; 106 ELogLevel fVerbosity = ELogLevel::kUnset;; 107 ; 108public:; 109 /// Construct an anonymous channel.; 110 RLogChannel() = default;; 111 ; 112 /// Construct an anonymous channel with a default verbosity.; 113 explicit RLogChannel(ELogLevel verbosity) : fVerbosity(verbosity) {}; 114 ; 115 /// Construct a log channel given its name, which is part of the diagnostics.; 116 RLogChannel(const std::string &name) : fName(name) {}; 117 ; 118 ELogLevel SetVerbosity(ELogLevel verbosity); 119 {; 120 std::swap(fVerbosity, verbosity);; 121 return verbosity;; 122 }; 123 ELogLevel GetVerbosity() const { return fVerbosity; }; 124 ELogLevel GetEffectiveVerbosity(const RLogManager &mgr) const;; 125 ; 126 const std::string &GetName() const { return fName; }; 127};; 128 ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RLogger_8hxx_source.html:3385,log,log,3385,doc/master/RLogger_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RLogger_8hxx_source.html,1,['log'],['log']
Testability,"Number(Int_t number); static voidTObject::SetObjectStat(Bool_t stat); voidTGeoAtt::SetOptimization(Option_t* option); voidTGeoVolume::SetOption(const char* option); voidTGeoVolume::SetOverlappingCandidate(Bool_t flag); voidTGeoVolume::SetReplicated(); voidTGeoVolume::SetShape(const TGeoShape* shape); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidTGeoVolume::SetTransparency(Char_t transparency = 0)MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); voidTGeoVolume::SetUserExtension(TGeoExtension* ext); voidTGeoAtt::SetVisBranch(); virtual voidTGeoVolume::SetVisContainers(Bool_t flag = kTRUE)TOGGLE GETTER ; voidTGeoAtt::SetVisDaughters(Bool_t vis = kTRUE); virtual voidTGeoVolume::SetVisibility(Bool_t vis = kTRUE)TOGGLE GETTER ; virtual voidTGeoVolume::SetVisLeaves(Bool_t flag = kTRUE)TOGGLE GETTER ; virtual voidTGeoVolume::SetVisOnly(Bool_t flag = kTRUE)TOGGLE GETTER ; voidTGeoAtt::SetVisRaytrace(Bool_t flag = kTRUE); voidTGeoAtt::SetVisStreamed(Bool_t vis = kTRUE); voidTGeoAtt::SetVisTouched(Bool_t vis = kTRUE); voidTGeoVolume::SetVoxelFinder(TGeoVoxelFinder* finder); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidTAtt3D::Sizeof3D() const; voidTGeoVolume::SortNodes(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTGeoAtt::TestAttBit(UInt_t f) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGeoVolumeAssembly(); TGeoVolumeAssembly(const char* name); TGeoVolumeAssembly(const TGeoVolumeAssembly&); voidTGeoVolume::UnmarkSaved(); virtual voidTObject::UseCurrentStyle(); Bool_tTGeoVolume::Valid() const; voidTGeoVolume::VisibleDaughters(Bool_t vis = kTRUE)TOGGLE GETTER ; voidTGeoVolume::Voxelize(Option_t* option); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Double_tTGeoVolume::Weight(Double_t precision = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoVolumeAssembly.html:30560,Test,TestAttBit,30560,root/html602/TGeoVolumeAssembly.html,https://root.cern,https://root.cern/root/html602/TGeoVolumeAssembly.html,6,['Test'],"['TestAttBit', 'TestBit', 'TestBits']"
Testability,"O)"", code.Data(), fGlobalNS, fLocalNS);; 140 PyObject *result = PyObject_CallObject(fEval, pycode);; 141 Py_DECREF(pycode);; 142 return result;; 143}; 144 ; 145///////////////////////////////////////////////////////////////////////////////; 146/// Initialize Python interpreter; 147///; 148/// NOTE: We introduce a shared global namespace `fGlobalNS`, but using; 149/// a private local namespace `fLocalNS`. This prohibits the interference; 150/// of instances of the same method with the same factory, e.g., by overriding; 151/// variables in the same local namespace.; 152 ; 153void PyMethodBase::PyInitialize(); 154{; 155 TMVA::MsgLogger Log;; 156 ; 157 bool pyIsInitialized = PyIsInitialized();; 158 if (!pyIsInitialized) {; 159 Py_Initialize();; 160 }; 161 ; 162 TMVA::Internal::PyGILRAII raii;; 163 if (!pyIsInitialized) {; 164 _import_array();; 165 }; 166 ; 167 // note fMain is a borrowed reference; 168 fMain = PyImport_AddModule(""__main__"");; 169 if (!fMain) {; 170 Log << kFATAL << ""Can't import __main__"" << Endl;; 171 Log << Endl;; 172 }; 173 Py_INCREF(fMain);; 174 ; 175 fGlobalNS = PyModule_GetDict(fMain);; 176 if (!fGlobalNS) {; 177 Log << kFATAL << ""Can't init global namespace"" << Endl;; 178 Log << Endl;; 179 }; 180 Py_INCREF(fGlobalNS);; 181 ; 182 #if PY_MAJOR_VERSION < 3; 183 //preparing objects for eval; 184 PyObject *bName = PyUnicode_FromString(""__builtin__"");; 185 // Import the file as a Python module.; 186 // returns a new reference; 187 fModuleBuiltin = PyImport_Import(bName);; 188 if (!fModuleBuiltin) {; 189 Log << kFATAL << ""Can't import __builtin__"" << Endl;; 190 Log << Endl;; 191 }; 192 #else; 193 //preparing objects for eval; 194 PyObject *bName = PyUnicode_FromString(""builtins"");; 195 // Import the file as a Python module.; 196 fModuleBuiltin = PyImport_Import(bName);; 197 if (!fModuleBuiltin) {; 198 Log << kFATAL << ""Can't import builtins"" << Endl;; 199 Log << Endl;; 200 }; 201 #endif; 202 ; 203 // note mDict is a borrowed reference; 204 PyObject *mDi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/PyMethodBase_8cxx_source.html:5391,Log,Log,5391,doc/master/PyMethodBase_8cxx_source.html,https://root.cern,https://root.cern/doc/master/PyMethodBase_8cxx_source.html,5,['Log'],['Log']
Testability,"OINTS]. protected . x-coord for every outlier, .. ; Definition at line 74 of file TCandle.h. ◆ fDrawPointsY. Double_t TCandle::fDrawPointsY[kNMAXPOINTS]. protected . y-coord for every outlier, .. ; Definition at line 75 of file TCandle.h. ◆ fHistoPointsX. Double_t TCandle::fHistoPointsX[kNMAXPOINTS]. protected . x-coord for the polyline of the histo ; Definition at line 78 of file TCandle.h. ◆ fHistoPointsY. Double_t TCandle::fHistoPointsY[kNMAXPOINTS]. protected . y-coord for the polyline of the histo ; Definition at line 79 of file TCandle.h. ◆ fHistoWidth. Double_t TCandle::fHistoWidth. protected . The histo width (the height of the max bin) ; Definition at line 61 of file TCandle.h. ◆ fIsCalculated. bool TCandle::fIsCalculated. protected . Definition at line 55 of file TCandle.h. ◆ fIsRaw. bool TCandle::fIsRaw. protected . 0: for TH1 projection, 1: using raw data ; Definition at line 54 of file TCandle.h. ◆ fLogX. int TCandle::fLogX. protected . make the candle appear logx-like ; Definition at line 84 of file TCandle.h. ◆ fLogY. int TCandle::fLogY. protected . make the candle appear logy-like ; Definition at line 85 of file TCandle.h. ◆ fLogZ. int TCandle::fLogZ. protected . make the candle appear logz-like ; Definition at line 86 of file TCandle.h. ◆ fMean. Double_t TCandle::fMean. protected . Position of the mean. ; Definition at line 63 of file TCandle.h. ◆ fMedian. Double_t TCandle::fMedian. protected . Position of the median. ; Definition at line 64 of file TCandle.h. ◆ fMedianErr. Double_t TCandle::fMedianErr. protected . The size of the notch. ; Definition at line 65 of file TCandle.h. ◆ fNDatapoints. Long64_t TCandle::fNDatapoints. protected . Number of Datapoints within this candle. ; Definition at line 72 of file TCandle.h. ◆ fNDrawPoints. Long64_t TCandle::fNDrawPoints. protected . max number of outliers or other point to be shown ; Definition at line 76 of file TCandle.h. ◆ fNHistoPoints. int TCandle::fNHistoPoints. protected . Definition at line 80 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCandle.html:22188,log,logx-like,22188,doc/master/classTCandle.html,https://root.cern,https://root.cern/doc/master/classTCandle.html,1,['log'],['logx-like']
Testability,"OL Layer: ( W = 15 , H = 15 , D = 10 ) Filter ( W = 2 , H = 2 ) Output = ( 100 , 10 , 10 , 225 ) ; Layer 4 RESHAPE Layer Input = ( 10 , 15 , 15 ) Output = ( 1 , 100 , 2250 ) ; Layer 5 DENSE Layer: ( Input = 2250 , Width = 100 ) Output = ( 1 , 100 , 100 ) Activation Function = Relu; Layer 6 DENSE Layer: ( Input = 100 , Width = 1 ) Output = ( 1 , 100 , 1 ) Activation Function = Identity; : Using 1280 events for training and 320 for testing; : Compute initial loss on the validation data ; : Training phase 1 of 1: Optimizer ADAM (beta1=0.9,beta2=0.999,eps=1e-07) Learning rate = 0.001 regularization 0 minimum error = 13.2274; : --------------------------------------------------------------; : Epoch | Train Err. Val. Err. t(s)/epoch t(s)/Loss nEvents/s Conv. Steps; : --------------------------------------------------------------; : Start epoch iteration ...; : 1 Minimum Test error found - save the configuration ; : 1 | 1.28042 0.721714 1.40039 0.112743 931.931 0; : 2 Minimum Test error found - save the configuration ; : 2 | 0.744775 0.695682 1.39558 0.112793 935.465 0; : 3 Minimum Test error found - save the configuration ; : 3 | 0.694124 0.686492 1.40809 0.112179 925.986 0; : 4 | 0.679848 0.699399 1.40006 0.109116 929.552 1; : 5 Minimum Test error found - save the configuration ; : 5 | 0.670651 0.682024 1.40299 0.112234 929.685 0; : 6 Minimum Test error found - save the configuration ; : 6 | 0.652355 0.665731 1.40537 0.11341 928.823 0; : 7 Minimum Test error found - save the configuration ; : 7 | 0.647198 0.663594 1.40991 0.11661 927.858 0; : 8 | 0.624112 0.674678 1.40336 0.112656 929.728 1; : 9 Minimum Test error found - save the configuration ; : 9 | 0.597489 0.647076 1.41653 0.119736 925.361 0; : 10 Minimum Test error found - save the configuration ; : 10 | 0.561268 0.630455 1.40233 0.116045 932.919 0; : ; : Elapsed time for training with 1600 events: 14.2 sec ; : Evaluate deep neural network on CPU using batches with size = 100; : ; TMVA_CNN_CPU : [dataset] : Evaluati",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__CNN__Classification_8C.html:14503,Test,Test,14503,doc/master/TMVA__CNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__CNN__Classification_8C.html,1,['Test'],['Test']
Testability,"OL; 1404 if (!strstr(option, ""range"")); 1405 ((TAttLine *)vol)->Modify();; 1406 ; 1407 // Do we need to draw a branch ?; 1408 if (top->IsVisBranch()) {; 1409 fGeoManager->PushPath();; 1410 fGeoManager->cd(fVisBranch.Data());; 1411 // while (fGeoManager->GetLevel()) {; 1412 vol = fGeoManager->GetCurrentVolume();; 1413 if (!fVisLock) {; 1414 fVisVolumes->Add(vol);; 1415 vol->SetAttBit(TGeoAtt::kVisOnScreen);; 1416 }; 1417 fGeoManager->SetPaintVolume(vol);; 1418 transparency = vol->GetTransparency();; 1419 vol->SetTransparency(40);; 1420 if (!strstr(option, ""range"")); 1421 ((TAttLine *)vol)->Modify();; 1422 if (global) {; 1423 *fGlobal = *global;; 1424 *fGlobal *= *fGeoManager->GetCurrentMatrix();; 1425 } else {; 1426 *fGlobal = fGeoManager->GetCurrentMatrix();; 1427 }; 1428 fGeoManager->SetMatrixReflection(fGlobal->IsReflection());; 1429 PaintShape(*(vol->GetShape()), option);; 1430 vol->SetTransparency(transparency);; 1431 fGeoManager->CdUp();; 1432 // }; 1433 fVisLock = kTRUE;; 1434 fGeoManager->PopPath();; 1435 fGeoManager->SetMatrixReflection(kFALSE);; 1436 return;; 1437 }; 1438 ; 1439 // Do I need to draw the top volume ?; 1440 if ((fTopVisible && vis) || !top->GetNdaughters() || !top->IsVisDaughters() || top->IsVisOnly()) {; 1441 fGeoManager->SetPaintVolume(vol);; 1442 fGeoManager->SetMatrixReflection(fGlobal->IsReflection());; 1443 PaintShape(*(vol->GetShape()), option);; 1444 if (!fVisLock && !vol->TestAttBit(TGeoAtt::kVisOnScreen)) {; 1445 fVisVolumes->Add(vol);; 1446 vol->SetAttBit(TGeoAtt::kVisOnScreen);; 1447 }; 1448 if (top->IsVisOnly() || !top->GetNdaughters() || !top->IsVisDaughters()) {; 1449 fVisLock = kTRUE;; 1450 return;; 1451 }; 1452 }; 1453 ; 1454 // Iterate the volume content; 1455 TGeoIterator next(vol);; 1456 if (fPlugin); 1457 next.SetUserPlugin(fPlugin);; 1458 TGeoNode *daughter;; 1459 // TGeoMatrix *glmat;; 1460 Int_t level, nd;; 1461 Bool_t last;; 1462 Int_t line_color = 0, line_width = 0, line_style = 0;; 1463 while ((daughter = next())) {;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoPainter_8cxx_source.html:46340,Test,TestAttBit,46340,doc/master/TGeoPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoPainter_8cxx_source.html,1,['Test'],['TestAttBit']
Testability,"OOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::ProfileLikelihoodCalculator. class RooStats::ProfileLikelihoodCalculator: public RooStats::CombinedCalculator, public TNamed. ProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator ; (the interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals). ; The tool uses the profile likelihood ratio as a test statistic, and assumes that Wilks' theorem is valid. ; Wilks' theorem states that -2* log (profile likelihood ratio) is asymptotically distributed as a chi^2 distribution ; with N-dof, where N is the number of degrees of freedom. Thus, p-values can be constructed and the profile likelihood ratio; can be used to construct a LikelihoodInterval.; (In the future, this class could be extended to use toy Monte Carlo to calibrate the distribution of the test statistic). Usage: It uses the interface of the CombinedCalculator, so that it can be configured by specifying:. a model common model (eg. a family of specific models which includes both the null and alternate),; a data set, ; a set of parameters of interest. The nuisance parameters will be all other parameters of the model ; a set of parameters of which specify the null hypothesis (including values and const/non-const status) . The interface allows one to pass the model, data, and parameters either directly or via a ModelConfig class.; The alternate hypothesis leaves the parameter free to take any value other than those specified by the null hypotesis. There is therefore no need to ; specify the alternate parameters. . After configuring the calculator, one only needs to ask GetHypoTest() (which will return a HypoTestResult pointer) or GetInterval() (which will return an ConfInterval pointer). The concrete implementations of this interf",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__ProfileLikelihoodCalculator.html:1102,test,test,1102,root/html526/RooStats__ProfileLikelihoodCalculator.html,https://root.cern,https://root.cern/root/html526/RooStats__ProfileLikelihoodCalculator.html,1,['test'],['test']
Testability,"OOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::QuickMVAProbEstimator. class TMVA::QuickMVAProbEstimator. Function Members (Methods); public:. virtual~QuickMVAProbEstimator(); voidAddEvent(Double_t val, Double_t weight, Int_t type); static TClass*Class(); static boolcompare(TMVA::QuickMVAProbEstimator::EventInfo e1, TMVA::QuickMVAProbEstimator::EventInfo e2); Double_tGetMVAProbAt(Double_t value); virtual TClass*IsA() const; TMVA::QuickMVAProbEstimator&operator=(const TMVA::QuickMVAProbEstimator&); TMVA::QuickMVAProbEstimatorQuickMVAProbEstimator(const TMVA::QuickMVAProbEstimator&); TMVA::QuickMVAProbEstimatorQuickMVAProbEstimator(Int_t nMin = 40, Int_t nMax = 5000); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). private:. TMVA::MsgLogger&Log() const. Data Members; private:. vector<EventInfo>fEvtVector; Bool_tfIsSorted; TMVA::MsgLogger*fLogger; UInt_tfNMax; UInt_tfNMin. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void AddEvent(Double_t val, Double_t weight, Int_t type). Double_t GetMVAProbAt(Double_t value); Well.. if it's fast is actually another question all together, merely; it's a quick and dirty simple kNN approach to the 1-Dim signal/backgr. MVA; distributions. bool compare(TMVA::QuickMVAProbEstimator::EventInfo e1, TMVA::QuickMVAProbEstimator::EventInfo e2); {return e1.eventValue < e2.eventValue;}. QuickMVAProbEstimator(Int_t nMin = 40, Int_t nMax = 5000); { fLogger = new MsgLogger(""QuickMVAProbEstimator"");}. virtual ~QuickMVAProbEstimator(); {delete fLogger;}. » Last changed: Tue Sep 8 17:04:43 2015 » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__QuickMVAProbEstimator.html:1049,Log,Log,1049,root/html534/TMVA__QuickMVAProbEstimator.html,https://root.cern,https://root.cern/root/html534/TMVA__QuickMVAProbEstimator.html,1,['Log'],['Log']
Testability,"OOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TMVA::PDEFoamKernelGauss Class ReferenceTMVA. ; This PDEFoam kernel estimates a cell value for a given event by weighting all cell values with a gauss function. ; Definition at line 38 of file PDEFoamKernelGauss.h. Public Member Functions;  PDEFoamKernelGauss (const PDEFoamKernelGauss &);  Copy constructor. ;  ;  PDEFoamKernelGauss (Float_t sigma);  Default constructor for streamer. ;  ; virtual ~PDEFoamKernelGauss ();  ; virtual Float_t Estimate (PDEFoam *, std::vector< Float_t > &, ECellValue);  Gaussian kernel estimator. ;  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::PDEFoamKernelBase;  PDEFoamKernelBase ();  message logger ;  ;  PDEFoamKernelBase (const PDEFoamKernelBase &);  Copy constructor. ;  ; virtual ~PDEFoamKernelBase ();  Destructor. ;  ; MsgLogger & Log () const;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char *",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PDEFoamKernelGauss.html:1098,log,logger,1098,doc/master/classTMVA_1_1PDEFoamKernelGauss.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PDEFoamKernelGauss.html,1,['log'],['logger']
Testability,"OOT. Class Hierarchy. Memstat::TMemStatMng. ParamHistFunc. PiecewiseInterpolation. PyROOT::TPyException. PyROOT::TPyROOTApplication. ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::BinData>←. ROOT::Fit::Chi2FCN<ROOT::Math::IBaseFunctionMultiDim>. ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>←. ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::BinData>←. ROOT::Fit::Chi2FCN<ROOT::Math::IGradientFunctionMultiDim>. ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>←. ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. ROOT::Fit::BinData. ROOT::Fit::Chi2FCN<ROOT::Math::IBaseFunctionMultiDim>. ROOT::Fit::Chi2FCN<ROOT::Math::IGradientFunctionMultiDim>. ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. ROOT::Fit::SparseData. ROOT::Fit::UnBinData. ROOT::Math::AdaptiveIntegratorMultiDim. ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>←. ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::BinData>; ←. ROOT::Fit::Chi2FCN<ROOT::Math::IBaseFunctionMultiDim>. ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>; ←. ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>←. ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::BinData>; ←. ROOT::Fit::Chi2FCN<ROOT::Math::IGradientFunctionMultiDim>. ROOT::Fit::PoissonLikelihoodFCN<ROOT::Ma",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ClassHierarchy.html:1067,Log,LogLikelihoodFCN,1067,root/html604/ClassHierarchy.html,https://root.cern,https://root.cern/root/html604/ClassHierarchy.html,1,['Log'],['LogLikelihoodFCN']
Testability,"OOT::EExecutionPolicy::kSequential);  Fit a binned data set using a least square fit. ;  ; template<class Data , class Function , class cond = typename std::enable_if<!(std::is_same<Function, ROOT::EExecutionPolicy>::value || std::is_same<Function, int>::value), Function>::type> ; bool Fit (const Data &data, const Function &func, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  fit a data set using any generic model function If data set is binned a least square fit is performed If data set is unbinned a maximum likelihood fit (not extended) is done Pre-requisite on the function: it must implement the 1D or multidimensional parametric function interface. ;  ; bool Fit (const std::shared_ptr< BinData > &data, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Fit a binned data set using a least square fit. ;  ; bool Fit (const std::shared_ptr< UnBinData > &data, bool extended=false, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Fit an un-binned data set using the negative log-likelihood method. ;  ; bool Fit (const UnBinData &data, bool extended=false, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Fit an un-binned data set using the negative log-likelihood method. ;  ; bool FitFCN ();  Perform a fit with the previously set FCN function. ;  ; bool FitFCN (const ROOT::Math::FitMethodFunction &fcn, const double *params=nullptr);  Fit using a FitMethodFunction interface. ;  ; bool FitFCN (const ROOT::Math::FitMethodGradFunction &fcn, const double *params=nullptr);  Fit using a FitMethodGradFunction interface. ;  ; bool FitFCN (const ROOT::Math::IMultiGenFunction &fcn, const double *params=nullptr, unsigned int dataSize=0, int fitType=0);  Fit using the given FCN function represented by a multi-dimensional function interface (ROOT::Math::IMultiGenFunction). ;  ; bool FitFCN (MinuitFCN_t fcn, int npar=0, const double *params=null",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:4366,log,log-likelihood,4366,doc/master/classROOT_1_1Fit_1_1Fitter.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html,1,['log'],['log-likelihood']
Testability,"OOT::EExecutionPolicy::kSequential)ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >inline; LogLikelihoodFCN(const UnBinData &data, const IModelFunction &func, int weight=0, bool extended=false, const ::ROOT::EExecutionPolicy &executionPolicy=::ROOT::EExecutionPolicy::kSequential)ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >inline; LogLikelihoodFCN(const LogLikelihoodFCN &f)ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >inline; ModelFunction() constROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >inlinevirtual; ModelFunctionPtr() constROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >inline; NCalls() constROOT::Math::BasicFitMethodFunction< DerivFunType >inlinevirtual; NDim() const overrideROOT::Math::BasicFitMethodFunction< DerivFunType >inline; NFitPoints() constROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >inlinevirtual; NPoints() constROOT::Math::BasicFitMethodFunction< DerivFunType >inlinevirtual; operator=(const LogLikelihoodFCN &rhs)ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >inline; ResetNCalls()ROOT::Math::BasicFitMethodFunction< DerivFunType >inlinevirtual; SetData(const std::shared_ptr< DataType > &data)ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >inlineprotected; SetModelFunction(const std::shared_ptr< IModelFunction > &func)ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >inlineprotected; T typedefROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >; Type() constROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >inlinevirtual; Type_t typedefROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >; UpdateNCalls() constROOT::Math::BasicFitMethodFunction< DerivFunType >inlinevirtual; UseSumOfWeightSquare(bool on=true)ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >inline; ~BasicFCN()ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >inlineprotectedvirtual; ~BasicFitMethodFunction() overrideROOT::Math::BasicFitMethodFunction< DerivFun",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN-members.html:4461,Log,LogLikelihoodFCN,4461,doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN-members.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN-members.html,1,['Log'],['LogLikelihoodFCN']
Testability,"OOT::Fit::BinData & ; data2, . Double_t & ; pvalue, . Double_t & ; testStat . ). static . Compute the 2-Sample Anderson Darling test for binned data assuming equal data are present at the bin center values. ; Used by TH1::AndersonDarling ; Definition at line 750 of file GoFTest.cxx. ◆ AndersonDarling2SamplesTest() [3/3]. void ROOT::Math::GoFTest::AndersonDarling2SamplesTest ; (; Double_t & ; pvalue, . Double_t & ; testStat . ); const. Performs the Anderson-Darling 2-Sample Test. ; The Anderson-Darling K-Sample Test algorithm is described and taken from http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/andeksam.htm and from (1) Scholz F.W., Stephens M.A. (1987), K-sample Anderson-Darling Tests, Journal of the American Statistical Association, 82, 918–924. (2-samples variant implemented). ; Definition at line 646 of file GoFTest.cxx. ◆ AndersonDarlingTest() [1/2]. Double_t ROOT::Math::GoFTest::AndersonDarlingTest ; (; const Char_t * ; option = ""p""); const. Anderson-Darling 2-Sample Test. ; Returns default p-value; option ""t"" returns the test statistic value ""A2"" ; Definition at line 890 of file GoFTest.cxx. ◆ AndersonDarlingTest() [2/2]. void ROOT::Math::GoFTest::AndersonDarlingTest ; (; Double_t & ; pvalue, . Double_t & ; testStat . ); const. Performs the Anderson-Darling 1-Sample Test. ; The Anderson-Darling 1-Sample Test algorithm for a specific distribution is described at http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/andedarl.htm and described and taken from (2) Marsaglia J.C.W., Marsaglia G. (2004), Evaluating the Anderson-Darling Distribution, Journal of Statistical Software, Volume 09, Issue i02. and described and taken from (3) Lewis P.A.W. (1961), The Annals of Mathematical Statistics, Distribution of the Anderson-Darling Statistic, Volume 32, Number 4, 1118-1124. ; Definition at line 862 of file GoFTest.cxx. ◆ ExponentialCDF(). Double_t ROOT::Math::GoFTest::ExponentialCDF ; (; Double_t ; x); const. private . Definition at",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:12492,Test,Test,12492,doc/master/classROOT_1_1Math_1_1GoFTest.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html,1,['Test'],['Test']
Testability,OOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. ROOT::Math::BrentMinimizer1D. ROOT::Math::BrentRootFinder. ROOT::Math::Functor. ROOT::Math::Functor1D. ROOT::Math::GSLIntegrator. ROOT::Math::GSLMCIntegrator. ROOT::Math::GSLMinimizer. ROOT::Math::GSLMinimizer1D. ROOT::Math::GSLNLSMinimizer. ROOT::Math::GSLRngGFSR4. ROOT::Math::GSLRngMT. ROOT::Math::GSLRngRanLux. ROOT::Math::GSLRngTaus. ROOT::Math::GSLRootFinder←. ROOT::Math::Roots::Bisection. ROOT::Math::Roots::Brent. ROOT::Math::Roots::FalsePos. ROOT::Math::GSLRootFinderDeriv←. ROOT::Math::Roots::Newton. ROOT::Math::Roots::Secant. ROOT::Math::Roots::Steffenson. ROOT::Math::GSLSimAnMinimizer. ROOT::Math::GaussIntegrator. ROOT::Math::GaussLegendreIntegrator. ROOT::Math::GradFunctor. ROOT::Math::GradFunctor1D. ROOT::Math::IGradientFunctionMultiDim←. ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>; ←. ROOT::Fit::Chi2FCN<ROOT::Math::IGradientFunctionMultiDim>. ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. ROOT::Math::GradFunctor. ROOT::Math::LSResidualFunc. ROOT::Math::IGradientFunctionOneDim←. ROOT::Math::GradFunctor1D. ROOT::Math::Polynomial. ROOT::Math::IParametricFunctionMultiDim←. ROOT::Math::IParametricGradFunctionMultiDim; ←. ROOT::Math::WrappedMultiTF1. ROOT::Math::IParametricFunctionOneDim←. ROOT::Math::IParametricGradFunctionOneDim; ←. ROOT::Math::ParamFunction<ROOT::Math::IParametricGradFunctionOneDim>; ←. ROOT::Math::Polynomial. ROOT::Math::WrappedTF1. ROOT::Math::IParametricGradFunctionMultiDim←. ROOT::Math::WrappedMultiTF1. ROOT::Math::IParametricGradFunctionOneDim←. ROOT::Math::ParamFunction<ROOT::Math::IParametricGradFunctionOneDim>; ←. ROOT::Math::Polynomial. ROOT::Math::WrappedTF1. ROOT::Math::LSResidualFunc. ROOT::Math::ParamFunction<ROOT::Math::IParametricGradFunctionOneDim>←. ROOT::Math::Polynomial. ROOT::Math::Polynomial. ROOT::Math::Roots::Bisection. ROOT::Ma,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ClassHierarchy.html:2091,Log,LogLikelihoodFCN,2091,root/html526/ClassHierarchy.html,https://root.cern,https://root.cern/root/html526/ClassHierarchy.html,1,['Log'],['LogLikelihoodFCN']
Testability,"OOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>(int dim, int npoint); virtual ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>::BaseFunction*Clone() const; virtual const ROOT::Fit::UnBinData&ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::Data() const; virtual doubleDataElement(const double* x, unsigned int i, double* g) const; shared_ptr<ROOT::Fit::UnBinData>ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::DataPtr() const; virtual voidGradient(const double* x, double* g) const; ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(const ROOT::Math::IBaseFunctionMultiDim&); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>& f); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const shared_ptr<ROOT::Fit::UnBinData>& data, const shared_ptr<ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction>& func, int weight = 0, bool extended = false); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const ROOT::Fit::UnBinData& data, const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction& func, int weight = 0, bool extended = false); virtual const ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction&ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::ModelFunction() const; shared_ptr<ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction>ROOT::Fit::BasicFCN<ROOT::Math::IBaseFuncti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html:2367,Log,LogLikelihoodFCN,2367,root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,1,['Log'],['LogLikelihoodFCN']
Testability,"OOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>(int dim, int npoint); virtual ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>::BaseFunction*Clone() const; virtual const ROOT::Fit::UnBinData&ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::Data() const; virtual doubleDataElement(const double* x, unsigned int i, double* g) const; shared_ptr<ROOT::Fit::UnBinData>ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::DataPtr() const; virtual voidGradient(const double* x, double* g) const; ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(const ROOT::Math::IBaseFunctionMultiDim&); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>& f); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const shared_ptr<ROOT::Fit::UnBinData>& data, const shared_ptr<ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction>& func, int weight = 0, bool extended = false); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const ROOT::Fit::UnBinData& data, const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction& func, int weight = 0, bool extended = false); virtual const ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction&ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::ModelFunction() const; shared_ptr<ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::U",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html:2298,Log,LogLikelihoodFCN,2298,root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,1,['Log'],['LogLikelihoodFCN']
Testability,"OOT::Math::GoFTest. class ROOT::Math::GoFTest. Function Members (Methods); public:. virtual~GoFTest(); Double_tAndersonDarling2SamplesTest(const Char_t* option = ""p"") const; voidAndersonDarling2SamplesTest(Double_t& pvalue, Double_t& testStat) const; static voidAndersonDarling2SamplesTest(const ROOT::Fit::BinData& data1, const ROOT::Fit::BinData& data2, Double_t& pvalue, Double_t& testStat); Double_tAndersonDarlingTest(const Char_t* option = ""p"") const; voidAndersonDarlingTest(Double_t& pvalue, Double_t& testStat) const; ROOT::Math::GoFTestGoFTest(UInt_t sampleSize, const Double_t* sample, ROOT::Math::GoFTest::EDistribution dist = kUndefined); ROOT::Math::GoFTestGoFTest(UInt_t sample1Size, const Double_t* sample1, UInt_t sample2Size, const Double_t* sample2); ROOT::Math::GoFTestGoFTest(UInt_t sampleSize, const Double_t* sample, const ROOT::Math::IGenFunction& dist, ROOT::Math::GoFTest::EUserDistribution userDist = kPDF, Double_t xmin = 1, Double_t xmax = 0); Double_tKolmogorovSmirnov2SamplesTest(const Char_t* option = ""p"") const; voidKolmogorovSmirnov2SamplesTest(Double_t& pvalue, Double_t& testStat) const; Double_tKolmogorovSmirnovTest(const Char_t* option = ""p"") const; voidKolmogorovSmirnovTest(Double_t& pvalue, Double_t& testStat) const; Double_toperator()(ROOT::Math::GoFTest::ETestType test = kAD, const Char_t* option = ""p"") const; voidoperator()(ROOT::Math::GoFTest::ETestType test, Double_t& pvalue, Double_t& testStat) const; static Double_tPValueADKSamples(UInt_t nsamples, Double_t A2); voidSetDistribution(ROOT::Math::GoFTest::EDistribution dist); voidSetUserCDF(const ROOT::Math::IGenFunction& cdf, Double_t xmin = 1, Double_t xmax = 0); voidSetUserDistribution(const ROOT::Math::IGenFunction& dist, ROOT::Math::GoFTest::EUserDistribution userDist = kPDF, Double_t xmin = 1, Double_t xmax = 0); voidSetUserPDF(const ROOT::Math::IGenFunction& pdf, Double_t xmin = 1, Double_t xmax = 0). private:. Double_tExponentialCDF(Double_t x) const; Double_tGaussianCDF(Double_t x",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__GoFTest.html:469,test,testStat,469,root/html534/ROOT__Math__GoFTest.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__GoFTest.html,8,['test'],"['test', 'testStat']"
Testability,"OOT::Math::GoFTest::ExponentialCDF ; (; Double_t ; x); const. private . Definition at line 299 of file GoFTest.cxx. ◆ GaussianCDF(). Double_t ROOT::Math::GoFTest::GaussianCDF ; (; Double_t ; x); const. private . Definition at line 295 of file GoFTest.cxx. ◆ GetSigmaN(). Double_t ROOT::Math::GoFTest::GetSigmaN ; (; const std::vector< size_t > & ; ns, . size_t ; N . ). staticprivate . Computation of sigma_N as described in (1) ; Definition at line 311 of file GoFTest.cxx. ◆ Instantiate(). void ROOT::Math::GoFTest::Instantiate ; (; const Double_t * ; sample, . size_t ; sampleSize . ). private . Definition at line 279 of file GoFTest.cxx. ◆ InterpolatePValues(). static Double_t ROOT::Math::GoFTest::InterpolatePValues ; (; int ; nsamples, . Double_t ; A2 . ). staticprivate . Linear interpolation used in GoFTest::PValueAD2Samples. . ◆ KolmogorovSmirnov2SamplesTest() [1/2]. Double_t ROOT::Math::GoFTest::KolmogorovSmirnov2SamplesTest ; (; const Char_t * ; option = ""p""); const. Kolmogorov-Smirnov 2-Samples Test. ; Returns by default the p-value; option ""t"" returns the test statistic value ""Dn"". ; Definition at line 913 of file GoFTest.cxx. ◆ KolmogorovSmirnov2SamplesTest() [2/2]. void ROOT::Math::GoFTest::KolmogorovSmirnov2SamplesTest ; (; Double_t & ; pvalue, . Double_t & ; testStat . ); const. Kolmogorov-Smirnov 2-Samples Test. ; The Kolmogorov-Smirnov 2-Samples Test algorithm is described at http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/ks2samp.htm and described and taken from https://root.cern/doc/master/namespaceTMath.html ; Definition at line 896 of file GoFTest.cxx. ◆ KolmogorovSmirnovTest() [1/2]. Double_t ROOT::Math::GoFTest::KolmogorovSmirnovTest ; (; const Char_t * ; option = ""p""); const. Kolmogorov-Smirnov 1-Sample Test. ; Returns default p-value; option ""t"" returns the test statistic value ""Dn"". ; Definition at line 945 of file GoFTest.cxx. ◆ KolmogorovSmirnovTest() [2/2]. void ROOT::Math::GoFTest::KolmogorovSmirnovTest ; (; Double_t & ; pvalu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:14409,Test,Test,14409,doc/master/classROOT_1_1Math_1_1GoFTest.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html,1,['Test'],['Test']
Testability,"OOT::Math::IBaseFunctionMultiDim>::kLeastSquare; static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::Type_tROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::kLogLikelihood; static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::Type_tROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::kUndefined. private:. const ROOT::Fit::UnBinData&fData; const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction&fFunc; vector<double>fGradfor derivatives; boolfIsExtendedflag for indicating if likelihood is extended; unsigned intfNEffPointsnumber of effective points used in the fit; intfWeightflag to indicate if needs to evaluate using weight or weight squared (default weight = 0). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseFunction * Clone() const; clone the function (need to return Base for Windows). { return new LogLikelihoodFCN(fData,fFunc,fWeight,fIsExtended); }. unsigned int NFitPoints() const; using BaseObjFunction::operator();; effective points used in the fit. { return fNEffPoints; }. double DataElement(const double* x, unsigned int i, double* g) const; i-th likelihood contribution and its gradient. void Gradient(const double* x, double* g) const; need to be virtual to be instantited. void UseSumOfWeightSquare(bool on = true); Use sum of the weight squared in evaluating the likelihood; (this is needed for calculating the errors). double DoEval(const double* x) const. Evaluation of the function (required by interface). double DoDerivative(const double* x, unsigned int icoord) const; for derivatives. » Author: L. Moneta Fri Aug 17 14:29:24 2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html:4491,Log,LogLikelihoodFCN,4491,root/html602/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html602/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,1,['Log'],['LogLikelihoodFCN']
Testability,"OOT::Math::IGradientFunctionMultiDim>(const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>&); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>&operator=(const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>&). Data Members; public:. enum ROOT::Math::BasicFitMethodFunction::Type_t { kUndefined; kLeastSquare; kLogLikelihood; };. private:. const ROOT::Fit::UnBinData&fData; const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction&fFunc; vector<double>fGradfor derivatives; boolfIsExtendedflag for indicating if likelihood is extended; unsigned intfNEffPointsnumber of effective points used in the fit ; intfWeightflag to indicate if needs to evaluate using weight or weight squared (default weight = 0). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseFunction * Clone() const; clone the function (need to return Base for Windows). { return new LogLikelihoodFCN(fData,fFunc,fWeight,fIsExtended); }. unsigned int NFitPoints() const; using BaseObjFunction::operator();; effective points used in the fit. { return fNEffPoints; }. double DataElement(const double* x, unsigned int i, double* g) const; i-th likelihood contribution and its gradient. void Gradient(const double* x, double* g) const; need to be virtual to be instantited. void UseSumOfWeightSquare(); Use sum of the weight squared in evaluating the likelihood; (this is needed for calculating the errors). double DoEval(const double* x) const. Evaluation of the function (required by interface). double DoDerivative(const double* x, unsigned int icoord) const; for derivatives. » Author: L. Moneta Fri Aug 17 14:29:24 2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id: LogLikelihoodFCN.h 42007 2011-11-15 13:23:17Z moneta $ » Last generated: 2011-12-02 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html:3770,Log,LogLikelihoodFCN,3770,root/html532/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html532/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,1,['Log'],['LogLikelihoodFCN']
Testability,"OOT::Math::IGradientFunctionMultiDim>(const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>&); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>&operator=(const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>&). Data Members; public:. enum ROOT::Math::BasicFitMethodFunction::Type_t { kUndefined; kLeastSquare; kLogLikelihood; };. private:. const ROOT::Fit::UnBinData&fData; const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction&fFunc; vector<double>fGradfor derivatives; boolfIsExtendedflag for indicating if likelihood is extended; unsigned intfNEffPointsnumber of effective points used in the fit ; intfWeightflag to indicate if needs to evaluate using weight or weight squared (default weight = 0). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseFunction * Clone() const; clone the function (need to return Base for Windows). { return new LogLikelihoodFCN(fData,fFunc,fWeight,fIsExtended); }. unsigned int NFitPoints() const; using BaseObjFunction::operator();; effective points used in the fit. { return fNEffPoints; }. double DataElement(const double* x, unsigned int i, double* g) const; i-th likelihood contribution and its gradient. void Gradient(const double* x, double* g) const; need to be virtual to be instantited. void UseSumOfWeightSquare(bool on = true); Use sum of the weight squared in evaluating the likelihood; (this is needed for calculating the errors). double DoEval(const double* x) const. Evaluation of the function (required by interface). double DoDerivative(const double* x, unsigned int icoord) const; for derivatives. » Author: L. Moneta Fri Aug 17 14:29:24 2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 16:58; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html:3784,Log,LogLikelihoodFCN,3784,root/html534/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html534/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,1,['Log'],['LogLikelihoodFCN']
Testability,"OOT::Math::IGradientFunctionMultiDim>::Type_tType() const; virtual voidROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::UpdateNCalls() const; voidUseSumOfWeightSquare(). private:. virtual doubleDoDerivative(const double* x, unsigned int icoord) const; virtual doubleDoEval(const double* x) const; ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>&); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>&operator=(const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>&). Data Members; public:. enum ROOT::Math::BasicFitMethodFunction::Type_t { kUndefined; kLeastSquare; kLogLikelihood; };. private:. const ROOT::Fit::UnBinData&fData; const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction&fFunc; vector<double>fGradfor derivatives; boolfIsExtendedflag for indicating if likelihood is extended; unsigned intfNEffPointsnumber of effective points used in the fit ; intfWeightflag to indicate if needs to evaluate using weight or weight squared (default weight = 0). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseFunction * Clone() const; clone the function (need to return Base for Windows). { return new LogLikelihoodFCN(fData,fFunc,fWeight,fIsExtended); }. unsigned int NFitPoints() const; using BaseObjFunction::operator();; effective points used in the fit. { return fNEffPoints; }. double DataElement(const double* x, unsigned int i, double* g) const; i-th likelihood contribution and its gradient. void Gradient(const double* x, double* g) const; need to be virtual to be instantited. void UseSumOfWeightSquare(); Use sum of the weight squared in evaluating the likelihood; (this is needed for calculating the errors). double DoEval(const double* x) const. Evaluation of the function (required by interface). dou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html:3236,Log,LogLikelihoodFCN,3236,root/html532/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html532/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,1,['Log'],['LogLikelihoodFCN']
Testability,"OOT::Math::IGradientMultiDim::Derivative(const double* x, unsigned int icoord = 0) const; virtual voidROOT::Math::IGradientFunctionMultiDim::FdF(const double* x, double& f, double* df) const; virtual voidGradient(const double* x, double* g) const; ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(const ROOT::Math::IBaseFunctionMultiDim&); ROOT::Math::IGradientFunctionMultiDimROOT::Math::IGradientFunctionMultiDim::IGradientFunctionMultiDim(); ROOT::Math::IGradientFunctionMultiDimROOT::Math::IGradientFunctionMultiDim::IGradientFunctionMultiDim(const ROOT::Math::IGradientFunctionMultiDim&); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::IGradientMultiDim(); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::IGradientMultiDim(const ROOT::Math::IGradientMultiDim&); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>& f); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(const shared_ptr<ROOT::Fit::UnBinData>& data, const shared_ptr<ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction>& func, int weight = 0, bool extended = false); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(const ROOT::Fit::UnBinData& data, const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction& func, int weight = 0, bool extended = false); virtual const ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction&ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::ModelFunction() const; shared_ptr<ROOT::Fit::BasicFCN<ROOT::Math::IGradientF",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html:3029,Log,LogLikelihoodFCN,3029,root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,1,['Log'],['LogLikelihoodFCN']
Testability,"OOT::Math::IGradientMultiDim::Derivative(const double* x, unsigned int icoord = 0) const; virtual voidROOT::Math::IGradientFunctionMultiDim::FdF(const double* x, double& f, double* df) const; virtual voidGradient(const double* x, double* g) const; ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(const ROOT::Math::IBaseFunctionMultiDim&); ROOT::Math::IGradientFunctionMultiDimROOT::Math::IGradientFunctionMultiDim::IGradientFunctionMultiDim(); ROOT::Math::IGradientFunctionMultiDimROOT::Math::IGradientFunctionMultiDim::IGradientFunctionMultiDim(const ROOT::Math::IGradientFunctionMultiDim&); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::IGradientMultiDim(); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::IGradientMultiDim(const ROOT::Math::IGradientMultiDim&); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(const ROOT::Fit::UnBinData& data, const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction& func, int weight = 0, bool extended = false); virtual const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction&ModelFunction() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::NCalls() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::NDim() const; virtual unsigned intNFitPoints() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::NPoints() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; virtual voidROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::ResetNCalls(); virtual ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::Type_tType() const; virtual vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html:2494,Log,LogLikelihoodFCN,2494,root/html602/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html602/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,1,['Log'],['LogLikelihoodFCN']
Testability,"OOT::TBranchProxyDescriptor&operator=(const ROOT::TBranchProxyDescriptor&); voidOutputDecl(FILE* hf, int offset, UInt_t maxVarname); voidOutputInit(FILE* hf, int offset, UInt_t maxVarname, const char* prefix); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; ROOT::TBranchProxyDescriptorTBranchProxyDescriptor(const ROOT::TBranchProxyDescriptor&); ROOT::TBranchProxyDescriptorTBranchProxyDescriptor(const char* dataname, const char* type, const char* branchname, Bool_t split = true, Bool_t skipped = false, Bool_t isleaflist = false); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__TBranchProxyDescriptor.html:5449,Test,TestBit,5449,root/html534/ROOT__TBranchProxyDescriptor.html,https://root.cern,https://root.cern/root/html534/ROOT__TBranchProxyDescriptor.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"OOTMARKS means better performance. The reference machine has 200 ROOTMARKS, so the sample run below with 53.7 ROOTMARKS is about four times slower than the reference machine.; Here is a sample run:; % root -b; root[] .x stress.cxx(30). Test 1 : Functions, Random Numbers, Histogram Fits............. OK; Test 2 : Check size & compression factor of a Root file........ OK; Test 3 : Purge, Reuse of gaps in TFile......................... OK; Test 4 : Test of 2-d histograms, functions, 2-d fits........... OK; Test 5 : Test graphics & PostScript ............................OK; Test 6 : Test subdirectories in a Root file.................... OK; Test 7 : TNtuple, selections, TCutG, TEventList.......... OK; Test 8 : Trees split and compression modes..................... OK; Test 9 : Analyze Event.root file of stress 8................... OK; Test 10 : Create 10 files starting from Event.root.............. OK; Test 11 : Test chains of Trees using the 10 files............... OK; Test 12 : Compare histograms of test 9 and 11................... OK; Test 13 : Test merging files of a chain......................... OK; Test 14 : Check correct rebuilt of Event.root in test 13........ OK; Test 15 : Divert Tree branches to separate files................ OK; Test 16 : Cling test (3 nested loops) with LHCb trigger.......... OK; ******************************************************************; * IRIX64 fnpat1 6.5 01221553 IP27; ******************************************************************; stress : Total I/O = 75.3 Mbytes, I = 59.2, O = 16.1; stress : Compr I/O = 75.7 Mbytes, I = 60.0, O = 15.7; stress : Real Time = 307.61 seconds Cpu Time = 292.82 seconds; ******************************************************************; * ROOTMARKS = 53.7 * Root2.25/00 20000710/1022; 20.2.3 guitest - A Graphical User Interface. The guitest example, created by compiling guitest.cxx, tests and illustrates the use of the native GUI widgets such as cascading menus, dialog boxes, sliders and tab panels",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1085260,Test,Test,1085260,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,"['Test', 'test']","['Test', 'test']"
Testability,"OOTMARKS, so the sample run below with 53.7 ROOTMARKS is about four times slower than the reference machine.; Here is a sample run:; % root -b; root[] .x stress.cxx(30). Test 1 : Functions, Random Numbers, Histogram Fits............. OK; Test 2 : Check size & compression factor of a Root file........ OK; Test 3 : Purge, Reuse of gaps in TFile......................... OK; Test 4 : Test of 2-d histograms, functions, 2-d fits........... OK; Test 5 : Test graphics & PostScript ............................OK; Test 6 : Test subdirectories in a Root file.................... OK; Test 7 : TNtuple, selections, TCutG, TEventList.......... OK; Test 8 : Trees split and compression modes..................... OK; Test 9 : Analyze Event.root file of stress 8................... OK; Test 10 : Create 10 files starting from Event.root.............. OK; Test 11 : Test chains of Trees using the 10 files............... OK; Test 12 : Compare histograms of test 9 and 11................... OK; Test 13 : Test merging files of a chain......................... OK; Test 14 : Check correct rebuilt of Event.root in test 13........ OK; Test 15 : Divert Tree branches to separate files................ OK; Test 16 : Cling test (3 nested loops) with LHCb trigger.......... OK; ******************************************************************; * IRIX64 fnpat1 6.5 01221553 IP27; ******************************************************************; stress : Total I/O = 75.3 Mbytes, I = 59.2, O = 16.1; stress : Compr I/O = 75.7 Mbytes, I = 60.0, O = 15.7; stress : Real Time = 307.61 seconds Cpu Time = 292.82 seconds; ******************************************************************; * ROOTMARKS = 53.7 * Root2.25/00 20000710/1022; 20.2.3 guitest - A Graphical User Interface. The guitest example, created by compiling guitest.cxx, tests and illustrates the use of the native GUI widgets such as cascading menus, dialog boxes, sliders and tab panels. It is a very useful example to study when designing a GUI. Some ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1085329,Test,Test,1085329,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['Test'],['Test']
Testability,"OOTSYS/test/eventb. This script loops on all events. For each event, the branch containing the number of tracks is read. In case the number of tracks is less than 585, the full event is read in memory. This test is obviously not possible in non-split mode. In non-split mode, the full event must be read in memory. The times reported in the table correspond to complete I/O operations necessary to deal with machine independent binary files. On Linux, this also includes byte-swapping operations. The ROOT file allows for direct access to any event in the file and direct access to any part of an event when split=1.; Note also that the uncompressed file generated with split=0 is 48.7 Mbytes and only 47.17 Mbytes for the option split=1. The difference in size is due to the object identification mechanism overhead when the event is written to a single buffer. This overhead does not exist in split mode because the branch buffers are optimized for homogeneous data types. You can run the test programs on your architecture. The program Event will report the write performance. You can measure the read performance by executing the scripts eventa and eventb. The performance depends not only of the processor type, but also of the disk devices (local, NFS, AFS, etc.).; 12.24 Chains. A TChain object is a list of ROOT files containing the same tree. As an example, assume we have three files called file1.root, file2.root, file3.root. Each file contains one tree called “T”. We can create a chain with the following statements:; TChain chain(""T""); // name of the tree is the argument; chain.Add(""file1.root"");; chain.Add(""file2.root"");; chain.Add(""file3.root"");; The name of the TChain will be the same as the name of the tree; in this case it will be ""T"". Note that twoobjects can have the same name as long as they are not histograms in the same directory, because there, the histogram names are used to build a hash table. The class TChain is derived from the class TTree. For example, to genera",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:650984,test,test,650984,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['test'],['test']
Testability,"OOTSYS/test; The test directory contains a set of examples that represent all areas of the framework. When a new release is cut, the examples in this directory are compiled and run to test the new release’s backward compatibility.; We see these source files:. Makefile; Makefile to build all test programs. hsimple.cxx; Simple test program that creates and saves some histograms. MainEvent.cxx; Simple test program that creates a ROOT Tree object and fills it with some simple structures but also with complete histograms. This program uses the files Event.cxx, EventCint.cxx and Event.h. An example of a procedure to link this program is in bind_Event. Note that the Makefile invokes the rootcling utility to generate the Cling interface EventCint.cxx. Event.cxx; Implementation for classes Event and Track. minexam.cxx; Simple test program for data fitting. tcollex.cxx; Example usage of the ROOT collection classes. tcollbm.cxx; Benchmarks of ROOT collection classes. ctorture.cxx; Test program for the class TComplex. tstring.cxx; Example usage of the ROOT string class. vmatrix.cxx; Verification program for the TMatrix class. vvector.cxx; Verification program for the TVectorclass. vlazy.cxx; Verification program for lazy matrices. hworld.cxx; Small program showing basic graphics. guitest.cxx; Example usage of the ROOT GUI classes. gui viewer .cxx; Another ROOT GUI example program. Hello.cxx; Dancing text example. Aclock.cxx; Analog clock (a la X11 xclock). Tetris.cxx; The known Tetris game based on the ROOT graphics. stress.cxx; Important ROOT stress testing program. stress*.cxx; Stress testing of different ROOT classes. bench.cxx; STL and ROOT container test and benchmarking program. QpRandomDriver.cx x; Verification program for Quadratic programming classes in Quadp library. DrawTest.sh; Entry script to extensive TTree query test suite. dt_*; Scripts used by DrawTest.sh. The $ROOTSYS/test directory is a gold mine of root-wisdom nuggets, and we encourage you to explore and expl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1076144,Test,Test,1076144,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['Test'],['Test']
Testability,"OPY_MUTUALEXCLUSIVE);; 816 break;; 817 }; 818 ; 819 switch(fWeightInitialization) {; 820 case EInitialization::kGauss:; 821 net.initializeWeights(WeightInitializationStrategy::XAVIER,; 822 std::back_inserter(weights));; 823 break;; 824 case EInitialization::kUniform:; 825 net.initializeWeights(WeightInitializationStrategy::XAVIERUNIFORM,; 826 std::back_inserter(weights));; 827 break;; 828 default:; 829 net.initializeWeights(WeightInitializationStrategy::XAVIER,; 830 std::back_inserter(weights));; 831 break;; 832 }; 833 ; 834 int idxSetting = 0;; 835 for (auto s : fTrainingSettings) {; 836 ; 837 EnumRegularization r = EnumRegularization::NONE;; 838 switch(s.regularization) {; 839 case ERegularization::kNone: r = EnumRegularization::NONE; break;; 840 case ERegularization::kL1: r = EnumRegularization::L1; break;; 841 case ERegularization::kL2: r = EnumRegularization::L2; break;; 842 }; 843 ; 844 Settings * settings = new Settings(TString(), s.convergenceSteps, s.batchSize,; 845 s.testInterval, s.weightDecay, r,; 846 MinimizerType::fSteepest, s.learningRate,; 847 s.momentum, 1, s.multithreading);; 848 std::shared_ptr<Settings> ptrSettings(settings);; 849 ptrSettings->setMonitoring (0);; 850 Log() << kINFO; 851 << ""Training with learning rate = "" << ptrSettings->learningRate (); 852 << "", momentum = "" << ptrSettings->momentum (); 853 << "", repetitions = "" << ptrSettings->repetitions (); 854 << Endl;; 855 ; 856 ptrSettings->setProgressLimits ((idxSetting)*100.0/(fSettings.size ()),; 857 (idxSetting+1)*100.0/(fSettings.size ()));; 858 ; 859 const std::vector<double>& dropConfig = ptrSettings->dropFractions ();; 860 if (!dropConfig.empty ()) {; 861 Log () << kINFO << ""Drop configuration"" << Endl; 862 << "" drop repetitions = "" << ptrSettings->dropRepetitions(); 863 << Endl;; 864 }; 865 ; 866 int idx = 0;; 867 for (auto f : dropConfig) {; 868 Log () << kINFO << "" Layer "" << idx << "" = "" << f << Endl;; 869 ++idx;; 870 }; 871 Log () << kINFO << Endl;; 872 ; 873 DNN::Steepest mi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDNN_8cxx_source.html:30224,test,testInterval,30224,doc/master/MethodDNN_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDNN_8cxx_source.html,1,['test'],['testInterval']
Testability,"ORE; » BASE; » TAttLine. class TAttLine. Line Attributes class; This class is used (in general by secondary inheritance); by many other classes (graphics, histograms). It holds all the line attributes.; Line attributes; Line attributes are:. Line Color.; Line Width.; Line Style. Line Color; The line color is a color index (integer) pointing in the ROOT; color table.; The line color of any class inheriting from TAttLine can; be changed using the method SetLineColor and retrieved using the; method GetLineColor.; The following table shows the first 50 default colors. Picture; Source. {; TCanvas *c = new TCanvas(""c"",""Line colors"",0,0,500,200);; c.DrawColorTable();; return c;; }. Line Width; The line width is expressed in pixel units.; The line width of any class inheriting from TAttLine can; be changed using the method SetLineWidth and retrieved using the; method GetLineWidth.; The following picture shows the line widths from 1 to 10 pixels. Picture; Source. {; TCanvas *Lw = new TCanvas(""Lw"",""test"",500,200);; TText t;; t.SetTextAlign(32);; t.SetTextSize(0.08);; Int_t i=1;; for (float s=0.1; s<1.0 ; s+=0.092) {; TLine *lh = new TLine(0.15,s,.85,s);; lh->SetLineWidth(i);; t.DrawText(0.1,s,Form(""%d"",i++));; lh->Draw();; }; return Lw;; }. Line Style; Line styles are identified via integer numbers. The line style of any class; inheriting from TAttLine can be changed using the method; SetLineStyle and retrieved using the method GetLineStyle. The first 10 line styles are predefined as shown on the following picture:. Picture; Source. {; TCanvas *Ls = new TCanvas(""Ls"",""test"",500,200);; TText t;; t.SetTextAlign(32);; t.SetTextSize(0.08);; Int_t i=1;; for (float s=0.1; s<1.0 ; s+=0.092) {; TLine *lh = new TLine(0.15,s,.85,s);; lh->SetLineStyle(i);; t.DrawText(0.1,s,Form(""%d"",i++));; lh->Draw();; }; return Ls;; }. Additional line styles can be defined using TStyle::SetLineStyleString.; For example the line style number 11 can be defined as follow:. gStyle->SetLineStyleString(11,""40",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TAttLine.html:1232,test,test,1232,root/html526/TAttLine.html,https://root.cern,https://root.cern/root/html526/TAttLine.html,4,['test'],['test']
Testability,"OSTATS; » RooStats::MinNLLTestStat. class RooStats::MinNLLTestStat: public RooStats::TestStatistic. MinNLLTestStat is an implementation of the TestStatistic interface that calculates the minimum value of the negative log likelihood; function and returns it as a test statistic.; Internaly it operates by delegating to a MinNLLTestStat object. Function Members (Methods); public:. virtual~MinNLLTestStat(); static TClass*Class(); virtual voidEnableDetailedOutput(bool e = true); virtual Double_tEvaluate(RooAbsData& data, RooArgSet& paramsOfInterest); virtual const RooArgSet*GetDetailedOutput() const; virtual const TStringGetVarName() const; virtual TClass*IsA() const; RooStats::MinNLLTestStatMinNLLTestStat(); RooStats::MinNLLTestStatMinNLLTestStat(RooAbsPdf& pdf); RooStats::MinNLLTestStatMinNLLTestStat(const RooStats::MinNLLTestStat& rhs); RooStats::MinNLLTestStat&operator=(const RooStats::MinNLLTestStat& rhs); virtual boolRooStats::TestStatistic::PValueIsRightTail() const; voidSetLOffset(Bool_t flag = kTRUE); voidSetMinimizer(const char* minimizer); voidSetOneSided(Bool_t flag = true); voidSetOneSidedDiscovery(Bool_t flag = true); voidSetPrintLevel(Int_t printlevel); voidSetReuseNLL(Bool_t flag); voidSetStrategy(Int_t strategy); voidSetTolerance(double tol); virtual voidSetVarName(const char* name); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); RooStats::TestStatisticRooStats::TestStatistic::TestStatistic(); RooStats::TestStatisticRooStats::TestStatistic::TestStatistic(const RooStats::TestStatistic&). Data Members; private:. RooStats::ProfileLikelihoodTestStat*fProflts. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MinNLLTestStat(); Proof constructor. Do not use. MinNLLTestStat(RooAbsPdf& pdf). MinNLLTestStat(const RooStats::MinNLLTestStat& rhs). MinNLLTestStat & operator=(const RooStats::MinNLLTestStat& rhs). virtual ~MinNLLTes",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__MinNLLTestStat.html:1172,Test,TestStatistic,1172,root/html602/RooStats__MinNLLTestStat.html,https://root.cern,https://root.cern/root/html602/RooStats__MinNLLTestStat.html,16,['Test'],"['TestStatistic', 'TestStatisticRooStats']"
Testability,"OT file used by the other examples.; To execute it type:; $ cd $ROOTSYS/tutorials; $ root; -------------------------------------------------------------------------; | Welcome to ROOT 6.10/01 http://root.cern.ch |; | (c) 1995-2017, The ROOT Team |; | Built for macosx64 |; | From heads/v6-10-00-patches@v6-10-00-25-g9f78c3a, Jul 03 2017, 11:39:44 |; | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |; -------------------------------------------------------------------------. root [0] .x hsimple.C; Now execute demos.C, which brings up the button bar shown on the left. You can click on any button to execute another example. To see the source, open the corresponding source file (for example fit1.C). Once you are done, and want to quit the ROOT session, you can do so by typing .q.; root[] .x demos.C; root[] .q; 20.2 $ROOTSYS/test; The test directory contains a set of examples that represent all areas of the framework. When a new release is cut, the examples in this directory are compiled and run to test the new release’s backward compatibility.; We see these source files:. Makefile; Makefile to build all test programs. hsimple.cxx; Simple test program that creates and saves some histograms. MainEvent.cxx; Simple test program that creates a ROOT Tree object and fills it with some simple structures but also with complete histograms. This program uses the files Event.cxx, EventCint.cxx and Event.h. An example of a procedure to link this program is in bind_Event. Note that the Makefile invokes the rootcling utility to generate the Cling interface EventCint.cxx. Event.cxx; Implementation for classes Event and Track. minexam.cxx; Simple test program for data fitting. tcollex.cxx; Example usage of the ROOT collection classes. tcollbm.cxx; Benchmarks of ROOT collection classes. ctorture.cxx; Test program for the class TComplex. tstring.cxx; Example usage of the ROOT string class. vmatrix.cxx; Verification program for the TMatrix class. vvector.cxx; Verification program ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1075343,test,test,1075343,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['test'],['test']
Testability,"OT team in 1996. He developed the first version of the HTML documentation system (THtml) and worked on the first version of the 3D graphics system. Nenad left in 1997.; Paul Russo; Paul joined the ROOT team at Fermilab in 2005 and has been focusing on support and developing CINT.; Pere Mato; Pere Mato was the project leader from 2014 to 2017. He was the driving force behind ROOT's migration to CMake and has contributed to PyROOT.; Richard Maunder; Richard worked as project associate on the 3D graphics OpenGL based system.; Susan Panacek; Susan wrote the first ROOT User's Guide and developed a number of ROOT tutorials.; Timur Pocheptsov; Timur worked as a project associate on many different aspects of ROOT, but mostly on the OpenGL accelerated 3D graphics and the native macOS Cocoa based GUI. Timur also ported ROOT to the iPad. He continues to maintain the OpenGL and Cocoa code till this day.; Valeri Fine; Valeri was a member of the ROOT team from 1998-2000. He made the initial port to Windows. Currently he is the maintainer of the ROOT-Qt interface.; Valeri Onuchin; Valeri worked as a project associate on many different aspects of ROOT, but mostly in the GUI and graphics area. He did develop the signal/slot functionality and the GUI builder. He also developed the Carrot ROOT enabled web server. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/previous-developers.html:7175,test,tests,7175,d/previous-developers.html,https://root.cern,https://root.cern/d/previous-developers.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,"OT::Fit::DataRange class. ; Definition at line 58 of file DistSampler.cxx. ◆ SetRange() [3/4]. void ROOT::Math::DistSampler::SetRange ; (; const std::vector< double > & ; xmin, . const std::vector< double > & ; xmax . ). inline . Set the range for all dimensions (use std::vector) ; Definition at line 140 of file DistSampler.h. ◆ SetRange() [4/4]. void ROOT::Math::DistSampler::SetRange ; (; double ; xmin, . double ; xmax, . int ; icoord = 0 . ). Set the range in a given dimension. ; Definition at line 40 of file DistSampler.cxx. ◆ SetSeed(). virtual void ROOT::Math::DistSampler::SetSeed ; (; unsigned int ; ). inlinevirtual . Set the random seed for the TRandom instances used by the sampler classes. ; To be implemented by the derived classes who provides random sampling ; Reimplemented in TFoamSampler, and TUnuranSampler.; Definition at line 125 of file DistSampler.h. ◆ SetUseLogPdf(). virtual void ROOT::Math::DistSampler::SetUseLogPdf ; (; bool ; = true). inlinevirtual . Use the log of the provided pdf. ; Implemented by the derived classes ; Reimplemented in TUnuranSampler.; Definition at line 162 of file DistSampler.h. Member Data Documentation. ◆ fData. std::vector<double> ROOT::Math::DistSampler::fData. mutableprivate . ! internal array used to cached the sample data ; Definition at line 286 of file DistSampler.h. ◆ fFunc. const ROOT::Math::IMultiGenFunction* ROOT::Math::DistSampler::fFunc. private . internal function (ND) ; Definition at line 288 of file DistSampler.h. ◆ fOwnFunc. bool ROOT::Math::DistSampler::fOwnFunc. private . flag to indicate if the function is owned ; Definition at line 285 of file DistSampler.h. ◆ fRange. ROOT::Fit::DataRange* ROOT::Math::DistSampler::fRange. private . data range ; Definition at line 287 of file DistSampler.h. Libraries for ROOT::Math::DistSampler:. [legend]; The documentation for this class was generated from the following files:; math/mathcore/inc/Math/DistSampler.h; math/mathcore/src/DistSampler.cxx. ROOTMathDistSampler. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1DistSampler.html:15782,log,log,15782,doc/master/classROOT_1_1Math_1_1DistSampler.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1DistSampler.html,1,['log'],['log']
Testability,"OT::Math::GSLMultiMinimizer Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multi-dimensional Minimization. ; GSLMultiMinimizer class , for minimizing multi-dimensional function using derivatives. ; Definition at line 54 of file GSLMultiMinimizer.h. Public Member Functions;  GSLMultiMinimizer (const GSLMultiMinimizer &)=delete;  ;  GSLMultiMinimizer (GSLMultiMinimizer &&)=delete;  ;  GSLMultiMinimizer (ROOT::Math::EGSLMinimizerType type);  Default constructor. ;  ;  ~GSLMultiMinimizer ();  Destructor. ;  ; void CreateMinimizer (unsigned int n);  create the minimizer from the type and size ;  ; double * Gradient () const;  gradient value at the minimum ;  ; int Iterate ();  ; double Minimum () const;  function value at the minimum ;  ; std::string Name () const;  ; GSLMultiMinimizer & operator= (const GSLMultiMinimizer &rhs)=delete;  ; GSLMultiMinimizer & operator= (GSLMultiMinimizer &&rhs)=delete;  ; int Restart ();  restart minimization from current point ;  ; int Set (const ROOT::Math::IMultiGradFunction &func, const double *x, double stepSize, double tol);  set the function to be minimize the initial minimizer parameters, step size and tolerance in the line search ;  ; int TestGradient (const double *g, double absTol) const;  test gradient (require a vector gradient) ;  ; int TestGradient (double absTol) const;  test gradient (ask from minimizer gradient vector) ;  ; double * X () const;  x values at the minimum ;  . Private Attributes; GSLMultiMinDerivFunctionWrapper fFunc;  ; gsl_multimin_fdfminimizer * fMinimizer;  ; const gsl_multimin_fdfminimizer_type * fType;  ; gsl_vector * fVec;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLMultiMinimizer.h>; Constructor & Destructor Documentation. ◆ GSLMultiMinimizer() [1/3]. ROOT::Math::GSLMultiMinimizer::GSLMultiMinimizer ; (; ROOT::Math::EGSLMinimizerType ; type). inline . Default constructor. ; Definition at line 61 of file GSLMul",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiMinimizer.html:1453,Test,TestGradient,1453,doc/master/classROOT_1_1Math_1_1GSLMultiMinimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiMinimizer.html,4,"['Test', 'test']","['TestGradient', 'test']"
Testability,"OTE: This tutorial must be run with ACLIC ;  normalDist.C Tutorial illustrating the new statistical distributions functions (pdf, cdf and quantile) ;  permute.C Tutorial illustrating the use of TMath::Permute can be run with: ;  principal.C Principal Components Analysis (PCA) example ;  quantiles.C Demo for quantiles ;  quasirandom.C Example of generating quasi-random numbers ;  Rolke.C Example of the usage of the TRolke class The TRolke class computes the profile likelihood confidence limits for 7 different model assumptions on systematic/statistical uncertainties ;  testrandom.C Performance test of all the ROOT random generator (TRandom, TRandom1, TRandom2 and TRandom3) Tests the generator TRandom3 against some ref values and creates a timing table against TRandom, TRandom1 and TRandom2 ;  testUnfold1.C Test program for the classes TUnfold and related ;  testUnfold2.C Test program as an example for a user specific regularisation scheme ;  testUnfold3.C Simple Test program for the class TUnfoldDensity ;  testUnfold4.C Test program for the class TUnfoldSys ;  testUnfold5a.C Version 17.0 example for multi-dimensional unfolding ;  testUnfold5b.C ;  testUnfold5c.C Version 17.0 example for multi-dimensional unfolding ;  testUnfold5d.C Version 17.0 example for multi-dimensional unfolding ;  tStudent.C Example macro describing the student t distribution ;  TSVDUnfoldExample.C Data unfolding using Singular Value Decomposition ;  vavilov.C Test of the TMath::Vavilov distribution ;  ► matrix;  invertMatrix.C This macro shows several ways to invert a matrix ;  solveLinear.C This macro shows several ways to perform a linear least-squares analysis ;  ► mc;  CompareMasses.CMacro to compare masses in ROOT data base to the values from pdg pdg ;  ► memstat;  memstatExample.CScript post-processing the file generated by TMemStat (default memstat.root) ;  ► mlp;  mlpHiggs.C Example of a Multi Layer Perceptron For a LEP search for invisible Higgs boson, a neural network was used to sep",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:131044,Test,Test,131044,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,1,['Test'],['Test']
Testability,"OT_Fit_FitUtilParallel; 28// #include ""Fit/FitUtilParallel.h""; 29// #endif; 30// #endif; 31 ; 32namespace ROOT {; 33 ; 34 namespace Fit {; 35 ; 36 ; 37//___________________________________________________________________________________; 38/**; 39 class evaluating the log likelihood; 40 for binned Poisson likelihood fits; 41 it is template to distinguish gradient and non-gradient case; 42 ; 43 @ingroup FitMethodFunc; 44*/; 45template<class DerivFunType, class ModelFunType = ROOT::Math::IParamMultiFunction>; 46class PoissonLikelihoodFCN : public BasicFCN<DerivFunType,ModelFunType,BinData> {; 47 ; 48public:; 49 typedef typename ModelFunType::BackendType T;; 50 typedef BasicFCN<DerivFunType,ModelFunType,BinData> BaseFCN;; 51 ; 52 typedef ::ROOT::Math::BasicFitMethodFunction<DerivFunType> BaseObjFunction;; 53 typedef typename BaseObjFunction::BaseFunction BaseFunction;; 54 ; 55 typedef ::ROOT::Math::IParamMultiFunctionTempl<T> IModelFunction;; 56 typedef typename BaseObjFunction::Type_t Type_t;; 57 ; 58 /**; 59 Constructor from unbin data set and model function (pdf); 60 */; 61 PoissonLikelihoodFCN (const std::shared_ptr<BinData> & data, const std::shared_ptr<IModelFunction> & func, int weight = 0, bool extended = true, const ::ROOT::EExecutionPolicy &executionPolicy = ::ROOT::EExecutionPolicy::kSequential ) :; 62 BaseFCN( data, func),; 63 fIsExtended(extended),; 64 fWeight(weight),; 65 fNEffPoints(0),; 66 fGrad ( std::vector<double> ( func->NPar() ) ),; 67 fExecutionPolicy(executionPolicy); 68 { }; 69 ; 70 /**; 71 Constructor from unbin data set and model function (pdf) managed by the users; 72 */; 73 PoissonLikelihoodFCN (const BinData & data, const IModelFunction & func, int weight = 0, bool extended = true, const ::ROOT::EExecutionPolicy &executionPolicy = ::ROOT::EExecutionPolicy::kSequential ) :; 74 BaseFCN(std::make_shared<BinData>(data), std::shared_ptr<IModelFunction>(dynamic_cast<IModelFunction*>(func.Clone() ) ) ),; 75 fIsExtended(extended),; 76 fWeight(weigh",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/PoissonLikelihoodFCN_8h_source.html:1204,log,log,1204,doc/master/PoissonLikelihoodFCN_8h_source.html,https://root.cern,https://root.cern/doc/master/PoissonLikelihoodFCN_8h_source.html,1,['log'],['log']
Testability,"O_MSG(""Fitter::DoLikelihoodFit"", ""use gradient from model function"");; 405 // not-extended is not implemented in this case; 406 if (!extended) {; 407 MATH_WARN_MSG(""Fitter::DoBinnedLikelihoodFit"",; 408 ""Not-extended binned fit with gradient not yet supported - do an extended fit"");; 409 extended = true;; 410 }; 411 if (fFunc_v) {; 412 // create a chi2 function to be used for the equivalent chi-square; 413 Chi2FCN<BaseFunc, IModelFunction_v> chi2(data, fFunc_v);; 414 std::shared_ptr<IGradModelFunction_v> gradFun = std::dynamic_pointer_cast<IGradModelFunction_v>(fFunc_v);; 415 if (!gradFun) {; 416 MATH_ERROR_MSG(""Fitter::DoBinnedLikelihoodFit"", ""wrong type of function - it does not provide gradient"");; 417 return false;; 418 }; 419 auto logl = std::make_unique<PoissonLikelihoodFCN<BaseGradFunc, IModelFunction_v>>(data, gradFun, useWeight, extended, executionPolicy);; 420 // do minimization; 421 return (useWeight) ? DoWeightMinimization(std::move(logl),&chi2) : DoMinimization(std::move(logl),&chi2);; 422 } else {; 423 // create a chi2 function to be used for the equivalent chi-square; 424 Chi2FCN<BaseFunc> chi2(data, fFunc);; 425 // check if fFunc provides gradient; 426 std::shared_ptr<IGradModelFunction> gradFun = std::dynamic_pointer_cast<IGradModelFunction>(fFunc);; 427 if (!gradFun) {; 428 MATH_ERROR_MSG(""Fitter::DoBinnedLikelihoodFit"", ""wrong type of function - it does not provide gradient"");; 429 return false;; 430 }; 431 // use gradient for minimization; 432 auto logl = std::make_unique<PoissonLikelihoodFCN<BaseGradFunc>>(data, gradFun, useWeight, extended, executionPolicy);; 433 // do minimization; 434 return (useWeight) ? DoWeightMinimization(std::move(logl),&chi2) : DoMinimization(std::move(logl),&chi2);; 435 }; 436 }; 437 return false;; 438}; 439 ; 440bool Fitter::DoUnbinnedLikelihoodFit(bool extended, const ROOT::EExecutionPolicy &executionPolicy) {; 441 // perform a likelihood fit on a set of unbinned data; 442 ; 443 std::shared_ptr<UnBinData> data = std::d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Fitter_8cxx_source.html:15759,log,logl,15759,doc/master/Fitter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Fitter_8cxx_source.html,1,['log'],['logl']
Testability,"Obj);; 1294 if (!pad) return;; 1295 ; 1296 gPad = pad; // don't use cd() because we won't draw in pad; 1297 // we will only use its coordinate system; 1298 ; 1299 if (fSelected) {; 1300 FeedbackMode(kTRUE); // to draw in rubberband mode; 1301 fSelected->ExecuteEvent(event, px, py);; 1302 ; 1303 RunAutoExec();; 1304 }; 1305 ; 1306 break;; 1307 ; 1308 case kArrowKeyPress:; 1309 case kArrowKeyRelease:; 1310 case kButton1Motion:; 1311 case kButton1ShiftMotion: //8 == kButton1Motion + shift modifier; 1312 if (fSelected) {; 1313 gPad = fSelectedPad;; 1314 ; 1315 fSelected->ExecuteEvent(event, px, py);; 1316 if (!IsWeb()); 1317 gVirtualX->Update();; 1318 if (fSelected && !fSelected->InheritsFrom(TAxis::Class())) {; 1319 Bool_t resize = kFALSE;; 1320 if (fSelected->InheritsFrom(TBox::Class())); 1321 resize = ((TBox*)fSelected)->IsBeingResized();; 1322 if (fSelected->InheritsFrom(TVirtualPad::Class())); 1323 resize = ((TVirtualPad*)fSelected)->IsBeingResized();; 1324 ; 1325 if ((!resize && TestBit(kMoveOpaque)) || (resize && TestBit(kResizeOpaque))) {; 1326 gPad = fPadSave;; 1327 Update();; 1328 FeedbackMode(kTRUE);; 1329 }; 1330 }; 1331 ; 1332 RunAutoExec();; 1333 }; 1334 ; 1335 break;; 1336 ; 1337 case kButton1Up:; 1338 ; 1339 if (fSelected) {; 1340 gPad = fSelectedPad;; 1341 ; 1342 fSelected->ExecuteEvent(event, px, py);; 1343 ; 1344 RunAutoExec();; 1345 ; 1346 if (fPadSave); 1347 gPad = fPadSave;; 1348 else {; 1349 gPad = this;; 1350 fPadSave = this;; 1351 }; 1352 ; 1353 Update(); // before calling update make sure gPad is reset; 1354 }; 1355 break;; 1356 ; 1357//*-*----------------------------------------------------------------------; 1358 ; 1359 case kButton2Down:; 1360 // find pad in which input occurred; 1361 pad = Pick(px, py, prevSelObj);; 1362 if (!pad) return;; 1363 ; 1364 gPad = pad; // don't use cd() because we won't draw in pad; 1365 // we will only use its coordinate system; 1366 ; 1367 FeedbackMode(kTRUE);; 1368 ; 1369 if (fSelected) fSelected->Pop(); // po",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCanvas_8cxx_source.html:42251,Test,TestBit,42251,doc/master/TCanvas_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCanvas_8cxx_source.html,1,['Test'],['TestBit']
Testability,"ObjArray.cxx:523; TObjArray::Deletevoid Delete(Option_t *option="""") overrideRemove all objects from the array AND delete all heap based objects.Definition TObjArray.cxx:356; TObjArray::AtTObject * At(Int_t idx) const overrideDefinition TObjArray.h:164; TObjArray::UncheckedAtTObject * UncheckedAt(Int_t i) constDefinition TObjArray.h:84; TObjArray::RemoveTObject * Remove(TObject *obj) overrideRemove object from array.Definition TObjArray.cxx:719; TObjArray::SetLastvoid SetLast(Int_t last)Set index of last object in array, effectively truncating the array.Definition TObjArray.cxx:775; TObjArray::RemoveAtTObject * RemoveAt(Int_t idx) overrideRemove object at index idx.Definition TObjArray.cxx:694; TObjArray::GetLastInt_t GetLast() const overrideReturn index of last object in array.Definition TObjArray.cxx:577; TObjArray::LowerBoundInt_t LowerBound() constDefinition TObjArray.h:91; TObjArray::Addvoid Add(TObject *obj) overrideDefinition TObjArray.h:68; TObject::TestBitR__ALWAYS_INLINE Bool_t TestBit(UInt_t f) constDefinition TObject.h:199; TObject::ClassNamevirtual const char * ClassName() constReturns name of class to which the object belongs.Definition TObject.cxx:213; TObject::Warningvirtual void Warning(const char *method, const char *msgfmt,...) constIssue warning message.Definition TObject.cxx:979; TObject::IsZombieR__ALWAYS_INLINE Bool_t IsZombie() constDefinition TObject.h:153; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TObject::InheritsFromvirtual Bool_t InheritsFrom(const char *classname) constReturns kTRUE if object inherits from class ""classname"".Definition TObject.cxx:530; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::Fatalvirtual void Fatal(const char *method, const char *msgfmt,...) constIssue fatal error message.Definition TObject.cxx:1021; TObject::MakeZombievoid MakeZombie()Defi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranch_8cxx_source.html:152812,Test,TestBit,152812,doc/master/TBranch_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranch_8cxx_source.html,1,['Test'],['TestBit']
Testability,"ObjArrayIter titer( rule->GetTarget() );; 790 TObjString *str;; 791 TObject *obj;; 792 ; 793 while( (obj = titer.Next() ) ) {; 794 str = (TObjString*)obj;; 795 if( HasTarget( str->String() ) ); 796 haveCommonTargets = kTRUE;; 797 }; 798 ; 799 if( !haveCommonTargets ); 800 return kFALSE;; 801 ; 802 //---------------------------------------------------------------------------; 803 // Check if there are conflicting checksums; 804 /////////////////////////////////////////////////////////////////////////////; 805 ; 806 if( fChecksumVect ) {; 807 std::vector<UInt_t>::iterator it;; 808 for( it = fChecksumVect->begin(); it != fChecksumVect->end(); ++it ); 809 if( rule->TestChecksum( *it ) ); 810 return kTRUE;; 811 }; 812 ; 813 //---------------------------------------------------------------------------; 814 // Check if there are conflicting versions; 815 /////////////////////////////////////////////////////////////////////////////; 816 ; 817 if( fVersionVect && rule->fVersionVect ); 818 {; 819 std::vector<std::pair<Int_t, Int_t> >::iterator it1;; 820 std::vector<std::pair<Int_t, Int_t> >::iterator it2;; 821 for( it1 = fVersionVect->begin(); it1 != fVersionVect->end(); ++it1 ) {; 822 for( it2 = rule->fVersionVect->begin();; 823 it2 != rule->fVersionVect->end(); ++it2 ) {; 824 //------------------------------------------------------------------; 825 // the rules conflict it their version ranges intersect; 826 ////////////////////////////////////////////////////////////////////; 827 ; 828 if( it1->first >= it2->first && it1->first <= it2->second ); 829 return kTRUE;; 830 ; 831 if( it1->first < it2->first && it1->second >= it2->first ); 832 return kTRUE;; 833 }; 834 }; 835 }; 836 return kFALSE;; 837}; 838 ; 839////////////////////////////////////////////////////////////////////////////////; 840/// Check if specified version string is correct and build version vector.; 841 ; 842Bool_t TSchemaRule::ProcessVersion( const TString& version ) const; 843{; 844 //----------------------",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSchemaRule_8cxx_source.html:26049,Test,TestChecksum,26049,doc/master/TSchemaRule_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSchemaRule_8cxx_source.html,1,['Test'],['TestChecksum']
Testability,"ObjString*)next())) {; 726 out<<"" ""<<name<<subname<<""->SetBinLabel(""<<obj->GetUniqueID()<<"",""<<quote<<obj->GetName()<<quote<<"");""<<std::endl;; 727 }; 728 }; 729 ; 730 if (fFirst || fLast) {; 731 out<<"" ""<<name<<subname<<""->SetRange(""<<fFirst<<"",""<<fLast<<"");""<<std::endl;; 732 }; 733 ; 734 if (TestBit(kLabelsHori)) {; 735 out<<"" ""<<name<<subname<<""->SetBit(TAxis::kLabelsHori);""<<std::endl;; 736 }; 737 ; 738 if (TestBit(kLabelsVert)) {; 739 out<<"" ""<<name<<subname<<""->SetBit(TAxis::kLabelsVert);""<<std::endl;; 740 }; 741 ; 742 if (TestBit(kLabelsDown)) {; 743 out<<"" ""<<name<<subname<<""->SetBit(TAxis::kLabelsDown);""<<std::endl;; 744 }; 745 ; 746 if (TestBit(kLabelsUp)) {; 747 out<<"" ""<<name<<subname<<""->SetBit(TAxis::kLabelsUp);""<<std::endl;; 748 }; 749 ; 750 if (TestBit(kCenterLabels)) {; 751 out<<"" ""<<name<<subname<<""->CenterLabels(true);""<<std::endl;; 752 }; 753 ; 754 if (TestBit(kCenterTitle)) {; 755 out<<"" ""<<name<<subname<<""->CenterTitle(true);""<<std::endl;; 756 }; 757 ; 758 if (TestBit(kRotateTitle)) {; 759 out<<"" ""<<name<<subname<<""->RotateTitle(true);""<<std::endl;; 760 }; 761 ; 762 if (TestBit(kDecimals)) {; 763 out<<"" ""<<name<<subname<<""->SetDecimals();""<<std::endl;; 764 }; 765 ; 766 if (TestBit(kMoreLogLabels)) {; 767 out<<"" ""<<name<<subname<<""->SetMoreLogLabels();""<<std::endl;; 768 }; 769 ; 770 if (TestBit(kNoExponent)) {; 771 out<<"" ""<<name<<subname<<""->SetNoExponent();""<<std::endl;; 772 }; 773 if (fModLabs) {; 774 TIter next(fModLabs);; 775 while (auto ml = (TAxisModLab*)next()) {; 776 if (ml->GetLabNum() == 0); 777 out<<"" ""<<name<<subname<<""->ChangeLabelByValue(""<<ml->GetLabValue()<<"","";; 778 else; 779 out<<"" ""<<name<<subname<<""->ChangeLabel(""<<ml->GetLabNum()<<"","";; 780 out<<ml->GetAngle()<<"",""; 781 <<ml->GetSize()<<"",""; 782 <<ml->GetAlign()<<"",""; 783 <<ml->GetColor()<<"",""; 784 <<ml->GetFont()<<"",""; 785 <<quote<<ml->GetText()<<quote<<"");""<<std::endl;; 786 }; 787 }; 788 TAttAxis::SaveAttributes(out,name,subname);; 789}; 790 ; 791//////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TAxis_8cxx_source.html:25351,Test,TestBit,25351,doc/master/TAxis_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TAxis_8cxx_source.html,1,['Test'],['TestBit']
Testability,"Object * clone (const char *newname=nullptr) const =0;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depLis",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsAnaConvPdf.html:35682,Test,Test,35682,doc/master/classRooAbsAnaConvPdf.html,https://root.cern,https://root.cern/doc/master/classRooAbsAnaConvPdf.html,3,['Test'],['Test']
Testability,"Object& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual Bool_tPrepareTransformation(const vector<TMVA::Event*,allocator<TMVA::Event*> >&); virtual voidTObject::Print(Option_t* option = """") const; virtual voidPrintTransformation(ostream&); virtual Int_tTObject::Read(const char* name); virtual voidReadFromXML(void* trfnode); virtual voidReadTransformationFromStream(istream& istr, const TString& classname = """"); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetEnabled(Bool_t e); voidSetNormalise(Bool_t n); static voidTObject::SetObjectStat(Bool_t stat); voidSetTMVAVersion(TMVA::TMVAVersion_t v); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetUseSignalTransform(Bool_t e = kTRUE); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; const vector<TMVA::VariableInfo>&Targets() const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual const TMVA::Event*Transform(const TMVA::Event *const, Int_t cls) const; virtual voidTObject::UseCurrentStyle(); Bool_tUseSignalTransform() const; const vector<TMVA::VariableInfo>&Variables() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidWriteTransformationToStream(ostream& o) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__VariableTransformBase.html:5322,Test,TestBit,5322,root/html528/TMVA__VariableTransformBase.html,https://root.cern,https://root.cern/root/html528/TMVA__VariableTransformBase.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"Object* obj); virtual TObject*TObjArray::Remove(TObject* obj); virtual voidTSeqCollection::RemoveAfter(TObject* after); voidTCollection::RemoveAll(); virtual voidTCollection::RemoveAll(TCollection* col); virtual TObject*TObjArray::RemoveAt(Int_t idx); virtual voidTSeqCollection::RemoveBefore(TObject* before); virtual voidTSeqCollection::RemoveFirst(); virtual voidTSeqCollection::RemoveLast(); virtual voidTObjArray::RemoveRange(Int_t idx1, Int_t idx2); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTCollection::SetCurrentCollection(); TGeoNavigator*SetCurrentNavigator(Int_t inav); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTObjArray::SetLast(Int_t last); voidTCollection::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTCollection::SetOwner(Bool_t enable = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTObjArray::Sort(Int_t upto = kMaxInt); static voidTCollection::StartGarbageCollection(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGeoNavigatorArray(); TGeoNavigatorArray(TGeoManager* mgr); TObject*TObjArray::UncheckedAt(Int_t i) const; voidTSeqCollection::UnSort(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoNavigatorArray.html:8601,Test,TestBit,8601,root/html602/TGeoNavigatorArray.html,https://root.cern,https://root.cern/root/html602/TGeoNavigatorArray.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"Object*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsArg*RooAbsCategory::createFundamental(const char* newname = 0) const; Roo1DTable*RooAbsCategory::createTable(const char* label) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsCategoryLValue.html:3242,test,testArg,3242,root/html526/RooAbsCategoryLValue.html,https://root.cern,https://root.cern/root/html526/RooAbsCategoryLValue.html,3,['test'],['testArg']
Testability,"Object*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual RooStats::HybridResult*GetHypoTest() const; virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; unsigned intGetNumberOfToys(); unsigned intGetNumberOfToys() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; RooStats::HybridCalculatorHybridCalculator(const char* name = 0); RooStats::HybridCalculatorHybridCalculator(const RooStats::HybridCalculator&); RooStats::HybridCalculatorHybridCalculator(RooAbsData& data, const RooStats::ModelConfig& sb_model, const RooStats::ModelConfig& b_model, bool GenerateBinned = false, int testStatistics = 1, int ntoys = 1000); RooStats::HybridCalculatorHybridCalculator(RooAbsPdf& sb_model, RooAbsPdf& b_model, RooArgList& observables, const RooArgSet* nuisance_parameters = 0, RooAbsPdf* prior_pdf = 0, bool GenerateBinned = false, int testStatistics = 1, int ntoys = 1000); RooStats::HybridCalculatorHybridCalculator(RooAbsData& data, RooAbsPdf& sb_model, RooAbsPdf& b_model, const RooArgSet* nuisance_parameters = 0, RooAbsPdf* prior_pdf = 0, bool GenerateBinned = false, int testStatistics = 1, int ntoys = 1000); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__HybridCalculator.html:5021,test,testStatistics,5021,root/html526/RooStats__HybridCalculator.html,https://root.cern,https://root.cern/root/html526/RooStats__HybridCalculator.html,1,['test'],['testStatistics']
Testability,"Object.cxx. ◆ HandleTimer(). Bool_t TObject::HandleTimer ; (; TTimer * ; timer). virtual . Execute action in response of a timer timing out. ; This method must be overridden if an object has to react to timers. ; Reimplemented in TGWindow, TGuiBldDragManager, TSessionViewer, TGraphTime, TGLEventHandler, TGCommandPlugin, TGDNDManager, TGFileContainer, TGPopupMenu, TGScrollBar, TGShutter, TGTextEdit, TGTextEditor, TGTextEntry, TGTextView, TGToolTip, TGHtml, TVirtualPacketizer, TProofPlayerRemote, TProofPlayerSlave, TProofPlayerSuperMaster, TProofPlayerLite, and TTreeViewer.; Definition at line 498 of file TObject.cxx. ◆ Hash(). ULong_t TObject::Hash ; (; ); const. virtual . Return hash value for this object. ; Note: If this routine is overloaded in a derived class, this derived class should also add ROOT::CallRecursiveRemoveIfNeeded(*this); ROOT::CallRecursiveRemoveIfNeededvoid CallRecursiveRemoveIfNeeded(TObject &obj)call RecursiveRemove for obj if gROOT is valid and obj.TestBit(kMustCleanup) is true.Definition TROOT.h:395; Otherwise, when RecursiveRemove is called (by ~TObject or example) for this type of object, the transversal of THashList and THashTable containers will will have to be done without call Hash (and hence be linear rather than logarithmic complexity). You will also see warnings like Error in <ROOT::Internal::TCheckHashRecursiveRemoveConsistency::CheckRecursiveRemove>: The class SomeName overrides TObject::Hash but does not call TROOT::RecursiveRemove in its destructor.; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::Hashvirtual ULong_t Hash() constReturn hash value for this object.Definition TObject.cxx:520; TROOT::RecursiveRemovevoid RecursiveRemove(TObject *obj) overrideRecursively remove this object from the list of Cleanups.Definition TROOT.cxx:2498. Reimplemented in TEnvRec, TNamed, TObjString, TP",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTObject.html:42219,Test,TestBit,42219,doc/master/classTObject.html,https://root.cern,https://root.cern/doc/master/classTObject.html,1,['Test'],['TestBit']
Testability,"Object::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. Long64_tfFromstarting offset of the current content; TProofLog*fLoggerparent TProofLog; TMacro*fMacrocontainer for the log lines; TStringfRolerole (master-submaster-worker); Long64_tfSizebest knowledge of the log file size; Long64_tfToend offset of the current content; static Long64_tfgMaxTransferSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofLogElem(const char* ord, const char* url, TProofLog* logger); Constructor. ~TProofLogElem(); Destructor. Long64_t GetMaxTransferSize(); Get max transfer size. void SetMaxTransferSize(Long64_t maxsz); Set max transfer size. Int_t Retrieve(TProofLog::ERetrieveOpt opt = TProofLog::kTrailing, const char* pattern = 0); Retrieve the content of the associated file. The approximate number; of lines to be retrieved is given by 'lines', with the convention that; 0 means 'all', a positive number means the first 'lines' and a negative; number means the last '-lines'. Default is -1000.; If opt == TProofLog::kGrep only the lines containing 'pattern' are; retrieved (remote grep functionality); to filter out a pattern 'pat' use; pattern = ""-v pat"".; Return 0 on success, -1 in case of any error. void Display(Int_t from = 0, Int_t to = -1); Display the current content starting from line 'from' to line 'to'; inclusive.; A negative value for 'from' indicates lines counted from the end; (tail action); 'to' is ignored in such a ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofLogElem.html:6899,log,logger,6899,root/html602/TProofLogElem.html,https://root.cern,https://root.cern/root/html602/TProofLogElem.html,2,['log'],['logger']
Testability,"Object::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; TList*TVirtualMonitoringWriter::fTmpOpenPhasesTo store open phases when there is not yet an object. private:. TSQLServer*fDBSQL database where to write; Long64_tfMaxBulkSizeMax packet size for insertions; TStringfTableSQL table name; Bool_tfVerboseVerbosity toggle. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TVirtualMonitoringWriter. ←; TSQLMonitoringWriter. Function documentation; TSQLMonitoringWriter(const char* serv, const char* user, const char* pass, const char* table); Constructor. ~TSQLMonitoringWriter(); Destructor. Bool_t SendParameters(TList* values, const char* ); Register query log using the information in the list which is in the form; TParameter(<par>,<value>) or TNamed(<name>,<string>). For bulk sending,; the first entry in the list is an TObjString defining the variable names; in the format; VARname1,VARname2,...; while the other entries are TObjStrings with the multiplets to be sent; VARvalue1,VARvalue2,... The string 'opt' allows the following additional control:; table=[<db>.]<table> allows to insert to a different table from the; one defined at construction (change is not; persistent); if <db> is not specified, the same; db defined at cinstruction is used.; bulk Do a bulk insert; More options can be given concurrently, comma-separated .; The specified table must already have been created in the DB. TSQLMonitoringWriter(const TSQLMonitoringWriter& ). TSQLMonitoringWriter& operator=(const TSQLMonitoringWriter& ). void Verbose(Bool_t onoff); { fVerbose = onoff; }. » Author: J.F. Grosse-Oetringhaus, G.Ganis » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last cha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSQLMonitoringWriter.html:7720,log,log,7720,root/html602/TSQLMonitoringWriter.html,https://root.cern,https://root.cern/root/html602/TSQLMonitoringWriter.html,1,['log'],['log']
Testability,"Object::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Double_t*TMVA::PDEFoam::fAlpha[fDim] Internal parameters of the hyperrectangle; TMVA::PDEFoamCell**TMVA::PDEFoam::fCells[fNCells] Array of ALL cells; TMVA::EDTSeparationTMVA::PDEFoam::fDTSeparationBACKWARDS COMPATIBILITY: split cells according to decision tree logic; Int_tTMVA::PDEFoam::fDimDimension of the integration/simulation space; TMVA::PDEFoamDensityBase*TMVA::PDEFoam::fDistr! distribution of training events; Int_tTMVA::PDEFoam::fEvPerBinMaximum number of effective (wt=1) events per bin; Bool_tTMVA::PDEFoam::fFillFoamWithOrigWeightsBACKWARDS COMPATIBILITY: fill the foam with boost or orig. weights; TMVA::EFoamTypeTMVA::PDEFoam::fFoamTypeBACKWARDS COMPATIBILITY: type of foam; TObjArray*TMVA::PDEFoam::fHistEdgHistograms of wt, one for each cell edge; Int_t*TMVA::PDEFoam::fInhiDiv! [fDim] Flags for inhibiting cell division; Int_tTMVA::PDEFoam::fLastCeIndex of the last cell; TMVA::MsgLogger*TMVA::PDEFoam::fLogger! message logger; Int_t*TMVA::PDEFoam::fMaskDiv! [fDim] Dynamic Mask for cell division; UInt_tTMVA::PDEFoam::fMaxDepthmaximum depth of cell tree; Int_tTMVA::PDEFoam::fNBinNo. of bins in the edge histogram for cell MC exploration; Int_tTMVA::PDEFoam::fNCellsMaximum number of cells; UInt_tTMVA::PDEFoam::fNElementsBACKWARDS COMPATIBILITY: number of variables in every cell; Int_tTMVA::PDEFoam::fNSamplNo. of MC events, when dividing (exploring) cell; TStringTMVA::PDEFoam::fNameName of a given instance of the FOAM class; UInt_tTMVA::PDEFoam::fNminminimal number of events in cell to split cell; Int_tTMVA::PDEFoam::fNoActNumber of active cells; Bool_tTMVA::PDEFoam::fPeekMaxBACKWARDS COMPATIBILITY: peek up cell with max. driver integral for split; TRandom3*TMVA::PDEFoam::fPseRanPointer to user-defined generator of pseudorandom numbers; Double_t*TMVA::PDEFoam::fRvec[fDim] random number vector from r.n. generator fDim+1 m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__PDEFoamEvent.html:10872,log,logger,10872,root/html602/TMVA__PDEFoamEvent.html,https://root.cern,https://root.cern/root/html602/TMVA__PDEFoamEvent.html,6,['log'],['logger']
Testability,"Object::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; voidEditSyst(RooWorkspace* proto, const char* pdfNameChar, map<std::string,double> gammaSyst, map<std::string,double> uniformSyst, map<std::string,double> logNormSyst); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; stringFilePrefixStr(string); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; voidFitModel(RooWorkspace*, string, string, string, bool = false); voidFormatFrameForLikelihood(RooPlot* frame, string XTitle = std::string(""#sigma / #sigma_{SM}""), string YTitle = std::string(""-log likelihood"")); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; RooStats::HistFactory::HistoToWorkspaceFactoryHistoToWorkspaceFactory(); RooStats::HistFactory::HistoToWorkspaceFactoryHistoToWorkspaceFactory(string, string, vector<std::string>, double = 200, double = 20, int = 0, int = 6, TFile* = 0); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMEN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HistFactory__HistoToWorkspaceFactory.html:2856,log,log,2856,root/html534/RooStats__HistFactory__HistoToWorkspaceFactory.html,https://root.cern,https://root.cern/root/html534/RooStats__HistFactory__HistoToWorkspaceFactory.html,1,['log'],['log']
Testability,"Object::GetObjectInfo.; 1915/// Displays the function info (x, function value); 1916/// corresponding to cursor position px,py; 1917 ; 1918char *TF1::GetObjectInfo(Int_t px, Int_t /* py */) const; 1919{; 1920 static char info[64];; 1921 Double_t x = gPad->PadtoX(gPad->AbsPixeltoX(px));; 1922 snprintf(info, 64, ""(x=%g, f=%g)"", x, ((TF1 *)this)->Eval(x));; 1923 return info;; 1924}; 1925 ; 1926 ; 1927////////////////////////////////////////////////////////////////////////////////; 1928/// Return value of parameter number ipar; 1929 ; 1930Double_t TF1::GetParError(Int_t ipar) const; 1931{; 1932 if (ipar < 0 || ipar > GetNpar() - 1) return 0;; 1933 return fParErrors[ipar];; 1934}; 1935 ; 1936 ; 1937////////////////////////////////////////////////////////////////////////////////; 1938/// Return limits for parameter ipar.; 1939 ; 1940void TF1::GetParLimits(Int_t ipar, Double_t &parmin, Double_t &parmax) const; 1941{; 1942 parmin = 0;; 1943 parmax = 0;; 1944 int n = fParMin.size();; 1945 assert(n == int(fParMax.size()) && n <= fNpar);; 1946 if (ipar < 0 || ipar > n - 1) return;; 1947 parmin = fParMin[ipar];; 1948 parmax = fParMax[ipar];; 1949}; 1950 ; 1951 ; 1952////////////////////////////////////////////////////////////////////////////////; 1953/// Return the fit probability; 1954 ; 1955Double_t TF1::GetProb() const; 1956{; 1957 if (fNDF <= 0) return 0;; 1958 return TMath::Prob(fChisquare, fNDF);; 1959}; 1960 ; 1961 ; 1962////////////////////////////////////////////////////////////////////////////////; 1963/// Compute Quantiles for density distribution of this function; 1964///; 1965/// Quantile x_p of a probability distribution Function F is defined as; 1966/// \f[; 1967/// F(x_{p}) = \int_{xmin}^{x_{p}} f dx = p with 0 <= p <= 1.; 1968/// \f]; 1969/// For instance the median \f$ x_{\frac{1}{2}} \f$ of a distribution is defined as that value; 1970/// of the random variable for which the distribution function equals 0.5:; 1971/// \f[; 1972/// F(x_{\frac{1}{2}}) = \prod(x ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TF1_8cxx_source.html:71393,assert,assert,71393,doc/master/TF1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TF1_8cxx_source.html,1,['assert'],['assert']
Testability,"Object::IsFolder() const; virtual Bool_tRooAbsArg::isFundamental() const; Bool_tisHidden() const; virtual Bool_tRooAbsReal::isIdentical(const RooAbsArg& other, Bool_t assumeSameType = kFALSE); virtual Bool_tRooAbsArg::isLValue() const; virtual Bool_tRooAbsReal::isOffsetting() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; Bool_tRooAbsArg::localNoDirtyInhibit() const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsHiddenReal.html:17619,log,logEvalError,17619,root/html534/RooAbsHiddenReal.html,https://root.cern,https://root.cern/root/html534/RooAbsHiddenReal.html,3,['log'],['logEvalError']
Testability,"Object::IsFolder() const; virtual Bool_tRooAbsArg::isFundamental() const; virtual Bool_tRooAbsReal::isIdentical(const RooAbsArg& other, Bool_t assumeSameType = kFALSE); virtual Bool_tRooAbsArg::isLValue() const; virtual Bool_tRooAbsReal::isOffsetting() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; const RooAbsReal&ixF(); voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; Bool_tRooAbsArg::localNoDirtyInhibit() const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsReal*RooAbsMoment::mean(); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooFirstMoment.html:17705,log,logEvalError,17705,root/html534/RooFirstMoment.html,https://root.cern,https://root.cern/root/html534/RooFirstMoment.html,9,['log'],['logEvalError']
Testability,"Object::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TEveRecTrack&operator=(const TEveRecTrack&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; Float_tPt(); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveRecTrack.html:4256,Test,TestBit,4256,root/html528/TEveRecTrack.html,https://root.cern,https://root.cern/root/html528/TEveRecTrack.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"Object::IsSortable() const; Bool_tTObject::IsZombie() const; virtual Int_tLock(); virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); Int_tTVirtualMutex::Release(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Int_tTryLock(); virtual Int_tUnLock(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMutex.html:4480,Test,TestBit,4480,root/html528/TMutex.html,https://root.cern,https://root.cern/root/html528/TMutex.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"Object::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooSharedProperties&operator=(const RooSharedProperties&); Bool_toperator==(const RooSharedProperties& other); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* opts = 0) const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooSharedProperties.html:4550,Test,TestBit,4550,root/html528/RooSharedProperties.html,https://root.cern,https://root.cern/root/html528/RooSharedProperties.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"Object::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TObject&TObject::operator=(const TObject& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); static TGeoVolume*StartGDML(const char* filename); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGDMLParse.html:4327,Test,TestBit,4327,root/html528/TGDMLParse.html,https://root.cern,https://root.cern/root/html528/TGDMLParse.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"Object::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGUnknownWindowHandler&operator=(const TGUnknownWindowHandler&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGUnknownWindowHandler.html:4508,Test,TestBit,4508,root/html530/TGUnknownWindowHandler.html,https://root.cern,https://root.cern/root/html530/TGUnknownWindowHandler.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"Object::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual TSQLRow*Next(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSQLResult&operator=(const TSQLResult&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TSQLResult.html:4713,Test,TestBit,4713,root/html530/TSQLResult.html,https://root.cern,https://root.cern/root/html530/TSQLResult.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"Object::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TRecCmdEvent&operator=(const TRecCmdEvent&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidReplayEvent(Bool_t); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); voidSetText(const char* text); virtual voidTRecEvent::SetTime(TTime t); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TRecCmdEvent.html:4530,Test,TestBit,4530,root/html530/TRecCmdEvent.html,https://root.cern,https://root.cern/root/html530/TRecCmdEvent.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"Object::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TRecExtraEvent&operator=(const TRecExtraEvent&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidReplayEvent(Bool_t); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); voidSetText(TString text); virtual voidTRecEvent::SetTime(TTime t); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TRecExtraEvent.html:6856,Test,TestBit,6856,root/html530/TRecExtraEvent.html,https://root.cern,https://root.cern/root/html530/TRecExtraEvent.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"Object::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidoperator delete(void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); void*OrgAddress(void* addr) const; virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); TObject*Remove(TObject* obj); TObject*Remove(const char* name); voidRemoveAll(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidSetMapAddress(Long_t addr); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidUpdate(TObject* obj = 0); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; static TMapFile*WhichMapFile(void* addr); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMapFile.html:6906,Test,TestBit,6906,root/html530/TMapFile.html,https://root.cern,https://root.cern/root/html530/TMapFile.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"Object::Notify(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooStats::HybridPlot&operator=(const RooStats::HybridPlot&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__HybridPlot.html:5603,Test,TestBit,5603,root/html528/RooStats__HybridPlot.html,https://root.cern,https://root.cern/root/html528/RooStats__HybridPlot.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"Object::Notify(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooStats::SamplingSummary&operator=(const RooStats::SamplingSummary&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); RooStats::SamplingSummarySamplingSummary(); RooStats::SamplingSummarySamplingSummary(RooStats::AcceptanceRegion& ar); RooStats::SamplingSummarySamplingSummary(const RooStats::SamplingSummary&); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp, char* parent); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__SamplingSummary.html:4642,Test,TestBit,4642,root/html526/RooStats__SamplingSummary.html,https://root.cern,https://root.cern/root/html526/RooStats__SamplingSummary.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"Object::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGeoTabManager&operator=(const TGeoTabManager&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetModel(TObject* model); static voidTObject::SetObjectStat(Bool_t stat); voidSetTab(); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetVolTabEnabled(Bool_t flag = kTRUE); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGeoTabManager(TGedEditor* ged); TGeoTabManager(const TGeoTabManager&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoTabManager.html:5450,Test,TestBit,5450,root/html602/TGeoTabManager.html,https://root.cern,https://root.cern/root/html602/TGeoTabManager.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"Object::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooLinkedList&operator=(const RooLinkedList& other); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(const char* opt) const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual Bool_tRemove(TObject* arg); Bool_tReplace(const TObject* oldArg, const TObject* newArg); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidsetHashTableSize(Int_t size); voidSetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); voidSort(Bool_t ascend = kTRUE); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooLinkedList.html:5119,Test,TestBit,5119,root/html530/RooLinkedList.html,https://root.cern,https://root.cern/root/html530/RooLinkedList.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"Object::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooStats::SamplingSummaryLookup&operator=(const RooStats::SamplingSummaryLookup&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); RooStats::SamplingSummaryLookupSamplingSummaryLookup(); RooStats::SamplingSummaryLookupSamplingSummaryLookup(const RooStats::SamplingSummaryLookup&); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__SamplingSummaryLookup.html:4661,Test,TestBit,4661,root/html530/RooStats__SamplingSummaryLookup.html,https://root.cern,https://root.cern/root/html530/RooStats__SamplingSummaryLookup.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"Object::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGeoPolygon&operator=(const TGeoPolygon&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); Double_tSafety(const Double_t* point, Int_t& isegment) const; virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetConvex(Bool_t flag = kTRUE); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetNextIndex(Int_t index = -1); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetXY(Double_t* x, Double_t* y); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoPolygon.html:6281,Test,TestBit,6281,root/html534/TGeoPolygon.html,https://root.cern,https://root.cern/root/html534/TGeoPolygon.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"Object::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TFree&operator=(const TFree&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidReadBuffer(char*& buffer); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetFirst(Long64_t first); voidSetLast(Long64_t last); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; Int_tSizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TFree(); TFree(const TFree&); TFree(TList* lfree, Long64_t first, Long64_t last); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TFree.html:5123,Test,TestBit,5123,root/html602/TFree.html,https://root.cern,https://root.cern/root/html602/TFree.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"Object::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual TStringoperator TString(); virtual RooAbsArg&operator=(const char* newValue); RooStringVar&operator=(const RooStringVar&); Bool_tRooAbsString::operator==(const char*) const; virtual Bool_tRooAbsString::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidRooAbsArg::Print(Option_t* options = 0) const; virtual voidRooAbsArg::printAddress(ostream& os) const; virtual voidRooAbsArg::printArgs(ostream& os) const; virtual voidRooAbsArg::printClassName(ostream& os) const; voidRooAbsArg::printCompactTree(const char* indent = """", const char* fileName = 0, const char* namePat = 0, RooAbsArg* client = 0); voidRooAbsArg::printCompactTree(ostream& os, const char* indent = """", const char* namePat = 0, RooAbsArg* client = 0); virtual voidRooAbsArg::printCompactTreeHook(ostream& os, const char* ind = """"); voidRooAbsArg::printComponentTree(const char* indent = """", const char* namePat = 0, Int_t nLevel = 999); voidRooAbsArg::printDirty(Bool_t depth = kTRUE) const; virtual voidRooPrintable::printExtras(ostream& os) const; virtual voidRooAbsArg::printMetaArgs(ostream&) const; v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStringVar.html:10423,test,testArg,10423,root/html602/RooStringVar.html,https://root.cern,https://root.cern/root/html602/RooStringVar.html,2,['test'],['testArg']
Testability,"Object::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; voidPrintTree(ostream& = std::cout); voidPrintXML(string Directory = """", string NewOutputPrefix = """"); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidSetBinHigh(int BinHigh); voidSetBinLow(int BinLow); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetExportOnly(bool ExportOnly); voidSetFunctionObjects(vector<RooStats::HistFactory::PreprocessFunction> objects); voidSetLumi(double Lumi); voidSetLumiRelErr(double RelErr); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidSetOutputFilePrefix(const string& prefix); voidSetParamValue(const string& param, double value); voidSetPOI(const string& POI); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidwriteToFile(TFile* file).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HistFactory__Measurement.html:6961,Test,TestBit,6961,root/html534/RooStats__HistFactory__Measurement.html,https://root.cern,https://root.cern/root/html534/RooStats__HistFactory__Measurement.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"Object::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); Int_tTUnfold::RegularizeBins(int start, int step, int nbin, TUnfold::ERegMode regmode); Int_tTUnfold::RegularizeBins2D(int start_bin, int step1, int nbin1, int step2, int nbin2, TUnfold::ERegMode regmode); Int_tTUnfold::RegularizeCurvature(int left_bin, int center_bin, int right_bin, Double_t scale_left = 1.0, Double_t scale_right = 1.0); Int_tTUnfold::RegularizeDerivative(int left_bin, int right_bin, Double_t scale = 1.0); Int_tTUnfold::RegularizeSize(int bin, Double_t scale = 1.0); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual Int_tTUnfold::ScanLcurve(Int_t nPoint, Double_t tauMin, Double_t tauMax, TGraph** lCurve, TSpline** logTauX = 0, TSpline** logTauY = 0); voidTUnfold::SetBias(const TH1* bias); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTUnfold::SetConstraint(TUnfold::EConstraint constraint); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual Int_tSetInput(const TH1* hist_y, Double_t scaleBias = 0.0, Double_t oneOverZeroError = 0.0); static voidTObject::SetObjectStat(Bool_t stat); voidSetTauError(Double_t delta_tau); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); voidSubtractBackground(const TH1* hist_bgr, const char* name, Double_t scale = 1.0, Double_t scale_error = 0.0); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TUnfoldSys.html:12437,log,logTauX,12437,root/html530/TUnfoldSys.html,https://root.cern,https://root.cern/root/html530/TUnfoldSys.html,4,['log'],"['logTauX', 'logTauY']"
Testability,"Object::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidReflectX(Bool_t leftside, Bool_t rotonly = kFALSE); virtual voidReflectY(Bool_t leftside, Bool_t rotonly = kFALSE); virtual voidReflectZ(Bool_t leftside, Bool_t rotonly = kFALSE); virtual voidTGeoMatrix::RegisterYourself(); voidTObject::ResetBit(UInt_t f); virtual voidRotateX(Double_t angle); virtual voidRotateY(Double_t angle); virtual voidRotateZ(Double_t angle); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTGeoMatrix::SetDefaultName(); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetDx(Double_t dx); virtual voidSetDy(Double_t dy); virtual voidSetDz(Double_t dz); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidSetRotation(const Double_t* matrix); voidSetScale(const Double_t* scale); voidTGeoMatrix::SetShared(Bool_t flag = kTRUE); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidSetTranslation(const Double_t* vect); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoHMatrix.html:13868,Test,TestBit,13868,root/html534/TGeoHMatrix.html,https://root.cern,https://root.cern/root/html534/TGeoHMatrix.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"Object::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); static voidSetAddressRange(Long64_t nbytes = 0, Long64_t first = 0); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidSetEntryRange(Long64_t nentries = 0, Long64_t first = 0); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); static voidShow(Double_t update = 0.10000000000000001, Int_t nbigleaks = 20, const char* fname = ""*""); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TMemStatShow(); TMemStatShow(const TMemStatShow&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMemStatShow.html:8175,Test,TestBit,8175,root/html602/TMemStatShow.html,https://root.cern,https://root.cern/root/html602/TMemStatShow.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"Object::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); virtual voidTStreamerElement::SetArrayDim(Int_t dim); voidSetBaseVersion(Int_t v); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTStreamerElement::SetMaxIndex(Int_t dim, Int_t max); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); voidSetNewBaseClass(TClass* cl); virtual voidTStreamerElement::SetNewClass(TClass* cl); virtual voidTStreamerElement::SetNewType(Int_t dtype); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTStreamerElement::SetOffset(Int_t offset); virtual voidTStreamerElement::SetSize(Int_t dsize); virtual voidTStreamerElement::SetStreamer(TMemberStreamer* streamer); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTStreamerElement::SetTObjectOffset(Int_t tobjoffset); virtual voidTStreamerElement::SetType(Int_t dtype); virtual voidTStreamerElement::SetTypeName(const char* name); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidUpdate(const TClass* oldClass, TClass* newClass); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; Int_tWriteBuffer(TBuffer& b, char* pointer).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TStreamerBase.html:6516,Test,TestBit,6516,root/html528/TStreamerBase.html,https://root.cern,https://root.cern/root/html528/TStreamerBase.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"Object::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetCLsCleanupThreshold(Double_t th); virtual voidSetConfidenceLevel(Double_t cl); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetInterpolationOption(RooStats::HypoTestInverterResult::InterpolOption_t opt); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetTestSize(Double_t size); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); RooStats::SimpleIntervalRooStats::SimpleInterval::SimpleInterval(const char* name = 0); RooStats::SimpleIntervalRooStats::SimpleInterval::SimpleInterval(const RooStats::SimpleInterval&); RooStats::SimpleIntervalRooStats::SimpleInterval::SimpleInterval(const RooStats::SimpleInterval& other, const char* name); RooStats::SimpleIntervalRooStats::SimpleInterval::SimpleInterval(const char* name, const RooRealVar& var, Double_t lower, Double_t upper, Double_t cl); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Double_tUpperLimit(); Double_tUpperLimitEstimatedError(); voidUseCLs(bool on = true); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HypoTestInverterResult.html:7579,Test,TestBit,7579,root/html534/RooStats__HypoTestInverterResult.html,https://root.cern,https://root.cern/root/html534/RooStats__HypoTestInverterResult.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"Object::SetBit(UInt_t f, Bool_t set); voidTGeoMatrix::SetDefaultName(); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTGeoCombiTrans::SetDx(Double_t dx); virtual voidTGeoCombiTrans::SetDy(Double_t dy); virtual voidTGeoCombiTrans::SetDz(Double_t dz); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidTGeoCombiTrans::SetRotation(const TGeoRotation& other); voidTGeoCombiTrans::SetRotation(const TGeoRotation* rot); voidSetScale(Double_t* scale); voidSetScale(Double_t sx, Double_t sy, Double_t sz); voidTGeoMatrix::SetShared(Bool_t flag = kTRUE); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidTGeoCombiTrans::SetTranslation(const TGeoTranslation& tr); voidTGeoCombiTrans::SetTranslation(Double_t* vect); voidTGeoCombiTrans::SetTranslation(Double_t dx, Double_t dy, Double_t dz); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGeoGenTrans(); TGeoGenTrans(const char* name); TGeoGenTrans(const TGeoGenTrans&); TGeoGenTrans(Double_t dx, Double_t dy, Double_t dz, Double_t sx, Double_t sy, Double_t sz, TGeoRotation* rot); TGeoGenTrans(const char* name, Double_t dx, Double_t dy, Double_t dz, Double_t sx, Double_t sy, Double_t sz, TGeoRotation* rot); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoGenTrans.html:13787,Test,TestBit,13787,root/html602/TGeoGenTrans.html,https://root.cern,https://root.cern/root/html602/TGeoGenTrans.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"Object::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillStyle(Style_t fstyle); virtual voidSetLabelColor(Int_t labelcolor)MENU ; virtual voidSetLabelFont(Int_t labelfont)MENU ; virtual voidSetLabelOffset(Float_t labeloffset)MENU ; virtual voidSetLabelSize(Float_t labelsize)MENU ; virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidSetLineColor(Color_t linecolor)MENU ; virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidSetLineWidth(Width_t linewidth)MENU ; virtual voidSetName(const char* name = """")MENU ; static voidTObject::SetObjectStat(Bool_t stat); virtual voidTPave::SetOption(Option_t* option = ""br""); virtual voidTPave::SetShadowColor(Int_t color)MENU ; virtual voidSetTitleOffset(Float_t titleoffset = 1)MENU ; virtual voidSetTitleSize(Float_t titlesize)MENU ; virtual voidTBox::SetToolTipText(const char* text, Long_t delayms = 1000); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTBox::SetX1(Double_t x1); virtual voidTPave::SetX1NDC(Double_t x1); virtual voidTBox::SetX2(Double_t x2); virtual voidTPave::SetX2NDC(Double_t x2); virtual voidTBox::SetY1(Double_t y1); virtual voidTPave::SetY1NDC(Double_t y1); virtual voidTBox::SetY2(Double_t y2); virtual voidTPave::SetY2NDC(Double_t y2); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidUnZoom()MENU ; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TPaletteAxis.html:9047,Test,TestBit,9047,root/html530/TPaletteAxis.html,https://root.cern,https://root.cern/root/html530/TPaletteAxis.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"Object::SetDtorOnly(void* obj); virtual voidSetEMail(const char* value = 0, const char* description = 0); virtual voidSetExecutable(const char* value = 0, const char* description = 0); virtual voidSetInputDataList(const char* list = ""collection.xml"", const char* description = 0); virtual voidSetInputDataListFormat(const char* format = ""xml-single"", const char* description = 0); virtual voidSetJobTag(const char* jobtag = 0, const char* description = 0); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetOutputDirectory(const char* value = 0, const char* description = 0); virtual voidSetPrice(UInt_t price = 1, const char* description = 0); virtual voidSetSplitArguments(const char* splitarguments = 0, const char* description = 0); virtual voidSetSplitMode(const char* value, UInt_t maxnumberofinputfiles = 0, UInt_t maxinputfilesize = 0, const char* d1 = 0, const char* d2 = 0, const char* d3 = 0); virtual voidSetTTL(UInt_t ttl = 72000, const char* description = 0); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidSetValidationCommand(const char* value, const char* description = 0); voidSetValue(const char* key, const char* value); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; k",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGridJDL.html:6581,Test,TestBit,6581,root/html534/TGridJDL.html,https://root.cern,https://root.cern/root/html534/TGridJDL.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"Object::SetDtorOnly(void* obj); virtual voidSetEditable(Bool_t editable = kTRUE)TOGGLE GETTER ; virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillStyle(Style_t fstyle); virtual voidSetHistogram(TH1* h); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidTAttMarker::SetMarkerAttributes()MENU ; virtual voidTAttMarker::SetMarkerColor(Color_t tcolor = 1); virtual voidTAttMarker::SetMarkerSize(Size_t msize = 1); virtual voidTAttMarker::SetMarkerStyle(Style_t mstyle = 1); virtual voidSetMaximum(Double_t maximum = -1111)MENU ; virtual voidSetMinimum(Double_t minimum = -1111)MENU ; virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPoint(Int_t i, Double_t x, Double_t y); virtual voidSetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidSort(Bool_t (*)(const TGraph*, Int_t, Int_t) greater = &TGraph::CompareX, Bool_t ascending = kTRUE, Int_t low = 0, Int_t high = -1111); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidUseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidZero(Int_t& k, Double_t AZ, Double_t BZ, Double_t E2, Double_t& X, Double_t& Y, Int_t maxiterations).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGraph.html:10752,Test,TestBit,10752,root/html528/TGraph.html,https://root.cern,https://root.cern/root/html528/TGraph.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"Object::SetDtorOnly(void* obj); virtual voidSetErrmsgcallback(void*) const; virtual Bool_tSetErrorMessages(Bool_t enable = kTRUE); virtual voidSetGetline(const char *(*)(const char* prompt) getlineFunc, void (*)(const char* line) histaddFunc); virtual voidSetgvp(Long_t) const; virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetProcessLineLock(Bool_t lock = kTRUE); virtual voidSetRTLD_LAZY() const; virtual voidSetRTLD_NOW() const; virtual voidSetTempLevel(int) const; virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTypedefInfo_Delete(TypedefInfo_t*) const; virtual TypedefInfo_t*TypedefInfo_Factory() const; virtual TypedefInfo_t*TypedefInfo_FactoryCopy(TypedefInfo_t*) const; virtual voidTypedefInfo_Init(TypedefInfo_t*, const char*) const; virtual boolTypedefInfo_IsValid(TypedefInfo_t*) const; virtual const char*TypedefInfo_Name(TypedefInfo_t*) const; virtual Long_tTypedefInfo_Property(TypedefInfo_t*) const; virtual intTypedefInfo_Size(TypedefInfo_t*) const; virtual const char*TypedefInfo_Title(TypedefInfo_t*) const; virtual const char*TypedefInfo_TrueName(TypedefInfo_t*) const; virtual voidTypeInfo_Delete(TypeInfo_t*) const; virtual TypeInfo_t*TypeInfo_Factory() const; virtual TypeInfo_t*TypeInfo_Factory(G__value*) const; virtual TypeInfo_t*TypeInfo_FactoryCopy(TypeInfo_t*) const; virtual voidTypeInfo_Init(TypeInfo_t*, const char*) const; virtual boolTypeInfo_IsValid(TypeInfo_t*) const; virtual const char*TypeInfo_Name(TypeInfo_t*) const; virtual Long_tTypeInfo_Pro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TInterpreter.html:14869,Test,TestBits,14869,root/html530/TInterpreter.html,https://root.cern,https://root.cern/root/html530/TInterpreter.html,2,['Test'],['TestBits']
Testability,"Object::SetDtorOnly(void* obj); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); Double_tTestTreeQuality(TMVA::DecisionTree* dt); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::MethodBase::WriteEvaluationHistosToFile(TMVA::Types::ETreeType treetype); virtual voidTMVA::MethodBase::WriteMonitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodDT.html:14390,Test,TestClassification,14390,root/html528/TMVA__MethodDT.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodDT.html,3,['Test'],"['TestClassification', 'TestMulticlass', 'TestRegression']"
Testability,"Object::SetDtorOnly(void* obj); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); voidSetNeuronInputCalculator(TMVA::TNeuronInput* inputCalculator); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::MethodBase::WriteEvaluationHistosToFile(TMVA::Types::ETreeType treetype); virtual voidWriteMonitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodANNBase.html:11337,Test,TestBits,11337,root/html528/TMVA__MethodANNBase.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodANNBase.html,4,['Test'],"['TestBits', 'TestClassification', 'TestMulticlass', 'TestRegression']"
Testability,"Object::SetDtorOnly(void* obj); voidTParticle::SetFirstDaughter(int code); voidTParticle::SetFirstMother(int code); voidTParticle::SetLastDaughter(int code); voidTParticle::SetLastMother(int code); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); voidTParticle::SetMomentum(const TLorentzVector& p); voidTParticle::SetMomentum(Double_t px, Double_t py, Double_t pz, Double_t e); voidTParticle::SetMother(int i, int code); static voidTObject::SetObjectStat(Bool_t stat); voidTParticle::SetPdgCode(Int_t pdg); voidTParticle::SetPolarisation(const TVector3& v); voidTParticle::SetPolarisation(Double_t polx, Double_t poly, Double_t polz); voidTParticle::SetProductionVertex(const TLorentzVector& v); voidTParticle::SetProductionVertex(Double_t vx, Double_t vy, Double_t vz, Double_t t); voidTParticle::SetStatusCode(int status); virtual voidTObject::SetUniqueID(UInt_t uid); voidTParticle::SetWeight(Float_t weight = 1); virtual voidShowMembers(TMemberInspector&); virtual voidTParticle::Sizeof3D() const; Int_tTParticle::Strangeness() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Double_tTParticle::T() const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Double_tTParticle::Theta() const; virtual voidTObject::UseCurrentStyle(); Double_tTParticle::Vx() const; Double_tTParticle::Vy() const; Double_tTParticle::Vz() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; Double_tTParticle::Y() const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveMCTrack.html:7186,Test,TestBit,7186,root/html534/TEveMCTrack.html,https://root.cern,https://root.cern/root/html534/TEveMCTrack.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"Object::SetObjectStat(Bool_t stat); virtual voidTSystem::SetObjExt(const char* objExt); virtual voidTSystem::SetProgname(const char* name); virtual intTSystem::SetSockOpt(int sock, int kind, int val); virtual voidTSystem::SetSoExt(const char* soExt); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTSystem::ShowOutput(RedirectHandle_t* h); virtual Int_tTNamed::Sizeof() const; virtual voidTSystem::Sleep(UInt_t milliSec); virtual TStringTSystem::SplitAclicMode(const char* filename, TString& mode, TString& args, TString& io) const; virtual voidTSystem::StackTrace(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual intTSystem::Symlink(const char* from, const char* to); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTSystem::Syslog(ELogLevel level, const char* mess); virtual const char*TSystem::TempDirectory() const; virtual FILE*TSystem::TempFileName(TString& base, const char* dir = 0); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TWebSystem(); TWebSystem(const TWebSystem&); virtual intTSystem::Umask(Int_t mask); virtual const char*TSystem::UnixPathName(const char* unixpathname); virtual Int_tUnlink(const char* path); virtual voidTSystem::Unload(const char* module); virtual voidTSystem::Unsetenv(const char* name); virtual voidTObject::UseCurrentStyle(); virtual intTSystem::Utime(const char* file, Long_t modtime, Long_t actime); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual char*TSystem::Which(const char* search, const char* file, EAccessMode mode = kFileExists); virtual const char*TSystem::WorkingDirectory(); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TWebSystem.html:14128,Test,TestBit,14128,root/html602/TWebSystem.html,https://root.cern,https://root.cern/root/html602/TWebSystem.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"Object::SetUniqueID(UInt_t uid); voidRooAbsReal::setUnit(const char* unit); voidRooAbsArg::setValueDirty() const; TIterator*RooAbsArg::shapeClientIterator() const; RooFIterRooAbsArg::shapeClientMIterator() const; virtual voidShowMembers(TMemberInspector& insp); RooMoment*RooAbsReal::sigma(RooRealVar& obs); RooMoment*RooAbsReal::sigma(RooRealVar& obs, const RooArgSet& nset); virtual Int_tTNamed::Sizeof() const; RooNumGenConfig*RooAbsPdf::specialGeneratorConfig() const; RooNumGenConfig*RooAbsPdf::specialGeneratorConfig(Bool_t createOnTheFly); RooNumIntConfig*RooAbsReal::specialIntegratorConfig() const; RooNumIntConfig*RooAbsReal::specialIntegratorConfig(Bool_t createOnTheFly); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); const map<std::string,std::string>&RooAbsArg::stringAttributes() const; RooAbsPdf*sumPdf(const RooArgSet* nset); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tRooAbsPdf::traceEvalHook(Double_t value) const; Bool_tRooAbsPdf::traceEvalPdf(Double_t value) const; const set<std::string>&RooAbsArg::transientAttributes() const; voidRooAbsArg::treeNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t doBranch = kTRUE, Bool_t doLeaf = kTRUE, Bool_t valueOnly = kFALSE, Bool_t recurseNonDerived = kFALSE) const; voidRooAbsArg::unRegisterCache(RooAbsCache& cache); virtual voidTObject::UseCurrentStyle(); TIterator*RooAbsArg::valueClientIterator() const; RooFIterRooAbsArg::valueClientMIterator() const; static voidRooAbsArg::verboseDirty(Bool_t flag); static intRooAbsPdf::verboseEval(); static voidRooAbsPdf::verboseEval(Int_t stat); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidRooAbsR",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooMomentMorph.html:29741,Test,TestBits,29741,root/html532/RooMomentMorph.html,https://root.cern,https://root.cern/root/html532/RooMomentMorph.html,1,['Test'],['TestBits']
Testability,"Object::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; Float_tGetAverageNeighborsValue(TMVA::PDEFoam*, vector<Float_t>&, TMVA::ECellValue); voidTObject::MakeZombie(); Float_tWeightLinNeighbors(TMVA::PDEFoam*, vector<Float_t>&, TMVA::ECellValue, Bool_t). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TMVA::MsgLogger*TMVA::PDEFoamKernelBase::fLogger! message logger. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamKernelLinN(); Default constructor for streamer. PDEFoamKernelLinN(const TMVA::PDEFoamKernelLinN& ); Copy constructor. Float_t Estimate(TMVA::PDEFoam* , vector<Float_t>& , TMVA::ECellValue ); Linear neighbors kernel estimator. It returns the cell value; 'cv', corresponding to the event vector 'txvec' (in foam; coordinates) linear weighted by the cell values of the neighbor; cells. Parameters:. - foam - the pdefoam to search in. - txvec - event vector in foam coordinates [0,1]. - cv - cell value to estimate. Float_t WeightLinNeighbors(TMVA::PDEFoam* , vector<Float_t>& , TMVA::ECellValue , Bool_t ); Returns the cell value, corresponding to 'txvec' (foam; coordinates [0,1]), weighted by the neighbor cells via a linear; function. Parameters:; - foam - the foam to search in. - txvec - event vector, transformed into foam coordinates [0,1]. - cv - cell value to be",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__PDEFoamKernelLinN.html:5721,log,logger,5721,root/html530/TMVA__PDEFoamKernelLinN.html,https://root.cern,https://root.cern/root/html530/TMVA__PDEFoamKernelLinN.html,3,['log'],['logger']
Testability,"Object::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. voidReset(). Data Members; public:. enum EStatusBits { kMultiply; kMax; kMin; kFirst; kLast; kIsConst; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. TStringfName; doublefVal. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Int_t TParameter<AParamType> Merge(TCollection* in); Merge objects in the list.; Returns the number of objects that were in the list. void Reset(). const char * GetName() const; { return fName; }. const AParamType & GetVal() const; { return fVal; }. Bool_t IsConst() const; { return (TestBit(kIsConst) ? kTRUE : kFALSE); }. void SetVal(const double& val); { fVal = val; }. void SetMergeMode(char mergemode = '+'); Merging modes:; '+' addition ('OR' for booleans) [default]; '*' multiplication ('AND' for booleans); 'M' maximum ('OR' for booleans); 'm' minimum ('AND' for booleans); 'f' first value; 'l' last value. ULong_t Hash() const; { return fName.Hash(); }. Bool_t IsSortable() const; { return kTRUE; }. Int_t Compare(const TObject* obj) const; Compare two TParameter objects. Returns 0 when equal, -1 when this is; smaller and +1 when bigger (like strcmp). void ls(Option_t* ) const; Print this parameter content. void Print(Option_t* ) const; Print this parameter content. cout << IsA(). » Author: Maarten Ballintijn 21/06/2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-03-14 16:46; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general plea",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TParameter_double_.html:6001,Test,TestBit,6001,root/html534/TParameter_double_.html,https://root.cern,https://root.cern/root/html534/TParameter_double_.html,1,['Test'],['TestBit']
Testability,"Object::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. RooAbsPdf*fBModelThe pdf of the background model; RooAbsData*fDatapointer to the data sets; boolfGenerateBinnedFlag to control binned generation; unsigned intfNToysnumber of Toys MC; const RooArgSet*fNuisanceParametersCollection of the nuisance parameters in the model; RooArgList*fObservablesCollection of the observables of the model; RooAbsPdf*fPriorPdfPrior PDF of the nuisance parameters; RooAbsPdf*fSbModelThe pdf of the signal+background model; unsigned intfTestStatisticsIdxIndex of the test statistics to use; boolfTmpDoExtended; boolfUsePriorPdfuse a prior for nuisance parameters. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; HybridCalculatorOriginal(const char* name = 0); constructor with name and title; set default parameters. HybridCalculatorOriginal(RooAbsPdf& sb_model, RooAbsPdf& b_model, RooArgList& observables, const RooArgSet* nuisance_parameters = 0, RooAbsPdf* prior_pdf = 0, bool GenerateBinned = false, int testStatistics = 1, int ntoys = 1000); HybridCalculatorOriginal constructor without specifying a data set; the user need to specify the models in the S+B case and B-only case,; the list of observables of the model(s) (for MC-generation), the list of parameters; that are marginalised and the prior distribution of t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__HybridCalculatorOriginal.html:10995,test,test,10995,root/html602/RooStats__HybridCalculatorOriginal.html,https://root.cern,https://root.cern/root/html602/RooStats__HybridCalculatorOriginal.html,2,['test'],['test']
Testability,"Object::kIsReferenced; static TParameter<bool>::EStatusBitskLast; static TParameter<bool>::EStatusBitskMax; static TParameter<bool>::EStatusBitskMin; static TParameter<bool>::EStatusBitskMultiply; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. TStringfName; boolfVal. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Int_t TParameter<AParamType> Merge(TCollection* in); Merge objects in the list.; Returns the number of objects that were in the list. void Reset(). const char * GetName() const; { return fName; }. const AParamType & GetVal() const; { return fVal; }. Bool_t IsConst() const; { return (TestBit(kIsConst) ? kTRUE : kFALSE); }. void SetVal(const bool& val); { fVal = val; }. void SetMergeMode(char mergemode = '+'); Merging modes:; '+' addition ('OR' for booleans) [default]; '*' multiplication ('AND' for booleans); 'M' maximum ('OR' for booleans); 'm' minimum ('AND' for booleans); 'f' first value; 'l' last value. ULong_t Hash() const; { return fName.Hash(); }. Bool_t IsSortable() const; { return kTRUE; }. Int_t Compare(const TObject* obj) const; Compare two TParameter objects. Returns 0 when equal, -1 when this is; smaller and +1 when bigger (like strcmp). void ls(Option_t* ) const; Print this parameter content. void Print(Option_t* ) const; Print this parameter content. std::cout << IsA(). » Author: Maarten Ballintijn 21/06/2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-02 14:02; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TParameter_bool_.html:6549,Test,TestBit,6549,root/html602/TParameter_bool_.html,https://root.cern,https://root.cern/root/html602/TParameter_bool_.html,1,['Test'],['TestBit']
Testability,"Object::kIsReferenced; static TParameter<bool>::EStatusBitskLast; static TParameter<bool>::EStatusBitskMax; static TParameter<bool>::EStatusBitskMin; static TParameter<bool>::EStatusBitskMultiply; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. TStringfName; boolfVal. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Int_t TParameter<AParamType> Merge(TCollection* in); Merge objects in the list.; Returns the number of objects that were in the list. void Reset(). const char * GetName() const; { return fName; }. const AParamType & GetVal() const; { return fVal; }. Bool_t IsConst() const; { return (TestBit(kIsConst) ? kTRUE : kFALSE); }. void SetVal(const bool& val); { fVal = val; }. void SetMergeMode(char mergemode = '+'); Merging modes:; '+' addition ('OR' for booleans) [default]; '*' multiplication ('AND' for booleans); 'M' maximum ('OR' for booleans); 'm' minimum ('AND' for booleans); 'f' first value; 'l' last value. ULong_t Hash() const; { return fName.Hash(); }. Bool_t IsSortable() const; { return kTRUE; }. Int_t Compare(const TObject* obj) const; Compare two TParameter objects. Returns 0 when equal, -1 when this is; smaller and +1 when bigger (like strcmp). void ls(Option_t* ) const; Print this parameter content. void Print(Option_t* ) const; Print this parameter content. std::cout << IsA(). » Author: Maarten Ballintijn 21/06/2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-02 16:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TParameter_bool_.html:6549,Test,TestBit,6549,root/html604/TParameter_bool_.html,https://root.cern,https://root.cern/root/html604/TParameter_bool_.html,1,['Test'],['TestBit']
Testability,"Object::kIsReferenced; static TParameter<long>::EStatusBitskLast; static TParameter<long>::EStatusBitskMax; static TParameter<long>::EStatusBitskMin; static TParameter<long>::EStatusBitskMultiply; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. TStringfName; longfVal. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Int_t TParameter<AParamType> Merge(TCollection* in); Merge objects in the list.; Returns the number of objects that were in the list. void Reset(). const char * GetName() const; { return fName; }. const AParamType & GetVal() const; { return fVal; }. Bool_t IsConst() const; { return (TestBit(kIsConst) ? kTRUE : kFALSE); }. void SetVal(const long& val); { fVal = val; }. void SetMergeMode(char mergemode = '+'); Merging modes:; '+' addition ('OR' for booleans) [default]; '*' multiplication ('AND' for booleans); 'M' maximum ('OR' for booleans); 'm' minimum ('AND' for booleans); 'f' first value; 'l' last value. ULong_t Hash() const; { return fName.Hash(); }. Bool_t IsSortable() const; { return kTRUE; }. Int_t Compare(const TObject* obj) const; Compare two TParameter objects. Returns 0 when equal, -1 when this is; smaller and +1 when bigger (like strcmp). void ls(Option_t* ) const; Print this parameter content. void Print(Option_t* ) const; Print this parameter content. std::cout << IsA(). » Author: Maarten Ballintijn 21/06/2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-02 14:02; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TParameter_long_.html:6549,Test,TestBit,6549,root/html602/TParameter_long_.html,https://root.cern,https://root.cern/root/html602/TParameter_long_.html,1,['Test'],['TestBit']
Testability,"Object::kIsReferenced; static TParameter<long>::EStatusBitskLast; static TParameter<long>::EStatusBitskMax; static TParameter<long>::EStatusBitskMin; static TParameter<long>::EStatusBitskMultiply; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. TStringfName; longfVal. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Int_t TParameter<AParamType> Merge(TCollection* in); Merge objects in the list.; Returns the number of objects that were in the list. void Reset(). const char * GetName() const; { return fName; }. const AParamType & GetVal() const; { return fVal; }. Bool_t IsConst() const; { return (TestBit(kIsConst) ? kTRUE : kFALSE); }. void SetVal(const long& val); { fVal = val; }. void SetMergeMode(char mergemode = '+'); Merging modes:; '+' addition ('OR' for booleans) [default]; '*' multiplication ('AND' for booleans); 'M' maximum ('OR' for booleans); 'm' minimum ('AND' for booleans); 'f' first value; 'l' last value. ULong_t Hash() const; { return fName.Hash(); }. Bool_t IsSortable() const; { return kTRUE; }. Int_t Compare(const TObject* obj) const; Compare two TParameter objects. Returns 0 when equal, -1 when this is; smaller and +1 when bigger (like strcmp). void ls(Option_t* ) const; Print this parameter content. void Print(Option_t* ) const; Print this parameter content. std::cout << IsA(). » Author: Maarten Ballintijn 21/06/2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-02 16:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TParameter_long_.html:6549,Test,TestBit,6549,root/html604/TParameter_long_.html,https://root.cern,https://root.cern/root/html604/TParameter_long_.html,1,['Test'],['TestBit']
Testability,"Object::ls(Option_t* option = """") const; voidMake(Double_t, Double_t&); voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TFoamMaxwt&operator=(const TFoamMaxwt&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidReset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TFoamMaxwt.html:4774,Test,TestBit,4774,root/html534/TFoamMaxwt.html,https://root.cern,https://root.cern/root/html534/TFoamMaxwt.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"Object::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TH2PolyBin&operator=(const TH2PolyBin&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetChanged(Bool_t flag); voidSetContent(Double_t content); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TH2PolyBin.html:4697,Test,TestBit,4697,root/html530/TH2PolyBin.html,https://root.cern,https://root.cern/root/html530/TH2PolyBin.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"Object::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGeoHelix&operator=(const TGeoHelix&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); voidResetStep(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetCharge(Int_t charge); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetField(Double_t bx, Double_t by, Double_t bz, Bool_t is_normalized = kTRUE); voidSetHelixStep(Double_t hstep); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetXYcurvature(Double_t curvature); virtual voidShowMembers(TMemberInspector& insp); voidStep(Double_t step); Double_tStepToPlane(Double_t* point, Double_t* norm); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidUpdateHelix(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGeoHelix.html:6177,Test,TestBit,6177,root/html530/TGeoHelix.html,https://root.cern,https://root.cern/root/html530/TGeoHelix.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"Object::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TQpDataBase&operator=(const TQpDataBase& source); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidPutAIntoAt(TMatrixDBase& M, Int_t row, Int_t col); virtual voidPutCIntoAt(TMatrixDBase& M, Int_t row, Int_t col); virtual voidPutQIntoAt(TMatrixDBase& M, Int_t row, Int_t col); virtual voidQmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TQpDataBase.html:6018,Test,TestBit,6018,root/html534/TQpDataBase.html,https://root.cern,https://root.cern/root/html534/TQpDataBase.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"Object::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TQpDataDens&operator=(const TQpDataDens& source); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* opt = """") const; virtual voidPutAIntoAt(TMatrixDBase& M, Int_t row, Int_t col); virtual voidPutCIntoAt(TMatrixDBase& M, Int_t row, Int_t col); virtual voidPutQIntoAt(TMatrixDBase& M, Int_t row, Int_t col); virtual voidQmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TQpDataDens.html:5796,Test,TestBit,5796,root/html528/TQpDataDens.html,https://root.cern,https://root.cern/root/html528/TQpDataDens.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"Object::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Long_tProperty() const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetClass(TClass* cl); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; TBaseClass(BaseClassInfo_t* info = 0, TClass* cl = 0); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TBaseClass.html:5129,Test,TestBit,5129,root/html602/TBaseClass.html,https://root.cern,https://root.cern/root/html602/TBaseClass.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"Object::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TControlBarButton&operator=(const TControlBarButton&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidSetAction(const char* action); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidSetType(const char* type); virtual voidSetType(Int_t type); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TControlBarButton.html:5045,Test,TestBit,5045,root/html530/TControlBarButton.html,https://root.cern,https://root.cern/root/html530/TControlBarButton.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"Object::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TFITSHDU&operator=(const TFITSHDU&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* opt = """") const; virtual Int_tTObject::Read(const char* name); TH1*ReadAsHistogram(); TImage*ReadAsImage(Int_t layer = 0, TImagePalette* pal = 0); TMatrixD*ReadAsMatrix(Int_t layer = 0, Option_t* opt = """"); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TFITSHDU.html:5732,Test,TestBit,5732,root/html530/TFITSHDU.html,https://root.cern,https://root.cern/root/html530/TFITSHDU.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"Object::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TVirtualMonitoringReader&operator=(const TVirtualMonitoringReader&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual voidProxyValues(const char*, const char*, const char*, const char*, Long_t, Long_t, Long_t); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TVirtualMonitoringReader.html:5132,Test,TestBit,5132,root/html530/TVirtualMonitoringReader.html,https://root.cern,https://root.cern/root/html530/TVirtualMonitoringReader.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"Object::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; voidTProcessID::PutObjectWithID(TObject* obj, UInt_t uid = 0); virtual Int_tTObject::Read(const char* name); virtual voidTProcessID::RecursiveRemove(TObject* obj); voidRemoveUUID(UInt_t number); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTProcessID::SetObjectCount(UInt_t number); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProcessUUID.html:6850,Test,TestBit,6850,root/html534/TProcessUUID.html,https://root.cern,https://root.cern/root/html534/TProcessUUID.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"Object::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TFoamVect&operator*=(const Double_t&); TFoamVectoperator+(const TFoamVect&); TFoamVect&operator+=(const TFoamVect&); TFoamVectoperator-(const TFoamVect&); TFoamVect&operator-=(const TFoamVect&); TFoamVect&operator=(const TFoamVect&); TFoamVect&operator=(Double_t[]); TFoamVect&operator=(Double_t); Double_t&operator[](Int_t); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option) const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TFoamVect(); TFoamVect(Int_t); TFoamVect(const TFoamVect&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TFoamVect.html:4683,Test,TestBit,4683,root/html602/TFoamVect.html,https://root.cern,https://root.cern/root/html602/TFoamVect.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"Object::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGridCollection&operator=(const TGridCollection&); virtual Bool_tOverlapCollection(TGridCollection*); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual Bool_tPrepare(Bool_t = kFALSE); virtual voidPrint(Option_t*) const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual Bool_tRemove(TMap*); virtual voidReset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual Bool_tSelectFile(const char*, Int_t = -1, Int_t = -1); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual Bool_tSetExportUrl(const char* = 0); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetTag(const char*, const char*, TMap*); virtual voidSetTagFilterList(TList*); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Bool_tStage(Bool_t = kFALSE, Option_t* = """"); virtual voidStatus(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGridCollection.html:6038,Test,TestBit,6038,root/html530/TGridCollection.html,https://root.cern,https://root.cern/root/html530/TGridCollection.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"Object::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TPoints3DABC&TPoints3DABC::operator=(const TPoints3DABC&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTPoints3DABC::PaintPoints(Int_t n, Float_t* p, Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual Int_tSetLastPosition(Int_t idx); virtual Int_tTPoints3DABC::SetNextPoint(Float_t x, Float_t y, Float_t z); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetOption(Option_t*); virtual Int_tSetPoint(Int_t, Float_t, Float_t, Float_t); virtual Int_tSetPoints(Int_t, Float_t*, Option_t*); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tSize() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTablePoints.html:6134,Test,TestBit,6134,root/html534/TTablePoints.html,https://root.cern,https://root.cern/root/html534/TTablePoints.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"Object::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TPointsArray3D&operator=(const TPointsArray3D&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidPaintPoints(Int_t, Float_t*, Option_t*); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual Int_tSetLastPosition(Int_t idx); virtual Int_tTPoints3DABC::SetNextPoint(Float_t x, Float_t y, Float_t z); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetOption(Option_t* option = """"); virtual Int_tSetPoint(Int_t point, Float_t x, Float_t y, Float_t z)MENU ; virtual Int_tSetPoints(Int_t n, Float_t* p = 0, Option_t* option = """"); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tSize() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TPointsArray3D.html:6457,Test,TestBit,6457,root/html534/TPointsArray3D.html,https://root.cern,https://root.cern/root/html534/TPointsArray3D.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"Object::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTVirtualPacketizer::SetFailedPackets(TList* list); virtual voidTVirtualPacketizer::SetInitTime(); static voidTObject::SetObjectStat(Bool_t stat); voidTVirtualPacketizer::SetProgressStatus(TProofProgressStatus* st); voidTVirtualPacketizer::SetTotalEntries(Long64_t ent); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTVirtualPacketizer::StopProcess(Bool_t abort, Bool_t stoptimer = kFALSE); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TPacketizer(TDSet* dset, TList* slaves, Long64_t first, Long64_t num, TList* input, TProofProgressStatus* st); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TPacketizer.html:6170,Test,TestBit,6170,root/html602/TPacketizer.html,https://root.cern,https://root.cern/root/html602/TPacketizer.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"Object::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TVirtualMCStack&operator=(const TVirtualMCStack&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual TParticle*PopNextTrack(Int_t& itrack); virtual TParticle*PopPrimaryForTracking(Int_t i); virtual voidTObject::Print(Option_t* option = """") const; virtual voidPushTrack(Int_t toBeDone, Int_t parent, Int_t pdg, Double_t px, Double_t py, Double_t pz, Double_t e, Double_t vx, Double_t vy, Double_t vz, Double_t tof, Double_t polx, Double_t poly, Double_t polz, TMCProcess mech, Int_t& ntr, Double_t weight, Int_t is); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidSetCurrentTrack(Int_t trackNumber); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVirtualMCStack.html:4991,Test,TestBit,4991,root/html528/TVirtualMCStack.html,https://root.cern,https://root.cern/root/html528/TVirtualMCStack.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"Object::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TEveMacro&operator=(const TEveMacro&); virtual voidTMacro::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTMacro::Print(Option_t* option = """") constMENU ; virtual Int_tTObject::Read(const char* name); virtual Int_tTMacro::ReadFile(const char* filename); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); voidResetRoot(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTMacro::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTMacro::SaveSource(const char* filename)MENU ; voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTMacro::SetParams(const char* params = 0)MENU ; virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TEveMacro(); TEveMacro(const TEveMacro&); TEveMacro(const char* name); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveMacro.html:5077,Test,TestBit,5077,root/html602/TEveMacro.html,https://root.cern,https://root.cern/root/html602/TEveMacro.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"Object::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TObject&TObject::operator=(const TObject& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Bool_tProcess(Long64_t entry); virtual Bool_tTSelector::ProcessCut(Long64_t); virtual voidTSelector::ProcessFill(Long64_t); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTSelector::ResetAbort(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTSelector::SetInputList(TList* input); virtual voidSetObject(TObject* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetOption(const char* option); virtual voidSetSelection(const char* selection); virtual voidTSelector::SetStatus(Long64_t status); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidSlaveBegin(TTree* tree); virtual voidSlaveTerminate(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTerminate(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual Int_tVersion() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TSelectorEntries.html:5826,Test,TestBit,5826,root/html534/TSelectorEntries.html,https://root.cern,https://root.cern/root/html534/TSelectorEntries.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"Object::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TObject&TObject::operator=(const TObject& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); voidprint(); virtual voidTObject::Print(Option_t* option = """") const; Bool_tprocess(const RooCmdArg& arg); Bool_tprocess(const RooLinkedList& argList); Bool_tprocess(const RooCmdArg& arg1, const RooCmdArg& arg2, const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); voidsetVerbose(Bool_t flag); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); voidstripCmdList(RooLinkedList& cmdList, const char* cmdsToPurge); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooCmdConfig.html:8327,Test,TestBit,8327,root/html528/RooCmdConfig.html,https://root.cern,https://root.cern/root/html528/RooCmdConfig.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"Object::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTGLayoutHints::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); UInt_tTRefCnt::References() const; UInt_tTRefCnt::RemoveReference(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSavePrimitive(ostream& out, Option_t* = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTGLayoutHints::SetLayoutHints(ULong_t lh); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGLayoutHints::SetPadBottom(Int_t v); virtual voidTGLayoutHints::SetPadLeft(Int_t v); virtual voidTGLayoutHints::SetPadRight(Int_t v); virtual voidTGLayoutHints::SetPadTop(Int_t v); voidTRefCnt::SetRefCount(UInt_t r); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGTableLayoutHints(UInt_t attach_left, UInt_t attach_right, UInt_t attach_top, UInt_t attach_bottom, ULong_t hints = kLHintsNormal, UInt_t padleft = 0, UInt_t padright = 0, UInt_t padtop = 0, UInt_t padbottom = 0); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGTableLayoutHints.html:6629,Test,TestBit,6629,root/html602/TGTableLayoutHints.html,https://root.cern,https://root.cern/root/html602/TGTableLayoutHints.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"Object::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); ROOT::TSchemaRule::TSources&operator=(const ROOT::TSchemaRule::TSources&); ROOT::TSchemaRule::TSources&operator=(ROOT::TSchemaRule::TSources&&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; ROOT::TSchemaRule::TSourcesTSources(ROOT::TSchemaRule::TSources&&); ROOT::TSchemaRule::TSourcesTSources(const ROOT::TSchemaRule::TSources&); ROOT::TSchemaRule::TSourcesTSources(const char* name = 0, const char* title = 0, const char* dims = 0); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__TSchemaRule__TSources.html:4716,Test,TestBit,4716,root/html602/ROOT__TSchemaRule__TSources.html,https://root.cern,https://root.cern/root/html602/ROOT__TSchemaRule__TSources.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"Object::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TVirtualPerfStats&TVirtualPerfStats::operator=(const TVirtualPerfStats&); virtual voidPacketEvent(const char* slave, const char* slavename, const char* filename, Long64_t eventsprocessed, Double_t latency, Double_t proctime, Double_t cputime, Long64_t bytesRead); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidRateEvent(Double_t proctime, Double_t deltatime, Long64_t eventsprocessed, Long64_t bytesRead); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidSetBytesRead(Long64_t num); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidSetMemValues(); virtual voidSetNumEvents(Long64_t num); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); static voidSetup(TList* input); virtual voidShowMembers(TMemberInspector& insp); virtual voidSimpleEvent(TVirtualPerfStats::EEventType type); static voidStart(TList* input, TList* output); static voidStop(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TPerfStats.html:5478,Test,TestBit,5478,root/html530/TPerfStats.html,https://root.cern,https://root.cern/root/html530/TPerfStats.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"Object::operator new[](size_t sz, void* vp); TMVA::MCFitter&operator=(const TMVA::MCFitter&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTMVA::Configurable::ParseOptions(); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; voidTMVA::Configurable::PrintOptions() const; virtual Int_tTObject::Read(const char* name); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual Double_tRun(vector<Double_t>& pars); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidSetParameters(Int_t cycles); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MCFitter.html:5877,Test,TestBit,5877,root/html602/TMVA__MCFitter.html,https://root.cern,https://root.cern/root/html602/TMVA__MCFitter.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"Object::operator new[](size_t sz, void* vp); TObject&TObject::operator=(const TObject& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTMVA::Configurable::ParseOptions(); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; voidTMVA::Configurable::PrintOptions() const; virtual Int_tTObject::Read(const char* name); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual Double_tRun(vector<Double_t>& pars); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidSetParameters(Int_t cycles); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MCFitter.html:5448,Test,TestBit,5448,root/html528/TMVA__MCFitter.html,https://root.cern,https://root.cern/root/html528/TMVA__MCFitter.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"Object::operator=(const TObject& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; RooStats::ProposalHelperProposalHelper(); RooStats::ProposalHelperProposalHelper(const RooStats::ProposalHelper&); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidSetCacheSize(Int_t size); virtual voidSetClues(RooDataSet& clues); virtual voidSetCluesFraction(Double_t cluesFrac); virtual voidSetCluesOptions(Option_t* options); virtual voidSetCovMatrix(const TMatrixDSym& covMatrix); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPdf(RooAbsPdf& pdf); virtual voidSetUniformFraction(Double_t uniFrac); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidSetUpdateProposalParameters(Bool_t updateParams); virtual voidSetVariables(RooArgList& vars); virtual voidSetVariables(const RooArgList& vars); virtual voidSetVariables(RooArgSet& vars); virtual voidSetWidthRangeDivisor(Double_t divisor); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__ProposalHelper.html:5034,Test,TestBit,5034,root/html530/RooStats__ProposalHelper.html,https://root.cern,https://root.cern/root/html530/RooStats__ProposalHelper.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"Object; kIsAverage enum valueTH1; kIsHighlight enum valueTH1; kIsNotW enum valueTH1; kIsOnHeap enum valueTObject; kIsReferenced enum valueTObject; kIsZoomed enum valueTH1; kLogX enum valueTH1; kMustCleanup enum valueTObject; kNeutral enum valueTH1; kNoAxis enum valueTH1; kNoContextMenu enum valueTObject; kNormal enum valueTH1; kNoStats enum valueTH1; kNotDeleted enum valueTObject; kNoTitle enum valueTH1; kNstat enum valueTH1; kObjInCanvas enum valueTObject; KolmogorovTest(const TH1 *h2, Option_t *option="""") constTH1virtual; kOnlyPrepStep enum valueTObjectprotected; kOverwrite enum valueTObject; kPoisson enum valueTH1; kPoisson2 enum valueTH1; kSingleKey enum valueTObject; kUserContour enum valueTH1; kWriteDelete enum valueTObject; kXaxis enum valueTH1; kYaxis enum valueTH1; kZaxis enum valueTH1; kZombie enum valueTObject; LabelsDeflate(Option_t *axis=""X"")TH1virtual; LabelsInflate(Option_t *axis=""X"")TH1virtual; LabelsOption(Option_t *option=""h"", Option_t *axis=""X"")TH1virtual; LoggedInconsistency(const char *name, const TH1 *h1, const TH1 *h2, bool useMerge=false) constTH1protected; ls(Option_t *option="""") const overrideTNamedvirtual; MakeZombie()TObjectinlineprotected; MayNotUse(const char *method) constTObject; Merge(TCollection *list)TH1inlinevirtual; Merge(TCollection *list, Option_t *option)TH1; TAttLine::Modify()TAttLinevirtual; TAttFill::Modify()TAttFillvirtual; TAttMarker::Modify()TAttMarkervirtual; Multiply(TF1 *f1, Double_t c1=1)TH1virtual; Multiply(const TH1 *h1)TH1virtual; Multiply(const TH1 *h1, const TH1 *h2, Double_t c1=1, Double_t c2=1, Option_t *option="""")TH1virtual; Notify()TObjectvirtual; Obsolete(const char *method, const char *asOfVers, const char *removedFromVers) constTObject; operator delete(void *ptr)TObject; operator delete(void *ptr, void *vp)TObject; operator delete[](void *ptr)TObject; operator delete[](void *ptr, void *vp)TObject; operator new(size_t sz)TObjectinline; operator new(size_t sz, void *vp)TObjectinline; operator new[](size_t s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1-members.html:14108,Log,LoggedInconsistency,14108,doc/master/classTH1-members.html,https://root.cern,https://root.cern/doc/master/classTH1-members.html,3,['Log'],['LoggedInconsistency']
Testability,"Object; kIsReferenced enum valueTObject; kIsSortedX enum valueTGraph; kMustCleanup enum valueTObject; kNoContextMenu enum valueTObject; kNoStats enum valueTGraph; kNotDeleted enum valueTObject; kNotEditable enum valueTGraph; kObjInCanvas enum valueTObject; kOnlyPrepStep enum valueTObjectprotected; kOverwrite enum valueTObject; kResetHisto enum valueTGraph; kSingleKey enum valueTObject; kWriteDelete enum valueTObject; kZombie enum valueTObject; LeastSquareFit(Int_t m, Double_t *a, Double_t xmin=0, Double_t xmax=0)TGraphvirtual; LeastSquareLinearFit(Int_t n, Double_t &a0, Double_t &a1, Int_t &ifail, Double_t xmin=0, Double_t xmax=0)TGraphvirtual; ls(Option_t *option="""") const overrideTNamedvirtual; MakeZombie()TObjectinlineprotected; MayNotUse(const char *method) constTObject; Merge(TCollection *list) overrideTGraphAsymmErrorsvirtual; TAttLine::Modify()TAttLinevirtual; TAttFill::Modify()TAttFillvirtual; TAttMarker::Modify()TAttMarkervirtual; MovePoints(Double_t dx, Double_t dy, Bool_t logx=kFALSE, Bool_t logy=kFALSE)TGraphvirtual; Notify()TObjectvirtual; Obsolete(const char *method, const char *asOfVers, const char *removedFromVers) constTObject; operator delete(void *ptr)TObject; operator delete(void *ptr, void *vp)TObject; operator delete[](void *ptr)TObject; operator delete[](void *ptr, void *vp)TObject; operator new(size_t sz)TObjectinline; operator new(size_t sz, void *vp)TObjectinline; operator new[](size_t sz)TObjectinline; operator new[](size_t sz, void *vp)TObjectinline; operator=(const TGraphAsymmErrors &gr)TGraphAsymmErrors; TGraph::operator=(const TGraph &)TGraph; TNamed::operator=(const TNamed &rhs)TNamed; TObject::operator=(const TObject &rhs)TObjectinline; Paint(Option_t *chopt="""") overrideTGraphvirtual; PaintGraph(Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt)TGraph; PaintGrapHist(Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt)TGraph; PaintStats(TF1 *fit)TGraphvirtual; Pop()TObjectvirtual; Print(Option_t *cho",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphAsymmErrors-members.html:9799,log,logx,9799,doc/master/classTGraphAsymmErrors-members.html,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors-members.html,1,['log'],['logx']
Testability,"Object; kIsReferenced enum valueTObject; kIsSortedX enum valueTGraph; kMustCleanup enum valueTObject; kNoContextMenu enum valueTObject; kNoStats enum valueTGraph; kNotDeleted enum valueTObject; kNotEditable enum valueTGraph; kObjInCanvas enum valueTObject; kOnlyPrepStep enum valueTObjectprotected; kOverwrite enum valueTObject; kResetHisto enum valueTGraph; kSingleKey enum valueTObject; kWriteDelete enum valueTObject; kZombie enum valueTObject; LeastSquareFit(Int_t m, Double_t *a, Double_t xmin=0, Double_t xmax=0)TGraphvirtual; LeastSquareLinearFit(Int_t n, Double_t &a0, Double_t &a1, Int_t &ifail, Double_t xmin=0, Double_t xmax=0)TGraphvirtual; ls(Option_t *option="""") const overrideTNamedvirtual; MakeZombie()TObjectinlineprotected; MayNotUse(const char *method) constTObject; Merge(TCollection *list)TGraphvirtual; TAttLine::Modify()TAttLinevirtual; TAttFill::Modify()TAttFillvirtual; TAttMarker::Modify()TAttMarkervirtual; MovePoints(Double_t dx, Double_t dy, Bool_t logx=kFALSE, Bool_t logy=kFALSE)TGraphvirtual; Notify()TObjectvirtual; Obsolete(const char *method, const char *asOfVers, const char *removedFromVers) constTObject; operator delete(void *ptr)TObject; operator delete(void *ptr, void *vp)TObject; operator delete[](void *ptr)TObject; operator delete[](void *ptr, void *vp)TObject; operator new(size_t sz)TObjectinline; operator new(size_t sz, void *vp)TObjectinline; operator new[](size_t sz)TObjectinline; operator new[](size_t sz, void *vp)TObjectinline; operator=(const TGraph &)TGraph; TNamed::operator=(const TNamed &rhs)TNamed; TObject::operator=(const TObject &rhs)TObjectinline; Paint(Option_t *chopt="""") overrideTGraphvirtual; PaintGraph(Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt)TGraph; PaintGrapHist(Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt)TGraph; PaintStats(TF1 *fit)TGraphvirtual; Pop()TObjectvirtual; Print(Option_t *chopt="""") const overrideTGraphBentErrorsvirtual; Read(const char *name)TObjectvirtual; R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphBentErrors-members.html:9876,log,logy,9876,doc/master/classTGraphBentErrors-members.html,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors-members.html,1,['log'],['logy']
Testability,"Object; kIsReferenced enum valueTObject; kIsSortedX enum valueTGraph; kMustCleanup enum valueTObject; kNoContextMenu enum valueTObject; kNoStats enum valueTGraph; kNotDeleted enum valueTObject; kNotEditable enum valueTGraph; kObjInCanvas enum valueTObject; kOnlyPrepStep enum valueTObjectprotected; kOverwrite enum valueTObject; kResetHisto enum valueTGraph; kSingleKey enum valueTObject; kWriteDelete enum valueTObject; kZombie enum valueTObject; LeastSquareFit(Int_t m, Double_t *a, Double_t xmin=0, Double_t xmax=0)TGraphvirtual; LeastSquareLinearFit(Int_t n, Double_t &a0, Double_t &a1, Int_t &ifail, Double_t xmin=0, Double_t xmax=0)TGraphvirtual; ls(Option_t *option="""") const overrideTNamedvirtual; MakeZombie()TObjectinlineprotected; MayNotUse(const char *method) constTObject; Merge(TCollection *list)TGraphvirtual; TAttLine::Modify()TAttLinevirtual; TAttFill::Modify()TAttFillvirtual; TAttMarker::Modify()TAttMarkervirtual; MovePoints(Double_t dx, Double_t dy, Bool_t logx=kFALSE, Bool_t logy=kFALSE)TGraphvirtual; Notify()TObjectvirtual; Obsolete(const char *method, const char *asOfVers, const char *removedFromVers) constTObject; operator delete(void *ptr)TObject; operator delete(void *ptr, void *vp)TObject; operator delete[](void *ptr)TObject; operator delete[](void *ptr, void *vp)TObject; operator new(size_t sz)TObjectinline; operator new(size_t sz, void *vp)TObjectinline; operator new[](size_t sz)TObjectinline; operator new[](size_t sz, void *vp)TObjectinline; operator=(const TGraph &)TGraph; TNamed::operator=(const TNamed &rhs)TNamed; TObject::operator=(const TObject &rhs)TObjectinline; Paint(Option_t *chopt="""") overrideTGraphvirtual; PaintGraph(Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt)TGraph; PaintGrapHist(Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt)TGraph; PaintStats(TF1 *fit)TGraphvirtual; Pop()TObjectvirtual; Print(Option_t *chopt="""") const overrideTGraphvirtual; Read(const char *name)TObjectvirtual; RecursiveRe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraph-members.html:8939,log,logy,8939,doc/master/classTGraph-members.html,https://root.cern,https://root.cern/doc/master/classTGraph-members.html,1,['log'],['logy']
Testability,"Object; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Double_tTGeoBBox::fDXX half-length; Double_tTGeoBBox::fDYY half-length; Double_tTGeoBBox::fDZZ half-length; TStringTNamed::fNameobject identifier; Double_tTGeoBBox::fOrigin[3]box origin; UInt_tTGeoShape::fShapeBitsshape bits; Int_tTGeoShape::fShapeIdshape id; TStringTNamed::fTitleobject title. private:. Double_tfN[3]; Double_tfP[3]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoHalfSpace(); Dummy constructor. TGeoHalfSpace(const char* name, Double_t* p, Double_t* n); Constructor with name, point on the plane and normal. TGeoHalfSpace(Double_t* params); Default constructor specifying minimum and maximum radius. ~TGeoHalfSpace(); destructor. void ComputeNormal(const Double_t* point, const Double_t* dir, Double_t* norm); Compute normal to closest surface from POINT. Bool_t Contains(const Double_t* point) const; test if point is inside the half-space. Int_t DistancetoPrimitive(Int_t px, Int_t py); A half-space does not have a mesh primitive. Double_t DistFromInside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; compute distance from inside point to the plane. Double_t DistFromOutside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; compute distance from inside point to the plane. TGeoVolume * Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); Divide the shape along one axis. void GetMeshNumbers(Int_t& nvert, Int_t& nsegs, Int_t& npols) const; Returns numbers of vertices, segments and polygons composing the shape mesh. void InspectShape() const; print shape parameters. Double_t Safety(const Double_t* point, Bool_t in = kTRUE) const; computes the closest distance from given point to this shape, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoHalfSpace.html:12736,test,test,12736,root/html534/TGeoHalfSpace.html,https://root.cern,https://root.cern/root/html534/TGeoHalfSpace.html,1,['test'],['test']
Testability,"ObjectStat(Bool_t stat); virtual voidSetReadOnly(Bool_t on = kTRUE)TOGGLE GETTER ; virtual voidSetSBRange(Int_t direction); virtual voidSetSelectBack(Pixel_t p); virtual voidSetSelectFore(Pixel_t p); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidSetText(TGText* text); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGView::SetVisibleStart(Int_t newTop, Int_t direction); virtual voidSetVsbPosition(Long_t newPos); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidShowBottom(); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidShowTop(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGTextView(const TGWindow* parent = 0, UInt_t w = 1, UInt_t h = 1, Int_t id = -1, UInt_t sboptions = 0, Pixel_t back = GetWhitePixel()); TGTextView(const TGWindow* parent, UInt_t w, UInt_t h, TGText* text, Int_t id = -1, UInt_t sboptions = 0, Pixel_t back = GetWhitePixel()); TGTextView(const TGWindow* parent, UInt_t w, UInt_t h, const char* string, Int_t id = -1, UInt_t sboptions = 0, Pixel_t back = GetWhitePixel()); virtual Long_tToObjXCoord(Long_t xCoord, Long_t line); virtual Long_tToObjYCoord(Long_t yCoord); TGLongPositionTGView::ToPhysical(TGLongPosition coord) const; virtual Long_tToScrXCoord(Long_t xCoord, Long_t line); virtual Long_tToScrYCoord(Long_t yCoord); TGLongPositionTGView::ToVirtual(TGLongPosition coord) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidUpdate(); virtual voidTGView::UpdateBackgroundStart(); virtual voidTObject::UseCurr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGTextView.html:16206,Test,TestBits,16206,root/html602/TGTextView.html,https://root.cern,https://root.cern/root/html602/TGTextView.html,2,['Test'],['TestBits']
Testability,"ObjectTable::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TObjectTable::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 71 of file TObjectTable.h. ◆ DeclFileName(). static const char * TObjectTable::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 71 of file TObjectTable.h. ◆ Delete(). void TObjectTable::Delete ; (; Option_t * ; opt = """"). overridevirtual . Delete all objects stored in the TObjectTable. ; Reimplemented from TObject.; Definition at line 195 of file TObjectTable.cxx. ◆ Expand(). void TObjectTable::Expand ; (; Int_t ; newsize). private . Expand the object table. ; Definition at line 322 of file TObjectTable.cxx. ◆ FindElement(). Int_t TObjectTable::FindElement ; (; TObject * ; op). private . Find an object in the object table. ; Returns the slot where to put the object. To test if the object is actually already in the table use PtrIsValid(). ; Definition at line 276 of file TObjectTable.cxx. ◆ FixCollisions(). void TObjectTable::FixCollisions ; (; Int_t ; index). private . Rehash the object table in case an object has been removed. ; Definition at line 300 of file TObjectTable.cxx. ◆ GetSize(). Int_t TObjectTable::GetSize ; (; ); const. inline . Definition at line 58 of file TObjectTable.h. ◆ HighWaterMark(). Bool_t TObjectTable::HighWaterMark ; (; ). inlineprivate . Definition at line 75 of file TObjectTable.h. ◆ Instances(). Int_t TObjectTable::Instances ; (; ); const. inline . Definition at line 59 of file TObjectTable.h. ◆ InstanceStatistics(). void TObjectTable::InstanceStatistics ; (; ); const. Print the object table. ; Definition at line 340 of file TObjectTable.cxx. ◆ IsA(). TClass * TObjectTable::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 71 of file TObjectTable.h. ◆ operator=(). TObjectTa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTObjectTable.html:20159,test,test,20159,doc/master/classTObjectTable.html,https://root.cern,https://root.cern/doc/master/classTObjectTable.html,1,['test'],['test']
Testability,"Observables (const RooArgSet *nset) const override;  Overloadable function in which derived classes can implement consistency checks of the variables. ;  ; TObject * clone (const char *newname) const override;  ; const RooArgList & coefList () const;  ; std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const override;  ; double evaluate () const override;  Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ;  ; bool forceAnalyticalInt (const RooAbsArg &arg) const override;  ; const RooArgList & funcList () const;  ; Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &numVars, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Variant of getAnalyticalIntegral that is also passed the normalization set that should be applied to the integrand of which the integral is requested. ;  ; bool getFloor () const;  ; TClass * IsA () const override;  ; bool isBinnedDistribution (const RooArgSet &obs) const override;  Tests if the distribution is binned. Unless overridden by derived classes, this always returns false. ;  ; std::list< double > * plotSamplingHint (RooAbsRealLValue &, double, double) const override;  Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ;  ; void printMetaArgs (std::ostream &os) const override;  Customized printing of arguments of a RooRealSumFunc to more intuitively reflect the contents of the product operator construction. ;  ; void setCacheAndTrackHints (RooArgSet &) override;  ; void setFloor (bool flag);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void translate (RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooRealSumFunc.html:2274,Test,Tests,2274,doc/v632/classRooRealSumFunc.html,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html,2,['Test'],['Tests']
Testability,"Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGraph2DPainter&operator=(const TGraph2DPainter&); virtual voidPaint(Option_t* option); voidPaintContour(Option_t* option); voidPaintErrors(Option_t* option); voidPaintPolyLine(Option_t* option); voidPaintPolyMarker(Option_t* option); voidPaintTriangles(Option_t* option); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGraph2DPainter.html:4637,Test,TestBit,4637,root/html534/TGraph2DPainter.html,https://root.cern,https://root.cern/root/html534/TGraph2DPainter.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); Memstat::TMemStatMng&operator=(const Memstat::TMemStatMng&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetBufferSize(Int_t buffersize); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetMaxCalls(Int_t maxcalls); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetUseGNUBuiltinBacktrace(Bool_t newVal); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Memstat::TMemStatMngTMemStatMng(const Memstat::TMemStatMng&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/Memstat__TMemStatMng.html:4473,Test,TestBit,4473,root/html602/Memstat__TMemStatMng.html,https://root.cern,https://root.cern/root/html602/Memstat__TMemStatMng.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidRegisterMatrix(TGeoMatrix* matrix); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); TGeoVolume*Volume(const char* name, const char* shape, Int_t nmed, Float_t* upar, Int_t npar = 0); TGeoVolume*Volume(const char* name, const char* shape, Int_t nmed, Double_t* upar, Int_t npar = 0); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoBuilder.html:8658,Test,TestBit,8658,root/html602/TGeoBuilder.html,https://root.cern,https://root.cern/root/html602/TGeoBuilder.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"OfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooStats::SamplingSummary&operator=(const RooStats::SamplingSummary&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); RooStats::SamplingSummarySamplingSummary(); RooStats::SamplingSummarySamplingSummary(RooStats::AcceptanceRegion& ar); RooStats::SamplingSummarySamplingSummary(const RooStats::SamplingSummary&); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__SamplingSummary.html:4718,Test,TestBit,4718,root/html534/RooStats__SamplingSummary.html,https://root.cern,https://root.cern/root/html534/RooStats__SamplingSummary.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"OfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TDocDirective&operator=(const TDocDirective&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TDocDirective.html:5638,Test,TestBit,5638,root/html534/TDocDirective.html,https://root.cern,https://root.cern/root/html534/TDocDirective.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"OfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* opt = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidSetProof(TProof* p); voidSetRemoteId(Int_t id); voidSetStatus(Int_t st); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofDesc.html:5158,Test,TestBit,5158,root/html530/TProofDesc.html,https://root.cern,https://root.cern/root/html530/TProofDesc.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"OnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Double_t*TMVA::PDEFoam::fAlpha[fDim] Internal parameters of the hyperrectangle; TMVA::PDEFoamCell**TMVA::PDEFoam::fCells[fNCells] Array of ALL cells; UInt_tTMVA::PDEFoamDiscriminant::fClasssignal class; TMVA::EDTSeparationTMVA::PDEFoam::fDTSeparationBACKWARDS COMPATIBILITY: split cells according to decision tree logic; Int_tTMVA::PDEFoam::fDimDimension of the integration/simulation space; TMVA::PDEFoamDensityBase*TMVA::PDEFoam::fDistr! distribution of training events; Int_tTMVA::PDEFoam::fEvPerBinMaximum number of effective (wt=1) events per bin; Bool_tTMVA::PDEFoam::fFillFoamWithOrigWeightsBACKWARDS COMPATIBILITY: fill the foam with boost or orig. weights; TMVA::EFoamTypeTMVA::PDEFoam::fFoamTypeBACKWARDS COMPATIBILITY: type of foam; TObjArray*TMVA::PDEFoam::fHistEdgHistograms of wt, one for each cell edge; Int_t*TMVA::PDEFoam::fInhiDiv! [fDim] Flags for inhibiting cell division; Int_tTMVA::PDEFoam::fLastCeIndex of the last cell; TMVA::MsgLogger*TMVA::PDEFoam::fLogger! message logger; Int_t*TMVA::PDEFoam::fMaskDiv! [fDim] Dynamic Mask for cell division; UInt_tTMVA::PDEFoam::fMaxDepthmaximum depth of cell tree; Int_tTMVA::PDEFoam::fNBinNo. of bins in the edge histogram for cell MC exploration; Int_tTMVA::PDEFoam::fNCellsMaximum number of cells; UInt_tTMVA::PDEFoam::fNElementsBACKWARDS COMPATIBILITY: number of variables in every cell; Int_tTMVA::PDEFoam::fNSamplNo. of MC events, when dividing (exploring) cell; TStringTMVA::PDEFoam::fNameName of a given instance of the FOAM class; UInt_tTMVA::PDEFoam::fNminminimal number of events in cell to split cell; Int_tTMVA::PDEFoam::fNoActNumber of active cells; Bool_tTMVA::PDEFoam::fPeekMaxBACKWARDS COMPATIBILITY: peek up cell with max. driver integral for split; TRandom3*TMVA::PDEFoam::fPseRanPointer to user-defined generator of pseudorandom numbers; Double_t*TMVA::PDEFoam::fRvec[fDim] random number vector from r.n. generator fDim+1 m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__PDEFoamDecisionTree.html:11130,log,logger,11130,root/html530/TMVA__PDEFoamDecisionTree.html,https://root.cern,https://root.cern/root/html530/TMVA__PDEFoamDecisionTree.html,3,['log'],['logger']
Testability,"Opt() const; virtual voidTApplication::Raise(); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTApplication::RemoveIdleTimer(); voidTObject::ResetBit(UInt_t f); Bool_tTApplication::ReturnFromRun() const; virtual voidTApplication::ReturnPressed(char* text)SIGNAL ; virtual voidTApplication::Run(Bool_t retrn = kFALSE); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTApplication::SetEchoMode(Bool_t mode); virtual voidTApplication::SetIdleTimer(UInt_t idleTimeInSec, const char* command); static voidTObject::SetObjectStat(Bool_t stat); voidTApplication::SetReturnFromRun(Bool_t ret); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTApplication::Show(); virtual voidShowMembers(TMemberInspector& insp); virtual voidTApplication::StartIdleing(); virtual voidTApplication::StopIdleing(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual Int_tTApplication::TabCompletionHook(char* buf, int* pLoc, ostream& out); virtual voidTApplication::Terminate(Int_t status = 0)SIGNAL ; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; PyROOT::TPyROOTApplicationTPyROOTApplication(const char* acn, Int_t* argc, char** argv, Bool_t bLoadLibs = kTRUE); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; const char*TApplication::WorkingDirectory() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/PyROOT__TPyROOTApplication.html:10515,Test,TestBit,10515,root/html530/PyROOT__TPyROOTApplication.html,https://root.cern,https://root.cern/root/html530/PyROOT__TPyROOTApplication.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"Option PIE is for 1D histograms only"");; 4508 }; 4509 return;; 4510 } else {; 4511 fPie.reset();; 4512 }; 4513 ; 4514 fXbuf.resize(kNMAX);; 4515 fYbuf.resize(kNMAX);; 4516 if (fH->GetDimension() > 2) {; 4517 PaintH3(option);; 4518 fH->SetMinimum(minsav);; 4519 if (Hoption.Func) {; 4520 Hoption_t hoptsave = Hoption;; 4521 Hparam_t hparsave = Hparam;; 4522 PaintFunction(option);; 4523 SetHistogram(hsave);; 4524 Hoption = hoptsave;; 4525 Hparam = hparsave;; 4526 }; 4527 gCurrentHist = oldhist;; 4528 fXbuf.clear();; 4529 fYbuf.clear();; 4530 return;; 4531 }; 4532 TView *view = gPad->GetView();; 4533 if (view) {; 4534 if (!Hoption.Lego && !Hoption.Surf && !Hoption.Tri) {; 4535 delete view;; 4536 gPad->SetView(nullptr);; 4537 }; 4538 }; 4539 if (fH->GetDimension() > 1 || Hoption.Lego || Hoption.Surf) {; 4540 // In case of 1D histogram, Z axis becomes Y axis.; 4541 Int_t logysav=0, logzsav=0;; 4542 if (fH->GetDimension() == 1) {; 4543 logysav = Hoption.Logy;; 4544 logzsav = Hoption.Logz;; 4545 Hoption.Logz = 0;; 4546 if (Hoption.Logy) {; 4547 Hoption.Logz = 1;; 4548 Hoption.Logy = 0;; 4549 }; 4550 }; 4551 PaintTable(option);; 4552 if (Hoption.Func) {; 4553 Hoption_t hoptsave = Hoption;; 4554 Hparam_t hparsave = Hparam;; 4555 PaintFunction(option);; 4556 SetHistogram(hsave);; 4557 Hoption = hoptsave;; 4558 Hparam = hparsave;; 4559 }; 4560 fH->SetMinimum(minsav);; 4561 gCurrentHist = oldhist;; 4562 fXbuf.clear();; 4563 fYbuf.clear();; 4564 if (fH->GetDimension() == 1) {; 4565 Hoption.Logy = logysav;; 4566 Hoption.Logz = logzsav;; 4567 }; 4568 return;; 4569 }; 4570 ; 4571 if (Hoption.Bar >= 20) {; 4572 PaintBarH(option);; 4573 fXbuf.clear();; 4574 fYbuf.clear();; 4575 return;; 4576 }; 4577 ; 4578 gPad->RangeAxisChanged(); //emit RangeAxisChanged() signal to sync axes; 4579 // fill Hparam structure with histo parameters; 4580 if (!PaintInit()) {; 4581 fXbuf.clear();; 4582 fYbuf.clear();; 4583 return;; 4584 }; 4585 ; 4586 // Picture surround (if new page) and page number (if re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:172730,Log,Logz,172730,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['Log'],['Logz']
Testability,"Option(Option_t* = """"); virtual voidTGFrame::SetDropType(Int_t type); static voidTObject::SetDtorOnly(void* obj); virtual voidTGCompositeFrame::SetEditable(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetEditDisabled(UInt_t on = 1); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); voidUpdateButtons(TQueryDescription* desc); voidUpdateHistos(TList* objs); voidUpdateInfos(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TSessionQueryFrame.html:15093,Test,TestBit,15093,root/html534/TSessionQueryFrame.html,https://root.cern,https://root.cern/root/html534/TSessionQueryFrame.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"Option(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidsetExpensiveObjectCache(RooExpensiveObjectCache& cache); voidsetLocalNoDirtyInhibit(Bool_t flag) const; virtual voidSetName(const char* name); virtual voidSetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidsetOperMode(RooAbsArg::OperMode mode, Bool_t recurseADirty = kTRUE); voidsetProhibitServerRedirect(Bool_t flag); voidsetShapeDirty() const; voidsetStringAttribute(const Text_t* key, const Text_t* value); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidsetTransientAttribute(const Text_t* name, Bool_t value = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); voidsetValueDirty() const; TIterator*shapeClientIterator() const; RooFItershapeClientMIterator() const; virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); const map<std::string,std::string>&stringAttributes() const; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; const set<std::string>&transientAttributes() const; voidtreeNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t doBranch = kTRUE, Bool_t doLeaf = kTRUE, Bool_t valueOnly = kFALSE, Bool_t recurseNonDerived = kFALSE) const; voidunRegisterCache(RooAbsCache& cache); virtual voidTObject::UseCurrentStyle(); TIterator*valueClientIterator() const; RooFItervalueClientMIterator() const; static voidverboseDirty(Bool_t flag); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; voidwireAllCaches(); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidwriteToStream(ostream& os, Bool_t compact) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsArg.html:14057,Test,TestBit,14057,root/html534/RooAbsArg.html,https://root.cern,https://root.cern/root/html534/RooAbsArg.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"Option_t *option="""") constTObjectvirtual; SaveColor(std::ostream &out, Int_t ci)TColorstatic; SavePrimitive(std::ostream &out, Option_t *option="""")TObjectvirtual; SetAlpha(Float_t a)TColorinlinevirtual; SetBit(UInt_t f, Bool_t set)TObject; SetBit(UInt_t f)TObjectinline; SetColorThreshold(Float_t t)TColorstatic; SetDrawOption(Option_t *option="""")TObjectvirtual; SetDtorOnly(void *obj)TObjectstatic; SetGrayscale(Bool_t set=kTRUE)TColorstatic; SetName(const char *name) overrideTColorvirtual; SetNameTitle(const char *name, const char *title)TNamedvirtual; SetObjectStat(Bool_t stat)TObjectstatic; SetPalette(Int_t ncolors, Int_t *colors, Float_t alpha=1.)TColorstatic; SetRGB(Float_t r, Float_t g, Float_t b)TColorvirtual; SetTitle(const char *title="""")TNamedvirtual; SetUniqueID(UInt_t uid)TObjectvirtual; Sizeof() constTNamedvirtual; Streamer(TBuffer &) overrideTColorvirtual; StreamerNVirtual(TBuffer &ClassDef_StreamerNVirtual_b)TColorinline; SysError(const char *method, const char *msgfmt,...) constTObjectvirtual; TColor()TColor; TColor(Int_t color, Float_t r, Float_t g, Float_t b, const char *name="""", Float_t a=1)TColor; TColor(Float_t r, Float_t g, Float_t b, Float_t a=1)TColor; TColor(const TColor &color)TColor; TestBit(UInt_t f) constTObjectinline; TestBits(UInt_t f) constTObjectinline; TNamed()TNamedinline; TNamed(const char *name, const char *title)TNamedinline; TNamed(const TString &name, const TString &title)TNamedinline; TNamed(const TNamed &named)TNamed; TObject()TObjectinline; TObject(const TObject &object)TObjectinline; UseCurrentStyle()TObjectvirtual; Warning(const char *method, const char *msgfmt,...) constTObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)TObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0) constTObjectvirtual; ~TColor()TColorvirtual; ~TNamed()TNamedvirtual; ~TObject()TObjectvirtual. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:25 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTColor-members.html:8894,Test,TestBit,8894,doc/master/classTColor-members.html,https://root.cern,https://root.cern/doc/master/classTColor-members.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"Option_t * ; ax = ""X""). virtual . Double the number of bins for axis. ; Refill histogram. This function is called by TAxis::FindBin(const char *label) ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 5315 of file TH1.cxx. ◆ LabelsOption(). void TH1::LabelsOption ; (; Option_t * ; option = ""h"", . Option_t * ; ax = ""X"" . ). virtual . Sort bins with labels or set option(s) to draw axis with labels. ; Parameters. [in]option; ""a"" sort by alphabetic order; "">"" sort by decreasing values; ""<"" sort by increasing values; ""h"" draw labels horizontal; ""v"" draw labels vertical; ""u"" draw labels up (end of label right adjusted); ""d"" draw labels down (start of label left adjusted). In case not all bins have labels sorting will work only in the case the first n consecutive bins have all labels and sorting will be performed on those label bins.; Parameters. [in]axaxis . Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 5382 of file TH1.cxx. ◆ LoggedInconsistency(). int TH1::LoggedInconsistency ; (; const char * ; name, . const TH1 * ; h1, . const TH1 * ; h2, . bool ; useMerge = false . ); const. protected . Definition at line 883 of file TH1.cxx. ◆ Merge() [1/2]. virtual Long64_t TH1::Merge ; (; TCollection * ; list). inlinevirtual . Reimplemented in TH2Poly, TProfile2Poly, TProfile, TProfile2D, and TProfile3D.; Definition at line 345 of file TH1.h. ◆ Merge() [2/2]. Long64_t TH1::Merge ; (; TCollection * ; li, . Option_t * ; opt . ). Add all histograms in the collection to this histogram. ; This function computes the min/max for the x axis, compute a new number of bins, if necessary, add bin contents, errors and statistics. If all histograms have bin labels, bins with identical labels will be merged, no matter what their order is. If overflows are present and limits are different the function will fail. The function returns the total number of entries in the result histogram if the merge is successful, -1 otherwise.; Possible option:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:188384,Log,LoggedInconsistency,188384,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['Log'],['LoggedInconsistency']
Testability,"Option_t* = """"); virtual voidTGFrame::SetDropType(Int_t type); static voidTObject::SetDtorOnly(void* obj); virtual voidTGFrame::SetEditable(Bool_t); virtual voidTGWindow::SetEditDisabled(UInt_t on = kEditDisable); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidSetImage(const char* img); virtual voidSetImage(TImage* img); virtual voidSetImagePath(const char* path); virtual voidTGFrame::SetLayoutBroken(Bool_t = kTRUE); virtual voidTGWindow::SetMapSubwindows(Bool_t); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPicture(const TGPicture* pic); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGIcon(const TGWindow* p = 0, const char* image = 0); TGIcon(const TGWindow* p, const TGPicture* pic, UInt_t w, UInt_t h, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGIcon.html:12898,Test,TestBit,12898,root/html602/TGIcon.html,https://root.cern,https://root.cern/root/html602/TGIcon.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"Option_t* option = """") const; virtual voidTGEventHandler::ProcessedEvent(Event_t* event)SIGNAL ; virtual Bool_tTGEventHandler::ProcessMessage(Long_t, Long_t, Long_t); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidRemoveTooltip(); virtual voidRepaint(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); virtual voidTGEventHandler::SendMessage(const TGWindow* w, Long_t msg, Long_t parm1, Long_t parm2); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetDoInternalSelection(Bool_t x); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetMouseOverSelectDelay(Int_t ms); voidSetMouseOverTooltipDelay(Int_t ms); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidSetSecSelType(Int_t t); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidSetTooltipPixelTolerance(Int_t t); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStartMouseTimer(); virtual voidStopMouseTimer(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTriggerTooltip(const char* text); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLEventHandler.html:9281,Test,TestBit,9281,root/html528/TGLEventHandler.html,https://root.cern,https://root.cern/root/html528/TGLEventHandler.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"Option_t* option = """") const; virtual voidTRandom::Rannor(Float_t& a, Float_t& b); virtual voidTRandom::Rannor(Double_t& a, Double_t& b); virtual Int_tTObject::Read(const char* name); virtual voidTRandom::ReadRandom(const char* filename); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual Double_tRndm(Int_t i = 0); virtual voidRndmArray(Int_t n, Float_t* array); virtual voidRndmArray(Int_t n, Double_t* array); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetSeed(UInt_t seed = 0); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidTRandom::Sphere(Double_t& x, Double_t& y, Double_t& z, Double_t r); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Double_tTRandom::Uniform(Double_t x1 = 1); virtual Double_tTRandom::Uniform(Double_t x1, Double_t x2); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTRandom::WriteRandom(const char* filename).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRandom2.html:5974,Test,TestBit,5974,root/html528/TRandom2.html,https://root.cern,https://root.cern/root/html528/TRandom2.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TCondor&operator=(const TCondor&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); Bool_tRelease(); voidTObject::ResetBit(UInt_t f); Bool_tResume(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); Bool_tSetState(TCondor::EState state); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); Bool_tSuspend(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TCondor.html:4841,Test,TestBit,4841,root/html530/TCondor.html,https://root.cern,https://root.cern/root/html530/TCondor.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGeoExtension&operator=(const TGeoExtension&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidRelease() const; voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGeoExtension(const TGeoExtension&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoExtension.html:4815,Test,TestBit,4815,root/html602/TGeoExtension.html,https://root.cern,https://root.cern/root/html602/TGeoExtension.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); Int_tTVirtualMutex::Release(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TMutex(Bool_t recursive = kFALSE); virtual Int_tTryLock(); virtual Int_tUnLock(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMutex.html:4516,Test,TestBit,4516,root/html602/TMutex.html,https://root.cern,https://root.cern/root/html602/TMutex.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"Option_t* option = """") constMENU ; virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTGeoBBox::SetBoxDimensions(Double_t dx, Double_t dy, Double_t dz, Double_t* origin = 0); voidTGeoBBox::SetBoxPoints(Double_t* points) const; virtual voidSetDimensions(Double_t* param); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTGeoShape::SetId(Int_t id); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPoints(Double_t* points) const; virtual voidSetPoints(Float_t* points) const; voidTGeoShape::SetRuntime(Bool_t flag = kTRUE); virtual voidTGeoBBox::SetSegsAndPols(TBuffer3D& buffer) const; voidTGeoShape::SetShapeBit(UInt_t f); voidTGeoShape::SetShapeBit(UInt_t f, Bool_t set); virtual voidTNamed::SetTitle(const char* title = """")MENU ; static voidTGeoShape::SetTransform(TGeoMatrix* matrix); virtual voidTObject::SetUniqueID(UInt_t uid); Int_tTGeoShape::ShapeDistancetoPrimitive(Int_t numpoints, Int_t px, Int_t py) const; virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidSizeof3D() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTGeoShape::TestShapeBit(UInt_t f) const; Int_tTGeoShape::TestShapeBits(UInt_t f) const; static Double_tTGeoShape::Tolerance(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoPara.html:10627,Test,TestBit,10627,root/html534/TGeoPara.html,https://root.cern,https://root.cern/root/html534/TGeoPara.html,4,['Test'],"['TestBit', 'TestBits', 'TestShapeBit', 'TestShapeBits']"
Testability,"Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") constMENU ; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidReflectX(Bool_t leftside, Bool_t rotonly = kFALSE); virtual voidReflectY(Bool_t leftside, Bool_t rotonly = kFALSE); virtual voidReflectZ(Bool_t leftside, Bool_t rotonly = kFALSE); virtual voidRegisterYourself(); voidTObject::ResetBit(UInt_t f); virtual voidRotateX(Double_t); virtual voidRotateY(Double_t); virtual voidRotateZ(Double_t); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetDefaultName(); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetDx(Double_t); virtual voidSetDy(Double_t); virtual voidSetDz(Double_t); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidSetShared(Bool_t flag = kTRUE); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGeoMatrix(); TGeoMatrix(const char* name); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoMatrix.html:12976,Test,TestBit,12976,root/html602/TGeoMatrix.html,https://root.cern,https://root.cern/root/html602/TGeoMatrix.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* options = 0) const; virtual voidRooPrintable::printAddress(ostream& os) const; virtual voidRooPrintable::printArgs(ostream& os) const; virtual voidprintClassName(ostream& os) const; virtual voidRooPrintable::printExtras(ostream& os) const; virtual voidRooPrintable::printMultiline(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; virtual voidprintName(ostream& os) const; virtual voidRooPrintable::printStream(ostream& os, Int_t contents, RooPrintable::StyleOption style, TString indent = """") const; virtual voidprintTitle(ostream& os) const; virtual voidRooPrintable::printTree(ostream& os, TString indent = """") const; virtual voidprintValue(ostream& os) const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidrefill(const RooArgSet& argSet); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); RooArgSet*select(const RooArgSet& list) const; voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooNameSet.html:5715,Test,TestBit,5715,root/html530/RooNameSet.html,https://root.cern,https://root.cern/root/html530/RooNameSet.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); RooDataSet*SetSData(RooDataSet* data); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; RooStats::SPlotSPlot(); RooStats::SPlotSPlot(const RooStats::SPlot& other); RooStats::SPlotSPlot(const char* name, const char* title); RooStats::SPlotSPlot(const char* name, const char* title, const RooDataSet& data); RooStats::SPlotSPlot(const char* name, const char* title, RooDataSet& data, RooAbsPdf* pdf, const RooArgList& yieldsList, const RooArgSet& projDeps = RooArgSet(), bool includeWeights = kTRUE, bool copyDataSet = kFALSE, const char* newName = """"); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__SPlot.html:6202,Test,TestBit,6202,root/html602/RooStats__SPlot.html,https://root.cern,https://root.cern/root/html602/RooStats__SPlot.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"Option_t* option = """"); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTHnBase::Scale(Double_t c); voidTHn::SetBinContent(const Int_t* idx, Double_t v); virtual voidTHn::SetBinContent(Long64_t bin, Double_t v); voidTHnBase::SetBinEdges(Int_t idim, const Double_t* bins); voidTHnBase::SetBinError(const Int_t* idx, Double_t e); voidTHnBase::SetBinError(Long64_t bin, Double_t e); virtual voidTHn::SetBinError2(Long64_t bin, Double_t e2); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTHnBase::SetEntries(Double_t entries); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTHnBase::SetTitle(const char* title); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTHn::Sumw2(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; THnT<unsigned short>(); THnT<unsigned short>(const THnT<unsigned short>&); THnT<unsigned short>(THnT<unsigned short>&&); THnT<unsigned short>(const char* name, const char* title, Int_t dim, const Int_t* nbins, const Double_t* xmin, const Double_t* xmax); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/THnT_unsigned_short_.html:8349,Test,TestBit,8349,root/html602/THnT_unsigned_short_.html,https://root.cern,https://root.cern/root/html602/THnT_unsigned_short_.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidSetTestSignalEfficiency(Double_t effS); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::MethodBase::WriteEvaluationHistosToFile(TMVA::Types::ETreeType treetype); virtual voidWriteMonitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodCuts.html:13596,Test,TestBit,13596,root/html528/TMVA__MethodCuts.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodCuts.html,4,['Test'],"['TestBit', 'TestBits', 'TestMulticlass', 'TestRegression']"
Testability,"Option_t* option = "">""); static voidTWebFile::SetProxy(const char* url); static voidTFile::SetReadaheadSize(Int_t bufsize = 256000); virtual voidTFile::SetReadCalls(Int_t readcalls = 0); static voidTFile::SetReadStreamerInfo(Bool_t readinfo = kTRUE); virtual voidTDirectoryFile::SetSeekDir(Long64_t v); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTDirectoryFile::SetTRefAction(TObject* ref, TObject* parent); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTDirectoryFile::SetWritable(Bool_t writable = kTRUE); virtual voidShowMembers(TMemberInspector& insp); virtual voidTFile::ShowStreamerInfo(); static Bool_tTFile::ShrinkCacheFileDir(Long64_t shrinkSize, Long_t cleanupInteval = 0); virtual Int_tTFile::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); voidTFile::SumBuffer(Int_t bufsize); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTFile::UseCache(Int_t maxCacheSize = 10, Int_t pageSize = 0); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTFile::Write(const char* name = 0, Int_t opt = 0, Int_t bufsiz = 0); virtual Int_tTFile::Write(const char* name = 0, Int_t opt = 0, Int_t bufsiz = 0) const; virtual Bool_tTFile::WriteBuffer(const char* buf, Int_t len); virtual voidTDirectoryFile::WriteDirHeader(); virtual voidTFile::WriteFree(); virtual voidTFile::WriteHeader(); virtual voidTDirectoryFile::WriteKeys(); Int_tTDirectory::WriteObject(const void* obj, const char* name, Option_t* option = """", Int_t bufsize = 0); virtual Int_tTDirectoryFile::WriteObjectAny(const void* obj, const char* classname, const char* name, Option_t* option = """", Int_t bufsize = 0); virtual Int_tTDirectoryFile::WriteObjectAny(const void* obj, const TClass* cl, const char* name, Option_t* option = """", Int_t bufsize = 0); virtual USho",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TAS3File.html:14511,Test,TestBits,14511,root/html532/TAS3File.html,https://root.cern,https://root.cern/root/html532/TAS3File.html,2,['Test'],['TestBits']
Testability,"Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual TStringTFormula::GetExpFormula(Option_t* option = """") const; virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; TH1*TF1::GetHistogram() const; virtual const char*TObject::GetIconName() const; virtual const TObject*TFormula::GetLinearPart(Int_t i); virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual Color_tTAttMarker::GetMarkerColor() const; virtual Size_tTAttMarker::GetMarkerSize() const; virtual Style_tTAttMarker::GetMarkerStyle() const; virtual Double_tTF1::GetMaximum(Double_t xmin = 0, Double_t xmax = 0, Double_t epsilon = 1.E-10, Int_t maxiter = 100, Bool_t logx = false) const; virtual Double_tTF1::GetMaximumX(Double_t xmin = 0, Double_t xmax = 0, Double_t epsilon = 1.E-10, Int_t maxiter = 100, Bool_t logx = false) const; TMethodCall*TF1::GetMethodCall() const; virtual Double_tTF1::GetMinimum(Double_t xmin = 0, Double_t xmax = 0, Double_t epsilon = 1.E-10, Int_t maxiter = 100, Bool_t logx = false) const; virtual Double_tTF1::GetMinimumX(Double_t xmin = 0, Double_t xmax = 0, Double_t epsilon = 1.E-10, Int_t maxiter = 100, Bool_t logx = false) const; virtual const char*TNamed::GetName() const; virtual Int_tTF1::GetNDF() const; virtual Int_tTFormula::GetNdim() const; virtual Int_tTFormula::GetNpar() const; virtual Int_tTF1::GetNpx() const; virtual Int_tTFormula::GetNumber() const; virtual Int_tTF1::GetNumberFitPoints() const; virtual Int_tTF1::GetNumberFreeParameters() const; virtual char*TF1::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Double_tTFormula::GetParameter(Int_t ipar) const; Double_tTFormula::GetParameter(const char* name) const; virtual Double_t*TFormula::GetParameters() const; virtual voidTFormula::GetParameters(Double_t* params); TObject*TF1::GetPare",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TF12.html:4664,log,logx,4664,root/html530/TF12.html,https://root.cern,https://root.cern/root/html530/TF12.html,2,['log'],['logx']
Testability,"Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual TStringTFormula::GetExpFormula(Option_t* option = """") const; virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; TH1*TF1::GetHistogram() const; virtual const char*TObject::GetIconName() const; virtual const TObject*TFormula::GetLinearPart(Int_t i); virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual Color_tTAttMarker::GetMarkerColor() const; virtual Size_tTAttMarker::GetMarkerSize() const; virtual Style_tTAttMarker::GetMarkerStyle() const; virtual Double_tTF1::GetMaximum(Double_t xmin = 0, Double_t xmax = 0, Double_t epsilon = 1.E-10, Int_t maxiter = 100, Bool_t logx = false) const; virtual Double_tTF1::GetMaximumX(Double_t xmin = 0, Double_t xmax = 0, Double_t epsilon = 1.E-10, Int_t maxiter = 100, Bool_t logx = false) const; TMethodCall*TF1::GetMethodCall() const; virtual Double_tTF1::GetMinimum(Double_t xmin = 0, Double_t xmax = 0, Double_t epsilon = 1.E-10, Int_t maxiter = 100, Bool_t logx = false) const; virtual Double_tTF1::GetMinimumX(Double_t xmin = 0, Double_t xmax = 0, Double_t epsilon = 1.E-10, Int_t maxiter = 100, Bool_t logx = false) const; virtual voidGetMinimumXY(Double_t& x, Double_t& y); virtual const char*TNamed::GetName() const; virtual Int_tTF1::GetNDF() const; virtual Int_tTFormula::GetNdim() const; virtual Int_tTFormula::GetNpar() const; virtual Int_tTF1::GetNpx() const; Int_tGetNpy() const; virtual Int_tTFormula::GetNumber() const; virtual Int_tTF1::GetNumberFitPoints() const; virtual Int_tTF1::GetNumberFreeParameters() const; virtual char*GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Double_tTFormula::GetParameter(Int_t ipar) const; Double_tTFormula::GetParameter(const char* name) const; virtual Double_t*TFormula::GetParameters() const; virtual",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TF2.html:5769,log,logx,5769,root/html530/TF2.html,https://root.cern,https://root.cern/root/html530/TF2.html,2,['log'],['logx']
Testability,"Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual TStringTFormula::GetExpFormula(Option_t* option = """") const; virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; TH1*TF1::GetHistogram() const; virtual const char*TObject::GetIconName() const; virtual const TObject*TFormula::GetLinearPart(Int_t i); virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual Color_tTAttMarker::GetMarkerColor() const; virtual Size_tTAttMarker::GetMarkerSize() const; virtual Style_tTAttMarker::GetMarkerStyle() const; virtual Double_tTF1::GetMaximum(Double_t xmin = 0, Double_t xmax = 0, Double_t epsilon = 1.E-10, Int_t maxiter = 100, Bool_t logx = false) const; virtual Double_tTF1::GetMaximumX(Double_t xmin = 0, Double_t xmax = 0, Double_t epsilon = 1.E-10, Int_t maxiter = 100, Bool_t logx = false) const; TMethodCall*TF1::GetMethodCall() const; virtual Double_tTF1::GetMinimum(Double_t xmin = 0, Double_t xmax = 0, Double_t epsilon = 1.E-10, Int_t maxiter = 100, Bool_t logx = false) const; virtual Double_tTF1::GetMinimumX(Double_t xmin = 0, Double_t xmax = 0, Double_t epsilon = 1.E-10, Int_t maxiter = 100, Bool_t logx = false) const; virtual voidTF2::GetMinimumXY(Double_t& x, Double_t& y); virtual voidGetMinimumXYZ(Double_t& x, Double_t& y, Double_t& z); virtual const char*TNamed::GetName() const; virtual Int_tTF1::GetNDF() const; virtual Int_tTFormula::GetNdim() const; virtual Int_tTFormula::GetNpar() const; virtual Int_tTF1::GetNpx() const; Int_tTF2::GetNpy() const; Int_tGetNpz() const; virtual Int_tTFormula::GetNumber() const; virtual Int_tTF1::GetNumberFitPoints() const; virtual Int_tTF1::GetNumberFreeParameters() const; virtual char*TF2::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Double_tTFormula::GetParameter(Int_t ipar) const; Double_tTFo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TF3.html:6360,log,logx,6360,root/html530/TF3.html,https://root.cern,https://root.cern/root/html530/TF3.html,2,['log'],['logx']
Testability,"Options ; (; ). privatevirtual . Implements TMVA::MethodCompositeBase.; Definition at line 176 of file MethodBoost.cxx. ◆ DeclFileName(). static const char * TMVA::MethodBoost::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 202 of file MethodBoost.h. ◆ FindMVACut(). void TMVA::MethodBoost::FindMVACut ; (; MethodBase * ; method). private . find the CUT on the individual MVA that defines an event as correct or misclassified (to be used in the boosting process) ; Definition at line 690 of file MethodBoost.cxx. ◆ GetBoostNum(). Int_t TMVA::MethodBoost::GetBoostNum ; (; ). inline . Definition at line 88 of file MethodBoost.h. ◆ GetBoostROCIntegral(). Double_t TMVA::MethodBoost::GetBoostROCIntegral ; (; Bool_t ; singleMethod, . Types::ETreeType ; eTT, . Bool_t ; CalcOverlapIntergral = kFALSE . ). private . Calculate the ROC integral of a single classifier or even the whole boosted classifier. ; The tree type (training or testing sample) is specified by 'eTT'.; If tree type kTraining is set, the original training sample is used to compute the ROC integral (original weights). singleMethod - if kTRUE, return ROC integral of single (last trained) classifier; if kFALSE, return ROC integral of full classifier; eTT - tree type (Types::kTraining / Types::kTesting); CalcOverlapIntergral - if kTRUE, the overlap integral of the signal/background MVA distributions is calculated and stored in 'fOverlap_integral' . Definition at line 1156 of file MethodBoost.cxx. ◆ GetHelpMessage(). void TMVA::MethodBoost::GetHelpMessage ; (; ); const. protectedvirtual . Get help message text. ; typical length of text line: ""|--------------------------------------------------------------|"" ; Implements TMVA::IMethod.; Definition at line 1049 of file MethodBoost.cxx. ◆ GetMvaValue(). Double_t TMVA::MethodBoost::GetMvaValue ; (; Double_t * ; err = nullptr, . Double_t * ; errUpper = nullptr . ). virtual . return boosted MVA response ; Impl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:37058,test,testing,37058,doc/master/classTMVA_1_1MethodBoost.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html,1,['test'],['testing']
Testability,"Options opt = kDefault); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); virtual Int_tSelect(Int_t interest = kRead, Long_t timeout = -1); virtual Int_tSend(const TMessage& mess); virtual Int_tSend(Int_t kind); virtual Int_tSend(Int_t status, Int_t kind); virtual Int_tSend(const char* mess, Int_t kind = kMESS_STRING); virtual Int_tSendObject(const TObject* obj, Int_t kind = kMESS_OBJECT); virtual Int_tSendRaw(const void* buffer, Int_t length, ESendRecvOptions opt = kDefault); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetCompressionLevel(Int_t level = 1); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual Int_tSetOption(ESockOptions opt, Int_t val); voidSetRemoteProtocol(Int_t rproto); voidSetSecContext(TSecContext* ctx); voidSetService(const char* service); voidSetServType(Int_t st); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); voidSetUrl(const char* url); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTouch(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSocket.html:6964,Test,TestBit,6964,root/html528/TSocket.html,https://root.cern,https://root.cern/root/html528/TSocket.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"Options"");; bar->AddButton(""fillrandom"", "".x hist/fillrandom.C"", ""Histograms with Random Numbers from a Function"");; bar->AddButton(""fit1"", "".x fit/fit1.C"", ""A Simple Fitting Example"");; bar->AddButton(""multifit"", "".x fit/multifit.C"", ""Fitting in Subranges of Histograms"");; bar->AddButton(""h1ReadAndDraw"", "".x hist/h1ReadAndDraw.C"", ""Drawing Options for 1D Histograms"");; bar->AddButton(""graph"", "".x graphs/graph.C"", ""Example of a Simple Graph"");; bar->AddButton(""gerrors"", "".x graphs/gerrors.C"", ""Example of a Graph with Error Bars"");; bar->AddButton(""tornado"", "".x graphics/tornado.C"", ""Examples of 3-D PolyMarkers"");; bar->AddButton(""geometry"", "".x geom/rootgeom.C"", ""Example of TGeoManager drawing"");; bar->AddButton(""file"", "".x io/file.C"", ""The ROOT File Format"");; bar->AddButton(""fildir"", "".x io/fildir.C"", ""The ROOT File, Directories and Keys"");; bar->AddButton(""tree"", "".x tree/tree.C"", ""The Tree Data Structure"");; bar->AddButton(""ntuple1"", "".x tree/ntuple1.C"", ""Ntuples and Selections"");; bar->AddButton(""benchmarks"", "".x legacy/benchmarks.C"", ""Runs several tests and produces an benchmark report"");; bar->AddButton(""rootmarks"", "".x legacy/rootmarks.C"", ""Prints an Estimated ROOTMARKS for Your Machine"");; bar->SetButtonWidth(90);; bar->Show();; gROOT->SaveContext();; }; gInterpreter#define gInterpreterDefinition TInterpreter.h:573; gROOT#define gROOTDefinition TROOT.h:406; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:561; TControlBarA Control Bar is a fully user configurable tool which provides fast access to frequently used operati...Definition TControlBar.h:26; TControlBar::Showvoid Show()Show control bar.Definition TControlBar.cxx:317; TControlBar::SetButtonWidthvoid SetButtonWidth(UInt_t width)Sets the width in pixels for control bar button.Definition TControlBar.cxx:277; TControlBar::AddButtonvoid AddButton(TControlBarButton *button)Add button.Definition TControlBar.cxx:141; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/demos_8C.html:2422,benchmark,benchmarks,2422,doc/master/demos_8C.html,https://root.cern,https://root.cern/doc/master/demos_8C.html,1,['benchmark'],['benchmarks']
Testability,Options(). void MethodC50::ProcessOptions ; (; ). virtual . Implements TMVA::RMethodBase.; Definition at line 196 of file MethodC50.cxx. ◆ ReadModelFromFile(). void TMVA::MethodC50::ReadModelFromFile ; (; ). Definition at line 324 of file MethodC50.cxx. ◆ ReadWeightsFromStream() [1/3]. virtual void TMVA::MethodC50::ReadWeightsFromStream ; (; std::istream & ; ). inlinevirtual . Implements TMVA::RMethodBase.; Definition at line 72 of file MethodC50.h. ◆ ReadWeightsFromStream() [2/3]. virtual void TMVA::MethodBase::ReadWeightsFromStream ; (; std::istream & ; ). virtual . Implements TMVA::RMethodBase. ◆ ReadWeightsFromStream() [3/3]. virtual void TMVA::MethodBase::ReadWeightsFromStream ; (; TFile & ; ). inlinevirtual . Reimplemented from TMVA::RMethodBase.; Definition at line 266 of file MethodBase.h. ◆ ReadWeightsFromXML(). virtual void TMVA::MethodC50::ReadWeightsFromXML ; (; void * ; ). inlinevirtual . Implements TMVA::RMethodBase.; Definition at line 71 of file MethodC50.h. ◆ TestClassification(). void MethodC50::TestClassification ; (; ). virtual . initialization ; Reimplemented from TMVA::MethodBase.; Definition at line 217 of file MethodC50.cxx. ◆ Train(). void MethodC50::Train ; (; void ; ). virtual . Implements TMVA::RMethodBase.; Definition at line 134 of file MethodC50.cxx. Friends And Related Symbol Documentation. ◆ Factory. friend class Factory. friend . Definition at line 80 of file MethodC50.h. ◆ Reader. friend class Reader. friend . Definition at line 81 of file MethodC50.h. Member Data Documentation. ◆ asfactor. ROOT::R::TRFunctionImport TMVA::MethodC50::asfactor. protected . Definition at line 105 of file MethodC50.h. ◆ C50. ROOT::R::TRFunctionImport TMVA::MethodC50::C50. protected . Definition at line 103 of file MethodC50.h. ◆ C50Control. ROOT::R::TRFunctionImport TMVA::MethodC50::C50Control. protected . Definition at line 104 of file MethodC50.h. ◆ fControlBands. UInt_t TMVA::MethodC50::fControlBands. protected . Definition at line 89 of file Method,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodC50.html:32341,Test,TestClassification,32341,doc/master/classTMVA_1_1MethodC50.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodC50.html,1,['Test'],['TestClassification']
Testability,"Options(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; UInt_tTargetSelectionToUInt(TMVA::ETargetSelection ts) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); voidTrainMonoTargetRegression(); voidTrainMultiClassification(); voidTrainMultiTargetRegression(); voidTrainSeparatedClassification(); voidTrainUnifiedClassification(); TMVA::MethodPDEFoam::EKernelUIntToKernel(UInt_t iker); TMVA::ETargetSelectionUIntToTargetSelection(UInt_t its); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::MethodBase::WriteEvaluationHistosToFile(TMVA::Types::ETreeType treetype); voidWriteFoamsToFile() const; virtual voidTMVA::MethodBase::WriteMonitoringHistosToFile() ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__MethodPDEFoam.html:12919,Test,TestRegression,12919,root/html534/TMVA__MethodPDEFoam.html,https://root.cern,https://root.cern/root/html534/TMVA__MethodPDEFoam.html,1,['Test'],['TestRegression']
Testability,"Output = ( 1 , 100 , 1 ) Activation Function = Identity; : Using 1280 events for training and 320 for testing; : Compute initial loss on the validation data ; : Training phase 1 of 1: Optimizer ADAM (beta1=0.9,beta2=0.999,eps=1e-07) Learning rate = 0.001 regularization 0 minimum error = 119.005; : --------------------------------------------------------------; : Epoch | Train Err. Val. Err. t(s)/epoch t(s)/Loss nEvents/s Conv. Steps; : --------------------------------------------------------------; : Start epoch iteration ...; : 1 Minimum Test error found - save the configuration ; : 1 | 0.881238 0.852851 0.181896 0.0160504 7235.64 0; : 2 Minimum Test error found - save the configuration ; : 2 | 0.658204 0.827727 0.182292 0.0161751 7223.84 0; : 3 Minimum Test error found - save the configuration ; : 3 | 0.58547 0.792475 0.182478 0.0158424 7201.32 0; : 4 Minimum Test error found - save the configuration ; : 4 | 0.508772 0.760461 0.18258 0.0158465 7197.11 0; : 5 Minimum Test error found - save the configuration ; : 5 | 0.445197 0.705323 0.183204 0.015935 7174.07 0; : 6 | 0.409018 0.708257 0.18274 0.0151517 7160.42 1; : 7 | 0.369062 0.747523 0.18295 0.0151377 7150.84 2; : 8 | 0.31294 0.740134 0.183339 0.015769 7161.2 3; : 9 | 0.256184 0.756239 0.181088 0.0154708 7245.63 4; : 10 | 0.224257 0.809455 0.18089 0.0153446 7248.78 5; : ; : Elapsed time for training with 1600 events: 1.86 sec ; : Evaluate deep neural network on CPU using batches with size = 100; : ; TMVA_DNN_CPU : [dataset] : Evaluation of TMVA_DNN_CPU on training sample (1600 events); : Elapsed time for evaluation of 1600 events: 0.0796 sec ; : Creating xml weight file: ␛[0;36mdataset/weights/TMVA_CNN_Classification_TMVA_DNN_CPU.weights.xml␛[0m; : Creating standalone class: ␛[0;36mdataset/weights/TMVA_CNN_Classification_TMVA_DNN_CPU.class.C␛[0m; Factory : Training finished; : ; Factory : Train method: TMVA_CNN_CPU for Classification; : ; : Start of deep neural network training on CPU using MT, nthreads = 4; : ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__CNN__Classification_8C.html:12008,Test,Test,12008,doc/master/TMVA__CNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__CNN__Classification_8C.html,1,['Test'],['Test']
Testability,"Overlap(Hear,1,new TGeoTranslation(0,0,89-i));; }; for (int i=1; i<28; i+=1) {; float a=i*0.2;; TGeoVolume *Hear=Robot->MakeCons(""Hear"",Iron,3,13+a,16+a,13+a,16+a,-70-a,-60-a);; Hear->SetLineColor(2);; Hear->SetFillColor(2);; top->AddNodeOverlap(Hear,1,new TGeoTranslation(0,0,89-i));; }; for (int i=1; i<28; i+=1) {; float a=i*0.2;; TGeoVolume *Hear=Robot->MakeCons(""Hear"",Iron,3,13+a,16+a,13+a,16+a,60+a,70+a);; Hear->SetLineColor(2);; Hear->SetFillColor(2);; top->AddNodeOverlap(Hear,1,new TGeoTranslation(0,0,89-i));; }; ; // neck; TGeoVolume *Mock=Robot->MakeTrd2(""Mock"",Iron,1,1,7,6.5,20);; Mock->SetLineColor(17);; Mock->SetFillColor(17);; TGeoVolume *Mock_1=Robot->MakeTrd2(""Mock_1"",Iron,1,1,6,5,20);; Mock_1->SetLineColor(17);; Mock_1->SetFillColor(17);; TGeoVolume *Mock_s=Robot->MakeTrd2(""Mock_s"",Iron,1,1,5,4.5,20);; Mock_s->SetLineColor(17);; Mock_s->SetFillColor(17);; ; // drawing neck; top->AddNodeOverlap(Mock,1,new TGeoCombiTrans(-5,4.7,50,new TGeoRotation(""R2"",-30,0,-10)));; top->AddNodeOverlap(Mock,1,new TGeoCombiTrans(-5,-4.7,50,new TGeoRotation(""R2"",30,0,10)));; top->AddNodeOverlap(Mock_1,1,new TGeoCombiTrans(11,-4,50,new TGeoRotation(""R2"",130,-8,10)));; top->AddNodeOverlap(Mock_1,1,new TGeoCombiTrans(11,4,50,new TGeoRotation(""R2"",-130,8,-10)));; top->AddNodeOverlap(Mock_s,1,new TGeoCombiTrans(2.5,9,50,new TGeoRotation(""R2"",90,0,0)));; top->AddNodeOverlap(Mock_s,1,new TGeoCombiTrans(2.5,-9,50,new TGeoRotation(""R2"",90,0,0)));; ; ; // chest; TGeoVolume *Gasem=Robot->MakeBox(""Gasem"",Iron,16,50,20);; Gasem->SetLineColor(12);; Gasem->SetFillColor(12);; TGeoVolume *Gasem_b1=Robot->MakeSphere(""Gasem_b1"",Iron,0,15,0,180,0,360);; Gasem_b1->SetLineColor(12);; Gasem_b1->SetFillColor(12);; TGeoVolume *Gasem_b2=Robot->MakeSphere(""Gasem_b2"",Iron,0,13,0,180,0,360);; Gasem_b2->SetLineColor(12);; Gasem_b2->SetFillColor(12);; TGeoVolume *Gasem_1=Robot->MakeEltu(""Gasem_1"",Iron,13,13,20);; Gasem_1->SetLineColor(12);; Gasem_1->SetFillColor(12);; TGeoVolume *Gasem_2=Robot->MakeEl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/robot_8C.html:6997,Mock,Mock,6997,doc/master/robot_8C.html,https://root.cern,https://root.cern/doc/master/robot_8C.html,1,['Mock'],['Mock']
Testability,"Overlaps() const; voidRandomPoints(TGeoVolume* vol, Int_t npoints, Option_t* option); voidRandomRays(Int_t nrays, Double_t startx, Double_t starty, Double_t startz, const char* target_vol = 0, Bool_t check_norm = kFALSE); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); TGeoNode*SamplePoints(Int_t npoints, Double_t& dist, Double_t epsil, const char* g3path); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetNmeshPoints(Int_t npoints = 1000); static voidTObject::SetObjectStat(Bool_t stat); voidSetSelectedNode(TGeoNode* node); virtual voidTObject::SetUniqueID(UInt_t uid); voidShapeDistances(TGeoShape* shape, Int_t nsamples, Option_t* option); voidShapeNormal(TGeoShape* shape, Int_t nsamples, Option_t* option); voidShapeSafety(TGeoShape* shape, Int_t nsamples, Option_t* option); Double_t*ShootRay(Double_t* start, Double_t dirx, Double_t diry, Double_t dirz, Double_t* array, Int_t& nelem, Int_t& dim, Double_t* enpoint = 0) const; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; voidTest(Int_t npoints, Option_t* option); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTestOverlaps(const char* path); Bool_tTestVoxels(TGeoVolume* vol, Int_t npoints = 1000000); TGeoChecker(); TGeoChecker(TGeoManager* geom); TGeoChecker(const TGeoChecker&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Double_tWeight(Double_t precision = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoChecker.html:8560,Test,TestBit,8560,root/html602/TGeoChecker.html,https://root.cern,https://root.cern/root/html602/TGeoChecker.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"Overwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TMultiLayerPerceptron ();  Default constructor. ;  ;  TMultiLayerPerceptron (const char *layout, const char *weight, TTree *data, TEventList *training, TEventList *test, TNeuron::ENeuronType type=TNeuron::kSigmoid, const char *extF="""", const char *extD="""");  The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ;  ;  TMultiLayerPerceptron (const char *layout, const char *weight, TTree *data=nullptr, const char *training=""Entry$%2==0"", const char *test="""", TNeuron::ENeuronType type=TNeuron::kSigmoid, const char *extF="""", const char *extD="""");  The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ;  ;  TMultiLayerPerceptron (const char *layout, TTree *data, TEventList *training, TEventList *test, TNeuron::ENeuronType type=TNeuron::kSigmoid, const char *extF="""", const char *extD="""");  The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ;  ;  TMultiLayerPerceptron (const char *layout, TTree *data=nullptr, const char *training=""Entry$%2==0"", const char *test="""", TNeuron::ENeuronType type=TNeuron::kSigmoid, const char *extF="""", const char *extD="""");  The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ;  ;  ~TMultiLayerPerceptron () override;  Destructor. ;  ; void ComputeDEDw () const;  Compute the DEDw = sum on all training events of dedw for each wei",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiLayerPerceptron.html:10535,test,test,10535,doc/master/classTMultiLayerPerceptron.html,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html,1,['test'],['test']
Testability,"P NEURAL NETWORK: Depth = 4 Input = ( 1, 1, 2 ) Batch size = 50 Loss function = R; Layer 0 DENSE Layer: ( Input = 2 , Width = 50 ) Output = ( 1 , 50 , 50 ) Activation Function = Tanh; Layer 1 DENSE Layer: ( Input = 50 , Width = 50 ) Output = ( 1 , 50 , 50 ) Activation Function = Tanh; Layer 2 DENSE Layer: ( Input = 50 , Width = 50 ) Output = ( 1 , 50 , 50 ) Activation Function = Tanh; Layer 3 DENSE Layer: ( Input = 50 , Width = 1 ) Output = ( 1 , 50 , 1 ) Activation Function = Identity; : Using 800 events for training and 200 for testing; : Compute initial loss on the validation data ; : Training phase 1 of 1: Optimizer ADAM (beta1=0.9,beta2=0.999,eps=1e-07) Learning rate = 0.001 regularization 0 minimum error = 33494.1; : --------------------------------------------------------------; : Epoch | Train Err. Val. Err. t(s)/epoch t(s)/Loss nEvents/s Conv. Steps; : --------------------------------------------------------------; : Start epoch iteration ...; : 1 Minimum Test error found - save the configuration ; : 1 | 34747.6 33079.7 0.0192196 0.00176099 45822.6 0; : 2 Minimum Test error found - save the configuration ; : 2 | 34222.2 32417.1 0.0195047 0.0017702 45109.9 0; : 3 Minimum Test error found - save the configuration ; : 3 | 33496 31618.4 0.0197158 0.00178336 44611.8 0; : 4 Minimum Test error found - save the configuration ; : 4 | 32719.2 30843.2 0.0198205 0.00178286 44351.8 0; : 5 Minimum Test error found - save the configuration ; : 5 | 31879.6 30001 0.0200761 0.00184919 43891 0; : 6 Minimum Test error found - save the configuration ; : 6 | 30965 29177.4 0.0203037 0.00185469 43362.8 0; : 7 Minimum Test error found - save the configuration ; : 7 | 30273.8 28682.9 0.0206315 0.00190133 42711.9 0; : 8 Minimum Test error found - save the configuration ; : 8 | 29852.4 28319.6 0.0206438 0.00186969 42611.9 0; : 9 Minimum Test error found - save the configuration ; : 9 | 29498.2 28000.3 0.0204359 0.0018446 43030.8 0; : 10 Minimum Test error found - save the configuratio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:11209,Test,Test,11209,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,"PDF if any of its variables are functions instead of variables. In such cases, the normalization of the composite PDF may not simply be integral over the dependents of the top-level PDF: these are functions with potentially non-trivial Jacobian terms themselves. NoteTherefore, no explicit attempt should be made to normalize the function output in evaluate(). In particular, normalisation constants can be omitted to speed up the function evaluations, and included later in the integration of the PDF (see below), which is rarely called in comparison to the evaluate() function.; In addition, RooAbsPdf objects do not have a static concept of what variables are parameters, and what variables are dependents (which need to be integrated over for a correct PDF normalization). Instead, the choice of normalization is always specified each time a normalized value is requested from the PDF via the getVal() method.; RooAbsPdf manages the entire normalization logic of each PDF with the help of a RooRealIntegral object, which coordinates the integration of a given choice of normalization. By default, RooRealIntegral will perform an entirely numeric integration of all dependents. However, PDFs can advertise one or more (partial) analytical integrals of their function, and these will be used by RooRealIntegral, if it determines that this is safe (i.e., no hidden Jacobian terms, multiplication with other PDFs that have one or more dependents in common, etc).; Implementing analytical integrals; To implement analytical integrals, two functions must be implemented. First,; Int_t getAnalyticalIntegral(const RooArgSet& integSet, RooArgSet& anaIntSet); RooAbsReal::getAnalyticalIntegralvirtual Int_t getAnalyticalIntegral(RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) constInterface function getAnalyticalIntergral advertises the analytical integrals that are supported.Definition RooAbsReal.cxx:368; RooArgSetRooArgSet is a container object that can hold multiple RooAbsAr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsPdf.html:2216,log,logic,2216,doc/master/classRooAbsPdf.html,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html,1,['log'],['logic']
Testability,"PI.h. ◆ SetRFTrain(). void TMVA::RuleFitAPI::SetRFTrain ; (; ). inlineprotected . Definition at line 128 of file RuleFitAPI.h. ◆ SetRFVarimp(). void TMVA::RuleFitAPI::SetRFVarimp ; (; ). inlineprotected . Definition at line 130 of file RuleFitAPI.h. ◆ SetRFWorkDir(). void TMVA::RuleFitAPI::SetRFWorkDir ; (; const char * ; wdir). set the directory containing rf_go.exe. ; Definition at line 155 of file RuleFitAPI.cxx. ◆ SetTestParms(). void TMVA::RuleFitAPI::SetTestParms ; (; ). protected . set the test params ; Definition at line 201 of file RuleFitAPI.cxx. ◆ SetTrainParms(). void TMVA::RuleFitAPI::SetTrainParms ; (; ). protected . set the training parameters ; Definition at line 188 of file RuleFitAPI.cxx. ◆ Streamer(). virtual void TMVA::RuleFitAPI::Streamer ; (; TBuffer & ; ). virtual . ◆ StreamerNVirtual(). void TMVA::RuleFitAPI::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 195 of file RuleFitAPI.h. ◆ TestRuleFit(). void TMVA::RuleFitAPI::TestRuleFit ; (; ). inline . Definition at line 211 of file RuleFitAPI.h. ◆ TrainRuleFit(). void TMVA::RuleFitAPI::TrainRuleFit ; (; ). inline . Definition at line 202 of file RuleFitAPI.h. ◆ VarImp(). void TMVA::RuleFitAPI::VarImp ; (; ). inline . Definition at line 221 of file RuleFitAPI.h. ◆ WelcomeMessage(). void TMVA::RuleFitAPI::WelcomeMessage ; (; ). welcome message ; Definition at line 76 of file RuleFitAPI.cxx. ◆ WriteAll(). Bool_t TMVA::RuleFitAPI::WriteAll ; (; ). protected . write all files read by rf_go.exe ; Definition at line 248 of file RuleFitAPI.cxx. ◆ WriteFloat(). Bool_t TMVA::RuleFitAPI::WriteFloat ; (; std::ofstream & ; f, . const Float_t * ; v, . Int_t ; n = 1 . ). inlineprotected . Definition at line 274 of file RuleFitAPI.h. ◆ WriteInt(). Bool_t TMVA::RuleFitAPI::WriteInt ; (; std::ofstream & ; f, . const Int_t * ; v, . Int_t ; n = 1 . ). inlineprotected . Definition at line 266 of file RuleFitAPI.h. ◆ WriteIntParms(). Bool_t TMVA::RuleFitAPI::WriteIntParms ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1RuleFitAPI.html:10875,Test,TestRuleFit,10875,doc/master/classTMVA_1_1RuleFitAPI.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1RuleFitAPI.html,1,['Test'],['TestRuleFit']
Testability,"POI); virtual Double_tEvaluateTestStatistic(RooAbsData& data, RooArgSet& nullPOI, int i); virtual voidGenerateGlobalObservables(RooAbsPdf& pdf) const; virtual RooAbsData*GenerateToyData(RooArgSet& paramPoint) const; virtual RooAbsData*GenerateToyData(RooArgSet& paramPoint, RooAbsPdf& pdf) const; virtual RooAbsData*GenerateToyData(RooArgSet& paramPoint, double& weight) const; virtual RooAbsData*GenerateToyData(RooArgSet& paramPoint, double& weight, RooAbsPdf& pdf) const; virtual Int_tGetNToys(); stringGetSamplingDistName(); virtual RooStats::SamplingDistribution*GetSamplingDistribution(RooArgSet& paramPoint); virtual RooDataSet*GetSamplingDistributions(RooArgSet& paramPoint); virtual RooDataSet*GetSamplingDistributionsSingleWorker(RooArgSet& paramPoint); virtual RooStats::TestStatistic*GetTestStatistic() const; virtual RooStats::TestStatistic*GetTestStatistic(unsigned int i) const; virtual voidInitialize(RooAbsArg&, RooArgSet&, RooArgSet&); virtual TClass*IsA() const; RooStats::TestStatSampler&RooStats::TestStatSampler::operator=(const RooStats::TestStatSampler&); static voidSetAlwaysUseMultiGen(Bool_t flag); virtual voidSetAsimovNuisancePar(Bool_t i = kTRUE); virtual voidSetConfidenceLevel(Double_t cl); virtual voidSetExpectedNuisancePar(Bool_t i = kTRUE); voidSetGenerateAutoBinned(Bool_t autoBinned = kTRUE); voidSetGenerateBinned(bool binned = true); voidSetGenerateBinnedTag(const char* binnedTag = """"); virtual voidSetGlobalObservables(const RooArgSet& o); voidSetMaxToys(Double_t t); virtual voidSetNEventsPerToy(const Int_t nevents); virtual voidSetNToys(const Int_t ntoy); virtual voidSetNuisanceParameters(const RooArgSet& np); virtual voidSetObservables(const RooArgSet& o); virtual voidSetParametersForTestStat(const RooArgSet& nullpoi); virtual voidSetPdf(RooAbsPdf& pdf); virtual voidSetPriorNuisance(RooAbsPdf* pdf); voidSetProofConfig(RooStats::ProofConfig* pc = NULL); voidSetProtoData(const RooDataSet* d); virtual voidSetSamplingDistName(const char* name); virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__ToyMCSampler.html:1862,Test,TestStatSampler,1862,root/html534/RooStats__ToyMCSampler.html,https://root.cern,https://root.cern/root/html534/RooStats__ToyMCSampler.html,1,['Test'],['TestStatSampler']
Testability,"PUMeter.C;  Simple macro showing capabilities of the TGSpeedo widget. ;  ; file  customContextMenu.C;  Example showing how to add a function to the class context menu. ;  ; file  customTH1Fmenu.C;  Example showing how to customize a context menu for a class. ;  ; file  drag_and_drop.C;  This tutorial illustrates how to use drag and drop within ROOT. ;  ; file  exec3.C;  Example of using signal/slot in TCanvas/TPad to get feedback about processed events. ;  ; file  exec_macro.C;  This utility macro executes the macro ""macro"" given as first argument and save a capture in a png file. ;  ; file  games.C;  This macro runs three ""games"" that each nicely illustrate the graphics capabilities of ROOT. ;  ; file  gtreeTableTest.C;  This TableTest class is a simple example of how to use a TGTreeTable. ;  ; file  guilabels.C;  This macro gives an example of how to create different kind of labels and the possibility to enable/disable them. ;  ; file  guitest.C;  Test program for ROOT native GUI classes Exactly like $ROOTSYS/test/guitest.cxx but using the new signal and slots communication mechanism. ;  ; file  guitest_playback.C;  This macro plays a recorded ROOT session showing how to perform various interactive GUI operations with the guitest.C macro While replaying the session, several temporary macros (guitest0xx.C) macros will be saved. ;  ; file  guiWithCLING.C;  A simple example of entering CLING commands and having the CLING output in a ROOT GUI application window. ;  ; file  iconAsXPMData.C;  A simple example of creating icon image from XPM data, included into the code. ;  ; file  listBox.C;  This macro gives an example of how to create a list box and how to set and use its multiple selection feature. ;  ; file  mditest.C;  GUI MDI features. ;  ; file  ntupleTableTest.C;  This TableTest class is a simple example of how to use a TGTable with a TTreeTableInterface. ;  ; file  numberEntry.C;  This macro gives an example of how to create a number entry and how to update a l",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__gui.html:1743,Test,Test,1743,doc/master/group__tutorial__gui.html,https://root.cern,https://root.cern/doc/master/group__tutorial__gui.html,2,"['Test', 'test']","['Test', 'test']"
Testability,Pad ; (; ); const. overridevirtual . Get selected pad. ; Implements TVirtualPad.; Definition at line 2811 of file TPad.cxx. ◆ GetTheta(). Double_t TPad::GetTheta ; (; ); const. inlineoverridevirtual . Implements TVirtualPad.; Definition at line 226 of file TPad.h. ◆ GetTickx(). Int_t TPad::GetTickx ; (; ); const. inlineoverridevirtual . Implements TVirtualPad.; Definition at line 238 of file TPad.h. ◆ GetTicky(). Int_t TPad::GetTicky ; (; ); const. inlineoverridevirtual . Implements TVirtualPad.; Definition at line 239 of file TPad.h. ◆ GetTitle(). const char * TPad::GetTitle ; (; ); const. inlineoverridevirtual . Returns title of object. ; This default method returns the class title (i.e. description). Classes that give objects a title should override this method. ; Implements TVirtualPad.; Definition at line 261 of file TPad.h. ◆ GetUxmax(). Double_t TPad::GetUxmax ; (; ); const. inlineoverridevirtual . Returns the maximum x-coordinate value visible on the pad. If log axis the returned value is in decades. ; Implements TVirtualPad.; Definition at line 232 of file TPad.h. ◆ GetUxmin(). Double_t TPad::GetUxmin ; (; ); const. inlineoverridevirtual . Returns the minimum x-coordinate value visible on the pad. If log axis the returned value is in decades. ; Implements TVirtualPad.; Definition at line 228 of file TPad.h. ◆ GetUymax(). Double_t TPad::GetUymax ; (; ); const. inlineoverridevirtual . Returns the maximum y-coordinate value visible on the pad. If log axis the returned value is in decades. ; Implements TVirtualPad.; Definition at line 234 of file TPad.h. ◆ GetUymin(). Double_t TPad::GetUymin ; (; ); const. inlineoverridevirtual . Returns the minimum y-coordinate value visible on the pad. If log axis the returned value is in decades. ; Implements TVirtualPad.; Definition at line 230 of file TPad.h. ◆ GetView(). TView * TPad::GetView ; (; ); const. inlineoverridevirtual . Implements TVirtualPad.; Definition at line 254 of file TPad.h. ◆ GetView3D(). TObject * TPa,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPad.html:83005,log,log,83005,doc/master/classTPad.html,https://root.cern,https://root.cern/doc/master/classTPad.html,1,['log'],['log']
Testability,"Pad->NextPaletteColor();; 2987 if (is_pfc != kNPOS) { opt0.Replace(is_pfc, 3, "" ""); fHistogram->SetFillColor(i); }; 2988 if (is_plc != kNPOS) { opt0.Replace(is_plc, 3, "" ""); fHistogram->SetLineColor(i); }; 2989 if (is_pmc != kNPOS) { opt0.Replace(is_pmc, 3, "" ""); fHistogram->SetMarkerColor(i); }; 2990 }; 2991 ; 2992 // set the optimal minimum and maximum; 2993 Double_t minimum = fHistogram->GetMinimumStored();; 2994 Double_t maximum = fHistogram->GetMaximumStored();; 2995 if (minimum <= 0 && gPad && gPad->GetLogy()) minimum = -1111; // This can happen when switching from lin to log scale.; 2996 if (gPad && gPad->GetUymin() < fHistogram->GetMinimum() &&; 2997 !fHistogram->TestBit(TH1::kIsZoomed)) minimum = -1111; // This can happen after unzooming a fit.; 2998 if (minimum == -1111) { // This can happen after unzooming.; 2999 if (fHistogram->TestBit(TH1::kIsZoomed)) {; 3000 minimum = fHistogram->GetYaxis()->GetXmin();; 3001 } else {; 3002 minimum = fMinimum;; 3003 // Optimize the computation of the scale in Y in case the min/max of the; 3004 // function oscillate around a constant value; 3005 if (minimum == -1111) {; 3006 Double_t hmin;; 3007 if (optSAME.Length() && gPad) hmin = gPad->GetUymin();; 3008 else hmin = fHistogram->GetMinimum();; 3009 if (hmin > 0) {; 3010 Double_t hmax;; 3011 Double_t hminpos = hmin;; 3012 if (optSAME.Length() && gPad) hmax = gPad->GetUymax();; 3013 else hmax = fHistogram->GetMaximum();; 3014 hmin -= 0.05 * (hmax - hmin);; 3015 if (hmin < 0) hmin = 0;; 3016 if (hmin <= 0 && gPad && gPad->GetLogy()) hmin = hminpos;; 3017 minimum = hmin;; 3018 }; 3019 }; 3020 }; 3021 fHistogram->SetMinimum(minimum);; 3022 }; 3023 if (maximum == -1111) {; 3024 if (fHistogram->TestBit(TH1::kIsZoomed)) {; 3025 maximum = fHistogram->GetYaxis()->GetXmax();; 3026 } else {; 3027 maximum = fMaximum;; 3028 }; 3029 fHistogram->SetMaximum(maximum);; 3030 }; 3031 ; 3032 // Draw the histogram.; 3033 if (!gPad) return;; 3034 if (opt.Length() == 0) {; 3035 optSAME.Prepend(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TF1_8cxx_source.html:114954,Test,TestBit,114954,doc/master/TF1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TF1_8cxx_source.html,1,['Test'],['TestBit']
Testability,"Pad.; Definition at line 239 of file TPad.h. ◆ GetTitle(). const char * TPad::GetTitle ; (; ); const. inlineoverridevirtual . Returns title of object. ; This default method returns the class title (i.e. description). Classes that give objects a title should override this method. ; Implements TVirtualPad.; Definition at line 261 of file TPad.h. ◆ GetUxmax(). Double_t TPad::GetUxmax ; (; ); const. inlineoverridevirtual . Returns the maximum x-coordinate value visible on the pad. If log axis the returned value is in decades. ; Implements TVirtualPad.; Definition at line 232 of file TPad.h. ◆ GetUxmin(). Double_t TPad::GetUxmin ; (; ); const. inlineoverridevirtual . Returns the minimum x-coordinate value visible on the pad. If log axis the returned value is in decades. ; Implements TVirtualPad.; Definition at line 228 of file TPad.h. ◆ GetUymax(). Double_t TPad::GetUymax ; (; ); const. inlineoverridevirtual . Returns the maximum y-coordinate value visible on the pad. If log axis the returned value is in decades. ; Implements TVirtualPad.; Definition at line 234 of file TPad.h. ◆ GetUymin(). Double_t TPad::GetUymin ; (; ); const. inlineoverridevirtual . Returns the minimum y-coordinate value visible on the pad. If log axis the returned value is in decades. ; Implements TVirtualPad.; Definition at line 230 of file TPad.h. ◆ GetView(). TView * TPad::GetView ; (; ); const. inlineoverridevirtual . Implements TVirtualPad.; Definition at line 254 of file TPad.h. ◆ GetView3D(). TObject * TPad::GetView3D ; (; ); const. inlineoverridevirtual . Implements TVirtualPad.; Definition at line 255 of file TPad.h. ◆ GetViewer3D(). TVirtualViewer3D * TPad::GetViewer3D ; (; Option_t * ; type = """"). overridevirtual . Create/obtain handle to 3D viewer. ; Valid types are:; 'pad' - pad drawing via TViewer3DPad any others registered with plugin manager supporting TVirtualViewer3D If an invalid/null type is requested then the current viewer is returned (if any), otherwise a default 'pad' type is",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPad.html:83501,log,log,83501,doc/master/classTPad.html,https://root.cern,https://root.cern/doc/master/classTPad.html,1,['log'],['log']
Testability,"Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual voidPrintValue(Int_t i = 0) const; virtual Int_tTObject::Read(const char* name); virtual voidReadBasket(TBuffer&); virtual voidReadBasketExport(TBuffer&, TClonesArray*, Int_t); virtual voidReadValue(ifstream&); virtual voidTObject::RecursiveRemove(TObject* obj); Int_tResetAddress(void* add, Bool_t destructor = kFALSE); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); virtual voidSetAddress(void* add = 0); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidSetBranch(TBranch* branch); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetLeafCount(TLeaf* leaf); virtual voidSetLen(Int_t len = 1); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetOffset(Int_t offset = 0); virtual voidSetRange(Bool_t range = kTRUE); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidSetUnsigned(); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TLeaf.html:5695,Test,TestBit,5695,root/html528/TLeaf.html,https://root.cern,https://root.cern/root/html528/TLeaf.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); Int_tRegularizeBins(int start, int step, int nbin, TUnfold::ERegMode regmode); Int_tRegularizeBins2D(int start_bin, int step1, int nbin1, int step2, int nbin2, TUnfold::ERegMode regmode); Int_tRegularizeCurvature(int left_bin, int center_bin, int right_bin, Double_t scale_left = 1.0, Double_t scale_right = 1.0); Int_tRegularizeDerivative(int left_bin, int right_bin, Double_t scale = 1.0); Int_tRegularizeSize(int bin, Double_t scale = 1.0); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); virtual Int_tScanLcurve(Int_t nPoint, Double_t tauMin, Double_t tauMax, TGraph** lCurve, TSpline** logTauX = 0, TSpline** logTauY = 0); voidSetBias(const TH1* bias); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetConstraint(TUnfold::EConstraint constraint); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual Int_tSetInput(const TH1* hist_y, Double_t scaleBias = 0.0, Double_t oneOverZeroError = 0.0); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TUnfold.html:16234,log,logTauX,16234,root/html528/TUnfold.html,https://root.cern,https://root.cern/root/html528/TUnfold.html,2,['log'],"['logTauX', 'logTauY']"
Testability,"Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidRemove(); virtual voidTSysEvtHandler::Removed()SIGNAL ; voidReset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetCommand(const char* command); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetInterruptSyscalls(Bool_t set = kTRUE); voidSetObject(TObject* object); static voidTObject::SetObjectStat(Bool_t stat); voidSetTime(Long_t milliSec); voidSetTimerID(UInt_t id = 0); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; static voidSingleShot(Int_t milliSec, const char* receiver_class, void* receiver, const char* method); virtual voidStart(Long_t milliSec = -1, Bool_t singleShot = kFALSE); virtual voidStop(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTimeout()SIGNAL ; TTimer(Long_t milliSec = 0, Bool_t mode = kTRUE); TTimer(TObject* obj, Long_t milliSec, Bool_t mode = kTRUE); TTimer(const char* command, Long_t milliSec, Bool_t mode = kTRUE); virtual voidTurnOff()SIGNAL ; virtual voidTurnOn()SIGNAL ; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTimer.html:9056,Test,TestBit,9056,root/html602/TTimer.html,https://root.cern,https://root.cern/root/html602/TTimer.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); Double_tRoot(Double_t refValue); TMVA::RootFinderRootFinder(const TMVA::RootFinder&); TMVA::RootFinderRootFinder(Double_t(*)(Double_t) rootVal, Double_t rootMin, Double_t rootMax, Int_t maxIterations = 100, Double_t absTolerance = 0.); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. TMVA::MsgLogger&Log() const. Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__RootFinder.html:5162,Test,TestBit,5162,root/html602/TMVA__RootFinder.html,https://root.cern,https://root.cern/root/html602/TMVA__RootFinder.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"ParallelGradientOptions(bool enable=true, int orderStrategy=0, int chainFactor=1) Experimental - Control gradient parallelization settings. The first argument only disables or enables gradient parallelization, this is on by default. The second argument determines the internal partial derivative calculation ordering strategy. The third argument determines the number of partial derivatives that are executed per task package on each worker. . ParallelDescentOptions(bool enable=false, int splitStrategy=0, int numSplits=4) Experimental - Control settings related to the parallelization of likelihoods outside of the gradient calculation but in the minimization, most prominently in the linesearch step. The first argument this disables or enables likelihood parallelization. The second argument determines whether to split the task batches per event or per likelihood component. And the third argument how many events or respectively components to include in each batch. . TimingAnalysis(bool flag) Experimental - Log timings. This feature logs timings with NewStyle likelihoods on multiple processes simultaneously and outputs the timings at the end of a run to json log files, which can be analyzed with the RooFit::MultiProcess::HeatmapAnalyzer. Only works with simultaneous likelihoods. . PyROOT; The RooAbsPdf::fitTo() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 157 of file RooAbsPdf.h. ◆ fitToImpl(). std::unique_ptr< RooFitResult > RooAbsPdf::fitToImpl ; (; RooAbsData & ; data, . const RooLinkedList & ; cmdList . ). protectedvirtual . Protected implementation of the likelihood fitting routine. ; This virtual function can be overridden in case you want to change the likelihood fitting logic for custom PDFs.; NoteNever call this function directly. Instead, call RooAbsPdf::fitTo(). ; Definition at line 1072 of file RooAbsPdf.cxx. ◆ genContext(). RooAbsGenContext * RooAbsPdf::genConte",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsPdf.html:111442,Log,Log,111442,doc/master/classRooAbsPdf.html,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html,1,['Log'],['Log']
Testability,"ParseFile(const char* filename, Int_t maxbuf = 100000); XMLDocPointer_tParseString(const char* xmlstring); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); XMLNodePointer_tReadSingleNode(const char* src); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; voidSaveDoc(XMLDocPointer_t xmldoc, const char* filename, Int_t layout = 1); virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidSaveSingleNode(XMLNodePointer_t xmlnode, TString* res, Int_t layout = 1); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetNodeContent(XMLNodePointer_t xmlnode, const char* content, Int_t len = 0); static voidTObject::SetObjectStat(Bool_t stat); voidSetSkipComments(Bool_t on = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); voidShiftToNext(XMLNodePointer_t& xmlnode, Bool_t realnode = kTRUE); virtual voidShowMembers(TMemberInspector&); voidSkipEmpty(XMLNodePointer_t& xmlnode); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidUnlinkFreeNode(XMLNodePointer_t xmlnode); voidUnlinkNode(XMLNodePointer_t node); virtual voidTObject::UseCurrentStyle(); Bool_tValidateDocument(XMLDocPointer_t, Bool_t = kFALSE); Bool_tValidateVersion(XMLDocPointer_t doc, const char* version = 0); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TXMLEngine.html:7963,Test,TestBit,7963,root/html534/TXMLEngine.html,https://root.cern,https://root.cern/root/html534/TXMLEngine.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"ParticleClass() const; Int_tPdgCode() const; virtual voidTObject::Pop(); virtual voidPrint(Option_t* opt = """") constMENU ; virtual voidPrintDecayChannel(TDecayChannel* dc, Option_t* opt = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidSetAntiParticle(TParticlePDG* ap); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; Double_tSpin() const; Int_tStable() const; Int_tStrangeness() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Int_tTop() const; TParticlePDG(); TParticlePDG(const char* Name, const char* Title, Double_t Mass, Bool_t Stable, Double_t Width, Double_t Charge, const char* ParticleClass, Int_t PdgCode, Int_t Anti, Int_t TrackingCode); Int_tTrackingCode() const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Double_tWidth() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; Int_tX() const; Int_tY() const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TParticlePDG.html:6107,Test,TestBit,6107,root/html602/TParticlePDG.html,https://root.cern,https://root.cern/root/html602/TParticlePDG.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"PatternFinder& ); assignment operator. ~TGeoPatternFinder(); Destructor. Int_t GetCurrent(); Return current index. TGeoMatrix* GetMatrix(); Return current matrix. Int_t GetNext() const; Get index of next division. void SetNext(Int_t index); Set index of next division. TGeoNode * CdNext(); Make next node (if any) current. void SetRange(Double_t start, Double_t step, Int_t ndivisions); Set division range. Use this method only when dividing an assembly. ThreadData_t& GetThreadData() const. TGeoMatrix* CreateMatrix() const; methods. void cd(Int_t ); {}. TGeoNode * FindNode(Double_t* , const Double_t* = 0); {return 0;}. Int_t GetByteCount() const; {return 36;}. Int_t GetDivIndex(); {return fDivIndex;}. Int_t GetDivAxis(); {return 1;}. Int_t GetNdiv() const; {return fNdivisions;}. TGeoNode * GetNodeOffset(Int_t idiv); {return fVolume->GetNode(fDivIndex+idiv);}. Double_t GetStart() const; {return fStart;}. Double_t GetStep() const; {return fStep;}. Double_t GetEnd() const; {return fEnd;}. TGeoVolume * GetVolume() const; {return fVolume;}. Bool_t IsOnBoundary(const Double_t* ) const; {return kFALSE;}. Bool_t IsReflected() const; {return TObject::TestBit(kPatternReflected);}. Bool_t IsSpacedOut() const; {return TObject::TestBit(kPatternSpacedOut);}. TGeoPatternFinder * MakeCopy(Bool_t reflect = kFALSE). void Reflect(Bool_t flag = kTRUE); {TObject::SetBit(kPatternReflected,flag);}. void SetDivIndex(Int_t index); {fDivIndex = index;}. void SetSpacedOut(Bool_t flag); {TObject::SetBit(kPatternSpacedOut,flag);}. void SetVolume(TGeoVolume* vol); {fVolume = vol;}. void UpdateMatrix(Int_t , TGeoHMatrix& ) const; {}. » Author: Andrei Gheata 30/10/01 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/geom:$Id: TGeoPatternFinder.h 41234 2011-10-06 15:48:52Z agheata $ » Last generated: 2011-11-03 20:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoPatternFinder.html:8860,Test,TestBit,8860,root/html532/TGeoPatternFinder.html,https://root.cern,https://root.cern/root/html532/TGeoPatternFinder.html,2,['Test'],['TestBit']
Testability,"Pdf& pdf); Set the Pdf, add to the the workspace if not already there. { fPdf = &pdf; ClearCache(); }. void SetPriorNuisance(RooAbsPdf* pdf); How to randomize the prior. Set to NULL to deactivate randomization. { fPriorNuisance = pdf; }. void SetNuisanceParameters(const RooArgSet& np); specify the nuisance parameters (eg. the rest of the parameters). { fNuisancePars = &np; }. void SetObservables(const RooArgSet& o); specify the observables in the dataset (needed to evaluate the test statistic). { fObservables = &o; }. void SetGlobalObservables(const RooArgSet& o); specify the conditional observables. { fGlobalObservables = &o; }. void SetTestSize(Double_t size); set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval). { fSize = size; }. void SetConfidenceLevel(Double_t cl); set the confidence level for the interval (eg. 0.95 for a 95% Confidence Interval). { fSize = 1. - cl; }. void SetTestStatistic(RooStats::TestStatistic* testStatistic); Set the TestStatistic (want the argument to be a function of the data & parameter points. { fTestStat = testStatistic; }. void SetExpectedNuisancePar(Bool_t i = kTRUE); { fExpectedNuisancePar = i; }. void SetAsimovNuisancePar(Bool_t i = kTRUE); { fExpectedNuisancePar = i; }. void SetGenerateBinned(bool binned = true); control to use bin data generation (=> see RooFit::AllBinned() option). { fGenerateBinned = binned; }. void SetGenerateBinnedTag(const char* binnedTag = """"); name of the tag for individual components to be generated binned (=> see RooFit::GenBinned() option). { fGenerateBinnedTag = binnedTag; }. void SetGenerateAutoBinned(Bool_t autoBinned = kTRUE); set auto binned generation (=> see RooFit::AutoBinned() option). { fGenerateAutoBinned = autoBinned; }. void SetSamplingDistName(const char* name); Set the name of the sampling distribution used for plotting. { if(name) fSamplingDistName = name; }. string GetSamplingDistName(void); { return fSamplingDistName; }. void SetMaxToys(Double_t t)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooStats__ToyMCSampler.html:8996,Test,TestStatistic,8996,root/html532/RooStats__ToyMCSampler.html,https://root.cern,https://root.cern/root/html532/RooStats__ToyMCSampler.html,3,"['Test', 'test']","['TestStatistic', 'testStatistic']"
Testability,"Pdf, RooDstD0BG, RooExponential, RooGamma, RooGaussian, RooGaussModel, RooJohnson, RooLandau, RooLegacyExpPoly, RooLognormal, RooNovosibirsk, RooPoisson, RooPolynomial, RooPowerSum, RooVoigtian, RooAbsCachedPdf, RooAddition, RooAddModel, RooAddPdf, RooBinSamplingPdf, RooBinWidthFunction, RooConstraintSum, RooGenericPdf, RooHistFunc, RooHistPdf, RooPolyVar, RooProduct, RooRatio, RooRealSumPdf, RooTruthModel, RooNormalizedPdf, RooHypatia2, RooLegendre, RooFormulaVar, and RooFixedProdPdf.; Definition at line 4343 of file RooAbsReal.cxx. ◆ enableOffsetting(). void RooAbsReal::enableOffsetting ; (; bool ; flag). virtual . Reimplemented in RooAbsTestStatistic, and RooRealMPFE.; Definition at line 4484 of file RooAbsReal.cxx. ◆ evalErrorIter(). EvalErrorData::ErrorList::iterator RooAbsReal::evalErrorIter ; (; ). static . Definition at line 181 of file RooAbsReal.cxx. ◆ evalErrorLoggingMode(). RooAbsReal::ErrorLoggingMode RooAbsReal::evalErrorLoggingMode ; (; ). static . Return current evaluation error logging mode. ; Definition at line 4302 of file RooAbsReal.cxx. ◆ evaluate(). virtual double RooAbsReal::evaluate ; (; ); const. protectedpure virtual . Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ; Implemented in RooStats::HistFactory::FlexibleInterpVar, RooStats::HistFactory::LinInterpVar, ParamHistFunc, PiecewiseInterpolation, RooStats::HistFactory::RooBarlowBeestonLL, Roo2DKeysPdf, RooArgusBG, RooBernstein, RooBifurGauss, RooBreitWigner, RooBukinPdf, RooCBShape, RooCFunction1Binding< VO, VI >, RooCFunction1PdfBinding< VO, VI >, RooCFunction2Binding< VO, VI1, VI2 >, RooCFunction2PdfBinding< VO, VI1, VI2 >, RooCFunction3Binding< VO, VI1, VI2, VI3 >, RooCFunction3PdfBinding< VO, VI1, VI2, VI3 >, RooCFunction4Binding< VO, VI1, VI2, VI3, VI4 >, RooCFunction4PdfBinding< VO, VI1, VI2, VI3, VI4 >, RooChebychev, RooChiSquarePdf, RooCrystalBall, RooDstD0BG, RooExponential, RooFunctor1DBinding, RooFunctor1DPdfBinding, RooFunctorBinding, Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsReal.html:99082,log,logging,99082,doc/master/classRooAbsReal.html,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html,1,['log'],['logging']
Testability,"PerspectiveCamera() [1/2]. TGLPerspectiveCamera::TGLPerspectiveCamera ; (; ). Construct default XOZ perspective camera. ; Definition at line 34 of file TGLPerspectiveCamera.cxx. ◆ TGLPerspectiveCamera() [2/2]. TGLPerspectiveCamera::TGLPerspectiveCamera ; (; const TGLVector3 & ; hAxis, . const TGLVector3 & ; vAxis . ). Construct perspective camera. ; Definition at line 45 of file TGLPerspectiveCamera.cxx. ◆ ~TGLPerspectiveCamera(). TGLPerspectiveCamera::~TGLPerspectiveCamera ; (; ). override . Destroy perspective camera. ; Definition at line 56 of file TGLPerspectiveCamera.cxx. Member Function Documentation. ◆ Apply(). void TGLPerspectiveCamera::Apply ; (; const TGLBoundingBox & ; sceneBox, . const TGLRect * ; pickRect = nullptr . ); const. overridevirtual . Apply the camera to the current GL context, setting the viewport, projection and modelview matrices. ; After this vertices etc can be directly entered in the world frame. This also updates the cached frustum values, enabling all the projection, overlap tests etc defined in TGLCamera to be used.; Arguments are:; 'box' - view volume box - used to adjust near/far clipping; 'pickRect' - optional picking rect. If non-null, restrict drawing to this viewport rect. . Implements TGLCamera.; Definition at line 158 of file TGLPerspectiveCamera.cxx. ◆ Class(). static TClass * TGLPerspectiveCamera::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGLPerspectiveCamera::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGLPerspectiveCamera::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 55 of file TGLPerspectiveCamera.h. ◆ Configure(). void TGLPerspectiveCamera::Configure ; (; Double_t ; fov, . Double_t ; dolly, . Double_t ; center[3], . Double_t ; hRotate, . Double_t ; vRotate . ). overridevirtual . Configure the camera state. . fov - set directly field-of-view in degrees (default ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLPerspectiveCamera.html:21123,test,tests,21123,doc/master/classTGLPerspectiveCamera.html,https://root.cern,https://root.cern/doc/master/classTGLPerspectiveCamera.html,1,['test'],['tests']
Testability,"PhysicalShape object.; TGLPadPainter ; TGLPaintDevice Base class for GL widgets and GL off-screen rendering; TGLParametricEquation Equation of parametric surface.; TGLParametricEquationGL GL renderer for TGLParametricEquation; TGLParametricPlot Parametric plot's painter.; TGLPerspectiveCamera Camera for perspective view.; TGLPhysicalShape a physical (placed, global frame) drawable object; TGLPlane GL plane helper/wrapper class; TGLPlotBox Back box for plot.; TGLPlotCamera Camera for plot-painters.; TGLPlotCoordinates Auxilary class, holds plot dimensions.; TGLPlotPainter Base for gl plots; TGLPolyLine a polyline logical shape; TGLPolyMarker a polymarker logical shape; TGLQuadric GL quadric object; TGLRect GL rect helper/wrapper class; TGLRnrCtx Collection of objects and data passes along all rendering calls.; TGLRotateManip GL rotation manipulator widget; TGLSAFrame GUI frame for standalone viewer; TGLSAViewer Standalone GL viewer.; TGLScaleManip GL scaling manipulator widget; TGLScene Standard ROOT OpenGL scene with logial/physical shapes.; TGLScene::TSceneInfo ; TGLSceneBase Base-class for OpenGL scenes.; TGLSceneInfo Data about a scene within a viewer context.; TGLScenePad GL-scene filled via TPad-TVirtualViewer interface.; TGLSelectBuffer OpenGL select buffer with depth sorting.; TGLSelectRecord Standard GL selection record.; TGLSelectRecordBase Base class for GL selection records.; TGLSelectionBuffer Holds color buffer content for selection; TGLSphere a spherical logical shape; TGLStopwatch a GL stopwatch utility class; TGLSurfacePainter Surface painter.; TGLTF3Painter GL TF3 painter.; TGLTH3Slice TH3 slice; TGLText a GL text; TGLTransManip GL translation manipulator widget; TGLUtil Wrapper class for misc GL pieces; TGLUtil::TColorLocker Lock/unlock color in constructor/destructor.; TGLUtil::TDrawQualityModifier Set/restore draw quality in constructor/destructor.; TGLUtil::TDrawQualityScaler Multiply/restore draw quality in constructor/destructor.; TGLVContainer",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html524/ClassIndex.html:74031,log,logial,74031,root/html524/ClassIndex.html,https://root.cern,https://root.cern/root/html524/ClassIndex.html,1,['log'],['logial']
Testability,"Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetParts(Int_t npart)MENU ; virtual voidSetParts(Int_t* parts, Int_t npart); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidSetText(TGString* text, Int_t partidx = 0); virtual voidSetText(const char* text, Int_t partidx = 0); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGStatusBar(const TGWindow* p = 0, UInt_t w = 4, UInt_t h = 2, UInt_t options = kSunkenFrame | kHorizontalFrame, Pixel_t back = GetDefaultFrameBackground()); virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGStatusBar.html:14353,Test,TestBit,14353,root/html602/TGStatusBar.html,https://root.cern,https://root.cern/root/html602/TGStatusBar.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGedFrame::SetGedEditor(TGedEditor* ed); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidSetModel(TObject* obj); voidTGedFrame::SetModelClass(TClass* mcl); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGeoTorusEditor(const TGeoTorusEditor&); TGeoTorusEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTGeoGedFrame::Update(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoTorusEditor.html:14844,Test,TestBit,14844,root/html602/TGeoTorusEditor.html,https://root.cern,https://root.cern/root/html602/TGeoTorusEditor.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGedFrame::SetGedEditor(TGedEditor* ed); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidSetModel(TObject* obj); voidTGedFrame::SetModelClass(TClass* mcl); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; TAttMarkerEditor(const TAttMarkerEditor&); TAttMarkerEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTGedFrame::Update(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TAttMarkerEditor.html:15176,Test,TestBit,15176,root/html602/TAttMarkerEditor.html,https://root.cern,https://root.cern/root/html602/TAttMarkerEditor.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGedFrame::SetGedEditor(TGedEditor* ed); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidSetModel(TObject* obj); voidTGedFrame::SetModelClass(TClass* mcl); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; TCurlyLineEditor(const TCurlyLineEditor&); TCurlyLineEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTGedFrame::Update(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TCurlyLineEditor.html:15025,Test,TestBit,15025,root/html602/TCurlyLineEditor.html,https://root.cern,https://root.cern/root/html602/TCurlyLineEditor.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"PixeltoXk \times e^{(fPixeltoX \times px)} \]. \[ ==> fPixeltoXk = xmin \times e^{(-alfa*pxlow)} \]. \[ fPixeltoX = alfa \]. \[; v = \frac{Log(y) - Log(ymin)}{Log(ymax) - Log(ymin)} = \frac{Log(y/ymin)}{Log(ymax/ymin)} = \frac{py - pylow}{pyrange}; \]. Let: ; \[ beta = Log(\frac{ymax}{ymin}) \]. \[ Log(\frac{y}{ymin}) = beta \times pylow - beta \times py \]. \[ \frac{y}{ymin} = e^{(beta \times pylow - beta \times py)} \]. \[ y = ymin \times e^{(beta \times pylow)} \times e^{(-beta \times py)}\]. \[ \Rightarrow y = fPixeltoYk \times e^{(fPixeltoY \times py)} \]. \[ fPixeltoYk = ymin \times e^{(beta \times pylow)} \]. \[ fPixeltoY = -beta \]. Conversion from World coordinates to pixel coordinates. \[ px = pxlow + u*pxrange \]. \[ = pxlow + Log(x/xmin)/alfa \]. \[ = pxlow -Log(xmin)/alfa + Log(x)/alfa \]. \[ = fXtoPixelk + fXtoPixel*Log(x) \]. \[ \Rightarrow fXtoPixelk = pxlow -Log(xmin)/alfa \]. \[ \Rightarrow fXtoPixel = 1/alfa \]. \[ py = pylow - Log(y/ymin)/beta \]. \[ = fYtoPixelk + fYtoPixel*Log(y) \]. \[ \Rightarrow fYtoPixelk = pylow - Log(ymin)/beta \]. \[ fYtoPixel = 1/beta \]. Implements TVirtualPad.; Definition at line 5624 of file TPad.cxx. ◆ SaveAs(). void TPad::SaveAs ; (; const char * ; filename = """", . Option_t * ; option = """" . ); const. overridevirtual . Save the pad content in a file. ; The file's format used to save the pad is determined by the filename extension:. if filename is empty, the file produced is padname.ps; if filename starts with a dot, the padname is added in front; if filename ends with .ps, a Postscript file is produced; if filename ends with .eps, an Encapsulated Postscript file is produced; if filename ends with .pdf, a PDF file is produced NOTE: TMathText will be converted to TLatex; q.e.d., symbols only available in TMathText will not render properly.; if filename ends with .svg, a SVG file is produced; if filename ends with .tex, a TeX file is produced; if filename ends with .gif, a GIF file is produced; if filename ends with .g",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPad.html:113514,Log,Log,113514,doc/master/classTPad.html,https://root.cern,https://root.cern/doc/master/classTPad.html,1,['Log'],['Log']
Testability,"Pixmap(Pixmap_t pixmap); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTGFrame::SetCleanup(Int_t = kLocalCleanup); voidTGFrame::SetDNDSource(Bool_t onoff); voidTGFrame::SetDNDTarget(Bool_t onoff); virtual voidTGFrame::SetDragType(Int_t type); virtual voidTGFrame::SetDrawOption(Option_t* = """"); virtual voidTGFrame::SetDropType(Int_t type); static voidTObject::SetDtorOnly(void* obj); virtual voidTGFrame::SetEditable(Bool_t); virtual voidTGWindow::SetEditDisabled(UInt_t on = kEditDisable); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGFrame::SetLayoutBroken(Bool_t = kTRUE); virtual voidTGWindow::SetMapSubwindows(Bool_t); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidToggle(); virtual voidTGFrame::UnmapWindow(); virtual voidUpdate(TGLBEntry*); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGLBEntry.html:13409,Test,TestBit,13409,root/html534/TGLBEntry.html,https://root.cern,https://root.cern/root/html534/TGLBEntry.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"Planck's constant uncertainty. ;  ; Double_t TMath::Hypot (Double_t x, Double_t y);  Returns sqrt(x*x + y*y) ;  ; Long_t TMath::Hypot (Long_t x, Long_t y);  Returns sqrt(x*x + y*y) ;  ; Double_t TMath::Infinity ();  Returns an infinity as defined by the IEEE standard. ;  ; constexpr Double_t TMath::InvPi ();  \( \frac{1.}{\pi}\) ;  ; template<typename T > ; Bool_t TMath::IsInside (T xp, T yp, Int_t np, T *x, T *y);  Function which returns kTRUE if point xp,yp lies inside the polygon defined by the np points in arrays x and y, kFALSE otherwise. ;  ; Bool_t TMath::IsNaN (Double_t x);  ; Bool_t TMath::IsNaN (Float_t x);  ; constexpr Double_t TMath::K ();  Boltzmann's constant in \( J K^{-1} \): \( k \). ;  ; constexpr Double_t TMath::Kcgs ();  \( erg K^{-1} \) ;  ; Double_t TMath::KolmogorovProb (Double_t z);  Calculates the Kolmogorov distribution function,. ;  ; Double_t TMath::KolmogorovTest (Int_t na, const Double_t *a, Int_t nb, const Double_t *b, Option_t *option);  Statistical test whether two one-dimensional sets of points are compatible with coming from the same parent distribution, using the Kolmogorov test. ;  ; template<class Element , typename Size > ; Element TMath::KOrdStat (Size n, const Element *a, Size k, Size *work=0);  Returns k_th order statistic of the array a of size n (k_th smallest element out of n elements). ;  ; constexpr Double_t TMath::KUncertainty ();  Boltzmann's constant uncertainty. ;  ; Double_t TMath::Landau (Double_t x, Double_t mpv=0, Double_t sigma=1, Bool_t norm=kFALSE);  The LANDAU function. ;  ; Double_t TMath::LandauI (Double_t x);  Returns the cumulative (lower tail integral) of the Landau distribution function at point x. ;  ; Double_t TMath::LaplaceDist (Double_t x, Double_t alpha=0, Double_t beta=1);  Computes the probability density function of Laplace distribution at point x, with location parameter alpha and shape parameter beta. ;  ; Double_t TMath::LaplaceDistI (Double_t x, Double_t alpha=0, Double_t beta=1);  Computes",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMath_8h.html:10137,test,test,10137,doc/master/TMath_8h.html,https://root.cern,https://root.cern/doc/master/TMath_8h.html,2,['test'],['test']
Testability,"Plot::MakePlot ; (; Option_t * ; opt = """"). return a TGraphErrors with the obtained observed p-values resultinf from the scan By default (Option = """") return CLs or CLsb depending if the flag UseCLs is set If Option = ""CLb"" return CLb plot = ""CLs+b"" return CLs+b plot independently of the flag = ""CLs"" return CLs plot independently of the flag ; Make the plot of the result of the scan using the observed data.; By default plot CLs or CLsb depending if the flag UseCLs is set for the results that are passed to this instance.; Parameters. optOptions according to following list:; Empty: Return CLs or CLs+b depending on the value of UseCLs.ƒ; ""CLB"": return CLb plot; ""CLS+B"" / ""CLSPLUSB"": return CLs+b plot independently of the flag; ""CLS"": return CLs plot independently of the flag . Definition at line 80 of file HypoTestInverterPlot.cxx. ◆ MakeTestStatPlot(). SamplingDistPlot * HypoTestInverterPlot::MakeTestStatPlot ; (; int ; index, . int ; type = 0, . int ; nbins = 100 . ). Plot the test statistic distributions. ; Parameters. indexIndex of the result stored in HypoTestInverterResult ; typeType of the test (see below) ; nbinsNumber of bins; type =0 null and alt; type = 1 only null (S+B); type = 2 only alt (B) . Definition at line 395 of file HypoTestInverterPlot.cxx. ◆ Streamer(). void RooStats::HypoTestInverterPlot::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void RooStats::HypoTestInverterPlot::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 76 of file HypoTestInverterPlot.h. Member Data Documentation. ◆ fResults. HypoTestInverterResult* RooStats::HypoTestInverterPlot::fResults. private . Definition at line 72 of file HypoTestInverterPlot.h. Libraries for RooStats::HypoTestInverterPlot:. [legend]; The documentation for this class was generated from the following files:; roofit/roostats/inc/RooStats/HypoTestInverterPlot.h; roofit/roostats",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HypoTestInverterPlot.html:17265,test,test,17265,doc/master/classRooStats_1_1HypoTestInverterPlot.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HypoTestInverterPlot.html,1,['test'],['test']
Testability,"Point.h:47; TPoint::GetXSCoord_t GetX() constDefinition TPoint.h:46; TROOT::IndentLevelstatic void IndentLevel()Functions used by ls() to indent an object hierarchy.Definition TROOT.cxx:2895; TStringBasic string class.Definition TString.h:139; TString::ToLowervoid ToLower()Change string to lower-case.Definition TString.cxx:1182; TString::ContainsBool_t Contains(const char *pat, ECaseCompare cmp=kExact) constDefinition TString.h:632; TVirtualPadTVirtualPad is an abstract base class for the Pad and Canvas classes.Definition TVirtualPad.h:51; TVirtualPad::YtoAbsPixelvirtual Int_t YtoAbsPixel(Double_t y) const =0; TVirtualPad::GetX2virtual Double_t GetX2() const =0; TVirtualPad::XtoAbsPixelvirtual Int_t XtoAbsPixel(Double_t x) const =0; TVirtualPad::GetY1virtual Double_t GetY1() const =0; TVirtualPad::GetY2virtual Double_t GetY2() const =0; TVirtualPad::GetBorderSizevirtual Short_t GetBorderSize() const =0; TVirtualPad::GetX1virtual Double_t GetX1() const =0; TVirtualX::kHollow@ kHollowDefinition TVirtualX.h:50; bool; double; int; unsigned int; boxvoid box(Int_t pat, Double_t x1, Double_t y1, Double_t x2, Double_t y2)Definition fillpatterns.C:1; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; TMath::MaxShort_t Max(Short_t a, Short_t b)Returns the largest of a and b.Definition TMathBase.h:250; TMath::PowerLongDouble_t Power(LongDouble_t x, LongDouble_t y)Returns x raised to the power y.Definition TMath.h:721; TMath::MinShort_t Min(Short_t a, Short_t b)Returns the smallest of a and b.Definition TMathBase.h:198; TMath::Log10Double_t Log10(Double_t x)Returns the common (base-10) logarithm of x.Definition TMath.h:762; TMath::AbsShort_t Abs(Short_t d)Returns the absolute value of parameter Short_t d.Definition TMathBase.h:123; Rectangle_tRectangle structure (maps to the X11 XRectangle structure)Definition GuiTypes.h:361. graf2dgrafsrcTBox.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:18 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBox_8cxx_source.html:40833,log,logarithm,40833,doc/master/TBox_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBox_8cxx_source.html,1,['log'],['logarithm']
Testability,"PointSelector*); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTEveElement::TestCSCBits(UChar_t f) const; virtual voidTEveElement::UnHighlighted(); virtual voidTEveProjected::UnRefProjectable(TEveProjectable* assumed_parent); virtual voidTEveElement::UnSelected(); virtual voidUpdateProjection(); virtual voidTObject::UseCurrentStyle(); voidTEveElement::VizDB_Apply(const char* tag)MENU ; voidTEveElement::VizDB_Insert(const char* tag, Bool_t replace = kTRUE, Bool_t update = kTRUE)MENU ; voidTEveElement::VizDB_Reapply()MENU ; voidTEveElement::VizDB_UpdateModel(Bool_t update = kTRUE)MENU ; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTEveTrack::WriteVizParams(ostream& out, const TString& var). protected:. voidTAttBBox::AssertBBoxExtents(Float_t epsilon = 0.005); voidTEvePointSet::AssertIntIdsSize(); voidTAttBBox::BBoxCheckPoint(const Float_t* p); voidTAttBBox::BBoxCheckPoint(Float_t x, Float_t y, Float_t z); voidTAttBBox::BBoxClear(); voidTAttBBox::BBoxInit(Float_t infinity = 1e6); voidTAttBBox::BBoxZero(Float_t epsilon = 0, Float_t x = 0, Float_t y = 0, Float_t z = 0); static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); voidTPointSet3D::CopyIds(const TPointSet3D& t); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual void*TQObject::GetSender(); virtual const char*TQObject::GetSenderClassName() co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveTrackProjected.html:24144,Assert,AssertBBoxExtents,24144,root/html528/TEveTrackProjected.html,https://root.cern,https://root.cern/root/html528/TEveTrackProjected.html,1,['Assert'],['AssertBBoxExtents']
Testability,"Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; double; ROOT::Math::poisson_cdfdouble poisson_cdf(unsigned int n, double mu)Cumulative distribution function of the Poisson distribution Lower tail of the integral of the poisso...Definition ProbFuncMathCore.cxx:284; ROOT::Math::crystalball_integraldouble crystalball_integral(double x, double alpha, double n, double sigma, double x0=0)Integral of the not-normalized Crystal Ball function.Definition ProbFuncMathCore.cxx:98; ROOT::Math::uniform_cdfdouble uniform_cdf(double x, double a, double b, double x0=0)Cumulative distribution function of the uniform (flat) distribution (lower tail).Definition ProbFuncMathCore.cxx:266; ROOT::Math::binomial_cdf_cdouble binomial_cdf_c(unsigned int k, double p, unsigned int n)Complement of the cumulative distribution function of the Binomial distribution.Definition ProbFuncMathCore.cxx:293; ROOT::Math::lognormal_cdfdouble lognormal_cdf(double x, double m, double s, double x0=0)Cumulative distribution function of the lognormal distribution (lower tail).Definition ProbFuncMathCore.cxx:218; ROOT::Math::cauchy_cdf_cdouble cauchy_cdf_c(double x, double b, double x0=0)Complement of the cumulative distribution function (upper tail) of the Cauchy distribution which is a...Definition ProbFuncMathCore.cxx:45; ROOT::Math::fdistribution_cdfdouble fdistribution_cdf(double x, double n, double m, double x0=0)Cumulative distribution function of the F-distribution (lower tail).Definition ProbFuncMathCore.cxx:183; ROOT::Math::binomial_cdfdouble binomial_cdf(unsigned int k, double p, unsigned int n)Cumulative distribution function of the Binomial distribution Lower tail of the integral of the binom...Definition ProbFuncMathCore.cxx:304; ROOT::Math::landau_cdfdouble landau_cdf(double x, double xi=1, double x0=0)Cumulative distribution function of the Landau distribution (lower tail).Definition ProbFuncMathCore.cxx:336; ROOT::Math::lognormal_cdf_cdouble lognormal_cdf_c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/ProbFuncMathCore_8cxx_source.html:20938,log,lognormal,20938,doc/master/ProbFuncMathCore_8cxx_source.html,https://root.cern,https://root.cern/doc/master/ProbFuncMathCore_8cxx_source.html,1,['log'],['lognormal']
Testability,"Points, ::ROOT::EExecutionPolicy executionPolicy=::ROOT::EExecutionPolicy::kSequential, unsigned nChunks=0);  evaluate the Chi2 gradient given a model function and the data at the point p. ;  ; double EvaluateChi2Residual (const IModelFunction &func, const BinData &data, const double *p, unsigned int ipoint, double *g=nullptr, double *h=nullptr, bool hasGrad=false, bool fullHessian=false);  evaluate the residual contribution to the Chi2 given a model function and the BinPoint data and if the pointer g is not null evaluate also the gradient of the residual. ;  ; double EvaluateLogL (const IModelFunction &func, const UnBinData &data, const double *p, int iWeight, bool extended, unsigned int &nPoints, ::ROOT::EExecutionPolicy executionPolicy, unsigned nChunks=0);  evaluate the LogL given a model function and the data at the point x. ;  ; void EvaluateLogLGradient (const IModelFunction &func, const UnBinData &data, const double *p, double *grad, unsigned int &nPoints, ::ROOT::EExecutionPolicy executionPolicy=::ROOT::EExecutionPolicy::kSequential, unsigned nChunks=0);  evaluate the LogL gradient given a model function and the data at the point p. ;  ; double EvaluatePdf (const IModelFunction &func, const UnBinData &data, const double *p, unsigned int ipoint, double *g=nullptr, double *h=nullptr, bool hasGrad=false, bool fullHessian=false);  evaluate the pdf contribution to the LogL given a model function and the BinPoint data. ;  ; double EvaluatePoissonBinPdf (const IModelFunction &func, const BinData &data, const double *x, unsigned int ipoint, double *g=nullptr, double *h=nullptr, bool hasGrad=false, bool fullHessian=false);  evaluate the pdf contribution to the Poisson LogL given a model function and the BinPoint data. ;  ; double EvaluatePoissonLogL (const IModelFunction &func, const BinData &data, const double *p, int iWeight, bool extended, unsigned int &nPoints, ::ROOT::EExecutionPolicy executionPolicy, unsigned nChunks=0);  evaluate the Poisson LogL given a mode",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html:2822,Log,LogL,2822,doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html,1,['Log'],['LogL']
Testability,"PolyType;  Fit object (MINUIT) ;  ; Int_t * fPowerIndex;  [fMaxTerms] Index of accepted powers ;  ; Double_t fPowerLimit;  Control parameter. ;  ; Int_t * fPowers;  [fMaxFuncNV] where fMaxFuncNV = fMaxFunctions*fNVariables ;  ; Double_t fPrecision;  Relative precision of param. ;  ; TVectorD fQuantity;  Training sample, dependent quantity. ;  ; TVectorD fResiduals;  Vector of the final residuals. ;  ; Double_t fRMS;  Root mean square of fit. ;  ; Int_t fSampleSize;  Size of training sample. ;  ; Bool_t fShowCorrelation;  print correlation matrix ;  ; TVectorD fSqError;  Training sample, error in quantity. ;  ; Double_t fSumSqAvgQuantity;  Sum of squares away from mean. ;  ; Double_t fSumSqQuantity;  SumSquare of dependent quantity. ;  ; Double_t fSumSqResidual;  Sum of Square residuals. ;  ; Double_t fTestCorrelationCoeff;  Multi Correlation coefficient. ;  ; Double_t fTestError;  Error from test. ;  ; Double_t fTestPrecision;  Relative precision of test. ;  ; TVectorD fTestQuantity;  Test sample, dependent quantity. ;  ; Int_t fTestSampleSize;  Size of test sample. ;  ; TVectorD fTestSqError;  Test sample, Error in quantity. ;  ; TVectorD fTestVariables;  Test sample, independent variables. ;  ; TVectorD fVariables;  Training sample, independent variables. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Private Attributes; static TMultiDimFit * fgInstance = nullptr;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TMultiDimFit.h>. Inheritance diagram for TMultiDimFit:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EMDFPolyType. enum TMultiDimFit::EMDFPolyType. EnumeratorkMonomials ; kChebyshev ; kLegendre . Definition at line 18 of file TMultiDimFit.h. Constructor & Destructor Documentation. ◆ TMultiDimFit() [1/2]. TMultiDimFit::TMultiDimFit ; (; ). Empty ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiDimFit.html:38093,Test,Test,38093,doc/master/classTMultiDimFit.html,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html,1,['Test'],['Test']
Testability,"Pop(); virtual voidPrint(Option_t* options = 0) const; virtual voidRooPrintable::printAddress(ostream& os) const; virtual voidRooPrintable::printArgs(ostream& os) const; virtual voidprintClassName(ostream& os) const; virtual voidRooPrintable::printExtras(ostream& os) const; virtual voidRooPrintable::printMultiline(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; virtual voidprintName(ostream& os) const; virtual voidRooPrintable::printStream(ostream& os, Int_t contents, RooPrintable::StyleOption style, TString indent = """") const; virtual voidprintTitle(ostream& os) const; virtual voidRooPrintable::printTree(ostream& os, TString indent = """") const; virtual voidprintValue(ostream& os) const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidrefill(const RooArgSet& argSet); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); RooArgSet*select(const RooArgSet& list) const; voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp, char* parent); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooNameSet.html:5660,Test,TestBit,5660,root/html526/RooNameSet.html,https://root.cern,https://root.cern/root/html526/RooNameSet.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"Prefetch(Long64_t pos, Int_t len); virtual voidPrint(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual Int_tReadBuffer(char* buf, Long64_t pos, Int_t len); virtual Int_tReadBufferExt(char* buf, Long64_t pos, Int_t len, Int_t& loc); virtual Int_tReadBufferExtNormal(char* buf, Long64_t pos, Int_t len, Int_t& loc); virtual Int_tReadBufferExtPrefetch(char* buf, Long64_t pos, Int_t len, Int_t& loc); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidSecondPrefetch(Long64_t, Int_t); virtual voidSecondSort(); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual Int_tSetBufferSize(Int_t buffersize); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetEnablePrefetching(Bool_t setPrefetching = kFALSE); virtual voidSetFile(TFile* file, TFile::ECacheAction action = TFile::kDisconnect); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetSkipZip(Bool_t = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidSort(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TFileCacheRead(); TFileCacheRead(TFile* file, Int_t buffersize, TObject* tree = 0); virtual voidTObject::UseCurrentStyle(); virtual voidWaitFinishPrefetch(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TFileCacheRead.html:6230,Test,TestBit,6230,root/html604/TFileCacheRead.html,https://root.cern,https://root.cern/root/html604/TFileCacheRead.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"Principal(nmeth + nvar, """");; 1671 ; 1672 // set required tree branch references; 1673 Int_t ivar = 0;; 1674 std::vector<TString> *theVars = new std::vector<TString>;; 1675 std::vector<ResultsClassification *> mvaRes;; 1676 for (MVector::iterator itrMethod = methodsNoCuts.begin(); itrMethod != methodsNoCuts.end();; 1677 ++itrMethod, ++ivar) {; 1678 MethodBase *m = dynamic_cast<MethodBase *>(*itrMethod);; 1679 if (m == 0); 1680 continue;; 1681 theVars->push_back(m->GetTestvarName());; 1682 rvec.push_back(m->GetSignalReferenceCut());; 1683 theVars->back().ReplaceAll(""MVA_"", """");; 1684 mvaRes.push_back(dynamic_cast<ResultsClassification *>(; 1685 m->Data()->GetResults(m->GetMethodName(), Types::kTesting, Types::kMaxAnalysisType)));; 1686 }; 1687 ; 1688 // for overlap study; 1689 TMatrixD *overlapS = new TMatrixD(nmeth, nmeth);; 1690 TMatrixD *overlapB = new TMatrixD(nmeth, nmeth);; 1691 (*overlapS) *= 0; // init...; 1692 (*overlapB) *= 0; // init...; 1693 ; 1694 // loop over test tree; 1695 DataSet *defDs = method->fDataSetInfo.GetDataSet();; 1696 defDs->SetCurrentType(Types::kTesting);; 1697 for (Int_t ievt = 0; ievt < defDs->GetNEvents(); ievt++) {; 1698 const Event *ev = defDs->GetEvent(ievt);; 1699 ; 1700 // for correlations; 1701 TMatrixD *theMat = 0;; 1702 for (Int_t im = 0; im < nmeth; im++) {; 1703 // check for NaN value; 1704 Double_t retval = (Double_t)(*mvaRes[im])[ievt][0];; 1705 if (TMath::IsNaN(retval)) {; 1706 Log() << kWARNING << ""Found NaN return value in event: "" << ievt << "" for method \""""; 1707 << methodsNoCuts[im]->GetName() << ""\"""" << Endl;; 1708 dvec[im] = 0;; 1709 } else; 1710 dvec[im] = retval;; 1711 }; 1712 for (Int_t iv = 0; iv < nvar; iv++); 1713 dvec[iv + nmeth] = (Double_t)ev->GetValue(iv);; 1714 if (method->fDataSetInfo.IsSignal(ev)) {; 1715 tpSig->AddRow(dvec);; 1716 theMat = overlapS;; 1717 } else {; 1718 tpBkg->AddRow(dvec);; 1719 theMat = overlapB;; 1720 }; 1721 ; 1722 // count overlaps; 1723 for (Int_t im = 0; im < nmeth; im++) {; 172",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:70408,test,test,70408,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,1,['test'],['test']
Testability,"Principal), and use; to get a linear transformation; ; , so that; ; are constrained and linear independent.; ; Perform a Principal Component Analysis on; ; , to get linear; indenpendent (among themselves, but not independent of; ; ) quantities . For each component ; make a mutlidimensional fit,; using ; as the variables, thus determing a set of; coefficents ; .; . To process data, using this parameterisation, do; ; Test wether the observation ; within the domain of; the parameterization, using the result from the Principal Component; Analysis.; ; Determine ; as before.; ; Detetmine ; as before.; ; Use the result of the fit to determind ; .; ; Transform back to ; from ; , using; the result from the Principal Component Analysis.; . Testing the parameterization; . The class also provides functionality for testing the, over the; training sample, found parameterization; (TMultiDimFit::Fit). This is done by passing; the class a test sample of tuples of the form ; , where ; are the independent; variables, the known, dependent quantity, and is; the square error in ; (TMultiDimFit::AddTestRow).; ; The parameterization is then evaluated at every ; in the; test sample, and; . is evaluated. The relative error over the test sample; . should not be to low or high compared to from the training; sample. Also, multiple correlation coefficient from both samples should; be fairly close, otherwise one of the samples is not representive of; the problem. A large difference in the reduced over the two; samples indicate an over fit, and the maximum number of terms in the; parameterisation should be reduced.; ; It's possible to use Minuit; [4] to further improve the fit, using the test sample.; . Christian Holm; November 2000, NBI; . Bibliography; 1. Philip R. Bevington and D. Keith Robinson.; Data Reduction and Error Analysis for the Physical Sciences.; McGraw-Hill, 2 edition, 1992.; 2. René Brun et al.; Mudifi.; Long writeup DD/75-23, CERN, 1980.; 3. Gene H. Golub and Charles F. van Loan.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMultiDimFit.html:12030,test,test,12030,root/html534/TMultiDimFit.html,https://root.cern,https://root.cern/root/html534/TMultiDimFit.html,3,['test'],['test']
Testability,"Print arguments of fit result, i.e. the parameters of the fit. void printValue(ostream& os) const; Print the value of the fit result, i.e.g the status, minimized FCN, edm and covariance quality code. Int_t defaultPrintContents(Option_t* opt) const; Configure default contents to be printed. RooPrintable::StyleOption defaultPrintStyle(Option_t* opt) const; Configure mapping of Print() arguments to RooPrintable print styles. void Streamer(TBuffer& b); Stream an object of class RooFitResult. TObject* Clone(const char* newname = 0) const. TObject* clone() const; { return new RooFitResult(*this); }. void Print(Option_t* options = 0) const; Printing interface. Int_t status() const; Accessors. UInt_t numStatusHistory() const; { return _statusHistory.size() ; }. Int_t covQual() const; Return MINUIT quality code of covariance matrix. Int_t numInvalidNLL() const; Return number of NLL evaluations with problems. Double_t edm() const; Return estimated distance to minimum. Double_t minNll() const; Return minimized -log(L) value. const RooArgList& constPars() const; Return list of constant parameters. const RooArgList& floatParsInit() const; Return list of floating parameters before fit. const RooArgList& floatParsFinal() const; Return list of floarting parameters after fit. Double_t correlation(const RooAbsArg& par1, const RooAbsArg& par2) const; Return correlation between par1 and par2. return correlation(par1.GetName(),par2.GetName()). Double_t globalCorr(const RooAbsArg& par); Global correlation accessors. { return globalCorr(par.GetName()) ; }. RooPlot * plotOn(RooPlot* frame, const RooAbsArg& par1, const RooAbsArg& par2, const char* options = ""ME"") const; Add objects to a 2D plot. void setMinNLL(Double_t val); { _minNLL = val ; }. void setEDM(Double_t val); { _edm = val ; }. void setStatus(Int_t val); { _status = val ; }. void setCovQual(Int_t val); { _covQual = val ; }. void setNumInvalidNLL(Int_t val); { _numBadNLL=val ; }. void setStatusHistory(vector<std::pair<std::string,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooFitResult.html:17203,log,log,17203,root/html532/RooFitResult.html,https://root.cern,https://root.cern/root/html532/RooFitResult.html,1,['log'],['log']
Testability,"Print();; 1818 }; 1819 }; 1820#endif; 1821 ; 1822 return (TMath::IsNaN(mvaValue)) ? -999. : mvaValue;; 1823}; 1824////////////////////////////////////////////////////////////////////////////////; 1825/// Evaluate the DeepNet on a vector of input values stored in the TMVA Event class; 1826////////////////////////////////////////////////////////////////////////////////; 1827template <typename Architecture_t>; 1828std::vector<Double_t> MethodDL::PredictDeepNet(Long64_t firstEvt, Long64_t lastEvt, size_t batchSize, Bool_t logProgress); 1829{; 1830 ; 1831 // Check whether the model is setup; 1832 if (!fNet || fNet->GetDepth() == 0) {; 1833 Log() << kFATAL << ""The network has not been trained and fNet is not built""; 1834 << Endl;; 1835 }; 1836 ; 1837 // rebuild the networks; 1838 this->SetBatchSize(batchSize);; 1839 size_t inputDepth = this->GetInputDepth();; 1840 size_t inputHeight = this->GetInputHeight();; 1841 size_t inputWidth = this->GetInputWidth();; 1842 size_t batchDepth = this->GetBatchDepth();; 1843 size_t batchHeight = this->GetBatchHeight();; 1844 size_t batchWidth = this->GetBatchWidth();; 1845 ELossFunction J = fNet->GetLossFunction();; 1846 EInitialization I = fNet->GetInitialization();; 1847 ERegularization R = fNet->GetRegularization();; 1848 Double_t weightDecay = fNet->GetWeightDecay();; 1849 ; 1850 using DeepNet_t = TMVA::DNN::TDeepNet<Architecture_t>;; 1851 using Matrix_t = typename Architecture_t::Matrix_t;; 1852 using TensorDataLoader_t = TTensorDataLoader<TMVAInput_t, Architecture_t>;; 1853 ; 1854 // create the deep neural network; 1855 DeepNet_t deepNet(batchSize, inputDepth, inputHeight, inputWidth, batchDepth, batchHeight, batchWidth, J, I, R, weightDecay);; 1856 std::vector<DeepNet_t> nets{};; 1857 fBuildNet = false;; 1858 CreateDeepNet(deepNet,nets);; 1859 ; 1860 // copy weights from the saved fNet to the built DeepNet; 1861 for (size_t i = 0; i < deepNet.GetDepth(); ++i) {; 1862 deepNet.GetLayerAt(i)->CopyParameters(*fNet->GetLayerAt(i));; 18",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDL_8cxx_source.html:72786,log,logProgress,72786,doc/master/MethodDL_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDL_8cxx_source.html,2,"['Log', 'log']","['Log', 'logProgress']"
Testability,"Print();; 295 Log() << kWARNING << ""<GetSQRootMatrix> error in matrix diagonalization; printed S and B"" << Endl;; 296 }; 297 }; 298 }; 299 ; 300 // make exactly diagonal; 301 for (i=0; i<n; i++) for (j=0; j<n; j++) if (j != i) (*d)(i,j) = 0;; 302 ; 303 // compute the square-root C' of covariance matrix: C = C'*C'; 304 for (i=0; i<n; i++) (*d)(i,i) = TMath::Sqrt((*d)(i,i));; 305 ; 306 TMatrixD* sqrtMat = new TMatrixD( n, n );; 307 sqrtMat->Mult( (*s), (*d) );; 308 (*sqrtMat) *= (*si);; 309 ; 310 // invert square-root matrices; 311 sqrtMat->Invert();; 312 ; 313 delete eigen;; 314 delete s;; 315 delete si;; 316 delete d;; 317 ; 318 return sqrtMat;; 319}; 320 ; 321////////////////////////////////////////////////////////////////////////////////; 322/// turns covariance into correlation matrix; 323 ; 324const TMatrixD* TMVA::Tools::GetCorrelationMatrix( const TMatrixD* covMat ); 325{; 326 ; 327 if (covMat == 0) return 0;; 328 // sanity check; 329 Int_t nvar = covMat->GetNrows();; 330 if (nvar != covMat->GetNcols()); 331 Log() << kFATAL << ""<GetCorrelationMatrix> input matrix not quadratic"" << Endl;; 332 ; 333 Log() << kWARNING;; 334 TMatrixD* corrMat = new TMatrixD( nvar, nvar );; 335 for (Int_t ivar=0; ivar<nvar; ivar++) {; 336 for (Int_t jvar=0; jvar<nvar; jvar++) {; 337 if (ivar != jvar) {; 338 Double_t d = (*covMat)(ivar, ivar)*(*covMat)(jvar, jvar);; 339 if (d > 1E-20) {; 340 (*corrMat)(ivar, jvar) = (*covMat)(ivar, jvar)/TMath::Sqrt(d);; 341 } else {; 342 Log() << ""<GetCorrelationMatrix> zero variances for variables ""; 343 << ""("" << ivar << "", "" << jvar << "")"" << Endl;; 344 (*corrMat)(ivar, jvar) = 0;; 345 }; 346 if (TMath::Abs( (*corrMat)(ivar,jvar)) > 1){; 347 Log() << kWARNING; 348 << "" Element corr(""<<ivar<<"",""<<ivar<<"")="" << (*corrMat)(ivar,jvar); 349 << "" sigma2=""<<d; 350 << "" cov(""<<ivar<<"",""<<ivar<<"")="" <<(*covMat)(ivar, ivar); 351 << "" cov(""<<jvar<<"",""<<jvar<<"")="" <<(*covMat)(jvar, jvar); 352 << Endl;; 353 ; 354 }; 355 }; 356 else (*corrMat)(ivar, ivar) = 1.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Tools_8cxx_source.html:11283,Log,Log,11283,doc/master/Tools_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Tools_8cxx_source.html,4,['Log'],['Log']
Testability,"Print(Option_t* option = """") const; Int_tPrintDetectedOverlaps() const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidRefreshPhysicalNodes(); voidTObject::ResetBit(UInt_t f); voidResetOverlaps() const; Double_tSafety(Double_t[3] point, Double_t safmax = 1.0E+30); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); voidSetUseOverlaps(Bool_t flag); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGeoParallelWorld(); TGeoParallelWorld(const char* name, TGeoManager* mgr); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(); TGeoParallelWorld&operator=(const TGeoParallelWorld&); TGeoParallelWorld(const TGeoParallelWorld&). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; stati",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGeoParallelWorld.html:5676,Test,TestBit,5676,root/html604/TGeoParallelWorld.html,https://root.cern,https://root.cern/root/html604/TGeoParallelWorld.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidSetAttributes(const TString& attributes); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); Bool_tSetChecksum(const TString& checksum); voidSetCode(const TString& code); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetEmbed(Bool_t embed); Bool_tSetFromRule(const char* rule); voidSetInclude(const TString& include); static voidTObject::SetObjectStat(Bool_t stat); voidSetReadFunctionPointer(ROOT::TSchemaRule::ReadFuncPtr_t ptr); voidSetReadRawFunctionPointer(ROOT::TSchemaRule::ReadRawFuncPtr_t ptr); voidSetRuleType(ROOT::TSchemaRule::RuleType_t type); voidSetSource(const TString& source); voidSetSourceClass(const TString& classname); voidSetTarget(const TString& target); voidSetTargetClass(const TString& classname); virtual voidTObject::SetUniqueID(UInt_t uid); Bool_tSetVersion(const TString& version); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTestChecksum(UInt_t checksum) const; Bool_tTestVersion(Int_t version) const; ROOT::TSchemaRuleTSchemaRule(); ROOT::TSchemaRuleTSchemaRule(const ROOT::TSchemaRule& rhs); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__TSchemaRule.html:5748,Test,TestBit,5748,root/html534/ROOT__TSchemaRule.html,https://root.cern,https://root.cern/root/html534/ROOT__TSchemaRule.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"Print(Option_t* option = """") const; virtual voidPrintValue(Int_t i = 0) const; virtual Int_tTObject::Read(const char* name); virtual voidReadBasket(TBuffer& b); virtual voidTLeaf::ReadBasketExport(TBuffer&, TClonesArray*, Int_t); virtual voidTLeaf::ReadValue(istream&); virtual voidTObject::RecursiveRemove(TObject* obj); Int_tTLeaf::ResetAddress(void* add, Bool_t destructor = kFALSE); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidSetAddress(void* add = 0); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTLeaf::SetBranch(TBranch* branch); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTLeaf::SetLeafCount(TLeaf* leaf); virtual voidTLeaf::SetLen(Int_t len = 1); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTLeaf::SetOffset(Int_t offset = 0); virtual voidTLeaf::SetRange(Bool_t range = kTRUE); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTLeaf::SetUnsigned(); virtual voidSetVirtual(Bool_t virt = kTRUE); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TLeafObject.html:6133,Test,TestBit,6133,root/html530/TLeafObject.html,https://root.cern,https://root.cern/root/html530/TLeafObject.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"PrintHelpMessage () const;  prints out method-specific help method ;  ; virtual void ProcessOptions ()=0;  ; void ProcessSetup ();  process all options the ""CheckForUnusedOptions"" is done in an independent call, since it may be overridden by derived class (sometimes, eg, fitters are used which can only be implemented during training phase) ;  ; void ReadStateFromFile ();  Function to write options and weights to file. ;  ; void ReadStateFromStream (std::istream &tf);  read the header from the weight files of the different MVA methods ;  ; void ReadStateFromStream (TFile &rf);  write reference MVA distributions (and other information) to a ROOT type weight file ;  ; void ReadStateFromXMLString (const char *xmlstr);  for reading from memory ;  ; void RerouteTransformationHandler (TransformationHandler *fTargetTransformation);  ; virtual void Reset ();  ; virtual void SetAnalysisType (Types::EAnalysisType type);  ; void SetBaseDir (TDirectory *methodDir);  ; void SetFile (TFile *file);  ; void SetMethodBaseDir (TDirectory *methodDir);  ; void SetMethodDir (TDirectory *methodDir);  ; void SetModelPersistence (Bool_t status);  ; void SetSignalReferenceCut (Double_t cut);  ; void SetSignalReferenceCutOrientation (Double_t cutOrientation);  ; void SetSilentFile (Bool_t status);  ; void SetTestTime (Double_t testTime);  ; void SetTestvarName (const TString &v="""");  ; void SetTrainTime (Double_t trainTime);  ; virtual void SetTuneParameters (std::map< TString, Double_t > tuneParameters);  set the tuning parameters according to the argument This is just a dummy . ;  ; void SetupMethod ();  setup of methods ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void TestClassification ();  initialization ;  ; virtual void TestMulticlass ();  test multiclass classification ;  ; virtual void TestRegression (Double_t &bias, Double_t &biasT, Double_t &dev, Double_t &devT, Double_t &rms, Double_t &rmsT, Double_t &mInf, Do",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodBase.html:11249,test,testTime,11249,doc/master/classTMVA_1_1MethodBase.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html,1,['test'],['testTime']
Testability,"Printable::StyleOption style, TString indent = """") const; virtual voidRooPrintable::printTitle(ostream& os) const; virtual voidRooPrintable::printTree(ostream& os, TString indent = """") const; virtual voidRooPrintable::printValue(ostream& os) const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetContourColor(const Color_t color); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetLikelihoodInterval(RooStats::LikelihoodInterval* theInterval); voidSetLineColor(const Color_t color); voidSetMaximum(const Double_t theMaximum); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); voidSetNPoints(Int_t np); static voidTObject::SetObjectStat(Bool_t stat); voidSetPlotParameters(const RooArgSet* params); voidSetPrecision(double eps); voidSetRange(double x1, double x2); voidSetRange(double x1, double y1, double x2, double y2); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__LikelihoodIntervalPlot.html:6411,Test,TestBit,6411,root/html530/RooStats__LikelihoodIntervalPlot.html,https://root.cern,https://root.cern/root/html530/RooStats__LikelihoodIntervalPlot.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"ProcessIDA TProcessID identifies a ROOT job in a unique way in time and space ;  CTProcessUUIDThis class is a specialized TProcessID managing the list of UUIDs ;  CTProfileProfile Histogram ;  CTProfile2DProfile2D histograms are used to display the mean value of Z and its RMS for each cell in X,Y ;  CTProfile2Poly2D Profile Histogram with Polygonal Bins ;  CTProfile2PolyBinHelper class to represent a bin in the TProfile2Poly histogram ;  CTProfile3DProfile3D histograms are used to display the mean value of T and its RMS for each cell in X,Y,Z ;  CTProfileHelper;  ►CTProofThis class controls a Parallel ROOT Facility, PROOF, cluster ;  CMD5Mod_t;  CTProofBenchSteering class for PROOF benchmarks ;  CTProofBenchDataSetHandle operations on datasets used by ProofBench ;  CTProofBenchRunAbstract base class for PROOF benchmark runs ;  CTProofBenchRunCPUCPU-intensive PROOF benchmark test generates events and fill 1, 2, or 3-D histograms ;  CTProofBenchRunDataReadI/O-intensive PROOF benchmark test reads in event files distributed on the cluster ;  CTProofChain;  CTProofCondor;  CTProofDebug;  CTProofDesc;  CTProofDrawImplement Tree drawing using PROOF ;  CTProofDrawEntryList;  CTProofDrawEventList;  CTProofDrawGraph;  CTProofDrawHist;  ►CTProofDrawListOfGraphs;  CPoint3D_t;  ►CTProofDrawListOfPolyMarkers3D;  CPoint4D_t;  CTProofDrawPolyMarker3D;  CTProofDrawProfile;  CTProofDrawProfile2D;  CTProofInputHandler;  CTProofInterruptHandler;  CTProofLimitsFinderClass to find axis limits and synchronize them between workers ;  CTProofLiteThis class starts a PROOF session on the local machine: no daemons, client and master merged, communications via UNIX-like sockets ;  CTProofLockPath;  CTProofLockPathGuard;  CTProofLogImplementation of the PROOF session log handler ;  CTProofLogElem;  CTProofMergePrg;  CTProofMgrThe PROOF manager interacts with the PROOF server coordinator to create or destroy a PROOF session, attach to or detach from existing one, and to monitor any client activity",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/annotated.html:195417,test,test,195417,doc/v612/annotated.html,https://root.cern,https://root.cern/doc/v612/annotated.html,3,['test'],['test']
Testability,"ProgressLog.h. ◆ DoLog(). void TProofProgressLog::DoLog ; (; Bool_t ; grep = kFALSE). Display logs. ; 'grep' is set to kTRUE if it is invoked by pressing the 'Filter' button. ; Definition at line 388 of file TProofProgressLog.cxx. ◆ Init(). void TProofProgressLog::Init ; (; Int_t ; w = 700, . Int_t ; h = 600 . ). private . Init window frame for log messages. ; Definition at line 70 of file TProofProgressLog.cxx. ◆ IsA(). TClass * TProofProgressLog::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGTransientFrame.; Definition at line 93 of file TProofProgressLog.h. ◆ LoadBuffer(). void TProofProgressLog::LoadBuffer ; (; const char * ; buffer). Load a text buffer in the window. ; Definition at line 280 of file TProofProgressLog.cxx. ◆ LoadFile(). void TProofProgressLog::LoadFile ; (; const char * ; file). Load a file in the window. ; Definition at line 289 of file TProofProgressLog.cxx. ◆ LogMessage(). void TProofProgressLog::LogMessage ; (; const char * ; msg, . Bool_t ; all . ). Load/append a log msg in the log frame, if open. ; Definition at line 519 of file TProofProgressLog.cxx. ◆ NoLineEntry(). void TProofProgressLog::NoLineEntry ; (; ). Enable/disable the line number entry. ; Definition at line 599 of file TProofProgressLog.cxx. ◆ Popup(). void TProofProgressLog::Popup ; (; ). Show log window. ; Definition at line 263 of file TProofProgressLog.cxx. ◆ Rebuild(). void TProofProgressLog::Rebuild ; (; ). Rebuild the log info for a new entered session. ; Definition at line 635 of file TProofProgressLog.cxx. ◆ SaveToFile(). void TProofProgressLog::SaveToFile ; (; ). Save the logs to a file Only the name of the file is taken, no expansion. ; Definition at line 534 of file TProofProgressLog.cxx. ◆ Select(). void TProofProgressLog::Select ; (; Int_t ; id, . Bool_t ; all = kTRUE . ). actions of select all/clear all button ; Definition at line 614 of file TProofProgressLog.cxx. ◆ SetGrepView(). void TProofProgressLog",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofProgressLog.html:41403,Log,LogMessage,41403,doc/master/classTProofProgressLog.html,https://root.cern,https://root.cern/doc/master/classTProofProgressLog.html,1,['Log'],['LogMessage']
Testability,"Proof::ShowDataSetCache(const char* dataset = 0); voidTProof::ShowDataSetQuota(Option_t* opt = 0); virtual voidTProof::ShowDataSets(const char* uri = """", const char* optStr = """"); voidTProof::ShowEnabledPackages(Bool_t all = kFALSE); voidTProof::ShowFeedback() const; voidTProof::ShowLog(Int_t qry = -1); voidTProof::ShowLog(const char* queryref); virtual voidShowMembers(TMemberInspector&); voidTProof::ShowMissingFiles(TQueryResult* qr = 0); voidTProof::ShowPackages(Bool_t all = kFALSE, Bool_t redirlog = kFALSE); voidTProof::ShowParameters(const char* wildcard = ""PROOF_*"") const; voidTProof::ShowQueries(Option_t* opt = """"); virtual voidTProof::ShowStagingStatusDataSet(const char* dataset, const char* optStr = ""filter:SsCc""); virtual Int_tTNamed::Sizeof() const; voidTProof::StartupMessage(const char* msg, Bool_t status, Int_t done, Int_t total)SIGNAL ; voidTProof::StopProcess(Bool_t abort, Int_t timeout = -1); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTProof::Touch(); Int_tTProof::UploadDataSet(const char*, TList*, const char* = 0, Int_t = 0, TList* = 0); Int_tTProof::UploadDataSet(const char*, const char*, const char* = 0, Int_t = 0, TList* = 0); Int_tTProof::UploadDataSetFromFile(const char*, const char*, const char* = 0, Int_t = 0, TList* = 0); Int_tTProof::UploadPackage(const char* par, TProof::EUploadPackageOpt opt = kUntar, TList* workers = 0); virtual voidTObject::UseCurrentStyle(); Bool_tTProof::UseDynamicStartup() const; virtual Int_tTProof::VerifyDataSet(const char* dataset, const char* optStr = """"); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofCondor.html:19467,Test,TestBit,19467,root/html534/TProofCondor.html,https://root.cern,https://root.cern/root/html534/TProofCondor.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"Proof::ShowFeedback() const; voidTProof::ShowLog(Int_t qry = -1); voidTProof::ShowLog(const char* queryref); virtual voidShowMembers(TMemberInspector& insp) const; voidTProof::ShowMissingFiles(TQueryResult* qr = 0); voidTProof::ShowPackages(Bool_t all = kFALSE, Bool_t redirlog = kFALSE); voidTProof::ShowParameters(const char* wildcard = ""PROOF_*"") const; voidTProof::ShowQueries(Option_t* opt = """"); virtual voidTProof::ShowStagingStatusDataSet(const char* dataset, const char* optStr = ""filter:SsCc""); virtual Int_tTNamed::Sizeof() const; voidTProof::StartupMessage(const char* msg, Bool_t status, Int_t done, Int_t total)SIGNAL ; voidTProof::StopProcess(Bool_t abort, Int_t timeout = -1); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTProof::Touch(); TProofSuperMaster(const TProofSuperMaster&); TProofSuperMaster(const char* masterurl, const char* conffile = kPROOF_ConfFile, const char* confdir = kPROOF_ConfDir, Int_t loglevel = 0, const char* alias = 0, TProofMgr* mgr = 0); Int_tTProof::UploadDataSet(const char*, TList*, const char* = 0, Int_t = 0, TList* = 0); Int_tTProof::UploadDataSet(const char*, const char*, const char* = 0, Int_t = 0, TList* = 0); Int_tTProof::UploadDataSetFromFile(const char*, const char*, const char* = 0, Int_t = 0, TList* = 0); Int_tTProof::UploadPackage(const char* par, TProof::EUploadPackageOpt opt = kUntar, TList* workers = 0); virtual voidTObject::UseCurrentStyle(); Bool_tTProof::UseDynamicStartup() const; virtual Int_tTProof::VerifyDataSet(const char* dataset, const char* optStr = """"); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofSuperMaster.html:19326,log,loglevel,19326,root/html602/TProofSuperMaster.html,https://root.cern,https://root.cern/root/html602/TProofSuperMaster.html,2,['log'],['loglevel']
Testability,"ProofDrawProfile&); TProofDrawProfile&operator=(TProofDrawProfile&&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Bool_tTProofDraw::Process(Long64_t); virtual Bool_tTSelector::ProcessCut(Long64_t); virtual voidTSelector::ProcessFill(Long64_t); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTSelector::ResetAbort(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTSelector::SetInputList(TList* input); virtual voidTSelector::SetObject(TObject* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTSelector::SetOption(const char* option); virtual voidTSelector::SetStatus(Long64_t status); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidSlaveBegin(TTree*); virtual voidTProofDraw::SlaveTerminate(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTerminate(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofDrawProfile(); TProofDrawProfile(TProofDrawProfile&&); TProofDrawProfile(const TProofDrawProfile&); virtual voidTObject::UseCurrentStyle(); virtual intTProofDraw::Version() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofDrawProfile.html:5384,Test,TestBit,5384,root/html602/TProofDrawProfile.html,https://root.cern,https://root.cern/root/html602/TProofDrawProfile.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"ProofLogthe log; TGCheckButton*fRawLinesdisplay raw lines button; TGTextButton*fSavesave button; TGNumberEntry*fSessNumrelative index of the session to get; Int_tfSessionIdx; TStringfSessionUrl; TGTextView*fTexttext widget; Int_tfTextTypeType of retrieval; TGTextButton*fUrlButtonrebuild button; TGTextEntry*fUrlTexturl to connect to; TGVerticalFrame*fVworkersVertical frame; static TProofProgressLog::ETextTypekGrep; static TProofProgressLog::ETextTypekRaw; static TProofProgressLog::ETextTypekStd. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressLog(TProofProgressDialog* d, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. TProofProgressLog(const char* url = 0, Int_t sessionidx = 0, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. void Init(Int_t w = 700, Int_t h = 600); Init window frame for log messages. ~TProofProgressLog(); Destructor. void Popup(); Show log window. void Clear(Option_t* = 0); Clear log window. void LoadBuffer(const char* buffer); Load a text buffer in the window. void LoadFile(const char* file); Load a file in the window. void AddBuffer(const char* buffer); Add text to the window. void CloseWindow(); Handle close button or when closed via window manager action. void BuildLogList(Bool_t create = kFALSE); Build the list of workers. For this, extract the logs and take the names; of TProofLogElements. void DoLog(Bool_t grep = kFALSE); Display logs. 'grep' is set to kTRUE if it is invoked by pressing the; 'Filter' button. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame, if open. void SaveToFile(); Save the logs to a file; Only the name of the file is taken, no expansion. void SetGrepView(); Sets the view of grep filters according to the value of checkboxes. void NoLineEntry(); Enable/disable the line number entry. void Select(Int_t id, Bool_t all = kTRUE); actions of select all/clear all button. void Rebuild(); Rebuild t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofProgressLog.html:25346,log,log,25346,root/html602/TProofProgressLog.html,https://root.cern,https://root.cern/root/html602/TProofProgressLog.html,2,['log'],['log']
Testability,"Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . #include <TProofProgressMemoryPlot.h>. Inheritance diagram for TProofProgressMemoryPlot:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TProofProgressMemoryPlot(). TProofProgressMemoryPlot::TProofProgressMemoryPlot ; (; TProofProgressDialog * ; d, . Int_t ; w = 700, . Int_t ; h = 300 . ). Main constructor. ; Definition at line 54 of file TProofProgressMemoryPlot.cxx. ◆ ~TProofProgressMemoryPlot(). TProofProgressMemoryPlot::~TProofProgressMemoryPlot ; (; ). override . Destructor. ; Definition at line 121 of file TProofProgressMemoryPlot.cxx. Member Function Documentation. ◆ BuildLogList(). TGListBox * TProofProgressMemoryPlot::BuildLogList ; (; TGFrame * ; parent). protected . Build the list of workers. ; For this, extract the logs and take the names of TProofLogElements ; Definition at line 145 of file TProofProgressMemoryPlot.cxx. ◆ Clear(). void TProofProgressMemoryPlot::Clear ; (; Option_t * ; = nullptr). overridevirtual . Clear the canvases. ; Reimplemented from TObject.; Definition at line 181 of file TProofProgressMemoryPlot.cxx. ◆ DoAveragePlot(). TGraph * TProofProgressMemoryPlot::DoAveragePlot ; (; Int_t & ; max_el, . Int_t & ; min_el . ). protected . Create the average plots. ; Definition at line 381 of file TProofProgressMemoryPlot.cxx. ◆ DoAveragePlotOld(). TGraph * TProofProgressMemoryPlot::DoAveragePlotOld ; (; Int_t & ; max_el, . Int_t & ; min_el . ). protected . ◆ DoMasterPlot(). TGraph * TProofProgressMemoryPlot::DoMasterPlot ; (; TProofLogElem * ; ple). protected . a master or submaster log display without meaningful labels for now ; Definition at line 609 of file TProofProgressMemoryPlot.cxx. ◆ DoPlot(). void TProofProgressMemoryPlot::DoPlot ; (; ). Draw the plot from the logs. ; Definition at line 192 of file TProofProgressMe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofProgressMemoryPlot.html:37774,log,logs,37774,doc/master/classTProofProgressMemoryPlot.html,https://root.cern,https://root.cern/doc/master/classTProofProgressMemoryPlot.html,1,['log'],['logs']
Testability,"Protected Attributes; UInt_t fClass;  ;  Protected Attributes inherited from TMVA::PDEFoam; Double_t * fAlpha;  [fDim] Internal parameters of the hyperrectangle ;  ; PDEFoamCell ** fCells;  [fNCells] Array of ALL cells ;  ; Int_t fDim;  Dimension of the integration/simulation space. ;  ; PDEFoamDensityBase * fDistr;  ! distribution of training events ;  ; EDTSeparation fDTSeparation;  BACKWARDS COMPATIBILITY: split cells according to decision tree logic. ;  ; Int_t fEvPerBin;  Maximum number of effective (wt=1) events per bin. ;  ; Bool_t fFillFoamWithOrigWeights;  BACKWARDS COMPATIBILITY: fill the foam with boost or orig. weights. ;  ; EFoamType fFoamType;  BACKWARDS COMPATIBILITY: type of foam. ;  ; TObjArray * fHistEdg;  Histograms of wt, one for each cell edge. ;  ; Int_t * fInhiDiv;  ! [fDim] Flags for inhibiting cell division ;  ; Int_t fLastCe;  Index of the last cell. ;  ; MsgLogger * fLogger;  ! message logger ;  ; Int_t * fMaskDiv;  ! [fDim] Dynamic Mask for cell division ;  ; UInt_t fMaxDepth;  maximum depth of cell tree ;  ; TString fName;  Name of a given instance of the FOAM class. ;  ; Int_t fNBin;  No. of bins in the edge histogram for cell MC exploration. ;  ; Int_t fNCells;  Maximum number of cells. ;  ; UInt_t fNElements;  BACKWARDS COMPATIBILITY: number of variables in every cell. ;  ; UInt_t fNmin;  minimal number of events in cell to split cell ;  ; Int_t fNoAct;  Number of active cells. ;  ; Int_t fNSampl;  No. of MC events, when dividing (exploring) cell. ;  ; Bool_t fPeekMax;  BACKWARDS COMPATIBILITY: peek up cell with max. driver integral for split. ;  ; TRandom3 * fPseRan;  Pointer to user-defined generator of pseudorandom numbers. ;  ; Double_t * fRvec;  [fDim] random number vector from r.n. generator fDim+1 maximum elements ;  ; Timer * fTimer;  ! timer for graphical output ;  ; TObjArray * fVariableNames;  collection of all variable names ;  ; Float_t fVolFrac;  BACKWARDS COMPATIBILITY: volume fraction (with respect to total phase space",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PDEFoamDiscriminant.html:16765,log,logger,16765,doc/master/classTMVA_1_1PDEFoamDiscriminant.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PDEFoamDiscriminant.html,1,['log'],['logger']
Testability,"ProxyDescriptor&operator=(const ROOT::TBranchProxyDescriptor&); voidOutputDecl(FILE* hf, int offset, UInt_t maxVarname); voidOutputInit(FILE* hf, int offset, UInt_t maxVarname, const char* prefix); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; ROOT::TBranchProxyDescriptorTBranchProxyDescriptor(const ROOT::TBranchProxyDescriptor&); ROOT::TBranchProxyDescriptorTBranchProxyDescriptor(const char* dataname, const char* type, const char* branchname, Bool_t split = true, Bool_t skipped = false, Bool_t isleaflist = false); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__TBranchProxyDescriptor.html:5361,Test,TestBit,5361,root/html528/ROOT__TBranchProxyDescriptor.html,https://root.cern,https://root.cern/root/html528/ROOT__TBranchProxyDescriptor.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"Ptr() constaccess to function pointerDefinition BasicFCN.h:81; ROOT::Fit::BasicFCN::SetModelFunctionvoid SetModelFunction(const std::shared_ptr< IModelFunction > &func)Set the function pointer.Definition BasicFCN.h:101; ROOT::Fit::BasicFCN::Datavirtual const DataType & Data() constaccess to const reference to the dataDefinition BasicFCN.h:72; ROOT::Fit::BasicFCN::DataPtrstd::shared_ptr< DataType > DataPtr() constaccess to data pointerDefinition BasicFCN.h:75; ROOT::Fit::BasicFCN::ModelFunctionvirtual const IModelFunction & ModelFunction() constaccess to const reference to the model functionDefinition BasicFCN.h:78; ROOT::Fit::LogLikelihoodFCNLogLikelihoodFCN class for likelihood fits.Definition LogLikelihoodFCN.h:40; ROOT::Fit::LogLikelihoodFCN::BaseFunctionBaseObjFunction::BaseFunction BaseFunctionDefinition LogLikelihoodFCN.h:48; ROOT::Fit::LogLikelihoodFCN::LogLikelihoodFCNLogLikelihoodFCN(const UnBinData &data, const IModelFunction &func, int weight=0, bool extended=false, const ::ROOT::EExecutionPolicy &executionPolicy=::ROOT::EExecutionPolicy::kSequential)Constructor from unbin data set and model function (pdf) for object managed by users.Definition LogLikelihoodFCN.h:69; ROOT::Fit::LogLikelihoodFCN::Typevirtual BaseObjFunction::Type_t Type() constget type of fit method functionDefinition LogLikelihoodFCN.h:134; ROOT::Fit::LogLikelihoodFCN::operator=LogLikelihoodFCN & operator=(const LogLikelihoodFCN &rhs)Assignment operator.Definition LogLikelihoodFCN.h:99; ROOT::Fit::LogLikelihoodFCN::DoDerivativevirtual double DoDerivative(const double *x, unsigned int icoord) constDefinition LogLikelihoodFCN.h:161; ROOT::Fit::LogLikelihoodFCN::IModelFunction::ROOT::Math::IParamMultiFunctionTempl< T > IModelFunctionDefinition LogLikelihoodFCN.h:50; ROOT::Fit::LogLikelihoodFCN::fWeightint fWeightflag to indicate if needs to evaluate using weight or weight squared (default weight = 0)Definition LogLikelihoodFCN.h:169; ROOT::Fit::LogLikelihoodFCN::LogLikelihoodFCNLogLikelihoodF",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/LogLikelihoodFCN_8h_source.html:8478,Log,LogLikelihoodFCN,8478,doc/master/LogLikelihoodFCN_8h_source.html,https://root.cern,https://root.cern/doc/master/LogLikelihoodFCN_8h_source.html,2,['Log'],"['LogLikelihoodFCN', 'LogLikelihoodFCNLogLikelihoodFCN']"
Testability,Ptr::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TFitResultPtr::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 60 of file TFitResultPtr.h. ◆ DeclFileName(). static const char * TFitResultPtr::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 60 of file TFitResultPtr.h. ◆ Get(). TFitResult * TFitResultPtr::Get ; (; ); const. Return contained pointer. ; Definition at line 86 of file TFitResultPtr.cxx. ◆ IsA(). virtual TClass * TFitResultPtr::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Definition at line 60 of file TFitResultPtr.h. ◆ operator int(). TFitResultPtr::operator int ; (; ); const. inline . Definition at line 43 of file TFitResultPtr.h. ◆ operator*(). TFitResult & TFitResultPtr::operator* ; (; ); const. Implement the de-reference operator to make the class acts as a pointer to a TFitResult assert in case the class does not contain a pointer to TFitResult. ; Definition at line 63 of file TFitResultPtr.cxx. ◆ operator->(). TFitResult * TFitResultPtr::operator-> ; (; ); const. Implement the -> operator to make the class acts as a pointer to a TFitResult. ; assert in case the class does not contain a pointer to TFitResult ; Definition at line 75 of file TFitResultPtr.cxx. ◆ operator=(). TFitResultPtr & TFitResultPtr::operator= ; (; const TFitResultPtr & ; rhs). Assignment operator. ; if needed copy the TFitResult object and delete previous one if existing ; Definition at line 94 of file TFitResultPtr.cxx. ◆ Streamer(). virtual void TFitResultPtr::Streamer ; (; TBuffer & ; ). virtual . ◆ StreamerNVirtual(). void TFitResultPtr::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 60 of file TFitResultPtr.h. Member Data Documentation. ◆ fPointer. std::shared_ptr<TFitResult> TFitResultPtr::fPointer. private . ! Smart Pointer to T,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFitResultPtr.html:4040,assert,assert,4040,doc/master/classTFitResultPtr.html,https://root.cern,https://root.cern/doc/master/classTFitResultPtr.html,1,['assert'],['assert']
Testability,"PtrBackColor(); Color_t*PtrFrameColor(); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidSetAABox(Float_t x, Float_t y, Float_t z, Float_t dx, Float_t dy, Float_t dz); voidSetAABoxCenterHalfSize(Float_t x, Float_t y, Float_t z, Float_t dx, Float_t dy, Float_t dz); voidSetAAQuadXY(Float_t x, Float_t y, Float_t z, Float_t dx, Float_t dy); voidSetAAQuadXZ(Float_t x, Float_t y, Float_t z, Float_t dx, Float_t dz); voidSetBackColor(Color_t ci); voidSetBackColorPixel(Pixel_t pix); voidSetBackColorRGBA(UChar_t r, UChar_t g, UChar_t b, UChar_t a = 255); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetDrawBack(Bool_t f); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetFrameColor(Color_t ci); voidSetFrameColorPixel(Pixel_t pix); voidSetFrameColorRGBA(UChar_t r, UChar_t g, UChar_t b, UChar_t a = 255); voidSetFrameFill(Bool_t f); voidSetFrameWidth(Float_t f); static voidTObject::SetObjectStat(Bool_t stat); voidSetQuadByPoints(const Float_t* pointArr, Int_t nPoints); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidTEveRefBackPtr::StampBackPtrElements(UChar_t stamps); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TEveFrameBox.html:5649,Test,TestBit,5649,root/html530/TEveFrameBox.html,https://root.cern,https://root.cern/root/html530/TEveFrameBox.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"Ptr[i] );; 561 ; 562 fCoordErrors[i][ fNPoints ] = ex[i];; 563 }; 564 // in this case we store the y error and not the inverse; 565 fDataError[ fNPoints ] = eval;; 566 ; 567 FitData::Add( x );; 568 fSumContent += val;; 569 if (val != 0 || eval != 1.0) fSumError2 += eval*eval;; 570 if (!fIsWeighted); 571 if (val != 0 && std::abs( eval*eval/val - 1.0) > 1.E-12) fIsWeighted = true;; 572 }; 573 ; 574 /**; 575 add multi-dim coordinate data with both error in coordinates and value; 576 */; 577 void BinData::Add( const double* x, double val, const double* ex, double elval, double ehval ); 578 {; 579 assert( kAsymError == fErrorType );; 580 ; 581 assert( !fData.empty() && fDataPtr );; 582 assert( !fDataErrorHigh.empty() && fDataErrorHighPtr );; 583 assert( !fDataErrorLow.empty() && fDataErrorLowPtr );; 584 assert( fDataError.empty() && !fDataErrorPtr );; 585 assert( fCoordErrors.size() == fDim );; 586 assert( fCoordErrorsPtr.size() == fDim );; 587 ; 588 fData[ fNPoints ] = val;; 589 ; 590 for( unsigned int i=0; i<fDim; i++ ); 591 {; 592 assert( &fCoordErrors[i].front() == fCoordErrorsPtr[i] );; 593 ; 594 fCoordErrors[i][ fNPoints ] = ex[i];; 595 }; 596 ; 597 fDataErrorLow[ fNPoints ] = elval;; 598 fDataErrorHigh[ fNPoints ] = ehval;; 599 ; 600 FitData::Add( x );; 601 fSumContent += val;; 602 if (val != 0 || elval != 1.0 || ehval != 1.0 ); 603 fSumError2 += (elval+ehval)*(elval+ehval)/4;; 604 }; 605 ; 606 ; 607 /**; 608 add the bin width data, a pointer to an array with the bin upper edge information.; 609 This is needed when fitting with integral or Bin volume normalization options; 610 The information is added for the previously inserted point.; 611 BinData::Add must be called before; 612 */; 613 void BinData::AddBinUpEdge( const double* xup ); 614 {; 615 if ( fBinEdge.empty() ); 616 InitBinEdge();; 617 ; 618 assert( fBinEdge.size() == fDim );; 619 ; 620 for ( unsigned int i=0; i<fDim; i++ ); 621 {; 622 fBinEdge[i].push_back( xup[i] );; 623 ; 624 // check that is consistent",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BinData_8cxx_source.html:18375,assert,assert,18375,doc/master/BinData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/BinData_8cxx_source.html,1,['assert'],['assert']
Testability,"Purge(); Purge all entries for all LODs for this drawable from the; display list cache, returning the reserved ids to GL context. If you override this function:; 1. call the base-class version from it;; 2. call it from the destructor of the derived class!. void PurgeDLRange(UInt_t base, Int_t size) const; Purge given display-list range.; Utility function. Short_t QuantizeShapeLOD(Short_t shapeLOD, Short_t combiLOD) const; Logical shapes usually support only discreet LOD values,; especially in view of display-list caching.; This function should be overriden to perform the desired quantization.; See TGLSphere. void Draw(TGLRnrCtx& rnrCtx) const; Draw the GL drawable, using draw flags. If DL caching is enabled; (see SetDLCache) then attempt to draw from the cache, if not found; attempt to capture the draw - done by DirectDraw() - into a new cache entry.; If not cached just call DirectDraw() for normal non DL cached drawing. void DrawHighlight(TGLRnrCtx& rnrCtx, const TGLPhysicalShape* pshp, Int_t lvl = -1) const; Draw the logical shape in highlight mode.; If lvl argument is less than 0 (-1 by default), the index into color-set; is taken from the physical shape itself. void ProcessSelection(TGLRnrCtx& rnrCtx, TGLSelectRecord& rec); Virtual method called-back after a secondary selection hit; is recorded (see TGLViewer::HandleButton(), Ctrl-Button1).; The ptr argument holds the GL pick-record of the closest hit. This base-class implementation simply prints out the result. void InvokeContextMenu(TContextMenu& menu, UInt_t x, UInt_t y) const; Invoke popup menu or our bound external TObject (if any), using passed; 'menu' object, at location 'x' 'y'. Bool_t IgnoreSizeForOfInterest() const; Return true if size of this shape should be ignored when determining if; the object should be drawn. In this base-class we simply return state of; static flag fgIgnoreSizeForCameraInterest. Several sub-classes override this virtual function. Bool_t GetIgnoreSizeForCameraInterest(); Get state",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGLLogicalShape.html:7379,log,logical,7379,root/html534/TGLLogicalShape.html,https://root.cern,https://root.cern/root/html534/TGLLogicalShape.html,3,['log'],['logical']
Testability,"Purge(); Purge all entries for all LODs for this drawable from the; display list cache, returning the reserved ids to GL context. If you override this function:; 1. call the base-class version from it;; 2. call it from the destructor of the derived class!. void PurgeDLRange(UInt_t base, Int_t size) const; Purge given display-list range.; Utility function. Short_t QuantizeShapeLOD(Short_t shapeLOD, Short_t combiLOD) const; Logical shapes usually support only discreet LOD values,; especially in view of display-list caching.; This function should be overriden to perform the desired quantization.; See TGLSphere. void Draw(TGLRnrCtx& rnrCtx) const; Draw the GL drawable, using draw flags. If DL caching is enabled; (see SetDLCache) then attempt to draw from the cache, if not found; attempt to capture the draw - done by DirectDraw() - into a new cache entry.; If not cached just call DirectDraw() for normal non DL cached drawing. void DrawHighlight(TGLRnrCtx& rnrCtx, const TGLPhysicalShape* pshp, Int_t lvl = -1) const; Draw the logical shape in highlight mode.; If lvl argument is less than 0 (-1 by default), the index into color-set; is taken from the physical shape itself. void ProcessSelection(TGLRnrCtx& rnrCtx, TGLSelectRecord& rec); Virtual method called-back after a secondary selection hit; is recorded (see TGLViewer::HandleButton(), Ctrl-Button1).; The ptr argument holds the GL pick-record of the closest hit. This base-class implementation simply prints out the result. void InvokeContextMenu(TContextMenu& menu, UInt_t x, UInt_t y) const; Invoke popup menu or our bound external TObject (if any), using passed; 'menu' object, at location 'x' 'y'. TGLLogicalShape& operator=(const TGLLogicalShape& ). UInt_t Ref() const; Physical shape reference-counting, replica management. { return fRef; }. void StrongRef(Bool_t strong) const; { fRefStrong = strong; }. const TGLPhysicalShape* GetFirstPhysical() const; { return fFirstPhysical; }. TObject* ID() const; { return fExternalObj; }",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLLogicalShape.html:7214,log,logical,7214,root/html528/TGLLogicalShape.html,https://root.cern,https://root.cern/root/html528/TGLLogicalShape.html,3,['log'],['logical']
Testability,"Py_BuildValue(""(O)"", file);; 303 *obj = PyObject_CallObject(fPickleLoads , model_arg);; 304 if(!obj) return 2;; 305 ; 306 Py_DECREF(file_arg);; 307 Py_DECREF(file);; 308 Py_DECREF(model_arg);; 309 ; 310 return 0;; 311}; 312 ; 313///////////////////////////////////////////////////////////////////////////////; 314/// Execute Python code from string; 315///; 316/// \param[in] code Python code as string; 317/// \param[in] errorMessage Error message which shall be shown if the execution fails; 318/// \param[in] start Start symbol; 319///; 320/// Helper function to run python code from string in local namespace with; 321/// error handling; 322/// `start` defines the start symbol defined in PyRun_String (Py_eval_input,; 323/// Py_single_input, Py_file_input); 324 ; 325void PyMethodBase::PyRunString(TString code, TString errorMessage, int start) {; 326 //std::cout << ""Run: >> "" << code << std::endl;; 327 fPyReturn = PyRun_String(code, start, fGlobalNS, fLocalNS);; 328 if (!fPyReturn) {; 329 Log() << kWARNING << ""Failed to run python code: "" << code << Endl;; 330 Log() << kWARNING << ""Python error message:"" << Endl;; 331 PyErr_Print();; 332 Log() << kFATAL << errorMessage << Endl;; 333 }; 334}; 335 ; 336///////////////////////////////////////////////////////////////////////////////; 337/// Execute Python code from string; 338///; 339/// \param[in] code Python code as string; 340/// \param[in] globalNS Global Namespace for Python Session; 341/// \param[in] localNS Local Namespace for Python Session; 342///; 343/// Overloaded static Helper function to run python code; 344/// from string and throw runtime error if the Python session; 345/// is unable to execute the code; 346 ; 347void PyMethodBase::PyRunString(TString code, PyObject *globalNS, PyObject *localNS){; 348 PyObject *fPyReturn = PyRun_String(code, Py_single_input, globalNS, localNS);; 349 if (!fPyReturn) {; 350 std::cout<<""\nPython error message:\n"";; 351 PyErr_Print();; 352 throw std::runtime_error(""\nFailed to run ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/PyMethodBase_8cxx_source.html:11332,Log,Log,11332,doc/master/PyMethodBase_8cxx_source.html,https://root.cern,https://root.cern/doc/master/PyMethodBase_8cxx_source.html,1,['Log'],['Log']
Testability,"Python::Bind(TObject *object, const char *label); 521{; 522 // check given address and setup; 523 if (!(object && Initialize())); 524 return kFALSE;; 525 ; 526 PyGILRAII gilRaii;; 527 ; 528 // bind object in the main namespace; 529 TClass *klass = object->IsA();; 530 if (klass != 0) {; 531 PyObject *bound = CPyCppyy::Instance_FromVoidPtr((void *)object, klass->GetName());; 532 ; 533 if (bound) {; 534 Bool_t bOk = PyDict_SetItemString(gMainDict, const_cast<char *>(label), bound) == 0;; 535 Py_DECREF(bound);; 536 ; 537 return bOk;; 538 }; 539 }; 540 ; 541 return kFALSE;; 542}; 543 ; 544////////////////////////////////////////////////////////////////////////////////; 545/// Enter an interactive python session (exit with ^D). State is preserved; 546/// between successive calls.; 547 ; 548void TPython::Prompt(); 549{; 550 // setup; 551 if (!Initialize()) {; 552 return;; 553 }; 554 ; 555 PyGILRAII gilRaii;; 556 ; 557 // enter i/o interactive mode; 558 PyRun_InteractiveLoop(stdin, const_cast<char *>(""\0""));; 559}; 560 ; 561////////////////////////////////////////////////////////////////////////////////; 562/// Test whether the type of the given pyobject is of CPPInstance type or any; 563/// derived type.; 564 ; 565Bool_t TPython::CPPInstance_Check(PyObject *pyobject); 566{; 567 // setup; 568 if (!Initialize()); 569 return kFALSE;; 570 ; 571 PyGILRAII gilRaii;; 572 ; 573 // detailed walk through inheritance hierarchy; 574 return CPyCppyy::Instance_Check(pyobject);; 575}; 576 ; 577////////////////////////////////////////////////////////////////////////////////; 578/// Test whether the type of the given pyobject is CPPinstance type.; 579 ; 580Bool_t TPython::CPPInstance_CheckExact(PyObject *pyobject); 581{; 582 // setup; 583 if (!Initialize()); 584 return kFALSE;; 585 ; 586 PyGILRAII gilRaii;; 587 ; 588 // direct pointer comparison of type member; 589 return CPyCppyy::Instance_CheckExact(pyobject);; 590}; 591 ; 592//////////////////////////////////////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPython_8cxx_source.html:18671,Test,Test,18671,doc/master/TPython_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TPython_8cxx_source.html,1,['Test'],['Test']
Testability,"Q plot of residuals. The value of the test statistic is equal to; 21.09 with p-value equal to 0.33, therefore the hypothesis of identity of; the two histograms can be accepted for 0.05 significant level. The behavior; of the normalized residuals plot (see Fig. 1c) and the normal Q-Q plot; (see Fig. 1d) of residuals are regular and we cannot identify the outliers; or bins with a big influence on . The second example presents the same two histograms but 17 events was added; to content of bin number 15 in unweighted histogram. Fig.2 shows the result; of comparison of the unweighted histogram with 217 events (minimal expected; frequency equal to one) and the weighted histogram with 500 events (minimal; expected frequency equal to 25). Fig 2. An example of comparison of the unweighted histogram with 217 events; and the weighted histogram with 500 events:; a) unweighted histogram;; b) weighted histogram;; c) normalized residuals plot;; d) normal Q-Q plot of residuals. The value of the test statistic is equal to; 32.33 with p-value equal to 0.029, therefore the hypothesis of identity of; the two histograms is rejected for 0.05 significant level. The behavior of; the normalized residuals plot (see Fig. 2c) and the normal Q-Q plot (see; Fig. 2d) of residuals are not regular and we can identify the outlier or; bin with a big influence on . References:. [1] Pearson, K., 1904. On the Theory of Contingency and Its Relation to; Association and Normal Correlation. Drapers' Co. Memoirs, Biometric; Series No. 1, London.; [2] Gagunashvili, N., 2006. test for comparison; of weighted and unweighted histograms. Statistical Problems in Particle; Physics, Astrophysics and Cosmology, Proceedings of PHYSTAT05,; Oxford, UK, 12-15 September 2005, Imperial College Press, London, 43-44.; Gagunashvili,N., Comparison of weighted and unweighted histograms,; arXiv:physics/0605123, 2006.; [3] Cramer, H., 1946. Mathematical methods of statistics.; Princeton University Press, Princeton.; [4] Haberman, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH1.html:52838,test,test,52838,root/html528/TH1.html,https://root.cern,https://root.cern/root/html528/TH1.html,6,['test'],['test']
Testability,"QL_NONE; static TSQLServer::ESQLDataTypeskSQL_NUMERIC; static TSQLServer::ESQLDataTypeskSQL_TIMESTAMP; static TSQLServer::ESQLDataTypeskSQL_VARCHAR; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringfDBcurrently selected DB; Int_tfErrorCodeerror code of last operation; TStringfErrorMsgerror message of last operation; Bool_tfErrorOutenable error output; TStringfHosthost to which we are connected; Int_tfPortport to which we are connected; TStringfTypetype of DBMS (MySQL, Oracle, SysBase, ...); static const char*fgFloatFmt! printf argument for floats and doubles, either ""%f"" or ""%e"" or ""%10f"" and so on. Class Charts. Inheritance Chart:. TObject. ←; TSQLServer. ←. TMySQLServer. Function documentation; TSQLServer * Connect(const char* db, const char* uid, const char* pw); The db should be of the form: <dbms>://<host>[:<port>][/<database>],; e.g.: mysql://pcroot.cern.ch:3456/test, oracle://srv1.cern.ch/main,; pgsql://... or sapdb://...; The uid is the username and pw the password that should be used for; the connection. Depending on the <dbms> the shared library (plugin); for the selected system will be loaded. When the connection could not; be opened 0 is returned. Bool_t Exec(const char* sql); Execute sql query.; Usefull for commands like DROP TABLE or INSERT, where result set; is not interested. Return kTRUE if no error. Int_t GetErrorCode() const; returns error code of last operation; if res==0, no error; Each specific implementation of TSQLServer provides its own error coding. const char* GetErrorMsg() const; returns error message of last operation; if no errors, return 0; Each specific implementation of TSQLServer provides its own error messages. void ClearError(); reset error fields. void SetError(Int_t code, const char* msg, const char* method = 0); set new values for error fields; if method is specified, displays error message. Bool_t StartTransaction()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSQLServer.html:9072,test,test,9072,root/html602/TSQLServer.html,https://root.cern,https://root.cern/root/html602/TSQLServer.html,2,['test'],['test']
Testability,"QObject::Message(const char* msg)SIGNAL ; virtual voidNotified()SIGNAL ; virtual Bool_tNotify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TObject&TObject::operator=(const TObject& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidRemove(); virtual voidRemoved()SIGNAL ; voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSysEvtHandler.html:7365,Test,TestBit,7365,root/html528/TSysEvtHandler.html,https://root.cern,https://root.cern/root/html528/TSysEvtHandler.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"QSort(TObject** a, TObject** b, Int_t first, Int_t last); static voidTSeqCollection::QSort(TObject** a, Int_t nBs, TObject*** b, Int_t first, Int_t last); virtual Int_tTObject::Read(const char* name); virtual voidTList::RecursiveRemove(TObject* obj); virtual TObject*TList::Remove(TObject* obj); virtual TObject*TList::Remove(TObjLink* lnk); virtual voidTSeqCollection::RemoveAfter(TObject* after); voidTCollection::RemoveAll(); virtual voidTCollection::RemoveAll(TCollection* col); virtual TObject*TSeqCollection::RemoveAt(Int_t idx); virtual voidTSeqCollection::RemoveBefore(TObject* before); virtual voidTSeqCollection::RemoveFirst(); virtual voidTList::RemoveLast(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTCollection::SetCurrentCollection(); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTCollection::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTCollection::SetOwner(Bool_t enable = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidTList::Sort(Bool_t order = kSortAscending); static voidTCollection::StartGarbageCollection(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTSeqCollection::UnSort(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooList.html:8093,Test,TestBit,8093,root/html530/RooList.html,https://root.cern,https://root.cern/root/html530/RooList.html,20,['Test'],"['TestBit', 'TestBits']"
Testability,"QWidget::isEnabledToTLW() const; UInt_tIsEventSelected(UInt_t evmask) const; boolQWidget::isFullScreen() const; boolIsGrabbed(Event_t& ev); boolIsGrabButtonSelected(UInt_t evmask) const; boolIsGrabOwner(); boolIsGrabPointerSelected(UInt_t evmask) const; boolQWidget::isHidden() const; TQtClientWidget*IsKeyGrabbed(const Event_t& ev); boolQWidget::isLeftToRight() const; boolQWidget::isMaximized() const; boolQWidget::isMinimized() const; boolQWidget::isModal() const; boolQWidget::isRightToLeft() const; boolQWidget::isTopLevel() const; boolQWidget::isVisible() const; boolQWidget::isVisibleTo(QWidget*) const; boolQObject::isWidgetType() const; boolQWidget::isWindow() const; boolQWidget::isWindowModified() const; static QWidget*QWidget::keyboardGrabber(); voidQObject::killTimer(int id); QLayout*QWidget::layout() const; Qt::LayoutDirectionQWidget::layoutDirection() const; intQFrame::lineWidth() const; QLocaleQWidget::locale() const; intQPaintDevice::logicalDpiX() const; intQPaintDevice::logicalDpiY() const; voidQWidget::lower(); QPointQWidget::mapFrom(QWidget*, const QPoint&) const; QPointQWidget::mapFromGlobal(const QPoint&) const; QPointQWidget::mapFromParent(const QPoint&) const; QPointQWidget::mapTo(QWidget*, const QPoint&) const; QPointQWidget::mapToGlobal(const QPoint&) const; QPointQWidget::mapToParent(const QPoint&) const; QRegionQWidget::mask() const; intQWidget::maximumHeight() const; QSizeQWidget::maximumSize() const; intQWidget::maximumWidth() const; virtual const QMetaObject*metaObject() const; intQFrame::midLineWidth() const; intQWidget::minimumHeight() const; QSizeQWidget::minimumSize() const; virtual QSizeQWidget::minimumSizeHint() const; intQWidget::minimumWidth() const; static QWidget*QWidget::mouseGrabber(); voidQWidget::move(const QPoint&); voidQWidget::move(int x, int y); voidQObject::moveToThread(QThread* thread); QWidget*QWidget::nativeParentWidget() const; QWidget*QWidget::nextInFocusChain() const; QRectQWidget::normalGeometry() const; intQPaintDevic",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TQtClientWidget.html:6363,log,logicalDpiY,6363,root/html602/TQtClientWidget.html,https://root.cern,https://root.cern/root/html602/TQtClientWidget.html,2,['log'],['logicalDpiY']
Testability,"Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATRIX; » TVectorT<float>. class TVectorT<float>: public TObject. TVectorT. Template class of Vectors in the linear algebra package. Unless otherwise specified, vector indices always start with 0,; spanning up to the specified limit-1. For (n) vectors where n <= kSizeMax (5 currently) storage space is; available on the stack, thus avoiding expensive allocation/; deallocation of heap space . However, this introduces of course; kSizeMax overhead for each vector object . If this is an issue; recompile with a new appropriate value (>=0) for kSizeMax. Another way to assign and store vector data is through Use; see for instance stressLinear.cxx file . Note that Constructors/assignments exists for all different matrix; views. For usage examples see $ROOTSYS/test/stressLinear.cxx. Function Members (Methods); public:. virtual~TVectorT<float>(); TVectorT<float>&Abs(); voidTObject::AbstractMethod(const char* method) const; voidAdd(const TVectorT<float>& v); voidAdd(const TVectorT<float>& v1, const TVectorT<float>& v2); voidAddSomeConstant(float val, const TVectorT<float>& select); virtual voidTObject::AppendPad(Option_t* option = """"); TVectorT<float>&Apply(const TElementActionT<float>& action); TVectorT<float>&Apply(const TElementPosActionT<float>& action); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """")MENU ; vir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TVectorT_float_.html:1027,test,test,1027,root/html602/TVectorT_float_.html,https://root.cern,https://root.cern/root/html602/TVectorT_float_.html,2,['test'],['test']
Testability,"Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::ProfileLikelihoodCalculator. class RooStats::ProfileLikelihoodCalculator: public RooStats::CombinedCalculator. ProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator ; (the interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals). ; The tool uses the profile likelihood ratio as a test statistic, and assumes that Wilks' theorem is valid. ; Wilks' theorem states that -2* log (profile likelihood ratio) is asymptotically distributed as a chi^2 distribution ; with N-dof, where N is the number of degrees of freedom. Thus, p-values can be constructed and the profile likelihood ratio; can be used to construct a LikelihoodInterval.; (In the future, this class could be extended to use toy Monte Carlo to calibrate the distribution of the test statistic). Usage: It uses the interface of the CombinedCalculator, so that it can be configured by specifying:. a model common model (eg. a family of specific models which includes both the null and alternate),; a data set, ; a set of parameters of interest. The nuisance parameters will be all other parameters of the model ; a set of parameters of which specify the null hypothesis (including values and const/non-const status) . The interface allows one to pass the model, data, and parameters either directly or via a ModelConfig class.; The alternate hypothesis leaves the parameter free to take any value other than those specified by the null hypotesis. There is therefore no need to ; specify the alternate parameters. . After configuring the calculator, one only needs to ask GetHypoTest() (which will return a HypoTestResult pointer) or GetInterval() (which will return an ConfInterval pointer). The concrete implementations of this interf",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__ProfileLikelihoodCalculator.html:1087,test,test,1087,root/html530/RooStats__ProfileLikelihoodCalculator.html,https://root.cern,https://root.cern/root/html530/RooStats__ProfileLikelihoodCalculator.html,5,['test'],['test']
Testability,"R FUNCTION. This function sets the following fitting parameters of peaks:; -sigma - initial value of sigma parameter; -fixSigma - logical value of sigma parameter, which allows to fix the parameter (not to fit); -positionInit - aray of initial values of peaks positions; -fixPosition - array of logical values which allow to fix appropriate positions (not fit). However they are present in the estimated functional.; -ampInit - aray of initial values of peaks amplitudes; -fixAmp - aray of logical values which allow to fix appropriate amplitudes (not fit). However they are present in the estimated functional. void SetBackgroundParameters(Double_t a0Init, Bool_t fixA0, Double_t a1Init, Bool_t fixA1, Double_t a2Init, Bool_t fixA2). SETTER FUNCTION. This function sets the following fitting parameters of background:; -a0Init - initial value of a0 parameter (backgroud is estimated as a0+a1*x+a2*x*x); -fixA0 - logical value of a0 parameter, which allows to fix the parameter (not to fit); -a1Init - initial value of a1 parameter; -fixA1 - logical value of a1 parameter, which allows to fix the parameter (not to fit); -a2Init - initial value of a2 parameter; -fixA2 - logical value of a2 parameter, which allows to fix the parameter (not to fit). void SetTailParameters(Double_t tInit, Bool_t fixT, Double_t bInit, Bool_t fixB, Double_t sInit, Bool_t fixS). SETTER FUNCTION. This function sets the following fitting parameters of tails of peaks; -tInit - initial value of t parameter; -fixT - logical value of t parameter, which allows to fix the parameter (not to fit); -bInit - initial value of b parameter; -fixB - logical value of b parameter, which allows to fix the parameter (not to fit); -sInit - initial value of s parameter; -fixS - logical value of s parameter, which allows to fix the parameter (not to fit). void GetSigma(Double_t& sigma, Double_t& sigmaErr). GETTER FUNCTION. This function gets the sigma parameter and its error; -sigma - gets the fitted value of sigma parameter; -s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrumFit.html:36676,log,logical,36676,root/html528/TSpectrumFit.html,https://root.cern,https://root.cern/root/html528/TSpectrumFit.html,18,['log'],['logical']
Testability,"RAA general twisted trapezoid.Definition TGTRA.h:27; THYPEAn hyperboloid (not implemented)Definition THYPE.h:28; TPARAA parallelepiped.Definition TPARA.h:30; TPCONA polycone.Definition TPCON.h:33; TPGONA polygon.Definition TPGON.h:30; TTRAPA general trapezoid.Definition TTRAP.h:33; TTRD1A trapezoid with the x dimension varying along z.Definition TTRD1.h:28; TTRD2A trapezoid with both x and y dimensions varying along z.Definition TTRD2.h:29; TTUBEA tube.Definition TTUBE.h:32; TTUBSA segment of a tube.Definition TTUBS.h:29; The figure below shows instances of all these shapes. This figure is generated by the ROOT 3-D viewer. Definition at line 35 of file TShape.h. Public Member Functions;  TShape ();  Shape default constructor. ;  ;  TShape (const char *name, const char *title, const char *material);  Shape normal constructor. ;  ;  TShape (const TShape &);  copy constructor ;  ;  ~TShape () override;  Shape default destructor. ;  ; virtual const TBuffer3D & GetBuffer3D (Int_t reqSections) const;  Stub to avoid forcing implementation at this stage. ;  ; TMaterial * GetMaterial () const;  ; virtual Int_t GetNumber () const;  ; Int_t GetVisibility () const;  ; TClass * IsA () const override;  ; TShape & operator= (const TShape &);  assignment operator ;  ; void Paint (Option_t *option="""") override;  This method is used only when a shape is painted outside a TNode. ;  ; void SetName (const char *name) override;  Set the name of the TNamed. ;  ; virtual void SetPoints (Double_t *points) const;  Set points. ;  ; virtual void SetVisibility (Int_t vis);  ; void Streamer (TBuffer &) override;  Stream an object of class TShape. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void TransformPoints (Double_t *points, UInt_t NbPnts) const;  Transform points (LocalToMaster) ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTShape.html:1747,Stub,Stub,1747,doc/master/classTShape.html,https://root.cern,https://root.cern/doc/master/classTShape.html,1,['Stub'],['Stub']
Testability,RAD to back out of this region. Error log follows.; Parameter values: a0=0.7962 a1=-0.414289 mean=5.07605 nbkg=135.514 nsig=167.164 sig1frac=0.927781; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-848.597) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.577138 a1=-0.518554 mean=5.09299 nbkg=144.203 nsig=156.938 sig1frac=0.54541; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 740; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 730; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 720; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 710; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 700; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-814.549) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.848973 a1=-0.489149 mean=5.08811 nbkg=132.911 nsig=150.647 sig1frac=0.826731; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 690; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 680; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 670; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-809.662) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.713661 a1=-0.606754 mean=5.02862 nbkg=142.583 nsig=145.399 sig1frac=0.623944; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-861.002) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.744046 a1=-0.311529 mean=5.09799 nbkg=161.409 nsig=148.884 sig1frac=0.512806; RooAddPdf::model[ nbkg * bkg_over_bkg_I,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf801__mcstudy_8C.html:15070,log,log,15070,doc/master/rf801__mcstudy_8C.html,https://root.cern,https://root.cern/doc/master/rf801__mcstudy_8C.html,2,['log'],['log']
Testability,"RGB to CMYK is:; Double_t Black = TMath::Min(TMath::Min(1-Red,1-Green),1-Blue);; Double_t Cyan = (1-Red-Black)/(1-Black);; Double_t Magenta = (1-Green-Black)/(1-Black);; Double_t Yellow = (1-Blue-Black)/(1-Black);; CMYK add the black component which allows to have a better quality for black printing. TPostScript (and TPDF) support the CMYK model. To change the color model use:; gStyle->SetColorModelPS(c);. c = 0 means TPostScript will use RGB color model (default); c = 1 means TPostScript will use CMYK color model. 9.11 The PDF Interface; Like PostScript, PDF is a vector graphics output format allowing a very high graphics output quality. The functionalities provided by this class are very similar to those provided by TPostScript.; Compare to PostScript output, the PDF files are usually smaller because some parts of them can be compressed.; PDF also allows to define table of contents. This facility can be used in ROOT. The following example shows how to proceed:; {; TCanvas* canvas = new TCanvas(""canvas"");; TH1F* histo = new TH1F(""histo"",""test 1"",10,0.,10.);; histo->SetFillColor(2);; histo->Fill(2.);; histo->Draw();; canvas->Print(""plots.pdf("",""Title:One bin filled"");; histo->Fill(4.);; histo->Draw();; canvas->Print(""plots.pdf"",""Title:Two bins filled"");; histo->Fill(6.);; histo->Draw();; canvas->Print(""plots.pdf"",""Title:Three bins filled"");; histo->Fill(8.);; histo->Draw();; canvas->Print(""plots.pdf"",""Title:Four bins filled"");; histo->Fill(8.);; histo->Draw();; canvas->Print(""plots.pdf)"",""Title:The fourth bin content is 2"");; }; Each character string following the keyword “Title:” makes a new entry in the table of contents.; 9.12 Create or Modify a Style; All objects that can be drawn in a pad inherit from one or more attribute classes like TAttLine, TAttFill, TAttText, TAttMarker. When objects are created, their default attributes are taken from the current style. The current style is an object of the class TStyle and can be referenced via the global variable gStyl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:381261,test,test,381261,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['test'],['test']
Testability,"RING); virtual Int_tSendObject(const TObject*, Int_t = kMESS_OBJECT); virtual Int_tSendRaw(const void*, Int_t, ESendRecvOptions = kDefault); static voidSetAcceptOptions(UChar_t Opt); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTSocket::SetCompressionAlgorithm(Int_t algorithm = 0); voidTSocket::SetCompressionLevel(Int_t level = 1); voidTSocket::SetCompressionSettings(Int_t settings = 1); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual Int_tTSocket::SetOption(ESockOptions opt, Int_t val); voidTSocket::SetRemoteProtocol(Int_t rproto); voidTSocket::SetSecContext(TSecContext* ctx); voidTSocket::SetService(const char* service); voidTSocket::SetServType(Int_t st); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); voidTSocket::SetUrl(const char* url); static voidShowAcceptOptions(); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTSocket::Touch(); TServerSocket(Int_t port, Bool_t reuse = kFALSE, Int_t backlog = kDefaultBacklog, Int_t tcpwindowsize = -1); TServerSocket(const char* service, Bool_t reuse = kFALSE, Int_t backlog = kDefaultBacklog, Int_t tcpwindowsize = -1); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TServerSocket.html:7355,Test,TestBit,7355,root/html602/TServerSocket.html,https://root.cern,https://root.cern/root/html602/TServerSocket.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"RN, Switzerland *; 16 * Omar Zapata <andresete.chaos@gmail.com> - ITM/UdeA, Colombia *; 17 * Sergei Gleyzer<sergei.gleyzer@cern.ch> - CERN, Switzerland *; 18 * *; 19 * Copyright (c) 2005-2011: *; 20 * CERN, Switzerland *; 21 * ITM/UdeA, Colombia *; 22 * *; 23 * Redistribution and use in source and binary forms, with or without *; 24 * modification, are permitted according to the terms listed in LICENSE *; 25 * (see tmva/doc/LICENSE) *; 26 **********************************************************************************/; 27 ; 28#ifndef ROOT_TMVA_DataLoader; 29#define ROOT_TMVA_DataLoader; 30 ; 31#include <vector>; 32#include ""TCut.h""; 33 ; 34#include ""TMVA/Configurable.h""; 35#include ""TMVA/Types.h""; 36#include ""TMVA/DataSet.h""; 37 ; 38class TFile;; 39class TTree;; 40class TH2;; 41 ; 42namespace TMVA {; 43 ; 44 class CvSplit;; 45 class DataInputHandler;; 46 class DataSetInfo;; 47 class DataSetManager;; 48 class VariableTransformBase;; 49 ; 50 class DataLoader : public Configurable {; 51 public:; 52 ; 53 DataLoader(TString thedlName=""default"");; 54 ; 55 // default destructor; 56 virtual ~DataLoader();; 57 ; 58 ; 59 // add events to training and testing trees; 60 void AddSignalTrainingEvent ( const std::vector<Double_t>& event, Double_t weight = 1.0 );; 61 void AddBackgroundTrainingEvent( const std::vector<Double_t>& event, Double_t weight = 1.0 );; 62 void AddSignalTestEvent ( const std::vector<Double_t>& event, Double_t weight = 1.0 );; 63 void AddBackgroundTestEvent ( const std::vector<Double_t>& event, Double_t weight = 1.0 );; 64 void AddTrainingEvent( const TString& className, const std::vector<Double_t>& event, Double_t weight );; 65 void AddTestEvent ( const TString& className, const std::vector<Double_t>& event, Double_t weight );; 66 void AddEvent ( const TString& className, Types::ETreeType tt, const std::vector<Double_t>& event, Double_t weight );; 67 Bool_t UserAssignEvents(UInt_t clIndex);; 68 TTree* CreateEventAssignTrees( const TString& name );; 69 ; 70",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataLoader_8h_source.html:1976,test,testing,1976,doc/master/DataLoader_8h_source.html,https://root.cern,https://root.cern/doc/master/DataLoader_8h_source.html,1,['test'],['testing']
Testability,RNNLayer.h;  Adadelta.h;  Adagrad.h;  Adam.h;  DataLoader.h;  DeepNet.h;  DenseLayer.h;  DLMinimizers.h;  Functions.h;  GeneralLayer.h;  Layer.h;  Minimizers.h;  Net.h;  Optimizer.h;  ReshapeLayer.h;  RMSProp.h;  SGD.h;  TensorDataLoader.h;  BDTEventWrapper.h;  BinarySearchTree.h;  BinarySearchTreeNode.h;  BinaryTree.h;  CCPruner.h;  CCTreeWrapper.h;  Classification.h;  ClassifierFactory.h;  ClassInfo.h;  Config.h;  Configurable.h;  ConvergenceTest.h;  CostComplexityPruneTool.h;  CrossEntropy.h;  CrossValidation.h;  CvSplit.h;  DataInputHandler.h;  DataLoader.h;  DataSet.h;  DataSetFactory.h;  DataSetInfo.h;  DataSetManager.h;  DecisionTree.h;  DecisionTreeNode.h;  Envelope.h;  Event.h;  ExpectedErrorPruneTool.h;  Factory.h;  FitterBase.h;  GeneticAlgorithm.h;  GeneticFitter.h;  GeneticGenes.h;  GeneticPopulation.h;  GeneticRange.h;  GiniIndex.h;  GiniIndexWithLaplace.h;  HyperParameterOptimisation.h;  IFitterTarget.h;  IMethod.h;  Interval.h;  IPruneTool.h;  KDEKernel.h;  LDA.h;  LogInterval.h;  LossFunction.h;  MCFitter.h;  MethodANNBase.h;  MethodBase.h;  MethodBayesClassifier.h;  MethodBDT.h;  MethodBoost.h;  MethodCategory.h;  MethodCFMlpANN.h;  MethodCFMlpANN_def.h;  MethodCFMlpANN_Utils.h;  MethodCompositeBase.h;  MethodCrossValidation.h;  MethodCuts.h;  MethodDL.h;  MethodDNN.h;  MethodDT.h;  MethodFDA.h;  MethodFisher.h;  MethodHMatrix.h;  MethodKNN.h;  MethodLD.h;  MethodLikelihood.h;  MethodMLP.h;  MethodPDEFoam.h;  MethodPDERS.h;  MethodRuleFit.h;  MethodSVM.h;  MethodTMlpANN.h;  MinuitFitter.h;  MinuitWrapper.h;  MisClassificationError.h;  ModulekNN.h;  Monitoring.h;  MsgLogger.h;  NeuralNet.h;  NeuralNet.icc;  Node.h;  NodekNN.h;  OptimizeConfigParameters.h;  Option.h;  OptionMap.h;  Pattern.h;  PDEFoam.h;  PDEFoamCell.h;  PDEFoamDecisionTree.h;  PDEFoamDecisionTreeDensity.h;  PDEFoamDensityBase.h;  PDEFoamDiscriminant.h;  PDEFoamDiscriminantDensity.h;  PDEFoamEvent.h;  PDEFoamEventDensity.h;  PDEFoamKernelBase.h;  PDEFoamKernelGauss.h;  PDEFoamKernelL,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/files.html:84416,Log,LogInterval,84416,doc/v616/files.html,https://root.cern,https://root.cern/doc/v616/files.html,1,['Log'],['LogInterval']
Testability,"ROOF server protocol version number; TProof::EQueryModeTProof::fQueryModedefault query mode; TList*TProof::fRunningDSetsTemporary datasets used for async running; TSelector*TProof::fSelectorSelector to be processed, if any; TProofMgr::EServTypeTProof::fServTypetype of server: proofd, XrdProofd; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; TList*TProof::fSlaveslist of all slave servers as in config file; TList*TProof::fTerminatedSlaveInfoslist of unique infos of terminated slaves; TStringTNamed::fTitleobject title; Long64_tTProof::fTotalBytesnumber of bytes to be analyzed; TUrlTProof::fUrlUrl of the master; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TSemaphore*TProof::fgSemaphoresemaphore to control no of parallel startup threads. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofSuperMaster(const char* masterurl, const char* conffile = kPROOF_ConfFile, const char* confdir = kPROOF_ConfDir, Int_t loglevel = 0, const char* alias = 0, TProofMgr* mgr = 0); Start super master PROOF session. Bool_t StartSlaves(Bool_t ); Start up PROOF submasters. Long64_t Process(TDSet* set, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Process a data set (TDSet) using the specified selector (.C) file.; Entry- or event-lists should be set in the data set object using; TDSet::SetEntryList.; The return value is -1 in case of error and TSelector::GetStatus() in; in case of success. void ValidateDSet(TDSet* dset); Validate a TDSet. TVirtualProofPlayer * MakePlayer(const char* player = 0, TSocket* s = 0); Construct a TProofPlayer object. The player string specifies which; player should be created: remote, slave, sm (supermaster) or base.; Default is sm. Socket is needed in case a slave player is created. virtual ~TProofSuperMaster(); { }. Long64_t Process(TDSet* set, const char* selector, Option_t* option = """", Long64_t nentrie",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofSuperMaster.html:26514,log,loglevel,26514,root/html534/TProofSuperMaster.html,https://root.cern,https://root.cern/root/html534/TProofSuperMaster.html,1,['log'],['loglevel']
Testability,"ROOF-INF/BUILD.sh script if it exists followed by the PROOF-INF/SETUP.C script. In case notOnClient = true, don't enable the package on the client. The default is to enable packages also on the client. It is is possible to specify a list of objects to be passed to the SETUP functions via 'loadopts'; the objects must be streamable. Returns 0 in case of success and -1 in case of error. ; Definition at line 8258 of file TProof.cxx. ◆ Exec() [1/3]. Int_t TProof::Exec ; (; const char * ; cmd, . Bool_t ; plusMaster = kFALSE . ). Send command to be executed on the PROOF master and/or slaves. ; If plusMaster is kTRUE then exeucte on slaves and master too. Command can be any legal command line command. Commands like "".x file.C"" or "".L file.C"" will cause the file file.C to be send to the PROOF cluster. Returns -1 in case of error, >=0 in case of succes. ; Definition at line 6521 of file TProof.cxx. ◆ Exec() [2/3]. Int_t TProof::Exec ; (; const char * ; cmd, . const char * ; ord, . Bool_t ; logtomacro = kFALSE . ). Send command to be executed on node of ordinal 'ord' (use ""0"" for master). ; Command can be any legal command line command. Commands like "".x file.C"" or "".L file.C"" will cause the file file.C to be send to the PROOF cluster. If logtomacro is TRUE the text result of the action is saved in the fMacroLog TMacro, accessible via TMacro::GetMacroLog(); Returns -1 in case of error, >=0 in case of succes. ; Definition at line 6589 of file TProof.cxx. ◆ Exec() [3/3]. Int_t TProof::Exec ; (; const char * ; cmd, . ESlaves ; list, . Bool_t ; plusMaster . ). private . Send command to be executed on the PROOF master and/or slaves. ; Command can be any legal command line command. Commands like "".x file.C"" or "".L file.C"" will cause the file file.C to be send to the PROOF cluster. Returns -1 in case of error, >=0 in case of succes. ; Definition at line 6533 of file TProof.cxx. ◆ ExistsDataSet(). Bool_t TProof::ExistsDataSet ; (; const char * ; dataset). virtual . Returns kTRUE if 'da",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:88568,log,logtomacro,88568,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['log'],['logtomacro']
Testability,"ROOT will automatically load the library that defines this class. On start-up, ROOT parses all files ending on .rootmap rootmap that are in one of the $LD_LIBRARY_PATH (or $DYLD_LIBRARY_PATH for MacOS, or $PATH for Windows). They contain class names and the library names that the class depends on. After reading them, ROOT knows which classes are available, and which libraries to load for them.; When TSystem::Load(""ALib"") is called, ROOT uses this information to determine which libraries libALib.so depends on. It will load these libraries first. Otherwise, loading the requested library could cause a system (dynamic loader) error due to unresolved symbols.; 1.6.3 $ROOTSYS/tutorials; tutorials The tutorials directory contains many example example scripts. They assume some basic knowledge of ROOT, and for the new user we recommend reading the chapters: “Histograms” and “Input/Output” before trying the examples. The more experienced user can jump to chapter “The Tutorials and Tests” to find more explicit and specific information about how to build and run the examples.; The $ROOTSYS/tutorials/ directory include the following sub-directories:; fft: Fast Fourier Transform with the fftw package fit: Several examples illustrating minimization/fitting foam: Random generator in multidimensional space geom: Examples of use of the geometry package (TGeo classes) gl: Visualisation with OpenGL graphics: Basic graphics graphs: Use of TGraph, TGraphErrors, etc. gui: Scripts to create Graphical User Interface hist: Histogramming image: Image Processing io: Input/Output math: Maths and Statistics functions matrix: Matrices (TMatrix) examples mlp: Neural networks with TMultiLayerPerceptron net: Network classes (client/server examples) physics: LorentzVectors, phase space pyroot: Python tutorials pythia: Example with pythia8 quadp: Quadratic Programming smatrix: Matrices with a templated package spectrum: Peak finder, background, deconvolutions splot: Example of the TSplot class (signal",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:25155,Test,Tests,25155,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['Test'],['Tests']
Testability,"ROOT::Fit::FitResult::Chi2(); 472 Double_t GetChisquare() const; 473 {; 474 return fChisquare;; 475 }; 476 virtual TH1 *GetHistogram() const;; 477 virtual TH1 *CreateHistogram(); 478 {; 479 return DoCreateHistogram(fXmin, fXmax);; 480 }; 481 virtual TFormula *GetFormula(); 482 {; 483 return fFormula.get();; 484 }; 485 virtual const TFormula *GetFormula() const; 486 {; 487 return fFormula.get();; 488 }; 489 virtual TString GetExpFormula(Option_t *option = """") const; 490 {; 491 return (fFormula) ? fFormula->GetExpFormula(option) : TString();; 492 }; 493 virtual const TObject *GetLinearPart(Int_t i) const; 494 {; 495 return (fFormula) ? fFormula->GetLinearPart(i) : nullptr;; 496 }; 497 virtual Double_t GetMaximum(Double_t xmin = 0, Double_t xmax = 0, Double_t epsilon = 1.E-10, Int_t maxiter = 100, Bool_t logx = false) const;; 498 virtual Double_t GetMinimum(Double_t xmin = 0, Double_t xmax = 0, Double_t epsilon = 1.E-10, Int_t maxiter = 100, Bool_t logx = false) const;; 499 virtual Double_t GetMaximumX(Double_t xmin = 0, Double_t xmax = 0, Double_t epsilon = 1.E-10, Int_t maxiter = 100, Bool_t logx = false) const;; 500 virtual Double_t GetMinimumX(Double_t xmin = 0, Double_t xmax = 0, Double_t epsilon = 1.E-10, Int_t maxiter = 100, Bool_t logx = false) const;; 501 virtual Double_t GetMaximumStored() const; 502 {; 503 return fMaximum;; 504 }; 505 virtual Double_t GetMinimumStored() const; 506 {; 507 return fMinimum;; 508 }; 509 virtual Int_t GetNpar() const; 510 {; 511 return fNpar;; 512 }; 513 virtual Int_t GetNdim() const; 514 {; 515 return fNdim;; 516 }; 517 virtual Int_t GetNDF() const;; 518 virtual Int_t GetNpx() const; 519 {; 520 return fNpx;; 521 }; 522 TMethodCall *GetMethodCall() const; 523 {; 524 return fMethodCall.get();; 525 }; 526 virtual Int_t GetNumber() const; 527 {; 528 return (fFormula) ? fFormula->GetNumber() : 0;; 529 }; 530 virtual Int_t GetNumberFreeParameters() const;; 531 virtual Int_t GetNumberFitPoints() const; 532 {; 533 return fNpfits;; 534 }",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TF1_8h_source.html:21326,log,logx,21326,doc/master/TF1_8h_source.html,https://root.cern,https://root.cern/doc/master/TF1_8h_source.html,1,['log'],['logx']
Testability,"ROOT::Fit::FitResult::ParError(unsigned int i) const; stringROOT::Fit::FitResult::ParName(unsigned int i) const; virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; voidROOT::Fit::FitResult::PrintCovMatrix(ostream& os) const; doubleROOT::Fit::FitResult::Prob() const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidROOT::Fit::FitResult::SetMinosError(unsigned int i, double elow, double eup); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; intROOT::Fit::FitResult::Status() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; boolROOT::Fit::FitResult::Update(const ROOT::Math::Minimizer& min, bool isValid, unsigned int ncalls = 0); doubleROOT::Fit::FitResult::UpperError(unsigned int i) const; virtual voidTObject::UseCurrentStyle(); doubleROOT::Fit::FitResult::Value(unsigned int i) const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TFitResult.html:7750,Test,TestBit,7750,root/html530/TFitResult.html,https://root.cern,https://root.cern/root/html530/TFitResult.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"ROOT::Fit::FitResult::PrintCovMatrix(ostream& os) const; doubleROOT::Fit::FitResult::Prob() const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidROOT::Fit::FitResult::SetMinosError(unsigned int i, double elow, double eup); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; intROOT::Fit::FitResult::Status() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TFitResult(int status = 0); TFitResult(const ROOT::Fit::FitResult& f); TFitResult(const TFitResult&); TFitResult(const char* name, const char* title); boolROOT::Fit::FitResult::Update(const shared_ptr<ROOT::Math::Minimizer>& min, bool isValid, unsigned int ncalls = 0); doubleROOT::Fit::FitResult::UpperError(unsigned int i) const; virtual voidTObject::UseCurrentStyle(); doubleROOT::Fit::FitResult::Value(unsigned int i) const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TFitResult.html:7760,Test,TestBit,7760,root/html604/TFitResult.html,https://root.cern,https://root.cern/root/html604/TFitResult.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::DoDerivative ; (; const double * ; x, . unsigned int ; icoord . ); const. inlineprivatevirtual . Definition at line 161 of file LogLikelihoodFCN.h. ◆ DoEval(). template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . virtual double ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::DoEval ; (; const double * ; x); const. inlineprivatevirtual . Evaluation of the function (required by interface) ; Definition at line 155 of file LogLikelihoodFCN.h. ◆ Gradient(). template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . virtual void ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::Gradient ; (; const double * ; x, . double * ; g . ); const. inlinevirtual . Definition at line 127 of file LogLikelihoodFCN.h. ◆ NFitPoints(). template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . virtual unsigned int ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::NFitPoints ; (; ); const. inlinevirtual . Definition at line 118 of file LogLikelihoodFCN.h. ◆ operator=(). template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . LogLikelihoodFCN & ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::operator= ; (; const LogLikelihoodFCN< DerivFunType, ModelFunType > & ; rhs). inline . Assignment operator. ; Definition at line 99 of file LogLikelihoodFCN.h. ◆ Type(). template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . virtual BaseObjFunction::Type_t ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::Type ; (; ); const. inlinevirtual . get type of fit method function ; Reimplemented from ROOT::Math::BasicFitMethodFunction< DerivFunType >.; Definition at line 134 of file LogLikelihoodFCN.h. ◆ UseSumOfWeightSquare(). template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . void ROOT::Fit::LogLikelihoodFCN< DerivFunType, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html:11567,Log,LogLikelihoodFCN,11567,doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html,1,['Log'],['LogLikelihoodFCN']
Testability,"ROOT::RDataFrame df1(""tree1"", ""f1.root"");; ROOT::RDataFrame df2(""tree2"", ""f2.root"");; auto histo1 = df1.Histo1D(""x"");; auto histo2 = df2.Histo1D(""y"");; ; // just accessing result pointers, the event loops of separate RDataFrames run one after the other; histo1->Draw(); // runs first multi-thread event loop; histo2->Draw(); // runs second multi-thread event loop; ; // alternatively, with ROOT::RDF::RunGraphs, event loops for separate computation graphs can run concurrently; ROOT::RDF::RunGraphs({histo1, histo2});; histo1->Draw(); // results can then be used as usual; ROOT::RDF::RunGraphsunsigned int RunGraphs(std::vector< RResultHandle > handles)Trigger the event loop of multiple RDataFrames concurrently.Definition RDFHelpers.cxx:66. Performance considerations; To obtain the maximum performance out of RDataFrame, make sure to avoid just-in-time compiled versions of transformations and actions if at all possible. For instance, Filter(""x > 0"") requires just-in-time compilation of the corresponding C++ logic, while the equivalent Filter([](float x) { return x > 0.; }, {""x""}) does not. Similarly, Histo1D(""x"") requires just-in-time compilation after the type of x is retrieved from the dataset, while Histo1D<float>(""x"") does not; the latter spelling should be preferred for performance-critical applications.; Python applications cannot easily specify template parameters or pass C++ callables to RDataFrame. See Efficient analysis in Python for possible ways to speed up hot paths in this case.; Just-in-time compilation happens once, right before starting an event loop. To reduce the runtime cost of this step, make sure to book all operations for all RDataFrame computation graphs before the first event loop is triggered: just-in-time compilation will happen once for all code required to be generated up to that point, also across different computation graphs.; Also make sure not to count the just-in-time compilation time (which happens once before the event loop and does not de",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:49533,log,logic,49533,doc/v632/classROOT_1_1RDataFrame.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html,2,['log'],['logic']
Testability,"RSqliteDS::Initialize(); 522{; 523 fNRow = 0;; 524 int retval = sqlite3_reset(fDataSet->fQuery);; 525 if (retval != SQLITE_OK); 526 throw std::runtime_error(""SQlite error, reset"");; 527}; 528 ; 529std::string RSqliteDS::GetLabel(); 530{; 531 return ""RSqliteDS"";; 532}; 533 ; 534////////////////////////////////////////////////////////////////////////////////////////////////; 535/// \brief Factory method to create a SQlite RDataFrame.; 536/// \param[in] fileName Path of the sqlite file.; 537/// \param[in] query SQL query that defines the data set.; 538RDataFrame FromSqlite(std::string_view fileName, std::string_view query); 539{; 540 ROOT::RDataFrame rdf(std::make_unique<RSqliteDS>(std::string(fileName), std::string(query)));; 541 return rdf;; 542}; 543 ; 544////////////////////////////////////////////////////////////////////////////; 545/// Stores the result of the current active sqlite query row as a C++ value.; 546bool RSqliteDS::SetEntry(unsigned int /* slot */, ULong64_t entry); 547{; 548 assert(entry + 1 == fNRow);; 549 (void)entry;; 550 unsigned N = fValues.size();; 551 for (unsigned i = 0; i < N; ++i) {; 552 if (!fValues[i].fIsActive); 553 continue;; 554 ; 555 int nbytes;; 556 switch (fValues[i].fType) {; 557 case ETypes::kInteger: fValues[i].fInteger = sqlite3_column_int64(fDataSet->fQuery, i); break;; 558 case ETypes::kReal: fValues[i].fReal = sqlite3_column_double(fDataSet->fQuery, i); break;; 559 case ETypes::kText:; 560 nbytes = sqlite3_column_bytes(fDataSet->fQuery, i);; 561 if (nbytes == 0) {; 562 fValues[i].fText = """";; 563 } else {; 564 fValues[i].fText = reinterpret_cast<const char *>(sqlite3_column_text(fDataSet->fQuery, i));; 565 }; 566 break;; 567 case ETypes::kBlob:; 568 nbytes = sqlite3_column_bytes(fDataSet->fQuery, i);; 569 fValues[i].fBlob.resize(nbytes);; 570 if (nbytes > 0) {; 571 std::memcpy(fValues[i].fBlob.data(), sqlite3_column_blob(fDataSet->fQuery, i), nbytes);; 572 }; 573 break;; 574 case ETypes::kNull: break;; 575 default: throw std::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RSqliteDS_8cxx_source.html:22982,assert,assert,22982,doc/master/RSqliteDS_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RSqliteDS_8cxx_source.html,1,['assert'],['assert']
Testability,"RUE if kDecimals bit is set, kFALSE otherwise.; see TAxis::SetDecimals. void SetDecimals(Bool_t dot = kTRUE); Set the Decimals flag; By default, blank characters are stripped, and then the; label is correctly aligned. The dot, if last character of the string,; is also stripped, unless this option is specified.; One can disable the option by calling axis.SetDecimals(kTRUE).; The flag (in fBits2) is passed to the drawing function TGaxis::PaintAxis. void SetBinLabel(Int_t bin, const char* label); Set label for bin; In this case we create a label list in the axis but we do not; set the kCanRebin bit.; New labels will not be added with the Fill method but will end-up in the; underflow bin. See documentation of TAxis::FindBin(const char*). void SetLimits(Double_t xmin, Double_t xmax); Set the axis limits. Bool_t GetMoreLogLabels() const; Return kTRUE if kMoreLogLabels bit is set, kFALSE otherwise. void SetMoreLogLabels(Bool_t more = kTRUE); Set the kMoreLogLabels bit flag; When this option is selected more labels are drawn when in log scale; and there is a small number of decades (<3).; The flag (in fBits) is passed to the drawing function TGaxis::PaintAxis. Bool_t GetNoExponent() const; Returns kTRUE if kNoExponent bit is set, kFALSE otherwise.; see TAxis::SetNoExponent. void SetNoExponent(Bool_t noExponent = kTRUE); Set the NoExponent flag; By default, an exponent of the form 10^N is used when the label values; are either all very small or very large.; One can disable the exponent by calling axis.SetNoExponent(kTRUE).; The flag (in fBits) is passed to the drawing function TGaxis::PaintAxis. void SetRange(Int_t first = 0, Int_t last = 0); Set the viewing range for the axis from bin first to last; To set a range using the axis coordinates, use TAxis::SetRangeUser. void SetRangeUser(Double_t ufirst, Double_t ulast); Set the viewing range for the axis from ufirst to ulast (in user coordinates); To set a range using the axis bin numbers, use TAxis::SetRange. void SetTicks(Op",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TAxis.html:17391,log,log,17391,root/html534/TAxis.html,https://root.cern,https://root.cern/root/html534/TAxis.html,1,['log'],['log']
Testability,"RUE if kDecimals bit is set, kFALSE otherwise.; see TAxis::SetDecimals. void SetDecimals(Bool_t dot = kTRUE); Set the Decimals flag; By default, blank characters are stripped, and then the; label is correctly aligned. The dot, if last character of the string,; is also stripped, unless this option is specified.; One can disable the option by calling axis.SetDecimals(kTRUE).; The flag (in fBits2) is passed to the drawing function TGaxis::PaintAxis. void SetBinLabel(Int_t bin, const char* label); Set label for bin; In this case we create a label list in the axis but we do not; set the kCanRebin bit.; New labels will not be added with the Fill method but will end-up in the; underflow bin. See documentation of TAxis::FindBin(const char*). void SetLimits(Double_t xmin, Double_t xmax); Set the axis limits. Bool_t GetMoreLogLabels() const; Return kTRUE if kMoreLogLabels bit is set, kFALSE otherwise. void SetMoreLogLabels(Bool_t more = kTRUE); Set the kMoreLogLabels bit flag; When this option is selected more labels are drawn when in log scale; and there is a small number of decades (<3).; The flag (in fBits) is passed to the drawing function TGaxis::PaintAxis. Bool_t GetNoExponent() const; Returns kTRUE if kNoExponent bit is set, kFALSE otherwise.; see TAxis::SetNoExponent. void SetNoExponent(Bool_t noExponent = kTRUE); Set the NoExponent flag; By default, an exponent of the form 10^N is used when the label values; are either all very small or very large.; One can disable the exponent by calling axis.SetNoExponent(kTRUE).; The flag (in fBits) is passed to the drawing function TGaxis::PaintAxis. void SetRange(Int_t first = 0, Int_t last = 0); Set the viewing range for the axis from bin first to last; To set a range using the axis coordinates, use TAxis::SetRangeUser.; if first<=1 and last>=Nbins or if last < first the range is reset by removing the; bit TAxis::kAxisRange. In this case the functions TAxis::GetFirst() and TAxis::GetLast(); will return 1 and Nbins.; NOTE: If th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TAxis.html:17089,log,log,17089,root/html530/TAxis.html,https://root.cern,https://root.cern/root/html530/TAxis.html,2,['log'],['log']
Testability,"RUE); virtual voidTGCompositeFrame::SetEditDisabled(UInt_t on = 1); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); voidSetRmax(Double_t rmax); voidSetRmin(Double_t rmin); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); voidSetZ(Double_t z); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGeoPconSection(const TGeoPconSection&); TGeoPconSection(const TGWindow* p, UInt_t w, UInt_t h, Int_t id); virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoPconSection.html:14560,Test,TestBit,14560,root/html602/TGeoPconSection.html,https://root.cern,https://root.cern/root/html602/TGeoPconSection.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"RUE); voidSetLineHasBeenProcessed(); voidSetLineIsProcessing(); static voidSetMacroPath(const char* newpath); virtual voidTDirectory::SetModified(); virtual voidTDirectory::SetMother(TObject* mother); voidSetMustClean(Bool_t flag = kTRUE); virtual voidTDirectory::SetName(const char* newname); virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidSetReadingObject(Bool_t flag = kTRUE); virtual voidTDirectory::SetSeekDir(Long64_t); voidSetSelectedPad(TVirtualPad* pad); voidSetSelectedPrimitive(const TObject* obj); voidSetStyle(const char* stylename = ""Default""); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTDirectory::SetTRefAction(TObject*, TObject*); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTDirectory::SetWritable(Bool_t); virtual voidShowMembers(TMemberInspector&); virtual Int_tTDirectory::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTime(Int_t casetime = 1); Int_tTimer() const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTDirectory::Write(const char* = 0, Int_t = 0, Int_t = 0); virtual Int_tTDirectory::Write(const char* = 0, Int_t = 0, Int_t = 0) const; virtual voidTDirectory::WriteDirHeader(); virtual voidTDirectory::WriteKeys(); Int_tTDirectory::WriteObject(const void* obj, const char* name, Option_t* option = """", Int_t bufsize = 0); virtual Int_tTDirectory::WriteObjectAny(const void*, const char*, const char*, Option_t* = """", Int_t = 0); virtual Int_tTDirectory::WriteObjectAny(const void*, const TClass*, const char*, Option_t* = """", Int_t = 0); virtual Int_tTDirectory::WriteTObject(const TObject* obj, const char* name = 0, Option_t* = """", Int_t = 0).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TROOT.html:14610,Test,TestBit,14610,root/html534/TROOT.html,https://root.cern,https://root.cern/root/html534/TROOT.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"Random::Rannor(Double_t& a, Double_t& b); virtual Int_tTObject::Read(const char* name); virtual voidTRandom::ReadRandom(const char* filename); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual Double_tRndm(Int_t i = 0); virtual voidRndmArray(Int_t size, Float_t* vect); virtual voidRndmArray(Int_t size, Double_t* vect); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetSeed(UInt_t seed); virtual voidSetSeed2(UInt_t seed, Int_t lux = 3); virtual voidSetSeeds(const UInt_t* seeds, Int_t lux = 3); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidTRandom::Sphere(Double_t& x, Double_t& y, Double_t& z, Double_t r); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Double_tTRandom::Uniform(Double_t x1 = 1); virtual Double_tTRandom::Uniform(Double_t x1, Double_t x2); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTRandom::WriteRandom(const char* filename).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TRandom1.html:6207,Test,TestBit,6207,root/html534/TRandom1.html,https://root.cern,https://root.cern/root/html534/TRandom1.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"RandomPoints(TGeoVolume* vol, Int_t npoints, Option_t* option); Draw random points in the bounding box of a volume. void RandomRays(Int_t nrays, Double_t startx, Double_t starty, Double_t startz, const char* target_vol = 0, Bool_t check_norm = kFALSE); Randomly shoot nrays from point (startx,starty,startz) and plot intersections; with surfaces for current top node. TGeoNode * SamplePoints(Int_t npoints, Double_t& dist, Double_t epsil, const char* g3path); shoot npoints randomly in a box of 1E-5 arround current point.; return minimum distance to points outside; make sure that path to current node is updated; get the response of tgeo. Double_t * ShootRay(Double_t* start, Double_t dirx, Double_t diry, Double_t dirz, Double_t* array, Int_t& nelem, Int_t& dim, Double_t* enpoint = 0) const; Shoot one ray from start point with direction (dirx,diry,dirz). Fills input array; with points just after boundary crossings.; Int_t array_dimension = 3*dim;. void Test(Int_t npoints, Option_t* option); Check time of finding ""Where am I"" for n points. void TestOverlaps(const char* path); --- Geometry overlap checker based on sampling. Double_t Weight(Double_t precision = 0.01, Option_t* option = ""v""); Estimate weight of top level volume with a precision SIGMA(W)/W; better than PRECISION. Option can be ""v"" - verbose (default). Double_t CheckVoxels(TGeoVolume* vol, TGeoVoxelFinder* voxels, Double_t* xyz, Int_t npoints); count voxel timing. Bool_t TestVoxels(TGeoVolume* vol, Int_t npoints = 1000000); Returns optimal voxelization type for volume vol.; kFALSE - cartesian; kTRUE - cylindrical. TGeoChecker(); constructors. void SetSelectedNode(TGeoNode* node); {fSelectedNode=node;}. » Author: Andrei Gheata 01/11/01 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/geom:$Id$ » Last generated: 2015-03-14 16:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoChecker.html:17640,Test,Test,17640,root/html534/TGeoChecker.html,https://root.cern,https://root.cern/root/html534/TGeoChecker.html,1,['Test'],['Test']
Testability,"RandomPoints(TGeoVolume* vol, Int_t npoints, Option_t* option); Draw random points in the bounding box of a volume. void RandomRays(Int_t nrays, Double_t startx, Double_t starty, Double_t startz, const char* target_vol = 0, Bool_t check_norm = kFALSE); Randomly shoot nrays from point (startx,starty,startz) and plot intersections; with surfaces for current top node. TGeoNode * SamplePoints(Int_t npoints, Double_t& dist, Double_t epsil, const char* g3path); shoot npoints randomly in a box of 1E-5 arround current point.; return minimum distance to points outside; make sure that path to current node is updated; get the response of tgeo. Double_t * ShootRay(Double_t* start, Double_t dirx, Double_t diry, Double_t dirz, Double_t* array, Int_t& nelem, Int_t& dim, Double_t* enpoint = 0) const; Shoot one ray from start point with direction (dirx,diry,dirz). Fills input array; with points just after boundary crossings.; Int_t array_dimension = 3*dim;. void Test(Int_t npoints, Option_t* option); Check time of finding ""Where am I"" for n points. void TestOverlaps(const char* path); --- Geometry overlap checker based on sampling. Double_t Weight(Double_t precision = 0.01, Option_t* option = ""v""); Estimate weight of top level volume with a precision SIGMA(W)/W; better than PRECISION. Option can be ""v"" - verbose (default). Double_t CheckVoxels(TGeoVolume* vol, TGeoVoxelFinder* voxels, Double_t* xyz, Int_t npoints); count voxel timing. Bool_t TestVoxels(TGeoVolume* vol, Int_t npoints = 1000000); Returns optimal voxelization type for volume vol.; kFALSE - cartesian; kTRUE - cylindrical. TGeoChecker(); constructors. void SetSelectedNode(TGeoNode* node); {fSelectedNode=node;}. » Author: Andrei Gheata 01/11/01 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/geom:$Id$ » Last generated: 2015-06-02 16:00; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGeoChecker.html:18169,Test,Test,18169,root/html604/TGeoChecker.html,https://root.cern,https://root.cern/root/html604/TGeoChecker.html,1,['Test'],['Test']
Testability,"RandomPoints(TGeoVolume* vol, Int_t npoints, Option_t* option); Draw random points in the bounding box of a volume. void RandomRays(Int_t nrays, Double_t startx, Double_t starty, Double_t startz, const char* target_vol = 0, Bool_t check_norm = kFALSE); Randomly shoot nrays from point (startx,starty,startz) and plot intersections; with surfaces for current top node. TGeoNode * SamplePoints(Int_t npoints, Double_t& dist, Double_t epsil, const char* g3path); shoot npoints randomly in a box of 1E-5 arround current point.; return minimum distance to points outside; make sure that path to current node is updated; get the response of tgeo. Double_t * ShootRay(Double_t* start, Double_t dirx, Double_t diry, Double_t dirz, Double_t* array, Int_t& nelem, Int_t& dim, Double_t* enpoint = 0) const; Shoot one ray from start point with direction (dirx,diry,dirz). Fills input array; with points just after boundary crossings.; Int_t array_dimension = 3*dim;. void Test(Int_t npoints, Option_t* option); Check time of finding ""Where am I"" for n points. void TestOverlaps(const char* path); --- Geometry overlap checker based on sampling. Double_t Weight(Double_t precision = 0.01, Option_t* option = ""v""); Estimate weight of top level volume with a precision SIGMA(W)/W; better than PRECISION. Option can be ""v"" - verbose (default). Double_t CheckVoxels(TGeoVolume* vol, TGeoVoxelFinder* voxels, Double_t* xyz, Int_t npoints); count voxel timing. Bool_t TestVoxels(TGeoVolume* vol, Int_t npoints = 1000000); Returns optimal voxelization type for volume vol.; kFALSE - cartesian; kTRUE - cylindrical. TGeoChecker(); constructors. void SetSelectedNode(TGeoNode* node); {fSelectedNode=node;}. » Author: Andrei Gheata 01/11/01 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/geom:$Id$ » Last generated: 2015-06-30 15:00; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoChecker.html:18169,Test,Test,18169,root/html602/TGeoChecker.html,https://root.cern,https://root.cern/root/html602/TGeoChecker.html,1,['Test'],['Test']
Testability,"Rank : Variable : Variable Importance; : ----------------------------------------; : 1 : m_bb : 2.089e-01; : 2 : m_wwbb : 1.673e-01; : 3 : m_wbb : 1.568e-01; : 4 : m_jlv : 1.560e-01; : 5 : m_jjj : 1.421e-01; : 6 : m_jj : 1.052e-01; : 7 : m_lv : 6.369e-02; : ----------------------------------------; : No variable ranking supplied by classifier: DNN_CPU; : No variable ranking supplied by classifier: PyKeras; TH1.Print Name = TrainingHistory_DNN_CPU_trainingError, Entries= 0, Total sum= 11.248; TH1.Print Name = TrainingHistory_DNN_CPU_valError, Entries= 0, Total sum= 11.788; TH1.Print Name = TrainingHistory_PyKeras_'accuracy', Entries= 0, Total sum= 13.3463; TH1.Print Name = TrainingHistory_PyKeras_'loss', Entries= 0, Total sum= 12.0693; TH1.Print Name = TrainingHistory_PyKeras_'val_accuracy', Entries= 0, Total sum= 13.2125; TH1.Print Name = TrainingHistory_PyKeras_'val_loss', Entries= 0, Total sum= 12.2158; Factory : === Destroy and recreate all methods via weight files for testing ===; : ; : Reading weight file: ␛[0;36mdataset/weights/TMVA_Higgs_Classification_Likelihood.weights.xml␛[0m; : Reading weight file: ␛[0;36mdataset/weights/TMVA_Higgs_Classification_Fisher.weights.xml␛[0m; : Reading weight file: ␛[0;36mdataset/weights/TMVA_Higgs_Classification_BDT.weights.xml␛[0m; : Reading weight file: ␛[0;36mdataset/weights/TMVA_Higgs_Classification_DNN_CPU.weights.xml␛[0m; : Reading weight file: ␛[0;36mdataset/weights/TMVA_Higgs_Classification_PyKeras.weights.xml␛[0m; Factory : ␛[1mTest all methods␛[0m; Factory : Test method: Likelihood for Classification performance; : ; Likelihood : [dataset] : Evaluation of Likelihood on testing sample (6000 events); : Elapsed time for evaluation of 6000 events: 0.0107 sec ; Factory : Test method: Fisher for Classification performance; : ; Fisher : [dataset] : Evaluation of Fisher on testing sample (6000 events); : Elapsed time for evaluation of 6000 events: 0.00276 sec ; : Dataset[dataset] : Evaluation of Fisher on testing sample; Fac",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__Higgs__Classification_8py.html:48693,test,testing,48693,doc/master/TMVA__Higgs__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__Higgs__Classification_8py.html,1,['test'],['testing']
Testability,"Ratio(double sigma) const;; 202 /**; 203 Gaussian Tail distribution; 204 */; 205 double GaussianTail(double a, double sigma) const;; 206 ; 207 /**; 208 Bivariate Gaussian distribution with correlation; 209 */; 210 void Gaussian2D(double sigmaX, double sigmaY, double rho, double &x, double &y) const;; 211 ; 212 /**; 213 Multivariate Gaussian distribution; 214 */; 215 void GaussianND(size_t dim, const double *pars, const double *covmat, double *genpars, double * lmat = nullptr) const;; 216 ; 217 ; 218 /**; 219 Exponential distribution; 220 */; 221 double Exponential(double mu) const;; 222 ; 223 /**; 224 Cauchy distribution; 225 */; 226 double Cauchy(double a) const;; 227 ; 228 /**; 229 Landau distribution; 230 */; 231 double Landau() const;; 232 ; 233 /**; 234 Gamma distribution; 235 */; 236 double Gamma(double a, double b) const;; 237 ; 238 /**; 239 Beta distribution; 240 */; 241 double Beta(double a, double b) const;; 242 ; 243 /**; 244 Log Normal distribution; 245 */; 246 double LogNormal(double zeta, double sigma) const;; 247 ; 248 /**; 249 Chi square distribution; 250 */; 251 double ChiSquare(double nu) const;; 252 ; 253 /**; 254 F distribution; 255 */; 256 double FDist(double nu1, double nu2) const;; 257 ; 258 /**; 259 t student distribution; 260 */; 261 double tDist(double nu) const;; 262 ; 263 /**; 264 Rayleigh distribution; 265 */; 266 double Rayleigh(double sigma) const;; 267 ; 268 /**; 269 Logistic distribution; 270 */; 271 double Logistic(double a) const;; 272 ; 273 /**; 274 Pareto distribution; 275 */; 276 double Pareto(double a, double b) const;; 277 ; 278 /**; 279 generate random numbers in a 2D circle of radious 1; 280 */; 281 void Dir2D(double &x, double &y) const;; 282 ; 283 /**; 284 generate random numbers in a 3D sphere of radious 1; 285 */; 286 void Dir3D(double &x, double &y, double &z) const;; 287 ; 288 /**; 289 Poisson distribution; 290 */; 291 unsigned int Poisson(double mu) const;; 292 ; 293 /**; 294 Binomial distribution; 295 */; 296 unsigne",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GSLRndmEngines_8h_source.html:7003,Log,LogNormal,7003,doc/master/GSLRndmEngines_8h_source.html,https://root.cern,https://root.cern/doc/master/GSLRndmEngines_8h_source.html,1,['Log'],['LogNormal']
Testability,"RawLine(void* node, const char* raw); XML helpers. std::vector<TString> SplitString(const TString& theOpt, const char separator) const; splits the option string at 'separator' and fills the list; 'splitV' with the primitive strings. TString StringFromInt(Long_t i); string tools. TString StringFromDouble(Double_t d); string tools. void WriteTMatrixDToXML(void* node, const char* name, TMatrixD* mat); XML helpers. void WriteTVectorDToXML(void* node, const char* name, TVectorD* vec). void ReadTVectorDFromXML(void* node, const char* name, TVectorD* vec). void ReadTMatrixDFromXML(void* node, const char* name, TMatrixD* mat). void TMVAWelcomeMessage(); direct output, eg, when starting ROOT session -> no use of Logger here. void TMVAVersionMessage(TMVA::MsgLogger& logger); prints the TMVA release number and date. void ROOTVersionMessage(TMVA::MsgLogger& logger); prints the ROOT release number and date. void TMVAWelcomeMessage(TMVA::MsgLogger& logger, TMVA::Tools::EWelcomeMessage m = kStandardWelcomeMsg); various kinds of welcome messages; ASCII text generated by this site: http://www.network-science.de/ascii. void TMVACitation(TMVA::MsgLogger& logger, TMVA::Tools::ECitation citType = kPlainText); kinds of TMVA citation. Bool_t HistoHasEquidistantBins(const TH1& h). CalcCovarianceMatrices( const std::vector<const Event*>& events, Int_t maxCls, VariableTransformBase* transformBase ). CalcCovarianceMatrices( const std::vector<Event*>& events, Int_t maxCls, VariableTransformBase* transformBase ); compute covariance matrices. TH1* GetCumulativeDist(TH1* h); get the cumulative distribution of a histogram. Double_t ComputeVariance(Double_t sumx2, Double_t sumx, Int_t nx). Tools(). TXMLEngine& xmlengine(); { return *fXMLEngine; }. int xmlenginebuffersize(); { return 10000000; }. » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-30 15:18; This page has been automatically generated. For com",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__Tools.html:12627,log,logger,12627,root/html602/TMVA__Tools.html,https://root.cern,https://root.cern/root/html602/TMVA__Tools.html,1,['log'],['logger']
Testability,"RawLine(void* node, const char* raw); XML helpers. std::vector<TString> SplitString(const TString& theOpt, const char separator) const; splits the option string at 'separator' and fills the list; 'splitV' with the primitive strings. TString StringFromInt(Long_t i); string tools. TString StringFromDouble(Double_t d); string tools. void WriteTMatrixDToXML(void* node, const char* name, TMatrixD* mat); XML helpers. void WriteTVectorDToXML(void* node, const char* name, TVectorD* vec). void ReadTVectorDFromXML(void* node, const char* name, TVectorD* vec). void ReadTMatrixDFromXML(void* node, const char* name, TMatrixD* mat). void TMVAWelcomeMessage(); direct output, eg, when starting ROOT session -> no use of Logger here. void TMVAVersionMessage(TMVA::MsgLogger& logger); prints the TMVA release number and date. void ROOTVersionMessage(TMVA::MsgLogger& logger); prints the ROOT release number and date. void TMVAWelcomeMessage(TMVA::MsgLogger& logger, TMVA::Tools::EWelcomeMessage m = kStandardWelcomeMsg); various kinds of welcome messages; ASCII text generated by this site: http://www.network-science.de/ascii. void TMVACitation(TMVA::MsgLogger& logger, TMVA::Tools::ECitation citType = kPlainText); kinds of TMVA citation. Bool_t HistoHasEquidistantBins(const TH1& h). CalcCovarianceMatrices( const std::vector<const Event*>& events, Int_t maxCls, VariableTransformBase* transformBase ). CalcCovarianceMatrices( const std::vector<Event*>& events, Int_t maxCls, VariableTransformBase* transformBase ); compute covariance matrices. TH1* GetCumulativeDist(TH1* h); get the cumulative distribution of a histogram. Double_t ComputeVariance(Double_t sumx2, Double_t sumx, Int_t nx). Tools(). TXMLEngine& xmlengine(); { return *fXMLEngine; }. int xmlenginebuffersize(); { return 10000000; }. » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For com",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__Tools.html:12054,log,logger,12054,root/html534/TMVA__Tools.html,https://root.cern,https://root.cern/root/html534/TMVA__Tools.html,1,['log'],['logger']
Testability,"RawLine(void* node, const char* raw); XML helpers. std::vector<TString> SplitString(const TString& theOpt, const char separator) const; splits the option string at 'separator' and fills the list; 'splitV' with the primitive strings. TString StringFromInt(Long_t i); string tools. TString StringFromDouble(Double_t d); string tools. void WriteTMatrixDToXML(void* node, const char* name, TMatrixD* mat); XML helpers. void WriteTVectorDToXML(void* node, const char* name, TVectorD* vec). void ReadTVectorDFromXML(void* node, const char* name, TVectorD* vec). void ReadTMatrixDFromXML(void* node, const char* name, TMatrixD* mat). void TMVAWelcomeMessage(); direct output, eg, when starting ROOT session -> no use of Logger here. void TMVAVersionMessage(TMVA::MsgLogger& logger); prints the TMVA release number and date. void ROOTVersionMessage(TMVA::MsgLogger& logger); prints the ROOT release number and date. void TMVAWelcomeMessage(TMVA::MsgLogger& logger, TMVA::Tools::EWelcomeMessage m = kStandardWelcomeMsg); various kinds of welcome messages; ASCII text generated by this site: http://www.network-science.de/ascii. void TMVACitation(TMVA::MsgLogger& logger, TMVA::Tools::ECitation citType = kPlainText); kinds of TMVA citation. Bool_t HistoHasEquidistantBins(const TH1& h). CalcCovarianceMatrices( const std::vector<const Event*>& events, Int_t maxCls, VariableTransformBase* transformBase ). CalcCovarianceMatrices( const std::vector<Event*>& events, Int_t maxCls, VariableTransformBase* transformBase ); compute covariance matrices. TH1* GetCumulativeDist(TH1* h); get the cumulative distribution of a histogram. Double_t ComputeVariance(Double_t sumx2, Double_t sumx, Int_t nx). Tools(). TXMLEngine& xmlengine(); { return *fXMLEngine; }. int xmlenginebuffersize(); { return 10000000; }. » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-09-08 17:46; This page has been automatically generated. For com",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__Tools.html:12635,log,logger,12635,root/html604/TMVA__Tools.html,https://root.cern,https://root.cern/root/html604/TMVA__Tools.html,1,['log'],['logger']
Testability,"ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual Double_tRun(vector<Double_t>& pars); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidSetParameters(Int_t fMaxCalls, Double_t fInitialTemperature, Double_t fMinTemperature, Double_t fEps, TString fKernelTemperatureS, Double_t fTemperatureScale, Double_t fTemperatureAdaptiveStep, Bool_t fUseDefaultScale, Bool_t fUseDefaultTemperature); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); TMVA::SimulatedAnnealingFitterSimulatedAnnealingFitter(TMVA::IFitterTarget& target, const TString& name, const vector<TMVA::Interval*>& ranges, const TString& theOption); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__SimulatedAnnealingFitter.html:5753,Test,TestBit,5753,root/html528/TMVA__SimulatedAnnealingFitter.html,https://root.cern,https://root.cern/root/html528/TMVA__SimulatedAnnealingFitter.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"ReadParam(Int_t); voidTBuffer::SetReAllocFunc(ReAllocCharFun_t reallocfunc = 0); virtual voidSetStreamerElementNumber(TStreamerElement* elem, Int_t comp_type); virtual voidTObject::SetUniqueID(UInt_t uid); voidTBuffer::SetWriteMode(); virtual voidSetWriteParam(Int_t); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidSkipObjectAny(); virtual voidSkipVersion(const TClass* cl = 0); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidStreamObject(TObject* obj); virtual voidStreamObject(void* obj, const type_info& typeinfo, const TClass* onFileClass = 0); virtual voidStreamObject(void* obj, const char* className, const TClass* onFileClass = 0); virtual voidStreamObject(void* obj, const TClass* cl, const TClass* onFileClass = 0); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTagStreamerInfo(TVirtualStreamerInfo*); TBufferJSON(); TBufferJSON(const TBufferJSON&); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual voidWriteArray(const Bool_t* b, Int_t n); virtual voidWriteArray(const Char_t* c, Int_t n); virtual voidWriteArray(const UChar_t* c, Int_t n); virtual voidWriteArray(const Short_t* h, Int_t n); virtual voidWriteArray(const UShort_t* h, Int_t n); virtual voidWriteArray(const Int_t* i, Int_t n); virtual voidWriteArray(const UInt_t* i, Int_t n); virtual voidWriteArray(const Long_t* l, Int_t n); virtual voidWriteArray(const ULong_t* l, Int_t n); virtual voidWriteArray(const Long64_t* l, Int_t n); virtual voidWriteArray(const ULong64_t* l, Int_t n); virtual voidWriteArray(const Float_t* f, Int_t n); virtual voidWriteArray(const Double_t* d, Int_t n); virtual voidWriteArrayDouble32(const Double_t* d, Int_t n, TStreamerElement* ele = 0); virtual voidWriteArrayFloat16(const Float_t* f, Int_t n, TStreamerElement*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TBufferJSON.html:13074,Test,TestBit,13074,root/html602/TBufferJSON.html,https://root.cern,https://root.cern/root/html602/TBufferJSON.html,2,['Test'],['TestBit']
Testability,"Real::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; virtual RooAbsGenContext*RooResolutionModel::modelGenContext(const RooAbsAnaConvPdf&, const RooArgSet&, const RooDataSet*, const RooArgSet*, Bool_t) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual voidRooResolutionModel::normLeafServerList(RooArgSet& list) const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAddModel.html:23830,test,testArg,23830,root/html534/RooAddModel.html,https://root.cern,https://root.cern/root/html534/RooAddModel.html,3,['test'],['testArg']
Testability,"Real::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; virtual RooAbsGenContext*RooResolutionModel::modelGenContext(const RooAbsAnaConvPdf&, const RooArgSet&, const RooDataSet*, const RooArgSet*, Bool_t) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual voidRooResolutionModel::normLeafServerList(RooArgSet& list) const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooAddModel&operator=(const RooAddModel&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedLis",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAddModel.html:23616,test,testArg,23616,root/html602/RooAddModel.html,https://root.cern,https://root.cern/root/html602/RooAddModel.html,2,['test'],['testArg']
Testability,"Real::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; virtual RooAbsGenContext*RooResolutionModel::modelGenContext(const RooAbsAnaConvPdf&, const RooArgSet&, const RooDataSet*, const RooArgSet*, Bool_t) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual voidRooResolutionModel::normLeafServerList(RooArgSet& list) const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooGExpModel&operator=(const RooGExpModel&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooGExpModel.html:23030,test,testArg,23030,root/html602/RooGExpModel.html,https://root.cern,https://root.cern/root/html602/RooGExpModel.html,2,['test'],['testArg']
Testability,"Real::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; virtual RooAbsGenContext*RooResolutionModel::modelGenContext(const RooAbsAnaConvPdf&, const RooArgSet&, const RooDataSet*, const RooArgSet*, Bool_t) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual voidRooResolutionModel::normLeafServerList(RooArgSet& list) const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooGaussModel&operator=(const RooGaussModel&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinke",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooGaussModel.html:22958,test,testArg,22958,root/html602/RooGaussModel.html,https://root.cern,https://root.cern/root/html602/RooGaussModel.html,2,['test'],['testArg']
Testability,"Real::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooDecay&operator=(const RooDecay&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsPdf::paramOn(RooPlot* frame, const RooAbsData* data, const char* label = """", Int_t sigDigits = 2, Option_t* options = ""NELU"", Double_t xmin = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooDecay.html:23841,test,testArg,23841,root/html602/RooDecay.html,https://root.cern,https://root.cern/root/html602/RooDecay.html,2,['test'],['testArg']
Testability,"Real::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooGamma&operator=(const RooGamma&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsPdf::paramOn(RooPlot* frame, const RooAbsData* data, const char* label = """", Int_t sigDigits = 2, Option_t* options = ""NELU"", Double_t xmin = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooGamma.html:22974,test,testArg,22974,root/html602/RooGamma.html,https://root.cern,https://root.cern/root/html602/RooGamma.html,2,['test'],['testArg']
Testability,"Real::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooCFunction4PdfBinding<double,double,double,double,int>&operator=(const RooCFunction4PdfBinding<double,double,double,double,int>&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsPdf::paramOn(RooPlot* frame, const RooAbsData* data, const char* label = """", Int_t sigDigits = 2, Option_t* options = ""NELU"", Double_t xmin = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCFunction4PdfBinding_double_double_double_double_int_.html:23824,test,testArg,23824,root/html602/RooCFunction4PdfBinding_double_double_double_double_int_.html,https://root.cern,https://root.cern/root/html602/RooCFunction4PdfBinding_double_double_double_double_int_.html,2,['test'],['testArg']
Testability,"RealParmsfRFRealParmsreal parameters; vector<Float_t>fRFVarImpvariable importances; vector<Int_t>fRFVarImpIndvariable index; TStringfRFWorkDirworking directory; vector<Float_t>fRFYhatscore results from test sample; TMVA::RuleFit*fRuleFitnon const ptr to RuleFit class in MethodRuleFit. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RuleFitAPI(const TMVA::MethodRuleFit* rfbase, TMVA::RuleFit* rulefit, TMVA::EMsgType minType); standard constructor. ~RuleFitAPI(); destructor. void WelcomeMessage(); welcome message. void HowtoSetupRF(); howto message. void InitRuleFit(); default initialisation; SetRFWorkDir(""./rulefit"");. void ImportSetup(); import setup from MethodRuleFit. void SetRFWorkDir(const char* wdir); set the directory containing rf_go.exe. void CheckRFWorkDir(); check if the rulefit work dir is properly setup.; it aborts (kFATAL) if not. Check existance of directory. void SetTrainParms(); set the training parameters. void SetTestParms(); set the test params. void FillRealParmsDef(); set default real params. void FillIntParmsDef(); set default int params. Bool_t WriteAll(); write all files read by rf_go.exe. Bool_t WriteIntParms(); write int params file. Bool_t WriteRealParms(); write int params file. Bool_t WriteLx(); Save input variable mask. If the lx vector size is not the same as inputVars,; resize it and fill it with 1; NOTE: Always set all to 1; if (fRFLx.size() != m_inputVars->size()) {. Bool_t WriteProgram(); write command to rf_go.exe. Bool_t WriteRealVarImp(); write the minimum importance to be considered. Bool_t WriteRfOut(); written by rf_go.exe; write rulefit output (rfout). Bool_t WriteRfStatus(); written by rf_go.exe; write rulefit status. Bool_t WriteRuleFitMod(); written by rf_go.exe (NOTE:Format unknown!). Bool_t WriteRuleFitSum(); written by rf_go.exe (NOTE: format unknown!). Bool_t WriteTrain(); write training data, columnwise. Bool_t WriteTest(); Write test data. Bool_t WriteVarNames(); write vari",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__RuleFitAPI.html:3608,test,test,3608,root/html528/TMVA__RuleFitAPI.html,https://root.cern,https://root.cern/root/html528/TMVA__RuleFitAPI.html,6,['test'],['test']
Testability,"RealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooAbsAnaConvPdf&operator=(const RooAbsAnaConvPdf&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsPdf::paramOn(RooPlot* frame, const RooAbsData* data, const char* label = """", Int_t sigDigits = 2, Option_t* options = ""NELU"", Double_t xmin = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsAnaConvPdf.html:25433,test,testArg,25433,root/html602/RooAbsAnaConvPdf.html,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html,2,['test'],['testArg']
Testability,"RealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooIntegralMorph&operator=(const RooIntegralMorph&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsPdf::paramOn(RooPlot* frame, const RooAbsData* data, const char* label = """", Int_t sigDigits = 2, Option_t* options = ""NELU"", Double_t xmin = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooIntegralMorph.html:27265,test,testArg,27265,root/html602/RooIntegralMorph.html,https://root.cern,https://root.cern/root/html602/RooIntegralMorph.html,2,['test'],['testArg']
Testability,"RealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooTFnPdfBinding&operator=(const RooTFnPdfBinding&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsPdf::paramOn(RooPlot* frame, const RooAbsData* data, const char* label = """", Int_t sigDigits = 2, Option_t* options = ""NELU"", Double_t xmin = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooTFnPdfBinding.html:23068,test,testArg,23068,root/html602/RooTFnPdfBinding.html,https://root.cern,https://root.cern/root/html602/RooTFnPdfBinding.html,2,['test'],['testArg']
Testability,"RealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooCFunction3PdfBinding<double,unsigned int,double,unsigned int>&operator=(const RooCFunction3PdfBinding<double,unsigned int,double,unsigned int>&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsPdf::paramOn(RooPlot* frame, const RooAbsData* data, const char* label = """", Int_t sigDigits = 2, Option_t* options = ""NELU"", Double_t xmin = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCFunction3PdfBinding_double_unsigned_int_double_unsigned_int_.html:23872,test,testArg,23872,root/html602/RooCFunction3PdfBinding_double_unsigned_int_double_unsigned_int_.html,https://root.cern,https://root.cern/root/html602/RooCFunction3PdfBinding_double_unsigned_int_double_unsigned_int_.html,2,['test'],['testArg']
Testability,"RealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooCFunction3PdfBinding<double,unsigned int,unsigned int,double>&operator=(const RooCFunction3PdfBinding<double,unsigned int,unsigned int,double>&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsPdf::paramOn(RooPlot* frame, const RooAbsData* data, const char* label = """", Int_t sigDigits = 2, Option_t* options = ""NELU"", Double_t xmin = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCFunction3PdfBinding_double_unsigned_int_unsigned_int_double_.html:23872,test,testArg,23872,root/html602/RooCFunction3PdfBinding_double_unsigned_int_unsigned_int_double_.html,https://root.cern,https://root.cern/root/html602/RooCFunction3PdfBinding_double_unsigned_int_unsigned_int_double_.html,2,['test'],['testArg']
Testability,"Rebin of the parent histogram.; - if the bit is set add the new label and if the number of labels exceeds; the number of bins, double the number of bins via TH1::LabelsInflate; - if the bit is not set return 0 (underflow bin). -1 is returned only when the Axis has no parent histogram. Int_t FindFixBin(Double_t x) const; Find bin number corresponding to abscissa x. Identical to TAxis::FindBin except that if x is an underflow/overflow; no attempt is made to rebin the histogram if TH1::kCanRebin bit is set. const char * GetBinLabel(Int_t bin) const; Return label for bin. Int_t GetFirst() const; return first bin on the axis; ie 1 if no range defined; NOTE: in some cases a zero is returned (see TAxis::SetRange). Int_t GetLast() const; return last bin on the axis; ie fNbins if no range defined; NOTE: in some cases a zero is returned (see TAxis::SetRange). Double_t GetBinCenter(Int_t bin) const; Return center of bin. Double_t GetBinCenterLog(Int_t bin) const; Return center of bin in log; With a log-equidistant binning for a bin with low and up edges, the mean is :; 0.5*(ln low + ln up) i.e. sqrt(low*up) in logx (e.g. sqrt(10^0*10^2) = 10).; Imagine a bin with low=1 and up=100 :; - the center in lin is (100-1)/2=50.5; - the center in log would be sqrt(1*100)=10 (!=log(50.5)); NB: if the low edge of the bin is negative, the function returns the bin center; as computed by TAxis::GetBinCenter. Double_t GetBinLowEdge(Int_t bin) const; Return low edge of bin. Double_t GetBinUpEdge(Int_t bin) const; Return up edge of bin. Double_t GetBinWidth(Int_t bin) const; Return bin width. void GetCenter(Double_t* center) const; Return an array with the center of all bins. void GetLowEdge(Double_t* edge) const; Return an array with the lod edge of all bins. const char * GetTimeFormatOnly() const; Return *only* the time format from the string fTimeFormat. const char * GetTicks() const; Return the ticks option (see SetTicks). void LabelsOption(Option_t* option = ""h""); Set option(s) to draw axi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TAxis.html:14197,log,log,14197,root/html534/TAxis.html,https://root.cern,https://root.cern/root/html534/TAxis.html,2,['log'],"['log', 'log-equidistant']"
Testability,"Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t bytesDefinition TGWin32VirtualXProxy.cxx:245; ; #include ""TFile.h""; #include ""TSystem.h""; #include ""TH1.h""; #include ""TRandom.h""; #include ""TStopwatch.h""; #include ""TKey.h""; #include ""TTree.h""; #include ""TROOT.h""; ; const Int_t N = 10000; //number of events to be processed; TStopwatch timer;; ; ; ; void billw(const char *billname, Int_t compress) {; //write N histograms as keys; timer.Start();; TFile f(billname,""recreate"",""bill benchmark with keys"",compress);; TH1F h(""h"",""h"",1000,-3,3);; h.FillRandom(""gaus"",50000);; ; for (Int_t i=0;i<N;i++) {; char name[20];; sprintf(name,""h%d"",i);; h.SetName(name);; h.Fill(2*gRandom->Rndm());; h.Write();; }; timer.Stop();; printf(""billw%d : RT=%7.3f s, Cpu=%7.3f s, File size= %9d bytes, CX= %g\n"",compress,timer.RealTime(),timer.CpuTime(),; (Int_t)f.GetBytesWritten(),f.GetCompressionFactor());; }; ; void billr(const char *billname, Int_t compress) {; //read N histograms from keys; timer.Start();; TFile f(billname);; TIter next(f.GetListOfKeys());; TH1F *h;; TH1::AddDirectory(kFALSE);; TKey *key;; Int_t i=0;; TH1F *hmean = new TH1F(""hmean"",""hist mean from keys"",100,0,1);; ; while ((key=(TKey*)next())) {; h = (TH1F*)key->ReadObj();; hmean->Fill(h->GetMean());; delete h;; i++;; }; timer.Stop();; printf(""billr%d : RT=%7.3f s, Cpu=%7.3f s\n"",compress,timer.RealTime(),timer.CpuTime());; }; ; void billtw(const char *billtname, Int_t compress) {; //write N histograms to a Tree; timer.Start();",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/bill_8C.html:2553,benchmark,benchmark,2553,doc/master/bill_8C.html,https://root.cern,https://root.cern/doc/master/bill_8C.html,1,['benchmark'],['benchmark']
Testability,"RecursiveRemove(TObject* obj); virtual voidTHn::Reset(Option_t* option = """"); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTHnBase::Scale(Double_t c); voidTHn::SetBinContent(const Int_t* idx, Double_t v); virtual voidTHn::SetBinContent(Long64_t bin, Double_t v); voidTHnBase::SetBinEdges(Int_t idim, const Double_t* bins); voidTHnBase::SetBinError(const Int_t* idx, Double_t e); voidTHnBase::SetBinError(Long64_t bin, Double_t e); virtual voidTHn::SetBinError2(Long64_t bin, Double_t e2); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTHnBase::SetEntries(Double_t entries); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTHnBase::SetTitle(const char* title); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTHn::Sumw2(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; THnT<float>(); THnT<float>(const THnT<float>&); THnT<float>(THnT<float>&&); THnT<float>(const char* name, const char* title, Int_t dim, const Int_t* nbins, const Double_t* xmin, const Double_t* xmax); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/THnT_float_.html:8277,Test,TestBit,8277,root/html602/THnT_float_.html,https://root.cern,https://root.cern/root/html602/THnT_float_.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"RecursiveRemove(TObject* obj); virtual voidTHn::Reset(Option_t* option = """"); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTHnBase::Scale(Double_t c); voidTHn::SetBinContent(const Int_t* idx, Double_t v); virtual voidTHn::SetBinContent(Long64_t bin, Double_t v); voidTHnBase::SetBinEdges(Int_t idim, const Double_t* bins); voidTHnBase::SetBinError(const Int_t* idx, Double_t e); voidTHnBase::SetBinError(Long64_t bin, Double_t e); virtual voidTHn::SetBinError2(Long64_t bin, Double_t e2); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTHnBase::SetEntries(Double_t entries); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTHnBase::SetTitle(const char* title); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTHn::Sumw2(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; THnT<short>(); THnT<short>(const THnT<short>&); THnT<short>(THnT<short>&&); THnT<short>(const char* name, const char* title, Int_t dim, const Int_t* nbins, const Double_t* xmin, const Double_t* xmax); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/THnT_short_.html:8277,Test,TestBit,8277,root/html602/THnT_short_.html,https://root.cern,https://root.cern/root/html602/THnT_short_.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TMVA::LogInterval Class ReferenceTMVA. ; The TMVA::Interval Class. . LogInterval definition, continuous and discrete; LogInterval(min,max) : a continous interval [min,max]; LogInterval(min,max,n): a ""discrete interval"" [min,max], i.e the n numbers:; 1,10,100,1000; 1,2,4,8,16,32,64,128,512,1024; or alike .. Example:; LogInterval(1,10000,5); i=0 --> 1 note: StepSize(ibin=0) = not defined !!; i=1 --> 10 StepSize(ibin=1) = 9; i=2 --> 100 StepSize(ibin=2) = 99; i=3 --> 1000 StepSize(ibin=3) = 999; i=4 --> 10000 StepSize(ibin=4) = 9999; ; LogInterval(1,1000,11); i=0 --> 1; i=1 --> 1.99526; i=2 --> 3.98107; i=3 --> 7.94328; i=4 --> 15.8489; i=5 --> 31.6228; i=6 --> 63.0957; i=7 --> 125.893; i=8 --> 251.189; i=9 --> 501.187; i=10 --> 1000; ; LogInterval(1,1024,11); i=0 --> 1; i=1 --> 2; i=2 --> 4; i=3 --> 8; i=4 --> 16; i=5 --> 32; i=6 --> 64; i=7 --> 128; i=8 --> 256; i=9 --> 512; i=10 --> 1024; TMVA::LogIntervalThe TMVA::Interval Class.Definition LogInterval.h:83. Definition at line 83 of file LogInterval.h. Public Member Functions;  LogInterval (const LogInterval &other);  ;  LogInterval (Double_t min, Double_t max, Int_t nbins=0);  ; virtual ~LogInterval ();  destructor ;  ; virtual Double_t GetElement (Int_t position) const;  calculates the value of the ""number"" bin in a discrete interval. ;  ; virtual Double_t GetMax () const;  ; virtual Double_t GetMean () const;  ; virtual Double_t GetMin () const;  ; virtual Int_t GetNbins () const;  ; virtual Double_t GetRndm (TRandom3 &) const;  get uniformly distributed number within interval ;  ; virtual Double_t GetStepSize (Int_t iBin=0) const;  returns the step size between the numbers of a ""discrete LogInterval"" ;  ; virtual Double_t GetWidth () const;  ; virtual TClass * IsA () const;  ; MsgLogger & Log () const;  ; void SetMax (Double_t m);  ; void SetMin (D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1LogInterval.html:974,Log,LogInterval,974,doc/master/classTMVA_1_1LogInterval.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1LogInterval.html,2,['Log'],"['LogInterval', 'LogIntervalThe']"
Testability,"ReferenceTMVA. ; This class is a trivial PDEFoam kernel estimator. ; The Estimate() function returns the cell value, given an event 'txvec'. ; Definition at line 39 of file PDEFoamKernelTrivial.h. Public Member Functions;  PDEFoamKernelTrivial ();  Default constructor for streamer. ;  ;  PDEFoamKernelTrivial (const PDEFoamKernelTrivial &);  Copy constructor. ;  ; virtual ~PDEFoamKernelTrivial ();  ; virtual Float_t Estimate (PDEFoam *, std::vector< Float_t > &, ECellValue);  Simple kernel estimator. ;  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::PDEFoamKernelBase;  PDEFoamKernelBase ();  message logger ;  ;  PDEFoamKernelBase (const PDEFoamKernelBase &);  Copy constructor. ;  ; virtual ~PDEFoamKernelBase ();  Destructor. ;  ; MsgLogger & Log () const;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PDEFoamKernelTrivial.html:1199,Log,Log,1199,doc/master/classTMVA_1_1PDEFoamKernelTrivial.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PDEFoamKernelTrivial.html,1,['Log'],['Log']
Testability,"Referenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from RooStats::HypoTestResult; std::unique_ptr< const RooArgList > fAllTestStatisticsData;  for the case of multiple test statistics, holds all the results ;  ; std::unique_ptr< RooDataSet > fAltDetailedOutput;  ; std::unique_ptr< SamplingDistribution > fAltDistr;  ; double fAlternatePValue;  p-value for the alternate hypothesis (small number means disfavoured) ;  ; double fAlternatePValueError;  error of p-value for the alternate hypothesis (small number means disfavoured) ;  ; bool fBackgroundIsAlt;  ; std::unique_ptr< RooDataSet > fFitInfo;  ; std::unique_ptr< RooDataSet > fNullDetailedOutput;  ; std::unique_ptr< SamplingDistribution > fNullDistr;  ; double fNullPValue;  p-value for the null hypothesis (small number means disfavoured) ;  ; double fNullPValueError;  error of p-value for the null hypothesis (small number means disfavoured) ;  ; bool fPValueIsRightTail;  ; double fTestStatisticData;  result of the test statistic evaluated on data ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <RooStats/HybridResult.h>. Inheritance diagram for RooStats::HybridResult:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ HybridResult() [1/2]. HybridResult::HybridResult ; (; const char * ; name = nullptr). explicit . Default constructor. ; Constructor. ; Definition at line 52 of file HybridResult.cxx. ◆ HybridResult() [2/2]. HybridResult::H",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HybridResult.html:16749,test,test,16749,doc/master/classRooStats_1_1HybridResult.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HybridResult.html,2,['test'],['test']
Testability,"Referenced; static TProofLog::ERetrieveOptkLeading; static TProofLog::ELogLocationBitkLogToBox; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TProofLog::ERetrieveOptkTrailing; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; TStringTNamed::fNameobject identifier; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; TStringTNamed::fTitleobject title; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. private:. TList*fElemlist of TProofLogElem objects; void*fFILEpointer logging file, if any; TProofMgr*fMgrparent TProofMgr; TDatimefStartTimeTime at which this session started. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofLog(const char* stag, const char* url, TProofMgr* mgr); Constructor. ~TProofLog(); Destructor. TProofLogElem * Add(const char* ord, const char* url); Add new entry to the list of elements. Int_t Retrieve(const char* ord = ""*"", TProofLog::ERetrieveOpt opt = TProofLog::kTrailing, const char* fname = 0, const char* pattern = 0); Retrieve the content of the log file associated with worker 'ord'.; If 'ord' is ""*"" (default), all the workers are retrieved. If 'all'; is true, the whole files are retrieved; else a max of; fgMaxTransferSize (about 1000 lines) per file is read, starting from; the end (i.e. the last ~1000 lines).; The received buffer is added to the file fname, if the latter is defined.; If opt == TProofLog::kGrep only the lines containing 'pattern' are; retrieved (remote grep functionality); to filter ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofLog.html:10406,log,logging,10406,root/html602/TProofLog.html,https://root.cern,https://root.cern/root/html602/TProofLog.html,2,['log'],['logging']
Testability,"ReflectX(Bool_t leftside, Bool_t rotonly = kFALSE); virtual voidReflectY(Bool_t leftside, Bool_t rotonly = kFALSE); virtual voidReflectZ(Bool_t leftside, Bool_t rotonly = kFALSE); virtual voidRegisterYourself(); voidTObject::ResetBit(UInt_t f); virtual voidRotateX(Double_t angle); virtual voidRotateY(Double_t angle); virtual voidRotateZ(Double_t angle); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTGeoMatrix::SetDefaultName(); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetDx(Double_t dx); virtual voidSetDy(Double_t dy); virtual voidSetDz(Double_t dz); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidSetRotation(const TGeoRotation& other); voidSetRotation(const TGeoRotation* rot); voidTGeoMatrix::SetShared(Bool_t flag = kTRUE); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidSetTranslation(const TGeoTranslation& tr); voidSetTranslation(Double_t* vect); voidSetTranslation(Double_t dx, Double_t dy, Double_t dz); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoCombiTrans.html:13885,Test,TestBit,13885,root/html534/TGeoCombiTrans.html,https://root.cern,https://root.cern/root/html534/TGeoCombiTrans.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"Regexp re(""^(root|xroot).*"", ""i"");; 4827 if (re.Match(name)) {; 4828 //; 4829 // Should be a network file ...; 4830 type = kNet;; 4831 // ... but make sure that is not local or that a remote-like connection; 4832 // is forced. Treat it as local if:; 4833 // i) the url points to the localhost, the file will be opened in; 4834 // readonly mode and the current user has read access;; 4835 // ii) the specified user is equal to the current user then open local; 4836 // TFile.; 4837 Bool_t localFile = kFALSE;; 4838 TUrl url(name);; 4839 //; 4840 // Check whether we should try to optimize for local files; 4841 Bool_t forceRemote = gEnv->GetValue(""Path.ForceRemote"", 0);; 4842 forceRemote = (forceRemote) ? kTRUE : gEnv->GetValue(""TFile.ForceRemote"", 0);; 4843 TString opts = url.GetOptions();; 4844 if (opts.Contains(""remote=1"")); 4845 forceRemote = kTRUE;; 4846 else if (opts.Contains(""remote=0"")); 4847 forceRemote = kFALSE;; 4848 if (!forceRemote) {; 4849 // Generic locality test; 4850 localFile = gSystem->IsPathLocal(name);; 4851 if (localFile) {; 4852 // Local path including the prefix; 4853 const char *fname = url.GetFileAndOptions();; 4854 TString lfname;; 4855 if (fname[0] == '/') {; 4856 if (prefix); 4857 lfname.Form(""%s%s"", prefix->Data(), fname);; 4858 else; 4859 lfname = fname;; 4860 } else if (fname[0] == '~' || fname[0] == '$') {; 4861 lfname = fname;; 4862 } else {; 4863 lfname.Form(""%s/%s"", gSystem->HomeDirectory(), fname);; 4864 }; 4865 // If option ""READ"" test existence and access; 4866 TString opt = option;; 4867 Bool_t read = (opt.IsNull() ||; 4868 !opt.CompareTo(""READ"", TString::kIgnoreCase)) ? kTRUE : kFALSE;; 4869 if (read) {; 4870 TString fn = TUrl(lfname).GetFile();; 4871 if (!gSystem->ExpandPathName(fn)) {; 4872 if (gSystem->AccessPathName(fn, kReadPermission)); 4873 localFile = kFALSE;; 4874 }; 4875 }; 4876 // Return full local path if requested (and if the case); 4877 if (localFile && prefix); 4878 *prefix = lfname;; 4879 }; 4880 }; 4881 //; 4882 // Adj",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFile_8cxx_source.html:177800,test,test,177800,doc/master/TFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFile_8cxx_source.html,1,['test'],['test']
Testability,"Regularization) const; 1586 {; 1587 double error (0);; 1588 switch (m_eErrorFunction); 1589 {; 1590 case ModeErrorFunction::SUMOFSQUARES:; 1591 {; 1592 error = sumOfSquares (layerData.valuesBegin (), layerData.valuesEnd (), begin (truth), end (truth),; 1593 layerData.deltasBegin (), layerData.deltasEnd (),; 1594 layerData.inverseActivationFunction (),; 1595 patternWeight);; 1596 break;; 1597 }; 1598 case ModeErrorFunction::CROSSENTROPY:; 1599 {; 1600 assert (!TMVA::DNN::isFlagSet (ModeOutputValues::DIRECT, layerData.outputMode ()));; 1601 std::vector<double> probabilities = layerData.probabilities ();; 1602 error = crossEntropy (begin (probabilities), end (probabilities),; 1603 begin (truth), end (truth),; 1604 layerData.deltasBegin (), layerData.deltasEnd (),; 1605 layerData.inverseActivationFunction (),; 1606 patternWeight);; 1607 break;; 1608 }; 1609 case ModeErrorFunction::CROSSENTROPY_MUTUALEXCLUSIVE:; 1610 {; 1611 std::cout << ""softmax."" << std::endl;; 1612 assert (!TMVA::DNN::isFlagSet (ModeOutputValues::DIRECT, layerData.outputMode ()));; 1613 std::vector<double> probabilities = layerData.probabilities ();; 1614 error = softMaxCrossEntropy (begin (probabilities), end (probabilities),; 1615 begin (truth), end (truth),; 1616 layerData.deltasBegin (), layerData.deltasEnd (),; 1617 layerData.inverseActivationFunction (),; 1618 patternWeight);; 1619 break;; 1620 }; 1621 }; 1622 if (factorWeightDecay != 0 && eRegularization != EnumRegularization::NONE); 1623 {; 1624 error = weightDecay (error, itWeight, itWeightEnd, factorWeightDecay, eRegularization);; 1625 }; 1626 return error;; 1627 }; 1628 ; 1629 ; 1630 ; 1631 ; 1632 ; 1633 ; 1634 ; 1635// /*! \brief pre-training; 1636// *; 1637// * in development; 1638// */; 1639// template <typename Minimizer>; 1640// void Net::preTrain (std::vector<double>& weights,; 1641// std::vector<Pattern>& trainPattern,; 1642// const std::vector<Pattern>& testPattern,; 1643// Minimizer& minimizer, Settings& settings); 1644// {; 1645// ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8icc_source.html:53467,assert,assert,53467,doc/master/NeuralNet_8icc_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8icc_source.html,1,['assert'],['assert']
Testability,"Remove(TObject* obj); virtual voidTDataSet::Remove(TDataSet* set); virtual TDataSet*TDataSet::RemoveAt(Int_t idx); virtual voidTChair::Reset(Int_t c = 0); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTChair::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTChair::Set(Int_t n); virtual voidTChair::Set(Int_t n, Char_t* array); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTDataSet::SetMother(TDataSet* parent = 0); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTChair::SetNRows(Int_t n); virtual voidTDataSet::SetObject(TObject* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTDataSet::SetParent(TDataSet* parent = 0); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTDataSet::SetWrite(); virtual voidShowMembers(TMemberInspector& insp); virtual voidTDataSet::Shunt(TDataSet* newParent = 0); virtual Int_tTNamed::Sizeof() const; virtual voidTDataSet::Sort(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; const TTable*TChair::Table() const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTDataSet::UnMark()MENU ; voidTDataSet::UnMarkAll()MENU ; virtual voidTChair::Update(); virtual voidTChair::Update(TDataSet* set, UInt_t opt = 0); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTDataSet::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTDataSet::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TColumnView.html:8663,Test,TestBit,8663,root/html528/TColumnView.html,https://root.cern,https://root.cern/root/html528/TColumnView.html,6,['Test'],"['TestBit', 'TestBits']"
Testability,"Reset(Option_t* option = """"); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTHnBase::Scale(Double_t c); voidTHn::SetBinContent(const Int_t* idx, Double_t v); virtual voidTHn::SetBinContent(Long64_t bin, Double_t v); voidTHnBase::SetBinEdges(Int_t idim, const Double_t* bins); voidTHnBase::SetBinError(const Int_t* idx, Double_t e); voidTHnBase::SetBinError(Long64_t bin, Double_t e); virtual voidTHn::SetBinError2(Long64_t bin, Double_t e2); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTHnBase::SetEntries(Double_t entries); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTHnBase::SetTitle(const char* title); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTHn::Sumw2(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; THnT<unsigned long>(); THnT<unsigned long>(const THnT<unsigned long>&); THnT<unsigned long>(THnT<unsigned long>&&); THnT<unsigned long>(const char* name, const char* title, Int_t dim, const Int_t* nbins, const Double_t* xmin, const Double_t* xmax); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/THnT_unsigned_long_.html:8341,Test,TestBit,8341,root/html602/THnT_unsigned_long_.html,https://root.cern,https://root.cern/root/html602/THnT_unsigned_long_.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTAttLine::SaveLineAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1, Int_t widdef = 1); virtual voidSavePrimitive(ostream& out, Option_t* option = """"); virtual voidSetBBoxCenter(const TPoint& p); virtual voidSetBBoxCenterX(const Int_t x); virtual voidSetBBoxCenterY(const Int_t y); virtual voidSetBBoxX1(const Int_t x); virtual voidSetBBoxX2(const Int_t x); virtual voidSetBBoxY1(const Int_t y); virtual voidSetBBoxY2(const Int_t y); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetHorizontal(Bool_t set = kTRUE)TOGGLE GETTER ; virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidSetNDC(Bool_t isNDC = kTRUE); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetVertical(Bool_t set = kTRUE)TOGGLE GETTER ; virtual voidSetX1(Double_t x1); virtual voidSetX2(Double_t x2); virtual voidSetY1(Double_t y1); virtual voidSetY2(Double_t y2); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TLine.html:6109,Test,TestBit,6109,root/html534/TLine.html,https://root.cern,https://root.cern/root/html534/TLine.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"ResizePad();; 966 pad->Modified();; 967 pad->Update();; 968 if (padsav) padsav->cd();; 969 return nullptr;; 970}; 971 ; 972////////////////////////////////////////////////////////////////////////////////; 973/// Report name and title of primitive below the cursor.; 974///; 975/// This function is called when the option ""Event Status""; 976/// in the canvas menu ""Options"" is selected.; 977 ; 978void TCanvas::DrawEventStatus(Int_t event, Int_t px, Int_t py, TObject *selected); 979{; 980 const Int_t kTMAX=256;; 981 static char atext[kTMAX];; 982 ; 983 if (!TestBit(kShowEventStatus) || !selected) return;; 984 ; 985 if (!fCanvasImp) return; //this may happen when closing a TAttCanvas; 986 ; 987 TContext ctxt(GetSelectedPad(), kFALSE);; 988 ; 989 fCanvasImp->SetStatusText(selected->GetTitle(),0);; 990 fCanvasImp->SetStatusText(selected->GetName(),1);; 991 if (event == kKeyPress); 992 snprintf(atext, kTMAX, ""%c"", (char) px);; 993 else; 994 snprintf(atext, kTMAX, ""%d,%d"", px, py);; 995 fCanvasImp->SetStatusText(atext,2);; 996 ; 997 // Show date/time if TimeDisplay is selected; 998 TAxis *xaxis = nullptr;; 999 if ( selected->InheritsFrom(""TH1"") ); 1000 xaxis = ((TH1*)selected)->GetXaxis();; 1001 else if ( selected->InheritsFrom(""TGraph"") ); 1002 xaxis = ((TGraph*)selected)->GetXaxis();; 1003 else if ( selected->InheritsFrom(""TAxis"") ); 1004 xaxis = (TAxis*)selected;; 1005 if ( xaxis != nullptr && xaxis->GetTimeDisplay()) {; 1006 TString objinfo = selected->GetObjectInfo(px,py);; 1007 // check if user has overwritten GetObjectInfo and altered; 1008 // the default text from TObject::GetObjectInfo ""x=.. y=..""; 1009 if (objinfo.Contains(""x="") && objinfo.Contains(""y="") ) {; 1010 UInt_t toff = 0;; 1011 TString time_format(xaxis->GetTimeFormat());; 1012 // TimeFormat may contain offset: %F2000-01-01 00:00:00; 1013 Int_t idF = time_format.Index(""%F"");; 1014 if (idF>=0) {; 1015 Int_t lnF = time_format.Length();; 1016 // minimal check for correct format; 1017 if (lnF - idF == 21) {; 101",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCanvas_8cxx_source.html:31493,Test,TestBit,31493,doc/master/TCanvas_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCanvas_8cxx_source.html,1,['Test'],['TestBit']
Testability,"Result(const char* ref); voidTObject::ResetBit(UInt_t f); virtual voidRestorePreviousQuery(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual Int_tSavePartialResults(Bool_t queryend = kFALSE, Bool_t force = kFALSE); virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidSetCurrentQuery(TQueryResult* q); virtual voidSetDispatchTimer(Bool_t on = kTRUE); virtual voidSetDrawFeedbackOption(TDrawFeedback* f, Option_t* opt); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetExitStatus(TVirtualProofPlayer::EExitStatus); virtual voidSetInitTime(); virtual voidSetMaxDrawQueries(Int_t max); virtual voidSetMerging(Bool_t on = kTRUE); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetOutputFilePath(const char* fp); virtual voidSetStopTimer(Bool_t on = kTRUE, Bool_t abort = kFALSE, Int_t timeout = 0); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStopProcess(Bool_t abort, Int_t timeout = -1); virtual voidStoreFeedback(TObject* slave, TList* out); virtual voidStoreOutput(TList* out); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidUpdateAutoBin(const char* name, Double_t& xmin, Double_t& xmax, Double_t& ymin, Double_t& ymax, Double_t& zmin, Double_t& zmax); virtual voidUpdateProgressInfo(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TVirtualProofPlayer.html:10576,Test,TestBit,10576,root/html534/TVirtualProofPlayer.html,https://root.cern,https://root.cern/root/html534/TVirtualProofPlayer.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"Result, . std::vector< Pattern > * ; _resultPatternContainer . ). preparation for monitoring output ; Definition at line 520 of file NeuralNet.cxx. ◆ setWeightSums(). void TMVA::DNN::ClassificationSettings::setWeightSums ; (; double ; sumOfSigWeights, . double ; sumOfBkgWeights . ). set the weight sums to be scaled to (preparations for monitoring output) ; Definition at line 512 of file NeuralNet.cxx. ◆ startTestCycle(). void TMVA::DNN::ClassificationSettings::startTestCycle ; (; ). virtual . action to be done when the test cycle is started (e.g. ; update some monitoring output) ; Reimplemented from TMVA::DNN::Settings.; Definition at line 316 of file NeuralNet.cxx. ◆ startTrainCycle(). void TMVA::DNN::ClassificationSettings::startTrainCycle ; (; ). virtual . action to be done when the training cycle is started (e.g. ; update some monitoring output) ; Reimplemented from TMVA::DNN::Settings.; Definition at line 281 of file NeuralNet.cxx. ◆ testIteration(). void TMVA::DNN::ClassificationSettings::testIteration ; (; ). inlinevirtual . callback for monitoring and loggging ; Reimplemented from TMVA::DNN::Settings.; Definition at line 930 of file NeuralNet.h. ◆ testSample(). void TMVA::DNN::ClassificationSettings::testSample ; (; double ; error, . double ; output, . double ; target, . double ; weight . ). virtual . action to be done after the computation of a test sample (e.g. ; update some monitoring output) ; Reimplemented from TMVA::DNN::Settings.; Definition at line 304 of file NeuralNet.cxx. Member Data Documentation. ◆ m_ams. std::vector<double> TMVA::DNN::ClassificationSettings::m_ams. Definition at line 1000 of file NeuralNet.h. ◆ m_cutValue. double TMVA::DNN::ClassificationSettings::m_cutValue. Definition at line 1008 of file NeuralNet.h. ◆ m_fileNameNetConfig. std::string TMVA::DNN::ClassificationSettings::m_fileNameNetConfig. Definition at line 1011 of file NeuralNet.h. ◆ m_fileNameResult. std::string TMVA::DNN::ClassificationSettings::m_fileNameResult. Definit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1ClassificationSettings.html:9018,test,testIteration,9018,doc/master/classTMVA_1_1DNN_1_1ClassificationSettings.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1ClassificationSettings.html,1,['test'],['testIteration']
Testability,Result.cxx;  Fitter.cxx;  FitUtil.cxx;  FitUtilParallel.cxx;  GaussIntegrator.cxx;  GaussLegendreIntegrator.cxx;  GenAlgoOptions.cxx;  GoFTest.cxx;  Integrator.cxx;  IntegratorOptions.cxx;  MersenneTwisterEngine.cxx;  MinimizerOptions.cxx;  MinimizerVariableTransformation.cxx;  MinimTransformFunction.cxx;  mixmax.cxx;  mixmax.h;  mixmax_skip_N256.icc;  MixMaxEngine.cxx;  ParameterSettings.cxx;  PdfFuncMathCore.cxx;  ProbFuncMathCore.cxx;  QuantFuncMathCore.cxx;  RandomFunctions.cxx;  RichardsonDerivator.cxx;  RootFinder.cxx;  SparseData.cxx;  SpecFuncCephes.cxx;  SpecFuncCephes.h;  SpecFuncCephesInv.cxx;  SpecFuncMathCore.cxx;  TComplex.cxx;  TDataPointN.cxx;  TKDTree.cxx;  TKDTreeBinning.cxx;  TMath.cxx;  TRandom.cxx;  TRandom1.cxx;  TRandom2.cxx;  TRandom3.cxx;  triangle.c;  triangle.h;  TStatistic.cxx;  UnBinData.cxx;  ► test;  ► fit;  GaussFunction.h;  MinimizerTypes.h;  SparseDataComparer.cxx;  SparseFit3.cxx;  SparseFit4.cxx;  testFit.cxx;  testFitPerf.cxx;  testGraphFit.cxx;  testMinim.cxx;  testRooFit.cxx;  WrapperRooPdf.h;  binarySearchTime.cxx;  kDTreeTest.cxx;  newKDTreeTest.cxx;  stdsort.cxx;  stressGoFTest.cxx;  stressTF1.cxx;  stressTMath.cxx;  testAnalyticalIntegrals.cxx;  testBinarySearch.cxx;  testDistSampler.cxx;  testIntegration.cxx;  testIntegrationMultiDim.cxx;  testkdTreeBinning.cxx;  testMathRandom.cxx;  testRootFinder.cxx;  testSampleQuantiles.cxx;  testSortOrder.cxx;  testSpecFuncBeta.cxx;  testSpecFuncBetaI.cxx;  testSpecFuncErf.cxx;  testSpecFuncGamma.cxx;  testSpecFuncSiCi.cxx;  testTMath.cxx;  testTStatistic.cxx;  ► v7;  ► inc;  ► ROOT;  TFit.h;  ► mathmore;  ► inc;  ► Math;  ChebyshevApprox.h;  Derivator.h;  DistFuncMathMore.h;  GSLFunctionAdapter.h;  GSLIntegrator.h;  GSLMCIntegrator.h;  GSLMinimizer.h;  GSLMinimizer1D.h;  GSLMultiRootFinder.h;  GSLNLSMinimizer.h;  GSLQuasiRandom.h;  GSLRandom.h;  GSLRandomFunctions.h;  GSLRndmEngines.h;  GSLRootFinder.h;  GSLRootFinderDeriv.h;  GSLRootHelper.h;  GSLSimAnMinimizer.h;  GSLSimAnnealing.h,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html606/files.html:45938,test,testMinim,45938,root/html606/files.html,https://root.cern,https://root.cern/root/html606/files.html,1,['test'],['testMinim']
Testability,Return true when index out of bounds and print error. ; Definition at line 242 of file TOrdCollection.cxx. ◆ IndexOf(). Int_t TOrdCollection::IndexOf ; (; const TObject * ; obj); const. overridevirtual . Return index of object in collection. ; Returns -1 when object not found. Uses member IsEqual() to find object. ; Reimplemented from TSeqCollection.; Definition at line 255 of file TOrdCollection.cxx. ◆ Init(). void TOrdCollection::Init ; (; Int_t ; capacity). private . Initialize ordered collection. ; Definition at line 267 of file TOrdCollection.cxx. ◆ IsA(). TClass * TOrdCollection::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TCollection.; Definition at line 84 of file TOrdCollection.h. ◆ Last(). TObject * TOrdCollection::Last ; (; ); const. overridevirtual . Return the last object in the collection. ; Returns 0 when collection is empty. ; Implements TSeqCollection.; Definition at line 234 of file TOrdCollection.cxx. ◆ LogIndex(). Int_t TOrdCollection::LogIndex ; (; Int_t ; idx); const. inlineprivate . Definition at line 140 of file TOrdCollection.h. ◆ LowWaterMark(). Bool_t TOrdCollection::LowWaterMark ; (; ); const. inlineprivate . Definition at line 132 of file TOrdCollection.h. ◆ MakeIterator(). TIterator * TOrdCollection::MakeIterator ; (; Bool_t ; dir = kIterForward); const. overridevirtual . Return an ordered collection iterator. ; Implements TCollection.; Definition at line 280 of file TOrdCollection.cxx. ◆ MoveGapTo(). void TOrdCollection::MoveGapTo ; (; Int_t ; start). private . Move gap to new position. ; Gap needs to be moved when objects are inserted not at the end. ; Definition at line 289 of file TOrdCollection.cxx. ◆ operator=(). TOrdCollection & TOrdCollection::operator= ; (; const TOrdCollection & ; ). privatedelete . ◆ PhysIndex(). Int_t TOrdCollection::PhysIndex ; (; Int_t ; idx); const. inlineprivate . Definition at line 137 of file TOrdCollection.h. ◆ PutAt(). void TOrdCollection::P,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTOrdCollection.html:24184,Log,LogIndex,24184,doc/master/classTOrdCollection.html,https://root.cern,https://root.cern/doc/master/classTOrdCollection.html,1,['Log'],['LogIndex']
Testability,ReturnsName of the file containing the class declaration ; Definition at line 60 of file TFitResultPtr.h. ◆ Get(). TFitResult * TFitResultPtr::Get ; (; ); const. Return contained pointer. ; Definition at line 86 of file TFitResultPtr.cxx. ◆ IsA(). virtual TClass * TFitResultPtr::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Definition at line 60 of file TFitResultPtr.h. ◆ operator int(). TFitResultPtr::operator int ; (; ); const. inline . Definition at line 43 of file TFitResultPtr.h. ◆ operator*(). TFitResult & TFitResultPtr::operator* ; (; ); const. Implement the de-reference operator to make the class acts as a pointer to a TFitResult assert in case the class does not contain a pointer to TFitResult. ; Definition at line 63 of file TFitResultPtr.cxx. ◆ operator->(). TFitResult * TFitResultPtr::operator-> ; (; ); const. Implement the -> operator to make the class acts as a pointer to a TFitResult. ; assert in case the class does not contain a pointer to TFitResult ; Definition at line 75 of file TFitResultPtr.cxx. ◆ operator=(). TFitResultPtr & TFitResultPtr::operator= ; (; const TFitResultPtr & ; rhs). Assignment operator. ; if needed copy the TFitResult object and delete previous one if existing ; Definition at line 94 of file TFitResultPtr.cxx. ◆ Streamer(). virtual void TFitResultPtr::Streamer ; (; TBuffer & ; ). virtual . ◆ StreamerNVirtual(). void TFitResultPtr::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 60 of file TFitResultPtr.h. Member Data Documentation. ◆ fPointer. std::shared_ptr<TFitResult> TFitResultPtr::fPointer. private . ! Smart Pointer to TFitResult class ; Definition at line 58 of file TFitResultPtr.h. ◆ fStatus. int TFitResultPtr::fStatus. private . fit status code ; Definition at line 57 of file TFitResultPtr.h. Libraries for TFitResultPtr:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TFitResultPtr.h; hist/hist/s,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFitResultPtr.html:4309,assert,assert,4309,doc/master/classTFitResultPtr.html,https://root.cern,https://root.cern/doc/master/classTFitResultPtr.html,1,['assert'],['assert']
Testability,"Rightarrow y = \frac{yrange(py-pylow)}{pyrange}+ ymin = fPixeltoYk + fPixeltoY \times py; \]. \[; \Rightarrow fPixeltoYk = ymin - pylow \times\frac{yrange}{pyrange}; \]. \[; fPixeltoY = \frac{yrange}{pyrange}; \]. Computation of the coefficients in case of LOG scales; Conversion from pixel coordinates to world coordinates. \[; u = \frac{Log(x) - Log(xmin)}{Log(xmax) - Log(xmin)} = \frac{Log(x/xmin)}{Log(xmax/xmin)} = \frac{px - pxlow}{pxrange}; \]. \[ \Rightarrow Log(\frac{x}{xmin}) = u \times Log(\frac{xmax}{xmin}) \]. \[ x = xmin \times e^{(u \times Log(\frac{xmax}{xmin})} \]. Let: ; \[ alfa = \frac{Log(\frac{xmax}{xmin})}{fAbsWNDC} \]. \[ x = xmin \times e^{(-alfa \times pxlow)} + e^{(alfa \times px)} \]. \[ x = fPixeltoXk \times e^{(fPixeltoX \times px)} \]. \[ ==> fPixeltoXk = xmin \times e^{(-alfa*pxlow)} \]. \[ fPixeltoX = alfa \]. \[; v = \frac{Log(y) - Log(ymin)}{Log(ymax) - Log(ymin)} = \frac{Log(y/ymin)}{Log(ymax/ymin)} = \frac{py - pylow}{pyrange}; \]. Let: ; \[ beta = Log(\frac{ymax}{ymin}) \]. \[ Log(\frac{y}{ymin}) = beta \times pylow - beta \times py \]. \[ \frac{y}{ymin} = e^{(beta \times pylow - beta \times py)} \]. \[ y = ymin \times e^{(beta \times pylow)} \times e^{(-beta \times py)}\]. \[ \Rightarrow y = fPixeltoYk \times e^{(fPixeltoY \times py)} \]. \[ fPixeltoYk = ymin \times e^{(beta \times pylow)} \]. \[ fPixeltoY = -beta \]. Conversion from World coordinates to pixel coordinates. \[ px = pxlow + u*pxrange \]. \[ = pxlow + Log(x/xmin)/alfa \]. \[ = pxlow -Log(xmin)/alfa + Log(x)/alfa \]. \[ = fXtoPixelk + fXtoPixel*Log(x) \]. \[ \Rightarrow fXtoPixelk = pxlow -Log(xmin)/alfa \]. \[ \Rightarrow fXtoPixel = 1/alfa \]. \[ py = pylow - Log(y/ymin)/beta \]. \[ = fYtoPixelk + fYtoPixel*Log(y) \]. \[ \Rightarrow fYtoPixelk = pylow - Log(ymin)/beta \]. \[ fYtoPixel = 1/beta \]. Implements TVirtualPad.; Definition at line 5624 of file TPad.cxx. ◆ SaveAs(). void TPad::SaveAs ; (; const char * ; filename = """", . Option_t * ; option = """" . ); const. o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPad.html:112774,Log,Log,112774,doc/master/classTPad.html,https://root.cern,https://root.cern/doc/master/classTPad.html,1,['Log'],['Log']
Testability,"Rint(); Destructor. void ExecLogon(); Execute logon macro's. There are three levels of logon macros that; will be executed: the system logon etc/system.rootlogon.C, the global; user logon ~/.rootlogon.C and the local ./.rootlogon.C. For backward; compatibility also the logon macro as specified by the Rint.Logon; environment setting, by default ./rootlogon.C, will be executed.; No logon macros will be executed when the system is started with; the -n option. void Run(Bool_t retrn = kFALSE); Main application eventloop. First process files given on the command; line and then go into the main application event loop, unless the -q; command line option was specfied in which case the program terminates.; When retrun is true this method returns even when -q was specified. When QuitOpt is true and retrn is false, terminate the application with; an error code equal to either the ProcessLine error (if any) or the; return value of the command casted to a long. void PrintLogo(Bool_t lite = kFALSE); Print the ROOT logo on standard output. char * GetPrompt(); Get prompt from interpreter. Either ""root [n]"" or ""end with '}'"". const char * SetPrompt(const char* newPrompt); Set a new default prompt. It returns the previous prompt.; The prompt may contain a %d which will be replaced by the commend; number. The default prompt is ""root [%d] "". The maximum length of; the prompt is 55 characters. To set the prompt in an interactive; session do:; root [0] ((TRint*)gROOT->GetApplication())->SetPrompt(""aap> ""); aap>. Bool_t HandleTermInput(); Handle input coming from terminal. void HandleException(Int_t sig); Handle exceptions (kSigBus, kSigSegmentationViolation,; kSigIllegalInstruction and kSigFloatingException) trapped in TSystem.; Specific TApplication implementations may want something different here. void Terminate(int status); Terminate the application. Reset the terminal to sane mode and call; the logoff macro defined via Rint.Logoff environment variable. void SetEchoMode(Bool_t mode); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRint.html:13742,log,logo,13742,root/html528/TRint.html,https://root.cern,https://root.cern/root/html528/TRint.html,6,['log'],['logo']
Testability,"RnrSelfChildren(Bool_t rnr_self, Bool_t rnr_children); virtual Bool_tTEveElement::SetRnrState(Bool_t rnr); voidTEveElement::SetSourceObject(TObject* o); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTEveElement::SetTransMatrix(Double_t* carr); virtual voidTEveElement::SetTransMatrix(const TGeoMatrix& mat); virtual voidTObject::SetUniqueID(UInt_t uid); voidTEveElement::SetUserData(void* ud); voidTEveElement::SetVizModel(TEveElement* model); voidTEveElement::SetVizTag(const TString& tag); virtual voidShowMembers(TMemberInspector& insp); virtual Bool_tTEveElement::SingleRnrState() const; virtual Int_tTNamed::Sizeof() const; voidTEveElement::SpawnEditor()MENU ; voidTEveElement::StampColorSelection(); voidTEveElement::StampObjProps(); voidTEveElement::StampTransBBox(); voidTEveElement::StampVisibility(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual Int_tSubImportChildren(TEveElement* el, TEveElement* proj_parent); virtual TEveElement*SubImportElements(TEveElement* el, TEveElement* proj_parent); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTEveElement::TestCSCBits(UChar_t f) const; virtual voidTEveElement::UnHighlighted(); virtual voidTEveElement::UnSelected(); virtual voidUpdateName(); virtual voidTObject::UseCurrentStyle(); voidTEveElement::VizDB_Apply(const char* tag)MENU ; voidTEveElement::VizDB_Insert(const char* tag, Bool_t replace = kTRUE, Bool_t update = kTRUE)MENU ; voidTEveElement::VizDB_Reapply()MENU ; voidTEveElement::VizDB_UpdateModel(Bool_t update = kTRUE)MENU ; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTEveElement::WriteVizParams(ostream& out, const TString& var).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveProjectionManager.html:16187,Test,TestBit,16187,root/html528/TEveProjectionManager.html,https://root.cern,https://root.cern/root/html528/TEveProjectionManager.html,9,['Test'],"['TestBit', 'TestBits', 'TestCSCBits']"
Testability,Roo2DKeysPdf Two-dimensional kernel estimation p.d.f.; RooAICRegistry Registry for analytical integration codes; RooAbsAnaConvPdf Abstract Composite Convoluted PDF; RooAbsArg Abstract variable; RooAbsBinning Abstract base class for binning specification; RooAbsCache Base class for cache managers ; RooAbsCacheElement Base class for cache elements; RooAbsCachedPdf Abstract base class for cached p.d.f.s; RooAbsCachedReal Abstract base class for cached p.d.f.s; RooAbsCategory Abstract discrete variable; RooAbsCategoryLValue Abstract modifiable index variable ; RooAbsCollection Collection of RooAbsArg objects; RooAbsData Abstract data collection; RooAbsDataStore Abstract Data Storage class; RooAbsFunc Abstract real-valued function interface; RooAbsGenContext Abstract context for generating a dataset from a PDF; RooAbsHiddenReal Abstract hidden real-valued variable; RooAbsIntegrator Abstract interface for real-valued function integrators; RooAbsLValue Abstract variable; RooAbsMCStudyModule Monte Carlo study manager add-on module; RooAbsNumGenerator Abstract base class for numeric event generator algorithms; RooAbsOptTestStatistic Abstract base class for optimized test statistics; RooAbsPdf Abstract PDF with normalization support; RooAbsPdf::GenSpec ; RooAbsProxy Abstract proxy interface; RooAbsReal Abstract real-valued variable; RooAbsRealLValue Abstract modifiable real-valued object; RooAbsRootFinder Abstract interface for 1-dim real-valued function root finders; RooAbsSelfCachedPdf Abstract base class for self-caching p.d.f.s; RooAbsSelfCachedReal Abstract base class for self-caching functions; RooAbsString Abstract string-valued variable; RooAbsStudy Abstract base class for RooStudyManager modules; RooAbsTestStatistic Abstract base class for real-valued test statistics; RooAcceptReject Context for generating a dataset from a PDF; RooAdaptiveGaussKronrodIntegrator1D 1-dimensional adaptive Gauss-Kronrod numerical integration engine; RooAdaptiveIntegratorND N-dimensional a,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ClassIndex.html:24349,test,test,24349,root/html526/ClassIndex.html,https://root.cern,https://root.cern/root/html526/ClassIndex.html,2,['test'],['test']
Testability,RooAICRegistry Registry for analytical integration codes; RooAbsAnaConvPdf Abstract Composite Convoluted PDF; RooAbsArg Abstract variable; RooAbsBinning Abstract base class for binning specification; RooAbsCache Base class for cache managers ; RooAbsCacheElement Base class for cache elements; RooAbsCachedPdf Abstract base class for cached p.d.f.s; RooAbsCachedReal Abstract base class for cached p.d.f.s; RooAbsCategory Abstract discrete variable; RooAbsCategoryLValue Abstract modifiable index variable ; RooAbsCollection Collection of RooAbsArg objects; RooAbsData Abstract data collection; RooAbsDataStore Abstract Data Storage class; RooAbsFunc Abstract real-valued function interface; RooAbsGenContext Abstract context for generating a dataset from a PDF; RooAbsHiddenReal Abstract hidden real-valued variable; RooAbsIntegrator Abstract interface for real-valued function integrators; RooAbsLValue Abstract variable; RooAbsMCStudyModule Monte Carlo study manager add-on module; RooAbsMoment Abstract representation of moment in a RooAbsReal in a given RooRealVar; RooAbsNumGenerator Abstract base class for numeric event generator algorithms; RooAbsOptTestStatistic Abstract base class for optimized test statistics; RooAbsPdf Abstract PDF with normalization support; RooAbsPdf::GenSpec Generation specification; RooAbsProxy Abstract proxy interface; RooAbsReal Abstract real-valued variable; RooAbsRealLValue Abstract modifiable real-valued object; RooAbsRootFinder Abstract interface for 1-dim real-valued function root finders; RooAbsSelfCachedPdf Abstract base class for self-caching p.d.f.s; RooAbsSelfCachedReal Abstract base class for self-caching functions; RooAbsString Abstract string-valued variable; RooAbsStudy Abstract base class for RooStudyManager modules; RooAbsTestStatistic Abstract base class for real-valued test statistics; RooAcceptReject Context for generating a dataset from a PDF; RooAdaptiveGaussKronrodIntegrator1D 1-dimensional adaptive Gauss-Kronrod numerical inte,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ClassIndex.html:26186,test,test,26186,root/html534/ClassIndex.html,https://root.cern,https://root.cern/root/html534/ClassIndex.html,1,['test'],['test']
Testability,"RooAbsArg.; Definition at line 949 of file RooAddPdf.cxx. ◆ redirectServersHook(). bool RooAddPdf::redirectServersHook ; (; const RooAbsCollection & ; newServerList, . bool ; mustReplaceAll, . bool ; nameChange, . bool ; isRecursiveStep . ). overrideprotectedvirtual . The cache manager. ; Hook function intercepting redirectServer calls.; Discard current normalization object if any server is redirected ; Reimplemented from RooAbsPdf.; Definition at line 955 of file RooAddPdf.cxx. ◆ resetErrorCounters(). void RooAddPdf::resetErrorCounters ; (; Int_t ; resetValue = 10). overridevirtual . Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ; Reimplemented from RooAbsPdf.; Definition at line 602 of file RooAddPdf.cxx. ◆ selectNormalization(). void RooAddPdf::selectNormalization ; (; const RooArgSet * ; depSet = nullptr, . bool ; force = false . ). overrideprotectedvirtual . Interface function used by test statistics to freeze choice of observables for interpretation of fraction coefficients. ; Reimplemented from RooAbsReal.; Definition at line 863 of file RooAddPdf.cxx. ◆ selectNormalizationRange(). void RooAddPdf::selectNormalizationRange ; (; const char * ; rangeName = nullptr, . bool ; force = false . ). overrideprotectedvirtual . Interface function used by test statistics to freeze choice of range for interpretation of fraction coefficients. ; Reimplemented from RooAbsReal.; Definition at line 886 of file RooAddPdf.cxx. ◆ selfNormalized(). bool RooAddPdf::selfNormalized ; (; ); const. inlineoverridevirtual . Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term. ; Always returns false, unless a PDF overrides this function. ; Reimplemented from RooAbsPdf.; Definition at line 55 of file RooAddPdf.h. ◆ setAllExtendable(). void RooAddPdf::setAllExtendable ; (; bool ; allExtendable). inlineprivate . Definition at line 151 of file RooAddPdf.h. ◆ setCacheAndTrackHints(). ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAddPdf.html:91649,test,test,91649,doc/master/classRooAddPdf.html,https://root.cern,https://root.cern/doc/master/classRooAddPdf.html,2,['test'],['test']
Testability,"RooAbsArg.h. ◆ dependsOnValue() [2/2]. bool RooAbsArg::dependsOnValue ; (; const RooAbsCollection & ; serverList, . const RooAbsArg * ; ignoreArg = nullptr . ); const. inline . Check whether this object depends on values from an element in the serverList. ; Parameters. serverListTest if one of the elements in this list serves values to this. ; ignoreArgIgnore values served by this object. . ReturnsTrue if values are served. ; Definition at line 108 of file RooAbsArg.h. ◆ expensiveObjectCache(). RooExpensiveObjectCache & RooAbsArg::expensiveObjectCache ; (; ); const. Definition at line 2324 of file RooAbsArg.cxx. ◆ fillTreeBranch(). virtual void RooAbsArg::fillTreeBranch ; (; TTree & ; t). protectedpure virtual . Implemented in RooAbsCategory, RooAbsReal, RooRealVar, and RooStringVar. ◆ findConstantNodes() [1/2]. bool RooAbsArg::findConstantNodes ; (; const RooArgSet & ; observables, . RooArgSet & ; cacheList . ). Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ; Definition at line 1859 of file RooAbsArg.cxx. ◆ findConstantNodes() [2/2]. bool RooAbsArg::findConstantNodes ; (; const RooArgSet & ; observables, . RooArgSet & ; cacheList, . RooLinkedList & ; processedNodes . ). Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ; Definition at line 1877 of file RooAbsArg.cxx. ◆ findNewServer(). RooAbsArg * RooAbsArg::findNewServer ; (; const RooAbsCollection & ; newSet, . bool ; nameChange . ); const. Find the new server in the specified set that matches the old server. ; Parameters. [in]newSetSearch this set by name for a new server. ; [in]nameChangeIf true, search for an item with the bool attribute ""ORIGNAME:<oldName>"" set. Use <object>.setAttribute(""ORIGNAME:<oldName>"") to set this attribute. . ReturnsPointer to the new server or nullptr if there's no unique match. ; Defin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsArg.html:59624,test,test,59624,doc/master/classRooAbsArg.html,https://root.cern,https://root.cern/doc/master/classRooAbsArg.html,1,['test'],['test']
Testability,"RooAbsArg::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidRooAbsArg::setOperMode(RooAbsArg::OperMode mode, Bool_t recurseADirty = kTRUE); voidRooAbsArg::setProhibitServerRedirect(Bool_t flag); voidRooAbsArg::setShapeDirty() const; voidRooAbsArg::setStringAttribute(const Text_t* key, const Text_t* value); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidRooAbsArg::setTransientAttribute(const Text_t* name, Bool_t value = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); voidRooAbsArg::setValueDirty() const; TIterator*RooAbsArg::shapeClientIterator() const; RooFIterRooAbsArg::shapeClientMIterator() const; virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); const map<string,string>&RooAbsArg::stringAttributes() const; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; const set<string>&RooAbsArg::transientAttributes() const; voidRooAbsArg::treeNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t doBranch = kTRUE, Bool_t doLeaf = kTRUE, Bool_t valueOnly = kFALSE, Bool_t recurseNonDerived = kFALSE) const; TIterator*RooAbsCategory::typeIterator() const; voidRooAbsArg::unRegisterCache(RooAbsCache& cache); virtual voidTObject::UseCurrentStyle(); TIterator*RooAbsArg::valueClientIterator() const; RooFIterRooAbsArg::valueClientMIterator() const; static voidRooAbsArg::verboseDirty(Bool_t flag); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; voidRooAbsArg::wireAllCaches(); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidRooAbsCategory::writeToStream(ostream& os, Bool_t compact) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooBinningCategory.html:16079,Test,TestBit,16079,root/html602/RooBinningCategory.html,https://root.cern,https://root.cern/root/html602/RooBinningCategory.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"RooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; Bool_tRooAbsArg::localNoDirtyInhibit() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); Bool_toperator==(const char*) const; virtual Bool_toperator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::own",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsString.html:9682,test,testArg,9682,root/html534/RooAbsString.html,https://root.cern,https://root.cern/root/html534/RooAbsString.html,1,['test'],['testArg']
Testability,"RooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; Bool_tRooAbsArg::localNoDirtyInhibit() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual TStringoperator TString(); virtual RooAbsArg&operator=(const char* newValue); Bool_tRooAbsString::operator==(const char*) const; virtual Bool_tRooAbsString::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& test",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStringVar.html:9579,test,testArg,9579,root/html534/RooStringVar.html,https://root.cern,https://root.cern/root/html534/RooStringVar.html,1,['test'],['testArg']
Testability,"RooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; Bool_tRooAbsArg::localNoDirtyInhibit() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooAbsString&operator=(const RooAbsString&); Bool_toperator==(const char*) const; virtual Bool_toperator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsString.html:9677,test,testArg,9677,root/html602/RooAbsString.html,https://root.cern,https://root.cern/root/html602/RooAbsString.html,2,['test'],['testArg']
Testability,"RooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; Bool_tRooAbsArg::localNoDirtyInhibit() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual TStringoperator TString(); virtual RooAbsArg&operator=(const char* newValue); RooStringVar&operator=(const RooStringVar&); Bool_tRooAbsString::operator==(const char*) const; virtual Bool_tRooAbsString::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStringVar.html:9406,test,testArg,9406,root/html602/RooStringVar.html,https://root.cern,https://root.cern/root/html602/RooStringVar.html,2,['test'],['testArg']
Testability,"RooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Int_tRooAbsMoment::order() const; Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, RooLinkedList& cmdList) const; virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, const RooCmdArg& arg1 = RooCmdArg(), const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg(), const RooCmdArg& arg9 = RooCmdArg(), const RooCmdArg& arg10 = RooCmdArg()) const; virtual list<Double_t>*RooAbsReal::plotSamplingHint(RooAbsRealLValue&, Double_t, Double_t) const; virtual RooPlot*RooAbsReal::plotSliceOn(RooPlot* frame, const RooArgSet& sliceSet, Option_t* drawOptions = ""L"", Double_t scaleFactor = 1.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooFirstMoment.html:19878,test,testArg,19878,root/html534/RooFirstMoment.html,https://root.cern,https://root.cern/root/html534/RooFirstMoment.html,3,['test'],['testArg']
Testability,"RooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooCFunction3Binding<double,double,int,int>&operator=(const RooCFunction3Binding<double,double,int,int>&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, RooLinkedList& cmdList) const; virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, const RooCmdArg& arg1 = RooCmdArg(), const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg(), const RooCmdArg& arg9 = RooCmdArg(), const RooCmdArg& arg10 = RooCmdArg()) const; virtual list<Double_t>*RooAbsReal::plotSamplingHint(RooAbsRealLValue&, Double_t, Double_t) const; virtual RooPlot*RooAbsReal::plotSliceOn(RooPlot* frame, const RooArgSet& sliceSet, Option_t* drawOptions = ""L"", Double_t scaleFactor = 1.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCFunction3Binding_double_double_int_int_.html:20030,test,testArg,20030,root/html602/RooCFunction3Binding_double_double_int_int_.html,https://root.cern,https://root.cern/root/html602/RooCFunction3Binding_double_double_int_int_.html,2,['test'],['testArg']
Testability,"RooAbsArg::setShapeDirty() const; voidRooAbsArg::setStringAttribute(const Text_t* key, const Text_t* value); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidRooAbsArg::setTransientAttribute(const Text_t* name, Bool_t value = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); voidRooAbsReal::setUnit(const char* unit); voidRooAbsArg::setValueDirty() const; TIterator*RooAbsArg::shapeClientIterator() const; RooFIterRooAbsArg::shapeClientMIterator() const; virtual voidShowMembers(TMemberInspector&); RooAbsMoment*RooAbsReal::sigma(RooRealVar& obs); RooAbsMoment*RooAbsReal::sigma(RooRealVar& obs, const RooArgSet& nset); virtual Int_tTNamed::Sizeof() const; RooNumIntConfig*RooAbsReal::specialIntegratorConfig() const; RooNumIntConfig*RooAbsReal::specialIntegratorConfig(Bool_t createOnTheFly); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); const map<std::string,std::string>&RooAbsArg::stringAttributes() const; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; const set<std::string>&RooAbsArg::transientAttributes() const; voidRooAbsArg::treeNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t doBranch = kTRUE, Bool_t doLeaf = kTRUE, Bool_t valueOnly = kFALSE, Bool_t recurseNonDerived = kFALSE) const; voidRooAbsArg::unRegisterCache(RooAbsCache& cache); virtual voidTObject::UseCurrentStyle(); TIterator*RooAbsArg::valueClientIterator() const; RooFIterRooAbsArg::valueClientMIterator() const; static voidRooAbsArg::verboseDirty(Bool_t flag); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; voidRooAbsArg::wireAllCaches(); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidRooAbsReal::writeToStream(ostream& os, Bool_t compact) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ParamHistFunc.html:26491,Test,TestBit,26491,root/html534/ParamHistFunc.html,https://root.cern,https://root.cern/root/html534/ParamHistFunc.html,118,['Test'],"['TestBit', 'TestBits']"
Testability,"RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_toffset() const; virtual Double_toffsetCarry() const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, RooLinkedList& cmdList) const; virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, const RooCmdArg& arg1 = RooCmdArg(), const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg(), const RooCmdArg& arg9 = RooCmdArg(), const RooCmdArg& arg10 = RooCmdArg()) const; virtual list<Double_t>*RooAbsReal::plotSamplingHint(RooAbsRealLValue&, Double_t, Double_t) const; virtual RooPlot*RooAbsReal::plotSliceOn(RooPlot* frame, const RooArgSet& sliceSet, Option_t* drawOptions = ""L"", Double_t scaleFactor = 1.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsTestStatistic.html:20644,test,testArg,20644,root/html534/RooAbsTestStatistic.html,https://root.cern,https://root.cern/root/html534/RooAbsTestStatistic.html,1,['test'],['testArg']
Testability,"RooAbsPdf*fBModelThe pdf of the background model; RooAbsData*fDatapointer to the data sets ; boolfGenerateBinnedFlag to control binned generation; unsigned intfNToysnumber of Toys MC; const RooArgSet*fNuisanceParametersCollection of the nuisance parameters in the model; RooArgList*fObservablesCollection of the observables of the model; RooAbsPdf*fPriorPdfPrior PDF of the nuisance parameters; RooAbsPdf*fSbModelThe pdf of the signal+background model; unsigned intfTestStatisticsIdxIndex of the test statistics to use; boolfUsePriorPdfuse a prior for nuisance parameters . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; HybridCalculator(const char *name); constructor with name and title; set default parameters. HybridCalculator( RooAbsPdf& sbModel, RooAbsPdf& bModel, RooArgList& observables, const RooArgSet* nuisance_parameters, RooAbsPdf* priorPdf ,				 bool GenerateBinned, int testStatistics, int numToys); HybridCalculator constructor without specifying a data set; the user need to specify the models in the S+B case and B-only case,; the list of observables of the model(s) (for MC-generation), the list of parameters; that are marginalised and the prior distribution of those parameters. HybridCalculator( RooAbsData & data, RooAbsPdf& sbModel, RooAbsPdf& bModel, const RooArgSet* nuisance_parameters, RooAbsPdf* priorPdf,				 bool GenerateBinned, int testStatistics, int numToys); HybridCalculator constructor for performing hypotesis test; the user need to specify the data set, the models in the S+B case and B-only case.; In case of treatment of nuisance parameter, the user need to specify the; the list of parameters that are marginalised and the prior distribution of those parameters. HybridCalculator(RooAbsData& data, const RooStats::ModelConfig& sb_model, const RooStats::ModelConfig& b_model, bool GenerateBinned = false, int testStatistics = 1, int ntoys = 1000); Constructor with a ModelConfig object representing the signal + bac",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__HybridCalculator.html:10582,test,testStatistics,10582,root/html526/RooStats__HybridCalculator.html,https://root.cern,https://root.cern/root/html526/RooStats__HybridCalculator.html,1,['test'],['testStatistics']
Testability,"RooAbsPdf::plotOn("" << GetName() << "") p.d.f. curve is normalized using explicit choice of ranges '"" << pc.getString(""normRangeName"", """", false) << ""'"" << endl ;; 2097 ; 2098 nameSuffix.append(""_NormRange["" + std::string(pc.getString(""rangeName"")) + ""]"");; 2099 ; 2100 }; 2101 ; 2102 if (hasCustomRange && adjustNorm) {; 2103 // If overlapping ranges were given, remove them now; 2104 const std::size_t oldSize = rangeLim.size();; 2105 removeRangeOverlap(rangeLim);; 2106 ; 2107 if (oldSize != rangeLim.size() && !pc.hasProcessed(""NormRange"")) {; 2108 // User gave overlapping ranges. This leads to double-counting events and integrals, and must; 2109 // therefore be avoided. If a NormRange has been given, the overlap is already gone.; 2110 // It's safe to plot even with overlap now.; 2111 coutE(Plotting) << ""Requested plot/integration ranges overlap. For correct plotting, new ranges ""; 2112 ""will be defined."" << std::endl;; 2113 auto plotVar = dynamic_cast<RooRealVar*>(frame->getPlotVar());; 2114 assert(plotVar);; 2115 std::string rangesNoOverlap;; 2116 for (auto it = rangeLim.begin(); it != rangeLim.end(); ++it) {; 2117 std::stringstream rangeName;; 2118 rangeName << ""Remove_overlap_range_"" << it - rangeLim.begin();; 2119 plotVar->setRange(rangeName.str().c_str(), it->first, it->second);; 2120 if (!rangesNoOverlap.empty()); 2121 rangesNoOverlap += "","";; 2122 rangesNoOverlap += rangeName.str();; 2123 }; 2124 ; 2125 auto rangeArg = static_cast<RooCmdArg*>(cmdList.FindObject(""RangeWithName""));; 2126 if (rangeArg) {; 2127 rangeArg->setString(0, rangesNoOverlap.c_str());; 2128 } else {; 2129 plotRange = std::make_unique<RooCmdArg>(RooFit::Range(rangesNoOverlap.c_str()));; 2130 cmdList.Add(plotRange.get());; 2131 }; 2132 }; 2133 ; 2134 double rangeNevt(0) ;; 2135 for (const auto& riter : rangeLim) {; 2136 double nevt= frame->getFitRangeNEvt(riter.first, riter.second);; 2137 rangeNevt += nevt ;; 2138 }; 2139 ; 2140 scaleFactor *= rangeNevt/nExpected ;; 2141 ; 2142 } else {; 2143 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:104133,assert,assert,104133,doc/master/RooAbsPdf_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html,1,['assert'],['assert']
Testability,"RooAbsReal > createRunningIntegral(const RooArgSet &iset, const RooArgSet &nset={})Calls createRunningIntegral(const RooArgSet&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&,...Definition RooAbsReal.cxx:3706; RooAbsReal::_specIntegratorConfigstd::unique_ptr< RooNumIntConfig > _specIntegratorConfigDefinition RooAbsReal.h:540; RooAbsReal::getAnalyticalIntegralvirtual Int_t getAnalyticalIntegral(RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) constInterface function getAnalyticalIntergral advertises the analytical integrals that are supported.Definition RooAbsReal.cxx:368; RooAbsReal::evalErrorIterstatic std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter()Definition RooAbsReal.cxx:181; RooAbsReal::numEvalErrorsstatic Int_t numEvalErrors()Return the number of logged evaluation errors since the last clearing.Definition RooAbsReal.cxx:3624; RooAbsReal::setEvalErrorLoggingModestatic void setEvalErrorLoggingMode(ErrorLoggingMode m)Set evaluation error logging mode.Definition RooAbsReal.cxx:4316; RooAbsReal::preferredObservableScanOrdervirtual void preferredObservableScanOrder(const RooArgSet &obs, RooArgSet &orderedObs) constInterface method for function objects to indicate their preferred order of observables for scanning t...Definition RooAbsReal.cxx:3694; RooAbsReal::maxValvirtual double maxVal(Int_t code) constReturn maximum value for set of observables identified by code assigned in getMaxVal.Definition RooAbsReal.cxx:3397; RooAbsReal::findInnerMostIntegrationvoid findInnerMostIntegration(const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) constUtility function for createIntObj() that aids in the construct of recursive integrals over functions ...Definition RooAbsReal.cxx:701; RooAbsReal::integralNameSuffixTString integralNameSuffix(const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool omitEmpty=false) constConstruct strin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:229595,log,logging,229595,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,1,['log'],['logging']
Testability,"RooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); MINIMIZER*minimizer(); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; RooAbsReal&nll(); virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; Int_tnumEval() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& te",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooProfileLL.html:19170,test,testArg,19170,root/html534/RooProfileLL.html,https://root.cern,https://root.cern/root/html534/RooProfileLL.html,1,['test'],['testArg']
Testability,"RooAbsReal::setUnit(const char* unit); voidRooAbsArg::setValueDirty() const; voidsetWidthScaleFactor(Double_t widthScaleFactor); TIterator*RooAbsArg::shapeClientIterator() const; RooFIterRooAbsArg::shapeClientMIterator() const; virtual voidShowMembers(TMemberInspector& insp) const; RooAbsMoment*RooAbsReal::sigma(RooRealVar& obs); RooAbsMoment*RooAbsReal::sigma(RooRealVar& obs, const RooArgSet& nset); virtual Int_tTNamed::Sizeof() const; RooNumGenConfig*RooAbsPdf::specialGeneratorConfig() const; RooNumGenConfig*RooAbsPdf::specialGeneratorConfig(Bool_t createOnTheFly); RooNumIntConfig*RooAbsReal::specialIntegratorConfig() const; RooNumIntConfig*RooAbsReal::specialIntegratorConfig(Bool_t createOnTheFly); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); const map<string,string>&RooAbsArg::stringAttributes() const; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tRooAbsPdf::traceEvalHook(Double_t value) const; Bool_tRooAbsPdf::traceEvalPdf(Double_t value) const; const set<string>&RooAbsArg::transientAttributes() const; voidRooAbsArg::treeNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t doBranch = kTRUE, Bool_t doLeaf = kTRUE, Bool_t valueOnly = kFALSE, Bool_t recurseNonDerived = kFALSE) const; voidRooAbsArg::unRegisterCache(RooAbsCache& cache); virtual voidTObject::UseCurrentStyle(); TIterator*RooAbsArg::valueClientIterator() const; RooFIterRooAbsArg::valueClientMIterator() const; static voidRooAbsArg::verboseDirty(Bool_t flag); static intRooAbsPdf::verboseEval(); static voidRooAbsPdf::verboseEval(Int_t stat); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; voidRooAbsArg::wireAllCaches(); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/Roo2DKeysPdf.html:31511,Test,TestBits,31511,root/html602/Roo2DKeysPdf.html,https://root.cern,https://root.cern/root/html602/Roo2DKeysPdf.html,2,['Test'],['TestBits']
Testability,"RooAddPdf ; Reimplemented in RooBernstein, RooChebychev, RooAddModel, RooAddPdf, RooProdPdf, and RooSimultaneous.; Definition at line 3373 of file RooAbsReal.cxx. ◆ setCachedValue(). void RooAbsReal::setCachedValue ; (; double ; value, . bool ; notifyClients = true . ). inlinefinalvirtual . Overwrite the value stored in this object's cache. ; This can be used to fake a computation that resulted in value. Parameters. [in]valueValue to write. ; [in]notifyClientsIf true, notify users of this object that its value changed. This is the default. . Reimplemented from RooAbsArg.; Definition at line 558 of file RooAbsReal.h. ◆ setData(). virtual bool RooAbsReal::setData ; (; RooAbsData & ; , . bool ; = true . ). inlinevirtual . Reimplemented in ProgressMonitor, RooAddition, RooConstraintSum, and RooAbsTestStatistic.; Definition at line 367 of file RooAbsReal.h. ◆ setEvalErrorLoggingMode(). void RooAbsReal::setEvalErrorLoggingMode ; (; RooAbsReal::ErrorLoggingMode ; m). static . Set evaluation error logging mode. ; Options are; PrintErrors - Print each error through RooMsgService() as it occurs CollectErrors - Accumulate errors, but do not print them. A subsequent call to printEvalErrors() will print a summary CountErrors - Accumulate error count, but do not print them. ; Definition at line 4316 of file RooAbsReal.cxx. ◆ setHideOffset(). void RooAbsReal::setHideOffset ; (; bool ; flag). static . Definition at line 191 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [1/2]. void RooAbsReal::setIntegratorConfig ; (; ). Remove the specialized numeric integration configuration associated with this object. ; Definition at line 3346 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [2/2]. void RooAbsReal::setIntegratorConfig ; (; const RooNumIntConfig & ; config). Set the given integrator configuration as default numeric integration configuration for this object. ; Definition at line 3335 of file RooAbsReal.cxx. ◆ setParameterizeIntegral(). void RooAbsReal::setParameterizeIntegral ; (;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsReal.html:145570,log,logging,145570,doc/master/classRooAbsReal.html,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html,1,['log'],['logging']
Testability,"RooAddPdf ; Reimplemented in RooBernstein, RooChebychev, RooAddModel, RooAddPdf, RooProdPdf, and RooSimultaneous.; Definition at line 3455 of file RooAbsReal.cxx. ◆ setCachedValue(). void RooAbsReal::setCachedValue ; (; double ; value, . bool ; notifyClients = true . ). inlinefinalvirtual . Overwrite the value stored in this object's cache. ; This can be used to fake a computation that resulted in value. Parameters. [in]valueValue to write. ; [in]notifyClientsIf true, notify users of this object that its value changed. This is the default. . Reimplemented from RooAbsArg.; Definition at line 568 of file RooAbsReal.h. ◆ setData(). virtual bool RooAbsReal::setData ; (; RooAbsData & ; , . bool ; = true . ). inlinevirtual . Reimplemented in ProgressMonitor, RooAbsTestStatistic, RooAddition, and RooConstraintSum.; Definition at line 374 of file RooAbsReal.h. ◆ setEvalErrorLoggingMode(). void RooAbsReal::setEvalErrorLoggingMode ; (; RooAbsReal::ErrorLoggingMode ; m). static . Set evaluation error logging mode. ; Options are; PrintErrors - Print each error through RooMsgService() as it occurs CollectErrors - Accumulate errors, but do not print them. A subsequent call to printEvalErrors() will print a summary CountErrors - Accumulate error count, but do not print them. ; Definition at line 4392 of file RooAbsReal.cxx. ◆ setHideOffset(). void RooAbsReal::setHideOffset ; (; bool ; flag). static . Definition at line 168 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [1/2]. void RooAbsReal::setIntegratorConfig ; (; ). Remove the specialized numeric integration configuration associated with this object. ; Definition at line 3428 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [2/2]. void RooAbsReal::setIntegratorConfig ; (; const RooNumIntConfig & ; config). Set the given integrator configuration as default numeric integration configuration for this object. ; Definition at line 3417 of file RooAbsReal.cxx. ◆ setParameterizeIntegral(). void RooAbsReal::setParameterizeIntegral ; (;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAbsReal.html:147407,log,logging,147407,doc/v632/classRooAbsReal.html,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html,1,['log'],['logging']
Testability,"RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooCFunction3Binding<double,unsigned int,double,unsigned int>&operator=(const RooCFunction3Binding<double,unsigned int,double,unsigned int>&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, RooLinkedList& cmdList) const; virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, const RooCmdArg& arg1 = RooCmdArg(), const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg(), const RooCmdArg& arg9 = RooCmdArg(), const RooCmdArg& arg10 = RooCmdArg()) const; virtual list<Double_t>*RooAbsReal::plotSamplingHint(RooAbsRealLValue&, Double_t, Double_t) const; virtual RooPlot*RooAbsReal::plotSliceOn(RooPlot* frame, const RooArgSet& sliceSet, Option_t* drawOptions = ""L"", Double_t scaleFactor = 1.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCFunction3Binding_double_unsigned_int_double_unsigned_int_.html:20138,test,testArg,20138,root/html602/RooCFunction3Binding_double_unsigned_int_double_unsigned_int_.html,https://root.cern,https://root.cern/root/html602/RooCFunction3Binding_double_unsigned_int_double_unsigned_int_.html,2,['test'],['testArg']
Testability,"RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooCFunction3Binding<double,unsigned int,unsigned int,double>&operator=(const RooCFunction3Binding<double,unsigned int,unsigned int,double>&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, RooLinkedList& cmdList) const; virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, const RooCmdArg& arg1 = RooCmdArg(), const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg(), const RooCmdArg& arg9 = RooCmdArg(), const RooCmdArg& arg10 = RooCmdArg()) const; virtual list<Double_t>*RooAbsReal::plotSamplingHint(RooAbsRealLValue&, Double_t, Double_t) const; virtual RooPlot*RooAbsReal::plotSliceOn(RooPlot* frame, const RooArgSet& sliceSet, Option_t* drawOptions = ""L"", Double_t scaleFactor = 1.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCFunction3Binding_double_unsigned_int_unsigned_int_double_.html:20138,test,testArg,20138,root/html602/RooCFunction3Binding_double_unsigned_int_unsigned_int_double_.html,https://root.cern,https://root.cern/root/html602/RooCFunction3Binding_double_unsigned_int_unsigned_int_double_.html,2,['test'],['testArg']
Testability,"RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooPlot*RooAbsData::statOn(RooPlot* frame, const char* what, const char* label = """", Int_t sigDigits = 2, Option_t* options = ""NELU"", Double_t xmin = 0.15, Double_t xmax = 0.65, Double_t ymax = 0.85, const char* cutSpec = 0, const char* cutRange = 0, const RooCmdArg* formatCmd = 0); RooAbsDataStore*RooAbsData::store(); const RooAbsDataStore*RooAbsData::store() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual Double_tRooAbsData::sumEntries(const char* cutSpec = 0, const char* cutRange = 0) const; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual Roo1DTable*RooAbsData::table(const RooArgSet& catSet, const char* cuts = """", const char* opts = """") const; virtual Roo1DTable*RooAbsData::table(const RooAbsCategory& cat, const char* cuts = """", const char* opts = """") const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; const TTree*RooAbsData::tree() const; virtual voidTObject::UseCurrentStyle(); virtual Bool_tRooAbsData::valid() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Double_tRooAbsData::weight() const; virtual Double_tRooAbsData::weightError(RooAbsData::ErrorType etype = Poisson) const; virtual voidRooAbsData::weightError(Double_t& lo, Double_t& hi, RooAbsData::ErrorType etype = Poisson) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. Bool_tRooAbsData::allClientsCached(RooAbsArg*, const RooArgSet&); virtual voidRooAbsData::attachCache(const RooAbsArg* newOwner, const RooArgSet& cachedVars); virtual voidRooAbsData::cacheArgs(const RooAbsArg* owner, RooArgSet& varSet, const RooArgSet* nset = 0); virtual RooAbsData*RooAbsData::cacheClone(const Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooTreeData.html:11295,Test,TestBit,11295,root/html526/RooTreeData.html,https://root.cern,https://root.cern/root/html526/RooTreeData.html,6,['Test'],"['TestBit', 'TestBits']"
Testability,"RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooPlot*statOn(RooPlot* frame, const char* what, const char* label = """", Int_t sigDigits = 2, Option_t* options = ""NELU"", Double_t xmin = 0.15, Double_t xmax = 0.65, Double_t ymax = 0.85, const char* cutSpec = 0, const char* cutRange = 0, const RooCmdArg* formatCmd = 0); RooAbsDataStore*store(); const RooAbsDataStore*store() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual Double_tsumEntries() const; virtual Double_tsumEntries(const char* cutSpec, const char* cutRange = 0) const; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual Roo1DTable*table(const RooArgSet& catSet, const char* cuts = """", const char* opts = """") const; virtual Roo1DTable*table(const RooAbsCategory& cat, const char* cuts = """", const char* opts = """") const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; const TTree*tree() const; virtual voidTObject::UseCurrentStyle(); virtual Bool_tvalid() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Double_tweight() const; virtual Double_tweightError(RooAbsData::ErrorType etype = Poisson) const; virtual voidweightError(Double_t& lo, Double_t& hi, RooAbsData::ErrorType etype = Poisson) const; virtual Double_tweightSquared() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. Bool_tallClientsCached(RooAbsArg*, const RooArgSet&); virtual voidattachCache(const RooAbsArg* newOwner, const RooArgSet& cachedVars); virtual voidcacheArgs(const RooAbsArg* owner, RooArgSet& varSet, const RooArgSet* nset = 0, Bool_t skipZeroWeights = kFALSE); virtual RooAbsData*cacheClone(const RooAbsArg* newCacheOwner, const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsData.html:11428,Test,TestBit,11428,root/html534/RooAbsData.html,https://root.cern,https://root.cern/root/html534/RooAbsData.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"RooMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); const RooArgList&paramList() const; virtual RooPlot*RooAbsPdf::paramOn(RooPlot* frame, const RooAbsData* data, const char* label = """", Int_t sigDigits = 2, Option_t* options = ""NELU"", Double_t xmin = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooJeffreysPrior.html:21885,test,testArg,21885,root/html530/RooJeffreysPrior.html,https://root.cern,https://root.cern/root/html530/RooJeffreysPrior.html,2,['test'],['testArg']
Testability,"RooMsgService() [1/2]. RooMsgService::RooMsgService ; (; ). protected . Constructor. ; Defines names of message levels and mapping of topic codes to topic names Install default message streams. ; Definition at line 80 of file RooMsgService.cxx. ◆ RooMsgService() [2/2]. RooMsgService::RooMsgService ; (; const RooMsgService & ; ). protected . Member Function Documentation. ◆ activeStream(). template<class T > . Int_t RooMsgService::activeStream ; (; T ; self, . RooFit::MsgTopic ; topic, . RooFit::MsgLevel ; level . ). inlineprotected . Find appropriate logging stream for message from given object with given topic and message level. ; Definition at line 213 of file RooMsgService.h. ◆ addStream(). RooMsgService::addStream ; (; RooFit::MsgLevel ; level, . const RooCmdArg & ; arg1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {} . ). Add a message logging stream for message with given RooFit::MsgLevel or higher. ; Higher means that messages with higher priority/severity are issued.; This method accepts the following arguments to configure the stream: . Output Style options . Prefix(bool flag=true) Prefix all messages in this stream with Topic/Originator information . Filtering options . Topic() Restrict stream to messages on given topic . ObjectName(const char*) Restrict stream to messages from object with given name . ClassName(const char*) Restrict stream to messages from objects with given class name . BaseClassName(const char*)Restrict stream to messages from objects with given base class name . LabelName(const chat*) Restrict stream to messages from objects setAttribute(const char*) tag with given name . Output redirection options . OutputFile(const char*) Send output to file with given name. Multiple streams can write to same file. . OutputStream(ostream&) Send output to given C++ stream. Multiple message streams can write to same c++ stream . The",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMsgService.html:16113,log,logging,16113,doc/master/classRooMsgService.html,https://root.cern,https://root.cern/doc/master/classRooMsgService.html,1,['log'],['logging']
Testability,"RooMsgService); 3453/// because evaluation errors can occur in very large numbers in the use of likelihood; 3454/// evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging(); 3455/// messages reported through this function are not printed but all stored in a list,; 3456/// along with server values at the time of reporting. Error messages logged in this; 3457/// way can be printed in a structured way, eliminating duplicates and with the ability; 3458/// to truncate the list by printEvalErrors. This is the standard mode of error logging; 3459/// during MINUIT operations. If enableEvalErrorLogging() is false, all errors; 3460/// reported through this method are passed for immediate printing through RooMsgService.; 3461/// A string with server names and values is constructed automatically for error logging; 3462/// purposes, unless a custom string with similar information is passed as argument.; 3463 ; 3464void RooAbsReal::logEvalError(const char* message, const char* serverValueString) const; 3465{; 3466 if (evalErrorData().mode == Ignore) {; 3467 return ;; 3468 }; 3469 ; 3470 if (evalErrorData().mode == CountErrors) {; 3471 evalErrorData().count++ ;; 3472 return ;; 3473 }; 3474 ; 3475 static bool inLogEvalError = false ;; 3476 ; 3477 if (inLogEvalError) {; 3478 return ;; 3479 }; 3480 inLogEvalError = true ;; 3481 ; 3482 EvalError ee ;; 3483 ee.setMessage(message) ;; 3484 ; 3485 if (serverValueString) {; 3486 ee.setServerValues(serverValueString) ;; 3487 } else {; 3488 std::string srvval ;; 3489 std::ostringstream oss ;; 3490 bool first(true) ;; 3491 for (Int_t i=0 ; i<numProxies() ; i++) {; 3492 RooAbsProxy* p = getProxy(i) ;; 3493 if (!p) continue ;; 3494 //if (p->name()[0]=='!') continue ;; 3495 if (first) {; 3496 first=false ;; 3497 } else {; 3498 oss << "", "" ;; 3499 }; 3500 p->print(oss,true) ;; 3501 }; 3502 ee.setServerValues(oss.str().c_str()) ;; 3503 }; 3504 ; 3505 std::ostringstream oss2 ;; 3506 printStream(oss2,kName|kClassName|k",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:148787,log,logEvalError,148787,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,1,['log'],['logEvalError']
Testability,"RooMsgService.cxx. ◆ globalKillBelow(). RooFit::MsgLevel RooMsgService::globalKillBelow ; (; ); const. inline . Definition at line 170 of file RooMsgService.h. ◆ instance(). RooMsgService & RooMsgService::instance ; (; ). static . Return reference to singleton instance. ; Definition at line 345 of file RooMsgService.cxx. ◆ IsA(). TClass * RooMsgService::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 246 of file RooMsgService.h. ◆ isActive(). template<class T > . bool RooMsgService::isActive ; (; T ; self, . RooFit::MsgTopic ; topic, . RooFit::MsgLevel ; level . ). inline . Check if logging is active for given object/topic/RooFit::MsgLevel combination. ; Definition at line 186 of file RooMsgService.h. ◆ log() [1/3]. ostream & RooMsgService::log ; (; const RooAbsArg * ; self, . RooFit::MsgLevel ; level, . RooFit::MsgTopic ; topic, . bool ; skipPrefix = false . ). Log error message associated with RooAbsArg object self at given level and topic. ; If skipPrefix is true the standard RooMsgService prefix is not added. ; Definition at line 419 of file RooMsgService.cxx. ◆ log() [2/3]. ostream & RooMsgService::log ; (; const TObject * ; self, . RooFit::MsgLevel ; level, . RooFit::MsgTopic ; topic, . bool ; skipPrefix = false . ). Log error message associated with TObject object self at given level and topic. ; If skipPrefix is true the standard RooMsgService prefix is not added. ; Definition at line 456 of file RooMsgService.cxx. ◆ log() [3/3]. std::ostream & RooMsgService::log ; (; std::nullptr_t ; , . RooFit::MsgLevel ; level, . RooFit::MsgTopic ; facility, . bool ; forceSkipPrefix = false . ). inline . Definition at line 180 of file RooMsgService.h. ◆ numStreams(). Int_t RooMsgService::numStreams ; (; ); const. inline . Definition at line 163 of file RooMsgService.h. ◆ Print(). void RooMsgService::Print ; (; Option_t * ; options = nullptr); const. overridevirtual . Print configuration o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMsgService.html:20060,Log,Log,20060,doc/master/classRooMsgService.html,https://root.cern,https://root.cern/doc/master/classRooMsgService.html,1,['Log'],['Log']
Testability,"RooNumGenConfig& other); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* options = 0) const; virtual voidRooPrintable::printAddress(ostream& os) const; virtual voidRooPrintable::printArgs(ostream& os) const; virtual voidRooPrintable::printClassName(ostream& os) const; virtual voidRooPrintable::printExtras(ostream& os) const; virtual voidprintMultiline(ostream& os, Int_t content, Bool_t verbose, TString indent = """") const; virtual voidRooPrintable::printName(ostream& os) const; virtual voidRooPrintable::printStream(ostream& os, Int_t contents, RooPrintable::StyleOption style, TString indent = """") const; virtual voidRooPrintable::printTitle(ostream& os) const; virtual voidRooPrintable::printTree(ostream& os, TString indent = """") const; virtual voidRooPrintable::printValue(ostream& os) const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooNumGenConfig.html:6117,Test,TestBit,6117,root/html530/RooNumGenConfig.html,https://root.cern,https://root.cern/root/html530/RooNumGenConfig.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"RooPrintable::printExtras(ostream& os) const; virtual voidprintMultiline(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; virtual voidprintName(ostream& os) const; virtual voidRooPrintable::printStream(ostream& os, Int_t contents, RooPrintable::StyleOption style, TString indent = """") const; virtual voidprintTitle(ostream& os) const; virtual voidRooPrintable::printTree(ostream& os, TString indent = """") const; virtual voidRooPrintable::printValue(ostream& os) const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidsetExpectedData(Bool_t); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidsetProtoDataOrder(Int_t* lut); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); voidsetVerbose(Bool_t verbose = kTRUE); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsGenContext.html:6426,Test,TestBit,6426,root/html534/RooAbsGenContext.html,https://root.cern,https://root.cern/root/html534/RooAbsGenContext.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"RooPrintable::printExtras(ostream& os) const; virtual voidprintMultiline(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; virtual voidprintName(ostream& os) const; virtual voidRooPrintable::printStream(ostream& os, Int_t contents, RooPrintable::StyleOption style, TString indent = """") const; virtual voidprintTitle(ostream& os) const; virtual voidRooPrintable::printTree(ostream& os, TString indent = """") const; virtual voidprintValue(ostream& os) const; const RooArgList&randomizePars() const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); TMatrixDSymreducedCovarianceMatrix(const RooArgList& params) const; voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetName(const char* name); virtual voidSetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp, char* parent); virtual Int_tTNamed::Sizeof() const; Int_tstatus() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooFitResult.html:7182,Test,TestBit,7182,root/html526/RooFitResult.html,https://root.cern,https://root.cern/root/html526/RooFitResult.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"RooPrintable::printStream(ostream& os, Int_t contents, RooPrintable::StyleOption style, TString indent = """") const; virtual voidprintTitle(ostream& os) const; virtual voidRooPrintable::printTree(ostream& os, TString indent = """") const; virtual voidRooPrintable::printValue(ostream& os) const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); RooAbsGenContext(const RooAbsGenContext&); RooAbsGenContext(const RooAbsPdf& model, const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t _verbose = kFALSE); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidsetExpectedData(Bool_t); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidsetProtoDataOrder(Int_t* lut); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); voidsetVerbose(Bool_t verbose = kTRUE); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsGenContext.html:6496,Test,TestBit,6496,root/html602/RooAbsGenContext.html,https://root.cern,https://root.cern/root/html602/RooAbsGenContext.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"RooPrintable::printStream(ostream& os, Int_t contents, RooPrintable::StyleOption style, TString indent = """") const; virtual voidprintTitle(ostream& os) const; virtual voidRooPrintable::printTree(ostream& os, TString indent = """") const; virtual voidRooPrintable::printValue(ostream& os) const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidrefine(Double_t alpha = 1.5); voidTObject::ResetBit(UInt_t f); voidresetValues(); voidresize(UInt_t bins); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidsetNBoxes(UInt_t boxes); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); Double_tvalue(Int_t i, Int_t j) const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. Double_t&coord(Int_t i, Int_t j); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(); Double_t&newCoord(Int_t i); Double_t&value(Int_t i, Int_t j). Data Members; public:. enum { maxBins; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; en",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooGrid.html:6048,Test,TestBit,6048,root/html530/RooGrid.html,https://root.cern,https://root.cern/root/html530/RooGrid.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"RooPrintable; kHasUUID enum valueTObject; kInconsistent enum valueTObject; kInline enum valueRooPrintable; kInvalidObject enum valueTObject; kIsOnHeap enum valueTObject; kIsReferenced enum valueTObject; kMustCleanup enum valueTObject; kName enum valueRooPrintable; kNoContextMenu enum valueTObject; kNotDeleted enum valueTObject; kObjInCanvas enum valueTObject; kOnlyPrepStep enum valueTObjectprotected; kOverwrite enum valueTObject; kSingleKey enum valueTObject; kSingleLine enum valueRooPrintable; kStandard enum valueRooPrintable; kTitle enum valueRooPrintable; kTreeStructure enum valueRooPrintable; kValue enum valueRooPrintable; kVerbose enum valueRooPrintable; kWriteDelete enum valueTObject; kZombie enum valueTObject; leafNodeServerList(RooAbsCollection *list, const RooAbsArg *arg=nullptr, bool recurseNonDerived=false) constRooAbsArg; localNoDirtyInhibit() constRooAbsArginline; logBatchComputationErrors(std::span< const double > &outputs, std::size_t begin) constRooAbsPdfprivate; logEvalError(const char *message, const char *serverValueString=nullptr) constRooAbsReal; logEvalError(const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr)RooAbsRealstatic; ls(Option_t *option="""") const overrideTNamedvirtual; makeLegacyIterator(const RefCountList_t &list) constRooAbsArgprivate; makeProjectionSet(const RooAbsArg *plotVar, const RooArgSet *allVars, RooArgSet &projectedVars, bool silent) constRooAbsRealprotected; MakeZombie()TObjectinlineprotected; matchArgs(const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a) constRooAbsRealprotected; matchArgs(const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a, const RooArgProxy &b) constRooAbsRealprotected; matchArgs(const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a, const RooArgProxy &b, const RooArgProxy &c) constRooAbsRealprotected; matchArgs(const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a, const RooArgProxy &b, con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsPdf-members.html:24976,log,logEvalError,24976,doc/master/classRooAbsPdf-members.html,https://root.cern,https://root.cern/doc/master/classRooAbsPdf-members.html,1,['log'],['logEvalError']
Testability,"RooPrintable; static Int_t _nameLength;  . #include <RooFit/TestStatistics/RooRealL.h>. Inheritance diagram for RooFit::TestStatistics::RooRealL:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooRealL() [1/2]. RooFit::TestStatistics::RooRealL::RooRealL ; (; const char * ; name, . const char * ; title, . std::shared_ptr< RooAbsL > ; likelihood . ). Definition at line 32 of file RooRealL.cxx. ◆ RooRealL() [2/2]. RooFit::TestStatistics::RooRealL::RooRealL ; (; const RooRealL & ; other, . const char * ; name = nullptr . ). Definition at line 42 of file RooRealL.cxx. Member Function Documentation. ◆ Class(). static TClass * RooFit::TestStatistics::RooRealL::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooFit::TestStatistics::RooRealL::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooFit::TestStatistics::RooRealL::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 55 of file RooRealL.h. ◆ clone(). TObject * RooFit::TestStatistics::RooRealL::clone ; (; const char * ; newname); const. inlineoverridevirtual . Implements RooAbsArg.; Definition at line 33 of file RooRealL.h. ◆ DeclFileName(). static const char * RooFit::TestStatistics::RooRealL::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 55 of file RooRealL.h. ◆ defaultErrorLevel(). double RooFit::TestStatistics::RooRealL::defaultErrorLevel ; (; ); const. inlineoverridevirtual . Reimplemented from RooAbsReal.; Definition at line 42 of file RooRealL.h. ◆ evaluate(). double RooFit::TestStatistics::RooRealL::evaluate ; (; ); const. overrideprotectedvirtual . Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ; Implements RooAbsReal.; Definition at line 48 of file RooRealL.cxx. ◆ getC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFit_1_1TestStatistics_1_1RooRealL.html:61176,Test,TestStatistics,61176,doc/master/classRooFit_1_1TestStatistics_1_1RooRealL.html,https://root.cern,https://root.cern/doc/master/classRooFit_1_1TestStatistics_1_1RooRealL.html,1,['Test'],['TestStatistics']
Testability,"RooRealVar& param, Double_t lo = -3.0, Double_t hi = 3.0, Int_t nbins = 25, Bool_t fitGauss = kFALSE); RooPlot*plotPull(const RooRealVar& param, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidcalcPulls(); virtual voidTObject::DoEr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooMCStudy.html:9162,Test,TestBit,9162,root/html528/RooMCStudy.html,https://root.cern,https://root.cern/root/html528/RooMCStudy.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"RooStats::ModelConfig& model); virtual voidSetData(RooAbsData& data); virtual voidSetNullModel(const RooStats::ModelConfig& nullModel); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); voidUseSameAltToys(). protected:. virtual intCheckHook() const; virtual voidPostHook() const; virtual intPreAltHook(RooArgSet*, double) const; virtual voidPreHook() const; virtual intPreNullHook(RooArgSet*, double) const. private:. RooStats::SamplingDistribution*GenerateSamplingDistribution(RooStats::ModelConfig* thisModel, double obsTestStat, RooAbsPdf* impDens = __null, const RooArgSet* impSnapshot = __null) const; voidSetAdaptiveLimits(Double_t obsTestStat, Bool_t forNull) const; voidSetupSampler(const RooStats::ModelConfig& model) const. Data Members; protected:. const RooStats::ModelConfig*fAltModel; unsigned intfAltToysSeedto have same toys for alternate; const RooAbsData*fData; RooStats::TestStatSampler*fDefaultSampler; RooStats::TestStatistic*fDefaultTestStat; const RooStats::ModelConfig*fNullModel; RooStats::TestStatSampler*fTestStatSampler. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; HypoTestCalculatorGeneric(const RooAbsData& data, const RooStats::ModelConfig& altModel, const RooStats::ModelConfig& nullModel, RooStats::TestStatSampler* sampler = 0); Constructor. When test stat sampler is not provided; uses ToyMCSampler and RatioOfProfiledLikelihoodsTestStat; and nToys = 1000.; User can : GetTestStatSampler()->SetNToys( # ). void SetupSampler(const RooStats::ModelConfig& model) const; common setup for both models. ~HypoTestCalculatorGeneric(). HypoTestResult* GetHypoTest() const. void UseSameAltToys(); to re-use same toys for alternate hypothesis. HypoTestCalculatorGeneric(const RooAbsData& data, const RooStats::ModelConfig& altModel, const RooStats::ModelConfig& nullModel, RooStats::TestStatSampler* sampler = 0). void SetNullModel(c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__HypoTestCalculatorGeneric.html:2526,Test,TestStatSampler,2526,root/html602/RooStats__HypoTestCalculatorGeneric.html,https://root.cern,https://root.cern/root/html602/RooStats__HypoTestCalculatorGeneric.html,6,['Test'],"['TestStatSampler', 'TestStatistic']"
Testability,"RooTFnPdfBinding, RooUnblindCPAsymVar, RooUnblindOffset, RooUnblindPrecision, RooUnblindUniform, RooUniform, RooVoigtian, Roo1DTable, RooAbsAnaConvPdf, RooAbsBinning, RooAbsCachedPdf, RooAbsCachedReal, RooAbsCategory, RooAbsCategoryLValue, RooAbsCollection, RooAbsData, RooAbsDataStore, RooAbsGenContext, RooAbsHiddenReal, RooAbsMoment, RooAbsPdf, RooAbsReal, RooAbsRealLValue, RooAddGenContext, RooAddition, RooAddModel, RooAddPdf, RooArgList, RooArgSet, RooBinnedGenContext, RooBinning, RooBinningCategory, RooBinSamplingPdf, RooBinWidthFunction, RooCachedPdf, RooCachedReal, RooCategory, RooChangeTracker, RooCollectionProxy< RooArgList >, RooCollectionProxy< RooArgSet >, RooCompositeDataStore, RooConstraintSum, RooConstVar, RooConvCoefVar, RooConvGenContext, RooCurve, RooDataHist, RooDataSet, RooDerivative, RooEffGenContext, RooEfficiency, RooEffProd, RooEllipse, RooErrorVar, RooExtendedBinding, RooExtendedTerm, RooExtendPdf, RooFactoryWSTool, RooFFTConvPdf, RooFirstMoment, RooFit::TestStatistics::RooRealL, RooCatType, RooTreeData, RooFitResult, RooFormulaVar, RooFracRemainder, RooGenContext, RooGenericPdf, RooHist, RooHistFunc, RooHistPdf, RooLinearCombination, RooLinearVar, RooLinTransBinning, RooMappedCategory, RooMoment, RooMultiCategory, RooMultiVarGaussian, RooNumCdf, RooNumConvolution, RooNumConvPdf, RooNumGenConfig, RooNumIntConfig, RooNumRunningInt, RooParamBinning, RooPlot, RooPlotable, RooPolyFunc, RooPolyVar, RooProdGenContext, RooProdPdf, RooProduct, RooProfileLL, RooProjectedPdf, RooPullVar, RooRangeBinning, RooRangeBoolean, RooRatio, RooRealIntegral, RooRealSumFunc, RooRealSumPdf, RooRealVar, RooRecursiveFraction, RooResolutionModel, RooSecondMoment, RooSimGenContext, RooSimSplitGenContext, RooSimultaneous, RooStringVar, RooSuperCategory, RooTable, RooThresholdCategory, RooTreeDataStore, RooTruthModel, RooUniformBinning, RooVectorDataStore, RooWrapperPdf, RooLegendre, RooNonCentralChiSquare, RooSpHarmonic, RooStats::Heaviside, RooStats::HypoTestPlot, RooSt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooPrintable.html:8513,Test,TestStatistics,8513,doc/master/classRooPrintable.html,https://root.cern,https://root.cern/doc/master/classRooPrintable.html,2,['Test'],['TestStatistics']
Testability,"RootBaseSolver::TestResidualint TestResidual(double absTol) consttest using abs tolerance Sum |f|_i < absTolDefinition GSLMultiRootSolver.h:126; ROOT::Math::GSLMultiRootBaseSolver::FValconst double * FVal() constreturn function valuesDefinition GSLMultiRootSolver.h:104; ROOT::Math::GSLMultiRootBaseSolver::Xconst double * X() constsolution values at the current iterationDefinition GSLMultiRootSolver.h:98; ROOT::Math::GSLMultiRootBaseSolver::Namevirtual const std::string & Name() const =0return name; ROOT::Math::GSLMultiRootBaseSolver::Dxconst double * Dx() constreturn function stepsDefinition GSLMultiRootSolver.h:110; ROOT::Math::GSLMultiRootBaseSolver::InitSolverbool InitSolver(const std::vector< ROOT::Math::IMultiGenFunction * > &funcVec, const double *x)init the solver with function list and initial valuesDefinition GSLMultiRootSolver.h:71; ROOT::Math::GSLMultiRootBaseSolver::Iteratevirtual int Iterate()=0perform an iteration; ROOT::Math::GSLMultiRootBaseSolver::TestDeltaint TestDelta(double absTol, double relTol) consttest using abs and relative tolerance |dx| < absTol + relTol*|x| for every componentDefinition GSLMultiRootSolver.h:117; ROOT::Math::GSLMultiRootDerivSolverGSLMultiRootDerivSolver, internal class for implementing GSL multi-root finders using derivatives.Definition GSLMultiRootSolver.h:255; ROOT::Math::GSLMultiRootFinder::fTypeint fTypeDefinition GSLMultiRootFinder.h:283; ROOT::Math::GSLMultiRootFinder::Dimunsigned int Dim() constreturn the number of sunctions set in the class.Definition GSLMultiRootFinder.h:203; ROOT::Math::GSLMultiRootFinder::Dxconst double * Dx() constreturn the last step sizeDefinition GSLMultiRootFinder.cxx:139; ROOT::Math::GSLMultiRootFinder::fPrintLevelint fPrintLevelDefinition GSLMultiRootFinder.h:278; ROOT::Math::GSLMultiRootFinder::~GSLMultiRootFindervirtual ~GSLMultiRootFinder()destructorDefinition GSLMultiRootFinder.cxx:95; ROOT::Math::GSLMultiRootFinder::FValconst double * FVal() constreturn the function values f(X) solv",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html:14425,Test,TestDeltaint,14425,doc/master/GSLMultiRootFinder_8cxx_source.html,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html,2,['Test'],"['TestDelta', 'TestDeltaint']"
Testability,RootFinder.cxx. ◆ ~RootFinder(). TMVA::RootFinder::~RootFinder ; (; void ; ). virtual . destructor ; Definition at line 63 of file RootFinder.cxx. Member Function Documentation. ◆ Class(). static TClass * TMVA::RootFinder::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::RootFinder::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::RootFinder::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 74 of file RootFinder.h. ◆ DeclFileName(). static const char * TMVA::RootFinder::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 74 of file RootFinder.h. ◆ IsA(). virtual TClass * TMVA::RootFinder::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 74 of file RootFinder.h. ◆ Log(). MsgLogger & TMVA::RootFinder::Log ; (; ); const. inlineprivate . Definition at line 72 of file RootFinder.h. ◆ Root(). Double_t TMVA::RootFinder::Root ; (; Double_t ; refValue). Root finding using Brents algorithm; taken from CERNLIB function RZERO. ; Definition at line 71 of file RootFinder.cxx. ◆ Streamer(). virtual void TMVA::RootFinder::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TMVA::RootFinder::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 74 of file RootFinder.h. Member Data Documentation. ◆ fAbsTol. Double_t TMVA::RootFinder::fAbsTol. private . absolute tolerance deviation ; Definition at line 66 of file RootFinder.h. ◆ fLogger. MsgLogger* TMVA::RootFinder::fLogger. mutableprivate . ! message logger ; Definition at line 71 of file RootFinder.h. ◆ fMaxIter. Int_t TMVA::RootFinder::fMaxIter. private . maximum number of iterations ; Definition at line 65 of file RootFi,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1RootFinder.html:11951,Log,Log,11951,doc/master/classTMVA_1_1RootFinder.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1RootFinder.html,1,['Log'],['Log']
Testability,RootFunctionAdapter.h;  GSLMultiRootFunctionWrapper.h;  GSLMultiRootSolver.h;  GSLNLSMinimizer.cxx;  GSLQRngWrapper.h;  GSLQuasiRandom.cxx;  GSLRndmEngines.cxx;  GSLRngWrapper.h;  GSLRootFdFSolver.h;  GSLRootFinder.cxx;  GSLRootFinderDeriv.cxx;  GSLRootFSolver.h;  GSLRootHelper.cxx;  GSLSimAnMinimizer.cxx;  GSLSimAnnealing.cxx;  Interpolator.cxx;  KelvinFunctions.cxx;  MCParameters.cxx;  MultiNumGradFunction.cxx;  PdfFuncMathMore.cxx;  Polynomial.cxx;  QuantFuncMathMore.cxx;  RootFinderAlgorithms.cxx;  SpecFuncMathMore.cxx;  Vavilov.cxx;  VavilovAccurate.cxx;  VavilovAccurateCdf.cxx;  VavilovAccuratePdf.cxx;  VavilovAccurateQuantile.cxx;  VavilovFast.cxx;  zsolve_cubic.cxx;  ► test;  piRandom.C;  pirndm.C;  simanTSP.cxx;  testChebyshev.cxx;  testDerivation.cxx;  testFunctor.cxx;  testGSLIntegration.cxx;  testGSLRootFinder.cxx;  testInterpolation.cxx;  testMCIntegration.cxx;  testMinimization1D.cxx;  testMultiRootFinder.cxx;  testPermute.cxx;  testQuasiRandom.cxx;  testRandom.cxx;  testRandomDist.cxx;  testSpecFunc.cxx;  testStatFunc.cxx;  testVavilov.cxx;  UnuRanDist.h;  VavilovTest.cxx;  VavilovTest.h;  ► matrix;  ► inc;  LinkDef.h;  TDecompBase.h;  TDecompBK.h;  TDecompChol.h;  TDecompLU.h;  TDecompQRH.h;  TDecompSparse.h;  TDecompSVD.h;  TMatrix.h;  TMatrixD.h;  TMatrixDBase.h;  TMatrixDBasefwd.h;  TMatrixDEigen.h;  TMatrixDfwd.h;  TMatrixDLazy.h;  TMatrixDSparse.h;  TMatrixDSparsefwd.h;  TMatrixDSym.h;  TMatrixDSymEigen.h;  TMatrixDSymfwd.h;  TMatrixDUtils.h;  TMatrixDUtilsfwd.h;  TMatrixF.h;  TMatrixFBase.h;  TMatrixFBasefwd.h;  TMatrixFfwd.h;  TMatrixFLazy.h;  TMatrixFSparse.h;  TMatrixFSparsefwd.h;  TMatrixFSym.h;  TMatrixFSymfwd.h;  TMatrixFUtils.h;  TMatrixFUtilsfwd.h;  TMatrixT.h;  TMatrixTBase.h;  TMatrixTCramerInv.h;  TMatrixTLazy.h;  TMatrixTSparse.h;  TMatrixTSym.h;  TMatrixTSymCramerInv.h;  TMatrixTUtils.h;  TVector.h;  TVectorD.h;  TVectorDfwd.h;  TVectorF.h;  TVectorFfwd.h;  TVectorfwd.h;  TVectorT.h;  ► src;  TDecompBase.cxx;  TDecompBK.cxx;  TDecom,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html606/files.html:49044,test,testRandomDist,49044,root/html606/files.html,https://root.cern,https://root.cern/root/html606/files.html,1,['test'],['testRandomDist']
Testability,"RunTimeShape; kGeoInvalidShape; kGeoTorus; kGeoBox; kGeoPara; kGeoSph; kGeoTube; kGeoTubeSeg; kGeoCone; kGeoConeSeg; kGeoPcon; kGeoPgon; kGeoArb8; kGeoEltu; kGeoTrap; kGeoCtub; kGeoTrd1; kGeoTrd2; kGeoComb; kGeoClosedShape; kGeoXtru; kGeoParaboloid; kGeoHalfSpace; kGeoHype; kGeoSavePrimitive; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; UInt_tfShapeBitsshape bits; Int_tfShapeIdshape id; TStringTNamed::fTitleobject title. private:. static Double_tfgEpsMchMachine round-off error; static TGeoMatrix*fgTransformcurrent transformation matrix that applies to shape. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TGeoShape(); Destructor. void CheckShape(Int_t testNo, Int_t nsamples = 10000, Option_t* option = """"); Test for shape navigation methods. Summary for test numbers:; 1: DistFromInside/Outside. Sample points inside the shape. Generate; directions randomly in cos(theta). Compute DistFromInside and move the; point with bigger distance. Compute DistFromOutside back from new point.; Plot d-(d1+d2). Double_t ComputeEpsMch(); Compute machine round-off double precision error as the smallest number that; if added to 1.0 is different than 1.0. Double_t EpsMch(); static function returning the machine round-off error. const char * GetName() const; Get the shape name. Int_t ShapeDistancetoPrimitive(Int_t numpoints, Int_t px, Int_t py) const; Returns distance to shape primitive mesh. Bool_t IsCloseToPhi(Double_t epsil, Double_t* point, Double_t c1, Double_t s1, Double_t c2, Double_t s2); True if point is closer than epsil to one of the phi planes defined by c1,s1 or c2,s2. Bool_t IsInPhiRange(Double_t* point, Double_t phi1, Double_t phi2); Static method to check if a point is in ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGeoShape.html:16054,test,testNo,16054,root/html530/TGeoShape.html,https://root.cern,https://root.cern/root/html530/TGeoShape.html,4,"['Test', 'test']","['Test', 'testNo']"
Testability,"RunTimeShape; kGeoInvalidShape; kGeoTorus; kGeoBox; kGeoPara; kGeoSph; kGeoTube; kGeoTubeSeg; kGeoCone; kGeoConeSeg; kGeoPcon; kGeoPgon; kGeoArb8; kGeoEltu; kGeoTrap; kGeoCtub; kGeoTrd1; kGeoTrd2; kGeoComb; kGeoClosedShape; kGeoXtru; kGeoParaboloid; kGeoHalfSpace; kGeoHype; kGeoSavePrimitive; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; UInt_tfShapeBitsshape bits; Int_tfShapeIdshape id; TStringTNamed::fTitleobject title. private:. static Double_tfgEpsMchMachine round-off error; static TGeoMatrix*fgTransformcurrent transformation matrix that applies to shape. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TGeoShape(); Destructor. void CheckShape(Int_t testNo, Int_t nsamples = 10000, Option_t* option = """"); Test for shape navigation methods. Summary for test numbers:; 1: DistFromInside/Outside. Sample points inside the shape. Generate; directions randomly in cos(theta). Compute DistFromInside and move the; point with bigger distance. Compute DistFromOutside back from new point.; Plot d-(d1+d2). Double_t ComputeEpsMch(); Compute machine round-off double precision error as the smallest number that; if added to 1.0 is different than 1.0. Double_t EpsMch(); static function returning the machine round-off error. const char * GetName() const; Get the shape name. Int_t ShapeDistancetoPrimitive(Int_t numpoints, Int_t px, Int_t py) const; Returns distance to shape primitive mesh. Bool_t IsCloseToPhi(Double_t epsil, const Double_t* point, Double_t c1, Double_t s1, Double_t c2, Double_t s2); True if point is closer than epsil to one of the phi planes defined by c1,s1 or c2,s2. Bool_t IsInPhiRange(const Double_t* point, Double_t phi1, Double_t phi2); Static method to check if a ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoShape.html:16839,test,testNo,16839,root/html534/TGeoShape.html,https://root.cern,https://root.cern/root/html534/TGeoShape.html,2,"['Test', 'test']","['Test', 'testNo']"
Testability,"Rwrmin)+(i-1)*dist;; 686 }; 687 // Non-optimized case.; 688 } else {; 689 ; 690 // Paint major circles.; 691 for (i=1; i<=ndivMajor; i++) {; 692 TAttLine::SetLineStyle(1);; 693 TAttLine::Modify();; 694 Double_t rmaj = i*1./ndivMajor;; 695 PaintCircle(0.,0.,rmaj,0.,360,0);; 696 ; 697 // Paint minor circles.; 698 for (j=1; j<ndivMinor; j++) {; 699 TAttLine::SetLineStyle(2);; 700 TAttLine::Modify();; 701 PaintCircle(0.,0.,rmaj- j*1./(ndivMajor*ndivMinor),0.,360,0);; 702 }; 703 }; 704 }; 705 } else {; 706 // Draw Log scale on radial axis if option activated.; 707 Int_t big = (Int_t)fRwrmax;; 708 Int_t test= 0;; 709 while (big >= 10) {; 710 big = big/10;; 711 test++;; 712 }; 713 for (i=1; i<=test; i++) {; 714 TAttLine::SetLineStyle(1);; 715 TAttLine::Modify();; 716 Double_t ecart;; 717 ecart = ((double) i)/ ((double) test);; 718 PaintCircle(0.,0.,ecart,0,360,0);; 719 TAttLine::SetLineStyle(GetLineStyle());; 720 TAttLine::Modify();; 721 Double_t a=0;; 722 Double_t b,c,d;; 723 b = TMath::Log(10)*test;; 724 d = 1/(double)test;; 725 for (j=1; j<9; j++) {; 726 a = TMath::Log(j+1)-TMath::Log(j)+a;; 727 c = a/b+d*(i-1);; 728 PaintCircle(0,0.,c,0.,360,0);; 729 }; 730 }; 731 }; 732 TAttLine::SetLineStyle(1);; 733 TAttLine::Modify();; 734}; 735 ; 736////////////////////////////////////////////////////////////////////////////////; 737/// Reduce fractions.; 738 ; 739void TGraphPolargram::ReduceFraction(Int_t num, Int_t den, Int_t &rnum, Int_t &rden); 740{; 741 Int_t a = 0;; 742 Int_t b = 0;; 743 Int_t i = 0;; 744 Int_t j = 0;; 745 a = den;; 746 b = num;; 747 if (b > a) {; 748 j = b;; 749 } else {; 750 j = a;; 751 }; 752 for (i=j; i > 1; i--) {; 753 if ((a % i == 0) && (b % i == 0)) {; 754 a = a/i;; 755 b = b/i;; 756 }; 757 }; 758 rden = a;; 759 rnum = b;; 760}; 761 ; 762////////////////////////////////////////////////////////////////////////////////; 763/// Set axis angle.; 764 ; 765void TGraphPolargram::SetAxisAngle(Double_t angle); 766{; 767 fAxisAngle = angle/180*TMath::Pi();; 76",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphPolargram_8cxx_source.html:24115,Log,Log,24115,doc/master/TGraphPolargram_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphPolargram_8cxx_source.html,5,"['Log', 'test']","['Log', 'test']"
Testability,"S (chi square statistics with function values as weighting coefficients); // FIT1_OPTIM_MAX_LIKELIHOOD; int alpha_optim; // optimization of convergence coefficients, possible values are:; // FIT1_ALPHA_HALVING,; // FIT1_ALPHA_OPTIMAL; int power; // possible values FIT1_FIT_POWER2,4,6,8,10,12; int fit_taylor; // order of Taylor expansion, possible values; // FIT1_TAYLOR_ORDER_FIRST, FIT1_TAYLOR_ORDER_SECOND. double position_init[MAX_NUMBER_OF_PEAKS1]; // initial values of peaks positions, input parameters; double position_calc[MAX_NUMBER_OF_PEAKS1]; // calculated values of fitted positions, output parameters; double position_err[MAX_NUMBER_OF_PEAKS1]; // position errors; bool fix_position[MAX_NUMBER_OF_PEAKS1]; // logical vector which allows to fix appropriate positions (not fit). However they are present in the estimated functional; double amp_init[MAX_NUMBER_OF_PEAKS1]; // initial values of peaks amplitudes, input parameters; double amp_calc[MAX_NUMBER_OF_PEAKS1]; // calculated values of fitted amplitudes, output parameters; double amp_err[MAX_NUMBER_OF_PEAKS1]; // amplitude errors; bool fix_amp[MAX_NUMBER_OF_PEAKS1]i; // logical vector, which allows to fix appropriate amplitudes (not fit). However they are present in the estimated functional; double area[MAX_NUMBER_OF_PEAKS1]; // calculated areas of peaks; double area_err[MAX_NUMBER_OF_PEAKS1]; // errors of peak areas; double sigma_init; // sigma parameter, see peak shape function; double sigma_calc;; double sigma_err;; bool fix_sigma;; double t_init // t parameter, see peak shape function; double t_calc;; double t_err;; bool fix_t;; double b_init // b parameter, see peak shape function; double b_calc;; double b_err;; bool fix_b;; double s_init; // s parameter, see peak shape function; double s_calc;; double s_err;; bool fix_s;; double a0_init; // background is estimated as a0+a1*x+a2*x*x; double a0_calc;; double a0_err;; bool fix_a0;; double a1_init;; double a1_calc;; double a1_err;; bool fix_a1;; double a2_init;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/spectrum/Spectrum.html:40790,log,logical,40790,root/htmldoc/guides/spectrum/Spectrum.html,https://root.cern,https://root.cern/root/htmldoc/guides/spectrum/Spectrum.html,1,['log'],['logical']
Testability,"S . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation » Courses » Introductory Tutorials Fit Panel. As you can see, the fit (solid line) doesn't really describe the data: a polynomial is nowhere close to most data points. So from the Canvas, start the fit panel and use a gaussian (""gaus"") instead of a ""pol2"" to perform the fit. (You don't know what a Gaussian is? see http://en.wikipedia.org/wiki/Gaussian_function). Figure 7: How to open the fit panel from the Canvas ""Tools"" menu; Here is what the fit panel looks like:. Figure 8: Fit Panel. Using this fit panel allows you to change the fit function and see the result after pressing ""Fit"". Now you should see the difference:. Figure 9: Distribution of ""fPosX"" leaf values, fitted with a Gaussian; The solid line is now passing through every data point. It fits (almost) perfectly the data!; . ‹ Histogramming; up; Compiling Your Code (also known as ACLiC) ›. Navigate through this book; Meet a TTree; Accessing a TTree With a TBrowser; Using TTree::Draw() to access a TTree; TTree and Its Data; Using a Macro to Read a TTree; Histogramming; Fit Panel; Compiling Your Code (also known as ACLiC); Accessing a TTree With a TSelector; Histogramming in a Selector; Using a TSelector with PROOF; The End. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/fit-panel.html:3598,test,tests,3598,d/fit-panel.html,https://root.cern,https://root.cern/d/fit-panel.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,"S of the regression node; Float_tfResponseresponse value in case of regression; TMVA::Node*TMVA::Node::fRightpointers to the two ""daughter"" nodes; Short_tfSelectorindex of variable used in node selection (decision tree); TMVA::DTNodeTrainingInfo*fTrainInfo; static TMVA::MsgLogger*fgLoggerstatic because there is a huge number of nodes... Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; DecisionTreeNode(); constructor of an essentially ""empty"" node floating in space. DecisionTreeNode(TMVA::Node* p, char pos); constructor of a daughter node as a daughter of 'p'. DecisionTreeNode(const TMVA::DecisionTreeNode& n, TMVA::DecisionTreeNode* parent = NULL); copy constructor of a node. It will result in an explicit copy of; the node and recursively all it's daughters. ~DecisionTreeNode(); destructor. Bool_t GoesRight(const TMVA::Event& ) const; test event if it decends the tree at this node to the right. Bool_t GoesLeft(const TMVA::Event& ) const; test event if it decends the tree at this node to the left. void SetPurity( void ); return the S/(S+B) (purity) for the node; REM: even if nodes with purity 0.01 are very PURE background nodes, they still; get a small value of the purity. void Print(ostream& os) const; print the node. void PrintRec(ostream& os) const; recursively print the node and its daughters (--> print the 'tree'). Bool_t ReadDataRecord(istream& is, UInt_t tmva_Version_Code = TMVA_VERSION_CODE); Read the data block. void ClearNodeAndAllDaughters(); clear the nodes (their S/N, Nevents etc), just keep the structure of the tree. void ResetValidationData(); temporary stored node values (number of events, etc.) that originate; not from the training but from the validation data (used in pruning). void PrintPrune(ostream& os) const; printout of the node (can be read in with ReadDataRecord). void PrintRecPrune(ostream& os) const; recursive printout of the node and its daughters. void SetCC(Double_t cc). Float_t GetSampleMin(UInt_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__DecisionTreeNode.html:6617,test,test,6617,root/html528/TMVA__DecisionTreeNode.html,https://root.cern,https://root.cern/root/html528/TMVA__DecisionTreeNode.html,4,['test'],['test']
Testability,"S->GetXaxis()->GetXmin() << Endl;; 140 Log() << kFATAL << ""<GetSeparation> signal and background""; 141 << "" histograms have different or invalid dimensions:"" << Endl;; 142 }; 143 ; 144 Int_t nstep = S->GetNbinsX();; 145 Double_t intBin = (S->GetXaxis()->GetXmax() - S->GetXaxis()->GetXmin())/nstep;; 146 Double_t nS = S->GetSumOfWeights()*intBin;; 147 Double_t nB = B->GetSumOfWeights()*intBin;; 148 ; 149 if (nS > 0 && nB > 0) {; 150 for (Int_t bin=0; bin<nstep; bin++) {; 151 Double_t s = S->GetBinContent( bin+1 )/Double_t(nS);; 152 Double_t b = B->GetBinContent( bin+1 )/Double_t(nB);; 153 // separation; 154 if (s + b > 0) separation += (s - b)*(s - b)/(s + b);; 155 }; 156 separation *= (0.5*intBin);; 157 }; 158 else {; 159 Log() << kWARNING << ""<GetSeparation> histograms with zero entries: ""; 160 << nS << "" : "" << nB << "" cannot compute separation""; 161 << Endl;; 162 separation = 0;; 163 }; 164 ; 165 return separation;; 166}; 167 ; 168////////////////////////////////////////////////////////////////////////////////; 169/// compute ""separation"" defined as; 170/// \f[; 171/// <s2> = \frac{1}{2} \int_{-\infty}^{+\infty} \frac{(S(x) - B(x))^2}{(S(x) + B(x))} dx; 172/// \f]; 173 ; 174Double_t TMVA::Tools::GetSeparation( const PDF& pdfS, const PDF& pdfB ) const; 175{; 176 Double_t xmin = pdfS.GetXmin();; 177 Double_t xmax = pdfS.GetXmax();; 178 // sanity check; 179 if (xmin != pdfB.GetXmin() || xmax != pdfB.GetXmax()) {; 180 Log() << kFATAL << ""<GetSeparation> Mismatch in PDF limits: ""; 181 << xmin << "" "" << pdfB.GetXmin() << xmax << "" "" << pdfB.GetXmax() << Endl;; 182 }; 183 ; 184 Double_t separation = 0;; 185 Int_t nstep = 100;; 186 Double_t intBin = (xmax - xmin)/Double_t(nstep);; 187 for (Int_t bin=0; bin<nstep; bin++) {; 188 Double_t x = (bin + 0.5)*intBin + xmin;; 189 Double_t s = pdfS.GetVal( x );; 190 Double_t b = pdfB.GetVal( x );; 191 // separation; 192 if (s + b > 0) separation += (s - b)*(s - b)/(s + b);; 193 }; 194 separation *= (0.5*intBin);; 195 ; 196 return se",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Tools_8cxx_source.html:5452,Log,Log,5452,doc/master/Tools_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Tools_8cxx_source.html,1,['Log'],['Log']
Testability,"S. Kölbig and B. Schorr, A program package for the Landau distribution, Computer Phys. Comm. 31 (1984) 97-111 [Erratum-ibid. 178 (2008) 972]. The same algorithms as in CERNLIB (DISLAN) is used.; Parameters. xThe argument \(x\) ; xiThe width parameter \(\xi\) ; x0The location parameter \(x_0\) . Definition at line 336 of file ProbFuncMathCore.cxx. ◆ landau_cdf_c(). double ROOT::Math::landau_cdf_c ; (; double ; x, . double ; xi = 1, . double ; x0 = 0 . ). inline . Complement of the distribution function of the Landau distribution (upper tail). . \[ D(x) = \int_{x}^{+\infty} p(x) dx \]. where p(x) is the Landau probability density function. It is implemented simply as 1. - landau_cdf; Parameters. xThe argument \(x\) ; xiThe width parameter \(\xi\) ; x0The location parameter \(x_0\) . Definition at line 402 of file ProbFuncMathCore.h. ◆ lognormal_cdf(). double ROOT::Math::lognormal_cdf ; (; double ; x, . double ; m, . double ; s, . double ; x0 = 0 . ). Cumulative distribution function of the lognormal distribution (lower tail). . \[ D(x) = \int_{-\infty}^{x} {1 \over x' \sqrt{2 \pi s^2} } e^{-(\ln{x'} - m)^2/2 s^2} dx' \]. For detailed description see Mathworld. ; Definition at line 218 of file ProbFuncMathCore.cxx. ◆ lognormal_cdf_c(). double ROOT::Math::lognormal_cdf_c ; (; double ; x, . double ; m, . double ; s, . double ; x0 = 0 . ). Complement of the cumulative distribution function of the lognormal distribution (upper tail). . \[ D(x) = \int_{x}^{+\infty} {1 \over x' \sqrt{2 \pi s^2} } e^{-(\ln{x'} - m)^2/2 s^2} dx' \]. For detailed description see Mathworld. ; Definition at line 210 of file ProbFuncMathCore.cxx. ◆ negative_binomial_cdf(). double ROOT::Math::negative_binomial_cdf ; (; unsigned int ; k, . double ; p, . double ; n . ). Cumulative distribution function of the Negative Binomial distribution Lower tail of the integral of the negative_binomial_pdf. ; Definition at line 316 of file ProbFuncMathCore.cxx. ◆ negative_binomial_cdf_c(). double ROOT::Math::nega",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__ProbFunc.html:17176,log,lognormal,17176,doc/master/group__ProbFunc.html,https://root.cern,https://root.cern/doc/master/group__ProbFunc.html,1,['log'],['lognormal']
Testability,"S/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome News. 02-02-2019 ; Full Totem Analysis based on RDataFrame and distributed on a big Spark cluster with PyRDF! ; Milosz Blaszkiewicz and Aleksandra Mnich (AGH University of Science and Technology - Poland) wanted to evaluate a set of Big Data tools for the analysis of the data from the TOTEM experiment which will enable interactive or semi-interactive work with large amounts of data. They ended up re-implementing a full Totem analysis in a declarative fashion using RDataFrame and distributing their calculations over a big Spark cluster with PyRDF.; Check it out on CDS! . 30-01-2019 ; More tests, more benchmarks! ; ROOT relies on testing, including performance testing - and we need to improve both.; . 30-01-2019 ; Better argument parsing ; Use a C++ command line argument library for defining and parsing ROOT's options.; . 30-01-2019 ; Transform GNU-makefile tests to CMake ; ROOT's test suite has several crucial tests that still try on GNU-Makefile. We need to integrate them with CMake.; . 11-07-2018 ; RDataFrame session at CHEP 2018 ; Join the CHEP 2018 BOF to discuss bout the Future of ROOT Based Analysis: sign up here and visit the indico agenda.; Too much data? Too many cores? TTree analysis is tedious? Come and enjoy an intro plus discussion of RDataFrame, ROOT's current-generation way of writing super-efficient analyses! It moves all the intricacies into ROOT's responsibility, leaving you simply with a declarative formulation of the filters and computations that make up your analysis.; . 17-01-2018 ; ROOT Users' Workshop 2018 ; The ROOT team would like to invite you to the 11th ROOT Users' Workshop. This time we meet in Sarajevo, the capital of Bosnia and Herzegovina -; a buzzing melting pot of cultures since centuries.; The workshop features four days of presentations and discussions on everything ROOT:; what works for you, what doesn't and how ROOT evolves to",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/news.html:2707,test,tests,2707,d/news.html,https://root.cern,https://root.cern/d/news.html,3,['test'],"['test', 'tests']"
Testability,"S; : Building event vectors for type 2 Background; : Dataset[Category_Likelihood_2_dsi] : create input formulas for tree TreeB; <HEADER> DataSetFactory : [Category_Likelihood_2_dsi] : Number of events in input trees; : Dataset[Category_Likelihood_2_dsi] : Signal requirement: ""abs(eta)>1.3""; : Dataset[Category_Likelihood_2_dsi] : Signal -- number of events passed: 4877 / sum of weights: 4877 ; : Dataset[Category_Likelihood_2_dsi] : Signal -- efficiency : 0.4877; : Dataset[Category_Likelihood_2_dsi] : Background requirement: ""abs(eta)>1.3""; : Dataset[Category_Likelihood_2_dsi] : Background -- number of events passed: 4866 / sum of weights: 4866 ; : Dataset[Category_Likelihood_2_dsi] : Background -- efficiency : 0.4866; : Dataset[Category_Likelihood_2_dsi] : you have opted for scaling the number of requested training/testing events; : to be scaled by the preselection efficiency; : ( 0 * 0.4877 preselection efficiency); : Dataset[Category_Likelihood_2_dsi] : you have opted for scaling the number of requested training/testing events; : to be scaled by the preselection efficiency; : ( 0 * 0.4866 preselection efficiency); : Number of training and testing events; : ---------------------------------------------------------------------------; : Signal -- training events : 2438; : Signal -- testing events : 2438; : Signal -- training and testing events: 4876; : Dataset[Category_Likelihood_2_dsi] : Signal -- due to the preselection a scaling factor has been applied to the numbers of requested events: 0.4877; : Background -- training events : 2433; : Background -- testing events : 2433; : Background -- training and testing events: 4866; : Dataset[Category_Likelihood_2_dsi] : Background -- due to the preselection a scaling factor has been applied to the numbers of requested events: 0.4866; : ; <HEADER> DataSetInfo : Correlation matrix (Signal):; : ----------------------------------------; : var1 var2 var3 var4; : var1: +1.000 -0.005 +0.002 -0.039; : var2: -0.005 +1.000 +0.011 -0.0",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassificationCategory_8C.html:17379,test,testing,17379,doc/master/TMVAClassificationCategory_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassificationCategory_8C.html,1,['test'],['testing']
Testability,"SE); virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTProofPlayer::SetCurrentQuery(TQueryResult* q); virtual voidTProofPlayer::SetDispatchTimer(Bool_t on = kTRUE); virtual voidTProofPlayer::SetDrawFeedbackOption(TDrawFeedback* f, Option_t* opt); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTProofPlayer::SetExitStatus(TVirtualProofPlayer::EExitStatus st); virtual voidTProofPlayerRemote::SetInitTime(); virtual voidTProofPlayer::SetMaxDrawQueries(Int_t max); virtual voidTProofPlayerRemote::SetMerging(Bool_t on = kTRUE); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTProofPlayer::SetOutputFilePath(const char* fp); voidTProofPlayer::SetProcessing(Bool_t on = kTRUE); virtual voidTProofPlayer::SetStopTimer(Bool_t on = kTRUE, Bool_t abort = kFALSE, Int_t timeout = 0); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidTProofPlayerRemote::StopProcess(Bool_t abort, Int_t timeout = -1); virtual voidStoreFeedback(TObject* slave, TList* out); virtual voidTProofPlayerRemote::StoreOutput(TList* out); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTProofPlayer::UpdateAutoBin(const char* name, Double_t& xmin, Double_t& xmax, Double_t& ymin, Double_t& ymax, Double_t& zmin, Double_t& zmax); virtual voidTProofPlayer::UpdateProgressInfo(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofPlayerLite.html:11689,Test,TestBit,11689,root/html534/TProofPlayerLite.html,https://root.cern,https://root.cern/root/html534/TProofPlayerLite.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"SE);; 1235 TVirtualGeoPainter *painter = fGeoManager->GetGeomPainter();; 1236 if (option && option[0] > 0) {; 1237 painter->DrawVolume(this, option);; 1238 } else {; 1239 painter->DrawVolume(this, gEnv->GetValue(""Viewer3D.DefaultDrawOption"", """"));; 1240 }; 1241}; 1242 ; 1243////////////////////////////////////////////////////////////////////////////////; 1244/// Perform an extensive sampling to find which type of voxelization is; 1245/// most efficient.; 1246 ; 1247Bool_t TGeoVolume::OptimizeVoxels(); 1248{; 1249 printf(""Optimizing volume %s ...\n"", GetName());; 1250 TVirtualGeoPainter *painter = fGeoManager->GetGeomPainter();; 1251 return painter->TestVoxels(this);; 1252}; 1253 ; 1254////////////////////////////////////////////////////////////////////////////////; 1255/// Print volume info; 1256 ; 1257void TGeoVolume::Print(Option_t *) const; 1258{; 1259 printf(""== Volume: %s type %s positioned %d times\n"", GetName(), ClassName(), fRefCount);; 1260 InspectShape();; 1261 InspectMaterial();; 1262}; 1263 ; 1264////////////////////////////////////////////////////////////////////////////////; 1265/// paint volume; 1266 ; 1267void TGeoVolume::Paint(Option_t *option); 1268{; 1269 TVirtualGeoPainter *painter = fGeoManager->GetGeomPainter();; 1270 painter->SetTopVolume(this);; 1271 // painter->Paint(option);; 1272 if (option && option[0] > 0) {; 1273 painter->Paint(option);; 1274 } else {; 1275 painter->Paint(gEnv->GetValue(""Viewer3D.DefaultDrawOption"", """"));; 1276 }; 1277}; 1278 ; 1279////////////////////////////////////////////////////////////////////////////////; 1280/// Print the voxels for this volume.; 1281 ; 1282void TGeoVolume::PrintVoxels() const; 1283{; 1284 if (fVoxels); 1285 fVoxels->Print();; 1286}; 1287 ; 1288////////////////////////////////////////////////////////////////////////////////; 1289/// Recreate the content of the other volume without pointer copying. Voxels are; 1290/// ignored and supposed to be created in a later step via Voxelize.; 1291 ; 1292voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoVolume_8cxx_source.html:48614,Test,TestVoxels,48614,doc/master/TGeoVolume_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoVolume_8cxx_source.html,1,['Test'],['TestVoxels']
Testability,"SE, Int_t* err = 0); Bool_tTApplication::QuitOpt() const; virtual voidTApplication::Raise(); virtual Int_tTObject::Read(const char* name); Int_tReceiveFile(const char* file, Bool_t bin, Long64_t size); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTApplication::RemoveIdleTimer(); voidReset(const char* dir); voidTObject::ResetBit(UInt_t f); Bool_tTApplication::ReturnFromRun() const; virtual voidTApplication::ReturnPressed(char* text)SIGNAL ; virtual voidRun(Bool_t retrn = kFALSE); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidSendLogFile(Int_t status = 0, Int_t start = -1, Int_t end = -1); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTApplication::SetEchoMode(Bool_t mode); virtual voidTApplication::SetIdleTimer(UInt_t idleTimeInSec, const char* command); static voidTObject::SetObjectStat(Bool_t stat); voidTApplication::SetReturnFromRun(Bool_t ret); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTApplication::Show(); virtual voidShowMembers(TMemberInspector& insp); virtual voidTApplication::StartIdleing(); virtual voidTApplication::StopIdleing(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTerminate(Int_t status); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; const char*TApplication::WorkingDirectory() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TApplicationServer.html:9960,Test,TestBit,9960,root/html528/TApplicationServer.html,https://root.cern,https://root.cern/root/html528/TApplicationServer.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,SLMonteFunctionWrapper.h;  GSLMultiFit.h;  GSLMultiFitFunctionAdapter.h;  GSLMultiFitFunctionWrapper.h;  GSLMultiMinFunctionAdapter.h;  GSLMultiMinFunctionWrapper.h;  GSLMultiMinimizer.h;  GSLMultiRootFinder.cxx;  GSLMultiRootFunctionAdapter.h;  GSLMultiRootFunctionWrapper.h;  GSLMultiRootSolver.h;  GSLNLSMinimizer.cxx;  GSLQRngWrapper.h;  GSLQuasiRandom.cxx;  GSLRndmEngines.cxx;  GSLRngROOTWrapper.h;  GSLRngWrapper.h;  GSLRootFdFSolver.h;  GSLRootFinder.cxx;  GSLRootFinderDeriv.cxx;  GSLRootFSolver.h;  GSLRootHelper.cxx;  GSLSimAnMinimizer.cxx;  GSLSimAnnealing.cxx;  Interpolator.cxx;  KelvinFunctions.cxx;  MCParameters.cxx;  MultiNumGradFunction.cxx;  PdfFuncMathMore.cxx;  Polynomial.cxx;  QuantFuncMathMore.cxx;  RootFinderAlgorithms.cxx;  SpecFuncMathMore.cxx;  Vavilov.cxx;  VavilovAccurate.cxx;  VavilovAccurateCdf.cxx;  VavilovAccuratePdf.cxx;  VavilovAccurateQuantile.cxx;  VavilovFast.cxx;  zsolve_cubic.cxx;  ► test;  piRandom.C;  pirndm.C;  simanTSP.cxx;  testChebyshev.cxx;  testDerivation.cxx;  testFunctor.cxx;  testGSLIntegration.cxx;  testGSLRootFinder.cxx;  testInterpolation.cxx;  testMCIntegration.cxx;  testMinimization1D.cxx;  testMultiRootFinder.cxx;  testPermute.cxx;  testQuasiRandom.cxx;  testRandom.cxx;  testRandomDist.cxx;  testSpecFunc.cxx;  testStatFunc.cxx;  testVavilov.cxx;  UnuRanDist.h;  VavilovTest.cxx;  VavilovTest.h;  ► matrix;  ► inc;  LinkDef.h;  TDecompBase.h;  TDecompBK.h;  TDecompChol.h;  TDecompLU.h;  TDecompQRH.h;  TDecompSparse.h;  TDecompSVD.h;  TMatrix.h;  TMatrixD.h;  TMatrixDBase.h;  TMatrixDBasefwd.h;  TMatrixDEigen.h;  TMatrixDfwd.h;  TMatrixDLazy.h;  TMatrixDSparse.h;  TMatrixDSparsefwd.h;  TMatrixDSym.h;  TMatrixDSymEigen.h;  TMatrixDSymfwd.h;  TMatrixDUtils.h;  TMatrixDUtilsfwd.h;  TMatrixF.h;  TMatrixFBase.h;  TMatrixFBasefwd.h;  TMatrixFfwd.h;  TMatrixFLazy.h;  TMatrixFSparse.h;  TMatrixFSparsefwd.h;  TMatrixFSym.h;  TMatrixFSymfwd.h;  TMatrixFUtils.h;  TMatrixFUtilsfwd.h;  TMatrixT.h;  TMatrixTBase.h;  TMatrixTCramerInv.h,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:49168,test,testDerivation,49168,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,1,['test'],['testDerivation']
Testability,SLMonteFunctionWrapper.h;  GSLMultiFit.h;  GSLMultiFitFunctionAdapter.h;  GSLMultiFitFunctionWrapper.h;  GSLMultiMinFunctionAdapter.h;  GSLMultiMinFunctionWrapper.h;  GSLMultiMinimizer.h;  GSLMultiRootFinder.cxx;  GSLMultiRootFunctionAdapter.h;  GSLMultiRootFunctionWrapper.h;  GSLMultiRootSolver.h;  GSLNLSMinimizer.cxx;  GSLQRngWrapper.h;  GSLQuasiRandom.cxx;  GSLRndmEngines.cxx;  GSLRngROOTWrapper.h;  GSLRngWrapper.h;  GSLRootFdFSolver.h;  GSLRootFinder.cxx;  GSLRootFinderDeriv.cxx;  GSLRootFSolver.h;  GSLRootHelper.cxx;  GSLSimAnMinimizer.cxx;  GSLSimAnnealing.cxx;  Interpolator.cxx;  KelvinFunctions.cxx;  MCParameters.cxx;  MultiNumGradFunction.cxx;  PdfFuncMathMore.cxx;  Polynomial.cxx;  QuantFuncMathMore.cxx;  RootFinderAlgorithms.cxx;  SpecFuncMathMore.cxx;  Vavilov.cxx;  VavilovAccurate.cxx;  VavilovAccurateCdf.cxx;  VavilovAccuratePdf.cxx;  VavilovAccurateQuantile.cxx;  VavilovFast.cxx;  zsolve_cubic.cxx;  ► test;  piRandom.C;  pirndm.C;  simanTSP.cxx;  testChebyshev.cxx;  testDerivation.cxx;  testFunctor.cxx;  testGSLIntegration.cxx;  testGSLRootFinder.cxx;  testInterpolation.cxx;  testMCIntegration.cxx;  testMinimization1D.cxx;  testMultiRootFinder.cxx;  testPermute.cxx;  testQuasiRandom.cxx;  testRandom.cxx;  testRandomDist.cxx;  testSpecFunc.cxx;  testStatFunc.cxx;  testVavilov.cxx;  UnuRanDist.h;  VavilovTest.cxx;  VavilovTest.h;  ► matrix;  ► inc;  TDecompBase.h;  TDecompBK.h;  TDecompChol.h;  TDecompLU.h;  TDecompQRH.h;  TDecompSparse.h;  TDecompSVD.h;  TMatrix.h;  TMatrixD.h;  TMatrixDBase.h;  TMatrixDBasefwd.h;  TMatrixDEigen.h;  TMatrixDfwd.h;  TMatrixDLazy.h;  TMatrixDSparse.h;  TMatrixDSparsefwd.h;  TMatrixDSym.h;  TMatrixDSymEigen.h;  TMatrixDSymfwd.h;  TMatrixDUtils.h;  TMatrixDUtilsfwd.h;  TMatrixF.h;  TMatrixFBase.h;  TMatrixFBasefwd.h;  TMatrixFfwd.h;  TMatrixFLazy.h;  TMatrixFSparse.h;  TMatrixFSparsefwd.h;  TMatrixFSym.h;  TMatrixFSymfwd.h;  TMatrixFUtils.h;  TMatrixFUtilsfwd.h;  TMatrixT.h;  TMatrixTBase.h;  TMatrixTCramerInv.h;  TMatrixTL,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/files.html:47746,test,testDerivation,47746,doc/v610/files.html,https://root.cern,https://root.cern/doc/v610/files.html,1,['test'],['testDerivation']
Testability,SLMultiFitFunctionAdapter.h;  GSLMultiFitFunctionWrapper.h;  GSLMultiMinFunctionAdapter.h;  GSLMultiMinFunctionWrapper.h;  GSLMultiMinimizer.h;  GSLMultiRootFinder.cxx;  GSLMultiRootFunctionAdapter.h;  GSLMultiRootFunctionWrapper.h;  GSLMultiRootSolver.h;  GSLNLSMinimizer.cxx;  GSLQRngWrapper.h;  GSLQuasiRandom.cxx;  GSLRndmEngines.cxx;  GSLRngWrapper.h;  GSLRootFdFSolver.h;  GSLRootFinder.cxx;  GSLRootFinderDeriv.cxx;  GSLRootFSolver.h;  GSLRootHelper.cxx;  GSLSimAnMinimizer.cxx;  GSLSimAnnealing.cxx;  Interpolator.cxx;  KelvinFunctions.cxx;  MCParameters.cxx;  MultiNumGradFunction.cxx;  PdfFuncMathMore.cxx;  Polynomial.cxx;  QuantFuncMathMore.cxx;  RootFinderAlgorithms.cxx;  SpecFuncMathMore.cxx;  Vavilov.cxx;  VavilovAccurate.cxx;  VavilovAccurateCdf.cxx;  VavilovAccuratePdf.cxx;  VavilovAccurateQuantile.cxx;  VavilovFast.cxx;  zsolve_cubic.cxx;  ► test;  piRandom.C;  pirndm.C;  simanTSP.cxx;  testChebyshev.cxx;  testDerivation.cxx;  testFunctor.cxx;  testGSLIntegration.cxx;  testGSLRootFinder.cxx;  testInterpolation.cxx;  testMCIntegration.cxx;  testMinimization1D.cxx;  testMultiRootFinder.cxx;  testPermute.cxx;  testQuasiRandom.cxx;  testRandom.cxx;  testRandomDist.cxx;  testSpecFunc.cxx;  testStatFunc.cxx;  testVavilov.cxx;  UnuRanDist.h;  VavilovTest.cxx;  VavilovTest.h;  ► matrix;  ► inc;  LinkDef.h;  TDecompBase.h;  TDecompBK.h;  TDecompChol.h;  TDecompLU.h;  TDecompQRH.h;  TDecompSparse.h;  TDecompSVD.h;  TMatrix.h;  TMatrixD.h;  TMatrixDBase.h;  TMatrixDBasefwd.h;  TMatrixDEigen.h;  TMatrixDfwd.h;  TMatrixDLazy.h;  TMatrixDSparse.h;  TMatrixDSparsefwd.h;  TMatrixDSym.h;  TMatrixDSymEigen.h;  TMatrixDSymfwd.h;  TMatrixDUtils.h;  TMatrixDUtilsfwd.h;  TMatrixF.h;  TMatrixFBase.h;  TMatrixFBasefwd.h;  TMatrixFfwd.h;  TMatrixFLazy.h;  TMatrixFSparse.h;  TMatrixFSparsefwd.h;  TMatrixFSym.h;  TMatrixFSymfwd.h;  TMatrixFUtils.h;  TMatrixFUtilsfwd.h;  TMatrixT.h;  TMatrixTBase.h;  TMatrixTCramerInv.h;  TMatrixTLazy.h;  TMatrixTSparse.h;  TMatrixTSym.h;  TMatrixTSy,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html606/files.html:48864,test,testGSLRootFinder,48864,root/html606/files.html,https://root.cern,https://root.cern/root/html606/files.html,1,['test'],['testGSLRootFinder']
Testability,SLNLSMinimizer.cxx;  GSLQRngWrapper.h;  GSLQuasiRandom.cxx;  GSLRndmEngines.cxx;  GSLRngROOTWrapper.h;  GSLRngWrapper.h;  GSLRootFdFSolver.h;  GSLRootFinder.cxx;  GSLRootFinderDeriv.cxx;  GSLRootFSolver.h;  GSLRootHelper.cxx;  GSLSimAnMinimizer.cxx;  GSLSimAnnealing.cxx;  Interpolator.cxx;  KelvinFunctions.cxx;  MCParameters.cxx;  MultiNumGradFunction.cxx;  PdfFuncMathMore.cxx;  Polynomial.cxx;  QuantFuncMathMore.cxx;  RootFinderAlgorithms.cxx;  SpecFuncMathMore.cxx;  Vavilov.cxx;  VavilovAccurate.cxx;  VavilovAccurateCdf.cxx;  VavilovAccuratePdf.cxx;  VavilovAccurateQuantile.cxx;  VavilovFast.cxx;  zsolve_cubic.cxx;  ► test;  piRandom.C;  pirndm.C;  simanTSP.cxx;  testChebyshev.cxx;  testDerivation.cxx;  testFunctor.cxx;  testGSLIntegration.cxx;  testGSLRootFinder.cxx;  testInterpolation.cxx;  testMCIntegration.cxx;  testMinimization1D.cxx;  testMultiRootFinder.cxx;  testPermute.cxx;  testQuasiRandom.cxx;  testRandom.cxx;  testRandomDist.cxx;  testSpecFunc.cxx;  testStatFunc.cxx;  testVavilov.cxx;  UnuRanDist.h;  VavilovTest.cxx;  VavilovTest.h;  ► matrix;  ► inc;  LinkDef.h;  TDecompBase.h;  TDecompBK.h;  TDecompChol.h;  TDecompLU.h;  TDecompQRH.h;  TDecompSparse.h;  TDecompSVD.h;  TMatrix.h;  TMatrixD.h;  TMatrixDBase.h;  TMatrixDBasefwd.h;  TMatrixDEigen.h;  TMatrixDfwd.h;  TMatrixDLazy.h;  TMatrixDSparse.h;  TMatrixDSparsefwd.h;  TMatrixDSym.h;  TMatrixDSymEigen.h;  TMatrixDSymfwd.h;  TMatrixDUtils.h;  TMatrixDUtilsfwd.h;  TMatrixF.h;  TMatrixFBase.h;  TMatrixFBasefwd.h;  TMatrixFfwd.h;  TMatrixFLazy.h;  TMatrixFSparse.h;  TMatrixFSparsefwd.h;  TMatrixFSym.h;  TMatrixFSymfwd.h;  TMatrixFUtils.h;  TMatrixFUtilsfwd.h;  TMatrixT.h;  TMatrixTBase.h;  TMatrixTCramerInv.h;  TMatrixTLazy.h;  TMatrixTSparse.h;  TMatrixTSym.h;  TMatrixTSymCramerInv.h;  TMatrixTUtils.h;  TVector.h;  TVectorD.h;  TVectorDfwd.h;  TVectorF.h;  TVectorFfwd.h;  TVectorfwd.h;  TVectorT.h;  ► src;  TDecompBase.cxx;  TDecompBK.cxx;  TDecompChol.cxx;  TDecompLU.cxx;  TDecompQRH.cxx;  TDecompSpars,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:49471,test,testVavilov,49471,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,1,['test'],['testVavilov']
Testability,SLNLSMinimizer.cxx;  GSLQRngWrapper.h;  GSLQuasiRandom.cxx;  GSLRndmEngines.cxx;  GSLRngROOTWrapper.h;  GSLRngWrapper.h;  GSLRootFdFSolver.h;  GSLRootFinder.cxx;  GSLRootFinderDeriv.cxx;  GSLRootFSolver.h;  GSLRootHelper.cxx;  GSLSimAnMinimizer.cxx;  GSLSimAnnealing.cxx;  Interpolator.cxx;  KelvinFunctions.cxx;  MCParameters.cxx;  MultiNumGradFunction.cxx;  PdfFuncMathMore.cxx;  Polynomial.cxx;  QuantFuncMathMore.cxx;  RootFinderAlgorithms.cxx;  SpecFuncMathMore.cxx;  Vavilov.cxx;  VavilovAccurate.cxx;  VavilovAccurateCdf.cxx;  VavilovAccuratePdf.cxx;  VavilovAccurateQuantile.cxx;  VavilovFast.cxx;  zsolve_cubic.cxx;  ► test;  piRandom.C;  pirndm.C;  simanTSP.cxx;  testChebyshev.cxx;  testDerivation.cxx;  testFunctor.cxx;  testGSLIntegration.cxx;  testGSLRootFinder.cxx;  testInterpolation.cxx;  testMCIntegration.cxx;  testMinimization1D.cxx;  testMultiRootFinder.cxx;  testPermute.cxx;  testQuasiRandom.cxx;  testRandom.cxx;  testRandomDist.cxx;  testSpecFunc.cxx;  testStatFunc.cxx;  testVavilov.cxx;  UnuRanDist.h;  VavilovTest.cxx;  VavilovTest.h;  ► matrix;  ► inc;  TDecompBase.h;  TDecompBK.h;  TDecompChol.h;  TDecompLU.h;  TDecompQRH.h;  TDecompSparse.h;  TDecompSVD.h;  TMatrix.h;  TMatrixD.h;  TMatrixDBase.h;  TMatrixDBasefwd.h;  TMatrixDEigen.h;  TMatrixDfwd.h;  TMatrixDLazy.h;  TMatrixDSparse.h;  TMatrixDSparsefwd.h;  TMatrixDSym.h;  TMatrixDSymEigen.h;  TMatrixDSymfwd.h;  TMatrixDUtils.h;  TMatrixDUtilsfwd.h;  TMatrixF.h;  TMatrixFBase.h;  TMatrixFBasefwd.h;  TMatrixFfwd.h;  TMatrixFLazy.h;  TMatrixFSparse.h;  TMatrixFSparsefwd.h;  TMatrixFSym.h;  TMatrixFSymfwd.h;  TMatrixFUtils.h;  TMatrixFUtilsfwd.h;  TMatrixT.h;  TMatrixTBase.h;  TMatrixTCramerInv.h;  TMatrixTLazy.h;  TMatrixTSparse.h;  TMatrixTSym.h;  TMatrixTSymCramerInv.h;  TMatrixTUtils.h;  TVector.h;  TVectorD.h;  TVectorDfwd.h;  TVectorF.h;  TVectorFfwd.h;  TVectorfwd.h;  TVectorT.h;  ► src;  TDecompBase.cxx;  TDecompBK.cxx;  TDecompChol.cxx;  TDecompLU.cxx;  TDecompQRH.cxx;  TDecompSparse.cxx;  TDec,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/files.html:48049,test,testVavilov,48049,doc/v610/files.html,https://root.cern,https://root.cern/doc/v610/files.html,1,['test'],['testVavilov']
Testability,"SLRandomEngine::Dir2Dvoid Dir2D(double &x, double &y) constgenerate random numbers in a 2D circle of radious 1Definition GSLRndmEngines.cxx:348; ROOT::Math::GSLRandomEngine::IntRndmunsigned long IntRndm() constGenerate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than ...Definition GSLRndmEngines.h:133; ROOT::Math::GSLRandomEngine::Terminatevoid Terminate()delete pointer to contained rngDefinition GSLRndmEngines.cxx:131; ROOT::Math::GSLRandomEngine::GaussianNDvoid GaussianND(size_t dim, const double *pars, const double *covmat, double *genpars, double *lmat=nullptr) constMultivariate Gaussian distribution.Definition GSLRndmEngines.cxx:241; ROOT::Math::GSLRandomEngine::Namestd::string Name() constreturn name of generatorDefinition GSLRndmEngines.cxx:191; ROOT::Math::GSLRandomEngine::GaussianRatiodouble GaussianRatio(double sigma) constGaussian distribution - Ratio method.Definition GSLRndmEngines.cxx:221; ROOT::Math::GSLRandomEngine::Logisticdouble Logistic(double a) constLogistic distribution.Definition GSLRndmEngines.cxx:336; ROOT::Math::GSLRandomEngine::RndmIntunsigned long RndmInt(unsigned long max) constGenerate an integer number between [0,max-1] (including 0 and max-1) if max is larger than available ...Definition GSLRndmEngines.cxx:147; ROOT::Math::GSLRandomEngine::SetTypevoid SetType(GSLRngWrapper *r)internal method used by the derived class to set the type of generatorsDefinition GSLRndmEngines.h:315; ROOT::Math::GSLRandomEngine::Initializevoid Initialize()initialize the generator If no rng is present the default one based on Mersenne and Twister is create...Definition GSLRndmEngines.cxx:124; ROOT::Math::GSLRandomEngine::tDistdouble tDist(double nu) constt student distributionDefinition GSLRndmEngines.cxx:324; ROOT::Math::GSLRandomEngine::operator=GSLRandomEngine & operator=(const GSLRandomEngine &eng)Assignment operator : make a deep copy of the contained GSL generator.Definition GSLRndmEngines.cxx:113; ROOT::Math::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GSLRndmEngines_8h_source.html:21723,Log,Logisticdouble,21723,doc/master/GSLRndmEngines_8h_source.html,https://root.cern,https://root.cern/doc/master/GSLRndmEngines_8h_source.html,2,['Log'],"['Logistic', 'Logisticdouble']"
Testability,"SQL operations, done after start transaction. ; Definition at line 1589 of file TSQLFile.cxx. ◆ SQLSmallTextType(). const char * TSQLFile::SQLSmallTextType ; (; ); const. inlineprotected . Definition at line 132 of file TSQLFile.h. ◆ SQLSmallTextTypeLimit(). Int_t TSQLFile::SQLSmallTextTypeLimit ; (; ); const. inlineprotected . Definition at line 133 of file TSQLFile.h. ◆ SQLStartTransaction(). Bool_t TSQLFile::SQLStartTransaction ; (; ). protected . Start SQL transaction. ; Definition at line 1573 of file TSQLFile.cxx. ◆ SQLStatement(). TSQLStatement * TSQLFile::SQLStatement ; (; const char * ; cmd, . Int_t ; bufsize = 1000 . ). protected . Produces SQL statement for currently conected DB server. ; Definition at line 1439 of file TSQLFile.cxx. ◆ SQLStrIdColumn(). const char * TSQLFile::SQLStrIdColumn ; (; ); const. inlineprotected . Definition at line 141 of file TSQLFile.h. ◆ SQLTestTable(). Bool_t TSQLFile::SQLTestTable ; (; const char * ; tablename). protected . Test, if table of specified name exists. ; Definition at line 1493 of file TSQLFile.cxx. ◆ SQLValueQuote(). const char * TSQLFile::SQLValueQuote ; (; ); const. inlineprotected . Definition at line 143 of file TSQLFile.h. ◆ StartLogFile(). void TSQLFile::StartLogFile ; (; const char * ; fname). start logging of all SQL statements in specified file ; Definition at line 447 of file TSQLFile.cxx. ◆ StartTransaction(). Bool_t TSQLFile::StartTransaction ; (; ). Start user transaction. ; This can be usesful, when big number of objects should be stored in data base and commitment required only if all operations were successful. In that case in the end of all operations method Commit() should be called. If operation on user-level is looks like not successful, method Rollback() will return database data and TSQLFile instance to previous state. In MySQL not all tables types support transaction mode of operation. See SetTablesType() method for details . ; Definition at line 565 of file TSQLFile.cxx. ◆ StopLogFile(). ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLFile.html:95837,Test,Test,95837,doc/master/classTSQLFile.html,https://root.cern,https://root.cern/doc/master/classTSQLFile.html,1,['Test'],['Test']
Testability,"SROOT graphics.; There is a server snapshot of running macro tutorials/http/httpserver.C from ROOT tutorials.; One could specify several options when creating http server. They could be add as additional URL parameters to the constructor arguments like:; auto serv = new THttpServer(""http:8080?loopback&thrds=2"");; Following URL parameters are supported:. Name; Description. thrds=N; number of threads used by the civetweb (default is 10). top=name; configure top name, visible in the web browser. auth_file=filename; authentication file name, created with htdigets utility. auth_domain=domain; authentication domain. loopback; bind specified port to loopback 127.0.0.1 address. debug; enable debug mode, server returns html page with request info. websocket_timeout=tm; set web sockets timeout in seconds (default 300). websocket_disable; disable web sockets handling (default enabled). cors=domain; define value for CORS header “Access-Control-Allow-Origin” in server response. log=filename; configure civetweb log file. max_age=value; configures “Cache-Control: max_age=value” http header for all file-related requests, default 3600. nocache; try to fully disable cache control for file requests. winsymlinks=no; do not resolve symbolic links on file system (Windows only), default true. dirlisting=no; enable/disable directory listing for browsing filesystem (default no). If necessary, one could bind http server to specific IP address like:; new THttpServer(""http:192.168.1.17:8080""); One also can provide extra arguments for THttpServer itself:. Name; Description. readonly, ro; use server in read-only mode (default). readwrite, rw; use server in read-write mode. global; let scan global directories for canvases and files (default). noglobal; disable scan of global directories. basic_sniffer; use basic TRootSniffer without support of hist, gpad, graph, tree classes. Example:; new THttpServer(""http:8080;ro;noglobal""); 1.2 Registering objects; At any time, one could register other objects ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/HttpServer/HttpServer.html:2354,log,log,2354,root/htmldoc/guides/HttpServer/HttpServer.html,https://root.cern,https://root.cern/root/htmldoc/guides/HttpServer/HttpServer.html,2,['log'],['log']
Testability,"STATS; » RooStats::ProfileLikelihoodTestStat. class RooStats::ProfileLikelihoodTestStat: public RooStats::TestStatistic. ProfileLikelihoodTestStat is an implementation of the TestStatistic interface that calculates the profile; likelihood ratio at a particular parameter point given a dataset. It does not constitute a statistical test, for that one may either use:. the ProfileLikelihoodCalculator that relies on asymptotic properties of the Profile Likelihood Ratio; the Neyman Construction classes with this class as a test statistic; the Hybrid Calculator class with this class as a test statistic. Function Members (Methods); public:. virtual~ProfileLikelihoodTestStat(); static TClass*Class(); virtual Double_tEvaluate(RooAbsData& data, RooArgSet& paramsOfInterest); virtual const TStringGetVarName() const; virtual TClass*IsA() const; RooStats::TestStatistic&RooStats::TestStatistic::operator=(const RooStats::TestStatistic&); RooStats::ProfileLikelihoodTestStatProfileLikelihoodTestStat(); RooStats::ProfileLikelihoodTestStatProfileLikelihoodTestStat(RooAbsPdf& pdf); RooStats::ProfileLikelihoodTestStatProfileLikelihoodTestStat(const RooStats::ProfileLikelihoodTestStat&); virtual boolRooStats::TestStatistic::PValueIsRightTail() const; virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. const RooArgSet*fCachedBestFitParams; RooAbsData*fLastData; RooNLLVar*fNll; RooAbsPdf*fPdf; RooProfileLL*fProfile. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ProfileLikelihoodTestStat(); Proof constructor. Do not use. ProfileLikelihoodTestStat(RooAbsPdf& pdf). virtual ~ProfileLikelihoodTestStat(); delete fRand;; delete fTestStatistic;. Double_t Evaluate(RooAbsData& data, RooArgSet& paramsOfInterest); Main interface to evaluate the test statistic on a dataset. const TString GetVarName() const; {return ""Profile Likelihood Ratio"";}. » Author: Kyle Cranmer, Lorenz",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__ProfileLikelihoodTestStat.html:1083,Test,TestStatistic,1083,root/html528/RooStats__ProfileLikelihoodTestStat.html,https://root.cern,https://root.cern/root/html528/RooStats__ProfileLikelihoodTestStat.html,4,['Test'],['TestStatistic']
Testability,"STM for Classification performance; : ; : Setting up tf.keras; : Using TensorFlow version 2; : Use Keras version from TensorFlow : tf.keras; : Applying GPU option: gpu_options.allow_growth=True; : Disabled TF eager execution when evaluating model ; : Loading Keras Model ; : Loaded model from file: trained_model_LSTM.h5; PyKeras_LSTM : [dataset] : Evaluation of PyKeras_LSTM on testing sample (800 events); : Elapsed time for evaluation of 800 events: 0.202 sec ; Factory : Test method: BDTG for Classification performance; : ; BDTG : [dataset] : Evaluation of BDTG on testing sample (800 events); : Elapsed time for evaluation of 800 events: 0.00597 sec ; Factory : ␛[1mEvaluate all methods␛[0m; Factory : Evaluate classifier: TMVA_LSTM; : ; TMVA_LSTM : [dataset] : Loop over test events and fill histograms with classifier response...; : ; : Evaluate deep neural network on CPU using batches with size = 1000; : ; : Dataset[dataset] : variable plots are not produces ! The number of variables is 300 , it is larger than 200; Factory : Evaluate classifier: TMVA_DNN; : ; TMVA_DNN : [dataset] : Loop over test events and fill histograms with classifier response...; : ; : Evaluate deep neural network on CPU using batches with size = 1000; : ; : Dataset[dataset] : variable plots are not produces ! The number of variables is 300 , it is larger than 200; Factory : Evaluate classifier: PyKeras_LSTM; : ; PyKeras_LSTM : [dataset] : Loop over test events and fill histograms with classifier response...; : ; : Dataset[dataset] : variable plots are not produces ! The number of variables is 300 , it is larger than 200; Factory : Evaluate classifier: BDTG; : ; BDTG : [dataset] : Loop over test events and fill histograms with classifier response...; : ; : Dataset[dataset] : variable plots are not produces ! The number of variables is 300 , it is larger than 200; : ; : Evaluation results ranked by best signal efficiency and purity (area); : ---------------------------------------------------------",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__RNN__Classification_8py.html:46706,test,test,46706,doc/master/TMVA__RNN__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__RNN__Classification_8py.html,1,['test'],['test']
Testability,"STM for Classification performance; : ; : Setting up tf.keras; : Using TensorFlow version 2; : Use Keras version from TensorFlow : tf.keras; : Applying GPU option: gpu_options.allow_growth=True; : Disabled TF eager execution when evaluating model ; : Loading Keras Model ; : Loaded model from file: trained_model_LSTM.h5; PyKeras_LSTM : [dataset] : Evaluation of PyKeras_LSTM on testing sample (800 events); : Elapsed time for evaluation of 800 events: 0.249 sec ; Factory : Test method: BDTG for Classification performance; : ; BDTG : [dataset] : Evaluation of BDTG on testing sample (800 events); : Elapsed time for evaluation of 800 events: 0.00679 sec ; Factory : ␛[1mEvaluate all methods␛[0m; Factory : Evaluate classifier: TMVA_LSTM; : ; TMVA_LSTM : [dataset] : Loop over test events and fill histograms with classifier response...; : ; : Evaluate deep neural network on CPU using batches with size = 1000; : ; : Dataset[dataset] : variable plots are not produces ! The number of variables is 300 , it is larger than 200; Factory : Evaluate classifier: TMVA_DNN; : ; TMVA_DNN : [dataset] : Loop over test events and fill histograms with classifier response...; : ; : Evaluate deep neural network on CPU using batches with size = 1000; : ; : Dataset[dataset] : variable plots are not produces ! The number of variables is 300 , it is larger than 200; Factory : Evaluate classifier: PyKeras_LSTM; : ; PyKeras_LSTM : [dataset] : Loop over test events and fill histograms with classifier response...; : ; : Dataset[dataset] : variable plots are not produces ! The number of variables is 300 , it is larger than 200; Factory : Evaluate classifier: BDTG; : ; BDTG : [dataset] : Loop over test events and fill histograms with classifier response...; : ; : Dataset[dataset] : variable plots are not produces ! The number of variables is 300 , it is larger than 200; : ; : Evaluation results ranked by best signal efficiency and purity (area); : ---------------------------------------------------------",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html:54313,test,test,54313,doc/master/TMVA__RNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html,1,['test'],['test']
Testability,"STool::MultiBuildConfig Build configuration object for RooSimWSTool with multiple prototype p.d.f.; RooSimWSTool::ObjBuildConfig Validated RooSimWSTool build configuration; RooSimWSTool::ObjSplitRule Validated RooSimWSTool split rule; RooSimWSTool::SplitRule Split rule specification for prototype p.d.f; RooSimultaneous Simultaneous operator p.d.f, functions like C++ 'switch()' on input p.d.fs operating on index category5A; RooSpHarmonic SpHarmonic polynomial; RooStats ; RooStats::AcceptanceRegion A simple class for acceptance regions used for ConfidenceBelt; RooStats::AsymptoticCalculator ; RooStats::BayesianCalculator BayesianCalculator class; RooStats::BernsteinCorrection A utility to add polynomial corrrection terms to a model to improve the description of data.; RooStats::CombinedCalculator A base class that is for tools that can be both HypoTestCalculators and IntervalCalculators; RooStats::ConfInterval Interface for Confidence Intervals; RooStats::ConfidenceBelt A confidence belt for the Neyman Construction; RooStats::DebuggingSampler A simple implementation of the DistributionCreator interface; RooStats::DebuggingTestStat A concrete implementation of the TestStatistic interface, useful for debugging.; RooStats::DetailedOutputAggregator ; RooStats::FeldmanCousins Interface for tools setting limits (producing confidence intervals); RooStats::FrequentistCalculator ; RooStats::HLFactory The high Level Model Factory to create models from datacards; RooStats::Heaviside Your description goes here...; RooStats::HistFactory ; RooStats::HistFactory::Asimov ; RooStats::HistFactory::Channel ; RooStats::HistFactory::ConfigParser ; RooStats::HistFactory::Constraint ; RooStats::HistFactory::Data ; RooStats::HistFactory::EstimateSummary ; RooStats::HistFactory::FlexibleInterpVar flexible interpolation; RooStats::HistFactory::HistFactoryNavigation ; RooStats::HistFactory::HistFactorySimultaneous Simultaneous operator p.d.f, functions like C++ 'switch()' on input p.d.fs operati",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ClassIndex.html:45468,Test,TestStatistic,45468,root/html534/ClassIndex.html,https://root.cern,https://root.cern/root/html534/ClassIndex.html,1,['Test'],['TestStatistic']
Testability,"STool::MultiBuildConfig Build configuration object for RooSimWSTool with multiple prototype p.d.f.; RooSimWSTool::ObjBuildConfig Validated RooSimWSTool build configuration; RooSimWSTool::ObjSplitRule Validated RooSimWSTool split rule; RooSimWSTool::SplitRule Split rule specification for prototype p.d.f; RooSimultaneous Simultaneous operator p.d.f, functions like C++ 'switch()' on input p.d.fs operating on index category5A; RooSpHarmonic SpHarmonic polynomial; RooStats ; RooStats::AcceptanceRegion A simple class for acceptance regions used for ConfidenceBelt; RooStats::AsymptoticCalculator ; RooStats::BayesianCalculator BayesianCalculator class; RooStats::BernsteinCorrection A utility to add polynomial corrrection terms to a model to improve the description of data.; RooStats::CombinedCalculator A base class that is for tools that can be both HypoTestCalculators and IntervalCalculators; RooStats::ConfInterval Interface for Confidence Intervals; RooStats::ConfidenceBelt A confidence belt for the Neyman Construction; RooStats::DebuggingSampler A simple implementation of the DistributionCreator interface; RooStats::DebuggingTestStat A concrete implementation of the TestStatistic interface, useful for debugging.; RooStats::DetailedOutputAggregator ; RooStats::FeldmanCousins Interface for tools setting limits (producing confidence intervals); RooStats::FrequentistCalculator ; RooStats::HLFactory The high Level Model Factory to create models from datacards; RooStats::Heaviside Your description goes here...; RooStats::HistFactory ; RooStats::HistFactory::Asimov ; RooStats::HistFactory::Channel ; RooStats::HistFactory::ConfigParser ; RooStats::HistFactory::Data ; RooStats::HistFactory::EstimateSummary ; RooStats::HistFactory::FlexibleInterpVar flexible interpolation; RooStats::HistFactory::HistFactoryNavigation ; RooStats::HistFactory::HistFactorySimultaneous Simultaneous operator p.d.f, functions like C++ 'switch()' on input p.d.fs operating on index category5A; RooStats::Hi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ClassIndex.html:42440,Test,TestStatistic,42440,root/html602/ClassIndex.html,https://root.cern,https://root.cern/root/html602/ClassIndex.html,2,['Test'],['TestStatistic']
Testability,"STool::MultiBuildConfig Build configuration object for RooSimWSTool with multiple prototype p.d.f.; RooSimWSTool::ObjBuildConfig Validated RooSimWSTool build configuration; RooSimWSTool::ObjSplitRule Validated RooSimWSTool split rule; RooSimWSTool::SplitRule Split rule specification for prototype p.d.f; RooSimultaneous Simultaneous operator p.d.f, functions like C++ 'switch()' on input p.d.fs operating on index category5A; RooSpHarmonic SpHarmonic polynomial; RooStats ; RooStats::AcceptanceRegion A simple class for acceptance regions used for ConfidenceBelt; RooStats::AsymptoticCalculator ; RooStats::BayesianCalculator BayesianCalculator class; RooStats::BernsteinCorrection A utility to add polynomial corrrection terms to a model to improve the description of data.; RooStats::CombinedCalculator A base class that is for tools that can be both HypoTestCalculators and IntervalCalculators; RooStats::ConfInterval Interface for Confidence Intervals; RooStats::ConfidenceBelt A confidence belt for the Neyman Construction; RooStats::DebuggingSampler A simple implementation of the DistributionCreator interface; RooStats::DebuggingTestStat A concrete implementation of the TestStatistic interface, useful for debugging.; RooStats::FeldmanCousins Interface for tools setting limits (producing confidence intervals); RooStats::FrequentistCalculator ; RooStats::HLFactory The high Level Model Factory to create models from datacards; RooStats::Heaviside Your description goes here...; RooStats::HistFactory::EstimateSummary ; RooStats::HistFactory::FlexibleInterpVar flexible interpolation; RooStats::HistFactory::HistoToWorkspaceFactory ; RooStats::HistFactory::HistoToWorkspaceFactoryFast ; RooStats::HistFactory::LinInterpVar Piecewise linear interpolation; RooStats::HybridCalculator ; RooStats::HybridCalculatorOriginal Hypothesis test calculator using a Bayesian-frequentist hybrid method; RooStats::HybridPlot Provides the plots for an HybridResult; RooStats::HybridResult Class containing ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ClassIndex.html:44702,Test,TestStatistic,44702,root/html532/ClassIndex.html,https://root.cern,https://root.cern/root/html532/ClassIndex.html,1,['Test'],['TestStatistic']
Testability,"SamplerToyMCSampler(RooStats::TestStatistic& ts, Int_t ntoys). protected:. virtual voidClearCache(); const RooArgList*EvaluateAllTestStatistics(RooAbsData& data, const RooArgSet& poi, RooStats::DetailedOutputAggregator& detOutAgg); RooAbsData*Generate(RooAbsPdf& pdf, RooArgSet& observables, const RooDataSet* protoData = __null, int forceEvents = 0) const. Data Members; protected:. RooArgSet*_allVars!; RooAbsPdf::GenSpec*_gs1! GenSpec #1; RooAbsPdf::GenSpec*_gs2! GenSpec #2; RooAbsPdf::GenSpec*_gs3! GenSpec #3; RooAbsPdf::GenSpec*_gs4! GenSpec #4; list<RooAbsPdf::GenSpec*>_gsList!; list<RooArgSet*>_obsList!; list<RooAbsPdf*>_pdfList!; Double_tfAdaptiveHighLimit; Double_tfAdaptiveLowLimit; Bool_tfExpectedNuisanceParwhether to use expectation values for nuisance parameters (ie Asimov data set); Bool_tfGenerateAutoBinned; Bool_tfGenerateBinned; TStringfGenerateBinnedTag; const RooArgSet*fGlobalObservables; Double_tfMaxToys; Int_tfNEventsnumber of events per toy (may be ignored depending on settings); Int_tfNToysnumber of toys to generate; RooStats::NuisanceParametersSampler*fNuisanceParametersSampler!; const RooArgSet*fNuisancePars; const RooArgSet*fObservables; const RooArgSet*fParametersForTestStat; RooAbsPdf*fPdfmodel (can be alt or null); RooAbsPdf*fPriorNuisanceprior pdf for nuisance parameters; RooStats::ProofConfig*fProofConfig!; const RooDataSet*fProtoDatain dev; stringfSamplingDistNamename of the model; Double_tfSize; vector<RooStats::TestStatistic*>fTestStatistics; Double_tfToysInTails; Bool_tfUseMultiGenUse PrepareMultiGen?; static Bool_tfgAlwaysUseMultiGenUse PrepareMultiGen always. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetAlwaysUseMultiGen(Bool_t flag); { fgAlwaysUseMultiGen = flag ; }. ToyMCSampler(); Proof constructor. Do not use. ToyMCSampler(RooStats::TestStatistic& ts, Int_t ntoys). ~ToyMCSampler(). Bool_t CheckConfig(void); only checks, no guessing/determination (do this in calculators,; e.g. u",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__ToyMCSampler.html:5157,Test,TestStatistic,5157,root/html602/RooStats__ToyMCSampler.html,https://root.cern,https://root.cern/root/html602/RooStats__ToyMCSampler.html,2,['Test'],['TestStatistic']
Testability,"SamplesTest(const Char_t* option) const {; 855 Double_t pvalue, testStat;; 856 AndersonDarling2SamplesTest(pvalue, testStat);; 857 return (strncmp(option, ""p"", 1) == 0 || strncmp(option, ""t"", 1) != 0) ? pvalue : testStat;; 858 }; 859 ; 860/*; 861 Taken from (3); 862*/ void GoFTest::AndersonDarlingTest(Double_t& pvalue, Double_t& testStat) const {; 863 pvalue = -1;; 864 testStat = -1;; 865 if (!fTestSampleFromH0) {; 866 MATH_ERROR_MSG(""AndersonDarlingTest"", ""Only 2-sample tests can be issued with a 2-sample constructed GoFTest object!"");; 867 return;; 868 }; 869 if (fDist == kUndefined) {; 870 MATH_ERROR_MSG(""AndersonDarlingTest"", ""Distribution type is undefined! Please use SetDistribution(GoFTest::EDistribution)."");; 871 return;; 872 }; 873 Double_t A2 = 0.0;; 874 Int_t n = fSamples[0].size();; 875 for (Int_t i = 0; i < n ; ++i) {; 876 Double_t x1 = fSamples[0][i];; 877 Double_t w1 = (*fCDF)(x1);; 878 Double_t result = (2 * (i + 1) - 1) * TMath::Log(w1) + (2 * (n - (i + 1)) + 1) * TMath::Log(1 - w1);; 879 A2 += result;; 880 }; 881 (A2 /= -n) -= n;; 882 if (A2 != A2) {; 883 MATH_ERROR_MSG(""AndersonDarlingTest"", ""Cannot compute p-value: data below or above the distribution's thresholds. Check sample consistency."");; 884 return;; 885 }; 886 pvalue = PValueAD1Sample(A2);; 887 testStat = A2;; 888 }; 889 ; 890 Double_t GoFTest::AndersonDarlingTest(const Char_t* option) const {; 891 Double_t pvalue, testStat;; 892 AndersonDarlingTest(pvalue, testStat);; 893 return (strncmp(option, ""p"", 1) == 0 || strncmp(option, ""t"", 1) != 0) ? pvalue : testStat;; 894 }; 895 ; 896 void GoFTest::KolmogorovSmirnov2SamplesTest(Double_t& pvalue, Double_t& testStat) const {; 897 pvalue = -1;; 898 testStat = -1;; 899 if (fTestSampleFromH0) {; 900 MATH_ERROR_MSG(""KolmogorovSmirnov2SamplesTest"", ""Only 1-sample tests can be issued with a 1-sample constructed GoFTest object!"");; 901 return;; 902 }; 903 const size_t na = fSamples[0].size();; 904 const size_t nb = fSamples[1].size();; 905 std::vector<",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GoFTest_8cxx_source.html:31488,Log,Log,31488,doc/master/GoFTest_8cxx_source.html,https://root.cern,https://root.cern/doc/master/GoFTest_8cxx_source.html,2,['Log'],['Log']
Testability,"SaveAs(const char* filename = """", Option_t* option = """") const; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidSetClasses(const char* classes, Option_t* option = ""ID""); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetLabelDx(Float_t labeldx = 0.15); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetSourceDir(const char* dir = ""src""); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidSetYoffset(Float_t offset = 0); virtual voidShowClassesUsedBy(const char* classes); virtual voidShowClassesUsing(const char* classes); virtual voidShowLinks(Option_t* option = ""HMR""); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidFindClassesUsedBy(Int_t iclass); virtual voidFindClassesUsing(Int_t iclass); virtual voidFindClassPosition(const char* classname, Float_t& x, Float_t& y); virtual voidInit(); voidTObject::MakeZombie(); TObjString*Mark(const char* classname, TList* los, Int_t abit); virtual voidPaintClass(Int_t iclass, Float_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TClassTree.html:9354,Test,TestBit,9354,root/html530/TClassTree.html,https://root.cern,https://root.cern/root/html530/TClassTree.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); TVectorT<double>&SelectNonZeros(const TVectorT<double>& select); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetElements(const double* elements); static voidTObject::SetObjectStat(Bool_t stat); TVectorT<double>&SetSub(Int_t row_lwb, const TVectorT<double>& source); virtual voidTObject::SetUniqueID(UInt_t uid); TVectorT<double>&Shift(Int_t row_shift); virtual voidShowMembers(TMemberInspector& insp) const; Bool_tSomePositive(const TVectorT<double>& select); TVectorT<double>&Sqr(); TVectorT<double>&Sqrt(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); doubleSum() const; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TVectorT<double>(); TVectorT<double>(Int_t n); TVectorT<double>(const TVectorT<double>& another); TVectorT<double>(const TMatrixTRow_const<double>& mr); TVectorT<double>(const TMatrixTColumn_const<double>& mc); TVectorT<double>(const TMatrixTDiag_const<double>& md); TVectorT<double>(const TVectorT<double>& another); TVectorT<double>(Int_t lwb, Int_t upb); TVectorT<double>(Int_t n, const double* elements); TVectorT<double>(Int_t lwb, Int_t upb, const double* elements); TVectorT<double>(Int_t lwb, Int_t upb, double iv1); TVectorT<double>&Use(TVectorT<double>& v); const TVectorT<double>&Use(const TVectorT<double>& v) const; TVectorT<double>&Use(Int_t n, double* data); const TVectorT<double>&Use(Int_t n, const double* data) const; TVectorT<double>&Use(Int_t lwb, Int_t upb, double* data); const TVectorT<double>&Use(Int_t lwb, Int_t upb, const double* data) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TVectorT_double_.html:7743,Test,TestBit,7743,root/html602/TVectorT_double_.html,https://root.cern,https://root.cern/root/html602/TVectorT_double_.html,2,['Test'],['TestBit']
Testability,"SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTStreamerElement::SetArrayDim(Int_t dim); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetCountClass(const char* clname); voidSetCountName(const char* name); voidSetCountVersion(Int_t count); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTStreamerElement::SetMaxIndex(Int_t dim, Int_t max); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTStreamerElement::SetNewClass(TClass* cl); virtual voidTStreamerElement::SetNewType(Int_t dtype); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTStreamerElement::SetOffset(Int_t offset); virtual voidTStreamerElement::SetSize(Int_t dsize); virtual voidTStreamerElement::SetStreamer(TMemberStreamer* streamer); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTStreamerElement::SetTObjectOffset(Int_t tobjoffset); virtual voidTStreamerElement::SetType(Int_t dtype); virtual voidTStreamerElement::SetTypeName(const char* name); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTStreamerElement::Update(const TClass* oldClass, TClass* newClass); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TStreamerLoop.html:6912,Test,TestBit,6912,root/html534/TStreamerLoop.html,https://root.cern,https://root.cern/root/html534/TStreamerLoop.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"SaveBeltToFile(bool flag = true); virtual voidSetConfidenceLevel(Double_t cl); virtual voidSetData(RooAbsData& data); voidSetLeftSideTailFraction(Double_t leftSideFraction = 0.); virtual voidSetModel(const RooStats::ModelConfig& model); virtual voidSetNuisanceParameters(const RooArgSet&); voidSetParameterPointsToTest(RooAbsData& pointsToTest); virtual voidSetParameters(const RooArgSet&); virtual voidSetPdf(RooAbsPdf&); virtual voidSetTestSize(Double_t size); voidSetTestStatSampler(RooStats::TestStatSampler& sampler); virtual voidShowMembers(TMemberInspector& insp) const; virtual Double_tSize() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); voidUseAdaptiveSampling(bool flag = true). Data Members; private:. boolfAdaptiveSamplingcontrols use of adaptive sampling algorithm; Double_tfAdditionalNToysFactorgive user ability to ask for more toys; RooStats::ConfidenceBelt*fConfBelt; boolfCreateBeltcontrols use if ConfidenceBelt should be saved to a TFile; RooAbsData&fDatadata set; Double_tfLeftSideFraction; RooStats::ModelConfig&fModel; RooAbsData*fPointsToTest; boolfSaveBeltToFilecontrols use if ConfidenceBelt should be saved to a TFile; Double_tfSizesize of the test (eg. specified rate of Type I error); RooStats::TestStatSampler*fTestStatSampler. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; NeymanConstruction(RooAbsData& data, RooStats::ModelConfig& model); default constructor; fWS = new RooWorkspace();; fOwnsWorkspace = true;; fDataName = """";; fPdfName = """";. ~NeymanConstruction(); default constructor; if(fOwnsWorkspace && fWS) delete fWS;; if(fConfBelt) delete fConfBelt;. PointSetInterval* GetInterval() const; Main interface to get a RooStats::ConfInterval.; It constructs a RooStats::SetInterval. NeymanConstruction(RooAbsData& data, RooStats::ModelConfig& model); NeymanConstruction();. void SetTestStatSampler(RooStats::TestStatSampler& sampler); in addition to interface we a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__NeymanConstruction.html:4456,test,test,4456,root/html602/RooStats__NeymanConstruction.html,https://root.cern,https://root.cern/root/html602/RooStats__NeymanConstruction.html,2,['test'],['test']
Testability,"SceneBase::fDoFrustumCheckPerform global frustum-check in UpdateSceneInfo(); TGLContextIdentity*TGLScene::fGLCtxIdentity; Bool_tTGLScene::fInSmartRefresh!; Bool_tfInternalPIDs! using internal physical IDs; Short_tTGLSceneBase::fLODScene-lod.; Float_tTGLScene::fLastLineWidthScale; UInt_tfLastPID! last physical ID that was processed in AddObject(); Float_tTGLScene::fLastPointSizeScale; TGLLockable::ELockTGLLockable::fLockLock state.; TGLScene::LogicalShapeMap_tTGLScene::fLogicalShapes!; UInt_tTGLSceneBase::fMinorStampCounter increased on minimal update.; TStringTGLSceneBase::fNameObject identifier.; UInt_tfNextInternalPID! next internal physical ID (from 1 - 0 reserved); Float_tTGLSceneBase::fOLLineWScene outline line-width.; TVirtualPad*fPad; TGLScene::PhysicalShapeMap_tTGLScene::fPhysicalShapes!; UInt_tTGLSceneBase::fSceneIDUnique scene id.; Bool_tTGLSceneBase::fSelectableObjects in the scene are selectable.; Bool_tfSmartRefresh! cache logicals during scene rebuilds; TGLScene::LogicalShapeMap_tTGLScene::fSmartRefreshCache!; Short_tTGLSceneBase::fStyleScene-style.; UInt_tTGLSceneBase::fTimeStampCounter increased on every update.; TStringTGLSceneBase::fTitleObject title.; TGLSceneBase::ViewerList_tTGLSceneBase::fViewers; Float_tTGLSceneBase::fWFLineWScene wire-frame line-width. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLScenePad(TVirtualPad* pad); Constructor. void AddHistoPhysical(TGLLogicalShape* log, const Float_t* histColor = 0); Scale and rotate a histo object to mimic placement in canvas. void SubPadPaint(TVirtualPad* pad); Iterate over pad-primitves and import them. void ObjectPaint(TObject* obj, Option_t* opt = """"); Override of virtual TVirtualViewer3D::ObjectPaint().; Special handling of 2D/3D histograms to activate Timur's; histo-painters. void PadPaintFromViewer(TGLViewer* viewer); Entry point for requesting update of scene's contents from; gl-viewer. void PadPaint(TVirtualPad* pad); Entry point for updatin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLScenePad.html:13513,log,logicals,13513,root/html602/TGLScenePad.html,https://root.cern,https://root.cern/root/html602/TGLScenePad.html,2,['log'],['logicals']
Testability,"SceneBase::fMinorStampCounter increased on minimal update.; TStringTGLSceneBase::fNameObject identifier.; UInt_tfNextInternalPID! next internal physical ID (from 1 - 0 reserved); Float_tTGLSceneBase::fOLLineWScene outline line-width.; TVirtualPad*fPad; TGLScene::PhysicalShapeMap_tTGLScene::fPhysicalShapes!; UInt_tTGLSceneBase::fSceneIDUnique scene id.; Bool_tTGLSceneBase::fSelectableObjects in the scene are selectable.; Bool_tfSmartRefresh! cache logicals during scene rebuilds; TGLScene::LogicalShapeMap_tTGLScene::fSmartRefreshCache!; Short_tTGLSceneBase::fStyleScene-style.; UInt_tTGLSceneBase::fTimeStampCounter increased on every update.; TStringTGLSceneBase::fTitleObject title.; TGLSceneBase::ViewerList_tTGLSceneBase::fViewers; Float_tTGLSceneBase::fWFLineWScene wire-frame line-width. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLScenePad(TVirtualPad* pad); Constructor. void AddHistoPhysical(TGLLogicalShape* log, const Float_t* histColor = 0); Scale and rotate a histo object to mimic placement in canvas. void SubPadPaint(TVirtualPad* pad); Iterate over pad-primitves and import them. void ObjectPaint(TObject* obj, Option_t* opt = """"); Override of virtual TVirtualViewer3D::ObjectPaint().; Special handling of 2D/3D histograms to activate Timur's; histo-painters. void PadPaintFromViewer(TGLViewer* viewer); Entry point for requesting update of scene's contents from; gl-viewer. void PadPaint(TVirtualPad* pad); Entry point for updating scene contents via VirtualViewer3D; interface.; For now this is handled by TGLViewer as it remains; the 'Viewer3D' of given pad. void BeginScene(); Start building of the scene.; Old contents is dropped, unless smart-refresh is in active. Then; the object supporting it are kept in a cache and possibly reused. TVirtualViewer3D interface overload - see base/src/TVirtualViewer3D.cxx; for description of viewer architecture. void EndScene(); End building of the scene.; TVirtualViewer3D interface ove",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLScenePad.html:14034,log,log,14034,root/html602/TGLScenePad.html,https://root.cern,https://root.cern/root/html602/TGLScenePad.html,2,['log'],['log']
Testability,"Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::CostComplexityPruneTool. class TMVA::CostComplexityPruneTool: public TMVA::IPruneTool. Function Members (Methods); public:. virtual~CostComplexityPruneTool(); virtual TMVA::PruningInfo*CalculatePruningInfo(TMVA::DecisionTree* dt, const vector<const TMVA::Event*,allocator<const TMVA::Event*> >* testEvents = NULL, Bool_t isAutomatic = kFALSE); TMVA::CostComplexityPruneToolCostComplexityPruneTool(TMVA::SeparationBase* qualityIndex = NULL); TMVA::CostComplexityPruneToolCostComplexityPruneTool(const TMVA::CostComplexityPruneTool&); TMVA::CostComplexityPruneTool&operator=(const TMVA::CostComplexityPruneTool&). private:. voidInitTreePruningMetaData(TMVA::DecisionTreeNode* n); TMVA::MsgLogger&Log() const; voidOptimize(TMVA::DecisionTree* dt, Double_t weights). Data Members; private:. TMVA::MsgLogger*fLogger! output stream to save logging information; Int_tfOptimalK! the optimal index of the prune sequence; vector<TMVA::DecisionTreeNode*,allocator<TMVA::DecisionTreeNode*> >fPruneSequence! map of weakest links (i.e., branches to prune) -> pruning index; vector<Double_t>fPruneStrengthList! map of alpha -> pruning index; vector<Double_t>fQualityIndexList! map of R(T) -> pruning index; TMVA::SeparationBase*fQualityIndexTool! the quality index used to calculate R(t), R(T) = sum[t in ~T]{ R(t) }. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; CostComplexityPruneTool( SeparationBase* qualityIndex ); the constructor for the cost complexity prunig. ~CostComplexityPruneTool(); the destructor for the cost complexity prunig. CalculatePruningInfo(TMVA::DecisionTree* dt, const vector<const TMVA::Event*,allocator<const TMVA::Event*> >* testEvents = NULL, Bool_t isAutomatic = kFALSE). void InitTreePruningMetaData(TMVA::DecisionTreeNode* n); initialise ""meta data"" for the pruning, like the ""costcomplexity"", the; critical alpha, the minimal alpha down th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__CostComplexityPruneTool.html:1096,log,logging,1096,root/html534/TMVA__CostComplexityPruneTool.html,https://root.cern,https://root.cern/root/html534/TMVA__CostComplexityPruneTool.html,1,['log'],['logging']
Testability,"SelectorConsumer::ETreeVarType_e tv_type = kTVT_XYZ); virtual~TEveLine(); voidTObject::AbstractMethod(const char* method) const; virtual Bool_tTEveElement::AcceptElement(TEveElement* el); virtual voidTEveElement::AddElement(TEveElement* el); virtual TGListTreeItem*TEveElement::AddIntoListTree(TGListTree* ltree, TGListTreeItem* parent_lti); virtual TGListTreeItem*TEveElement::AddIntoListTree(TGListTree* ltree, TEveElement* parent); virtual TGListTreeItem*TEveElement::AddIntoListTrees(TEveElement* parent); virtual voidTEveElement::AddParent(TEveElement* re); virtual voidTEveProjectable::AddProjected(TEveProjected* p); virtual voidTEveProjectable::AddProjectedsToSet(set<TEveElement*>& set); virtual voidTEveElement::AddStamp(UChar_t bits); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; Float_t*TAttBBox::AssertBBox(); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidTPointSet3D::ClearIds(); virtual voidTEveElement::ClearStamps(); virtual TObject*TObj",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveLine.html:1549,Assert,AssertBBox,1549,root/html528/TEveLine.html,https://root.cern,https://root.cern/root/html528/TEveLine.html,1,['Assert'],['AssertBBox']
Testability,"Sender(); virtual const char*TQObject::GetSenderClassName() const; voidTObject::MakeZombie(). private:. TProofLogElem*Add(const char* ord, const char* url). Data Members; public:. enum ELogLocationBit { kLogToBox; };; enum ERetrieveOpt { kLeading; kTrailing; kAll; kGrep; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; TStringTNamed::fNameobject identifier; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; TStringTNamed::fTitleobject title; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. private:. TList*fElemlist of TProofLogElem objects; void*fFILEpointer logging file, if any; TProofMgr*fMgrparent TProofMgr; TDatimefStartTimeTime at which this session started. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofLog(const char* stag, const char* url, TProofMgr* mgr); Constructor. ~TProofLog(); Destructor. TProofLogElem * Add(const char* ord, const char* url); Add new entry to the list of elements. Int_t Retrieve(const char* ord = ""*"", TProofLog::ERetrieveOpt opt = TProofLog::kTrailing, const char* fname = 0, const char* pattern = 0); Retrieve the content of the log file associated with worker 'ord'.; If 'ord' is ""*"" (default), all the workers are retrieved. If 'all'; is true, the whole files are retrieved; else a max of; fgMaxTransferSize (about 1000 lines) per file is read, starting from; the end (i.e. the last ~1000 lines).; The received buffer is added to the file fname, if the latter is defined.; If opt == TProofLog::kGrep only the lines containing 'pattern' are; retrieved (remote grep functionality); to filter ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofLog.html:9682,log,logging,9682,root/html528/TProofLog.html,https://root.cern,https://root.cern/root/html528/TProofLog.html,4,['log'],['logging']
Testability,"ServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) overrideFunction that is called at the end of redirectServers().Definition RooAbsReal.cxx:4474; RooAbsReal::_valuedouble _valueCache for current value of object.Definition RooAbsReal.h:536; RooAbsReal::analyticalIntegralvirtual double analyticalIntegral(Int_t code, const char *rangeName=nullptr) constImplements the actual analytical integral(s) advertised by getAnalyticalIntegral.Definition RooAbsReal.cxx:394; RooAbsReal::integralNameSuffixTString integralNameSuffix(const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool omitEmpty=false) constConstruct string with unique suffix name to give to integral object that encodes integrated observabl...Definition RooAbsReal.cxx:755; RooAbsReal::evaluatevirtual double evaluate() const =0Evaluate this PDF / function / constant. Needs to be overridden by all derived classes.; RooAbsReal::logEvalErrorvoid logEvalError(const char *message, const char *serverValueString=nullptr) constLog evaluation error message.Definition RooAbsReal.cxx:3464; RooAbsReal::getIntegratorConfigconst RooNumIntConfig * getIntegratorConfig() constReturn the numeric integration configuration used for this object.Definition RooAbsReal.cxx:3309; RooAbsReal::isBinnedDistributionvirtual bool isBinnedDistribution(const RooArgSet &) constTests if the distribution is binned. Unless overridden by derived classes, this always returns false.Definition RooAbsReal.h:346; RooAbsReal::createIntRIRooFit::OwningPtr< RooAbsReal > createIntRI(const RooArgSet &iset, const RooArgSet &nset={})Utility function for createRunningIntegral.Definition RooAbsReal.cxx:3827; RooAbsReal::plotOnvirtual RooPlot * plotOn(RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:158388,log,logEvalErrorvoid,158388,doc/master/RooAbsPdf_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html,2,['log'],"['logEvalError', 'logEvalErrorvoid']"
Testability,"ServerRedirect(Bool_t flag); voidRooAbsArg::setShapeDirty() const; voidRooAbsArg::setStringAttribute(const Text_t* key, const Text_t* value); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidRooAbsArg::setTransientAttribute(const Text_t* name, Bool_t value = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); voidRooAbsReal::setUnit(const char* unit); voidRooAbsArg::setValueDirty() const; TIterator*RooAbsArg::shapeClientIterator() const; RooFIterRooAbsArg::shapeClientMIterator() const; virtual voidShowMembers(TMemberInspector& insp); RooMoment*RooAbsReal::sigma(RooRealVar& obs); RooMoment*RooAbsReal::sigma(RooRealVar& obs, const RooArgSet& nset); virtual Int_tTNamed::Sizeof() const; RooNumIntConfig*RooAbsReal::specialIntegratorConfig() const; RooNumIntConfig*RooAbsReal::specialIntegratorConfig(Bool_t createOnTheFly); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); const map<std::string,std::string>&RooAbsArg::stringAttributes() const; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; const set<std::string>&RooAbsArg::transientAttributes() const; voidRooAbsArg::treeNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t doBranch = kTRUE, Bool_t doLeaf = kTRUE, Bool_t valueOnly = kFALSE, Bool_t recurseNonDerived = kFALSE) const; voidRooAbsArg::unRegisterCache(RooAbsCache& cache); virtual voidTObject::UseCurrentStyle(); TIterator*RooAbsArg::valueClientIterator() const; RooFIterRooAbsArg::valueClientMIterator() const; RooRealVar&var() const; static voidRooAbsArg::verboseDirty(Bool_t flag); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidRooAbsReal::writeToStream(ostream& os, Bool_t compact) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooNumConvolution.html:26797,Test,TestBit,26797,root/html532/RooNumConvolution.html,https://root.cern,https://root.cern/root/html532/RooNumConvolution.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"Set training and test set vectors of dataset described by dsi. ;  ; virtual void RecombineKFoldDataSet (DataSetInfo &dsi, Types::ETreeType tt=Types::kTraining);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Configurable;  Configurable (const TString &theOption="""");  constructor ;  ; virtual ~Configurable ();  default destructor ;  ; void AddOptionsXMLTo (void *parent) const;  write options to XML file ;  ; template<class T > ; void AddPreDefVal (const T &);  ; template<class T > ; void AddPreDefVal (const TString &optname, const T &);  ; void CheckForUnusedOptions () const;  checks for unused options in option string ;  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc);  ; template<class T > ; OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc="""");  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T *&ref, Int_t size, const TString &name, const TString &desc);  ; template<class T > ; OptionBase * DeclareOptionRef (T *&ref, Int_t size, const TString &name, const TString &desc="""");  ; const char * GetConfigDescription () const;  ; const char * GetConfigName () const;  ; const TString & GetOptions () const;  ; MsgLogger & Log () const;  ; virtual void ParseOptions ();  options parser ;  ; void PrintOptions () const;  prints out the options set in the options string and the defaults ;  ; void ReadOptionsFromStream (std::istream &istr);  read option back from the weight file ;  ; void ReadOptionsFromXML (void *node);  ; void SetConfigDescription (const char *d);  ; void SetConfigName (const char *n);  ; void SetMsgType (EMsgType t);  ; void SetOptions (const TString &s);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void WriteOptionsToStream (std::ostream &o, const TString &prefix) const;  write options to output stream (e.g. in writing the MVA weight files ;  ;  Public Member Functio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1CvSplitKFolds.html:2425,Log,Log,2425,doc/master/classTMVA_1_1CvSplitKFolds.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1CvSplitKFolds.html,1,['Log'],['Log']
Testability,"Set!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooRealProxy_nllInput -log(L) function; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; map<string,bool>_paramFixedParameter constant status at last time of use; RooAbsPdf*_pdf; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; set<string>_statUncertParams; map<string,string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooBarlowBeestonLL(); _obs(""paramOfInterest"",""Parameters of interest"",this),;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__HistFactory__RooBarlowBeestonLL.html:36131,log,log,36131,root/html602/RooStats__HistFactory__RooBarlowBeestonLL.html,https://root.cern,https://root.cern/root/html602/RooStats__HistFactory__RooBarlowBeestonLL.html,2,['log'],['log']
Testability,"Set& paramPoint, double& weight) const; virtual RooAbsData*GenerateToyData(vector<double>& weights, vector<double>& nullNLLs, vector<double>& impNLLs) const; virtual RooAbsData*GenerateToyData(RooArgSet& paramPoint, double& weight, vector<double>& impNLLs, double& nullNLL) const; virtual Int_tRooStats::ToyMCSampler::GetNToys(); stringRooStats::ToyMCSampler::GetSamplingDistName(); virtual RooStats::SamplingDistribution*RooStats::ToyMCSampler::GetSamplingDistribution(RooArgSet& paramPoint); virtual RooDataSet*RooStats::ToyMCSampler::GetSamplingDistributions(RooArgSet& paramPoint); virtual RooDataSet*GetSamplingDistributionsSingleWorker(RooArgSet& paramPoint); virtual RooStats::TestStatistic*RooStats::ToyMCSampler::GetTestStatistic() const; virtual RooStats::TestStatistic*RooStats::ToyMCSampler::GetTestStatistic(unsigned int i) const; virtual voidRooStats::ToyMCSampler::Initialize(RooAbsArg&, RooArgSet&, RooArgSet&); virtual TClass*IsA() const; RooStats::TestStatSampler&RooStats::TestStatSampler::operator=(const RooStats::TestStatSampler&); static voidRooStats::ToyMCSampler::SetAlwaysUseMultiGen(Bool_t flag); voidSetApplyVeto(bool b = true); virtual voidRooStats::ToyMCSampler::SetAsimovNuisancePar(Bool_t i = kTRUE); virtual voidSetConditionalObservables(const RooArgSet& set); virtual voidRooStats::ToyMCSampler::SetConfidenceLevel(Double_t cl); voidSetDensityToGenerateFromByIndex(unsigned int i, bool fromNull = false); voidSetEqualNumToysPerDensity(); virtual voidRooStats::ToyMCSampler::SetExpectedNuisancePar(Bool_t i = kTRUE); voidSetExpIncreasingNumToysPerDensity(); voidRooStats::ToyMCSampler::SetGenerateAutoBinned(Bool_t autoBinned = kTRUE); voidRooStats::ToyMCSampler::SetGenerateBinned(bool binned = true); voidRooStats::ToyMCSampler::SetGenerateBinnedTag(const char* binnedTag = """"); virtual voidRooStats::ToyMCSampler::SetGlobalObservables(const RooArgSet& o); voidRooStats::ToyMCSampler::SetMaxToys(Double_t t); virtual voidRooStats::ToyMCSampler::SetNEventsPerToy(con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__ToyMCImportanceSampler.html:2770,Test,TestStatSampler,2770,root/html534/RooStats__ToyMCImportanceSampler.html,https://root.cern,https://root.cern/root/html534/RooStats__ToyMCImportanceSampler.html,1,['Test'],['TestStatSampler']
Testability,"Set* altPOI = 0); voidSetSubtractMLE(bool subtract); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. RooArgSet*fAltPOI; RooAbsPdf*fAltPdf; RooAbsPdf*fNullPdf; Bool_tfSubtractMLE. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RatioOfProfiledLikelihoodsTestStat(); Proof constructor. Don't use. RatioOfProfiledLikelihoodsTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf, const RooArgSet* altPOI = 0). Calculates the ratio of profiled likelihoods. 	 By default the calculation is:. 	 Lambda(mu_alt , conditional MLE for alt nuisance); 	log --------------------------------------------; 	 Lambda(mu_null , conditional MLE for null nuisance). 	where Lambda is the profile likeihood ratio, so the; 	MLE for the null and alternate are subtracted off. 	If SetSubtractMLE(false) then it calculates:. 	 L(mu_alt , conditional MLE for alt nuisance); 	log --------------------------------------------; 	 L(mu_null , conditional MLE for null nuisance). 	The values of the parameters of interest for the alternative; 	hypothesis are taken at the time of the construction.; 	If empty, it treats all free parameters as nuisance parameters. 	The value of the parameters of interest for the null hypotheses; 	are given at each call of Evaluate(data,nullPOI). ~RatioOfProfiledLikelihoodsTestStat(void). Double_t ProfiledLikelihood(RooAbsData& data, RooArgSet& poi, RooAbsPdf& pdf). Double_t Evaluate(RooAbsData& data, RooArgSet& nullParamsOfInterest). const TString GetVarName() const. void SetSubtractMLE(bool subtract); const bool PValueIsRightTail(void) { return false; } // overwrites default. {fSubtractMLE = subtract;}. » Last changed: root/roostats:$Id: RatioOfProfiledLikelihoodsTestStat.h 36602 2010-11-11 16:52:13Z moneta $ » Last generated: 2010-11-25 07:08; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in gen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__RatioOfProfiledLikelihoodsTestStat.html:2265,log,log,2265,root/html528/RooStats__RatioOfProfiledLikelihoodsTestStat.html,https://root.cern,https://root.cern/root/html528/RooStats__RatioOfProfiledLikelihoodsTestStat.html,1,['log'],['log']
Testability,"Set* altPOI = 0); voidSetSubtractMLE(bool subtract); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. RooArgSet*fAltPOI; RooAbsPdf*fAltPdf; RooAbsPdf*fNullPdf; Bool_tfSubtractMLE. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RatioOfProfiledLikelihoodsTestStat(); Proof constructor. Don't use. RatioOfProfiledLikelihoodsTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf, const RooArgSet* altPOI = 0). Calculates the ratio of profiled likelihoods. 	 By default the calculation is:. 	 Lambda(mu_alt , conditional MLE for alt nuisance); 	log --------------------------------------------; 	 Lambda(mu_null , conditional MLE for null nuisance). 	where Lambda is the profile likeihood ratio, so the; 	MLE for the null and alternate are subtracted off. 	If SetSubtractMLE(false) then it calculates:. 	 L(mu_alt , conditional MLE for alt nuisance); 	log --------------------------------------------; 	 L(mu_null , conditional MLE for null nuisance). 	The values of the parameters of interest for the alternative; 	hypothesis are taken at the time of the construction.; 	If empty, it treats all free parameters as nuisance parameters. 	The value of the parameters of interest for the null hypotheses; 	are given at each call of Evaluate(data,nullPOI). ~RatioOfProfiledLikelihoodsTestStat(void). Double_t ProfiledLikelihood(RooAbsData& data, RooArgSet& poi, RooAbsPdf& pdf). Double_t Evaluate(RooAbsData& data, RooArgSet& nullParamsOfInterest). const TString GetVarName() const. void SetSubtractMLE(bool subtract); const bool PValueIsRightTail(void) { return false; } // overwrites default. {fSubtractMLE = subtract;}. » Last changed: root/roostats:$Id: RatioOfProfiledLikelihoodsTestStat.h 39391 2011-05-26 09:51:59Z moneta $ » Last generated: 2011-07-04 15:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in gen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__RatioOfProfiledLikelihoodsTestStat.html:2277,log,log,2277,root/html530/RooStats__RatioOfProfiledLikelihoodsTestStat.html,https://root.cern,https://root.cern/root/html530/RooStats__RatioOfProfiledLikelihoodsTestStat.html,1,['log'],['log']
Testability,"Set::EDataSetPass mode = TDataSet::kContinue); virtual TDataSet*operator()(const Char_t* path); virtual TDataSet*operator*() const; virtual TDataSet*operator[](const Char_t* path); virtual voidTObject::Paint(Option_t* option = """"); virtual TStringPath(); virtual TStringPath(const Char_t* path); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual TDataSet*Pwd(Option_t* opt = """") const; virtual TDataSet*Rd(const Char_t* dirname, Option_t* option = """"); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidReset(TDataSet* l = 0, Int_t depth = 0); voidTObject::ResetBit(UInt_t f); virtual TDataSet*Rmdir(TDataSet* dataset, Option_t* option = """"); virtual TDataSet*Rmdir(const Char_t* dirname, Option_t* option = """"); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual TDataSet*Shunt(TDataSet* set); virtual TDataSet*Shunt(TDataSet* set, const Char_t* path); virtual TDataSet*Shunt(TDataSet* set, TDataSet* dataset); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TDataSetIter.html:7228,Test,TestBit,7228,root/html534/TDataSetIter.html,https://root.cern,https://root.cern/root/html534/TDataSetIter.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"SetBBoxCenterX(const Int_t x); virtual voidTBox::SetBBoxCenterY(const Int_t y); virtual voidTBox::SetBBoxX1(const Int_t x); virtual voidTBox::SetBBoxX2(const Int_t x); virtual voidTBox::SetBBoxY1(const Int_t y); virtual voidTBox::SetBBoxY2(const Int_t y); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTWbox::SetBorderMode(Short_t bordermode)MENU ; virtual voidTWbox::SetBorderSize(Short_t bordersize)MENU ; virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillColorAlpha(Color_t fcolor, Float_t falpha); virtual voidTAttFill::SetFillStyle(Style_t fstyle); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); static voidTObject::SetObjectStat(Bool_t stat); voidSetSlider(TSlider* slider); virtual voidTBox::SetToolTipText(const char* text, Long_t delayms = 1000); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTBox::SetX1(Double_t x1); virtual voidTBox::SetX2(Double_t x2); virtual voidTBox::SetY1(Double_t y1); virtual voidTBox::SetY2(Double_t y2); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TSliderBox.html:7452,Test,TestBit,7452,root/html534/TSliderBox.html,https://root.cern,https://root.cern/root/html534/TSliderBox.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"SetBBoxY2(const Int_t y); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTText::SetMbTitle(const wchar_t* title = L"""")MENU ; virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTText::SetNDC(Bool_t isNDC = kTRUE); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTText::SetText(Double_t x, Double_t y, const char* text)MENU ; virtual voidTText::SetText(Double_t x, Double_t y, const wchar_t* text); virtual voidTAttText::SetTextAlign(Short_t align = 11); virtual voidTAttText::SetTextAngle(Float_t tangle = 0)MENU ; virtual voidTAttText::SetTextAttributes()MENU ; virtual voidTAttText::SetTextColor(Color_t tcolor = 1); virtual voidTAttText::SetTextColorAlpha(Color_t tcolor, Float_t talpha); virtual voidTAttText::SetTextFont(Font_t tfont = 62); virtual voidTAttText::SetTextSize(Float_t tsize = 1); virtual voidTAttText::SetTextSizePixels(Int_t npixels); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTText::SetX(Double_t x)MENU ; virtual voidTText::SetY(Double_t y)MENU ; virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TLink(); TLink(const TLink&); TLink(Double_t x, Double_t y, void* pointer); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TLink.html:7752,Test,TestBit,7752,root/html602/TLink.html,https://root.cern,https://root.cern/root/html602/TLink.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetMaxDepth(Int_t d); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidSetMinNodeSize(Double_t sizeInPercent); voidSetMinNodeSize(TString sizeInPercent); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); voidSetNodePurityLimit(Double_t l); voidSetNTrees(Int_t d); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidSetShrinkage(Double_t s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidSetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); voidSetUseNvars(Int_t n); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); Double_tTestTreeQuality(TMVA::DecisionTree* dt); virtual voidTrain(); voidTM",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MethodBDT.html:16359,test,testTime,16359,root/html602/TMVA__MethodBDT.html,https://root.cern,https://root.cern/root/html602/TMVA__MethodBDT.html,2,['test'],['testTime']
Testability,"SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetMaxDepth(Int_t d); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidSetMinNodeSize(Double_t sizeInPercent); voidSetMinNodeSize(TString sizeInPercent); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); voidSetNodePurityLimit(Double_t l); voidSetNTrees(Int_t d); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidSetShrinkage(Double_t s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidSetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); voidSetUseNvars(Int_t n); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); Double_tTestTreeQuality(TMVA::DecisionTree* dt); virtual voidTrain(); voidTMVA::MethodB",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__MethodBDT.html:15742,test,testTime,15742,root/html534/TMVA__MethodBDT.html,https://root.cern,https://root.cern/root/html534/TMVA__MethodBDT.html,1,['test'],['testTime']
Testability,"SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTProofPlayer::SetCurrentQuery(TQueryResult* q); virtual voidTProofPlayer::SetDispatchTimer(Bool_t on = kTRUE); virtual voidTProofPlayer::SetDrawFeedbackOption(TDrawFeedback* f, Option_t* opt); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTProofPlayer::SetExitStatus(TVirtualProofPlayer::EExitStatus st); virtual voidTProofPlayerRemote::SetInitTime(); virtual voidTProofPlayer::SetMaxDrawQueries(Int_t max); virtual voidTProofPlayerRemote::SetMerging(Bool_t on = kTRUE); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTProofPlayer::SetOutputFilePath(const char* fp); voidTProofPlayer::SetProcessing(Bool_t on = kTRUE); virtual voidTProofPlayer::SetStopTimer(Bool_t on = kTRUE, Bool_t abort = kFALSE, Int_t timeout = 0); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTProofPlayerRemote::StopProcess(Bool_t abort, Int_t timeout = -1); virtual voidStoreFeedback(TObject* slave, TList* out); virtual voidTProofPlayerRemote::StoreOutput(TList* out); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofPlayerLite(TProof* proof = 0); TProofPlayerLite(const TProofPlayerLite&); virtual voidTProofPlayer::UpdateAutoBin(const char* name, Double_t& xmin, Double_t& xmax, Double_t& ymin, Double_t& ymax, Double_t& zmin, Double_t& zmax); virtual voidTProofPlayer::UpdateProgressInfo(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TProofPlayerLite.html:11627,Test,TestBit,11627,root/html604/TProofPlayerLite.html,https://root.cern,https://root.cern/root/html604/TProofPlayerLite.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetData(TTree*); voidSetDelta(Double_t delta); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetEpsilon(Double_t eps); voidSetEta(Double_t eta); voidSetEtaDecay(Double_t ed); voidSetEventWeight(const char*); voidSetLearningMethod(TMultiLayerPerceptron::ELearningMethod method); static voidTObject::SetObjectStat(Bool_t stat); voidSetReset(Int_t reset); voidSetTau(Double_t tau); voidSetTestDataSet(TEventList* test); voidSetTestDataSet(const char* test); voidSetTrainingDataSet(TEventList* train); voidSetTrainingDataSet(const char* train); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TMultiLayerPerceptron(); TMultiLayerPerceptron(const char* layout, TTree* data = 0, const char* training = ""Entry$%2==0"", const char* test = """", TNeuron::ENeuronType type = TNeuron::kSigmoid, const char* extF = """", const char* extD = """"); TMultiLayerPerceptron(const char* layout, TTree* data, TEventList* training, TEventList* test, TNeuron::ENeuronType type = TNeuron::kSigmoid, const char* extF = """", const char* extD = """"); TMultiLayerPerceptron(const char* layout, const char* weight, TTree* data = 0, const char* training = ""Entry$%2==0"", const char* test = """", TNeuron::ENeuronType type = TNeuron::kSigmoid, const char* extF = """", const char* extD = """"); TMultiLayerPerceptron(const char* layout, const char* weight, TTree* data, TEventList* training, TEventList* test, TNeuron::ENeuronType type = TNeuron::kSigmoid, const char* extF = """", const char* extD = """"); voidTrain(Int_t nEpoch, Option_t* option = ""text"", Double_t minE = 0); virtual voidTObject::UseCurrentStyle(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMultiLayerPerceptron.html:14225,Test,TestBits,14225,root/html602/TMultiLayerPerceptron.html,https://root.cern,https://root.cern/root/html602/TMultiLayerPerceptron.html,2,['Test'],['TestBits']
Testability,"SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillColorAlpha(Color_t fcolor, Float_t falpha); virtual voidTAttFill::SetFillStyle(Style_t fstyle); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidTAttMarker::SetMarkerAttributes()MENU ; virtual voidTAttMarker::SetMarkerColor(Color_t mcolor = 1); virtual voidTAttMarker::SetMarkerColorAlpha(Color_t mcolor, Float_t malpha); virtual voidTAttMarker::SetMarkerSize(Size_t msize = 1); virtual voidTAttMarker::SetMarkerStyle(Style_t mstyle = 1); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); voidTSpline::SetNpx(Int_t n); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TMVA::TSpline1TSpline1(const TMVA::TSpline1&); TMVA::TSpline1TSpline1(const TString& title, TGraph* theGraph); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__TSpline1.html:6869,Test,TestBit,6869,root/html602/TMVA__TSpline1.html,https://root.cern,https://root.cern/root/html602/TMVA__TSpline1.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillColorAlpha(Color_t fcolor, Float_t falpha); virtual voidTAttFill::SetFillStyle(Style_t fstyle); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidTAttMarker::SetMarkerAttributes()MENU ; virtual voidTAttMarker::SetMarkerColor(Color_t mcolor = 1); virtual voidTAttMarker::SetMarkerColorAlpha(Color_t mcolor, Float_t malpha); virtual voidTAttMarker::SetMarkerSize(Size_t msize = 1); virtual voidTAttMarker::SetMarkerStyle(Style_t mstyle = 1); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); voidTSpline::SetNpx(Int_t n); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TMVA::TSpline2TSpline2(const TMVA::TSpline2&); TMVA::TSpline2TSpline2(const TString& title, TGraph* theGraph); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__TSpline2.html:6841,Test,TestBit,6841,root/html602/TMVA__TSpline2.html,https://root.cern,https://root.cern/root/html602/TMVA__TSpline2.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"SetBit(UInt_t f, Bool_t set); voidTGeoBBox::SetBoxDimensions(Double_t dx, Double_t dy, Double_t dz, Double_t* origin = 0); voidTGeoBBox::SetBoxPoints(Double_t* points) const; virtual voidSetDimensions(Double_t* param); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTGeoShape::SetId(Int_t id); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPoints(Double_t*) const; virtual voidSetPoints(Float_t*) const; voidTGeoShape::SetRuntime(Bool_t flag = kTRUE); virtual voidTGeoBBox::SetSegsAndPols(TBuffer3D& buffer) const; voidTGeoShape::SetShapeBit(UInt_t f); voidTGeoShape::SetShapeBit(UInt_t f, Bool_t set); virtual voidTNamed::SetTitle(const char* title = """")MENU ; static voidTGeoShape::SetTransform(TGeoMatrix* matrix); virtual voidTObject::SetUniqueID(UInt_t uid); Int_tTGeoShape::ShapeDistancetoPrimitive(Int_t numpoints, Int_t px, Int_t py) const; virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidSizeof3D() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTGeoShape::TestShapeBit(UInt_t f) const; Int_tTGeoShape::TestShapeBits(UInt_t f) const; TGeoHalfSpace(); TGeoHalfSpace(Double_t* params); TGeoHalfSpace(const TGeoHalfSpace&); TGeoHalfSpace(const char* name, Double_t* p, Double_t* n); static Double_tTGeoShape::Tolerance(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoHalfSpace.html:10103,Test,TestBit,10103,root/html602/TGeoHalfSpace.html,https://root.cern,https://root.cern/root/html602/TGeoHalfSpace.html,8,['Test'],"['TestBit', 'TestBits', 'TestShapeBit', 'TestShapeBits']"
Testability,"SetBit(UInt_t f, Bool_t set); voidTUnfold::SetConstraint(TUnfold::EConstraint constraint); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTUnfold::SetEpsMatrix(Double_t eps); virtual Int_tSetInput(const TH1* hist_y, Double_t scaleBias = 0.0, Double_t oneOverZeroError = 0.0, const TH2* hist_vyy = 0, const TH2* hist_vyy_inv = 0); static voidTObject::SetObjectStat(Bool_t stat); voidSetTauError(Double_t delta_tau); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); voidSubtractBackground(const TH1* hist_bgr, const char* name, Double_t scale = 1.0, Double_t scale_error = 0.0); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. TUnfoldSys(); voidTUnfold::AddMSparse(TMatrixDSparse* dest, Double_t f, const TMatrixDSparse* src) const; Bool_tTUnfold::AddRegularisationCondition(Int_t nEle, const Int_t* indices, const Double_t* rowData); Bool_tTUnfold::AddRegularisationCondition(Int_t i0, Double_t f0, Int_t i1 = -1, Double_t f1 = 0., Int_t i2 = -1, Double_t f2 = 0.); voidTUnfold::ClearHistogram(TH1* h, Double_t x = 0.) const; virtual voidClearResults(); TMatrixDSparse*TUnfold::CreateSparseMatrix(Int_t nrow, Int_t ncol, Int_t nele, Int_t* row, Int_t* col, Double_t* data) const; static voidTUnfold::DeleteMatrix(TMatrixD** m); static voidTUnfold::DeleteMatrix(TMatrixDSparse** m); voidDoBackgroundSubtraction(); virtual voidTObject::DoError(int level, const char* location, const cha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TUnfoldSys.html:11246,Test,TestBit,11246,root/html534/TUnfoldSys.html,https://root.cern,https://root.cern/root/html534/TUnfoldSys.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"SetBoxPoints(Double_t* points) const; virtual voidSetDimensions(Double_t* param); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetDz(Double_t dz); voidTGeoShape::SetId(Int_t id); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidSetPlaneVertices(Double_t zpl, Double_t* vertices) const; virtual voidSetPoints(Double_t* points) const; virtual voidSetPoints(Float_t* points) const; voidTGeoShape::SetRuntime(Bool_t flag = kTRUE); virtual voidTGeoBBox::SetSegsAndPols(TBuffer3D& buffer) const; voidTGeoShape::SetShapeBit(UInt_t f); voidTGeoShape::SetShapeBit(UInt_t f, Bool_t set); virtual voidTNamed::SetTitle(const char* title = """")MENU ; static voidTGeoShape::SetTransform(TGeoMatrix* matrix); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidSetVertex(Int_t vnum, Double_t x, Double_t y); Int_tTGeoShape::ShapeDistancetoPrimitive(Int_t numpoints, Int_t px, Int_t py) const; virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidSizeof3D() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTGeoShape::TestShapeBit(UInt_t f) const; Int_tTGeoShape::TestShapeBits(UInt_t f) const; TGeoArb8(); TGeoArb8(Double_t dz, Double_t* vertices = 0); TGeoArb8(const char* name, Double_t dz, Double_t* vertices = 0); static Double_tTGeoShape::Tolerance(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoArb8.html:11399,Test,TestBit,11399,root/html602/TGeoArb8.html,https://root.cern,https://root.cern/root/html602/TGeoArb8.html,8,['Test'],"['TestBit', 'TestBits', 'TestShapeBit', 'TestShapeBits']"
Testability,"SetBufferAddress(TBuffer* entryBuffer); virtual voidTBranch::SetCompressionLevel(Int_t level = 1); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTBranch::SetEntries(Long64_t entries); virtual voidTBranch::SetEntryOffsetLen(Int_t len, Bool_t updateSubBranches = kFALSE); virtual voidTBranch::SetFile(TFile* file = 0); virtual voidTBranch::SetFile(const char* filename); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillStyle(Style_t fstyle); virtual voidTBranch::SetFirstEntry(Long64_t entry); virtual Bool_tTBranch::SetMakeClass(Bool_t decomposeObj = kTRUE); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTBranch::SetObject(void* objadd); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTBranch::SetOffset(Int_t offset = 0); virtual Int_tSetParent(const TObject* obj, Int_t branchID); virtual voidSetReadEntry(Long64_t entry); virtual voidTBranch::SetStatus(Bool_t status = 1); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTBranch::SetTree(TTree* tree); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTBranch::SetupAddresses(); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTBranch::UpdateAddress(); virtual voidTBranch::UpdateFile(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TBranchRef.html:9375,Test,TestBit,9375,root/html528/TBranchRef.html,https://root.cern,https://root.cern/root/html528/TBranchRef.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"SetBufferSize(Int_t bufsize); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTDirectoryFile::SetModified(); virtual voidTDirectory::SetMother(TObject* mother); virtual voidTDirectory::SetName(const char* newname); virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTDirectoryFile::SetSeekDir(Long64_t v); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTDirectoryFile::SetTRefAction(TObject* ref, TObject* parent); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTDirectoryFile::SetWritable(Bool_t writable = kTRUE); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTDirectoryFile::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTDirectoryFile::Write(const char* name = 0, Int_t opt = 0, Int_t bufsize = 0); virtual Int_tTDirectoryFile::Write(const char* name = 0, Int_t opt = 0, Int_t bufsize = 0) const; virtual voidTDirectoryFile::WriteDirHeader(); virtual voidTDirectoryFile::WriteKeys(); Int_tTDirectory::WriteObject(const void* obj, const char* name, Option_t* option = """", Int_t bufsize = 0); virtual Int_tTDirectoryFile::WriteObjectAny(const void* obj, const char* classname, const char* name, Option_t* option = """", Int_t bufsize = 0); virtual Int_tTDirectoryFile::WriteObjectAny(const void* obj, const TClass* cl, const char* name, Option_t* option = """", Int_t bufsize = 0); virtual Int_tTDirectoryFile::WriteTObject(const TObject* obj, const char* name = 0, Option_t* option = """", Int_t bufsize = 0); RooWorkspace::WSDirWSDir(const char* name, const char* title, RooWo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooWorkspace__WSDir.html:9257,Test,TestBits,9257,root/html528/RooWorkspace__WSDir.html,https://root.cern,https://root.cern/root/html528/RooWorkspace__WSDir.html,3,['Test'],['TestBits']
Testability,"SetCdf(TF1* cdf); voidSetCdf(const ROOT::Math::IGenFunction& cdf); voidSetDomain(double xmin, double xmax); voidSetMode(double mode); voidSetPdfArea(double area); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TUnuranContDist(const TUnuranContDist&); TUnuranContDist(TF1* pdf = 0, TF1* deriv = 0, bool isLogPdf = false); TUnuranContDist(const ROOT::Math::IGenFunction& pdf, const ROOT::Math::IGenFunction* dpdf = 0, bool isLogPdf = false, bool copyFunc = false). Data Members; private:. doublefAreaarea below pdf; const ROOT::Math::IGenFunction*fCdfpointer to the cdf (cumulative dist.); const ROOT::Math::IGenFunction*fDPdfpointer to the derivative of the pdf; boolfHasAreaflag to control if distribution has a pre-computed area below the pdf; boolfHasDomainflag to control if distribution has a defined domain (otherwise is [-inf,+inf]; boolfHasModeflag to control if distribution has a pre-computed mode; boolfIsLogPdfflag to control if function pointer represent log of pdf; doublefModemode of the distribution; boolfOwnFuncflag to indicate if class manages the function pointers; const ROOT::Math::IGenFunction*fPdfpointer to the pdf; doublefXmaxupper value of the domain; doublefXminlower value of the domain. Class Charts. Inheritance Chart:. TUnuranBaseDist. ←; TUnuranContDist. Function documentation; TUnuranContDist(const ROOT::Math::IGenFunction& pdf, const ROOT::Math::IGenFunction* dpdf = 0, bool isLogPdf = false, bool copyFunc = false); Constructor from generic function interfaces; manage the functions and clone them if flag copyFunc is true. TUnuranContDist(TF1* pdf = 0, TF1* deriv = 0, bool isLogPdf = false); Constructor from a TF1 objects; function pointers are managed by class. TUnuranContDist(const TUnuranContDist& ); Implementation of copy constructor. ~TUnuranContDist(); destructor implementation. void SetCdf(const ROOT::Math::IGenFunction& cdf); set cdf distribution u",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TUnuranContDist.html:1881,log,log,1881,root/html602/TUnuranContDist.html,https://root.cern,https://root.cern/root/html602/TUnuranContDist.html,2,['log'],['log']
Testability,"SetDoubleBuffer(Int_t mode=1) overrideSet Double Buffer On/Off.Definition TCanvas.cxx:1998; TCanvas::ToggleToolTipsvirtual void ToggleToolTips()Toggle tooltip display.Definition TCanvas.cxx:2464; TCanvas::Clearvoid Clear(Option_t *option="""") overrideRemove all primitives from the canvas.Definition TCanvas.cxx:737; TCanvas::UseCurrentStylevoid UseCurrentStyle() overrideForce a copy of current style for all objects in canvas.Definition TCanvas.cxx:1185; TCanvas::Iconifyvoid Iconify()Iconify canvas.Definition TCanvas.cxx:1479; TCanvas::GetWindowTopXInt_t GetWindowTopX()Returns current top x position of window on screen.Definition TCanvas.cxx:1210; TCanvas::ToggleEventStatusvirtual void ToggleEventStatus()Toggle event statusbar.Definition TCanvas.cxx:2431; TCanvas::Destructorvoid Destructor()Actual canvas destructor.Definition TCanvas.cxx:695; TCanvas::fUpdatedBool_t fUpdated! Set to True when Update method was calledDefinition TCanvas.h:64; TCanvas::DeleteCanvasPaintervoid DeleteCanvasPainter()assert on IsBatch() == false?Definition TCanvas.cxx:2626; TCanvas::fPadSaveTPad * fPadSave! Pointer to saved pad in HandleInputDefinition TCanvas.h:56; TCanvas::SupportAlphastatic Bool_t SupportAlpha()Static function returning ""true"" if transparency is supported.Definition TCanvas.cxx:2476; TCanvas::fBatchBool_t fBatch! True when in batchmodeDefinition TCanvas.h:59; TCanvas::fUseGLBool_t fUseGL! True when rendering is with GLDefinition TCanvas.h:62; TCanvas::fEventXInt_t fEventX! Last X mouse position in canvasDefinition TCanvas.h:46; TCanvas::IsBatchBool_t IsBatch() const overrideDefinition TCanvas.h:171; TCanvas::DrawCloneTObject * DrawClone(Option_t *option="""") const overrideDraw a clone of this canvas A new canvas is created that is a clone of this canvas.Definition TCanvas.cxx:907; TCanvas::fXsizeRealSize_t fXsizeRealCurrent size of canvas along X in CM.Definition TCanvas.h:35; TCanvas::HasMenuBarBool_t HasMenuBar() constDefinition TCanvas.h:168; TCanvas::GetCanvasPainterTVi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCanvas_8cxx_source.html:104384,assert,assert,104384,doc/master/TCanvas_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCanvas_8cxx_source.html,1,['assert'],['assert']
Testability,"SetDtorOnly(void* obj); virtual TMatrixTBase<double>&TMatrixTBase<double>::SetMatrixArray(const double* data, Option_t* option = """"); static voidTObject::SetObjectStat(Bool_t stat); virtual TMatrixTBase<double>&SetRowIndexArray(Int_t*); virtual TMatrixTBase<double>&SetSub(Int_t row_lwb, Int_t col_lwb, const TMatrixTBase<double>& source); doubleTMatrixTBase<double>::SetTol(double newTol); virtual voidTObject::SetUniqueID(UInt_t uid); virtual TMatrixTBase<double>&TMatrixTBase<double>::Shift(Int_t row_shift, Int_t col_shift); virtual voidShowMembers(TMemberInspector&); doubleSimilarity(const TVectorT<double>& v) const; virtual TMatrixTBase<double>&TMatrixTBase<double>::Sqr(); virtual TMatrixTBase<double>&TMatrixTBase<double>::Sqrt(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual doubleTMatrixTBase<double>::Sum() const; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; TMatrixT<double>&T(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTMult(const TMatrixT<double>& a, const TMatrixT<double>& b); voidTMult(const TMatrixT<double>& a, const TMatrixTSym<double>& b); voidTMult(const TMatrixTSym<double>& a, const TMatrixT<double>& b); voidTMult(const TMatrixTSym<double>& a, const TMatrixTSym<double>& b); TMatrixT<double>&Transpose(const TMatrixT<double>& source); virtual TMatrixTBase<double>&TMatrixTBase<double>::UnitMatrix(); TMatrixT<double>&Use(TMatrixT<double>& a); const TMatrixT<double>&Use(const TMatrixT<double>& a) const; TMatrixT<double>&Use(Int_t nrows, Int_t ncols, double* data); const TMatrixT<double>&Use(Int_t nrows, Int_t ncols, const double* data) const; TMatrixT<double>&Use(Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb, double* data); const TMatrixT<double>&Use(Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb, const double* data) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* metho",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMatrixT_double_.html:12103,Test,TestBit,12103,root/html534/TMatrixT_double_.html,https://root.cern,https://root.cern/root/html534/TMatrixT_double_.html,1,['Test'],['TestBit']
Testability,"SetDtorOnly(void* obj); virtual TMatrixTBase<float>&TMatrixTBase<float>::SetMatrixArray(const float* data, Option_t* option = """"); static voidTObject::SetObjectStat(Bool_t stat); virtual TMatrixTBase<float>&SetRowIndexArray(Int_t*); virtual TMatrixTBase<float>&SetSub(Int_t row_lwb, Int_t col_lwb, const TMatrixTBase<float>& source); floatTMatrixTBase<float>::SetTol(float newTol); virtual voidTObject::SetUniqueID(UInt_t uid); virtual TMatrixTBase<float>&TMatrixTBase<float>::Shift(Int_t row_shift, Int_t col_shift); virtual voidShowMembers(TMemberInspector& insp); floatSimilarity(const TVectorT<float>& v) const; virtual TMatrixTBase<float>&TMatrixTBase<float>::Sqr(); virtual TMatrixTBase<float>&TMatrixTBase<float>::Sqrt(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual floatTMatrixTBase<float>::Sum() const; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; TMatrixT<float>&T(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTMult(const TMatrixT<float>& a, const TMatrixT<float>& b); voidTMult(const TMatrixT<float>& a, const TMatrixTSym<float>& b); voidTMult(const TMatrixTSym<float>& a, const TMatrixT<float>& b); voidTMult(const TMatrixTSym<float>& a, const TMatrixTSym<float>& b); TMatrixT<float>&Transpose(const TMatrixT<float>& source); virtual TMatrixTBase<float>&TMatrixTBase<float>::UnitMatrix(); TMatrixT<float>&Use(TMatrixT<float>& a); const TMatrixT<float>&Use(const TMatrixT<float>& a) const; TMatrixT<float>&Use(Int_t nrows, Int_t ncols, float* data); const TMatrixT<float>&Use(Int_t nrows, Int_t ncols, const float* data) const; TMatrixT<float>&Use(Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb, float* data); const TMatrixT<float>&Use(Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb, const float* data) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMatrixT_float_.html:11891,Test,TestBits,11891,root/html528/TMatrixT_float_.html,https://root.cern,https://root.cern/root/html528/TMatrixT_float_.html,3,['Test'],['TestBits']
Testability,"SetDtorOnly(void* obj); virtual voidSetErrmsgcallback(void* p) const; virtual Bool_tSetErrorMessages(Bool_t enable = kTRUE); virtual voidSetGetline(char *(*)(const char* prompt) getlineFunc, void (*)(char* line) histaddFunc); virtual voidSetgvp(Long_t) const; virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetProcessLineLock(Bool_t lock = kTRUE); virtual voidSetRTLD_LAZY() const; virtual voidSetRTLD_NOW() const; virtual voidSetTempLevel(int val) const; virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp, char* parent); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTypedefInfo_Delete(TypedefInfo_t* tinfo) const; virtual TypedefInfo_t*TypedefInfo_Factory() const; virtual TypedefInfo_t*TypedefInfo_FactoryCopy(TypedefInfo_t* tinfo) const; virtual voidTypedefInfo_Init(TypedefInfo_t* tinfo, const char* funcname) const; virtual boolTypedefInfo_IsValid(TypedefInfo_t* tinfo) const; virtual const char*TypedefInfo_Name(TypedefInfo_t* tinfo) const; virtual Long_tTypedefInfo_Property(TypedefInfo_t* tinfo) const; virtual intTypedefInfo_Size(TypedefInfo_t* tinfo) const; virtual const char*TypedefInfo_Title(TypedefInfo_t* tinfo) const; virtual const char*TypedefInfo_TrueName(TypedefInfo_t* tinfo) const; virtual voidTypeInfo_Delete(TypeInfo_t* tinfo) const; virtual TypeInfo_t*TypeInfo_Factory() const; virtual TypeInfo_t*TypeInfo_Factory(G__value*) const; virtual TypeInfo_t*TypeInfo_FactoryCopy(TypeInfo_t*) const; virtual voidTypeInfo_Init(TypeInfo_t* tinfo, const char* funcname) const; virtual boolTypeInfo_IsValid(TypeInfo_t* tin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TCint.html:15782,Test,TestBits,15782,root/html526/TCint.html,https://root.cern,https://root.cern/root/html526/TCint.html,1,['Test'],['TestBits']
Testability,"SetDtorOnly(void* obj); virtual voidTGCompositeFrame::SetEditable(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetEditDisabled(UInt_t on = 1); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetParts(Int_t npart)MENU ; virtual voidSetParts(Int_t* parts, Int_t npart); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidSetText(TGString* text, Int_t partidx = 0); virtual voidSetText(const char* text, Int_t partidx = 0); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGStatusBar.html:14444,Test,TestBit,14444,root/html528/TGStatusBar.html,https://root.cern,https://root.cern/root/html528/TGStatusBar.html,6,['Test'],"['TestBit', 'TestBits']"
Testability,"SetFCN(void fcn); virtual voidSetFCN(void*); virtual voidSetFitMethod(const char* name); virtual voidTVirtualFitter::SetFitOption(Foption_t option); static voidTVirtualFitter::SetFitter(TVirtualFitter* fitter, Int_t maxpar = 25); static voidTVirtualFitter::SetMaxIterations(Int_t niter = 5000); voidSetMinimumTolerance(double mintol); virtual voidSetMinuitFCN(ROOT::Minuit2::FCNBase* f); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTVirtualFitter::SetObjectFit(TObject* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual Int_tSetParameter(Int_t ipar, const char* parname, Double_t value, Double_t verr, Double_t vlow, Double_t vhigh); static voidTVirtualFitter::SetPrecision(Double_t prec = 1e-6); voidSetPrintLevel(int level); voidSetStrategy(int stra); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTVirtualFitter::SetUserFunc(TObject* userfunc); virtual voidTVirtualFitter::SetXfirst(Int_t first); virtual voidTVirtualFitter::SetXlast(Int_t last); virtual voidTVirtualFitter::SetYfirst(Int_t first); virtual voidTVirtualFitter::SetYlast(Int_t last); virtual voidTVirtualFitter::SetZfirst(Int_t first); virtual voidTVirtualFitter::SetZlast(Int_t last); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual const ROOT::Minuit2::MnUserParameterState&State() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFitterMinuit.html:8258,Test,TestBit,8258,root/html528/TFitterMinuit.html,https://root.cern,https://root.cern/root/html528/TFitterMinuit.html,6,['Test'],"['TestBit', 'TestBits']"
Testability,"SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGedFrame::SetGedEditor(TGedEditor* ed); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidSetModel(TObject*); voidTGedFrame::SetModelClass(TClass* mcl); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); TTextEditor(const TTextEditor&); TTextEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); virtual voidTGFrame::UnmapWindow(); virtual voidTGedFrame::Update(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTextEditor.html:14689,Test,TestBit,14689,root/html602/TTextEditor.html,https://root.cern,https://root.cern/root/html602/TTextEditor.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"SetFrameElement(TGFrameElement* fe); virtual voidSetGroup(TGButtonGroup* gr); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGFrame::SetLayoutBroken(Bool_t = kTRUE); virtual voidTGWindow::SetMapSubwindows(Bool_t); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetOn(Bool_t on = kTRUE, Bool_t emit = kFALSE); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidSetState(EButtonState state, Bool_t emit = kFALSE); virtual voidSetStyle(UInt_t newstyle); virtual voidSetStyle(const char* style); virtual voidSetToolTipText(const char* text, Long_t delayms = 400)MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidSetUserData(void* userData); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGButton(const TGWindow* p = 0, Int_t id = -1, GContext_t norm = GetDefaultGC()(), UInt_t option = kRaisedFrame | kDoubleBorder); virtual voidToggle(Bool_t emit = kFALSE); virtual voidToggled(Bool_t on)SIGNAL ; virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGButton.html:16507,Test,TestBit,16507,root/html602/TGButton.html,https://root.cern,https://root.cern/root/html602/TGButton.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"SetLineColor(3);; OGB4->SetLineColor(3);; TF3D->SetLineColor(3);; OGB3->SetLineColor(3);; TF4A->SetLineColor(3);; OGB4->SetLineColor(3);; TF3A->SetLineColor(3);; OGB3->SetLineColor(3);; ; // Copy shape attributes (colors,etc) in nodes referencing the shapes; CAVE1->ImportShapeAttributes();; ; // Set Node attributes; CAVE1->SetVisibility(2); //node is not drawn but its sons are drawn; VT1_1->SetVisibility(-4); //Node is not drawn. Its immediate sons are drawn; VT2_1->SetVisibility(-4);; MTL_1->SetVisibility(-4);; MTR_1->SetVisibility(-4);; TOFR1->SetVisibility(-4);; ; gBenchmark->Show(""na49"");; }; TBRIK.h; TBenchmark.h; gBenchmarkR__EXTERN TBenchmark * gBenchmarkDefinition TBenchmark.h:59; TGeometry.h; TMaterial.h; TMixture.h; TNode.h; TRotMatrix.h; TTRAP.h; TTUBE.h; TAttLine::SetLineColorvirtual void SetLineColor(Color_t lcolor)Set the line color.Definition TAttLine.h:40; TBRIKA box with faces perpendicular to the axes.Definition TBRIK.h:26; TBenchmark::Startvirtual void Start(const char *name)Starts Benchmark with the specified name.Definition TBenchmark.cxx:172; TBenchmark::Showvirtual void Show(const char *name)Stops Benchmark name and Prints results.Definition TBenchmark.cxx:155; TGeometryTGeometry description.Definition TGeometry.h:39; TMaterialManages a detector material.Definition TMaterial.h:28; TMixtureManages a detector mixture.Definition TMixture.h:27; TMixture::DefineElementvirtual void DefineElement(Int_t n, Float_t a, Float_t z, Float_t w)Define one mixture element.Definition TMixture.cxx:86; TNodeTNode description.Definition TNode.h:33; TNode::cdvirtual void cd(const char *path=nullptr)Change Current Reference node to this.Definition TNode.cxx:249; TNode::ImportShapeAttributesvirtual void ImportShapeAttributes()Copy shape attributes as node attributes.Definition TNode.cxx:409; TNode::SetVisibilityvirtual void SetVisibility(Int_t vis=1)Set visibility for this node and its sons.Definition TNode.cxx:758; TRotMatrixManages a detector rotation matrix.Defin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/na49_8C.html:948188,Benchmark,Benchmark,948188,doc/master/na49_8C.html,https://root.cern,https://root.cern/doc/master/na49_8C.html,1,['Benchmark'],['Benchmark']
Testability,"SetMarkerColor(Color_t mcolor = 1); virtual voidTAttMarker::SetMarkerColorAlpha(Color_t mcolor, Float_t malpha); virtual voidTAttMarker::SetMarkerSize(Size_t msize = 1); virtual voidTAttMarker::SetMarkerStyle(Style_t mstyle = 1); virtual voidSetMaximum(Double_t maximum = -1111)MENU ; virtual voidSetMinimum(Double_t minimum = -1111)MENU ; virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPoint(Int_t i, Double_t x, Double_t y); virtual voidSetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidSort(Bool_t(*)(const TGraph*,Int_t,Int_t) greater = &TGraph::CompareX, Bool_t ascending = kTRUE, Int_t low = 0, Int_t high = -1111); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGraph(); TGraph(Int_t n); TGraph(const TGraph& gr); TGraph(const TH1* h); TGraph(const TVectorF& vx, const TVectorF& vy); TGraph(const TVectorD& vx, const TVectorD& vy); TGraph(const TF1* f, Option_t* option = """"); TGraph(Int_t n, const Int_t* x, const Int_t* y); TGraph(Int_t n, const Float_t* x, const Float_t* y); TGraph(Int_t n, const Double_t* x, const Double_t* y); TGraph(const char* filename, const char* format = ""%lg %lg"", Option_t* option = """"); virtual voidUseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidZero(Int_t& k, Double_t AZ, Double_t BZ, Double_t E2, Double_t& X, Double_t& Y, Int_t maxiterations).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGraph.html:10833,Test,TestBit,10833,root/html602/TGraph.html,https://root.cern,https://root.cern/root/html602/TGraph.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"SetMaxTreeSize(Long64_t maxsize = 1900000000); virtual voidTTree::SetMaxVirtualSize(Long64_t size = 0)MENU ; virtual voidTTree::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTTree::SetNotify(TObject* obj); virtual voidTTree::SetObject(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPacketSize(Int_t size = 100); virtual voidTTree::SetParallelUnzip(Bool_t opt = kTRUE, Float_t RelSize = -1); virtual voidSetProof(Bool_t on = kTRUE, Bool_t refresh = kFALSE, Bool_t gettreeheader = kFALSE); virtual voidTTree::SetScanField(Int_t n = 50)MENU ; virtual voidTTree::SetTimerInterval(Int_t msec = 333); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTTree::SetTreeIndex(TVirtualIndex* index); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTTree::SetUpdate(Int_t freq = 0); virtual voidSetWeight(Double_t w = 1, Option_t* option = """"); virtual voidTTree::Show(Long64_t entry = -1, Int_t lenmax = 20); virtual voidShowMembers(TMemberInspector& insp, char* parent); virtual Int_tTNamed::Sizeof() const; virtual voidTTree::StartViewer()MENU ; virtual voidTTree::StopCacheLearningPhase(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Int_tTTree::UnbinnedFit(const char* funcname, const char* varexp, const char* selection = """", Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); virtual voidUseCache(Int_t maxCacheSize = 10, Int_t pageSize = 0); virtual voidTTree::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTTree::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTTree::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TChain.html:18168,Test,TestBit,18168,root/html526/TChain.html,https://root.cern,https://root.cern/root/html526/TChain.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"SetMinRelativeError(.01);; ; // variables to hold the temporary input data; double d;; double e;; ; // Print out the start parameters; fit->Print(""p"");; ; printf(""======================================\n"");; ; // Create training sample; int i;; for (i = 0; i < nData ; i++) {; ; // Make some data; makeData(x,d,e);; ; // Add the row to the fit object; fit->AddRow(x,d,e);; }; ; // Print out the statistics; fit->Print(""s"");; ; // Book histograms; fit->MakeHistograms();; ; // Find the parameterization; fit->FindParameterization();; ; // Print coefficents; fit->Print(""rc"");; ; // Get the min and max of variables from the training sample, used; // for cuts in test sample.; double *xMax = new double[nVars];; double *xMin = new double[nVars];; for (i = 0; i < nVars; i++) {; xMax[i] = (*fit->GetMaxVariables())(i);; xMin[i] = (*fit->GetMinVariables())(i);; }; ; nData = fit->GetNCoefficients() * 100;; int j;; ; // Create test sample; for (i = 0; i < nData ; i++) {; // Make some data; makeData(x,d,e);; ; for (j = 0; j < nVars; j++); if (x[j] < xMin[j] || x[j] > xMax[j]); break;; ; // If we get through the loop above, all variables are in range; if (j == nVars); // Add the row to the fit object; fit->AddTestRow(x,d,e);; else; i--;; }; //delete gRandom;; ; // Test the parameterizatio and coefficents using the test sample.; if (doFit); fit->Fit(""M"");; ; // Print result; fit->Print(""fc v"");; ; // Write code to file; fit->MakeCode();; ; // Write histograms to disk, and close file; output->Write();; output->Close();; delete output;; ; // Compare results with reference run; int compare = CompareResults(fit, doFit);; if (!compare) {; printf(""\nmultidimfit .............................................. OK\n"");; } else {; printf(""\nmultidimfit .............................................. fails case %d\n"",compare);; }; ; // We're done; delete fit;; delete [] xMin;; delete [] xMax;; return compare;; }; d#define d(i)Definition RSha256.hxx:102; e#define e(i)Definition RSha256.hxx:103; Riostr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/multidimfit_8C.html:10036,test,test,10036,doc/master/multidimfit_8C.html,https://root.cern,https://root.cern/doc/master/multidimfit_8C.html,3,"['Test', 'test']","['Test', 'test']"
Testability,"SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetReadOnly(Bool_t on = kTRUE)TOGGLE GETTER ; virtual voidSetSBRange(Int_t direction); virtual voidSetSelectBack(Pixel_t p); virtual voidSetSelectFore(Pixel_t p); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidSetText(TGText* text); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGView::SetVisibleStart(Int_t newTop, Int_t direction); virtual voidSetVsbPosition(Long_t newPos); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidShowBottom(); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector&); virtual voidShowTop(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Long_tToObjXCoord(Long_t xCoord, Long_t line); virtual Long_tToObjYCoord(Long_t yCoord); TGLongPositionTGView::ToPhysical(TGLongPosition coord) const; virtual Long_tToScrXCoord(Long_t xCoord, Long_t line); virtual Long_tToScrYCoord(Long_t yCoord); TGLongPositionTGView::ToVirtual(TGLongPosition coord) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidUpdate(); virtual voidTGView::UpdateBackgroundStart(); virtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGTextView.html:16642,Test,TestBit,16642,root/html534/TGTextView.html,https://root.cern,https://root.cern/root/html534/TGTextView.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGContainer::SetPageDimension(const TGDimension& dim); virtual voidTGContainer::SetPageDimension(UInt_t w, UInt_t h); virtual voidTGContainer::SetPagePosition(const TGPosition& pos); virtual voidTGContainer::SetPagePosition(Int_t x, Int_t y); voidSetSelected(TGListTreeItem* item); virtual voidTGFrame::SetSize(const TGDimension& s); voidSetToolTipItem(TGListTreeItem* item, const char* string); voidSetToolTipText(const char* text, Int_t x, Int_t y, Long_t delayms); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetUserControl(Bool_t ctrl = kTRUE); virtual voidTGContainer::SetVsbPosition(Int_t newPos); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp); Int_tSort(TGListTreeItem* item); Int_tSortChildren(TGListTreeItem* item); Int_tSortSiblings(TGListTreeItem* item); virtual voidTGContainer::SpacePressed(TGFrame*)SIGNAL ; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Int_tTextWidth(const char* c); voidToggleItem(TGListTreeItem* item); virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTGContainer::UnSelectAll()SIGNAL ; voidUnselectAll(Bool_t draw); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGListTree.html:20340,Test,TestBit,20340,root/html528/TGListTree.html,https://root.cern,https://root.cern/root/html528/TGListTree.html,6,['Test'],"['TestBit', 'TestBits']"
Testability,"SetObjectStat(Bool_t stat); virtual voidTGraph::SetPoint(Int_t i, Double_t x, Double_t y); virtual voidSetPointError(Double_t exl, Double_t exh, Double_t eyl, Double_t eyh, Double_t exld = 0, Double_t exhd = 0, Double_t eyld = 0, Double_t eyhd = 0)MENU ; virtual voidSetPointError(Int_t i, Double_t exl, Double_t exh, Double_t eyl, Double_t eyh, Double_t exld = 0, Double_t exhd = 0, Double_t eyld = 0, Double_t eyhd = 0); virtual voidTGraph::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidTGraph::Sort(Bool_t(*)(const TGraph*,Int_t,Int_t) greater = &TGraph::CompareX, Bool_t ascending = kTRUE, Int_t low = 0, Int_t high = -1111); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGraphBentErrors(); TGraphBentErrors(Int_t n); TGraphBentErrors(const TGraphBentErrors& gr); TGraphBentErrors(Int_t n, const Float_t* x, const Float_t* y, const Float_t* exl = 0, const Float_t* exh = 0, const Float_t* eyl = 0, const Float_t* eyh = 0, const Float_t* exld = 0, const Float_t* exhd = 0, const Float_t* eyld = 0, const Float_t* eyhd = 0); TGraphBentErrors(Int_t n, const Double_t* x, const Double_t* y, const Double_t* exl = 0, const Double_t* exh = 0, const Double_t* eyl = 0, const Double_t* eyh = 0, const Double_t* exld = 0, const Double_t* exhd = 0, const Double_t* eyld = 0, const Double_t* eyhd = 0); virtual voidTGraph::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidTGraph::Zero(Int_t& k, Double_t AZ, Double_t BZ, Double_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGraphBentErrors.html:12164,Test,TestBits,12164,root/html602/TGraphBentErrors.html,https://root.cern,https://root.cern/root/html602/TGraphBentErrors.html,2,['Test'],['TestBits']
Testability,"SetObservables(const RooArgSet&); virtual voidSetParameters(RooArgSet&); virtual voidSetParametersForTestStat(const RooArgSet&); virtual voidSetPdf(RooAbsPdf&); virtual voidRooStats::TestStatSampler::SetPriorNuisance(RooAbsPdf*); virtual voidRooStats::TestStatSampler::SetSamplingDistName(const char* name); virtual voidSetTestSize(Double_t size); virtual voidSetTestStatistic(RooStats::TestStatistic*); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. TRandom*fRand; Double_tfSize; RooRealVar*fTestStatistic. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~DebuggingSampler(). SamplingDistribution* GetSamplingDistribution(RooArgSet& paramsOfInterest); Main interface to get a ConfInterval, pure virtual. Double_t EvaluateTestStatistic(RooAbsData& , RooArgSet& ); Main interface to evaluate the test statistic on a dataset. TestStatistic* GetTestStatistic() const; Get the TestStatistic. Double_t ConfidenceLevel() const; Get the Confidence level for the test. {return 1.-fSize;}. void Initialize(RooAbsArg& , RooArgSet& , RooArgSet& ); Common Initialization. void SetPdf(RooAbsPdf& ); Set the Pdf, add to the the workspace if not already there. {}. void SetParameters(RooArgSet& ); specify the parameters of interest in the interval. {}. void SetNuisanceParameters(const RooArgSet& ); specify the nuisance parameters (eg. the rest of the parameters). {}. void SetParametersForTestStat(const RooArgSet& ); specify the values of parameters used when evaluating test statistic. {}. void SetGlobalObservables(const RooArgSet& ); specify the conditional observables. {}. void SetTestSize(Double_t size); set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval). {fSize = size;}. void SetConfidenceLevel(Double_t cl); set the confidence level for the interval (eg. 0.95 for a 95% Confidence Interval). {fSize = 1.-cl;}. void Se",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__DebuggingSampler.html:2396,Test,TestStatistic,2396,root/html528/RooStats__DebuggingSampler.html,https://root.cern,https://root.cern/root/html528/RooStats__DebuggingSampler.html,6,['Test'],['TestStatistic']
Testability,"SetOn(Bool_t on = kTRUE, Bool_t emit = kFALSE); virtual voidSetPopup(TGedPopup* p); virtual voidTGTextButton::SetRightMargin(Int_t val); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTGCheckButton::SetState(EButtonState state, Bool_t emit = kFALSE); virtual voidTGButton::SetStyle(UInt_t newstyle); virtual voidTGButton::SetStyle(const char* style); virtual voidTGTextButton::SetText(TGHotString* new_label); virtual voidTGTextButton::SetText(const TString& new_label); virtual voidTGTextButton::SetTextColor(Pixel_t color, Bool_t global = kFALSE); virtual voidTGTextButton::SetTextJustify(Int_t tmode); virtual voidTGTextButton::SetTitle(const char* label); virtual voidTGButton::SetToolTipText(const char* text, Long_t delayms = 400)MENU ; virtual voidTGTextButton::SetTopMargin(Int_t val); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGButton::SetUserData(void* userData); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); voidTGTextButton::SetWrapLength(Int_t wl); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGedSelect(const TGedSelect&); TGedSelect(const TGWindow* p, Int_t id); virtual voidTGButton::Toggle(Bool_t emit = kFALSE); virtual voidTGButton::Toggled(Bool_t on)SIGNAL ; virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGedSelect.html:16524,Test,TestBit,16524,root/html602/TGedSelect.html,https://root.cern,https://root.cern/root/html602/TGedSelect.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"SetOption(Option_t* option = "">""); static voidSetProxy(const char* url); static voidTFile::SetReadaheadSize(Int_t bufsize = 256000); virtual voidTFile::SetReadCalls(Int_t readcalls = 0); static voidTFile::SetReadStreamerInfo(Bool_t readinfo = kTRUE); virtual voidTDirectoryFile::SetSeekDir(Long64_t v); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTDirectoryFile::SetTRefAction(TObject* ref, TObject* parent); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTDirectoryFile::SetWritable(Bool_t writable = kTRUE); virtual voidShowMembers(TMemberInspector& insp); virtual voidTFile::ShowStreamerInfo(); static Bool_tTFile::ShrinkCacheFileDir(Long64_t shrinkSize, Long_t cleanupInteval = 0); virtual Int_tTFile::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); voidTFile::SumBuffer(Int_t bufsize); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTFile::UseCache(Int_t maxCacheSize = 10, Int_t pageSize = 0); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTFile::Write(const char* name = 0, Int_t opt = 0, Int_t bufsiz = 0); virtual Int_tTFile::Write(const char* name = 0, Int_t opt = 0, Int_t bufsiz = 0) const; virtual Bool_tTFile::WriteBuffer(const char* buf, Int_t len); virtual voidTDirectoryFile::WriteDirHeader(); virtual voidTFile::WriteFree(); virtual voidTFile::WriteHeader(); virtual voidTDirectoryFile::WriteKeys(); Int_tTDirectory::WriteObject(const void* obj, const char* name, Option_t* option = """", Int_t bufsize = 0); virtual Int_tTDirectoryFile::WriteObjectAny(const void* obj, const char* classname, const char* name, Option_t* option = """", Int_t bufsize = 0); virtual Int_tTDirectoryFile::WriteObjectAny(const void* obj, const TClass* cl, const char* name, Option_t* option = """", Int_t bufsize = 0); virtual USho",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TWebFile.html:13409,Test,TestBits,13409,root/html528/TWebFile.html,https://root.cern,https://root.cern/root/html528/TWebFile.html,3,['Test'],['TestBits']
Testability,"SetPageDimension(UInt_t w, UInt_t h); virtual voidTGContainer::SetPagePosition(const TGPosition& pos); virtual voidTGContainer::SetPagePosition(Int_t x, Int_t y); voidSetSelected(TGListTreeItem* item); virtual voidTGFrame::SetSize(const TGDimension& s); voidSetToolTipItem(TGListTreeItem* item, const char* string); voidSetToolTipText(const char* text, Int_t x, Int_t y, Long_t delayms); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetUserControl(Bool_t ctrl = kTRUE); virtual voidTGContainer::SetVsbPosition(Int_t newPos); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; Int_tSort(TGListTreeItem* item); Int_tSortChildren(TGListTreeItem* item); Int_tSortSiblings(TGListTreeItem* item); virtual voidTGContainer::SpacePressed(TGFrame*)SIGNAL ; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Int_tTextWidth(const char* c); TGListTree(TGCanvas* p, UInt_t options, Pixel_t back = GetWhitePixel()); TGListTree(TGWindow* p = 0, UInt_t w = 1, UInt_t h = 1, UInt_t options = 0, Pixel_t back = GetWhitePixel()); voidToggleItem(TGListTreeItem* item); virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTGContainer::UnSelectAll()SIGNAL ; voidUnselectAll(Bool_t draw); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGListTree.html:20223,Test,TestBit,20223,root/html602/TGListTree.html,https://root.cern,https://root.cern/root/html602/TGListTree.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"SetParNames(const char* name0 = ""p0"", const char* name1 = ""p1"", const char* name2 = ""p2"", const char* name3 = ""p3"", const char* name4 = ""p4"", const char* name5 = ""p5"", const char* name6 = ""p6"", const char* name7 = ""p7"", const char* name8 = ""p8"", const char* name9 = ""p9"", const char* name10 = ""p10"")MENU ; virtual voidSetRange(Double_t xmin, Double_t xmax); virtual voidSetRange(Double_t xmin, Double_t ymin, Double_t xmax, Double_t ymax); virtual voidSetRange(Double_t xmin, Double_t ymin, Double_t zmin, Double_t xmax, Double_t ymax, Double_t zmax)MENU ; virtual voidTF1::SetSavedPoint(Int_t point, Double_t value); virtual voidTF1::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TF3(); TF3(const TF3& f3); TF3(const char* name, const char* formula, Double_t xmin = 0, Double_t xmax = 1, Double_t ymin = 0, Double_t ymax = 1, Double_t zmin = 0, Double_t zmax = 1); TF3(const char* name, Double_t(*)(Double_t*,Double_t*) fcn, Double_t xmin = 0, Double_t xmax = 1, Double_t ymin = 0, Double_t ymax = 1, Double_t zmin = 0, Double_t zmax = 1, Int_t npar = 0, Int_t ndim = 3); TF3(const char* name, Double_t(*)(const Double_t*,const Double_t*) fcn, Double_t xmin = 0, Double_t xmax = 1, Double_t ymin = 0, Double_t ymax = 1, Double_t zmin = 0, Double_t zmax = 1, Int_t npar = 0, Int_t ndim = 3); TF3(const char* name, ROOT::Math::ParamFunctor f, Double_t xmin = 0, Double_t xmax = 1, Double_t ymin = 0, Double_t ymax = 1, Double_t zmin = 0, Double_t zmax = 1, Int_t npar = 0, Int_t ndim = 3); virtual voidTF1::Update(); virtual voidTObject::UseCurrentStyle(); virtual Double_tTF1::Variance(Double_t a, Double_t b, const Doub",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TF3.html:17315,Test,TestBit,17315,root/html604/TF3.html,https://root.cern,https://root.cern/root/html604/TF3.html,1,['Test'],['TestBit']
Testability,"SetParameters(Int_t cycles); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); const TString&TMVA::Configurable::GetReferenceFile() const; TMVA::MsgLogger&TMVA::FitterBase::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; voidTObject::MakeZombie(); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. virtual voidDeclareOptions(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MCFitter.html:6593,Log,Log,6593,root/html602/TMVA__MCFitter.html,https://root.cern,https://root.cern/root/html602/TMVA__MCFitter.html,2,['Log'],['Log']
Testability,"SetPictureFileName(const TString& f); voidTGLViewer::SetPointScale(Float_t s); voidTGLViewer::SetResetCamerasOnUpdate(Bool_t v); voidTGLViewer::SetSmartRefresh(Bool_t smart_ref); voidTGLViewer::SetSmoothLines(Bool_t s); voidTGLViewer::SetSmoothPoints(Bool_t s); voidTGLViewer::SetStereo(Bool_t s); voidTGLViewer::SetStereoEyeOffsetFac(Float_t f); voidTGLViewer::SetStereoFrustumAsymFac(Float_t f); voidTGLViewer::SetStereoZeroParallax(Float_t f); voidTGLViewerBase::SetStyle(Short_t st); virtual voidTObject::SetUniqueID(UInt_t uid); voidTGLViewerBase::SetWFLineW(Float_t w); voidShow(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); Short_tTGLViewerBase::Style() const; voidTGLViewer::SwitchColorSet(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTGLLockable::TakeLock(TGLLockable::ELock lock) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGLSAViewer(TVirtualPad* pad, TGLFormat* format = 0); TGLSAViewer(const TGWindow* parent, TVirtualPad* pad, TGedEditor* ged = 0, TGLFormat* format = 0); voidToggleEditObject(); voidToggleOrthoDolly(); voidToggleOrthoRotate(); virtual voidTGLViewer::UnClicked(TObject* obj, UInt_t button, UInt_t state)SIGNAL ; virtual voidTGLViewer::UnMouseOver(TObject* obj, UInt_t state)SIGNAL ; voidTGLViewer::UpdateScene(Bool_t redraw = kTRUE); virtual voidTObject::UseCurrentStyle(); voidTGLViewer::UseDarkColorSet(); voidTGLViewer::UseDefaultColorSet(Bool_t x); static voidTGLViewer::UseDefaultColorSetForNewViewers(Bool_t x); voidTGLViewer::UseLightColorSet(); static TVirtualViewer3D*TVirtualViewer3D::Viewer3D(TVirtualPad* pad = 0, Option_t* type = """"); Int_tTGLViewer::ViewportDiagonal() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Float_tTGLViewerBase::WFLineW() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLSAViewer.html:17105,Test,TestBits,17105,root/html602/TGLSAViewer.html,https://root.cern,https://root.cern/root/html602/TGLSAViewer.html,1,['Test'],['TestBits']
Testability,"SetRangesPolar(const TH1* hist); Bool_tSetRangesSpherical(const TH1* hist); TGLPlotCoordinates(const TGLPlotCoordinates&). Data Members; private:. EGLCoordTypefCoordType; Double_tfFactor; Bool_tfModified; Rgl::BinRange_tfXBins; Bool_tfXLog; Rgl::Range_tfXRange; Rgl::Range_tfXRangeScaled; Double_tfXScale; Rgl::BinRange_tfYBins; Bool_tfYLog; Rgl::Range_tfYRange; Rgl::Range_tfYRangeScaled; Double_tfYScale; Rgl::BinRange_tfZBins; Bool_tfZLog; Rgl::Range_tfZRange; Rgl::Range_tfZRangeScaled; Double_tfZScale. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLPlotCoordinates(); Constructor. ~TGLPlotCoordinates(); Destructor. void SetCoordType(EGLCoordType type); If coord type was changed, plot must reset sections (if any),; set fModified. EGLCoordType GetCoordType() const; Get coordinates type. void SetXLog(Bool_t xLog); If log changed, sections must be reset,; set fModified. Bool_t GetXLog() const; Get X log. void SetYLog(Bool_t yLog); If log changed, sections must be reset,; set fModified. Bool_t GetYLog() const; Get Y log. void SetZLog(Bool_t zLog); If log changed, sections must be reset,; set fModified. Bool_t GetZLog() const; Get Z log. void ResetModified(); Reset modified. Bool_t Modified() const; Modified. Bool_t SetRanges(const TH1* hist, Bool_t errors = kFALSE, Bool_t zBins = kFALSE); Set bin ranges, ranges. Int_t GetNXBins() const; Number of X bins. Int_t GetNYBins() const; Number of Y bins. Int_t GetNZBins() const; Number of Z bins. const Rgl::BinRange_t & GetXBins() const; X bins range. const Rgl::BinRange_t & GetYBins() const; Y bins range. const Rgl::BinRange_t & GetZBins() const; Z bins range. const Rgl::Range_t & GetXRange() const; X range. Double_t GetXLength() const; X length. const Rgl::Range_t & GetYRange() const; Y range. Double_t GetYLength() const; Y length. const Rgl::Range_t & GetZRange() const; Z range. Double_t GetZLength() const; Z length. const Rgl::Range_t & GetXRangeScaled() const; Scaled range. const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLPlotCoordinates.html:3155,log,log,3155,root/html602/TGLPlotCoordinates.html,https://root.cern,https://root.cern/root/html602/TGLPlotCoordinates.html,2,['log'],['log']
